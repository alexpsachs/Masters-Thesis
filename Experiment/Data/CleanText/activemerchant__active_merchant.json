{
    "Shopify": "Haven't heard of this problem anywhere else. Please open a ticket in the ActiveMerchant bug tracker if you still have this problem.\n. Can you use the Rails plugin ordering facility to load ActiveMerchant after Clearance? Please open a ticket in the bug tracker for this.\n. There is a gem on rubyforge.\n. ",
    "rsanheim": "One more note: we were subclassing the Clearance Users controller, and adding a custom method to it - so there was also that in play.\n. ",
    "laserlemon": "Thanks. I see now that there's also a gem on Gemcutter. Is that gem official or should I use RubyForge?\n. ",
    "sho": "Speaking of the gem, how about a version bump? Last one was more than 6 months ago...\n. ",
    "codyfauser": "I can't reproduce this. Can you please attach a failing unit test to a ticket at https://jadedpixel.lighthouseapp.com/projects/11599-active-merchant/overview.\nI get failed validations on the card type, since 000000000000 doesn't match any of the known card brands regexes.\n. This is fixed\n. The goal is to remove ActiveSupport from ActiveMerchant completely. It is barely using any of the functionality. Want to take on that challenge?\n. Thanks man! Sorry for the delay on the response to this issue.\n. Looks like the delegating accessors are missing. If you comment out the requires in test_helper.rb that are only for the \"integrations\" like the offsite PayPal Website Payments Standard code in ActiveMerchant then there should be no code that implicitly requires ActiveSupport in the tests: https://gist.github.com/524ac7cc54f7454d397b\n. In the long run it would be nice to move the integrations into their own project and keep the core of ActiveMerchant focused on actual credit card payments.\n. I'm pretty sure that blank? is probably one of the last things needed. For what we're using a 2.5 MB library seems like overkill to me.\n. Alright you convinced me. We'll make Active Merchant 2.0 require active support 3.0 then. Please make a patch that requires only what is needed from Active Support 3.0 and I'll make a 2.0 branch. Thanks for your work on this.\n. Applied. Thanks again\n. Many of the other gateways support partial refunds, so if you want to patch this I'd accept it. Please send a pull request or add a patch to https://jadedpixel.lighthouseapp.com/projects/11599-active-merchant/overview\n. There is no real need for the use of the inflections. I'd accept a patch to remove use of the inflector.\n. Fixed\n. Just tried to run rake, but it fails saying that \"camelize\" is undefined. It works if I add require 'active_support/core_ext/string/inflections'. Since we're not defining inflections, but just using the inflector then hopefully this still solves the problem of the route reloading. Let me know.\nThanks\n. Ok, merged your commits, added that require and pushed. Thanks!\n. We haven't heard of this issue before and we're processing many, many transactions for thousands of customers through PayPal. Try adding a logger to the gateway: ActiveMerchant::Billing::PaypalGateway.logger = Logger.new(STDOUT). Then you will see the exact amounts transmitted to PayPal as well as the raw response. If you are correctly sending the 130 cents PayPal and receiving the wrong response and seeing the wrong values in the PayPal admin then you should open a ticket with paypal.com/mts. Feel free to open this with more details when you have them.\n. Patch looks great. 2 tiny tweaks needed:\n1. AM assumes :login and :password for the gateway credentials, even if they're something else. Makes it a bit easier to switch gateways.\n2. You need to use the ssl_post method provided by the PostsData module. See other gateways for how it works. Basically you need to use that to get retry logic, logging, SSL settings, etc, all for free.\n. merged\n. Doesn't matter to much IMO. Dennis, can you pull this in?\n. Sent it over to Jonathan for inspection.\n\nCody Fauser\nShopify\nOn May 12, 2011, at 12:19 AM, tobireply@reply.github.com wrote:\n\nGreat patch. Ping @codyfauser. \n-- Tobi\nCEO Shopify\nWritten with thumbs. \nOn May 9, 2011, at 8:22 PM, wolframarnoldreply@reply.github.com wrote:\n\nPayflow Express payments (the redirect to the PayPal screen), did not support order line items though ActiveMerchant so far. I've added them. It took quite some trial & error to get this sorted out, and needs to be enabled from the PayPal Tech Support side, but it is supported, and I've documented the process.\nI've also documented all supported fields extensively in the PayflowExpressGateway class, which parses nicely via rdoc.\nFor credit card reference transactions, I've added additional fields that PayFlow will accept. Notably the Comment and Comment2 are important, as they get passed through to the backend and are helpful for reporting purposes.\nLastly, I'm also populating the CustRef attribute with the value of options[:customer], which gives you a customer reference passed through to the backend (at manager.paypal.com) for better reporting.\nIf you want me to open a LightHouse issue as well, please let me know.\nThanks,\nWolf\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/110\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/110#issuecomment-1144586\n. The PayPal integrations have been used successfully in many currencies. Check the PayPal docs and/or get in touch with PayPal via http://paypal.com/mts and ensure that INR is a supported currency with the particular gateway you're using.\n. I agree with Nathaniel. It seems like you can just use Samurai's #reverse method to implement both both #void and #refund in the gateway.\n. Awesome! Thor didn't exist when I added Rubigen. Thanks for the update :)\n. +1\n. Would love to extract out the integrations to another project as well.\n. Offsite Payment Integrations?\n\nOn Monday, June 2, 2014, Nathaniel Talbott notifications@github.com wrote:\n\n@duff https://github.com/duff probably, but brainstorm it goes.\nA few more ideas: active_offsite, active_offsites, active_offsite_payments,\noffsite_payments.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/issues/1238#issuecomment-44888134\n.\n\n\nCody Fauser\nCTO - Shopify\n. ship it\nOn Mon, Jun 2, 2014 at 7:49 PM, John Duff notifications@github.com wrote:\n\n[image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/issues/1238#issuecomment-44904994\n.\n\n\nCody Fauser\nCTO - Shopify\n. Sounds good, thanks.\nOn Wed, Aug 20, 2014 at 3:50 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nSince this is just an FYI PR, going to close it to keep things tidy, but\nof course will leave the branch there.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1313#issuecomment-52833891\n.\n\n\nCody Fauser\nCTO - Shopify\n. @edward IIRC It was done and working, but I hadn't gone through the\ntesting/certification process.\nOn Mon, Sep 15, 2014 at 3:35 PM, Edward Ocampo-Gooding \nnotifications@github.com wrote:\n\nOk, I\u2019m picking this up again.\n@codyfauser https://github.com/codyfauser do you remember what parts\nwere left? Should I just run the tests and fix stuff if they\u2019re broken?\n/cc @mhashemi86 https://github.com/mhashemi86\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1313#issuecomment-55645826\n.\n\n\nCody Fauser\nCTO - Shopify\n. ",
    "joevandyk": "What is wrong with the example?\n. I don't think ActiveMerchant will work in Rails 3.1 until this gets fixed, by the way.\n. Are you sure that is the line?\n. You don't need to set the mode to :production -- if you are in test mode, then you can set it.  If not, then you don't have to do anything.\n. Authorize.net says they are disabling TLS 1.0, that only TLS >= 1.1 will be supported. How can we verify if we're using the right one?\n. +1\n. ",
    "tmm1": "It raises that error when run\n. ",
    "kbrock": "I modified bogus gateway to accept some valid credit card numbers. so you don't have to use bogus credit card numbers. These were credit card numbers supplied by TrustCommerce\ncommit: f9e8acf49a8a83deb08da226dbbcf58475f1f3a5\n. Hi Jon,\nI submitted 2 other tickets. I'm waiting on this to finish my testing before I submit via lighthouse.\nI'm beginning to realize that I want to produce a bogus gateway that is specific to my vendor's gateway. (currently TrustCommerce) - the parameter sections are different across vendors. So something that works well for me may not work well for you.\nHere is what I'm currently using:\nhttp://github.com/kbrock/active_merchant/blob/master/lib/active_merchant/billing/gateways/bogus.rb\nPlease share how you are solving this problem. Would love some insight.\nThanks\n. ",
    "jonsgreen": "I am curious what the status of this ticket is at this point. This is a rather frustrating issue and cripples using the bogus gateway. The link to that commit seems to go nowhere.\n. A patch has been submitted on lighthouse: https://jadedpixel.lighthouseapp.com/projects/11599-active-merchant/overview\n. ",
    "jduff": "This hasn't seen any action in way too long, closing.\n. If this is resubmitted with some tests I can merge it in. That merge commit shouldn't be in there either.\n. Would someone be interested in getting this working against master again?\n. These commits need to be squashed and rebased against master.\n. Closing. Duplicates issue #45\n. It's not on the roadmap. If a pull request is provided that adds this it will be reviewed and possibly merged in.\n. Also, could you rebase this against master so that it cab be applied cleanly?\n. Closing. This is covered by commit a3db04fc.\n. Closing. If someone adds the remote test we can reopen.\n. This pull request needs a lot of work.\nRemove the patch file. \nAdd to the paypal.rb class instead of reopening the class. \nAdd methods instead having one 200 line method.\nTests.\nIf someone wants to fix this up please submit a new pull request.\n. We're not using lighthouse for patch submissions anymore and the account has been closed. Would you be able to resubmit this patch as a new pull request? I'll try and see if we have a backup of what was on lighthouse, but I don't think we do anymore.\n. In addition to the inline comments, all the commits should be squashed into one commit and rebased against master.\nIf someone fixes this pull request up I will merge it in, otherwise it's going to be closed.\n. Lets just keep this to the testmode changes, the rest doesn't really add any benefit. Can you merge 7bba21a and f465915 they don't really need to be split.\nAlso, with 812f65c, are there docs saying that these fields are required?\n. Before this is merged could you squash the commits down to one?\n. It looks like this has already been merged in with the following commit 7856811d\n. Instead of adding a whole new gateway would it be possible to do this within the current paypal gateway and add recurring, update_recurring, and cancel_recurring methods similar to how it is done in the authorize.net gateway?\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb\nAnd yes, this will never be merged in without some tests added as well.\n. Hi Matt, we've talked about this a bit and think that it would be a little bit confusing to have two interfaces to the same gateway. We also can't really replace the old method with this one since different credentials are used. Is there any way the current USA EPay gateway could use your code when the soap credentials are passed in and the current code when they are not? There should still be a separation between the two, so maybe two classes could be created for each and it delegates to the correct one depending on what credentials are given?\nIt would also be easier to manage if all of these were squashed into one commit.\n. Hey Mathew,\nOverall the changes look good, as good as piles of xml can possible look, at least :). The main suggestion is to go with the approach of having two gateway classes for the two different apis and have the main ePay gateway switch between them depending on the credentials. If you take a look at the Braintrree gateway it's doing something similar:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree.rb\nSince the current usa ePay gateway doesn't support the recurring and store methods I don't think they need to be added right away.\n. Hi Greg, would you mind merging these commits together since they're all related? It looks like the API key commit can stand on it's own, but the other ones should either be split up so that the tests for auth/capture are with the auth/capture commit and the same thing for refunds, or merge all three together.\nOnce this is done I'll merge it in right away.\n. This doesn't apply against master cleanly anymore, can you rebase against master and make sure the tests still run?\nA test should be added to check that the ccv code is in the request when it is included. Instead of changing the test test_should_create_customer_profile_transaction_auth_only_and_then_capture_only_requests could you add a new test for your case so we can make sure everything is still compatible?\nAlso, patches should be committed to their own branch.\n. Patches for Active Merchant should be done in their own branch. See the contributing section of the wiki https://github.com/Shopify/active_merchant/wiki/Contributing\n. Hi Nik, thanks for the awesome looking patch! I've updated the contributing docs, you're right, pull requests are the way to go now.\nOne question, is there a reason for locking rake to 0.8.7? It seems to work for me with the latest rake so if you could just drop the version off we should be good to go.\n. Hi Isaac, if you could just squash the first two commits I'll merge this in.\n. That is, the two commits adding mongrel to the gem file.\n. fixed by 40e24d2e6545098495888532337a7700e58446b8\n. All the other integrations use :credential2, I think it is better to leave it as is for consistency between the different integrations.\n. Would you be able to add some tests for these changes and make sure none are broken by what was changed.\n. This looks good to merge into master, can you just squash the 3 commits for the getting started file and I'll merge it in.\n. This looks great. There are a couple of unit test failures under ruby 1.9.2 and jruby (I think it's just a hash ordering thing). If you could fix those failures and make the change mentioned re merging the stored and regular purchase/authorize methods I will pull this in. Please squash all the changes into the one commit.\n. This looks pretty good, one suggestion. Instead of duplicating the code what about adding a method that could be called to add the items into the xml:\nadd_items_xml(xml, options) if options[:items]\nSomething along those lines?\n. Perfect, looks great. Can you just merge the two commits and I'll pull this in.\n. Not exactly sure what you did, but the pull request now shows 4 commits to be merged in. What you want to do is rebase and squash the commits. Take a look at the  guide here: http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\nIf you still have trouble I can squash them myself, it's just nicer if you can do it so that the commit shows up as coming from you.\n. covered by commit 55c970fe49da6b05c8663af6974f7f0954d14013\n. Looks great overall! Just a couple more comments inline.\n. It would be great to have some unit tests to make sure that the requests are being built correctly so that we don't need to run the remote tests for everything.\n. It looks like this should really be an offsite gateway. Jonathan and Brennan have contacted you directly about doing this. Closing until the correct type of integration is submitted.\n. This looks good. Can you just squash all the commits down into one before we merge it in?\n. Next week sometime should be good.\n. Is this any different than the BluePay gateway that is already in ActiveMerchant?\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/blue_pay.rb\nIf there are any additional features could they just be added to that implementation?\n. If this can replace the current BluePay implementation, and remains backwards compatible, it should. I don't see much benefit of having two of the same Gateway in ActiveMerchant.\nAlso, the formatting of patch is really messed up, could you fix that up it's kind of hard to read right now. There's also a number of global variables being used, those should be changed to instance variables.\nThe interface for recurring transactions should be the same as the other gateways that implement recurring. Take a look at Authorize.net, where you have recurring_payment it should just be recurring, cancel_rebilling should be cancel_recurring etc.\nWe also need unit and remote tests for all features. Since this should replace the current blue_pay implementation those tests should still pass, new tests should be added for the recurring functionality that was added.\nActually, now that I'm looking at things a bit more shouldn't the current implementation already support recurring since it subclasses Authorize.NET? This was the main feature these changes added and it should already be working since it subclasses Authorize.NET.\n. No Gateways support 3d secure, but some integrations do. The support is on the gateway side, not within ActiveMerchant. SagePay Form has this implemented.\n. This looks good, could you just remove the duplicate fixture that was added? Make sure to rebase into one commit and I can merge it in as soon as that's done.\n. This looks good overall, just a few comments.\nCould you also squash these commits into a couple logical changes and remove the merge commits (squashing might remove them).\nThanks for the patch!\n. Also, what do you guys think about splitting this into at least two patches? One for the new digest, signature generation stuff and another for the 3d secure. We're still working on figuring out the best interface for 3d secure so it might take a little bit longer to get that applied, but it shouldn't stop  the rest of the this patch from being merged in. \n. I think that breakdown makes sense. Smaller patches are much easier to review and will help get them applied faster.\n. Issues isn't the right place to ask questions about ActiveMerchant. Try the google group http://groups.google.com/group/activemerchant\n. Closing.\nWe don't accept feature requests for ActiveMerchant. If there are any new features you would like to add please create a pull request with the new code and we will review and merge the changes in.\n. Everything looks good now, I'll merge this in today.\n. closed by 39b13cd93b and 13bbfca5e7\n. If you want to build on top of the patch in #205 and add the options that are needed send a pull request and I can take a look and get it merged in.\n. Using send sounds like a good idea to me. Like you said it does away with the publicize hack and still let's us test the signature generation code.\nSent from my iPhone\nOn 2011-10-28, at 8:31 AM, S\u00e9bastien Grosjeanreply@reply.github.com wrote:\n\n@odorcicd do you like this approach? It still test private methods but without violent hack ;-)\nHow else would you do without testing the private method itself?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/213#issuecomment-2555525\n. closed by 5c62959013\n. closed by 73f36b2f5b\n. This had to be reverted because sending the options to Moneris without having it enabled on your account breaks. We need Moneris to ignore these options if the account doesn't have it enabled before we can merge this in.\n. Ya, that could work as well. Not my first choice, but if that's all we can do...\n. Looks good! Just need to clean up those couple of tests, and if we could add a remote test for refund that would be awesome.\n\n:shipit:\n. I tried this out on Ruby 1.8.7 with Rails 3.2 and a few tests are failing\nuninitialized constant ActiveSupport::SecureRandom\nIf you could fix this up for 1.8.7 I can merge it in.\n. We've been doing fairly regular releases, usually once a month. @ntalbott if you ping me when this latest round of cleanup is done and you think there are enough changes to warrant a release I can do one.\n. If a nice looking patch is put together then we will definitely consider merging it in. Just so you are aware we are planning on pulling in this patch https://github.com/Shopify/active_merchant/pull/33 which changes CreditCard to use ActiveModel in the near future. I'm not sure if that changes how you would approach the problem, thought I'd let you know just in case.\n. Closing, will create a new pull request without the extra commit.\n. Update using a Gemfile. Tested it out and appending these to the main Gemfile will override the previous dependencies.\n. closed by 078dc217e53d94de4ffa98206c94ca0aafec0be9\n. The last version that would work with rails 2.3.5 is activemerchant 1.10\nCurrently the minimum requirement is 2.3.11.\nSent from my iPhone\nOn 2012-02-09, at 4:04 PM, Andrew Jenkinsreply@reply.github.com wrote:\n\nHi, not so much an \"issue\" persay, but I'm not sure if the most current version is compatible with ruby 1.8.7/rails 2.3.5 and am hoping someone can confirm its applicability with my installation, or advise me as to which version I *should be using for this environment.\nfor reference, I did read the changelog, but at one point the minimum active support was 2.3.8 and I'm not sure if that's still in effect or not...I'm a bit to newbish to feel confident without asking.\nthanks,\nAndrew Jenkins\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/269\n. There is an assignment method for name that handles splitting here:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/credit_card.rb#L153\n\nThere isn't an accessor, but there is a method to return the name which was pasted in the ticket and can be found here:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/credit_card.rb#L149\nWith these two methods and the fact that that name= assigns @first_name and @last_name there shouldn't be anything stopping you from building a form that does this.\n. An integration being I active merchant doesn't mean it will e available within Shopify. We tend to enable a small set of gateways for a particular location that we feel are the best for our merchants. If an integration opens up new regions or has a superior feature set we tend to enable it, otherwise we normally direct customers to one of the existing integrations for their region.\nAs @ntalbott mentioned contact support and they will be able to help you get set up.\n. It looks like my UTF8 patch to money has been in for a couple of releases now, so as long as the tests pass under 1.8 and 1.9 we should be good.\nSent from my iPhone\nOn 2012-03-08, at 8:12 AM, Nathaniel Talbottreply@reply.github.com wrote:\n\nTests also seem to pass fine on 1.8.7; @jduff, any concerns about using a newer version of money?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/297#issuecomment-4390904\n. I'm going to test it out with a PayPal UK test account and make sure\neverything is working as expected. Once i've tested it out I'll merge\nthis in.\n. Looks good.\n. @jaredmoody @ntalbott I just reverted this change, it was breaking a number of things for us. The main issue seems to be that the last name on the card isn't being passed anymore when doing normal transactions.\n\nThis line doesn't seem to make sense either https://github.com/Shopify/active_merchant/pull/329/files#L0R433: \nxml.tag! 'companyTaxID', address[:companyTaxID] unless address[:company_tax_id].blank?\nThis whole change should be revisited and reviewed again.\n. There's a few other things:\nhttps://github.com/Shopify/active_merchant/pull/329/files#L0R474 - typos, and you've changed the behaviour - it used to use the options that the gateway was initialized with, now it uses options that are passed to the call, this will break people who were depending on the previous behaviour.\nhttps://github.com/Shopify/active_merchant/pull/329/files#L0L288 - address used to always use the credit card first and last name, I don't know why exactly this has broken some things, but again, it was likely done for a reason and people are depending on this.\nhttps://github.com/Shopify/active_merchant/pull/329/files#L0R636 - I would change this to fallback to creditcard. There's no reason to raise an argument error, in my opinion, and often people who use ActiveMerchant have their own credit card class which could cause this to fail.\nThe fact that there are a few typos and tests are passing means we're missing some tests as well, we should get those code paths covered.\nI'm not trying to pick on these changes at all, I would love to see it merged in, I just want to make sure we do as much as possible to reduce the risk for people upgrading. Thanks for all of your help with this!\n. @fabiokr It was built on top of this change and I couldn't revert this without reverting your change as well. Feel free to submit your change based on the latest master and I can merge it in.\n. Getting an integration into Shopify has little to do with getting it into active merchant. We enable the gateways that are the best for a particular area, have the best features for our customers and the ones they are asking for.\n. closed by 3f9b6217380fa1e6f3938394c834d440a3614712\n. closed by db577f83acff3da3d595d4fc012ff7dadbc8d729\n. :shipit:\n. closed by 7604a870ca334f32c45c2df62e6f353bb450d94c\n. @kenzie FYI you usually shouldn't add anything to the projects .gitignore file. For things like .rbenv-version you can add that to the global .gitignore on your system.\n. :shipit:\n. Using type was a bad idea in general and breaks some expectations you normally have, brand is a better name name for this.\nThe main driver for this, though, is that we switched to ruby 1.9 and uncovered some long outstanding issues that were hidden due to the fact that the type method in our internal CreditCard class returned the class in 1.8, but is now returning NoMethodError. Technically using type wouldn't be too bad, but it can hide errors, confusing, etc so better to just avoid it completely.\n. :shipit:\n. You were able to verify that this passes the DTD? :shipit:\n. awesome, :shipit:\n. Looks good. Maybe we can add an issue to refactor the base test? method.\n. Ya, it's not ideal but we need to work with what the gateways give us. I prefer something like this over a one off option for a specific gateway or breaking the interface many people depend on. I say :shipit: but also send the gateway an email and see if they might fix it so we can use the partial capture call with the full amount. We could also add the total amount option so if it's provided we skip the double post, but I would wait until there is an actual need for that.\n. I think we determined that this can be controlled by a setting in the merchant account, Chris can verify this.\nJohn Duff\nSoftware Developer @ Shopify\nSent from my iPhone\nOn 2012-07-20, at 3:40 PM, Nathaniel Talbottreply@reply.github.com wrote:\n\nAnyone object to me applying @jduff's feedback and merging?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/410#issuecomment-7139291\n. Awesome, :shipit:\n. I don't feel like this is a common enough use case to pull this in. I would keep the customized mock in your application since it is fairly specific to the way you are using active merchant in your application.\n\nJohn Duff\nSoftware Developer @ Shopify\nSent from my iPhone\nOn 2012-08-24, at 5:19 AM, Philipp Fehre notifications@github.com wrote:\n\nActually the BogusGateway does not allow testing the Paypal specific methods like setup_authorization, since the Application I am working on only works with Paypal only I wanted to be able to test my code with these methods in place as well. That was the reason to extend the Bogus Gateway to also include these methods and give the correct responses.\nSo in my code the PaypalBogusGateway stands in for a PaypalExpressGateway and responds to the setup_* methods in the form a Paypal Gateway would.\n\u2014\nReply to this email directly or view it on GitHub.\n. Some really minor comments, other than that looks great! :shipit:\n. Could you add some tests?\n. We require unit and remote tests for all ActiveMerchant changes. Please add the tests and we can take another look.\n. Feel free to submit a pull request, the statement is that Shopify is not planning to put effort into or support this gateway.\n. @Soleone code review\n. :shipit:\n\nJohn Duff\nSoftware Developer @ Shopify\nSent from my iPhone\nOn 2012-08-22, at 4:24 PM, Dennis Theisen notifications@github.com wrote:\n\nupdated with your suggestion\n\u2014\nReply to this email directly or view it on GitHub.\n. The point of active merchant is to provide a common interface to all the gateways, you've just introduced a difference between these two and the 50 other gateways. If this is the behavior people will always want when doing a refund, then it should be rolled into the refund method. If this isn't something you would always want to do then it should be left alone and the consumer can decide what they want to do.\n. ssl_post will take care of this for you if you turn on retry_safe. Take a look at https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/payflow/payflow_common_api.rb#L26\n. Overall this is good with me, just a few questions.\n. Ya, go for it, :shipit:\n. Ping @BlakeMesdag \n. :shipit:\n. Please submit a pull request with the change.\n. Could you also post an example of how a client (user of active merchant) would implement this gateway in their site as well?\n. I would like to keep ActiveMerchant in the book if possible. Was the code\nrequired moved somewhere and we just need to load something different?\n\nI'm willing to put a bit of work in to keep things compatible as long as\nwe're not constantly tracking a moving target.\nJohn Duff\nSoftware Developer @ Shopify.com\nOn Mon, Oct 15, 2012 at 2:04 PM, Sam Ruby notifications@github.com wrote:\n\nThis likely will mean that Active Merchant will be dropped from Agile Web\nDevelopment with Rails.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/477#issuecomment-9455053.\n. Awesome, that sounds simple enough, I will investigate. Keep us in the loop for any other changes as well and we'll do what we can.\n. I'll get in touch with them. They sent us docs on this and we tested it, but not using in production yet.\n\nJohn Duff\nSoftware Developer @ Shopify\nSent from my iPhone\nOn 2012-11-09, at 3:05 PM, Nathaniel Talbott notifications@github.com wrote:\n\nI ended up filtering email out in our product before it gets passed to Stripe, but I'd still like to see this fixed ASAP, as it seems that one way or another it's broken at the moment.\n\u2014\nReply to this email directly or view it on GitHub.\n. We should add a test for purchase that checks the client details are submitted if they are present.\n\nWe also need to check the Shopify side to make sure these are the same keys we pass. Authorize.net should already be setup with this.\n. :shipit:\n. :ok: \n. Tests need updating as well\n. Void can only be done against purchase or capture transactions, meaning the capture would need to be for the full amount. You must pass the actual amount to capture so that doesn't work for us.\nMy recommendation is to disable void within Shopify, unless you see an alternative?\n. I think I just saw something get merged for moneris, was that a fix for\nthis issue?\nOn Saturday, January 19, 2013, Nathaniel Talbott wrote:\n\nAny resolution on voiding in MerchantWare? Should we remove it from\nActiveMerchant as unsupported?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/516#issuecomment-12461827.\n\n\nJohn Duff\nDeveloper @ Shopify\n. I think I was confusing it with orbital. I'll check on this again, do you\nguys use it at all?\nOn Saturday, January 19, 2013, Nathaniel Talbott wrote:\n\nI'm not seeing anything Moneris related merged for over a month.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/516#issuecomment-12463183.\n\n\nJohn Duff\nDeveloper @ Shopify\n. We disabled void within Shopify since it doesn't work as you would expect.\nIf someone wants to fix the implementation I'm okay with that, otherwise\nmaybe we should remove from ActiveMerchant.\nJohn Duff\nDeveloper @ Shopify\nOn Mon, Jan 21, 2013 at 9:20 AM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nWe've added support for Moneris recently, but haven't had this issue\nreported. A lot of our merchants don't even use void, so we won't\nnecessarily run into it for a while.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/516#issuecomment-12499546.\n. This works? I thought I tried this and it didn't work, but maybe I'm wrong. I was also getting pretty confused with the two issues.\n\nIf this does it, amazing, :shipit: \n. This looks like it does the job, clever approach with the purchase method. We can have @Soleone take a final look as well maybe, but nothing big jumps out to me.\n. The proposed fix is pretty dangerous, in my opinion. If the capture happens and then there are network issues and the void can't happen we're left in a much worse state having taken money when we were actually trying to just void a transaction.\nBefore making this change merchant ware should be aware of the potential fail cases here. If they are okay with it then lets go for it.\n. You can't pass a 0 value, capture fails. You can pass nil but I'm not convinced that this works as we expect since the response has a nil amount.\n. Waiting on a response from them.\n. One of our guys is working on it, should have something next week cc @melari \n. @ZenCocoon if we check if crypt_type exists do the tests pass? I get the feeling that's the issue.\n. ping @kenzie on this as well, hopefully you can check this out. I don't have moneris credentials to test this out.\n. for some reason those credentials don't work for me at all.\n. I've got a patch that looks like it fixes this that I will post in a second.\n. Closed by 4fc59ff20944e39d15d08a9e445e147a0c699057\n. @ZenCocoon and @kenzie mind taking a look and testing it out? Also wondering about the ramifications of always sending the default crypt_type, if nothing is set, does that make sense? Before the previous patch this wasn't happening so I want to make sure it's not going to cause unintended side effects.\n. active merchant is supposted to abstract away the gateway nuances, this is a gateway nuance that AM should hide from the users imo.\nThe only thing I might have a slight problem with is having the list of currencies in the base class itself, since it's likely gateway specific, but until there's a reason to change it I don't have any issues with leaving it there\n. :shipit: \n. From what I saw there is a bit of duplication we can clean up, but I'm not sure about the complexity metric. Large method are considered to be more complex, but in a lot of cases with ActiveMerchant these methods are building XML and the verbosity actually makes the methods easier to understand.\nBasically, these tips are great, but should be taken with a grain of salt. There are some useful ones in there that we should create issues for and tackle.\nRe CodeClimate: It would be cool if you could create a github issue from specific problems that are linked back.\n. Some ActiveMerchant users may depend on this functionality so we should remain backwards compatible and add a deprecation notice for the invalid use. We can do this by changing the method signature to by *args and inspect the number of arguments that are provided, if 2 or more then we know it's the deprecated case and we can warn the user.\nLet me know if you have any questions on making this change, and thanks, this needed to be fixed!\n. Dates and times are the worst.\n:shipit:\nOn Tuesday, January 22, 2013, Nathaniel Talbott wrote:\n\nSo it turns out this was a different issue than #23https://github.com/Shopify/active_merchant/issues/23;\nthe time zone was not being handled correctly in building the resulting\ntime. The attached commit fixes the issue, and has a test to demonstrate.\nPlease review @jduff https://github.com/jduff @vitkozhttps://github.com/vitkoz\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/542#issuecomment-12573113.\n\n\nJohn Duff\nDeveloper @ Shopify\n. :shipit: \n. :shipit: I'll get the description updated next week.\n. Cool, description should be updated now as well!\n. Nice job! :shipit: \nI'll help you test it out in Shopify tomorrow\n. Changing existing gateways in a big way is always troubling because often\nsomeone depended on a less tested feature that gets missed.\nI would suggest doing v12 as a new standalone gateway. This will reduce the\npain for people using the existing implementation, less switching in the\ncode etc. You could extract any common bits, or subclass one if it makes\nsense to. How does that sound?\nOn Thursday, March 7, 2013, Gabe Martin-Dempesy wrote:\n\nI received feedback from First Data support about a couple more relevant\npoints regarding the API versionshttps://firstdata.zendesk.com/entries/407571-First-Data-Global-Gateway-e4-Web-Service-API-Reference-Guide#apx1being used:\n1. The existing implementation uses\n   https://api.globalgatewaye4.firstdata.com/transaction when connecting\n   to the API, which corresponds to API version 8. Version 8 is still\n   officially supported, but does not support TransArmor tokenization\n   according to the documentation.\n2. Version 12 of the API requires inclusion of an HMAC hashhttps://firstdata.zendesk.com/entries/22069302-api-security-hmac-hashin every request. Generating the HMAC\n   requires two additional authentication parameters (hmac key, and\n   hmac key id) set in the web administration panel. Upgrading to v12 of the\n   API would be a backwards-incompatible update, unless we build in some form\n   of fallback to v11 if the hmac info isn't provided.\nDoes upstream have any opinion on the following options?\n1. Stay at v8, lose store support\n2. Upgrade to v11 (existing implementation is already compatible)\n3. Upgrade to v12, require new hmac credentials, and fail if they\n   aren't provided\n4. Upgrade to v12 to accomodate the hmac feature, fallback to v11 if\n   no hmac credentials are provided.\nI can do any v12/hmac changes as a separate PR.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/563#issuecomment-14587616\n.\n\n\nJohn Duff\nSoftware Developer @ Shopify.com\n. There is a remote test in the pr, @melari were you able to run it? Could you also double check the docs one last time to make sure the account doesn't need a a setting turned on and chokes without the setting? I have had ba luck with this gateway and want to make sure we dont break things\n. Yes, please contact moneris to be sure.\nJohn Duff\nDeveloper @ Shopify\nOn Mon, Feb 4, 2013 at 3:02 PM, Caleb Simpson notifications@github.comwrote:\n\n@jduff https://github.com/jduff\nIt appears that in order to process the CVV information, the account does\nrequire the same setting to be turned on as for the AVS (eFraud). Their\ndocs don't seem to specify if the request will fail if we send the CVV when\nit is not turned on however. Perhaps I should just get in contact with\nmoneris directly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/564#issuecomment-13096164.\n. I'm pretty sure I went down this road a year ago and found the requests\nwould fail if the setting isn't enabled. I contacted them about the issue\nand they didn't really respond.\n\n@melari want to try contacting them again?\nOn Saturday, February 16, 2013, Nathaniel Talbott wrote:\n\n@melari https://github.com/melari any update from Moneris?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/564#issuecomment-13649913.\n\n\nJohn Duff\nDeveloper @ Shopify\n. :+1:\n. :shipit: \n. @BlakeMesdag Paypal says it's only the #\n. :shipit: \n. unlikely that we'd be able to detect, will just need to truncate to 50\n. Travis is failing on 1.8.7, can we do this in a backwards compatible way?\n. It looks like it was merged in.\n. can you add a test that uncovers this issue and then shows that it's fixed?\n. :shipit: \n. :ship:\n. You need to push to your own fork\n. I agree with @ntalbott on this. We're of the opinion (and have talked to enough people in the payments industry) that 3dsecure won't be sticking around too long. It's annoying that its being pushed so much since it is a terrible protocol. If it does happen to stick around and a reasonable abstraction is proposed we can consider it, I would like to see what happens with it for a little while longer though before adding any implementations.\n. This likely isn't a problem for you because you do not submit | in your data anywhere, if someone did this would break.\nTravis does not run the remote tests, you should run those before submitting a patch for a particular gateway.\nI will get in touch with our contacts at authorize to see if this is something we need to worry about at all.\n. Sorry, yes, our contact at authorize said that there isn't any issue with using this escape char, since it has worked fine for years I would like to leave it alone.\n. weird, following travis link shows all green...\n. lgtm, :shipit: \n. we might want to check that webpay and anything that subclasses stripe supports auth/capture in the same way, if they don't we should override and raise unimplemented.\nother than that looks good, :shipit: \n. :shipit:\n. :shipit:\n. :shipit: \n. :shipit: when travis passes.\n. :shipit: \n. :shipit:\n. I'm guessing you set allow failures for 2.0 because it is failing, do you know what / why its failing?\nI'm okay with not allowing failures, we should get AM working with 2.0 since that's what we should all be moving towards.\n. Cool, good plan.\nYa, need to look into he iconv thing.\n. :shipit: \n. I just asked why it was changed, If the comments were just wrong as it appears to be that's fine. Actual credentials should probably be left alone.\nYou still have a bunch of those comment headers to remove before we merge this\n. If it's just the removal of the credit method I'm okay with that, it has been deprecated for almost two years.\nWe do need to make sure v3 accounts will still work though. @melari can you check if you have credentials and give it a test?\n. Can you test this in Shopify? Does it work as expected there?\n@odorcicd can give this a review as well.\n. wicked, much cleaner, :sheep: :dash: \n. Cool, this looks pretty good. @melari want to give it a little test locally and then we can merge it in.\n. Can we add a test for this?\n. :+1: \n. again, would just like to see a test for each of the cases.\n. :+1: \n. :sheep: :dash: \n. :shipit: \n. It could very well be that its different in test.\nI say ship it, bonus if it resolves the other issue.\n. Ya, totally unrelated.\n. Nothing really jumps out, should test for real though in both test mode and production before merging.\n. Just needs some tests, otherwise this looks good.\n. :shipit: \n. Gem has been released so shouldn't be anything holding this back.\n. :shipit: \n. In the majority of cases a void can only be done on an authorization; captures and purchases cannot be voided but are instead refunded. This is the interface that active merchant provides, so the default case should stick with that (even though it may be the uncommon case for moneris). Having an option that allows you to void purchase and capture transactions would be perfectly fine though.\nPinging @ntalbott to see what he thinks.\n. :+1: \n. Overall looks good. There is some weird spacing, extra new lines and redundant comments that it would be good to clean up before merging though.\n. @melari csn you give this a quick test and merge it in? Maybe fix the formatting of the files, still a little out of wack.\n. You should still be able to add a unit test that the expected request is generated.\n. What's up with this? Tests are failing in some cases.\n. :shipit: \n. Can you add some tests for the balanced stuff?\n. It looks like this error is within rspec itself. I also find it a little weird that you create a new gateway and then stub new to return the gateway you just initialized. Doesn't seem like there is any point to that.\nI feel like this is an issue with how the mocking is being done, but I don't use (and no one maintaining active merchant afaik) rspec so I can't really help.\nClosing since this isn't actually a bug in active merchant.\n. :+1: i agree, not sure when it will happen, but plan to remove as many of these as possible.\n. This is because of some currencies not supporting fractions (I think @Soleone started these).\nIf PayPal is okay with franctions for those currencies just don't use that localized currency method and you should be good to go.\n\u2014\nSent from my iPhone\nOn Fri, Jul 12, 2013 at 10:54 AM, jordanwheeler notifications@github.com\nwrote:\n\nIn the localized_amount method in gateway.rb, if we've got a currency that doesn't support decimals, we split the amount at the decimal and ignore whatever came after it.  This works fine most of the time, but it's causing problems with orders that have discount codes.\nHere's an example of what's happening in this Japanese store that's offering a 5% discount code.  We're sending over this:\ncurrency=JPY, items=\"[{:name=>\\\"test\\\", :description=>\\\"test\\\", :quantity=>1, :amount=>#Money value:4950.00, {:name=>\\\"Discount\\\", :quantity=>1, :amount=>#Money value -247.50}]\", shipping=0.00, handling=0, tax=0.00, subtotal=4702.50\nAnd this is what is sent to PayPal:\n      4702/n2:OrderTotal\n        n2:PaymentDetailsItem\n          n2:Nametest/n2:Name\n          4950/n2:Amount\n        /n2:PaymentDetailsItem\n        n2:PaymentDetailsItem\n          n2:NameDiscount/n2:Name\n          -247/n2:Amount\n        /n2:PaymentDetailsItem\nSo $4702.50 gets split to $4702. -$247.50 is split to -$247. $4950 - $247 = $4703.  $4703 != $4702, so we get a \"The totals of the cart item amounts do not match order amounts.\" error back and the order can't be processed.  Rounding the numbers wouldn't work here either, because then you'd have $4703 as the OrderTotal, and $4950 - $248 = $4702 as the total amount.\nI'm not sure what the optimal solution is here.  As a quick fix I was thinking we could do something like this:\nWhen the items are added in PayPal's add_payment_details_items_xml method you could sum the amount of each item that is added during the options[:items].each loop.  When you get to the last item (the Discount will always the last item) you assign a value to that item of (OrderTotal - Sum of the previous items that have been added already).  It's not pretty, but it should work.\nI imagine there's probably a better solution, so I'd like to bring this one to your attention @jduff @louiskearns @melari @odorcicd\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/759\n. Does PayPal have any suggestions for these cases?\n\nIt seems really gross to just arbitrarily adjust the amounts.\nOtherwise I guess we need to loop through and calculate it, seems confusing and error prone though.\n\u2014\nSent from my iPhone\nOn Fri, Jul 12, 2013 at 11:17 AM, jordanwheeler notifications@github.com\nwrote:\n\n\"Note: This currency does not support decimals. Passing a decimal amount will throw an error.\"\nSo yeah, we can't be sending decimals for these currencies.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/759#issuecomment-20882995\n. Gem file is only loaded in the dev environment, not a dependency for release so should be okay.\n. Please create a pull request for us to take a look at if this interests you.\n. I would just pull out the important class and test and create a new pr with that. This is based on a really old active merchant so some things that just don't exist anymore are included. That will make this easier to take a look at.\n. If they wanted the credit they would have created the pr and rebased on master I think.\n\nCreating a custom class is generally not allowed. There are some for response, but I consider those mistakes. Active merchant is meant to be a unified interface to payment gateways, you should be able to transparently switch between different gateways with as little effort as possible. If you run into issues with those classes let me know and I can help you figure it out.\n. Will this be confusing to the customer? The discount will show on the Shopify side the same way, but in PayPal it will be different .\n. If that's the way it actually ends up charged I think so.\n. I say :shipit: \n. Can you add some tests and remove the comments related to the fix. The tests should describe why it was done that way.\n. Sure, we can still have some unit tests that assert we are generating the correct XML though.\n. @melari can you give this a quick test and merge?\n. another pr that was just merged covered this.\n. @melari can you test these changes out? If the pass back method works for us this should be fine, otherwise we might need to make the third party cart option the default. \n. One comment, otherwise lgtm.\n. Is this just a different interface to the same PayPal gateway? Are there any additional features? Is it backwards compatible with the existing PayPal gateway?\nThe big question is why is this necessary to sit beside the current implementation? Can this replace the current one, or is it even necessary since there is already an integration?\n. Until this can actually replace what is currently in active merchant I don't think it should be added. PayPal is already quite confusing and adding another gateway for the same thing will just confuse things more.\nIf it is a drop in and backwards compatible replacement then that's another story.\n. Would you be willing to submit a pull request with the change?\n. not really tracking v2 actively, this is good though :shipit: \n. :sheep: \n. I don't see that much value in this change, what prompted it? Bogus is meant as a really simple way to test some basic functionality, not everything there is.\n. It doesn't look like all the changes required were made.\n. :shipit:\n. ci is erroring out, any ideas what's up?\n. @ntalbott @duff we went down this road twice before and didn't do it because it only works with particular account types, all other accounts will fail.\nhttps://github.com/Shopify/active_merchant/pull/564\nWe need to revert this.\n. @melari can you give this a yeast and get it merged?\n. If you can use the same credentials between the two I would love it if this could be integrated into the main auth.net gateway instead of added on its own. That way the single gateway could be used for online or card present\n. That sucks about not being able to use the same account.\n. @bwanicur we've been talking to auth.net about some other options that might be possible so that the same account that you use for the web could be used for card present. Not sure where that is going, but wanted to explore it before doing anything here.\nI'll keep you updated.\n. We're told its coming early 2014. I would prefer to wait for it, if possible.\n. My hope is that we can have it all live in the same gateway. I'm not sure if that will be the case yet, but that's what I would like to shoot for.\n. If it fits in with active merchant and someone submits a pull request we will review and merge if it makes sense.\nThere is no plan from the core team to add this in though.\n. I would prefer sticking with the builder convention we already have. I don't see any compelling reason to move away from that for this one specific gateway.\n. The guys are going through and reviewing, they'll get it in shortly. You should take a look at the diff on github, probably some things you could tidy up.\n. No one cleaned it up, it probably won't be reviewed until that is done.\n. I would rather not add it as a dependency since it isn't required for development. Couldn't you tell ruby to always load pry for you? Or rubygems?\nSeems it can be done in your irbrc http://lucapette.com/pry/pry-everywhere/\n. :shipit:\n. :shipit: \n. could you add remote tests as well? if it is possible, that is.\n. Okay, looks like it should be fine to me, merging!\n. Sorry, I'm not sure where the question or bug report is here. The active utils gem holds all the http logic, you can set the timeouts it uses. Is that what you were looking for?\n. Based on my experiences with many different gateways this tends to be how they work. Their server gets the request and processes it, if for some reason the response doesn't make it back to you it is unlikely they will roll anything back. You need to ensure there is nothing that will interrupt the payment request.\nThere are a couple ways to deal with this:\n1. Make sure to store a record in your system before making the request to the payment gateway. This will ensure you have a record of the transaction being requested and can deal with any case that come up.\n2. Auth.net has duplicate support https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L391 if you have a record that an attempt was made you can use something like this to make the attempt again and if its a duplicate they will tell you.\n3. Long timeouts. In Shopify we had our timeouts above 1 minute because of this. We also moved our payment processing into background jobs so that we can eliminate unicorn from the picture and let the jobs run as long as necessary without tying up unicorn processes.\nIf you come across something different feel free to submit a pr.\n. Active merchant gem probably isn't loaded when your initializer is running so initializer defines the constant and then active merchant does the same. If you make sure active merchant is loaded first you should be okay.\n. @melari can you give this a review?\n. @melari @odorcicd can you guys give this a test before it gets merged?\n. I don't really understand what's going on with this currency conversion. We pass in $1.50 and they want that to be 15? That doesn't really make sense does it?\n. :ok: :sailboat: \n. Can you verify the remote tests still run? The change to add customer had an explicit remote test added for it, want to make sure that doesn't break.\n. Travis failed for some reason as well. It's not being friendly to my iPhone so not sure what the fail is.\n. Awesome, thanks!\n@melari @odorcicd could one of you run those remote stripe connect tests to make sure they are good and merge this today?\n. @bizla want to take a look as well?\n. Minor nitpick. We don't use this in Shopify so It looks okay to me. I am hesitant to merge in cases it mess with @ntalbott \n@duff do you know if this will cause any issues with your stuff?\n. Done and done.\n. I'm with @ntalbott on this. It sounds marginally useful, but such a low margin that I don't think it's worth it. Getting the details wouldn't take much either, if they really were needed.\n. I believe @melari is working on a related pr, maybe covers this as well?\n. @melari can you take a look and fix this?\n. Active merchant gems need to be signed as well. Otherwise looks good.\n. Can't really comment on if it works as expected, changes look good and cleans it up a lot though.\n. @ntalbott that sounds reasonable to me. Sandbox in test mode vs sandbox vs production vs production in test mode was a terrible things anyways :).\n. Can you add a couple tests and I'll merge this today.\n. @odorcicd could you get someone to knock out these tests?\n. That was speedy, thanks guys!\n. For Shopify we use it to let people test the full flow without a real gateway.\nBogus is just meant as a simple stub, not something to let you test everything possible. I don't think we need this, personally.\n. I don't really have a problem with it if a bunch of people find it useful. We should avoid adding anything that isn't common across the majority of gateways though.\n. Cool, I say go for it then.\n\u2014\nSent from my iPhone\nOn Thu, Dec 12, 2013 at 9:14 AM, Nathan Verni notifications@github.com\nwrote:\n\nDid a cursory survey of the gateways, it appears that these gateways support using checks by taking a credit card or check as the 2nd parameter to most of the main gateway methods:\nauthorize_net\nbeanstream_core\nblue_pay\ncyber_source\nevo_ca\ninspire\nitransact\nsage\nsmart_ps\ntransnational\nNot the majority of gateways, but some big ones. Looking through history, most gateways started with credit_card as the original parameter name, then evolved into taking a credit card or check. For example, this is when Auth.net underwent it's evolution: https://github.com/Shopify/active_merchant/commit/9681613e. I imagine more and more will undergo the same evolution in the future.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/944#issuecomment-30424752\n. A whitelist would be crazy difficult to maintain. Is there a specific security concern here?\n. Okay, that wouldn't be too bad. It seems pretty low priority to me though.\n. Nice catch, :shipit: \n. @bizla can you give this a run and get it merged?\n. @CraigAPayne the issue isn't that there aren't gateways that support it, the problem is that they do it in such a drastically different way it is impossible to provide a common abstraction.\n\nActive merchant is meant as an abstraction around gateways so that you can use many different gateways without needing to know the details of each one and how it behaves.\n. :+1: \n. @ntalbott want me to create the repo on Shopify or we can move it there after seeing as Spreedly doesn't use them and we do? Totally up to you.\n. @ntalbott created. Private for now, let me know and I can make it public whenever.\n. Sslv3 isn't the default, this is setting the ssl version to use.\n. @samuelkadolph for review as well.\n. Yes, we're going to figure out how we can avoid it.\nWe're going to test out the auth.bet changes tomorrow and this can get merged back in.\n. Looks good, :shipit: !\n. @louiskearns updated to handle the multiple error messages case.\n@ntalbott could you run the remote tests on this? I fixed a couple, but I don't have credentials myself. Might be good to get a code review from you as well :).\n. Merging this. @j-mutter @girasquid maybe you guys could work on bulking up some of these tests further?\n. Ya, this is fine. What I was pointing out before was that the bogus gateway even being a thing isn't super obvious. It sounds like this will help with that to a degree.\n. We don't use unstore so should be fine for us.\n@girasquid could you double check that?\n. This file doesn't need to be included.\n. I think it would be better to set the url in the initialize method. CardSave can then override initialize:\nruby\ndef initialize(options={})\n  super\n  @url = 'https://gw1.cardsaveonlinepayments.com:4430/'\nend\n. Can you add a unit test for when merchant_account_id is present that everything is generated correctly?\n. Since this is called by authorize, purchase and credit does that mean it can be used with all of those calls?\n. This should be left alone, beanstream interac returns a BeanstreamInteracResponse instead of  Response and both call this post method.\n. I think it would make sense to merge the stored authorize and purchase methods with the regular ones. Then there is just one method to call and you either pass it a credit card or an authorization and the decision of stored vs normal is based on that. Check out the epay gateway for an example of this:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/epay.rb#L61\n. Can we infer that they want to use version 4 by the fact that they provided an api-key? If so then we don't need a version option, this line could just be:\n@protocol = options[:apikey] ? 4 : 3\n. If this can only be used with version 4 api, if you provided an api key, then there should be a return unless options[:apikey] so that these fields are only added when needed.\n. When using version 4 of the api are all these parameters required? Should they only be added if they are set if they are sent?\nMight need a test for when they are not set (if that is allowed with the version 4 api).\n. There's no reason to include a diff in a pull request.\n. This doesn't need to be in here, you can add it to your own global gitignore http://help.github.com/ignore-files/\n. To make a purchase all you should be calling is purchase, you shouldn't be required to call a bunch of setup methods before calling purchase. ActiveMerchant provides a unified interface for working with the different gateways, users of the library expect that all they need to call to create a purchase transaction with the gateway is the purchase method, not a number of setup methods before the purchase.\n. Why would you be passing a return url to the gateway, are they going to try to redirect to that url?\n. Maybe calling these tax_amount and shipping_amount will make it a littler clearer about what they actually are.\n. PayPal Express is an exceptional case with the direct gateways, and something we would like to avoid patterning other gateways off of, if possible.\nWhat advantages does the 3 step redirect gateway provide over the current Authorize.net implementation that is already in ActiveMerchant? Does it provide any additional features?\n. You shouldn't need these requires, autoload handles it.\n. Both these tests say they're testing credit but you've changed them to refund now.\n. This could be simplified to:\nif source.is_a?(String) || source.is_a?(Integer) || card_brand(source) != \"check\"\n  :purchase\nelse\n  :check_purchase\nend\n. Also, some unit tests that hit these code paths would be great.\n. both of these require login so we should have a requires!(options, :login) in here.\n. methods that end with a ? are expected to return a boolean response, would it make more sense to have this method actually build and return the response object? Lines 1436 - 1454 are pretty similar and could probably be put together.\n. I don't think all these comments are really needed, just adds noise to the file.\n. It looks like a number of these methods could be refactored into one.\ndef build_customer(soap, options, type, add_customer_data=false)\n  soap.tag! \"ns1:updateCustomer\" do |soap|\n    build_token soap, options\n    build_tag soap, :integer, 'CustNum', options[:customer_number]\n    build_tag soap, :integer, type options[:customer_number]\n    build_customer_data soap, options if add_customer_data\n  end\nend\nbuild_request could almost just call that one method then.\n. It might make sense to split some of these larger case statements into methods so they're a little easier to digest.\n. A bunch of these are pretty much the same except for the key in the response (ex updateCustomerResponse), could just create a method that takes the name of the successful response you want in and build it from that, cutting out a dozen lines in this one example. I'm sure more of these could be simplified as well.\n. I'd like to leave this alone.\n. Sorry, I miss typed, these four methods could be merged into:\ndef build_customer(soap, options, type, add_customer_data=false)\n  soap.tag! \"ns1:#{type}\" do |soap|\n    build_token soap, options\n    build_tag soap, :integer, 'CustNum', options[:customer_number]\n    build_customer_data soap, options if add_customer_data\n  end\nend\nWhere type would be enableCustomer or disableCustomer or updateCustomer etc. At the very least these 4 methods could just call the common one.\ndef def build_update_customer(soap, options)\n  build_customer(soap, options, 'updateCustomer', true)\nend\n. Add to your local gitignore (~/.gitignore)\n. This seems more like refund, not credit.\n. add_fraud_options would be more descriptive.\n. Please add a unit test for this.\n. A unit teat that mocks the interaction with the gateway, all that you have is a remote test. Remote tests are great, but we can't run them all on ci since we don't always have credentials. A unit test will make sure the functionality does they broken in the future.\n. The gemfile has been updated since your changes, I think this has already been done. Please rebase against master to be sure.\n. Could you add a test for this case as well?\n. Are there cancel_recurring and update_recurring methods that could be added as well?\n. Could you add some unit tests that mock out the interaction with the server as well? Those are easier to run in isolation and will make sure future changes don't break your code.\n. These credentials are the exact same as the regular braintree_blue ones, why did new ones need to be added?\n. I would put this on another line: string_to_digest << @options[:signature] to make it a bit easier to follow.\n. Since signature encryptor is also a new option that is being added could we use that as a method for determining if the new signature generation method should be used? So if no encryptor is passed in and if signature is set it will use sha1 with the old method, if a value is set fro signature_encryptor it will use that encryptor and the new signature generation method.\nWill that work?\n. these should be the defaults, change the option in the test where it is needed.\n. Sorry, this might have been on the wrong line and confused what I was trying to say. I was trying to think of how we could do away with the created_after_10_may_2010 option and thinking that maybe we could use the fact that someone passes in an signature_encryptor to decide to use the new digest generation.\nIt is my understanding that in the new year all customers are going to need to use the new signature generation method anyway, so I'm trying to thing of a way to add these new features without having to add an option that is going to be removed in a few months. Does that make sense?\n. It's not a huge deal, I just like the fixtures to be the minimum required to use a gateway. Maybe my suggestion here: https://github.com/Shopify/active_merchant/pull/198/files#L0R344 will make it unnecessary anyways.\n. Okay, I'm going to try to come up with a way to avoid created_after_10_may_2010 one more time, if this one doesn't make sense then the deprecations are a good idea (might be a good idea either way).\nWhat if we did something like if signature_encryptor is not set we assume the old style, if it is set assume the new signature usage. Current AM users wont need to change anything since it only works with old style right now anyways, AM users that want to take advantage of the new style just wont set signature_encryptor if it's an old style user. It's a slight restriction on the old users, but it might motivate them to migrate to the new style anyways. Will this work?\n. Since these aren't required we shouldn't have them in all the tests. If we want we can add another test that includes them, but they should actually be used in the test.\n. Add a refund test as well?\n. same deal, if these aren't required we shouldn't have them in all the tests. Tests that specifically use them could be added instead.\n. Sorry, I wasn't intending for this to go in, I'll create a new pull request without this.\n. Transaction types in this list will have the amount added to the request. See https://github.com/jduff/active_merchant/blob/ea2c640fa0f051c35f8e73b3b0d5de4b8dd1ad06/lib/active_merchant/billing/gateways/skip_jack.rb#L302\n. present? isn't available in all the versions of ActiveSupport that active_merchant works with either.\n. Ah, I'm getting all these versions mixed up :). I'll change these to use present?, it's much cleaner.\n. Good call, I'll fix that.\n. This should default to 'S' to preserve the previous behaviour.\nadd_field('trxtype', options[:transaction_type] || 'S')\n. When you add the field in the initializer you shouldn't need to map it here as well.\n. Looks like there is a typo here, I don't think this line should be changed at all.\n. This is changing current behaviour. You probably want to do:\nruby\namount(options[:subtotal] || money)\n. ga, ya, was resolving a merge conflict. removed.\n. I think you wanted options[:credential4].present? ? options[:credential4] : account\n. We can leave this class out and just use the ActiveMerchant::Billing::Integrations::PayflowLink::Notification class directly in the module. Doesn't need to be subclassed, as far as I can tell.\n. Can get rid of this too if we just use the PayFlowLink notifcation class.\n. A test for the credential present? change?\n. I always forget about presence, nice.\n. are there tests for the country code being included as well?\n. Ya, they're named based on the certification tests.\n. version maybe not, but merchant is something from your setup so you should be able to pass that in. I decided to leave version as being able to pass it in because I didn't want to disrupt anyone that might be using it that way already.\n. If it's not passed in it gets set to the default so I don't think it matters, i can remove it from the requires! if you want.\n. variable is not needed\n. i think this can be removed.\n. We have a helper in gateways to take care of this, requires!(options, :login, :password), not sure if it can be used in integrations but maybe check it out.\n. Wouldn't we want to check that there is a value as well, not just the key? @options[:credential1].present?\n. where would the @message instance variable be set?\n. spacing is off a bit here\n. Why is this one different from the rest?\n. Why did these need to change? the fact that it didn't break any tests means we have some untested and unverified cases here as well.\n. why is this changing?\n. why is this needed?\n. if it really does need an order accessor then Response should be subclassed. I don't really feel like this is needed though.\n. What does setting this to 9 mean? This is untested.\n. country code instead of currency codes?\n. I feel like an option passed in with the request would make more sense. If you want to enable it globally it could be an option to initialize as well. This should not be the default as it breaks backwards compatibility.\n. NON_STANDARD_LOCALE_CODES[country_code] || country_code ?\n. what changed here and why?\n. why did this need to change?\n. did anything actually change with these, other than whitespace?\n. is there no way to just reference the base gemfile and override, we need to specify everything?\n. That's valid, I was just wondering.\nJohn Duff\nSoftware Developer @ Shopify\nSent from my iPhone\nOn 2012-10-02, at 12:43 PM, Nathaniel Talbott notifications@github.com wrote:\n\nIn Gemfile_rails23:\n\n@@ -0,0 +1,24 @@\n+source :rubygems\n+gemspec\n+\n+gem 'activesupport', '2.3.14'\n+gem 'rails', '2.3.14'\nI see no way to reference, though I could be missing something. I suppose they're just Ruby files, so maybe we could use require? Seems like a refactoring that could be done after this gets merged, though.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. It probably just wasn't being used in the purchase method.\n. are these always in all the responses? If not we should have some tests for those cases, probably shouldn't set the avs_result and cvv_result if they are not present\n. What's up with the redirect to example.com? Is that just ignored? Seems like it could be brittle if we depend on that...\n. I got it, that makes sense. Just looks a little weird. Maybe we should add a comment explaining this?\n. Don't we have a string that is used in other gateways for this? Something like \"ActiveMerchant Version 1.29.0\"? If we don't its not a big deal, thought I saw something like that at one point.\n. One more question, you don't need to specify the redirect URL with eway? Isn't this a security hole letting people redirect to arbitrary sites?\n. @ntalbott You merged this change in, is it really required or could we do the mapping in the Orbital gateway instead? Maybe @jonm-okc would like to take a look as well since they made the change.\n. assert_no_match when a nil site_tag is passed?\n. For line above.\n\nShouldn't the more specific billing address be tried before the less specific address? Right now if neither exist a blank will be submitted, is that valid? If there are prior examples let me know and I'll be quiet :).\n. Nil if it doesn't exist?\n. can we add a test that checks for this in the request being sent? unit test.\n. whats with all the extra space?\n. Why is this necessary? We pass a credit card to this method so should never happen.\n. why the change in credentials? Can't we just leave it credential 1 and 2?\n. We don't add header comments like this, could you please remove.\n. I don't like the duplicated code here and in return, could we maybe move it to a method that both of these call?\n. This isn't used anywhere, can we remove it? This isn't part of a standard active merchant integration\n. Since query isn't used or part of the interface none of this is either, lets remove.\n. Again, we don't do this in integrations we can remove all this.\n. I'm not sure return URL has a success and failure.\n. I don't think the freeze is needed.\n. It doesn't look like this is testing anything.\n. Mode won't be passed in so if this needs to be set to something it needs p be set by default on initialize.\n. Didn't see many tests for this\n. It looks like this method was removed and the contents dropped into the parse method, I would like to extract the method again unless there is reason not to.\n. Doing this mapping thing didn't make it more readable or less complex, I would put it back.\n. This seems very fragile. Same in the recurring parser.\nIs it really necessary to raise or even check which fields we get back? There are some we need to map, but if they add something to the response who cares?\n. I only like using 'or' if its really necessary, || for consistency.\n. It is still a valid test, even if those credentials do not support it . Please uncomment this.\n. Why were these assertions removed?\n. Why do we need to change this?\n. Ya, that would probably be a good idea. If anything changes an that test fails its not as big a deal.\n. Nope, that's me being bad at copy and pasting.\n. is it possible to add a payment method that might not come with first and last name? should we do this conditionally if the payment doesn't have the first and last name?\n. Okay, was just wondering.\n@melari feel free to merge\n. I don't think we have addressable as a dependency, and we shouldn't need it, standard lib should be all you need here.\n. Could you add unit tests for auth and capture as well?\n. I believe this was fixed last week, you might need to rebase.\n. Ah, I see what's going on now, I thought this was something different. That part should be fine.\n. Just want to make sure there are tests for non-fractional.\n. Amount < 0 does that make sense?\n. He amount < check is already in one of the other conditionals.\n. Do we have tests for all the points of failure in the refund process? There are three requests so a test for failing at each point would be good.\n. These are params that come back from the payment gateway. This gateway is based on auth.net so returns the same response params it does.\nBasically the raw data back which is then parsed into the response object itself\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/response.rb#L22\n. These cannot be set this way, it doesn't work in a multi client environment. The credentials and secrets have to be passed in to the initialize method.\n. No, needs to be passed into the notification, helper and return themselves. Ipay88 is one I fixed to do this correctly and would be a good example.\n. Can we make it an option you pass to run instead? I don't really like hanging the call off the end of the block like this.\n. could you change this to MESSAGES[response[:errors]] || response[:errors] so that we get what was sent back if there is no matching message in the hash? otherwise looks good.\n. The refund method in stripe should call localized amount, then you don't need to override refund here, should just work.\n. Sorry, I see it now.\nIf only the one currency is supported I would just override amount so it does the right thing\n. It just sucks that the whole refund method needed to be duplicated to do it.\n. Mode should be reset in teardown since it is a class method.\nBetter yet, should do it in ensure so that it is put back on exceptions as well.\n. Or use stubs\n. Does this much really change between card present and normal auth.net? You basically override all the methods.\n. I would drop the track number and make that an actual default. Its always card present so will either be track one or track two.\nThe comments was for all the methods really. If we're going to inherit lets use the inheritance where we can.\n. I believe moca removes any stubs between runs and errors.\nThe teardown and ensure ideas were independent. With ensure you would need to add a method like with_production that takes a block or something and ensures the value is put back.\n. @marketplace_uri && @marketplace_uri.index... ? true : false will eliminate this little dance.\n. Make this a constant?\n. Can we leave this as password so we don't need to change card server?\n. Will current integrations still work?\n. Sounds good.\n. Why aren't we verifying ssl? This seems like a bad idea.\n. There should already be some helper methods for making http requests, which is all this is doing. We don't normally use net http directly.\n. ",
    "marclove": "Same here. ActiveSupport 3.0.0beta doesn't autoload the core extensions, which includes HashWithIndifferentAccess.\nI've submitted a ticket on Lighthouse: https://rails.lighthouseapp.com/projects/8994/tickets/3994-require-active_support-doesnt-provide-cattr_accessor-method\n. Excellent! Thanks!\n. The easy temp fix until they fix it in the gem is to put\nrequire 'active_support/all'\nsomewhere in your application. For rails, put it right before the Initializer block in environment.rb.\n. ",
    "merbjedi": "Fixed via this commit:\nhttp://github.com/merbjedi/active_merchant/commit/2321eba2b1391959592bb3e97e81c22ad3ef90d6\n. Ok, that was actually pretty easy\nhttp://github.com/merbjedi/active_merchant/commit/bae44e056ed70a4e1d86d3ffed3ee8001503a712\n. Anyone get a chance to take a look at this. I've been using my fork for a while and its been working pretty stable. How can I convince you to merge it in?\n. ",
    "charliepark": "Sorry to ask a dumb question on this. How do I incorporate your patch into the gem I have on my computer?\n. Great. I'll give that a shot. Thanks.\n. ",
    "jacquescrocker": "should be fixed now in master. plz test and confirm\n. yep, would love to! i'll submit a patch soon\n. There was no getting around the need for mattr_accessor, cattr_accessor, and class_inheritable_accessor. However that was fairly easy to package up into ruby_ext and ship alongside with Shopify\nI think this commit should do the trick nicely. library tests run great, and also runs against my projects specs. Let me know if you see any issues, would be happy to fix\nhttp://github.com/railsjedi/active_merchant/commit/3349444335b4b34de6056251bf81ba275fe60d3d\n. Thanks for the heads up. Didn't realize active_support was getting included by action_pack.\nIt looks like active_support is used pretty heavily. .blank? is used a hundred times. And lots of other active_support features. \nWhy don't we just use the features of active_support that active_merchant needs? I think this patch is the best bet: http://github.com/merbjedi/active_merchant/commit/bae44e056ed70a4e1d86d3ffed3ee8001503a712\n. If you want I can just copy the 10 or so active_support files over directly into active_merchant. However, might as well add active_support as a dependency. 3.0 is very lightweight since it only requires exactly what it needs.\n. Ok. I'll just go ahead and pull in the files we need\n. Cody: Well... I tried http://github.com/railsjedi/active_merchant/commits/hax\nRemoving ActiveSupport dependency seems like an impossible (and needless) task. Lets just include the basics (active_support/core_ext) and other and be done with it.\nWhat matters is we get the library working with Rails 2.x and Rails 3. 2.5mb is not a big deal as long as we dont load the entire active_support into memory needlessly.\n. Hey Cody. This patch will do the trick: http://github.com/railsjedi/active_merchant/commit/d107cb4c79ff143f0837dbcd2a93385d96d71c2f\nI've verified it works in all version of Rails from 2.2.0 through 3.0 beta. Please pull it into master. I believe it will solve all everyone's rails3 issues in one fell swoop.\nNo need to branch for this. It should be completely backwards compatible.\n. This should be working now in master. yzhrain: can you give it another try?\n. This should be working now in master. Contentfree: can you give it another try?\n. ",
    "Soleone": "Closing, will be addressed at some point by this pull request:\nhttps://github.com/Shopify/active_merchant/pull/95\n. This has been merged in, thanks for your contributions!\n. We are running active_merchant on Rails 3 now and can confirm that it works, so I'm closing this ticket.\n. We're gonna be switching everything to Github now with Issues 2.0:\nhttps://github.com/blog/831-issues-2-0-the-next-generation\n. Thanks for the report. This happened because Braintree updated their implementation in the 2.5.0 release and removed/changed something for Braintree::Configuration:\nhttp://github.com/braintree/braintree_ruby/commit/e68d54b0fe554d344515c5aaa146016a9bedf218#diff-18\nA fix to deal with the issue has been prepared, look for a new minor gem release coming soon.\n. We definitely want to support Rails 3 especially now that it has become the new standard.\nClosing this issue.\n. Moneybookers has since been integrated as an offsite solution, closing.\n. This has been added to ActiveMerchant in:\nhttps://github.com/Shopify/active_merchant/commit/b4cde6a5\n. Looks interesting, thanks for the patch.\nDo you know if this should be compatible when using Rails 2 (and then requiring ActiveModel 3)?\n. Not sure why this is needed, I don't think it's still necessary with the latest version on github.\nI can see no problems with Ruby 1.9.2, closing for now. Feel free to reopen with more details.\n. Hey there,\nThis is actually not a bug. You are supposed to only either pass a Fixnum (Integer) or a Money object (which is being deprecated soon) to the method. You provided a Float which is not supported and results in the behavior you're observing.\nBest, Dennis\n. Hm, how does it go against the documentation on the wiki?\n\nSetting the money format allows you to use the amount method defined on the base gateway class. Simply pass in the amount, either as a Money object, or a as an Integer value in cents, and the amount will be formatted appropriately.\n\nIf you only pass Money or Integers it works fine, no?\n. Closing because this duplicate issue will be addressed at some point (contains a test):\nhttps://github.com/Shopify/active_merchant/pull/65\n. Thanks Jesse, pulled in to mainline.\nhttps://github.com/Shopify/active_merchant\n. Looks great overall (some very minor notes above), nice work!\nI've integrated the gateway in Shopify, but I'm not sure yet it's working correctly.\nThe problem is the test card numbers they have (e.g. 3333333333333000 for Visa) do not validate on the Shopify side as they do not match the visa regexp so they are rejected on the Shopify side. If I test with a dummy visa number like 4242424242424242 I get a error message in the checkout saying \"Failed with 302 Found\": http://img.skitch.com/20101125-g8n4hmmi84q7ixw58xjksw9tk4.jpg\nEven when I disable the credit card validation on our side so that the 3333333333333000 number is accepted I get the same 302 message. Do you know if that's how it's supposed to work for test accounts?\nYou can try it for yourself in Shopify by including this commit from my fork that activates the gateway (note in the gemfile how the path for activemerchants points to your local directory):\nhttps://github.com/Soleone/shopify/commit/ed830088a42efe1bbe21b359a2499ee8d2421586\n. Closing, because duplicate of this pull request which will be addressed at some point:\nhttps://github.com/Shopify/active_merchant/pull/62\n. Thanks, this has been addresses in this commit:\nhttps://github.com/Shopify/active_merchant/commit/44f8e6aedde5001bc146c41bbf21264eb58e80c8\n. Looks like you're using a very old version of active_merchant. We're running the latest version (1.9.4) on Rails 3 without any of those warnings, so give that a try!\n. Closing because this associated issue will be addressed at some point:\nhttps://github.com/Shopify/active_merchant/pull/77\n. Thanks for the commit!\nJust to confirm: So only the test URL has changed and the Live URL is still the same?\n. On a closer look at your patch I think this line that you changed is no longer needed:\nresponse = parse(ssl_post(test? ? TEST_URL : LIVE_URL_BACKUP, request_data)) if service_unavailable?(response)\nThe way I understand it it only tried to call the TEST_BACKUP_URL if the request to the TEST_URL failed, or?\n. Thanks, I've merged in an edited version of your commit which doesn't retry the call in the test environment.\nA new version of activemerchant will be released soon including that change.\n. Fixed in https://github.com/Shopify/active_merchant/commit/da0f8b909963efc9f29dd1229dc2c3b88c50c26e\n. Sorry, absolutely no plans at the moment.\nI don't see any fork of activemerchant that has this added yet and I don't know of anyone who is willing to implement this.\nIf you really need it available in activemerchant maybe you can look into implementing this yourself. It's not that hard if you have the API docs, know Ruby and have a basic understanding of web services.\nGood luck!\n. Hm, are you sure this is necessary?\nWe have been using activemerchant in a Rails project via Bundler for a while now, it's simply loaded as a gem, not via the plugin mechanism and the action view mixins work fine.\n. Hey Rudolf,\nI did some tests and you're right, you need to manually include the ActionView helper nowadays when using activemerchant as a gem instead of a plugin.\nIt's a good idea to keep it DRY and only have the code in one init.rb file and require the other one.\nIf you could refactor your commit and maybe even test it locally (using gem 'activemerchant', :path => \"your_path_to_active_merchant\") that would be great!\nCheers, Dennis\n. Merged in, thanks for your contribution, sir!\n. This has been merged in with some refactorings.\n. Sorry, but I don't think that's a good idea.\nFirst of all we would have to split the project into about 70(!) gems. In Shopify were all gateways are supported at the same time that would mean 70 additional requirements in the Gemfile.\nCan you provide a use case where this would definitely help?\nLet's go over your list:\n- Releasing a new kernel would be far easier that releasing an entire suite of gateways\n=> There are not many (if any) updates at all to the \"kernel\", pretty much all of the activity in active_merchant revolves around gateway changes or additions\n- A single gateway version could support multiple kernel versions\n=> Do you have any example when this would be advantageous? I can't think of a use case where the \"kernel\" changed and caused incompatibilities with some gateways.\n- A gateway could be created and maintained by anyone who had the need\n=> Sure, but you can also fork active_merchant, add your own gateway and use the fork or if it's working well and is tested sent a pull-request so the new gateway gets merged in for everyone to use. Currently active_merchant is one of the most forked gems on github, I don't even want to start thinking about what would happen if each gateway-gem could be forked as well. Again if you have a good use case I might start seeing how this could be useful instead of confusing.\n- A gateway could be forked and merged without having to effect every user of active merchant\n=> The pain I see with this is that it's unclear on which repository to find the official latest version of a gateway. We would still have to have 70 official repos on the Shopify account and pull in merge requests from all around.\n- Development is decentralized and democratized\n=> Sounds good on paper, but it would also start getting very traction-less I can imagine because everyone has their own idea on how to move forward.\nSorry to shut this down so hard, but I'm afraid this will introduce more confusion and complexity than usefulness.\n. Very awesome idea\n. I like where this is all going.\n. Thanks, that looks quite good already.\nOnce you've addresses the comments I added inline we can go ahead and merge this in and then start a first test transaction.\n. I agree, something should be done.\nNow the github repo is still called active_merchant so either this should be renamed as well (tricky) or maybe the old active_merchant gem can be updated to always be on the same version as activemerchant (but not really nice to have duplicates around).\nThis needs some internal discussion, thanks a lot for the feedback!\n. The active_merchant has been removed from the remotes and should no longer be accessible.\n. Looks good!\n. Hi,\nAs a generic rule, your chance of getting accepted into the official repository is much higher if you submit one clean commit. Can you squash all those commits into one that bundles all the new functionality together? If it makes sense to split some changes into multiple commits then that is okay, but most of the time one commit for a new gateway submission is appropriate.\nThanks!\n. This looks like a Ruby 1.9 incompatibility.\nThe Object#type method is deprecated and was removed in 1.9\nUpdate:\nNevermind, it looks like the remote test is passing a number whereas a credit card was expected.\nThis doesn't blow up in Ruby 1.8 because every object responds to #type but in Ruby 1.9 this doesn't work.\n. Looks great!\n. Guest checkout should already be supported in the current ActiveMerchant implementation of PayPal Express in build_setup_request.  So far we have not been observing any issues with guest checkout.\nThe only difference I can see is in build_sale_or_authorization_request where you added this as well, is this really needed there?\n. Two smaller notes above, otherwise it looks great!\n. One minor (optional) comment, but overall: :shipit:\n. :thumbsup:\n. :+1:\n. :shipit:\n. The change on this side looks good so far, but it will all come together with the changes in the Shopify side. Maybe you want to leave this open and link it to the other pull request you're gonna create for that.\n. :+1:\n. very :cool:, ship it\n. looks good to me\n. LGTM\n. :+1:\n. :+1:\n. Looks good overall :+1:\n. :shipit:\n. Please review @jduff \n. I actually now think it should've been inline right from the start, no need to have this separated as it was only used inside of there. Prevents jumping around in the code\n. Yes, I will look into that on Monday. For now it was just a high priority to get this out and deployed\n. Shipping. Created new issue here: https://github.com/Shopify/active_merchant/issues/408\n. Interesting idea, but a bit hacky imho to include the amount in the string and \"change\" the official authorization token.\nWe were looking at the best way to realize this without changing the existing API, i.e. if you use Plugnpay today you won't have to migrate any existing authorization-tokens.\n. Hi,\nthanks for the report! It looks indeed like refunding with WorldPay is completely broken at the moment. I was starting to investigate this last week.\nDo you have any more information by chance on how to get this fixed best? I do have a test account available for remote tests, but I'm not familiar with their API yet. Would you be willing to submit a pull request for a fix?\nAny more help you can provide would be greatly appreciated!\nThanks, Dennis\n. Hey Nathaniel,\nI have spoken to WorldPay support last week, and after a few days of going back and forth they did provide me with a test account. If you send me a quick email to dennis@jadedpixel.com I can forward you my test account information.\nThanks a ton!\nDennis \n. thanks a lot, much appreciated!\n. Thanks a lot, this looks good to me!\nDid you also run the remote tests? I see there is a refund test in there. Did this fail before your update and passes with the changes? If not do you think you could also add a regression remote test that replicates the old failing behaviour?\n. This week we've also received the following request from a merchant:\n\nWhen paying with a credit card using the WorldPay gateway two pieces of information are not being transmitted in the XML - the customer email address and the \"created by\" fields.\n\nWhile you're at it do you think it might be possible for you to add support for sending these two fields?\nThanks again!\n. Thanks for looking into this more! Someone else from our Integrations team will get back to you soon regarding this.\nWhile we're at it I also wanted to add that the following three things that would be good get updated:\n1. Apparently the endpoint URL changed from https://secure.wp3.rbsworldpay.com/jsp/merchant/xml/paymentService.jsp to https://secure.worldpay.com/jsp/merchant/xml/paymentService.jsp\n2. After talking to their support it looks like a lot more countries should be supported for merchants. I was told all the countries listed in the dropdown on www.worldpay.com can be used to sign up for a merchant account and receive money. Would be nice to update the supported_countries array\n3. Apparently :laser cards should be supported as well, maybe that can be added to the supported_cardtypes array\n. Apart from my last comment :+1: :shipit:\n. I'm afraid we are no longer planning to support the new Barclays integration in Shopify, it looks like we will drop support for Barclays as they are no longer giving out old versions of their account compatible with the current integration.\n. Yea, it's a matter of manpower and policies (resource allocation), not a technical limitation.\n. :shipit:\n. updated with your suggestion\n. this should be a comparatively simple change for the benefits it provides merchants, hopefully someone can get on this\n. Hm, I can't replicate this here in 1.9.3 with the same command and same commit. Not sure at the moment, but maybe it helps that it seems specific for your environment.\n. wow, thanks for catching that.\nthis proves again that using semicolons in ruby is evil, it's a hard to spot issue the way it's currently written\n. Thanks for the quick feedback. We'll get someone to address this. Hopefully we don't need to strip out any letters/numbers. But it looks like we can't send more than 30 characters in that field, which might be tricky depending on the address.\n. uh, interesting. 5.7 makes it sound like you can only expect AVS to work for UK billing addresses. we maybe need to check with Realex support if they think we should completely omit this code field for non-UK addresses\n. Ok I asked our merchant who reported the problem to ask Realex support if we should just omit the code or only send the zip for addresses outside of the UK\n. Realex Support replied:\n\nAVS checking is only supported for UK and Canadian postal systems so it should be okay to omit these for any other addresses.\n\nLet me know if I should ask anything else now that I have a direct email.\n. you can also reach out to support@realexpayments.com for clarification\n. Looks good overall, some comments inline\n. > We should add a test for purchase that checks the client details are submitted if they are present.\nYea, if you maybe refactor your test actually to not call the \"implementation detail\" manually with send but instead just call the public interface purchase\n. one small comment, otherwise looks great :+1:\n. Support Ticket: https://shopify.desk.com/agent/case/335118\nthanks a lot :+1:\n. :shipit:\n. :shipit: \n. from what i can see so far this is looking good. a few comments inline.\ncan we ensure this does not change any functionality for existing shopify customers without any changes in the way the gateway is initialized/called, should this be 100% backwards compatible?\n. @jduff Just want to make sure this doesn't get forgotten. We should probably fix voiding for Moneris (preferred) or remove the ability to void in Shopify so merchants don't run into errors when cancelling orders.\n. Looks good! :+1: \nOne common request from our merchants for the Rapid API was better support for fraud detection. Is it possible to include better fraud management with this API? Similar to https://github.com/Shopify/active_merchant/issues/450 we would have to set a fraud_review flag on the response\n. @csaunders Any useful update from MerchantWare yet to move this forward? thx\n. Anything in particular we need to move this issue forward?\n. :+1: \n. Hm, yea, I just went with the most forgiving implementation here, meaning let's have AM automatically do the \"right\" thing for you (a very \"opinionated right\").\nThe disadvantage of this approach is that you might be rounding in your app, e.g. display 49.55 as 50 as opposed to 49 and then you only end up charging 49 although the end user might expect 50.\nThe advantage of this approach is that you don't have to do any crazy currency logic in your app. For example if we raised an error now in Shopify we would have to - just for this single  gateway - take 4955 (we usually deal with cent values when passing amounts to the gateway), divide by 100, round/ceil/floor (floor specifically for Shopify),  and multiply by 100 again. Kind of annoying to have gateway specific code like that in the app.\nWhat are your thoughts on this @jduff?\n. I put it in the base class because no matter the gateway these currencies don't use fractional units, so it's up the the specific gateway to make use of this currency list\n. :+1: \n. lgtm\n. a few comments about code style, but overall looks safe and good to ship!\n...assuming this was tested using test credentials in their test environment\n. just came back here by accident\n@melari you have to add a comment when you push a commit or we won't get an email notification.\nthe changes look good! :+1: \nwhen merging the new ActiveMerchant version into shopify, can you take a look at the failing remote test for merchant_ware and see if we can get that one fixed? not sure why it's failing, maybe new credentials, maybe issues with their sandbox?!\ntest/remote/functional/orders_controller_test.rb:334:in `test_merchant_ware_payment'\n. looks good to me. i hope we did / can do at least one remote test to check that the request is valid. i think for this gateway the order of the elements in the xml is really important\n. Just so you know this will also affect any other gateways using the CURRENCIES_WITHOUT_FRACTIONS constant.\nBut that being said if that currency really doesn't use fractions it should be fine.\n:+1: \n. looks good to me overall\n. one small comment, but :+1: \n. :+1: \n. nice looks good, :+1: \n. small comment, but :+1: good stuff\n. hm, accidentally opened an issue instead of a PR?\n. :+1: \n. :+1: \n. i just realized i might not have the time this week to review this properly. definitely not today, i have to finish up something and can't get sidetracked by the context switching here. i'll try later this week, but if you don't hear from me ping me again or worst case find another reviewer. sorry about that!\n. I'm really out of the loop with how paypal works or activemerchant in general. but if you think it might be a quick fix a PR with further discussion for the suggested update would be much appreciated\n. Usually address can also be passed in as options[:address] it would be best to rewrite this to something like:\naddress = options[:billing_address] || options[:address] || {}\nAnd then below access the address details from the address variable instead of the options hash\n. Just a style note, the following would read a bit nice without additional the indentation from the if-statement:\nreturn \"OK\" if result.success?\nresult.errors.map {|_, messages| messages }.flatten.join(\" \")\n. How about this instead: @shipping_address_set = params.any?\n. whoops, puts in there\n. parital_capture => partial_capture\n. Is this related to this bugfix? What problem does this solve in Rails 2?\n. if addr[:state].present? would probably be better, but as the original code is using the same idiom let's make it synchronous and use the same way.\n. Right, it was added around 2.3 as far as I remember.\nIt's being used in a few places in ActiveMerchant at the moment though if you weren't aware.\n. I realize this was just taken over from the original code, but it's weird:\nThis adds something new to the array instead of passing it a new array + one additional field.\nWe should either add the OriginalTransactionAmount in the CREDIT_CARD_FIELDS directly or change << to + and add two arrays instead of adding an element to the array\n. accidentally put the string in there twice?\n. I agree. I was close to posting the same thing as well, but then refrained for the sake of just getting it out. Let's change it if @wisq feels as well that the wording is a bit unclear.\n. I guess you could do:\noptions[:credential4].presence || account\n. I guess you could simplify this slightly:\nclass Helper < PayflowLink::Helper\nUnless I'm missing any potential issues with not using the absolute constant path here.\n. no need to give the full constant path here, just use the relative path like in notification\n. No need to include the module again if the superclass already has it\n. yep, there is one above for US that tests it includes it\n. Do :version and :merchant really need to be passed in? Seems like it can use the default version? \n. Any reason these are called test1 and so on? Can we give them more detailed test names maybe?\nEdit: Oh I guess these are for certification, then those test names make more sense\n. Do you want to remove :version as a required field then? Otherwise on the Shopify side we would have to pass that in and maintain I guess.\n. :( yea sorry, my bad of course\n. I wonder if we could leave the old mapping of capture => mark, and call reauth \"partial_capture\" on our side.\nThen I think the code below will be more clear on what exactly we're doing.\n. If you look in Shopify in forward.html.erb you can see how we pass in any additional credentials right in the options hash, instead of the block body.\n. Currency should probably be passed in right in the options hash as well.\n. should not need to require this here afaik\n. Nokogiri should already be loaded here afaik, should be able to remove that require \n. I guess this is only needed for Ruby 1.8 - not sure if it's worth checking for the RUBY_VERSION and conditionally require it\n. I guess you can remove this comment\n. I feel like this should error out when instantiating the helper where the credentials are initially passed in, not delayed when receiving the notification.\nEdit: nvm, ignore my comment here.\n. Not an issue really, but I try to avoid negations wherever possible, you could change this to:\nassert response[:redirect].present?\n. You shouldn't need this afaik. There's already attr_accessor :raw in the superclass. Unless you wanted to disable the writing accessor?\n. Let's just call the item_id method here or create an alias to make it clear that the two methods do the same thing\n. I don't think this method should raise. All other integration Notifications just return 'Error' for something unexpected.\n. Do we really need Mechanize for this non-remote test? So far mechanize seems to be only used in remote_integration_helper.rb. Afaik it won't be loaded in non-remote-test environment either looking at the Gemfile.\n. uhhh yea i guess. why make it simple though if i can make it complicated :D\n. 1. usually the convention is to always use parenthesis when calling methods (e.g. include? here)\n2. Use Hash#slice from ActiveSupport to simply this line.\n3. I would assign the array of symbols to a variable, e.g. customer_options\n. I'm confused why the method definition already existed but you had add the invocation to it here? It was just not used before?\n. didn't find it used anywhere else either actually\n. I think we can remove this test now\n. filename is called v6 but classname is V4\n. this looks like it could change the functionality or break time parsing? wil params['time'] return the 20 part of the year now? is still backwards compatible across versions 4 - 6?\n. No longer support for checking notifications for test mode? By default this method will return false from the superclass\n. i force pushed and added a test for that\n. eww, too many tertiaries in one line for my taste :)\n. Use the constant you defined above instead of copy/pasting the string here\n. let's just simplify this, if both test and live servers have same url, no need to use two accessors for it imho\n. i'm not the biggest fan of hardcoding detailed error messages like that. if they change only a single character the test will fail.\nthat being said not sure of a better way to test for this message, could use regexp, but that could break in similar way. should be okay, but just wanted to mention it\nedit: this comment belongs to your remote test, your unit test is safe of course\n. could simplify it a bit:\nadd_field('description', value.to_s.delete('#'))\n. I wasn't aware an equal sign needs to be escaped in regexp? Or does it not matter and this is just for the syntax highlighting issue in sublime you mentioned?\n. i guess no need to assign to a variable here, but doesn't matter really\n. maybe can be simplified using !! to convert to a Boolean:\nis_test = !!@marketplace_uri.try(:index, \"TEST\") (using active_support)\nor \nis_test = @marketplace_uri && !!@marketplace_uri.index(\"TEST\")  (without relying on active_support)\n. use mappings[:currency] instead of hardcoding 'Gjaldmidill'\n. maybe i'm missing something, but do you just want extend PostsData maybe instead of the class << self block?\n. ",
    "ccoakleypayjunction": "slight correction, the url should be https://www.payjunctionlabs.com/quick_link\n. I have submitted a patch to the lighthouse ticket tracker for this project. Fixing the test url exposed an error in one of the tests. I submitted a second patch with the fix for the test. If you want the patches yourself, please get them from:\nhttps://jadedpixel.lighthouseapp.com/projects/11599/tickets/206-payjunction-test-url-fixed#ticket-206-1\nand\nhttps://jadedpixel.lighthouseapp.com/projects/11599/tickets/207-patch-payjunction-gateway-recurring-test-fixed\n. ",
    "moretea": "http://github.com/dovadi/active_merchant_ideal\n. ",
    "braindeaf": "sorry that should be \nif ignore_binding?\n    result\n  else\n    concat(result, proc.binding)\n  end\n. ",
    "samlown": "An easy way is to just modify the last part of the method as follows:\nif ignore_binding?\n  concat(result.html_safe)\nelse\n  concat(result, proc.binding)\nend\nNo need to add to all the strings. Cheers, sam.\n. I take that back, its a bit more complicated as the yield was causing me problems. I fixed the issue on my fork, but I've not managed to get the tests working due to changes in the way Rails 3 works. Perhaps worth considering creating a new base for Rails 3 code and remove all the back-wards compatibility stuff...\nhttp://github.com/samlown/active_merchant/blob/master/lib/active_merchant/billing/integrations/action_view_helper.rb\n. Auth/Capture can be added, just a simple command change, everything else is practically the same as purchase/refund. I'll add them and test with a production credit card to see how it goes.\nI hear you on the void/cancel. Not quite sure why I went with cancel in the end.\nWorking on it now, thanks!\n. I've re-named cancel to void and included support for authorize and capture. These methods don't seem to work properly in production either, but I'm told they do have intentions to fix this within weeks/months.\nUsing purchase and void however within 24hours has the same effect as an authorize and void.\nPlease let me know if you spot anything else out of place! Thanks, sam.\n. @ntalbott oops, forgot about that! Updated. Hopefully those sample details will work okay :-)\nThank you!\n. ",
    "titanous": "Fixed by 1ee89a70d1f0677be3677c785c8be28d6cbfd4be.\n. This will be solved in ActiveMerchant 2.0 by #33.\n. This is due to the way ActiveSupport dependency loading works (the directory structure is supposed to map 1:1 to the class/module names). I don't think this is really a big issue, either refer to ActiveMerchant::Billing::PaypalGateway or require 'active_merchant/billing/gateways/paypal/paypal_express_response' first.\n. This should be fixed by #42 (in v1.15.0).\n. This looks great. Can you add a remote test?\n. Take a look at this example: https://gist.github.com/793352\n. Superseded by #113.\n. Merged in 7c160de969a580b2f77cb30aaab6dcfcbec02e3a.\n. ActiveMerchant uses autoload, so the related gateway is only loaded when the constant is referred to.\nhttp://ruby-doc.org/core/classes/Module.html#M000443\n. No it does not.\n. I'd be happy to accept a pull request implementing this, we don't take gateway feature requests without code.\n. This looks like a duplicate of #110.\n. Done. Thanks for the contributions!\n. Should be in the next few days.\n. Full disclosure, this is me copy-pasting an email from @codyfauser :)\n. I started on this a while ago, but won't be able to finish it.\nhttps://github.com/titanous/active_merchant/tree/ssl_cleanup\n. How is this different from a refund?\n. That sounds like a void. Is it possible to get a description of why you would use this? It would be useful to put in a comment above the method.\n. I read through the Cybersource docs a bit, and it seems like what they call void is for cancelling purchases/captures before they have settled, and auth_reversal is for cancelling authorizations. In most gateways void does both.\n. Yeah, the minimum ActiveSupport version was bumped to 2.3.11 by #113, I forgot to update the gemspec.\n. @jduff will have a look. Why would you use real credit card numbers in test mode? Also, this patch is hard to review with all the whitespace changes.\n. Yeah, please pull out the whitespace changes. It shouldn't be a big deal to merge it in after that.\n. Yes, it does.\n. Dupe of #128.\n. I didn't see authorize, capture, or refund (referenced credit) methods. Do you support these?\n. @jduff is doing most of the maintenance now, he'll take this from here.\n. Mongrel doesn't work with Ruby 1.9, the remote integration helper probably needs to be rewritten to not depend on it. /cc @jduff\n. Duplicate of #152.\n. Fixed, thanks!\n. :+1:\n. Can you please show me the output of gem list | grep merchant, I'm not seeing this issue with the latest version of the gem.\n. The total of the line item price * quantity and shipping and taxes need to be exactly the same as the total price you are passing in.\n. BTW, this covers some of #114. A few of those bullet points still need to be done in active_utils.\n. :+1: overall.\nWe should also log if ssl_verify has been disabled at the gateway level and the gateway passes verification.\nMake sure you squash this into one commit and it looks like there are a few gateways that don't have live_url set:\nActiveMerchant::Billing::BraintreeBlueGateway\nActiveMerchant::Billing::BraintreeGateway\nActiveMerchant::Billing::IdealBaseGateway\nActiveMerchant::Billing::ModernPaymentsGateway\nActiveMerchant::Billing::PaypalCaGateway\nActiveMerchant::Billing::PaypalDigitalGoodsGateway\nActiveMerchant::Billing::PaypalExpressGateway\nActiveMerchant::Billing::PaypalGateway\nActiveMerchant::Billing::SageGateway\nActiveMerchant::Billing::SamuraiGateway\nActiveMerchant::Billing::SmartPs\nActiveMerchant::Billing::UsaEpayGateway\n. I think just adding a self.abstract_class = true solves the problem nicely.\nI meant logging that self.ssl_verify = false is set if a gateway passes verification in the rake task. The active_utils changes need to be made as well.\n. abstract_class does indeed come from Rails, but it's just a pattern and I think it fits nicely here. Define a new class attribute on Gateway that defaults to false for child classes and set it to true for each of the \"abstract\" gateway classes.\n. :shipit: squash and merge. Nice work!\n. Yes, the latest version of ActiveMerchant is still compatible with Rails 2.3.\n. Stripe has #reverse implemented on their end, so the Stripe integration does this.\n. This failure case should be in a separate test method.\n. Hmm, it looks like test_successful_authorization_and_failed_capture has the same issue. I didn't see that before.\nGenerally, test cases should be separated into successful and failing cases, but there are places where this rule is broken. It's not a big deal.\n. This method should be called credit, as it is unreferenced (takes a credit card number). If there is a referenced credit (takes an authorization id), then it should be called refund.\n. Will the gateway work if this is set to true?\n. Is it possible to make this test pass instead of commenting it out?\n. Should these comments still be here?\n. This looks like a noop, does it need to be here?\n. Another noop?\n. Why are these two lines commented?\n. This should be called refund, as it's a referenced credit.\n. This should be called store, and should also accept an optional options argument.\n. This should be merged with purchase. See braintree, beanstream for examples.\n. The unless condition can be removed, as a hash key that doesn't exist will return nil.\n. +1. I'll merge it in if this gets fixed.\n. json is included in the 1.9 stdlib, so it will still need to be required. Please remove this conditional and modify the gemspec to have the json gem as a dependency only on 1.8.\n. The ua memoization should be fine without this line.\n. Parentheses are not required for flow control statements.\n. Ditto on the parens.\n. I think you can hard code method to :post in the ssl_request call below and remove the argument, as there are no other types of requests.\n. Use strip instead of gsub here.\n. You should probably just use ActiveMerchant::VERSION instead of having a separate version for one gateway.\n. I'm not sure what this comment refers to? All these codes seem to match up properly.\n. If possible, please test store and void here as well.\n. Sure, it's fine then. You could consider making method the last argument and :post the default.\n. Okay, I'll confirm/fix.\n. No need to print the list of gateways. You could, however, print the total number of gateways to be tested.\n. This list should be output at the end.\n. No need to print this.\n. I think that we should log the error class as well.\n. We might want to print a warning here so that we know if any gateways get completely missed.\n. Where are these used?\n. Where are these used?\n. You should probably use #{} string interpolation here.\n. ",
    "majofi": "good question :)\n. ",
    "contentfree": "And the answer is?\n. This is Ruby 1.9.2-head\n. Looks like that works. Version bump to 1.7.1 and push to gemcutter?\n. Yes please. Was just coming to the point where I'd be adding this myself. Great addition to AM:master.\n. ",
    "rdp": "anybody?\n. please?\n. bump\n. dwolla has a payment gateway? why does it mention visa in one of those files? (just wondering, code looks fine)\n. ",
    "jjb": "contentfree and rdp -- you may want to vote this issue up (little arrow in upper left of ticket view)\n. actually i'll fork and send a pull request.\n. ",
    "jemminger": "Disregard, payments must be made without the :test => true flag to get a non-zero transaction_id, and then after that a credit can only be made against a settled payment transaction.  Settlement happens every ten minutes in the authorize.net test environment.  Mocking a credit response is the only feasible solution.\n. ",
    "ntalbott": "I'd be open to considering a Pull Request for this; might be best to start with an example gateway or two so we can review and see if it makes sense to apply to all gateways.\n. Yah, we've built something like what you have for Spreedly as well, though we put it in our wrapper around AM, not in the AM gateways themselves.\nI'm ambivalent as to whether this belongs in AM itself; one nice thing for us about keeping this in our wrapper is that we can easily attach other metadata, control the order, etc.\n. I'd definitely review a Pull Request with support for this. Closing in lieu of seeing that.\n. Closing this; feel free to re-open with tests.\n. I think dropping 2.x compatibility is a requirement for taking this patch, and I'd be all for doing so. Not really my call as to when to do that, though.\n. Closing this, but would love to see it revisited once we've removed backwards compatibility with < 3.0.\n. Closing for now; please feel free to re-open if the above comments can be addressed.\n. @zenom most of this should be included in 793211b.\n. I'd be happy to shepherd this through to merge if you can update it to merge cleanly against master. Thanks!\n. Superseded by #280.\n. Definitely - I'll provide additional feedback there.\n. This seems to affect a lot more than just Merchant e-Solutions; can you isolate the changes? I'd happily review (and merge) a more focused patch. You can just open a new PR with the focused patch; going to close this one.\n. I don't know the subscription-specific bits of ActiveMerchant well; does this match up with the API other gateways are using?\nIn general, I'll happily review this if you can get it updated against master.\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. Getting a test failure when running this against master:\n1) Failure:\ntest_successful_return(AdyenReturnTest)\n    [./test/unit/integrations/returns/adyen_return_test.rb:9:in `test_successful_return'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<false> is not true.\nWould love to merge if I can get a version where tests run cleanly.\nP.S. Also got warnings about trailing whitespace when applying; not a big deal but would be nice to have fixed.\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. Would be happy to merge this if I can get a version that applies cleanly to master.\n. Closing, but please feel free to re-open with fresh codes.\n. If you split these up into separate commits (and avoid including merge commits) I'd be happy to work to get them merged. Thanks!\n. I'd definitely need the merge commit cleaned out.\nAs for splitting them up into separate PR's, that's more debatable. In general I'd personally submit these as at least two separate PR's (refund, and adding validationMode), but honestly I'd probably take the whole lot if the merge was gone and the whole PR applied cleanly.\n. I'd be happy to review this for merge if you can update it to apply cleanly to master. Thanks!\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. Applied.\n. Closing this in preference for #124.\n. Curious what the Shopify gang's take on this is - is this a good approach for ActiveMerchant? Don't want to ask @knapo for an updated PR if we're not interested in merging something like this.\nAt this point I'm ambivalent, though I could see this being handy for us at Spreedly eventually.\n. I would review and merge a fresh patch that tracked with how Rails does i18n, but it probably makes sense to wait to do that until we break backwards compatibility with < 3.0.\n. See #142 for discussion.\n. Merged.\n. My pleasure - actually needed the code concurrent with this coming in, so you saved me a bunch of time. So thank you :-)\n. We'd need a few things in order to merge this:\n- Working remote_eurobank_test that tests as much of the functionality as possible against the real test environment of the gateway.\n- XML should be built with Builder (see for example https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/realex.rb#L128)\n- If at all possible, #purchase should be supported.\n- Using #credit for refunding transactions is deprecated; we need to update the generator, but it should be #refund.\n- Does the authorization returned by #authorize correspond to the authorization passed to #capture/#refund/#void? If yes, awesome, if not, those two need to be synced up. The goal with response.authorization is that it encapsulates everything needed to pass to #capture/#refund/#void later.\n- All commits should be rebased (in a branch works well) in to a single commit and a pull request sent for that.\n- You should take full credit in the CONTRIBUTORS file for the awesome work.\nWith these tweaks I'd be happy to merge; feel free to drop any questions you have here. Thanks!\n. - See WorldPay gateway for an example of encapsulating #authorize+#capture in to a #purchase method: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/worldpay.rb#L27\n- Most of the gateways don't have public credentials; what we're most concerned about is that you've written the remote tests, confirmed that they pass using your private test credentials, and included the remote test so that in the future other implementors with their own private credentials can run them and see that the implementation is still valid. Is that a possibility in this case? You can use a local fixture file to make sure you don't accidentally commit your private credentials: https://github.com/Shopify/active_merchant/blob/master/test/test_helper.rb#L138\n. Any progress on this? Would love to see it happen.\n. Sweet - thanks for the pointer to the branch. Will be super handy if I get a chance to work on it.\n. Moved to https://github.com/Shopify/active_merchant/wiki/ActiveMerchant-Next\n. Moved to https://github.com/Shopify/active_merchant/wiki/ActiveMerchant-Next\n. Moved to https://github.com/Shopify/active_merchant/wiki/ActiveMerchant-Next\n. In general seems solid, and I'd love to merge if the commented issues can be addressed. Thanks!\n. Going to close this out for now; please feel free to re-open if you get a chance to update it for inclusion. Thanks!\n. Re-opened - I look forward to reviewing the next round!\n. Closing in favor of #224.\n. LOVE this. If you can get it cleanly applying to master, I'll merge ASAP.\n. This looks good, but its ended up being really large. Can you split it up into a few pieces? I'd recommend:\n- Adding NAB\n- Changes to SecurePay\n- Build/gemspec changes (if necessary)\n- Whitespace cleanup (if necessary)\nWill happily review and merge if I can get it in smaller chunks. Thanks!\n. Closing this in lieu of the above comments being addressed. Please re-open if you get a chance to come back to this - thanks!\n. Can you split this up into two PR's, one for Cybersource and one for X-Charge? Please squash them as well, and then I'll review for merging. One thing that will need to be done for both to get merged is to use the standard recurring API (see the bogus gateway, authorize.net, etc.) rather than defining create_subscription/update_subscription. Thanks!\n. Agree with @jduff - this should probably go into the existing PayPal Express gateway, and needs tests to be merged. Closing, but feel free to re-open if those things can be addressed. Thanks!\n. We definitely can't add specific merchant-defined fields to the library, but would happily consider a PR adding general support for merchant-defined fields to the Auth.Net gateway. Thanks!\n. This looks good for merge, but can you squash it to a single commit? Thanks!\n. Any opinions from other committers on this approach? I wonder if a markdown file documenting the API would be simpler, in conjunction with a lint as proposed in #116.\nIn general, I'm totally agreed we need something better around both documentation, just not sure if I like the abstract class approach.\n. Closing as I'm not a fan of using an abstract class for this; I think a lint approach combined with better docs will be a better approach.\n. If you can address the above comments and get the applying cleanly against master I'd be happy to merge.\n. Appears that this is fixed, so closing.\n. I don't have any way to verify or replicate this; closing. Feel free to re-open with more info and/or a remote test that shows the issue. Thanks!\n. Agreed this field shouldn't be be passed to external services; I'll gladly merge a PR to fix the issue if it still exists. Thanks!\n. It seems like this should be an integration, not a gateway. I'm going to close this, but will review for merge a PR that approaches this as an integration.\n. If you can address the above, do a quick whitespace cleanup (I got trailing whitespace warnings when applying) and squash it down to one commit, I'll merge ASAP. Thanks!\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. I'd be up for merging this, but will need a few tweaks first:\n- Can you squash to a single commit.\n- I'm thinking this should use the standard recurring API if possible (see Auth.Net, bogus gateway, etc.)\n- Is the vindicia-api gem released?\n- Needs to be updated to apply cleanly against master.\nThanks!\n. Would love to see this patch updated per @jduff's comments, but going to close for now. Please re-open if you get a chance to update and it's ready to merge!\n. @edlebert I think because @jslingerland didn't re-open it so it got lost in the shuffle. If you or @jslingerland are available to make any necessary tweaks, feel free to re-open it and I'll have a look when I next get a chance to work on the AM patch queue (soon I hope!).\n. This looks solid, but can you (a) update against master and (b) squash the related commits? Thanks!\n. To clarify: I'm cool with multiple commits, but would prefer one commit per logical change.\n. Can we close this PR out now? It seems to have been subsumed by #268 and the other already merged PR's.\n. Going to close this and eagerly anticipate the resubmission with the changes incorporated. Thanks!\n. Closing this as Dwolla is better implemented as an integration.\n. Completely agreed - fixed.\n. Applied (and dead code removed). Awesome work!\n. I guess the another possibility would be to make it something that has to be explicitly enabled via an option at gateway creation time, right?\n. Do you think you can research this @odorcicd? We'll need someone who has a Moneris account to see if there's a way to have those fields ignored, and failing that to make this disabled by default.\n. Not sure; this would be a better question for the mailing list. Of course we'd happily accept a Pull Request if code needs to written to handle it.\n. Looks solid in general; am happy to merge if I can get answers to the above questions. Thanks!\n. I think it's good to merge, I just need it squashed down into a single commit - thanks!\n. Hmmm... I guess we could keep the commits. Bigger issue at the moment seems to be that the patch won't apply cleanly for me. Can you rebase against master?\n. I'm leery to add a whole duplicated set of test suites just for an authentication method - could it instead be tested in the existing Beanstream test suites? Or am I missing something?\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. Would be happy to merge this if you can update it for master. Thanks!\n. I'm thinking a3a4e037f16421add84403a95627872059644028 (recently merged) covers this functionality in a slightly different manner. Do you concur?\n. Looks fine; can you squash into a single commit? Thanks!\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. Fixed by 92855a6ed79c9e46326d5be614877d3199aea7aa.\n. Added as a dev dependency in 92855a6ed79c9e46326d5be614877d3199aea7aa.\n. Closed by c37dc1d.\n. Merged in 19004c958d11f4201136672bdcd139e4cfbdb5ca.\n. Would gladly consider this as a Pull Request - thanks!\n. Going to have to defer this to someone who has more experience with 3D Secure - I don't think we have a good convention for it in the codebase yet, and I'm not well versed enough in 3D to be the one to establish the convention.\n. I'm going to take this as-is; we can always come back and make the 3D secure stuff consistent once a convention is established.\nThat said, this isn't applying cleanly against master anymore - can you rebase?\n. Nope, unfortunately still broken. Also, it looks like you inadvertently picked up a bunch of other commits. Looks like you should probably rebase and/or start over and cherry-pick your commits in.\n. Much better ! Looking good except now I'm getting an error running the tests against 1.9:\n1) Error:\ntest_successful_void(MyGateTest):\nTypeError: can't convert Symbol into Integer\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/my_gate.rb:323:in `[]'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/my_gate.rb:323:in `void'\n    test/unit/gateways/my_gate_test.rb:91:in `test_successful_void'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n. Works beautifully - if you can squash to a single commit, I'll merge ASAP. Thanks!\n. I'm not seeing any unit test failures here, so that's good.\nThat said, the remote tests are all timing out - any idea why that would be?\n. No worries - thanks for closing the loop!\n. @fuseware I think it just needs a champion to take the code from @requnix's fork and get it working solidly on the latest ActiveMerchant.\n. Looks like all of this has already been merged in some form - thanks!\n. Is this in the context of a Rails app? If so, what version of Rails?\n. Feel free to re-open this if you're still running into the issue and can provide more details.\n. I would want to see this integrated into the existing gateway using the recurring set of API methods that are patterned in the Authorize.Net gateway, bogus gateway, etc. If you re-open a PR taking that approach I will definitely review it.\n. Before merging I'd want to at least see some unit tests that verify the line items are getting added correctly to the request. Thanks!\n. Not sure about the other committers, but I don't find myself caring enough about gem outdatedness to want to track it this closely. Going to close unless someone else overrides me.\n. I'll gladly merge this if you can remove the CHANGELOG changes (we'll handle those) and get it cleanly applying to master. Thanks!\n. Not sure; the Shopify folks usually handle releases, so it'll be whenever they decide to cut the next one.\n. @jduff will do; my guess is we'll be ready later this week for one.\n. This looks OK, but I'd like to see some tests before merging. Also please don't update the version and CHANGELOG - we'll take care of those at release time. Thanks!\n. Would definitely merge a Pull Request that fixed this - thanks!\n. Done!\n. This seems to blow up the unit tests - if you can get those fixed I'll consider for merge.\n. Going to close this due to inactivity - if anyone wants to pick it up and champion getting it merged, that would be awesome!\n. There's actually a PR for one approach to this: #87. Would love feedback on the approach there.\n. Squash the commits and use sub instead of gsub and I'll happily merge. Thanks!\n. Fixed by merge 2ccfdb54a7dc74e3b2c6008e5e76c5560ea5d034. Closing.\n. I think some of this has already been fixed; can you re-apply to master?\n. Only other thing I need is for this get squashed into a single commit - thanks!\n. Generally looks solid; with a few tweaks (see comments) I'd be happy to merge!\n. When I fix the require, I'm getting all errors from running the tests:\n```\nntalbott@joshua:~/git/active_merchant$ ruby -Itest test/unit/gateways/itransact_test.rb \nRun options: \nRunning tests:\nEEE\nFinished tests in 0.108862s, 27.5578 tests/s, 0.0000 assertions/s.\n1) Error:\ntest_successful_card_purchase(ItransactTest):\nNoMethodError: undefined method b64encode' for Base64:Module\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:444:insign_payload'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:401:in post_data'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:389:incommit'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:155:in purchase'\n    test/unit/gateways/itransact_test.rb:27:intest_successful_card_purchase'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n2) Error:\ntest_successful_check_purchase(ItransactTest):\nNoMethodError: undefined method b64encode' for Base64:Module\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:444:insign_payload'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:401:in post_data'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:389:incommit'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:155:in purchase'\n    test/unit/gateways/itransact_test.rb:38:intest_successful_check_purchase'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n3) Error:\ntest_unsuccessful_card_request(ItransactTest):\nNoMethodError: undefined method b64encode' for Base64:Module\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:444:insign_payload'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:401:in post_data'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:389:incommit'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/itransact.rb:155:in purchase'\n    test/unit/gateways/itransact_test.rb:49:intest_unsuccessful_card_request'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n3 tests, 0 assertions, 0 failures, 3 errors, 0 skips\n```\n. Looks like you missed one of the requires...\nOnce that's fixed, can you squash this all into a single commit?\n. Will need review from someone at Shopify that knows about 3d-secure - @codyfauser?\n. The issue here is more one of API vs. whether the code is production ready. ActiveMerchant needs a clear API for 3d-secure, and I don't feel competent (at this point) to define that.\n. OK, revisiting this, I'd rather the perfect not be the enemy of the good, so I'd like to go ahead and merge it. Can someone update it to merge cleanly against master and I'll review?\n. Checked this locally and seems solid - going to merge.\n. Checked locally and it looks good. Merging.\n. This looks like a great start, but to accept it into ActiveMerchant I'm going to need to see it be a bit more idiomatic. Some of the major things I notice:\n- Ruby uses underscores for method and variable names, never camel case.\n- The configuration accessor seems confusing - can you use the already used and more idiomatic options that other gateways take?\n- Class variables (@@var) are generally avoided in Ruby; you should probably use constants instead.\n- Putting empty parens on method calls not taking arguments is generally not idiomatic Ruby.\n- Ruby always returns the last value in a method, so no need to explicitly return in general.\nNot guaranteeing this will be all, but it'll be a good start. Would like to see this make its way in, so I'll keep an eye on this and re-review once you address these issues. Thanks!\n. Can you squash, and also get this applying cleanly to master? If you just rebase in this current branch, the PR will pick it up; no need to open a new PR. I'll then test it out and we should be good to merge.\n. This still doesn't seem to apply cleanly to master, and isn't squashed (looks like 7 commits still). If you can fix that up it would be great - thanks!\n. Just a tip for the future: if you work in a branch other than master, it makes it easy to do a force push to just that branch in order to update Pull Requests with rebased history.\n. create_alias isn't really a standard ActiveMerchant method; what's the purpose? Is it basically a store?\nTo accept this we'd need it to match up with standard ActiveMerchant semantics for store, and a matching unstore would also be handy.\n. There isn't any real documentation around it (unfortunately); your best bet is to look at a couple of existing gateways that implement it to see how they do it (grep 'def store'). I think it would basically just be what you already have, but renamed to store.\n. It looks like ActiveMerchant may have the wrong URL:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/secure_pay_au.rb#L8\nIf so, we'd happily accept a Pull Request that fixed it; just be sure to run the remote tests and make sure they all still pass afterwards. Closing this; feel free to re-open with more data or (preferably) open a PR.\n. Used a different workflow for merging the PR (git am) and apparently it doesn't auto-close. All merged, though!\n. This looks like a great start; please address the above comments, and squash this all into a single commit, then I'll re-review and work to get it merged. Thanks!\n. This looks really close; can you go ahead and squash it into a single commit? Once that's done I'll do a final review and hopefully merge it in. Thanks!\n. My feedback:\n\nOgone doesn't seem to support unstore except in batch operations, so I guess this won't be implemented\n\nNo worries, just wanted to check.\n\nstore is currently used in the gateway instead of billing_id, so I kept that. Should I rename it to billing_id and update the rest of the gateway as well?\n\nNot important to me - your call.\n\nthe response contains an ALIAS parameter, so we can always return the response and the generated alias can be recovered using response.params['ALIAS']. This is good because I really don't like returning a different object depending on circumstances, but also very ugly. Should I create an OgoneResponse class, which would extend Reponse?\n\nMy only question is, should the alias actually be returned as the authorization? Generally Response#authorization is what's used for future operations against a transaction, so I'm wondering if the alias should go in there. Not sure how that would interact with what's already being returned in authorization; this is really a question about what's best for Ogone, and I'll defer to you there.\n. 1. I'd prefer to not define unstore if it's not needed/supported.\n2. Good research! Yup, sounds like billing_id is the way to go, with store for backwards compatibility.\n3. Honestly, I don't think any of the core AM contributors (myself included) do much at all with the recurring logic in AM. I'd personally like to see it all pulled out into a separate gem that simply has AM as a dependency, where it can grow and evolve on its own. But, to do that, someone would need to step up and make it happen by creating that project, pulling in the recurring bits from AM, and getting some momentum around it so AM can drop its handling of recurring logic.\n4. Unit tests would be awesome if provided!\n. If you can address the above comment and squash this all into a single commit, I'll merge ASAP. Looks fantastic!\n. Can you rebase/squash this down into a single commit?\n. I think you can rebase/squash and then force push into the branch. No worries though, I'll head over and merge the new PR.\n. Good catch - thanks!\n. This looks really solid! Looks like some changes to README broke this; can you address the above comments, get it applying cleanly again (be sure to squash), and I'll merge ASAP? Thanks!\n. @moeyb you'll want to take this up with Shopify - their support is super helpful.\n. Merged.\n. This doesn't seem to apply cleanly - can you rebase against master? FYI you don't need to create a new PR; just rebase and force push into this branch and the PR will pick it up.\n. No worries - I've been honing my PR handling the last few days, so checking one only takes me a few minutes now :)\n. Closed by 2fff679f19e60a4e46cf8719f91f57a10c89874a. Had to do some cleanup and rebase against master, but it should all be there now. Thanks!\n. Going to go ahead and merge this, but I'd love to see another PR with a test to make sure it doesn't break again.\n. Thanks!\n. Awesome! Squash and I'll merge ASAP.\n. Thanks for pointing this out; would love to see a Pull Request for it. Going to close this in the meantime, but anyone should feel free to use this to discuss how MtGox/Bitcoin might best be supported in AM.\n. Tests also seem to pass fine on 1.8.7; @jduff, any concerns about using a newer version of money?\n. Can you give me more context? How is the CIM being called to trigger this error?\n. OK, thanks for the update. A lot did change in the CIM in this latest version, so I wouldn't be surprised if it broke mocks that were dependent on some of the internals.\n. My pleasure! It actually wasn't really me, I just merged in a bunch of contributions from others. Glad it was a help.\n. What's the status of this PR? Can it be merged?\n. Do you have access to an NMI gateway account to test against? If so, go ahead and fix it as you think best and submit a Pull Request. It's hard for us maintainers to know what's best for these situations since we often don't have access to or experience with the API that's being wrapped, so we rely on contributors to fix things up. Thanks!\n. +1\n. Can you squash this? I'll then review and merge.\n. I'm getting test failures under 1.9:\n```\n  1) Failure:\ntest_store_with_verify_card_false(BraintreeBlueTest) [/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/braintree_blue.rb:92]:\nunexpected invocation: #.id()\nsatisfied expectations:\n- expected exactly once, invoked once: #.last_name(any_parameters)\n- expected exactly once, invoked once: #.first_name(any_parameters)\n- expected exactly once, invoked once: #.email(any_parameters)\n- expected exactly once, invoked once: #.credit_cards(any_parameters)\n- expected exactly once, invoked once: Braintree::Customer.create()\n2) Failure:\ntest_store_with_verify_card_true(BraintreeBlueTest) [/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/braintree_blue.rb:92]:\nunexpected invocation: #.id()\nsatisfied expectations:\n- expected exactly once, invoked once: #.last_name(any_parameters)\n- expected exactly once, invoked once: #.first_name(any_parameters)\n- expected exactly once, invoked once: #.email(any_parameters)\n- expected exactly once, invoked once: #.credit_cards(any_parameters)\n- expected exactly once, invoked once: Braintree::Customer.create()\n```\nAnd warnings under 1.8:\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/braintree_blue.rb:92: warning: Object#id will be deprecated; use Object#object_id\n./Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/braintree_blue.rb:92: warning: Object#id will be deprecated; use Object#object_id\nCan you get those fixed up?\n. Beautiful!\n. Awesome! This has bugged me in the past, but I never went back and fixed it.\n. This isn't applying cleanly for me, not sure why - can you squash into a single commit and I'll retry?\n. They're merge issues when applying with git am - I'm guessing squashing this all down into a single commit will fix them.\n. Can you give me some more context, in particular the contents of the params (scrubbed if necessary) that is being passed when this error is thrown?\n. ActiveMerchant is fairly Rails agnostic; in this case I think what you want to do is pass in request.raw_post rather than the parsed params. That will allow the integration to handle its own parsing of the post body.\n. Nice work - thanks!\n. Is Moneris US a completely different gateway than the other Moneris gateway we already support?\n. I'm getting errors when running the unit tests:\n``\n  1) Error:\ntest_capture_is_valid_xml(MonerisUsTest):\nNoMethodError: undefined methodeach' for nil:NilClass\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/moneris_us.rb:172:in post_data'\n    ./test/unit/gateways/moneris_us_test.rb:94:insend'\n    ./test/unit/gateways/moneris_us_test.rb:94:in test_capture_is_valid_xml'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run'\n2) Error:\ntest_purchase_is_valid_xml(MonerisUsTest):\nNoMethodError: undefined method each' for nil:NilClass\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/moneris_us.rb:172:inpost_data'\n    ./test/unit/gateways/moneris_us_test.rb:79:in send'\n    ./test/unit/gateways/moneris_us_test.rb:79:intest_purchase_is_valid_xml'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in __send__'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:inrun'\n```\nI'm also getting a failure when running remote tests:\n1) Failure:\ntest_successful_authorization_and_void(MonerisUsRemoteTest)\n    [test/remote/gateways/remote_moneris_us_test.rb:50:in `test_successful_authorization_and_void'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p352/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\nResponse failed: #<ActiveMerchant::Billing::Response:0x10a6f5440 @authorization=nil, @success=nil, @cvv_result={\"code\"=>nil, \"message\"=>nil}, @params={\"trans_id\"=>nil, \"ticket\"=>nil, \"card_type\"=>nil, \"response_code\"=>nil, \"timed_out\"=>nil, \"iso\"=>nil, \"trans_time\"=>nil, \"receipt_id\"=>nil, \"trans_date\"=>nil, \"complete\"=>false, \"trans_amount\"=>nil, \"trans_type\"=>nil, \"auth_code\"=>nil, \"reference_num\"=>nil, \"bank_totals\"=>nil, \"message\"=>\"Invalid follow_up_amount number\"}, @fraud_review=nil, @message=\"Invalid follow_up_amount number\", @avs_result={\"code\"=>nil, \"postal_match\"=>nil, \"street_match\"=>nil, \"message\"=>nil}, @test=true>.\n<nil> is not true.\nThe code looks solid, so if you can get me fixes for the tests, I'll be happy to merge. Thanks!\n. Actually would be best to split the void change into another PR; I think we'll actually want to abstract away the zero-dollar capture behind the void method.\n. The PR is based on the branch, so if you force push a different set of commits into the branch, the PR will update.\nIf the type of the transaction matters, maybe we should add additional info to the authorization string to indicate that?\n. Still getting a remote failure:\n1) Failure:\ntest_successful_authorization_and_void(MonerisUsRemoteTest)\n    [test/remote/gateways/remote_moneris_us_test.rb:50:in `test_successful_authorization_and_void'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\nResponse failed: #<ActiveMerchant::Billing::Response:0x106929210 @fraud_review=nil, @avs_result={\"street_match\"=>nil, \"message\"=>nil, \"postal_match\"=>nil, \"code\"=>nil}, @test=true, @message=\"Invalid follow_up_amount number\", @authorization=nil, @success=nil, @cvv_result={\"message\"=>nil, \"code\"=>nil}, @params={\"message\"=>\"Invalid follow_up_amount number\", \"bank_totals\"=>nil, \"receipt_id\"=>nil, \"trans_type\"=>nil, \"trans_date\"=>nil, \"reference_num\"=>nil, \"trans_amount\"=>nil, \"response_code\"=>nil, \"timed_out\"=>nil, \"iso\"=>nil, \"auth_code\"=>nil, \"complete\"=>false, \"ticket\"=>nil, \"trans_time\"=>nil, \"card_type\"=>nil, \"trans_id\"=>nil}>.\n<nil> is not true.\n. Working beautifully, just one last request: can you squash this all into a single commit? I'll merge ASAP once I have that. Thanks!\n. With a large open source project with a lot of contributors, it's really handy to keep the history as clean as possible. Makes it much easier to see at a glance what's gone on and who has done what.\n. Wow, this is a monster - thanks for digging in! Can you split these changes up into a few different PR's so we can review each of your improvements in isolation?\n. In general this looks good - can you address the above commends and then squash into a single commit for merging? Thanks!\n. In general, the most important thing is to not break existing users of the code, so to take the two issues you brought up:\n- So long as it loosens the requirements, better matching the API in terms of required parameters would be OK. \n- We should keep the wacky setting of amount to $1 for now, since dropping it would probably break someone somewhere.\nIn general the smaller you can keep these \"stylistic\" patches the better - makes it much easier to review them.\nThanks!\n. Decided to just go with your test fix for now; I'd like this to be abstracted away, but that might be a big project. Feel free to tackle said project if you'd like :)\n. This looks great - can you squash it into a single commit? I'll then merge ASAP. Thanks!\n. I'd gladly review a Pull Request to fix this - thanks!\n. PR submitted in #320.\n. I'm not sure I like overloading the use of @options[:test] like this; it seems like the class-wide test flag (whether via test? or @options[:test] should determine the url as in other gateways.\nInstead, could an option be passed into the purchase method that indicates the transaction should be run in test mode? Since the test mode is on a per-transaction basis, that API seems like it would make more sense.\nThoughts?\n. You best bet is to create a branch in your fork, make all your changes there, then do the PR from there. The nice thing about using a branch is that it makes it easier to rebase/reset/etc.\n. Once you've made the above tweak, you can just squash this down into a single commit and force push into your branch and the PR will pick up your changes.\n. For future reference, you'll get more exposure for this type of question on the mailing list: http://groups.google.com/group/activemerchant\nI'm going to close this Issue, as it's not a problem with ActiveMerchant itself.\n. This generally looks good, but I get a bunch of warnings when running the tests under 1.8:\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:11: warning: already initialized constant API_VERSION\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:17: warning: already initialized constant URLS\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:20: warning: already initialized constant PAYPAL_NAMESPACE\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:21: warning: already initialized constant EBAY_NAMESPACE\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:25: warning: already initialized constant ENVELOPE_NAMESPACES\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:29: warning: already initialized constant CREDENTIALS_NAMESPACES\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:40: warning: already initialized constant AUSTRALIAN_STATES\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:43: warning: already initialized constant SUCCESS_CODES\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb:45: warning: already initialized constant FRAUD_REVIEW_CODE\nCan you fix those up?\nBTW, no need to open a new pull request; you can just rebase and force push to your branch and this PR will pick up the changes.\n. We can't help much with failing remote tests, especially if there aren't shared credentials for the gateway. One possibility in this case is that the tax stuff requires a feature that isn't enabled on your Cybersource account, but that's just a guess.\n. No, no issue.\n. Closing this out, but feel free to re-open and/or send a Pull Request.\n. I'd like to see remote tests for all the API methods; right now there's authorize & capture, but purchase, void, etc. could use remote tests as well.\nYou'll also want to look at how the other gateways use the fixtures.yml file to provide credentials for the remote tests; best is if you can include some test credentials in that file that will always work, vs. requiring contributors to go to you to get their own set of credentials.\n. I get an error running tests:\n1) Error:\ntest_auth_fail(LitleTest):\nNoMethodError: undefined method `require_relative' for main:Object\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/LitleOnline-8.12.0/lib/LitleOnline.rb:38\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/activesupport-3.2.3/lib/active_support/dependencies.rb:251:in `require'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/activesupport-3.2.3/lib/active_support/dependencies.rb:251:in `require'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/activesupport-3.2.3/lib/active_support/dependencies.rb:236:in `load_dependency'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/activesupport-3.2.3/lib/active_support/dependencies.rb:251:in `require'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/litle.rb:2\n    /Users/ntalbott/git/active_merchant/test/unit/gateways/litle_test.rb:6:in `setup'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.11.3/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:21:in `run'\n. Actually happens for all tests.\n. 1.8.7, 1.9.2 & 1.9.3 are the bare minimum.\n. Looks like things have changed since and this branch won't merge any longer - can you get it applying cleanly again?\n. Weird, I'll have a look.\n. So far I've narrowed it down to something that changed between 8.10.1 and 8.12.2 of the LitleOnline gem. Still trying to figure out what...\n. OK, it looks like it's due to the LitleOnline gem not namespacing its classes; this is causing a conflict with the Vindicia gem, which while it does namespace, doesn't always fully qualify references to classes. This is causing the Vindicia gem to grab the Configuration class from the LitleOnline gem, and wreaking havoc.\nYou're going to cause users of LitleOnline heartburn if you don't namespace anyhow, so can you rev the LitleOnline gem to properly namespace all classes in a module (LitleOnline would work)?\n. Looks like it's passing now - should I try merging again?\n. You seem to understand it better than I do at this point - please do give us a Pull Request if you can. Preferably with a test - thanks!\n. I'm getting test failures after applying this:\n```\n  1) Failure:\ntest_generate_md5check(QuickpayHelperTest) [test/unit/integrations/helpers/quickpay_helper_test.rb:26]:\n<\"31a0a94ce953208d05f3f3d255fff31f\"> expected but was\n<\"3dc7b51567c4911cc38511f796773366\">.\n2) Failure:\ntest_generate_md5string(QuickpayHelperTest) [test/unit/integrations/helpers/quickpay_helper_test.rb:21]:\n<\"3authorize24352435daorder500500USDhttp://example.com/okhttp://example.com/cancelhttp://example.com/notify00mysecretmd5string\"> expected but was\n<\"3authorize24352435daorder500500USDhttp://example.com/okhttp://example.com/cancelhttp://example.com/notify01mysecretmd5string\">.\n```\n. Looks great - can you squash into a single commit? If you force push into your branch the Pull Request will update automatically. Thanks!\n. This looks good to me, especially in light of the issues with the other approach you tried first. :+1:\n. Any update on this? Should it be merged?\n. Closing this for now; if it's still needed I'd be happy to help however I can.\n. Ugh, just merged another change that tweaked the README; in general, don't tie README changes to code changes, since it's such a point of conflict.\nCan you get this applying cleanly again (I'd recommend taking out the README change, as I'll come back and update it in one fell swoop shortly) and I'll apply? You can just force push to your branch and this PR will pick it up.\n. When I run the tests under 1.8, it loops doing this for a long time before the tests run:\nLoaded suite test/unit/gateways/vindicia_test\nStarted\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nwarning: peer certificate won't be verified in this SSL session\nI also note that even under 1.9, there's a noticeable lag sometimes at the beginning of the suite run. Is there maybe some remote endpoint being called from the unit tests?\n. Ugh, that's going to be a show-stopper - can you mock that out? We definitely don't want any network traffic from the unit tests; we don't want to assume they're run online, or that they're run over a fast network connection. The warnings are pretty ugly, too :smile:\n. Two things:\n1. I think it would be better to depend on a git sha rather than depending on a branch; that will provide a lot more deterministic environment.\n2. I'm still getting a warning in 1.8 (and a pause in 1.9) that indicates the network is being hit:\nwarning: peer certificate won't be verified in this SSL session\n. So which approach do you think we should take - using a regex or specifying out the TZ? I'm somewhat curious about how PayPal will treat this, since they don't seem clear on what TZ they run the search in.\nAnyhow, if you think specifying the TZ is best, just update this PR taking out my regex and I'll merge. Thanks!\n. Took your change in b2a5ef074 - thanks!\n. OK, I take it back; this ended up breaking under 1.8 since it doesn't support Time.new with arguments. I'm open for other ideas if you think it's worth it...\n. Yah, it seems like this next to impossible until we drop 1.8 support. Thanks for looking into it!\n. Wow @mnoack, you've been busy! @nagash any thoughts on collaborating with @mnoack on this to add in his awesomesauce? Maybe @mnoack could base a branch off of this nagash:add_anz_egate_gateway branch and apply his tweaks there?\n. So what's the status? @mnoack are you going to open a new PR?\n. Superseded by #345.\n. I get test failures when running under 1.8:\n``\n  1) Failure:\ntest_generate_md5hash(EpayHelperTest)\n    [./test/unit/integrations/helpers/epay_helper_test.rb:25:intest_generate_md5hash'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in __send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:inrun']:\n<\"568c5facd9bffdf537a503bb05a683b0\"> expected but was\n<\"fa1429e3d5508b00e6ba80dcd2084097\">.\n2) Failure:\ntest_generate_md5string(EpayHelperTest)\n    [./test/unit/integrations/helpers/epay_helper_test.rb:21:in test_generate_md5string'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<\"99999999500DKK30order500http://example.com/okhttp://example.com/cancelhttp://example.com/notifysecretmd5\"> expected but was\n<\"http://example.com/notifyhttp://example.com/ok999999990500order5003DKKhttp://example.com/cancelsecretmd5\">.\n3) Failure:\ntest_acknowledgement(EpayNotificationTest)\n    [./test/unit/integrations/notifications/epay_notification_test.rb:25:in test_acknowledgement'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n is not true.\n4) Failure:\ntest_generate_md5hash(EpayNotificationTest)\n    [./test/unit/integrations/notifications/epay_notification_test.rb:39:in test_generate_md5hash'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<\"6f81086c474f03af80ef894e48f81f99\"> expected but was\n<\"a4b3859ddd9c2a71b155d0c614049e7d\">.\n5) Failure:\ntest_generate_md5string(EpayNotificationTest)\n    [./test/unit/integrations/notifications/epay_notification_test.rb:34:in test_generate_md5string'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<\"1957225218913939875020820120403144203453903XXXXXX9862secretmd5\"> expected but was\n<\"1442957225239875010208189139453903XXXXXX9862320120403secretmd5\">.\n```\n. Since the order is critical for the md5 hash to be generated correctly, you'll probably need to use an Array instead.\n. Looks good for merge; can you squash to a single commit? You can force push to this branch and the Pull Request will pick it up automatically. Thanks!\n. I'm still seeing three commits - can you squash to one and force push back to the branch?\n. No... you need to use git rebase to squash all the commits into a single one, then force push your branch. When you're done, https://github.com/Shopify/active_merchant/pull/335/commits should only show one commit.\n. Perfect!\n. I'd prefer if the option to use BillingId were passed as a normal gateway setting:\nruby\ngateway = ActiveMerchant::Billing::PaymentExpressGateway.new(\n  :login    => 'USERNAME',\n  :password => 'PASSWORD',\n  :use_billing_id_for_token => true\n)\nThoughts?\n. I wonder too: would :use_custom_payment_token or something similar be a more self explanatory option name?\n. Rather than having a separate instance variable, I'd prefer to just use the @options hash like so:\nruby\ndef use_custom_payment_token?\n  @options[:use_custom_payment_token]\nend\nTaking that approach should simplify the code a good bit.\n. @mikel can you tweak this to use the @options hash?\n. Looks great - can you squash to a single commit? A force push to this branch will automatically update the PR.\n. Not sure - I'd recommend digging through the code to find out for sure. Also feel free to add documentation if you're feeling extra brave :smile:\n. This seems to remove any validation that the pin is set - any way we can retain that check?\n. Went ahead and merged this, but I still get unrelated failures running the tests:\n```\n  1) Failure:\ntest_failed_credit(RemoteBraintreeBlueTest) [test/remote/gateways/remote_braintree_blue_test.rb:379]:\n<\"Credit card number is invalid. (81715)\"> expected but was\n<\"Braintree::AuthorizationError\">.\n2) Failure:\ntest_successful_authorize_with_merchant_account_id(RemoteBraintreeBlueTest) [test/remote/gateways/remote_braintree_blue_test.rb:35]:\nResponse failed: #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\n3) Failure:\ntest_successful_credit(RemoteBraintreeBlueTest) [test/remote/gateways/remote_braintree_blue_test.rb:364]:\nResponse failed: #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\n4) Failure:\ntest_successful_credit_with_merchant_account_id(RemoteBraintreeBlueTest) [test/remote/gateways/remote_braintree_blue_test.rb:371]:\nResponse failed: #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\n5) Failure:\ntest_successful_validate_on_store_with_verification_merchant_account(RemoteBraintreeBlueTest) [test/remote/gateways/remote_braintree_blue_test.rb:78]:\nResponse failed: #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\n6) Error:\ntest_transaction_fails_with_bad_avs_with_avs_rules(RemoteBraintreeBlueTest):\nStandardError: No fixture data was found for 'braintree_blue_with_processing_rules'\n    /Users/ntalbott/git/active_merchant/test/test_helper.rb:190:in fixtures'\n    test/remote/gateways/remote_braintree_blue_test.rb:158:intest_transaction_fails_with_bad_avs_with_avs_rules'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n7) Error:\ntest_transaction_fails_with_bad_cvv_with_cvv_rules(RemoteBraintreeBlueTest):\nStandardError: No fixture data was found for 'braintree_blue_with_processing_rules'\n    /Users/ntalbott/git/active_merchant/test/test_helper.rb:190:in fixtures'\n    test/remote/gateways/remote_braintree_blue_test.rb:184:intest_transaction_fails_with_bad_cvv_with_cvv_rules'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/mocha-0.9.12/lib/mocha/integration/mini_test/version_201_to_202.rb:27:in `run'\n```\nGuessing this is due to credential issues; any chance we can get an always working set of developer credentials for Braintree to put in fixtures.yml so each ActiveMerchant dev doesn't have to get and maintain their own?\n. I agree that dummy data has been the status quo, but I'm doing my best to change that. I hear your concern RE stomping, but so far we've never had that issue. Anyhow, just something to think about; eventually I'd like to see AM remote tests run more regularly, and requiring every dev to get their own credentials just isn't going to scale long term.\n. Other than the .gitignore changes, this looks solid. Can you explain and/or take those out, and then squash this down into a single commit that applies cleanly against master? Thanks!\n. This doesn't apply cleanly any longer; I think a lot has happened to the PayPal gateway since. Is there still stuff here we should try to pull in?\n. First: nice last name! Talbotts with two t's on the end unite!\nAs to your actual issue, what's the effect of the format being wrong? The transaction flunks out altogether? If so, I'd really like to get a failing remote test to back this up.\n. I love %w - totally merging :)\n. This looks brilliant! Two things I need to merge:\n- ActiveMerchant is still supporting Ruby 1.8, and this currently blows up under 1.8. Probably as simple as fixing up hash syntax.\n- Once it all looks good for 1.8, please squash down to a single commit. You can force push to your branch to update this Pull Request automatically.\nThanks!\n. I get an error under 1.8:\n1) Error:\ntest_received_at_time_parsing(PaypalNotificationTest):\nNoMethodError: undefined method `strptime' for Time:Class\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/integrations/paypal/notification.rb:57:in `received_at'\n    ./test/unit/integrations/notifications/paypal_notification_test.rb:81:in `test_received_at_time_parsing'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n    /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run'\nIs there an alternative to strptime in 1.8?\n. Timezones strike again: \n<\"15/04/2005 15:23:54 -0400\"> expected but was\n<\"15/04/2005 15:23:54 +0000\">.\nhttp://travis-ci.org/#!/Shopify/active_merchant/jobs/1173346/L139\n@subbarao, can you get me a fix for this?\n. I pushed a simplistic fix to get tests working again, but it blatantly ignores the timezone.\n. Do any of the other integrations provide line item helpers? Just curious if/how this lines up with what the rest of the code base is doing.\n. OK, so nothing significant - good to know. Will pick this up in #348.\n. See my question on #347; in general this looks good, and should just need to be squashed down to a single commit (you can force push into this branch afterwards to automatically update the Pull Request).\n. So this looks good, I just need it squashed and I'll get it merged. Thanks!\n. This fails for me under 1.8:\n1) Failure:\ntest_received_at_time_parsing(PaypalNotificationTest)\n    [/Users/ntalbott/git/active_merchant/test/unit/integrations/notifications/paypal_notification_test.rb:79:in `test_received_at_time_parsing'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.11.3/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p358/lib/ruby/gems/1.8/gems/mocha-0.11.3/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<\"15/04/2005 19:23:54 +0000\"> expected but was\n<\"15/04/2005 19:23:54 -0500\">.\n. Just going to stick with the regex since there doesn't seem to be a consistent way to handle time zones across 1.8 & 1.9.\n. Looks great - can you squash to a single commit and force push back to this branch?\n. :+1:\n. I get errors in the tests under 1.9:\n```\n  1) Failure:\ntest_successful_cancel_recurring(BluepayTest) [/Users/ntalbott/git/active_merchant/test/unit/gateways/bluepay_test.rb:236]:\n<\"100096219669\"> expected but was\n<\"[\\\"100096219669\\\"]\">.\n2) Failure:\ntest_successful_recurring(BluepayTest) [/Users/ntalbott/git/active_merchant/test/unit/gateways/bluepay_test.rb:214]:\n<\"100096219669\"> expected but was\n<\"[\\\"100096219669\\\"]\">.\n3) Failure:\ntest_successful_status_recurring(BluepayTest) [/Users/ntalbott/git/active_merchant/test/unit/gateways/bluepay_test.rb:246]:\n<\"active\"> expected but was\n<\"[\\\"active\\\"]\">.\n4) Failure:\ntest_successful_update_recurring(BluepayTest) [/Users/ntalbott/git/active_merchant/test/unit/gateways/bluepay_test.rb:225]:\n<\"100096219669\"> expected but was\n<\"[\\\"100096219669\\\"]\">.\n``\n. Also, it looks like you accidentally deleted some fixture data from fixtures.yml.\n. @jslingerland what are your thoughts on removing the blue_pay gateway that's based on the Auth.Net API? Does it provide anything your newer code doesn't?\n. Looks awesome! So, to merge I need this to:\n- Replace the existingBluePaynamespace rather than introducing a newBluepay` namespace. Lets be bold :fire:\n- Be squashed into a single commit.\n. Looks great - can you squash all this down into a single commit? Also note that you somehow picked up some unrelated commits; you'll want to remove those.\nFYI, if you force push into this branch the Pull Request will automatically update.\n. Can you cut this down to just whitespace fix commit?\n. If you can squash to a single commit (a force push will update this PR) I'll get this merged ASAP. Thanks!\n. PaypalRecurringApi is included in PaypalGateway, so all those methods should be available to you through the latter.\nBecause of the sprawling nature of ActiveMerchant, none of us are really experts on the whole codebase. Your best bet with questions like this is to read the code (and check out the tests if they're there) to see how to use the API.\nHope this helps!\n. Can you drop some sample code here that shows how you're trying to access those methods? You might also want to try asking on the ActiveMerchant mailing list.\n. What version of the ActiveMerchant gem are you using?\n. If I do exactly what your gist does, but cut out the Rails config stuff, the method seems to be there and just waiting for the right arguments.:\nruby\nirb(main):014:0> payment_gateway = ActiveMerchant::Billing::PaypalGateway.new(\nirb(main):015:1*           :login => 'rander_1307553309_biz_api1.glideint.com',\nirb(main):016:1*           :password => '1307553332',\nirb(main):017:1*           :signature => 'AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv')\n=> #<ActiveMerchant::Billing::PaypalGateway:0x007f888cb43ef0 @options={:pem=>nil, :signature=>\"AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv\", :headers=>{}, :login=>\"rander_1307553309_biz_api1.glideint.com\", :password=>\"1307553332\"}>\nirb(main):018:0> payment_gateway.recurring\nArgumentError: wrong number of arguments (0 for 2)\n    from /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_recurring_api.rb:27:in `recurring'\n    from (irb):18\n    from /Users/ntalbott/.rbenv/versions/1.9.3-p125/bin/irb:12:in `<main>'\nNo idea what's up with using the Rails config, but I don't think this is an ActiveMerchant issue.\n. Doesn't look like it:\nruby\nirb(main):009:0> require 'activemerchant'\n=> true\nirb(main):010:0> payment_gateway = ActiveMerchant::Billing::PaypalGateway.new(\nirb(main):011:1*                :login => 'rander_1307553309_biz_api1.glideint.com',\nirb(main):012:1*                :password => '1307553332',\nirb(main):013:1*                :signature => 'AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv')\n=> #<ActiveMerchant::Billing::PaypalGateway:0x007ff8cb23d1f8 @options={:pem=>nil, :signature=>\"AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv\", :headers=>{}, :login=>\"rander_1307553309_biz_api1.glideint.com\", :password=>\"1307553332\"}>\nirb(main):014:0> ActiveMerchant::Billing::Base.mode = :test\n=> :test\nirb(main):015:0> payment_gateway.recurring\nArgumentError: wrong number of arguments (0 for 2)\n    from /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/paypal/paypal_recurring_api.rb:27:in `recurring'\n    from (irb):15\n    from /Users/ntalbott/.rbenv/versions/1.9.3-p125/bin/irb:12:in `<main>'\n. Oh, didn't realize it was that new. We should be cutting a new gem version pretty soon.\n. @brian5150 not sure - you'd have to peruse the code and see.\n. status_recurring seems to be the convention for this method's name - can you change it to that? Examples: Authorize.Net, BluePay, PayPal.\n. OK, so this is just pulling info on a stored card? I was assuming due to the name of the call to CyberSource (paySubscriptionRetrieveService) that it was subscription/recurrence specific. Wouldn't be the first time I've seen a confusing gateway API, though.\n. OK, no worries. I'll merge this shortly.\n. I'm pretty sure it was related to the issues discussed in #329. Would love to have you pitch in there to help move it forward.\n. This generally looks good, but I'm a bit concerned about changing the default purchase routine - what's the basis for that?\n. It's just a concern of backwards compatibility; what's the worst case scenario for someone using ActiveMerchant if they upgrade and this url flips for them? Will it break their integration until they switch back to multi-page, or will it just show a different checkout flow?\n. OK - makes sense. I'll merge this shortly.\n. Looking at this some more - is there a more descriptive name we can use than c_prod? What about something like auto_settle?\n. All merged - thanks!\n. @csaunders if this looks good to you I'll be happy to make the merge happen.\n. @RKushnir we'd need to see this merged with master, trimmed down to the essentials, and squashed into a new PR to even be able to begin evaluating it for inclusion.\n. So I think this needs two tweaks to match the general ActiveMerchant vaulting API:\n- vault_update should just be update\n- vault_purchase should be rolled into the purchase method, with the determination of which API method to call done internally based on the payment info passed.\nFor a solid recent example of the ActiveMerchant vaulting API, the Stripe adapter is a good place to look: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb\n. FTFY :bowtie:\n. My guess is that they haven't passed for over four years. I just went through and got them all passing again - hope that helps!\n. Wow, big change! What's the driver for this?\nGave it a quick once over and it generally looks good to me.\n. Closed by cb0b7a6c70994d04ff2e494b5bcce083bb9d0ca5. Thanks!\n. This generally looks solid, but there is one thing that needs tweaking: the handling of reference transactions. ActiveMerchant is very opinionated about what should go in Response#authorization - it should contain anything and everything necessary to run a reference transaction (capture, refund, etc.), and methods that need a reference should extract what they need from the passed in authorization. This makes it much easier for the users of the library, since it means they can simply do this:\nruby\nresponse = gateway.purchase(...)\ngateway.capture(response.authorization)\nOtherwise they would need to know exactly what bit of the vendor specific response params to pull out to get a reference transaction to run.\nHope this helps explain - definitely hit me up here if you have questions or I can clarify further. Thanks!\n. Quick question: a lot of gateways have permanent test credentials that we can ship with fixtures.yml so that each dev doesn't have to get their own set in order to run the remote tests. Is there any chance of that with Fat Zebra?\n. Awesome - I didn't realize those were valid credentials. I'll work to get this merged in ASAP.\n. Closed by 632fa443eb64769a1b2764cfff90cbcc0b4c9987.\n. Is the cloned Authorize.Net API the only one provided by Metrics, or do they have their own unique API as well?\n. Wow - Cybersource requires an email address in order to process a transaction?\n. We'd happily consider a Pull Request to get it merged in - thanks!\n. Agreed - it would be great to see that happen. I'd definitely review a Pull Request that made it happen - thanks!\n. Again, would love to see a Pull Request to make this happen.\n. I'll want to see some remote tests for this before merging - think you can add those?\n. OK, I have this about ready to merge, but I've made some extensive changes and need to test them. I've asked PayWay for developer credentials for myself, but in the meantime do you have any you can let me use to finish this up?\nIf you do, you can either email them to nathaniel@talbott.ws - thanks!\n. Also, if you want a peek at what I've changed, I've pushed it up to a branch: https://github.com/Shopify/active_merchant/tree/payway\n. I actually got some of my own; I should get a chance to test them out and get this merged later this week.\n. Just to clarify, Auth.Net will accept the full card number or the last four digits, right?\n. Looks like the box that you're trying to connect from can't connect to the production Payflow url, which is https://payflowpro.paypal.com. A few things to look at:\n- Can you curl that domain from the command line?\n- If curl works, can you connect directly from irb?\n- Does Payflow have any kind of IP whitelisting in production?\nBeyond pointing you at ways to debug the ability to connect to Payflow, I'm not sure what else we can do to help. You could try posting to the ActiveMerchant mailing list; another user may have seen this issue before and be able to help.\n. Not sure if that's the right response; you could compare it to the response you get from the correctly working test url to see if they match up.\nIn irb (or more specifically, in the Rails console) you would just set up a Net::Http connection or similiar. Basically cut the ActiveMerchant middle man out and see if it works.\n. Supported added in 014272d03d493766d3e1306f6f4bc9778d732bd6.\n. Actually already committed in 014272d03d493766d3e1306f6f4bc9778d732bd6.\n. I'm thinking this might make more sense with a module name of EasyPay vs. Easypay - any objections?\n. I'm not keen on adding Auth.Net specific methods to the bogus gateway; the change that really needs to happen is to deprecate those methods in the Auth.Net adapter and refactor them to the standard store/update/unstore that the rest of the gateways are using.\n. I'm pretty sure the code is correct as-is; to use a stored card, you simply call purchase and friends with the vault id string instead of a CreditCard:\nruby\ngateway.purchase(1234, current_user.inspire_vault_id)\nLet me know if that still doesn't work.\n. You're right that it should be passed in as a String - my bad. As a general rule ActiveMerchant treats vault ids (and authorizations, etc.) as strings since different gateways might use any number of characters in them. I think in this case the right thing to do if you're storing the vault id as an int is to simply to_s it before passing it to ActiveMerchant.\n. :+1:\n. Any way to test against the DTD to prevent future regressions?\n. Closing this, see #410 for discussion.\n. Another option would be to include the amount in the authorization string; that would allow the capture to know from the authorization string which API call to make.\n. You're right, it's definitely not backwards compatible. I'm not necessarily opposed to the solution on the table, but I hate making two calls when one would do.\n. Anyone object to me applying @jduff's feedback and merging?\n. billing_id is the semi-standard nomenclature that ActiveMerchant uses for this option; if we need to fix the underlying implementation to map billing_id to customer_reference_number that's fine, but we should continue to use billing_id for the public interface.\n. I'd feel a lot more comfortable pulling something like this in if it was paired with a remote test showing the bug and the fix.\n. This breaks the standard interface of refund(money, authorization, options={}). I agree it would be nice to dispense with the money in cases where one simply wants to refund the full transaction amount, but rather than reordering the arguments I think we should simply require the caller to pass in money as nil. Make sense?\n. Sounds great - I'm happy to merge it once it's ready.\n. Just a heads up, open Pull Requests automatically pick up any new commits to the branch they're based on, so no need to go to the trouble of opening a new PR.\n. @mjallday I've merged this, but there are two outstanding TODO's related to AVS and CVC codes. Can you open a fresh PR that either strips out the code for handling them or gets the translation tables filled out?\n. @csaunders does 8513ba0 pass your internal CI?\n. @kurenn definitely not your fault - it was just a latent order-dependent bug that finally happened to rear its head when I merged your change.\n. Does Banwire support auth/capture, refund, etc.?\n. Does Banwire provide common developer credentials we could include in fixtures.yml?\n. Nevermind - the credentials in the remote test seem to work great - I've moved them to fixtures.yml.\n. I'm about to merge this, but wanted to note that I removed \"US\" as a supported country in the README; I'll happily add it back, but it should match what's in the gateway's supported_countries. If Banwire can be acquired by US entities, then just let me know and I'll add US to both places.\n. Closed by cd294cea25c4638b65b98c0bbd844c4d8248dd76.\n. There is a remote test for refunds, and I'm pretty sure it was working when I originally coded the functionality. Of course, it may be incorrect/insufficient, so that's no guarantee that this hasn't always been broken.\nI can look into the functionality, but it's going to have to wait until I can get Worldpay to get my test account working again. Worldpay is... aggravating to deal with.\n. I actually have a test account, which I'd prefer to use, but it's somehow gone stale. I'll ping you if I can't get it back up and running in a reasonable amount of time.\n. Go for it - I'll drop a note here if I get a chance to work on it at all myself.\n. It seems like the general usefulness of the BogusGateway is that it is a generic stand-in for any gateway; how would you see the PaypalBogusGateway being used?\n. I'm with @jduff; the PayPal Express gateway is actually kind of an oddity in the ActiveMerchant codebase. Until/unless other gateways start using a common API with it, it's probably best to just mock out yourself locally.\n. Not sure what this means?\n. Can you give me some context on what Direct Entry Debit is? I'm not familiar with the term.\n. OK, so this is what we call \"direct debit\" in the US.\nI think in looking for guidance on the API, you should check out the usage of the Check class and the :check type in the codebase, including in these gateways:\n- Inspire\n- Bluepay\n- Authorize.Net CIM\n- iTransact\n- Sage(VirtualCheck)\n- SmartPs\n- USA ePay Advanced\n- Beanstream(Core)\nAll of these interact with bank accounts (which is basically what the Check class encapsulates). I'm not sure there's a super solid common API between them, but it should get you started in terms of figuring out how Direct Entry should fit into SecurePay.\n. I'm going to close this for now; please do re-open (or open a new PR) once you've done another pass at making it consistent with the existing conventions. Thanks!\n. We'd happily accept a Pull Request merging the gateway in - it just needs a champion who can work with us through any issues we run into.\n. Can you go into more detail on what the gateway is doing now vs. what you think would be a better approach? And/or submit a Pull Request for review?\n. Closing in lieu of feedback; please feel free to re-open with more details.\n. @rbarazi, this generally looks good, but we need to chat about the authorization string.\nActiveMerchant uses the authorization string to contain everything needed to reference a transaction for future captures, refunds, etc. I think the reason the authorization used to include the order_id in addition to the tx_ref_num was so that the order_id didn't have to be passed again when doing a capture.\nIf you can restore the order_id to the authorization string, and use it in the capture, I think this PR is otherwise ready to go.\nBTW, for one example (among many) of multipart authorization strings, see authorization_from/split_auth in beanstream.rb and beanstream_core.rb.\n. Just to clarify, is there a technical hurdle to integrating Barclay's new API, or is it just a matter of will and manpower?\n. @yemster I'd be happy to review and merge support for Extra Plus. My only suggestion would be to implement it as a second gateway and leave the existing Barclay's gateway as-is. I suspect we'll be supporting MPI gateways for a long time yet as I've yet to see a gateway actually kick customers off of a deprecated API.\n. @yemster have you had a chance to work on this at all?\n. @yemster any progress on getting a gateway together for the new Barclays API? Anything I can do to help out?\n. @yemster I'm going to close this for now; please do re-open if you get a chance to submit your code back. I'd definitely expedite review as I'm eager to get Barclays Extra Plus into ActiveMerchant.\n. @tobystokes Barclays ePDQ Extra Plus is merged into ActiveMerchant, and is in use at Spreedly. Shopify's process for adding new gateways is separate from ActiveMerchant, and you'll need to take it up with them directly.\n. Actually... the #credit method is only deprecated for the \"referenced credit\" case; it's still intended to be used when a gateway supports a general credit back to the card (see for instance the SmartPs gateway). So I'm thinking these are actually correct as-is and don't need to be adjusted.\n. Closed by c794987a299cd1f9c92f9e0c9dd8687683a9b84e.\n. I'm of the opinion that this should be hidden away in the gateway itself, not exposed in the public ActiveMerchant API. Why not always do a Samurai reverse when #refund is called? And I'd actually like to see the \"first try a credit, then fall back to void if it fails\" logic rolled into the Authorize.Net #refund method.\nIn summary: I'm not keen on adding another API method, but I do think this is a good idea. Are there downsides to rolling it into the gateway itself and hiding the complexity from the consumer?\n/cc @jduff\n. @jfelchner I just closed it since we definitely won't merge this PR as-is; please do either re-open with new code or just fire up a new PR if that makes more sense.\n. See my comments on #446.\n. Unless there's some downside to doing that? Seems like reverse is always a better alternative to refund in the Samurai API, no?\n. I'm looking at this and wondering about the differences betweenMercuryGateway and MercuryPrepaidGateway - are you planning on using the prepaid stuff, or could we just merge the credit card gateway for now?\n. Another question: were you able to get the remote tests to run? Most of them seem to be commented out, and I'm currently getting a 400 Bad Request on the one that isn't.\n. OK, seems like everything works except the one test that wasn't commented out; looking at that one specifically now.\n. Got everything running here locally - working on some cleanup before I merge.\n. Who's on tap to implement this fraud management for Beanstream?\n. This seems to be due to some difference between ActiveSupport 2.3.11 and 2.3.14. Investigating.\n. Fixed; the tests run now, though there are still failures.\n. Can you give us more info on what version of ActiveMerchant you're using, Ruby verison, etc.?\n. So it looks like the issue is that Rubigen is incompatible with ActiveSupport > 3.2. There are a few options:\n1. Fix Rubigen for 3.2\n2. Replace Rubigen with another library\n3. Replace Rubigen with some simple custom code to generate a new gateway and integration\nI can't find any good replacement libraries, so 2 seems to be out. 1 could work, but Rubigen is very minimally maintained at this point so I'm not 100% sure a PR would even be merged (and we'd probably run into the same issue again down the road). I personally tend to think Rubigen is overkill for ActiveMerchant's needs, so I lean towards option 3. Opinions @Soleone @codyfauser @jduff etc.?\n. I did some digging and it turns out Thor is really solid for writing generators and has no dependencies, so I've submitted #502 which replaces Rubigen with Thor. Would love feedback on the PR - thanks!\n. I don't think any of us maintainers use ARB, so I'd recommend either digging into the code or asking on the mailing list. If you find that there's no way to pass the information you, then we'd happily review a Pull Request that adds the necessary fields.\n. This generally looks great, but is giving me two failures under 1.8:\n``\n  1) Failure:\ntest_acknowledgement(PayFastNotificationTest)\n    [/Users/ntalbott/git/active_merchant/test/unit/integrations/notifications/pay_fast_notification_test.rb:23:intest_acknowledgement'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in __send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:inrun']:\n is not true.\n2) Failure:\ntest_send_acknowledgement(PayFastNotificationTest)\n    [/Users/ntalbott/git/active_merchant/test/unit/integrations/notifications/pay_fast_notification_test.rb:37:in test_send_acknowledgement'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:insend'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n is not true.\n```\nCan you investigate?\n. Is there any risk that the change to the credential fields could affect existing integrations? Or are they 100% equivalent?\n. Closing; discussion is continued in #464.\n. I lean towards not doing this; I hesitate to change the default behavior of inspect, and I just don't see the risk here as being very serious. Anyone else have feedback?\n. I guess I'm not keen on ActiveMerchant being responsible for \"log safe output\"; it seems more like an application level concern with a lot of potential ramifications. For instance, in some contexts there's no concern with logging the last four of a credit card, but in others that might be something to be avoided. So I personally don't think that this concern - safe output - is something that ActiveMerchant should (or even can) take on as a responsibility. Other maintainers might disagree, though :smiley:\n. Discussion continued in #465.\n. I don't seen any benefit to making this backwards compatible with a broken signature; can you make it just take the proper 2 argument form?\n. No worries - I'll squash it when I merge.\n\nNathaniel\nOn Fri, Sep 21, 2012 at 9:23 AM, frobcode notifications@github.com wrote:\n\nDone. Do you want me to clean up the history or are the 3 commits ok?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/463#issuecomment-8764434.\n. I would content that retry logic is not something that ActiveMerchant should be handling; I think it is a concern that should be handled by the caller. Thus I'd rather just see it ripped out altogether from Orbital. Thoughts @codyfauser @jduff @Soleone?\n. @jonm-okc I started from scratch with a super simple approach; would love your feedback on the final form.\n. Generally looks good, but I'd like to see a few tests before merging. Thanks!\n. Much better now.\n. This generally looks good but has warnings and a test failure under 1.8:\n\n/Users/ntalbott/git/active_merchant/lib/active_merchant/billing/integrations/a1agregator/notification.rb:164: warning: multiple values for a block parameter (2 for 1)\n1) Failure:\ntest_acknowledgement(A1agregatorNotificationTest)\n    [/Users/ntalbott/git/active_merchant/test/unit/integrations/notifications/a1agregator_notification_test.rb:32:in `test_acknowledgement'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `__send__'\n     /Users/ntalbott/.rbenv/versions/1.8.7-p370/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n<false> is not true.\nCan you fix and update the PR?\n. I'm pretty sure rather than overloading refund, this would better fit in the credit method, which is meant to give a general credit rather than refunding a transaction. Can you move it there? I'm OK dropping the deprecation message from credit since we'll be putting real functionality there.\n. @jduff @Soleone @csaunders @codyfauser I think this fixes all of the issues we've been having, as well as protecting us from regressions, but I need ya'll to review since I think it will break your internal CI temporarily.\n. So is this good to merge? Are ya'll ready to deal with potential breakage in your internal CI?\n. @BlakeMesdag is this ready to merge?\n. @jduff should I close this one out as abandoned, or is it ready to merge?\n. @BlakeMesdag awesome, thanks!\n. @frobcode why does this also include changes to the iTransact gateway? Is there a dependency?\n. Fixed in f1cfb4eb1b7d52a1f82fda4847e0815b256e38d7.\n. See this compare view for an example implementation (the still in progress HDFC gateway):\nhttps://github.com/Shopify/active_merchant/compare/f90e546dbc383f278e58022129fd7601773b6cb7...hdfc-gateway#diff-7\n. I've been reviewing Ogone's 3D secure support, and unfortunately it's not compatible with this spec. Back to the drawing board.\nMy next attempt will include a usage example - good idea @jduff.\nProtip: a bad protocol (3D secure) begets awful implementations. Seriously amazed at how the gateways have taken 3D secure and made it even worse overall than the underlying spec.\n. I don't think any of the maintainers will be using ActiveMerchant with Rails 4.0 until after 4.0 goes GA, so we probably won't pursue supporting it until that happens. We'll gladly review and merge Pull Requests that introduce 4.0 compatibility, though, so long as backwards compatibility with the currently supported Rails versions (2.3.x, 3.x) is maintained.\n. @jduff I can't find any documention around this, and indeed, we're getting errors from Stripe now because we're passing \"email\" to the charge endpoint:\n{\n  \"error\": {\n    \"message\": \"Received unknown parameter: email\",\n    \"param\": \"email\",\n    \"type\": \"invalid_request_error\"\n  }\n}\nAre you using this functionality successfully in production? If so, is it not generally available and/or in a newer version of Stripe's API? I'm hurting since I have customers who can't transact due to this, since we always pass email through when provided.\nLet me know - thanks!\n. Should've CC'd @orenmazor as well (see prior comment).\n. I ended up filtering email out in our product before it gets passed to Stripe, but I'd still like to see this fixed ASAP, as it seems that one way or another it's broken at the moment.\n. Since email actually blows up Stripe, and since it's pretty easy to wrongly assume that it's valid metadata, can you add a unit test that explicitly makes sure it isn't passed to purchase?\n. My memory is sketchy, but I seem to remember manually merging these changes in from another source. I definitely don't think I implemented stripping the AVS input to only numerics. That said, my understanding is that AVS only uses house numbers from the address.\nIf I had to make a guess, I bet the problem here is that each of those examples has two numbers:\n- Rua Caconde, 280 ap.81 -> 28081, should be 280 or \"280 81\"\n- 1929 18th St NW -> 192918, should be 1929\n- 1916 17th St NW #209 -> 191617, should be 1916 or \"1916 209\"\nThat said, I don't think AVS generally requires the stripping of the address down before processing - that's supposed to be done by the AVS backend. So this code seems superfluous. I suppose you could either just remove the code, or confirm first with Realex that it's OK to pass in the full address line.\n. It seems like the right solution here is to replace the \"digits only\" code with a simple truncation at 30 characters. Even if an address line is longer than that, a foreshortened input still shouldn't choke their parser like the digits only stuff is now. And I'm loathe to put country-specific code into the integration.\n. @orenmazor I didn't get the impression that that was what was happening; rather, most purchases in other countries were working fine. I'd be super surprised (based on interacting closely with 50+ gateway API's) if passing the address in other countries caused those to fail so long as the format of the address is sane.\nI'd recommend we try always passing it, and only put in something country specific if it proves to still be an issue.\n. @mattbeedle we'll need see a remote test suite before merging this. Can you pump those out?\n. Looks like this is also broken under Ruby 1.8.\nI'm going to close this out for now; would still love to merge it, but we need 1.8 compatibility and remote tests before doing so. Don't hesitate to re-open it if you can provide those.\n. @mixandgo generally looks good, but will need you to address the comment above.\n. The signature generation related to billing address looks incomplete on this; we'll need that to be fixed before merging. Feel free to re-open if you're able to make that happen - thanks!\n. @ivanvanderbyl dropped some comments on the diff that we'll need addressed. Thanks!\n. I didn't notice before, but it looks like there aren't any tests for this new functionality. Can you add those?\n. Closing this for now; feel free to re-open if you're able to get back to it and add tests. Thanks!\n. While trailing whitespace annoys me, I'm not a fan of cleaning it up project-wide unless we're going to automatically reject commits with trailing whitespace and/or automatically strip it when committing. Until then, I'll just keep cleaning it up as I work on various files.\nWe should also have a CONTRIBUTING file that specifies that trailing whitespace should be stripped; adding that is on my to-do list.\n. The PayflowExpressGateway#purchase API is actually contraindicated and needs to be fixed. Rather, I would recommend looking at how CyberSourceGateway#purchase (for one example, there are others) allows either a CreditCard or a string-based reference to be passed in. Another example would be the gateways that allow passing an ActiveMerchant::Billing::Check as well as a CreditCard.\nIf you were to submit a Pull Request that extended Litle with this pattern for a generated token I'd definitely review and probably merge. Thanks!\n. @moklett have you seen the CommStub helpers? I think they serve this same purpose, and I'm curious what you think of them vs. this approach.\n. Going to close this; re-open it if you think it's still needed/useful. Thanks!\n. Is this a dupe of #116?\n. Move to https://github.com/Shopify/active_merchant/wiki/ActiveMerchant-Next\n. Can you add a unit test for void as well? Thanks!\n. Rather than require the trans_ref_number to be passed in, it should be packed into the authorization. See for example RedsysGateway#build_authorization and RedsysGateway#split_authorization. Leveraging the authorization in this way helps hide the specifics of a particular gateway from users of ActiveMerchant.\nLet me know if I can clarify further - thanks!\n. Hmm, looks like you accidentally picked up Cybersource changes...\n. In addition to the above comment, I'd like to see more tests in the style of the other integrations (i.e. a helper test, notification test, etc.). Thanks!\n. :+1:\n. @frobcode I'm actually completely OK with the amount being in the authorization string (and have done it on other gateways); go ahead and do that so that void is supported as expected.\nThe authorization string is one of our key tools to help smooth over the variations between gateways, and is one of the more genius design decisions in ActiveMerchant.\n. I'm getting errors when running the tests:\n``\n  1) Error:\ntest_successful_refund(FirstdataE4Test):\nNoMethodError: undefined methodsplit' for nil:NilClass\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/firstdata_e4.rb:110:in add_identification'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/firstdata_e4.rb:93:inbuild_capture_or_credit_request'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/firstdata_e4.rb:62:in refund'\n    /Users/ntalbott/git/active_merchant/test/unit/gateways/firstdata_e4_test.rb:37:intest_successful_refund'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/mocha-0.11.4/lib/mocha/integration/mini_test/version_230_to_262.rb:28:in `run'\n2) Error:\ntest_successful_void(FirstdataE4Test):\nNoMethodError: undefined method split' for nil:NilClass\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/firstdata_e4.rb:185:inmoney_from_authorization'\n    /Users/ntalbott/git/active_merchant/lib/active_merchant/billing/gateways/firstdata_e4.rb:53:in void'\n    /Users/ntalbott/git/active_merchant/test/unit/gateways/firstdata_e4_test.rb:31:intest_successful_void'\n    /Users/ntalbott/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/mocha-0.11.4/lib/mocha/integration/mini_test/version_230_to_262.rb:28:in run'\n```\n. Can you add a test for this? Thanks!\n. @chengz any reason this can't just be added to the Eway gateway class/file? I'd like to keep it consistent with other gateways whererefundlives right next topurchase`, etc.\n. As far as I can tell, the only difference is that this requires a password whereas the eWay gateway does not? I'm still not seeing enough reason to add this as a separate gateway.\nI'm hopeful that you can either submit this as a patch to the existing eWay gateway, or someone else will be able to take this code and adapt it in that way. But we won't be accepting this patch in its current form at this time.\n. Is this ready for merge? Happy to do it, but want to make sure it's good to go.\n. Thanks for this; I'm still trying to figure out how best to put 3D secure into ActiveMerchant, and gateway specifics like this are a big help. I'm going to close this out for now, since I don't think we're ready to tackle 3D secure quite yet, but I'll definitely be referring back to this in the future.\n. Closed by c611caa817b334bad4530d1d8b924c4acee3e037.\n. Have you been able to test this out and make sure it works? Is it really this simple?\n. Any resolution on voiding in MerchantWare? Should we remove it from ActiveMerchant as unsupported?\n. I'm not seeing anything Moneris related merged for over a month.\n. We've added support for Moneris recently, but haven't had this issue reported. A lot of our merchants don't even use void, so we won't necessarily run into it for a while.\n. OK, I'll have a closer look at it, and if I decide not to fix it at this point I'll go ahead and remove it altogether.\n. This was so confusing, mostly because I kept getting it mixed up with the completely different MerchantWare issue.\nThis fix seems to match up how Moneris' API works with the semantics expected by ActiveMerchant clients.\nPlease review @Soleone @jduff \n. I don't have access to the Moneris admin UI (just their API), so I can't verify 100%, but the remote tests at least show that a capture can be done for $0, and I can't imagine why else they would allow that. Plus, once I got myself unconfused the history of this issue seems to strongly indicate this is the Right Way\u2122.\nGoing to :shipit: and see how it does in the wild.\n. @pgib can you point me at Moneris documentation explaining the purpose and operation of purchasecorrection? While I'd like to support it, I don't believe it matches up with the expected ActiveMerchant behavior for void.\n. Unless you object I'm going to go ahead and merge this shortly; of course I'm more than happy to continue making any tweaks that are needed going forward.\n. The necessary data for fraud review should already be passed: ip, billing address, shipping address, email, etc. So I don't think that should be a concern.\nOn the other end, I think to really know how to set the fraud_review flag would require more input from eWay; they have a whole boatload of fraud-related response codes (if their \"Beagle\" fraud system is turned on) and it's not clear to me which ones should trigger the fraud review flag.\nI think they'll be in touch with ya'll shortly about getting Rapid into Shopify, and I'd be happy to add in the fraud review stuff if I can get details on what should trigger it.\n. Would love an update on this issue for MerchantWare - any news @jduff?\n. Superseded by #557.\n. It'll probably be a bit before I can investigate, but a Pull Request with a fix would definitely speed things along (hint hint).\n. @jduff I'm pretty sure there are working Moneris credentials in fixtures.yml.\n. Currently remote integration tests are not standard in ActiveMerchant, largely because they're harder to write and more brittle than remote gateway tests. You can see an example of one that I wrote for Valitor here:\nhttps://github.com/Shopify/active_merchant/blob/master/test/remote/integrations/remote_valitor_integration_test.rb\nI would love to have one contributed for Dwolla (and any other integration for that matter).\nWithout something like this, I'm afraid you're stuck manually testing your integration and trying to capture the state of the art in the unit test via mocks.\n. You can definitely leave it open so long as you're actively working on and tracking the issue; if you decide to move on it'd be nice if you could come back in and leave final comment and close it out. Either way if it doesn't get updated for long enough it'll just get closed in a future Issues triage; I typically close out stale issues after they've sat around for a month or two.\n. The code looks fine to me. The only question I have is whether the rounding should happen in ActiveMerchant at all; the other approach would be to instead raise an error if AM is given a fractional amount for a non-fractional currency. The advantage of the latter approach would be that it would force the user of the API to deal with the business question of how to round the amount rather than have it happen (perhaps surprisingly) automatically.\nI could go either way, though - I don't have a strong opinion on it.\n. Totally cool with this approach :shipit: \n. That mostly depends on PayPal policies and which PayPal product you're talking about. For instance, ActiveMerchant's \"direct\" PayPal gateway is only supported (so far as I know) in the US, Canada, the UK, and Australia.\nSorry I don't have a definitive answer for you; to know for sure you'll need to look at the API's being called by ActiveMerchant and compare those to what PayPal says is available in your country.\n. Can you submit a PR with your recommended solution? I don't think any of the ActiveMerchant maintainers do much with the Authorize.Net CIM, so we'll trust you to come up with something solid. Thanks!\n. Maybe it's the nature of ActiveMerchant as a library, but the results CodeClimate is spitting out don't seem to match up with my areas of concern for the codebase. Or maybe I'm just not good at reading CodeClimate results yet; can you give us a quick run-down of what the CodeClimate report is telling you?\n. I'm cool with trying it out - your explanation helps, and digging deeper I can see some of the issues I know/care about surfacing. My main concern was/is just that the \"home page\" view of ActiveMerchant on Code Climate doesn't seem useful for ActiveMerchant, but maybe that improves as we improve the code base.\n. @shanebonham can you at a minimum add a unit test for this? A remote test would also be great but isn't required. Thanks!\n. Closed by 88a015116b24004f6b10118452adf5804b92cc50.\n. @sanemat this change makes the tests fail for me. In what environment are you seeing the Email tag being returned as a self-closing tag?\n. @nextbyte this looks like a good start, but isn't ready to merge yet. See my above comments, and I'd also recommend looking at some of the other integrations to see best practices around implementation and testing of integrations.\n. @nextbyte you actually don't have to do a new pull request; you can instead just push additional commits to the branch you based this Pull Request off of and Github will automatically add them to this PR.\n. @nextbyte any update on this?\n. OK, thanks for the update. Do you think you'll be able to do it soon, or should we just close this for now and wait for someone else to pick it up in the future? Either way is fine; open source is motivation-driven, and I totally understand if you've moved on.\n. OK, no worries. I'm going to close this out for now, but definitely feel free to re-open it once you get back to work on it. Thanks!\n. The ActiveMerchant core team doesn't actually use the Auth.Net CIM much, so we rely on community members to submit fixes. Can you submit a Pull Request with a fix for this? Thanks!\n. Superseded by #539.\n. Can you add a unit test for this? Thanks!\n. @alex3t can you whip up a unit test for this Auth.Net CIM pull request? We'll need that before merging.\n. I'm going to close this for now; feel free to re-open if you can get back to it and add a test. I'd do it, but I'm not well-versed enough with the CIM to know what the different input cases look like.\n. Would love to get this merged in once the above comments are addressed. Let me know if I can clarify further - thanks!\n. @pronix have you been able to make any progress on getting the MerchantWarrior adapter ready?\n. I'd gladly review and merge a Pull Request that fixed this, doubly so if it came with a unit test. Thanks!\n. Yah, looking at the current code, it appears that it is using strptime now, not Time.parse. What version of the ActiveMerchant gem are you using?\n. Are you using Bundler? If so, try specifying a version like so:\nruby\ngem \"activemerchant\", \"~> 1.29.3\"\n. @vitkoz I'm going to assume this was resolved by using the correct version of ActiveMerchant.\n. That sounds like a timezone issue; what's the timezone on the time returned by ActiveMerchant? And what's the time zone on the string being returned by PayPal?\n. So it turns out this was a different issue than #23; the time zone was not being handled correctly in building the resulting time. The attached commit fixes the issue, and has a test to demonstrate.\nPlease review @jduff @vitkoz\n. @vitkoz I've merged this into master; you'll need to use it directly via your Gemfile, but it should fix the issue you're seeing.\n. How difficult would it be to add auth/capture? Even if it can't be tested in the remote suite, I'd prefer to have it go in immediately?\nAlso, any word from the gateway as to when it will be possible to test auth and capture?\nIn general: looks fantastic and ready to merge once #cancel is renamed to #void.\n. @samlown can you add a template fixture into the fixtures.yml? Bonus points if you can include a set of generic testing credentials in the file that will work going forward so everyone doesn't have to get their own.\nYou can go ahead and add the gateway to the README file as well.\nThanks!\n. As per discussion with @codyfauser; I'd also propose simplifying the project description to:\n\nActive Merchant is a simple payment abstraction library extracted from Shopify. The aim of the project is to feel natural to Ruby users and to abstract as many parts as possible away from the user to offer a consistent interface across all supported gateways.\n\nPlease review @codyfauser @tobi \n. Please review @codyfauser @jduff.\n. @cdaloisio I renamed query_customer to the more generic retrieve that is already used by one other gateway. Thanks for the PR!\n. We haven't removed anything from PayPal Express. I'm not up on the specifics of how items work with ActiveMerchant's adapter, so you'll probably need to dig into the code to sort out how it's intended to work.\n. The docs just haven't been updated since Braintree's announced their additional international support. There isn't any limitation in ActiveMerchant itself as to the countries that a gateway supports; it's strictly there for documentation purposes.\n. @sareuon where did you find that class referenced? It doesn't exist, and if you found it in the documentation I'd like to fix them.\nIn general you'll need to read the docs and code to find out how to use the PayPal recurring API via ActiveMerchant. Once you get it figured out it'd be great if you could write about your solution for future developers, too.\n. ActiveMerchant doesn't worry about using references that were generated outside of AM; so the correct thing to do here would be to build an authorization that encompasses both the txnId and the purchaseOrderNo.\nMy only concern is that the method will not work with authorizations that were returned by ActiveMerchant before the change was made; I think we just accept that they won't work (unless the caller hacks the order_id into them) and make sure the error message is descriptive so it's clear what's going on.\nCan you make those changes?\n. :shipit:\n. @aprofeit @RichardBlair @jduff please review.\nActually didn't notice @RichardBlair was assigned; hope I didn't jump the gun!\n. Superseded by #571.\n. That code was merged in with the gateway over two years ago, so I doubt anyone remembers. I'd gladly review a Pull Request that makes that option configurable.\n. Closing this for now; a Pull Request to make this a configurable option would be welcome. Thanks!\n. I'm a bit concerned that this requires locking the API version to v11 - is that the most recent version of the e4 API?\nAlso, we'll want the API to more closely match the store API from other gateways. In particular the token should be returned in Response#authorization, and it should be usable by simply passing it in as the reference for a purchase/authorize call rather than having to be passed in in a custom option.\n. > v8 and higher of the API is still supported by First Data, and I believe having the store() feature to work around PCIDSS requirements is worth the downgrade from v12. I just sent off an email to their support team looking for any information on TransArmor in v12, but I do not expect a solid response.\nI just don't want to find out that TransArmor isn't in v12 because it's been quietly deprecated, thus making it hard for us to upgrade to newer API versions in the future.\n\nTransArmor only works to tokenize the card number and CSC. The card brand, name, and expiration dates still need to be passed in with subsequent purchase transactions, requiring the CreditCard instance to still be passed. It seems like we'd either be using the token in the card_number field of the CreditCard instance, or passing it in as an extra parameter.\n\nEverything necessary to use the token should be packed into the authorization - see the various build_authorization methods in other gateways.\n\nI found the API for card storage inconsistent between gateways -- Do you have a recommended gateway to use as a reference for this scenario?\n\nI'm trying to bring more sanity to the API; the best example at this point would probably Braintree Blue.\n. Just so I understand where this is at: by using v11 we retain full backwards compatibility with v8, but also gain the ability to use TransArmor?\n. @melari any update from Moneris?\n. Generally looks awesome, but we'll need it to work under 1.8 before merging. Thanks!\n. Oh, sorry, thought I had seen 1.8 failures across the board. Will review for merge tomorrow - thanks!\n. Can you add a quick unit test for this? stub_comms should make it a cinch.\n. :shipit:\n. Closed by 3b320c118ef448b946bb544f562c3f2bbf5ba794.\n. Looks awesome! :ship:\n. @pronix @Fodoj if you plan on submitting more gateways (which would be great!) I'd recommend you diff the commit I pushed (c5df73f) against the tip of this branch (d375d91) to see the changes I made to prep the MerchantWarrior gateway for merge. We need better tools to audit a gateway for compliance to our expected API, but in the meantime reading code is the best proxy we have.\nThanks again for helping out!\n. Can you clean the merge commits out of this so I can more easily review? You can just force push back to this branch once you're done and the Pull Request will auto-update. Thanks!\n. @forest I'm still seeing a lot of commits in the PR (where I'd like to see just one); try this within your branch:\nshell\ngit rebase -i Shopify/master\nThat will open up an editor; squash all the commits except the first, then save. The rebase will complain that things aren't applying cleanly, so manually fix the merges, git add the merged files, then git rebase --continue. Repeat until done; at the end you can git push -f and this PR should be left with just a single commit that encapsulates your changes.\nThanks!\n. @forest I've been mulling on whether this approach makes sense or not, and I don't think it does in the context of ActiveMerchant. ActiveMerchant is an abstraction layer on top of the gateways, so the point is to have a common interface for all of them. There is complexity around handling tokenized cards that could be wrapped up into a class, but it will be important when we do that that class serves for all gateways that support tokenization, and not just one.  Thus having a Litle specific token class is not the right approach here. And I'm not quite ready to take on the larger refactoring at this point.\nSo what should be done for Litle right now? Regardless of having an object to ease things, it will always be critical from an ActiveMerchant standpoint that the object be serializable to a simple string. Thus for now I'd like to see - as is done for other gateways - all required fields be packed into a single string that can be easily stored in a database without having to know it's Litle specific. That string should be returned in the Response#authorization field when a new token is created. The gateway should then accept a string as a token, and split the necessary bits out in order to run a Litle transaction.\nIf there are optional fields - like CVV - that can be taken, they should be passed in the options hash to the method being called with a token.\nAny further thoughts @jduff?\n. @aprofeit any indication as to a proper fix for this issue? Is it something that can be tested via remote tests?\n. @aprofeit @melari any feedback or progress on this issue?\n. Hey gents, I'm going to close this out for now; if it becomes a priority again or more data becomes available feel free to re-open.\n. This looks super solid in general; if you can address my one comment I'm excited to get it merged ASAP. Thanks!\n. Is there any reason not to just force parsing to ISO-8859-1 all the time rather than have to fall back? Seems more efficient and cleaner if we know they're always busted like this.\n. @aprofeit yes. The exception is really a distraction here, since the behavior of the gateway is known and constant.\n. Awesome :+1:\n. @aprofeit can you look at getting this working under 1.8?\n. @scamurcuoglu I've added some comments with things to be addressed, but this generally looks OK if those things are dealt with. The one other thing I'd like to see is more unit tests providing better coverage of the public API, authorize/capture in particular. Since the remote tests aren't run regularly, it's important to cover as much as possible with unit tests.\n. Assuming the MR is returned in the response from Paystation, then it is indeed returned in the ActiveMerchant response as part of the parsed #params.\nWhat makes you think it isn't returned?\n. Did you look in response.params? In the #parse method the whole raw response is parsed into a hash, and that hash is put into the Response object.\n. @corroded I'm going to assume you found what you needed; closing.\n. Fixed in #599.\n. I'm cool with this approach; would be great if it was used everywhere rather than the type checking that's often being done now.\n:shipit:\n. I'm working on this now; @ExxKA can you provide test credentials so I can run the remote tests?\n. I tried using TEST as the merchant ID as the docs indicate, but am getting nothing but \"INVALID CREDENTIALS\" back. Once I can get the remote tests running, this is ready to merge.\n. Same result - INVALID CREDENTIALS. As far as I can tell the gateway doesn't even use a password does it?\n. I still can't get them to run. I've tried:\ncard_stream_modern:\n  login: Merchant0000992\n  password: demo\nAnd:\ncard_stream_modern:\n  login: Merchant00000992\n  password: demo\nYet neither is working. What am I missing?\n. It's OK, I know Cardstream better now! And yes, if you could check it out this week and let me know how to get the remote tests running that would be awesome.\n. It's mostly working now - yay!\nI'm getting permission denied for all transactions related to refund and void, though:\n1) Failure:\ntest_successful_amex_authorization_and_refund(RemoteCardStreamModernTest) [test/remote/gateways/remote_card_stream_modern_test.rb:188]:\n<\"APPROVED\"> expected but was\n<\"PERMISSION DENIED\">.\nIs there some kind of credential necessary to run refunds?\n. @RyanScottLewis can you add a unit and/or remote test for this? I'd like to make sure it doesn't break again in the future. Thanks!\n. @RyanScottLewis any update on getting tests for this? Would love to get it merged!\n. We (Spreedly) don't recommend using Spreedly Subscriptions as a gateway; instead we'd recommend using Spreedly Core in almost all situations. Going to close this one as \"won't merge\", but we really appreciate the effort you put into it!\n. @sime I think @madpilot is right; to_json is provided by the json gem, not by any Rails-specific gem. Can you give more context on the error you ran into?\n. I agree with @mb-dev; this method should return a Response object, and leverage #authorization and/or #params to return the Balanced-specific fields. See other gateways' implementations of #store for examples. @cwise can you adjust it to do that?\n. @cwise have you been able to make any progress on getting this implemented in the Balanced Response?\n. @cwise I'm going to close this for now; please do re-open if you get a chance to implement it.\n. @cwise awesome! I'm going to be putting some time into cranking through the PR backlog, so hopefully I'll be able to quickly merge what you come up with.\n. @fabiokr what do you think about matching this API up with the #store API implemented by other gateways? Would that make sense here?\n. @fabiokr why not store(token, options={})? The token is the payment method in this case I think.\n. Superceded by #631.\n. Ugh, this adds so much complexity to the gateway implementation, and since we don't have a consistent 3D-secure API, I don't think having it in ActiveMerchant adds much value. It's not your fault, but I'm inclined to reject 3D secure PR's until we have a consistent approach for 3D-secure from an API perspective, which is hard since 3D-secure is such a poorly designed protocol.\n@jduff any thoughts?\n@jhecking instead of trying to build in full 3D-secure support, I'd be willing to take a PR that just makes it easier extend the gateway (in your own code or via another library) with 3D-specific code. We take that approach at Spreedly when we need to do 3D-secure, by simply mixing 3D-secure specific code into the AM gateway via a module.\n. @jhecking thanks for the feedback; when @jduff says we're \"waiting to see what happens\" he basically means we're all hoping the payment industry comes to its senses and kills or replaces the disaster that is the 3D-Secure protocol.\nIt's that bad protocol that is the reason for us continuing to reject 3DS in ActiveMerchant; it varies so much from gateway to gateway that we haven't been able to put a reasonable abstraction on top of it, and without an abstraction having it in AM is useless and just adds complexity.\nPersonally I'd love to see someone build a library that layers 3DS on top of ActiveMerchant; if such a project were to develop a good abstraction, we could eventually merge it into AM core.\nHope that helps explain!\n. @rterbush it seems to be working fine as-is, but I'd be happy to review a PR that brings AM more inline with the docs. Thanks!\n. Sounds great to me - would love a PR!\n. This breaks most of the remote tests for Authorize.Net; probably because #split is assuming an encap_char of $. In general what is the issue with continuing to use $? While it's supposedly not supported, ActiveMerchant has literally run hundreds of thousands of transactions using it without any issue. Have you seen a bug related to using $?\n. The unit tests aren't failing since they work with mocked out responses that use $ as an encap_char. To get a true read on this we'd need to get the remote tests working with the new encap_char, and then use those to capture responses for the new unit tests that accurately reflect the new encap_char.\n@jduff checking with Auth.Net sounds great; it seems like if this was an actual issue Auth.Net would actually have made this an actual error a long time ago.\n. @jduff any update on talking to Auth.Net about this encap_char issue?\n. OK, going to close this out then. Thanks for checking!\n. @dougal I actually was already in the process of merging; can you review the final commit and make sure it looks copacetic?\n. This is intended, and if you need to use the response before loading the gateway you should explicitly require it. There are no plans to autoload anything besides gateways; I'd actually like to strip autoloading out of ActiveMerchant altogether eventually.\n. @esbanarango I tried a bunch of things to get Ogone to return the ALIAS, all with no luck. You'll need to contact their support to find out why an ALIASOPERATION of BYPSP is not returning an ALIAS when running a successful authorization in the test environment; I'm at the end of what I can do to resolve this without involving Ogone support.\n. I'm going to close this out for now; @esbanarango if you ever figure out what's up with this I'd love to hear what you find out.\n. @acwebionate the proper way to do this via the ActiveMerchant API would be to make #authorize take either a CreditCard or a token and do the right thing depending. Adding gateway-specific public methods kind of defeats the purpose of ActiveMerchant.\nIf you want to open a new PR that takes that approach I'd be happy to review it - thanks!\n. @acwebionate I just implemented this in an ActiveMerchant-idiomatic way in 7f4723e1e0300826530b8779416beabb0043dce2. Hope it's useful for you!\n. @mfrederickson this is working for me locally; maybe the issue is that you're not passing :test => true when initializing the gateway?\nBTW, thanks for the updated demo credentials; I've updated them in our fixtures file.\n. It's working fine here:\nruby\nntalbott@joshua:~/git/active_merchant$ irb -Ilib -ractive_merchantirb(main):001:0> ActiveMerchant::Billing::Base.mode = :test\n=> :test\nirb(main):002:0> gateway = ActiveMerchant::Billing::TransaxGateway.new(\nirb(main):003:1*                     :login => ENV[\"PAYMENT_GATEWAY_LOGIN\"],\nirb(main):004:1*                     :password => ENV[\"PAYMENT_GATEWAY_PWD\"],\nirb(main):005:1*                     :test => true)\n=> #<ActiveMerchant::Billing::TransaxGateway:0x007fd83160a6b0 @options={:login=>nil, :password=>nil, :test=>true}>\nirb(main):006:0> amount = 1700  # $17.00\n=> 1700\nirb(main):007:0> credit_card = ActiveMerchant::Billing::CreditCard.new(\nirb(main):008:1*                     :first_name         => 'Bob',\nirb(main):009:1*                     :last_name          => 'Bobsen',\nirb(main):010:1*                     :number             => '4111111111111111',\nirb(main):011:1*                     :month              => '8',\nirb(main):012:1*                     :year               => '2014',\nirb(main):013:1*                     :verification_value => '123',\nirb(main):014:1*                     :brand => 'visa')\n=> #<ActiveMerchant::Billing::CreditCard:0x007fd8316e9310 @brand=\"visa\", @verification_value=\"123\", @year=\"2014\", @first_name=\"Bob\", @month=\"8\", @last_name=\"Bobsen\", @number=\"4111111111111111\">\nirb(main):015:0> options = {\nirb(main):016:1*             :order_id => '1',\nirb(main):017:1*             :description => 'sample'\nirb(main):018:1>         }\n=> {:order_id=>\"1\", :description=>\"sample\"}\nirb(main):019:0> response = gateway.purchase(amount, credit_card, options)\n=> #<ActiveMerchant::Billing::Response:0x007fd8316ea120 @avs_result={\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @test=true, @message=\"Invalid Username\", @cvv_result={\"code\"=>nil, \"message\"=>nil}, @authorization=\"0\", @params={\"response\"=>\"3\", \"responsetext\"=>\"Invalid Username\", \"authcode\"=>nil, \"transactionid\"=>\"0\", \"avsresponse\"=>nil, \"cvvresponse\"=>nil, \"orderid\"=>\"1\", \"type\"=>\"sale\", \"response_code\"=>\"300\"}, @fraud_review=nil, @success=false>\nirb(main):020:0>\nNot sure what might be up for you; what version of Ruby are you using? Do you have any other libraries installed that could be affecting HTTP calls?\n. Whoops, this time with the password and login set:\n``` ruby\nntalbott@joshua:~/git/active_merchant$ PAYMENT_GATEWAY_LOGIN=transaxdemo PAYMENT_GATEWAY_PASSWORD=nelix123 irb -Ilib -ractive_merchant\nirb(main):001:0> ActiveMerchant::Billing::Base.mode = :test\n=> :test\nirb(main):002:0> gateway = ActiveMerchant::Billing::TransaxGateway.new(\nirb(main):003:1     :login => ENV[\"PAYMENT_GATEWAY_LOGIN\"],\nirb(main):004:1                     :password => ENV[\"PAYMENT_GATEWAY_PASSWORD\"],\nirb(main):005:1*     :test => true)\n,\n                :month              => '8',\n                :year               => '2014',\n                :verification_value => '123',\n                :brand => 'visa')\noptions = {\n    :order_id => '1',\n    :description => 'sample'\n  }\n  response = gateway.purchase(amount, credit_card, options)=> #<ActiveMerchant::Billing::TransaxGateway:0x007fe8446e14d0 @options={:login=>\"transaxdemo\", :password=>\"nelix123\", :test=>true}>\n\nirb(main):006:0>\nirb(main):007:0       amount = 1700  # $17.00\n=> 1700\nirb(main):008:0>\nirb(main):009:0       credit_card = ActiveMerchant::Billing::CreditCard.new(\nirb(main):010:1                     :first_name         => 'Bob',\nirb(main):011:1                     :last_name          => 'Bobsen',\nirb(main):012:1                     :number             => '4111111111111111',\nirb(main):013:1                     :month              => '8',\nirb(main):014:1                     :year               => '2014',\nirb(main):015:1                     :verification_value => '123',\nirb(main):016:1                     :brand => 'visa')\n=> #\nirb(main):017:0>\nirb(main):018:0       options = {\nirb(main):019:1             :order_id => '1',\nirb(main):020:1             :description => 'sample'\nirb(main):021:1>         }\n=> {:order_id=>\"1\", :description=>\"sample\"}\nirb(main):022:0>       response = gateway.purchase(amount, credit_card, options)\n=> #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @test=true, @message=\"This transaction has been approved\", @cvv_result={\"code\"=>\"N\", \"message\"=>\"No Match\"}, @authorization=\"1848100226\", @params={\"response\"=>\"1\", \"responsetext\"=>\"SUCCESS\", \"authcode\"=>\"123456\", \"transactionid\"=>\"1848100226\", \"avsresponse\"=>nil, \"cvvresponse\"=>\"N\", \"orderid\"=>\"1\", \"type\"=>\"sale\", \"response_code\"=>\"100\", \"customer_vault_id\"=>nil, \"city\"=>nil, \"merchant_defined_field_10\"=>nil}, @fraud_review=nil, @success=true>\nirb(main):023:0>\n```\nStill working, so not sure what's causing you issues locally.\n. We're not testing against Ruby 2 yet, so I can't guarantee it's not something related to that. Have you tried under 1.9?\nI think your best next step would be to completely isolate things and see if they still fail; you can just clone the repo and run the irb commands I did above and see if you get the same results.\n. I hate to say it, but it looks like this is a local issue with your machine and/or connection; can you connect to a different network and try it? Maybe try from another computer? Not sure what else to suggest at this point.\n. If you look at the top of test_helper.rb, it turns on a full dump of the\ngateway conversation if you set the DEBUG_ACTIVE_MERCHANT env variable to\n\"true\". You can either just run the tests, or mimic the strategy there if\nyou want to see it in an irb session.\n\nNathaniel\nOn Fri, Mar 29, 2013 at 2:50 PM, Marvin Frederickson \nnotifications@github.com wrote:\n\nI've done that. Another ISP, another machine (both running Ubuntu 12, one\n.04 one .10).\nYes, it does look that way, and I hate to take you away from more\nimportant things... just one last thing though...\nI see code for info, debug, and logger in the\nactive_utils/common/connection.rb... how do I turn that \"on\" so I can see\nthe output?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/634#issuecomment-15655036\n.\n. I'm going to close this out; let me know if I can help at all further with getting it resolved.\n. Closed in ac9c87601565fe835cc3100f261b091d4e203c91.\n. The tests will need to be changed to set $KCODE, at least until we drop support for ActiveSupport 2.3.\n. My only concern is that since $KCODE is global, setting it unilaterally in any test will mean it's set for the whole test suite, which could mask issues. Can we instead set it in the setup for the specific tests that need it, and leverage teardown to set it back to what it was once the test is done?\n. I'm not keen to add to the public gateway API; it defeats the purpose of ActiveMerchant providing a common API across all of the gateways.\n\nIf this is the recommended way to \"void\" an authorization, then that best practice should be encapsulated in the void method. To do that we'd probably need to encode the fact that it's an authorize in the Response#authorization field so that the right path can be followed in void.\nThink you could tweak this to take that approach? Let me know if I can clarify further - thanks!\n. Encoding is done via building the identification string up out of parts; so it would still always be a string, but it would have both the Litle token and the transaction type. For examples of this strategy, grep the codebase for def authorization_from.\n. We'd definitely welcome a Pull Request that adds it; that said, to keep the Issues list clean we don't track functionality requests in Issues, since we don't really get involved until a contributor has given us a patch.\nDefinitely let us know if you make progress on this - thanks!\n. This generally looks good @carlaares, but can you add unit and/or remote tests to cover these changes? Thanks!\n. @JairP what's the intention of this? The remote test now fails, since s_address isn't defined.\nPlease re-open with a fix if you think this is needed - thanks!\n. The customer that was driving this has decided not to pursue it; would still love to see it happen, but will need to wait until someone's ready to take on the implementation.\n. @larspind we're still maintaining backwards compatibility with 1.8, so to merge this I'll need the tests to pass in that environment (see Travis for details on the failures). In general I'd like to avoid encoding issues in ActiveMerchant when possible, so maybe your idea about simply setting the encoding would be a better approach overall anyhow?\n. @larspind I'm going to close this in lieu of a 1.8 compatible solution; we may be able to revisit it in the context of ActiveMerchant 2.x, where we plan to drop 1.8 backwards compatibility.\n. It's mostly just waiting on me to get a chance to merge outstanding tickets; usually I work through them within a week or two.\nThat said, I'd love to see a test for this since it's probably a regression if the date is formatted wrong in the future - can you add that?\n. @drasch the logic on this doesn't look quite right; can you add a unit test?\n. @drasch can you add tests for these please? Remote as well as unit tests would be great, but I'd like to at least see unit tests before merging.\n. Closing this in lieu of tests; feel free to re-open if they can be provided. Thanks!\n. Working on merging this now...\n. This is excellent; I've been using Nokogiri for all new gateways, but have been wanting to go back through and replace it universally.\nReviewed the diff; looks good from here. :shipit:\n. @ajporterfield I just committed a fix; can you verify whether the remote tests work now on your test account?\n. @rocanion I have a product that's (successfully) running hundreds of captures a month through the current Authorize.Net code, so I'm pretty sure the code works as it exists in the most recent version of ActiveMerchant.\nThat said, 1.20.0 is a really old version of the gem - have you tried the most recent (1.32.1 as of when I'm writing this)?\n. You'll probably want to test it to be sure for yourself, but I'm pretty sure the Auth.Net docs are wrong or at least incomplete.\n. @rocanion I'm closing this out; feel free to re-open if you find evidence this is causing problems.\n. @rocanion I hear your concern, however the Response#authorization is an ActiveMerchant field, not a gateway-specific one; in most gateways it corresponds to the transaction id, but it doesn't really matter so long as it represents a value that allows future operations against the represented transaction.\nIn the case of Authorize.Net, between Shopify and Spreedly thousands of captures, refunds, voids, etc., are being run monthly with the Response#authorization being what it is currently without issue, so there doesn't seem to be any compelling case to use a different value. If you want or need to use the Authorize.Net specific AUTHORIZATION_CODE then you can pull it directly out of Response#params, which is intended for gateway-specific fields. If for some reason it's not showing up in #params I'd be happy to merge a Pull Request that put it there.\n. Closed by a6d3f0f.\n. @sanemat Travis is failing this under ActiveSupport 2.3 - any ideas?\n. @noahlh this looks great - can you add a unit test and/or remote test for it?\n. https://coinbase.com/ would be another option.\nI'd prefer to close this out, as Issues doesn't work well for tracking speculative work. Folks can still find it via search, and you'll still get notifications if people post to it.\n. It generally looks good, and I should be able to get it merged in the next week or two.\nOne bigger design question I have is whether it would make sense to put a \"pinless_debit\" flag on CreditCard itself, defaulted to false. Thoughts?\n. I'm not in love with this API; in particular, I think implementing it as a one-off option and public method means that others are unlikely to find and use it. That said, I've got nothing better at the moment, so I'm going to go ahead and merge. Hopefully we can find a more generalized way to support pinless debit cards down the road, since I'd love to see it being more accessible across gateways.\n. I just went back and re-read your last comment @JoshMcKin; the issue I'm running into is that I'm not familiar enough with how pinless debit works across the various gateways to know how best to abstract it yet. The biggest hurdle for me is that (apparently?) a separate call has to be made to check whether the card is even eligible for pinless debit, and that's pretty painful.\n. So at the end of the day I'm not ready to abstract this without having at least 2, preferably 3 concrete gateway implementations. Thus, I'm going to merge this as-is - it doesn't negatively impact the overall ActiveMerchant API - and then we'll see if/when we get further implementations of pinless debit.\n. @xxxcaqui this looks like a great start, but a few questions:\n- There's commented out code in both the gateway and the remote test; can that be either implemented or removed?\n- There aren't any tests around failures; is it not possible to trigger a failure in the gateway in test mode?\n- Can we get a set of test credentials that can be used to run the remote tests? Even better if they can just be included in the default fixtures.yml and used by any contributor.\n- It looks like (but I haven't confirmed yet) that two requests will be made for each transaction - is that right? Can it not all be done in a single request?\n. I added some more comments after a fresh reading of the code; if you get a chance to address them and my earlier comments that would be great.\nI'm going to close this since it's been two months, but if you get a chance to work on it further please do re-open the Pull Request. I'd love to add more support for Japan to ActiveMerchant!\n. @oggy, can you add a unit test for this? If it's important, I'd like to make sure it doesn't regress. Thanks!\n. Superseded by #697.\n. @hron what will be the consequences of this for folks that are currently running successfully with v3 of the MerchantWare API? Is there any chance this will break their integrations?\n. @melari did you verify that those v3 credentials still work with v3? Just want to check, since I've had gateway credentials unexpectedly expire on me before and give me false negatives on remote tests.\n. So @hron, to support v4 we'll either need it as a new gateway, or backwards compatibility with the v3 API.\n. I think that's the best option for now; eventually I'd like to have\nfirst-class framework support for this situation, but we're not there yet.\n\nNathaniel\nOn Wed, May 22, 2013 at 4:50 AM, Aleksei Gusev notifications@github.comwrote:\n\nSo, I think having two separate gateways is a better option. I can restore\nthe old class and make my work available as MerchantWareVersion4 class.\nLet me know what do you think folks! Thanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/696#issuecomment-18264946\n.\n. @maxwhite I'm assuming this supersedes #695?\n. No, that's a Travis error - you can ignore it. And in general you don't have to open a new Pull Request; you can just push more commits to the branch and the PR will automatically update.\n. This looks like a great start, but in addition to my comments inline, there's still a bunch of issues to address:\n- Needs a remote test\n- The unit tests need to be much more comprehensive, covering at a minimum success and failure cases for each public method.\n- The gateway needs a purchase method that does an immediate capture of funds.\n\nLet me know if you have any questions as you work on it - thanks!\n. @maxwhite @futhr I'm going to close this PR for now, but if you get a chance to revisit and make the necessary changes please do reopen it.\n. @forever-sumitsharma no one on the ActiveMerchant maintainer team uses the #recurring family of functionality, so this may just be a straight up bug that no one else has uncovered since the code isn't in heavy use.\nI'd recommend just digging into the code and seeing if you can fix it; feel free to ask more questions if you run into things in the code you don't understand, and/or open a Pull Request with any fixes you find.\n. @Dieglock no, since ActiveMerchant explicitly does not support recurring/subscription payments (all that remain will be removed in the next major version); they're out of scope for the library. Our recommendation is to use the given API directly or find a gem specifically targeted at it.\n. @sethbollinger, I'm not seeing this as being within the scope of ActiveMerchant, at least not at this point. We don't have any kind of abstraction around batch processing, and so it doesn't seem to add much value to have it in the library.\nThat said, I think this would make an awesome gem that just mixes the extra methods into the gateway, and it could either just be for Mercury or it could add batch processing functionality to ActiveMerchant as a whole.\nSo, in summary: not a fit for ActiveMerchant until it can be abstracted across gateways, but still really intriguing.\n. I can't cut new gem versions, but I've opened an issue (Shopify/active_utils#21) to get that done so we can get this merged.\n. Paymill allows some customers to use that API; it's the only way to do a direct integration without having to either embed Paymill JS or send customers to a Paymill page. So it's not so much that that API is not meant to be called, but rather that Paymill only allows some customers to call it.\n. @adrianmacneil I made some tweaks before merging this; most importantly I switched it to just using the Response#authorization for the token rather than introducing a new #token field, since that's the standard in other gateways.\nI also specifically deprecated using a Hash for the payment method.\nThanks for contributing!\n. We'll have to take your word for it - I don't think any of the maintainers use the recurring API. You could git blame and try contacting the original contributor as well.\n. Superseded by #774.\n. @afalkear it could be, but I don't know of any issues with it, nor has that code changed in a while so far as I know. If you find something amiss and can give us more details feel free to re-open this and we'll try to investigate.\n. Isn't this usually called \"track data\" in the vernacular? In general I think this should be supported directly on CreditCard; I've seen other gateways that optionally support it, and it's a definite possibility we at Spreedly will start supporting it across multiple gateways.\n. For every other gateway I've seen that has it it has been called track data, so unless they're actually different things I'd prefer to use track_data in the AM context.\n. This should be easily achievable once a new active_utils version is cut (Shopify/active_utils#21) since there's a way to select the SSL version in the latest active_utils.\n. Closing this as it's covered by the discussion on #736.\n. @cmattson can you add unit and remote tests for the success and failure states of each of the public methods (purchase/authorize/capture/void)? You've got some of them but I'd like to see them covered across the board before merging.\nAlso, does eProcessing support #refund? Would be great to add that as well.\nFinally, any chance we can rename this to EprocessingNetworkGateway instead of EProcessingNetworkGateway? It may be irrational, but I've been burned by the doubled capital causing problems with some code loading systems.\n. @cmattson I'm going to close this for now; if you get a chance to address the need for tests please do re-open it.\n. Agreed - #void must work on authorizations. If it's also advantageous to do a Moneris purchasecorrection for purchase and capture, then I'd prefer to see that as a custom option on Moneris' #refund call.\nAnother option would be to skip the custom option and just have #refund first attempt a purchasecorrection, and automatically fall back to a full refund if that fails.\nSo in general: reverting the original change would break the interface expectations, so I don't think we should merge this PR as-is. That said, I'm very open for finding conforming ways to allow a purchasecorrection - thanks!\n. Would it be hard to add a unit test for this as well?\n. I'm happy to squash, but if you do want to do it yourself ever, you just rebase locally and re-push - the PR will update automatically.\n. @demillir have you had a chance to add some tests for Balanced?\nFeel free to split Balanced into a separate PR; doing that would let me go ahead and get the Stripe stuff merged.\n. @MichaelHoste I merged it; see f1a732b1a3e5499774a6b8ff9b65fabe04880ef5.\n. @michaelbaudino ActiveMerchant does not support 3D-secure; if you need it you'll need to add it in your own app or as a separate gem that patches it onto ActiveMerchant.\n@MichaelHoste I think I took alias out since it was on by default; I'm cool having it as an option, but it should be off by default. Feel free to open another PR to add it back in, but please also implement store/unstore methods if possible, as those are the expected calls for tokenization in ActiveMerchant.\n. @ianbutler55 as per above, I just want to make sure the list of countries reflects places that merchants can acquire and use app55. Thanks!\n. @ianbutler55 no need to update at this point; I'll work on getting this merged as-is and then you can make tweaks (via new PR's) from there. Thanks!\n. @ianbutler55 I've merged this in, but I had to strip out tokenized card support due to not being able to implement an ActiveMerchant-style API.\nThe API for tokenization support in ActiveMerchant looks like this:\n- store(credit_card, options={}) returns a response with its authorization field set to a token\n- purchase(amount, payment_method, options={}) (and authorize) can then take the token returned by store as a payment method. The token should be all that is required to replace the usage of a credit card.\n- unstore(token, options={}) simply takes in the token and removes it from the gateway.\nNote that token is an opaque field; it can comprise multiple pieces of data from the store response, but it should be the only thing required when calling purchase and unstore (and if it comprises multiple fields they would simply destructure it upon receipt).\nI hope this helps explain; looking at how other gateways in ActiveMerchant implement store and their corresponding purchase methods may help as well. Feel free to open a new PR that adds tokenization back in with this API if you'd like.\nThanks!\n. @Sbastien since the :client option is specific to Paymill anyhow, why not just make that the name of the option in the options hash rather than using :customer?\n. Did you see :customer in other gateways? If so, then you're right and I'm wrong :smile:. I didn't know we had that option in use.\n. Nope, you were totally right - excellent catch.\nCan you correct the amount change? I think this'll be good to go once that's done. FYI you can just push more commits to your branch and they'll be automatically picked up by this PR.\n. Superseded by #797.\n. Superceded by #754.\n. I'd love to review a PR (preferably with tests) that fixes this. Thanks!\n. Lyndon, is there any chance that Paychoice's API can be interacted with directly rather than having to use a gem? Going forward I'm doing my best to avoid adding additional gateway-specific dependencies as I don't think they add value (and almost always add complexity) in the context of ActiveMerchant.\nWe'll also want to see a full suite of remote tests before merging. Thanks!\n. @sordina RE the gateways that currently have gem dependencies, I'd like to see those removed but realistically I don't know who would spearhead that effort. At this point I'm just trying to keep from ending up with any more of them.\nAnd I hear you RE keeping things up to date, but my experience is that a simple, direct set of API calls embedded in ActiveMerchant is actually easier to maintain since bugs can be fixed directly rather than having to wait for an updated gem. Plus if the API calls are in ActiveMerchant they follow the same patterns and get the same benefits such as built-in logging/debugging of API calls, etc.\n. @sordina I'm going to close this for now; please do re-open it once you've removed the gem dependency and I'll work on getting it merged. Thanks!\n. The code and approach here looks really solid, but can you please flesh out the remote tests and add a suite of unit tests in the style of the other gateways? Thanks!\n. @danf any love on adding tests?\n. @danf I'm going to close this out for now; if you get a chance to come back and add tests please don't hesitate to re-open it.\n. @shintre I don't think the Paydollar specific README is really necessary; that said, I think there's some good content in there and I'd love it if you adapted it as a general doc about integrations, which are basically undocumented for ActiveMerchant.\nAlso we won't take this with the nokogiri version locked; you should take a peek at the gemspec in HEAD and make sure this code works with Nokogiri specified as it is there.\nIf you can verify that this will work with nokogiri spec'd as it is in HEAD, I'll work on getting this merged sans-README. Thanks!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @robertoles this would be handled by just passing another option to initialize, see https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/redsys.rb#L179 and https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/redsys.rb#L307 for an example from another gateway.\nYou already seem to be aware of it, but my primary concern will be that this does not affect anyone already transacting against DataCash, so you'll just want to have that option default to the current behavior. Thanks!\n. @robertoles any chance you can tweak this to use the option style I referenced above? Thanks!\n. @robertoles I'm going to close this out for now; if you get a chance to revisit it then please don't hesitate to re-open.\n. FWIW I've seen other gateways take track1 and track2 as distinct fields.\n. Superseded by #797.\n. @spiritbear I'm closing this for now; feel free to reopen it if you get a chance to come back and add a few tests. Thanks!\n. Tim, if I understand correctly, the \"Reversal\" corresponds to refund in other ActiveMerchant gateways, and the \"VoidSale\" corresponds to a void. Both of these are top-level actions in ActiveMerchant, and I believe should remain distinct rather than having multiple requests hidden inside of ActiveMerchant. The fallback logic would then be implemented by the caller.\nThat said, I believe the current implementation I added for void is incorrect; build_authorized_request should skip the AcqRefData and ProcessData as well as resetting the ref_no if the :void option is set.\nDoes this sound right? It's easy enough for me to implement, but I want to make sure we're on the same page first.\n. So:\nVoidSale = VoidSale - (AcqRefData & ProcessData)\nReversal = VoidSale + (AcqRefData & ProcessData)\nIn the ActiveMerchant interface, refund should allow partial amounts and should \"always\" work, while void should always cancel an uncaptured authorization and can also optionally completely cancel a purchase or a captured authorization if the batch has not cleared (i.e. if it's been more than ~24 hours).\nThus:\nruby\ndef refund(amount, authorization, options)\ndef void(authorization, options)\nOpen questions I have:\n1. Since a VoidSale will always succeed, it seems like it should correspond to a refund, but can it be for a partial amount?\n2. Will a Reversal always work against an uncaptured authorization? Will a VoidSale?\n3. Can a Reversal be for a partial amount?\n. OK, this mapping makes sense now - it's much clearer with Return being equivalent to refund and void being equivalent to VoidSale.\nSo the only other question is the two variants of VoidSale; I'd say implement it as the plain version that will always succeed (assuming the batch hasn't closed), but allow passing a Mercury-custom option that will turn it into a \"Reversal\". So only one call is ever made when you call #void, but deep integrations can decide to implement fallback if they want to by trying it with the extra option first and then doing it without iff that first call fails.\nDoes that sound reasonable?\n. This is full of all kinds of awesome: :heart:.\nMerged.\n. IATS was added by #793.\n. ActiveMerchant is no longer maintaining Ruby 1.8 compatibility, so I don't think that's a hurdle for this patch. Those stuck on 1.8 can continue to use the last supported-compatible version of the ActiveMerchant gem.\n. @craigchristenson I don't use 2checkout, so I'm not as familiar with it. Is there any possibility these changes will break apps that are using 2checkout via ActiveMerchant? If so, what would be the nature of the breakage?\n. @jduff @melari any ideas on how to take these improvements in a way that won't break existing implementations? You guys use integrations way more than I do :smile:\n. Totally agreed @jduff that we'll need to see this as a completely backwards compatible drop-in replacement and/or having significant new functionality before it makes sense to merge it.\nI'll note that if PayPal ever actually stops supporting their \"old\" API's I'll eat my hat; they simply make too much money off of them, and I've yet to ever see them actually deprecate a family of API's. I'm not really worried about the existing integration stopping working anytime in the next decade.\n. Oh, just noticed this also uses an external gem; I'd be very much opposed to introducing another dependency for what's supposed to be a simple(r) API.\n. @siddick I'm not sure it's worth your time; it doesn't seem that either @jduff or myself are inclined to merge this. Thanks for your willingness to make tweaks, though.\n. Closing this until we see a compelling reason to switch to the REST API's.\n. @forrest as @jduff says, if you could submit a PR that does this that would be awesome. Thanks!\n. @dtscraft can you add a unit test that ensures this does not regress? Thanks!\n. Merged by #882.\n. The added fields and being able to override the gateway look great; beyond that I'd like feedback on my questions above. Once we come to agreement, I'm happy to edit and make a final patch.\n. @hoenth I pulled in the changes I think are appropriate for ActiveMerchant. Since the other changes (retrieve, add_gateway) are mostly bolt-on, I'd recommend you just re-open the ActiveMerchant gateway class locally and add them in for your own usage.\n. @structure can you please add a unit test or two covering these changes? Thanks!\n. @fuelxc I get a \"No Credit Card Number Provided\" when I run the test_successful_purchase_with_check remote test - what do I need to do to get that working? Is it a setting on my test account at SecurePay?\n. @fuelxc any update on this? Would love to get it merged.\n. @fuelxc I'm going to close this out for now; if you get a chance to revisit it please don't hesitate to re-open and make the tweaks and I'll look at getting it merged.\n. @hult it's just missing, probably because this isn't something you'd do with most gateways. I'd definitely consider a PR that adds it - thanks!\n. @hult if you've got a simpler modification to get what you need I'm open to considering it, but closing this PR out as I think we want to keep Bogus super simple.\n. @matt-optimizerhq sorry for the delay - been super busy.\nIs there any chance you can add more than just purchase? If possible I like to see authorize/capture/void/refund all implemented when we merge a gateway.\nThe other thing I'll need is credentials to be able to run the remote tests - does Swipe maybe have a set of public test credentials that can be permanently added to the fixtures.yml file?\n. This is looking great; one final thing: can you set the Response#authorization to whatever value will be needed when you do support refund? For those using the gateway it would be great to start capturing that data so that refunds will work even on older transactions once you get refund implemented.\n. @matt-optimizerhq I've gone ahead and merged this, but wanted to let you know I stripped out the extra call to check currencies. In general ActiveMerchant assumes the developer/merchant knows what currencies are supported, and it doesn't seem like it's worth the extra call on every request to check it.\nUnfortunately, it seems like the gateway doesn't return an error when an unsupported currency is used? Or maybe that's just in the sandbox environment; in general it would be best if an error was just returned so the developer would know what was up.\n. @llopez can you add more extensive unit tests? Remote tests only get run rarely, so while they're great to have, it's the unit tests that help make sure regressions don't happen. Thanks!\n. Love the extensive tests. If you can address my questions above we can get this merged. Thanks!\n. @llopez I've merged this; the one thing I couldn't get working are the remote refund tests, since Raven complains that the cc_debit that the test is attempting to refund isn't settled yet. Do you have a fix for that?\n. @jduff have you had a chance to review this since @buoyant's last change?\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @jduff we'll want to make it optional then, as we have customers using it successfully. We'll open an Issue to implement it as an option.\n. @GBH I've started on this, but am waiting for USAEpay to hook me up with a working test account before I merge.\n. Grrr, foiled again! I got credentials, but apparently they expired before I had a chance to use them. Emailed them.\n. @zamith I definitely prefer keeping the parser in this file as an inner class.\nDoes this change any functionality? Or is it a strict refactoring?\n. @zamith I'm getting remote test failures after applying this - are you seeing those?\n. @zamith SOP is to run the remote tests for a specific gateway whenever we're making a significant change to it; I'm getting a fully successful run against master:\n```\nntalbott@lorica:~/src/active_merchant$ ruby -Itest test/remote/gateways/remote_paymill_test.rb\nRun options:\nRunning tests:\nFinished tests in 35.330054s, 0.3113 tests/s, 1.4152 assertions/s.\n11 tests, 50 assertions, 0 failures, 0 errors, 0 skips\nruby -v: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n```\nWhat results do you show against master?\n. @zamith I got this merged - thanks! Heads up for next time: ActiveMerchant still supports 1.9, so I had to take out the usage of keyword arguments to get all the tests passing there.\n. @zamith no worries - it was an easy enough fix.\n. @jduff any update on being able to use common credentials for CP transactions?\n. @jduff when Auth.Net unifies the credentials will this still need to be a second gateway class, or will it all be able to live in the existing Auth.Net gateway class?\n. @jduff any movement from Auth.Net on the unification of credentials between CP and CNP gateways?\n. Superceded by #1112, which will allow CNP and CP to be done with the same set of credentials.\n. @duff the list should be updated in the README as well, right?\n. Yah, that thing is not maintained and should probably be removed. Regardless, for now the syncing is manual.\n. I'm guessing it's due to the automated generation - that way is fraught with peril - but there's now like 90 different PayPal entries, some even with the same name. We either need to leave the list hand-tended, or get those fixed up so that they actually all make sense.\n. @ir-soeasycorp I've been mulling on this, and I don't think I want to take it with all the inline SOAP strings. While we don't want to use a SOAP library, if you could follow the pattern in some of the other SOAP gateways (cyber_source, epay, eway_managed, etc.) of using a simple XML builder that would be great.\nAlso, I'll want to see the 3D secure stuff stripped out - ActiveMerchant doesn't support it at this point, so we don't need the code.\nFinally, if you could provide a set of test credentials that can be checked in and that the ActiveMerchant maintainers can use on an ongoing basis that would be a huge help.\nThanks, and let me know if I can clarify anything.\n. @ir-soeasycorp good points; I think my main issue with the current patch is how the \"big blobs of SOAP\" break up reading and grokking the code. While I agree with your first two points, my preference for the builder comes down to it just being less noisy - the SOAP ends up being a lot of pointy brackets and close tags. I get a clearer view of \"these are the fields that are getting plugged into the XML\" with the builder approach.\nThat said, I think the other option would be to pull the SOAP out into templates that are declared down at the bottom of the file. But we're not doing that elsewhere, so I'm not sure what tool you would use, as I don't want to pull in a templating library just for this.\nThoughts?\n. @ir-soeasycorp I'm inclined to agree with @jduff; the basic argument is simply that the less different approaches we have in the code base the lower our cognitive overhead when maintaining the library. Your approach is perhaps slightly better, but we'd want to adopt it across the whole codebase rather than having it show up in one place, and that's not a project that's really worth it at this point.\nIf you can go ahead and get it changed to the builder approach, I'll work on getting it merged as soon as I can.\n. @ir-soeasycorp any progress on this?\n. @jainankush12 I don't believe this will affect ActiveMerchant, no; from what I can tell, the underlying Ruby libraries we're using are already using HTTP 1.1 by default.\n. @larspind this was a gnarly merge - should double-check the final code to make sure it all looks right.\n. @larspind it definitely didn't apply cleanly; I think it was all the additional merges that were applied that borked it up. In general if you want to pull in upstream changes I'd recommend rebasing and doing a force push to your branch as I've found that a bunch of merge commits will often make the final merge go sideways, and as a maintainer your merge commits don't provide me any value.\nIn general, unless there are upstream changes that are needed for the patch to function, I'd recommend not pulling upstream changes into a PR. Since as a maintainer I'm keeping up on changes in the upstream, it's pretty easy for me to merge a PR even if it's branched from an old commit.\n. A PR is just a branch; my recommendation would be to create a branch off of Shopify master, get the change you want to submit back applied there, and then submit.\nIn terms of your fork, you can either make changes in the fork master branch first then extract them into a PR branch (git cherry-pick can be a good tool for this), or make the changes in the PR branch first and then merge the PR branch into your fork once it's ready to go and/or if the PR is taking too long to get merged. I personally prefer the latter since it tends to be simpler conceptually, but either will work fine. The key thing in both scenarios is that the PR branch is started at Shopify master and not your fork master.\nWe maintained an ActiveMerchant fork at Spreedly for awhile, and if I had to do it again I'd ensure all my custom non-upstreamable changes were clean commits, and I'd regularly rebase them on Shopify master and force push my rebased branch. That keeps things super clean and helps make it clear what you're maintaining in your fork.\n. It depends on what your origins are named, but if they're Shopify (Shopify's fork) and `origin' (your fork):\nsh\n$ git fetch Shopify\n$ git branch my-awesome-changes Shopify/master\n$ git co my-awesome-changes\n$ git push -u origin my-awesome-changes\nThat gets you the branch, and gets it pushed up to your fork. Now you can just work away in your my-awesome-changes branch, and push to it as you get things done.\nOnce you think the code is ready to go you can just browse to the branch in Github and hit the green \"Compare & review\" button, which will in turn offer you the option of creating a PR based off of the branch. You'll want to make sure the PR is going against Shopify/master.\nOnce the PR exists you can still keep updating your my-awesome-changes branch and the updates will get automatically reflected by the PR until it is merged/closed.\n. @larspind can you add a test or two that ensures this doesn't regress in the future? Thanks!\n. Fixed in 8c789db777db3a0208d114eea80dcd01fe8aa458.\n. @davidjsevans good catch! Could you add a unit test that ensures this doesn't regress in the future?\n. @davidjsevans turns out this was actually fixed by @odorcicd in 550ca83b16dca33ea42289be536f5d12d5a2b33b.\n. Would be awesome to get a PR for this. Thanks!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @melari Spreedly's working on a change to make CVD optional (with the default being to not pass it) rather than killing it altogether; we'll be sure to incorporate a test like this. We're aiming to have the \"fix\" rolled out this week.\n. @thehappycoder it varies on a gateway-by-gateway basis; to know for sure you'll need to review the code and/or test it.\nBTW, I'd gladly accept patches to fix thread safety in specific gateways, as it's something I'd like to see as a rule across the whole codebase.\n. @mbretter we'll need to see tests before we can merge this - thanks!\n. @llopez hopefully @melari can take a peek.\n. @jameswritescode can you give more details on what's wrong with the solution @jduff suggested? I'm not keen on further complexity in our (already complicated) Gemfile setup, and I'm with @jduff that pry is a local dev tool that I don't want to introduce a project dependency on.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. Closed by #854.\n. @ExxKA any chance you can add a unit test that prevents the fix from regressing? Thanks!\n. Basically just to make sure that it stays fixed; the only way we'll know it keeps working is if there's a unit test.\n. @ExxKA any progress on getting tests for this?\n. Merged.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @leofischer this is looking great, just one question: I see support in purchase for tokens, but how are tokens added? Should there be a store method for adding a token?\n. Great, I'm hoping to get to merging this next week.\n. @leofischer Conekta is merged now; in addition to some general cleanup to make it match up with the rest of ActiveMerchant, I also removed a few things:\n- offline_purchase - it's not supported/expected by ActiveMerchant. Folks who want to use it can just use the Conekta Ruby library. ActiveMerchant may someday provide a common interface for that functionality, but there aren't plans to now.\n- void - this was just implemented as an alias of refund, which is not the expectation. void in ActiveMerchant is used to cancel an authorize, so if Conekta has an API call to do that, then I'd love to see a PR supporting it via void.\n. @dawngreen ActiveMerchant (actually active_utils) bundles its own certs at this point. I'm hoping to stop doing that in a future version, but for now you want to just tell it not to do that.\nUnfortunately telling it to use the system certs is a bit involved; basically you need to set the ca_file on the Connection that your gateway is using to nil. At Spreedly we have a module we extend our gateway instances with:\n``` ruby\nmodule UseCoreActiveMerchantConnection\n  attr_accessor :use_system_certs\ndef new_connection(endpoint)\n    CoreActiveMerchantConnection.new(endpoint).tap do |c|\n      c.ca_file = nil if use_system_certs\n    end\n  end\nend\n```\nIt gets used like this:\nruby\n    active_merchant_gateway_class.new(active_merchant_options).tap do |gw|\n      gw.extend(UseCoreActiveMerchantConnection)\n      gw.use_system_certs = quirk?(:use_system_certs)\n    end\nThere are several gateways we have to make this tweak to.\nI'm going to close this out, but please do re-open if there's anything else I can do to help.\n. @cschulte22 ActiveMerchant provides a standard store API for tokenizing cards, with the token returned in Response#authorization. Can you use that for MPD rather than overloading authorize?\nThis generally looks pretty good - if you can address the above comments that would be great. Thanks!\n. Closing this for now; @cschulte22 if you get a chance to take another pass feel free to re-open this.\n. @waynehoover yup, this is definitely an active_utils issue; your solution looks fine, but if you want to introduce a better one (class attribute?) then I'd recommend opening up a PR over there. Thanks!\n. @jduff @melari any progress on this? The patch looks right to me...\n. @opetznick I'm not sure; I haven't used this anytime recently. Is there any way you can get PayPal to tell you if the value's being passed/set? Maybe ask on the ActiveMerchant mailing list to see if anyone else is using that code?\n. Closing this due to inactivity; if it turns out to be an ActiveMerchant issue please do re-open.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @odorcicd eWay has introduced a much better Rapid API that we (Spreedly) are already discussing implementing for them as a replacement for the current hack.\nThat said if this is actively causing you issues I think your change is worth a try. I don't know of any downside, but hard to say in production.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @silverstreaked I'd be happy to review/merge a PR that fixes this - thanks!\n. @dmitrysharkov I'd be happy to consider a PR that implements a solution, but I don't use DPM so I can't help you beyond getting a fix merged.\n. @jfernandez I'm not aware of any problems; maybe ask on the mailing list and/or try capturing the raw response bodies that are causing issues?\n. @JoshuaNovak919 I'll need more info to help you; maybe try asking on the mailing list with more details?\n. Don't let me be the hold up - this doesn't affect Spreedly either.\n. Thanks @boucher. @gdb any concerns?\n. @gdb I think all of that info is available in RbConfig::CONFIG if you really need it for support purposes; I'd take a patch that leveraged that but I'm just not convinced shelling out to gather the data is advisable.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @simonmorley I believe the underlying Ruby HTTP class supports http proxies; you'll need to dig into the Connection (which is actually in Shopify/active_utils) and probably use a custom one with your gateway in order to use them.\nI'd also be happy to consider a PR (here or in active_utils, whichever makes more sense) that adds more first class support.\n. @kcdragon the proper ActiveMerchant API for this is store; can you rename and also add support for unstore? Thanks!\n. @llopez any progress on not overriding ssl_post?\n. @melari have you been able to make any progress on this?\n. Generally looks super solid - if you can address my comments above I think this will be ready for merge - thanks!\n. @adijain it sounds like a bug; I'd love to see a PR that fixes it. Unfortunately I don't use that functionality, nor do I have NMI credentials to test with, so it's hard for me to fix it and/or know if it's fixed.\n. @jainankush12 that error indicates that SecureNet is returning an unexpected status code when called; one thing that can help with debugging is to set the DEBUG_ACTIVE_MERCHANT environment variable to true, which will cause all the communications between ActiveMerchant and the gateway to be dumped to STDERR. Another thing you might want to do is get a set of test credentials and run the remote_secure_net_test.rb to see if it passes for you.\n. Feel free to re-open this if you find there's an ActiveMerchant bug involved. If you're still having trouble figuring it out, you can also try asking on the ActiveMerchant mailing list.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @spiritbear when I try to run the remote tests for Cybersource - even without your changes - I'm getting errors from a bunch of the tests. Are you able to run the Cybersource remote tests successfully?\n. @spiritbear I see pinless debit and subscriptions tests failing. Do you know how to get the subscriptions functionality enabled for my test account?\n. @spiritbear when running with your changes:\n```\nRun options:\nRunning tests:\n[ 8/26] RemoteCyberSourceTest#test_successful_create_subscription = 0.72 s\n  1) Failure:\ntest_successful_create_subscription(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:241]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[ 9/26] RemoteCyberSourceTest#test_successful_create_subscription_with_mont\n  2) Failure:\ntest_successful_create_subscription_with_monthly_options(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:255]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[10/26] RemoteCyberSourceTest#test_successful_create_subscription_with_setu\n  3) Failure:\ntest_successful_create_subscription_with_setup_fee(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:248]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[11/26] RemoteCyberSourceTest#test_successful_delete_subscription = 0.71 s\n  4) Failure:\ntest_successful_delete_subscription(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:288]:\nFailed assertion, no message given.\n[12/26] RemoteCyberSourceTest#test_successful_pinless_debit_card_puchase =\n  5) Failure:\ntest_successful_pinless_debit_card_puchase(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:146]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[15/26] RemoteCyberSourceTest#test_successful_retrieve_subscription = 0.80\n  6) Failure:\ntest_successful_retrieve_subscription(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:298]:\nFailed assertion, no message given.\n[16/26] RemoteCyberSourceTest#test_successful_subscription_authorization =\n  7) Failure:\ntest_successful_subscription_authorization(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:65]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[17/26] RemoteCyberSourceTest#test_successful_subscription_credit = 0.78 s\n  8) Failure:\ntest_successful_subscription_credit(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:228]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[18/26] RemoteCyberSourceTest#test_successful_subscription_purchase = 0.72\n  9) Failure:\ntest_successful_subscription_purchase(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:153]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[19/26] RemoteCyberSourceTest#test_successful_tax_calculation = 0.72 s\n 10) Failure:\ntest_successful_tax_calculation(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:107]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[20/26] RemoteCyberSourceTest#test_successful_tax_calculation_with_nexus =\n 11) Failure:\ntest_successful_tax_calculation_with_nexus(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:128]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[21/26] RemoteCyberSourceTest#test_successful_update_subscription_billing_a\n 12) Failure:\ntest_successful_update_subscription_billing_address(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:275]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[22/26] RemoteCyberSourceTest#test_successful_update_subscription_creditcar\n 13) Failure:\ntest_successful_update_subscription_creditcard(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:263]:\n<\"Successful transaction\"> expected but was\n<\"General failure\">.\n[23/26] RemoteCyberSourceTest#test_successful_validate_pinless_debit_card =\n 14) Failure:\ntest_successful_validate_pinless_debit_card(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:309]:\n<\"Y\"> expected but was\n.\n[25/26] RemoteCyberSourceTest#test_unsuccessful_pinless_debit_card_refund =\n 15) Failure:\ntest_unsuccessful_pinless_debit_card_refund(RemoteCyberSourceTest) [test/remote/gateways/remote_cyber_source_test.rb:218]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\nFinished tests in 23.758434s, 1.0943 tests/s, 3.6619 assertions/s.\n26 tests, 87 assertions, 15 failures, 0 errors, 0 skips\nruby -v: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n``\n. I've requested that Cybersource add subscription and pinless debit support to my test account there; I'll give them a week or so to get that done and then will revisit this.\n. @spiritbear I finally got the remote tests all running, and actually fixed the issue you ran into while doing so in 7a179b6df21273ad9b1b8d6f5f5a83487fa4ab26. About to merge the test you added as well.\n. I'm going to close this as it sounds like it's not an ActiveMerchant issue; please re-open if I'm wrong, preferably with a PR to fix.\n. @ttdonovan the idea is that themoneyparameter passed intocaptureindicates a partial capture;nilis passed for the amount if the whole authorization should be captured. I'd prefer that approach here rather than introducing a custom option - can you make that change?\n. @KevinColemanInc can you add a test for this?\n. @KevinColemanInc can you give me more details on what tests are failing?\n. @KevinColemanInc yah that looks like it's just a poorly written test; it should be just checking explicitly for any keys it cares about vs. matching the exact list. Feel free to fix that alongside your new test, or you can leave it and I'll fix it when I merge your stuff.\n. So far as I can tell,x_test_requestis (now?) useless and should never be set. Rather, ActiveMerchant'stest` flag for Authorize.Net should simply determine whether to hit the test or the live url.\n@jduff does that sound reasonable to you? It doesn't seem like it'll break anything, and actually fixes a bunch of operations on Auth.Net's test server.\n. @KevinColemanInc right, which makes me think x_test_request is now completely useless.\n. @danrabinowitz the line in the diff you referenced doesn't affect the request at all, it's just a flag in the Response.\nActiveMerchant never sets x_test_request at all anymore, so I don't think I understand your concern.\n. This was fixed in d4a3b9ee39789e120e78a5eae7b05dae1c18c293.\n. @nearapogee I should be merging this PR today; @joelvh if you could rebase your changes on top of master once I get this PR merged in, that would be great.\n. Merged.\n@nearapogee smaller, more granular pull requests are always preferred; this PR was actually kind of challenging to get merged since I had to clean up & squash the various commits into a clear set of changes. So please do open a new PR (or PR's) with the other changes you have - thanks!\n. @nearapogee I don't care about squashing (that's easy for me to do) but more about each PR being a distinct change/feature.\nIn terms of cleanup the main thing was a bunch of trailing whitespace on lines, and brand somehow getting changed to type in the test. Nothing major, though.\n. In general, so long as you're using a separate Gateway instance per thread I think you should be OK. That said, I can't guarantee that there aren't adapters that do bad things with class variables - and ActiveMerchant isn't explicitly tested for thread safety - so if it were me I'd audit each gateway I was planning to multi-thread and make sure it's not mutating any class-level state.\n. @vysakh0 not sure - you'll need to dig into the source and see what's implemented if anything.\n. @grepruby that looks like a Cybersource error; you can use the wiredump_device to get verbose logs of the communications dumped so you can communicate with Cybersource about it.\nWe can't help much beyond that - you'll need to dig in and figure out why the comms are failing. If you find a potential bug in ActiveMerchant please do re-open this and we'll be happy to look into it.\n. We discussed this fairly recently, see https://github.com/Shopify/active_merchant/pull/790.\n. @silasj no worries! I have tried to find existing issues on unfamiliar repos many a time, and failed on many of those attempts :smile:\n. @crazyivan were you able to get PayPal to enable ACH on your Payflow test account? How did you accomplish that? I have a Payflow test account but ACH doesn't seem to be enabled on it, and I'd like to be able to run the remote tests for this before merging.\n. @crazyivan OK, I see that now - super helpful. What is the Vendor ID? Is it what PayPal calls the \"Merchant Login\" when logging in?\n. ActiveMerchant doesn't interact at all with Paymill's client API at this point, so this isn't really a surprise; I'd be happy to consider a PR that allows passing client fields when running a transaction, though.\n. @jduff what are your thoughts on adding this functionality to the bogus gateway? Spreedly doesn't use it, so I don't even really understand why it exists in ActiveMerchant or what the goals are for it.\n. OK, interesting; we do this at Spreedly but via our own internal class. I'm tempted to say Bogus should get deprecated in ActiveMerchant and folks should just create their own test gateway that quacks like an ActiveMerchant gateway if/when they need one. Otherwise I'm afraid Bogus will be the Inflector#pluralize of ActiveMerchant with a never-ending stream of small tweaks that only one person cares about.\nThoughts?\n. @npverni it seems we're getting a request a month lately to make this or that tweak to it, though. Curious what @jduff thinks.\n. @marothstein the maintainers have decided to stop accepting adapters with external gem dependencies; can you re-implement this in the style of a standard ActiveMerchant adapter that encapsulates the full request/response handling? Thanks!\n. @marothstein it's back in the queue now; I'm going to try to make another pass over the holidays, but might be early January at the worst.\nBTW, it's much easier to review & merge if you squash out the merge commit(s) first; I'm happy to do it myself, but thought I'd mention it for future reference.\n. Cleaned up and almost ready to go in #1070.\n. @joelvh I just merged a bunch of changes for USAePay Advanced; can you rebase this on top of master?\n. @joelvh it looks like most of this is related to recurring and customer management, both of which I'm not inclined to merge. If there's other stuff in there that should be merged, please split it out into per-change PR's so we can consider them individually. Thanks!\n. @pwoestelandt I'm OK with this since Ogone already has 3D-secure support; wish we'd never added it in the first place though :unamused:. I'll work on getting this merged soon (unless someone else beats me to it). One question: are there any d3d tests for credit cards that should now be run against aliases as well?\n. @pwoestelandt if you could add a test or two for d3d with aliases that would be great.\n. @ejcosti did you ever get the remote capture test passing?\n. @ejcosti when I run the remote tests every call returns a 500 error:\n[4/5] RemotePayhubTest#test_successful_purchase = 0.70 s\n  4) Error:\ntest_successful_purchase(RemotePayhubTest):\nActiveMerchant::ResponseError: Failed with 500 Internal Server Error\nAny idea what's up?\n. @ejcosti I'm going to close this for now; if you get a chance to revisit with working remote tests, feel free to re-open. Thanks!\n. @merchantwarrior you'll need to take this up with Shopify support directly - thanks!\n. @odorcicd this work was done at the initiative of the eWay folks, so I'm going to get some feedback from them on this issue. They may have a way to seamlessly migrate the customers currently using 3.0 via ActiveMerchant, and I'll update you here as soon as I hear from them.\n3.0 is so broken as an API I'm kind of loathe to keep it around in any form, but I agree if there's no seamless migration path (especially for Shopify customers) we'll need to find another way.\n. @odorcicd I heard back from eWay, and apparently any 3.0 account can use 3.1 without changes with an important caveat: eWay has to flag the IP's as PCI compliant, which can be done en masse for Shopify customers. And since the 3.0 API as implemented in ActiveMerchant is illegitimately bypassing the PCI checks, we really do need to get it replaced with 3.1.\nCan you email me separately (nathaniel@spreedly.com) so we can get that done and get this change merged? Thanks!\n. Also paging @bslobodin - see @duff's comment above.\n. @yagator are there test credentials we can commit to the repository in fixtures.yml? That makes it a lot easier for us to maintain the gateway, since then each contributor doesn't have to get their own credentials.\nEven if it's not possible to have a public version of test credentials, I will need a set in order to get this merged.\n. @yagator this is going to take some work to get merged - can I get a copy of the API docs for Sr Pago? Even if they're in Spanish I can probably make do with Google Translate.\nThanks!\n. @yagator if you decide to revisit this and can get me API docs, feel free to re-open.\n. @alagunambi you'll need to take this up with SagePay; that error is coming back from their system, and SagePay is known to work fine with valid production credentials.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. LGTM\n. @dppcode this should be supported via the credit method (which is intended to do a non-referenced/general credit) rather than overriding refund (which is intended to refund a referenced transaction). If you implemented it on the CIM gateway using credit, I'd be happy to merge; I'd also be happy to merge fixing how it's handled on the USAePay gateway for consistencies sake.\n. @saurabhnanda if you submitted a PR we'd be happy to review it - thanks!\n. @huoxito thanks for this; I've merged the deprecation fix. The explicit versions for active_support are super handy since it is the real dependency - rails is just a development dependency - so I skipped that commit.\n. @ramasuresh why did you move/rename the gateway? That's problematic if anyone is using it under the current name, and the name change doesn't seem significant enough to warrant the trouble of renaming.\n. @rmetzler I'd recommend just continuing to handle this in custom code; ActiveMerchant does have the Check object for ACH/EFT, but it's little used and little supported.\n. Fixed in a6000164a5f964d521f0ecaad463e1c6b888529d.\n. Closed in 81781ecc07fef0d2df1f6370015204ddebab2624.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @tylerrooney @granth I'm getting a remote test failure:\n[ 8/26] RemoteBeanstreamTest#test_successful_add_to_vault_with_single_use_t\n  1) Failure:\ntest_successful_add_to_vault_with_single_use_token(RemoteBeanstreamTest) [test/remote/gateways/remote_beanstream_test.rb:205]:\n<\"Operation Successful\"> expected but was\n<\"Customer information failed data validation\">.\nAny ideas?\n. @granth turned out it was due to a bunch of on by default requirements in my test Beanstream account.\nI've merged it, but note that I changed the API somewhat.\n. @arthurtalkgoal I have no idea what @fw42 is up to there (good gif though - might have to steal it). But Alipay would be a candidate for https://github.com/Shopify/offsite_payments, not ActiveMerchant.\n. @fw42 I figured, just wondered more why you were meandering down the paths of long-forsaken pull requests :grin:\n. @justinStitches I think you meant to submit this against the https://github.com/Shopify/active_shipping project.\n. @faizalzakaria does the credit card have to be added in a separate call? Would be a lot simpler, faster, and less error prone if the credit card fields could just be passed along when running purchase and authorize.\n. @alagunambi not sure RE moto - you'll probably need to dig into the code to see for sure.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @faizalzakaria do you have test credentials for this gateway that I can use to run the remote tests? Preferably they would be good indefinitely and could be checked in for future maintainers to use.\n. @molpe this is looking pretty good, a few questions:\n- Where can I get a developer account so I can run the remote tests?\n- Does Cecabank support authorize/capture/void?\n. @molpe got the credentials - thanks!\nWhen I run the tests with them, the failures are different, but things still fail. For instance:\n```\nntalbott@lorica:~/src/active_merchant$ ruby -Itest test/remote/gateways/remote_cecabank_test.rb\nRun options:\nRunning tests:\n[2/5] RemoteCecabankTest#test_successful_purchase = 0.95 s\n  1) Failure:\ntest_successful_purchase(RemoteCecabankTest) [test/remote/gateways/remote_cecabank_test.rb:25]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\"ERROR\",\n @params=\n  {\"success\"=>false,\n   \"date\"=>\"23/01/2014 22:43:25\\n\",\n   \"operation_number\"=>\"1390513405\",\n   \"message\"=>\"ERROR\",\n   \"error_code\"=>\"-1\",\n   \"error_message\"=>\n    \"FIRMA: 1bff923c1241ddeb127cb888b013a78427cd182bd75deb0c879e8670764bd47994724def6ae5b934\"},\n @success=false,\n @test=true>>\n```\nAny idea what's up?\n. @molpe I'm (finally) getting a chance to look at this again. In general it looks great, but a couple clarifications:\n- Are :order_id and :description required to run a purchase?\n- It looks like both the reference field and the :order_id of the original purchase are required for a refund - is that right? Anything else required for refund?\n. @molpe I merged this (and we're working on getting into Spreedly next). You can take a peek at the final commit to see a few tweaks I made, particularly around using response.authorization to encapsulate the full details needed to reference the transaction so that the order_id doesn't have to be remembered separately.\nGreat work, BTW.\n. @darkaz I see the support for the :currency option is commented out - does specifying currency not work?\n. @eremiya my guess would be that ActiveMerchant doesn't support the discount parameter; if you want to add support for it, we would be glad to review a PR.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @speric I believe other gateways in ActiveMerchant implement this as simply update; can you confirm and tweak this to keep that convention?\n. I think update needs to handle the various cases, including updating an existing card on a customer vs. adding a card to that customer. Honestly, the latter seems like it should be a store call, not an update call.\nSince neither Shopify nor Spreedly use the store/update methods, I personally don't care if the interface is broken to make it more consistent.\n. @speric think you'll get a chance to tweak this soon?\n. @speric this looks much closer to what I'd expect; I'll give it a final review and get it merged in in a bit. Don't worry about squashing or the commit message, as I'll just take care of that when I merge.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. Hey @steveklabnik, thanks for this! I'm hoping I'll get a chance to review it (and the pile of other PR's) soon.\nIn the meantime, we do require unit tests. The reason is that they're the only tests that we as maintainers can consistently run before every commit; the remote tests are too finicky to run globally for each commit, and the unit tests give us more confidence as we fold in changes.\nFWIW I also do most of my AM development using remote tests; once they look good I then grab output from the remote tests as they run (using DEBUG_ACTIVE_MERCHANT=true ruby -Itest <remote test file>), slurp it into the unit test file, and have the unit test mostly mirror the remote tests just using pre-captured input. Eventually I'd like to bake in this (to date very effective) method of testing, but haven't had a chance to yet.\n. @steveklabnik I tend towards test dependency minimalism, and I think VCR is more heavyweight than what I'm interested in in this context.\n. @steveklabnik are there any backwards compatibility concerns with merging this? Does it change the AM interface at all and/or credentials, etc.? Do customers need to do anything special before they can start using the next version?\n. Great. We'll of course run our internal tests at Spreedly before we deploy the new code, but it can be tricky sometimes with API's to be sure.\n. @steveklabnik one note on this: looks like Balanced does up to 5 separate HTTP requests just to run a purchase, and I think that's a big part of the reason it does so poorly on the request time metric on the http://gatewayindex.spreedly.com (built from Spreedly and Shopify data). If you have any say in the matter, I'd strongly recommend that API version 1.2 (or 2.0?) incorporates a means to boil that down to a single call - I wouldn't be surprised if doing so would drop the observed API call time down below 2 seconds. We'll not soon get around the fact that 1 HTTP request is always going to beat 2 HTTP requests hands down, and for the simple cases that ActiveMerchant serves, there's just not enough complexity to really justify multiple calls IMO.\nJust my $0.02 :smile:\n. @steveklabnik awesome!\n. Retrying this in #1177.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @vitaliyvasin this is looking pretty solid! I've requested test credentials; once I have those I'll work on getting this merged.\n. @vitaliyvasin CommerceGate went silent on me - I'm not sure they're going to get me credentials. Can you get me test credentials to use to get this merged? You can email me directly at the address on my profile.\n. @vitaliyvasin I've got an account now and have managed to login - sweet! I'm running into an issue, though:\n[1/8] RemoteCommercegateTest#test_authorize_and_capture = 0.77 s\n  1) Failure:\ntest_authorize_and_capture(RemoteCommercegateTest) [test/remote/gateways/remote_commercegate_test.rb:54]:\nResponse expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fce22e62da8\n @authorization=nil,\n @avs_result=\n  {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\"Invalid offer\",\n @params=\n  {\"action\"=>\"AUTH\", \"returnCode\"=>\"-114\", \"returnText\"=>\"Invalid offer\"},\n @success=false,\n @test=true>>\nI had an offer already configured in the backend when I signed in:\n\nWhat am I doing wrong?\nAlso, is there any way to avoid having to muck with offer_id and site_id to keep things simple for those using ActiveMerchant? It seems like a lot of complexity for customers to have to muck with to just use CommerceGate as a gateway.\n. @vitaliyvasin getting much closer! I'm still getting two remote test failures:\n```\nntalbott@lorica:~/src/active_merchant$ ruby -Itest test/remote/gateways/remote_commercegate_test.rb\nRun options:\nRunning tests:\n[4/8] RemoteCommercegateTest#test_successful_authorize = 1.49 s\n  1) Failure:\ntest_successful_authorize(RemoteCommercegateTest) [test/remote/gateways/remote_commercegate_test.rb:35]:\n<\"M\"> expected but was\n<\"S\">.\n[5/8] RemoteCommercegateTest#test_successful_purchase = 1.40 s\n  2) Failure:\ntest_successful_purchase(RemoteCommercegateTest) [test/remote/gateways/remote_commercegate_test.rb:43]:\n<\"M\"> expected but was\n<\"S\">.\nFinished tests in 15.245835s, 0.5247 tests/s, 2.4269 assertions/s.\n8 tests, 37 assertions, 2 failures, 0 errors, 0 skips\nruby -v: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n``\n. @vitaliyvasin make any progress on getting the remote tests to pass?\n. @vitaliyvasin looking great! One quick question - what countries can merchants sign up for CommerceGate from?\n. @vitaliyvasin so merchants from any of those countries can sign up for a CommerceGate account and transact against an in-country merchant account? I'm trying to distinguish between countries that consumers can use gateway from, and countries that merchants can acquire the gateway in.\n. @vitaliyvasin so thesupported_countries` field should be from the merchant perspective - can you give me a list of the countries that a merchant can be from to use CommerceGate for their business?\n. @vitaliyvasin awesome :thumbsup: \n. @meetme2meat I'll need to see unit tests for these before merging - thanks!\n. @meetme2meat if you get a chance to add unit tests feel free to re-open this.\n. This will need full unit and remote tests before we can merge it.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. Hey folks, just a heads up: this did break Spreedly, which has existing Conekta integration. Thankfully our tests caught it before we deployed.\nI'm not against the change - though I actually prefer to have the credential options for gateways reflect the names the gateway uses - but please do be aware that making a name change to critical options like this may affect existing integrations. Thanks!\n. @bslobodin :thumbsup: :star:\n. @kernow can you address my comments? Thanks!\n. I'm in the process of getting this merged @kernow, just held up waiting for SagePay to enable tokenization for my test account.\n. @rocketpiggy oneclick_purchase isn't a standard ActiveMerchant API method; the preferred approach for this functionality is to pass a store: true option to the standard purchase call.\nCan you change it to work in that manner please?\n. Awesome! Can you rename the :alias option to be :customer instead? That's the more commonly used option name for that function.\n. @rocketpiggy just added a comment above; maybe I'm confused?\n. @rocketpiggy OK, got it; my confusion was due to the API. What you should use is:\npurchase(amount, payment_method, options={}), where payment_method is either a CreditCard (respond_to?(:number)) or an alias.\nIf you can fix the API and add unit and remote tests, I'll be happy to get this merged. Thanks!\n. @rocketpiggy any progress on fixing the API here?\n. @rocketpiggy I'm going to close this for now; if you get a chance to come back to it, feel free to re-open.\n. Steve, the authorization should in general be whatever is necessary for any type of future interaction with the transaction, whether it be capture, refund, void, etc. Will the value you're having it return now work for e.g. refund?\n. A lot of gateways capture the bare minimum of information, then when a reference transaction of some type gets invoked - capture, refund, etc. - build that up into the full information needed to operate.\nSo for instance, I wouldn't think the authorization here would be a url; rather the bit(s) of information needed to build a url for a future operation on the transaction.\n. Well if you can figure out a way around it in this case I'm all ears :smile: \nI think the hard thing is that there are multiple reasons a transaction may need to be referenced in the future, and we (meaning at least Spreedly and Shopify as large consumers of multiple gateway API's) don't want to have to store a whole array of urls. The authorization serves as an opaque value we store and pass back into ActiveMerchant so it can figure out how to reference the transaction for a follow-on interaction, and it's actually one of the coolest design decisions (thanks @codyfauser!) IMO in terms of allowing true gateway agnosticism on top of AM.\n. @steveklabnik couldn't agree more RE reference gateway integration suite. Hope to get such a thing rolling someday.\n. This should work fine for Spreedly; the only concern would be the length of it if anyone is storing it in a fixed-width database field, but that's their problem, not mine :smirk:\nOne concern, though: what about existing authorizations that (for instance) Spreedly has stored from the last version of the gateway? They'll break in terms of being able to capture/refund/void against them, won't they? Is there any way to make this backwards compatible, at least for ~90 days while the usefulness of those existing references decays?\n. @steveklabnik from what I can tell, captures on existing authorizations and refunds on existing purchases will fail.\nPreviously, the :authorization option was being set as the Transaction :uri as returned in the response from #authorize and #purchase. This value was used directly as a uri by #void but was POST'd as :hold_uri and :debit_uri for #capture and #refund respectively.\nWith this new code, I think old transactions - which have the Transaction :uri as their stored :authorization - will attempt to POST directly to the Transaction :uri when #capture/#refund/#void are called, which (as I understand it) will break for all but #void.\nFor there to be a smooth transition for existing customers, I think there will need to be some way for a Transaction :uri' (which is the stored:authorization` value anyone using Balanced with ActiveMerchant will be holding) to be used with your version 2.0 API for all of the reference type transactions.\nThoughts?\n. In the interim, I'm going to revert the commit adding API 2.0 support; the functionality is currently broken, and we need to start rolling other changes out without breaking customers using Balanced.\nAs soon as we have a solid fix for this authorization issue, I'll roll the whole thing back in.\n. Retrying this in #1177.\n. @guibernardino the parameters to authorize and capture do not match up with other gateways - can you fix?\n. Superceded by #1211.\n. @celsodantas FWIW I'm strongly against having a helper class in cases like this - to me it just makes it harder to deal with the gateway since I have to jump between multiple files to understand the implementation, and my experience is that it often just makes the code more resistant to cleaning up the very complexity that makes it feel like some of it needs to be extracted.\nThe only real exception I see is when multiple gateways are sharing behavior, but that's a pretty rare edge case at this point.\n. @celsodantas well, the real issue is that the class is huge; shuffling the code around doesn't really help with that and actually makes it slightly more difficult to refactor.\n. @celsodantas no, the nice thing about the change is it's easy to re-inline the code. I'll do it when I merge.\n. @X0Refraction is there any functional difference between the old Iridium gateway and the new PayVector gateway? Or is this purely cosmetic?\n. @X0Refraction when you get back to it, please separate it into two PR's, one for the gateway and one for the integration. Thanks!\n. :thumbsup: \n. Looks great :thumbsup:\n. @bslobodin can I get a quick :thumbsup:/:thumbsdown: of this?\n. @bslobodin any thoughts on this one? Is there anything here that needs to be done?\n. @amassaad can I close this one as \"won't fix, no one cares at present\" since this has been sitting for 3 months with no change?\n. @CraigAPayne while I appreciate the work here, these functions are really outside the scope of ActiveMerchant.\n. @CraigAPayne your point about ActiveMerchant appearing to support recurring functionality is fair, and I've just created #1178 to address that.\nTo be clear, I don't think Elavon's (or any other gateway's) recurring support is illegitimate, but rather that it is outside the scope of the abstractions that the ActiveMerchant project can support well.\n. @muhammetdilek while these are excellent improvements, we'll need a few tweaks before merging:\n- Rename credit_with_authorization to refund to match other gateways\n- Rename credit_with_creditcard to credit to match other gateways\n- Add remote tests.\nThanks!\n. @muhammetdilek can you add remote tests for these new functions as well? Thanks!\n. @muhammetdilek any progress on getting remote tests added?\n. @muhammetdilek I'm going to close this for now; if you get a chance to come back to it and add remote tests, feel free to re-open.\n. Oops - not sure how I missed that! Will review.\n. @spurnaye can you add a remote test for this please?\n. @spurnaye if you get a chance to revisit feel free to reopen.\n. @MohdAnas it's probably an issue at your gateway - maybe check with them to see if they're having an difficulties?\nAlso, please use the https://groups.google.com/forum/#!forum/activemerchant for questions like this - thanks!\n. Merged.\n. @matsubo I'm really concerned about there being no way to test this gateway against their API; have you used it successfully in production already?\n. @matsubo any thoughts on the lack of a test environment and/or feedback on your usage of this in production?\n. @matsubo I'm going to close this for now; if you get a chance to revisit and address my comments, please feel free to re-open it. Thanks!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @SecureSubmit we'll want to see this massively simplified before we merge it; this is way overcomplicated for what ActiveMerchant needs. Please follow the conventions outlined in the generated gateway template, and focus just on the functionality needed for ActiveMerchant and not HPS in general. Thanks!\n. @SecureSubmit there's still a lot of duplication in this, especially around request/response handling. I'd really like to see the gateway follow the same pattern as others where there's a common method (typically commit) that handles submitting all requests and processing the responses.\nI've also added various inline comments.\n. @SecureSubmit can you point me at the API docs?\n. @SecureSubmit thanks for the excellent remote tests - they made cleaning up and merging this way easier.\n. @marothstein I need test/sandbox credentials to run the remote tests and make sure everything's working - can you get me those? Ideally they'd be indefinitely good and shareable so we can check them into the repo for future maintainers to use as well. Thanks!\n. @marothstein I'm going to close this for now; if you can circle back and get me credentials feel free to re-open this. Thanks!\n. @rafiaqutab supported_countries is really just informational metadata; it doesn't affect how ActiveMerchant operates at all.\n. @markabe looks like there's an Auth.net test that explicitly checks the countries? Seems like a dubious test, actually; could instead just check that the list contains a few that are expected.\n. Merged.\n. Use script/generate:\nscript/generate integration MyIntegration\n. @mistergiri the generator has nothing to do with Rails; you have to run it from the root of the ActiveMerchant project.\n. If you're trying to create a new ActiveMerchant integration, you'll need to clone the ActiveMerchant repo and work with it there; see the instructions here: https://github.com/Shopify/active_merchant/wiki/contributing\nIf you're just trying to use ActiveMerchant, there's no generator - you just use it.\n. Not that I know of, no.\n. @matsubo this is called a \"reference transaction\" in other ActiveMerchant adapters, and the expected interface is to be able to take the Response#authorization from the authorize call and pass it to future purchase calls as the second parameter. Can you please line this up with that API?\n. @matsubo see for example https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_iridium_test.rb#L85-L110\nBasically it needs to follow the same API pattern as other gateways that support reference transactions so that users of many gateways in ActiveMerchant (like Spreedly) can use it consistently.\n. @matsubo this is looking good; what is the merchant_code option for?\n. @msdundar I'm getting a lot of remote tests failures - do they pass for you?\n. @msdundar I'm still getting remote test failures, even after the second commit:\n```\nntalbott@lorica:~/src/active_merchant$ ruby -Itest test/remote/gateways/remote_akbank_test.rb\nRun options:\nRunning tests:\n[ 3/12] RemoteAkbankTest#test_failed_purchase = 1.23 s\n  1) Failure:\ntest_failed_purchase(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:28]:\n<\"Odeme basarisiz! & Payment failed!\"> expected but was\n<\"Declined (Reason: 99 - System based initialization problem. Please try again later.)\">.\n[ 4/12] RemoteAkbankTest#test_failed_refund = 0.00 s\n  2) Error:\ntest_failed_refund(RemoteAkbankTest):\nNoMethodError: undefined method refund' for #<ActiveMerchant::Billing::AkbankGateway:0x007fde858a4150>\n    test/remote/gateways/remote_akbank_test.rb:74:intest_failed_refund'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1301:in run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit/testcase.rb:17:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:919:in block in _run_suite'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:inmap'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:in _run_suite'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:657:inblock in _run_suites'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in each'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in_run_suites'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:867:in _run_anything'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1060:inrun_tests'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1047:in block in _run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:ineach'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:in _run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1035:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:21:in run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:774:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:366:in block (2 levels) in autorun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:27:inrun_once'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\n[ 5/12] RemoteAkbankTest#test_failed_void = 0.00 s\n  3) Error:\ntest_failed_void(RemoteAkbankTest):\nNoMethodError: undefined method void' for #<ActiveMerchant::Billing::AkbankGateway:0x007fde858ad9f8>\n    test/remote/gateways/remote_akbank_test.rb:87:intest_failed_void'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1301:in run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit/testcase.rb:17:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:919:in block in _run_suite'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:inmap'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:in _run_suite'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:657:inblock in _run_suites'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in each'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in_run_suites'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:867:in _run_anything'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1060:inrun_tests'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1047:in block in _run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:ineach'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:in _run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1035:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:21:in run'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:774:inrun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:366:in block (2 levels) in autorun'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:27:inrun_once'\n    /opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\n[ 7/12] RemoteAkbankTest#test_partial_capture = 1.33 s\n  4) Failure:\ntest_partial_capture(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:46]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJGC19066\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:06\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\n[ 8/12] RemoteAkbankTest#test_partial_refund = 1.23 s\n  5) Failure:\ntest_partial_refund(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:67]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJHE19068\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:07\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\n[ 9/12] RemoteAkbankTest#test_successful_authorize_and_capture = 1.23 s\n  6) Failure:\ntest_successful_authorize_and_capture(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:33]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJIH19070\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:08\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\n[10/12] RemoteAkbankTest#test_successful_purchase = 1.17 s\n  7) Failure:\ntest_successful_purchase(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:21]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJJI19072\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:09\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\n[11/12] RemoteAkbankTest#test_successful_refund = 1.49 s\n  8) Failure:\ntest_successful_refund(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:59]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJLD19074\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:11\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\n[12/12] RemoteAkbankTest#test_successful_void = 1.43 s\n  9) Failure:\ntest_successful_void(RemoteAkbankTest) [test/remote/gateways/remote_akbank_test.rb:80]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\n  \"Declined (Reason: 99 - System based initialization problem. Please try again later.)\",\n @params=\n  {\"order_id\"=>nil,\n   \"group_id\"=>nil,\n   \"response\"=>\"Error\",\n   \"auth_code\"=>nil,\n   \"host_ref_num\"=>nil,\n   \"proc_return_code\"=>\"99\",\n   \"trans_id\"=>\"14133RJMI19076\",\n   \"err_msg\"=>\"System based initialization problem. Please try again later.\",\n   \"settleid\"=>nil,\n   \"trxdate\"=>\"20140513 17:09:12\",\n   \"errorcode\"=>\"2100\",\n   \"numcode\"=>\"992104\"},\n @success=false,\n @test=true>>\nFinished tests in 12.892756s, 0.9308 tests/s, 0.8532 assertions/s.\n12 tests, 11 assertions, 7 failures, 2 errors, 0 skips\nruby -v: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n```\n. @msdundar any thoughts on the remote test failures? I can't merge without passing remote tests.\n. @msdundar I'm going to close this for now; if you get a chance to revisit and get the remote tests working, feel free to re-open. Thanks!\n. @rafiaqutab we'd certainly consider a PR that made this change.\nI'll also put in a quick plug for Spreedly, which handles a lot of these details for you; email me directly if you want more details on it (I work there).\n. @jsoma what's the motivation for customizing the delimiter?\nAlso, before merging I'd want to see unit and remote tests for this change.\n. @jsoma rather than make this configurable, is there any \"always safe\" combination of field delimiter and field encapsulation character that can always be used? I'd really like to eliminate this as something consumers of ActiveMerchant ever have to care about.\n. @jsoma any thoughts on an \"always safe\" configuration?\n. @asceresini I'm not sure that it's within ActiveMerchant's scope to try to nail expired exactly; when a card actually expires is probably time zone dependent and somewhat up to the issuer regardless. What trouble did this cause you?\n. I'm going to close this; it seems outside the scope of ActiveMerchant to nail the expiration time to the minute/hour.\n. @rubenrails we'd certainly consider a PR that adds store/unstore support for PayPal.\n. @rafiaqutab I like the overall direction, but would prefer a different design:\n- Rather than having a method that needs to be overridden, lets go with a declarative class_attribute just like supported_countries.\n- Using :login and :password as common parameters is actually an anti-pattern I'd like to drive out of the code over time; instead each gateway should be required to declare what their required parameters are.\n- Since each gateway is declaring the required parameters, the requires! call can be moved up to Gateway#initialize, simplifying the initialize for each of the gateways, and probably eliminating it for may of them.\n- The new gateway generator should be changed to include this new declaration, and to eliminate the gateway specific initialize since it's no longer needed except in special circumstances.\nLet me know if I can clarify further, and thanks for pitching in!\n. @rafiaqutab the problem with :login and :password is that they do not map to what the gateways themselves call those fields. We now consider it best practice to use credential names that map as closely and clearly as possible to what the gateway calls the credentials so that the API is self-documenting.\n. @rafiaqutab think you'll get back to this soon?\n. @rafiaqutab I'm going to close this for now to keep things tidy, but just re-open it when you get a chance to make more progress on it. Thanks!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @ksondere the ActiveMerchant policy is to not add new gem dependencies. Can you please implement without using an external gem?\n. @ksondere also, ARB support has been split out and deprecated in master now, so no need to support it here. You can strip that out.\n. Also we're still not seeing your rebased version here; did you force push it into this branch?\n. @ksondere I'm going to close this PR; if you could open up a new PR based on your new branch, that'll make it easier to give feedback. It's fine if it's not ready to go.\nI did take a look, and while I have some suggestions, it looks like things are headed in the right direction. I'll drop feedback on the code once you open the new PR. Thanks!\n. @justinplouffe I'm generally amenable, but this seems to have other changes mixed in. Can you submit the expdate change all by itself?\n. Merged.\n. @markabe looks like the Travis build failed for 1.9.2 - can you look into that?\n. @markabe have you seen this Duplicate Transaction issue before?\n[11/12] RemoteBridgePayTest#test_successful_refund = 0.90 s\n  1) Failure:\ntest_successful_refund(RemoteBridgePayTest) [test/remote/gateways/remote_bridge_pay_test.rb:58]:\nResponse expected to succeed: <#<ActiveMerchant::Billing::Response:0x007ff482b88390\n @authorization=\"|839373\",\n @avs_result=\n  {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\"Duplicate Transaction\",\n @params=\n  {\"result\"=>\"110\",\n   \"respmsg\"=>\"Duplicate Transaction\",\n   \"message\"=>\"Duplicate transaction\",\n   \"pnref\"=>\"839373\",\n   \"hostcode\"=>\"839372\",\n   \"getgetorigresult\"=>\"OK0013\",\n   \"getcommercialcard\"=>\"False\",\n   \"extdata\"=>\"InvNum=e8351a8594161b28676201e87c403537,CardType=VISA\"},\n @success=false,\n @test=true>>\n. OK, can you try forcing duplicate checking off as per the docs? I think dupe handling should default to false in general, as it's way too aggressive when implemented at the gateway level and really an app-level concern.\nI'd prefer to force it off in ActiveMerchant, then if anyone complains add an option down the road that lets them turn it back on for a transaction.\n. Merged.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @ahawthorne I'd be happy to consider a PR that supports passing a Legato token directly to purchase; what I'd need is for it to follow the standard API which expects the second argument to purchase to be either a respond_to?(:number) or a String. This PR took it as as Hash, which doesn't match the standard ActiveMerchant API.\nLet me know if I can clarify further.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. This is being worked on in #1176.\n. @rwdaigle ActiveMerchant has a deprecation facility; easiest to observe by grepping for assert_deprecation_warning. I'd recommend still accepting :login but dropping a deprecation warning that indicates the switch to :agent_code; doing so also flags the code for later removal.\nAs for the new :region parameter, I'd recommend simply having a default for it. Looks like formerly the na url was always used, so defaulting to that should allow anyone using the adapter today to keep on trucking.\n. Merged.\n. @stephenbiats in the original patch (#977) the determination of region was done based on the credit card's country, which is an error-prone check that's really outside the scope of ActiveMerchant, and often not possible since country is not always supplied with credit card data.\nThat said, you seem to be implying now that the determination should be made based on currency, which I think we could do within ActiveMerchant. Please confirm: can the region be determined solely based on USD/CAD vs. other currencies?\n. @stephenbiats RE refunds, that is a Shopify issue, not an ActiveMerchant issue, so you should take it up with Shopify's payments team directly.\n. @stephenbiats we've discussed this more internally here at Spreedly, and I've got another question for you: will the same set of merchant credentials ever need to interact with both urls? Or will a given merchant always be interacting with one of the urls?\n. @stephenbiats based on that I think the current implementation is correct: the region should be specified as one of the credentials. In Spreedly for instance the region is always required when setting up a gateway: https://docs.spreedly.com/payment-gateways/iats-payments.\nIt seems like the real issue is not the adapter, but rather that Shopify should expose the region as a configuration value; maybe @bslobodin can help with that?\nThe other option would be for iATS to fix this on their side, since it really seems like one URL should be provided and then iATS should be making the determination internally as to how to route the request. But if this must be pushed down into the client, I think it has to be exposed to the merchant as a gateway setup option.\n. @stephenbiats that's exactly the effect of specifying the region with the credentials; the code needs no changes to support that approach. Of course users of the code such as Shopify are free to present the selection of the region however they'd like, including making it look as though two different gateways are being picked between, but you should take that up with them directly.\n. @bslobodin I'm very much against creating gateway subclasses simply for presentation purposes - I think it clutters up the AM codebase, and would like to actually go through and eliminate all the gateway subclasses that don't add or modify behavior in the future.\nI know that in the Spreedly codebase we have our own wrappers around the ActiveMerchant gateways which allow us to use the same AM gateway class for two different \"presented\" gateways if we choose - perhaps something like that would work for Shopify?\n. @bslobodin :fireworks: \n. @stephenbiats this is out of my bailiwick now; I think @odorcicd is the person you'll need to take Shopify issues up with these days.\n. @bslobodin will this retain backwards compatibility with already saved authorization's?\n. @bslobodin awesome!\n. @bslobodin awesome :sweet_potato:\n. @ryan I'd prefer to actively test it when the supported_countries are declared - maybe you can override that setter?\n. Merged in 968d1459df178707be0b53ee974b8dfde6e2ccb1.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @bslobodin I remember this being a big deal with PayPal as well; did you look at that? Since whether a currency is fractional or not is a fundamental aspect of the currency, I'd love to see the determination wrapped up in some common code.\n. @bslobodin agreed if you need a quick fix for Stripe, but it seems like this is coming up more and more.\nMy understanding is we were moving away from using Money at all, though, and I'm not psyched about using decimal amounts. I'd prefer to see all amounts as integers of the smallest unit of the currency being used, and then build support around gateways formatting that appropriately for their calls.\n. @rafiaqutab we get to PR's as we can. No real set schedule.\n. @Irostovsky please add a unit and remote test for this - thanks!\n. @bslobodin I believe other gateways use the :recurring option; ECI is usually multiple possible values and sometimes passed on in an ECI-specific field, so I'm not keen on seeing it reused for this.\n. @bslobodin could this be made to recognize the :recurring option as well? That would keep it consistent with other gateways; Spreedly passes the :recurring option by default when we're re-charging a card, so it would be great if it was consistent here.\n. @bslobodin awesomesauce!\n. @bslobodin said:\n\nSo you're thinking we'd want AM users to be aware of all the special cases and pass correct minor unit amounts? I was considering using decimals because they move that complexity into AM where we can then take good care of it internally, especially as new currencies come and go or existing currencies change their rules. Let's move this into a separate issue though.\n\nIt seems to me the caller needs to be aware of fractional currencies at some level, don't they?\n. @bslobodin so in Spreedly's case, we're passing through an amount and currency from our upstream customers. The amount is always an integer, so $1.00 USD is represented with the tuple [100, 'USD']. We don't have anyone using non-fractional currencies today, but I don't think that would change our approach; Ft1 HUF would be passed as [1, 'HUF'].\nI do think that ActiveMerchant can and should participate in solving this problem, but I think it should do so by accepting that same basic tuple - amount as an integer, and currency - and using a knowledge of the exponent of the given currency to convert the passed amount to what a given gateway expects.\nAccepting a decimal seems unworkable:\n- While most gateways have an exponent of 0 or 2, some have an exponent of 3 or 4: http://en.wikipedia.org/wiki/ISO_4217#Active_codes\n- If we accept a decimal, people will represent it as a Float. And then they'll do floating point math on amount fields, and be :frowning: :feelsgood:. Always using an integer for amount encourages good money-handling practice.\n- It doesn't prevent the issue from leaking up to the caller, since if they want to handle the currency correctly they'll need to know which ones not to allow subunits on. I'd contend it's impossible to shield the caller from this aspect of amount handling since it pervasively affects the transaction.\nSo my proposal is to:\n1. Define a standard interface for amount - integer representation of the smallest unit of a currency - and deprecate any passing of Money or a decimal amount.\n2. Internalize handling of currency so that we can consolidate the currency checking/manipulation gateways are doing, and make it easy to adapt our API representation to what the gateway expects. Unfortunately there's not a good ISO 4217 library out there - none expose the currency exponent - so we'll need to implement our own, but it should be a pretty simple class and support data (json) file.\nI think this will simplify things for callers, since it will clarify 100% the API's calling expectations, and make it obvious what the caller's responsibility is.\n. Totally agreed RE currency exponent changes being a Big Deal:tm: - it's always going to create havoc when they do that, similar to when crazy people (ahem politicians! ahem) decide to change daylight savings time dates.\n. @MauricioMurga see my comments above.\n. @MauricioMurga @leofischer I just spent spent a bunch of time with this, and it needs some rework before going in. In particular the standard API for store is not working:\nstore(credit_card, options={}) which yields a token in Response#authorization that can be passed to purchase, update, unstore.\nIt's fine if store also takes a token, but it must work with a credit card to be useful in an ActiveMerchant context - thanks!\n. @leofischer OK, gotcha. This looks good then, and I'll try to get it merged first thing next week.\n. @waynehoover we're not seeing this issue; please re-open if you can provide more evidence this is an ActiveMerchant problem.\n. @odorcicd what you said makes sense to me :grin:\nFWIW Spreedly doesn't make any use of integrations, so I've kind of punched out on reviewing them.\n. @bcackerman we'd welcome a PR - thanks!\n. @pierre please split this into separate PR's for the gateway and integration. Thanks!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @hoenth I notice that the POST to Cashnet simply gets redirected into a GET; could the GET call be made directly and avoid the extra call and mucking around with following redirects?\n. @hoenth I've cut down the required credentials to:\nmerchant_name\noperator\npassword\nmerchant_gateway_name\nAs for the others:\n- station defaults to WEB, but if passed the passed value will be used.\n- customer_code now simply gets set to a string indicating the ActiveMerchant version.\n- item_code is now hard-coded to FEE.\n- credit_card_payment_code is dropped, since it was never used.\nWith these changes, the remote tests still pass. Do you see any issue with this? I'm trying to simplify the interface to the gateway and cut out as many Cashnet specifics as I can.\n. OK, let me know. I think that if item_code needs to be specifiable, I'll make it a custom option on purchase vs. putting it in the credentials, and keep a default in place so that it will work even if not specified.\n. - :station - can we at least default this as WEB in ActiveMerchant, so\n  long as it's overridable?\n- :item_code - is this always the same, all the time, or just stays the\n  same in your particular use case? What if we made it :default_item_code\n  in the credentials, defaulted itself to FEE?\nOn Friday, May 9, 2014, Tom Hoen notifications@github.com wrote:\n\nThe response from Cashnet is the following:\n- station is configurable by each gateway client. 'WEB' may not be an\n  allowed value in some, or may have an association with another\n  application/station. It must be configurable for each client\n- item_code is the same as station, as it is configured on a per\n  school basis. We would prefer to keep it as part of the initialization of\n  the gateway, as it won't change on a per purchase basis.\n- We can leave off the credit_card_payment_code. It is not used on\n  their transaction api\n- Fine to leave customer_code as AM Version\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1166#issuecomment-42720965\n.\n\n\n\nNathaniel\n. @andrei-miulescu ActiveMerchant already provides a means to get raw request/response; see the ActiveMerchant::Connection#configure_debugging and Net::HTTP.set_debug_output. I'm not keen to add another means of accessing raw request/response, especially in a gateway-specific manner.\nIf you can remove those changes, I'll be happy to review the configurable version, url, and header portions of this PR.\n. @andrei-miulescu I should have caught this on the first round, but is there any of this that would profit from remote tests?\n. Looks good, working on getting some Datacash credentials so I can test it out.\n. @andrei-miulescu were you able to get the remote tests to pass? I have a Datacash account now, but even without your changes 25 of 29 remote tests are failing, and I'm wondering how I need to get the account configured to get passing remote tests.\n. @andrei-miulescu any feedback on how to get the data cash remote tests passing? Were you able to get them to pass?\n. @andrei-miulescu I'm going to close this for now; if you get a chance to revisit and review the remote tests, feel free to re-open. Thanks!\n. @bslobodin any progress on this? We're eager to get it merged.\n. @bslobodin :shipit:. Want me to do the merge?\n. And FWIW, we'll probably get this tested out on the Spreedly side before you guys consume it in Shopify.\n. @steveklabnik I've got one failing remote test here, related to a change that was made in master since you originally submitted this patch. Basically, someone added the ability under the old API to set a customer name when using a tokenized card, and I can't see how to replicate that (or if I need to replicate that) under the new API.\nCan you review and give me a hint on how to fix the issue?\n. @steveklabnik per @michaelherold, this diff shows pretty clearly the change that was made: https://github.com/Shopify/active_merchant/pull/995/files\n@michaelherold do you know if there's any corollary to your change in the 1.1 API?\n. @steveklabnik to be clear, this new PR is the porting of your patch onto master, which includes @michaelherold's change. Unfortunately, I can't get the remote test he added to pass, even with the tweaks (also present in this PR) that I think should bring the test inline with your code.\nFrom what I can tell, the customer_uri is being ignored when passed on a debit in 1.1, which means the name doesn't get attached to the debit. It also means the create_or_find_customer call in purchase is completely useless, but that's another matter...\n. @steveklabnik are there any real downsides to just dropping the ability to pass the name here? Seems like it must be OK to not have it, since 1.1 doesn't support it?\n. There's no real backwards compatibility concern, since the gateway will just ignore that field if someone is still passing it. So it really just comes down to whether Balanced cares as to whether it's passed or not.\n. @steveklabnik we've rolled this out at Spreedly, and are seeing a weird result when attempting a capture:\n```\nPOST /v1/marketplaces/X/holds/HL3D0ghW7e2ZGhWJfaLy7oDh HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic X\nUser-Agent: Balanced/v1.1 ActiveMerchantBindings/1.43.1\nX-Balanced-User-Agent: {\"bindings_version\":\"1.43.1\",\"lang\":\"ruby\",\"lang_version\":\"1.9.3 p484 (2013-11-22)\",\"lib_version\":\"2.0.0\",\"platform\":\"x86_64-linux\",\"publisher\":\"active_merchant\"}\nAccept: /\nConnection: close\nHost: api.balancedpayments.com\nContent-Length: 10\namount=977\n```\n```\nHTTP/1.1 405 METHOD NOT ALLOWED\nContent-Type: application/json\nDate: Mon, 12 May 2014 19:20:02 GMT\nServer: ngx_openresty/1.2.6.3\nX-Balanced-Guru: OHM6a56df0eda0a11e3b0f902b12035401b\nX-Balanced-Host: bapi-live-prod-7nf6hx-10-3-4-216\nX-Balanced-Marketplace: X\nX-Balanced-Merchant: X\nX-Balanced-Revision: 1.0\nX-Balanced-Software-Build: 1.2.19\nContent-Length: 275\nConnection: Close\n{\n  \"status\": \"Method Not Allowed\",\n  \"category_code\": \"method-not-allowed\",\n  \"category_type\": \"request\",\n  \"_uris\": {},\n  \"description\": \"Your request id is OHM6a56df0eda0a11e3b0f902b12035401b.\",\n  \"request_id\": \"OHM6a56df0eda0a11e3b0f902b12035401b\",\n  \"status_code\": 405\n  }\n```\nThe authorization we're attempting to capture succeeded as expected. Two issues:\n- This is failing - we think it should succeed.\n- ActiveMerchant is interpreting this as success.\n. @steveklabnik this original PR was merged in https://github.com/Shopify/active_merchant/commit/39e1dec83a60b864d377f46a0da1fcacce1e8c85; can you open a new PR against master with your proposed change?\n. @dscataglini when I get a Round TUIT.\n\n. @bslobodin there was a warning getting spit out when running the tests, at least under Ruby 2.0.\n. :ship:\n. Generally :+1:, but I wonder if we can give it a more descriptive name.\nI also haven't had a chance to look deep, but maybe this is already covered by CreditCardFormatting and/or should live in there?\n. @justinplouffe works for me.\n. @hishammalik this looks good, except the API to store should not change. Please just set the amount to 0 and ensure the currency is set to the default gateway currency if it is not passed in options.\nAlso, can you please add remote and unit tests for this? Thanks!\n. @hishammalik see #1189, which does this. Maybe you can just chime in there?\n. Closing as a duplicate of #1189.\n. @pierre make_order and get_order_status are not part of the ActiveMerchant public API; please drop and/or rename them and match the standard ActiveMerchant API (purchase at a minimum) in order to get this merged.\n. @pierre the real issue is that if you can't implement the standard purchase API, then this isn't really a gateway, but rather an adjunct to the integration and should be tacked onto it and kept out of the Gateway namespace.\nAnd FWIW, PayPal Express is a horrific frankenstein monster in ActiveMerchant that I hope to kill at some point in the future, so not really a good example to look at :grin:\n. @pierre you're right that get_order_status is a gateway API, but it's not in the standard ActiveMerchant API, so doesn't really belong in ActiveMerchant scope at least on the gateway side. ActiveMerchant's goal is to provide a common API abstraction on top of multiple gateways so that platforms like Shopify and Spreedly can address them in a common way, not to be the official API library for these gateways.\nI'm going to close this and assume you'll move the bits you think are appropriate over to the integration PR.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @ta do the remote tests fail without this change to store? Just trying to figure out if a test needs to be added for this change.\n. @ta do you mean some acquirers will fail the store call if a currency that doesn't match the backend that is used?\n. @ta still trying to get clarity on this - any feedback on my last question?\n. OK, have a plan for this; just waiting on Quickpay to get me some dev credentials so I can run the remote tests.\n. Ugh, getting closer, but Quickpay didn't enable recurring support on my test account. Put in a request with them...\n. :+1: \n. @steveklabnik I've merged this; my biggest concern is that the failure Spreedly saw in production was perverse in that ActiveMerchant claimed the transaction succeeded even while it obviously didn't according to the response. Can you confirm before we put this back into production that using this new code that won't happen?\n. Merged - I think this is ready for us to give it another whirl at Spreedly.\n. This is back in production on Spreedly, and so far, so good.\n. @alevett is there any way to remote test these changes?\n. @mendable I'd prefer to have just one Wirecard fixture; can all functionality be tested against one or the other of them?\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @vanboom especially in light of the work in #1219 this needs at least a unit tests, or it's likely to get lost when that work gets merged. Can you add a unit tests please? You'll probably want to look at CommStub for checking that the data is being passed as expected.\n. @vanboom did you get a chance to add tests for this?\n. Well, maybe someone else will come along down the road who needs it. Thanks for trying!\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @dougal I'm amenable to fixing this, but should the fix instead be to have ActiveMerchant properly recognize these cards? If not why not?\n. @dougal any thoughts on fixing this for all of AM?\n. @MauricioMurga this seems to include a bunch of other commits too?\nAlso, can you please add a unit test that shows the problem and that your change fixes it?\n. @douglascamata a few high-level issues with this that will keep it from being merged as-is:\n1. It doesn't appear the gateway can take a CreditCard? Is this token only? If so, it's not really ActiveMerchant material, since gateways at a minimum need to support purchase with an untokenized CreditCard.\n2. It doesn't conform to the public ActiveMerchant API as shown in the generated template gateway. For example: authorize takes a second payment_method argument, but that argument is never used and instead non-standard values are plucked out of the options argument. That's just an example; you'll need to follow the standard API strictly, and ensure the gateway can run all operations without any non-standard options.\nI'm happy to help get this merged, but at a minimum the above will need to be address. I haven't dug in a lot deeper since both of those issues are pretty big flags.\n. @douglascamata I think this is a terminology mixup; what I hear is that MoIP really supports a purchase call that happens to require two calls under the covers. So I'd consolidate it all under purchase (using a MultiResponse) and drop authorize and capture unless there's a way to implement them with expected ActiveMerchant semantics.\n. @jaredmoody I'm totally onboard with that approach, and would be happy to review and merge a PR doing so. Thanks!\n. @trev thinks for pointing out the issue in other places; I've implemented a more systemic fix to this problem in #1217 and I'd love it if you and @MauricioMurga could give it a once over. If that gets merged, this PR will not be needed.\n. @bslobodin any concerns with this approach?\n. @justinplouffe Spreedly's very interested in adding Adyen, so I'd love to collaborate closely with you to get this merged. I'm going to review the code more closely and give you feedback, but I'd also love to get my hands on API docs and working credentials for the remote tests.\n. So that's gross that they return a 500 even for common errors. To deal with that, you'll need to catch those 500's, explicitly check for and handle known/expected errors, and re-raise any unanticipated 500's.\n. @justinplouffe are you ready for me to merge this?\n. @justinplouffe just added another thought on that.\n. @justinplouffe seems like this is almost ready to go - can you make final tweaks so I can get this merged?\n. :+1: on getting this shipped. :racehorse: \n. I added some comments - let me know if you have any follow-on questions. In general I like where this is going.\nI'll note I always make revisions when I merge, so don't feel like it has to be 100% perfect; mostly I just need the approach to match what ActiveMerchant expects, and more importantly, I need rock-solid remote tests since they let me clean up with confidence.\nI'm psyched to see this go in - will be great to have Authorize be using the latest and greatest!\n. This is looking pretty great! Mostly just needs the additional methods - authorize, capture, etc. - filled out.\nIdeally a nearly verbatim copy of the existing remote tests, and tweaked versions of most of the unit tests, will run successfully against the new adapter. Since this adapter has been around so long, there are a lot of interesting edge cases covered in the unit and remote tests that we'll want to make sure continue to behave the same.\n. @ksondere any progress on getting the rest of the API implemented?\n. @ksondere no worries, just wanted to make sure you weren't waiting on me :bowtie: \n. Loving the progress; I left some comments.\nAt this point I think it mostly needs the things I mentioned addressed, and then you'll want to go through the gateway code with a fine-toothed comb fixing all TODO items you've left and either addressing or removing all commented out code.\n. @ksondere think you'll be able to address my comments and clean up the TODO's soon?\n. @ksondere awesome! Let me know if I can clarify further and/or help with ideas for how to make refunds work. I know for instance the current AM adapter you're replacing just stuffs the last four of the card number (which isn't PCI controlled) into the Response#authorization so it can be split back out and passed when running the refund. Is it still possible in the XML API to just pass the last four instead of the whole card number?\n. @ksondere probably be next week before I can get this reviewed.\n. @ksondere dropped more comments for you. They all need to be addressed, but I'm most concerned about needing to always pass the amount into the refund call, even when just intending to refund the whole original transaction amount - why was this change made on the Auth.Net side?\n. While the refund method always takes an amount, the expectation is that passing a nil amount should just refund the whole transaction. That said, it looks like this behavior was never tested for Auth.Net, so don't worry about it - I'll get it working later.\nI'll get to a more in-depth review of this later this week or early next, and hopefully get it merged. Thanks!\n. @ksondere I'm working through this; one question I can't seem to answer from the docs: how should x_solution_id from the old API be mapped into the XML API?\n. @ksondere another question: how is the currency specified in XML requests (x_currency_code in the old API)? \n. Superceded by #1297.\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. I'm not keen to allow other transaction types to \"succeed\" with a status of \"pending\" - can you tweak to make this only affect refunds?\n. I've tested this in the context of Spreedly, and all our tests are passing with it. Time to :shipit:.\n. I'd like to allow setting an ActiveMerchant log, so people could easily do something like ActiveMerchant.logger = Rails.logger to get the same effect as today.\n. There is some limited Check support in ActiveMerchant; feel free to read the code to see how it works.\n. @danrabinowitz are all the CIM remote tests still passing for you?\n. The remote tests are really what's key here, and those are run individually for each gateway since they require valid test credentials:\nruby -Itest test/remote/gateways/remote_authorize_net_cim_test.rb\nYou'll probably need to drop your test CIM credentials in test/fixtures.yml for it to work at all.\n. Yup, we'll try to do better going forward.\nWould it help you at this point if we re-released with a minor version\nbump? Or damage already done?\nOn Tuesday, May 27, 2014, Forrest Zeisler notifications@github.com wrote:\n\n[image: :+1:] we got burned by this in production.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/1228#issuecomment-44344333\n.\n\n\n\nNathaniel\n. @bslobodin thoughts?\n. @bslobodin I don't think I have perms for doing gem releases.\n@nathany I'll mull on ways to make it clearer.\n. Going to close this out as \"willdobetternextime\".\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. @markabe when I run the remote tests I'm getting ActiveMerchant::ConnectionError: The SSL connection to the remote server could not be established - any ideas?\n. @markabe what version of Ruby are you running the tests under?\n. AM doesn't support 1.9.2 anymore; can you test on 1.9.3 or greater?\n. So it works for me if I run under 1.9.3. Fails under 2.0, though - do you see the same?\n. Merged.\n. @douglascamata I'm working on this, but I'm beginning to wonder if it supports purchases from any country other than Brazil? For instance passing \"CAN\" as the country gives me a validation error? (Pais do endere\u00e7o dever\u00e1 ser enviado obrigatoriamente)\n. Bizarre! It makes me wonder if it even has any utility in ActiveMerchant then, vs. just being a standalone gem, since I don't think platforms like Shopify and Spreedly will adopt it with that restriction. @bslobodin any thoughts?\n. @douglascamata I was already going to strip out the bank debit and boleto support when merging, since they're outside the scope of ActiveMerchant. (Technically AM does Checks, but it's really US ACH at this point). If you want to use those that's awesome, but you should just integrate with MOIP's API directly for them.\nThe major issue platforms like Shopify & Spreedly are going to have are all the required fields such as \"Neighborhood\" that aren't even collected and are specific to Brazil. I believe (though @bslobodin can correct me if I'm wrong) Shopify doesn't collect address fields beyond the standard ones and probably isn't interested in adding them. I know for Spreedly we'd wouldn't add those address fields as required, and would want the gateway to be able to run a transaction without them.\nWhat other gateways are you seeing that only work in a single country? I wasn't aware of any, but some odd stuff has slipped in over the years...\nOverall, I'm really thinking this looks more like an integration than a gateway; does MOIP have a hosted payment page you could implement as an integration?\n. @douglascamata all those gateways are only acquirable in one country (which is fine), but they can be used in multiple countries. The country indicates where merchants can acquire the gateway, not where customers can access the gateway from.\nI keep referencing Shopify and Spreedly since they're the prototypical use case, but the basic philosophy is that AM is an abstraction on top of various gateways. If a gateway requires special options to be passed, then the abstraction breaks, and it's not really a good fit for AM.\nThat's also the reason for not adding Boleto and bank support at this time; I'm open to adding them eventually, but it would need to be in a way that worked across gateways, not just for one specifically.\n. Going to close this as outside the scope of ActiveMerchant; maybe a good fit for a standalone gem?\n. @douglascamata see https://github.com/Shopify/active_merchant/blob/bd713170204a70d7f7a294ff67059b0a2c088e2a/test/remote/gateways/remote_pago_facil_test.rb#L79-L96 for how to handle the random response thing.\nAlso, can we :fire: :bomb: the servers of anyone who makes their test environment respond non-deterministically? SO STUPID.\n. @douglascamata any progress on getting the tests working?\n. @douglascamata closing this for now, but feel free to re-open if you get a chance to update the tests. Thanks!\n. @douglascamata no worries - thanks for the update!\n. See https://github.com/Shopify/active_merchant/issues/1228\n. @mnoack I'm generally amenable to validating the CVV; that said, you'll need to re-apply this to the latest master branch as the validation code has changed pretty significantly.\nAlso: were you able to find any docs that verify that these validations are valid for all CVV's and will remain so? Just want to try to future proof by making sure the \"3 digits for Visa/Mastercard, 4 for Amex\" is a standard and not just the current status quo.\n. @mnoack down to 9 open Issues - :racehorse:\n\n. :shipit: \n. @odorcicd as @bslobodin says, I'm working on moving ActiveMerchant away from ActiveSupport.\n. @louiskearns since the new project will share no code with ActiveMerchant proper, I'm concerned that referencing it in the project name could cause confusion. From an expectations standpoint I'd lean towards the name being clearly distinct. Up for being overridden, though, especially since Spreedly doesn't use the integrations :bowtie: \n. @duff probably, but brainstorm it goes.\nA few more ideas: active_offsite, active_offsites, active_offsite_payments, offsite_payments.\n. So I'm leaning heavily towards just offsite_payments any feedback on - or objections to - that specifically?\nFWIW I already have a working extraction; needs lots of polish still, but might have an initial pass at this ready to push into a new repo before the week is out!\n. \"Offsite Payments\" / offsite_payments it is!\n. @jduff can you hook me up with a new Shopify repo named offsite_payments?\n. @jduff awesomesauce!\n. Since I'm touching pretty much every file to do the necessary renaming, I'm flattening all the integrations into a single file per integration as I go along. Whee!\n. Extraction complete, though I expect I'll be making more tweaks as I get the ActiveMerchant shim in place. Now, onto the shim!\n. Shim branch is ready to go; just waiting on an official offsite_payments gem release before merging.\n. @npverni this looks great; can you add remote tests?\n. Unfortunately the Elavon credentials I have don't seem to be good anymore; working on getting some legit ones.\n. @donaldpiret thanks for the report - should be fixed.\n. @mnoack thanks for the excellent bug report, just pushed a fix. It's apparently a 1.9/2.0 difference, though I'm really surprised Travis didn't catch it.\n\n. Overall looks great; see my one question RE options[:store].\n. I'm seriously considering replacing ActiveMerchant::Connection with https://github.com/excon/excon, but it will be a big change. Based on past experience with HTTParty I'd never recommend it for a project like ActiveMerchant (awesome for playing with an API, too smart for its own good once you get serious).\nThat said, with https://github.com/Shopify/offsite_payments splitting off, the HTTP library used by offsites is no longer as much of a concern for me :grin:\n. ActiveMerchant integrations have been extracted into https://github.com/Shopify/offsite_payments. This PR has been moved (via reference) to the new repo - please follow up on it there.\n. Duplicate at least in part of #1189; will reference this when I merge that to make sure I'm getting the best code from both.\n. Man, I was so hoping I'd get away with not having to install each possible combo! Ah well, getting all the variants installed so I can reproduce and get this fixed.\n. @mnoack just pushed up a fix for the uninstallable Gemfile(s).\n. Closed by f84a253170fccfefa199e4cd9d30dd1394a6af35.\n. @duff this will break backwards compatibility for anyone that was using that cattr_accessor, right?\n. @jyr comments added - please address.\n. Closing this; feel free to re-open if you get a chance to address my comments.\n. @katgironpe I can't reproduce this on master:\n```\nntalbott@lorica:~/src/active_merchant$ irb -Ilib\nirb(main):002:0> require \"active_merchant/billing/model\"\n=> true\nirb(main):003:0> require \"active_merchant/billing/check\"\n=> true\nirb(main):005:0> c = ActiveMerchant::Billing::Check.new(routing_number: \"11\")\n=> #\nirb(main):006:0> c.valid_routing_number?\n=> false\nirb(main):007:0> exit\nntalbott@lorica:~/src/active_merchant$ ruby -v\nruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]\n```\nCan you give me a reproducible case?\n. For some reason I was thinking the tests were run with -w, but they aren't currently. Once I turned that on, I'm definitely seeing the issue. I'll work to address it as soon as possible - thanks!\n. This and a bunch of other warnings have been cleaned up, and rake now runs the tests with warnings on. Thanks @katgironpe for the impetus to clean stuff up!\n. @duff I wonder about the semantics here; I actually think the current behavior lines up with ActiveMerchant's expectations in terms of manipulating the batch. I'd certainly never expect a void to actually attempt a reversal; that sounds more like a refund outcome.\nDoes the existing void functionality work with an authorize? What's the context of this PR?\n. Sounds reasonable; I guess if the remote tests are still working it's OK to try.\n. @gmalette most gateways don't require CVV unless they're explicitly configured to do so, and the goal of Bogus isn't really to try to simulate all possible gateway configurations.\nThus I'm not inclined to merge this, though I'll see if @bslobodin wants to chime in since I think Shopify uses Bogus more than I do.\n. @gmalette but if you're using AM's card validations, then validation would fail and you'd never even pass the card to the gateway, right? So it seems like a no-op?\n. I should've looked closer at the patch, sorry. Was thinking this was changing the gateway, not card validation.\nThis looks fine to me :+1:\n. @shakzod not sure - you can check out the code, and/or talk to Spree support.\n. @justinplouffe @bslobodin this doesn't effect anything unless you toggle the option, right? If so, then :+1: :ship:.\n. @bslobodin as long as you're confident that it won't blow up existing users I'm :cool:.\n. Hey @keithpitt, great to see Pin getting auth/capture!\nOn the update methods:\n- update_customer is out of scope for ActiveMerchant - please remove.\n- update needs to match the signature used by other gateways (update(token, credit_card, options)), and I'm not clear if the current signature you have does; the key thing is that the token returned by store should be the token passed to update - is that the case here?\nCan't wait to get this reviewed and merged - thanks!\n. @keithpitt update_customer is out of scope for ActiveMerchant - can you pull it out? Otherwise this looks good.\n. @buoyant this needs to be split up; the integration portion needs to be submitted to the Shopify/offsite_payments project, as that's where all integrations live now.\nIf you can get the gateway portion of this PR separated out, I'd be happy to review it here. Thanks!\n. @fotanus ActiveMerchant has no plans to adopt the new API at this point, as the existing adapter is working great and PayPal has no plans that we know of to deprecate the existing API's.\n. @EppO yup, ActiveMerchant doesn't use the PayPal library, so that's not an issue for us. Unless you can find them publicly stating that they're deprecating the SOAP API, we have no plans to move.\n. @eneeyac if someone wants to add store support and it requires the REST API, we would consider that in context. There happening to be extra functionality that AM doesn't need at present isn't a factor here, though.\n. @justinplouffe no worries on the merges - I hadn't written down what I was doing, so hard to ask others to follow it! Definitely hit me up if you have questions about it, and note that it makes it super easy to update the CHANGELOG when merging rather than having to do it later.\nBack to the patch at hand, I'm dubious about digging around in the gateway internals for the test. Could you use stub_comms instead to test at a higher level?\n. Fixed & merged.\n. Customer management seems outside the scope of ActiveMerchant. That said, if instead you could tokenize the card automatically when using it, would that allow you to call Balanced directly and add/associate a customer with the newly tokenized card?\nIn general I think ActiveMerchant should only interact with cards and tokenized representations of the same.\n. Closing this for now; feel free to re-open with more details.\n. @fotanus at https://github.com/Shopify/active_merchant/blob/37e45c77f3ba7eeb7909dd5fca49f2937af2826d/lib/active_merchant/billing/gateways/paypal_express.rb#L165 the code you referenced calls add_payment_details, which at https://github.com/Shopify/active_merchant/blob/37e45c77f3ba7eeb7909dd5fca49f2937af2826d/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb#L575 maps InvoiceID to options[:order_id]. So I think that just setting :order_id when calling setup_purchase should set the field you're asking about.\n. @duff I just enhanced MultiResponse so that you can now process(:ignore){void}. This will allow a void to be attempted without failure thereof causing an overall failure of the verify call. Note that the ignored response is still in MultiResponse#responses, so if someone cares about the failed void they can dig around in there and pull out the actual result.\n. @butchmarshall can you add a test that will protect this from regression? stub_comms might be handy.\n. @butchmarshall I actually got this fixed and included a test; see 435ce6840abaa2f4bdee7c7b4c846ad89fb1b8d3.\n. You'll have to provide more details; does Spree capture a transcript of the conversation with the gateway?\nYou should also figure out if that error code is coming from Spree or from Authorize.Net and look it up to determine what it means.\n. @zambrevishal that error is coming back from Authorize.Net - you'll need to talk to them to figure out what's causing it.\n. @EdwardDiehl I left some inline comments for you; in particular I'll need you to inline all the constants before I can really give this a good review. Thanks!\n. @EdwardDiehl think you'll get a chance to incorporate the feedback above?\n. @EdwardDiehl this is looking better; mostly needs more tests.\n. @EdwardDiehl can you address my comments, in particular the need for more tests?\n. Closing this out for now; feel free to re-open it if you get a chance to fix the issues raised.\n. @vishalzambre I don't understand this change - why should Maestro get mapped to Mastercard?\n. @vishalzambre seems like the correct solution would be to add maestro as a supported card type to AuthorizeNetGateway, right?\n. @vishalzambre I'm trying to test solutions to this problem, but I can't find a test Maestro card for the Authorize.Net sandbox that works - are you aware of a test Maestro card number that works in the Authorize.Net sandbox and/or any Authorize.Net documentation how to pass them Maestro cards?\n. Superceded by #1304.\n. @ksondere I currently need the answers to three questions from you:\n- [x] How should x_solution_id be mapped onto the XML API?\n- [x] How should x_currency_code be passed via the XML API?\n- [x] What is most accurate way to determine the \"response reason code\" from the XML API?\nThanks!\n. @tesserakt no, Auth.Net is currently working fine in ActiveMerchant. This is a new PR that aims to change the currently working adapter to use a different Auth.Net API, hopefully without any perceivable effect on existing users of the adapter.\n. @ksondere but neither Solution ID nor Currency Code are user-defined fields - they should both affect the behavior of the gateway, either by tracking the transaction (Solution ID) or affecting the currency that the transaction is processed as (Currency Code). I don't think userFields is appropriate for either.\n. @ksondere the issue is that we can't put this new API in place if I can't map all the functionality directly over, as we'll break existing ActiveMerchant users if we do. It's infeasible to have currencies in particular not get transmitted.\nWhen will first-class support for these fields get added? We'll probably have to wait to merge this until all functionality can be matched from the old API.\n. @ksondere oh, then I misunderstood; didn't realize it was actually mapping them to the old API. I'll try that and see if I can get the tests passing - thanks!\n. @ksondere passing the x_* fields via the userFields seems to be working great - thanks for that.\nNext question: what is most accurate way to determine the \"response reason code\" from the XML API?\n. @ksondere no idea :confused: \n. @ksondere I think this is ready to go - any feedback?\n@bslobodin this is a pretty big change, though I've done a lot of work to ensure it's zero impact to current users of the adapter. Can I get a :+1:/:-1:?\n. @ksondere I tested the new code next to the old code, then once I was satisfied that they were compatible I replaced the old code. There's no reason for us to maintain access via the old API when the new one achieves 100% compatibility.\n. @vparihar01 two things:\n1. This patch adds shared credentials for Authorize.Net - see https://github.com/Shopify/active_merchant/pull/1297/files#diff-3\n2. Per https://github.com/Shopify/active_merchant/blob/master/test/test_helper.rb#L145-L147 and https://github.com/Shopify/active_merchant/blob/master/test/test_helper.rb#L207-L215, you can define a local fixtures file that overrides the shipped fixtures file and lets you maintain a set of unsharable credentials without having to constantly edit changes in and out of the repo.\n. So @odorcicd, @louiskearns, etc. - what do we need to do to get this reviewed and merged?\n. OK, I'll incorporate the suggestions and get this merged. Thanks so much for the review folks!\n. Not sure I'll get to it by then; should be able to get it merged sometime tomorrow.\n. Merged. Thanks for all the help folks!\n. @bcackerman I think you set it at the class level: ActiveMerchant::Billing::AuthorizeNetGateway.application_id = \"spreedly\".. @SecureSubmit @bertoncobb can you add tests so I can be clear on what's being fixed and so we can ensure we don't break certification in the future?\nAlso would be great if you could rebase this on the latest master.\n. @SecureSubmit @bertoncobb think you'll get a chance to add tests for these changes soon?\n. @SecureSubmit I'm still not clear on what's being fixed here. Why does this need to be merged?\n. OK, that helps explain - thanks.\n. Is this the AuthorizeNetGateway or the AuthorizeNetCimGateway?\n. @cimtico I can't reproduce this in Authorize.Net's sandbox, and further http://www.ruby-doc.org/stdlib-2.1.1/libdoc/net/http/rdoc/Net/HTTP.html#class-Net::HTTP-label-Compression indicates that Ruby's Net::HTTP class supports gzip decompression. I also tried a production request using bogus credentials, and ActiveMerchant properly parsed the XML response indicating authentication failure. So:\n- what version of Ruby are you on?\n- do you have any other changes to Net::HTTP that might be affecting ActiveMerchant?\n- can you give me a stripped down, reproducible test case that shows this issue?\nWithout any evidence of the problem outside of your application, I'm not keen to muck around with HTTP headers that are already working.\n. @cimtico can you provide me the details above? As it is I can't reproduce this.\n. @cimtico I couldn't reproduce against the production server either. I'm wondering if this is only an issue with older versions of Ruby, thus my questions above.\n. Also, FWIW, between @spreedly and @shopify a lot of production Authorize.Net transactions are being run, and neither of us have seen this issue.\n. @cimtico FWIW I researched, and it seems like passing Accept-Encoding: identity is the ideal fix for this. That said, I'm going to have to assume it's something specific in your setup unless I see a reduced reproduction.\nThanks for reporting though - at least if it does start happening to someone else we have a record now.\n. @jdutil is this likely to break existing users? Can you add a test?\n. @JDutil I get remote test failures with your patch, so I'm thinking this is not a backwards compatible change:\n```\n[29/47] RemoteBraintreeBlueTest#test_successful_purchase_using_vault_id\n  1) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_using_vault_id [test/remote/gateways/remote_braintree_blue_test.rb:62]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Payment method token is invalid. (91518)\",\n @params={},\n @success=false,\n @test=false>>\n[30/47] RemoteBraintreeBlueTest#test_successful_purchase_using_vault_id_\n  2) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_using_vault_id_as_integer [test/remote/gateways/remote_braintree_blue_test.rb:76]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Payment method token is invalid. (91518)\",\n @params={},\n @success=false,\n @test=false>>\n[33/47] RemoteBraintreeBlueTest#test_successful_store_with_billing_addre\n  3) Error:\nRemoteBraintreeBlueTest#test_successful_store_with_billing_address:\nNoMethodError: undefined method []' for nil:NilClass\n    test/remote/gateways/remote_braintree_blue_test.rb:146:intest_successful_store_with_billing_address'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1265:in run'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit/testcase.rb:17:inrun'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:940:in block in _run_suite'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:inmap'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:in _run_suite'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:663:inblock in _run_suites'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in each'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in_run_suites'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:884:in _run_anything'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1092:inrun_tests'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1079:in block in _run'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:ineach'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:in _run'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1066:inrun'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:27:in run'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:780:inrun'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:372:in block (2 levels) in autorun'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:33:inrun_once'\n    /opt/boxen/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:371:in `block in autorun'\n```\nI'll probably deprecate all management of customers from ActiveMerchant in the future - it's outside of scope - so I'm not real inclined to muck around with this code. Maybe it'll work better for you to just interact with the Braintree gems directly vs. using ActiveMerchant?\n. I run remote tests like so:\n$ ruby -Itest test/remote/gateways/remote_braintree_blue_test.rb\nMaybe Spree could just create a new customer profile every time instead of mucking around with multiple cards per customer? The real issue for me is that I think ActiveMerchant's store/update/unstore should treat all vaults as \"dumb\" and map as closely to CC -> token, token -> CC as possible. When the vault has customers, I'm headed in the direction of just treating them as a wrapper around a card that's invisible to the ActiveMerchant user.\n. The options explosion is what I'm trying to move away from; lots of custom options says to me \"you should just be using the gateway API directly\".\n. @JDutil all the remote tests pass for me on master, but fail if I apply this patch. If they're failing for you, it's probably that you haven't plugged your own sandbox credentials in; Braintree doesn't let us ship a working set of sandbox credentials unfortunately.\n. Output here:\n```\nntalbott@lorica:~/src/active_merchant$ ruby -Itest test/remote/gateways/remote_braintree_blue_test.rb\nRun options:\nRunning tests:\nFinished tests in 100.041443s, 0.4898 tests/s, 2.7489 assertions/s.\n49 tests, 275 assertions, 0 failures, 0 errors, 0 skips\nruby -v: ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]\n```\nMy fixtures look like:\nntalbott@lorica:~/src/active_merchant$ grep braintree_blue: -A5 ~/.active_merchant/fixtures.yml\nbraintree_blue:\n  merchant_id: sk2db46gz3spmcb2\n  public_key: f7xws5n88bvtmfhc\n  private_key: X\n  merchant_account_id: spreedly\nWith the private key redacted.\nCan you give me the gist of what remote test failures you're seeing?\n. @JDutil you probably have processing rules turned on in your sandbox account:\n\nCheck in there and make sure they're all turned off. Ideally the remote tests would tell you this was the problem, but today they don't :cry: \n. Ugh, this is ugly, but I'm not seeing a better alternative based on the current state of ActiveMerchant's Braintree Blue integration.\nCan you add a remote test? Will definitely want to see one before I merge this.\n. Let's discuss on the PR.\n. @vparihar01 does this actually fix the issue in production for you? I've not been able to test with the sandbox.\n. @vparihar01 I tried the 6759649826438453 number you referenced in #1296, but receive this reply from the sandbox:\nResponse expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fb7924353e0\n @authorization=\"0\",\n @avs_result=\n  {\"code\"=>\"P\",\n   \"message\"=>\"Postal code matches, but street address not verified.\",\n   \"street_match\"=>nil,\n   \"postal_match\"=>\"Y\"},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=false,\n @message=\"The credit card number is invalid\",\n @params=\n  {\"response_code\"=>3,\n   \"response_reason_code\"=>\"6\",\n   \"response_reason_text\"=>\"The credit card number is invalid.\",\n   \"avs_result_code\"=>\"P\",\n   \"transaction_id\"=>\"0\",\n   \"card_code\"=>\"\",\n   \"authorization_code\"=>\"\",\n   \"cardholder_authentication_code\"=>\"\",\n   \"action\"=>\"AUTH_CAPTURE\"},\n @success=false,\n @test=true>>\nAre you able to get the sandbox to successfully process a Maestro card?\n. @vparihar01 the \"Postal code matches, but street address not verified.\" is purely informational; I do not have AVS checking enabled on this sandbox account.\nI cannot get Authorize.Net to take a Maestro card - all attempts return a \"reason code\" of 3 and a \"reason response code\" of 6, which indicates \"The credit card number is invalid.\", which seems to indicate that Authorize.Net doesn't even recognize Maestro cards as valid cards. Can you give me a minimal piece of code that demonstrates a successful Maestro purchase against an Authorize.Net sandbox?\n. @vparihar01 OK, that explains. I'm happy to add :maestro as a supported card type for the Authorize.Net adapter if some backends support it. Since the adapter doesn't actually send the card type - it's automatically calculated by Authorize.Net based on the card number - that should be all the change that is necessary.\n. To clarify that: passing through \"master\" for \"maestro\" shouldn't be necessary since that value's not actually used in the communication with Authorize.Net. The error message is/was coming from Spree, and Spree should stop blocking it once we add Maestro to the supported card types for the gateway.\n. @radar can you add a unit and/or remote test to ensure this doesn't regress? Thanks!\n. :+1: \n. @spreedly doesn't support NetRegistry, so LGTM! :wink:\n. Since this is just an FYI PR, going to close it to keep things tidy, but of course will leave the branch there.\n. @rob-anderson can you please add unit and remote tests for this change?\n. LGTM :shipit:\n. :+1:\n. @camelmasa added some feedback; let me know if I can clarify anything further. Thanks!\n. @camelmasa any progress on cleaning this up?\n. @camelmasa I'm going to close this for now; feel free to re-open once you have a chance to work on it more.\n. @dpritchett while I've heard about this I don't think we have any plans to add it to ActiveMerchant at this point. If you were to add it we'd definitely consider a PR, though I think it might be outside the scope of ActiveMerchant since I don't think it can be totally done via a direct API.\n. @X0Refraction the fact that CVV and/or AVS failed does not necessarily correlated with why the transaction failed, depending on how the backend account is configured. That's why CVVResult and AVSResult are separate and have their own message that one can decide to display or ignore.\nSo I'm not inclined to take this, but I would consider a PR that adds a proper :avs_result and :cvv_result to the Iridium Response.\n. @X0Refraction the merchant choose to do whatever they want when they get the Response object back - just depends on how they decide to code it up.\n. @X0Refraction you'll need to take that up with Shopify; regardless I won't take this if it's setting the overall message to the AVS/CVV result.\n. @X0Refraction does #1340 help at all with this?\n. Yup, see https://github.com/Shopify/active_merchant/pull/1318.\n. @gingermusketeer first, the CreditCard#name is already passed to gateways that support it, so as far as I know that already works without this PR.\nBeyond that, I'm not keen to start adding flags (beyond the one we're already stuck with) that affect validation, so I'm not inclined to merge this. If you want to validate differently, I'd suggest just wrapping your own validations around CreditCard and/or using your own CreditCard model.\n. @gingermusketeer my recommendation would be to just wrap or sublcass CreditCard and manipulate the returned errors. I do plan to eventually take a more \"functional\" approach to validation, but am not really ready to tackle that at this point.\n. @nagash there's actually precedence for this; rather than overloading #refund, use #credit method for general/unreferenced credits.\n. Wow NAB is dog slow - those remote tests take forever! Getting this merged in now.\n. @davidcornu a re-org of the lib directory is definitely forthcoming, probably when we release 3.0.\n. Bizarro. So some folks depend on the @ not being encoded? Or is it vice versa?\n. Agreed, applied selectively just for the broken gateways.\n\nNathaniel\nOn Tue, Jul 29, 2014 at 8:09 PM, Boris Slobodin notifications@github.com\nwrote:\n\nYes, they expect it to remain as-is and aren't decoding it properly. Quite\nweird. I think we need a non-deprecated replacement that does an equivalent\nthing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1329#issuecomment-50557204\n.\n. @DainisL can you add a unit test to catch regressions here?\n. @baash05 receipt number is not AM standard, so should not be in bogus. I'm cool returning an authorization from all of these if you want to take receipt number out of the PR, though.\n. Closing this; feel free to re-open if you want to add in the authorizations.\n. @louiskearns @odorcicd I'm not up on what you guys have been doing with track data - does this look in line with what you'd expect/want?\n. @hron can you incorporate @odorcicd's suggestions on improving the test?\n. Can you please add remote and unit tests covering the fixes and/or new functionality?\n. @selivandex this does not follow the standard AM public API - please line the API up with AM's standard purchase/authorize/capture/etc. API. Also note that AM does not support 3D-secure at this point, so that will need to be stripped out. Thanks!\n. @selivandex I don't see any methods here that take a credit card? ActiveMerchant is focused on supporting direct credit card API's, so: can Cloudpayments take a credit card directly?\n. @selivandex then it's not something we'd take into ActiveMerchant. Sorry we're not a good fit.\n. This looks great: :+1:. As @odorcicd says, anyone triggering off of that message should be using the code instead.\n\nSuggestions:\nruby\n'D'  =>  'CVV verification flagged as suspicious transaction',\n'U'  =>  'Issuer unable to process CVV verification request',\n'X'  =>  'Card does not support CVV verification'\n. Hmmm, maybe even better so that all messages are prefixed with CVV:\nruby\n'D'  =>  'CVV check flagged as transaction as suspicious',\n'U'  =>  'CVV request unable to be processed by issuer',\n'X'  =>  'CVV check not supported for card'\n. Superceded by #1342.\n. @ravish-ramrakha-cko can you add credentials to fixtures.yml that can be used to run the remote tests?\n. @ravish-ramrakha-cko see my comments.\n. Looking good; added a few more things to address, but I've reviewed closely and will be able to get it merged once these items are addressed (and assuming the remote tests pass for me).\n. Merged.\n. @zubin as far as I can tell, that adapter only returns success if and when the response_code is in the set [ '00', '08', '11', '16', '77' ], and your params show a response code of 101, so I'm not sure what might be up. Additionally, this adapter is used pretty extensively just by Spreedly and Shopify alone (http://gatewayindex.spreedly.com/gateways/secure_pay_au), and we don't have any more reports of issues.\nI suspect this is probably an issue with your code and not AM, but am happy to be proved wrong via a failing unit test submitted as a PR. Thanks!\n. @jhjwind looks like this broke the tests - can you fix them?\n. @jhjwind any feedback on the failing tests?\n. Superceded by #1370.\n. Nope, we don't have anyone using this in production yet. :+1: \n. @AntoineInsa when I try to run the remote tests for this I get a lot of errors - do you see the same?\n. Closed by 720537170bc76d2f80899162a3e155b990adcb63.\n. @louiskearns any progress on this?\n. Oops, referenced the wrong PR!\n. @karlhungus can I close this out now?\n. No worries, just tidying up.\n. This is due to integrations being extracted to the offsite_payments gem, but we have a compatibility layer that should let it still work. Can you give me a full stack trace so I can try to figure out why the compatibility layer's not working?\n. @ZhangHanDong looks like you have a custom integration there; I would not expect it to work after an upgrade unless you adapt it to https://github.com/Shopify/offsite_payments. We built backwards compatibility for all built-in integrations in ActiveMerchant, but were not able to cover the case of external sub-classes.\nI'd recommend either locking ActiveMerchant to the last version, or tweaking your integration to use https://github.com/Shopify/offsite_payments.\nSorry for the trouble!\n. @brianphillips I don't think it's a good idea to add a gateway-specific option here. ActiveMerchant's focus is on gateway abstractions, and something this gateway specific will probably only ever be used by yourself while still adding complexity and maintenance overhead. I'd suggest implementing this outside of or on top of ActiveMerchant if you need it.\n. We'll probably be deprecating a lot of those Orbital specific options in the future, and removing them when we hit ActiveMerchant 3.0 (or 4.0).\nIt's important to understand the overarching goal of ActiveMerchant: to provide a common API across all of the gateways that software that needs to interact with multiple gateways can use to abstract itself away from gateway-specific details. Based on that, gateway specific options will either get abstracted to cover multiple gateways, or they will get eliminated. Those who need tighter integration with gateway-specific functionality should just go direct with the gateway API.\nIt's also important to understand that the goal of ActiveMerchant is not to provide a nice Ruby API for individual gateway use. That's a nice by-product when you don't mind the limitations of the abstraction, but keeping the abstraction maintainable is our priority.\n. Ummm... Is there some way we could split Shopify's release management off of AM master? It's kind of a pain to have commits reverted due to Shopify internals. @jduff any ideas on how we can make this not happen in the future? I know at @spreedly we lock AM to a git ref, which allows us to run off a branch when we need to make emergency fixes.\n. :+1:\n. @girasquid sounds good - let me know if I can help.\n. @girasquid any way to have the unit tests actually validate the requests against the XML schema so no other ordering issues can creep in?\n. Good point RE it not catching this case. I guess if Auth.Net is validating the schema, we can just rely on remote tests.\n. @girasquid how are we doing on this - ready for merge?\n. :cool: :+1:\n. @CASHU this is the wrong channel for Shopify support - please contact them directly.\n. @denis I'll be pushing more code out, which will re-build. Not worth sweating it in the meantime.\n. See the inline comments; I'm not inclined to merge this if a special :payment_method option is required to use it, as it breaks AM's abstraction.\n. @andrewjwu OK, I get it now. I'm amenable to supporting this, but I'm not psyched about having yet another option. Is there any way to tell the difference between a Legato Token and a Payment Profile just by looking at them? Ideally I'd like to just have either one passed as the source, and AM be able to tell by looking at the token itself which it is. The other option along those lines would be to just require Legato tokens be prefix with legato- or somesuch.\n. @andrewjwu lets do the prefix for now; I'm planning to introduce a proper Token object soon, which can encapsulate that logic, and will come back and clean it up when I do.\n. @andrewjwu the gt6- prefix sounds great, though I wonder if that could break due to Beanstream adding more servers?\n. :cool: :+1:\n. @andrewjwu I'm finally getting back to this - sorry for the delay! I'm getting this error running the remote tests:\n3) Failure:\nRemoteBeanstreamTest#test_successful_single_use_token_purchase [test/remote/gateways/remote_beanstream_test.rb:100]:\nResponse expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fc779340f38\n @authorization=\"0;15.00;P\",\n @avs_result=\n  {\"code\"=>\"R\",\n   \"message\"=>\"System unavailable.\",\n   \"street_match\"=>nil,\n   \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @error_code=nil,\n @fraud_review=nil,\n @message=\n  \"Invalid customer code. Card owner name is missing. Invalid Card Number. Invalid expiration month. Invalid expiration year.\",\n @params=\n  {\"trnApproved\"=>\"0\",\n   \"trnId\"=>\"0\",\n   \"messageId\"=>\"0\",\n   \"messageText\"=>\n    \"Invalid customer code. Card owner name is missing. Invalid Card Number. Invalid expiration month. Invalid expiration year.\",\n   \"trnOrderNumber\"=>nil,\n   \"authCode\"=>nil,\n   \"errorType\"=>\"U\",\n   \"errorFields\"=>\n    \"customerCode,trnCardOwner,trnCardNumber,trnExpMonth,trnExpYear\",\n   \"responseType\"=>\"T\",\n   \"trnAmount\"=>\"15.00\",\n   \"trnDate\"=>\"12/18/2014 10:30:50 AM\",\n   \"avsProcessed\"=>\"0\",\n   \"avsId\"=>\"0\",\n   \"avsResult\"=>\"0\",\n   \"avsAddrMatch\"=>\"0\",\n   \"avsPostalMatch\"=>\"0\",\n   \"avsMessage\"=>\"Address Verification not performed for this transaction.\",\n   \"cardType\"=>nil,\n   \"trnType\"=>\"P\",\n   \"paymentMethod\"=>\"CC\",\n   \"ref1\"=>\"reference one\",\n   \"ref2\"=>nil,\n   \"ref3\"=>nil,\n   \"ref4\"=>nil,\n   \"ref5\"=>nil},\n @success=false,\n @test=true>>\nThere are a few other failures too, but they seem to be either the same issue, or unrelated to your work here.\nAny ideas?\n. @caanvaga whitespace/indentation seem to be really wonky in your patch - can you clean up?\nWhat's the low-down on what's changing - is it mostly just adding authorize and refund support?\n. @caanvaga any feedback on my questions above?\n. @caanvaga I'm having trouble reviewing this since the whitespace is so different; please use Ruby-standard of 2 spaces (no tabs) per indentation level.\n. @caanvaga a few things:\n- there are a lot of fields marked as \"required\" here, that aren't always passed in AM or aren't even AM standard options. Please make sure they all have sane defaults if they're truly required by this new API.\n- You added new remote tests for the new public methods added (great!), but please also add unit tests for them.\n- There are a bunch of weird file mode changes in this PR. Please clean those up so that only the files you're changing are in the patch.\nThanks!\n. @caanvaga sorry for the long delay! This is looking good, but what is the purpose of authorize here? It seems to be the same as purchase, whereas in ActiveMerchant an authorize should not immediately capture funds but instead be paired with the capture API to support separate auth and capture. Does Banwire support delayed capture?\n. @SecureSubmit can you give me more details what all CreditAccountVerify checks? If it's a valid card number but (for instance) the account has been closed, will it fail?\nIdeally verify is intended to give similar certainty to doing a $0 auth or a or $1 auth/void.\n. Excellent - will work on getting this merged next week.\n. @varyonic this looks really well done. Can you share test credentials with me (email is on my profile) so I can run the remote tests and merge?\n. @varyonic I got 'em, just haven't had a chance to get back to it yet. Hope to make progress next week.\n. Remote tests pass fine.\nCode generally looks fine to me. :ship:\n. @craigchristenson ActiveMerchant is designed to be an abstraction for direct gateway integrations, so a gateway that only supports a separately generated token is not a good fit for the project. There will need to be a way to pass credit card info directly to the API in order for this to be merged. Also supporting passing a token is of course OK, but it can't be the only means of using a card.\nWill 2checkout be able to provide a direct API?\n. @craigchristenson awesome - great to hear that's in the works. I know we've had customers refererence 2checkout at @spreedly, and I'd love to be able to add you guys as an option for our customers.\n. @leolara Nokogiri is preferred going forward - thanks for asking!\n. Thanks for letting us know; fixed by deleting it since it's outdated and I don't think it's available any more.\n. @varyonic just haven't had a chance to review yet - new gateways are a good bit of work. The Travis failure isn't an issue.\n. @varyonic can you get me remote credentials so I can run those tests?\n. @varyonic I got your email, and will drop you a line once I'm both at my house and have some time to work on it, to get the IP address whitelisted. Thanks!\n. @varyonic and finally I'm getting a chance to work on this. Just emailed you back privately. Any chance Transact Pro has changed their stance on public test credentials? That would make it a lot easier to get changes merged!\n. @kaspernj this is outside the scope of ActiveMerchant; the project is focused just on the common API that we can support against most/all gateways. Looks like cool ePay functionality, though - maybe release it as a separate add-on gem?\n. @RooTooZ it should work to just remove that require, since the relevant file is already handled via require 'active_merchant'.\nThat said, the helper has moved to https://github.com/Shopify/offsite_payments, and expecting it to be loaded via ActiveMerchant is deprecated, so your best bet is to just switch to using OffsitePayments.\n. @Shopify/active-merchant thoughts on this in general? Spreedly+Shopify are running a lot of successful Mercury transactions (http://gatewayindex.spreedly.com/gateways/mercury), so I'm really concerned/dubious about making these changes.\n. Thanks @shulmang!\n. I wonder if it would help, too, to split this into multiple distinct PR's. While each of these isn't much code, they're also all meaty in potential impact so would be nice to be considering them separately.\n. @timtait I added a few questions/tweaks inline, but mostly I just need remote credentials in order to get this merged.\n. Whichever maintainer gets a chance to work on this next (which might be me): I have (uncommittable) test credentials from @timtait for running remote tests.\n. @shulmang we'll need a unit and a remote test in order to merge this.\n. @jnormore I made this change intentionally, and it should still be backwards compatible (though I may have flubbed it). We've been using the new approach on Spreedly for a while now without issues FWIW.\nThe reason for the change is that I prefer all components necessary for future reference to a transaction are included in the authorization. In the former adapter, doing refunds required a special option be set, which breaks the abstraction across the primary public AM API.\nCan you show a case where this change breaks backwards compatibility? If the authorization is in the old form, you can still pass the card number in, and that's what Spreedly's doing until we've \"flushed\" all the old authorizations out of our system (probably 3-6 months).\n. @louiskearns well, if you're parsing the ActiveMerchant authorization field to get at the transaction identifier, you're going to have a bad time :wink:. The library, except in a few older legacy cases like Authorize.Net, treats the authorization as an opaque field that represents everything needed to interact with that transaction in the future; if not for that, everyone would need to know lots of gateway specifics to do simple things like run a refund or a void.\nAt Spreedly, per https://docs.spreedly.com/reference/api/v1/transactions/show/#response-attributes, we separately extract and track the gateway's transaction id in a separate field, and never expose the AM authorization to API consumers, since it's an internal opaque field. We pull that out of the Response#params field, but I could certainly see having a field on the Response just for it and have ActiveMerchant know how to extract it.\n@jnormore makes a good point RE being able to roll this back; maybe we could make this a minor version release (1.45.0), and also tag a patch release that handles the roll back (1.44.2)? I'd be happy to prep the latter in a branch.\n. @jduff I would so love to (and plan to have someone some day) go through and audit the tests for all the gateways, especially beefing up the unit test checking of requests. This looks like a great start.\n. Got 100% passing remote tests here - going to merge.\n. @jxpx777 this is outside of ActiveMerchant's abstractions, but totally makes sense to do directly via the Stripe API since it's Stripe-specific. I'd recommend just using the Stripe gem and/or their REST API to get what you need.\n. @pierre have you reviewed the discussion and result from https://github.com/Shopify/active_merchant/pull/1449 to see how best to take what we came up with there and apply it to Cybersource?\n. @pierre totally your call; closing for now.\n. @cwoodcox since the AVS changes have been covered by 7b8463b40d15002923d6a22aaceac9e317863fa1, can you submit a new PR with just the Client-Side Encryption changes? Thanks!\n. I'm honestly not real keen about adding a dependency for this, and I've seen no actual performance issues from the implementation we have. I'd be open to any inline improvements to the built-in implementation, but am :-1: on adding a dependency.\n. @j-mutter you going to inline it, or you want me to?\n. Closing this as we'll track discussion on the PR.\n. @duff should be pretty easy to make this backwards compatible with a deprecation warning, no? That would be my preference.\n. @duff yup, I'm plotting ActiveMerchant 3.0 already. Still very formative.\n. The only one of these gateways that @spreedly supports is PsiGate. So long as you guys verify that it still works, I'm :+1:.\n. :cool::shipit:\n. :+1:\n. :+1: :heart:\n. :cool:\n. Looks good overall. :+1:\n. @bizla sorry, didn't mean to kill your mojo :cry: \n. @bizla and I'm usually in agreement RE not abstracting too early; I guess in this case I don't consider it a too early abstraction since we know what the underlying protocol is, and AM's whole reason for existing is to build abstractions on top of things exactly like this.\n. @jpcaissy I :heart: the concept here, but am not sure if having two levels of mapping is the right approach. Would prefer to see this fleshed out to include at least one more gateway - preferably a more \"old school\" one like Auth.Net or such - to see how it feels once it's abstracted/implemented across a couple gateways.\n. This is only somewhat related, but I think AM should also expose the gateway-specific \"error code\" directly in the response vs. having to pull it out of the Response#params. We do this in Spreedly's abstraction on top of AM, but it would be great to see that pushed down into the Response as a first class value.\n. Just want to make sure my strong preference to see this implemented (in this PR pre-merge) against 1-2 more gateways doesn't get lost. I have a hunch that will give us a better abstraction, or help me see a better abstraction here.\n. @mcgain I don't think this needs to roll out initially to all AM adapters by any means, but I don't think we should roll it into AM at all until we're sure we've got a solid abstraction going, and I think 2-3 concrete implementations will make that clear.\n. @mcgain it's really somewhat tangental, but our experience at Spreedly is that 99% of gateways return some kind of error code - often, but not always, a number - that's super useful when going back to them to find out why a transaction failed. We've built software on our side that pull that code out of the Response#params and exposes it for our merchants, but it might be handy to have that become first class at the AM level.\nThe reason I bring it up is that it could simplify this task a bit, since then each gateway just has to provide a mapping from its own error codes to AM standard error codes, and it could also be exposed to merchants to allow them to better troubleshoot odd/non-standard failures that AM doesn't map.\n. Sorry, I'm not referring to the standard error codes you're introducing here. I mean having something like Response#gateway_error_code that is the extraction from the raw params of the gateway's specific error code. And it's probably a separate PR.\n. See the Mercury gateway for my recommendation for simplifying.\nThe other big things that needs to be done is adding a skeleton for this to the gateway generator template; in my experience, without that, this will not get added for any new gateway contributions.\n. This is looking sweet; can't wait to start leveraging it in Spreedly.\n. @mcgain works for me. That said, going forward I think it's OK to map only a subset if we don't know or a gateway doesn't support some of the gateway's error codes.\n. @andrewpaliga yup, didn't mean to imply otherwise. :shipit:\n. This is looking pretty awesome.\n. :+1:\n. :+1:\n. @fw42 PayPal made a policy change; these don't get run often, and apparently this one hasn't been run and/or passed since 2011.\n. So a few reasons that I know of:\n- as @duff says, many of the gateways are not willing to give public credentials that can be used to run remote tests, making an open source CI system problematic\n- some gateways require IP whitelisting, making cloud CI problematic\n- they're stinkin' slow; I've no idea how long it would take to run the whole suite\n- many of the gateway sandboxes are unreliable, which is going to mean a bunch of false failures\n- it's never been done, so this is probably only half the actual issues\nAll of those things are surmountable, though, and I think it would be HUGELY valuable to get CI running on remote tests, so in reality the issue is:\n- no one has spent the time/money to make it happen\nI'm guessing it's 1-2 weeks of full-time work for a first pass, honestly; just tracking down working credentials for all the gateways could take longer than that, actually.\n. @jnormore well, my experience as the highest-volume maintainer on the project has been that it's not worth my time trying to educate the world about how to do git, nor is it worth my time to ask people to fix typos. Both are much easier to do myself when merging.\n. Also, with regards to conflicts, they're pretty rare on ActiveMerchant. If I have a really bad case I will circle back to the contributor and ask them to give me a clean(er) commit history so I can more easily merge. I've probably done that two or three times in the last few years, though.\n. @eapache you could definitely only do just one or the other; personally I've found they both taste great together. Chocolate and peanut butter, mmmm.\n. @grk is that using the credentials shipped in fixtures.yml?\n. @grk then my first guess would be that the credentials in fixtures.yml have expired - I'd recommend getting fresh credentials and trying it.\n. k - I got nothing then. Since the remote tests typically only get run when active work is being done on a gateway, they can easily get broken without us knowing. We typically won't fix them until we need to work on the gateway, but of course I'd review a PR with fixes. Are you going to tackle getting them to work?\n. I hate this; have @Shopify/active-merchant talked to Stripe to see if they'll support passing ApplePay through directly in the purchase call? It's such a simple tweak that will make this so much cleaner, faster, more usable, etc.\nI'm also happy to work our Stripe contacts on the Spreedly side if it will help.\n. @bizla I'm OK with merging. Yucky, but OK. I hope @gdb and co are listening, though...\n. In terms of implementation, though, I'm a bit concerned about hiding the tokenization down in the guts of adding a payment method to the request. I'd rather see it explicitly part of a top-level MultiResponse, since if it goes sideways the whole thing just gets unwieldy. I like to be as explicit as possible about when and where remote requests are being made in ActiveMerchant.\n. @raycmorgan sorry, I wasn't clear enough. My issue isn't with bundling this behind the public purchase method per say, but rather burying it in the private create_post_for_auth_or_purchase method. This issue I have is that I don't like burying remote API calls down in methods that at first glance wouldn't involve a remote call, and I think it's key to leverage the existing MultiResponse support to get proper visibility into failures of those calls.\nIn particular, we have an ApplePayTokenExchangeError being raised, which is non-standard and surprising, instead of just a failed Response with details on why the purchase failed. And I think we would best use a proper store call since that's really what this is. So something like this:\nruby\ndef purchase(money, payment, options = {})\n  MultiResponse.run do |r|\n    r.process { store(payment, options) } if payment.is_a?(ApplePayPaymentToken)\n    r.process do\n      post = create_post_for_auth_or_purchase(money, (r.authorization || payment), options)\n      commit(:post, 'charges', post, options)\n    end\nend\nThat's hacked together, and assumes store can handle ApplePay, but I hope it communicates the idea.\n. @bizla one big question RE using store, but this is shaping up really nicely.\n. @bizla I didn't realize Stripe's ApplePay tokens expired after 24 hours; that makes their flow even more bizarre. If that's the case - can you point me at documentation that states that? - then I agree with you this doesn't make sense as part of store.\n. @bizla so Stripe doesn't allow recurring charges against ApplePay tokens? I thought that was something they touted?\n. So I'm trying to wrap my head around this... really there are two tokens? So first you have to transform the ApplePay cryptogram into an intermediate token of some kind, and then you have to vault that intermediate token to get back a permanent token?\n. OK, got it. Bizarre API on Stripe's part. But whatever.\nSo I think this is fine, since we can't streamline by cutting out the extra layer of indirection.\n:rocket:\n. Yah, being on the cutting edge :feelsgood:.\n. @pamio any follow up on the source of the 30 numbers? Or other sources we can use to correct the brand identification code?\n. @pamio I guess I'd be really dubious about changing the regex based on a test card; I've seen some bizarre things used as test numbers :confounded: \nUnless we can get confirmation via something halfway official, I think we'll leave the regex as-is in ActiveMerchant.\n. @pamio what you say is totally logical in terms of test cards needing to reflect reality... but my experience at Spreedly with 70+ gateways and their test environments says that logic doesn't really enter into it unfortunately. Oh the stories I can tell, but to get the good ones we have to meet in person (can't put this stuff in writing!) and you have to buy me a :beer: or two :grin:\n. Closing this for now; feel free to re-open if new evidence comes to light.\n. @grepruby I'll want to review API docs before merging - can you point me at those?\nI've taken a peek at this and left a few comments, but it looks like it'll need a fair bit more attention before it's ready to merge. Just FYI, I'm traveling next week (RubyConf!) and so it may be a bit before I'm able to dig into it.\n. Also, if Payhub supports the other main API methods, in particular authorize and capture, I'd like to see those included before merging. They tend to leverage what's already there for purchase, and it makes the adapter more useful from the get go.\n. @grepruby I'm at RubyConf, and probably won't get to merging anything until next week or (more realistically) after Thanksgiving.\n. @grepruby sorry for the delay. Getting closer, but I noted some API issues inline that'll need to be addressed.\n. @grepruby the signature for refund is still incorrect.\n. @grepruby yes, other gateways also don't accept an amount, but the method should still accept it and just ignore it.\n. @j-mutter I'll give it a once over in a bit and take care of merging - thanks for the review!\n. Going to get this merged.\n. @lonsun no, I was able to run them myself no problem. Thanks!\n. @boone I'm surprised this got merged in the first place, since AM doesn't know anything about address fields prefixed with :dest_. Are those really just shipping addresses?\n. By \"surprised this got merged\" I mean the gateway itself with the weird :dest_ addresses included. Not your PR specifically.\n. D'oh - somehow those slipped by me! They should be :shipping_address; I'll open a new PR to deprecate and fix them.\n. @ao this is definitely a ways from being mergeable. Please review and address my inline comments, and then I can re-review.\n. Over 2 months since any movement; going to close out. @ao please reopen for review once you've got it ready to go.\n. @woto yup, just switch to using the offsite_payments gem (https://github.com/Shopify/offsite_payments, http://rubygems.org/gems/offsite_payments) directly.\n. @woto so long as you use/require the integrations via the offsite_payments gem, the deprecations won't be triggered. They only get triggered when the old paths/files are referenced.\n. Awesome! :heart:\n. @InfraRuby this is looking pretty decent; please see my inline comments. I'll re-review once you've had a chance to address them.\n. Superceded by #1497.\n. @andrewpaliga what are you referring to merging? This is already merged.\n. @andrewpaliga gotcha - no worries. Point of order this brings up: it would be best if I got CC'd on any pre-merge gateway code reviews. I have... strong opinions after doing a lot of them :grin:\n. @andrewpaliga the convention for awhile now has been to match the credentials up with their names at the gateway; this makes it much easier for implementors to figure out what they need to plug in. My understanding is that in the case of Gateways, Shopify is able to handle this; see for instance Braintree Blue, Pin, and Worldpay US.\n. @dppcode I can't merge this as-is; we don't accept new public methods on the adapters, since they break the ActiveMerchant abstraction.\nIs there any downside to just changing the existing void to do an immediate release? I'd be really surprised if anyone is depending on voids getting released with the batch vs. immediately.\n. @j-mutter I'm actually really for changing the default here; immediate release is so much better for everyone, and the possibility of breakage seems really small. The problem with an option is that it'll never get used since it's non-standard; I'm fine having an option that enables the current/old behavior just in case we do break someone, but only because I don't think anyone will really ever want the current behavior. A simple warning in the CHANGELOG I think will cover anyone getting bitten by the change.\nThoughts?\n. :+1: for not using instance variables.\n. Overall this looks solid. I'm :+1: to merge.\n. @andrewpaliga so it's been removed globally? Just want to make sure it's not a \"feature\" that needs to be disabled on an account by account basis?\n. This is great news; we actually have a weird hack around this in @spreedly today. :ship:\n. This looks good to me.\n. @uurcankaya ActiveMerchant doesn't support offsite gateways. All the offsite gateways that Shopify supports are in https://github.com/Shopify/offsite_payments, so you'll want to submit this there.\n. @lathiat going to close this out since it's 30+ days old; feel free to reopen when you get a chance to address the above. Thanks!\n. I guess I don't understand why this is needed @jeffutter - if MoneyMovers removes SSLv3, AM should just start using a better protocol. It seems like this is more of an issue of MM downgrading the requests? I don't think AM is doing anything to force an SSLv3 connection.\n. @jeffutter going to assume it does work, since we'd need a different approach than this PR if it doesn't. Feel free to open up an Issue or a new PR if you find something amiss.\n. @pierre does this allow passing a credit card directly to purchase and authorize? Or do you have store first, then charge?\n. @pierre added some inline comments; happy to re-review once you've had a chance to address them.\n. Closing this out since it's over 2 months old with no changes; feel free to re-open if you get a chance to work on it further.\n. @ivanfer think you'll get a chance to address the inline comments?\n. @bizla lots of comments inline.\n. :+1:\nDon't forget to update README, CONTRIBUTORS, and CHANGELOG when you merge.\n. @girasquid I feel like the \"support multiple scrubbers\" is overkill; if I want more scrubbing, I can do that myself after AM does it's scrubbing, and am not keen to have AM managing/invoking app-specific code.\nWas there a specific use case you were thinking of with adding that?\n. I guess I'm not clear on what the value would even be in doing this via AM's API. That said, you could always maintain a separate gem that tacks your gateway onto AM. I doubt we'd merge a cryptocurrency integration into AM proper at this point, though.\n. I'd be :+1: on a gateway Null Object for testing; it seems like it'll need to return null objects for things like Result as well, right?\n. I guess I just don't see this as adding any value over a respond_to?(:unstore). At Spreedly, we have an internal domain object that wraps ActiveMerchant gateways, and it uses respond_to? to check not just unstore, but all the rest of the public API methods since purchase is really the only one that's guaranteed to be implemented. If this is bugging you I'd encourage you to similarly wrap AM, but I don't think we'll add the complexity to AM in order to save a respond_to? check on the calling side.\nI'll caveat this by saying I'd like gateways to provide more explicit metadata about what capabilities they support, but even with that you'd still have to check before calling.\n. If try is available, it can work... I usually find it to be a code smell, but that's a discussion for another time/place and/or over :beers:. Just note: my eventual goal is to remove the active_support dependency from AM, so don't get too cozy with it if you're not pulling it in otherwise.\n. @kikito this is looking pretty nice - can you address my comments?\n. Closing this since it's been two months with no movement. Feel free to re-open if you get a chance to work on it further. Thanks!\n. :-1: This is the reverse of the end goal, which is to totally break the active_utils dependency. See https://github.com/Shopify/active_utils/pull/36 for current state of that process.\n. I guess I'm confused as to why Shopify's seeing warnings from this; Spreedly's using active_merchant master, and active_utils master, and seeing no deprecation warnings. I'd rather understand and actually fix vs. re-introducing the dep. Especially since this is pulling requires_parameters back in as well.\n. @wvanbergen try adding , require: false to the gem \"active_utils\" line in your Gemfile for the project (and add an explicit gem \"active_utils\" line if you don't have one). I think the issue is the blanket active_utils require that bundler does.\n. @wvanbergen oh, those projects do the blanket requirement regardless, gotcha. We don't use them, thus why we're not seeing this.\nI'm totally cool with any/all changes to active_utils, since my end goal is to remove it from AM altogether :grin:. So big :+1: to just changing active_utils to skip defining the const if it's already defined.\n. @wvanbergen can we close this?\n. @jasonfb the Authorize.Net adapter was completely written/replaced and uses a different API now; the comments were not moved over. I'd be willing to consider a PR adding comments, but would want them all to carry their weight, and not just be slavish documentation of things already obvious in the context of ActiveMerchant (which IMO many were on the old adapter).\n. @jasonfb would having better names for the keys in the initialize options hash have had the same helpful effect? The convention now is to have the initialize options match what the gateway calls the credentials, which has generally obviated the need for a comment in the gateways using that convention.\n. :+1:\nSomething to consider for another day that could also help: move ActiveMerchant into its own org.\n. Great feedback @girasquid; I also went ahead and checked in working credentials, and added documentation on setting up the necessary fraud filter in Payflow.\n. @ivanfer thanks - added in transcript scrubbing as well and going to merge.\n. @kevin-jj can you provide a minimally reproducible test case that shows it's not working? Without more detail on what you're doing, I can't help you fix it.\n. @kevin-jj while ActiveMerchant uses a different alias for it (n2), it does map the urn:ebay:apis:eBLBaseComponents namespace and will output the n2:InsuranceTotal field if an :insurance_total is provided. Can you please show me the code you are using to call ActiveMerchant? Without it I can't help you debug.\n. @kevin-jj this is not a feature that any of the maintainers use, but if you can create a Pull Request that fixes it with a test that shows the problem and fix, we'd be happy to consider merging it.\nGoing to close this for now; please open a PR if you find a fix.\n. @jefflaporte since this doesn't add any new functionality, I'm not inclined to merge it. I don't think the HMAC actually improves security, so until new e4 functionality requires it, it's just noise.\n. @boxofrad rather than making this a class variable, can you please make it an optional \"credential\" passed to initialize? We try to avoid mutable variables that have a global effect.\n. Great PR - thanks!\n. @cshepherd can you please provide remote and unit tests for this functionality? Without them we won't merge.\n. @wvanbergen remote tests pass OK? If so, :+1: from me.\n. @jcbantuelle can you add a unit test that captures this improvement? That will help us see what has changed, and ensure it doesn't get broken in the future. Thanks!\n. This PR confuses me; does AM ever use :mastercard as the card type? That seems like a bug, if so.\n. @jcbantuelle OK, got it. My fear is that we're overloading supported_cardtypes with a value that will confuse any code using it as metadata. Can we do this without leaking the :mastercard key outside this adapter?\n. :shipit:\n. @cwoodcox I've been unable to get test credentials from Be2Bill to be able to run the remote tests - can you help with that? Would be the most awesome if we could get some to drop in the public fixtures file, but otherwise you can email me directly.\n. @jgrannas so two things:\n- none of the ActiveMerchant maintainers use CIM, so your best bet to get an answer is to just dig into the code.\n- the current CIM adapter in ActiveMerchant is due for deprecation, since it breaks most ActiveMerchant conventions. I'd suggest skipping ActiveMerchant and just using the CIM API directly or via a CIM-specific API.\n. @rud the tests look great, but with your current code, if @options[:ignore_avs] is true, and I set options[:ignore_avs] to false, then it will still end up as true, right? I think you need to tweak the logic, and add a test to cover the case.\n. @wvanbergen :+1:.\n. This looks good, but I wonder if it would be better to check the status code on the response error instead of doing a blind JSON parse? The former seems like a more discriminating check, and slightly more obvious in intent.\n. @bizla fair enough! :+1:\n. @bizla I'm getting massive, massive warnings out of the Quickbooks unit tests on 2.1.5. They only seem to show up when I run the full suite via rake. Are you seeing the same?\n[1783/2269] QuickBooksTest#test_failed_authorize/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/net_http.rb:2: warning: loading in progress, circular require considered harmful - /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/helper.rb\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:371:in  `block in autorun'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:33:in  `run_once'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:372:in  `block (2 levels) in autorun'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:780:in  `run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:27:in  `run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1066:in  `run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1078:in  `_run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1078:in  `each'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1079:in  `block in _run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1092:in  `run_tests'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:884:in  `_run_anything'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:661:in  `_run_suites'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:661:in  `each'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit.rb:663:in  `block in _run_suites'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:933:in  `_run_suite'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:933:in  `map'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:940:in  `block in _run_suite'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/test/unit/testcase.rb:17:in  `run'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/2.1.0/minitest/unit.rb:1263:in  `run'\n    from /Users/ntalbott/src/active_merchant/test/unit/gateways/quickbooks_test.rb:7:in  `setup'\n    from /Users/ntalbott/src/active_merchant/lib/active_merchant/billing/gateways/quickbooks.rb:2:in  `<top (required)>'\n    from /Users/ntalbott/src/active_merchant/lib/active_merchant/billing/gateways/quickbooks.rb:2:in  `require'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth.rb:10:in  `<top (required)>'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth.rb:10:in  `require'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/helper.rb:2:in  `<top (required)>'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/helper.rb:2:in  `require'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/consumer.rb:4:in  `<top (required)>'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/consumer.rb:4:in  `require'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/net_http.rb:2:in  `<top (required)>'\n    from /Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/client/net_http.rb:2:in  `require'\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/net_http.rb:69: warning: assigned but unused variable - auth_params\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/consumer.rb:13: warning: File.exists? is a deprecated name, use File.exist? instead\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/consumer.rb:13: warning: File.exists? is a deprecated name, use File.exist? instead\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"txXPrBNW5i5gztHXc75lAHiqpGiAYunTrQ24LA7BcdU\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1784/2269] QuickBooksTest#test_failed_capture/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"IbscKBLDzdn0rMRsRVJ8crnHxkZS1cQ6XMxIKotWM4\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1785/2269] QuickBooksTest#test_failed_purchase/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"WD1r307rl8fjkb8ByTT9P0DVz40ti2T3YcNe1u58zTo\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1786/2269] QuickBooksTest#test_failed_refund/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"3SuvTsrldVmjdv98LNLEBuGndELvgtVNg3CrfHZAY\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1787/2269] QuickBooksTest#test_failed_verify/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"WX0DvwcwTi0mhbwLaZz5Z69R4nmi4blhqYCpUDDKgE0\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1789/2269] QuickBooksTest#test_successful_authorize/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"ulY1FvNbfNV5Iz7ciBhGkSFJdcGr2czNntEqP0DbOk0\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1790/2269] QuickBooksTest#test_successful_capture/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"L8bhERRoUsHHYKd9vOnI5gk26uw41UQJuA4SUJUasOA\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1791/2269] QuickBooksTest#test_successful_purchase/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"RiPl1l66IusnnIb2BMsdshIEFLDaq57wkCmWdAEmN0\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1792/2269] QuickBooksTest#test_successful_refund/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"haW3Sm5mcKrvVi0JyIJ2Oz8WkFoi3QBp6OeVooX3XBU\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n[1793/2269] QuickBooksTest#test_successful_verify/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: copying extra states: {\"oauth_consumer_key\"=>[\"consumer_key\"], \"oauth_token\"=>[\"access_token\"], \"oauth_signature_method\"=>[\"HMAC-SHA1\"], \"oauth_timestamp\"=>[\"1420663748\"], \"oauth_nonce\"=>[\"Gq4nRnlhJk7bc95sdgKArI0hDmg6EDpV7y8PsUpJIU\"], \"oauth_version\"=>[\"1.0\"]}\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning: following states will not be copied in the future version:\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/request_proxy/base.rb:79: warning:   default value: []\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\n/Users/ntalbott/.rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/oauth-0.4.7/lib/oauth/helper.rb:12:in `escape': warning: URI.escape is obsolete\nFinished tests in 12.608469s, 179.9584 tests/s, 876.3158 assertions/s.\n2269 tests, 11049 assertions, 0 failures, 0 errors, 0 skips\n. My first preference would be a fixed Oauth gem - maybe there's already a fix out there?\nIf that's too much work, then I'd actually be OK with suppressed warnings, since this just affects Quickbooks at this point.\n. @wvanbergen I haven't moved these bits over yet:\nrequire 'active_utils/common/network_connection_retries'\nsilence_warnings{require 'active_utils/common/connection'}\nrequire 'active_utils/common/post_data'\nrequire 'active_utils/common/posts_data'\n. @wvanbergen yes, I'd like to see offsite_payments removed as well.\nOne possibility is to actually hold off on removing both, and start working on a full major version bump that does it along with removing various deprecations and such.\n. @wvanbergen sounds good to me. If you're going to do that you should rip the shims out as well.\n. This is awesome. :heart: :+1: :heart: :+1: :heart:\n. I say go ahead and ditch offsite_payments. It'd be ideal to do so at a major version bump, but it's not as widely used, it's an easy switch for those that are using it, and we've been throwing deprecation warnings for months now.\n. There's an empty lib/post_data.rb file in this changeset?\n. @wvanbergen so I've given https://github.com/Shopify/active_utils/compare/v2.2.3...13b4a70 a review, and here are the bits that are missing:\n- https://github.com/Shopify/active_utils/commit/eb090db626487cf17d98b9bf0f292e4e5ab7808e\n- https://github.com/Shopify/active_utils/commit/f634423d1f562b29b71d91cab215108d8e83f936\nDefinitely want to make sure those get in before this is merged.\n. :+1:\n. @j-mutter @wvanbergen can ya'll make this happen now?\n. :cool: :+1:\n. @wvanbergen have you checked to make sure we didn't miss any other fixes in active_utils master?\n. This looks great. Will add things to it as they come up.\n. @MisinformedDNA I think you have the wrong repo.\n. @BaconSoap as far as I know no one has taken on creating any gems for automated recurring functionality. We definitely consider it to be out of scope for ActiveMerchant.\n. @fdezign we'd be willing to consider a PR to add it, but this PR seems to be pulling in massive amounts of non-related commits? Going to close; please feel free to re-open with a PR just adding Robokassa and we'll consider it for inclusion.\n. Guess who hates relative requires?\nThis guy :arrow_right: @ntalbott\n:heart:\n. Closing this since it's been a month with no movement. Feel free to re-open if you get a chance to work on it further. Thanks!\n. :egg:-cellent.\n. @stephenbaldwin both are class instance variables...\nThis code is going away soon in v2 regardless, so not going to worry about it at this point.\n. @stephenbaldwin this just isn't a fit for ActiveMerchant - it's totally out of scope. Probably best as a fully standalone gem, or a gem that monkey-patches AM to add it in for those that want it.\n. @jungbunzlav we'd definitely review and merge a PR that fixes this. Thanks!\n. :candy: \n. @anderson-mondido looks like a good start, but needs a lot of simplification. If you can address my comments - and feel free to push back, happy to discuss any/all - then I'll give it another review.\n. We're in the middle of PCI L1 audit here at Spreedly - <sarcasm>yay!</sarcasm> - so I'm moving slowly, but I should be able to work through AM backlog in a couple weeks and get this merged.\n. Nope. Super busy here.\n. @anderson-mondido I should be able to work on this soon, but need credentials. If we can't get public ones, please email me directly with them.\n. @anderson-mondido I got a chance to run the remote tests with the credentials you sent, and I'm seeing these failures:\ntest_successful_authorize_stored_card:        F\n  test_successful_authorize_stored_card_metadata:   F\n  test_successful_authorize_stored_card_webhook:    F\n  test_successful_authorize_stored_card_webhook_metadata:F\n  test_successful_purchase_stored_card:         F\n  test_successful_purchase_stored_card_metadata:    F\n  test_successful_purchase_stored_card_webhook:     F\n  test_successful_purchase_stored_card_webhook_metadata:F\n  test_successful_void:                 F\nFurther, the remote tests are actually too extensive - ActiveMerchant doesn't need or want to test every permutation of possible input. Please have a look at other gateway remote tests for an idea of how extensive the tests should be.\n. @jaredmoody as @alovak says, can you please add unit and remote tests? Thanks!\n. Cybersource seems to have disabled my test environment, but I've contacted them and once it gets re-enabled I should be able to merge this.\n. I'm fine with it.\n. @leckylao thanks for letting us know, but we prefer to not clutter up the Issue tracker with WIP. We'll be here when your PR is ready :grin:.\n. @leolara to set expectations: I'm slammed, and the maintainers will get to it when we can. Could be a few weeks at this point.\n. Duplicate of #1554, and fixed in master.\n. @anujaware it changed so that the Response#authorization contains all the parts necessary to do ongoing/reference transactions. #authorization is intended for use in reference transactions; if you need one field specifically, you should pull it out of the Response#params instead.\n. @yazinsai for sure, but the maintainers have day jobs, and adding new gateways is non-trivial. We do eventually get to everything, but sometimes it takes months before we get a chance to clear out the backlog.\n. Hey folks, looks like White has been superseded by Payfort? Can I close this out?\n. @alovak hopefully I can get to it faster this time!\n. Why is store not using the existing commit method? I'm not keen on adding another place that's doing request/response handling.\n. @jscheid yah, we don't like to go crazy with DRY, but I think it's appropriate here to parameterize things and share the code. I'd also recommend changing up the urls such that there's no need for the extra constants; just back up the class level urls a level, and have the additional path added as appropriate.\n. @jscheid sorry I'm getting back to this so late! Can you verify and add tests that verify that the Response#authorization returns a value that can be passed directly to purchase and authorize as a payment method? That's an implicit assumption I've just started trying to document more clearly here: https://github.com/activemerchant/active_merchant/wiki/Patterns-&-Standards#store. Thanks!\n. What gateway? What version of Ruby?\n. @wmakley it's the only supported way; you can of course try other approaches, but you'll be on your own.\n. @ShubhamGupta \"quickcharge\" is outside of scope for ActiveMerchant - can you remove?\nAlso, running the remote tests, everything seems to work except test_successful_authorize/test_failed_capture/test_successful_authorize - do those pass for you?\n. Sure:\n``\n~/src/active_merchant git:(master 3\u2191)$ ruby -Itest test/remote/gateways/remote_zeus_test.rb\nLoaded suite test/remote/gateways/remote_zeus_test\nStarted\n.F\n================================================================================\nFailure:\n  Response expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fb429d0d8f8\n   @authorization=\"TEST-021102-126376662\",\n   @avs_result=\n    {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=\"failer_order\",\n   @fraud_review=nil,\n   @message={:raw=>\"failer_order\", :status=>\"failer_order\"},\n   @params={\"raw\"=>\"failer_order\", \"status\"=>\"failer_order\"},\n   @success=false,\n   @test=true>>\ntest_failed_capture(RemoteZeusTest)\ntest/remote/gateways/remote_zeus_test.rb:72:intest_failed_capture'\n     69:     response = @gateway.capture(@amount, initial_auth.authorization, (Date.today - 1.day).to_s.gsub('-', ''))\n     70:\n     71:     assert_success initial_auth\n  => 72:     assert_success auth\n     73:     assert_failure response\n     74:     assert_equal false, response.authorization.nil?\n     75:   end\n================================================================================\n..F\n================================================================================\nFailure:\n  Response expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=\"failer_order\",\n   @fraud_review=nil,\n   @message={:raw=>\"failer_order\", :status=>\"failer_order\"},\n   @params={\"raw\"=>\"failer_order\", \"status\"=>\"failer_order\"},\n   @success=false,\n   @test=true>>\ntest_successful_authorize(RemoteZeusTest)\ntest/remote/gateways/remote_zeus_test.rb:42:in test_successful_authorize'\n     39:     response = @gateway.authorize(@amount, initial_auth.authorization, Date.today.to_s.gsub('-', ''))\n     40:\n     41:     assert_success initial_auth\n  => 42:     assert_success response\n     43:     assert_equal false, response.authorization.nil?\n     44:   end\n     45:\n================================================================================\nF\n================================================================================\nFailure:\n  Response expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fb429b37650\n   @authorization=\"TEST-021121-131236680\",\n   @avs_result=\n    {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=\"failer_order\",\n   @fraud_review=nil,\n   @message={:raw=>\"failer_order\", :status=>\"failer_order\"},\n   @params={\"raw\"=>\"failer_order\", \"status\"=>\"failer_order\"},\n   @success=false,\n   @test=true>>\ntest_successful_capture(RemoteZeusTest)\ntest/remote/gateways/remote_zeus_test.rb:61:intest_successful_capture'\n     58:     response = @gateway.capture(@amount, initial_auth.authorization, Date.today.to_s.gsub('-', ''))\n     59:\n     60:     assert_success initial_auth\n  => 61:     assert_success auth\n     62:     assert_success response\n     63:     assert_equal false, response.authorization.nil?\n     64:   end\n================================================================================\n..\nFinished in 42.64084 seconds.\n8 tests, 20 assertions, 3 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n62.5% passed\n\n0.19 tests/s, 0.47 assertions/s\n``\n. @sjf-control do you have a sandbox account at the gateway? If so, I'd try running the AM remote tests for it. If those fail, you can set theDEBUG_ACTIVE_MERCHANTenvironment variable to1` and re-run to see a full on-wire dump of the conversation.\n. @sjf-control your best bet to run the tests is to clone the repo vs. trying to do it out of the gem.\nAnd yes, that's the test I'd recommend trying, via ruby -Itest test/remote/gateways/remote_authorize_net_test.rb.\n. Also, FWIW, that Authorize.Net adapter runs a lot of live transactions at both Shopify and Spreedly (http://gatewayindex.spreedly.com/gateways/authorize_net), so I'm pretty confident this isn't an ActiveMerchant bug.\n. @sjf-control this sounds like a credentialing issue on the gateway side. I'm going to close it out as I think AM is not part of the problem.\n. @mvarian can you give justification for keeping test credentials private? It's a headache for us as maintainers, many gateways don't require it, and I haven't heard an explanation that I understand to date.\nIn terms of this PR, can you please squash it to a single commit? Thanks.\n. @mvarian overall, this looks really solid. I've added some comments inline; the most important is the one around test vs. live, but please address them all. Thanks!\n. Whitespace is all wonky in your patch - can you please fix?\n. @Paystation this seems like a huge regression. What's the purpose of this patch?\n. @Paystation sorry, should have been clearer - what is the purpose for the Pull Request as a whole? Now that the whitespace is fixed I'm reading it and it seems like a regression in functionality, and doesn't follow the ActiveMerchant project's coding standards or conventions.\n. @Paystation there's already an existing adapter in ActiveMerchant: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/paystation.rb\nThis Pull Request modifies that adapter in an... unhelpful way.\nSo far as I can tell this Pull Request is not needed, and you should just talk to Shopify directly about having them enable the existing adapter.\n. The CONTRIBUTING file is of course critical: https://github.com/Shopify/active_merchant/blob/master/CONTRIBUTING.md\nAlso, it's important to check out how the other gateway adapters are implemented, as well as the default template used when a new gateway is generated.\n. OK, going to close this PR for now; feel free to open a new one if you decide the adapter needs work. FWIW the one that's already here in ActiveMerchant seems pretty solid, so I wouldn't think it'd need work unless there's specific functionality you think should be added to it.\n. :+1:\n. @newton10471 if someone wanted to submit a PR adding it back that has fully passing remote tests, and can provide us maintainers with credentials to run those tests, we'd be willing to add it back. Beware, though, that the recurring functionality is deprecated in AM, and we won't bring it back in.\n. :shipit:\n. @girasquid cause I was trying to run them due to URL changes, and took the opportunity to clean them up.\n. @j-mutter so the deal is, Worldpay has a bunch of different products, and they don't provision the product that ActiveMerchant calls \"Worldpay\" for US merchants. The country list is supposed to indicate where a gateway account is acquirable, not where the gateway can be used for processing, so this change (better) reflects reality.\n@markabe I'd also like us to change the display name of the Worldpay gateway to Worldpay Global to help reflect this distinction.\nOverall, Worldpay is a mess, and after lots of merchant confusion, this is one piece of what we're doing to try to help future merchants be less confused.\n. @j-mutter any concerns remain before I merge? We could do this just on the Spreedly side, but our thinking was that it wasn't just an issue for our customers.\n. @j-mutter so this is going to change the display name, and the supported countries for the worldpay adapter. No change to the class name and such, though - this is all metadata tweaks.\n. @j-mutter I'm anti-enforcement. I'd say we just only test on 2.0+, and document that as what we target for contributions. If someone can still hack it to work, that's up to them. We haven't had very many Ruby version compatibility support issues come up since dropping 1.8, so I'm not really worried about it.\n. @wvanbergen no, we're OK breaking backwards compatibility, but we'll let the language do it vs. forcing it via an ActiveMerchant error.\n. @wvanbergen I'm totally down with getting more strict; my only hesitation is tying that to v2. I'd like to focus v2 mostly on removing cruft, and moving towards more consistent abstraction without actual enforcement thereof yet. Mostly I just don't want to try to do so much that v2 never gets cut.\nI'm thinking we do a lot of cleanup in v2, and once it's cut we can start adding tools that we can run across new changes to validate our desired API abstraction. Then we can move that validation into the codebase and get actively strict about it come v3.\n. I actually think removing Builder doesn't have to be tied to v2, since it should have no external API effect. So big :+1:, but no need to either wait for v2 or hold up v2.\n. @wvanbergen in terms of requires, yes, I want to make users explicitly require gateways they use. I also want to ditch the huge \"require everything\" file that is https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant.rb and instead have each file require only what it needs.\n. Full speed ahead sounds like! Going to make it so.\n. @alovak for 2.0 I'm :-1:, that's outside of scope from my opinion.\nThat said, I've thought a lot about this, and my thinking is that ActiveMerchant should always have a lot of built in gateways, that the AM maintainers explicitly support. But, I want to make it easy for odd gateways, or gateways that for some reason can't/won't follow our coding conventions, new gatewyas that the maintainers aren't sure will make it, etc., to offer sidecar gems to plug their gateway into AM.\nFor instance, I'd like to kick Braintree out of ActiveMerchant \"core\" due to their annoying gem-only policy. I'd also consider kicking out all gateways that won't provide public test credentials for the maintainers. And I'd like to make the majority of new gateways start out as sidecar gems before getting pulled into AM core.\nSo, that's my $0.02.\n. @bizla all :+1:, except I think this is more AMv3; v2 is...\n:musical_note: All about that cruft, bout that cruft, no features, ... :musical_note:.\n. @bpollack yah. Such big dreams.... I think there was a period in AM's history where there weren't many maintainers, they were swamped, and they basically merged whatever people submitted. It was also early enough that the vision for what AM could/should/out to be wasn't clear yet.\nBut @codyfauser would know better than me :grin:\n. Looks like this since got merged elsewhere.\n. @Paystation finally got around to reviewing this. Needs work.\n. Closing in preference for #1627.\n. Thanks so much for this!\n. @westlakem while Linkpoint is no longer provisioned for new merchants, it continues to be used by many, so ActiveMerchant will continue to support it.\nAdding support for Payeezy would be great, but it would be a new adapter buildout. If you get a chance to do that, be aware that ActiveMerchant does not allow using third party gems - the adapter should be built using ActiveMerchant's existing code and patterns, with no new dependencies.\nIf you submit a PR, we'd be happy to review it for merging. Thanks!\n. @pledgemusic can you add a unit and/or remote test for this? Thanks!\n. @brokenbeatnik I like the spirit & functionality of this change, but I think the implementation needs to change.\nThe issue is that requiring a gateway specific option in order for a core API method to work is a non-starter. What should be done instead is to encode the type of the \"authorization\" into the authorization itself. So when authorize and capture are called, and they return their respective Response#authorization value, that value should contain a field (as per other gateways that have multi-part authorization strings) indicating the type of reference contained in the authorization. void would then unpack the authorization string and select the right JetPay call without the caller having to know which it was originally.\nFor authorization strings from pre-existing transactions that don't have the type encoded, you would just continue to default to the capture type, which would be broken, but it has been for years now.\nDoes this make sense? Anything I can clarify?\n. :+1: on your interpretation.\nUnfortunately, requiring a card number for void is just broken in general; most systems built on AM, such as Spreedly, won't support doing that. Can you verify with JetPay that that's required, and that it's the full card number and not just a non-PCI relevant subset of the card number like the last four?\n. @westlakem we would love it if all remote tests were run regularly, but many of them require private credentials, and so they don't get run, and will fail if you try to run them unless you have the right credentials in your local fixtures file.\nIf you want to go through and try to fix 'em, more power to you. That said, this is not actual a defect, and is expected as of today.\n. Yup, in a CNP context, can't ever imagining wanting that to happen. :+1: for this change.\n. Implemented in https://github.com/activemerchant/active_merchant/commit/ebf1293228555c0e4d2512f61e1e89d6e44b59d2.\n. @shulmang can you add unit and remote tests for this please? Thanks!\n. Closing this; please do re-open if you get the chance to add tests.\n. No, it is not.\n. @tobinharris it probably has more to do with your version of Ruby than it does with ActiveMerchant, though you'll probably have to upgrade them in tandem. It's possible you may be able to fix it in the code by forcing TLS in the adapter, but you'd have to experiment with that directly, as the maintainers aren't up on what works and what doesn't there.\n. @j-mutter I think what they're looking for is encrypted track data, i.e. straight off the card reader, pre-decryption.\nThat said, I don't know much at all about track data encryption, so not going to be much/any help here.\n. @szajbus left a bunch of comments; biggest issues are with matching the proper ActiveMerchant public API.\n. @szajbus I added a few more comments; also looks like you missed a few of my comments?\n. @szajbus you'll either need to remove store/unstore, or have them conform to the API. In particular, the Response#authorization after a store should contain a string with everything necessary to charge against the stored card, purchase and authorize should allow taking that returned string in place of a credit card and initiating a charge, and unstore should take just that string to remove the card from the vault.\nA good example in ActiveMerchant of the correct API is the Authorize.Net adapter, which was recently enhanced to support the correct API for charging against Auth.Net's CIM.\n. I went ahead and merged this with edits; in particular, I just stripped out all tokenization in the interest of getting it merged. If you'd still like to have tokenization supported, please do open a new PR that just does that and we can discuss there. Thanks!\n. @nikz I'll need working Paystation credentials with an HMAC in order to test these changes; if you can't give me any to check in, you can email me directly with them and I'll just use them locally. Thanks!\n. @nikz got 'em - will try to get to this soon.\n. Are you also using offsite_payments, active_shipping, or another Shopify-created gem? You may have one of those that needs upgrading.\nAnd are you on the latest ActiveMerchant?\n. Yup, and just so you don't get surprised, the recurring functionality in the Cybersource adapter is deprecated and will be removed altogether in the near future.\n. Yup, :-1: on a new public API method. Feels like this should just be a tweak to store that lets it take a temporary token (in addition to taking a full card).\n. @tzumby this looks generally OK, but will need a unit and remote test before we can merge it. Thanks!\n. @tzumby it's typical to add a token each time the remote test is run, vs. reusing an existing one. Is that what you mean?\n. @tzumby oh, yuck. In that case, yes, I think just a unit test is fine. Thanks!\n. @tzumby I can easily rebase when I merge; so long as this PR only contains changes that should be merged, should be fine.\n. @ab9 generally a big :+1: from me, but what will this do if nil is passed for the amount? Just keep the old behavior?\n. @k2nr just got this merged - thanks! FYI, I removed Konbini and Bank Transfer, as they're out of scope for ActiveMerchant today.\n. @tzumby ActiveMerchant's not a good fit for card retrieval; I'd recommend just integrating directly to the Moneris API for this functionality.\n. @tzumby ActiveMerchant is targeted at being an abstraction across multiple gateways, and we haven't found a useful abstraction (nor, honestly, do the maintainers need an abstraction) across card retrieval, since it's so gateway specific. If you're only using Moneris, the benefits of using ActiveMerchant vs a gateway-specific library are limited.\nOf course, you always have the option of just mixing your own method(s) into the adapter in your own code. If the AM connection code, response handling, etc., is useful to you, could totally make sense to use the adapter and tack the extra functionality on yourself. It's just not something we think fits for the underlying project/gem.\n. @jcavalieri don't update anything version or changelog related please - just the code would be great.\n. @holy-cow for some reason your AM is choosing to use an SSLv3 connection, which PayPal no longer supports. I'd start by using a more up to date Ruby - at least the most recent patch version of 2.0 - and see if that helps.\n. @danlewis I don't remember this ever having been an instance variable - can you show me the commit where this changed?\nI do agree that it's a bit odd to have it as a class variable, but I don't believe there's actually been a change on that point any time recently.\n. I think this was an unintentional affect of the change away from using cattr_accessor in https://github.com/Shopify/active_merchant/commit/c97e7f3a0e82e6eeff356a35f0b11c388e138163#diff-5f60353ee3917b9a473e169bde83d99d. @rwdaigle any thoughts on bringing back the instance level access?\n. I believe application_fee is already supported (https://github.com/Shopify/active_merchant/blob/0726f8ffb273f76ef43e0a47cf520b51c9d929ff/lib/active_merchant/billing/gateways/stripe.rb#L246), but as far as I know no one is working on destination, so it's all yours\n. Yup, strong opinion on our side around the default being to error on test transactions to a live server, which comes out of our experience with a customer of a customer who ran test transactions without realizing it for almost a year.\nTotally cool with a configuration option at gateway creation that overrides the check, though.\n. @jcavalieri any change in this area must retain the default behavior of raising an exception if a test request is run against a production gateway. We consider that over cautiousness to be a feature, not a bug. Specifically, this removal:\nhttps://github.com/activemerchant/active_merchant/pull/1648/files#diff-32b8ad7eb3755b05bb1a03b6e1f9a3cdL373\nWill not be merged. But a PR that allows disabling that check would be accepted.\n. This is a... large change. Can you summarize the v10 differences?\nAt a minimum, all recurring support is deprecated in ActiveMerchant and will need to be stripped out of this.\n. @ta can you summarize the changes between v7 and v10?\n. @ta do you have a summary you're giving to your customers on what's changed with the new API, why they should upgrade, etc.? Would be really helpful to see something like that to help us prioritize.\n. @bradly-swart well, most of us have day jobs...\nThis sounds like something has changed in your configuration at PayGate (either by you or by them). You should contact them to ask why this parameter is now required whereas it wasn't before.\n. @bradly-swart I guess my point is, you should not need to use the params with ActiveMerchant, nor am I even sure it will be possible to do so. I'm pretty sure the config on your backing account at PayGate has been borked, and that this issue is not at the ActiveMerchant level.\n. @larrylv this seems like a good idea, but so far as I can tell is redundant, since those constants are already used as the defaults for those values. Would just not setting those values here be better?\n. Added some inline comments RE formatting; overall looks pretty solid.\n. Hmmm, good point on requires!. I'll see if I can come up with a good fix when merging.\n. This is looking pretty solid - see inline comments.\n. @zdk I'm excited to see a solid gateway in Thailand! The adapter needs some work - it's over-factored at this point - but hit me up with any questions about my above comments. I'm psyched to help you get this merged.\n. @fred so the ActiveMerchant expectation is manual capture - can you set it up that way?\n. Dropped a bunch more comments. Making progress.\n. This looks awesome. Big :+1: :+1: from me.\n. I think this is fine, and so long as the default behavior stays the same I don't think we'll have any issue with it.\nThe only thing I'd say is that \"manual entry\" feels like a CreditCard property, so I wonder if it should be a settable flag at the top level. Do any other adapters have a similar flag?\n. Some changes you can probably back out, but in general LGTM.\n. @geermc4 the right approach here would be to set the Response#fraud_review? flag if a REVIEW response is returned. PR welcome.\n. @geermc4 the right approach would be to follow the pattern used by other gateways that implement fraud_review. Pretty sure a flagged transaction is still considered a success, but I'm not positive.\n. @zaakpay I'm very much not a fan of \"unique\" encryption schemes - what is the algorithm being used here in encrypt_card? In what way does it increase the security of the transaction over a TLS connection?\nI'm not inclined to merge this with the \"unique\" encryption included.\n. @geermc4 heads up, my goal is to have ActiveMerchant consistently fail fraud review transactions. The reasoning is that success means \"I've got money\", and we don't want people running transactions, having them flagged, and not realizing that they need to manually approve them. Of course those who are intentionally using fraud review would just check that flag alongside of success to ensure they're handling it right.\nNow, to your actual question: I'm not sure I actually understand the issue. Is it just that the message ends up being confusing?\n. @geermc4 our experience at Spreedly is that often these things are on and people don't know. Then there's massive confusion when they've failed to collect a bunch of dough. Thus the preference to force devs to deal directly with the fraud review flag, vs. being able to ignore it.\n. @geermc4 sorry I wasn't clear: I'm very :+1: on properly implementing the fraud_review? flag. The distinction is that when a transaction comes back with the fraud_review? flag set, succeeded should be false. Ideally, we'd have a Response#state, but instead we have two flags. So:\n- Transaction failed to process: succeeded = false, fraud_review = false\n- Transaction successful, not flagged for fraud review: succeeded = true, fraud_review = false\n- Transaction successful, but flagged for fraud review: succeeded = false, fraud_review = true\nThus if you are using a fraud review tool, you need to check both flags to determine the right course of action.\nNow, to your issue - from what I can tell, the problem is multiple reasonCode fields. Seems like you'll need a PR that distinguishes and sets the fraud_review flag based on the right one.\nAs far as void-ing the auth if it's in review, I think that'd be up to the caller to do as a follow-on step if they don't want to review and approve the transaction, right?\n. @geermc4 since auths eventually expire, I'm not sure if that's a situation that's worth handling in AM. Those who are concerned (you?) could maybe check Response#params so you know to go back and run the void?\n. @geermc4 I agree RE needing to run a void in that case, then, since there's no real way to know the auth went through. If you can do that and line the flags up with what we agreed on above, I'll work to get this merged.\nLooks like some other changes also got smooshed in that should get dropped from this PR?\n. Agreed, all new adapters should use Nokogiri.\n. @bizla looks straightforward enough.\n. Not sure how to test this, so :+1:.\n. @tjstankus general rule of thumb for the Response#params hash is that it's allowed and expected to be ugly. API consumers that want beauty should use the specific accessors, and should not depend on the contents of params, and so params is a quick and dirty, as automatic as possible mapping of the response into a hash. It's sort of \"feels right if you're doing it right\" thing - the recommended usage path is nice, the not recommended path is a bit grungy.\nFor this specific case, we generally solve it by using prefixes as you outlined.\n. @forrest I'm closing this since it needs a remote test and since it needs to be changed to conform to the ActiveMerchant API (which takes tokens in the same argument as credit cards, vs. as an option). Feel free to re-open or re-submit if/when you want to take this further.\n. Thanks @rwdaigle!\n. @waelchatila these would need to be split into separate PR's and have tests to be merged. Also note that track data implementations should closely follow the conventions used in other gateways.\nFeel free to open new PR's with these separated and tested if you want to carry them forward - thanks!\n. Closed by https://github.com/activemerchant/active_merchant/commit/662a1dcbe1b59b1fd4d3aa2d035f3ce513e57b3a.\n. @ashutosh413 I have no idea what you're talking about. You'll have to provide a lot more specifics - preferably code, example responses, etc. - for us to be able to help you.\n. @ashutosh413 that's an Authorize.Net returned field, and outside the scope of ActiveMerchant. You'll need to take it up with Auth.Net.\n. @zakariah1 the existing \"customer profile\" methods in the adapter are non-standard for ActiveMerchant, and will eventually get renamed/removed. This account updater API is outside of scope for ActiveMerchant, and we don't want to further increase the non-standard cruft in this adapter, so this won't be a PR we'll merge.\nI'd recommend maintaining this API either as a monkey-patch on the adapter, or a wrapper around adapter.\n. @zakariah1 sure, if you open a PR that just adds the field I'm OK merging it.\n. Totally up to you; since it's already non-standard, I'll admit to not caring if it gets broken :grin:\n. @zakariah1 I actually just pushed a commit that deprecates these methods altogether, since they're non-conformant to the ActiveMerchant API. Thus we won't be taking any changes to them.\n. No plans to change it as a default, but can't you just change the default_currency in your local environment?\n. Not sure if it's helpful, but we've used this code in Spreedly for a while:\nruby\n  def scrub(transcript)\n    transcript.\n      gsub(%r((<wsse:Password [^>]*>)[^<]*(</wsse:Password>))i, '\\1[FILTERED]\\2').\n      gsub(%r((<accountNumber>)[^<]*(</accountNumber>))i, '\\1[FILTERED]\\2').\n      gsub(%r((<cvNumber>)[^<]*(</cvNumber>))i, '\\1[FILTERED]\\2').\n      gsub(%r((<cavv>)[^<]*(</cavv>))i, '\\1[FILTERED]\\2').\n      gsub(%r((<xid>)[^<]*(</xid>))i, '\\1[FILTERED]\\2').\n      gsub(%r((<authenticationData>)[^<]*(</authenticationData>))i, '\\1[FILTERED]\\2')\n  end\n. Bummer that you haven't found a proper refund, but :+1: on fixing this. :shipit:\n. @tomhipkin it looks like :query isn't used anywhere in the code? So I don't see the need for the added complexity here.\n. Ugh, the credentials in the fixtures file have stopped working, so I can't test this. @mnoack originally supplied them, but I don't know if he has any ability to fix them. @adz do you have access to test credentials I can use to run the remote tests for this?\n. @wedy ActiveMerchant does not support 3DS flow; you'll need to implement it externally.\n. @wedy Ogone non-AM standard 3DS support slid in before we started enforcing what is and what isn't a fit for AM; that functionality should really be deprecated.\nI'd be happy to add 3d-secure specific fields to the options hash to be passed through on the existing/standard AM calls. But most 3DS processes involve multiple calls to complete what AM does in a single call (purchase, authorize), and we don't support making those extra calls or modifying the existing calls in ways that affect non-3DS processing.\nIf you want to submit a PR adding fields to options and pushing them through into the XML, I'd be happy to consider it for inclusion.\n. @cbilgili it looks like the credentials for Garanti aren't working - do you have working credentials available?\n. @cbilgili a working set of these so I can run the remote tests:\nhttps://github.com/activemerchant/active_merchant/blob/master/test/fixtures.yml#L276-L280\n. @yazinsai feel free to dig into the project, read a lot of code, learn the style, and start providing initial triage comments on PR's. If you show that you can identify what code's a good fit for the project or not, what changes need to be made for a PR to get accepted, and are long term committed to contributing to ActiveMerchant, we'd consider adding you as a maintainer. It'll take a while to prove yourself, though, so get ready to dig in for the long haul.\nHope this helps you understand how to start contributing!\n. @theinventor it's been quite a while, and all that info is unloaded from my brain, sorry :(. I wonder if this might be related to the work Shopify has been doing around EMV in the Stripe gateway?\n. @theinventor right, understood. What changes do you imagine will be necessary for Mercury, though?Sounds like you just need to pass through encrypted data vs passing through decrypted data?\n. @theinventor does the SOAP API support encrypted card data?\n. @theinventor while REST is new and shiny, we have a completely working implementation against the SOAP API already, and Mercury is complicated enough I'm not keen to muck with a working implementation. Thus I'd much prefer a PR that just adds what you want using the existing SOAP code, vs. completely replacing the gateway.\n@girasquid curious your thoughts - think a full rewrite is worth it?\n. @theinventor if encrypted track data isn't supported via the SOAP API, I'll be much more inclined to consider a rewrite against the REST API.\nLook forward to hearing what you find out!\n. @aprofeit that's a diffing algorithm; above you see the full expected/actual, and underneath is a diff of them. Sometimes the diff is useless, but other times it's super helpful.\n. @borislav-sabev added comments; needs some work but looks to be headed in the right direction.\n. @duff some inline suggestions, but overall :+1:.\n. @puneetimpinge ActiveMerchant doesn't support Ruby 1.8.7 any longer. You'll need to upgrade to a modern Ruby, preferably 2.0+, for us to be able to help you troubleshoot.\n. @vhailor303 the typical combo in ActiveMerchant for this is store (to create a token, returned in Response#authorization), and purchase (which simply takes the token String in place of a credit card). Stripe is weird in that it has a somewhat half-baked StripePaymentToken model instead of a String. Worldpay Online simply hasn't had the necessary functionality implemented, but a good example of it is the functionality just added to the ActiveMerchant adapter.\n. @vhailor303 storing without doing a purchase is the use case for the store API method. It just hasn't been implemented in the Worldpay Online adapter.\n. @duff so it's pretty clear there's not an AM standard for partial auth today. If there was, I'd like that standard to be \"partial auth is disabled unless explicitly enabled\". Thus, I like your approach here. :+1:\n. Check support was added to the NMI adapter in https://github.com/activemerchant/active_merchant/commit/b261824f450f3cf845bd90715424bf83b182b1f2.\n. @Kagetsuki that area of the code needs help. See #1153.\nThat said, I know non-fractional currencies are being handled correctly for some gateways, since I know some merchants are transacting with them via ActiveMerchant. My suspicion is that the code is not broken, but just so confusing as to appear broken.\n. @Kagetsuki as per https://github.com/activemerchant/active_merchant/issues/1153, the approach I'd like to see taken is to have ActiveMerchant internalize handling of currencies. It's a big project that touches a lot of the code, though; if you decide to take it on I'd recommend checking in regularly with your approach to make sure it's something we'd merge.\n. @Kagetsuki will do - thanks!\n. @kimikaza current ActiveMerchant policy is to conform to a limited set of public API's; in this case, update_customer should be renamed to just update, and the quick_update_customer functionality should be encapsulated in that method as well if desired. So while I'm OK conceptually with supporting this functionality as part of update, this won't be merged as-is since it adds a non-conforming public API method.\n. @kimikaza to answer your second question first: we would need to properly deprecate update_customer, throwing a message that warns it will be removed.\nAs to having a single update call, the goal is to match the standard ActiveMerchant API, which probably looks more like quickUpdateCustomer. The thing is AM doesn't usually support the full range of possibilities with tokenization API's, since AM focuses on just storing/managing cards, and does its best to hide any necessary customer management to that end. For those that want full, robust integration with customer management API's, we recommend going directly against the gateway and not using AM.\n. @kimikaza this looks like a big improvement. I've added a note RE the API.\n. RE is \"regarding\", sorry for that.\nYes, the customer number should be pulled out into another argument. Do a quick grep of the codebase for def update( to see other examples of the signature for that method.\n. @kimikaza this still isn't conforming to update expectations, but that's mostly our fault for not clearly laying out what those are. I've tried to lay those out more clearly here: https://github.com/activemerchant/active_merchant/wiki/Patterns-&-Standards#storeunstoreupdate\nBasically this needs to be massively simplified, and/or if you want the more complicated version, that's fine but it's not a fit for ActiveMerchant. Curious to hear your thoughts.\n. @kimikaza thanks for the follow-up!\n. @marquisong what's the advantage of this instead of just using the already supported test: true option at initialization?\n. Ah, I think I get it - this lets setting testmode to true in production. Seems reasonable, I'll work to get it merged.\n. Implemented in https://github.com/activemerchant/active_merchant/commit/b261824f450f3cf845bd90715424bf83b182b1f2.\n. @wedstar I'd prefer this was just an update to the existing adapter; I don't really want a new gateway class for every version of API's unless it's really a new version.\nWhat benefits if any does this new version of E4 provide?\n. @wedstar so HMAC is required for v12+? Ugh...\nDoes v14 support Transarmor?\n. This is an awesome improvement - thanks!\n. Closed in preference for the PR #1848.\n. @rwdaigle only question I have: is Response#authorization handling backwards compatible?\n. @rwdaigle great!\nLooks like NMI replied with mappings for most of the fields you weren't able to map previously? Are you going to apply those?\n. Yup, pretty sure solution_id was just a copy/paste from when NMI was split from Auth.Net: https://github.com/activemerchant/active_merchant/commit/a6cfae5e77ed249de84dbe46a4a91e3a0903a11d#diff-570504655ed8be17318b9c2f7080bb5eR3\n. @rwdaigle I think those fields are only on the NMI adapter because it was copied from the Authorize.Net adapter when the latter went XML. So I'd say we just drop them with a \"POSSIBLE BREAKAGE\" changelog note.\n. This is going to need some work before merging; see comments above. I'd love to see PayU Latam supported, though, so I'll try to stay on top of this!\n. @madhusudhan518 to get PayU working correctly you'll need to talk to them, as they don't have the code necessary to do direct API calls enabled by default.\n. @dlehren I'll definitely need them to run the remote tests. Our strong preference, though, is if we can have some test credentials to check in, as it makes ongoing maintenance much smoother.\n. Whoops, just saw you pointed out where to get credentials. I'll grab them from there.\n. @dlehren is Cardknox a USAePay Transaction whitelabel? Looks very similar to https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/usa_epay_transaction.rb.\n. @dlehren I've got it, will hopefully get to work on merging this this week. Thanks!\n. @aaronromeo I think it'd be great to have a PR that handles legacy ActiveMerchant Stripe identifiers that do not have the card_id. My only caveat is that ActiveMerchant's view of tokenization is narrow, and going forward will only support \"customer\" management (like deleting a customer) in gateways insofar as it's necessary to manage token->card mappings, so this would only be considered a legacy accommodation, not ongoing support for customer management (hope that makes sense).\n. @aaronromeo well, an explicit \"customer delete\" method is what we don't want, since it's a non-standard API. The preferred approach would be to add some code to unstore to handle the case that only a customer id (which used to be what was returned by default?) is passed.\nTo be clear, we're not against rich customer management API's, we just don't think they're a fit for ActiveMerchant's abstraction. So if you really need customer delete, I'd recommend just leveraging Stripe's API/gem directly.\n. @wedstar I think this is changing default behavior, since setting just :test to true will now result in the TEST param being set to FALSE (though the right url will be used). Seems like if :test is true, then TEST should always be TRUE as well, right?\n. @piotr-galas active_merchant is only for direct API gateways; if it's an offsite flow, it only goes in offsite_payments. Hope that helps clarify!\n. @cyber2001 does the SOAP API accept credit card information directly?\n. @cyber2001 it doesn't sound like a good fit for ActiveMerchant, which is focused on direct API's that take credit card (and to a lesser degree, bank) information. Maybe it would be a fit for https://github.com/activemerchant/offsite_payments?\n. Does CCAvenue only allow purchase?\nWe will need credentials in order to run the remote tests - can you provide those?\n. @steakchaser the AuthorizeNetCimGateway is on its way to deprecation, so the maintainers are not really motivated to make further improvements to it. Going forward, the CIM functionality is integrated directly into the AuthorizeNetGateway class via the ActiveMerchant-standard store/update/etc. API.\nI'd suggest adding this ECC capability to the AuthorizeNetGateway#credit method, if it doesn't already support it. We'll do our best to review a PR that adds the functionality there.\n. @steakchaser the former would be best; the latter could potentially get merged, but will then just get removed when the CIM-specific gateway is removed, so doesn't seem worth your time.\n. @steakchaser oh, funny - guess I should have checked the code :grin:\nSo what we really need here is a cim_credit in that case, since credit is the API method that ActiveMerchant uses for \"unreferenced refunds\", which is what ECC is, right?\n. @tapalilov the challenge is that the remote tests for this are passing - just checked. Can you get a dump of the data being returned from Stripe that's causing the code to blow up?\n. Does the issue show up in the remote tests for Webpay?\nI'm actually not surprised this is breaking; extending the Stripe gateway, which changes rapidly, probably wasn't the best idea. Fixing this will definitely need to happen in Webpay, likely by copying big chunks of Stripe into it so they can change independently.\nI'd love to see a PR that fixes this by moving the offending code into Webpay and making the necessary tweaks - thanks!\n. @miccheng will this cause an email receipt to always be sent if the :email option is set? That would be undesirable - it should require explicit action to trigger a receipt.\n. @miccheng as @girasquid says, this conflicts with orgs that have their own receipt sending code, and breaks the current expectation. Happy to see a different PR that makes this an explicit option - thanks!\n.  Clearhaus - Pin\n. @ashishCetuG this doesn't seem to follow any ActiveMerchant conventions, and so won't be merged. If you want us to support Velocity, you'll need to closely read existing ActiveMerchant adapters and re-write this adapter to use the conventions of the library.\n. @ashishCetuG I'd start with working on matching the public API of other adapters - purchase/authorize/void/etc. all have a very specific set of arguments they take.\nAgain, your best bet is to closely read and follow the example of other ActiveMerchant adapters, like Litle, HPS, Ezic, etc.\n. @ashishCetuG it's improving; you need to get initialize in-line with other gateways. Also, all gateway code should be in a single file, and as simple and fit-to-purpose as possible.\n. The best we can suggest is using a fork until it gets merged. We don't/can't give timelines or schedules for merging as maintainers.\n. This seems reasonable, but would need to be implemented in a backwards-compatible way. Thanks!\n. Checking gift card balances is outside of scope for ActiveMerchant, and I'm not aware of other libraries that handle it. Sorry!\n. Done!\n. @bipashant what version of Ruby and OpenSSL are you using in production?\n. @bipashant @Ritesh-patel what version of ActiveMerchant are you using?\n. It's your call, but setting VERIFY_PEER to NONE is basically equivalent\nto disabling TLS altogether and connecting over plaintext HTTP. It makes\nman in the middle attacks trivial, and will not pass a PCI audit.\nOn Tuesday, November 17, 2015, Bibek Sharma Chapagain \nnotifications@github.com wrote:\n\n@ntalbott https://github.com/ntalbott and @Ritesh-patel\nhttps://github.com/Ritesh-patel I solved the problem, after lots of\nresearch, finally able to solve this.\nI added the line OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE in\nmy initializer.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/issues/1907#issuecomment-157345555\n.\n\n\n\nNathaniel\n. The OpenSSL version you're compiled against is pretty old. I'd start by\nupgrading that.\nOn Tuesday, November 17, 2015, Bibek Sharma Chapagain \nnotifications@github.com wrote:\n\nohh\nIs it?\nI just knew about this. Thanks a lot. So what is the best way to fix this\n@ntalbott https://github.com/ntalbott .\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/issues/1907#issuecomment-157600213\n.\n\n\n\nNathaniel\n. @rgagnon you've got an almost 2-year-old version of OpenSSL there - I'd start by upgrading it.\n. @marknfischer we do a lot of FirstData E4 transactions here at Spreedly, and we've never seen this issue. Sounds like something locally is affecting things, which makes it pretty impossible for us as maintainers to provide input on what it might be. You could try asking on the Google Group, but I'm guessing you're just going to have to debug this locally. Sorry we can't offer more help. :cry: \n. @terleckijt the AuthorizeNetCimGateway is actually deprecated in ActiveMerchant, so there isn't an upgrade path via ActiveMerchant for you. To get the recurring functionality that the CIM provides, you'll probably need to write it fresh against Stripe.\n. @matthelm @j-mutter I was surprised this didn't require a change/bump to the default Stripe API version? https://github.com/activemerchant/active_merchant/blob/e28815158657c312bd6de1d08867f4bd22dc0f59/lib/active_merchant/billing/gateways/stripe.rb#L426\n. Nope, sounds good. So 2015-04-07 must allow either/or, eh?\n. I have a nice branch with most of the deprecated stuff cleaned up. Hope to get back to it soon.\n. @davidsantoso instead of a boolean, I'd use a :signature_algorithm option that defaults to :sha1, similar to how Ogone handles it.\n. @ao I don't see the authorise3DSOrder method being called anywhere?\nActiveMerchant in general doesn't directly support 3DS, but adding passthrough fields to help with it is OK.\n. Hey folks, hate to jump in so late, but I'd prefer ActiveMerchant always specified the version to Omise, and then allow overriding it via the @options hash. So the default is to lock it to a known-good version.\nSee the Stripe gateway for an example of this; it was changed to work that way in the last year since a floating version causes surprising compatibility problems.\n. @ss2k what gateway/host are you connecting to? How recent is your cert bundle?\nYour OpenSSL version is pretty old; I'd try compiling Ruby with a more recent version like 1.0.1p for starters.\n. @ss2k also, while I don't mind helping you brainstorm some, it's important to note that ActiveMerchant claims no official support for Ruby < 2.0.\n. @ss2k did you re-compile Ruby against the upgraded OpenSSL? It's a native extension, so generally won't pick up package upgrades until you re-compile. There's also some way within Ruby to check what version of OpenSSL it's compiled with.\n. Wow, didn't notice your ActiveMerchant version is so old. Can you try with\na newer version?\nOn Wednesday, November 18, 2015, SS notifications@github.com wrote:\n\nHi,\nI updated ruby to 1.9.3p547 after updating OpenSSL\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/issues/1933#issuecomment-157896925\n.\n\n\n\nNathaniel\n. Not sure - you could check the commit history to see when we stopped\nrunning the tests against 1.9.\nOn Wednesday, November 18, 2015, SS notifications@github.com wrote:\n\nWhat's the latest version of ActiveMerchant that would support 1.9.3?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/issues/1933#issuecomment-157915782\n.\n\n\n\nNathaniel\n. @rafaelfranca is Rails 5 released yet? Usually we don't add a new Rails version until it's in the wild.\n. @rafaelfranca if you're comfortable supporting it, :+1:.\n. @alovak my concern with this approach is that it implicitly passes non-scrubbed output to the logger when scrubbing is unimplemented. If we do automatic scrubbing, it would have to be in a way that errors if used against a non-scrubbing gateway.\n. Yes, scrub is specifically targeted at making transcripts safe for persistence. The advantage of opt-in is it that it makes the fact that not all transcripts are scrubbed explicit; my concern with automatic is that a developer could start with a scrubbed gateway and not realize that they're saving PCI data when they add a second gateway that is not scrubbed.\n. @alovak yah, but then if I do want log output for a gateway that doesn't support scrubbing, how do I get it?\n. It's great feedback! I'll keep it in mind. Ideally we would just make scrub required and backport it to all adapters, but we're not there yet.\n. The AuthorizeNetCim gateway is deprecated and will be gone in the next major revision of ActiveMerchant. So I don't really care :smiling_imp:.\n. Danny, the key thing is that you should always provide amounts to ActiveMerchant in cents. It then takes care of transforming that amount to the right format for the given gateway.\nBoth the AuthorizeNet and AuthorizeNetCim gateways are super battle-tested, so you can be confident that they're doing that process correctly for you.\n. @dikond so the standalone CIM gateway in ActiveMerchant is deprecated and will be removed in a the next major revision. We'll merge a PR to fix this issue if you submit one - assuming you include a working remote test showing the issue - but I'd recommend not using the gateway in the first place.\n. @dikond it's deprecated since the adapter API is completely non-standard for ActiveMerchant. If you want to use ActiveMerchant, and your CIM needs are straightforward, you can use the AuthorizeNetGateway#store method. If you have more complicated needs, I'd look at an Auth.Net specific gem, or just hit their API directly.\n. @ums-uk this is generally outside of scope for ActiveMerchant, but we're willing to consider a Pull Request that passes gateway specific fields like this through the options hash. You can look through other adapters in ActiveMerchant for examples on how line items are handled when they're supported.\n. @rwdaigle how much example data do we have? I'm wondering how wide the set of URL unsafe data is, and whether it's practical to explicitly escape what's there vs. grabbing a generic utility. Since Cashnet is returning the unsafe value, I also wonder about asking them what the total set of unsafe characters are that we should be escaping.\nThere's also some precedent for this in ActiveMerchant; you might search Issue and even code history for uses of CGI.escape to see what we've used in the past to replace its use.\n. @bruno we fully embrace Ruby's notion of truthiness, so nil is a fine value for success? and should be treated the same upstream as false.\n. @mddharmesh this is way overcomplicated, and won't be merged. Adapters shouldn't be more than a single file, plus the test files. Please spend some time reading the other adapters, especially those added in the last 6 months, and follow the patterns there. Once you've got something better factored, we'd be happy to consider a new Pull Request.\n. @vivekschetu not sure what happened, but your PR changes 171 files. Adding a gateway should generally just add 3-4 files, and maybe change 1-2. Can you please fix? We won't consider for merging until the diff is reasonable.\n. - This is missing most standard remote and unit tests. Please fill them out.\n- Adapters should not require non-standard options like the \"basket\" parameters you're passing. Please conform to the standard options used by other adapters. Extra options are fine, but they must be optional.\n- The PKI method seems overly complex for what it does. Can you please try to simplify it? I'd start by killing most/all the type checks.\n. @xuorig so this will not affect any current users of any existing functionality of the PayPal Express adapter?\n. So does this only affect things if the :mobile option is passed?\nAlso, I'm surprised to only see assertions that were deleted? Are there tests that cover the new/changed functionality?\n. @xuorig got it. So, just to reiterate, the only thing changing is the url, and that url will produce the same results for existing users of the adapter?\n. :+1: for not affecting other gateways, :-1: for PayPal's API design. :shipit:\n. @prburke I'm not aware of any gateways (though I guess Stripe does?) that support this option, nor do I think it should be standard for ActiveMerchant (vs. recurring: true as is supported now). Can you point me at a gateway other than Stripe that does it like this?\n. @aldrinkyck I don't think any of the maintainers use JRuby with ActiveMerchant, so you're kind of on your own here.\n. So right after I got a commit bit to this project back in 2011, I totally hosed master trying to merge this: https://github.com/activemerchant/active_merchant/commit/6db49caee6958771de6bbef80dc041a4a1c2b591. @soleone was awesome about it and helped me clean up my mess. We've all been there!\n. This is SO BIZARRE! So is the issue that we have params we have to escape before we pass them to Cashnet, and then they pass them back already escaped in a url we then need to escape again?\n. It does feel like the really brutal part is we don't have good data on the exact data that's failing. I wonder if the next step should be to roll back, but either here or in Spreedly, start capturing the failures for forensics.\n. @rob-anderson definitely rebase/squash - if you force push to your branch once you've cleaned up the history, the PR will automatically update.\nDid you check the other gateways to see if there's a standard method in place already to pass the CV2 for a purchase against a token?\n. This is almost always due to an old Ruby and/or OpenSSL - do your dev and prod Rubies & OpenSSL's match?\n. The latest version of ActiveMerchant is 1.58.0 - can you please try with the latest and see if this is still happening?\n. @rwdaigle the issue we've seen is that ActiveMerchant users that operate across many different gateways use a common order_id that's relevant to their system, which doesn't necessarily conform to the requirements for a given gateway. If we don't clean it up for them, they have to know the requirements for each gateway they're dealing with.\n. So long as you're on a modern (2.1+) version of Ruby and recent version of OpenSSL, you should be fine. That said, your only real guarantee is to verify in your own environment.\n. @brandoncc in that old of a Ruby version, I'd say there's a decent probability it will break unless proven otherwise. You'd need to test against an endpoint that looks like Authorize.Net will after the change, and see what happens. And a Ruby and/or OpenSSL upgrade may be required.\n. @fastspud if you're using Shopify, you should take this issue up with them. It's out of scope for the ActiveMerchant maintainers. Thanks!\n. @ygokirmak you should get in touch with Shopify directly, as many of us don't work there and Shopify support isn't done here. Thanks!\n. @awladnas you'll want to look at the ActiveMerchant code to see how it's interacting with the Beanstream API; if you find a bug, please do file an Issue and we'll try to fix it. Thanks!\n. @awladnas nope, can't help with those things. Gateway-specific support is really down to reading the code and poking at the API.\n. @ThereExistsX @aprofeit Spreedly only uses ActiveMerchant's credit card, but I'm fine avoiding is_a tests and preferring respond_to or other tests. In general we've done that in the past.\n. That's a Braintree error, you'll need to take it up with them.\n. @Lorel Spreedly is still doing transactions on this gateway via ActiveMerchant, so it does work. However, as per our docs, it requires some settings changes on the PayU side to support it: https://docs.spreedly.com/payment-gateways/payu-in/. It says \"to work with Spreedly\" in our docs, but in reality the changes are required to work with ActiveMerchant in general. So you'd need to reach out to PayU India and ask them to make those tweaks to your account.. partial is misspelled here, too - might want to do a global search for that misspelling :-)\n. I think it makes sense to start using Nokogiri as the preferred XML tool (do other collabs agree?) but if so we need to add it explicitly to the dependencies.\n. It's just a preference, but I really like to see the right hand side of statements like this surrounded by parens. Goes double for the method calls below that take or'd params.\n. Using a case statement might make this a bit nicer:\nruby\ncase payment_source\nwhen ActiveMerchant::Billing::CreditCard\n  :credit_card\nwhen ActiveMerchant::Billing::Check\n  :check\nend\n. I think the inherited Gateway#amount method covers this functionality, no?\n. Looks like some debugging code got left in - please strip.\n. .eql? is generally not idiomatic; any reason to use it instead of ==?\n. That's a long time ago! Has there been any change since such that these could be tested now?\n. Whitespace could use a quick cleanup - lots of 2+ blank lines, trailing whitespace, etc.\n. I really prefer parens on this kind of compound statement.\n. Probably meant to reference action here.\n. Should be private?\n. I'm not even sure how to parse these - is this an old-school hash syntax? Or a block?\n. Guessing this is unused - can be deleted?\n. Seems like it should just be \"PayGate\", no? The \"XML\" seems unnecessary.\n. Is this a FIXME that this commit should address?\n. Need to use Ruby standard underscores for variables. Might also be good to use something more descriptive like extra_options instead of x_opts.\n. Using CDATA here seems like overkill (and is a change from what extraOptions was before). What was the thinking behind doing so?\n. Looks like dead code.\n. Are there any backwards compatibility risks with making this change?\n. I don't know enough about digital goods to know: does this deserve its own class? Or should it simply be added directly to PaypalExpressGateway?\n. Was using nil? rather than blank? intentional here?\n. These docs look handy, but could use some cleanup; in particular please wrap long lines, and use rdoc formatting as much as possible.\n. Could they just not be included since they're ignored?\n. OK, I hate to be the grammar nazi, but... please capitalize the comments or you'll drive me to an early grave :)\nAlso thinking in general that the code is probably a little over-commented; in general we want nice clear method documents, but not a lot of extra comments inside the methods themselves. Feel free to extract helper methods with descriptive names if some areas need more clarity.\n. Please don't change this; instead just run tests with -Itest if necessary.\n. Probably better to use assert_raise here.\n. Shouldn't this just be an assert?\n. Same here, please use assert.\n. You can just delete this.\n. Just to clarify: you're saying this test should be calling a different method, but since you're not set up to run the remote tests you're not comfortable making the change? If so, fair enough; I guess we need someone who's set up to run remote tests against the CIM.\n. Sweet - if you can tweak these to use blank? (make sure to squash afterwards), I'll merge ASAP. Thanks!\n. Can you put parens around the arguments in all the method defs?\n. Excellent - thanks for researching that.\n. Then it really feels like this should just be additional options for PaypalExpressGateway as opposed to its own class; can you refactor the PR to handle it that way?\n. Good question - the best thing I know to do is to just pull the branch into your fork, make your changes, then do a new PR.\n. I hate PayPal :(\nI guess unless there's another way to override those things, then it probably does make sense to have this as a separate class.\n. I think this should be the two letter country code.\n. This should be the three letter currency code.\n. I think we can drop the TODO; if someone else wants this they can submit a PR for it.\n. Seems like this should just be:\nruby\nresult.retain if options[:retain]\n. This should just be require 'test_helper' as in other tests.\n. This should just be require 'test_helper' as in other tests.\n. It looks like 1.8 has the encode64 method (as does 1.9), and just the b64encode method has been removed in 1.9. I'm thinking if you use encode64 it will work in both, no?\n. I don't think the OgoneResponse has enough code to justify its own file; instead just embed the class in this one.\n. What's the intent with this line? Seems odd to set the money to 100 if it's 0.\n. Oh, so maybe above you're just preserving functionality? If so, do we need to do it in two places still?\n. It seems like this should take a boolean, defaulting to false, i.e.:\nruby\ndef balance(return_all_currencies = false)\nSince passing 0 is the same as the default behavior, I think this would make the API simpler.\n. This is just my ignorance of the PayPal API, but what's the difference between this and a normal authorize? I see that this takes a transaction id, but am not clear on how it would be used.\nMight be worth adding some simple docs for each of these methods, actually.\n. It seems like this would be better as:\nruby\nform[:test_mode] = 'TRUE' if options[:test_mode]\nSimpler code, and it abstracts the caller away from how Viaklix happens to want the parameter passed.\n. I'm making the assumption that the default is the same as the \"NOTE\" indicates was the only option previously:\n\nPrior versions return only the balance for the primary currency holding.\n\nSince this greatly simplifies the API for callers, it seems worth it until someone runs into an issue with it.\nThe other option would be to run this against the sandbox and see what the default actually is; not sure if you want to subject yourself to that much pain though :warning:\nUnless I see proof that there are actually three possible responses from this call, it's going to be hard to convince me to foist a tri-state option on the library caller.\n. Right, but I'd rather have less flexibility and keep the code simple; the goal of ActiveMerchant is to abstract away gateway details, and if someone actually needs to pass the string through, AM probably isn't the right solution for them.\n. Is this just for allowing a default order_id to be set? If so, I'd prefer to see it set in the options at gateway creation rather than via an attr_accessor.\n. For consistency of interface, gateways should always take an options hash in initialize. As noted above, this would be a great place to pass in a default order id as well.\n. All of these options should be passed to initialize in the options has, rather than being passed to each invocation of the API methods (purchase, authorize, etc.).\nYou can also use the requires! helper to check to make sure all the required options are being passed.\n. This should just be:\nruby\nif options[:ip]\nExplicit nil checks in Ruby are generally a smell. Same below.\n. @dscataglini: So it turns out this fails in timezones other than US Eastern; see http://travis-ci.org/#!/Shopify/active_merchant/jobs/1000594/L92\nAny ideas on a fix? The tricky part is that Date#to_time always uses the local timezone, so it seems we either have to make the underlying code not use that method (using something that consistently converts to UTC) or else make the test dynamically take time zone into account.\n. Just a Ruby style thing, but explicit returns aren't generally used unless necessary for control flow.\n. What does query do? Since it's not standard ActiveMerchant, some rdoc would be handy to explain what it's used for.\n. fixtures.yml definitely shouldn't be ignored. You can copy it to ~/.active_merchant/fixtures.yml if you want to maintain your own, customized version.\n. Where are these before/after log files generated?\n. Maybe, \"CreditCard#type has been renamed to #brand. The alias for #type will be removed in a future release of ActiveMerchant.\"\n. A gateway instance might be re-used multiple times, so I don't think it's appropriate to use instance variables to store details about a specific transaction.\n. Yah, these line notes are kind of deceptive on Github; it's actually the last line of the snippet that I'm referring to, i.e. successful?(response).\n. Yah, I'm referring to the contents of the build_authorisation method - the hash being passed to the xml.tag! method looks odd. At least I think it's a hash; I can't figure out how to parse it, so I'm not sure :):\n. Are these working credentials we can ship with the library?\n. Awesome - we always prefer to ship working credentials. Makes it way easier for future maintainers.\n. Is the double \"m\" a typo?\n. Well, the tests fail if I change it, so I guess not.\n. My editor automatically strips trailing whitespace, so this is just reflecting that. Same below.\n. I see no way to reference, though I could be missing something. I suppose they're just Ruby files, so maybe we could use require? Seems like a refactoring that could be done after this gets merged, though.\n. Why is this blank? Seems like it should either be stripped out or implemented.\n. Where is this method used? Is it needed?\n. Can we not use !!? It shouldn't be needed.\n. Can this commented out code be deleted?\n. It seems that build_customer is a concern that's external to ActiveMerchant - any issue with it being stripped out?\n. The transparent redirect step \"redirects\" to that url and tacks on the token we need for the next step. Since we don't follow the redirect but instead parse out the Location header, \"example.com\" is just a handy placeholder that is essentially ignored.\nIn short: I don't anticipate any brittleness due to using it here.\n. Good idea - done.\n. Since Spreedly Core supports a transparent redirect, we've spent a lot of time thinking through the implications, and haven't been able to come up with any useful exploits based on fudging the redirect url. The payment information is taken before the redirect, and the only information that comes back on the redirect url is the token. Theoretically, if an attacker could tamper with the form they could exploit the redirect to get the consumer to re-enter their information on a second form, but if they can tamper with the form there are already much more interesting and less observable exploits that can be done (like capturing inputs via JS before the form is even submitted).\nAt the end of the day the consumer themselves are the only ones that can feasibly redirect themselves to another site, so you end up at a \"what's the point\" conclusion.\n. Yup, turns out just #application_id returns the default. Fixed.\n. I'm guessing your modified approach will work, and it looks better in general. Can't say this is my favorite area of the code, nor is it something I use at this point, so as long as the tests keep passing I'll defer :neutral_face:\n. What is the relationship of Axcess to Nochex? Is this just a copy/paste error?\n. Does Axcess support a Return? If not, does this even need to exist?\n. Can this be tested? If not, please remove the test. Same for any other empty test methods.\n. Can this be filled in with some real data so that the test actually tests something?\n. This should be \"void\" to match up with other AM gateways.\n. credit_card_or_token here cannot be a hash; rather it needs to be a string. Further, the authorization set on the ActiveMerchant Response returned by the store call should be the string that is passed in here in order to charge against the previously stored card.\nA bit more background: it's assumed throughout ActiveMerchant (and more importantly, by those using the library) that any reference that might be needed in the future (such as a token for a stored card, or an identification used to capture an authorization) is a string and can be stored as a string, which greatly simplifies the life of those who use ActiveMerchant.\nIn this case it looks like you'll need to join the card_id and card_key fields into a string that can be split back apart here. For examples of other places in the codebase that do this, search for authorization_from.\n. The signature here needs to be simply capture(money, identification) - the money amount passed in should be the amount to capture. If the total amount of the original transaction is also needed, then it will need to be encoded into the authorization returned from calling authorize as per the above comment.\n. The #test? method is now in the Gateway class, so it isn't needed here.\n. Since this operates on a specific transaction, it should be refund rather than credit in order to be consistent with ActiveMerchant conventions. The correct signature would be refund(money, identification), with money representing the amount to refund. Again, if the total transaction amount is needed, it should be encoded in identification.\nWith this change, the :credit_amount option becomes unnecessary.\n. With the above changes to encode the necessary parts of the token into the identification being passed around, this method should be unnecessary or at least become private.\n. In general I think it's better to return every field and to keep the gateway names in the raw response, and then do mappings when building the Response object. The general ActiveMerchant expectation is that the Response#params contains the raw fields from the gateway, and it's probably best to maintain that expectation.\n. Are message_from and post_data used?\n. This is throwing an exception when run under ActiveSupport 2.3 - details in the Travis build.\n. If super is all that is called, then this method should be unnecessary.\n. Are these valid values that can be used for testing, or just placeholders?\n. Yup, stylistically I'd prefer to slap a few parentheses on it. Thanks!\n\nNathaniel\nOn Wed, May 22, 2013 at 2:04 PM, Chris Agerton notifications@github.comwrote:\n\nIn lib/active_merchant/billing/gateways/blue_pay.rb:\n\n```\n       ].join(\"\")\n     )\n   end\ndef handle_response(response)\n```\n-        if ignore_http_status\n-          response.body\n-        else\n-          case response.code.to_i\n-          when 200...300\n-            response.body\n-          else\n-            raise ResponseError.new(response)\n-          end\n-        if ignore_http_status or (200...300).include? response.code.to_i\n\nThis is a syntax error:\nfalse || ([]).include? ''\nThis is not:\nfalse or ([]).include? ''\nBut I can use '||' and add parens to 'include?(...)' if it's more\nconsistent with the style here.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/699/files#r4344856\n.\n. The standard name for this in ActiveMerchant is store; see the Paymill and Quickpay gateways for good examples of the expected API.\n. Rather than having a separate method, this should be hidden behind the interface to authorize (and purchase) and triggered when a token is passed rather than a credit card.\n. This method shouldn't be provided for new gateways; you can just delete it.\n. Typo: hexto_sring\n. test? is provided by the parent class now and shouldn't be defined here. You can just delete it.\n. Use test? here rather than referencing Base.mode directly.\n. Probably best to encapsulate this in an authorization_from method.\n. Typo.\n. Does this correspond to canceling an authorization, or does it correspond to refunding a transaction?\n. Is there no message returned?\n. Why are these tests commented out? Is there not a way to test failed transactions?\n. I'm not keen on not using #amount nor on using #to_i; Float values are never acceptable input values to ActiveMerchant, and this workaround drops information silently rather than triggering an error so it can be corrected.\n. I just want to double-check: is the gateway acquirable and usable by merchants in all of these countries?\n. I'm confused then, since I thought :ip was the standard ActiveMerchant option for passing the ip :confused:. I've never seen :browser_ip before.\n. @hoenth what's the purpose of the store_but_do_not_retain method?\n. Or I guess a better way to ask it: what's the use case for it?\n. I don't think retrieve really fits in ActiveMerchant; rather I think you would just use the spreedly gem if you need to dig into Core deeply.\n. Same with add_gateway: I'd say just use the Spreedly gem.\n. I'm not real keen on adding query methods to ActiveMerchant; its outside of the standard abstraction the library provides. Perhaps you can release a companion gem your customers that want to do a tight integration can use for this?\n. Can the debug code be stripped out?\n. It's super handy as maintainers if we can get a valid test login we can use for running tests. Can you provide one that can be checked in?\n. This should be refund rather than credit.\n. Good point RE the retain dumping the CVV; I'd recommend implementing this within store triggered on a retain: false option. It's a bit squirrely, but I'm OK with that as I don't think it will be the usual flow (and I don't really want to encourage it).\n. To keep ActiveMerchant focused and maintainable we do our best to keep it just to the standard calls that are the same across gateways: purchase/authorize/capture/void/refund/store/unstore. I hear what you're saying RE not using two libraries, but I don't think that's avoidable if you need to keep using ActiveMerchant; for deep Spreedly integration using our gem is always going to be preferable. And this isn't just true for Spreedly; there are plenty of other gateways that also have deeper functionality we intentionally don't expose in ActiveMerchant.\n. @ianbutler55 can you provide me with App55 credentials that I can run the remote tests with? Preferably that I can check in so other maintainers can also run them. Thanks!\n. What is the PRN option?\n. If this is unimplemented it would be best to just delete the commented out code.\n. Will this be implemented? Or should it just be deleted from the code?\n. Are these working credentials? Can you provide working test credentials that we can check in so that future maintainers can run the remote tests?\n. Should it just be called PacNetGateway?\n. The authorization should just be a string (since it gets stored in a single column in databases for future use); you can join the components together with something like a | and split them back apart when they're needed.\n. It's only documented in the codebase currently unfortunately :frowning:\n\ngrep for def authorization_from in the codebase for lots of examples.\n. Yah, unless they have other API's with other names, best to keep it simple.\n. Oh, I see now! I missed the @ and thought it was coming in the options hash.\n. Yup, I'd prefer to have any unused code removed; easy enough to add it back in later.\n. I actually found some here: http://docs.deepcovelabs.com/raven/accessing-raven/\nI'll see if they work!\n. Can you remove any unimplemented bits like this? I prefer to not add things that aren't actively being used by the adapter.\n. Is this required to be unique? Could we default it to something innocuous (1?) so that it doesn't have to be passed in?\n. You should leverage the required! method to immediately fail if required parameters such as this aren't passed.\n. I believe the standard option for this is :ip. Also, can we default to 127.0.0.1 so that this can be an optional parameter?\n. So is this basically how one uses a tokenized card? Instead of passing in an extra option (agreement_ref) can you instead take it as another value for payment_method and switch on respond_to?(:number)? That's the standard ActiveMerchant API for using tokens.\n. Definitely provide a default description so that this can be optional.\n. How is the token returned from this? In Response#authorization?\n. Yes, mocha clears out all mocks and stubs between each test run.\n. Recurring billing functionality (as distinct from card storage functionality) is outside the scope of ActiveMerchant; if you need it, I'd recommend just doing a separate file/gem that re-opens this gateway and adds it in.\n. These customer methods aren't standard public ActiveMerchant methods, so I'd be much more inclined to take a patch that removes the other ones vs. one that adds more. The same \"re-open the class outside of ActiveMerchant\" approach I mentioned above applies.\n. Why have you commented out so many things? If they're not needed, lets delete them.\n. I don't think this approach will work; in particular an authorize should be both captureable and voidable.\n. I think returning the transaction url is what the code used to do.\n. Do you think they're using this for the soft descriptor? Just wondering if a more generic message like \"Purchase\" would be better for a default.\n. Is this really needed? Doesn't look like it's used by the code.\n. Oh, now I see that url being used here in the test; if it's just for the test I'd prefer to keep it in the test. Any objection?\n. The preferred option for this is :store.\n. Rather than using a custom response to return the token, it's expected that the token will be returned in the Response#authorization field.\n. Is there any potential breakage with upgrading the protocol from 2.23 to 3.00?\n. @Sirupsen AM remote tests globally set the AM mode to test; there's no need to do so explicitly.\n. First: this is definitely an area that needs to improve in ActiveMerchant; token handling is currently murky and second class. So definitely not your fault that this is such a pain.\nThat said, I'm totally OK with (and prefer) that the Response#authorization from a #store call only contain the token. There is no need for it to have all the other stuff, as there is no need to reference it in the future via any information other than the token, and the caller knows they're calling #store and can handle the authorization appropriately.\nDoes that help clarify?\n. Awesome :thumbsup:\n. My only concern with this is that if there is no application_id, could it cause a problem to pass a blank field (vs. no field being passed as it is today)? Have you been able to run the remote tests with this in place?\n. Rather than using send and hitting the private method, I'd recommend using the CommStub to check this at the request/response level.\n. @rwdaigle since these are already encoded in the unit tests, I think I'll remove them from here when I merge. Any objections?\n. @markabe is passing nil and having it trigger a full refund still workable? That's an expected API.\n. @bslobodin maybe this could be \"Unable to parse error response '#{e.response.body}'\" so that we'll have more of a clue when this happens?\n. The nice thing about this is that it also helps identify the empty body case (empty string will clearly be visible), and also helps if the body is funky in a different way.\n. The API ActiveMerchant uses for this is purchase(money, credit_card_or_customer_id, options={}). Basically rather than using a special option, the purchase method should see if the second argument respond_to?(:number) and use it as a credit card, otherwise use it as a customer id.\n. This should be renamed update, and match the API of the same name from other gateways.\n. Checking payment status is outside the scope of ActiveMerchant, so this will not be merged.\n. Are :site_id and :offer_id required? If so, they should be set in initialize.\n. This should be defaulted to 127.0.0.1 rather than being required.\n. Please just return an error result with an appropriate message as is done in other gateways. This file - and especially using error codes like this  - should not be necessary.\n. I don't understand the need for a file mapping all of this; does the gateway not return a message as well as an error code?\n. This is not a standard ActiveMerchant API method - it should be private if it is needed.\n. capture should also allow passing an optional options hash for API compatibility.\n. This is not a standard ActiveMerchant API method. What differentiates a CreditReversal from a CreditReturn?\n. Should also accept an options hash.\n. This is not a standard ActiveMerchant API method.\n. No need to validate this - you can just assume the caller is passing you a valid amount.\n. This should be using Response#authorization rather than digging around in params. The goal is that the Response#authorization is an opaque string value that can be used to reference the transaction in any future requests.\n. Doesn't the credit card need to be added even if an alias is being assigned?\n. I think the more standard option in ActiveMerchant for this is :customer.\n. The preferred option name in ActiveMerchant for this is :customer.\n. Could this actually just be pulled from creditcard.name instead of introducing a non-standard :name option?\n. This line is useless isn't it?\n. Is this allowing for updating the customer? If so, that should be separated out into a separate update method per the standard ActiveMerchant API.\n. This is non-standard, and should use creditcard.name rather than being a special option.\n. OK, so long as you're OK with it not being set in the majority of cases; large users of ActiveMerchant like Shopify and Spreedly generally only supply the standard options.\n. @edward aren't the semantics slightly different for bare raise? FWIW bare raise in a rescue is always pretty clear to me in Ruby land.\n. You should put this in your global .gitignore file: https://help.github.com/articles/ignoring-files#create-a-global-gitignore\nThat keeps the ActiveMerchant .gitignore file specific to ActiveMerchant.\n. No changes to the Rakefile should be needed. Were you trying to be able to run a specific tests? This will work:\nsh\n$ ruby -Itest test/remote/gateways/remote_authorizenet_test.rb\nThe same works for the unit tests as well.\n. This should just replace the authorize_net.rb gateway, rather than being whole new gateway, right?\n. Rather than have all this boilerplate in each file, see the approach I took in hps.rb to share the boilerplate:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/hps.rb#L40-L48\nYou'll need to adapt it, but it should reduce a lot of duplication.\n. ActiveMerchant shouldn't/won't support line items, and I think it'd be best to leave out duty, shipping, tax, and user fields at this point. Since AM is an abstraction across the gateways, we generally stick with fields that are common and regularly used across gateways.\n. Don't need PO number in ActiveMerchant either.\n. Map this to options[:email].\n. options[:ip]\n. I think refId should be mapped to options[:order_id], which is a standard ActiveMerchant option.\n. Checking the class like this won't work, since some folks duck-type their own credit card class. What you want to do instead is check card_brand(payment_source) == 'check', and if that's false, just assume it's a credit card.\n. ActiveMerchant doesn't really support a \"customer id\" per say. I'd just skip this field.\n. \"customer type\" isn't really supported by AM either. Skip.\n. All the address fields you have look correct. Does the Auth.net API support address2?\n. @justinplouffe see https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/balanced.rb#L170-L173 for an approach that I think works for gateways that return meaningful status codes. Basically it considers all 4xx codes to be expected errors, and everything else to be an error.\n. What's expected? Can you link up API docs?\n. I prefer just using @options[:company] when the credential value is needed vs. adding another level of indirection with an instance variable.\n. Use the MultiResponse. Love the MultiResponse.\n. :merchant is a non-standard option, and should not be required. Perhaps it should be a credential that's passed when the gateway is initialized?\n. Should also support options[:address] as an alternate to :billing_address.\n. flatten_hash seems unnecessary; why not just use the right keys in the hash in the first place?\n. parse should return the raw response; if it needs to be hashified do that in parse.\n. parse_response -> parse.\n. message -> message_from.\n. success? -> success_from.\n. ActiveMerchant provides a standard amount method - what differs here? If it's specific to Adyen it should be named differently.\n. @justinplouffe sorry, wasn't clear. I wasn't commenting on @company specifically, but rather just the practice of pulling credentials out of @options as instance variables.\nAs to :company specifically, try to match Adyen's terminology in their UI and docs as much as possible. The credential name is sometimes all a technical implementor has to use to communicate with a business user they need the value from, and a close name mapping is a huge help in getting the right value.\n. Not sure how much it helps, but Realex has something kind of similar here: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/realex.rb#L246-L249\nSeems like we have to just make a best effort if the gateway's just punting on it. Then if merchants complain about AVS checks failing when they shouldn't, there would be specific examples that could inform tweaks to the extraction algorithm.\n. @bslobodin so there aren't any currently issued card types that still use them? I'd love to strip out that code!\n. Agreed this could be simplified in the future; FWIW I've just inlined the expiry_date.rb file at this point, not really changed the functionality.\n. I tend to prefer them, since it removes any \"what's the precedence here?\" questions, and if I always use them, I never have to think about \"is the precedence confusing here?\". Strictly personal stylistic taste.\n. OK, your reasoning seems sound, we'll just wait and see. No need to go\nthere yet.\nOn Monday, May 26, 2014, Justin Plouffe notifications@github.com wrote:\n\nIn lib/active_merchant/billing/gateways/adyen.rb:\n\n\ncommit('Payment.refund', post)\nend\n  +\ndef void(identification, options = {})\nrequires!(options, :merchant, :order_id)\n  +\npost = {}\npost[:modificationRequest] = modification_request(identification, options)\n  +\ncommit('Payment.cancel', post)\nend\n  +\nprivate\n  +\ndef commit(action, post)\nrequest = post_data(flatten_hash(post.merge(:action => action)))\n\n\n@ntalbott https://github.com/ntalbott An Adyen REST request is\nbasically just a flattened and properly encoded hash :\naction=Payment.authorise&paymentRequest.merchantAccount=SupportAdyenTest&paymentRequest.amount.value=1234&action=Payment.authorise&paymentRequest.card.expiryYear=2016&paymentRequest.amount.currency=EUR&paymentRequest.card.cvc=737&paymentRequest.card.number=5555444433331111&paymentRequest.card.holderName=Test%2BTester&paymentRequest.card.expiryMonth=06&paymentRequest.reference=testReference1234\nI tried to be fancy and assemble the requests using small methods that\nconvert ActiveRecord data structures to Adyen ones instead of using the\ntypical add_something(post, options) pattern used in most gateways. These\nrequests would then be made into a proper http post request before being\nsent. It seemed like a way to create smaller and more testable methods but\nI might just revert to the regular pattern if it ends up making everything\nsimpler.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1218/files#r13058018\n.\n\n\n\nNathaniel\n. Any kind of \"expected\" failure of a gateway call should return a Response#success=false. Any kind of unexpected/not foreseen failure should raise an exception since it generally indicates a gateway's response format has radically changed, the gateway is down, or there's a bug in ActiveMerchant, all of which are really error conditions, not failure conditions.\nDoes that help clarify?\n. @justinplouffe I always focus on the remote tests first; the basic rule is: no remote test should raise an exception, since any failure we can anticipate and trigger in a remote test should be encapsulated in a failed Response.\nIn the case of the unit tests like test_failed_authorize, I'd expect the same: it should mirror the remote test result of passing a badly formatted credit card number on to the gateway, which in turn should turn into a failed Response.\nBasically exceptions should bubble up for any kind of case we can't anticipate in the remote tests.\n. Does the body of the 404 have anything in it? My concern is that there could be other causes of a 404, and I don't want to mask them if we don't have to. Thus, it would be best if we included something from the response itself so that a 404 caused by something else would bubble up (even if it was with an ArgumentError caused by trying to access something that wasn't in the response).\n. Nit, but I'd rename keys to key_prefix or just prefix.\n. No need or value in to_sym here; post_data is just going to convert it back to a string.\n. Didn't know about the limit argument to String#split - very cool!\n. Should probably be a final fallback message here, even if it's just \"OK\" or \"Success\".\n. Probably want split(/\\s+/),\n. Should be amount(money).\n. refund cannot take the payment method; the signature must be refund(money, authorization, options). Why are you passing in the payment method?\n. FWIW if you run the remote tests with the DEBUG_ACTIVE_MERCHANT environment variable set to a string of true, the requests and responses will get dumped out as the tests run. Can be super handy.\n. This should be just authorization.authorization; the Response#authorization field should contain everything necessary to run follow-on reference transactions.\n. If you want to be really clever, gsub(/(\\s)\\s+/, '\\\\1') preserves the whitespace used.\n. Could this use options[:store] instead of options[:preauthorization]? That's used by some other gateways to indicate a purchase or authorize should also store the card.\n. If successful responses will always have one of these fields to pull a message from, then sounds right.\n. Thinking about this more; is there any case in normal operation that the authorization won't be found? Do authorizations go away? If not, then I think it's OK for a 404 to just bubble up as an exception always - basically means you passed in a totally bogus reference and should just stop that.\n. Not a huge deal to fix when I merge, but it would be super handy if you'd use a tabstop of 2 hard spaces consistently.\n. @ksondere this will need to be addressed, the calling convention for the public API methods must be consistent with other ActiveMerchant gateways.\n. Does this need to be custom code? Can't it use ActiveMerchant's existing AVSResult class?\n. Same here - can't it use CVVResult?\n. Is this change relevant to the option being added? If not, please submit it as a separate PR.\n. This change is invalid - the card types were correct before. These symbols are standard for all of ActiveMerchant.\n. Should be options[:device_id] to match Ruby/ActiveMerchant conventions.\n. Incorrect - should come from @options.\n. @moklett not hard-coded in the actual changeset: https://github.com/Shopify/active_merchant/commit/2f6f3cfecc0b755ab2b27f23e402a88b1722b171#diff-4343154822f7464c3a9cc97bd031ac3bR230\n. No worries - thanks for the contribution! :dancers: \n. Q1: Backwards compatibility does not extend to the params.\nQ2: No idea. Doesn't really matter as far as I'm concerned.\n. Why is this commented out?\n. Same here, why is this commented out? If the test represents unsupported functionality then you can just whack it.\n. Not needed.\n. This is troublesome, as it means we'll need to encode the amount in the authorization so that we can continue refunding when the amount of the original transaction is not known.\n. The Auth.Net sandbox needs a way to trigger immediate settlement of a batch.\nIf this can't be tested in an automated fashion, then just whack the test.\n. When will consolidated accounts be activated?\n. Why is this commented out?\n. Same here - why commented?\n. @ksondere this still needs to be resolved.\n. @nikoloff I'm not a fan of using a pre-vaulted card in the remote test; can the test actually vault a card and then use it for the test? As it is this test won't run against any other Paymill test account.\n. Well isn't that just fancypants! Learn something new every day. Will get this merged ASAP.\n. OK, if not needed then lets just remove it for now. Easy enough to stick it back in later.\n. Please don't change .gitignore.\n. This has since been removed - maybe you need to rebase on master and force push? There shouldn't be any changes to the Gemfiles in your PR.\n. Please don't use constants for all of the API strings - just use the strings directly in the code unless they're used in 2+ places. 99% of these constants should be inlined.\n. Please ensure all debugging code is stripped out.\n. Have you run the remote tests successfully? Guessing not since I doubt that's actually the message returned by the gateway...\n. No need to use actual credentials since the unit tests are all mocked out.\n. @ksondere I didn't change that - your original PR had it passing 0 for the amount, and all the tests pass with it. Do you think we're missing a test?\n. :billing_address can interchangeably be passed in as :address. Ideally it would be defaulted such that it doesn't have to be required, too.\n. Don't default card brand.\n. Should be private.\n. This is outside of scope for ActiveMerchant - remove.\n. This is outside of scope for ActiveMerchant - remove.\n. This is outside of scope for ActiveMerchant - remove.\n. Please be sure to always use parens around arguments in method declarations.\n. What is the process to acquire a merchant id for testing? Ideally we could acquire testing credentials that could be checked in and used by all maintainers.\n. Please don't change .gitignore.\n. This should be inlined/removed.\n. super already does this assignment.\n. Can this be defaulted to the standard host? It's fine if it's overridable, but we try to avoid required parameters as much as possible.\n. This should be refund, not credit.\n. Needs tests for failed purchase, failed authorize, and successful/failed refund.\n. Needs at least one test for the failure case of each API method.\n. Correct, since SecurePayGateway no longer extends AuthorizeNetGateway, there's no longer any need to verify that it explicitly \"unsupports\" certain operations.\n. Because the coupling between these gateways is tenuous at best, and killing the inheritance allows them to usefully diverge going forward. I'm not a fan of trying to DRY the gateways at a high level like this.\n. Doesn't have to be, but I have this thing about the clarity of stand-alone boolean comparisons as return values not being clear, and often add parens just so I don't have to wonder. Totally stylistic.\n. The Response#authorization from calling authorize should be passed directly to capture. Nothing from Response#params should be needed for captures.\n. This will break if no billing address is passed (which is common).\n. This will break if no shipping address is passed (which is common).\n. Credentials should be lower case and use underscores.\n. Can a merchant from any of these countries sign up for a checkout.com account? That's what the countries in this list are meant to reflect.\n. Please add remote tests (at a minimum) that test for running a purchase with and without a billing address and a shipping address. Often gateways break when they're not passed them, so it's good to verify they work both ways.\n. Querying token details is (at least for the present) outside the scope of ActiveMerchant, as there's no good abstraction defined for the return value. Please remove for now, and interact directly with the API or extend the gateway with your own code if you need to get token details.\nYou can remove this, or I'm happy to do so when I merge.\n. Is there some other case where the gateway takes a string as the source parameter? To match ActiveMerchant conventions, the gateway should just check respond_to?(:number) on the source and use the source as a token if it returns false. So there should be no need for the :payment_method key in the options hash.\n. OK, now I'm confused. What's the difference between legato and a \"customer code\"? I'm really not keen on :legato option, as it breaks the AM abstraction.\n. @andrewjwu yup, they'll be coming out eventually, but we're not ready to break those already using them yet.\n. We probably don't want to ignore the result here.\n. I'd probably just make the live_url be https://secure.na.tnspayments.com/api/rest/version/22/, then add the rest on when using the url. That matches up better with other gateways.\n. I'm of two minds about mirroring Apple's structure so closely. On the plus side:\n- immediately obvious mapping\nOn the negative side:\n- means things get confusing if Apple renames things (which is likely since this is so new)\n- obscures the actual protocol\n- makes the solution very ApplePay specific, whereas Apple Pay is really an implementation of a developing industry standard (EMV)\nYou can probably tell I lean towards being less Apple specific. I'd actually like:\n``` ruby\nclass ActiveMerchant::Billing::Cryptogram < Model\n  attr_reader :encrypted_data, :description, :brand\ndef initialize(encrypted_data, options={})\n    @encrypted_data = encrypted_data\n    @description = options[:description]\n    @brand = options[:brand]\n  end\nend\n```\nNote that transaction_identifier isn't there; that's because I think it should be provided to purchase, as with other payment methods:\nruby\ngateway.purchase(amount, cryptogram, order_id: transaction_identifier)\nI think this API will have much wider applicability, exposes the underlying protocol, future proofs us from Apple API shenanigans, and give us a place to hang deeper Cryptogram support, since I hope we'll be able to get at the innards eventually.\nIf there's a concern that devs will not know how to use it, we could provide a helper method:\nruby\ncryptogram = Cryptogram.from_apple_pay(payment_data, payment_instrument_name, payment_network)\nThoughts?\n. A Stripe token actually isn't a Cryptogram FWIW. A Cryptogram (in the context of EMV) actually has encrypted data that unpacks into an actual PAN. At least that's my understanding of it.\nI think we absolutely should have a proper Token model that duck types as closely with this as possible but represents a gateway token (or Spreedly token, etc.) that's just a random alias to a PAN within a given system.\n. I'm also in favor of not adding this at the base class level.\n. Maybe COMMON_ERROR_CODES or STANDARD_ERROR_CODES to more explicitly distinguish this from gateway-specific error codes?\n. This doesn't seem to add much from my perspective; the map of error codes is the key, and each gateway implementation is then responsible for populating the field in the Response from the map as they see fit.\nI would just drop this method.\n. I'd propose simply:\nSTANDARD_ERROR_CODE_MAPPING = {\n  # mappings\n}\n. So make this: error_code: STANDARD_ERROR_CODE_MAPPING[response[:dsix_return_code]]\n. I think the success ? nil is redundant and can be dropped now, right?\n. Well that's gross... but I've come to expect no less from gateways.\n. If store understood how to tokenize ApplePay, could this just become a store? I guess tokenize_apple_pay_token just seems like a special store call to me, and it seems like it would be handy if store could handle tokenizing ApplePay regardless.\n. I'm not a fan of these assert_instance_of Response checks; they're vestigial/legacy and unnecessary IMO.\n. @j-mutter agreed, this feels like a general purpose fixture method that's already shareable.\n. If these are the same, I prefer to just have live_url. No need to repeat it for, or use, test_url.\n. I don't see :tid or :orgid being used anywhere. Why are they passed?\n. Don't put this in options, instead just use test? where appropriate.\n. If we don't need it, then don't include it. No need for speculative code or future proofing.\n. No define_method please. I know it's seductive to try to save a few lines, but I prefer to KISS in AM adapters. If there's duplicate code, either extract method or just duplicate.\n. If someone passes something that's not a Hash, they'll get a nice error message. Please remove any checks like this, since they can easily obscure caller errors.\n. Why would the card not exist? Also, this introduces a subtle and unexpected coupling between this method and the method that adds a card, since they're now dependent on call order.\n. @j-mutter well, to be fair, that document is referring to options passed to purchase and friends, not to initialize. We actually like having the options passed to initialize to match the gateway's credential naming as closely as possible.\n. @j-mutter when you can convince all the gateways to settle on only two, sanely named, credential fields, I'm in :grin:\nUntil then, we've found at Spreedly it's hugely beneficial to have these mirror the real credential names since it's often hard to figure out without that what in the world \"password\" maps to when the gateway has 3 for different purposes and actually calls what you need \"secret key\".\nBack to this code, I'm now realizing these are used, but not as I'd expect; the options hash is getting cloned in each call to provide the base set of parameters, so these do have to be in the hash. @grepruby the preferred convention to use instead is to just rely on super to assign the @options hash, initialize the post hash as empty, and have an add_credentials private method that explicitly copies the credentials from the hash into the post.\n. FWIW I just clean up indentation when I merge; I've given up asking people to make it consistent in PR's :confounded: \n. Should probably also assert @gateway.supports_scrubbing? here so folks don't forget it.\n. Maybe a comment here that explains what this test is for?\n. I wonder if there's some way to actually test that scrubbing works in the remote tests?\n. I like having this only in the tests; with great power comes great responsibility, and we probably don't want to make it too easy to capture transcripts.\n. Just thinking that a lot of folks will read this code right after generating a gateway and before trying to run it, so I'd probably put some explanation in the generated test.\n. Maybe a helper that lets you say:\nruby\ntranscript = capture_transcript{@gateway.purchase(@amount, @credit_card)}\nassert_scrubbed(@credit_card.number, transcript)\nassert_scrubbed(@credit_card.verification_value, transcript)\nassert_scrubbed(@gateway.options[:password], transcript)\nThere's trickiness - for instance you have to make sure your test credit card number doesn't contain your test CVV - but the purchase doesn't even have to succeed.\n. I'd actually like to see the dependency on OAuth removed completely; I'd prefer the value for the OAuth header actually be the credential that the gateway is initialized with, if that value can't be generated easily. A gateway should be always making calls using the same OAuth token, so there's no need for AM to get involved in OAuth complexity.\n. I'm pretty sure this will make a remote call? Which is definitely not going to fly. Lets instead just have the oauth_header value passed in at gateway initialization, or other similar pre-setup of the OAuth relationship.\n. sigh OAuth seems like such a bad choice for this type of API. But c'est la vi. Guess we'll note it as a dep for the Quickbooks gateway, then.\n. Agreed, this should either be triggered within an existing API (maybe as part of purchase/authorize flow?), or not be in ActiveMerchant.\n. This isn't acceptable by project standards; can you please provide either a plain HTTP test server, or (much preferred) a proper host and SSL cert on the test server?\n. I'm concerned that this is changing the default; now a flag has to be set to get the old behavior? In general I'm really dubious about adding another flag here. Why is it even needed?\n(Also, if you use and in Ruby you're generally gonna have a bad time. But not a big deal since whoever merges can change to &&.)\n. Are these working test credentials?\n. This should use :order_id instead of :transaction_id I think.\n. This could be either :billing_address or just :address.\n. The signature here is incorrect - capture should always take an amount. You can look at other gateways for specifics.\n. refund should take an amount.\n. Weird that this is named add_credentials_for_auth_or_purchase, since it adds a lot more than that.\n. Response#authorization should be populated so that a capture (and other reference transactions) can just receive response.authorization. It should never be necessary to dig around in Response#params.\n. Please don't change .gitignore. If you need to ignore stuff specific to your environment, use a global gitignore file.\n. If test is the same as live, just set live.\n. Please delete all commented out code.\n. Is the gateway acquirable by merchants in all these countries?\n. super sets @options, just use that vs. assigning instance variables.\n. Is a token required, or can the card data be passed directly?\nIf a token is required (ewww) then please implement store to add a token, and use a MultiResponse to handle doing both a store and an authorize.\n. This should use a MultiResponse if two calls are required.\n. options[:address] maybe be nil.\n. Please eliminate empty methods.\n. Track data should be passed via the field on CreditCard, not via an options flag.\n. Ummm... don't do that. nil is falsy, so just a simple if(!body) is much better.\n. Just don't set :authorization if the transaction fails. Putting the message in it isn't a good idea.\n. Are these working test credentials?\n. Does this even work? You're not stubbing out the response.\n. Please fill in.\n. It's best to name these parameters according to what the gateway calls them.\n. Is this really http and not https?\nAlso be best to use the live_url or test_url vs duplicating that portion.\n. If void isn't supported, just don't include it.\n. Go ahead and fill out the unit test with the rest of the functionality, please. Should generally at least mirror what's tested in the remote test.\n. This could just be options[:store], right, and depend on truthiness?\n. @lathiat maybe do a MultiResponse within authorize and purchase if the :fraud option is set?\n. Yuck yuck yuck; any chance you can convince them to fix it. Not a fan of turning SSL levels down, even for tests.\n. This should use a fixture.\n. This options has is really extensive - can you add a test that shows things don't blow up if no options are passed?\n. Need more successful tests; each public API method should be covered by at least a successful and a failed test.\n. Need more unit tests; everything covered in the remote tests should be covered at a minimum.\n. Can some brave soul do so and check them in here? I will if no one else does...\n. Can we think of a better distinguishing comment for BogusGateway? Maybe something like \"Allows triggering specific responses\"?\n. Can we stick with the brand just being bogus, and have the NullGateway use that as well?\n. @InfraRuby do you know if IPP supports CVV warnings/codes?\n. This blows up if the value isn't a String - can you fix and test?\n. Looks like mb_chars is a Rails method? We're slowly removing ActiveMerchant's dependency on ActiveSupport, so can we find a different way of checking the byte length? If it helps, you can assume Ruby 1.9, as we don't support 1.8 anymore.\n. I'm really concerned that this loses whatever's in the body of the error (we're not guaranteed an invalid login is the only thing that can cause a 401); can you put the response body into the exception message maybe? Also it should be \"login\" not \"logon\".\n. I'm guessing the issue here is not just the message; is the method still actually testing a capture, or is it now just blowing up due to an invalid request?\n. I hate to be difficult, but... this indentation is still not correct, as it's only indented one space from the surrounding block. I see the same throughout the changeset.\nThe reason it matters so much is that the diff ends up being dominated by whitespace changes, making it hard to see what has actually changed.\nPlease fix.\n. Awesome!\n. @shulmang weird - I've never heard of a gateway that wouldn't honor the amount being authorized.\nJust so I understand: if PartialAuth is not allowed, can a partial capture still be done on the auth?\n. @j-mutter but AM makes no guarantees around nil vs. \"\" for Response#authorization, so I don't think we need to maintain this behavior. It's certainly not maintained on other adapters.\n. That'll teach 'em! :wink:\nI don't really care either way in this specific case, just want to be cautious in general about making anyone think we support their broken calling code. :fearful: \n. Can we use Time.year.now and prevent future breakage? Goes for most/all other changes, too.\n. I'm actually against the prescriptive \"Please run gem install oauth.\", since in many cases one would be actually adding to their Gemfile. Maybe \"You need to have the oauth gem installed in order to use the ActiveMerchant QuickbooksGateway adapter.\"?\n. I actually prefer just accessing these values straight out of @options vs assigning everything to instance variables.\n. Money should never be a String, if it is it's an error on the caller's part. Can we kill this check?\n. I'm not really a fan of this void implementation - seems super complicated and error prone. I'd probably prefer to just not support void rather than trying to hack it as a refund.\n. Are you sure none of these values can have parts that don't match \\w?\n. Not a fan of having a gateway-specific, nested :context option. Seems like it takes :tax and :recurring? I'd put them both at the top level of options if we want to support them, vs. nesting them.\n. I'm not sure we want to rescue ResponseError, since the caller probably expects to handle it themselves (I know Spreedly does).\n. Can we rescue the exact exception and check the message? Otherwise we risk masking/obscuring other errors.\n. Rather than take in options, can we take in method and uri to make the call signature more explicit?\n. I know you and I would never pass in anything besides :post or :get, but I always like to add a default else clause to a case that raises an exception with useful debugging information.\n. Can we also set the fraud_review flag?\n. Does it provide an avs_result?\n. @bizla we like to be able to offer it, but no. That said, in this case I'd like to just leave verify as a $1 auth with no void; then we can come back and make it more robust later (and Spreedly customers may put pressure on Quickbooks to provide a proper authorization void if they're annoyed by the auths sitting there until expiration).\n. Is silence_warnings still needed?\n. @wvanbergen I think it's best to keep them in the Gemfile, not add them as dev dependencies. It makes it easier to play around with versions, especially since we still have a Rails dependency and could run into compatibility issues. I think of dev dependencies being for dev tools, whereas this is a special case of a library that's only needed if you want to use a particular gateway.\n. We don't support Ruby 1.8 anymore, right? Not saying that changes the decision, but maybe it means we can use a newer version of the test-unit gem?\n. :cool:\n. I'd prefer fixing them; I can't even remember what they are?\n. @wvanbergen :+1:\n. I hate the braintree gem with the :fire: passion of a thousand :sunny:. So I'd be all for that.\n. So deprecated isn't used anywhere else?\n. @wvanbergen except my end goal is remove the activesupport dependency altogether, so I'd vote for keeping it. I also prefer it's output to the one in AS.\n. Probably don't want that in there anymore :grin:\n. Thought you weren't adding in void?\n. Can we rip out all the \"optional\" stuff? AM strives for simple, cross-gateway implementations. If someone really wants to go \"all in\" on Mondido-specific security, they could implement directly against your API.\n. Can we simplify to just :customer_id instead of needing both? :customer_ref is not AM standard, which means it breaks the AM abstraction.\n. Whoops, I mean just :customer, as that's the standard AM option for specifying a customer profile identifier.\n. Methods prefixed with get_ are a Ruby anti-pattern. Just use amount.\n. Please remove all functionality related to subscriptions/recurring. They're outside of scope for ActiveMerchant.\n. Why not just credit_card.brand?\n. This seems really out of scope for AM. Remove.\n. AM shouldn't be making any calls that need pagination. Remove.\n. Remove.\n. Please don't use and, always prefer && in Ruby.\n. Same with not vs. !, and or vs. ||.\n. Remove any commented out code.\n. Overall this remote test looks way over-complicated; you shouldn't need all the support methods. Reference other gateway remote tests for how to use methods on the gateway (such as store) instead of re-implementing in the test.\n. @anderson-mondido I agree certificate pinning would be great to have as a core ActiveMerchant feature, just doesn't make sense to do it on a gateway-by-gateway basis.\nAs for adding another layer of encryption inside of SSL, I'm not a fan - just adds complexity without IMO any real security gain.\n. @anderson-mondido can we get a shared AM test account to check in? It makes ongoing maintenance way easier for us maintainers.\n. So actually scrub is targeted primarily/totally at credentials and PCI-controlled data, so really card_holder, card_expiry, card_type, and amount should be left alone.\n. Can we just drop the @url ivar and use self.live_url where appropriate?\n. Yup. Will fix.\n. Why is the live_url hitting a test subdomain? Seems sketchy?\n. :description shouldn't be required; if the API requires it, please provide a default in case it's not supplied in options.\n. Please default to 127.0.0.1 if not supplied.\n. Please default if required by API but not supplied.\n. Please default if required by API but not supplied. This is not an AM standard option, so will rarely be passed.\n. FYI, this is done by test_helper.rb, so not necessary here. I'll remove when I merge.\n. Prefer assert_match %r{regexp}, message since it gives better output. Will fix when I merge.\n. I dunno, this extra override seems unnecessary. I'd vote for dropping it altogether.\n. Please always use parens on method declarations.\n. Please use the requires! method.\n. If you want to leave this, it should throw a deprecation warning out.\n. With authorize and void being available, can you please implement verify? Even better if the gateway supports a zero dollar auth or similar.\n. No need to keep empty methods.\n. This looks dubious?\n. Prefer the post[:ccnumber] = payment.number style, rather than using update.\n. If the test_url and live_url are the same, just use/set live_url.\n. No need for another gateway here; this should be implemented on the main gateway as store.\n. Please inline this in the omise.rb file.\n. I don't see a capture call? Is that tested elsewhere?\n. @girasquid well, with many adapters you can pass in nil as the amount and it'll just refund the whole transaction. That said, unless having a blank amount blows up transactions, you still shouldn't need the check.\n. Drop this; no one should be coding against deprecated API's on new adapters.\n. The main point of void in ActiveMerchant is to cancel an authorization, will that work as implemented here?\nI'm not a big fan of having to MultiResponse here - no way to do it in one call?\n. Don't do/check validation here - that should be handled by the calling code, and/or be seen as an error coming back from the API.\n. Don't test via hitting private methods. Instead, hit the public store method, and interact with it.\n. While there are plans to return a proper token object from store, we don't today, so I don't think this adds value. Just return the actual token string in the Response#authorization.\n. Can you split this into two methods, one for adding to a request, and one for creating a token? I think that'll make the code clearer.\n. I see use of and and or a lot, which often doesn't do what you want. Instead use && and || exclusively.\n. Is tokn a typo? Or that's really the match?\n. @fred not sure what you mean, since an authorize shouldn't settle/capture until capture is explicitly called, right? The goal of void in ActiveMerchant is to \"cancel\" an authorize that hasn't yet been captured - can Omise do that?\n. As @girasquid says, just drop void if you don't support canceling auths.\nFWIW at @spreedly we've seen that some merchants get complaints if auths aren't cleaned up when possible, since customers (especially those with debit cards) aren't clear on why there's a hold on $X on their card for a while.\n. ActiveMerchant is intended as an abstraction across gateways; the Response#authorization returned from a store call should contain a token (String) that can be passed to purchase (and authorize) in place of a CreditCard for future charges. ActiveMerchant does not care or have any first-class representation of a customer record; it only deals in specific payment methods (credit cards, tokens) and transactions against those payment methods.\nYou can also return whatever you'd like in the Response#params Hash, so if there's a customer id or similar you want it should go in there for anyone using ActiveMerchant who doesn't mind gateway-specific entanglements.\n. Also, FWIW, I wouldn't use the Stripe adapter as an example of good ActiveMerchant practice. It's kind of a bloated mess these days. I'd look at gateways like NMI, eWay Rapid, and Balanced (even though it's going away, :cry:).\n. This is actually the change that precipitated the need for more explicit version handling @girasquid; customers using freshly created Stripe accounts are broken today on Spreedly when passing a statement descriptor due to the floating version requirement. These changes should make this a non-breaking change.\n. @girasquid yes, since the version is specified/locked in the request, the request is handled on the latest version of the API.\n. Adding options to this method signature is no longer necessary, right?\n. :+1:\n. Please list out countries individually; this should reflect countries that merchants can get a SecurionPay account in.\n. Don't save options off, just use them via @options.\n. Why is store calling verify? Can you ditch the MultiResponse and just make a single call to store a card?\n. This shouldn't be a public method.\n. Why is store doing an update? Simplify to just doing a store please.\n. Maybe this is really what store should be? Regardless, this should not be a public method.\n. The !payment.respond_to?(:number).\n. Lets just expand this out; we prefer explicit to implicit. So assign each thing vs. using update/slice.\n. Not a fan of adding speculatively and then deleting. Should only get added if needed.\n. Tests should only rarely be checking Response#params. Rather, check the common attributes on Response - authorization, message, avs_code, etc.\n. As per above, create_token should not even be a public method. Though I'm wondering if it's properly store, and the current store is out of scope for ActiveMerchant.\n. Partial capture doesn't work?\n. The primary purpose of void in ActiveMerchant is to cancel authorizations - does it work for that? Can you test that scenario, please?\n. update in ActiveMerchant is for changing card details stored under a token. It's totally optional, so if SecurionPay doesn't support that, then I'd just drop it.\n. This is overkill.\n. I have no clue what this is, but doesn't look relevant.\n. Is it possible to have responses never be gzipped? Perhaps via an Accept header?\n. Oh so for realz.\n. @rwdaigle it's just a silly API; basically shoe-horning a non-3DS flow onto a 3DS-centric flow.\n. @rwdaigle I'm considering it sensitive since I don't know how they've constructed it; if it's done naively, then it's probably trivially reversible.\n. @szajbus any feedback on my comment RE void-ing authorizations?\n. @szajbus per my comment above, update as implemented does not match the correct API. Either remove or fix please.\n. This is not a supported ActiveMerchant public API. Remove.\n. @masaruhoshi is there a particular style guide you're targeting? In general we haven't enforced a style guide on AM, so I don't think these tweaks are necessarily germane.\n. @duff generally we've reversed this, and first checked respond_to?(:number) to see if it's a credit card, then assumed it's a token otherwise. Not sure if you care :grin:\n. @duff so annoying that a CIM capture is different!\n. is_a? checks are problematic, since it's common to define your own \"quacks like\" payment methods. Can you use a respond_to? instead?\n. I dunno, but bare split always feels risky to me.\n. @duff all these lookups look the same - maybe a little helper method?\n. So the fact that Response#authorization now has three elements won't break existing stored authorizations?\n. Why == true? I'd expect a simple truthy check would suffice?\n. Same.\n. Per AM's standard API, this should be update(identifier, options={}). I'm guessing identifier would be customer_number?\n. @rwdaigle correct, I don't like remote tests that always fail. I'll clarify the comment.\n. @rwdaigle L3 data is NUTSO, so what we did with CenPOS and are proposing with this gateway is to allow the customer to pass it through in a blob vs. us trying to parse it and support it as distinct fields.\n. Since test_url and live_url are the same, how are test requests distinguished from live requests?\n. Credential names should map as closely as possible to the gateway's nomenclature, so I'd use gateway_username and gateway_password.\n. Remove, this is handled by super.\n. High-level per-method comments are fine, but please strip out the intra-method comments.\n. Don't scrub non-sensitive credentials like user name since they're super useful for debugging.\n. It's fine to not support :currency, you can just delete these comments/commented code.\n. Typo?\n. Looks like api_key and password aren't needed, so please remove them from the fixture.\n. Please don't append time like this; it's expected that order_id must be unique.\n. Fix whitespace? Not going to mark each place, but please review the whole patch for whitespace.\n. OpenSSL::SSL::VERIFY_NONE cannot be used in ActiveMerchant.\n. Can you re-work these functions to be idiomatic Ruby? Naming, etc.\n. Why are all the tests commented out now?\n. This should be refund not credit. credit does an unreferenced push of funds to a card.\n. All options should be Ruby-style with underscores rather than camel case.\n. ActiveMerchant doesn't allow non-standard options to be required, so for merging merchant_transaction_id must be made optional and/or mapped to a standard option like order_id.\n. Not a fan of using __method__ like this. Just replace with an explicit reference to the method name.\n. Cart and line item support are out of scope for ActiveMerchant. Please remove.\n. Please remove all commented out code.\n. This doesn't seem to add value, since it's exactly the same as the values in PayuLatamGateway. Further, what is the difference besides currencies and countries between PayU Colombia and PayU Latam in general?\n. void in ActiveMerchant is intended to reverse an authorize, so this doesn't seem useful without authorize support.\n. I don't think this will work since there is no authorize support?\n. This is outside the scope of ActiveMerchant's public API. Please remove.\n. @avenuestest do you work for or with CCAvenue? If so, you should let them know that reusing the same IV makes this encryption very vulnerable: https://en.wikipedia.org/wiki/Initialization_vector#SSL_2.0_IV.\nOn the plus side, it's useless extra work anyhow since the communication is over TLS, so I'll still consider inclusion of CCAvenue in ActiveMerchant.\n. @ao 3DS is out of scope for ActiveMerchant, so it should probably be in your own code or a separate library.\n. Please use a standard random value generator; in Ruby, use SecureRandom.\n. @rwdaigle some gateways do actually support it as part of the public AM API; that said, I think it's hard to support consistently so I'm :+1: on not making it part of the standard suite of AM methods we implement.\n. ",
    "ZenCocoon": "Here's an example I'm personally using:\n```\nclass ActiveMerchant::Billing::OgoneGateway\n  def self.credential_model\n    credentials = ActiveSupport::OrderedHash.new\n    credentials[:login] = { :as => 'string' }\n    credentials[:password] = { :as => 'password' }\n    credentials[:user] = { :as => 'string' }\n    credentials[:signature] = { :as => 'string', :required => false }\n    credentials[:signature_encryptor] = { :as => 'collection',\n      :values => ['sha512', 'sha256', 'sha1', ''], :required => false }\n    credentials\n  end\nend\nclass ActiveMerchant::Billing::PaypalGateway\n  def self.credential_model\n    credentials = ActiveSupport::OrderedHash.new\n    credentials[:login] = { :as => 'string' }\n    credentials[:password] = { :as => 'password' }\n    credentials[:signature] = { :as => 'string' }\n    credentials\n  end\nend\n```\nP.S. : The goal of the ordered hash is to request the authentication details in the desired order.\n. I'm using this situation at BookingSync where our customers can manage their payment gateway of choice, ... pretty much the same way Shopify does. Spree is also using something similar on their side.\nAs far as I know AM goal is to bring a consistent API for payment gateways and so far the authentication part is still untouched. Due to the diversity used by the gateways, not much can be done, but a credential model feels like a nice approach to bring API to this level as well.\nI understand your need to have additional metadata for each gateways, depending on your application needs, and do agree in this case that they belongs aside on your own gem or app. In my opinion AM should keep the minimum while enough for everybody to use consistently, credential model being part of it.\nWould be nice to have more opinions and thoughts on this one ;-)\n. Any news on this issue? I do face the same issue on my side.\n. Hi, what's the status of this push request ?\nIs support for rails 3.x versions still planned under ActiveMerchant 1.x ?\nLooking forward to use ActiveMerchant under 3.1 and now 3.2\n. @ntalbott What's your position on this one?\n. As @tobi mentioned about a year ago \"Forward compatibility with 3.1 is more important then backwards compatibility with 2.3 i think\". Would be great to have some feedback from the Shopify crew. Ping @codyfauser @jduff @titanous @odorcicd \n. This fix is also part of the pull request https://github.com/Shopify/active_merchant/pull/50\nPatch required for all Ogone accounts created after May 10 2010.\n. Merged with https://github.com/Shopify/active_merchant/pull/85\n. Merged with https://github.com/Shopify/active_merchant/pull/85\n. This as been merged with other updates and fixes at https://github.com/Shopify/active_merchant/pull/85\n. Right! thanks for your patch.\nI've updated the error message returned on invalid authentication, can you double check the remote tests on your side to make sure it's touch all accounts. The Ogone helpdesk was rather uncertain regarding the update of this error message.\n. This pull request has been improved and updated at #198 . A merge in Shopify/master would be more than welcome.\n. That would be really useful to us at BookingSync as well. Looking forward to hear from Shopify guys ( @jduff @odorcicd ... ) on that.\n. @michaek I'm curious to know why this can't be merged. What would break ? The additional I18n dependency makes you trouble ?\n. Hmm I see, I guess this patch might need some updates. It's is pretty old but I guess updating it is not the current issue, the main question remaining is whether this update have it's place into activemerchant.\n. I'm on it right now @rymai\n. @rymai, I just made a few extra changes at https://github.com/ZenCocoon/active_merchant :\n- Note to explain how to test custom currencies\n- Option to allow custom ECI value\n- Merge with Shopify master\n. @rymai, I just added a note explaining the need to get the 3D Secure option activated by Ogone.\n(In my case, they had to change my credit card provider in test as well, from CIC to HSBC)\nI've also added a small cleanup in the 3D Secure code\nLast patch available at https://github.com/ZenCocoon/active_merchant\n. Wonderful, thanks a lot for your work @rymai .\nI now hope that @codyfauser or @tobi will have time to check this patch to bring it up mainstream as this updates are mandatory for Ogone users.\n. Thanks for your review John.\nI will squash this commits and reorder them into topic branches within the next days.\nThanks again for your time.\n. I'm actually breaking things a little more :\n1) signature procedure\n2) 3d secure\n3) custom ECI\n4) global currency\nDoes that sound reasonable to you ? It feels a little more clean than integrating to much things per patch I think.\n. Ok, I keep moving this path then.\n. Regarding the 3D Secure patch, I'll wait this 3 first to be finalized and applied to avoid to much conflicts.\n. Hi @rymai, sadly not, it's been well busy lately but do keep this issue in mind. I understand your desire to get back to the core ActiveMerchant fork.\n. Would not be a problem for sure ;-)\nAnyway, I have an hour now so started a feature branch for it at https://github.com/ZenCocoon/active_merchant/tree/ogone_3dsecure\nI'll be pushing the first updates soon so we can work on top of that.\n. @rymai : Still missing a test case to ensure 3D Secure options are properly handled but the rest is now ready and tested : https://github.com/ZenCocoon/active_merchant/tree/ogone_3dsecure\n. 3D Secure patch added at #268\n. Correct, this one can be closed. Thanks for following on that.\n. Regarding created_after_10_may_2010 it's an option we must keep as optional. It's actually to be just introduced in the official repo and can't force previous users to migrate by force without any warning and backward compatibility measures.\nHowever, I would also recommend adding deprecation warnings for this 3 options and therefore push forward to more secure systems and prepare for future cleanup.\n. CAREFUL, FAILING TESTS.\nJust pushed this update including deprecation warnings unless using signature and signature_encryptor to sha512.\nStill missing the way to properly test the signature without relying on publicize_method I'm open to ideas and solutions.\n. @odorcicd do you like this approach? It still test private methods but without violent hack ;-)\nHow else would you do without testing the private method itself?\n. If using send is fine, then here is it with all tests passing.\n. I've removed the use of publicize_methods and squashed commits. That one should be ready to go.\n. Hold on, It miss remote tests here ! I'll add this and squash things up.\n. Ok, I think this time is the one. Please let me know if you see anything missing or that can be improved.\n. Yes, I'll take care of this. Thanks for the update\n. Moved to a cleaner patch at #350\n. Hi @joelcogen , that's a good idea to add store and unstore !\nYou can find some examples at:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/smart_ps.rb#L111\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/trust_commerce.rb#L274\nThey usually the option billing_id has Ogone's Alias.\n. @rymai you might like to have a look on this one.\n. Looks great to me overall, just a few notices:\n1) unstore. I believe we could define the method but doing nothing (returning a successful response anyway ?), that would be more consistent over all gateways and make gateway swap either. The other way, as you propose, is to leave it undefined, that's what payment_express does. No idea what's preferred by AM core members.\n2) store vs billing_id: store have to remain for backward compatibility but billing_id feels like the most common option over gateways using the store functionality:\nbeanstream: ?\nbogus: billingid\nbraintree_blue: customer_vault_id\neway_managed: billing_id\ninspire: billing_id\nmerchant_e_solutions: ?\npayment_express: billing_id\npaystation: token\nquickpay: ?\nsmart_ps: billing_id\nstripe: card\ntrust_commerce: billingid || billing_id\nShall we use both ? billingid as well ? That can get really dirty... Would be good if AM 2 pushed forward cleaning this up and get a more consistent API.\n3) I agree and do prefer to return similar objects, much cleaner. An extended response feel better to me so it can also have a billing_id (or store, alias, ... ;-) ) method for cleaner alias recovery. What do you think ?\nI believe this way is also more future proof in case of gateway update.\nWould be good to have an insight from AM core member regarding the preferred way to recover billing_id from a store. Any work done on this for AM 2 ?\n4) What do you think about adding a few unit tests as well ?\nThanks for your great work Joel.\n. Thanks for that @joelcogen Let's me know if you like my opinion or review something.\nGot your point about the recurring @ntalbott, that make sense and understand Shopify doesn't care much about this as it's a feature they use only for their gateway I guess. Sounds like a good project for Spreedly ;-)\n. Looks perfect, thanks a lot for your work @joelcogen\n. Done.\n. thanks for your help @rymai \n. I dont have any Moneris access (only from the fixtures, which works for remote tests) neither documentation. It's hard to know what should be used as crypt_type.\n. Thanks to all for such fast reaction.\n. Long time have passed, yet someone might still benefit from this.\nThis certainly comes from the ALIAS attribute missing in the response. This DirectLink params can be defined in Configuration > Technical information > Transaction feedback > DirectLink > Dynamic parameters.. @rymai interesting addition, I've not faced this issue so far but are glad to see it well addressed, thank you.\nI've made the remote tests for all Ogone SHA encryptors ( sha1, sha256 and sha512 ) and all goes fine.\n. Good catch, it's now updated\n. Good call. Thanks for pointing that out.\n. That won't work sadly.\nThe signature option is used to store the signature key used to sign requests, it's like an additional password. Therefore as we can't find out the SHA encryption (SHA1, SHA256 or SHA512) based on this signature key we need an additional parameter, signature_encryptor to define it explicitly.\n. For remote tests, testers will need to explicitly adapt the fixture to include this option, like signature and signature_encryptor actually.\nWhat do you recommend then ?\n- Removing this options from the fixture even if required to do remote testing\n- Adding this options in the fixture with default values\nIt's a subject we approached with @rymai and actually come back on my position. Removing this options from the fixture might make it more complex for testers to get setup and default can still be tested under unit tests.\n. Good catch, I'll fix this up!\n. The problem we have here, is that older accounts doesn't use the signature the same way, at least by default. They simply add it at the end of the joined parameters, then encrypt this string with the SHA encryptor, while newer accounts include the signature between each params, this time again prior encryption.\nI've just spoke with Ogone regarding this old system and as much as they want to push users to move to this new solution they still do not force the transition and does not have deadline for it (at least speaking to the French technical department).\nFor any one having an old account, prior to 10 Mai 2010, you can, and actually should, move to this new solution within Ogone administration at \"Technical information\" > \"Global security parameters\" and selecting \"Each parameter followed by the pass phrase\".\nOn our side, as much as I don't like this option it still seems required for backward compatibility reason.\nIf this breaking can be tolerated, and well warned for anyone updating, I would also recommend to force the signature usage as it's much more secure and unless proven to bring issues, to also push the encryption to SHA512.\nThis would keep the configuration much lighter and push to secure conventions instead of heavy configuration files.\nWhat choice would you rather go with ?\n. @rymai, is there a reason for removing this test ?\n. ok, I'll bring it back then.\n. It requires active_support/core_ext/object/conversions to be compatible with activesupport 2.3.11, under 3.0 active_support/core_ext/object/to_query would be enough.\nShall we go with conditional requirements ? Not sure what's the best way to deal with this actually.\n. What about this options created_after_10_may_2010, signature and signature_encryptor? shall we start using deprecation warnings for accounts not using  a SHA512 signature and updated to new signature usage.\nThis discussion is the following of https://github.com/Shopify/active_merchant/pull/198/files#r191560\n@jduff @odorcicd : What is the practice you would like to adopt?\n. require 'active_support/core_ext/object/conversions' is good enough but still over require in some case. Details at https://github.com/ZenCocoon/active_merchant/commit/ef630af2214faf75d4ce5afe659d58dd10c82000#L0R28\n. Following up with this at https://github.com/Shopify/active_merchant/pull/213/files#L1R36\n. Yes, that sounds good. I like this way.\n. The problem with expecting @gateway.expects(:add_pair).with(anything, 'SHASign', digest) is that it catch all add_pair and then break the signature generation.\nDo you have a special trick maybe to keep other add_pair passing through ?\n. My bad, fixing that ;-) Thanks for the catch\n. ",
    "msheakoski": "I submitted this patch to Lighthouse. Please refer to https://jadedpixel.lighthouseapp.com/projects/11599/tickets/192-patch-paypalnotification-fixed-custom-not-mapping-to-item_id-when-item_number-is-blank instead.\n. I submitted this patch to Lighthouse. Please refer to https://jadedpixel.lighthouseapp.com/projects/11599/tickets/193-patch-paypalnotification-received_at-does-not-correctly-parse-paramspayment_date instead.\n. ",
    "vitkoz": "This is still an issue. Documentation shows Time.parse params[:payment_date] which is definitely incorrect.\nTime.parse \"16:56:00 Jan 01, 2013 PDT\"ends up being 2013-01-02 16:56:01 -0500\nThe suggested gist will work. Here is the link to a blog post about it, though. \nhttp://rhnh.net/2008/03/17/paypal-ipn-fails-date-standards\n. I found it to be a bit puzzling - it looks fixed as stated, but no matter\nwhat I do, i get the version of gem where it was still not fixed.\nSo, I have no idea what the problem is.\nOn Fri, Jan 11, 2013 at 3:32 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nI'd gladly review and merge a Pull Request that fixed this, doubly so if\nit came with a unit test. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12162142.\n. I think I get 1.0. and it doesnt want to load anything else.\n\nOn Friday, January 11, 2013, Nathaniel Talbott wrote:\n\nYah, looking at the current code, it appears that it is using strptimenow, not\nTime.parse. What version of the ActiveMerchant gem are you using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12163013.\n. Il give it a trt and report back. thank u!\n\nOn Friday, January 11, 2013, Nathaniel Talbott wrote:\n\nAre you using Bundler? If so, try specifying a version like so:\ngem \"activemerchant\", \"~> 1.29.3\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12164977.\n. Unfortunately, I didn't have a chance to check it until today :\n1. I am definitely running 1.29.3 version - verified it on heroku\n2. I ran a transaction on PayPal at 5:17 PM EST, and ActiveMerchant gem\n   recorded it as 01/21/2013\n   09:17 AM\n\n:(\nOn Sat, Jan 19, 2013 at 5:32 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\n@vitkoz https://github.com/vitkoz I'm going to assume this was resolved\nby using the correct version of ActiveMerchant.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12462438.\n. PayPal IPN response is PST zone (that's what PayPal sends me).\n\nActiveMerchant - I'm not sure, I have to test.\nOn Tue, Jan 22, 2013 at 8:59 AM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nThat sounds like a timezone issue; what's the timezone on the time\nreturned by ActiveMerchant? And what's the time zone on the string being\nreturned by PayPal?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12545343.\n. OK, here it is:\n\nPayPal sends 13:38:14 Jan 22, 2013 PST string\n\"#{notify.received_at.to_s} :: #{notify.received_at.zone}\" where notify is\nPaypal::Notification produces 2013-01-22 13:38:14 +0000 :: UTC as a result.\nOn Tue, Jan 22, 2013 at 10:28 AM, Vitaly Kozadayev vitkoz@gmail.com wrote:\n\nPayPal IPN response is PST zone (that's what PayPal sends me).\nActiveMerchant - I'm not sure, I have to test.\nOn Tue, Jan 22, 2013 at 8:59 AM, Nathaniel Talbott \nnotifications@github.com wrote:\n\nThat sounds like a timezone issue; what's the timezone on the time\nreturned by ActiveMerchant? And what's the time zone on the string being\nreturned by PayPal?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/542#issuecomment-12545343.\n. \n\n",
    "TylerRick": "I've fixed a few bugs and am working on improving it in my fork here: http://github.com/TylerRick/active_merchant\n. ",
    "tomblomfield": "I'd really love an Adaptive Payments Gateway\n. ",
    "nickhoffman": "Hey guys. What's the status of split and chained payments with PayPal Adaptive Payments?\nI see that the ActiveMerchant::Billing::PaypalAdaptivePaymentGateway class hasn't had much love in a while.\nShould people use ActiveMerchant::Billing::PaypalAdaptivePaymentGateway, or is there another class, gem, or solution?\n. Bump!\n. ",
    "krzkrzkrz": "Yea whats the status of this? Would be great to have this solution as well. +1\n. ",
    "m3nTe": "hey guys, any good news??\n. ",
    "glebm": "Did you get my pull request?\n. Yeah, it does, awesome\n. ",
    "jstorimer": "Thanks for the report. Your solution is almost there but misses one use case, Rails 2.3.8 with the rails_xss plugin. This is what Shopify uses. In that case Strings will respond_to :html_safe but we still need to use the concat() call as the 2.x series still uses <% %>.\nHow about keeping the current implementation with concat() but changing the helper to return an empty string? That way only the concat() will output text to the screen. It's not a perfect solution but it should work with both 2.x and 3.x. Thoughts?\n. Hmm, checking the Rails version isn't a great idea. ActiveMerchant doesn't depend on Rails. It's quite possible that someone is using ActionPack with another framework and not using Rails at all.\nCan you change it to check the version of ActionPack instead?\n. Thanks for this :) I just changed the formatting a bit and pushed it to master.\nhttp://github.com/Shopify/active_merchant/commit/1ee89a70d1f0677be3677c785c8be28d6cbfd4be\n. This looks good, but we need to maintain support for Rails 2.3.x, can you confirm that this still works there?\n. But in this case the form is being submitted to an external server correct? If they receive this unexpected field then it improperly calculates a signature?\n. I believe you need to manually require the view_helper file and include it in ActionView::Base. Like so:\n``` ruby\nrequire 'active_merchant/billing/integrations/action_view_helper'\nActionView::Base.send(:include, ActiveMerchant::Billing::Integrations::ActionViewHelper)\n```\n. Yep. Moved to #952. Thanks @Soleone \n. Thanks gents.\n. I didn't see any examples in the thousands, so I can't say for sure.\nLooking around I see that the Maksutara gateway will return a comma-delimited amount from its Notification#gross, but I feel like the spirit of AM is to try to normalize these kinds of concerns across gateways so the same format is always returned.\nSo AM depends on the money gem, are you suggesting we use Money.parse here in #gross?\n. Totally agree. I don't think I can re-open this, so I'll send a new PR and add you.\n. I haven't closed this yet because @Smcchoi brought up a good reservation. Although sub(',', '.') is brittle, Money.parse may be too permissive.\nIf you have a look at the specs for the money parser, it allows a whole lot of different formats. In this case, it turns out that Valitor gave us the transaction amount in a format we didn't expect and the code broke. That was probably a good thing. It gives us a chance to review the format(s) that Valitor is using and make sure that we convert it to the expected value.\nIf all the Notification#gross methods were to use Money.parse, it's possible that an unexpected format like this shows up from a gateway and gets passed through incorrectly without anyone noticing. In this case, I'd prefer to find errors from brittle code rather than passing through the wrong dollar amount because our parser was too good.\nDo you guys agree?\n. :sparkles: :heart: :sparkles: \n. ",
    "goodwill": "hmm.... both would work. Or just do version detection on rails- I guess we can distinguish by the rails major version on how that works.\n. I have added the fix- use really cheap method- just check Rails.version[0], cheap but guess that would be safe enough.\n. cant find a routine for that, will use your #2 approach instead.\n. ",
    "celeduc": "Thanks Jeff.  Maybe the guy we paid to write the code in the first place will write those tests. Hollow laugh...\n. ",
    "brycemcd": "I'm using Sinatra and receiving this error:  http://gist.github.com/584471\n. ",
    "jwarchol": "I thought ActiveMerchant 1.8 was supposed to work with Rails 3?\n. :+1: I'd like to see this move forward. The new style error generation (zip-code etc) is much easier to test than the old style that relied on the charge amount matching the error code desired. The code @alanandrade has looks like it doesn't change any current default behavior. It just adds the option of sending requests to the test server (sandbox) not marked as a test. \n. Using Time.new with its offset parameter seems cleaner to me. The parsed_time_fields variable here has an :offset entry already too. I didn't do that in this PR because the resulting time object does not have a zone set, though it is the UTC time. At least on the ruby version I was testing with. Since that technique didn't pass the same test format (which expects UTC or GMT), I did the minus operator change instead. \n. @ntalbott Whenever you have a moment, could you eyeball this fix for your previous patch?\n. ",
    "quadule": "I have a fork that uses ActiveModel for validations, removing Validateable. I've just been meaning to go over the tests again before I submit a pull request, but give it a try if you want.\n. It doesn't work unfortunately, as ActiveModel requires ActiveSupport 3 which conflicts with the app's ActiveSupport 2.\n. Sure, done.\n. I'd be happy to update this patch again once the project's ready for it.\n. ",
    "jdcrutchley": "I used this patch instead.  It seemed ActiveMerchant should return the same as built-in Rails stuff - i.e. a list of validation errors versus just the first one.\nActiveMerchant::Validateable.module_eval do\n    def errors\n        @errors ||= ActiveModel::Errors.new(self)\n    end\nend\n. Confirmed:  Calling errors[:someattribute] on an ActiveRecord object will return an empty array if there are no errors for :someattribute.  Calling the same on the CreditCard object will return nil which throws off the form helpers.\n. Duplicate of jwarchol's and quadrule's issues - closing.\n. ",
    "sj26": "Also interested, seems to be because the errors object doesn't default to returning an empty array for a particular method's errors, instead returning nil. This is particularly problematic when trying to present a form for a credit card.\nSource: https://github.com/rails/rails/blob/v3.0.4/actionpack/lib/action_view/helpers/active_model_helper.rb#L62\nSpecifically, error_message or object.errors[@method_name] is returning nil causing #any? to raise an exception.\nHere's the monkey patch I'm using:\nActiveMerchant::Validateable::Errors.class_eval do\n  def [](field)\n    super || (self[field] = [])\n  end\nend\n. ",
    "mdeering": "+1\n. ",
    "eric1234": "+1\n. I no longer work on this code. Will close it. If anybody want to take it up they can of course.. ",
    "tobi": "Dennis, i think we can start requiring Rails 3 in the close future. Definitely by the time 3.1 is released. Forward compatibility with 3.1 is more important then backwards compatibility with 2.3 i think. ping @codyfauser \n. This looks good.\n. Are you sure that you are running the latest version of ActiveMerchant here?\n. looks good. \n. Great patch. Ping @codyfauser. \n-- Tobi\nCEO Shopify\nWritten with thumbs. \nOn May 9, 2011, at 8:22 PM, wolframarnoldreply@reply.github.com wrote:\n\nPayflow Express payments (the redirect to the PayPal screen), did not support order line items though ActiveMerchant so far. I've added them. It took quite some trial & error to get this sorted out, and needs to be enabled from the PayPal Tech Support side, but it is supported, and I've documented the process.\nI've also documented all supported fields extensively in the PayflowExpressGateway class, which parses nicely via rdoc.\nFor credit card reference transactions, I've added additional fields that PayFlow will accept. Notably the Comment and Comment2 are important, as they get passed through to the backend and are helpful for reporting purposes.\nLastly, I'm also populating the CustRef attribute with the value of options[:customer], which gives you a customer reference passed through to the backend (at manager.paypal.com) for better reporting.\nIf you want me to open a LightHouse issue as well, please let me know.\nThanks,\nWolf\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/110\n. Beautiful. \n\nWritten with thumbs.\nOn 2011-05-12, at 11:52 AM, titanousreply@reply.github.com wrote:\n\n\nupgrade current cacert bundle\nimplement a rake task / test suite that goes through each gateway and verifies that each contained endpoint can be connected to with VERIFY_PEER mode. (requires a consistent setter/accessor for the gateway's URLs)\ncheck all gateways that are using ssl_strict = false and ensure that we can change them to ssl_strict = true\nlogger.warn any use of ssl_strict = false in the connection lib\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/114\n. merci!\n. :+1::dash:\n- tobi\n  CEO Shopify\n\nOn Fri, Jan 11, 2013 at 4:41 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nAs per discussion with @codyfauser https://github.com/codyfauser; I'd\nalso propose simplifying the project description to:\nActive Merchant is a simple payment abstraction library extracted from\nShopify. The aim of the project is to feel natural to Ruby users and to\nabstract as many parts as possible away from the user to offer a consistent\ninterface across all supported gateways.\nPlease review @codyfauser https://github.com/codyfauser @tobihttps://github.com/tobi\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/547#issuecomment-12164920.\n. \n",
    "anlek": "Any chance this can be pulled into master? Or at least a work around for this?\n. ",
    "wolframarnold": "+1\n. @tobi -- thanks. Glad to help. ActiveMerchant is a fantastic resource.\n@codyfauser -- I'd like to see this included. Let me know if you need\nanything else.\nWolf\nOn Wed, May 11, 2011 at 9:19 PM, tobi \nreply@reply.github.comwrote:\n\nGreat patch. Ping @codyfauser.\n-- Tobi\nCEO Shopify\nWritten with thumbs.\nOn May 9, 2011, at 8:22 PM, wolframarnoldreply@reply.github.com wrote:\n\nPayflow Express payments (the redirect to the PayPal screen), did not\nsupport order line items though ActiveMerchant so far. I've added them. It\ntook quite some trial & error to get this sorted out, and needs to be\nenabled from the PayPal Tech Support side, but it is supported, and I've\ndocumented the process.\nI've also documented all supported fields extensively in the\nPayflowExpressGateway class, which parses nicely via rdoc.\nFor credit card reference transactions, I've added additional fields that\nPayFlow will accept. Notably the Comment and Comment2 are important, as they\nget passed through to the backend and are helpful for reporting purposes.\nLastly, I'm also populating the CustRef attribute with the value of\noptions[:customer], which gives you a customer reference passed through to\nthe backend (at manager.paypal.com) for better reporting.\nIf you want me to open a LightHouse issue as well, please let me know.\nThanks,\nWolf\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/110\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/110#issuecomment-1144586\n\n\nwww.RubyFocus.biz --- San Francisco --- direct: 650-576-9048\n. @titanous -- No, it's actually not a dup of #110, but an addition to #110, which I started off the tip of the #110 branch. Sorry for the confusion. Maybe I should have held it back until #110 was merged.\nPlease merge this as well. In #110, the comment stuff was started but didn't fully work yet. In this patch, it's been tested and works, and documentation has been updated.\nThanks,\nWolf\n. +1\n. ",
    "spiffistan": "+1\n. ",
    "itamar": "+1\n. ",
    "zenom": "Re-looking at tests, gonna close this until I am 100% sure tests pass.\n. Nope, never heard anything from anyone.\n. Excellent, thanks.\n. ",
    "stefanobernardi": "Has this been pulled?\n. ",
    "courtland": "I am also using this offsite integration and would really like to see it added to the official active_merchant. \nHere are the relevant forum threads for reference:\nhttps://jadedpixel.lighthouseapp.com/projects/11599/tickets/16-patch-\nhttp://groups.google.com/group/activemerchant/browse_thread/thread/94e166111ae0d7fc\nI am willing to help with whatever is necessary to get this accepted.\n. For what its worth, I'm still using this fork/patch with success at a number of Authorize.NET SIM deployments. Also using the same forked/patched copy of active_merchant at ad hundred or so other sites using regular Authorize.NET, PayPal Website Payments Pro, PayPal Website Payments Standard, and a few other of the supported gateways. \n. My repo is a fork of rdp's, and I periodically sync with the shopify/master branch.\nI've re-based with shopify's master and submitted a pull request.\nhttps://github.com/Shopify/active_merchant/pull/280\nDoes that help?\n. I did not author the Authorize.Net SIM patch, which was created by rdp over a year ago, but I can try to address your comments unless rdp chimes in and wants to. Thanks.\n. I believe I've addressed your comments somewhat adequately. Unfortunately it took two commits. Please take a look. Thanks.\n. I couldn't get squash to work nicely, so I created a new branch and pull request. See #287.\n. Thanks!\n. According to Authorize.Net SIM docs they are NOT ignored. I will update comments accordingly.\n. I'm cleaning up the comments and removing those that I felt were unnecessary, although some of the ones inside the methods seemed informative enough to keep around.\n. Sure. See additional commit.\n. ",
    "rubenfonseca": "+1 to this one, although there are a lot of changes with just space lines. thank you!\n. ",
    "alhafoudh": "+1 great! we need this\n. ",
    "masone": "+1\nI would love to see this being merged.\n. ",
    "bobbus": "+1 would be great to merge\n. ",
    "jgubman": "Tobi, can you pull this into master?\n. ",
    "pjammer": "I've confirmed this too.  Not sure why.\n I also checked if it worked as it should in my current app, and it does.  It's using the 'old' active_merchant plugin, but calling that same code works perfectly.\nAlso, I'm not sure why you are calling the response class alone either?  Response is used at the end of request call to summarize what you get back.  Unless you are extending a new branch of PaypalExpress?  which doesn't make sense.\nGood catch. \nBut can y ou still make normal requests to Paypal Express?  I.e., does it screw it up when used in a normal 'commit'?\n. It is weird behaviour for sure.\nEspecially when the old active_merchant did not have this problem.  Unless it's a \"Constant\" thing that I've never seen before, in console.  I'm not sure how to debug this either.\nDoes this happen on other REsponses?  like BraintreeResponse or something?\n. What i was saying though, is that you could do this in the old activemerchant (no underscore) plugin.\nCalling any constant as we are, worked.\nThat means your tests would have worked whilst doing what you wanted.\nFor that not to be working now, makes me think something has happened to the code then, if it's not a function of using constants... which it doesn't appear to be.\n. ",
    "fguillen": "The issue is in testing. If I need to mock the ActiveMerchant::Billing::PaypalExpressResponse I can't not do it.\nAnd the most important, I can't use my own version of the BogusExpressGateway because the purchase method responses with a PaypalExpressResponse serialized in a yaml but if the code doesn't find the constant then the YAML.load returns a YAML object and not a PaypalExpressResponse.\nI have solved this issues just calling to ActiveMerchant::Billing::PaypalCaGateway before I need the constan PaypalExpressResponse because I saw in this file is where is starting to require the files where the PaypalExpressResponse is defined.\n. Not any problem to access to Constants defined on files on the folder billing/gateways:\nirb(main):001:0> require 'rubygems'\nirb(main):004:0> require 'activemerchant'\nirb(main):007:0> ActiveMerchant::Billing::BraintreeGateway\n=> ActiveMerchant::Billing::BraintreeGateway\nirb(main):008:0> ActiveMerchant::Billing::CardStreamGateway\n=> ActiveMerchant::Billing::CardStreamGateway\nirb(main):011:0> ActiveMerchant::Billing::JetpayGateway\n=> ActiveMerchant::Billing::JetpayGateway\nBut the Constants defined into the folder billing/geteways/sage are not available:\nirb(main):009:0> ActiveMerchant::Billing::SageCore\nNameError: uninitialized constant ActiveMerchant::Billing::SageCore\nNor the ones on the folder billing/geteways/payflow:\n    irb(main):010:0> ActiveMerchant::Billing::PayflowResponse\n    NameError: uninitialized constant ActiveMerchant::Billing::PayflowResponse\nNor the ones on the folder billing/geteways/paypal:\n    irb(main):014:0> ActiveMerchant::Billing::PaypalExpressResponse\n    NameError: uninitialized constant ActiveMerchant::Billing::PaypalExpressResponse\nI think what is hapenning is that this files are required only if the master class is called. For example I have not access to the constant PaypalExpressResponse but if I call to the PaypalGateway then the PaypalExpressResponse is already available:\nirb(main):014:0> ActiveMerchant::Billing::PaypalExpressResponse\nNameError: uninitialized constant ActiveMerchant::Billing::PaypalExpressResponse\nirb(main):015:0> ActiveMerchant::Billing::PaypalGateway\n=> ActiveMerchant::Billing::PaypalGateway\nirb(main):016:0> ActiveMerchant::Billing::PaypalExpressResponse\n=> ActiveMerchant::Billing::PaypalExpressResponse\nI think is ok but the problems happen when you want to do special things like in the test I was talking about on my previous post.\n. ",
    "ericbeland": "Did anyone find a resolution to this? \n. ",
    "jeremysuriel": "I added unit tests and rebased against master.\n. What other test other than the test_verify below would you want to see?  https://github.com/Shopify/active_merchant/pull/45/files#L1R96\n. Got it, thanks.  Will add a unit as you described.\n. ",
    "jamesw": "Forget it.\nI found the cause of the problem in the paypaladaptivepay gem\nhttps://github.com/lamp/paypal_adaptive_gateway/issues#issue/8\nSorry for any inconvenience caused\n. ",
    "jcoby": "I figured as much but that goes against what the wiki says over at https://github.com/Shopify/active_merchant/wiki/Contributing and goes against what the code appears to be trying to do.  It really looks like the line needs to be updated to format call to_s if the format is :dollars and do the divide by 100 and format to 2 places if the format is :cents.  And then the default money_format would need to be switched to :cents.\n. I see what's going on here.  I was thinking that money_format referred to the format that active merchant uses.  It's the format that the gateway uses.\n. ",
    "palladius": "Hi Ryan! I have a very similar error, when using Ajax/Prototype I get for this line:\n<% form_for :remote   => true do # It's now form_for with :remote => true option\n        #:url      => {:action => \"tag\", :id => detail }, \n        #:complete => \"Element.toggle($('#{form_id}'))\", \n        #:success  => visual_effect(:shake, \"contact-#{detail.id}\"), \n        #:update   => \"contact-#{detail.id}\", \n        #:html     => {:id => form_id, :style => \"display:none\"} \n        #:remote   => true \n    #    do\nThe following:\nundefined method `model_name' for Hash:Class\nExtracted source (around line #4):\n1: <% # Detail contiene il contatto ID %>\n2:  \n3:  <% form_id = \"tag-form-for-#{detail.id}\" %> \n4:  <% form_for :remote   => true do # It's now form_for with :remote => true option\n5:          #:url      => {:action => \"tag\", :id => detail }, \n6:          #:complete => \"Element.toggle($('#{form_id}'))\", \n7:          #:success  => visual_effect(:shake, \"contact-#{detail.id}\"), \n. ",
    "kamui": "I have the same experience with ActiveMerchant and Rails 3. In my case, I have this in the controller:\n@credit_card = ActiveMerchant::Billing::CreditCard.new\nand this in the view:\n<%= fields_for @credit_card do |credit_card| %>\n. I stil get this using 1.13.0. This worked in Rails 2.3, but looks like in 3.0 fields_for expects an active model object?\nactivemodel (3.0.7) lib/active_model/naming.rb:95:in `model_name_from_record_or_class'\nactivemodel (3.0.7) lib/active_model/naming.rb:82:in `singular'\nactionpack (3.0.7) lib/action_view/helpers/form_helper.rb:540:in `fields_for'\n. We're looking to support Braintree v.zero as well. Is something blocking this from getting merged?\n. ",
    "troessner": "Can somebody please apply this pull request?\n. The commit applies cleanly, however there is no gateway associated with it?\nNot sure how this can be of any use then?\n. ",
    "dasch": "I would really like to see this merged, as it would greatly easy the testing of subscription services.\n. For some reason I can send a pull request to the phpfog/active_merchant repo. I've committed a fix that renames the variable to my fork.\n. I'd like to see this merged, as the Quickpay gateway is currently not safe to use in test mode. Entering an actual credit card number will actually debit the card! \n. @titanous: can I get you to look this over. The test mode parts are essential, as testing Quickpay gateway interaction fails without this patch.\n. @titanous: I can pull out the whitespace stuff if necessary.\nThe problem is that the usual bogus credit card numbers used for testing are not allowed when not in test mode; the bug means that the Quickpay servers do not receive the testmode flag, and thus treat test requests as real ones. I struggled with this for hours, perplexed that none of the bogus card numbers were allowed, checking that I had set AM to test mode repeatedly, until I found the bug.\nAlas, I had then already tried using my own credit card info (doh!), and was billed $200 :-/\nIf this patch is not merged, it is simply impossible to properly test the gateway interaction.\n. I've stripped out all unnecessary commits -- this should be the bare minimum.\nI've also removed the require! call, although it would be a good idea to have it in place. The Quickpay docs specify which keys are required: http://doc.quickpay.dk/api/messagetypes.html\nShould I create a new pull request with the whitespace cleanup?\n. @anderslemke, can you rebase this on top of master? I've changed the testmode stuff to fix a bug; you may need to change your branch accordingly.\n. Did you run git rebase master?\n. I'm not quite sure what has happened then. If only the 3 commits you made yourself differ from the master branch, it shouldn't display all these commits.\n. @titanous: can you merge this as well? I'd like to improve the gateway further, but my commits would be tangled in whitespace changes.\n. @jduff, would you mind taking a look at this?\n. Okay then.\n. @mnoack: you need to manually edit respond_to? if you change method_missing. \n. @jduff: do you want to take a look at this?\nAlso, perhaps you should set up a dedicated docs repo/branch to which documentation patches could be submitted with less scrutiny. That should facilitate more doc authoring and simplify the merge process - simply merge into master periodically.\n. @jduff, I've squashed the last 3 commits into one and rebased against master.\n. I think ident is a poor name. I'd much prefer reference, or credit_card_or_reference, so there's no confusion. See the Quickpay gateway for an example of this.\n. I'll look into it soon -- is credit_card_or_reference suitable?\n. That's a pretty long line - perhaps split it in two?\n. ",
    "rymai": "Thanks, that's cool, now we have to wait that it's merged!\n. @ZenCocoon: I think you can close this pull-request, and ask for #198 (3-D Secure + Signature algorithm choice) to be merged now! :)\n@franciscoj: Please ask in #198 for it to be merged! Thanks in advance.\n. Did you have the time to try it @ZenCocoon?\n. Thanks, everything is now merged in my branch!\n. Thanks @odorcicd and @jduff for the comments! We will correct everything soon and propose a new pull request with squashed commits.\n. Yes, it would definitely be a good idea to split this in \"Support for new signature procedure\" and \"Support for 3-D Secure protocol\" since they're the 2 main new features of this pull-request.\n. :+1:, you're doing it right! ;)\n. Hi @ZenCocoon, did you find the time to work on this last pull-request for the 3D Secure support? :)\nIt'd be great to finally merge this new big feature (so I could get rid of using my fork)!\n. No problem! Let me know if you want me to take care of it! ;)\n. I can confirm that all tests pass for me, and I agree on adding a deprecation notice for signature_encryptor.\n. What about assert signature = @gateway.send(:add_signature, @parameters)?\n. Any chance to get this merged soon? :)\n. Ok cool, just FYI, we're already using this feature in production (just so you know that I consider it production-ready). :)\n. Thanks @ZenCocoon for the ping and thanks @joelcogen for the pull-request, that'll indeed be useful for me! :)\nI think the solution you've came up with is satisfying, I look forward having this in a stable release!\n. Awesome Joel, thanks!\n. Awesome, thanks very much guys!\n. Awesome, thanks!\n. Any chance to get this merged? :)\n. Bump! Any chance to get this merged? :) Thanks!\n. Awesome, thank you!\n. It should be :store and not :alias in this sentence. :)\n. I'm replying to https://github.com/Shopify/active_merchant/pull/198/files#r191546 here.\nYeah I think if @options[:signature] could replace if @options[:created_after_10_may_2010] safely here, what do you think @ZenCocoon?\n. I see (I started using Ogone after May 10, 2010 so I wasn't fully aware of this \"detail\" :)).\nSetting created_after_10_may_2010 to true by default is acceptable for me as long as we strongly warn users (or maybe we could not change this default right away but set a \"warning period\" before doing so?). Defaulting to SHA512 is ok too (I'm obviously already using it :)), but same concerns as for defaulting to the new signature usage.\nWe must avoid screwing too much people by changing defaults without prior warnings.\n. Hum, I don't think so, it must have been an error...\n. Totally agreed.\n. April or February? :)\n. ",
    "sumskyi": "no worries, this https://github.com/mm1/active_merchant/commit/555b49df61aef82dffc264ef4b5efac391130c93 one was already merged. \n. ",
    "kathgironpe": "Yeah you're right. It did fix my prob. Thanks!\n. +1\nThough this was not merged, it helped me.\n. @ntalbott this happens with Rails 4.1.2. I was running the test suite (RSpec) and that warning showed up.\n. @ntalbott thank you! Not super critical. Just noticed. A lot of other gems have this issue. \n. @ntalbott Cool! Well a lot of other gems have this warning. I just thought this was most important. By default, I no longer show the warnings. Thanks for the cleanup!\n. ",
    "bousquet": "I have similar local patches in my project.  Definitely needed.  Can I bump this or something?\n. Confirmed that it works in 2.3.10.  Looks like class_attribute was added last summer in this commit (2.3.8): https://github.com/rails/rails/commit/7b6383f2631aac1b83c5efbf3ffbcb90d3961023\n. ",
    "emmanuel": "@ntalbott \u2014 thanks for reviewing this pull request. I am no longer using ActiveMerchant's Authorize.net support, so I'm not in a position to update these patches. Hopefully their existence here in their current state will yet prove helpful to someone down the line.\nAlso, thanks for the feedback... but it left me a little confused. The three bullet points correspond 1:1 with each of the first three commits; would you want these commits split differently? would you want the commits split into 3 separate pull requests? Or is the blocking issue really the merge commit?\n. ",
    "robhurring": "just saw emmanuel's commits below -- closing this out\n. ",
    "HuntBurdick": "I am trying to integrate Lucy with Active Merchant. Wondering if anyone knows if this code is still valid?\n. ",
    "anathematic": "Derp - class method vs. instance method.\nDidn't spot that one.\nCheers!\n. ",
    "cgriego": "When will this be applied? Rails 3.1 is right around the corner and I hit these warnings today attempting to upgrade my company's application.\n. Note there are gateways that have been added since this patch was created that only need this fix like OrbitalGateway.\n. I created #113 as an updated pull request.\n. Thanks for merging! When do you think the next release will be?\n. ",
    "aaronchi": "+1 to apply this\n. ",
    "nicolasblanco": "@Soleone > I confirm that the live URL and live backup URL are still the same :).\n. With the old URLs there were 2 live production URLs and 2 live test URLs. Now there are still 2 live production URLs but only 1 test URL.\nSo now in test mode if the first attempt fails, it will just retry once with the same URL. I don't know if that's usefull or not... If you think that's useless, I'll modify this line.\n. OK.\n. ",
    "minter": "I ran into this as well - is this gem only for Rails 3?\n. ",
    "tommeier": "I've now updated this and added a periodic triggers with tests : \nhttps://github.com/Shopify/active_merchant/pull/124\n. Agreed - Though I'd prefer a second method, to keep it uniform in the same way as ActiveMerchant is implemented in other gateways, like braintree_blue, i've set triggered payments to be sent directly via a string on purchase (when a string or a number, trigger payment, when credit card send instant payment).\n. Finally - Added tests and cleaned up SecurePay AU gateway.\n. Working on it. Will create a new pull request with the cleanups, I did this ages ago...\n. NAB Transact only : https://github.com/Shopify/active_merchant/pull/285\nSecurePay AU only : https://github.com/Shopify/active_merchant/pull/286\n. Done : https://github.com/Shopify/active_merchant/pull/289\n. ",
    "franciscoj": "It would be great to have this merged mainstream :D\n. It would be great to have this mainstream...\n. ",
    "knapo": "Sent pull request.\n. Absolutely agree! Done.\n. ",
    "matthutchinson": "+1 on this request\n. The active_utils gem (which active_merchant requires) also has this problem.  A fix has been merged for that, but not yet released; \nhttps://github.com/Shopify/active_utils/pull/50\nSo that needs released first, then active_merchant gemspec should be updated to point to later fixed version of it.\n. ",
    "michaek": "I think this is a good idea and a good implementation, but it seems like it can't be merged at this point and another PR will be needed.\n. Maybe I'm wrong - I tried to run the patch against the current code and it couldn't find the chunks.\n. Yes, that is the question. I mean that I'm in favor of the change, but it will probably need a new pull request.\n. ",
    "cawel": "ntalbott: any idea when active_merchant will support i18n so that we can have translatable error messages?\n. ",
    "RKushnir": "@cawel :+1: \n. Any chances of this getting merged ever?\n. ",
    "troex": "This was really good implementation!\nI18n can be useful for English users too (I'm not speaking about the rest of the world!). Recently needed to make field names more friendly like Your credit card number is invalid, hacked based on this idea:\n``` ruby\nmodule ActiveMerchant\n  module Validateable\n    class Errors < HashWithIndifferentAccess\n      def full_messages\n        result = []\n    self.each do |key, messages|\n      next if messages.blank?\n      if key == 'base'\n        result << \"#{messages.first}\"\n      else\n        # result << \"#{key.to_s.humanize} #{messages.first}\"\n        object = @base.class.to_s.demodulize.underscore\n        result << \"%s %s\" % [I18n.t(\"activemerchant.#{object}.#{key}\", :default => key.to_s.humanize), messages.first]\n      end\n    end\n\n    result\n  end\nend\n\nend\nend\n```\n. ",
    "sunny": "+1 !\n. ",
    "skateinmars": ":+1: any news on this?\n. ",
    "Paveltarno": "+1 !\n. ",
    "nearapogee": "I printed out the LoadError message:\n    Unable to activate actionpack-3.0.4, because builder-3.0.0 conflicts with builder (~> 2.1.2)\nLooks like actionpack 3.0.4 and activemodel 3.0.4 were the ones specifying ~> 2.1.2.\nI used bundle exec to load the correct environment. \n. Thanks John -- I will smash all this into one commit. I originally wanted to delegate between the two interfaces as needed, but I figured I should get it out first to get this feedback. I will look at this tonight and see how we can delegate to each interface based on the credentials passed in.\nDo you have any other input on the interface? Or is it acceptable? I thought about trying to add a recurring and store method, but thought it would be less confusing, at least at first, to use the lower level methods. Do you have an opinion on this? I can take another stab at it.\n. Thanks for the comments John!\nThis pull request has been replaced by: https://github.com/Shopify/active_merchant/pull/178\nPlease see #178 for a clean, one-commit pull request. Thanks!\n. When do you need this by? (I should be able to get to it by this weekend.)\n. I'm getting to this tonight!\n. @joelvh Yes. I use USA ePay on on a daily basis.\nI actually want to update this pull request because I want to make a textual change as well as merge in some changes from another developer, who had an issue on the mailing list. I thought it would be easier to do it that way, since it takes some time to get pull requests reviewed, but looks like you beat me to the punch.\nShould I do my changes and and resubmit? Or do them in succession?\n. Sorry busy day yesterday. @ntalbott I think my questions were more so directed at you. Please see above. I am not sure @joelvh has changes, but he can speak for himself. As for me I have a couple more changes. Please let me know what would be best.\n@joelvh I'll try to answer any questions you have about USA ePay, if you have any.\n. @ntalbott thanks for the feedback! Do you prefer a single squashed commit always? I can do that, if you prefer.\nWas there any other clean up you had to do? Please let me know so I can be a better citizen. Thanks!\n. @ntalbott Got it. One change per pull request. Sorry about brand/type these were old commits -- I should have checked for that. I am a stickler for whitespace so I am surprised that made it in there.\nThanks for the feedback!\n. Ok. Sounds good. The name is a tag! argument so these can go.\n. Makes sense.\n. Fine by me. Just wanted to be consistent with USA ePay, so people know which lines up with their interfaces.\n. I'll take a look and consolidate all of the identical responses.\n. Sounds good.\n. Not sure I follow this one. I took care to balance being concise and flexibility. A lot of their xml tags look identical, but then you look closely and see the tags are often inconsistent, varying by a capitol letter or different abbreviation. But perhaps I am not catching your drift.\nThoughts?\n. The only problem is this is new not initialize. requires! is not available. And it should passthrough from the created object.\n. The only problem is this is new not initialize. requires! is not available. And it should passthrough from the created object.\n. ",
    "gerwinbrunner": "new version ready\n. some fixups needed\n. dependencies need fixing\n. ",
    "rudolfs": "Hm, maybe it's my specific combination of Rails 2.3.11 and Bundler 1.0.9, what are you using?\nI'm trying to use the payment_service_for method in a view and I'm getting the following exception:\nundefined method `payment_service_for' ...\nIn the controller I have this:\ninclude ActiveMerchant::Billing\nGemfile looks like this:\nsource 'http://rubygems.org'\ngem 'activemerchant'\nGoogled around and found that others are doing it the same way:\nhttps://github.com/mbleigh/subdomain-fu\nhttps://github.com/langalex/couch_potato\nThe commit could be improved in that the rails/init.rb file just requires the top-level init.rb or vice versa. Should I do that?\n. will do!\n. Done. Made a new pull-request:\nhttps://github.com/Shopify/active_merchant/pull/94\n. Cool, thanks!\n. ",
    "icem": "Why use api version 50? Check vantran's fork, he uses 59, and also supports direct payments.\n(His repo outdated, I have merged it with upstream, see)\nAnyway it's a big trouble that active merchant currently doesn't support PayPal Pro Recurring payments.\n. ",
    "ylluminate": "What about this: https://github.com/Shopify/active_merchant/pull/142 ?\nAdditionally, I'm in a situation where I need to integrate monthly micro payments as well as normal payments (PayPal's suggestion is to use two accounts; one for each level of purchases).  I need to be able to take credit card purchases for each level.\nWhat's the best solution at this point for this?  Seems that you've made some modifications perhaps for this as well as the other link above and I'd like to get to the bottom of which path would better support my present goals.\n. Would love to vote this up one for going into Shopify:master as soon as possible.  What a great addition\n. Apparently this needs some tests written for acceptance?\n. Do we now have a recurring paypal payment solution that takes the place of https://github.com/fnando/paypal-recurring?\n. ",
    "elfassy": "+1\n. +1\n. @timbeiko this looks fixed here: https://github.com/activemerchant/active_merchant/commit/3e2772e28c7484ba2815f832bc78185e43f37683\n. \ud83c\udf08  \ud83d\udc4d \n. @duff how does this PR look to you? Thanks\n. @jasonwebster I've updated the code to address your comments, let me know how this looks to you now\n. closing for now in favour of https://github.com/activemerchant/active_merchant/pull/2275. @adyenpayments looks like you have a failing test in Rails3.2. Please add\nruby\nrequire 'active_support/core_ext/hash/slice'\nto lib/active_merchant.rb \ud83d\udc4d . should we close this PR?. looks like we forgot to remove the remote tests for this gateway https://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_barclays_epdq_test.rb. I'll open a PR. looks good to me, @WizardCloud please squash commit . @lumiit-adam can you post a link to the Beanstream docs in the description, thx. Any reason we must use the region option? Seems to me like it would be best to let the end user decide between BeanstreamDefautGateway and BeanstreamIppGateway . Each already provides the information as to where it can be used (https://github.com/activemerchant/active_merchant/pull/2813/files#diff-1db73f09eabc8b8a2be54b728f148ee9R7). let's not merge 10K line commits without \ud83d\udc4d from both spreedly and shopify going forward. This PR makes reviewing the last release painful. As mentioned by Bart above, the defaulting to \" would have likely been a smaller diff and many projects actually prefer double quotes, including Rails and Github (https://github.com/github/rubocop-github/blob/master/STYLEGUIDE.md#strings). @bpollack correct, i cloned his branch to since he was working off a fork, so i can fix the tests. @filipebarcos I don't think it's a breaking change, we always expect a response object back, just now it will have the correct test value set. Good call on the changelog, will update.\n@pi3r the current remote test cover this case (all remote tests are in test mode). We're not changing how we communicate with Braintree, only the way we wrap the response.. @dwlynch05 I've moved your comment over to our private repo, I'll answer there. failing test: Prefer single-quoted strings when you don't need string interpolation or special symbols. so i can reuse Billing::NetworkTokenizationCreditCard.test_credit_card here\n. good question, @lyverovski should we leave this to true on Braintree Blue but make it conditional on other Braintree? This commit comes from https://github.com/activemerchant/active_merchant/pull/1766/files\n. confirmed with Andre, Braintree Blue might not always support network tokenization so we'll need to verify it. \n. > What happens in case of a connection error or 5xy response and this body isn't there?\nThe response object is created wether or not it is successful (https://github.com/activemerchant/active_merchant/blob/98bdad6d1fe3140df43228814abcbf2429791937/lib/active_merchant/billing/gateways/braintree_blue.rb#L420). It will not raise which will cause errors where we are expecting specific params.\n\nIt is appropriate that we let that bubble up (probably, yes)?\n\nYes, as far as I can tell\n\nI'm assuming a request error will be raised before we get to the hash traversal, yeah?\nSo, was this actually necessary?\n\nYes, as far as I can tell, there's nothing raising when the auth fails. It just returns the response with the error code. \n\nThis is also the incorrect error to raise here\n\nThe params we're getting back don't match our expectation. I agree it's probably not the same expectation as other exception using this error. How about a new error type UnexpectedResponseError \n. >  isn't it inconsistent to raise an error here, but in the Authorize.net one \nAuthorize.net already raises here (https://github.com/activemerchant/active_merchant/blob/9b40c0b1d7feb20d3330b78e7c284d1e8083e0d7/lib/active_merchant/posts_data.rb#L79)\n. Correction: the auth is handled by the Braintree gem and will raise if there's a 500 error, but not if the response is not in the format we expect (https://github.com/braintree/braintree_ruby/blob/02db6f8d75830aa3338d61985183aab4eebfab9b/lib/braintree/transaction_gateway.rb#L26 and https://github.com/braintree/braintree_ruby/blob/02db6f8d75830aa3338d61985183aab4eebfab9b/lib/braintree/http.rb#L32)\n. > it's in a module that is used in this gateway as well \nBraintree does not use ssl_post, it uses the braintree gem here https://github.com/braintree/braintree_ruby/blob/02db6f8d75830aa3338d61985183aab4eebfab9b/lib/braintree/http.rb#L32 instead. \nI think it's ok to let this raise via hash fetch if the Authorize.net implementation isn't consistent anymore. \n. see provision_raw_apple_pay. no since  network_tokenization_supported will always return an array of the supported card brands. what do you think of supports_network_tokenization_brands. The goal of having a normalized set of card brands across gateways. Two reasons: 1) The extra method provides better separation of concern and 2) following this comment\n\nThings are somewhat problematic in this space right now. A merchant might be using a PSP with their gateway that only supports tokenization on specific card brands - for example, if they're using the AMEX processing network, AMEX only supports tokenization for AMEX cards. Right now there's an assumption in Active Merchant that tokenization is supported if a test against a VISA bin returns successfully.\n\nMy understanding is that we'd need the supports_network_tokenization_brands to be exposed publicly in the near future, so it makes sense to have it ready. this is a remote test that is meant to verify we get the correct brands back from braintree and that they are formatted as expected. This test allows us to stub out the response in the unit test. should we add a default error message when success is false but message is nil? Likely this is on purpose to let the app decide on the proper default message.. the normalized error message logic was moved here: https://github.com/activemerchant/active_merchant/pull/2423/files#diff-9f21097553e010a708d707ede0637ca8R744. node.expanded_name == 'c:reasonCode' vs node.name == 'reasonCode'. The previous code never worked (which is a good thing because the reply method doesn't exist). Is it Discover is requiring 04 or FirstData is requiring that Discover cards have 04? In other words, is it fair to assume we haven't seen similar errors with discover outside of first data.. do we also need the currency code in the add_invoice in addition to the add_payment?. please split the commits into two \n1) renaming (_ipp, remote_beanstream_ipp_test.rb...)\n2) code changes\nthx. \ud83d\udc4d refine. @lumiit-adam if I understand correctly, options[:region] is a new option what would need to be passed in, and wasn't used previouly?. I don't think this will work as you expect it to. The module will be included on the class, not  only for a specific instance.\nConsider using a factory pattern (https://stackoverflow.com/a/41642955/454375)\n. please revert the changes to this file. The IppGateway might be used and cannot be changed just for beanstream. Instead bring the variations to BeanstreamIppGateway.. please move each class to it's own file. can move requires! to correct class. no need to require since nil will default to the old behaviour. don't reopen this class, move over the differences to BeanstreamIppGateway and remove this file. is it possible to inherit from IppGateway?. why the change in comment?. when is IPP required? Does it have to do with the shipping and/or billing address?. what does the region represent in this context? Would it not make more sense to keep the gateways separate? Is the region the merchant region? Is there a use case for using both?. please put the name of the gateway first followed by :. \u2702\ufe0f . \u2702\ufe0f please remove these comments. \u2702\ufe0f . an alternative to integers would be to have symbols represent the regions, example: :pacific, :america... This will make it easier to know what region is being used without having to refer back to this file\nmake the default explicit, please modify the following line to be \nruby\nregion = options[:region] || :america. \u2702\ufe0f . \u2702\ufe0f . ruby\nklass = \n  case options[:region]\n  when nil, :america\n    BeanstreamDefautGateway\n  when :pacific\n     BeanstreamIppGateway\n  else\n    raise ArgumentError, \"invalid region #{region}\"\n  end\nklass.new(options). comment no longer reflects the code, symbol should be passed instead of integers. Will remove ipp gateway file not sure what you mean by this comment. why was this removed?. let's leave this in BeanstreamCore to avoid modifying that file, since it could be used elsewhere. where is this used? I think this file needs to be deleted. could we use the VCR gem to record these responses? It would be easier to re-run in the future. I'm concerned with this class not inheriting from Gateway. What happens if someone is expecting to be able to do BeanstreamGateway.supported_countries. This would now blow up, whereas before this PR it used to work (breaking change). \nAny reason we must use the region option? Seems to me like it would be best to let the end user decide which Beanstream to use. Each already provides the information as to where it can be used (https://github.com/activemerchant/active_merchant/pull/2813/files#diff-1db73f09eabc8b8a2be54b728f148ee9R7). oups, same comment as @pi3r :D. to fix the failing test:\nruby\n      def response_from_result(result)\n        response = { braintree_transaction: transaction_hash(result) }\n        Response.new(\n          result.success?, \n          message_from_result(result),\n          response,\n          authorization: (result.transaction.id if result.transaction),\n          test: test?\n        )\n      end. moved to https://github.com/activemerchant/active_merchant/pull/2980 to be able to edit. we may be able to use response_options in response_from_result, but I'll do the refactoring in another PR since i'm not sure of the implications of adding avs_result and cvv_result. might be a good idea to move the valid_card_verification_value? up a level since it's used in both branches. Something like\nruby\nunless valid_card_verification_value?(verification_value, brand)\n  if verification_value?\n    errors << [:verification_value, \"should be #{card_verification_value_length(brand)} digits\"]\n  elsif requires_verification_value?\n     errors << [:verification_value, 'is required']\n  end\nend. Do we need this else? We check if options[:three_d_secure] in add_three_d_secure and there may be cases were we'll want to pass this option for a network tokenization card.. doc states:\nthreeDSVersion\nPossible Values:\n1.0.2\n2.1.0\nhow do we plan to handle this? The version passed in the options might be different, say 2.2.0. ",
    "kemiller": "Never thanked you for this.  Thanks.  :)\n. ",
    "hakongit": "This is not yet implemented? Why is the issue closed?\n. ",
    "nikosd": "For the most parts it's pretty ok - hopefully will be done during this week. Now the \"buts\" :\n- Purchase is not supported directly through this gateway. This means that the functionality can be encapsulated in a single method but inside it will just do an authorize and then a capture. The problem with this is that you have to handle business logic inside the library. For example : what happens when authorization succeeds but capture fails because of network error? In our applications we handle differently this scenario...\n- Remote testing is not possible since there are no public credentials. All that can be done is to remove most of the tests and leave a simple one that will handle authentication error (but alas proving proper XML markup etc)\n. Perfect - thanks! Will do and come back :)\n. ",
    "RISCfuture": "Same thing for BeanStreamCore.  Hey how about testing your code? :)\n. Maybe, but not right away.  We are rushing to get integrated with Orbital here; I've made these changes as I move things along at my company.  I'm sharing them back with you for the benefit of the community, but I've still got a deadline :)  I'll have more time later, hopefully.\n. ",
    "keithpitt": "This is a pretty easy thing to fix, just logging it here so someone else knows about it :)\n. Hey @ntalbott, sorry for the late reply. I've removed the update_customer method.\nYou do pass the card token to update, see: https://github.com/Shopify/active_merchant/pull/1268/files#diff-fd69b950fb50e7849fecfb121ce5ab1bR103\nThanks again for poking me about this :)\n. Thanks for taking the time to do this for me :) :heart: \n. ",
    "smingins": "Q. \"How is this different from a refund?\"  \nA.  Because it is not refunding any money.  As I understand, it we would only refund if we did a successful auth and capture (or a purchase), this change is to reverse the auth request made via Cybersource.\n. Yes that's exactly what we thought.  We thought that a void would reverse the auth too, but not with Cybersource they have a CCAuthReversalService for that.\nAs for \"why would you use this?\" .... to reverse the auth on the credit card so that the funds are not blocked for the 30 odd days that they would be otherwise .... and that could be in the case of being unable to complete the order.\nSo if other gateways generally use void to reverse/cancel the auth, then it would seem that Cybersource is a little different.\n. I'm not sure I understand the comment.  This is the failure case, and we followed the same pattern as test_successful_authorization_and_failed_capture.   Is there another pattern you are using?\n. ",
    "jeberly": "Yeah, that is how we see it too.   Is there any changes you need from us still?\n. @titanous, is there anything else you want us to do to help move this along?  Thanks!\n. ",
    "julesce": "Just stumbled across this while looking for a South African payment gateway for ActiveMerchant. I too would love to see this one merged ;-)\n. Awesome - thanks!\n. ",
    "rubyisbeautiful": "I hadn't seen all of this.  I have made other updates since then, and I will try to address the issues. \n. I can't reopen as you suggested, should I submit new pull request?\n. I think that was all of your corrections.\n. They have other pay products, so I called it PayGateXML to distinguish it\n. removing \"extra\" ws\n. done\n. done\n. I don't see why, capture is a valid standalone function of the gateway.  If you want it private anyway, let me know\n. I'm not sure what you're referring to...the snippet you've included has a case statement and the first 3 lines of a method...the Builder::XmlMarkup usage?  If you would like it to be some other way please let me know\n. done\n. My bad!  And yep, made private.\n. I have to say, I don't know either. :)  I wrote this a long time ago (1+ year?) and looking at it, I can't say.  Not good.  The method works, but it should definitely be re-written.  Will add that to new commit.\n. That is PayGateXML's global sandbox account credentials.  It's given in their API doc.\nThey are also in the PayGateXmlGateway class file around lines 81-83.\n. done\n. ",
    "billgloff": "Is there a reason this hasn't been merged yet? I need this functionality too!\n. ",
    "kenmazaika": "I'll work on getting this applying to master in the next day or two.  Should be able to cherry pick the second commit (I think the first commit is no longer required because of this commit: https://github.com/Shopify/active_merchant/commit/7fc8f7e24e626651580b124e9776922061512b98).\n. Closing this pull request out.  Please see this pull request instead:\nhttps://github.com/Shopify/active_merchant/pull/290\n. Looks like it does.  Sorry about that -\n-ken\n. Is there anything I can do to help get this merged into master?  I'm happy to help out if there is...\n. How come?  Since there are two different authors, I think it makes sense to have at least two commits, one for each author...\nI'd be kinda bummed if I got squashed out of the history.  :(\n. Sure, I'll get this applying to master in the next day or two, and make a comment on this pull request when it's ready.\n. Sorry about the delay.  I'll take a look at rebasing this tonight.  \nFeel free to do the rebase if you need it right away, and update the pull request in the mean time.  Otherwise I'll get to in an a few hours.\n. I believe I just rebased correctly, and opened a new pull request.\nSee Pull Request #296.\nThe only conflicts were whitespace errors, that manually running the git command seemed to automatically fix.\n```\n$ git rebase shopify-master\nFirst, rewinding head to replay your work on top of it...\nApplying: Add Gateway for Integration with Paypal Express for Digital Goods\nUsing index info to reconstruct a base tree...\n:43: trailing whitespace.\n:118: trailing whitespace.\n:121: trailing whitespace.\n  :login => 'cody', \n:127: trailing whitespace.\n end \n:128: trailing whitespace.\nwarning: squelched 5 whitespace errors\nwarning: 10 lines add whitespace errors.  \nFalling back to patching base and 3-way merge...\nAuto-merging lib/active_merchant/billing/gateways/paypal_express.rb\nApplying: Use class_attribute instead of class_inheritable_accessor if available\nApplying: Add more PaypalDigitalGoodsGateway.supported_countries\n```\n. I could be wrong (I wrote this code a while ago), but I think the reason I chose to do it this way was mostly to override redirect_url_for (defined in paypal_express_common).  I think sending cmd=_express-checkout caused PayPal to use regular Express checkout instead of digital goods.\n. also needs the url to be in the format of:\nhttps://www.paypal.com/incontext\ninstead of \nhttps://www.sandbox.paypal.com/cgi-bin/webscr\n. ",
    "anderslemke": "OK. I tried to update my branch to incorporate your changes.\nNot completely sure I did it right, though...\n. I did, yes.\n. OK. Don't know what happened here. I'll give it another go...\n. I issued a new pull request, where I maintain backwards compatibility.\n. @bpollack I think you mentioned me by mistake here. You probably wanted to mention @andrewariley87 (which I just did now). I thought about that, but if you want to use version 4, without the apikey, that should probably also be possible.\n. I added a conditional, asking for protocol 4.\n. I added a test for using all the parameters.\nAnd the rest of the tests, run without the parameters.\n. ",
    "wvanbergen": "Whoops, no it is line 24 instead of 34.\n. @jduff @Soleone @odorcicd For review and feedback please.\nQuestions:\n- How do we usually deal with SSL_VERIFY_ in ActiveMerchant?\nUnfortunately, the iDeal payment flow is not quite the same as the normal offsite gateway flow. So we had to make some changes.\n- For integrations, we moved credential_based_url from the module, to the helper instance. We had to do this because the helper actually has all the information we need to retrieve a redirect URL.  Because this method was only used by one other integration (which we updated as well), I think this is an OK API change to make - I think that method was added as a workaround / hack for that specific gateway. Almost all integrations have a static service_url so they are not affected by this. Also on the Shopify side, we will need to implement some changes in the checkout flow.\n- Right now, the list of banks is hardcoded. This list doesn't really change (maybe once a year tops). We implemented a method to retrieve an updated list. I am not quite sure if we should hook this up in some way. Also on Shopify, we have did some changes to actually show the list before redirecting. The selected bank has to be passed as :redirect_param option to the Helper.\n. Yup, will probably have an initial version by the end of the day.\nOn Mar 2, 2014, at 2:02 PM, Maarten van Grootel notifications@github.com wrote:\n\n@wvanbergen have you started the migration to the new API yet? If not, I can do that.\n\u2014\nReply to this email directly or view it on GitHub.\n. Implemented the new JSON API.\n\nNew problems:\n- We cannot specify a notify URL using the API anymore.\n- The return URI does not contain a transaction_id anymore.\n. @jduff @Soleone @odorcicd this is ready for final review.\nThere might be a small change if Mollie decides to implement support for specifying the notification URL again.\n. Don't worry: we're still waiting to hear back from Mollie on some changes on their end, so we won't shipping this this week.\n. Added webhookUrl parameter support, and rebased.\n. The CI build had a timeout on one of Rails/ruby combinations, but is green on all other combinations. Should be fine.\n. Applied a small fix to whitelist the parameters we are now sending to the Helper.\n. We're waiting on a CI now, but we're now pretty pleased with the integration. Another round of reviews? We'd like to go beta with this on Monday or Tuesday.\n. Fixed 2 small bugs - CI should pass now.\n. Great success!\n. We ran into this on our mollie branch, because we don't use mappings for it. There's not really a test file for the generic helper superclass at the moment. I could add one.\n. Added a regression test for this.\n. This requires a change in Shopify as well, as the description normally will not be available when the helper is instantiated.\n. @bslobodin for a quick check too.\n. Shopify change refers to this commit of AM, so they would go out simultaneously. I will set a default value.\n. Right now I explicitly fail when no :description is set (in the Mollie adapter). I am not sure if using a default value is a good idea. I rather have developers that use this integration see it fail and think about setting a proper description, because this is what shows up on the customer's bank account. In Shopify we always set a description.\n. - Often, when you are continuing an expression on a new line, the additional lines are not indented. I added comments for some instances, but not all. Can you indent the additional lines with 2 spaces?\n- Also, this patch needs rebasing on the latest master.\n. Could you answer the questions @ntalbott asked:\n- Why was this changed? \n- Does this enable any new functionality, or fixes any problems of the current integration?\n- Is this backwards compatible for current users?\n. @ao Are you still working on this? Tests are still failing.\n. @lathiat Are you still working on addressing the outstanding questions?\n. @girasquid @edward @j-mutter for review.\n. While I agree Shopify/active_utils#36 needs to happen, it is more work and more invasive. How is this change going to make that more complicated?\nThis change basically only removes code from ActiveMerchant now, and fixes potentially troublesome bugs being caused by the COUNTRIES constants having different values, or the Country class having a different implementations (which is already the case.\n. This is the warning we're seeing.\n/home/vagrant/.gem/ruby/2.1.3/gems/active_utils-2.2.3/lib/active_utils/common/country.rb:65: warning: already initialized constant ActiveMerchant::Country::COUNTRIES\n/home/vagrant/.gem/ruby/2.1.3/bundler/gems/active_merchant-802e5ce160d9/lib/active_merchant/country.rb:67: warning: previous definition of COUNTRIES was here\nThe alternative fix is in ActiveUtils, and only define the constant if it's not already there.\n. @ntalbott That doesn't work for us because we also have active_shipping and active_fulfillment that end up requiring it anyway. What do you think about my alternative fix?\n. See https://github.com/Shopify/active_utils/pull/52\n. This looks good to me. @Shopify/payments ?\n. @cshepherd Any way you get get us credentials so we can run the remote tests?\n. Looks good. @ntalbott is this ready to merge?\n. Merged!\n. @ntalbott Hmm, I was wondering why CI was succeeding, but it turns out that the offsite_payments dependency has a active_utils dependency, so it is still available in the CI environment. Is the plan to also remove offsite_payments as a dependency?\n. @ntalbott The problem is we cannot load two versions of ActiveUtils at the same time. So I rather get it over with if it is feasible without a migration period. \nThe offsite_gateway dependency doesn't really do anything for active merchant anyway, except making the offsite gateways available. SO removing that dependency is not a big deal; people can just add the gem to their Gemfile manually if they aren't already doing so.\n. Changes in offsite_gateways: https://github.com/Shopify/offsite_payments/pull/103\n. Still todo: copy the remaining parts activeutils that AM uses.\nSome background: https://github.com/Shopify/active_merchant/pull/1492\n. I have copied in the necessary stuff from ActiveUtils (Connection, PostData, PostsData, and NetworkConnectionRetries), and the associated tests. \nI also had to remove the offsite payments shim. If we want to keep it around, that's possible but I will have to do a prerelease of that gem, so we can depend on a version that depends on ActiveUtils 3 instead of 2.\n. @bizla @girasquid @j-mutter @aprofeit  It's ready for reviewing now!\n. This is basically good to go now. Before I can merge:\n- Do we want to keep the offsite_payment shim?\n- Either way, offsite_payments needs to be fixed first: https://github.com/Shopify/offsite_payments/pull/103 and https://github.com/Shopify/offsite_payments/pull/106.\n@Shopify/payments @ntalbott \n. whoops. deleting.\n. Anther small fix: https://github.com/Shopify/active_merchant/pull/1524\n. Ported those commits.\nToday I will try if I can get all of the updated gems to work inside Shopify.\n. I should have noted this PR is a WIP :)\n. This is ready for review now! @Shopify/payments @ntalbott \nOnce this is merged, I want to see if I can bump the mocha and test-unit versions because both are quite outdated.\n. Going to merge this tomorrow morning unless I hear objections before that time :P\n. I'd say let's keep testing against it until the Feb 23rd, do a minor release, and remove it afterwards from the build matrix.\n. :fire:\nOn Wed, Feb 25, 2015 at 10:48 AM, Justin Mutter notifications@github.com\nwrote:\n\nAwwww yissssss. I'll handle it\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/issues/1519#issuecomment-75984162\n.\n. I guess this is done now :+1:\n. :+1: I fixed all the warnings that would show up in test runs, except for the hundreds of warnings that are due to this gem. :fire:\n. Needs a rebase, but LGTM!\n. This is already fixed in ActiveUtils 3, but I copied an old release of active_utils (2.x) so the copy in AM still is generating deprecating warnings when using activesupport 4.2\n. @ntalbott May be worth it to go through https://github.com/Shopify/active_utils/compare/v2.2.3...13b4a70\n. @ntalbott @Shopify/payments \n. For more info, see http://weblog.rubyonrails.org/2009/9/1/gem-packaging-best-practices/\n. Merged, and released as 1.46.0\n. This looks good to me. @ntalbott ?\n. Merged (by hand). Thanks for the contribution!\n. :checkered_flag: \n. Does that mean we actively should avoid Ruby features we know that won't\nwork in Ruby 1.9? (Module#prepend, named parameters, etc)\n\nOn Wed, Feb 25, 2015 at 1:10 PM, Justin Mutter notifications@github.com\nwrote:\n\nSame, I'll add a note to the GettingStarted or something about ruby\nversions.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1583#issuecomment-76020429\n.\n. > drop support for Money\n\n:+1: But we should use a well documented, standard way of passing around monetary values (including currency). See #1153.\n\nno more autoload\n\nYou mean you have to explicitly require the gateway you're using?\n. I'll add: as an abstraction library we should define the abstraction we offer much more strictly. Mostly in terms of documentation, but also tooling around it. \nE.g. def purchase(amount, payment, options = {}). What is amount? What is payment? What keys in options have special meaning, and what keys can you use for gateway specific things? What does it return? How do we make sure new gateways conform to this contract?\nAlso, what functionality is optional, and what is required? Do we offer a reflection API to see what functionality a gateway supports?\n. Maybe: remove builder dependency for generating XML? (This will require rewriting a bunch of gateways using Nokogiri instead)\n. You'll need to upgrade to ActiveShipping >= 1.0 to resolve this.\n. Ah yes, we still haven't made a final release of that. Let me bug some people to make that happen.\n. Not really, but it will include the question mark otherwise.\n. We should , but this is something that needs fixing library-wide. A bit out of scope of this PR.\n. Yup, before the acknowledge method is called.\n. Fixed.\n. Fixed.\n. why?\n. Splitting it up sacrifices readability. After splitting it up, the code is scattered over a bunch of methods, while now you can just look and follow the lines one by one to understand how it works. I don't see any cases where we would reuse part of this method instead of all of it.\nTestability is a legitimate concern. However, I think the current coverage is fine. The remote tests test the implementation of this method, while for unit tests we stub out the entire method. Potentially we could split out the response handling, so we can unit test that separately, but it is so simple that the remote test coverage of that is fine IMHO.\n. I was trying to find it but couldn't. Turns out this code lives in active_utils. Fixed.\n. Fixed now we use ssl_get\n. Unfortunately, it uses a self.included block to initialize a whole bunch of stuff, so it has to be included rather than extended. :poop:\n. webhook_url:\n\n. actually, it is not used. Right now the list is hardcoded. Ideally I want to change this to a YAML file that we periodically update by calling this method.\n. It isn't used, but only because our flow doesn't support it. If you were to build a proper integration, you really want to be able to get the transaction_id and store it somewhere. SO I would leave it here even if we don't use it ourselves.\n. We are not using this ourselves, but I am not sure if this method is required for the external interface (same goes for with the amount/gross_cents etc methods).\n. Yup, we use it to do an API request to Mollie to check the status of the payment.\n. Fixed.\n. @RickWong see https://github.com/Shopify/active_merchant/pull/1146\n. This enables the new infrastructure on Travis, which much faster build initialization times.\n. Should we set these as development dependencies instead? \n(Side note: the oauth gem is outdated and generates a lot of warnings.)\n. I removed this because it's part of Ruby's standard library, and the json gem is supported directly in JRuby these days.\n. The gemspec requires mocha ~> 0.13.0, so (Mocha::VERSION.split(\".\")[1].to_i will always be 13.\nForgot remove the version line.\n. In that case we should add them as development dependencies in the gemspec. Development dependencies will not be installed when doing gem install active_merchant, so they will only be installed for active_merchant development.\n. I added this as an explicit dependency. \n- 1.2.3 is outdated, but was the version that was bundled with Ruby 1.8\n- Ruby 1.9 bundles Minitest instead, but includes a shim so Test::Unit tests still work.\n- Ruby 2.2 drops the Test:Unit shim.\nSo, in order to reliably test against different Ruby versions, we have to explicitly specify either test-unit or minitest. Because we are using Test::Unit::TestCase subclasses for tests, and Minitest has version conflicts with different activesupport versions, I decided on using test-unit.\nDue to this, I had to fix some tests because before we were implicitly using the tets-unit shim of minitest, which provides methods like refute and friends.\n. I tried but was getting a bunch of warnings. They can potentially be fixed. \n. We could, I first one to merge this, and try upgrading test-unit and mocha (also outdated) afterwards.\n. Cool, I'll leave it like this.\nI'd like to get rid of the braintree gem, and maybe standadize on a shared oauth gem that is not shitty. But not now.\n. This was also a duplicate hash key (see below on line 19).\n. I fixed the warnings - they were caused by Connection, and NetworkConnectionRetries both defining a retry_safe accessor.\n. This is me not stashing my changes properly.\n. Fixed.\n. apparently not, and if so, we should use ActiveSupport::Deprecation instead of inventing our own IMHO.\n. Actually I think it is used elsewhere. I'll leave it for now and remove it in a separate PR.\n. Please use require 'test_helper'\n. require 'test_helper'\n. Can you remove the changes to the Gemfile?\n. Parentheses around || are not needed\n. Indentation missing.\n. Parentheses not needed.\n. Parentheses not needed.\n. Please remove this change.\n. Parentheses not needed here.\n. You can remove one set of parentheses in the if statement.\n. It will not be compatible with the latest master, because we're using test-unit there, not minitest.\n. success = (response[\"ID\"] && response[\"AUTH_CODE\"]) || (response[\"folio\"] && response[\"status\"] == \"ok\")\n. Code style nitpick: && instead of and\n. && instead of and\n. Are you certain ISO-8859-1 is always the other encoding? If you are certain that the string is just improperly tagged with UTF8, but in reality is ISO-8859, you should use force_encoding instead.\n. ",
    "yob": "+1\nAll my credit card forms have a single name input and I split them before passing the values to active merchant\n. ",
    "alexdunae": "+1 -- exactly what @yob said.\n. Ah, that makes more sense. Should be all good now.\n. @awladnas here's how it works for me:\n``` ruby\ngateway = ActiveMerchant::Billing::BeanstreamGateway.new(\n  login: 'XX',\n  user: 'XX',\n  password: 'XX',\n  secure_profile_api_key: 'XX' # This is from Beanstream's Profiles section\n)\nresponse = gateway.store(credit_card, params)\ncustomer_id = response.params['customerCode']\ncharge card via customer profile\npayment = gateway.purchase(25_00, customer_id)\nassert payment.success?\n```\n. ",
    "alakra": "What's the status of this feature being merged in, can we expect it for the next release? Do you need someone to review it?\n. ",
    "lysenko": "Thanks @mm1.\n. ",
    "parmjeetkumar": "Is there any method to get detail of a subscription transactions? \n. ",
    "Mobitics": "Great! thanks! will get working on this ASAP.\n\nJaime Schuster\nOn Tuesday, June 14, 2011 at 5:03 PM, Soleone wrote:\n\nThanks, that looks quite good already.\nOnce you've addresses the comments I added inline we can go ahead and merge this in and then start a first test transaction.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/136#issuecomment-1369224\n. \n",
    "tbbooher": "any idea why this wasn't pulled? i did this too, but i am going to try and use yours\n. Would you recommend using your fork for production? Do you keep your fork current with the main repo? Your code looks great.\n. ",
    "jaredmoody": "No idea, I've gotten no communication. I've been using this in production for the last couple years with no issues.\n. It's mostly up to date, but I haven't been meticulous about it since most of the updates don't affect what I changed.  I'm happy to pull in the latest whenever though, just shoot me a message and I'll merge in the latest from the main repo.\nI'd say it's fine for production, I use it for such, but of course you should test thoroughly :)\n. Just added support for the X-Charge gateway\n. Will do!\n. I've been slacking. I'll see if I can get this out today.\n. Working out a few kinks in updating to use the latest cybersource API version in order to support unstore, but should be ready to go next week.\n. Updated pull request submitted here:\nhttps://github.com/Shopify/active_merchant/pull/329\n. @jduff You're right that that line is incorrect.\nCan you elaborate on what you're doing when the last name isn't being passed, it seems to be working for me. For example, when I run the remote test 'test_successful_purchase_with_cc' or 'test_authorize_and_capture' the first and last name show up in the test business center.\nCan you also give some details on any other issues you're having so I can try and duplicate them and get it sorted out?\nThanks!\n. Nice, thanks for finishing this up.\n. Yes, you can add a card with only exp_month - when you're updating a stored card. \nThis is the scenario I wrote this patch for. I needed to be able to update the expiration of a stored card without passing a new card number.\n. Yep I should have some time to add this next week.\n. Thanks for the bump, added a remote test to demonstrate this, is that sufficient?\n. I don't have worldpay credentials, sorry.\n. Just a bump since it's been about 6 months :P I'd really like to stop using a fork as well, can someone review this?\n. ",
    "tfwright": "@jaredmoody Any update on this patch?  A system I'm working on has a need for a tokenized/subscription payments with CyberSource.  If necessary I can take over the task of switching to the standard recurring API.\n. I figured as much.  Thanks for the tip--you may be right.  As far as submitting a pull request for new functionality, would it be a problem if there are failing remote tests for unrelated functionality?\n. ",
    "alexz77": "Exactly... I think that I won't have an opportunity to do it in nearest future. Feel free to add tests if you like...\n. ",
    "gdb": "Done. I also removed the 'credit' method, since Stripe does not currently support unlinked refunds. Thanks!\n. In general, we do actually use platform data for helping people troubleshoot issues. What about switching to uname -msrv? I'd also be ok with a flag to disable sending that data for the extra paranoid. (Note that in the official Ruby bindings I believe we also memoize, so it's not shelling out on each request.)\n. This is related to what I mentioned to you in Campfire today.  Currently, the only way of expressing an unchecked street address and a passed zip check is \"F\".  However, the message for \"F\" is \"Card member's name does not match, but billing postal code matches.\", which doesn't seem appropriate for this case.\nI believe P is actually the correct code to return here ('Postal code matches, but street address not verified.'), but AVSResult translates that to a failed, not unchecked, street match.  So basically, I think the behavior here won't be quite right, but that it's an AVSResult bug.\n. ",
    "nurey": "what's the status of this pull request?\n. @castiglione, I'm trying to test your diff. What is the recurring_api_key ? I see you send it over as passCode, but I could not find this in the beanstream documentation.\n. never mind. was reading the wrong documentation\n. @castiglione, I'm getting the following when running one of the tests. What am I missing?\nI have the recurring_api_key set to the same value as the key in beanstream/administration/account settings/order settings/recurring billing/API access passcode.\ngoldrush:active_merchant_castiglione ilia$ ruby -Itest test/remote/gateways/remote_beanstream_test.rb  -n test_add_to_vault_with_custom_vault_id_with_store_method\nLoaded suite test/remote/gateways/remote_beanstream_test\nStarted\nF\nFinished in 0.756649 seconds.\n1) Failure:\ntest_add_to_vault_with_custom_vault_id_with_store_method(RemoteBeanstreamTest) [test/remote/gateways/remote_beanstream_test.rb:195]:\n<\"Operation Successful\"> expected but was\n<\"Passcode authentication failure\">.\n1 tests, 2 assertions, 1 failures, 0 errors, 0 skips\nTest run options: --seed 14083 --name \"test_add_to_vault_with_custom_vault_id_with_store_method\"\n. Looks like this may be because I don't have secure profiles enabled with Beanstream and they want smth like $20/mo for it. Is this a prerequisite for recurring billing?\n. seems like we need a way to skip tests that require secure payment profiles.\n. @jduff please advise what needs to be done for this to be accepted into active_merchant?\n. yes that sounds good.\n. Looks like I have a fix and the test method  \"test_successful_add_to_vault_and_use\" is definitely passing this time.\nhttps://github.com/nurey/active_merchant/pull/1\n. Should I bother doing a pull request to the canonical repo? There's 46 pull requests here...\n. pull request initiated https://github.com/Shopify/active_merchant/pull/205\n. I would love to see this patch merged. Not clear what's stalling this.\n. awesome, thank you!\n. ",
    "kastiglione": "I made changes to correct @jduff's correction. Besides that, the pull request has been idly waiting.\n. @nurey should I add an environment variable to enable payment profile tests which would otherwise be off by default?\n. Squashed.\n. I have amended the commit to return build_response to its rightful glory.\n. ",
    "braintreeps": "Updated with additional testing as requested; also rebased to latest master and squashed to one commit.  All units and our remotes are passing.\nLet us know if there's anything else we need to do.  Thanks for your help!\nCory and Paul\nBraintree Developers\n. @jduff\nSorry for the delayed response. We actually made the separate credentials so that we could test against different processor rules. These fixtures represent two different merchants. 'braintree_blue_with_processing_rules' allows us to test a Gateway Rejected transaction and make sure we're handling that correctly.\nBrian and Cory\nBraintree Developers\n. Good idea.  We'll get another test written and submit again.\n. ",
    "MrJaba": "Thanks for the feedback, those instructions weren't there when I submitted this pull request. I'll make the requested changes and then do another pull request. \n. Hi, I've removed the 1.9 specific syntax and tested on MRI 1.8.7. I attempted to test on JRuby and Rubinius head of both and bundle install failed; JRuby with http://jira.codehaus.org/browse/JRUBY-5581 and RBX with https://github.com/rubinius/rubinius/issues/1061\nI'm not quite sure how to proceed? Even though the Rbx claims that issue is fixed I can't seem to work around it, i'll file a bug request about that later. \n. I've just installed JRuby 1.6.2 and the tests run fine on that as well.\n. ",
    "NZKoz": "we're making use of this in production right now and it's working well.  We've made tokenised and direct payments with it,  working great.\n. ",
    "nikz": "Done :)\n. @j-mutter any chance of getting this merged?\n. @ntalbott I've sent some credentials to the email listed in your Github profile. Thanks! :ok_hand: \n. @ntalbott thanks, let me know if I can help!\n. Heya Justin - the paystation fixture doesn't exist either - these require production credentials, so they'd usually be added to ~/.active_merchant/fixtures.yml if I've figured that out correctly?\nI could add both to fixtures.yml to serve as examples?\n. My :hmac_paystation fixture looks like this:\nyml\nhmac_paystation:\n  paystation_id: <ID NUMBER>\n  gateway_id: <SOME GATEWAY ID>\n  hmac_authentication_key: <HMAC KEY AS PROVIDED BY PAYSTATION>\n. ",
    "isaac": "I have done some testing on ruby 1.9.2 and I have found a newer version of mongrel that works.  I have also fixed a few other ruby 1.9.2 related issues that prevented the remote tests from running.\n. Squashed!\n. ",
    "mnoack": "I haven't tried this but could you override method_missing so that you can deal with undefined methods, and hopefully this would still have the desired respond_to? affects.\n. Thanks nagash. I have a few comments on this pull request:\n1) I too am doing a MiGS gateway for the last few weeks (https://github.com/mnoack/active_merchant/tree/add_migs_gateway). I've been doing it for a few weeks now (in my spare time) and feel I'm a bit further along the process towards finishing it. (I've been looking at the other gateways and making it more consistent with them) so perhaps we can collaborate rather than doubling up?\n2) You're code looks 99% like anujluthra's code (https://github.com/anujluthra/activemerchant-anz-gateway) down to using the same indentation, method names, with some minor modifications. This is fine but ensure he's included in your acknowledgements/thanks somewhere.\nFor example the following things I have learned in the last few weeks about MiGS and ActiveMerchant that have improved my gateway code: (I too looked at anujluthra as a base)\n1) ANZ is the MiGS gateway, which gets rebranded for each bank (e.g. CBA uses the exact same gateway), thus I think this gateway should be branded MiGS instead of ANZ, CBA, etc.\n2) I've used login/password rather than merchant_id/access_code as these are standard for these details across active merchant, which I believe is better so user can just change the setting without having to know what it's been called in each gateway.\n3) I renamed query to \"status\" in my opinion as that's what some other activemerchant gateways use to check the status of a previous transaction.\n4) Only as a matter of consistency, gateways mostly use \"authorization\" (some use \"identification\") so I used that.\n5) I used \"refund\" not \"credit\" as that is deprecated, but I still have credit and use the deprecation method like other gateways.\n6) You should include all the errors codes as these are useful for applications even if your gateway doesn't use them yourself.\n7) I've removed all the vpc_ prefixes and instead only added that at the end (when it comes time to submit transactions) and the same when parsing the response. I find this makes the code much cleaner.\n. Two possible ideas:\n1) If the changes are very small, just go to the code on my branch and make a comment\n2) You can create a new branch on your fork which is based off my branch\n, you'll need to do the following:\n2a) Add mnoack as a remote to your fork (git remote add mnoack my_github_clone_thingo)\n2b) Checkout my add_migs_gateway branch\n2c) Add you commits\n2d) Push to your fork, then let me know\nI've done some more stuff that I haven't pushed recently (Auth/Capture) but I'm awaiting some things from ANZ before this is done.\n. I'm still waiting on ANZ to enable some things in their test account so I can finish the auth/capture tests and then on the weekend I'll polish everything off, ensure there's appropriate comments, etc. then do a Pull Request\n. Sorry, that was our work's test gateway which shouldn't have been committed.\n. Done.\n- Hash Syntax + Hash#sort change\n- Switched to ActiveUtil's raw_ssl_request in tests to avoid SSL warnings in Ruby 1.8\n- Tested on 1.8.7, 1.9.2 and 1.9.3\n- Flattened commit\n. Someone (perhaps you?) would need to contribute the code for this. See https://github.com/Shopify/active_merchant/wiki/contributing\nI have contributed the Migs gateway and you can message me for advice if you want. When doing my contribution I found the best was to look at other gateways and see how it was done. I generally followed the standards as determined by looking at other gateways.\nI'm happy to guide you via email if you have questions along the way.\nUltimately a gateway class looks something like:\n```\nclass MyGateway\n  self.url = 'http://theurl.com'\n  self.supported_countries = %w(AU CA US)\n  self.supported_cardtypes = [:visa, :master, :american_express, :diners_club, :jcb]\n  self.money_format = :cents\n  def initialize(options = {})\n    requires!(options, :login, :password)\n    super\n  end\ndef purchase(money, creditcard, options = {})\n    requires!(options, :order_id)\n    post = {:amount => money.format}\n    add_creditcard(post, creditcard)\n    data = ssl_post self.url, post_data(post)\n    response_hash = parse(data)\n    response_object(response_hash)\n  end\ndef response_object(response)\n    Response.new(success?(response), response[:message], response,\n      :authorization => response[:transaction_no]\n    )\n  end\nend\n```\n. @ntalbott Please review\n. @ntalbott\nRebased\nI've rebased and fixed the tests due to the rebase. My tests pass locally and on CI (where they run as some don't run due to a travis issue I've mentioned in another ticket).\nDocs on verification values\nI've put comments in the code relating to the definitions of the verification_values direct from the various card providers.\nThere is no verification value standard I could see. Things could always change, but I'm pretty confident a change to the format of verification_values will have plenty of warning\nWhat I'm more concerned with is outside the major card networks (Master/Visa/Amex/Diners/Discover/JCB), e.g. Some other card network from some small country here and there may not quite follow the 3 digit rule, but 99.99% of the card usage goes through these networks (even Solo, Maestro, etc. go through Mastercard) and we will find out the kinks soon enough, we could consider making this validation opt-in to be ultra cautious. Once this change is in, at least new card networks added will ensure they make this method cope with their verification value if it differs.\n. @ntalbott Specs pass, please review my comments in response to your questions\n. thanks @ntalbott - Wow you're such a busy project maintainer :)\n. @ntalbott This seems to break travis:\nBundler could not find compatible versions for gem \"activesupport\":\nIn Gemfile:\nactivemerchant (>= 0) ruby depends on\noffsite_payments (~> 2.0.0) ruby depends on\nactivesupport (< 5.0.0, >= 3.2.14) ruby\nMaybe just change travis to test latest 3.x rather than 3.1.x - I assume the reason for testing 3.1 is a lot of things would have been deprecated as of 3.1.0 but the same would be the case for 3.2 and I think most of the 3.x ecosystem is on 3.2.x anyway\n. @joeblack81 firstly, offsite payments (you said redirect) is best done using the activemerchant/offsite_payments project, we have submitted a PR to that project. See: https://github.com/activemerchant/offsite_payments/pull/187\nOnce this was merged I was actually going to PR to remove this part of MiGS from activemerchant.\nWe are using the offsite_payments code in production and have tested it extensively.\nThe specs in that Pull Request I think explain how to use it very well, but if you have further questions feel free to ask.\n. The offsite_payments gem (in my PR) creates the secure_hash for you, and so does the old 'purchase_offsite_url' from activemerchant that you're using.\nIt's a required argument so I'm not sure why it's failing.\nYou need to give it the secure_hash when you initialize @gateway, this is what ANZ/CBA and other MiGS providers call secure_hash.\nIf you're still stuck you'll likely have to debug with something like pry-byebug or similar so you can go through the activemerchant code and look to see if any of these variables are odd (blank, etc.)\nI also recommend trying offsite_payments (point to my branch as in the PR) as that's the code we currently use in production and I'm more familiar with that code so can help you more AND the code you're using will be deleted eventually anyway. \n. You can use sealink/offsite_payments (master branch)\nOn 27/04/16 23:18, Mohamed Masoud wrote:\n\n@mnoack https://github.com/mnoack I want to use Migs in \noffsite_payments gem but I see that your code still not merged, how \ncan I use it now?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub \nhttps://github.com/activemerchant/active_merchant/issues/2018#issuecomment-215088874\n\nThis email has been scanned by the Symantec Email Security.cloud service.\nFor more information please visit http://www.symanteccloud.com\n\n. \n",
    "tgarnett": "Sent a new pull request that should apply cleanly.\nIt also removes the code that was adding in new response fields (looks like someone else already did it since I sent the original pull request) and updates the comments.\n. More of a warning that this particular existing test is using an incorrect flow that shouldn't be emulated in a production environment as it will leak unclaimed authorizations (which was a problem on our site for a while).  However I was hesitant to change or remove this test without being able to run it easily.  The test is using :capture_only when it should be using :prior_auth_capture\n. Exactly\n. ",
    "23inhouse": "I was getting ready to implement this change in my fork.  I pulled all the latest official active_merchant changes into my fork before doing this, then tested my system.  It seems to be passing the info to paypal correctly.  Including full name, which i just passed as {:name => 'Customer Name'}, paypal split it correctly.  I did NOT try sending the phone number.\nSo i guess they are still supporting old method for a while.\nThanks for researching the paypal docs, i'm sure it is a good idea to update at some stage.\n. @benbruscella I'm glad you cleaned up the pull request.  I noticed there are still whitespace errors on the end of the files. 'No new line blah blah'.\nI ran your test code and could get a successful response.\nMerchant Warrior look like a really good company, a nice looking site, developer friendly and very modern for an australian gateway.  Worth supporting, i hope.\nWhat about the rdocs should they be updated too?  It should be easy judging by all the docs Merchant Warrior have.\n. @benbruscella, I dont have any commit privileges, i'm just trying to help you get this pull request accepted.  Let me know if i can help with anything too.\n. @benbruscella Any news on the pull request?\nI'm just reading through the Contributing guidelines.  Have you had a look and followed all the steps?  Your commit message looks correct.  The 4 simple files look correct (except for the white space errors at the end).\nI just looked over your fork, it is quite meaty.  I'm wondering if having a cleaner history will make it easier to get the pull request accepted?  They might also like it if the fork starts very recently.  I'm just guessing...\n. Adding it to the gemspec activemerchant.gemspec also works.\ns.add_dependency('rubigen')\n. ",
    "jamie": "Updated stored auth/purchase but left in aliases for old method names.\nSpec failures were as you thought, xml attributes coming out of a hash in a different order. Specs run clean in 1.8.7, 1.9.2, and jruby.\nRe-pushed a squashed commit to my optimal branch.\n. So, for a 50% speedup in luhn checks, this code now raises an exception (rather than simply returning false) if the card number includes non-digit characters. :-1:\nAnd don't get me started on https://github.com/Shopify/active_merchant/blob/7c505d4a03a09bfc495c40b946f0fff877f409f8/lib/active_merchant/billing/credit_card_methods.rb#L157\n. Oh, indeed. As they say, \"be permissive on your inputs and strict on your outputs\" - it's an easy change for my app to explicitly filter out non-digits, and would probably be equally easy here to return false if number =~ /[^0-9]/ or similar.\nFinding the introduced exception was an unwelcome surprise is all, especially in a section of code that isn't likely to be a performance bottleneck anyways.\n. ",
    "sivabudh": "@jduff, is this an appropriate pull request? I submitted the change along with the test. Please let me know if this is something that can be merged with the master.\n. Sounds great! Let me work on it, and update again. Thanks!\n. @jduff, everything is done now. I ended up adding:\nruby\nadd_items_xml(xml, options, currency_code) if options[:items]\nand all the tests still pass. \nThanks!\n. @jduff, I have merged the two commits by doing a rebase. It's all pushed and done now. Thanks again!!\n. This request has been migrated to:\nhttps://github.com/Shopify/active_merchant/pull/170\nbecause I couldn't git rebase correctly.\n. @jduff, here's the final change. Sorry I couldn't get the rebase working. =(\n. ",
    "ssoroka": "this hidden field is important for ensuring the parameters are processed in the right encoding. I don't think avoiding form_tag is the answer.\n. ",
    "lulalala": "Rails 4.1 supports removing the utf8 input tag by using :enforce_utf8 => false option.\nIf you use a version prior than Rails 4.1, you can monkey patch your Rails to mimic this line https://github.com/rails/rails/blob/801e159ce2f4645f6839c94ab0febf97a0d8543d/actionview/lib/action_view/helpers/form_tag_helper.rb#L730\n. ",
    "armsteadj1": "Fixed all of the comments.\nLet me know if there is anything else you need me todo.\nThanks!\n. All squashed down.\nThank you for all of the help!\n. Woopsie. That is super confusing. I'm not 100% sure.. We do not support any credit cards :)\nThis implementation is actually a mess up and wasn't the way active_merchant maintainers wanted it done. The implementation sill works fabulous but the flow is different than the one that got merged. :)\nI think once I got that figured out, I stopped focusing on this and on the other branch. So that is why there are probably some incorrect things within this.\nSorry for the confusion!\n. Ahhh! opps! Do you want me to pull that out?\n. Is the transaction complete regardless if it Failed or not? \nOr is 'complete?' more of a way to see if it was successful?\nIf it is the latter then I can change it to verify against Status.\n. Nope. Not, sure where that came from.\n. Changed this code to compare to \"Completed\"\n. removed.\n. ",
    "steved": "I haven't worked on this in a while, but would definitely be willing to work with you to get this to a good place.\nI just have to confirm with the company that I was working with at the time and then can begin working on it.\n. No problem, makes sense\n. There is a feature in vindicia-api that automatically downloads and populates the API methods from schema located on Vindicia's website. I think there was some discussion about including the current versions and only keeping this feature for future compatibility, but I believe this is wthat you're running into. It should only happen on the first run and then they're cached, in any event.\n. I opened a pull request to agoragames/vindicia-api to include the 3.6 API cache in the repository. That would fix the issue of running the unit tests since the VindiciaGateway defaults to API version 3.6 and the unit tests don't change that. Hopefully it will be pulled in tomorrow.\n. Completely forgot about the schema being downloaded. Hopefully it's alright that I copied the paypal way and just kept the current version in test/schema\n. ",
    "jslingerland": "Hi John, \nthis is completely different. The one that's in the AM gem right now uses our Authorize.Net emulator (basically all it's doing is changing the POST URL to something on BluePay's side instead of a URL on Authorize.net's side). The new integration that I uploaded through github adds recurring billing and ACH capabilities. \n----- Original Message -----\nFrom: \"John Duff\" reply@reply.github.com \nTo: \"jslingerland\" jslingerland@bluepay.com \nSent: Thursday, October 13, 2011 9:21:32 AM \nSubject: Re: [active_merchant] Brand new BluePay gateway AM module that adds recurring billing and ACH/E (#181) \nIs this any different than the BluePay gateway that is already in ActiveMerchant? \nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/blue_pay.rb \nIf there are any additional features could they just be added to that implementation? \n\nReply to this email directly or view it on GitHub: \nhttps://github.com/Shopify/active_merchant/pull/181#issuecomment-2395218\n. John,\nIs there anything you need from me in terms of testing this module?\nJustin\n-----Original Message-----\nFrom: John Duff [mailto:reply@reply.github.com] \nSent: Thursday, October 13, 2011 9:22 AM\nTo: jslingerland\nSubject: Re: [active_merchant] Brand new BluePay gateway AM module that adds recurring billing and ACH/E (#181)\nIs this any different than the BluePay gateway that is already in ActiveMerchant?\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/blue_pay.rb\nIf there are any additional features could they just be added to that implementation?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/181#issuecomment-2395218\n. Hi John,\nSorry for the delay in a response. I got pulled onto a few other things.\nI'll go ahead and fix this up a bit.\nThe current BluePay implementation does not support recurring billing since it only emulates Authorize.net's AIM API. The Authorize.net AM module uses the ARB API for recurring billing.\nJustin\n-----Original Message-----\nFrom: John Duff [mailto:reply@reply.github.com] \nSent: Tuesday, October 25, 2011 8:26 AM\nTo: jslingerland\nSubject: Re: [active_merchant] Brand new BluePay gateway AM module that adds recurring billing and ACH/E (#181)\nIf this can replace the current BluePay implementation, and remains backwards compatible, it should. I don't see much benefit of having two of the same Gateway in ActiveMerchant.\nAlso, the formatting of patch is really messed up, could you fix that up it's kind of hard to read right now. There's also a number of global variables being used, those should be changed to instance variables.\nThe interface for recurring transactions should be the same as the other gateways that implement recurring. Take a look at Authorize.net, where you have recurring_payment it should just be recurring, cancel_rebilling should be cancel_recurring etc.\nWe also need unit and remote tests for all features. Since this should replace the current blue_pay implementation those tests should still pass, new tests should be added for the recurring functionality that was added.\nActually, now that I'm looking at things a bit more shouldn't the current implementation already support recurring since it subclasses Authorize.NET? This was the main feature these changes added and it should already be working since it subclasses Authorize.NET.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/181#issuecomment-2517019\n. I've added the remote & unit tests this time.\nPretty much all of the unit and remote tests are the same as the authorize.net ones, however a few of the tests had to be slightly altered because this new module uses a different API than the old Bluepay Active Merchant module. Since this new one uses a different API, I've made it so that the same responses should be expected on transactions (which should make it so that this new module is backwards compatible with the old one.\nPlease let me know if anything needs to be changed. I put valid BluePay test account credentials in the fixtures file as well.\n. No, the updated code does everything that the old code does plus more. The new module will completely replace the old one. I've been working on making sure that the new code is totally backwards compatible with the old code.\nBy the way, those 4 failures should be fixed now. I've tested this in 1.8 and 1.9.\n. I changed the namespace to override the old one. Let me know if those commits all got squashed into one (I'm not sure if I did it right).\n. ",
    "edlebert": "It doesn't look like this was ever merged.  Why not?\n. ",
    "moklett": "I guess I should have done the pull request first, which creates an issue for me :) See issue #183\n. EwayManagedGateway#store does not pass though :email, :customer, or :description from the options hash to the gateway.\nIt DOES pass through options[:billing_address][:email] and options[:billing_address][:customer_ref], but these seem non-standard.\nI've created a patch that maintains the old behavior and adds the \"standard\" behavior.\n. +1, we're using this patch on Chargify\n. Closing for now - I'm going to rewrite this to use some test helpers I'm adding in another pull request.  (The tests are overly verbose)\n. Here are some examples of how I'm using these assertions.  (These examples come from code I intend to add as pull requests once this one has been merged).\n- https://github.com/chargify/active_merchant/blob/98a09161eb4662dd1841402ad25c9c399df32bcf/test/unit/gateways/payment_express_test.rb#L151\n- https://github.com/chargify/active_merchant/blob/652abf3eef5347bd014d4685cc098e58a9a7ce6c/test/unit/gateways/wirecard_test.rb#L123\n. @ntalbott Nope, I missed the CommStub. I'll check that out to see if it will work in place of this.\n. I'm going to convert my new stuff to use CommStub.  Thanks for the heads up.\n. According to the docs, there should also be the option of passing :verify_card => false.  If the :verify_card option is given to store (true or false) pass it through to Braintree.  If its not given, do not pass it through to Braintree at all.\n. @ntalbott This situation is a little different.  The \"store\" must be done first, in the form of a prior reference transaction.  Then that reference is passed in place of the credit card.  But when doing so, the options[:recurring] flag needs to be forced to \"Repeated\".\noptions[:preauthorization] was used to match the existing code present in the purchase method when a token/reference is passed rather than the card: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/wirecard.rb#L61\n. Why hard-code the currency?  add_amount will use the default currency (which is DKK) if none is set by the user via the options hash.  I know the actual currency doesn't really matter for this operation, but we might as well match the one chosen by the implementor.\n. Doh, sorry.  You did exactly what you said you were going to do and took the best from both.  Thanks for the clarification!\n. ",
    "jamsi": "+1 for this pull request.\n. ",
    "kylekeesling": "Closing this issue - posted a pull request located here: https://github.com/Shopify/active_merchant/pull/185\n. ",
    "bmorton": "Yes, it can be specified on profile creation like such:\nnew_user = gateway.create_customer_profile(\n  :profile => {\n    :email => 'user@example.com',\n    :payment_profiles => {\n      :payment => { :credit_card => creditcard }\n    },\n    :ship_to_list => {\n      :first_name => 'User',\n      :last_name => 'Example',\n      :company => 'Apple, Inc.',\n      :address => 'One Infinite Loop',\n      :city => 'Cupertino',\n      :state => 'CA',\n      :zip => '95014',\n      :country => 'USA',\n      :phone_number => '(000) 000-0000'\n    }\n  }\n)\n. With that last commit, I added a fix for making sure the profile hash container is present before checking the options it contains.\n. ...and I had misunderstood some documentation, so I took out something that was already supported that I had implemented again incorrectly.\nThis should be good now.\n. Sorry about that.  I've squashed it all down and rebased upstream/master.  Should be good to go now.\n. ",
    "cmonty": "@jduff\nThanks for the feedback. We'll make the requested changes.\nCory\n. ",
    "neerajdotname": "looks good. nice work.\n+1\n. @ntalbott  since this is the non-CIM version of Authorize.net we are talking about , in reality, no one should have access to the full card number to pass the full card number.\nWhen I saw the api that card number if required I was startled because I am dealing with non CIM version and I do not have access to card. Hence I added the patch to clarify.\nI did not test what would happen if full card number is passed.\n. ",
    "sgruhier": "+1 please add it to official repository\nThanks\n. ",
    "peterberkenbosch": ":+1:\n. ",
    "pietere": "+1 to have this merged in the master branch\n. ",
    "boucher": "Stripe's recurring billing is not generally compatible with the recurring billing in ActiveMerchant, so we chose not to include it here, and probably won't going forward.\nWhat specific customer features were you looking for?\n. I no longer work at Stripe, but I can tell you that I don't think that particular information is being used, and most people use the official Ruby bindings, so it probably isn't a big deal. But you might be better served by asking @gdb, who wrote that particular line. \n. I don't feel all that strongly about this, but our API definitely uses other HTTP verbs and I figured as we added more things into the bindings this would be pretty useful. I'll take it out if you prefer though.\n. Sounds reasonable. Just pushed that change.\n. ",
    "benbruscella": "OK, no problem, thanks for the info.\nNew submission here:\nhttps://github.com/Shopify/active_merchant/pull/206\nWill close this one\n. Decided to do this on a clean branch to help with the submission.\nTherefore, please ignore https://github.com/Shopify/active_merchant/pull/203.\nThis is branched from the v1.18.1 tag.\n. Dennis, any update on this? \nPretty keen to get this in so let me know if you want me to do anything else.\n. @23inhouse, no problem I'll get that done ASAP. \n. @23inhouse, nope, no news.\nSince we have some projects using this fork, I'll resubmit again from our company account after incorporating your suggestions.\nThanks for the help.\n. ",
    "pitr": "tests added, code refactored, wording corrected.\n. Is there anything I can do to help merge this in?\n. Fork by author of aforementioned issue (#210 by @jah2488) doesn't seem to be supported anymore:\nhttps://github.com/jah2488/active_merchant/compare/nurey:fix_secure_profiles_in_beanstream...fix_secure_profiles_in_beanstream\n. ",
    "jah2488": "activemerchant (1.18.1, 1.10.0)\nahh... I'm sorry, oversight on my end. My Gemfile was locking me into to the old version of the gem. Thanks.\n. Actually, what I need has already been fixed in issue #205 and I am just waiting for that pull request, so  I'll use his fork until its been merged. \n. It seems I spoke to soon. #205 fixes the error, but does not accommodate all the options which need to be passed to the API to allow a purchase on a payment profile\n. Actually everything was fixed/ready in #205, but the documentation needs to be updated slightly to make it a little clearer how things work when you switching to payment profiles over normal purchases. I'll try to get around to updating that.\nThanks\n. ",
    "odorcicd": "Thanks Josh.\nClosing this one due to an updated pull request in #221\n. Closed by 66bd06ecf19\n. :ok:\n. :ok:\n. :ok:\n. :ok:\n. Nothing stands out, looks good!\n. :ship: \n. :banana: \n. From my understanding, Payflow Pro merchants aren't receiving the shipping address at all. Would the name being wrong prevent the rest of the data from being submitted?\n. :banana: \n. Yea, seems fine.\n. :sailboat: \n. :ship: \n. :shipit: not sure how to go about fixing it for both CAD and USD, which kind of sucks.\n. :banana: \n. :ship: \n. :banana: \n. Nothing stands out... :banana: \n. :ok: \n. :banana: \n. Can you add tests?\n/cc @jduff \n. couple comments, lgtm\n. ping @orenmazor @tahnok made a few changes (parsing posData, bug fixes with Notification definition, and changed the mapping). One more look before merging?\n. make sure to tag the release as well\n. ping @jduff @bizla can you guys take a look at this?\n. :banana: \n. sure, will do\n. Closing this as we've moved to the new cardstream integration.\n. we'd probably benefit from a Return with Shopify's flow instead of waiting on a Notification\n. Looks good to me, nicely done :thumbsup: \n. I think we'll have to revert this. We can't drop support for eWay Rapid 3.0 all together, so this would need to be implemented in such a way that both could work together until 3.0 is EOL'd. This could be done similar to how Braintree supports both Braintree Orange and Blue (https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree.rb#L10)\n. Hey @duff, eWay let us know they whitelisted our IPs a week ago. They provided a test account that  we're going to run some tests to confirm everything works as expected, before shipping this in another AM release.\n. @bslobodin can we get @justinplouffe to test and finish this off?\n. :banana: \n. :ship: \n. :ship: after you clarifying what a plete is.\n. :ship: \n. :shipit: \n. :ship: \n. :banana: \n. @edward still find it weird that Klarna would blow up if there's someone making a purchase from outside one of those countries. This means any merchant using Klarna can't have any international customers?\n. @edward do they also blowup if the billing information put in is a US address, for example?\n. :cool: \n. :banana: \n. :banana: (pxpay was likely only failing for you because running the individual test didn't pull in nokogiri, but running the suite had required nokogiri at some point so the test ran without issue)\n. Couple small things, but nothing stands out.\n. :banana: \n. :banana: \n. @ntalbott lucky you guys! :wink: \n. :banana: \n. The reason it's dropping the email (from Shopify's perspective) is that we don't pass the customer email into the helpers initializer as an option, it's always been a mapping. Since we're using credential_based_url, we have to generate the url before the mappings happen, which is why we can't send the email along. I can still add it back as an option, it's not required by their docs so I don't know if we need to change things up to make it work for this specific case.\n. I'm going to :ship: \nI think we can look into making credential_based_url more friendly, by pulling and mappings by delaying when the call is made (it can capture the mappings in the block, and create the form element last).\nThen we could go back to making this nicer.\n. @silverstreaked had to revert as it didn't work out for some reason. I'll have to revisit this shortly.\n. makes sense, thanks for finishing this off!\n. Works for me!\n. If we're using ActiveSupport, should we just use squish?\n. Yea, I think this is fine.\n. :banana: \n. :ok: \n. @ntalbott Yea, if a gateway supports some type of track data parameter, and the CreditCard object (if it is one) has something set, populate the param.\nI'm not a fan of testing with send and would rather test that API call that makes use of adding the track data, and verifying that the data is properly being POSTed or what not.\n. That was my thinking as well, but really they should be caring about the code and not the message (They might be doing something like outputting CVV: No Match, which would turn into CVV: CVV does not match).\n. No tests, no review! :stuck_out_tongue: (PS a test will catch a bug I see in this code)\n. :banana: \n. :banana: \n. :banana: \n. Is @raw used at any point?\n. Can this just be:\ndef parse(post)\n  json_post = JSON.parse(post)\n  params.merge!(json_post)\nend\n. I'm not sure what params[\"Status\"] can return, but would 'complete?' always return true or is it based on the status returned.\n. Please update all these tests to include proper testing for the Dwolla helper\n. Can you always add the field instead? Otherwise lgtm\nadd_field('test', ActiveMerchant::Billing::Base.integration_mode == :test || options[:test])\n. should be win_3d\n. The options you're checking in the conditional don't match what you're adding as a pair (accept_url/accepturl, decline_url/declineurl, exception_url/exceptionurl). There should be a test that verifies these are properly being added if provided.\n. Since we depend on activesupport, you might want to just use parameters.to_query instead of doing the escaping and joining yourself. Might need a require in lib/active_merchant.rb if it's not being added already.\n. Should this be testing against capture instead, otherwise its just the same as line 125?\n. Just require 'active_support/core_ext/object'?\n. Perhaps something like this instead to avoid this publicize_methods hack?\n``` ruby\ndigest = Digest::SHA1.hexdigest(\"1100EUR4111111111111111MrPSPIDRES2mynicesig\").upcase\n@gateway.expects(:add_pair).with(anything, 'SHASign', digest)\n@gateway.expects(:ssl_post).returns(successful_purchase_response)\n@gateway.purchase(@amount, @credit_card, @options)\n```\n. Never caught this the first time, sorry. Shouldn't have to test private methods like this, either test whatever is calling it, or use expectations.\nSee below for example.\n. See comment in #213 about using mocha expectations instead to avoid #publicize_methods\n. expected value comes first on this line, 127, and 135\nfor both pull requests, force push to their respective branches to keep any minor changes you're doing in one commit and mention us when it's been updated.\nlooks good overall though, thanks!\n. indentation here and below\n. where are disable_review, subtotal, shipping, handling, tax, and locale used as options? anywhere?\n. typo\n. I'd pass in a hash that gets merged instead. it's not clear what the boolean being passed would change when calling this method\n. 'my order' == params[\"description[8]\"] can be the return, lgtm besides that\nIs Paypal fixing this on their end and can this be reverted sometime down the road?\n. Should we allow strings that are numbers? What about something like this:\nruby\npost[:T_customer_number] = options[:customer] if Float(options[:customer]) rescue nil\n. these last two tests seem useless as well\n. assert isn't useful here\n. if there's no override for cancelled?, you cna just remove this\n. if they have to be set (can't be done through mapping?), you can just set the merchant_id and secret_key when needed instead of calling new on a module, id get rid of this method too.\n. If browser_ip doesn't work and never worked anyway, should the reference just be removed completely?\n. :browser_ip is used within Shopify, and there was probably just a mixup when this was first added. The standard way is using :ip, so by still assigning it to :browser_ip, it will not work for anyone just passing :ip. Since :browser_ip never worked in the first place, I think removing the reference to it, and slicing :ip as part of the accepted options to add into post is the way to go?\n. you have to close these off, otherwise this would pass even if the amount was 100\n/<amount>1<\\/amount>/\n. same, need to close\n. not sure if you want to stay inline with how amount does the str output and use sprintf(\"%.0f\", amount.to_f / 100)\n. reads a bit nicer I think:\n``` ruby\ndef localized_amount(money, currency)\n  amount = amount(money)\n  return amount unless non_fractional_currency?(currency)\nif self.money_format == :cents\n    (amount.to_f/100).floor.to_s\n  else\n    amount.split('.').first\n  end\nend\n. how is this used?\n. the `test_url` is no different? you can remove all of this and just return the only one in `service_url`\n. should have `self.return` as well, and pass both parameters `(post, options)`\n. `test?` is in the base class, if there's no change you can just remove it\n. I'm not seeing what this is doing differently than than `parse` in the base class, any ideas?\n. seems weird to have to call `send`, parse XML and validate, can't you assert this similar to how `test_credit` tests above, checking what is being POST'd instead?\n. Don't we depend on this as part of the return process or will it always be treated as a success, and only Notifications can create the transactions?\n. :exclamation: \n. Current integration won't work anymore, and we'll still have to modify it because we'll be using `credential3` to store the new Signature Key that the merchant has to add. Our strategy is to reach out to merchants to get them to add the key, then flip the switch to this integration before the 10th when it ceases to work anyways.\n. what happens if you don't pass `currency` to Paydollar, do they give a proper error page with a message explaining the issue?\n. where are any of these urls used? I can't find any external calls.\n. Do they return a message when its not a success? We should implement `def message` as well, so that if it failed, we can return a message to the customer, otherwise they'll receive a blank message and not know why it failed.\n. Should we have the customer (or merchant while they're testing) see this page instead? If we raise a StandardError, they'll get a generic 500 page and not have the slightest clue as to what's going on.\n. we have a test url, but when we receive a response, how do we know if its test or not, do they send us back a test parameter?\n. That's... weird. Not sure how they missed that. If any test orders go through, we'd never know if it was test or not, so it would have to default to being processed as a production order.\n. Does Conekta require a description be set?\n. Can we not just change the order that `payment_service_for` executes so that we don't have to pass in additional options, but can still pull things from the what's passed into the block? The credential_based_url can be generated at the end and use those `@fields`. You'd also be able to pass `description` instead of `account_name` when requesting redirect. \n. Where is this used?\n. Why do you need to override initialize?\n. How does @transaction_id get used?\n. this can't be anything but `EUR`? It's not based on their account settings or anything?\n. don't think this is necessary? `amount` in base class would do the same thing I think?\n. ruby\ncase @params['status']\nwhen 'open';             'Pending'\nwhen 'paidout', 'paid';  'Completed'\nelse                     'Failure'\nend\n. used?\n. With the addition of #1073 they all get changed into a specific one which can be rescued specifically. All intergrations are different and their helpers raise all kinds of exceptions, so I figure the catch-most lives at that level before reraising as a more specific error.\n. It's needed, just wanted to verify that EUR was the only option.\n. I want to verify that `purchase` calls `add_verification_string` (`expects` could be used), but also that the logic within it is correct and produces the right XML. Do you think its beneficial to have another test which does an `expects`?\n. With the expectation it mocks the method out, so we can't test the logic within it. \n. In the original docs, it also says it can't exceed 41 characters in length. I'll send them an email to see if we can get a solid answer and if we can send something that pleases all the processors.\n. The gem seems to only use the street address and postal code, separated by `|`. I've reached out to them and see what they say regarding the differences in their docs (not using `|` as a separator based on processor).\n. text\nThe address value must be formatted depending on the bank processor used.\nIf the bank processor used is Chase Paymentech or Moneris, the address value must be in this format: streetaddress|zipcode (where: \"|\" is hex(7C) ).\nFor more information, please refer to: https://hostedcheckout.zendesk.com/entries/235981-How-do-I-do-AVS-Formatting-if-I-use-Chase-Paymentech-or-Moneris-as-a-processor-\nIf the bank processor used is TSYS (also known as: Vital), the address value must be in this format: \"street address + apt no. + zip code\" OR \"post office box number + space + zip code\"\nFor more information please refer to: https://hostedcheckout.zendesk.com/entries/235988-How-do-I-do-AVS-Formatting-if-I-use-TSYS-Vital-as-a-processor-\nFor all the mentioned bank processors, there's a limit of 29 characters for the address value so that will work fine. However, the format differs so you will need to adapt it depending on the bank processor used.\n```\n. Based on the reply from their support, I don't think we'll support this. Closing.\n``` text\nWe format the Address on behalf of the merchant when the transaction is sent through Hosted Checkout's payment page.\nIf the API is used, the address needs to be formatted per the Bank processor's requirement.\nIf contents were separated by \" | \" when TSYS is used, I suspect that would cause an issue on TSYS's side as the address value submitted would not be in the expected format.\nI would recommend storing the payment processor used by the merchant and adding a condition based on it in order to make sure the right address format is used.\n. Add support for both staging and live? This looks like just a test url\n. What about just defaulting to something?\n. This still needs to be complete, or removed if Klarna doesn't support Notifications.\n. Same, to be completed?\n. ruby\ndef standard_fields\n  {mappings[:test] => @test.to_s}\nend\n```\nMight just be able to do add_field('x-test', @test) in initialize if we care about this.\n. We have access to shipping_address which might be entered as well before we send the user to the offsite. Not sure if it wasn't added for a reason?\n. ruby\nsuper\n@notification = Notification.new(query_string, options)\nshould do the trick\n. the notification object will handle the functionality of acknowledgeing. I think this can just check of the status param is not failure?\n. I'd still prefer a sane default vs an exception\n. to_i and to_f?\n. not sure I see the benefit of this, can example_line_item just return a hash with defaults in there?\n. doesn't look like this ever responds to discount_rate?\n. I think realistic is fine. If anyone else is adding functionality it might give them insight.\n. should be in X.2 decimal\n. Is it? I think it depends on what the gateway returns. Base on the Notification base class, it should be returning a string with 2 decimals from what I understand. If they pass us 100 this would return 1.0 float vs 1.00 string?\nNot sure if its a big deal.\n. Umm, which country has the biggest population? \u00af(\u00b0_o)/\u00af idunnolol\nDoes Klarna enforce that the purchase_country is one of its supported countries NO, FI, or SE?? If not, could a shop not be can be in US, but be using Klarna because it sells to a country Klarna supports and uses that gateway. If we raise here, customers would never be able to make a purchase on this shop. (Also, isn't purchase_country supposed to be where the purchase is being made, not the merchants country likes its been set?)\n. there is no mapping for customer or billing address?\n. That's where I'm getting confused. You're using the details from shipping_address, which could differ from the customer and billing_address that we'd send it. I'm just wondering how those aren't being mapped to anything on Klarna's side and we're just throwing them away.\n. You're currently setting purchase_country to @options[:country] though, that's the shops country, not the customers country.\n. What does '1' 'Waiting payment' mean? Would it fall under 'Pending' or definitely not?\n. purpose of assignment?\n. can acknowledge just be Verifier.new(...).verify vs a method?\n. That's fine, all I'm saying is that if people depend on gross to be a string (or they to_s), they could be getting back \"1.0\" vs \"1.00\" if gross_cents returns something like 100\n. What's the difference between these format tests?\n. assert_equal\n. not used?\n. Why does this need to be conditional?\n. The include_currency argument looks like its boolean, but you're passing it a hash above.\n. This should check what eci actually is (a string), if recurring then set the flag.\n. Same as above, this should only pass if eci as an option is set to recurring I think.\n. Before we started greedy rescuing, GestPay would either fail during the remote call or intermittently give us an error with the signature calculation (wrong credentials). What do you think we'd be rescuing that should be bubbled up?\n. I've used a more specific error class for this, so we can rescue more specifically.\n. what's passed in here that needs to be converted to a string?\n. maybe something like this reads a bit cleaner?\nruby\ndef address_with_defaults(address)\n  address ||= {}\n  address.delete_if { |_, v| v.blank? }\n  address.reverse_merge!(default_address)\nend\n. test?\n. ",
    "ayayalar": "That was the problem. Thank you titanous!\n. ",
    "bartiaco": "Any update?  I have a current need for this :)\n. I can wait, I'm just poking :)\n. From reading Paypal's docs, I believe the primary changes in the newer versions of the api is a change in many of the key names to a format of PAYMENTREQUEST_n_KEYNAME, to support multiple transactions per request.  There are a few additional keys, but I don't believe that anything has been removed. \n. The Paypal digital goods are exactly the same as regular express, except it requires the digital goods item category, and should have noshipping set, since you can't ship digital goods.\n. Yeah, that's how I probably would have implemented it.  It seems like making it a class was just sort of a convenience method for adding the digital goods category validation.  How does one checkout  someone else's pull request and add commits to it?\n. Good point, maybe leaving this as a class is a good idea\n. ",
    "KeeperPat": "Rebased off of master. Please let me know if you need anything else.\n. I'll send you a patch that adds our test Authorize.net credentials so that the remote tests will run.\n. ",
    "robwilliams": "+1\n. ",
    "wisq": "LGTM\n. :+1:\n. :+1:\n. I'm wondering if it makes more sense to use separate Gemfiles instead of Gemfile.locks, and have it always use the latest gems according to the Gemfile's spec.  So you would limit Rails to 3.0 or whatever, but everything else would be \"latest unless Gemfile says otherwise\".\n. In cases like this where I plan to fix whitespace in a file, I like to fix all the whitespace as one commit, then do my actual changes in another.  Makes it easier to review just the changes.\nAnyway, looks good.\n. See comments.  Otherwise, LGTM.\n. See above.  Otherwise, LGTM.\n. ^\n. Not technically the same thing, since if you call shipping_address twice -- once with address data, once without -- John's code will say shipping address is set (which it is), whereas this code will say it's not.\nWhether that distinction actually matters is up to you.\n. Please move this line up one (above the @helper.add_field).  Right now, it looks like you're expecting add_field to truncate the original \"description\" variable, but #truncate is non-modifying.  Took me a moment to figure out you were expecting the original string to be 101 chars.\n. I wouldn't bother with these two lines.\nwith_crypt_plaintext will call form_fields, and as long as it has your description, you're good.\n. I wonder if this would read better as just \"CreditCard#type is deprecated and will be removed\" etc etc.\n\"Support for x\" makes it sound like we're removing a feature, and doesn't immediately make it clear what's being deprecated.\n. Is inlining the add_avs_details method the right way, or should we just pass the AVSname to the add_avs_details function?\n. ",
    "ziloc": "Missed something, will send an updated pull request shortly.\n. ",
    "brentmc79": "Added unit tests to verify the intended behavior\n. @ntalbott ok, I've removed the true check, but added an additional check to avoid the retain call if the pan/cvv is invalid or if a token was not provided.\n. @ntalbott Done. Merge away!\n. Updated the pull request to support :verify_card true AND false. Also added support for :verification_merchant_account_id. cc @moklett \n. @ntalbott squashed!\n. @ntalbott Ok, I've added the :id stub, removing the warnings in 1.8.7-p352 and errors in 1.9.2-p290.\n. @ntalbott yeah, I guess I just wanted whoever was calling the method to be as explicit as possible, but either way is fine.\n. ",
    "ginettev": "These are the commits for the same:\n271a2f4 added paypal recurring gateway\n8806ff9 returning errors count as 0 when errors not present\naefafb7 returning profile id for paypal recurring payment\n007afdb tests for paypal recurring gteway\nThe paypal_recurring gateway is from vantran's branch\n. Could you tell me what errors you were facing. I will be fixing them in\nthe evening.\n\nGinette\nOn Tuesday 20 March 2012 10:02 AM, Nathaniel Talbott wrote:\n\nThis isn't applying cleanly for me, not sure why - can you squash into a single commit and I'll retry?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/308#issuecomment-4595768\n. Thanks Diego. I am not able to look at this right now. You can go ahead\nwith your changes.\n\n\nGinette\nOn Tue, Mar 20, 2012 at 11:09 AM, Diego Scataglini <\nreply@reply.github.com\n\nwrote:\n@ntalbott I created a new pull for this\nhttps://github.com/Shopify/active_merchant/pull/311 with the squashed\ncommits.\nShould I add the recurring payment api to PaypalExpressGateway?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/308#issuecomment-4597376\n. \n",
    "sweitzel": "@ginettev : Sounds really good, what about creating a pull request for it? There was already one pull (142) related to paypal recurring, but because no test was provided it got never approved.\n. Ha I would love to see Paypal Express Recurring integrated! Might be worth to integrate to the existing gateway though, like ARB?\n. ",
    "requnix": "Yeah, I saw some discussions from a long time ago, but nothing that seemed conclusive, so I just made it work. I'd be happy to confirm to a specific way of dealing with it if someone points one out.\n. Sure, see if that did it.\n. OK, that should do the trick. Sorry, my gitfu is not strong.\n. Well, I'll be. Give me a sec to sort it out.\n. Sorry for the delay. I merged upstream and squashed to one commit, but I now get a failing test relating to some other part of the gem. Let me know if it's an issue.\n. I was using Postbin to emulate the site accepting posts from the 3DS server, in the meantime Postbin has been replaced by Requestb.in so I'll have to update the URL and test it against that again. I'll get to that soon.\n. After some investigation it seems there are some error notices coming from either MyGate or the 3DS service they use which may require a more significant amount of time to correct, so I will close this pull request for now and leave the current code on our fork. The next time we need MyGate integration we'll fix it up and open another pull request.\nSorry about the poor conclusion and thanks a lot for all your time!\n. ",
    "ghost": "I am looking for code to integrate mygate with active merchant. Any update on this?\n. I getting following response\nAuthorize Net CIM Transaction\n  transaction_options: {:type=>:refund, :amount=>\"20.00\", :customer_profile_id=>\"27737549\", :customer_payment_profile_id=>\"25284742\", :trans_id=>\"0\"}\n  response: #{\"result_code\"=>\"Error\", \"message\"=>{\"code\"=>\"E00001\", \"text\"=>\"An error occurred during processing. Please try again.\"}}}, @message=\"An error occurred during processing. Please try again.\", @success=false, @test=true, @authorization=nil, @fraud_review=nil, @avs_result={\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\nGateway Error\n  --- !ruby/object:ActiveMerchant::Billing::Response\nparams:\n  messages:\n    result_code: Error\n    message:\n      code: E00001\n      text: An error occurred during processing. Please try again.\nmessage: An error occurred during processing. Please try again.\nsuccess: false\ntest: true\nauthorization: \nfraud_review: \navs_result:\n  code: \n  message: \n  street_match: \n  postal_match: \ncvv_result:\n  code: \n  message: \n. @girasquid @ntalbott @j-mutter Thanks guys. It looks like I am better of not using AM.\n. @ntalbott @j-mutter Yeah, if the amount is nil, you'll get the old behavior: the Pin Payments app will attempt to capture the full amount originally authorised.\n. ",
    "gformich": "I forgot to include my contact email, its gformich at gmail.  I work for Litle and we are excited to get involved in ActiveMerchant, we just introduced a Ruby SDK as well.  Please email me if changes are needed to smoothly integrate into your codebase.\n. ",
    "ivanoats": "I'm not seeing the PONUM recorded in the PayPal manager website \nI have:\noptions = {\n  billing_address: { address1: foo, etc.... po_number: \"123\" }\n}\n. ",
    "jsqu99": "Sorry, I should have searched first.  I see that https://github.com/gdb/active_merchant/commit/a2ebb514b1a35490e820240f24c592a583c561f6#L1R107\ntakes care of this\n. ",
    "lest": "@jduff done with uninitialized constant ActiveSupport::SecureRandom\nI've tested with 1.8.7-p352 and 1.9.3-p0 rubies.\nThere are still 2 failing tests https://gist.github.com/b2b12c529610c4fa0d20, but they fail without my changes too.\n. ",
    "exviva": "Replaced with a more generic #250\n. @ntalbott done. I see you're on a merging spree :).\nCan't wait for this to get merged and released, so that we can get rid of our custom gem release.\n. @ntalbott thanks! When do you think this will be released?\n. I see. I guess after such a handful of closed PRs it shouldn't be long. Great job!\n. ",
    "jglass": "So, I don't think it's possible to show that the line items are getting added without the Authorize.net transaction details API, which I don't think is implemented by activemerchant and is probably beyond its scope. I think the best thing is probably to close this and I'll extract that functionality to a separate gem that depends on Authorize.net and includes the transaction details API.\n. ",
    "pote": "Cool, I'll write tests for it and resubmit the pull request, sorry about the changelog/version, will fix that :) \n. ",
    "waelchatila": "i contemplated doing this, the change is really small (changing a false \nto true), it would be faster to do that than to write an email\nOn 2/27/12 5:36 PM, Nathaniel Talbott wrote:\n\nWould definitely merge a Pull Request that fixed this - thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/252#issuecomment-4207694\n. Thanks and thanks for a great library!\n\nOn 2/29/12 10:48 AM, Nathaniel Talbott wrote:\n\nDone!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/issues/252#issuecomment-4243979\n. \n",
    "gtd": "Thanks for the responses.  We ended up moving to the Braintree gem because the potential benefits of AM's abstraction (being able to change gateways) is outweighed by the complexity of dealing with tons of disparate gateways which we will never use.\n. ",
    "jcoleman": "Done.\n. ",
    "stiak": "My pull request (#272) fixes the same issue but a bit more thoroughly.  The XSD defines elements in a <sequence>, so there is specific ordering.  It seems that Paypal isn't always very picky about it, which is why most things have worked so far. \n. This is both a fix and a new feature.  Should I split this into two commits?\n. I'll request this as two pulls.  First is #272\n. ",
    "calvincorreli": "Scratch that ... too soon ... dosn't work.\n. Sorry, didn't mean to submit v7 yet.\n. No prob.\nSent from my iPhone\nOn May 10, 2013, at 1:20 AM, Nathaniel Talbott notifications@github.com wrote:\n\n@larspind I'm going to close this in lieu of a 1.8 compatible solution; we may be able to revisit it in the context of ActiveMerchant 2.x, where we plan to drop 1.8 backwards compatibility.\n\u2014\nReply to this email directly or view it on GitHub.\n. Please ignore the changes to lib/active_merchant/billing/integrations/paypal/notification.rb\n\nI'm not sure why they got in there, or how to get them out again.\nNot relevant to this change.\n. They worked for me when I tested before submitting the pull request. Not working for you?  \n\nhttp://zenbilling.com\nhttp://calvinconaway.com\nOn Monday, September 23, 2013 at 4:55 PM, Louis Kearns wrote:\n\n@melari (https://github.com/melari) can you review & test?\n@larspind (https://github.com/larspind) can you confirm that the test credentials provided here (https://github.com/larspind/active_merchant/blob/quickpay-v7/test/fixtures.yml?pr=%2FShopify%2Factive_merchant%2Fpull%2F835#L451) still work appropriately?  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/Shopify/active_merchant/pull/835#issuecomment-24953749).\n. What was gnarly about it? Didn't it apply cleanly? If not, why not? What did I do wrong?\n. Changes look good to me.\n. Still not sure how to do this. I'm running my own fork in production, and have been for a very long time, since the process of getting pull requests integrated was too slow. Occasionally I'll pull in upstream changes if there are things I need from there. And I have things in my fork that you don't want in the official repo, but that I do.\n\nSo when it comes time to create a pull request, I'm simply not sure what the proper way to do that with github is, to avoid the messiness.\nWhat I really want, I guess, is to cherry-pick a set of changes into a pull-request, but I don't know how to do that.\n. Sounds great. How do I create a branch off of Shopify master? And how do I then make it a pull-request?  \nnotsmartenoughforgit\n\nhttp://zenbilling.com\nhttp://calvinconaway.com\nOn Monday, October 7, 2013 at 4:37 PM, Nathaniel Talbott wrote:\n\nA PR is just a branch; my recommendation would be to create a branch off of Shopify master, get the change you want to submit back applied there, and then submit.\nIn terms of your fork, you can either make changes in the fork master branch first then extract them into a PR branch (git cherry-pick can be a good tool for this), or make the changes in the PR branch first and then merge the PR branch into your fork once it's ready to go and/or if the PR is taking too long to get merged. I personally prefer the latter since it tends to be simpler conceptually, but either will work fine. The key thing in both scenarios is that the PR branch is started at Shopify master and not your fork master.\nWe maintained an ActiveMerchant fork at Spreedly for awhile, and if I had to do it again I'd ensure all my custom non-upstreamable changes were clean commits, and I'd regularly rebase them on Shopify master and force push my rebased branch. That keeps things super clean and helps make it clear what you're maintaining in your fork.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/Shopify/active_merchant/pull/835#issuecomment-25842868).\n. No, that's not part of the Quickpay changes. Included by mistake. Sorry.  \n\n-Calvin  \n\nhttp://zenbilling.com\nhttp://calvinconaway.com\nOn Tuesday, September 24, 2013 at 10:13 AM, Caleb Simpson wrote:\n\nIn lib/active_merchant/billing/integrations/paypal/notification.rb:\n\n\n\n\n\nprivate > + > + # Take the posted data and move the relevant data into a hash > + def parse(post) > + @raw = post.to_s > + > + @raw.match(/(^|&)charset=([^&])(&|$)/) > + encoding = $2 || 'UTF-8' > + > + for line in @raw.split('&') > + key, value = *line.scan( %r{^([A-Za-z0-9.]+)\\=(._)$} ).flatten > + params[key] = CGI.unescape(value).force_encoding(encoding).encode('UTF-8') > + end > + end > +\n  Don't think we need these changes to the paypal integration?\n\n\n\n\n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/Shopify/active_merchant/pull/835/files#r6544374).\n. \n",
    "cmhobbs": "The requires may need to be adjusted, though...  From the API docs:\nAt least one of the following fields must be submitted under profile:\nmerchantCustomerId, description, or email.\nSo, while :profile is required, it also needs one of those fields.\n. These commits are also included in #265.  Feature branches are where it's at.  Sorry for the spam.\n. This includes the fixes for AuthorizeNetCimGateway#create_customer_profile mentioned in my last pull request.\n. That should do it, I think...  Feel free to scold me if I botched the merge, it's been a long day.\n. Alright, closing this to open a new pull req with the squished commits.\n. I'm on it!  Sorry for the hassle.\n. How 'bout them apples?  My git-fu isn't very strong.\n. ",
    "alex-kovshovik": "Kevin was really helpful in resolving the issue with iTransact gateway. I was able to compile the active_merchant gem from his repository and it works just fine.\n. ",
    "a-kushnir": "We are used itransact in activemerchant v 1.20.2. Could you please add this feature in newer version of gem?\n. ",
    "motske": "Thanks for taking a look at this.  We have an auditor here this week, but I'll try to address these issues as soon as I can.\n. I wasn't quite sure on the procedure you want for adding commits after the pull request so I haven't done any squashing.  Let me know if you need me to squash everything to one commit.  I made the changes you suggested although obviously I can't address the Nokogiri question.  We were initially using builder to generate XML, but I couldn't generate some structures we needed.\n. Fixed and squashed.\n. I think this is an issue with using ruby 1.9.  It looks like Base64 no longer has the b64encode method and now has an encode64 method.  I'll add some detection code in there to that it works in both.\n. Sure, do it the easy way :)  Sorry I didn't notice that.  I changed that and squashed my new commit in.\n. ",
    "Anjen1": "Thank you. \nCaught this just in time. I was literally just getting ready to gamble on compatibility when your reply came through. \n2.3.11 is larger than 2.3.5. You'd think that after years of viewing revision numbers I'd finally get that decimal values aren't the same as version numbers....\n. ",
    "triemstr": "I agree.  It's a little painful to change name into first and last when it's unnecessary.  And name itself is not part of attr_accessor.\n. ",
    "vra5107": "Thanks for the quick reply. You are right.\n. ",
    "VantivSDK": "Nathan-\nWe have made the changes you've requested initially.  Please review.  We are happy to make our integration as idiomatic as possible.\nThanks,\n-Litle & Co\nsdksupport@litle.com\nhttp://www.litle.com\n. Nathan-\nSorry this got lost in the shuffle.  We are going to try to a 2nd pull request with a single commit.  Squashing after having pushed is not working correctly for us.\nThanks,\n-Litle & Co\nsdksupport@litle.com\nhttp://www.litle.com\n. I'll get these changes in. Thanks Nathan\n. Ok.  I will have a look at getting it to work with 1.8.7.\n. 1.8.7 is not a small hurdle for the LitleOnline SDK that our ActiveMerchant contribution requires.  We have 1.8.6, 1.9.2 and 1.9.3 and thought 1.8.7 would be mostly backward compatible with 1.8.6.  We know know more :-)\nCan you please share which versions of Ruby are required for inclusion so that we can add each one to our build as a starting point?\n. Thank you Nathan\n. Nathan-\nOur ActiveMerchant contribution now supports Ruby 1.8.7, 1.9.2 and 1.9.3 based on the 8.12.3 LitleOnline gem.  Please let us know if you encounter any issues.\nThanks.\n. We've merged in our changes, and Travis is complaining about Vindicia's tests.  I'm a little unsure how we broke them :-)  Any guidance would be much appreciated.\nThanks\n. Will do Nathan.  I have no wish to pollute the global namespace\n. Yes, please do.\n. Hi @kjbkjb,\nVantiv can take this issue and submit a pull request with updated URLs. The test URL will change as well, we will update that too when all is ready to go live.\n. ",
    "joelcogen": "I guess, it stores the payment method on Ogone.\nThey call it an alias, which is why we used this terminology, but we can adapt it. Could you point me to a specific documentation regarding store and unstore so we can conform our implementation to ActiveMerchant standards?\n. Thanks a lot for all your input! I've created a branch and made a new pull request here: https://github.com/Shopify/active_merchant/pull/282, but I still have some questions. Could you comment on my changes?\nThanks!\n. @ntalbott the current authorization is correct IMO, as this is the reference we need to do things like cancel a payment afterwards, which seems to be the same in other gateways.\nI'll replace store with billing_id, and implement backwards compatibility, so we can start to work on a standard for all gateways.\nI'll also create a new Response class to add the alias into, along with a few tests.\nI'll commit this as soon as I have some time :-)\n. Hello again!\nI've applied all the changes we talked about:\n- billing_id option replaces store, although the latter still works with a deprecation warning\n- I created a OgoneResponse class, which allows to retrieve the billing_id and order_id from the response, in case Ogone generated them for us\n- I added unit tests for the store method and the new OgoneResponse, and adapted/completed the remote test\n- I updated the doc to show usage of the store feature\nLooking forward to your comments!\n. @ntalbott : Done :-)\n. @ntalbott I squashed into a new branch and made a new pull request: https://github.com/Shopify/active_merchant/pull/304\nDon't know if there is a simpler way to do this?\n. I though about that, but didn't know if a push force would be appreciated. I'll do that next time!\nThanks for you input!\n. ",
    "moeyb": "Hi, I am a complete newbie when it comes to github and active merchant. I was wondering if anyone would be kind enough to provide me with some help. \nI need to add NAB Transact to my Shopify shop and I am clueless as to where to start. Is there any specific steps to take to get this going? I see that others have successfully installed this, would you please tell me how? \nThanks. \n. ",
    "ylansegal": "@ntalbott I may have jumped the gun a bit reporting this. I am using active_merchant_testing for mocking in testing and I now think that the problems lies with that library and not activemerchant. I am closing now and will reopen if needed. \nThanks\n. @ntalbott Yes, that was it. It ended up being a small tweak. \nBy the way thanks for the work on Auth.net CIM is have been using a workaround for the transaction_id not being set on authorization (that you know fixed) and been meaning to fix it and submit a patch for while. Thanks!\n. ",
    "dennisfoconnor": "Please take a look at: https://github.com/Shopify/shopify/pull/1212 as well\n. This patch was based on incorrect information about Visa Dankort and what it does. If it is being processed by a gateway that supports Dankort it should be processed as a Dankort card, otherwise it should be treated as a visa. The only supported gateways which process Dankort are Quickpay and ePay. As such identifying the card as a Visa Dankort may lead to other gateways not being able to process Dankort Visas. I have another, simpler, solution to this problem in mind and I will submit another pull request shortly. My apologies. \n. This is the data sent from Shopify which was generating the bug. I'll trim out the unused options.\n. Subtotal is now being used. \n. ",
    "mikhailov": "it works with blank options[:card_number], so let's close it\n. ",
    "csaunders": "lgtm:exclamation:\n. :shipit:\n. @ntalbott awesome and thanks a bunch for helping out with the remote tests!\n:+1: :shipit:\n. Reference Issue #406\n. So I got in touch with the PlugnPay dev support and they informed me that it's a configuration issue.  Our test account is set up properly, so I just modified the test so that we send a mark request with an amount that is lower than the fully authorized amount.\n\nThe issue is how the account was setup and not with what you are\nsending.\nContinuing to send  mode=mark is what you should be doing even if the\namount to be captured is for a lower amount.  The system will convert\nthat to a reauth as needed if it sees the amount is lower.\n. Looks like this isn't correct.  We are getting failures on our CI servers.  @ntalbott would you mind reverting this?\n\nHere's the error messages from our logs:\n```\nTesting the following commits:\n  * 05e8faf Abraham Kuri: PayPal gateway: Support for 'Full' refund type\nLoaded suite /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/rake-0.9.2.2/lib/rake/rake_test_loader\nStarted\n...................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................EEEE............................................................................................................................................................................................................................................................................................................................................................................\nFinished in 11.885786 seconds.\n1) Error:\ntest_basic_helper_fields(RobokassaHelperTest):\nArgumentError: Unknown key(s): fail_url, success_url, result_url, description\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/activesupport-3.0.11/lib/active_support/core_ext/hash/keys.rb:43:in assert_valid_keys'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/helper.rb:17:ininitialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/robokassa/helper.rb:10:in initialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:innew'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:in setup'\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:21:inrun'\n2) Error:\ntest_custom_fields(RobokassaHelperTest):\nArgumentError: Unknown key(s): fail_url, success_url, result_url, description\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/activesupport-3.0.11/lib/active_support/core_ext/hash/keys.rb:43:in assert_valid_keys'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/helper.rb:17:ininitialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/robokassa/helper.rb:10:in initialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:innew'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:in setup'\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:21:inrun'\n3) Error:\ntest_signature_string(RobokassaHelperTest):\nArgumentError: Unknown key(s): fail_url, success_url, result_url, description\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/activesupport-3.0.11/lib/active_support/core_ext/hash/keys.rb:43:in assert_valid_keys'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/helper.rb:17:ininitialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/robokassa/helper.rb:10:in initialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:innew'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:in setup'\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:21:inrun'\n4) Error:\ntest_signature_string_with_custom_fields(RobokassaHelperTest):\nArgumentError: Unknown key(s): fail_url, success_url, result_url, description\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/activesupport-3.0.11/lib/active_support/core_ext/hash/keys.rb:43:in assert_valid_keys'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/helper.rb:17:ininitialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/lib/active_merchant/billing/integrations/robokassa/helper.rb:10:in initialize'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:innew'\n    /home/deploy/ci-projects/active_merchant-1.8.7/test/unit/integrations/helpers/paxum_helper_test.rb:7:in setup'\n    /home/deploy/.rbenv/versions/ree-1.8.7-2011.03/lib/ruby/gems/1.8/gems/mocha-0.11.4/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:21:inrun'\n```\n. Yessm.\nThanks a bunch :)\n. I've looked into the issue a bit and we need to get some more details from the MerchantWare fellows. I'll come back to this issue in a few days.\n. Version locking to active_support 3.2 is going to make it impossible for any developers using rails 4.0 to use this gem.\nWe shouldn't be using anything in active_support hard requires 3.2 so I say remove that.\n. Fabulous!\n\n. Yeah currently looking at the source list we don't have any support for that gateway.\nI believe that you can make contributions to the repo if you'd like to add a new gateway to ActiveMerchant. I just don't think that will necessarily mean Shopify will integrate the gateway.\nContributions are totally welcome though!\n. yeh\n. ",
    "dscataglini": "@ntalbott does it still tell you it can't merge cleanly?\n. @ginettev Was your question wrt errors for me? \nNamely the request for BillOutstandingAmount was missing the BillOutstandingAmountRequestDetails wrapper.\nBeside that I camel cased the parameters and added some missing minor portions of the request (shipping, tax, etc)\n. @ntalbott I created a new pull for this https://github.com/Shopify/active_merchant/pull/311 with the squashed commits.\nShould I add the recurring payment api to PaypalExpressGateway?\n. @ntalbott I have a new pull request here https://github.com/Shopify/active_merchant/pull/315\n. @ntalbott I'll be waiting to hear from you on how you'd like to address the code duplication.\n. To see how this would be used please checkout here how I'd like to use it.\nhttps://github.com/dscataglini/active_merchant/tree/pull3_adopting_wrapper\nafdf85049573e10f0367c72369ca8e65440ad493 here is a changeset\n. Thanks, I wasn't sure about the procedure for this project. Will test in 1.8 in a second\n. the pull is now ready for you @ntalbott\n. just added more Rdoc \n. Well, while I like the regex solution, because it's simple, it depends about what we care about.\nIf we care about the tests to pass on travis & us in general, the regex will do it.\nIf we care about the tests to pass on any computer we should either:\n- specify the tz\n  or\n- improve the regex (For ex:India is on the half hour) %r{^2012-02-21T\\d{2}:\\d{2}:00Z$}\nP.S.\nI am not sure what you mean but which Paypal tz they run search in.\nOnce we specify a timezone, it doesn't matter which timezone they're in. Am I missing something? \nBtw, we don't really care in this test if the date is formatted correctly.\nWhat I am testing is that the correct nodes are being set.\nThe correct formatting should probably be a different test\n. At this point I think the regex is probably best. I am sorry this is causing so much trouble.\nI actually just ran in the Time.new difference between 1.8 & 1.9 few days ago and I thought I had to fix the code somewhere but couldn't remember where.\nI guess it was here.\n. What is the timeline for the removal of the recurring api?\n. @ntalbott LMFAO I've never seen this before. \n. That default to $1 has been there since 2007 with @codyfauser commit \nce56e010dffea7331e85958825f3c18795ad22a7 Add currency option to Paypal and Payflow gateways\nThere might have been a reason for it but I don't know it.\nI would love to remove these 2 lines of code but I don't know if somebody is expecting this behavior.\nThe api documentation has specific info with regard to 0 values that this code prevents to happen.\nFrom: https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_soap_r_DoReferenceTransaction\n    Set this field to 0 if the transaction does not include a one-time purchase such as when you set up a billing agreement for a recurring payment that is not immediately charged. When the field is set to 0, purchase-specific fields are ignored\nOn a second note:\nThere are a bunch of different expectations in the code that do not follow the API specs.\nThere are many calls that expects! more parameters then it's actually required by the api.\nI am not sure what's the policy wrt those things, if it's to respect current behavior or adhere to the API docs\n. this is the fix to the warning problem\n. The thing is there are 3 possible ways to call getBalance:\nyou can: Not pass ReturnAllCurrencies (it's an optional field)\nyou can pass '0' as ReturnAllCurrencies\nyou can pass '1' as ReturnAllCurrencies\nThe docs don't seem to indicate what the default behavior is, so I am trying to not guess it but respect the 3 ways that you can call the method\nhttps://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_soap_r_GetBalance\nI'd more to add some kind of value conversion/validation to the line of:\ncase return_all_currencies\nwhen 1, '1' , true; '1'\nwhen 0, '0', false; '0'\nelse\n  nil\nend\n. As I am re-reading the docs you might be right. They probably are keeping the default behavior to be the one prior version 51\n. DoAuthorize is for transactions that were originated with a PaymentAction of \"Order\"\nhttp://www.paypalobjects.com/en_US/ebook/PP_APIReference/authcapture.html\nBtw, PaymentAction object seems deprecated in DoExpressCheckoutPayment\nhttps://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_soap_r_DoExpressCheckoutPayment\n. @ntalbott I fixed this, defaults to false & added some param cleanup code\n. I had previously fixed the PaymentAction object to be in the payment details express checkout calls for:\nPaypalExpressGateway#setup_authorization\nPaypalExpressGateway#setup_purchase\nThe following calls still need to be fixed.\nPaypalExpressGateway#authorize\nPaypalExpressGateway#purchase\n. I added some docs for authorize_transaction\n. Sorry about that. @ntalbott \nI think we have 2 simple solutions in this case.\nWe can either take locality out of the equation by stub the date conversion or \nkeep locality in the equation by calling .to_time.utc.iso8601 on the dates or re-use the conversion function from the gateway for the assertion;\nCase 1 stubbing\n```\nstart_date = Date.strptime('02/21/2012', '%m/%d/%Y')\nstart_date_iso = '2012-02-21T05:00:00Z'\n@gateway.stubs(:date_to_iso).with(start_date).returns(start_date_iso)\nend_date = Date.strptime('03/21/2012', '%m/%d/%Y')\nend_date_iso = '2012-03-21T04:00:00Z'\n@gateway.stubs(:date_to_iso).with(end_date).returns(end_date_iso)\noptions = { :start_date => start_date,\n            :end_date => end_date,\n            :receiver => 'foo@example.com',\n            :first_name => 'Robert'}\nrequest = REXML::Document.new(@gateway.send(:build_transaction_search, options))\nassert_equal start_date_iso, REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/StartDate').text\nassert_equal end_date_iso, REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/EndDate').text\n```\nCase 2a converting the dates\n```\nstart_date = Date.strptime('02/21/2012', '%m/%d/%Y')\nstart_date_iso = start_date.to_time.utc.iso8601\nend_date = Date.strptime('03/21/2012', '%m/%d/%Y')\nend_date_iso = end_date.to_time.utc.iso8601\noptions = { :start_date => start_date,\n            :end_date => end_date,\n            :receiver => 'foo@example.com',\n            :first_name => 'Robert'}\nrequest = REXML::Document.new(@gateway.send(:build_transaction_search, options))\nassert_equal start_date_iso, REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/StartDate').text\nassert_equal end_date_iso, REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/EndDate').text\n```\nCase 2b re-using conversion function\nstart_date = Date.strptime('02/21/2012', '%m/%d/%Y')\nend_date = Date.strptime('03/21/2012', '%m/%d/%Y')\noptions = { :start_date => start_date,\n               :end_date => end_date,\n              :receiver => 'foo@example.com',\n              :first_name => 'Robert'}\nrequest = REXML::Document.new(@gateway.send(:build_transaction_search, options))\nassert_equal @gateway.send(:date_to_iso, start_date), REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/StartDate').text\nassert_equal @gateway.send(:date_to_iso, end_date), REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/EndDate').text\nLet me know which solution you like best. (case 2A offers the least coupling with the tested code)\n. Or use a Time object instead of Date LOL:D\noptions = { :start_date => Time.new(2012,2,21,0,0,0, \"-05:00\"),\n            :end_date => Time.new(2012,3,21,0,0,0, \"-04:00\"),\n            :receiver => 'foo@example.com',\n            :first_name => 'Robert'}\nrequest = REXML::Document.new(@gateway.send(:build_transaction_search, options))\nassert_equal '2012-02-21T05:00:00Z', REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/StartDate').text\nassert_equal '2012-03-21T04:00:00Z', REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/EndDate').text\nassert_equal 'foo@example.com', REXML::XPath.first(request, '//TransactionSearchReq/TransactionSearchRequest/Receiver').text\n. ",
    "jokklan": "It looks to me, like the problem is that the parse method expects params in the form of a normal get request from the url seperated by \"&\" (key1=value1&key2=value2&...).\n``` ruby\nmodule ActiveMerchant #:nodoc:\n  module Billing #:nodoc:\n    module Integrations #:nodoc:\n      class Notification\n    def initialize(post, options = {})\n      @options = options\n      empty!\n      parse(post)\n    end\n\n    def parse(post)\n      @praw = post.to_s\n      for line in @raw.split('&')    \n        key, value = *line.scan( %r{^([A-Za-z0-9_.]+)\\=(.*)$} ).flatten\n        params[key] = CGI.unescape(value)\n      end\n    end\n    ...\n\n```\nInstead it should expect a normal hash params from rails. Or is it me that misunderstood something?\nThe params hash i received from quickpay and tried to send through     ActiveMerchant::Billing::Integration::Quickpay::Notification::new(params) was\n{\"msgtype\"=>\"authorize\", \"ordernumber\"=>\"0133\", \"amount\"=>\"2500\", \"currency\"=>\"DKK\", \"time\"=>\"120320225554\", \"state\"=>\"1\", \"qpstat\"=>\"000\", \"qpstatmsg\"=>\"OK\", \"chstat\"=>\"000\", \"chstatmsg\"=>\"OK\", \"merchant\"=>\"\", \"merchantemail\"=>\"\", \"transaction\"=>\"\", \"cardtype\"=>\"dankort\", \"cardnumber\"=>\"XXXXXXXXXXXX8050\", \"md5check\"=>\"\", \"controller\"=>\"checkout\", \"action\"=>\"callback\"}\n. I use it to process the post request i get from Quickpay as callback when submitting a payment form (remote).\n. Thank you i will try that :)\n. Sry for the delay :)\n. It was the test, not the changes that was wrong.\ngenerate_md5string takes all fields and joins to one string used for the md5check:\nruby\ndef test_generate_md5string\n    assert_equal '3authorize24352435daorder500500USDhttp://example.com/okhttp://example.com/cancelhttp://example.com/notify00mysecretmd5string', \n                 @helper.generate_md5string\nend\nBefore the test string said ...notify00... (as above) and here the last zero means that the transaction is in production mode. But i have integrated the possibility to turn testmode on, and as tests runs in testmode as standard, it should now say ...notify01.... \nThat was the error, it is now fixed, and all quickpay integrations tests passes. Sorry for not testing before last commit.\n. ",
    "ExReanimator": "Was it removed in last versions? I can't find it in repository.\n. @bslobodin Thanks!\n. ",
    "bslobodin": "@ExReanimator offsite integrations were extracted into a separate gem/repo recently,\nhttps://github.com/Shopify/offsite_payments/blob/master/lib/offsite_payments/integrations/robokassa.rb\n. @duff @ntalbott, let me and @justinplouffe look into it tomorrow.\n. Closing in favour of #1003.\n. We're hoping to get 2.0.0 out shortly.\n. :ship: \n. The other gateways use :login, so LGTM.\n. @emilienoel @amassaad this PR #1025 is all there is to this change. There may yet be more stuff that needs fixing in the future, but at the very least AM should be using the correct :login parameter for authentication and we'll go from there.\n. @odorcicd walked me through cardserver deployment last Friday and, from what I understand, there's no way to deploy it using AM commit, only a valid/signed/published gem. There's a file with instructions in cardserver, although I've no access to it myself.\n. I updated remote tests and fixtures to get everything to pass with the exception of 2 that were also failing on master.\nTo review: @Shopify/payments and @emilienoel \n. @emilienoel git newbie alert, I think that's because I merged my own branch which was ahead on master into this; thanks though.\n. @emilienoel last question: should I do anything to clean up this PR now or just merge into master? CI is green.\n. I created #1031 instead to clean up this history :crying_cat_face: \n. Could this be helpful in any way? http://stackoverflow.com/a/10982742\n. @leofischer sounds like you are volunteering to be our contact :+1: \n. @ntalbott cool, thanks for the heads up, I'll make sure to mention you on any other breaking changes in the future.\n. @ntalbott, having thought about it some more here, I think this PR was slightly misguided. Now, since we hadn't actually released an updated gem yet, I feel like we should go back to param being :key, if you can tolerate the change on your end once more. /cc @odorcicd \n. @bizla care to have another look at it for me please?\n. test? issue aside (non-issue?), anything else I should look into before we merge this?\n. @leofischer is this description ever shown to the customer, i.e. on their statement?\n. Ah, never mind, @ntalbott merged a bunch more stuff that I need to review Monday.\n. :+1: \n. AM is actually using Travis (https://travis-ci.org/Shopify/active_merchant). Yes, someone added a Circle project as well, but it was never fully set up AFAICT.\n. Minor comment/question, :ship:\n. LGTM.\n. Minor Q then :ship: when :green_heart:.\n. :three: :two: :one: :goat: \n. :sheep: \n. Ping @odorcicd and @edward for another pass with recent review feedback incorporated.\n. Removing WIP from the title, would like to merge, pinging @odorcicd, @edward and @bizla /cc @Shopify/payments.\n. :+1: \n. :thumbsup: \n. This PR contains unrelated commits and the message is unreadable.\n. I can't understand what this is meant to communicate.\n. I can't understand what this is meant to communicate.\n. I can't understand what this is meant to communicate.\n. I'm assuming you want this as a way of preventing forward form from being submitted automatically to then be able to inspect hidden fields? It would be better to disable whatever does your form.submit(); on the caller's end, IMHO. That way, you could still proceed with the flow if all is well, whereas with this approach, you'd need to refresh first without the flag, quite messy.\n. @ksondere @atarihomestar, sorry about the delay, I'll be reviewing this shortly. In the meantime, would you mind rebasing off master again to bring this up-to-date?\n. There may be no changes per se, but the diff would be against a new master where things like LitleOnline gem had been removed since you branched.\n. Yea, I think you need to force push (-f).\n. Yes, what @mabeller said, otherwise nothing is actually changing.\n. Do you know where I can see that Pin actually supports AMEX? I looked briefly and didn't find anything. They only provide test card numbers for Visa and MC, though, so I'm a tad hesitant to just merge this. Maybe @louiskearns knows for sure.\nhttps://pin.net.au/docs/api/test-cards\n. @nagash :metal:, I couldn't tell from your profile.\n. It'd be good to have a test case as well, to prevent regression.\n. Ah, that makes sense.\n. Let's race the original two reviewers: @odorcicd and @justinplouffe.\n. Tests were renamed also and passed.\n. LGTM also, :ship: it.\n. I'd be interested to know as well, it may be that we could use class IatsPaymentsUKGateway < IatsPaymentsGateway with a distinct service_url?\n. I like the distinct gateways idea, mostly because our configuration options are currently limited to text fields and it would be awkward to have to ask merchants to type something like NA or EU in. It would be much simpler for us to present iATS Americas and iATS Europe as distinct gateways, but to support it, we'd need two distinct gateways in AM. Implementation wise, one would be a subclass of another, overriding the URL, I suppose. @ntalbott would that work for you guys?\n. Ya, let's leave it as is, I'll see what I can do.\n. Nope, I already made a change on our end. In Shopify there will be 2 options iATS (North America) and iATS (Europe), both will use existing gateway and set proper region.\n. @stephenbiats will do, probably will get deployed by the end of the week. In the meantime, it'll just be defaulting to 'na'.\n. Not quite. Turns out, we have a freeze on a specific component undergoing\nmajor refactoring at the moment, so splitting iATS into two regions will\nhave to wait until that is complete. I'll keep you updated.\n. @stephenbiats it may be a bit still.\n. Ping @edward, extracted authorization parsing.\n. @ntalbott sure, so all authorization values coming out of commit are in the form of,\n\"#{response[:datacash_reference]};#{response[:authcode]};#{response[:ca_reference]}\"\nThings like voids and captures already extracted proper values from this semicolon-separated string, but not refunds. If it so happens that someone had worked around this by providing a clean reference value to refund, this change is still safe, because that token will just be assumed to be a reference after split.\n. LGTM, but Shopify change would need to go out first, eh? We could instead add a default similar to what direct gateways do.\n. Fair enough.\n. :smile_cat: \n. WebPay needed some updating also to match new implementation.\n. Yes, it looks like localized_amount is used a fair bit, but it also doesn't account for currencies with, say, 3 decimals. I'd like to have a fix for Stripe out though, before we take on a larger refactoring. I suspect we'd want to be passing Money(decimal_amount, currency) around (as opposed to fixed 2 minor unit cents) and then letting gateways format that to their own expectation, as I've seen some that still considered JPY to have two minor units and expected 12300 for 123 yen.\n. So you're thinking we'd want AM users to be aware of all the special cases and pass correct minor unit amounts? I was considering using decimals because they move that complexity into AM where we can then take good care of it internally, especially as new currencies come and go or existing currencies change their rules. Let's move this into a separate issue though.\n. Re-ping @odorcicd.\n. At some point we should probably go back to 2.1.0, but in the meantime this is better than failing builds IMHO.\n. @ntalbott yea, I see what you mean. Possibly the confusion originated from here, where value for billing_method is being passed via the eci option. It's something we'd need to look at changing on our end simultaneously to clean up though.\n. Re-ping @odorcicd and @emilienoel.\n. @ntalbott, like so?\npost[:recurring] = true if (options[:eci] == 'recurring' || options[:recurring])\n. Fair enough, we could get behind that. I would suggest using the below as a source for CcyMnrUnts,\nhttp://www.currency-iso.org/dam/downloads/table_a1.xml, which is linked from http://www.iso.org/iso/home/standards/currency_codes.htm.\nWe'll also need to make sure that we CHANGELOG any updates to minor unit definitions in the future, i.e. UAH going from 2 to 0 in an AM release would require adjustment for the library's users, who would need to start sending 123 instead of 12300 for equivalent amounts.\n. Minor comments, but otherwise LGTM :rocket::space_invader:.\n. No CI? :smiling_imp: \n. Our walrus doesn't check Travis, only Circle ;)\n. Those commits belong to PRs that are part of things already mentioned,\n- Stripe: Add recurring flag support [bslobodin]\n- Stripe: Use localized amounts for currencies w/o minor units [bslobodin]\n. @ntalbott I did not know that and asked @odorcicd to mention you specifically, kcco.\n. :rocket::earth_americas:\n. :rocket::moon: \n. Couple minor comments, then :rocket: away.\n. @bizla may be a bug, I see it in docs.\n. Ok, my bad, no email it is.\n. We could, of course, also consider adding it in options, if we think it's important.\n. :rocket::sunny: \n. Yea, we have shops right now who are using new API and checkouts aren't working for them. In all fairness, many gateways only selectively submit stuff they receive, so this wouldn't be a huge regression.\n. :thumbsup: \n. One quick Q, then :rocket::earth_asia:.\n. Restarted 2543.3, but :rocket::earth_africa:.\n. Could you add a matching CHANGELOG and expand on the reasoning in this PR for the benefit of whomever may be using it please?\n. :rocket::star: \n. :thumbsup: \n. As soon as we found out that TxnId reuse was causing amount fixation, I needed to move the order number into a field that wouldn't do that, MerchantReference just seemed most natural.\n\nTxnId:\nContains a unique, merchant application generated value that uniquely identifies the transaction. Used by Payment Express\u00ae to check for a duplicate transaction generated from Merchant web site. If a duplicate is detected, the transaction is not retried, but an \"approved\" message is displayed and the merchant site is informed of the result. Ensure that the value is always unique per transaction request.\n. We don't create whole new checkouts every time you make a change, like picking a shipping rate or applying a discount, so the order.id remains the same throughout and is a bad fit for TxnId on PxPay.\n. FYI, from PxPay,\nTxnId for the both request are same. This causes our system to pick the same details as the last transaction with the same TxnId for your user. This mechanism is in place to prevent double transactions attempt. In original PxPay, if the same TxnId is entered second time then it will display the prompts to enter credit cards but upon submitting the CC details, it will not charge the card. It will simply display the original result. \nIn PxPay 2.0, up on redirecting to new payment page with same TxnId in the request will result in displaying the result of the transaction immediately. \nTo avoid this, simply please make sure the TxnId field is either unique or empty \n. @ntalbott @duff @atomgiant, we got access to MYeWAY Sandbox today, created a user with refund permissions and used its API key/password to run the remote tests, those look good. The big question I have, will existing 3.0 credentials work with 3.1 API? The login/password we currently have in the fixtures on master, which is still 3.0, do not appear to be giving us the same results when we use them in a 3.1 branch. Thoughts? Should I ping eWAY directly for clarification?\n. @duff, of course, it could be that existing API key we have for 3.0 isn't marked as PCI-compliant in the sandbox. Let me see if our new credentials for 3.1 work with 3.0 next, that might tell us enough.\n. Good news, our 3.1 credentials work on the current master, which is 3.0. Let me check with ops to see if the original list of IPs for whitelisting is still accurate, although I suspect that may be a nagging issue in the long term if we need to keep it up to date with eWAY all the time...\n. Let me ping our ops folks about the IPs listing again.\n. @ntalbott okay, our IPs are good. Let's merge and :pray: that it works?\n. Sure lets do it, we're going ahead anyway.\n\nOn Friday, May 9, 2014, Nathaniel Talbott notifications@github.com wrote:\n\nAnd FWIW, we'll probably get this tested out on the Spreedly side before\nyou guys consume it in Shopify.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1176#issuecomment-42706099\n.\n\n\nBoris Slobodin\nDeveloper - Shopify\n. I agree, let's remove this.\n. :rocket::star:\nGood catch @ntalbott, how'd you notice it?\n. One comment about app55, but LGTM :rocket::star:.\n. :rocket::earth_africa: \n. :rocket::earth_africa: \n. Great comments, thank you, addressed. I'd also asked SagePay folks to have a peek to make sure I didn't miss anything, but testing in dev worked fine.\n. I'd like to get this out as soon as possible, as release process on our end takes a day or two.\n. https://github.com/Shopify/active_merchant/issues/1228\n. This could use a test case please.\n. It may also be worth considering only catching very specific key length errors for the time being to notice other conditions where this may fail, i.e. https://github.com/Shopify/active_merchant/blob/5a00107f8487bde8ddd1290b994290ebb4110da5/lib/active_merchant/billing/integrations/sage_pay_form/encryption.rb#L15-L16.\n. One comment, then :rocket::moon: \n. Maybe a quick test in development to make sure it performs as expected, then :ship:.\n. I'm not sure if the response would always contain valid JSON with error and message though? If it's empty, for example, we'll end up raising a JSON parser error etc.\n. @christianblais I personally prefer a more targeted approach in https://github.com/Shopify/active_merchant/pull/1202. Reason being, we know of 422, and we know it's safe to show to the customer as there's nothing we can do about it. Similarly, we now know that we'll see a 401 when merchant uses invalid credentials, and that's also not something that's a coding issue and is, therefore, something that should be displayed to the customer (or merchant who is testing their own checkout). If we add a generic rescue, we'll stop receiving notification of new exceptional conditions, that may actually point to problems with our integration.\n. @maartenvg, hypothetically speaking, I can also imagine a 5xx if we provide malformed input one day. Generally, I think we should be consciously rescuing very specific responses/exceptions on a \\ case-by-case basis.\n. Looks good to me, :rocket:.\n. Looking great so far. Let's address whatever comments are pending and get this out there. We can always improve/fix things in other PRs, but it's best to get it field tested at this point. Very good work!\n. :rocket: \n. No need to review these kinds of things, by the way, commit away.\n. This looks like a good way to start cleaning things up.\n. @ntalbott what are your thoughts on logging (Rails.logger) with the move away from Rails? /cc @celsodantas.\n. @ntalbott I don't mind, we hadn't deployed it yet ourselves, can you do it? Sorry about the hassle.\n. I yanked 1.43.2 from rubygems as well as release on github.\n. Early next week.\n. Looks to me like the certificate chain is incomplete, one shouldn't need to add intermediates explicitly.\nhttps://www.ssllabs.com/ssltest/analyze.html?d=gatewaytest.borgun.is&hideResults=on\n. Odd, but :rocket:.\n. @odorcicd I think @ntalbott is trying to rid of it, see https://github.com/Shopify/active_merchant/pull/1223.\n. Sweet.\n. :star: \n. :tractor::dash:\n. I was thinking it may be time to start grouping these globally into something like TimeoutExceptions, ConnectionExceptions and NetHTTPExceptions, similar to what we do at Shopify. For the purposes of this PR, however, :rocket:.\n. @odorcicd thoughts?\n. @npverni do you know if that field is optional, by chance?\n. LGTM.\n. :rocket: \n. I don't have an objection myself, it may make sense to show merchants what the checkout experience would be if someone were to miss entering a value for CVV, seeing how things like error messages are skinnable. I asked to include @odorcicd to see if he has any historical context that would prevent this change though.\n. @ntalbott I think this makes sense, we use this model in one simulator and currently resort to send() hackery (which won't even work now that Errors are gone), so it would be nice if cvv validation wasn't skipped.\n. @louiskearns is it possible to confirm whether or not CVV and AVS always go hand-in-hand on Moneris' end? In other words, are there ever cases where for a given account former could be enabled and latter disabled?\n. @louiskearns on the other hand, the phrasing seems to suggest that eFraud includes both AVS and CVV checking (emphasis mine),\n\nBelow is an example of a Purchase transaction with CVD and AVS information. These values can be sent in conjunction with other additional variables such as Recurring Billing or customer information. With this feature enabled in your merchant profile, you will be able to pass in these fields for the following transactions \u2018purchase\u2019,  \u2018preauth\u2019, \u2018cavv_purchase\u2019, and \u2018cavv_preauth\u2019. To form CvdInfo please refer to Appendix F. Card Validation Digits (CVD), to form AvsInfo please refer to Appendix G. Address Verification Service (AVS). To have the eFraud feature added to your profile, please call the Service Centre at 1-866-319-7450 to have your profile updated.\n\nIt sounds to me like we could use a single switch to enable/disable, instead of two separate ones. They'll still be able to only send CVV or AVS though.\n. LGTM, but also pinging @ntalbott before we go ahead.\n. @ntalbott actually, supposedly passing avs_info to the gateway on the account that does not have eFraud is totally legit, which isn't the case with passing cvd_info, so we weren't going to have an explicit switch for AVS.\n. :rocket: /cc @odorcicd.\n. I can confirm that we don't use First Pay.\n. In fairness the test is following an established style in that file, but I support tweaking it to be higher level also.\n. @muhammadn try :first_name and :last_name without nesting under :name as per this code. If you still have troubles, please open an issue on that repo, as that's where all offsite integrations were extracted recently.\n. @camelmasa note that there's a pending issue with Optimal Payments that we're tracking down, so this warning will remain for a bit as we try and get to the bottom of it.\n. Yes, they expect it to remain as-is and aren't decoding it properly. Quite weird. I think we need a non-deprecated replacement that does an equivalent thing.\n. @emilienoel please help, I'd like this shipped urgently.\n. Context: we pass instances of HashWithIndifferentAccess, but current implementation merges into a regular hash and completely ignores our string keys. This flips it on its head.\n. @emilienoel I thought about it, but it seemed prudent to just continue passing the same type of indifferent hash as before, on the off-chance that something else then breaks...\n. That's why I'd like to see what @ntalbott thinks. Also, suggestions on re-wording D, U, X codes?\n. @ntalbott done, thanks.\n. I butchered original comment, re-opening.\n. @girasquid Good question, it used to be allowed, but now we only allow an exact same amount to be captured; there were too many scheme rules around what's allowed when and we went the simplest route given our merchants' needs. Partial refunds are, of course, still allowed, up to and including the original amount; no over-refunding.\n. @girasquid the issue wasn't so much on our end, just void deciding to default to cc_debit, limiting the lookup here. Should be better now.\n```\n\u279c  active_merchant git:(fix_raven_remote_tests) bundle exec rake test:remote TEST=test/remote/gateways/remote_pac_net_raven_test.rb\nStarted\n................\nFinished in 20.945151 seconds.\n\n16 tests, 132 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.76 tests/s, 6.30 assertions/s\n```\n. They have 3 distinct options for the return URLs: success, fail and return. Let me re-test the cancel one specifically as I don't recall if I tried that yet.\nhttps://github.com/Shopify/active_merchant/blob/ac5a61e7bf3a09a88467a0b65b2788496e1f7eb0/lib/active_merchant/billing/integrations/paydollar/helper.rb#L35-L36\n. I'd love a better way also. Note how from_xml deals with single vs multiple elements below. Ideas?\nirb(main):005:0> Hash.from_xml('<collection><element foo=\"bar\"/></collection>')['collection']['element']\n=> {\"foo\"=>\"bar\"}\nirb(main):006:0> Hash.from_xml('<collection><element foo=\"bar\"/><element foo=\"baz\"/></collection>')['collection']['element']\n=> [{\"foo\"=>\"bar\"}, {\"foo\"=>\"baz\"}]\n. \n. Good point.\n. :thumbsup: \n. The only thing the gateway provides back is a Ref=X query param, so there's not much we can do to improve messaging to the customer. 'Cancel' or 'Fail' simply go back to the store, 'Success' shows them a 'Thank you' page.\n. No, there is no parameter indicating whether a notification is being posted as a result of hitting a test URL.\n. I've looked through some of the other offsite implementations and this ranges from false to things like date.blank? && time.blank? && transaction_id.blank?.\n. Yes, it returns missing_description without.\n. Good question. @MauricioMurga or @leofischer, do you know the answer?\n. if options[:eci].present? to exclude empty values?\n. Their AVS formatting requirements appear to differ based on processor and | is used only for Paymentech and Moneris. Also in that case they say streetaddress|zipcode so, perhaps, this should read [:address1, :zip] then?\nhttps://hostedcheckout.zendesk.com/entries/242006-Address-Verification-System-AVS-\nhttps://hostedcheckout.zendesk.com/entries/235981-how-do-i-do-avs-formatting-if-i-use-chase-paymentech-or-moneris-as-a-processor\n. They also say This field cannot exceed 29 characters in length.\n. Their ruby gem appears to be a bit more sane.\nhttp://exact4r.rubyforge.org/\n\n. Oh gawd.\n. Do you need to assert here seeing that the next line does assert_instance_of anyway on the result?\n. Yea, tad gross, did you a find a better way by chance for these things?\n. https://github.com/Shopify/active_merchant/blob/66ccb62aa1882738d33f0aa5c266f04fbaae455d/generators/integration/templates/helper_test.rb#L29\n. This checks that acknowledge is true for a valid signature? Or do you mean a description for the assert in a test itself?\n. I have no idea what it actually stands for, but it's a callback we get from the gateway with the status of the payment and acknowledge needs to check if it can be trusted before further processing takes place, i.e. order update.\n. I should probably just use a Notification here since we mandate the same params are passed to a return, as we discussed earlier in relation to Klarna.\n. Right, of course, since it's being sent in the original options by the forward.\n. I must have overlooked it when I was going back-and-forth through our forward, thanks.\n. Yes, I'll make return just reuse @notification, thanks.\n. Done.\n. True, it started out as something different, but now aligns nicely with existing terms.\n. Clarify, please?\n. Tests pass with the below, but I think a change like that should be in its own PR,\nruby\n        def initialize(order, account, options = {})\n          options.assert_valid_keys([:amount, :currency, :test, :credential2, :credential3, :credential4, :country, :account_name, :transaction_type, :authcode, :notify_url, :return_url, :redirect_param, :forward_url])\n          @fields             = {}\n          @raw_html_fields    = []\n          @test               = options[:test]\n          self.order          = order\n          self.account        = account\n          self.amount         = options[:amount]\n          self.currency       = options[:currency]\n          self.credential2    = options[:credential2]\n          self.credential3    = options[:credential3]\n          self.credential4    = options[:credential4]\n          self.notify_url     = options[:notify_url]\n          self.return_url     = options[:return_url]\n          self.redirect_param = options[:redirect_param]\n          self.country        = options[:country]\n        end\n. Ok.\n. Each party needs to be able to identify fields that form x_signature's message.\n. Different libraries may be hex-encoding differently, but ABCDEF == abcdef.\n. I've read that this style allows for cleaner diffs when lines are added/removed.\n. It's a mixed bag of conventions, I prefer this one personally as code > mapping in my mind.\n. Could you sort the list please? The diffs would be easier to read, i.e. AUD isn't really being changed or removed.\n. Perhaps unless fields[required_field].present??\n. Alternatively: self.country = options[:country] plus standard mapping.\n. Could these be done via the standard mappings?\n. Could move this to #initialize for consistency?\n. Signature verification generally happens in #acknowledge.\n. This is already false in a superclass.\n. Is this used anywhere?\n. Is this used anywhere?\n. Is this used anywhere?\n. Is this used anywhere?\n. We generally expect this to return one of ['Completed', 'Pending', 'Failed']. I suppose other values from params['status'] will just cause the notification to be ignored, so perhaps that's reasonable then.\n. This is where signature checking should be happening.\n. helper.rb stores this value in @shared_secret on #initialize, we should do the same here for consistency.\n. Digest+encoding implementation should be extracted into a common method in klarna.rb to avoid duplication.\n. Does Klarna send us anything at all in the return? It's a bit weird that they would just send customers back to merchant_confirmation_uri and not provide any signed indication of transaction's status, no? This isn't a show stopper for initial deployment though.\n. Identical implementation in superclass, no need for return.rb at all AFAICT?\n. Extra space before Money?\n. Inconsistent casing with other test values? Example Shared Secret.\n. It may be better to implement #sign_fields on helper to make this comment unnecessary.\n. This is purely cosmetic, but it would be good to use the same shared secret value throughout all tests.\n. I looked and couldn't find any?\n. I only meant the test_mode portion.\n. IMHO it makes sense to only have methods that are called, if other users of AM find a need to extract these from the notification, that can be done in a separate PR, but at least then we'll know it's being used somewhere.\n. This does not surprise me at all. We should proceed as-is, perhaps they only ever redirect here for successful payments, but it still would be a good idea for them to provide all the necessary signed params so we are able to create an order w/o having to depend on the async notification callback. Maybe a wish list item in our follow up conversations with them?\n. I think the generator skips return.rb altogether, so if it doesn't do anything here, we may as well remove it.\n. We should mention to them that they're throwing a bunch of unrelated stuff into the JSON that doesn't belong there,\n\\\"gui\\\":{\\\"layout\\\":\\\"mobile\\\",\\\"snippet\\\":\\\"\\\\u003Cdiv id=\\\\\\\"klarna-checkout-container\\\\\\\" style=\\\\\\\"overflow-x: hidden;\\\\\\\"\\\\u003E\\\\u003Cscript type\n. To me required suggests that it should be raising when values are nil or empty as well.\n. If options aren't used, it's better to implement self.service_url instead.\n. Indentation.\n. Indentation. Also, things like merchant identifiers usually are mapped with :account, then credential2 would be your secret key. Is merchantname a required field on your end or is mid enough to identify the processing account?\n. Mostly because #acknowledge is what we currently use to check validity of a notification and raise proper exception on false.\n. Ah gotcha, maybe leave it then if it's part of some convention.\n. Now that you mention it, I don't know what the right thing to do is. I know we don't use some of these, but perhaps others have grown to expect them. I'm still leaning towards smallest possible footprint for initial implementation and if someone needs these in the future, PRs are welcomed?\n. Secret key should never be in the fields, you could save it in an ivar on #initialize instead (example).\n. Unnecessary spaces around params, also a couple of other places.\n. Redirects are normally a 302 to a URL with some query parameters (GET), so it'd need to be something like,\n?json={encoded_json}&signature={signature}\n... but http://www.boutell.com/newfaq/misc/urllength.html. I suppose they could make it into a POST, similar to how forms are used to initiate these offsite gateway interactions, but it's more work for them and I doubt they'd go for it. Also, not 100% we'd handle that well out of the box.\nInstead, they should send us enough fields in the return URL to be able to create an order, plus a signature.\n. Could we make a reasonable guess using geoip?\n. :+1: \n. Does it blow up on their end when we try?\n. This assumes that notification_url ends in a proper slash, could use join instead to construct new URIs,\nirb(main):005:0> URI.join(\"https://ws.sandbox.pagseguro.uol.com.br/v2/transactions/notifications\",\"12345\")\n=> #<URI::HTTPS:0x007fefe33952f8 URL:https://ws.sandbox.pagseguro.uol.com.br/v2/transactions/12345>\n. Do we need an empty class for return?\n. Indeed, but we could use that superclass directly since there's nothing a subclass is adding, see Moneybookers' #return (link) for an example.\nhttps://github.com/Shopify/active_merchant/blob/2984bac0a563502bb89d7024c60ce9f9aca70606/lib/active_merchant/billing/integrations/return.rb\n. They check that both values are not blanks, test is still performing a valid refund, but instead of using a clean reference value, we test that passing reference;etc;etc value properly extracts the first token to use as a reference.\n. Yes, response to successful refund request should include values for both.\n. Good idea, thanks. Although specific case I was looking at was an empty body, in which case this wouldn't make much difference, I could totally imagine them screwing up in some other way, so I'll do this.\n. Here's one example. You definitely don't need to worry about using :credential5 for test mode using this pattern.\n. invoice_ok?(order_id), also check few other places for similar pattern please, I won't comment on those specifically.\n. This should be mapping :account, 'mid'.\n. This should be @key = options[:credential2].\n. This should be mapping :credential3, 'merchantname'.\n. This should be @secret_key = options[:credential2].\n. Please update tests to match conventions in code,\n- :account = mid\n- :credential2 = secret key\n- :credential3 = account name\n. These 2 URLs look identical, but should be different?\n. Ugh, my bad.\n. These used to be aligned?\n. Is this staying, and if so, what are the implications for the other bits in AM?\n. Empty line?\n. Missing space after =.\n. One improvement that was suggested to me earlier, is to calculate the hash straight in the test to demonstrate what's happening, as opposed to having a magic digest string hardcoded (example).\n. This won't work in pre-1.9 Ruby, do we care?\n. This could be a separate test.\n. I like it, because it demonstrates how the two things are put together and fails right away if someone changes encoding of SHA256 digest byte array, for example.\n. Remove empty line.\n. Remove empty lines between mappings please.\n. There are two spaces before checksum_fields.\n. Remove this empty line please.\n. Remove this empty line please.\n. Remove this empty line please.\n. Your helper calls this variable @key, it would be good to have a consistent naming scheme, either @key or @secret_key.\n. Remove this empty line please.\n. This could just be @notification.acknowledge, no? (example).\n. You may not need this method at all if you delegate success? to @notification.\n. Same, may not need this.\n. Hm, yea, the rate should be %ge? If you set the below, the rate should be 10% or 0.1, depending on how it needs to be expressed to Klarna.\n:unit_price => Money.new(9.00),\n:tax_amount => Money.new(0.90)\n. Usually one space is used to separate method parameters.\n. Because previously things like capture or refund only set amount and they fail if we start including currency any time add_amount is called.\n. D'oh.\n. Nope :smiling_imp: \n. :thumbsup: \n. Should '' be 0 prior to to_i?\n. Could you extract request of parse_nested_query to a query variable please? For a bit, I didn't notice [\"order\"] at the end.\n. Ok\n. amount could also be numeric that responds to to_f, message suggests it needs to be Money or implement cents, same applies to couple of other similar messages.\n. Why rescue here?\n. I was just concerned that things like encryption_query_string could start breaking and we won't have a trace of why, similarly ssl_get could start failing with, say, untrusted root CA and we'd be none the wiser?\n. Missing EmailAddress?\n. Should these be raising ArgumentError specifically?\n. Why did this change?\n. Ah, good find.\n. :cool: for the raises or for the PR in general?\n. To remove query params from form's action URL, since they'll be ignored by the user agent anyway. More of a keeping-it-clean thing, rather than a functional change.\n. Our order #s are integers, could also to_s above when we set it, but it seemed more appropriate to do it when we absolutely have to.\n. This wasn't actually using @@ua, can we change to user_agent now?\n. I don't think so, why?\n<CcyNtry>\n<CtryNm>SWEDEN</CtryNm>\n<CcyNm>Swedish Krona</CcyNm>\n<Ccy>SEK</Ccy>\n<CcyNbr>752</CcyNbr>\n<CcyMnrUnts>2</CcyMnrUnts>\n</CcyNtry>\nhttp://www.currency-iso.org/dam/downloads/table_a1.xml\n. Done.\n. Maybe like this?\nif e.message == 'key length too short'\n  raise ActionViewHelperError, 'Invalid encryption key.'\nelse\n  raise\nend\n. Do we always get JSON back from Mollie with reasonable message? If not, we should probably use a case and provide messages ourselves where needed, like a 401 = Invalid Credentials.\n. Yolo-:ship:, eh? Sure, may as well.\n. This reminds me that we should remove support for issue numbers and start dates sooner rather than later as they aren't in use anymore.\n. We could avoid all that calendar logic by just comparing month numbers, I think.\nruby\nnow = Time.now.utc\nyear < now.year || (year == now.year && month < now.month)\n. Why parens?\n. :thumbsup: \n. AFAIK, Switch and Solo had been fully retired, latest APACS30 protocol has no support for those fields, and many gateways like Stripe stopped exposing those fields. Let me ping some of my contacts to confirm, it'd need to be a separate PR anyway.\n. I suppose a more defensive approach would have been along the lines of success ? response[\"id\"] : response[\"id\"] || response[\"error\"][\"charge\"], but I'm not convinced it's warranted.\n. Is this the correct URL? Does Borgun use some kind of IP whitelisting in production?\nhttps://www.ssllabs.com/ssltest/analyze.html?d=gateway01.borgun.is\nNo secure protocols supported\ncurl -vi -m 5 https://gateway01.borgun.is/ws/Heimir.pub.ws:Authorization\n* About to connect() to gateway01.borgun.is port 443 (#0)\n*   Trying 213.167.142.76... Timeout\n* connect() timed out!\n* Closing connection #0\ncurl: (28) connect() timed out!\n. Thanks, just making sure. Do you have your IP whitelisted by chance? Can you check what the certificate chain looks like on the production endpoint?\n. Curious, do you know why? The chain on test server definitely looks incomplete. Is 1.9.* using a different CA file or is it not validating?\n. So what's your suggestion as far as these remote tests given that they serve an incomplete chain? Adding intermediate manually?\n. Can you ping their tech support and ask them to fix it by chance?\n. Alternatively, we suppress validation for these remote tests?\n. Agreed, let's handle few things out of the box; if we find a pattern where this raises and needs handling, then we'll have learned more about the context by then.\n. Are their 500 responses formatted strictly that this will always work? Seems a bit magic-y to me with various string extracts here.\n. Should this just be response['response']?\n. Any chance authCode will be included, but with empty value, indicating failure?\n. Maybe?\nruby\nsuccessful_responses = %w([capture-received] [cancel-received] [refund-received])\nsuccessful_responses.include?(response['response'])\n. TIL\n. Do you know how they handle currencies with nonstandard minor units? It'd be good to have a test as well once you confirm what values are supposed to be sent over the wire.\nhttps://github.com/Shopify/active_merchant/blob/a49815053a6d6feafb1e70f068fa684947404d9b/lib/active_merchant/billing/gateway.rb#L196\nhttps://github.com/Shopify/active_merchant/blob/a49815053a6d6feafb1e70f068fa684947404d9b/test/unit/gateways/stripe_test.rb#L102\n. :thumbsup: \n. Is this a required field?\n. Is this a required field?\n. Maybe tokens = full_address.split(/\\s+/) to make the other 2 lines a bit less busy.\n. Let's remove it then, leaner the better IMHO.\n. Obsolete comment.\n. :thumbsup: done.\n. The values fed into active_merchant are always in minor units, i.e. cents. The gateway wants these to be formatted as decimals when we make the request.\n. Correct. Instead, we set up different routings for folks to run their tests against on the production system.\n. That was going to be my guess as well, and whomever wrote the original tests just asserted whatever results they were seeing, but really, voiding results of the capture is perfectly valid, until it's settled overnight that is. For the purposes of this test, there's no reason for void to fail right away.\n. If you try voiding without proving a matching payment type, the system won't find the original payment to void \u00af(\u30c4)/\u00af\n. Good point, leave it with me.\n. ",
    "eddanger": "Yes, it is a completely different gateway.\n. Hi @ntalbott I've fixed up the Unit and Remote tests.\nI also fixed a failing test for the Moneris Canada gateway. Recent changes to Moneris no longer allow a void on a preauthorization. You must capture a $0.00 on the auth to in effect void it.\nThe Moneris Canada remote test fix is also in this pull request if that is okay.\n. One issue is the void method behaves differently depending on whether the original transaction was an auth or purchase/capture. And we only know the authorization of the transaction, not the type. One solution may be to create a void_authorization method that does the capture of $0.00.\nAlso, is it possible to remove/change a commit from a pull request?\n. Another possibility is to remove that test altogether since only captures and purchases can be voided.\n. Done, void the authorization commit removed. I'll make a new pull request for these changes.\n. Fix added back in (curses that force push!)\n. Hi, @ntalbott squashed them into a single commit! Interesting. I have never done something like that before, and was just wondering what the benefit is?\n. Hi, @ntalbott here is a new pull request to discuss the best way to handle voiding an authorization in the Moneris gateway.\nFrom a recent update:\nWithin eSelectPlus to perform a Preauthorization Reversal for 100% of the original Preauth amount please perform a Capture transaction with an amount of 0.00.  This will cause the preauthorization to be fully reversed.  For transactions that are only completed for less than the Preauth amount, the Moneris system will now auto reverse the remaining un-captured amount.\n. See https://github.com/Shopify/active_merchant/commit/d9a10567587efb6652aece2da9a74ec7be007711 which breaks voiding a purchase or capture.\n. :+1: \n. ",
    "ciacka": "Done :)\n. In Dotpay PIN parameter is not obligatory. So notification can be instantieted without it.\n. ",
    "mltsy": "Ahhh, I see what you mean.  Yeah, that would probably be a good solution.  I'll try to implement that.\nI've never added code to a pull request, but it looks like I should be able to, just by committing to my master branch, so I'll give it a shot :)\n. How's this look?  The other way would be to pass another parameter or options hash into the commit method and set the test_mode parameter there, but this seemed a little cleaner to me...\nStill haven't tested it though.\n. Done!\nI guess I should have merged them forward instead of backward if I wanted the new commit to show up at the bottom here.  Now I know! :)\n. Well my thought was that the intended use would be :test_mode => true or :test_mode => false.  So this supports that, and also supports if someone happens to want to use :test_mode => 'TRUE' or :test_mode => 'FALSE'.  Does that make sense?\n. ",
    "travisbot": "This pull request fails (merged 9a6edc76 into fbff8ee1).\n. This pull request fails (merged fc6be670 into fbff8ee1).\n. This pull request passes (merged ab00176e into fbff8ee1).\n. This pull request passes (merged e589e572 into fb9b3a95).\n. This pull request passes (merged 67ce497a into fb9b3a95).\n. This pull request passes (merged ac2e1cb8 into fb9b3a95).\n. This pull request passes (merged 2596a835 into 5ce5dcac).\n. This pull request passes (merged adc874f8 into 5ce5dcac).\n. This pull request fails (merged e990ab3f into a4178332).\n. This pull request passes (merged 333cd57e into a4178332).\n. This pull request passes (merged 2e5a1400 into a4178332).\n. This pull request passes (merged a3681a39 into aca922d3).\n. This pull request passes (merged b3bb7f8f into aca922d3).\n. This pull request passes (merged d19225ce into e76a4081).\n. This pull request passes (merged 60e52858 into e76a4081).\n. This pull request passes (merged 634e1f45 into e76a4081).\n. This pull request fails (merged 192f4976 into 7cad1062).\n. This pull request fails (merged 17747b9d into 7cad1062).\n. This pull request passes (merged 44789474 into 7cad1062).\n. This pull request passes (merged 13e43951 into 7cad1062).\n. This pull request passes (merged 7c2dcf0d into 7cad1062).\n. This pull request passes (merged d02323a4 into 7cad1062).\n. This pull request passes (merged d8ca8495 into 75e432d2).\n. This pull request passes (merged 26b0acdc into 75e432d2).\n. This pull request passes (merged 84da833d into 75e432d2).\n. This pull request passes (merged f41e9560 into 75e432d2).\n. This pull request passes (merged bfc74dd4 into 75e432d2).\n. This pull request passes (merged 36cbfdb6 into 75e432d2).\n. This pull request passes (merged dd37f21b into 75e432d2).\n. This pull request passes (merged 989952ba into 01e807f6).\n. This pull request passes (merged 71080479 into 01e807f6).\n. This pull request passes (merged f18508b6 into 01e807f6).\n. This pull request passes (merged a08c1955 into 01e807f6).\n. This pull request passes (merged 36180a6a into 1b4d8f8c).\n. This pull request passes (merged 1a8ad558 into 1b4d8f8c).\n. This pull request passes (merged a3d8c764 into 01e807f6).\n. This pull request passes (merged 8ce19c75 into 01e807f6).\n. This pull request passes (merged 4fa49c43 into 1b4d8f8c).\n. This pull request passes (merged 44f53695 into 731ac63a).\n. This pull request fails (merged 1233707b into 731ac63a).\n. This pull request fails (merged fec7cbee into 731ac63a).\n. This pull request passes (merged c27c84c6 into 731ac63a).\n. This pull request passes (merged fbe82e68 into 731ac63a).\n. This pull request passes (merged fa70c131 into 731ac63a).\n. This pull request passes (merged 6a350308 into 731ac63a).\n. This pull request passes (merged 5d5ff4d7 into 731ac63a).\n. This pull request passes (merged e0f42609 into 1b4d8f8c).\n. This pull request fails (merged e879178a into 1b4d8f8c).\n. This pull request passes (merged 4e9eafca into 1b4d8f8c).\n. This pull request passes (merged 2a668c53 into 1b4d8f8c).\n. This pull request fails (merged 9b74633f into 1b4d8f8c).\n. This pull request fails (merged 37157d73 into 1b4d8f8c).\n. This pull request passes (merged 04c6c9a0 into 1b4d8f8c).\n. This pull request passes (merged ed0c8938 into 1b4d8f8c).\n. This pull request passes (merged 0a3d05ad into 1b4d8f8c).\n. This pull request passes (merged 76aa546a into 04c6c9a0).\n. This pull request fails (merged 537e6ce5 into 1bce92d0).\n. This pull request passes (merged 821d9152 into a1e6d442).\n. This pull request passes (merged 692684c9 into a1e6d442).\n. This pull request fails (merged fbf10e8e into a1e6d442).\n. This pull request passes (merged a5e6ab43 into a1e6d442).\n. This pull request passes (merged 48b6d195 into a1e6d442).\n. ",
    "fabiokr": "@jduff Pull request #361 was also reverted; It only adds a \"retrieve\" method for Cybersource. Any specific reasons?\n. @jaredmoody I was taking a look at the pull request in order to try to make the required changes, but I'm not sure on how to proceed. It looks like that the pull request wanted to add check support for the Cybersource gateway, and in order to do that, it changed the add_address method to extract the first and last name from an address hash instead of the credit card itself. The problem with that is what @jduff mentioned, that it changed some of the previously expected behaviors.\nI would say that the address extraction change makes sense in order to support different payment methods, but to keep compatibility with previous we might need another payment type check in that level (there are lots of them already).\n. Hmm in this case I'm not retrieving the status of a recurring subscription, I'm just retrieving a payment method info.\n. Yes, that is correct. According to the docs for \"paySubscriptionRetrieveService\": \"The paySubscriptionRetrieveService service retrieves information about a customer profile\"\n. This was reverted by 1fa20b1e53bcb8f33a84c3f34548e151291fc860\nAny specific reasons for that?\n@ntalbott @jduff \n. @ntalbott Sounds good to me. I fixed it on #499, going to close this one.\n. @ntalbott It seems that all store methods have an interface of def store(payment_method, options = {}), but in this case there is no payment method involved. Is it fine to have an interface like def store(options = {})?\n. @ntalbott Sounds good to me. Will work on an updated patch soon.\n. @ntalbott How about 8059786?\n. Maybe refactor the existing expiration_date method so that it can be used here too?\n. ",
    "tquackenbush": "The pull request to agoragames/vindicia-api to include the cached 3.6 API has been merged into the 'only_builder' branch.\n. ",
    "sealink": "@ntalbott Both of us have rather different code (It would be more of an override). I was thinking more @nagash could code review my code and any needed changes, then we can bother you with a final pull request.\n. ",
    "justinjones": "That all sounds fine to me. Got the flu at the moment but I'll get on it when I get a chance.\n. @mnoack I had a few fixes for your code, but for the life of me can't figure out how to send a pull request. Maybe my github-fu is just bad, but I can't fork your repo because I already have an active fork of active merchant (with this pull request obviously).\nAny ideas?\n. @mnoack No worries - just added a comment on one of your commits regarding the status method (was broken).\nOther then that 1 issue, tests pass and code looks fine to me. Didn't look at the server hosted stuff much though, as I'm not familiar using it.\n. Apart from the migs_sealink fixture issue, all tests pass once I comment it out.\n. Sure thing, will do.\n. Future-proofed to include auth/capture/void required params in the authorization. This gateway is very similar to secure_pay_au, however, there were some inconsistencies I was getting with auth/capture/void, so I've left them off and will add them in a future pull request once I can figure out what's going on.\n. Yeah I believe this is just an upstream issue Nathaniel - have tested under rbx1.8 and mri1.8 both work fine.\n. Apologies I was in a bit of a rush on Friday afternoon and pushed a little hastily! Should be good now.\n. Thanks @duff and @ntalbott :thumbsup: \n. @bslobodin It's available only by special request, and certain criteria are required (I work at Pin).\n. @ntalbott Thanks, sorted that out.\n. @ntalbott Anything further required for this?\n. @j-mutter Docs are here:\nMulti currency: https://confluence.fatzebra.com.au/display/DOC/Purchases\nAuth/Capture: https://confluence.fatzebra.com.au/display/DOC/Pre+Authorization+and+Capture\nI've removed the comments and updated the txn_id param to be authorization.\n. @j-mutter This lack of a void method seems to be pretty common across Australian gateways, presumably due to limitations in the underlying payments infrastructure. Authorizations will automatically be released after X days (determined by the issuing bank), there is no way for it to be controlled from the merchant/gateway side. Here's a snippet from a different Australian gateway (SecurePay):\n\nA preauthorisation allows reserve funds on a customer's credit card for five to 10 days, depending on the cardholder's bank. During that time, your can complete the transaction to capture the funds. The customer's bank will normally free up preauthorised funds that have not been completed within three days, making these funds available to the customer, and no longer reserved.\nOnly a cardholder can release funds reserved on their card. They must call their issuing bank and request release of the preauthorisation. SecurePay and merchants do not have the authority to release funds reserved on a customer's bank account.\n\nIt's also the same for NAB Transact. The NAB Transact gateway within AM also has an authorize method with no corresponding void.\nI will get in touch with my contact at Fat Zebra to confirm, but I assume this will be the case.\n. Sorry for the last minute addition - just received word from Fat Zebra that this feature was ready to go this morning.\nThere is no official docs for the soft descriptor support yet, however some of the other extra fields are documented here - https://confluence.fatzebra.com.au/display/DOC/Extra+and+Extended+Fields\nHere's the contents of the email received from Fat Zebra regarding this addition:\n\nSoft descriptors are ready to go and require the below simple change to the API:\nThe request payload needs to be updated to include the extra field and the name and location like below:\n{\n    \"card_holder\": \"Jim Smith\",\n    \"card_number\": \"5123456789012346\",\n    \"card_expiry\": \"05/2023\",\n    \"cvv\": \"987\",\n    \"amount\": 1000,\n    \"reference\": \"ORD98976\",\n    \"customer_ip\": \"111.222.111.123\",\n    \"extra\": {\n      \"name\": \"Card Acceptor Name\",\n      \"location\": \"Sydney\"\n    }\n}\nBoth Name and Location are writable fields. \n. \n",
    "storkie": "The test runs fine under 1.9.\nI've did some research and the problem is that 1.8 doesn't have ordered hashes.\nAny suggestions to solve this?\n. Is there any timeframe for this will be merged?\n. Can you merge this now?\n. OK?\n. Here you go.\n. ",
    "mikel": "Heh, I actually had it setup as an option to pass in, but then I read the readme to tell me not to :)  I'll refactor.\n. OK, fixed up.\n. Good idea, didn't know that instance variable existed :)  Thanks.\n. ",
    "phinze": "Hi @ntalbott - any update on this?\nWe've got a build that runs against active_merchant master that will be red until this gets pulled in. Let me know if there's anything I can do to help make it easier for you to merge.\nThanks!\n. @ntalbott thanks for merging. build on our side is all green!\nas for credential issues: it looks like the pattern in fixtures.yml for most processors is to put dummy credentials in:\nhttps://github.com/Shopify/active_merchant/blob/710b973cd71ccc42fa07a07de24c419b73e69892/test/fixtures.yml\nGetting sandbox credentials is a pretty quick process via our website:\nhttps://www.braintreepayments.com/get-started\nThe trouble with shared credentials is the potentially weird issues that could crop up with simultaneous builds under the same merchant stomping on each other's data.\n. ",
    "exact": "I'll have to go through the latest changes and check, so I'll close this request and re-open a new one later if there's items worth including.\n. ",
    "cctalbott": "Yes, two t's is twice as nice.\nYes, the transaction flunks outright. Gets one of these two error messages from USAepay:\n00015   Invalid expiration date.    Must be in MMYY format. Expiration contains invalid characters (nothing but numbers allowed)\n00016   Invalid expiration date.    Must be in MMYY format. Could not guess format of date. It wasn't MMYY or MMYYYY or MMDDYYYY or even MMDDYY format.\nThe remote tests seem to pass either way I format. When I try a transaction in the wild without formatting it MMYY or MMYYYY I get the above errors though.\nIt's around line 1241 and 1322 of usa_epay_advanced.rb I've changed to this:\nbuild_tag soap, :string, 'CardExpiration',  \"#{\"%02d\" % payment_method[:method].month}#{payment_method[:method].year}\"\nand this:\nbuild_tag soap, :string, 'CardExpiration', \"#{\"%02d\" % options[:payment_method].month}#{options[:payment_method].year}\"\n. ",
    "1rover1": "Hi, MIGS gateway support here. Sorry for the n00b question, but how do we get this into Shopify? We have a merchant wanting to use this and we've had others ask over the last two years. Does it depend on the merchants relationship with Shopify? I've viewed the code, will make some suggestions and would love to contribute somehow when I get time.\n. Hi,\nThe status of MIGS gateway support in Shopify is confusing for me. A MIGS plugin exists and my enquiries with their company suggest they do not enable it. Unfortunately, as I'm not a paying customer I'm not able to push them any further for more information.\nIf you're a customer of Shopify I'd suggest you talk to them directly and insist they give you access to it.\nLet me know how you go - it would be great to hear of any news you may have.\nCheers,\nJoel\n. ",
    "mycholan": "hi, its great to hear that MIGS is integrated, Thank you very much, but i am not able to find it in Shopify's store Admin -> Settings -> Checkout -> Accept Credit Cards. one of our client has MIGS payment gateway, and they not ready to look for another one ( shopify supported gateway ). so we need MIGS payment gateway support.\nHow do i use this in my shopify store,\nDo i need to raise any request to shopify in order to enable it.\nplease guide me.\nThank You.\n. ",
    "subbarao": "i updated  fix which will work on 1.9/1.8\n. Working on it\nThx\nSubba rao\nOn Apr 25, 2012, at 11:48 AM, Nathaniel Talbottreply@reply.github.com wrote:\n\nTimezones strike again: \n<\"15/04/2005 15:23:54 -0400\"> expected but was\n<\"15/04/2005 15:23:54 +0000\">.\nhttp://travis-ci.org/#!/Shopify/active_merchant/jobs/1173346/L139\n@subbarao, can you get me a fix for this?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/346#issuecomment-5334553\n. https://github.com/Shopify/active_merchant/pull/349\n\nOn 4/25/12 12:07 PM, \"Nathaniel Talbott\"\nreply+i-4249463-d039656db1a3a561f9d1dcebe9979b7c41579e20-9062@reply.github\n.com wrote:\n\nI pushed a simplistic fix to get tests working again, but it blatantly\nignores the timezone.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/346#issuecomment-5335099\n. \n",
    "AlexanderZaytsev": "I went through all the integrations helpers and only two have similar line_item helpers.\nauthorize_net_slim has an add_line_item method:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/integrations/authorize_net_sim/helper.rb#L150\nvalitor has a product method:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/integrations/valitor/helper.rb#L48\n. Sorry, looks like I screwed up a bit. This is my first real pull request :)\nThere were supposed to be two different pull requests. Anyhow, you can accept this request and close this one:\nhttps://github.com/Shopify/active_merchant/pull/347\nThe request 348 has the both changes.\n. Squashed everything into one commit.\n. ",
    "antsa": "+1\n. +1\n. ",
    "assimovt": "+1\n. ",
    "vesan": "+1\n. ",
    "abhiramm": "I am currently working on integarating CCAvenue with ActiveMerchant following ActiveMerchant Integarations (not Gateway). Am I still need to have these methods:\n\npurchase(money, creditcard, options = {})\nauthorize(money, creditcard, options = {})\ncapture(money, tx_reference, options = {})\nvoid(tx_reference, options = {})\nrefund(money, tx_reference, options = {})\n\nor what should I follow when am I doing Integarations? I couldn't find any detailed document on what methodology I should use for Integarations so that I can merge my code with ActiveMerchant. Can anyone guide me on this please?. Hi @ntalbott Can you help me on this. I got stuck here. Any guidance will be greatly helpful. ",
    "akonan": "My bad. Fixed.\n. Done! :)\n. ",
    "glideranderson": "I thought so too. However I tried accessing the recurring api methods like other methods (authorize, capture) with no success. (my authorize works so I know I have the gateway set up properly) However, I do not understand enough to know how to access the api. If anyone can help with some code examples I WOULD LOVE IT :)\nIs the next best thing if I cannot access api: http://blog.matthodan.com/how-to-add-support-for-paypal-website-payment\n. ActiveMerchant 1.21.0\nI think it has something to do with namespacing, but I not sure yet\n. my issue might be that I set activemerchant into test mode or that my environment is in development, I even tried on a fresh install of rails, with just active merchant. went in rails console, set payment_gateway to the above, tried to call method recurring with response no such method.\nActiveMerchant::Billing::Base.mode = :test\nIn the below output, I did not set active merchant to test mode, and I tried in both development and production mode with no success\nruby\nLoading development environment (Rails 3.2.2)\n1.9.3-p0 :001 > payment_gateway = ActiveMerchant::Billing::PaypalGateway.new(\n1.9.3-p0 :002 >           :login => 'rander_1307553309_biz_api1.glideint.com',\n1.9.3-p0 :003 >           :password => '1307553332',\n1.9.3-p0 :004 >           :signature => 'AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv')\n => #<ActiveMerchant::Billing::PaypalGateway:0x007fb07570f288 @options={:pem=>nil, :signature=>\"AiCozzWYgDEkMhTodrzOjnIvAbX.AQp38EXocUyf0PKAjIPmXhTGJHKv\", :headers=>{}, :login=>\"rander_1307553309_biz_api1.glideint.com\", :password=>\"1307553332\"}> \n1.9.3-p0 :005 > payment_gateway.recurring\nNoMethodError: undefined method `recurring' for #<ActiveMerchant::Billing::PaypalGateway:0x007fb07570f288>\n    from (irb):5\n    from /Users/robin/.rvm/gems/ruby-1.9.3-p0/gems/railties-3.2.2/lib/rails/commands/console.rb:47:in `start'\n    from /Users/robin/.rvm/gems/ruby-1.9.3-p0/gems/railties-3.2.2/lib/rails/commands/console.rb:8:in `start'\n    from /Users/robin/.rvm/gems/ruby-1.9.3-p0/gems/railties-3.2.2/lib/rails/commands.rb:41:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n. I tried on brand new rails app with only active merchant. Went to rails console did the above code, with result of undefined method 'recurring'.\nThis is very puzzling to me: on Rails 3.2.2, activemerchant 1.21.0, with ruby 1.9.3-p0\nthis is my gemfile.lock\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionmailer (3.2.2)\n      actionpack (= 3.2.2)\n      mail (~> 2.4.0)\n    actionpack (3.2.2)\n      activemodel (= 3.2.2)\n      activesupport (= 3.2.2)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.1)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.1)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.1.2)\n    active_utils (1.0.3)\n      activesupport (>= 2.3.11)\n      i18n\n    activemerchant (1.21.0)\n      active_utils (>= 1.0.2)\n      activesupport (>= 2.3.11)\n      builder (>= 2.0.0)\n      i18n\n      json (>= 1.5.1)\n      money (<= 3.7.1)\n    activemodel (3.2.2)\n      activesupport (= 3.2.2)\n      builder (~> 3.0.0)\n    activerecord (3.2.2)\n      activemodel (= 3.2.2)\n      activesupport (= 3.2.2)\n      arel (~> 3.0.2)\n      tzinfo (~> 0.3.29)\n    activeresource (3.2.2)\n      activemodel (= 3.2.2)\n      activesupport (= 3.2.2)\n    activesupport (3.2.2)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    arel (3.0.2)\n    builder (3.0.0)\n    coffee-rails (3.2.2)\n      coffee-script (>= 2.2.0)\n      railties (~> 3.2.0)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.3.1)\n    erubis (2.7.0)\n    execjs (1.3.2)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.0)\n    journey (1.0.3)\n    jquery-rails (2.0.2)\n      railties (>= 3.2.0, < 5.0)\n      thor (~> 0.14)\n    json (1.7.1)\n    mail (2.4.4)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.18)\n    money (3.7.1)\n      i18n (~> 0.4)\n    multi_json (1.3.4)\n    mysql2 (0.3.11)\n    polyglot (0.3.3)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.1)\n      rack (>= 1.0)\n    rails (3.2.2)\n      actionmailer (= 3.2.2)\n      actionpack (= 3.2.2)\n      activerecord (= 3.2.2)\n      activeresource (= 3.2.2)\n      activesupport (= 3.2.2)\n      bundler (~> 1.0)\n      railties (= 3.2.2)\n    railties (3.2.2)\n      actionpack (= 3.2.2)\n      activesupport (= 3.2.2)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (~> 0.14.6)\n    rake (0.9.2.2)\n    rdoc (3.12)\n      json (~> 1.4)\n    sass (3.1.17)\n    sass-rails (3.2.5)\n      railties (~> 3.2.0)\n      sass (>= 3.1.10)\n      tilt (~> 1.3)\n    sprockets (2.1.3)\n      hike (~> 1.2)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    thor (0.14.6)\n    tilt (1.3.3)\n    treetop (1.4.10)\n      polyglot\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.33)\n    uglifier (1.2.4)\n      execjs (>= 0.3.0)\n      multi_json (>= 1.0.2)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  activemerchant\n  coffee-rails (~> 3.2.1)\n  jquery-rails\n  mime-types\n  mysql2\n  rails (= 3.2.2)\n  sass-rails (~> 3.2.3)\n  uglifier (>= 1.0.3)\n. SOLVED: activemerchant 1.21.0 doesn't have the paypal recurring api, added :git option in gemfile and works on coworkers machine but not mine (something is wrong with my machine)\n. thank you for the feedback. my server guy is telling me something is up with it, don't know what yet. Testing will ensue. \n. html\n% curl https://payflowpro.paypal.com\ncurl: (52) Empty reply from server\nis that the response I should be getting when trying to curl payflowpro?\nhow would I connect directly with irb?\n. ",
    "hjelmeir": "This is what I want: https://gist.github.com/2631732\nI am still new to Rails, so I apologize if this is a noob question :)\n. ",
    "brian5150": "Does this allow the use of Paypal recurring features using Paypal Website Pro or do you have to purchase Paypal Payflow Pro? If the former, it eliminates the need to move from Paypal to Authorize.net or some other merchant account, true?\nThanks!\n. ",
    "robconery": "I have this issue as well - with the PaypalExpressGateway. The recurring bits aren't included, it seems:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/paypal_express.rb\nNote that PaypalCommon and PaypalExpressCommon are included, however PaypalRecurringApi is not.\n. ",
    "aklein-dex": "+1 robconery\nIn the doc it says \n\nOverview\nThis module is included in both PaypalGateway and PaypalExpressGateway\n\nBut it's not included in PaypalExpressGateway:\n``` ruby\nrequire File.dirname(FILE) + '/paypal/paypal_common_api'\nrequire File.dirname(FILE) + '/paypal/paypal_express_response'\nrequire File.dirname(FILE) + '/paypal_express_common'\nmodule ActiveMerchant #:nodoc:\n....\n```\n. ",
    "jmazzi": "@ntalbott I believe Cybersource originally just created a subscription service that allowed users to store the credit card information. After that it morphed into it's own product, or rather, it was re-purposed for use as secure CC storage. \nThat's why the API calls can cause some confusion.\n. Looks good, @fabiokr. Could you document the update method?\n. If this looks decent to you guys, do you want us to squash the commits?\n. Could someone take a look at this when they have time? We would greatly appreciate it if you could merge this PR, review shouldn't take long.\n. Are there any changes you would like to see us to make to have this pull request considered? It would be awesome to get this one merged :heart: \n. Is there anything we can do to assist in having this code reviewed? \n. ",
    "craigchristenson": "The single page checkout is more popular with our sellers because it\nprovides better branding and provides a higher sales conversion rate. The\nonly instance where this purchase routine cannot be used in on sales which\ncontain tangible lineitems passed in using the Pass Through Products or\nPlug and Play parameter set. In these cases, we redirect to the standard\nmulti-page checkout so that the customer can enter their shipping address.\nThe single page checkout is the standard purchase routine that\nwe recommend for Third Party shopping carts.\nWe will also be releasing a new feature in the very near future that allows\nsellers to customize the CSS of our single page checkout on a per account\nbases so that it matches the look and feel of their website. This is\nsomething that has been requested by our sellers and third party cart\ndevelopers for years and we want it to be as easy as possible to implement.\nPlease let me know if you have any more questions or if you would prefer\nthat I make a new pull request that does not include this change.\nThanks,\nCraig Christenson\n2Checkout.com Integrations\nOn Sat, May 19, 2012 at 10:50 AM, Nathaniel Talbott <\nreply@reply.github.com\n\nwrote:\nThis generally looks good, but I'm a bit concerned about changing the\ndefault purchase routine - what's the basis for that?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/362#issuecomment-5802281\n. I absolutely understand your concern and can assure you that will not break\nthe integration. It will just take the customer through our single page\ncheckout. In the case where the single page checkout cannot be used (due to\ntangible lineitems being passed in using our Pass Through Products\nparameter set or Plug and Play parameter set), we will redirect the\ncustomer to our multi-page checkout. It is completely safe to always use\nthe single page checkout URL for all sales and let the 2Checkout purchase\nroutine decide which checkout to send the customer through based on the\nlineitems that were passed in.\n\nFor example, this passes in a tangible lineitem to our single page checkout:\nhttps://www.2checkout.com/checkout/spurchase?sid=1303908&mode=2CO&li_0_type=product&li_0_price=1.00&li_0_quantity=1&li_0_name=Example+Product+Name&li_0_description=Example+Product+Description&li_0_tangible=Y\nWhile this passes the same sale using our Third Party Cart parameter set to\nour single page checkout\nhttps://www.2checkout.com/checkout/spurchase?sid=1303908&total=1.00&cart_order_id=CART001&id_type=1&c_prod=EXPROD1,1&c_name=Example+Product+Name&c_description=Example+Product+Description&c_price=1.00\nOn Sat, May 19, 2012 at 12:17 PM, Nathaniel Talbott <\nreply@reply.github.com\n\nwrote:\nIt's just a concern of backwards compatibility; what's the worst case\nscenario for someone using ActiveMerchant if they upgrade and this url\nflips for them? Will it break their integration until they switch back to\nmulti-page, or will it just show a different checkout flow?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/362#issuecomment-5802897\n. Sure, auto_settle would be fine. I ended up using c_prod because\nline_item was taken and I wanted to use something that was common among\nthe parameter names being used in the method. I do agree with you that\nusing something that describes the functionality may be better.\n\nOn Sat, May 19, 2012 at 6:37 PM, Nathaniel Talbott <\nreply@reply.github.com\n\nwrote:\nLooking at this some more - is there a more descriptive name we can use\nthan c_prod? What about something like auto_settle?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/362#issuecomment-5805328\n. Just cloned the new version and verified that both lineitem methods are\nworking on live test sales and MD5 hash is being validated properly. Thank\nyou for taking care of this.\n\nOn Sat, May 19, 2012 at 9:25 PM, Nathaniel Talbott <\nreply@reply.github.com\n\nwrote:\nAll merged - thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/362#issuecomment-5805996\n. Yea it would. Users that update their gem would need to rewrite their integration both for the form generation and the passback check. \n\nForm Generation\n2Checkout has 2 main parameter sets used for integration outside of their plug and play cart system.\nThird Party Cart = You pass in the cart order ID and the total.\nPass Through Products = You pass in each lineitem individually and 2Checkout calculates the total based on the lineitem prices. \nOne of the methods used to generate the payment form auto_settle was renamed to third_party_cart better describe the 2Checkout parameter set that they would be utilizing. A while back the parameter set named \"third party cart\" was utilized by users that wanted their order to settle automatically, so the name \"auto_settle\" described it accurately. A while back 2Checkout enabled auto settlement on the more popular \"Pass Through Products\" parameter set as well so this method name is no longer useful.\nThe pull request also swaps the parameter mapping on the :invoice and :order options as the 'merchant_order_id' always should be passed as it is intended to be your custom order identifier and it is the only custom parameter value that is passed back on Instant Notification Service messages (INS is similar to PayPal's IPN service)\nPassback\nTo better follow the intended functionality of the Return and Notification classes, the return class now completely handles the validity check of the return (initial passback when the sale is completed) and the Notification class handles the validity check on INS messages (these occur throughout the lifecycle of the sale). Users would need to change their Passback check from TwoCheckout::Notification.new(request.query_string, options = {:credential2 => \"secretword\"}) to TwoCheckout::Return.new(request.query_string, options = {:credential2 => \"secretword\"}).\nPlease let me know of any concerns or suggestions you have so I can take care of it.\nThanks\n. Currently 2Checkout does not support an endpoint to pass the card info server side but it will be coming in the future. I will close this PR and open a new one when this feature is ready. Thanks for taking a look.\n. Yea I'm sorry for the confusion, I should have explained the change there more thoroughly.\n. ",
    "kenzie": "Completed both suggested changes, and additional updated the authorize method (it was almost identical to purchase). Let me know if anything else needs work. Thanks.\n. Oops. Should I back that out with another commit, or is it too late now that this pull request has been closed?\n. Looks like the remote test setup using the moneris fixture overwrites the default crypt_type value in the Gateway initialization method. Adding crypt_type: 7 to the moneris fixtures solves it for me. Is there a recommended/better way to add that default value to the Gateway initialization? [Referring to non-US moneris here]\n. The remote tests pass for me with that update. I don't think crypt_type is required for every commit action, but it seems to be fine to always include it.\n. ",
    "jnormore": "nice catch, thanks\n. cc @ntalbott \n. hmm ok so maybe the backwards compatible thing was wrong. It is rollback incompatible though, if you're using the new version then rollback to the old, all refunds, captures, etc that use the auth code will fail with the incorrect code.\nso technically yeah this would be fine to change the format, but sucks if you need to rollback. anyone else want to chime in with their thoughts on this?\n. closing this, the auth.net xml api PR was already shipped\n. :shipit:\n. remote test and :+1:\n. Thanks for fixing the remote tests, this should have already been done!\nIs it possible to add a remote test for the track data?\n. LGTM\n. LGTM\n. any tests that cover these things?\n. :heart: \n. @andrewpaliga didn't you have these mappings for a couple other gateways? would you mind adding to this PR, or passing them along to @jpcaissy to add, to see if any other patterns emerge?\n. would it make more sense to use a standard response_code instead of error_code? It would pretty much be 'success' all the time if its success but if we did have different kinds of successful responses they could be covered in this too. just a thought\n. IMO If they arent mapped it should be up to the user of AM to determine whether or not they want to show generic or raw gateway message instead\n. :shipit:\n. Nice post @ntalbott, very interesting thoughts on the subject!\nMy biggest concern with this approach is that the maintainer is the one handling conflicts. IMO this should be left up to the contributor, who should have the most context around how to resolve them (conflict resolutions should also be reviewed if they're big).\nIt also mentions that this helps contributors by not requiring them to know how to do things like squash commits. I would argue that this is a disadvantage, requiring them to do that would improve their knowledge of it. And again, they would have the most context around what needs to be squashed or changed in the commit log.\n. can you add that remote test here? ;)\n. @ntalbott I'd love to see a solution like that too but for now it's not possible (we'll check again with stripe on our end too, thanks!). With this solution, if stripe does add that support then we can update this and keep the exact same interface to active merchant because it hides that extra token exchange step behind the normal gateway request\n. :shipit:\n. maybe a good idea to add a remote test for this?\nLGTM otherwise\n. lol must have missed that, :+1:\n. :shipit:\n. Nice catch!\n. > I would love to know what other gateways support a tokenization API. Do you have a canonical list anywhere?\nWe've been working with some on this, I'll add to the list as they make their APIs public for it. If you want to follow up over email, Nathaniel and I had a thread going a while back related to apple pay that you might find useful.\n\nIt would be good to understand the range of options possible to know what's the right level of abstraction.\n\nEssentially, all network tokenization implementations will have to adhere to the spec anyway so they will be similar in most respects, the difference will come in how much extra processing the gateway or processor will do on their end (especially with respect to handling the different card types).\nThanks for the feedback, I agree with what you both are saying about the need for the new object type. I'll make those updates and ping back when ready :)\n. @rwdaigle I see what you mean. We already have support for the PKPaymentToken passthrough directly in AM, https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/apple_pay_payment_token.rb\nWhat I'm trying to do here is support the decrypted token, still a token but on the payment network side and looks like a normal PAN and requires the extra verification cryptogram passed through some existing fields (3DS usually).\n. So I added the NetworkTokenizationCreditCard here, it does simplify a few things, good call.\nCan I get a review when you're ready?\ncc @bizla for review too please, thanks!\n. I think I've addressed all issues, I'm going to merge this unless anyone has any objections?\n. that was a mistake, should have merged to master :/\n. fixed, merged to master\n. :+1:\n. You're right that apple pay doesn't provide the name in the decrypted blob (most of the time) but some gateways will still require it and it's available to the device when it's generating the payment token request (requiredBillingAddressFields from https://developer.apple.com/library/ios/ApplePay_Guide/CreateRequest.html#//apple_ref/doc/uid/TP40014764-CH3-SW2)\nI guess providing the ability to skip validation here would make sense though in case the gateway doesn't care.\n. absolutely, I think this is necessary anyway :)\n. Picky comment but LGTM\n. @bizla can you review too please?\n. :ship: when ready\n. undocumented for now :)\n. @rwdaigle added tests :)\n. ```\n~/work/active_merchant [apple-pay-stripe]$ be ruby -Itest test/remote/gateways/remote_stripe_test.rb -n /apple_pay_raw_cryptogram/\nLoaded suite test/remote/gateways/remote_stripe_test\nStarted\n..\nFinished in 1.494915 seconds.\n2 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n1.34 tests/s, 9.37 assertions/s\n. :ship: ?\n. @rwdaigle added scrub and test, nice catch\n.\n~/work/active_merchant [apple-pay-authnet]$ be ruby -Itest test/remote/gateways/remote_authorize_net_test.rb -n /test_successful_authorize_and_capture_with_network/\nLoaded suite test/remote/gateways/remote_authorize_net_test\nStarted\n.\nFinished in 3.044273 seconds.\n1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.33 tests/s, 0.99 assertions/s\n```\nI'm getting failures on the echeck remotes with my credentials though.\nAlso just noticed failures in encrypted apple pay, but these are failing on master too. @bizla u know anything about these? The token blob is a sample you got from their docs wasn't it?\n. Apple pay remote won't work, stripe doesn't have the concept of an apple pay test\n. thanks @ntalbott, I've replace with your version, I'd rather use something you've been using for a while :)\n. LGTM, same question about the test though. i don't see anything obvious in why it stopped working.\n. You read my mind ;)\n:shipit:\n. :shipit: \n. I'm not against it, we handle non PAN payments already (gateway tokens, network tokens, etc) so it wouldn't be too much of a deviation from the current behavior. I also don't necessarily see AM as a PAN only abstraction, it's interface defines general payment interactions (in whatever form that could be).\ncc @lyverovski \n. :+1:. So these came from their support?\n. Why does this need to change?\n. nitpick: unless credit_card.track_data.present? or if credit_card.track_data.blank?\n:)\n. so this will include market_type for card-not-present transactions too, is that intentional?\n. nevermind, payment.track_data.blank? ;)\n. :+1:\n. forgot to remove the previous line\n. I don't think we need this attribute, why not just let the gateway handle the lookup however it wants, that way it can do a lookup on a map or even regex if it's more appropriate for it\n. do we want to include a description of what each code means? Or even suggested error messages for each one?\n. Ideally we could do something like payment_method.tokenized? but this breaks when you have a string or a hash at the payment method (for example stripe token). I think we're stuck with the is_a? for the time being, unless you have other suggestions?\nBraintree is the only one I know of that specifically calls it apple pay, the rest I've seen are generic. I think even the braintree solution would work for other non-apple solutions if we had one to try. I'm sure one will come along soon anyway ;)\n. It's essentially a credit card though, it shares all the attributes of a credit card, it just has the extra verification fields\n. google fail, thanks ;)\n. this is from the cybersource docs. there's no way to generate this without initiating an actual apple pay payment\n. always auth+capture\n. refunds are no different\n. This is a little unclear, I have a feeling that some gateways may do and auth+capture on their end in this case but in general yeah it will just be declined.\nI'm on the fence about whether we should handle this or let the gateway handle it cause most integrations that use AM would handle the decline properly but if we started to introduce another exception type it might cause some problems (not really an excuse I guess either)\n. It includes all fields of the +CreditCard+ class with additional fields for \nverification data that must be given to gateways through existing fields (3DS / EMV).\nGood for the first point?\nI'll add something to PaymentToken :)\n. I actually think what you already have in PaymentToken makes a lot of sense already:\n# Base class representation of cryptographic payment data tokens that may be used for EMV-style transactions\n    # like Apple Pay. Payment data may be transmitted via any data type, and may also be padded\n    # with metadata specific to the cryptographer. This metadata should be parsed and interpreted in concrete\n    # implementations of your given cryptographer. Like credit cards, you must also return a string representing\n    # the token's type, like 'apple_pay' or 'stripe' should your target payment gateway process these tokens.\nwhat do you think?\n. I added this gem line as comment here instead since it's not a production release. How do you guys feel about this?\n. not the apple pay tests for braintree\n. actually (as we discussed offline), going to wait to merge this until we have the ability to enable apple pay for a merchant ID through their API as well.\n. why class_attribute?\n. This won't work well in multi threaded environments :(\n. yeah you're right, I mis-interpreted it :)\n. super picky of me but can you remove the brackets? :)\n. Could be a decrypted apple pay token, in general a credit card with the extra verification required for network tokenization\n. done\n. nope, this will be 4242424242424242\n. was causing an error in the ruby 1.9.3 tests\n. assert_scrubbed finds 123 from the email if we don't use a different cvv here\n. nope, removed :)\n. riiiigghhttt, removed :)\n. test cryptogram, used in all remote tests too\n. > Is that cryptogram reusable?\nDoesn't matter, we don't care about the success/failure response, we only care that the '155' error code wasn't returned (which means the processor doesn't support network tokenization)\n. I want it to be explicit that it's true and not another response that passes the assertion\n. It's almost certainly a network level requirement, so all discover cards, and not just FD.. ",
    "tleach": "@ntalbott Cool! Thanks for that. I'll be contributing my added support for store and unstore soon. \n. ",
    "amasses": "Thanks Nathaniel, that makes sense.\nI have updated the code to reflect above and added some missing tests.\n. Hi Nathaniel,\nI have already setup the credentials in the fixtures file - TEST/TEST is a generic user/token. \nSee 7dbb677a74cea502bd69f999ffd667104909a170 for the commit. \n. Sorry, I didn't realize Github was so streamlined in the pull requests with updated code. Please disregard.\n. ",
    "DanKnox": "They only offer the cloned Authorize.net API for payment processing. They do have another API for querying their reporting system that is separate.\n. ",
    "saizai": "ping @jpablobr \n. ping @nyc-ruby-meetup \n. ping @topfunky @nbudin \n. @topfunky I figure I should try to support all four of PayPal, Amazon, Google, & credit card if I can. The site I'm making is mass audience, so I'd rather have it be stupidly easy to use for anyone if I can.\n. ",
    "adaptabi": "3 years ago and still no integration??\n. ",
    "j-mutter": "PRs welcome :)\n. bump @melari @odorcicd\n. bump @melari @odorcicd \n. Buuuuuuump @melari @odorcicd \n.  \n. Kind of crappy that we can't assume the credit_card here will have a track_data method\u2026 These checks were done when it was a more generic payment_method iirc. Was this throwing exceptions or something? I'm all for being safe, but this seems a bit unnecessary.\n. Unless these can be other payment methods? If that's the case then #add_credit_card is a terrible method name :wink: \n. It might make sense to adapt this to use a payment_token subclass now that we have such a thing.\nAlso, using the name legato for the method names is a little confusing, as that's just the name of the Beanstream Javascript library. I'd rather see methods named according to what they're actually doing, i.e. add_token or something similar\n. :hatched_chick: once CI is :green_heart: \n. Anyone have any more input on this? Should we can it? Should we set up a patched branch to make this rollback-safe?\n. :hatched_chick: \n. Awesome, thanks! :+1: \n. I just ran the remote tests locally and I'm getting a lot of red:\nbash\n39 tests, 32 assertions, 20 failures, 18 errors, 0 skips\nWhich is exactly the same as what I get when I run the tests on master. Was this supposed to fix them?\n. Can you add a remote test that uses track data? We really need to be better at adding those tests, and this is as good a time as any :)\n. One minor nitpick, but then looks good.\nThanks for fixing and adding those tests! :tada: \n. :hatched_chick: \n. test the sleep?\n. Dammit @fw42 haha\n. Looks good to me. @ntalbott @girasquid any objections? \n. Yeah @girasquid and I had the same discussion. I'll just pull in the file directly and credit the gem as the source or something\n. Thanks for the update!\n. :hatched_chick: \n. @jnormore this fixes a failing test so there's already coverage :innocent: But yeah, I can add some unit tests for it as well\n. @jnormore refactored a bit and added more tests.\n@girasquid can I get another quick look please? \n. :ship: on :green_heart: \n. One question, otherwise :hatched_chick: if the remote tests are :green_heart: \n. Remotes look good. Merging.\n``` shell\nactive_merchant$ bundle exec ruby -I\"lib:test\" test/remote/gateways/remote_usa_epay_transaction_test.rb\nRun options:\nRunning tests:\nFinished tests in 13.640869s, 1.0263 tests/s, 4.1053 assertions/s.\n14 tests, 56 assertions, 0 failures, 0 errors, 0 skips\n``\n. Otherwise looks good\n. Otherwise :sheep:it\n. Can we close now that #1432 is merged?\n. We're now past the deadline, and our integrations with both PayPal and Payflow are humming along just fine with version 1.45.0 of Active Merchant. \n. :hatched_chick: Looking good, gents!\n. Couple questions, but looking pretty good :+1: \n. One question, otherwise looks good!\n. Otherwise LGTM\n. :hatched_chick: \n. Heh, yeah - force of habit. I've been trying to avoid it recently, but this is the only repo we do manual merges on, and I forget \ud83d\ude1e\n. Why bother with a PR if you merge it without a review or waiting for CI? :no_mouth: \n. :+1: for a remote test :innocent: \n. Can you add a test for a postal code as well please? MaybeK1K 1K1 -_%->K1K1K1` or something extreme?\n. :hatched_chick: \n. Got remote test output? :innocent: \n. Otherwise looks fine - that's the conclusion I came to when I checked out the docs yesterday :hatched_chick: \n. One of the sites you linked to in your Stack Overflow article has some conflicting information\u2026\nIt has three numbers listed as JCB test cards:\n- 3088183272539720\n- 3088014372683797\n- 3088078285264243\nBut then farther down it says:\nCredit Card Issuer | Starts With ( IIN Range ) | Length ( Number of digits )\n...\nJCB                  3528 to 3589                16\nMaybe the 30 numbers are just test numbers? Where are you getting the number you're trying to use?\nThe other site shows that JCB has some 30 range numbers, (and that they also have 15 digit numbers) but doesn't have any sources to where they got this information. I can't find anything from JCB that confirms this either way :disappointed: \n. Sorry for the delay - super busy time of year here with Black Friday/the holidays coming up.  I should be able to get to this later today.\n. One nitpick, everything else looked :cool:, but I'm still getting the holiday cobwebs out of my head - @ntalbott care to give this another quick once-over?\n. Couple minor nitpicks in the tests, otherwise LGTM. @lonsun can you post the output of the remote tests?\n. :hatched_chick: \n. Same question as @jpcaissy - There are only 3 possible error codes that we can get back from Mercury?\n. otherwise :hatched_chick: \n. Also, yeah, can we just confirm this in a unit test please? Thanks for not forgetting the remote test :grinning: \n. I agree that changing the default probably isn't a big deal, but I would still be hesitant to do it.\nUsing the options hash is probably a safe way to do it. Default to the current behaviour with the option to override it \n. If you're worried about modifying the hash, you can just delete the new key before passing it along:\ncommand = options.delete(:void_mode) || :void or something\n. You helped, haha.\n. Thanks for the updates - and the remote tests :)  Could you also add/update the unit tests for this gateway to verify everything behaves as expected?\nAlso, some gateways implement a #store method to store cards in the gateway without having to do a transaction. Is that possible with this one?\n. Cool, thanks :)\n@ntalbott @duff you guys have any input on this?\n. @jnormore looks like the remote test was updated :sunglasses: \n. There's a failing remote test in Mercury, but not related to this change from what I can see. If you want to fix it that would be awesome :innocent: \nOtherwise, :hatched_chick: \n. Can you confirm that the remote tests for Money Movers all pass with this change?\n. What @afshing said is right - you need to submit a pull request from your fork. It looks like you've done this before on other repositories. The same process applies here.\n. @bigtone1284 I've updated the README to be more explicit with contributing instructions. I hope this helps.\n. These 'fixes' are all incorrect. They're doing the assignment on purpose, checking the result, and then using it if it exists. \nI'm closing this as it breaks the gateways you've modified.\n. Were there no unit tests that also needed to be updated?\n. Nothing jumped out at me - looks like @ntalbott gave it some good scrutiny :+1: \n. :dancer: \n. I like where this is going, and agree that any additional scrubbing can be done by the app itself. We should default to being PCI compliant in the scrubbing done here, and then if you need to do more in your app, all the power to you.\n. :hatched_chick: from me\n. Nothing in the last 21 hours, no.\n. only USD?\n. Right, sorry - I spaced on that.\n:shipit: \n. Actually, first can you update the README for Mercury?\n. LGTM\n. Yeah I don't think this makes a ton of sense to have in ActiveMerchant, at least not at this time. The few cryptocurrencies that we support at Shopify all live in the offsite_payments gem (Coinbase and bitpay for example). @nahtnam maybe you should see if that abstraction makes more sense for this gateway? \n. Other than the missing remote test, looks good\n. Any reason you couldn't just use a mock in your tests?\n. Another option, because we include Active Support, is to use try, which will simply return nil if the gateway doesn't respond to the method:\nruby\ndef unstore_credit_card_info_without_response(reference)\n  current_gateway.try(:unstore, reference)\nend\n. :heart_eyes: \n. Everything looks fine in AM. I wrote this remote test:\n``` ruby\nin test/remote/gateways/remote_paypal_express_test.rb\ndef test_insurance_total\n    @options.update(\n      :insurance_total => 1,\n      :subtotal => 5,\n      :tax => 5,\n      :shipping => 5,\n      :handling => 5\n    )\nresponse = @gateway.setup_purchase(21, @options)\n\nassert response.success?\n\nend\n```\nWhich passes no problem:\n``` bash\n$ BUNDLE_GEMFILE=Gemfile_rails40 bundle exec ruby -I\"lib:test\" test/remote/gateways/remote_paypal_express_test.rb -n /insurance/\nRun options: -n /insurance/\nRunning tests:\nFinished tests in 0.810549s, 1.2337 tests/s, 1.2337 assertions/s.\n1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n```\nAre you sure that the order you're looking at in PayPal had a non-zero insurance amount?\n. The InsuranceTotal tag is within PaymentDetails, and outside of any PaymentDetailsItems from what I can see: \nxml\n      <n2:PaymentDetails>\n        <n2:OrderTotal currencyID='USD'>0.10</n2:OrderTotal>\n        <n2:InsuranceTotal currencyID='USD'>0.10</n2:InsuranceTotal>\n        <n2:ButtonSource>ActiveMerchant</n2:ButtonSource>\n        <n2:PaymentAction>Sale</n2:PaymentAction>\n      </n2:PaymentDetails>\nIf the insurance total is in the response from PayPal, everything is working as expected on the AM side. I have no idea why it wouldn't be showing up in the web UI on their end.\n@ntalbott @girasquid any ideas? Sounds like everything is ok to me \u00af(\u00b0_o)/\u00af \n. Code looks fine - haven't personally run the tests though\n. Nice find, thanks :)\n. Looks fine to me. @ntalbott @wvanbergen @girasquid anyone want to give this a second +1 before I merge it?\n. I know you have some remote tests, but could you add some unit tests as well to cover the new methods?  Also, could you rebase with the latest master? We just fixed some broken unit tests :)\n. This was fixed in https://github.com/Shopify/active_merchant/pull/1418/files  You probably need to update your version of Active Merchant\n. @bizla merged in the mocked hashing, and added a helper. Did I miss anything?\n. Heh, ended up doing very similar stuff. I'm going to cherry pick the mocked md5 stuff and get this finished up. I totally spaced on that, haha\n. Merged this into #1508 - closing this guy and merging that one once it goes :green_heart: \n. :+1: \n. :hatched_chick: \n. :hatched_chick: \n. Sorry, yeah, I meant on the 23rd. Just wanted to make a record of this so we don't forget.\n. Awwww yissssss. I'll handle it\n. Nice catch, I thought these were all gone :+1: \n. :bow: \n. :+1: \n. :hatched_chick: \n. Due to the confusion, I think this can be reopened? \n. Wait, this branch is\u2026 interesting. Looks like everything here has been merged, and is for an unrelated gateway. Closing. #caseofthemondays\n. Code looks good.\nFor the transcript dump, could we make it a rake task or something maybe?\n. okay.jpg\n. Bump for remote tests :innocent: \n. @jaredmoody @charlie-white do either of you have working test credentials for WorldPay and can run the remote tests and dump the output here?\nI've reached out to them to get a set, but don't have them yet.\n. LGTM. The functionality is already there in the Connection class. @ntalbott @girasquid any objections?\n. Ugh, really? \u0ca0_\u0ca0 \n. But yeah, :shipit: \n. Ughghghghghghg\n:shipit: \n. No major gripes with anything, I'll circle back to this in a bit to look at the changes. Remote tests passed for me locally.\n@ntalbott @girasquid would appreciate some more :eyes: if you guys have some spare cycles\n. I'll make another pass at this this afternoon and merge it if it looks good :+1: \n. One last question about error codes, otherwise LGTM\n. Merged, thanks!\n. LGTM. Remote tests are green except the transcript dump that's a skip. \n@girasquid @ntalbott any objections?\n. Derp, totally missed that. #mondays. :coffee: :coffee: \n. Steven,\nUnless explicitly set all connections via active_merchant gateways will use your system's \ndefault ssl settings. You will either need to hard-code your Authorize.net integration to use TLS or update your production environment. As you noticed, your development system is already configured correctly.\n. @jnormore I think you need a rebase :\\\n. Closing in favour of https://github.com/Shopify/active_merchant/pull/1629\n. Agreed. Authorize.Net gets a ton of volume from Shopify stores. It sounds like this Authorize.Net emulator might be the culprit, so I'm curious to see what the remote tests say when they're pointed at it.\n. :fire: \n. Um, what's the reasoning for this? Does this product/endpoint not actually support US? \n. As long as it's just the display name that's changed, I think we're ok. We'll need to update some stuff on our end, but otherwise I think this is ok.  @girasquid thoughts?\n. Same, I'll add a note to the GettingStarted or something about ruby versions.\n. Yeah I would be wary of trying to do too much for v2\n. @bizla done :)\nhttps://github.com/Shopify/active_merchant/pull/1583\n. :hatched_chick: :fireworks: \n. @MauricioMurga is there documentation somewhere I can see to confirm this is the correct field to use? I don't see it anywhere in these docs.\n. Oh weird, I must have typo'd my search when I first looked. Thanks :)\n. Thanks for this!\n. :hatched_chick: \n. Nice catch! Thanks\n. Got remote test output for those?\nOtherwise :hatched_chick: \n. :hatched_chick: \n. Tests? :innocent: \n. We're currently point to a side branch of the Braintree gem to support ApplePay transactions, which is actually built on top of 2.40.0.\n. Can you update/add tests for this please?\n. Got remote test output? :)\n. :hatched_chick: \n. Any reason to have two hashes? Doesn't look like the keys have any collisions, and you could just STANDARD_ERROR_CODE_MAPPING[response[:bank_resp_code] || response[: ecommerce_error_code]]\n. Squash and :ship: \n. Rebase + remote test output = :shipit: \n. @rwdaigle we can tackle the recurring payments in a future PR - if there is an immediate need I will gladly review one if you put it together :smile: \n. Yep, that sounds like the culprit. :+1: \n. CreditCard already supports track data :)\n. And the AuthorizeNetGateway already handles it\n. I'm not a fan of adding one-off public methods to gateways, as it defeats the point of using the AM abstractions. Is there a way this could just leverage the store method maybe, which is the accepted API for saving tokenized cards?\n. :+1: Same question re: nil amounts as @ntalbott \n. Remotes look good.  Merging.\n``` bash\nvagrant@vagrant:~/src/active_merchant$ bundle exec ruby -I\"lib:test\" test/remote/gateways/remote_pin_test.rb\nLoaded suite test/remote/gateways/remote_pin_test\nStarted\n.............\nFinished in 35.820351471 seconds.\n13 tests, 39 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.36 tests/s, 1.09 assertions/s\n``\n. LGTM. Do you have a link to the API documentation for this?\n. Awesome, thanks. I'll get this cleaned up and merged in. I checked out the docs, and it doesn't look like there is avoidconcept with this gateway, which usually goes along with an authorization (as opposed to arefundwhich is on an already-captured purchase). Do you know how Fat Zebra handles this? Can we just use therefundendpoint and just aliasvoid` to it?\n. :hatched_chick: \nAPI docs for reference\n. Hey @bgadoury,\nUnfortunately we're not going to be much help here, as ActiveMerchant now only supports Rails 3.2+ and Ruby 2.0+. Ruby 1.9.3 is also no longer supported at all.\nI know it can be a daunting task, but I would suggest updating your app to a newer version of Rails and Ruby if at all possible. \nOf course, you're free to use whatever versions you would like, however you're going to be on your own for the most part. If you absolutely cannot update, your best bet may be to fork ActiveMerchant and remove/replace the offending characters if possible, or add encoding comments to the files in question.\nBest of luck!\n. :+1: for tests\n. :hatched_chick: \n. Wouldn't you want this a few lines up instead? Or do you really want to omit everything\n. Oh hai @duff, haha. \n. @davidsantoso Can you add a remote test that confirms the lack of address is acceptable?\n. We've been trying to move from the generic address key to billing_address for a while now, and it should probably stay. I would imagine most gateways will want it, and the ones where it's optional are the outliers.\n. :fire: \n. @ntalbott @jnormore  cool - I was just about to ask if the username/merchant ID should be filtered out. I didn't think they would be considered sensitive, and could be useful when debugging.\n. :hatched_chick: once :green_heart: \n. :cool: \n. Test? :innocent: \n. Agreed. :+1: \n. Maybe add a unit test that does a stub_comms...check_request to ensure the empty strings aren't being sent?\nOtherwise LGTM\n. @andrewpaliga the problem is that you can't really fake the values for those fields. So you could send them, but it won't work.\nI haven't read the docs, but this makes sense to me. :ship:\n. @aprofeit was just about to ask the same thing. Should just have mode imo.\n. :+1: \n. LGTM. cc @ntalbott @girasquid \n. Are there any cases where anyone wouldn't want to send this data along? I'm not super familiar with the CyberSource API.\nAlso should be tested.\n. Also, the recurring functionality is deprecated and is being removed from Active Merchant.\n. :tada: \n. Remote tests?\n. :+1: \n. I'm pretty sure this endpoint predates the current minimum. @matthelm can you confirm?\n. Remote test? Otherwise LGTM\n. No remote test for refunds?\n. Turns out the remotes for this gateway are still using the deprecated credit method. @ivanfer is going to change it to refund.\n@girasquid @ntalbott - Thoughts on doing a purge of all credit methods in the next major version bump?\n. :ship: \n. :heart_eyes: \n. That would be cool if every single gateway had a thorough scrub implementation...\nPRs welcome :innocent: \n. I think we tried a generic approach and it wasn't as simple as we had hoped, so we went with an explicit opt-in approach to simplify PCI compliance. It's been a while though, so maybe I'm forgetting something.\n. :+1: \n. :+1: - assuming they actually support these countries? :trollface: \n. :green_heart: means GO\n. Whoops. Done.\n. I think I commented on this before, but if the method is add_credit_card it should be safe to assume that we're getting a CreditCard object passed in and not have to check if it has a track_data method.  We've had to do this before because other gateways used more generic add_payment-y methods and it could be more than a CC.\nIt looks like this gateway only supports credit cards, so it's probably safe to omit this check here(and only need the presence check), but I could be wrong.\n. I think you still want the .present? check here, otherwise a nil or empty string value will likely cause problems. In the same vein, having tests for these false-y situations would be nice :)\n. Everything outside of the check_request block is already tested elsewhere, but it's probably good to keep 70-71 around in case the mocked data gets tampered with?\n. Indentation is off here\n. Yeeeeep \n. lies.\n. This also depends on the creditcard_or_vault_id being a credit card with track_data, no?\n. This ends up sending a credit_card with both track data and fully populated manual-entry data. I think this should be a Billing::CreditCard with only track data, no?\n. Same comment here re: credit card\n. Is this unit tested? It aligns with my comment on your other PR about the credit_card we're using in the test.\n. Same here\n. I think you're missing an argument here\n. I think you forgot metadata?\n\na Billing::PaymentToken guarantees an interface to a payment_token.payment_data, payment_token.type, and payment_token.metadata\n. INAPP.PAYMENT sounds like in-app purchases on iOS, not necessarily in-person NFC charges. Does this still work for those?\n. Newline plz :innocent: \n. Another newline :innocent: \n. Extra line, hah\n. Yeah I took a quick look at that, just wanted to make sure\n. Yep, just making sure it wasn't missed :)\n. Nitpick, but credit_card_with_track_data makes a bit more sense :)\n. A PKPayment, and I would assume other payment tokens, support billing/shipping addresses. Should we maybe account for that here?\n. Should we maybe move the track data check/logic into there then? The method names/split logic smells bad to me\n. Do we expect to ever get any nested hashes here? Maybe deep_symbolize_keys! just in case?\n. Right, k. \n. Should we maybe comment somewhere that these only work every 5 minutes or whatever?\n. Uhhhh, this gateway supports other countries, including Canada so this will clobber postal codes. Is :avs_zip a US-only thing?\n. Why - 20?\n. \\W includes underscores :trollface: . I would just [^a-zA-Z0-9]\n. derp just saw this\n. :+1: \n. Do we really need an ivar for this?\n. Are you not basically getting this for free in the next few assertions? It certainly quacks like a Response\n. Could this just go into test_helper.rb along with #credit_card, #credit_card_with_track_data, #check, etc?\n. Could use the helper method if it was in test_helper.rb :innocent: \n. \n. Agreed, also, please stick to the standard options as outlined in the Contributing Guide.\n. :+1: \n. Agreed here as well. Metaprogramming for the sake of metaprogramming leads to more complex code that is harder to parse, search, etc.  If these methods are almost identical, put the shared logic into a private method that they can both call.\n. YAGNI\n. Does PayHub support other payments types maybe? Either way, the order dependency here should be fixed\n. Why bother needing options here?\n. Could you please incorporate the STANDARD_ERROR_CODEs here?\n. Yeah I'm on the fence with that one. The whole point of a library like ActiveMerchant is to provide a single, universal interface. This isn't the place for this discussion, and it would take some work to clean up the existing gateways, but we should try to be as consistent as possible when adding new ones. Also, they're not used. \n. Can you remove all the extra newlines here?\n. All of these different indentation styles are awkward to read - maybe each of these ivars can be set by private methods?\n. Ah right, I was in normal PR-review mode. \n. :+1: I would hope that on a successful transaction the :error_code field is blank and we can simplify this\n. Yeah, a hash will return nil if you do a lookup on a key that doesn't exist\n. It's entirely optional, which is why this is ifed\n. This was using the options accessor on the gateway itself, which is just the credentials \n. Does the live_url need to be updated as well?\n. This is a template file that is used to create the base files for new gateway integrations using the gateway_generator.\n\nWe use thor to run the generator command, which eventually calls into template which does in fact use ERB to render the new files. As such, we need the ERB tags to populate the name of the gateway correctly.\n. Looks like this PR contains the same commit as https://github.com/Shopify/active_merchant/pull/1473\n. Can you add a newline above this to break up the two tests please?\n. hawkward\n. I'm not a fan of adding new public methods that talk to specific gateways as it gets away from the standard ActiveMerchant abstraction. @ntalbott @girasquid thoughts here?\n. You're already inside an if options[:ip] block, so this check isn't required\n. I don't think first_name can ever be blank? here\n. I'm a fan of #try instead of nil checks but that's just me.\n. It looks like this ternary isn't covered in the tests\n. There are also no tests for it\n. These empty lines can be removed\n. Kinda awkward that an @ inside a code snippet will mention someone.\n. Oof, nice catch\n. I'm a little concerned about this change. When #response_authorization falls through to #authorization_from,with what appears to be an unsuccessful transaction, it returns an empty string not nil, so I'm worried that this change in behaviour may break some integrations that expect to always have a string here.\n. Yeah I know, just might be a nasty surprise for someone\n. These comments can be removed now\n. This test expectation actually figured out the year a few lines up, but then this hash gets changed anyway.\n. same thing here\n. Yeah I debated it. I'll make the change\n. Did anyone ever do this?\n. Extra line :trollface: \n. lol\n. Is there a reason this was extracted out into a method but capture_uri isn't? \n. Uh, am I missing something here? This class seems useless, and you could just use an ActiveMerchant::Connection in your new_connection method below\n. This can be deleted instead of commented out\n. Can you add an assertion for this change to your unsuccessful test?\n. :heart_eyes: \n. Accidental? \n. :+1: \n. Prefer refute over assert !\n. Can this be dynamic, such as Time.now.year + 5 instead of hard-coded, or does it have to be 2020?\n. Why not just use the fixture?\n. You're using assert_equal 'SUCCESS', response.message in the remote tests, any particular reason to use a regexp in these ones?\n. assert_failure?\n. These can be deleted. Please don't submit PRs with commented out code, it just means we have to go in and remove it when we merge.\n. any reason these are different, considering the patterns are the same other than the length of the number to filter?\n. Please use the ActiveMerchant standard :name key in an address hash, or :first_name, :last_name from a CreditCard to get the customer's name\n. These method names are a bit weird, #execute_authorization sounds like you're doing the initial auth, not acting on one.\n. Is there a reason you don't to_s the state, but you do for everything else?\n. Can you please map the error codes here to their respective STANDARD_ERROR_CODES, and include them in the response from your #commit method above? A good example of this is in the Stripe gateway. Here is the response and here is the mapping\n. Please prefer || over or for logic checks. \n. The newlines/lack of are all over the place in these tests, but I can clean that up in the merge\n. Is multi capture supported? Could you add a line here to capture the outstanding balance?\n. Same question as above re: multi-refund\n. Not a ApplePayPaymentToken, or both?\n. Ooooook, just had to ask because you're setting :apple_pay => true :)\n. New hash syntax? :innocent: \n. I just noticed this, does Monei not provider actual error codes we could map to?\n. The translate_ methods below seem to imply yes, so why do all failures simply get the card_declined error code?\n. This is this expected to be nil, yes? Can we maybe just explicitly check that it's blank?\n. Wait, read the docs, this is required when tokenized? Ooooook.\n. Ah ok, if that's all we get then I guess we can't do much about it.\n. Any update on getting credentials for this that we can commit to the repo? \n. This fixture doesn't exist?\n. Don't you need to pass in the :hmac_authentication_key param to actually test this?\n. So that's a 'no' for ones we can make public? I'll take them privately, but would love to have a set we can commit here and use in CI\n. These can be combined into a single requires! call\n. Please rename to credit_card to be consistent with all the other gateways.\n. This method signature is a little awkward - why not just pass in the credit_card and let the method sort it out?\n. authorization instead of orderCode please :)\n. This param is required, so you don't need to check for it.\n. Also, can you use a MultiResponse here since you're making two requests?\n. Same comment as above re: credit_card\n. And using a MultiResponse\n. def parse(body={}) will do this for you, but when would it ever be nil?\n. json = parameters ? parameters.to_json : nil\n. So, an empty response is deemed a success? That seems a little backwards, but I'm not familiar with this API\n. Can you move this check into test? method?\n. Why not just use the fixture?\n. But the response is completely empty? Just seems a little odd.\n. Minor nitpick, but can you use authorization instead of txn_id for the param name? And there's no reason to comment on what these methods do, they're part of the core ActiveMerchant API and should be well understood by anyone using them.\n. Don't really need the respond_with\n. Huh, ok. I think I've only ever used it when I've needed the response, so just assumed you didn't need it here.\n. This is\u2026 not good :innocent: \n. Can you indent this so it's more obvious that it's logically linked to the line above?\n. :+1: \n. You've done this check a few times, worth making it a method?\n. Agreed, time for my macro:\nNew hash syntax? :innocent: \n. Because we're spoofing ICC data or something? \u00af(\u00b0_o)/\u00af \n. You don't need the amount?\n. Is it contained in the payload?\n. Why?\n. :heart_eyes: \n. Though I feel like this belongs on the CreditCard model\n. Still seems like the Right Thing To Do\u2122 \n. I'm having total deja vu here - didn't I ask this exact question about this exact line somewhere? Is this real life? THERE IS NO SPOON\n. Phew, ok. \n. Why rebuild the REXML doc if it's being done in the method? Maybe the strip method should just run the gsub no matter what? \n. Not supported anymore? :)\n. Any reason to assert these here and not in the test above?\n. Because all these tests run on the same host, I have to do the check here so I can set the --path, which Bundler then remembers for subsequent commands.\n. This feels weird. DK maybe?\n. It's skipped if it's not false AND blank... It's a little counter intuitive, but the logic works:\nruby\n[1] pry(main)> value = \"hello\"\n=> \"hello\"\n[2] pry(main)> value != false && value.blank?\n=> false\n[3] pry(main)> value = false\n=> false\n[4] pry(main)> value != false && value.blank?\n=> false\n[5] pry(main)> value = \"\"\n=> \"\"\n[6] pry(main)> value != false && value.blank?\n=> true\n[7] pry(main)> value = nil\n=> nil\n[8] pry(main)> value != false && value.blank?\n=> true\n. Why not just add_line_item_data(xml, options) if options[:line_items]\n. Why was this removed? authorize is a standard gateway method and should probably still be implemented.\n. Please don't change the method signature of the common gateway API methods\n. You've added this method param, but never actually use it. Everything uses ssl_post\n. Eh, not a test anymore? Or you don't feel this is necessary?\n. Oh ok - TIL. I guess it just uses the associated charge_id to figure it out. This is fine, then\n. trololol encodings\n. :heart_eyes: \n. :+1: I would just add it to the headers method and just set a default value if needed as @girasquid mentioned below\n. Yeah something like that would work\n. Time.now.year + 1 to future-proof this?\n. ",
    "nbudin": "I'd be very glad for ActiveMerchant to integrate with Google Checkout somehow, and I think google4r-checkout provides the tools to make that possible.  I don't have the cycles to do the integration myself at the moment, but I would be glad to assist if someone else wants to take this on.\n. ",
    "topfunky": "In my experience, implementing Google Checkout support on a site is a pain. And few people choose to pay with it.\nIn addition, Google sometimes holds a payment without notification for 24-48 hours. Customers are unhappy if they think they've paid, but aren't notified about the completed purchase for two days.\nI think Amazon payments would probably be a more worthwhile expenditure of development time.\n. ",
    "BenZhang": "In addition, Payway is a software API in Australia.\n. Thanks for the feedback. I have tweaked the transaction issue and added a remote test.\n. Sorry, I don't have developer credentials. We are still waiting for them. Payway has very wired policies for this.\n. Thank you very much : )\n. Hi, actually there is a problem with the store method. In reality, it does not require the bill_id for the registration, but customer_reference_number is required. I cannot see any way to pass the params customer_reference_number to the commit method. \nPlease refer to my branch. https://github.com/BenZhang/active_merchant\n. Got it. I have change the option name to billing_id\n. Thanks for your feedbacks. I have updated it.\n. ",
    "jmccartie": "Code submitted to #393\n. Thanks @ntalbott  -- didn't see it in master originally.  Thanks!\n. ",
    "tinynumbers": "Is there any documentation anywhere on how to use this integration?\n. ",
    "BartlomiejSkwira": "Is this working? according to the official Paypal documentation:\n\nPPA requires use of PayPal's hosted checkout templates for submitting data for sales and authorizations. The templates enable merchants to avoid the PCI burden of having credit card details pass through their servers.\n\nA Paypal iframe is required if I understand it correctly.\n. ",
    "nashby": "@ntalbott yeah, I thought about it but PayPal for example has Paypal module name as well (https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/integrations/paypal.rb#L4)\nBut if it should be changed it's not a problem.\n. /cc @Soleone \n. @ntalbott sure thing! I'll fix it tonight.\n. @ntalbott hey, could you take a look again? I've fixed it. Thank you.\n. @ntalbott btw, build on Travis is failing not because of my code. So if there is something I should fix please tell me.\n. @orenmazor yeah, agreed with these changes. Thank you!\n. @orenmazor I've updated failing test so now everything is ok. Ready to be merged I guess :)\n. ",
    "constantm": "That produces:\nruby\nundefined method `type' for 90428261:Fixnum\nHaving a look at the code again, it seems the issue is actually in the determine_funding_source() method. It checks for a string to determine if payment source should be vault. By default, Inspire returns an int for a vault_id, unless you specify one manually, in which case it might be a string.\nruby\n      def determine_funding_source(source)\n        case \n        when source.is_a?(String) then :vault\n        when CreditCard.card_companies.keys.include?(card_brand(source)) then :credit_card\n        when card_brand(source) == 'check' then :check\n        else raise ArgumentError, \"Unsupported funding source provided\"\n        end\n      end\nThus, it should actually be checking for either a int or a string.\nruby\n      def determine_funding_source(source)\n        case \n        when (source.is_a?(String) || source.is_a?(Integer)) then :vault\n        when CreditCard.card_companies.keys.include?(card_brand(source)) then :credit_card\n        when card_brand(source) == 'check' then :check\n        else raise ArgumentError, \"Unsupported funding source provided\"\n        end\n      end\nMaking that change causes your code to work.\n. ",
    "ehutzelman": "I ran into this issue with the \"dual\" test modes while trying to setup authorize.net CIM gateway.  \nThe gateway initialize method accepts an options hash with the :test parameter and is documented that it will use the test_url if :test => true.  However, the test_url is only actually used when you set the Base.gateway_mode = :test.  As far as I can tell, the :test setting in the initializer options hash only turns on an additional XML tag xml.tag!('extraOptions', \"x_test_request=TRUE\") if @options[:test].  All other test-related decisions are based on the separate  Base.gateway_mode setting.\n@Soleone proposed fix to use both @options[:test] || Base.gateway_mode to define test? should eliminate a lot of this confusion.\n. @codeodor If you want to force test mode on production, I believe you can still do that by turning on test mode through the AuthorizeNet web console. However, I'm not sure why you would want to run your tests through production as AuthorizeNet provides a test server specifically for this purpose.\n. ",
    "codeodor": "@ehutzelman, I look at that as a feature: for instance, I want to run a test against the production URL in AuthorizeNet, where you can do that by sending \"test\" = true. \n@ntalbott Did this commit take away our ability to run in test mode on the production URL? And if so, is there an official workaround or will I need to monkey patch it in my tests?\nThanks!\n. Thanks @ehutzelman. For the time being I temporarily set test_url = live_url, and switch them back after the test that needs it.\nA couple of reasons I've seen where someone wants to test against a production account in test mode:\n1) credentials do not have a typo\n2) settings on the account in production match the expected settings\nRegards,\nSam\n. ",
    "dbwinger": "Not sure this is the place to ask this, but I'm really confused about how to run against the sandbox url but not in test mode.  Can anyone help me out?\n. ",
    "matiaskorhonen": "+1\n. ",
    "jonikorpi": "+1!\n. ",
    "Konza": "+1\n. ",
    "paulca": "Right : I was mainly bringing this up for discussion. I'll play about some more with it.\n. Totally my bad. PayPal was IGNORING the X-PAYPAL header.\n\u2014P\n. ",
    "kurenn": "yeah sounds good to me, I did it this way because it made more sense to me, but yours was my first option. Let me update that and include a little bit of documentation so others will know, sounds good?\n. I'll send another pull request so you can merge it, and I'll close this one..\ncheers!\n. All right, sorry about that!....\n. This is weird, I'll check that up, because I have another app runing with this and is working fine, \n. So it was not my fault?, I was running some tests and it was working\n. Niceeeee! =)\n. really cool addition, hope to see the merge in the repo!...\n. ",
    "mjallday": "Awesome. New pull request to address that coming soon. \nOn 24/07/2012, at 15:09, Nathaniel Talbottreply@reply.github.com wrote:\n\n@mjallday I've merged this, but there are two outstanding TODO's related to AVS and CVC codes. Can you open a fresh PR that either strips out the code for handling them or gets the translation tables filled out?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/417#issuecomment-7235039\n. \n",
    "boourns": "Thanks, just fixed the string building.\nssl_post is in active_utils, will do a pull request with that logging.\nSadly those \"gateways missing live_url\" listed are base classes with the URL set in the children (or vice versa), or gateways that use an external gem for connectivity.  I can't think of an obvious fix to filter them from the list aside from whitelisting or stubbing a value in the classes, both which seems like the wrong approach.\n. Forgive me if I'm wrong, but I think abstract_class is a rails ActiveRecord-ism that can't apply here (says my 3-weeks of ruby and 5 minutes of googling :) )\nI think ssl_verify is a instance variable but I will log if ssl_strict is false.\nOnly change in this commit is to add a timeout that matches what we use by default in active_utils.\n. Ah, DIY abstract class, done now.\nLatest commits brings the output to:\n```\nCould not load gateway PaypalExpressCommonGateway from /Users/tom/Code/Ruby/active_merchant/lib/active_merchant/billing/gateways/paypal_express_common.rb.\nCould not load gateway SmartPsGateway from /Users/tom/Code/Ruby/active_merchant/lib/active_merchant/billing/gateways/smart_ps.rb.\nVerifying 95 SSL certificates\n....................E........E................................F....................FE..\nFailed Gateways:\nActiveMerchant::Billing::PslCardGateway - #\nActiveMerchant::Billing::ViaklixGateway - #\nError Gateways:\nActiveMerchant::Billing::FirstPayGateway - #\nActiveMerchant::Billing::LitleGateway - #\nActiveMerchant::Billing::VindiciaGateway - #\nGateways missing live_url:\nActiveMerchant::Billing::BraintreeBlueGateway\nActiveMerchant::Billing::SamuraiGateway\n```\nthe two \"missing live_url\" gateways use a gem for connectivity.\n. Hey guys, sorry for the noise. Please don't bother reviewing until I fix one issue that came up in discussion with John\n. .. And it's good to go.\n. Thanks for the review Dennis, last commit addresses your comments.\n. Refactored out their need, forgot to remove them - thanks!\n. I will update the example, the code works in both cases though.\n. Nope, I missed it in the superclass. removing\n. ",
    "acolin": "thanks dude ;), will add recurring billing soon\n. noup,\nThey just do the purchase directly. I will ask them if they will have the other options available.\n. Thanks dude! I was on vacation so I couldn't get your emails. I'm looking forward to integrate other functionality like recurring payments, profile storing or accepting payments through convenience stores in mexico.\n. ",
    "omh": "I have a working Worldpay account set up so I'm happy to work on this fix and put together a pull request. \n. Added a fix + test in pull request 426\n. @Soleone I did the unit tests, but I forgot about the remote tests. I had a look at them now. The remote tests passes on master, but that's because the code was wrong. Worldpay seems to allow a refund to be performed on an AUTHORISED payment and it returns <ok>, however Worldpay doesn't actually refund it. This means the test passes but the payment isn't actually refunded. Seems like a bug in Worldpay and not much we can do about it I guess.\nThe test fails with my fix applied and I'm not sure how to fix it. Worldpay only allows you to refund transactions that are \"CAPTURED\". However it takes Worldpay a few minutes (~10-20 min) to move a payment from AUTHORISED to CAPTURED, even when sending a capture request right away, which is what #purchase does currently. Capture delay in Worldpay is also set to 0. I'm not sure how we can get around that or how to fix the remote refund test. Any ideas? Remove the test? \nAbout adding the email and created by fields, I'll see if I can get that done in a new pull request.\n. ",
    "sideshowcoder": "Actually the BogusGateway does not allow testing the Paypal specific methods like setup_authorization, since the Application I am working on only works with Paypal only I wanted to be able to test my code with these methods in place as well. That was the reason to extend the Bogus Gateway to also include these methods and give the correct responses.\nSo in my code the PaypalBogusGateway stands in for a PaypalExpressGateway and responds to the setup_* methods in the form a Paypal Gateway would.\n. Well if more people find it useful I am happy to bring this up to speed with the changes to active_merchant since the pr was closed. \n. @CloCkWeRX Good idea, haven't touched that in a while so wonder if it still works.\n. Good idea, I extracted it https://github.com/sideshowcoder/active_merchant-paypal-bogus-gateway seems to work find. \n. ",
    "adamwaite": "I'd like to thank you for this too. This guy too: http://infotrope.net/2013/05/31/testing-paypal-express-with-activemerchants-bogusgateway-and-how-to-make-it-work/\nShows people have a need for it, no?\n. ",
    "zmillman": "I just ran into this issue as while writing rspec tests for purchasing by PayPal Express\n. ",
    "nleo": "+1\n. ",
    "giorgenes": "+1\n. ",
    "ch000": "+1\n. ",
    "thekensman": "+1\n. ",
    "CloCkWeRX": "Any chance you'd package this as a separate gem @sideshowcoder ?\n. Friom unit tests, it seems to.\n. ",
    "mipearson": "Direct Entry transactions are where the payment gateway interacts 'directly' with the credit or debitor's account. The account holder gives the organisation permission to do this through their bank. It is usually used for recurring bill payments with local authorities (eg gas, electricity, etc) as a way to avoid credit card fees.\nIn the case of secure pay au, direct entry debit / credit transactions are recorded and processed nightly.\n. @jduff Existing tests modified to use long numbers, and code cleaned to remove 'last' method and use regexes universally for the sake of consistency.\n. Also, apologies for the line ending diffs. My ST2 is configured against internal work (where messy diffs don't matter) and I forgot to audit this patch before submitting. If it's a problem, let me know, and I'll clean it up.\n. ",
    "sebvachon": "Hello, \nin the following file: lib/active_merchant/billing/gateways/ogone.rb\nat lines 158 and 170 is something like this: \naction = options[:action] || 'SAL'\nThis means SAL is the default operation code for payment processing, however this code stands for \"Partial Payment\". Most transactions in our Shop is a completed payment which should require the code SAS as explained in Ogone's DirectLink integration manual:\n\nSAL: partial data capture (payment),\nleaving the transaction open for another\npotential data capture.\nSAS: (last) partial or full data capture\n(payment), closing the transaction (for\nfurther data captures) after this data\ncapture.\n\nHowever there is no mean in the shopify order administration to say that a payment capture is the last payment when accepting an amount which should send a 'SAS' code instead. The only option we have is to automatically authorize and charge the buyer's credit card for the full amount of the order in the \"checkout and payment\" preferences. \n. ",
    "rbarazi": "I added the missing tests and replied to all your comments.\n. @jduff This is ready for you to look at again.\n. Is this ready to be merged in? Can you take another look please? cc/ @jduff \n. @ntalbott, Thanks for the review. I added the order_id back to the authorization token. Hope this will make the PR ready to go :)\n. This was the only instance that is not pre-formatting and validating the order-id. I added a test case.\n. Ouch! My bad on this one. I reverted this back to the original implementation.\n. Agreed, I moved it to be part of the options hash. Tests are added accordingly.\n. I added a documentation snippet from the official xml spec: http://download.chasepaymentech.com/docs/orbital/orbital_gateway_xml_specification.pdf\n. I think it's opinionated to embed the order_id in the authorization, especially when the order_id is already part of the request. Do you know why it was embedded here in the first place?\n. This is not needed. It was part of the other fork's implementation. I got rid of it.\n. ",
    "samvincent": "Hey @rbarazi, Glad to see someone found this useful after all this time. I'm afraid I can't help too much since this was for a previous client, but I can say that the original implementation has been running in production for years now.\n. ",
    "mankind": "@Soleone and @daverooneyca is there anu update on Barclays \"Extra Plus\" integration?\n. ",
    "yemster": "Have I missed something? As far as a I know, the Barclay MPI is being phased out over the next 12-18 months tops and all new accounts are and will be Barclays Extra Plus. So this does not need to be backward compatible as both integrations are different. \n. Cool... So long as it will get merged (upon review of course) then that sounds like a plan.\n. Aye... my sentiments exactly. Have already spoken to Barclays for clarification and the todo list in the ticket sounds spot on. Just getting a Barclays test account setup so hopefully have something soon\n. @ntalbott We got something in the works already - currently ironing out a few issues, mostly with ssl_verify. Will keep you posted.\n. ",
    "grahammorley": "Be great if I could get in on this for a client who just signed up to Barclays! Any progress guys? Thanks!\n. ",
    "tobystokes": "FYI, Barclaycard have told me that although they are switching accounts to Extra Plus, if you already have a confirmed integration with them, they will continue to support the old API under emulation via the new system.\n. @louiskearns yes, in Shopify, it's called 'Barclays ePDQ (MPI)'. They did say they would only do this if our existing account integration was approved/confirmed, which it has been, i'm not sure whether they are prepared to do this for new customers. \nAlthough I'd be happier knowing the new gateway was supported directly in AM...\n. @ntalbot it looks like that commit does the stuff, have you submitted a pull request to Shopify, and have they said anything about it?\n@louiskearns I'm still getting conflicting information from barclays as to whether they will maintain the CPI or MPI systems under emulation, but they are very keen to migrate us to the new ePDQ system by October 2013, so I'm getting worried...\n. ",
    "louiskearns": "@tobystokes I've spoken directly to Barclaycard's gateway PM who had mentioned some time ago that emulation of MPI would not be possible. When you say \"the old API\" are you referring to the existing AM integration of MPI?\n@yemster I know that barclaycard is very interested in getting an integration set up. Let me know if you'd like me to put them in touch with you. \n. @tobystokes - yes the gateway is still supported by barclaycard for\nexsiting accounts. Shopify still has several existing merchants using MPI.\n\nLouis\nOn Fri, Apr 12, 2013 at 11:49 AM, tobystokes notifications@github.comwrote:\n\n@louiskearns https://github.com/louiskearns yes, in Shopify, it's\ncalled 'Barclays ePDQ (MPI)'. They did say they would only do this if our\nexisting account integration was approved/confirmed, which it has been, i'm\nnot sure whether they are prepared to do this for new customers.\nAlthough I'd be happier knowing the new gateway was supported directly in\nAM...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/438#issuecomment-16300591\n.\n. @snookca can you grab a screenshot of your moneris account where the 'eFraud' features are mentioned? I'd like to add proper copy in the Moneris gateway settings on Shopify to take advantage of https://github.com/Shopify/active_merchant/commit/70a11dfa7a90711cbc490bc78ad22db60a42cc41\n. cc @ntalbott @jduff \n\nWe've been unsuccessful processing live transactions through the current integration. Following a skype call with their VP Engineering, the cause is likely an incorrect tokenization url (.com) instead of (.de)\nWe're also taking this opportunity to add support for Switzerland and uppercase their name to match their logo. \n. @emilienoel @melari -- I think we'll find that the primary customers of merchants using webpay will speak more japanese than english. Is there another reason we're changing the error messages here?\n. @melari can you take a look?\n\nLouis\nOn Tue, Aug 20, 2013 at 11:33 AM, Sandeep Kumar notifications@github.comwrote:\n\n\nGetting merchant_id and secret_key from app environment.\nReplaced productinfo with secret_key in generate_checksum method of\n   helper class.\nSending params to notification on response.\n\nNote: Tested with test credentials.\nAny questions mail me on sandeep.kumar@payu.in\nYou can merge this Pull Request by running\ngit pull https://github.com/buoyant/active_merchant payu\nOr view, comment on, or merge it at:\nhttps://github.com/Shopify/active_merchant/pull/811\nCommit Summary\n- changes for payu integration\nFile Changes\n- M lib/active_merchant/billing/integrations/payu_in.rbhttps://github.com/Shopify/active_merchant/pull/811/files#diff-0(2)\n- M lib/active_merchant/billing/integrations/payu_in/helper.rbhttps://github.com/Shopify/active_merchant/pull/811/files#diff-1(2)\n- M lib/active_merchant/billing/integrations/payu_in/notification.rbhttps://github.com/Shopify/active_merchant/pull/811/files#diff-2(5)\nPatch Links:\n- https://github.com/Shopify/active_merchant/pull/811.patch\n- https://github.com/Shopify/active_merchant/pull/811.diff\n. @melari can you review & test? \n@larspind can you confirm that the test credentials provided here still work appropriately?\n. @melari can you take a peek?\n. @melari can you review?\n. @ntalbott or @melari -- this would be interesting for Shopify to bring on. Any way you can review?\n. With caleb out for the next week and a half, it would be nice to get this merged and beta tested before then. \n. @odorcicd with @melari out -- can we get this merged so we can beta test this week?\n. @melari can you please review for our next AM release?\n. (this one too please)\n\n\nLouis\nOn Tue, Oct 22, 2013 at 5:32 PM, John Duff notifications@github.com wrote:\n\n@bizla https://github.com/bizla want to take a look as well?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/886#issuecomment-26852546\n.\n. @melari can you give this one a look? \n. Doku already merged in https://github.com/Shopify/active_merchant/commit/5d115462665c62f8668e8d5f6f8e8333c4be0f11\n. :)\n. @bloh073 will be tickled pink. :shipit: \n. Closing. PayDollar has been implemented via https://github.com/Shopify/active_merchant/pull/1038.\n. @bizla can you have a look?\n. @guibernardino Any idea if Akatus is PCI compliant? I don't see any mention of this on their website.\n. Please add PRs for each gateway individually with merchant credentials to use defined at /blob/master/test/fixtures.yml\n. @bslobodin can you please review / merge? There's a big merchant waiting for additional currencies.\n. Thanks @ksondere. \n\n@bslobodin @ntalbott can you guys give this a review when you have a chance?\n. active_merchant_offsite preserves the reference to active_merchant while denoting it as a standalone project. Open to other suggestions.\n. @bslobodin I don't see any evidence that they must be submitted together in the example guide.\n. Thanks Cody. \n@bslobodin @mhashemi86 FYI\n. I'll request the actual spec -- but here's the latest back from Ian @ Cardinal following a review of this pr last month:\n\nI have reviewed the Shopify integration and the changes are minimal.  There integration will work today, however we have added some additional fields and values, we want Shopify to support.  Then of course testing all of it again with our test cases. \nAPI Version: Cardinal is still on Version 1.7 and you are supporting all of the current fields on the API calls.  We have made some updates with additional of fields and new values returned.\ncmpi_lookup Request: Addition of several field names for Shopify to send additional data that would go into our Rules engine (example: line item details)\ncmpi_lookup Response\nEnrolled = B - this value (B) is when a rule in enabled, Cardinal will Bypass authentication (ACSUrl and Payload will be left blank)\nWe introduced a new MasterCard EciFlag = 00 (When a Rule is enabled for MasterCard, we will return Enrolled = B and an EciFlag = 00)\nAuthenticationPath = this is a field we would like Shopify to consume, but may not need to write logic on it \ncmpi_authenticate Request- No Change\ncmpi_authenticate Response- No Change\n. @hron eg/ this test\n. @ntalbott any issues? Would like to merge this today. \n. Thanks Gents. \n. @j-mutter probably true. I'll wait to test this on the original XML gateway as written before deciding whether to merge this.\n. Thanks gents!\n. @t2coulth the issue is that transactions fail if we send the CVV and the shop doesn't support it. We address this using a hard-coded list of shops within Shopify for whom we do pass along the CVV. Please send a request to @mhashemi86 to include any additional shops to this list in the meantime. \n. re-ping @j-mutter \n. We've traditionally relied on the authorization field to be a 1:1 mapping against the gateway's transaction id. Having to parse out #XXXX for associated lookups has been incredibly time consuming in reconciling which charges were affected. We'll need to make some internal changes to our order_transaction tables if we were to begin using this new authorization format, so that we maintained the expected mapping. \n. @andrewpaliga try the following (just replace _with )%B4003000123456781^PALIGA/A._________________^15121200000000000000**123*****_?_\n. cc @jduff, @dylanblanchard.\n\nAn alternative would be to make the bogus gateway available everywhere within payment_providers.yml, so that it wouldn't get pushed down below the 'Available in YourCountry' fold.\n\nDylan -- have we done any international onboarding user testing to see how they respond to the bogus gateway?\n. I'm fine with this change, but wanted to call this out, as I knew that duff had some concerns that the bogus gateway was underused. \n. :sleeping: \n. Thanks Justin!\nOn Wednesday, October 15, 2014, Jason Normore notifications@github.com\nwrote:\n\nany tests that cover these things?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1423#issuecomment-59300472\n.\n\n\nLouis\n. Do we gain anything by sending only track1 vs. track1-3 -- even if 2 & 3 are nil? Seems like more logic than we really need. \nI agree that we can avoid sending address + shipping address for swipe transactions, however.\n. :boar: \n. :flower_playing_cards: \n. cc @ryanbalsdon @davidseal \n. Nathanial,\nIt would certainly help if you threw your weight behind this with your\nindependent stripe contacts. We've asked a few times during our weekly\ncalls, but it has not yet sunk in with Stripe as a major priority for them.\nOn Tuesday, November 4, 2014, Nathaniel Talbott notifications@github.com\nwrote:\n\nI hate this; have @Shopify/active-merchant\nhttps://github.com/orgs/Shopify/teams/active-merchant talked to Stripe\nto see if they'll support passing ApplePay through directly in the purchase\ncall? It's such a simple tweak that will make this so much cleaner, faster,\nmore usable, etc.\nI'm also happy to work our Stripe contacts on the Spreedly side if it will\nhelp.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1449#issuecomment-61678052\n.\n\n\nLouis\n. @brianmc, @jivamatic, go ahead and submit a PR  including tests, using the network_merchants example as reference. \n. cc @mhashemi86 @girasquid \n. cc @mhashemi86 \n. Yep. From the PHP example, it looks like you have to call the track1 data track2 as part of their spec.\n. I think you should be able to remove L73:L74 as they're already tested in L32:L33\n. @j-mutter likes to tell me that creditcard_or_vault_id.track_data.present? should suffice here. \n. ",
    "duff": "Agreed.  This is a bogus pull request.\n. Attempted to address this in: 70a11dfa7a90711cbc490bc78ad22db60a42cc41\n. Sounds great @dougal.  Good to know that refunds can happen on settled transactions.  #617 looks excellent.\n. You've caught my laziness!\nI tried doing a unit and was having a more difficult time than I've had with some of the other gateways.  Perhaps because it's looking like more requests are being made to Balanced than some of the other gateways.  I'll give it another shot this afternoon.\n. @ntalbott I added the unit test.  I was thinking I could squash for you, but I'm not sure the best way to do that with a pull request.  Do you usually squash it when you merge to master?  Or should the originator of the pull request squash in some way?\n. Squashed!  So cool that the PR updates.\n. Hi @melari,\nI would normally ask @ntalbott if he might pull a given request in, but he's currently having a baby.  Well, not him - but his wife is!  Is there any chance you might take a look at this pull request to pull it in?  It would make the interface to #capture consistent with the other gateways.  We can work around things if you've got a lot on your plate, but if you happen to have a few minutes and are willing, I'd be quite grateful.  Thanks!\n. Wow.  @ntalbott comes through in the clutch.  Thanks!\n. No problem at all.  @ntalbott surprised me with his post-baby availability.\n. Sounds good @jduff.  I saw that @melari reverted which is great since it doesn't hold y'all up.\nSorry for the trouble on this.  I learned a lesson to be more diligent about doing a search in the Issues before implementing something like this.\nWe'll look into making it optional to allow CVV and have the default be that the CVV doesn't get passed so it shouldn't break you.  Sound good?\n. Hoping 70a11dfa7a90711cbc490bc78ad22db60a42cc41 closes the loop on this comment thread.\n. I thought about that a bit and realized there are others that are out of date too.  Mulling on whether there's an elegant way to keep the code more in sync with the readme.\n. Perhaps a rake task to generate it.\n. Looks like there's already one!\nrake gateways:print:rdoc\n. Many of the countries were out of date, some gateway urls were wrong in the README, etc.\n. Hoping you don't hate me for adding onto this pull request so much.  \nThey're all kind of related in that they update country lists, update gateway urls, and it brings the README inline with AllTheThings\u2122.\nAll done now.\n. I lied.\nNot kidding now.  Really done.\nI can split all this up into separate requests if that makes things easier for you.\n. Good catch on noticing some duplicates.  I went through the whole file more carefully.  One of those Paypal Express dupes had been there before.\nAll in all, I think this README is much more accurate than what we had before.  A few gateways weren't even in there, a bunch of website urls needed updating, a number of the country lists weren't up to date, and a few of the gateways changed their names.  Now the README better reflects the actual code.\n. Hi @odorcicd, I just thought I'd check in with you on this one to see if there's any way we might help it along.  It sounds like 3.1 will work for Shopify if you notify eWay of your IP's and your PCI compliance.\n. Sounds great @odorcicd.  Thanks!\n. Hi @odorcicd,\nWe've got some customers hoping for eWay Rapid.  I thought I'd check in to see if there's anything we might be able to help with on it.  Or if perhaps there might be another option we haven't considered.  Thanks!\n. Hi guys,\nWe've had some difficulty running a capture (so we reverted to an earlier commit of active merchant in our code for now).  In theory, we're expecting the following type of remote test to work for each gateway:\nruby\nassert auth = @gateway.authorize(amount, @credit_card, @options)\nassert_success auth\nassert auth.authorization\nassert capture = @gateway.capture(amount, auth.authorization)\nassert_success capture\nSo the result of the authorize call has an authorization that can be used for the capture.  It doesn't look like the remote test for Balanced here operates this way and I suspect that's why our captures were failing.  I also suspect that refunds and voids will fail for the same reason since their remote tests look similar in this PR.\nMight you be up for taking a peek at this @steveklabnik?\n. Coolo.  Thanks!  :smiley_cat: \n. Hi @bslobodin,\nMight this help clarify things?  https://github.com/Shopify/active_merchant/pull/958#issuecomment-30929333\n. Sounds right to me.\n. @steveklabnik For the transaction @ntalbott mentioned, it looks like the auth happened, then we deployed, and then the capture happened.  Thought I'm mention this in case it helps diagnose.\n. Hi @steveklabnik,\nAny chance you might send me an email so I can reply to you with the full transcript?  duff@spreedly.com would be great.\n. I just emailed you the full transcript.\n. Thanks @steveklabnik.  I've modified the PR to raise an ActiveMerchantError instead.  This should help the systems using Active Merchant since they're most likely rescuing this exception.  So when a customer attempts to void a capture, it'll be a failed response rather than a 500.\n@ntalbott, you think this is a reasonable approach?  Or might there be a better way?\n. I just talked with @ntalbott about this.  He had a better idea to return a failed response rather than raise the exception.  Fixing now...\n. @ntalbott I pushed the update such that we're now returning a failed response.\n. I'll do that now.  It'll be interesting to see if we start to get other transaction types like purchase return a status of pending.  I think those would have been marked as succeeded before the recent refactor.\n. Just pushed the update.\n. Is hosted_payments too pithy?\n. Sounds good to me!\n. That's true - I should have mentioned that.  Not sure if there's a better way to not break backwards compatibility while allowing it to be customizable.  At the same time, I have a suspicion that very few people were using that cattr_accessor.\n. The ccvoid fails when trying to void an authorization with a message of The transaction ID is invalid for this transaction type.\nThe ccdelete succeeds against an authorization and against a purchase.\nAs far as context goes, a customer was having difficulty running the void against an auth.  When Elavon tech support looked at the transcript, they replied with\n```\nFrom: \"Lee, Travis D.\"\nDate:06/13/2014 7:24 PM (GMT-05:00)\nSubject: API issue\nUpdate the value for ssl_transaction_type from ccvoid to ccdelete.\nAlso, To perform a ccdelete, you must submit the transaction ID received from the original transaction.\n```\nThe docs I was looking at are here: https://www.myvirtualmerchant.com/VirtualMerchant/download/developerGuide.pdf\nWe use ccauthonly for authorize.  In their docs for that, they state:\nThe ccauthonly is used to obtain a real-time authorization for a credit card transaction. This transaction \nwill guarantee that the funds are available on the card and reduce the cardholder\u2018s limit to buy for only a \npredetermined amount of time. This is usually 7-10 days based on the credit card\u2019s issuing bank, however \nit will not place the authorization in the batch for settlement. \nTo place the transaction in the open batch, it must be converted to Sale using cccomplete, or reversed \nusing ccdelete to restore the funds back to the card.\nFor ccdelete, the full text in the docs states:\nThe ccdelete is a transaction that deletes and attempts a reversal on a Sale or Auth Only Credit \ntransaction. A transaction that has been deleted from the batch cannot be recovered.\nI hear you that attempts reversal sounds odd.  But then they're deleting from the batch for a ccdelete and the ccvoid is removing from the batch.\nAll in all, I think there's enough evidence to suggest that ccdelete is a decent choice for the void operation.  Whatcha think?\n. Yup - they all pass.\n. I'll adjust the PR's out there to take advantage of it.\n. This PR is now taking into account the MultiResponse improvements.\nWorking on the other few PR's now...\n. Hi @mkashlev,do you mean live live release of the gem, of @shopify, or of @spreedly?  We're using it in Spreedly code (we typically key off of a git commit rather than a version of the gem).\nI don't see this functionality in 1.43.1.  I'm not sure when a new version gets created.\n. Hi @mkashlev,\nI'm not sure if Shopify is planning on using the verify functionality of Active Merchant.\n. This PR is now taking advantage of the improvements to MultiResponse.\n. Updated this PR to take advantage of the new and improved MultiResponse.\n. Now using the MultiResponse improvements here too.\n. Now using the latest MultiResponse here too.\n. We've seen this error today as well.  :+1: \n. Gotcha.  That's pretty cool.  And we'd still need to trigger the void in case underneath they've converted it to a $1 auth.  Nice.\n. It looks like they have an api that hits https://api2.checkout.com:\nhttp://dev.checkout.com/ref/\nIs that something we want to utilize?  It looks like it has a refund capability.  I'm not sure if the old api had that ability or not.\n. I see that Travis failed here.  It's odd - if I run just the Global Transport unit tests, they all work.  If I run the whole suite, the \nassert response.test?\nassertions fail.  If, at the end of this method:\nhttps://github.com/duff/active_merchant/blob/global_transport/test/unit/gateways/gateway_test.rb#L44\nthe gateway_mode gets reset like this:\nBase.gateway_mode = :test\nthen the whole suite works.  Perhaps the gateway_mode should be reset in GatewayTest?\n. I see now that many of the gateway unit test classes have this in their #setup methods:\nBase.gateway_mode = :test\nI'll add that to the GlobalTransport unit test setup method for now.\n. I amended the commit to now include setting the Base.gateway mode in the #setup method.  It looks like gateway_mode is getting set all over the test suite.\n. Looks like the Travis runs worked.  Except for one, which was caused by a timeout trying to install a gem.\nThis PR also fixes things such that the billing address company and the shipping address are actually now sent to Authorize.net.\n. I didn't want to just push this one since there's possible breakage.  Thinking I'll wait for a :+1: from @jduff and/or @ntalbott before merging it.\n. @ntalbott Good idea re: a deprecation warning.  I did that.\nI'm curious if y'all have discussed cutting a version of Active Merchant where all of the current deprecations are removed/cleaned up.  There are a good number of deprecations and it would be excellent to actually remove them at some point.\n. I pulled this in and made one tweak around the email and ip such that we pull them from the options hash to make it consistent with the other gateways.\n. @fw42 I think one of the main reasons is that a number of the gateways are not fond of having a set of sandbox credentials that are public.\n. @karlhungus I could be missing something, but don't both of those commits contain a link to their respective pull requests?\n. Closing this one out; I'm assuming @louiskearns, @girasquid, @andrewpaliga, and the other Shopify peeps have given it a look.  Thanks!\n. Gotcha.\nI was thinking that in either scenario, you've got a decent spot to revert from, no?\nIn scenario 1, a PR gets submitted, it has 4 commits, it gets worked on for awhile, folks comment on it, and 3 more commits get added over time.  Then a 'merge pull request' happens.  This interleaves 7 commits into the history and adds a merge commit even if the sum total of the PR was just a few lines of code changed.  And then to revert, you'd need to do a git revert -m, right?\nIn scenario 2, the same PR happens but then instead of the 'merge pull request', it's up to the maintainer to keep a cleaner commit history.  The 7 commits are squashed down into one commit, the Changelog is updated in the same commit, and the git comment references closing the PR number so they're all linked up.  It's a clean commit and to revert, you'd just do a normal git revert and you wouldn't need to the -m.\n@girasquid, thanks for considering it!  I'd love to understand more - using the @ntalbott recipe for bring in PR's is still pretty new to me.\n. I've also become fond of the convention in this project to start out commit comments with GatewayName: if the commit improves just one gateway.\n. I'm still seeing some icky \"Merge Pull Request\" commits come through from @bizla, @andrewpaliga, @jnormore, and @j-mutter in the history which makes me :cry: a little but I'm getting over it.\nPerhaps there's no way to resist the allure of the Merge Pull Request button.\n. I'm curious if PayHub itself doesn't support auth/capture or if it's something active merchant isn't yet supporting.\n. @grepruby gotcha.  We haven't yet gotten a customer request for PayHub at Spreedly, but if we do, the next request is often for auth/capture/verify. :)  Good to know we can add it when we need to.\n. @grepruby Folks are usually pretty busy this time of year.  I'd recommend using your fork until things get merged if it's something you need soon.\n. @markabe,\nI gave it a look and had 2 thoughts:\n1 - Will this break folks who have existing authorizations saved (meaning their captures would fail)?\n2 - I wonder if you could do it without the prepare_authorization method that's setting instance variables to be used later.  Could you instead pass what you need into commit so it could use those things right there?\nMy mulling on functional programming stuff may be twisting my brain.\n. :+1: \n. :+1: \n. Hi @askehansen,\nI'm thinking a unit test verifying that we're passing the right value for each of the cases would be helpful for this pull request.  Many of the gateways have unit tests using CommStub to assert such things.\nThanks!\n. Here's an example in the Stripe unit tests verifying that the right things get passed to the gateway:\nhttps://github.com/Shopify/active_merchant/blob/f8998d6747a9d99fc727731d4f1c9e9690001a3e/test/unit/gateways/stripe_test.rb#L506-L512\nDoes that help explain?\n. Looks great @askehansen!  Just merged it.  Thanks!\n. \n. :+1: :ship: :shipit: \nLooks great.  Cool that they have a $0 auth.\n. :cool: This will be very helpful.  Ship it!\n\n. That does whack a good bit of duplication, eh?  :clap: \n. Got the encoding issue to work in Ruby 2.0 locally.  Let's see if it's fixed in Travis.\n. Does CenPOS offer any avs_response and/or cvv_response information?\n. I don't see much info at all in their docs about it either. :(\n. Closed by 94b7645fe93446fde3173de1e0f5a28dc25d31d6.\n. Closed by c9f579ab8cc903122cd274006705805f0a376637.\n. Thanks for checking @girasquid!\nI'm not sure if I'm fully getting the change.  I attempted to explain the reasoning here in this commit like you mentioned:\nhttps://github.com/Shopify/active_merchant/commit/6977a6e96ebd9b0a338ed7f13503705f169831ea\nWe basically had a customer who went for a long time connecting to a live_url without realizing that the account was actually in test mode.  I think that test for using_live_gateway_in_test_mode? is important, no?  It looks like that test is no longer there.\nI don't think I fully understand the intent behind the change.  Might you help me understand more?\nI think the overall goal is that a test transaction should never be able to be run against the live_url.  And\nresponse[:test_request] == \"1\"\nis the only way I know of to check it.\n. I think that using_live_gateway_in_test_mode? is an important test for most folks.  In speaking to @ntalbott here, he suggested an option that could be passed to initialize to allow you to turn off the using_live_gateway_in_test_mode? check if you really need it turned off.  But the default should be such that running test transactions against a live gateway should fail with the appropriate error message.\nDoes that help explain?\n. Hi @jcavalieri and @cipater, I'd recommend checking out @ntalbott's comment about it:\nhttps://github.com/activemerchant/active_merchant/pull/1648#issuecomment-95944831\nIf there was a PR with a configuration to override the check, that could work.  This PR though changes the default behavior.  I'm going to close this one for now, knowing you can make another PR if you'd like with the config option.  Does that help explain?\n. Closed by 385ec491625faf4bcbe67a8b5c8e730b0ce85c3d\n. @bizla It would be excellent if they could get to a running state.  We're having an issue with a customer's customer whose Stripe account version has changed making a field (statement_description) no longer valid.  Having a green suite of remote tests for Stripe would really help with our possible version adjustments to ensure we're not breaking anything.  Thanks!\n. @bizla Would putting the credentials for your stripe account in fixtures.yml help?  Then perhaps the remote tests for apple pay could work if your test account is setup for that.  We're sharing credentials for other sandboxes so I wouldn't imagine there'd be an issue with adding a Stripe sandbox to fixtures.\n. Sounds good @bizla.  Do you think the Apple pay remote tests could be omitted too?  Then when someone wants to do the \"generate token on an iPhone6\" dance, then can do so and temporarily make them not omitted.\nOr maybe there could be a separate stripe apple pay remote test file for those interested.  Then there wouldn't be a hacky omit / not omit cycle to run apple pay remote tests.  And we'd get back to the state of having a green bar for Stripe remote tests.\nThanks for all your help sorting this out!\n. @bizla, @jnormore, @girasquid, and @ntalbott,\nI created a PR -> https://github.com/Shopify/active_merchant/pull/1676 for this in an attempt to do what we discussed here.  Does it look reasonable?\n. :+1: \n. @tjstankus I hear you re: magic numbers.  I went with your statement about choosing consistency in this case.\nIf a number such as this is referenced once, I personally prefer to just reference the number rather than having a named value.  I also know others will likely disagree. :smile: \n. @davidsantoso I made a few little inline comments.  I know that a lot of gateway implementations implement their purchase, authorize, etc by filling up a hash of params and then calling commit with that hash.  And in commit, the hash is turned into JSON, a form-encoded string, etc.  I think the approach makes sense in these 2 cases because it's a line or two of code to convert the hash to the needed format.\nWhen the payload is xml, I'm growing skeptical of the approach of filling up a hash first since it eventually has to be mapped in the build_xml_request method.  I'm thinking it's simpler for xml payloads if the purchase is creating an xml request and then passing that request to commit.  Then purchase and refund and void can have very different xml requests and things like the authorization xml element doesn't get passed to purchase but it does get passed to void.  It just seems like extra work and code to fill a hash from a card and options rather than just mapping it to the xml request.\nHere are some examples:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/litle.rb#L29-L46\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/vanco.rb#L115-L143\n. I'm digging it @davidsantoso.  Looks beautiful to me.\n. @bizla Cool.  I know you mentioned that you were planning on going after it so I hope you didn't mind me jumping on it.  As some of our customer's customers are being turned off at Balanced and moving to Stripe very soon, our motivation to look to Stripe API versions especially around statement_description has increased.\n. Closed by 32ea275c4c603cfdd28c70b45d7e84fa5a9e3029\n. @Shopify/active-merchant I'd love any feedback you might have about this PR.  I suspect you may be explicitly specifying the Stripe API version that you're using, but I'm not sure of that.\n. The cool part is that I have 2 personal Stripe accounts.  One is a brand new account at the latest API version while the other one is really old using a very old API version.  With this commit, the remote tests now work for both accounts.  The thing I don't know is whether there are some underlying options being passed to Stripe for which we don't have remote tests.\n. Closed by e1e4c6f376c51b10a2d49097e5a82b2eb4431365\n. @davidsantoso I'm thinking we'd still want the email and ip to get sent, no?\n. Good timing @j-mutter !\nIt is interesting that the generator includes billing_address by default in the @options in the setup method of the remote tests.  I do wonder if the default set of options ought to be more minimalist and then have separate remote tests where options like billing_address are included.\n. @davidsantoso :+1: on guards where needed there.\n. @ntalbott It seems like we've been leaning away from using Builder::XmlMarkup and more toward using Nokogiri.  How strongly do you feel about it for new gateways such as this?\n. Sounds good.  Back to you @rwdaigle!\n. I made a few comments (mostly nits).  All it all I'm thinking it's mighty purty.  :+1: \n. @rwdaigle :+1: \n. @tjstankus I'm wondering whether an approach like:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/cenpos.rb#L229\nor\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/litle.rb#L252\nor\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/bridge_pay.rb#L121\nmight be simpler than explicitly listing the elements.\n. :+1: for ugly prefixes!\n. :+1: on including it in the authorization.\n. @anellis I gave this a quick look over and made a few inline comments.  I'm thinking we're pretty close on this one.\n. I've emailed our contacts at Sage about it.  We'll add refund if they let us know of something we're missing.\n. I heard back from Sage re: a standard refund.  I'll be implementing that forthwith. \n.  Added refund: d854072b17b9cdc8ff296b5445d6931663fd190d\n. :+1: \n. Mulling on this a bit.  It does seem odd that we got a nil for response[:authorization_result].  Some gateways get their responses differently when the transaction succeeded verses when it failed:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb#L426\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/pay_conex.rb#L230\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/dibs.rb#L187\nI think that this PR is an improvement over what's out there.  That being said, the original logic that's been out there around success_from being based on successful_result_message? seems a big squirrelly to me.  When I look at the docs for iATS, I see this:\n\nThose docs help me understand why things are squirrelly.  Whew!\nThe thing I'm concerned about is that according to our stack trace, response[:status] == \"Success\" evaluated to true but with this logic around response[:authorization_result] nil checking, the transaction would be marked as failed.  I'm wondering what iATS support might say.  If we get response[:status] == \"Success\" and response[:authorization_result] is nil, is that a successful transaction?  Their docs list 2 possible results for  response[:authorization_result] -> \"OK\" and \"Error\".  But in this case, we got neither. :sweat: \n. @girasquid, we're not using the STANDARD_ERROR_CODE_MAPPING stuff at Spreedly yet.  I haven't yet formed any strong opinions wrt that area. :) \n. @ntalbott (and anyone else who'd like to take a look),\nI'd love a second set of :eyes: on this one.  It's somewhat meaty.  :meat_on_bone:\nI don't think this changes any existing behavior; it just adds functionality.  You'll notice that testing wise, the changes there are almost entirely additive.\n. In theory, this could mean that we could someday move \nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net_cim.rb\nto its own gem.  (not sure how many folks are actually using it).\n. Implemented changes!  Thanks for the :eyes: !\n. @girasquid LGTM\n. @anellis I've been mulling on whether it makes sense to simplify a bit.  This authorize.net feature is one I haven't seen on other gateways.  I'm wondering if, rather than give our customers the full ability to mess around with the setting (and all of the ramifications of that setting around splitTenderId's and the adjusted handling of the authorization), we instead only give them ability to turn off the feature explicitly.  \nSo perhaps there could be a options[:disable_partial_auth] thing that gets passed to ActiveMerchant which would simply set <allowPartialAuth>false</allowPartialAuth>\nI'm also not sure of all of the ramifications of this part of the docs:\n\nIf successfully authorized, all transactions in the group are held until the final transaction of the group is successfully authorized.\n\nAll in all, since our customer was bitten by the fact that the underlying auth.net account had the feature enabled and because this customer wants the ability to explicitly disable it, perhaps giving active merchant that ability may suffice for now.  Whatcha think?\n. @anellis :+1: \nI just tweaked it to use true rather than \"true\" as the indicator.\n. @anellis In theory, we should also be able to run an auth/purchase using a card stored in the S5 vault.  Example: \nhttps://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_pay_conex_test.rb#L148\n. :+1: :+1: \n. @ntalbott This one is a bit funky so I'd dig a second set of :eyeglasses: on it.  I was going to base it on whether the card had track_data present, but we don't get a card for capture.  I'd also love a :+1: or a :-1: from @activemerchant/developers in case Shopify is offended by having the extra option to pass for POS transactions.\nThe alternative is to pass allow partial auth by default and allow users of active merchant to turn that off with a disable_partial_auth option.  Now that I'm writing this comment, I'm leaning that way.\n. Perhaps it should be implemented similar to this: https://github.com/activemerchant/active_merchant/commit/bccb5002229d142f2da6fe368d3729d8d6c2cb4a\n. @davidsantoso We usually have a unit test or two as well.\n. The unit test's value can seem dubious, but when other folks don't have remote credentials, perhaps they provide value.\n. @davidsantoso :+1: \n. @activemerchant/developers I'd :heart: a 2nd set of :eyes: on this one.  The easiest place to spot the adjustment is in the remote tests.  Thanks!\n. @ntalbott expressed a concern about killing the existing API for stripe using the options rather than deprecating it.  I updated this PR to address those concerns such that now things ought to be deprecated appropriately.\nI can't wait for us to remove all of the deprecations!\n. @aprofeit Thanks!  I got a :+1: from @ntalbott in another channel and thought it would ok to merge.\n. HA!  I have no expectation time wise in terms of getting feedback. :)  We're all volunteers here in active merchant land.\n. @anellis - Looks great. :+1: \n@rwdaigle Thanks for the help!\n. @bizla Thanks for the fix!\n. For some reason a bunch of remote tests seem to be failing for me.  Not sure if I'm having personal problems or not.  I'm seeing this:\n```\n22 tests, 37 assertions, 12 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n45.4545% passed\n\n```\n. Weird!  They're all passing for me now.  I must have been having personal issues.\n. @tjstankus :+1: \nI added just a few little tweaks here: 824d1a34bea6939f65011423cb516c646a43fc48\n. @anellis Looks like a unit test is failing\n. @anellis Looks good.  Only thing I added was a unit test to ensure the param is getting passed.\n. I spotted your question about symbolizing the keys.  I'm not seeing many places where we're doing it.  I'm inclined to not do it and just leave 'em as strings.  Less code :+1: \n. I've also contacted Forte about our needing the sleep calls in remote tests.  That's pretty funky! :smile: \n. @davidsantoso Looks like some failing Travis tests\n. Do they allow an eCheck authorization?  If so, a remote test for that would be cool.  Also a remote test for a failed eCheck purchase would be :egg:cellent.  Also thinking some eCheck unit tests would be helpful.\n. I'm retracting my question about echeck authorizations.  I saw them in the Authorize.net implementation, but the more I think about it, the more I'm wondering about what their actual value is.\n. @anellis This is looking great.  Only thing I was thinking about was having a test for the 400 handling.  My initial look here:\nhttps://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_tns_test.rb#L78\nmakes me think that the handling of that 401 is different than how we're handling other gateways.  It doesn't look like we typically raise ActiveMerchant::ResponseError for these types of things.   Looks like most test_invalid_login remote tests do things differently than we're doing for TNS.\nThe exploration made me think that perhaps the country stuff could be one commit and the 400 handling could be another commit / pr.  So perhaps this one could be modified to be just the country stuff and then another one for the 4xx?\n. @anellis :+1: \nI just added one little commit 517eaa4fade41e0f90f93b8f273a48d4b9260e63\n. Looks great to me!\n. When I run the remote tests, it looks like ARB is deprecated.  Thinking we may not need this since it looks like it's gonna be removed.\n. @rwdaigle I see a few warnings when running rake.\n. Closed by b261824f450f3cf845bd90715424bf83b182b1f2\n. @rwdaigle I merged it and tweaked the unit test just a bit to keep around the test_successful_purchase_without_street_address since it was added to address the bug on this line:\nhttps://github.com/activemerchant/active_merchant/pull/1834/files#diff-19fe6e8fd626bdd5ca775c40f7812b27L149\nthat blew up when there was some address but a nil street.\n. @anellis :cool: \nOne more thang. :)  When I run the remote test test_successful_purchase with DEBUG_ACTIVE_MERCHANT=true, I see the line you've got in the test for scrubbing containing the card number and cvv.  But I also see one other line containing the same info but in a different format.  In particular, I see:\nD, [2015-08-17T11:18:34.178127 #20295] DEBUG -- : {\"amount\":\"100\",\"card\":{\"number\":\"1000000000000008\",\"cvd\":\"123\",\"expiration\":\"1609\",\"issued_to\":\"Longbob Longsen\"},\"auto_capture\":false}\nWe should have that extra line in the test too.  (And update the scrub call to handle both.)\n. My understanding is that anything in that shows up with the DEBUG_ACTIVE_MERCHANT flag would show in a transcript.\n. Interesting!  I'm not sure.  I haven't used the dump_transcript_and_fail method.  I've always gone old school with DEBUG_ACTIVE_MERCHANT=true.  @ntalbott might know the difference off the top of his head.  I haven't compared the two.\n. @davidsantoso This is looking great.  I hadn't thought of skipping CVV tags if the CVV is blank.  That's a good simplification I think and it does accomplish the goal of helping us know by looking at a transcript if a CVV was actually sent.\nOnly little adjustment I made was in fd93daba9b021ded79ad0cec3a507027a9b09a49 to make it work for both nil and the empty string.  And I added a little test to verify that we are / aren't sending the CVV info at the right time for those 2 gateways since that'll be our indicator.\n:+1: \n. @anellis The unstore remote test seems to be failing for me.  Thought I'd check with you to see if it was working for you.\n. Hi @wsmoak, does that mean that every purchase call would store another card in the Quickpay vault?  Is there any way to make it such that purchase just runs a purchase (using either a stored reference or a passed in card) and make store give the stored reference that isn't just one-time?  Is that what the /subscriptions endpoint does?  \nI think @anellis was in communication with Quickpay support who was suggesting the token call for store.  Does the /subscriptions endpoint hook up auto charging based on a schedule or is it like the token call, only more than one-use?\nThanks for looking into this!  The fact that the 2nd attempt to use the token failed indicates that the token call is not the thing we need. \ud83d\ude2d \n. Coolo!  Sounds like it has potential.\n. @mrezentes - this is looking good.  I made a few comments; I'm thinking we're close!\n. @aprofeit, @girasquid, @bslobodin,\nI know Shopify is using Stripe and is concerned about currencies ( https://github.com/activemerchant/active_merchant/issues/1153 ).\nI'd sure love another set of :eyes: on this PR since I suspect you may be relying on the ability of the Stripe adapter to override the zero decimal currency list.\nThanks!\n. I decided to merge this one in to fix a customer attempting to use Stripe with the TWD currency.  We can certainly discuss more if needed.  Or modify as needed.\n. @girasquid I just ran the remote tests for your branch - looking good!\n\nI'd recommend adding these creds to the fixtures.yml:\npaymill:\n  private_key: a9580be4a7b9d0151a3da88c6c935ce0\n  public_key: 57313835619696ac361dc591bc973626\n. :+1: \n. This is looking great @davidsantoso.  @ntalbott has a pretty good idea re: signature_algorithm.  \nI'd also dig seeing remote tests running when using sha_256.\n. Perhaps we could leave our existing RemoteRedsysTest for the sha1.  And then have another remote test file for sha_256.  Just brainstorming. :smile: \n. I'm not certain of the best way to handle it, but since the requests are so different depending on the signature_algorithm, it seems logical to me to have a set of tests for each.  Eventually when Redsys really removes support for sha_1, we'll be able to clean things up and remove the old tests.\n. @davidsantoso I made a few little comments.  I think this is close!\nI'm psyched that you and Google translate were able to work together to push this one through.\n. :sweet_potato: !\n. @davidsantoso :+1: :+1: \n. @RamilGilmanov Yup, he's serious! :)  You can now use store functionality in the AuthorizeNetGateway:\nhttps://github.com/activemerchant/active_merchant/commit/8c00b3841e81c3e6a0a5a36c7d640e3eed5004ee\n. @anellis This is looking good.  I noticed one little thing.  I think this line:\nhttps://github.com/anellis/active_merchant/blob/clearhaus_text_on_statement/lib/active_merchant/billing/gateways/clearhaus.rb#L150\nshould be removed since description shouldn't be mapped to that field.  Looks like that's been there since the gateway was added.\n. @anellis Looks great!  Think it's worth having any unit tests for it?\n. Hi @hoenth, I'm thinking a test demonstrating the issue would be pretty helpful.\n. @davidsantoso All merged!  Only thing I removed was the line or 2 around error_code_from.  Looking at the other gatways, that method looks all wrapped into supporting a STANDARD_ERROR_CODE_MAPPING for the gateway.\n. @girasquid Looks great to me!\n. @anellis I'm thinking this could be useful:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L274\n. Not sure why, but that Paypal doc link doesn't seem to work for me.\nI noticed that https://github.com/activemerchant/active_merchant/commit/5bb9d2c16c18afde89da20a07c3f25c7002312fe might have some useful background.  I'm not sure how much of that is still relevant since the Paypal docs may have changed since that commit.\n. Nice.  :shipit: !\n. @Krystosterone You're right.  I shoulda been more careful reading through each of the note sections in the docs.\n. @activemerchant/developers I'd love to know if anyone has more recent local commits.\n. @girasquid Yes. :)\n. Based on @ryanbalsdon's comments, I suspect he has a more recent set of commits.\n. @ThereExistsX no worries!\n@girasquid Thanks!\n. Thanks @marquisong !\n. This is like a slack channel! \ud83d\udc4b @aellispierce . Hoping @davidsantoso doesn't start seeing \"issues\" with his Github account.. Hi @darkaz,\nThanks for the PR!  I brought in the currency part but thought that the customer part could wait until we have a customer who needs it.  I also wonder if the customer logic could be simplified to be a bit more consistent with how other gateways are handling the email and phone_number fields.\n. I also noticed that our remote tests are passing lots of options:\nhttps://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_visanet_peru_test.rb#L13-L23\nIt may be useful to have a remote test that uses no options like this:\nhttps://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_creditcall_test.rb#L22\nThat purchase_number field looks :fish:y.\nFor things like that, we often give it a random string in the gateway:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/nab_transact.rb#L165\nAnd sometimes we allow them to override it:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/fat_zebra.rb#L131\nLooks like we're defaulting it:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/visanet_peru.rb#L91\nI'm curious what purchase_number means.  Is that an order_id?  If so, we could use that as the override key.\n. I just noticed that it looks like for a whole bunch of gateways, we're stripping out bad characters from passed in order_id's.  If you grep for \"order_id.*gsub\" you'll see a bunch.\n. @curiousepic Looks good.  After the few little tweaks I mentioned, we should be good to go.\nIf you force push your branch with the adjustments, the PR should reflect it.\n. @curiousepic I'm thinking a remote test for test_purchase_sans_options would be useful to see if it's failing before you make the fix.\n. Closed by 7f9a5f4\n. I like the explicitness of handling the exponents in a way like you've done, but I'm mulling on whether we can tie into \nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L254\nI see that Stripe has its own list of currencies without fractions:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb#L24\nPerhaps Worldpay could have its own list (based on the docs you're using -> http://support.worldpay.com/support/kb/ggse/submittingtransactionsdirect/dxmla002.html)\nIf we go down that path, then we may be able to do something like\n'exponent' => non_fractional_currency?(currency) ? 0 : 2\n. This is looking good!  I'd recommend running rake for the active merchant project to run all the unit tests.  This shows warnings that don't show when running individual tests.  Not sure why.\nYou'll see that there's 2 warnings this PR causes.  Once you push the fixes for those, we ought to be good to go.\n. Warnings in the terminal:\n[ ~/code/active_merchant ] master !\n\u2726  rake\n/Users/duff/.rbenv/versions/2.2.0/bin/ruby -I\"lib:test\" -rubygems -w  \"/Users/duff/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/rake-10.4.2/lib/rake/rake_test_loader.rb\" \"test/unit/**/*_test.rb\"\n/Users/duff/code/active_merchant/test/unit/gateways/card_stream_test.rb:250: warning: method redefined; discarding old successful_void_response\n/Users/duff/code/active_merchant/test/unit/gateways/card_stream_test.rb:238: warning: previous definition of successful_void_response was here\nLoaded suite /Users/duff/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/rake-10.4.2/lib/rake/rake_test_loader\nStarted\n.....................................................................................................................................................................................\n. I see this description in the Merchant Warrior docs for the transactionProduct field:\n\nThat seems to correspond to the description field, no?\nThere are some \"standard\" options many gateways use including description and invoice:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L28-L33\nAt Spreedly, we use the description option, but we don't currently use the invoice option.  @andrewpaliga, does Shopify use the invoice field and not the description field?\n. I see this in the MerchantWarrior docs:\n\nPerhaps the order_id attribute of active merchant could be mapped to transactionReferenceID  in the Merchant Warrior adapter.\n. Looks like the tests failed too, btw.\nThanks for the help on this @merchantwarrior!\n. I'm gonna leave this one up to the Shopify folks since it's sounding like it's somewhat specific to the integration there.  With regard to the failing test, make sure you're truncating the value with the truncate method.\n. @merchantwarrior You'll want to truncate the order_id.  And squash it down to one commit.\n. Only thing I noticed was that the test was removed.  I think that test provides some value.\nI'm leaving the merging of this one to Shopify since it's specific to their integration.\n. @shasum I'm thinking it would be great to split up these into 2 PR's - one for the error messages and one for the currency fix.  The error messages part is looking good.  \nI'm mulling some on the currency part.  Does their docs say anything about it?  \nIt sounds like we might want to do something that we do for a number of gateways specifying a different money_format.  Example:\nhttps://github.com/duff/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L13\nThen the amount method uses that:\nhttps://github.com/duff/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L234\n. Excellent.  Thanks @shasum !\n. @shasum Looking good.  2 little things.  We're trying to lessen our dependence on Active Support by using the blank? method less.  Eventually we'd like to eliminate the dependency altogether.  Instead of blank?, we've been using empty?.  Examples:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L6\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L457\nAlso, it would be great if you could squash it down to one commit.\n. @shasum I'd love to look at this PR with all of the commented out tests removed.  It'll simplify things a bunch.  If support for those operations are ever added to the gateway sandbox, we can add tests then.  For now, a small comment in the remote test file explaining that only some operations are supported in the sandbox should suffice.\n. I haven't forgotten about this one!\n. It would be great if we could also support verify_credentials in new gateways.  Examples:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb#L240\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L164\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/blue_snap.rb#L117\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree_blue.rb#L178\n. @shasum Getting closer!  \ud83d\udc4d \nMade a few comments / questions of things I noticed.\n. So if a customer specifies no billing_address and no shipping address, then it'll work, right?\nThe Brazil shipping address thing is an odd one!  Does it happen if the country is specified for the billing address and Brazil is specified?  I don't think I've ever heard of a shipping_address being required.  What if nothing is being shipped?\nI'm wondering if we can bag on using the billing_address as a default shipping address.  Then if a customer gets an error message about shipping address being required in some circumstances, then they might be able to adjust their gateway settings in their gateway UI to turn off such a requirement.  Or they can start passing shipping address in those circumstances.  I'm a bit cautious about an implicit default shipping address.  Whatcha think?\n. You're right about the implicit defaults for billing address!  \nI wonder if there's a way to turn off the ANTIFRAUD_REJECTED error for a Brazilian account_id in their gateway UI.\nPerhaps an option is to have a default shipping_address like you mentioned in this.  So it would use the specified shipping_address from the customer, or it would use the hard coded default.  But it would be separate from the billing_address.\nHoping I'm not being too nitzy.\n. @shasum Sounds great!\n. Nice!  I looked through and made a few comments, asked a few questions for background, etc.\nAll in all, it's looking pretty great; I'm just pushing a little bit to see if there's anything we can simplify.\n. @shasum I made a comment or two and then merged it since those comments were nice to haves (and those could be new PR's if you have ideas as to how to address them).\n. When I run the test/remote/gateways/remote_quickpay_v10_test.rb tests, all but one of them work.\nWhen I run test/remote/gateways/remote_quickpay_test.rb tests, they all seem to break with:\nError: test_unsuccessful_purchase_with_missing_cvv2(RemoteQuickpayTest): ArgumentError: Missing required parameter: api_key\n/Users/duff/code/active_merchant/lib/active_merchant/billing/gateway.rb:303:in `block in requires!'\n/Users/duff/code/active_merchant/lib/active_merchant/billing/gateway.rb:296:in `each'\n/Users/duff/code/active_merchant/lib/active_merchant/billing/gateway.rb:296:in `requires!'\nThe Quickpay stuff can be confusing with all of the versions.  Is there something special I need to do to run them?  Were the tests busticated with the old creds?\n. \ud83d\udc4d \nLong term, I'd really like to rename :error_code:\nhttps://github.com/activemerchant/active_merchant/blob/16d8557dea8957263d72793dbb63394f3560b9e7/lib/active_merchant/billing/gateways/stripe.rb#L504\nto :standard_error_code or something like it.  And we'd still have an :error_code.  \nThe goal would be to be able to discern from a Response what the actual error code was from the gateway and to also be able to get the standard_error_code which is Active Merchant's generic mapping.\n. > @duff Maybe we can add this to our AM2.0 wishlist in the repo's issues?\n@bizla That's a good idea.  I wonder if there'd be a way to do it sooner than that such that it doesn't break anyone.  Perhaps error_code could remain as it is and we could have another field on the Response that is gateway_error_code (not sure of the best name for it).\n. @talyssonoc Thanks for the PR!\nI'm sorry I broke Paypal Express. \ud83d\ude2d Looking back over the commit, I'm unable to discern why I moved that logic from the paypal_common to the child class.  I regret not adding more detail in that commit message.\n. @alexandresaiz We track the supported countries in the code:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/monei.rb#L17\nAnd then generate that part of the readme with a rake task.  Also important to note that supported_countries means countries where the gateway onboards merchants.\n. @shasum Looks good!  Just one little question/comment.\n. @curiousepic Looks like a few unit tests need a tweak.\n. Looks like they don't make it super cinchy to run recurring purchases against a stored card.  Tokens, cards, references, auths, captures.  Whew!  Pretty great that you've got a remote test demonstrating the issue.\n\ud83d\udc4d for a PR\n. Looking good!\n. We've had trouble connecting without the hard coded values.  I don't think the version of Ruby we're using is very old.  Any idea what version of Ruby one needs to be at?\nWould moving the hardcoded ones to TLSv1_2 be a possibility?\n. If I remember correctly, it seemed to be attempting SSLv3 even though those gateways don't support it.\n. I'm definitely not an expert on this stuff (evidenced by my less than specific answers!)\nWe're using Ruby 2.1.7 and I don't know that the negotiation was working as anticipated.  Once we forced it from SSLv3, we were able to connect.\nI'm unsure if I'm alone in this, but an across the board change scares me a bit since each gateway is so different and deploying a change where we have difficulty connecting to many gateway types would be sub-optimal.  That being said, my fear is likely caused by a lack of knowledge.\n. Sounds good @mutemule.  I think it's worth a shot.  If we see any issues we'll report back.  :shipit: \n. Thanks for the PR!  \nThe metadata feature looks pretty useful, as does the shipping address.\nI'm thinking it would be great if we could simplify the customer handling some by lessening the nesting.  So we could support things like customer_ external_id on the options hash.  If the names and the phone number field get handled by my comments above, then I think customer_external_id is the only remaining customer field.\nI'm not sure I understand the motivation behind being able to change the merchant_account_id on a per transaction basis rather than relying on the parameters passed into the initialize.  Can you help us understand the goal more?  I think it's somewhat of a convention in active merchant for the instance of the gateway to represent the merchant account.  If folks need to refer to another merchant_account, they typically create another instance.\n. \ud83d\udc4d \ud83d\udc4d \n. @davidsantoso Looks great!  Only question is what will happen if they specify an actual currency_code but it's not in the hash.  Perhaps it should default to 100 in that case?\n. My feeling is that Active Merchant is for gateway API's that allow you to pass them a PAN.  It's not for transparent redirects, iframe things, offsite gateways, etc.  I think a separate gem that depends on active merchant could add support for Square if folks want that.  There's value in keeping Active Merchant as focused as we can.\n. Perhaps one litmus test could be, does the gateway support the simple usage example?\n. \ud83d\udc4d \ud83d\udc4d . @davidsantoso Looks good to me.  Only little question I have is if we need the cattr_accessor stuff or if the pem and pem_password could be specified like the other options passed to initialize.. Gotcha. Looks like Linkpoint was done awhile back! Started a decade ago! That's like 4 billion in internet years. I lean toward adding only the thing we need now, knowing that if someone wants more flexibility we could add it later with a PR.. I'm not sure if this will be helpful, but I thought I'd share it just in case it may apply.\nHere are 2 examples of how gateways are capturing a few things in the authorization:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/cyber_source.rb#L599\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/hdfc.rb#L189\nand then later parsing them apart when they're needed:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/cyber_source.rb#L254-L255\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/hdfc.rb#L192-L195\n. I would have expected to see successful_authorize_response here since under the covers, it's doing an authorize rather than a purchase.  Perhaps something along the lines of:\nhttps://github.com/Shopify/active_merchant/blob/master/test/unit/gateways/bridge_pay_test.rb#L105-L127\nIn Bridgepay's case, it's actually doing a void so in Moneris US, perhaps it could stub out successful_authorize followed by a successful capture of $0, since that seems to be the bizarro way to void an auth for Moneris US.\n. Even though there'd be duplication, I'd still go for having a successful_authorization_response if for nothing else than to indicate intent.  When I look at the test_successful_verify method, my first thought is that there must something amiss since it's stubbing out the purchase call twice rather than stubbing out the authorize and the capture for $0.  \nI'm also in the camp that there's value in having a unit test for test_successful_verify_with_failed_void to ensure that ignore_result is hooked up appropriately.\nI'll mess with it here for a few minutes and see what I come up with.\n. Small little nit - might just checking that the data doesn't include cardCode be sufficient?  Or is that included elsewhere in data?\n. I see now that that's how the other tests are working too with parse.  Perhaps consistency is a good thing here.  Disregard my previous nit. :)\n. I'd recommend using \nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/empty.rb\nsince we're trying to eliminate the dependency on ActiveSupport.  Like this:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L6\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L307\n. I'm not sure how others feel about this, but I've been deleting this test method after it's served its purpose and generated a transcript I can use.  I'd whack it.\n. I'm thinking you can put the conditional of if options[:memo] in the add_memo method to simplify.  Then you can remove the other few times the conditional is here.\n. I'm thinking you probably don't need to to_s these.\n. Also curious if the gateway blows up if you give it an empty state.\n. Thinking you want:\n@gateway.expects(:ssl_post).times(2).returns(successful_authorize_response).then.returns(successful_void_response)\n. Thinking you want this to be assert_success.\n. I'm thinking \n@gateway.expects(:ssl_post).times(2).returns(successful_authorize_response).then.returns(failed_void_response)\n. :cool:  Then I wouldn't fill it in with anything.  Same goes for phone number if that works.\n. Yup.  Since if the auth works and the void fails, the verify should be successful.\n. :cool:\nYou narrowed in on the exact option that triggered this pull request.  :+1: \nFor old Stripe API versions, statement_description worked great.  For newer versions, it bombs with Received unknown parameter: statement_description.\nSo with this PR, we explicitly specify the API version which means we don't really care what the underlying Stripe account is specifying version wise.  We're saying what version we're wanting.\n. I'm thinking that it's the responsibility of active merchant to make sure things are in sync.  So the default version specified here:\nhttps://github.com/Shopify/active_merchant/pull/1678/files#diff-8299be227de5ba32c34c30c42a828c9cR397\nshould be in sync with any options that are passed through (like statement_descriptor, application_fee, external_id, etc).\nIf, in the future, Stripe adds a new API version wherein application_fee is renamed to super_application_fee, this PR would still work since we wouldn't be using that latest version, we'd still be using 2015-04-07.  At some point someone could update Active Merchant to the latest, but then they'd need to use super_application_fee.\nI think remote tests for Stripe are really important here.  As more options are passed, it'll be more important that we have remote tests for them.\nI'd also note that overriding the version when you're using an ActiveMerchant::StripeGateway is risky since you could specify a version where the options we're passing don't match up.\n. I'm thinking this line ought to be removed.  The #error_code_from could be removed as well.  My understanding is that error_code is used when you've got a real mapping to STANDARD_ERROR_CODE which we won't have for this gateway for now.\n. And then these could just look in the params of the response.\n. I must say I'm a bit curious about this one!\n. I'm still thinking it's worth it to have a test_successful_verify_with_failed_void unit test to ensure we succeed even if the void fails.  Whatcha think?\n. Any good way to refactor this such that the comment ain't necessary?\n. I think we're bagging the options[:address] for newly implemented gateways since clients of active merchant ought to be using options[:billing_address].\n. I still prefer symbols for the keys of such maps, but I know not all devs agree with me.  Down with the hashrocket!\n. I think we can kill this method and just refer to live_url.\n. Since verify is using authorize and void under the covers, I'm thinking you'll want to use those rather than successful_purchase_response.  Similar to this:\nhttps://github.com/Shopify/active_merchant/blob/master/test/unit/gateways/merchant_partners_test.rb#L201-L215\n. Thinking you want this to be a heredoc.\n. This looks a bit :fish:y.  Do they have a non-sandox url?\n. I'm getting a warning running remote tests:\ngateways/checkout_v2.rb:191: warning: duplicated key at line 197 ignored: \"20014\"\n. I don't think we need the options[:address] part for new gateways.\n. I don't see where this method gets called.  Perhaps it could be :hocho:.\n. Perhaps a bit of refactoring here could make it more intention revealing.  (I wouldn't have expected response[\"cards\"] to indicate success).\n. I'm not seeing where this method gets called.  Could be another :hocho: candidate.\n. I'm thinking it would be useful to have a test_successful_purchase_with_minimal_options to make sure we don't need order_id, email, or description to run run a purchase.\n. It would cool to have a unit test checking the behavior of us getting back invalid json from the gateway.\n. Shouldn't break 'em since for the existing behavior we're only accessing the first two.  And if the last element is empty, we use the current behavior.\n. Agreed.  Will do.\n. Was thinking I don't need to, since it's only referenced once in this method.\n. Hmmm... not sure why it would be better to be before.\nTalking to @ntalbott here, I'm gonna make a helper method for this split to be a bit more explicit.\n. They're quite different!  Same goes for refund, void, etc.\n@masaruhoshi I'll look at removing some parens.  They can be a bit noisy.\n. Agreed.  Will do.\n. Yup.  Most folks probably don't care about merchant_customer_id.\n. Will use a helper method for this.\n. I'll look into this too.\n. Good catch.  I think this one has been here for awhile but I'll look at tightening it up.\n. Looked at this more and I'm thinking the existing may be simpler since in this gateway's case, there's one path that cares if it's CIM, and another path that cares about the others which aren't just cards (there's eChecks, credit cards, apple pay stuff).\n. One other possibility:\nassert_equal true, @gateway.supports_network_tokenization?\n. I agree.  Not sure what I was thinking.  \nI had thougts about people passing in \"false\", but they shouldn't do that.  All in all, not a very vulcan moment.  Truthiness is better and simpler.  Will fix.\n. Not sure if this assertion is needed?\n. @tjstankus Might it be possible to avoid using the instance vars?\n. Looks like transaction_id is required?  If so, perhaps the authorization's response.authorization should be a multi-part string.\n. I would think you'd want 200..499 to get things like their funky 401 This user does not have permission to access one or more of the requested Ids/Tokens.\n. And it'll also get this test, which I think ought to be added to the remote tests:\nruby\n  def test_invalid_login\n    gateway = ForteGateway.new(api_key: \"InvalidKey\", secret: \"InvalidSecret\", location_id: \"11\", account_id: \"323\")\n    assert response = gateway.purchase(@amount, @credit_card, @options)\n    assert_failure response\n    assert_equal \"UserName and Password combination not found.\", response.message\n  end\n. I'd recommend searching for references to authorization_from.  You'll see many gateways where we're joining and splitting.  Not sure what the overall consensus is.  Example:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L731\n. In looking at the test_invalid_login remote test... if that gets modified to no longer raise the exception, then I think this line won't be needed.\n. I think using %q is a good habit for transcript scrubbing tests, even if it doesn't matter for transcripts like NMI's.\nA normal heredoc has troubles for some transcripts (like https://github.com/activemerchant/active_merchant/commit/0fd556480f1e3fdd547a7b0779834863e9f60504 and https://github.com/activemerchant/active_merchant/commit/47348e7bc003477dd24d491d1ef8aa174e504f85 ) \n. @anellis Looks like this test will only be using the final string in the method.  Using %q like this: https://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/nmi_test.rb#L421 would be :egg: cellent\n. I don't think you want to use : use_first_response here.  For verify that makes sense since we don't care about the void.\n. Can we take advantage of https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/credit_card_formatting.rb#L13 here?\n. Could be :cool: to have a test to run a purchase without a billing_address and description.  Perhaps a test_successful_purchase_sans_options.\n. Would things work without the unless clause?  So we always pass the verification_value?\n. I'm wondering if the recurring flag is required.  For some gateways, I think we've passed the recurring flag if it's been specified and done nothing if it isn't specified.\n. I'm thinking this could be simplified to:\nparams[:apiKey] = @options[:api_key] || \"af1fd841af792f4c50131414ff76e004\"\nAnd then the creation of the @am_api_key on line 18 won't be needed.\n. Looks like there are some responses that don't have a session_id, eh?  This makes me :sob:. \n. @mrezentes mentioned to me about the order of these lines not seeming to be the same as the order of the implementation, meaning that it looks like the code creates a token first.\nI'm also wondering about how expects works and whether we need something like this:\nhttps://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/redsys_test.rb#L168\n. I'm thinking this ought to be named more in line with the file.\n. I'm thinking this ought to be named more in line with the file too.\n. I was thinking we'd see a signature_algorithm, no?\n. I'm thinking we don't need to cache it.  And maybe call it sha256_authentication?\n. @rwdaigle I'm curious about INTERNET being the default.  Do you think we need a default for this field?  I'm afraid this might break folks who don't want the field specified.\n. Coolo.  I just pushed the adjustment in 74940a0929a9d188d444c2567f0f13e5a469a6e3\n. @rwdaigle Hmmm...  All the tests seem to be working on master for me.\n. Ahhh..  Good catch @shasum!  10 out of the 11 remote tests for this gateway are failing for me because I don't have credentials. Sorry!\nThanks for the fix!\nAny chance we can add test credentials to our fixtures file here?  https://github.com/activemerchant/active_merchant/blob/master/test/fixtures.yml#L1015\n. I should have said all of the unit tests were working for me on master in my initial reply. :)\n. :+1: All remote tests working now.  Thanks!\n. We're trying to lessen our dependence on ActiveSupport so we're trying to lessen the use of blank?.  Example of the approach we're using:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L463\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L6\n. I'd recommend removing the comments.\n. The goal of this test was to verify that we're actually truncating a really long value.\n. I'm not sure IDR should apply to all gateways.  I wonder if WorldpayGateway should have its own list of CURRENCIES_WITHOUT_FRACTIONS like Stripe does.\n. Yeah I'm on the fence about it.  I'm a little cautious about updating the Gateway list since lots of gateways are calling this:\nhttps://github.com/duff/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L241\nwhich is using that list.\nAnd Wikipedia's description of the sen is really confusing!  https://en.wikipedia.org/wiki/Indonesian_rupiah\nI'm thinking we know from Worldpay's docs how they handle the IDR so it may be safer to only mess with Worldpay.\n. I'm thinking we can remove these comments.\n. I'm thinking we should go with authorize here even if some countries don't support it.  We wouldn't want a verify to actually charge someone's card since  the void could fail.  If a country doesn't support authorize, then it doesn't support verify.\n. I also wonder if $100 is the lowest in all countries.  That's a pretty high minimum!\n. I'm mulling on whether we need tests for each country.  Is there any coding difference in the gateway for each country, or is it mostly a different billing address and account_id?\n. This is super useful methinks!  \ud83d\udc4d \n. Could use this : \nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L107\n. And in the other places where we're referring to SecureRandom.hex(16).\n. Thinking we can just use options[:billing_address] and not worry about options[:address].\n. Thinking we can just rely on options[:shipping_address] here and disregard the other 2.\n. Usually void happens on authorizations and refund happens on captures and purchases.  I'm wondering if we can have a def refund and split it out into 2 operations.\n. Can this work without the cvv?  Since the cvv can't be stored for PCI reasons, we can't keep it in the authorization.\n. Looks like there's some logic that shows up in purchase and authorize.  Perhaps it can be refactored a bit to DRY things up some.\n. Guess like a bunch of operations, it's difficult to tell since the sandbox doesn't support store.  \ud83d\ude2d \n. I'm thinking our only option is to not store the cvv in the authorization.  This means it may work in some areas and not in others.\n. I wonder if we can simplify this to just:\nbuyer[:emailAddress] = options[:email] || 'unspecified@example.com'\n. Not sure if we need to handle this case.  Won't the gateway give us a failed response?  And if we don't need the case statement, I wonder if we need that first part of the authorization.\n. Same here - I don't know that we need this, do we?\n. I wonder if the currency code factors in.  If they specify the currency in the options, can we lower the amount?\nMost gateways have 100 for the verify amount.  4000 seems so high!   \nI also wonder if for most currencies perhaps 100 might work but for a few currencies we could bump it up to 4000.  Or maybe 4000 all the time is simpler.\n. That's a pretty cool idea.  \nI wonder if they have an API call that could be used that doesn't take a card.  The main thought I had was would we break if they changed the message text.  Seems like historically, messages are more likely to change than response codes.  But perhaps messages are one of the only ways to distinguish between error states.  Or maybe this message won't change and we'll be fine.\n. Not sure if we need query.  We typically let folks do things like this outside of active merchant since active merchant is primarily for the main X operations like purchase, authorize, etc.\n. Not sure if we need this, do we?  Same goes for dniNumber.\n. I know they sent an email about specifying the shipping address more than once.  I do wonder why that's needed!  Is there one that's more important than the other?  Seems weird to be doing it twice, once for the buyer and once for the transaction order.  Would it be bad to only specify it for the transaction order?\n. I saw the email too where they were talking about these TAX fields.  Do transactions fail without all of these additional_values?\n. The fact that these are part of the signature leads me to think that the TAX values are required.  :(\n. Necessary?\n. I'm not sure what dniNumber and payer_cnpj represent or how likely customers are to use them.  Do you think it's likely someone might want them?\n. So email gets specified for transaction->payer and for transaction->order->buyer.    I wonder if both are needed.\n. Do the transactions fail if deviceSessionId, cookie, and userAgent aren't specified.  If so, the \ud83d\udc4d on filling them the with n/a.\n. Thinking this line may not be needed.\n. I wonder if response[\"code\"] == \"SUCCESS\" would work for all of 'em.  Are there cases where the response code is SUCCESS and there isn't a creditCardToken or a transactionResponse?\n. Any good ideas how we might refactor this a bit?  Perhaps extracting parts into other methods?\n. I wonder if... there is no transactionResponse info and response[\"code\"] == SUCCESS, did money actually actually change hands?  If so, I'm wondering if we want to capture that as a successful transaction and then handle the nil transactionResponse subsequently?\n. Sounds great! \ud83d\udc4d \n. Sounds good @shasum.  Thanks for the clarification!  Different gateways seem to have a varying number of fields that need to be checked for success. \ud83d\ude22 \n. It would be great to see a remote test flexing this (shipping_address).\n. For the name and last_name, we typically use the name from the credit card rather than using part of the options hash.\n. We usually use phone of the billing address for this.  Examples:\nhttps://github.com/activemerchant/active_merchant/blob/b2f62a950faab76d1e0417fd090602ae5ac3363b/lib/active_merchant/billing/gateways/authorize_net.rb#L490\nhttps://github.com/activemerchant/active_merchant/blob/b2f62a950faab76d1e0417fd090602ae5ac3363b/lib/active_merchant/billing/gateways/mastercard.rb#L141\n. Little tweak to simplify?\ndef auth_minimum_amount(options)\n  return 100 unless options[:currency]\n  MINIMUM_AUTHORIZE_AMOUNTS[options[:currency].upcase] || 100\nend\nNot a biggie though.  \ud83d\ude04 \n\n. Thinking this message could say Qvalent.. ",
    "jfelchner": "@titanous, @codyfauser if I am using AuthorizeNet, why does it matter what Stripe or Samurai are doing?\n@ntalbott I'd be happy to update so that #refund does this, but I don't think we can do credit first before void. Lemme double-check that though.\nBTW, why did you close this?\n. So you want us to implement Samurai's reverse API call when #refund is called?\n. ",
    "opendining": "We probably won't look at prepaid stuff until a little later on, so we can just do the credit card gateway for now.  We just did them both, since they were in the other fork.\n. Doing the same here, I'll let you know what we find. \n. I think we're actually doing the wrong thing on both void and refund right\nnow.\nActiveMerchant refund should correspond to Mercury's \"Return\" call (or\nReturnByRecordNo if tokenization is used)\nActiveMerchant void should correspond to Mercury's \"VoidSale\" (or\nVoidSaleByRecordNo)\nWithin a void, they recommend trying a Reversal first, since it's faster.\n But not all issuers support Reversals (it wasn't their intended purpose),\nso if that fails, a \"traditional\" void should be used.  Reversals aren't a\nspecific transaction type or TranCode for Mercury's XML interface.\nWe could have AM implement just a plain VoidSale without the Reversal\ncomponent, but attempting a Reversal first releases the cardholder's funds\nsooner (2-72 hours vs. 7-10 business days, according to Mercury docs).\nLet me know and I'll get it updated accordingly.  Thanks!\n. Your first part is correct.  VoidSale and Reversal are both types of voids.\n1. VoidSale cannot be for a partial amount.  Whether it's a Reversal or a \"normal\" VoidSale, it will void the entire transaction.\n2. A Reversal will not always work, it's dependent on the card issuer.  A VoidSale (non-Reversal) should always work to cancel an existing Sale or Auth within the current open batch.\n3. A Reversal cannot be for a partial amount.\nFor partial amounts, the Mercury Return transaction code should be used.  VoidSale/Reversal only work within the current open batch, so those could fail if the transaction's batch is closed.  In that case, a Return would probably also be appropriate, but that's likely managed by the calling application.\nSo I'd think we'd want to map ActiveMerchant's refund to Mercury's Return, and ActiveMerchant's void to Mercury's VoidSale.\nWithin the void logic, AM could attempt a Reversal and if it fails, attempt a non-Reversal VoidSale -- the assumption there being that the card issuer doesn't handle Reversals.  We could just attempt a simple VoidSale and ignore the Reversal component entirely.  It's simpler but could delay the release of funds.\nFrom Mercury's documentation, on Reversals:\n```\nReversals are essentially card -issuer level VoidSale transactions \nand may be used to reverse an existing Credit Sale, VoiceAuth, \nPreAuthCapture and PreAuth. Reversals are required functionality \nof Flexible Spending Account (FSA) transactions and have been \nmandated for use with Partial Approval for card-branded, prepaid Debit cards.\nReversals are neither a Transaction Type nor a specific XML \nTranCode, but refer to a practice within the card processing \nindustry of communicating directly with the card Issuing bank \nin order to reverse the transaction and release the held funds \nback into the cardholder\u2019s account.\n```\nLet me know what you'd like me to implement, and I'll take care of it.  Thanks!\n. Works for me, I'll get it done.\n. @ntalbott I'm guessing: https://developer.heartlandpaymentsystems.com/SecureSubmit/Documentation\n. ",
    "marshallshen": "I tracked it down further and the problem seems to lie on activesupport-2.3.14:\n/Users/mshen/.rvm/gems/ruby-1.9.3-p194@active_merchant/gems/activesupport-2.3.14/lib/active_support/dependencies.rb:406:in `load': cannot load such file -- payment_service_helper.rb (LoadError)\n    from /Users/mshen/.rvm/gems/ruby-1.9.3-p194@active_merchant/gems/activesupport-2.3.14/lib/active_support/dependencies.rb:406:in `block in load_file'\n    from /Users/mshen/.rvm/gems/ruby-1.9.3-p194@active_merchant/gems/activesupport-2.3.14/lib/active_support/dependencies.rb:547:in `new_constants_in'\n    from /Users/mshen/.rvm/gems/ruby-1.9.3-p194@active_merchant/gems/activesupport-2.3.14/lib/active_support/dependencies.rb:405:in `load_file'\nAm I using the right version of activesupport?\n. ",
    "leondu": "Same here, update the https://github.com/Shopify/active_merchant/blob/master/activemerchant.gemspec#L21\nFrom \nruby\ns.add_dependency('activesupport', '>= 2.3.11')\nTo \nruby\ns.add_dependency('activesupport', '>= 3.1.3')\nsolved the problem.\nHowever, I currently got \n```\nFinished tests in 11.881115s, 156.8035 tests/s, 590.1803 assertions/s.\n1) Failure:\ntest_full_request(OptimalPaymentTest) [/Users/leondu/r/active_merchant_leondu_fork/test/unit/gateways/optimal_payment_test.rb:26]:\nExpected /]+>\\n\\ \\ \\n\\ \\ \\ \\ <\\/accountNum>\\n\\ \\ \\ \\ login<\\/storeID>\\n\\ \\ \\ \\ password<\\/storePwd>\\n\\ \\ <\\/merchantAccount>\\n\\ \\ 1<\\/merchantRefNum>\\n\\ \\ 1.0<\\/amount>\\n\\ \\ \\n\\ \\ \\ \\ 4242424242424242<\\/cardNum>\\n\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ 9<\\/month>\\n\\ \\ \\ \\ \\ \\ 2013<\\/year>\\n\\ \\ \\ \\ <\\/cardExpiry>\\n\\ \\ \\ \\ VI<\\/cardType>\\n\\ \\ \\ \\ 1<\\/cvdIndicator>\\n\\ \\ \\ \\ 123<\\/cvd>\\n\\ \\ <\\/card>\\n\\ \\ \\n\\ \\ \\ \\ WEB<\\/cardPayMethod>\\n\\ \\ \\ \\ Jim<\\/firstName>\\n\\ \\ \\ \\ Smith<\\/lastName>\\n\\ \\ \\ \\ 1234+My+Street<\\/street>\\n\\ \\ \\ \\ Apt+1<\\/street2>\\n\\ \\ \\ \\ Ottawa<\\/city>\\n\\ \\ \\ \\ ON<\\/state>\\n\\ \\ \\ \\ CA<\\/country>\\n\\ \\ \\ \\ K1C2N6<\\/zip>\\n\\ \\ \\ \\ %28555%29555-5555<\\/phone>\\n\\ \\ <\\/billingDetails>\\n<\\/ccAuthRequestV1>\\n/ to match \"\\n  \\n    \\n    login\\n    password\\n  \\n  1\\n  1.0\\n  \\n    4242424242424242\\n    \\n      9\\n      2013\\n    \\n    VI\\n    1\\n    123\\n  \\n  \\n    WEB\\n    Jim\\n    Smith\\n    1234+My+Street\\n    Apt+1\\n    Ottawa\\n    ON\\n    CA\\n    K1C2N6\\n    %28555%29555-5555\\n  \\n\\n\".\n2) Failure:\ntest_minimal_request(OptimalPaymentTest) [/Users/leondu/r/active_merchant_leondu_fork/test/unit/gateways/optimal_payment_test.rb:46]:\nExpected /]+>\\n\\ \\ \\n\\ \\ \\ \\ <\\/accountNum>\\n\\ \\ \\ \\ login<\\/storeID>\\n\\ \\ \\ \\ password<\\/storePwd>\\n\\ \\ <\\/merchantAccount>\\n\\ \\ 1<\\/merchantRefNum>\\n\\ \\ 1.0<\\/amount>\\n\\ \\ \\n\\ \\ \\ \\ 4242424242424242<\\/cardNum>\\n\\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ 9<\\/month>\\n\\ \\ \\ \\ \\ \\ 2013<\\/year>\\n\\ \\ \\ \\ <\\/cardExpiry>\\n\\ \\ \\ \\ VI<\\/cardType>\\n\\ \\ <\\/card>\\n\\ \\ \\n\\ \\ \\ \\ WEB<\\/cardPayMethod>\\n\\ \\ \\ \\ K1C2N6<\\/zip>\\n\\ \\ <\\/billingDetails>\\n<\\/ccAuthRequestV1>\\n/ to match \"\\n  \\n    \\n    login\\n    password\\n  \\n  1\\n  1.0\\n  \\n    4242424242424242\\n    \\n      9\\n      2013\\n    \\n    VI\\n  \\n  \\n    WEB\\n    K1C2N6\\n  \\n\\n\".\n3) Failure:\ntest_dont_send_address_details_for_germany(OrbitalGatewayTest) [/Users/leondu/r/active_merchant_leondu_fork/test/unit/gateways/orbital_test.rb:148]:\nExpected /<\\/AVScountryCode>/ to match \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\\n  \\n    login\\n    password\\n    EC\\n    AC\\n    000002\\n    merchant_id\\n    001\\n    4242424242424242\\n    0913\\n    124\\n    2\\n    1\\n    123\\n    Longbob Longsen\\n    \\n    1\\n    50\\n  \\n\\n\".\n4) Failure:\ntest_build_transaction_search_request(PaypalCommonApiTest) [/Users/leondu/r/active_merchant_leondu_fork/test/unit/gateways/paypal/paypal_common_api_test.rb:142]:\nExpected /^2012-02-21T\\d{2}:00:00Z$/ to match \"2012-02-20T16:00:00Z\".\n1863 tests, 7012 assertions, 4 failures, 0 errors, 0 skips\n```\nBut I suppose this should be another problem.\n. ",
    "steveh": "I get this same error using 1.9.3-p194 and HEAD\n. Same with 1.8.7-p370 and HEAD\n. ",
    "nickfrandsen": "Me too. I got around it by downgrading rails and activesupport to 3.1 in the gemfile and running the script using bundler exec.\n. ",
    "orenmazor": "hey @nashby,\nI took a look at this and mostly its great. couple of things came up during integration testing:\n- default item_name isn't being set. I manually set it to 'Store purchase' in the initialization\n- no return. after the payment, we gotta return to the module.\nI ended up adding to it in testing in a fork: https://github.com/orenmazor/active_merchant/tree/pay-fast\n. I did some digging around and I found the problem. this is actually not related to the additional new parameters. In fact, no discussion at any point suggests that 'email' should be a parameter of the charge request. This is code that was already in the gateway that was merged into my changes and ended up in the flow.\nOriginally, our stripe gateway code would take two parameters for customer data: description and email. it would then populate the description of the charge using the email parameter if the description is not set. We had an add_customer_data function that would add the email explicitly to the charge request, but it was never being called: https://github.com/Shopify/active_merchant/blob/e519a79fd3ec5b616af63ee0fd3ec70ba50b0d91/lib/active_merchant/billing/gateways/stripe.rb\nMy changes extended this function, and added it to the flow.\nI see nothing anywhere that says 'email' should be a property of a charge (either in their docs or discussions), so I've removed it completely.\nI also went through our remote tests, since they're failing for my test account, but I'm not sure if I should change these yet. it could be that they're failing because my test account is canadian?\n. I took a look at the doc above, and section 5.7 discusses the AVS code. the avs_input_code function above matches what the reference doc requests.\nbut given that this is supposed to be only used by UK addresses, should we be using avs code for UK address and straight postal codes with non-UK addresses?\n. @ntalbott: what I'm wondering is whether including this code that is supposed to be UK/CA only in queries for other countries will cause their failure?\n. hey @Soleone @jduff: I've gone through the shopify code to make sure the parameters are correct. I've also refactored comm_stub.rb to accept a parameter for what function to stub. This lets me test the output of the stripe purchase call.\n. not the biggest fan of exceptions here. would having a to_s on the questionable parameters make more sense, or a [].join?\n. @melari good call. fixed.\n. :shipit: \n. one comment that might not be necessary. :ship: all the :sheep: \n. I feel like the status mapping should take into account the transaction speed setting, but thats something we can tweak down the line as that becomes a custom setting.\n:sheep: \n. Hey \ud83d\udc4d  interest in this. @davidsantoso @jasonwebster thoughts?\n. done. I was going to ask, do you guys see this as a 1.38.2 bump, or a 1.39 bump in version?\n. this is just an account I spun up for testing. I can wipe it out if needed but I'm never going to use this :)\n. I still think we probably dont actually need to create this object. maybe?\n. are we making an assumption here that the merchant wants to see the btc gross price that was paid? because you can list items at $USD, and bitpay does the conversion for you.\n. actually, does this get used anywhere in this gateway?\n. nil is falsy, no?\n. ",
    "mattwhite": "It \"shouldn't\", and we have been using this in production with no problem.  The \"n1\" prefixes should be optional.\nHowever, I'm not a SOAP expert myself and it seems that Paypal's SOAP integration is buggy (which is why I had to make this change in the first place).  So there's always some risk.\n. ",
    "noiseunion": "I'm rebuilding the BluePay gateway as the current one just doesn't appear to be working quite right.  I'll provide a pull request when complete.\n. ",
    "jandillmann": "In case anyone still has issues with BluePay: Their API answers differently in test and live mode.\nA successful transaction in test mode returns response_code == '1', which is parsed correctly by the BluePay gateway class.\nA successful transaction in live mode returns the response code inside an Array ['1'], which is currently not correctly parsed by the BluePay gateway class.\n. ",
    "benjaminoakes": "I can totally understand that stance.  That's why this isn't a pull request, but rather something to discuss first.  :smile:\nAlternatively, how would you feel about providing a safe_inspect method, that way inspect is left untouched?  Then, if people do need to inspect/log this object, then they would have an option built in.\n. ",
    "jonm-okc": "Here is an implementation of a class to handle the response codes:\nhttps://gist.github.com/3758642\nIt would also involve making some changes to the Response object to allow for an AVSResult object to be passed in rather than instantiated.\nIf I get a chance in the near future, I'll try integrating this code into active_merchant and make a pull request.\n. That seems like a reasonable option as well, @ntalbott.  I didn't know if there was a reason it was included originally, and didn't want to just rip it out.\nIf we do that, we may want to have some way of telling the gateway to use the secondary URL rather than the primary. Currently it does that by checking the class of the last thrown exception, which seems hacky to me.\nruby\ndef remote_url\n  unless $!.class == ActiveMerchant::ConnectionError\n    self.test? ? self.test_url : self.live_url\n  else\n    self.test? ? self.secondary_test_url : self.secondary_live_url\n  end\nend\n. This pull request has been open a month.  Any word whether this will be accepted, or I should open a new one that just removes the retry logic entirely?\nThoughts, @ntalbott?\n. Good point.  I'll add a unit test for it similar to avs_result_test.rb.\n. I've added a test to orbital_test.rb that failed without the new code, and passes with my changes. I also added a unit test specifically for OrbitalAVSResult.\n. Any word on the status of this pull request?  I added the tests, as requested.\n. Your change looks reasonable to me.\nSince the mapping of AVS response codes was done in AVSResult, I wanted to mirror that pattern. That's why I created a subclass of AVSResult instead of putting all the mapping logic into the gateway itself.  I'm not thrilled with it, but it seemed like the least inelegant solution.\n. ",
    "frobcode": "Done.  Do you want me to clean up the history or are the 3 commits ok?\n. Unless I misread the travis logs, the errors were environmental (some sort of machine powerdown, not related to this change).  Plz advise if otherwise.\n. No, no dependency; that itransact stuff was already merged in.  I suspect some sort of fat-fingering on the git side of things with me.  Will fix and push a clean branch.\n. Void should now be supported, sorry about the delay.\n. My apologies.\n. ",
    "BlakeMesdag": "Sorry, I keep forgetting to check into whether or not the avs response are always present, I'll try to get a look at this next week.\n. Added a test for the missing avs results case, works as expected (leaves the fields nil), will merge when ci passes.\n. According to paypal it just needs to be URL encoded. There are other characters such as ? and & which should cause issues.\n. Name is deprecated, would explain why this is mapped so crazily.\nhttps://www.x.com/developers/paypal/forums/payflow-gateway/payflow-link-and-new-api-parameters\n. Yeah, it seems to have to do with the ordering of the params, will have to parse the XML into a hash or something.\n. Tests are fixed, any issues you can see @jduff?\n. I think this is the wrong gateway, the one that is affected is PayPal Payflow Link, this is the direct gateway integration by the looks of it.\n. Awesome, we should do some testing locally to ensure its all working as expected.\n. @melari I have working test credentials we can use.\n. @melari tested this locally, appears to send back the correct information for PayFlow Link now. :shipit:\n. Looks like one of the VMs died during testing. Code looks good though :+1:\n. Theres a grey, 776.13. Didn't respond for 10 minutes after a bundle install.\n. Payflow Link remains unaffected I assume? if so :ship:\n. Do you have documentation for the rounding from PayPal for this?\n. Can you use .last instead of an index of -1, makes it more clear\n. might be better to stick to float operations here\nruby\n  (money % 1) > 0\n. We should already be dealing with a float here, otherwise we would return above\n. ",
    "ewildgoose": "I would recommend a completely different approach:\n- Current process is to implement a gateway.purchase function\n- This function typically currently succeeds or fails\n- Instead it should succeed / fail / need additional auth\n- The return type for \"need additional auth\" will include details of where the auth should redirect\n- Gateway handles the redirect and is responsible for handling the call back response once 3D secure has been performed, however, likely this is common across many modules and can be easily abstracted\n- Bonus points - Paypal (Payflow?) is also handled using this process - tada.  Big cleanup and unification on the API for many gateways and also in the event of new 3D auth procedures being developed\n- More bonus points - Sage Pay hosted service is supported for free using this process (also other hosted services)\nSee, in the case of Paypal, there is a \"setup_purchase\" call, which is similar to your proposal (start_preauth).  By recognising that your proposal leads to a \"setup_paypal\", \"setup_3d\", \"setup_new_cool_thing\" explosion, we could instead wrap the purchase call and indicate need (or lack of need) to do something based on the purchase call result.\nWith Sage Pay hosted option it behaves very like a Paypal / 3D secure transaction in that you \"do something\" to setup the transaction, then redirect to Sagepay (or equivalently Paypal) to take the card payment. Finally redirect back to app\nThe abstracted process is therefore:\n1) Setup a payment with whatever info you have got.  Not even having the Card details is a possibility\n2) Send the details we have got to the gateway and ask for a decision. Quite possibly the gateway says yes, eg low value, holding some token which is equiv to holding card details, or 3D secure not setup for this transaction due to server side rules\n3) If the gateway instead says \"need more auth info\", then generically this can mean: need 3D secure info from the customer, or it could mean \"no card details given, redirect to our hosted site to give them\", or it might mean \"repeat payment using a token attempted, but we need customer to do something trivial like re-enter 3 security digits to auth, redirect to hosted site and do it\"\n4) Once we redirected to do the extra auth stuff then return to callback page on our site\nBenefits:\n- One code path in the app can now implement: purchases without 3D, purchases with 3D, purchases from Paypal, purchases from some new thing not yet invented\n- Not all purchases require 3D secure, the decision is usually made after the payment is attempted (server side rules)\n- There are more processes than just 3D secure which fit this basic process, lets solve all in one go, not hammer them out one by one. Eg right now you have token systems which need the customer just to re-enter their 3 security digits to \"confirm\", increasingly parts of the card collection are hosted on a PCI compliant outsourced solution, other payment integration systems where we bounce the customer to the provider for some kind of confirm\nPlease give this alternative design some consideration - I think it's basically just moving your design to hook into the response of the \"purchase()\" method, and allowing a flexible response structure which could mean 3D secure, but could mean something else to specific gateways.\nI have a particular interest in supporting gateways with hosted card collection (ie I outsource my entire PCI headache).  To my eye this is identical to 3D secure, basically I attempt a payment (without any card details in this case), clearly this will \"fail\" and require the customer to be bounced to a site where they enter their card details and 3D secure - however, this is identical to the app to being bounced just to enter the 3D secure details...  Lets support both through the same code path\nEd\n. ",
    "rubys": "This likely will mean that Active Merchant will be dropped from Agile Web Development with Rails.\n. > I would like to keep ActiveMerchant in the book if possible.\nMusic to my ears.  :-)  I would suggest reopening this issue until it is resolved then.\nIf you follow the links, you will see that this file simply was a convenience that required others.  Knowing what you actually require, and requiring it directly may be the best path forward.\nI also have the rails core developers looking at adding this file back in.\n. The Rails team reverted the change in order to support Active Merchant:\nhttps://github.com/rails/rails/commit/74bf8afb9fb92b4c45ffdd37b91e0580b86c1590\nMy simple test now passes again:\nhttp://intertwingly.net/projects/AWDwR4/checkdepot/section-26.1.html\nShould I see other problems, I will again try to get the Rails and Active Merchant teams to work together.\n. ",
    "samuelreh": "Nice! I need this too!\n. Updated with unit tests!\n. Woops. I kinda f**ked it up with that last push :(\n. New pull request: https://github.com/Shopify/active_merchant/pull/503\n. ",
    "simeonwillbanks": "@ntalbott Thanks for the guidance. \n. ",
    "v-fedorov": "Done\n. ",
    "chengz": "The options to setup the gateway is quite different. And this refund api\napplies not only to eWay gateway, but also eWay managed payment and a few\nother apis as well which haven't been implemented yet in active_merchant.\nI may not always be right, but I am never wrong.\nOn Fri, Nov 16, 2012 at 4:01 AM, Nathaniel Talbott <notifications@github.com\n\nwrote:\n@chengz https://github.com/chengz any reason this can't just be added\nto the Eway gateway class/file? I'd like to keep it consistent with other\ngateways where refund lives right next to purchase, etc.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/505#issuecomment-10416126.\n. \n",
    "twarberg": "Gateway still defaults to v3. If your updating for v3 or v4 you should be sure that if you're parsing API response.param['time'] then the 'time' format has changed to ISO-8601 from v5 and forward.\n. Shouldn't break anything on existing setups. Still defaults to API v3 but I'll recommend using latest v6. v3 is the oldest version still supported at QP and properly will be deprecated and removed some time in the feature.\n. There never was http://doc.quickpay.dk/paymentwindow/technicalspecification.html#index2h2\n. Copy+paste oversight. I'll fix that\n. The 'time' param was changed to ISO-8601 from v5 and forward. I'll add v3+v4 compatibility for completeness\n. ",
    "bob-p": "Yes I have used this to make recurring payments and it seemed to be fine.\n. ",
    "starchow": "Hi @bob-p, \nI alway see the error \"The token is invalid (11502)\" when I call PaypalExpressGateway.recurring method.\nI have read the Paypal documents and make the flow exactly same with https://www.paypalobjects.com/webstatic/en_US/developer/docs/ppp/RecurringPaymentsFlowUX.gif\nMay you help me, please write an introduction to use PaypalExpressGateway.recurring\nThank you very much!\n. ",
    "pgib": "@ntalbott The Moneris documentation (if you can call it that) says:\n\nVoid \u2013 (Correction / Purchase Correction) Purchases and Captures can be voided the same day* that they occur. A Void must be for the full amount of the transaction and will remove any record of it from the cardholder\u2019s statement.\n\nAnd:\n\nThe Void (purchasecorrection) transaction is used to cancel a transaction that was performed in the current batch. No amount is required because a Void is always for 100% of the original transaction. The only transactions that can be Voided are Captures and Purchases. To send a \u2018purchasecorrection\u2019 the order_id and txn_number from the Capture or Purchase are required.\n\nAnd then with regards to cancelling an authorization, this is what they write in the \"Capture\" notes:\n\nTo reverse the full amount of the PreAuth, please use the Capture transaction with a dollar amount of \u201c0.00\u201d. For a process flow, please refer to the Process Flow for PreAuth / ReAuth / Capture Transactions.\n\n(The source of this can be found in the Moneris Developer Portal [requires registration] > APIs > Basic Transaction Functions, and then in any of the language Transaction Guides.)\nSo, with Moneris, voiding a capture/purchase and voiding (cancelling) an authorization are different beasts. See my pull request which I think gives the best of both worlds:\nhttps://github.com/Shopify/active_merchant/pull/736\n. I'm guessing this stems from a difference in the Canadian banking systems, as the ability to clear/void an authorization with Moneris is relatively new. The EVO Canada gateway's void has a similar ability to void an unsettled capture/purchase in addition to an authorization: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/evo_ca.rb#L176 \nThough it looks like EVO's API is nicer in that it has a single void call instead of Moneris which actually has no true notion of a void at all.\nIf the expected behaviour of ActiveMerchant's #void is in fact to cancel an authorization, I certainly wouldn't want to go against the grain. (I can't actually find any documentation that covers this topic, so I figured the nuances and native speak of the gateways themselves would be the primary influence of the implementation.)\nI think it makes most sense to just make the authorization cancellation the default behaviour of #void. Something along the lines of:\ndef void(authorization, options = {})\n  if options[:purchasecorrection].nil?\n    capture(0, authorization, options)\n  else\n    commit 'purchasecorrection', crediting_params(authorization)\n  end\nend\nThe issue with doing that in #refund is that a purchasecorrection cannot specify an amount; it will always be the total outstanding on the authorization. There is also a fairly big distinction between a purchasecorrection and refund with Moneris (and other Canadian gateways) in that with the former, there is no trace of the transaction on the customer's credit card.\n. ",
    "DavidHuie": "+1\n. ",
    "kaip": "+1\n. ",
    "thomasklemm": "That's even better, thanks!\n. ",
    "samuelkadolph": ":+1: \n. :+1: \n. Minor issue then :+1: \n. :+1: \n. I believe we can use a commit-specific version of a gem in cardserver. It might require some manual stuff though.\n. :+1: \n. :+1: \n. Seems like the wrong place to set an instance variable. I would expect it to be in the initialize or stored in a local variable and passed down.\n. ",
    "hoffmanc": "Is there a test or something I can run that actually attempts to access Dwolla?  Otherwise, how could one know that this or any other integration actually works?\n. @ntalbott thanks for the information.  I will see if others are using this integration in production.  Should this issue remain open?\n. Alright, as I suspected, I was just doing something stupid.  I posted a gist with what seems to be working here:\nhttps://gist.github.com/4236467\n. ",
    "brynary": "Hi @ntalbott -- Absolutely. From a quick reading, the most common theme appears to be pointing to duplications between the adapaters for each gateway. This may or may not be something that should be addressed directly, but there are probably some concepts that could be abstracted out.\nFor example, some form of this code is in there many times:\n```\ndef expdate(creditcard)\n  year  = sprintf(\"%.4i\", creditcard.year)\n  month = sprintf(\"%.2i\", creditcard.month)\n\"#{month}#{year[-2..-1]}\"\nend\n```\nPerhaps there's a missing CardExpiration object.\nIf you're less interested in information on the specific adapters, we could set those up to be excluded and then Code Climate would just report on the core classes.\nThere's a lot more I could get into but trying to be brief. But would you be interested in finding a time when I could give you a quick walkthrough of the repos for ActiveMechant via Google Hangout or Skype?\n. @jduff -- Yes, I definitely recommend taking the automated analysis with a grain of salt. It's intended to be interpreted by a human developer not just as a todo list of things to fix.\nYou're absolutely right about the XML building causing it to flag things as more complex than they otherwise would be. If you're not feeling any pain from this, I'd certainly leave it as is, but if it feels like it would be a win otherwise I know some teams have split out this kind of thing into separate Ruby files.\nFor private Code Climate accounts we have a button for creating GH Issues that you can turn on, but we haven't turned it on for OSS to-date because different maintainers have different preferences for if/how they'd like those issues to be tracked. We need to do some updates to the way OSS repos are managed but eventually we'd like that to be something that OSS repos can turn on easily.\nLet me know if you have any other Qs.\nThanks,\n-Bryan\n. ",
    "shanebonham": "Sure thing. I added an assertion to test_expdate_formatting that just confirms that a credit card without a month or year will return 'XXXX' as the expiration date. I also added a few assertions to test_successful_update_customer_payment_profile_request that confirm an updated profile when a masked card is sent.\nThis branch is now behind master, but I wasn't sure if I should merge or rebase... Any tips, or will you handle that when merging the PR?\n. Ah, as you can see, I just did a merge. Let me know if that's not the proper way to handle it. Thanks and happy new year :tada:\n. ",
    "sanemat": "Ruby2.0.0-preview2, but I met same failure on 1.9.3 and 1.8.7, and I see travis result, so this is my environment problem I think. \nruby 2.0.0dev (2012-12-01 trunk 38126) [x86_64-darwin11.4.2]\nthanks!\n. I don't know why yet, but ruby2.0 and rails2.3 cause failure on travis result. I think allow failure(and run travis-ci) is first step, and then not allow failure is second.\nThe build result shows iconv problem:\nhttp://www.ruby-lang.org/en/news/2013/02/24/ruby-2-0-0-p0-is-released/#label-8\nIconv was removed 2.0\n. @ntalbott thx!\n. oops, rails2.3.\n. works fine! and All green\n. how about this?\n. ",
    "davisinfo": "Okay, I'll see about tests, I don't have much experience with tests but I'll check other integrations. \nThanks for the reply, I'll do another pull request when I'll fix the things related to your comments.\nOn 27.12.2012, at 18:46, Nathaniel Talbott notifications@github.com wrote:\n\n@nextbyte this looks like a good start, but isn't ready to merge yet. See my above comments, and I'd also recommend looking at some of the other integrations to see best practices around implementation and testing of integrations.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nope, I didn't have time to make the changes yet.\n\nNathaniel Talbott notifications@github.com wrote:\n\n@nextbyte any update on this?\n\u2014\nReply to this email directly or view it on GitHub. \n\ufffc \n. I want to finish this as I want to reference the original repository in my project ( and not my fork as it is now ) but I had other more urgent things to do in my application. I cannot tell you exactly how much time it will take until I'll update it but I thin it should be within 1-2 months. \n\nOn 21.01.2013, at 16:24, Nathaniel Talbott notifications@github.com wrote:\n\nOK, thanks for the update. Do you think you'll be able to do it soon, or should we just close this for now and wait for someone else to pick it up in the future? Either way is fine; open source is motivation-driven, and I totally understand if you've moved on.\n\u2014\nReply to this email directly or view it on GitHub.\n. Copy/paste error\n\nOn 27.12.2012, at 18:42, Nathaniel Talbott notifications@github.com wrote:\n\nIn lib/active_merchant/billing/integrations/axcess.rb:\n\n@@ -0,0 +1,96 @@\n+require File.dirname(FILE) + '/axcess/helper.rb'\n+require File.dirname(FILE) + '/axcess/notification.rb'\n+\n+module ActiveMerchant #:nodoc:\n-  module Billing #:nodoc:\n-    module Integrations #:nodoc:\n-      # To start with Axcess, follow the instructions for installing \n-      # ActiveMerchant as a plugin, as described on \n-      # http://www.activemerchant.org/.\n-      # \n-      # The plugin will automatically add the ActionView helper for \n-      # ActiveMerchant, which will allow you to make the Nochex payments.\n  What is the relationship of Axcess to Nochex? Is this just a copy/paste error?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "pronix": "thanks. will fixed shortly.\n. hello\ntomorrow will push\n2013/1/19 Nathaniel Talbott notifications@github.com\n\n@pronix https://github.com/pronix have you been able to make any\nprogress on getting the MerchantWarrior adapter ready?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/541#issuecomment-12462451.\n\n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u0414\u043c\u0438\u0442\u0440\u0438\u0439.\n. ",
    "cdaloisio": "@ntalbott Thanks for the note about using the generic retrieve method, I'll be sure to use this in future if submitting PR's for any of the other gateways.\n. ",
    "mftaher": "I think figured it out. \nThanks\n. ",
    "drale2k": "Ok thanks\n. ",
    "sareuon": "Hi Nathaniel Talbott\n\nI'm new to Active Merchant and I just follow this\nhttp://www.wyliethomas.com/blog/2011/02/22/paypal-recurring-payments-with-activemerchant/.\nI found that there is no this class in the source. Sorry for this.\nOn Mon, Jan 21, 2013 at 9:29 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\n@sareuon https://github.com/sareuon where did you find that class\nreferenced? It doesn't exist, and if you found it in the documentation I'd\nlike to fix them.\nIn general you'll need to read the docs and code to find out how to use\nthe PayPal recurring API via ActiveMerchant. Once you get it figured out\nit'd be great if you could write about your solution for future developers,\ntoo.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/555#issuecomment-12499887.\n\n\nSoum Sareuon\nwww.mangomap.com http://www.mangomap.com\n. ",
    "gabetax": "I'm not sure about PR protocol on Travis failures, but it appears the rbx test failures are in a separate gateway (realex). Is there any action I should take to prevent this from holding up the merge?\n. > I'm a bit concerned that this requires locking the API version to v11 - is that the most recent version of the e4 API?\nThe current version of the API is v12, but tokenization is only supported in v9 - v11 of the API. The only changes from v11 to v12 are (see the very bottom of this page):\n-  HMAC hash feature, which is not being utilized by the existing active_merchant implementation.\n- Added \"FraudSuspected\" header\n- Three error-related tags are not present in the response on successful transactions. The unit tests have been updated to reflect the header change, and the Response corrects for this as well. \nv8 and higher of the API is still supported by First Data, and I believe having the store() feature to work around PCIDSS requirements is worth the downgrade from v12. I just sent off an email to their support team looking for any information on TransArmor in v12, but I do not expect a solid response. \n\nthe token should be returned in Response#authorization\n\nThis sounds good.\n\nrather than having to be passed in in a custom option.\n\nTransArmor only works to tokenize the card number and CSC. The card brand, name, and expiration dates still need to be passed in with subsequent purchase transactions, requiring the CreditCard instance to still be passed. It seems like we'd either be using the token in the card_number field of the CreditCard instance, or passing it in as an extra parameter.\nI found the API for card storage inconsistent between gateways -- Do you have a recommended gateway to use as a reference for this scenario?\nThanks for the feedback!\n. First Data got back to me:\n\nTransArmor is already supported in the v12 WSDL. There are no plans to depreciate TransArmor going forward.\n\nIt seems their documentation was stale, and the previous support rep gave me info based on said stale documentation. I will verify, and roll the API back to v12 this week.\n. I received feedback from First Data support about a couple more relevant points regarding the API versions being used:\n1. The existing implementation uses https://api.globalgatewaye4.firstdata.com/transaction when connecting to the API, which corresponds to API version 8. Version 8 is still officially supported, but does not support TransArmor tokenization according to the documentation.\n2. Version 12 of the API requires inclusion of an HMAC hash in every request. Generating the HMAC requires two additional authentication parameters (hmac key, and hmac key id) set in the web administration panel. Upgrading to v12 of the API would be a backwards-incompatible update, unless we build in some form of fallback to v11 if the hmac info isn't provided.\nDoes upstream have any opinion on the following options?\n1. Stay at v8, lose store support\n2. Upgrade to v11 (existing implementation is already compatible)\n3. Upgrade to v12, require new hmac credentials, and fail if they aren't provided\n4. Upgrade to v12 to accomodate the hmac feature, fallback to v11 if no hmac credentials are provided.\nI can do any v12/hmac changes as a separate PR.\n. I'm all for the polymorphic route. I'll get working on it.\n. @ntalbott I just re-reviewed the API version history documentation and ran some successful and failure responses on v8 and v11. The only potential incompatible change is that between v8 and v9 they removed the LogonMessage, ErrorNumber and ErrorDescription properties for successful responses. The properties are still present for failed responses. I added a nil check so the Response object is still created normally, but anyone using Response#params properties may find these attributes to be nil.\nThis is a minor incompatibility on a processor that was only recently introduced into AM. Let me know your thoughts.\n. ",
    "melari": "@jduff \nIt appears that in order to process the CVV information, the account does require the same setting to be turned on as for the AVS (eFraud). Their docs don't seem to specify if the request will fail if we send the CVV when it is not turned on however. Perhaps I should just get in contact with moneris directly.\n. Still waiting on a response from them.. I'm inclined to believe that this is going to act the same as the AVS did previously, as their documentation seems to lump them together.\n. Just got a response on this now:\n\nHi Caleb,\nYou\u2019re right.  If a merchant does not have eFraud features added to their account and you\u2019re sending the CVD information, the transaction will be rejected by the gateway.\n. Sorry about the whitespace changes - my editor deletes trailing whitespace automatically. You can add ?w=1 to the URL to ignore whitespace in diffs.\n. @jduff Unit test added\n. :+1: \n. lgtm so far, there's some failing tests with ruby 1.8.7 though\n. :+1: \n. Made the changes to the right gateway now. Also CI seems to be passing now, not sure what those Encoding errors were about.\n. I did try to do some testing, but haven't really got anywhere yet - The credentials I have for payflow don't seem to be working\n. @jduff ready to :ship: ?\n. Changes made. I had to remove some obsolete tests that were checking for that exception when calling purchase(amount, nil). I think this makes sense though, there is no reason to be passing nil to the purchase method.\n. Checked the docs for webpay and they don't mention anything about auth/capture. Trying to send requests to the expected endpoints throws 404s, so I've added the NotImplementedError stubs.\n. Changed to use assert_match instead of =~\n. @ntalbott Good point, made the change you suggested.\n. :shipit:\n. :sailboat: \n. Just tested with v3 credentials and unfortunately it looks like they don't seem to be working - I get a response with the message FAILED;2001;invalid login\n. @ntalbott Yep, the credentials I'm using give me passing remote tests on master\n. @jduff @odorcicd \nThis is now ready and tested in Shopify, could I get another review?\n. @cagerton \nCould you take a look at the failing travis CI build? It looks like your update has some syntax errors in pre ruby 1.9\n. Adding @jduff for another last review.\nLooks good here, unit and remote tests all pass now :+1: \n. looks good :+1:\n. @odorcicd Change made!\n. @jduff \nStill working with @louiskearns on getting some working test credentials for this\n. @jduff Test added!\n. @jduff Tests added\n. @k13n \nI also ran into this issue a few weeks ago and talked to Paymill about it. They told us that we should be using their paymill.de domain instead of paymill.com. This change has since been made and merged, perhaps you are not using an up-to-date version?\n. Confirmed that the address details are now showing up in the merchant account on paypal's website.\nBefore (note the incomplete shipping details)\n\n\nAfter\n\n. Hmm well the \"before\" image shows the result of making requests with what is currently on master. So unless the behavior is different on a non-test account, I think they should just be missing the name. Are we sure they are missing the whole thing?\n. Looks good to me :+1: \n. Let's get @jduff to take a quick look, then we'll merge it in.\n. Could you merge master into this? There are a bunch of merge conflicts from a previous Dwolla pull request.\n. @capablemonkey Just working on getting some test credentials to try this out.\nIn the meantime maybe we could get @jduff or @odorcicd to take a second look?\n. @ntalbott Ah, I didn't realize there were others already using it - probably best to put it in the credit_card class then.\nThe reason I used swipe_data is just because that's the name that stripe will be using on their end. I definitely don't mind calling it track_data on the AM side though.\n. Stripe got the endpoint changes running, so I've added some remote tests for this. Found out that the requests fail if the swipe_data is included if the traditional card information is also included (makes sense).\n@jduff @odorcicd could I get another review?\n. :racehorse: :dash: \n. Tested and fixed up the formatting - will squash and manually merge.\n. :+1: \n. @louiskearns We're not changing the error messages. This is just the test file where we are comparing the error messages that we have already got back from webpay.\nNot 100% sure if we want to add the debugger gem, personally I'm all for it, but it should at least be for development only. Thoughts @jduff\n. Ah cool, :shipit: then\n. @RichardBlair Good point, this look better?\n. Waiting on stripe to provide a better endpoint so that we don't have to do 3 requests for a refund.\n. Taking a look through this now, also adding @jduff to take a look as well.\n. Yeah, one day it might be nice to have something similar to the private fixtures file, but for options as well.\n. Sorry about that @duff, I was out camping with no internet this week!\n. :+1: \nPerhaps changing NameError to something else can be a part of v2.0?\n. When testing I was receiving \nundefined method `[]' for nil:NilClass on line 49 of citrus/helper.rb\nCould you write some unit tests for this?\n. Closing this PR since it's not going to merge nicely. I've opened another in its place (see above)\n. Fixed in b624e3763186db8073183b3d9532af64619157dc\n. Adding @samuelkadolph as well\n. Did a bit of refactoring to remove the need for an instance variable. Also took this chance to fix up a failing remote test while I'm in this code\n. merged manually\n. Looks good to me, much cleaner.\n. Sounds good to me. That actually make a lot more sense than this.\n. Closing as #820 was merged\n. This looks good to me, thanks for the tests!\n. @llopez Pushed up a fix to remove the dependency on rails - sorry about that, I should have noticed the lack of green.\n. I'm not sure, as the remote tests for AM aren't run regularly. I would presume it was whenever worldpay added the \"SETTLED_BY_MERCHANT\" status\n. One minor nit-pick, but otherwise :shipit: \n. lgtm and tests pass :+1: \n. Yeah that had me confused for the longest time too. This isn't for the actual amount field (which is untouched and stays as the dollar format), but rather to construct the string that is hashed for the signature. Yes, this does mean that there are some transactions that will have overlapping signatures, but this is apparently the way they do it. They will always still be able to read the correct amount from the actual amount field.\n. ping @jduff \n. Code looks good so far. I think this will cause the helper unit test to start doing remote calls though, you'll need to stub those out.\n. :ship: \n. :+1: \n. :shipit:\n. Remote tests look good, but that TravisCI failure needs to be fixed. Webpay inherits from Stripe, which is why these changes can cause webpay test failures.\n. Fixed and merged manually\n. I personally have no issues with removing this assuming the integration still works as expected :+1: \n. /cc @louiskearns \n. You're going to want to rebase your branch on the latest master which has my fixes, then you can force push your branch back up to github and I think travis should just run again automatically since the rebase will change the commit shas.\n. This looks good to me, the commits I made related to this are already included in this branch. I'll rebase this on master to and merge it in.\n. This is merged, just forgot the close the PR since I did the merge manually.\n. Fixed via 3fe13c35ca4d21d81def9f79301b22936fe533f6\n. :+1: \n. :+1: \n. :100: :+1: \n. :shipit: assuming the tests are passing locally, CI seems to be borked.\n. Yeah we don't actually use Circle CI with activemerchant, but sometimes it shows up and hides the Travis CI stuff. Looks like travis is running now though...\n. LGTM\n. Oh yeah, this has come up a few times now. One of these days we should probably either fix the Shopify flow or make the AM standards more clear.\n:shipit: \n. I'm pretty sure Shopify needs an account method on notification, which should basically just return credential1 (as passed back to us from the gateway) for fraud detection.\nI could be wrong, but I think the notification may also need a transaction_id method.\n. :shipit: \nNot sure what you mean with the whitelist comment. Do you mean something other than the payment providers system in Shopfiy?\n. :+1: \n. :+1: \n. I agree, it's quite possible a gateway could send back a weird non-standard format that Money parses as most people would expect, but maybe not as that one specific gateway does.\n. LGTM, maybe we want a simple unit test that just checks that this field is included in requests?\n. :tophat: \n:baby: \n. :shipit: \n. This LGTM, though it would be nice to have a test that makes sure the track_1 field is added properly when the CC is passed in.\n. \u00a0\u00a0\u00a0\u00a0:boat:\n:ocean: :ocean: :ocean: \n. @odorcicd thanks, I like that test a lot better :+1: \n. \u00a0\u00a0\u00a0\u00a0:boat:\n:ocean: :ocean: :ocean: \n. Looks like the test failed because stub_comms was not defined. You'll need to add include CommStub inside the class definition to pull it in, just like this: https://github.com/Shopify/active_merchant/blob/5e7faae720d0ea40f7dc2346d1b6869cc82bedd4/test/unit/gateways/firstdata_e4_test.rb#L5\n. :shipit: \n. The reason your test is failing here is because the Moneris gateway needs you to specify which fields are included with each request here: https://github.com/Shopify/active_merchant/blob/5e7faae720d0ea40f7dc2346d1b6869cc82bedd4/lib/active_merchant/billing/gateways/moneris.rb#L280\nSo you'll need to add :track2 to purchase and preauth for example, along with any of the other fields you want included.\n. :shipit:\n. :+1: \n. That's correct - sublime wasn't correctly finding the end of the regexp... making the remaining of the document a solid colour. Adding the escape doesn't change the behaviour though.\n. That's a good point. I copied the purchase method as a base, this is left over from that. I'll remove it from purchase as well.\n. I don't think we expect a deprecation warning from calling refund do we?\n. The reason I had done it this way is because the swap does have to happen after the run block and I thought this way modeled that nicely. In any case, I'm not attached to this way so I've made the change\n. Hmm, we've actually already got a track_data accessor on the credit_card, I'm not sure if we want to switch to this or not.. Are both tracks mandatory for the this integration? Thoughts @jduff ?\n. The credit method is actually deprecated, could you rename this to refund?\n. How is authorization_code different from authorization? If it's something we can just leave in the params that would be best.\n. Do we even need this whole file? I don't see it used anywhere.\n. Think you could fix this indentation?\n. Don't think we need these changes to the paypal integration?\n. We could just use status here instead of params['status'].downcase\n. The next version going out will definitely be 1.39 because there's a ton of changes to go out. The last digit is usually just for small bug fixes\n. Why do we need this? What's wrong with using the existing ssl_post?\n. It would be great if you could get it to work with the ssl_post provided by active_utils, just so that we can remove the dependency on curb.\nIf you think it might help to have the source (or if there is something wrong with it), you can find it here: https://github.com/Shopify/active_utils/blob/master/lib/active_utils/common/posts_data.rb#L31\n. To prevent test leaking...took me forever to realize this was happening.\n. whoops, good point...fixed.\n. I guess you can remove this dependency now that you've moved back to using active_utils' ssl_post\n. Pretty sure we'll also need a\ndef self.return(post)\n  Return.new(post)\nend\n. Missing an end here for the if statement\n. Could you also check that the other fields are added (like that <orderSource>retail</orderSource etc. are in the request data)?\n. Isn't the track data that we have just track1?\n. Same as my comment on your other PR here. It would be nice to check that the other required fields like pos_code are in the request data.\n. ",
    "snookca": "My moneris account doesn't have efraud features.\n. ",
    "madpilot": "Hey Nathaniel,\nCheers for the feedback! \nAre you referring to the failing rubinius tests? They seem to relate to a completely different gateway (RealexTest).\nBut I'll try merging in the changes from master and see if that fixes the problem.\nThanks!\n. That should be an easy one to fix - I'll get on to it tomorrow.\n. Sorry - I only just thought about this as I sat down to fix it. The JSON gem includes to_json into the Hash object - there is no dependency on ActiveRecord (or more correctly ActiveSupport).\nTry it: open irb\nrequire 'json'\n{ :foo => 'bar' }.to_json\n=> \"{\\\"foo\\\":\\\"bar\\\"}\"\n. ",
    "cwise": "Will do\n. If they change the API to echo back the on_behalf_of_uri, I will add a test for that.\n. Makes sense to me. I would assume that authorization would make the most sense to return that information. I'll see what I am able to do with it.\n. I haven't had a chance to yet but will address it this week.\n. Ok I am going to re-open this. We've been running on our own fork of Active Merchant and we really need this functionality pretty desperately.\n. https://github.com/Shopify/active_merchant/pull/889\n. Ok @ntalbott I've modified this to pass back the card_uri and account_uri in the authorization as a string.\n. Any timeline @ntalbott on when this might get in? There's another pull request for Spree Gateway that's dependent on this update.\nThanks!\n. I definitely appreciate your Open Source contributions @radar. It was merely a friendly bump. \nWe've already forked both projects already but as we want to push forward to Spree 2.1 (and further) it becomes that much more to manage.\n. My bad - I actually remember seeing application_fee there last week. I'll work on destination.\n. Where is this stuff documented?\nIs there somewhere else I can pass this back in a hash?\n\nOn Oct 24, 2013, at 5:58 PM, Nathaniel Talbott notifications@github.com wrote:\nIn lib/active_merchant/billing/gateways/balanced.rb:\n\nend\n- \n-        is_test = false\n-        if @marketplace_uri\n-          is_test = (@marketplace_uri.index(\"TEST\") ? true : false)\n-        end\n- \n-        Response.new(true, \"Card stored\", {}, :test => is_test, :authorization => { :account_uri => account_uri, :card_uri => card_uri })\n  The authorization should just be a string (since it gets stored in a single column in databases for future use); you can join the components together with something like a | and split them back apart when they're needed.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Great thanks. Will take care of this tonight. \nOn Oct 24, 2013, at 6:12 PM, Nathaniel Talbott notifications@github.com wrote:\nIn lib/active_merchant/billing/gateways/balanced.rb:\n\nend\n- \n-        is_test = false\n-        if @marketplace_uri\n-          is_test = (@marketplace_uri.index(\"TEST\") ? true : false)\n-        end\n- \n-        Response.new(true, \"Card stored\", {}, :test => is_test, :authorization => { :account_uri => account_uri, :card_uri => card_uri })\n  It's only documented in the codebase currently unfortunately \n\ngrep for def authorization_from in the codebase for lots of examples.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "forest": "Sure. Sorry about that.\n. All changes squashed into the last commit.\n. I had created my branch from the wrong place. All clean now.\n. The creation of the LitleCardToken class is important since it allows passing required fields in token based requests. The Litle XML Reference Guide section 4.105 (expDate) states the following:\n\nAlthough the schema defines the expDate element as an optional child of the card, token and paypage elements, you must submit a value for card-not-present transactions.\n\nI will remove the ability to pass the token as a string and require the use of the LitleCardToken class.\nIdeally the ability to pass a token as a string would not be released in an official gem. It seems like that is happening today. \n. @ntalbott I understand your concern. I added the specific LitleCardToken class instead of a generic Token class since I did not have experience with how other gateways used tokens. \nI'll revert to passing the token as a string instead of the CreditCard object, and pass the optional fields in the options hash.\n. ",
    "aprofeit": "To be honest, I'm not too familiar with the intricacies of PayPal. What do you think of this @melari ?\n. So have doc = REXML::Document.new(@response.encode(\"UTF-8\", \"ISO-8859-1\")) in one line instead of catching the parsing error?\n. How's that?\n. :+1: \n. @j-mutter I updated to leave letters intact, look good?\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. Based on the comments in https://github.com/activemerchant/active_merchant/pull/1607 I'm going to close this since it sounds like we're waiting for jetpay to allow voiding an auth instead of adding a new method to AM. Feel free to reopen if I'm mistaken. \n. Looks like this was added back in https://github.com/activemerchant/active_merchant/commit/43e8adf2.\nirb(main):035:0> card = ActiveMerchant::Billing::CreditCard.new(first_name: 'Alex', last_name: 'Profeit', number: '4242424242424242', year: '2016', month: '1')\n=> #<ActiveMerchant::Billing::CreditCard:0x007ff8b0a6f5f8 @first_name=\"Alex\", @last_name=\"Profeit\", @month=1, @year=2016, @number=\"4242424242424242\">\nirb(main):036:0> card.valid?\n/home/vagrant/src/rails/active_merchant/lib/active_merchant/billing/compatibility.rb:6:in `valid?': Implicit inclusion of Rails-specific functionality is deprecated. Explicitly require \"active_merchant/billing/rails\" if you need it.\n=> false\nirb(main):037:0> card.errors\n/home/vagrant/src/rails/active_merchant/lib/active_merchant/billing/compatibility.rb:11:in `errors': Implicit inclusion of Rails-specific functionality is deprecated. Explicitly require \"active_merchant/billing/rails\" if you need it.\n=> {\"verification_value\"=>[\"is required\"]}\nirb(main):038:0> card.require_verification_value = false\n=> false\nirb(main):039:0> card.valid?\n/home/vagrant/src/rails/active_merchant/lib/active_merchant/billing/compatibility.rb:6:in `valid?': Implicit inclusion of Rails-specific functionality is deprecated. Explicitly require \"active_merchant/billing/rails\" if you need it.\n=> true\nirb(main):040:0>\n. Amended commit merged in https://github.com/Shopify/active_merchant/commit/a7ba32f719b7255843c2a0baf19c5f3654e2a2f4\n. Can you link the original exception/issue? Just curious on what it looks like.\n. :+1: \n. Thanks for the PR. Do you have a link to documentation which shows these are valid fields in a refund? The reference at http://developer.authorize.net/api/reference/ does not include invoiceNumber or description as valid options, although they are present on other requests.\n. I was able to verify this works, thanks!\n. Thanks for the PR. Do you have a link to the documentation just so I can verify that's the correct test url?\n. @cbilgili Was able to run the remote tests with those credentials, thanks!\n. @bizla you gonna merge this in?\n. :+1: \n. Thanks for the find. Do you have a link to the documentation that shows this is the correct code? I'm curious if ARS and BOB should get the same treatment, stripping the leading 0.\n. Ooohhhhh, that makes sense. Thanks!\n. Thanks!\n. > I'd like that standard to be \"partial auth is disabled unless explicitly enabled\".\nThat makes sense. This seems like the right approach. \n. Little late, but :+1: \n. Was my bad taking so long :p \n. Since https://github.com/activemerchant/active_merchant/commit/d91ccd7442cffd8cfb76013a3489c2e8a806ab6f this will now return false instead of erroring if there are spaces present in the number. You should still strip spaces from the number before passing it to this method since a valid number with a space will still return false. Example:\nirb(main):001:0> ActiveMerchant::Billing::CreditCard.valid_number?(\"4242424242424242\")\n=> true\nirb(main):002:0> ActiveMerchant::Billing::CreditCard.valid_number?(\"4242424242424242 \")\n=> false\nirb(main):003:0>\n. Any way to add a test that would have caught this?\n. :+1: \n. I'm fine with this, I think it's better to raise if it can't find rather than fail silently. \n. What do you mean when you dumped the request? Is it possible it's implicitly calling value on that object when it gets sent?\n. Looks like it called to_json on it. Very strange the test still works :\\\n. In any case, change makes sense :+1: \n. :+1: \n. :+1: \n. Wonder if we can tests to ensure all the gateways have the same method signatures.\n. So we just need automated remote tests that test every possible permutation of all the options :)\nBut this lgtm for now.\n. I'm not sure a github issue is the best way to collect this info, but for what it's worth:\na) No. 3 of them no longer actively work on the project.\nb) It would be less maintained if two of them left.\nc) It's fairly simple to understand and get up to speed by just reading the code.\n. Would you be able to add some tests for this? Thinking:\n- Shipping and billing address names are sent when present\n- Credit card name is sent when shipping and billing address names are absent\n. :+1: test in production I guess.\n. Er, sorry, didn't realize we have tests to explicitly allow mode and gateway_mode to be different. I'll fix.\n. Do we actually need gateway_mode and mode anymore? Can we use just mode and kill gateway_mode?\n. Since we no longer need to differentiate between gateway_mode and integration_mode I deprecated gateway_mode and removed integration_mode in favor of just using mode. gateway_mode will continue to function as an alias for mode with a deprecation notice.\nThoughts? @girasquid @ntalbott \n. :+1: \n. I have a branch here https://github.com/activemerchant/active_merchant/compare/elavon-send-ip?expand=1 which adds the IP. Just waiting to receive some test credentials from elavon so we can do a remote test as well.\nGoing to close this PR to reduce the number of open PRs and reopen another when I get the credentials. \n. Nice tests :+1: \n. :+1: \n. @ao could you provide a little description of what the intention of these changes are? Do you have any docs to show why these needed to change?\n. Was merged in https://github.com/activemerchant/active_merchant/commit/86431f5ae539c594fa702431f63d5524f8f15476 :)\n. According to these docs on p114, daily doesn't seem to be a valid option.\n\nShould we instead remove daily as an available periodicity option?\n. Thanks! I merged your changes, but just moved the check of non-digit characters to its own method so we can keep valid_checksum? the same as where it came from.\n. Is there docs for this somewhere? How did you know this needed to change?\n. Remote refund test please otherwise this'll break again and no one will know.\n. Just needs a squash, but :+1: \n. Merged, thanks for fixing this!\n. Looks like this was added in https://github.com/activemerchant/active_merchant/pull/1927!\n. To explain a little more, the Stripe API supports expanding responses, which allows an associated object to be included in the response. charge is a expandable on refund responses.\n. :+1: \n. :balloon: \n. @cjoudrey don't think so, the IP isn't included in the response, so no way to assert that. I think it's enough that we just include the IP in the existing remote requests and assert they continue to function as expected. The unit tests cover asserting that the param is present in the request as we expect.\n. lgtm, will wait for @ntalbott or @duff to chime in as well.\n. :+1:\n. :+1: \n. Weird, I wonder what the original intent of that was.\nChanges make sense to me :+1: \n. Kinda curious why these others were added, if docs only say those three this makes sense to me :+1: \n. @duff the link 404'd for me as well, but weirdly worked on the second time.\n. :+1:\n. > Sounds like the best course would be resetting to @ryanbalsdon's commit (033f2fc) and force pushing that to master. Then turning on force push protection. :smile:\n:+1: \n. :+1: \n. \ud83d\udc4d \n. lgtm assuming it's been manually tested and everything is working as expected\n. One nice thing would be to get the remote tests using these options just to make sure it's not going to blow up.\n. \ud83d\udc4d \n. \ud83d\udc4d \n. Whoops, sorry, looked at this the other day, looks okay to me!\n. Wow that regex is crazy. Hopefully our tests are sufficient because I can't think of how to verify this myself \ud83d\udc4d \n. Just because we don't use customer_code, I don't think that means we should remove it for everyone. Other people other than Shopify use this gem.\nIf the tax thing is unrelated, it should be in its own PR. Do you have documentation explaining how this field works? I'm worried it may do other things we're not aware of.\n. @ntalbott do you have opinions on this? From what I can tell, the original intent of CreditCardMethods was to allow consumer projects to define their own CreditCard model and pass it in place of a ActiveRecord::Billing::CreditCard.\nConditional checks directly against the class like is_a?(CreditCard) make this difficult, if not impossible.\nShould we work towards removing the is_a? checks from AM, or should we give up on the idea of passing custom CreditCard models and force passing an ActiveRecord::Billing::CreditCard?\n. \ud83d\udc4d \n. \ud83d\udc4d \n. \ud83d\udc4d \n. Ha, yup \ud83d\udc4d \n. Add all the tests! \ud83d\udc4d \n. \ud83d\udc4d \n. Squash and \ud83d\udc4d \n. \ud83d\udc4d \n. Uh, it's actually the other way around. I'm setting the expectation that commit will be called with the stripped version: has_entries(:avs_zip => '995770727') and then passing in the form with '99577-0727'.\nI guess it's a little confusing with the expectation set before setting the form, I can switch them around. \n. :+1: will do.\n. Good catch. I'll adjust this and add a test that postal codes are left unclobbered.\n. I think it's okay to get rid of underscores though? I looked through example zips of countries which use this gateway and none use underscores. Are there zip codes where the underscores need to be preserved?\n. I'll make it more extreme as you suggested.\n. OH I see, it doesn't strip underscores. Good call.\n. When status code 200 is not enough, add 2 zeroes.\n. Since it's not actually passed to anything, should it be _ or _options?\n. Won't this call next on all values except false now? How can any other value be included in the request now other than false?\n. Ah right :+1: \n. Very minor nitpick, but these should be flipped. assert_equal expected, actual\n. Another minor thing, have some extra whitespace here as well as lines 161 and 162.\n. Although ruby allows you to omit braces on method definitions, they should still be there. Please add brackets def invalid_operation_code(response). Same thing for def invalid_operation_message(response).\n. Should we add a guard to explicitly return [nil, nil] if names.size <= 1? Two reasons:\n- When '' or nil is passed to split_names it returns [\"\", nil]. Feel like it should return the same value for both items.\n- If name is a single word, it will end up combining the address name and credit card name in the post. For example, split_names('bob') => ['', 'bob'] which would then add fname = credit_card.first_name and lname = address.last_name. Should probably use only the address name or only the credit card name.\n. The method doesn't work anyways. OFFSITE_PAYMENT_EXTRACTION_MESSAGE is undefined.\n. What does this change have to do with the currency? And what are all these 0s for?\n. Oh I see, just moved code.\n. Where did this options come from before?\n. Wondering why this isn't just blowing up on undefined local variable or method\n. Inheritance, always making things sooo easy to understand.\n. I see what you mean, unfortunately Array.wrap doesn't play nicely with Sets, ends up building an array with the Set as its element. Would rather keep using this nice Array.wrap to handle options[:expand] being nil, 'charge', ['charge', 'somethig_else'].\nirb(main):001:0> Array.wrap(Set.new(['a']))\n=> [#<Set: {\"a\"}>]\n. Logging would be nice, but there's no existing logging currently. Gonna keep this as is to avoid changing behaviour.\n. What is this?\n. This happened because activemerchant/offsite_payments was cloned into the active_merchant repo in your branch. I would suggest checking out master and doing a rm -rf offsite_payments and starting your branch over.\n. :-1: for extra whitespace :p\n. I think this should be false as the old call of is_a?(CreditCard) would have been false if the class was a NetworkTokenizationCreditCard.\n. Let's just leave this how it was. If we define check? methods down the road this can be changed, but currently it's unrelated to the other changes.\n. Indentation.\n. Why is this necessary? Timing things like this is bound to run into errors eventually, can this not be done a different way?\n. Does this data structure always exist? I'm worried if messages or message isn't present, the code will error out. Is there documentation to support this structure always existing?\n. Does it work without it? Although remote tests are generally not the fastest things, I'm just concerned about forcing it to take longer.\n. Ideally we could have a mechanism that retried until the remote server had done whatever we're waiting for, but that's probably overcomplicating things. Let's just leave the sleep(5) I guess. Worried if we do actually need to wait for something, sleep(2) may work now, but during a small network blip it would be flakey.\n. \ud83d\udc4d \n. The logic seems to have slightly changed here, previously it would add nothing if option[:gift_aid_payment] was blank?, now it looks like it will include nil for all keys which aren't present in options. Was this intentional / are we sure this is okay?\n. Nice!\n. ",
    "ktopping": "I have just been in contact with Barclays regarding this issue, and they've told me that the test gateway returns data encoded as UTF-8, but the live gateway is (as per this issue) erroneously encoded as iso-8859-1.\nAm just flagging the fact that the fix contained in this pull request might not work when using the test epdq gateway.\n. ",
    "scamurcuoglu": "@ntalbott Hi, I've made the changes that you requested, can you review again? Thanks very much.\n. Hi @ntalbott, I would like to learn why this pull request was closed without being merged. Is it because of technical reasons? Thanks.\n. Ok, sorry for my misunderstanding.\n. Thanks Selem, actually I had not understood the purpose of setting $KCODE in garanti.rb, now that makes it clear, I will add that line to cc5.rb too.\n. ",
    "corroded": "That's the thing, I don't see the MR in the response. It only gets assigned in the code, but not returned. \nPlease correct me if I am wrong here:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/paystation.rb\nIn line 102, it gets assigned.\nIn line 163, the MR is part of the pstn_prefix_params hash, but during the ssl_post, or the PaystationResponse call (line 166, 170 respectively) it disappears. This led me to assume that it's not being returned? (We checked this out using binding.pry)\n. ",
    "VRMink": "Are you considering merging my changes in?\nIs there anything I can do to help out?\n. Try Merchant0000992/demo\n. Yes it does. It's either 4 or 5 zeroes. Apologies. \nNathaniel Talbott notifications@github.com skrev:\n\nSame result - INVALID CREDENTIALS. As far as I can tell the gateway\ndoesn't even use a password does it?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/595#issuecomment-15653370\n. I will have to look at the fixtures file at work to figure out why the credentials I have given you are not correct, but I must admit that I remember them to be the same.\nAnd they work for the administration panel https://mms.cardstream.com/admin/index.php\nI have looked at the source and you are right that only a user name is used.\n\nI will not have access to my workstation before Tuesday, I hope you did not waste too much time on this.\n. Hi Nathan.\nThese are the changes I made to the fixtures file. Everything else is in my pull request.\nIt turns out the Merchant0000992 was for the dashboard, while the numbers-only version is for the webservice.\n``` git\ndiff --git a/test/fixtures.yml b/test/fixtures.yml\nindex d235907..bd6fcea 100644\n--- a/test/fixtures.yml\n+++ b/test/fixtures.yml\n@@ -65,6 +65,9 @@ card_stream:\n   login: X\n   password: Y\n+card_stream_modern:\n+  login: '0000992'\n+\n certo_direct:\n   login: 1\n   password: vP6OwK3\n```\n. Hi Nathan.\nDid these credentials help?\nAre you postponing the merge to a later date, and if so - when?\nCheers\n. Yes you need to approve your IP address for refunds through the admin panel. Did I send you the link earlier? \nNathaniel Talbott notifications@github.com skrev:\n\nIt's mostly working now - yay!\nI'm getting permission denied for all transactions related to refund\nand void, though:\n1) Failure:\ntest_successful_amex_authorization_and_refund(RemoteCardStreamModernTest)\n[test/remote/gateways/remote_card_stream_modern_test.rb:188]:\n<\"APPROVED\"> expected but was\n<\"PERMISSION DENIED\">.\nIs there some kind of credential necessary to run refunds?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/595#issuecomment-15979321\n. This is the link to the administration panel where you need to add your test ip in order to make refunds.\n\nThanks for your patience. I hope we can soon get this merged into the main branch.\n. I am currently looking at this, and expect to create a pull request tomorrow for a fix\n. I have fixed this locally, and am just into a small problem with UK Maestro Cards on the remote unit tests. I have contacted CardStream UK to resolve the issue. Expecting a solution early next week.\n. Created pull request #859 for solution.\nThere has been no response from Card Stream UK Support, so I have decided to remove the maestro test as the support agent I talked to hinted that maestro (switch/lazer) cards were being faced out.\n. regressing?\nNathaniel Talbott notifications@github.com wrote:\n\n@ExxKA any chance you can add a unit test that prevents the fix from\nregressing? Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/859#issuecomment-25757448\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. Of course. I will add one when I get into the office tomorrow.\nNathaniel Talbott notifications@github.com wrote:\n\nBasically just to make sure that it stays fixed; the only way we'll\nknow it keeps working is if there's a unit test.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/859#issuecomment-25758187\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. No I must admit I have been busy - I have not abandoned it, I will see to\nit as soon as things have quieted down a little.\nOn 24 Oct 2013 22:31, \"Nathaniel Talbott\" notifications@github.com wrote:\n\n@ExxKA https://github.com/ExxKA any progress on getting tests for this?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/859#issuecomment-27032953\n.\n. \n",
    "RyanScottLewis": "Sure thing, when I get time =)\n. Honestly, I can't believe I made this Pull Request without doing so >_<\n. ",
    "natejgreene": "I added the test that shows it is working. It fails w/o the fix. The test creates a subscription and then purchases against that subscription with the authorization.\n. ",
    "daverooneyca": "@melari @BlakeMesdag Any progress on this? It's really dragging.\ncc @jduff \n. ",
    "ji": "Oh sorry, that did definitely not occur to me after reading the contribution guide.\n. ",
    "sime": "Okay I solved it liked this:\nruby\nrequire 'active_support/core_ext'\nI just realised that json is a dependency of activemerchant, so the required lined suggested by @madpilot is fine.\n. ",
    "mb-dev": "Actually, why this method does not return the usual ActiveMerchant::Response? So I can use .success?\n. ",
    "pierre": "For information, I tested the patch with the @killbill Paypal Express plugin and was able to charge multiple times a BAID. Thanks!\nAny chance this could be merged?\n. See https://github.com/Shopify/active_merchant/pull/1187 and https://github.com/Shopify/active_merchant/pull/1188.\n. @ntalbott get_order_status has precedents in ActiveMerchant (it maps to details_for in PayPal Express or retrieve in CyberSource for example), but it doesn't seem that this call has a standard name.\nmake_order doesn't quite map to purchase since it only sets up the payment page (it doesn't actually trigger a purchase). I could migrate that call to the integration but:\n- it would duplicate some of the payload handling\n- I see other gateways exposing private APIs too (Stripe exposes application_fee_from_response, PayPal Express has authorize_reference_transaction, etc.)\nThoughts?\n. > @pierre the real issue is that if you can't implement the standard purchase API, then this isn't really a gateway, but rather an adjunct to the integration and should be tacked onto it and kept out of the Gateway namespace.\nAlright, I'll move make_order to the integration helper, similar to create_invoice for BitPay (https://github.com/Shopify/active_merchant/pull/1188).\nWhat about get_order_status? This feels like a real gateway API call (i.e. check the status of a payment on the back-end, unrelated to the browser flow). Should this go into the integration helper as well?\n\nAnd FWIW, PayPal Express is a horrific frankenstein monster in ActiveMerchant that I hope to kill at some point in the future, so not really a good example to look at :grin:\n\nNoted! ;-)\n. @ntalbott I did take a look at it but didn't want to invest the effort into refactoring the patch (which is already in production).\nFor now, we have decided to fork the gem (as well as offsite_payments and active_utils) because we have quite a few PR outstanding (more are in the works) and it doesn't look like we were able to get traction from the team on it (details at https://github.com/pierre/active_merchant/blob/killbill/README.md).\nI'm happy to revisit this patch if you are really interested in integrating it, but I'm hoping for a faster feedback loop.\n. Either way, either you pass a credit card directly, or you use their vault.\nFor reference: http://docs.payulatam.com/en/api-integration/api-payments/operations-of-the-payment-api/\n. ",
    "jhecking": "@ntalbott, @jduff, first of all thanks for reviewing my PR - after nearly a month I was beginning to questions whether this project is still active or not. During this month some things have happened in our business and we're actually about to switch to a different payment provider. So from that perspective I no longer care about the outcome of this PR since we're not going to use my implementation ourselves...\nThat said I know that several other folks had attempted a 3D Secure implementation for Worldpay. I.e. see this thread here: https://groups.google.com/forum/?fromgroups=#!topic/activemerchant/XS5CYS210GU. So with your decision to keep 3D Secure support outside the scope of the ActiveMerchant framework, you are forcing people to re-invent the wheel unnecessarily IMHO. And while I cannot comment on whether the payment industry is moving away from 3D Secure or not it is certainly still a requirement to do business in some parts of the world. And it seems the discussions around supporting 3D Secure in AM have been going on for about 2+ years now. So I'm not sure why you want to wait \"to see what happens with it for a little while longer\"...\n. ",
    "dougal": "Great commit.\nMy PR #617 conflicts with this, I will happily change my PR when this PR is merged.\n. Conflicts with PR #614, I will happily change my PR when #614 is merged.\n. Commit has now been update to resolve conflicts with PR #614.\n. Looks great!\nThanks.\n. Hi, sorry, forgot about this.\nThe cards are correctly recognised by AM, they are a Switch card, although some may now say Maestro on them due to branding transitions in Europe.\nWorldpay process a Switch as a Maestro, there is no separate code available for Switch, thus passing the Maestro code instead.\n. ",
    "rterbush": "As I mentioned in my response to #610, I discovered this while working with\nthe processor to debug some payment clearing issues. While it was not the\ncause of the problem, it was pointed out to me that the encap_char being\nused was invalid. If for some reason the API stops being lenient about what\nit accepts, it could break a lot of E-commerce sites, costing a lot of\npeople real money.\nThis also breaks the rule of being strict about what you emit since the\ndocumentation is clear that this is not an acceptable character.\nI have changed this in my setup and have not encountered any problems with\nit. It also appears that Travis is not complaining about the change.\nI'm not willing to die fighting for this one. Just wanted to take time to\npush back something I learned in the process.\n\nRandy\nOn Thu, Mar 28, 2013 at 7:07 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nThis breaks most of the remote tests for Authorize.Net; probably because\nsplit is assuming an encap_char of $. In general what is the issue with\ncontinuing to use $? While it's supposedly not supported, ActiveMerchant\nhas literally run hundreds of thousands of transactions using it without\nany issue. Have you seen a bug related to using $?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/615#issuecomment-15624268\n.\n. If you are sending any of the accepted encap_char in your submit, as\ndocumented on page 40, then I would consider that bad form. :-)\n\nhttp://www.authorize.net/support/AIM_guide.pdf\nx_encap_char Value: The encapsulating character\nFormat: A single symbol. For example:\n| (pipe)\n\u201c (double quotes)\n\u2018 (single quote)\n: (colon)\n; (semicolon)\n/ (forward slash)\n\\ (back slash)\n- (dash)\n- (star)\nNotes: The character used to encapsulate the fields in the transaction\nresponse. This is necessary only if your delimiting character could\npossibly be\nincluded in any field values.\nThe payment gateway uses the character passed in this field or, If no value\nis\npassed, the value stored in the Merchant Interface.\n\nRandy\nOn Thu, Mar 28, 2013 at 8:03 PM, John Duff notifications@github.com wrote:\n\nThis likely isn't a problem for you because you do not submit | in your\ndata anywhere, if someone did this would break.\nTravis does not run the remote tests, you should run those before\nsubmitting a patch for a particular gateway.\nI will get in touch with our contacts at authorize to see if this is\nsomething we need to worry about at all.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/615#issuecomment-15625585\n.\n. \n",
    "acwebionate": "Thanks @ntalbott This is actually all that I needed.\n. ",
    "mfrederickson": "I've seen #390 and curled https://secure.nelixtransax.net/api/transact.php and it responds immediately.\n. NelixTransax told me that the proper demo account credentials are:\nUsername: transaxdemo\nPassword: nelix123\nBut it did not help.\n. I was missing that, but it didn't seem to help.  It's weird because when I test this in the rails console I notice that the block cursor is blinking for a couple seconds after I submit the response line, then it freezes solid until the connection error.  Yet the computer itself (and internet) is still responsive.  Here's the code I'm using, maybe you'll see something I'm doing wrong.\n```\n    ActiveMerchant::Billing::Base.mode = :test\ngateway = ActiveMerchant::Billing::TransaxGateway.new(\n            :login => ENV[\"PAYMENT_GATEWAY_LOGIN\"],\n            :password => ENV[\"PAYMENT_GATEWAY_PWD\"],\n            :test => true)\n\namount = 1700  # $17.00\n\ncredit_card = ActiveMerchant::Billing::CreditCard.new(\n            :first_name         => 'Bob',\n            :last_name          => 'Bobsen',\n            :number             => '4111111111111111',\n            :month              => '8',\n            :year               => '2014',\n            :verification_value => '123',\n            :brand => 'visa')\n\noptions = {\n    :order_id => '1',\n    :description => 'sample'\n  }\n  response = gateway.purchase(amount, credit_card, options)\n\n```\nHere, you can see the creds in the console response\n=> #<ActiveMerchant::Billing::TransaxGateway:0x000000048b0318 @options={:login=>\"transaxdemo\", :password=>\"nelix123\", :test=>true}>\nAnd here's the whole error message\nirb(main):023:0>       response = gateway.purchase(amount, credit_card, options)\nActiveMerchant::ConnectionError: ActiveMerchant::ConnectionError\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:27:in `rescue in block in retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:19:in `block in retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:38:in `retry_network_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:18:in `retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/connection.rb:38:in `request'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:50:in `raw_ssl_request'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:30:in `ssl_request'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:26:in `ssl_post'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/activemerchant-1.31.1/lib/active_merchant/billing/gateways/smart_ps.rb:222:in `commit'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/activemerchant-1.31.1/lib/active_merchant/billing/gateways/smart_ps.rb:46:in `purchase'\n    from (irb):23\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/railties-3.2.13/lib/rails/commands/console.rb:47:in `start'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/railties-3.2.13/lib/rails/commands/console.rb:8:in `start'\n    from /home/mfrederickson/.rvm/gems/ruby-2.0.0-p0@kpos/gems/railties-3.2.13/lib/rails/commands.rb:41:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\nirb(main):024:0>\nI appreciate your looking into this.\n. Ruby 2.0.0.  As to the libraries, would that be my gem list?  What's\nbizzarre to me is that it works fine with other gateways.\nOn Fri, Mar 29, 2013 at 9:47 AM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nWhoops, this time with the password and login set:\nntalbott@joshua:~/git/active_merchant$ PAYMENT_GATEWAY_LOGIN=transaxdemo PAYMENT_GATEWAY_PASSWORD=nelix123 irb -Ilib -ractive_merchant\nirb(main):001:0> ActiveMerchant::Billing::Base.mode = :test=> :testirb(main):002:0> gateway = ActiveMerchant::Billing::TransaxGateway.new(irb(main):003:1*     :login => ENV[\"PAYMENT_GATEWAY_LOGIN\"],\nirb(main):004:1*                     :password => ENV[\"PAYMENT_GATEWAY_PASSWORD\"],\nirb(main):005:1*     :test => true)\n,\n                :month              => '8',\n                :year               => '2014',\n                :verification_value => '123',\n                :brand => 'visa')\noptions = {\n    :order_id => '1',\n    :description => 'sample'\n  }\n  response = gateway.purchase(amount, credit_card, options)=> #<ActiveMerchant::Billing::TransaxGateway:0x007fe8446e14d0 @options={:login=>\"transaxdemo\", :password=>\"nelix123\", :test=>true}>irb(main):006:0>irb(main):007:0*       amount = 1700  # $17.00=> 1700irb(main):008:0>irb(main):009:0*       credit_card = ActiveMerchant::Billing::CreditCard.new(irb(main):010:1*                     :first_name         => 'Bob',irb(main):011:1*                     :last_name          => 'Bobsen',irb(main):012:1*                     :number             => '4111111111111111',irb(main):013:1*                     :month              => '8',irb(main):014:1*                     :year               => '2014',irb(main):015:1*                     :verification_value => '123',irb(main):016:1*                     :brand => 'visa')=> #<ActiveMerchant::Billing::CreditCard:0x007fe8447ca158 @brand=\"visa\", @verification_value=\"123\", @year=\"2014\", @first_name=\"Bob\", @month=\"8\", @last_name=\"Bobsen\", @number=\"4111111111111111\">irb(main):017:0>irb(main):018:0*       options = {irb(main):019:1*             :order_id => '1',irb(main):020:1*             :description => 'sample'irb(main):021:1>         }\n=> {:order_id=>\"1\", :description=>\"sample\"}\nirb(main):022:0>       response = gateway.purchase(amount, credit_card, options)=> #nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @test=true, @message=\"This transaction has been approved\", @cvv_result={\"code\"=>\"N\", \"message\"=>\"No Match\"}, @authorization=\"1848100226\", @params={\"response\"=>\"1\", \"responsetext\"=>\"SUCCESS\", \"authcode\"=>\"123456\", \"transactionid\"=>\"1848100226\", \"avsresponse\"=>nil, \"cvvresponse\"=>\"N\", \"orderid\"=>\"1\", \"type\"=>\"sale\", \"response_code\"=>\"100\", \"customer_vault_id\"=>nil, \"city\"=>nil, \"merchant_defined_field_10\"=>nil}, @fraud_review=nil, @success=true>irb(main):023:0>\nStill working, so not sure what's causing you issues locally.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/634#issuecomment-15652032\n.\n. Yes, I also tried under 1.9.3.p392.  OK, I will try that.\n\nOn Fri, Mar 29, 2013 at 10:03 AM, Nathaniel Talbott \nnotifications@github.com wrote:\n\nWe're not testing against Ruby 2 yet, so I can't guarantee it's not\nsomething related to that. Have you tried under 1.9?\nI think your best next step would be to completely isolate things and see\nif they still fail; you can just clone the repo and run the irb commands I\ndid above and see if you get the same results.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/issues/634#issuecomment-15652768\n.\n. Pretty much the same...\n\nmfrederickson@artemisu:~/projects/active_merchant$ PAYMENT_GATEWAY_LOGIN=transaxdemo PAYMENT_GATEWAY_PASSWORD=nelix123 irb -Ilib -ractive_merchant\nirb(main):001:0> \nirb(main):002:0* ActiveMerchant::Billing::Base.mode = :test\n=> :test\nirb(main):003:0> gateway = ActiveMerchant::Billing::TransaxGateway.new(\nirb(main):004:1* :login => ENV[\"PAYMENT_GATEWAY_LOGIN\"],\nirb(main):005:1* :password => ENV[\"PAYMENT_GATEWAY_PASSWORD\"],\nirb(main):006:1* :test => true)\n=> #<ActiveMerchant::Billing::TransaxGateway:0x000000031c84c0 @options={:login=>\"transaxdemo\", :password=>\"nelix123\", :test=>true}>\nirb(main):007:0> amount = 1700  # $17.00\n=> 1700\nirb(main):008:0> credit_card = ActiveMerchant::Billing::CreditCard.new(\nirb(main):009:1* :first_name         => 'Bob',\nirb(main):010:1* :last_name          => 'Bobsen',\nirb(main):011:1* :number             => '4111111111111111',\nirb(main):012:1* :month              => '8',\nirb(main):013:1* :year               => '2014',\nirb(main):014:1* :verification_value => '123',\nirb(main):015:1* :brand => 'visa')\n=> #<ActiveMerchant::Billing::CreditCard:0x000000031ec230 @first_name=\"Bob\", @last_name=\"Bobsen\", @number=\"4111111111111111\", @month=\"8\", @year=\"2014\", @verification_value=\"123\", @brand=\"visa\">\nirb(main):016:0> options = {\nirb(main):017:1* :order_id => '1',\nirb(main):018:1* :description => 'sample'\nirb(main):019:1> }\n=> {:order_id=>\"1\", :description=>\"sample\"}\nirb(main):020:0> response = gateway.purchase(amount, credit_card, options)\nActiveMerchant::ConnectionError: The connection to the remote server timed out\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:27:in `rescue in block in retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:19:in `block in retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:38:in `retry_network_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/network_connection_retries.rb:18:in `retry_exceptions'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/connection.rb:38:in `request'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:50:in `raw_ssl_request'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:30:in `ssl_request'\n    from /home/mfrederickson/.rvm/gems/ruby-1.9.3-p392/gems/active_utils-1.0.5/lib/active_utils/common/posts_data.rb:26:in `ssl_post'\n    from /home/mfrederickson/projects/active_merchant/lib/active_merchant/billing/gateways/smart_ps.rb:222:in `commit'\n    from /home/mfrederickson/projects/active_merchant/lib/active_merchant/billing/gateways/smart_ps.rb:46:in `purchase'\n    from (irb):20\n    from /home/mfrederickson/.rvm/rubies/ruby-1.9.3-p392/bin/irb:13:in `<main>'\nirb(main):021:0> gateway.test_url\n=> \"https://secure.nelixtransax.net/api/transact.php\"\nirb(main):022:0> quit\nmfrederickson@artemisu:~/projects/active_merchant$ curl -L https://secure.nelixtransax.net/api/transact.php\nresponse=3&responsetext=Invalid Username&authcode=&transactionid=0&avsresponse=&cvvresponse=&orderid=&type=&response_code=300\nmfrederickson@artemisu:~/projects/active_merchant$\n. I've done that.  Another ISP, another machine (both running Ubuntu 12, one .04 one .10).\nYes, it does look that way, and I hate to take you away from more important things... just one last thing though...\nI see code for info, debug, and logger in the active_utils/common/connection.rb... how do I turn that \"on\" so I can see the output?\n. ",
    "jrust": "Makes sense.  I'm not sure, however, that encoding the fact of it being an authorize in the Response will help because void only takes identification  and options.  For that reason, what do you think of just having void take reference_txn_kind as one of the options?  Otherwise, void will have be able to accept either a String or a Response which breaks convention for how other processors work.\n. I've updated the PR with the discussed implementation.\n. @ntalbott, it might be good to note in the next release notes that Response.authorization for Litle now returns this concatenation of authorization and kind in case people were using authorization.\n. ",
    "england": "wops oO\n. ",
    "carlaares": "added a remote test \n. Can you remove the 123 value in the cvv argument. ",
    "lavijain": "url:\nhttps://test.timesofmoney.com/direcpay/secure/dpMerchantTransaction.jsp\nis not working when integrating payment gateway in staging(test).\nbut the live url works fine:\ni need to made my test url work to test some issues .\nhow to do it .\nplz help ..\nthanks in advance.\n. @ashish-d \nactually i am using this url directly to my custom page and i have tested this url also but it is not working.....\n:(\n. @ashish-d \ni am doing it the same let me post the form \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthis is my form but url not working it is giving error like:  \nInvalid referer. Click here to continue.\n. @ashish-d   plz check it out \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. @ashish-d   i think i can't post code here ...  :(\n. @ashish-d \ncan u help me about this:\nif they only changed the url or the requestparameter and it's attributes have also some change ........\nif there plz write down them ....\nthanks in advance\n. @ashish-d  yaa thnx man...\n. ",
    "ashish-d": "@lavijain Direcpay have changed their test url to - https://test.direcpay.com/direcpay/secure/dpMerchantTransaction.jsp\nYou can use the master branch in your gemfile for this to work in staging.\ngem 'activemerchant', :git => \"git://github.com/Shopify/active_merchant.git\"\n. I'm not sure how you are doing things but, refer this document http://code-cocktail.in/wp-content/uploads/2012/07/DirecPay-Integration-Document.pdf, it might help you solve your problem.\n. They have only changed the test url.\nMake sure you are using the right mechant-id and check with direcpay if they have whitelisted your domain.\n. ",
    "SagePaySupport": "Hi,\nI can confirm that you are able to Repeat the original payment as well as the subsequent Repeat.  \nIf you need any further help with this please let me know.\nThanks,\nSage Pay Support\n. ",
    "klebervirgilio": "Isn't compatible with ruby 1.8.7.\n. Hey Guys! Should I do anything else in order to get this pull-request merged??\n. ",
    "drasch": "I've revised the commit here to include a test.\n. ",
    "airhorns": ":100: , thanks John!\n. ",
    "ajporterfield": "@ntalbott Here's what I found when I tested the newly updated BluePayGateway class.\n1.  The issue I initially presented with the PAYMENT_ACCOUNT field was being formatted for ACH transactions has been resolved.\n2.  In the response, the params hash includes key/value pairs.  For some reason, the values are being returned as arrays.  I've included a sample response below demonstrating this.\n[\"MIKGR\"], \"PAYMENT_ACCOUNT_MASK\"=>[\"xxxxxxxxxxxx1111\"], \"CARD_TYPE\"=>[\"VISA\"], \"TRANS_TYPE\"=>[\"SALE\"], \"REBID\"=>[\"\"], \"TRANS_ID\"=>[\"100133497103\"], \"avs_result_code\"=>[\"\"], \"card_code\"=>[\"\"], \"response_code\"=>[\"1\"], \"response_reason_code\"=>\"\", \"response_reason_text\"=>\"This transaction has been approved\", \"transaction_id\"=>\"\"}, @message=\"This transaction has been approved\", @success=26, @test=true, @authorization=nil, @fraud_review=nil, @avs_result={\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}>\nShortly after submitting this issue (10 days ago), I reached out to BluePay's dev team directly.  They have sent me several updated BluePayGateway classes addressing both the PAYMENT_ACCOUNT issue and the issue I discussed in #2 above.  So far, their latest class has pass all my tests.  They indicated that they would submit this as a pull request.  Have they done this yet?  I'm not example sure what my role is in this, but I'd be happy to send you over the file for your review.\nThanks for your help\n. Thanks for the review, @girasquid.  I'll work on the test.  Yes, I think including the key is fine even if options[:custom_id2] is nil.  The same would apply to options[:customer] and other optional options.\n. @girasquid, I added a test to ensure CUSTOM_ID2 is in the params returns by post_data.  Is this what you wanted confirmation on?  I had to call two private methods, so it's kind of ugly.  If there's a better way to get the request params from the response object please let me know.  Thanks!\n. So I gave CommStub a shot.  Here's what I have locally...\ndef test_custom_id2_option\n  response = stub_comms(@gateway, :ssl_request) do\n    @gateway.purchase(@amount, @credit_card, @options.merge(custom_id2: 'ABC123'))\n  end.check_request do |method, endpoint, data, headers|\n    assert_match(\"CUSTOM_ID2=ABC123\", data)\n  end\nend\nBut I'm getting this error when I run tests for this file (rake test TEST=test/remote/gateways/remote_blue_pay_test.rb).  Do you have any words of wisdom?\nFailure: <false> is not true.\ntest_custom_id2_option(BluePayTest)\nactive_merchant/test/comm_stub.rb:49:in `teardown'\nAnother thing I noticed is that all tests pass when I just run rake test - even if I change me test_custom_id2_option to check something that doesn't match.  Why is that?\n. Thanks @girasquid.  I think they test is in good shape now.\n. Hey @girasquid, I wanted to follow up with you on this to see if you needed anything else from me on this PR?  Please let me know.  Thanks!\n. ",
    "schonfeld": "@jduff, there's something very strange with the whole naming convention for the credentials. \nYou asked why we changed the header comments from :credential1 + :credential2, to :credential2 + :credential3, but in reality, that was always the case in the code, as can be seen in the current integration's tests, and helper.rb:\nruby\nmapping :credential2, 'key'\nmapping :credential3, 'secret'\nIn fact, now that I've changed it to 1 + 2, and updated the tests, the tests keep failing, stating that: ArgumentError: Unknown key: credential1\nSo... which should it be? 1+2, or 2+3?\n. Reverted the credentials back to what they were, and removed all comment headers\n. Just noticed this was merged in! Thanks, @ntalbott + @jduff!\n. Moved the verification method to common.rb, and referenced it from both notification.rb, and return.rb\n. I believe this was renamed, because the original integration author had mapped the key & secret to credential2 & credential3 in dwolla/helper.rb, as such: \nruby\nmapping :credential2, 'key'\nmapping :credential3, 'secret'\nIs it possible that :credential1 is actually the Dwolla Account ID, while 2 is the key, and 3 is in fact the secret?\n. ",
    "rocanion": "I'm constrained by having to integrate this with Rails 2.3 on older Ubuntu 10.04 machine. As I recall I had to use that version of the ActiveMerchant gem for compatibility.\nHowever I did review the code in ActiveMerchant 1.32.1 and this file has exactly the same problems as the one in version 1.20.0.\nI don't see how you could be getting successful captures when your authorization code is actually the transaction id provided by authorize.net and not their actual authorization code. According to authorize.net's 'AIMDG.book - AIM_guide.pdf' documentation the authorization code and not the transaction id is required for a capture operation.\nIs the authorize.net documentation wrong, the code wrong, or something else wrong?\n. I have filed a tech support request with Authorize.net to get a definitive answer on the requirements for authorization codes.\nI still think that the ActiveMerchant code should return the actual authorization code where it claims to since the value is in fact available via the API. It is bad practice to claim to provide one value when in fact you're providing another (the transaction id in this case).\nBy simply closing this you're choosing to leave the code providing an incorrect value for authorization code. I don't see that as a good idea. Easy yes, but not good.\nDan\n. @noahlh Thanks for your effort. That sounds like a reasonable compromise. At least way we can access the actual authorization code value.\n. ",
    "noahlh": "Just want to chime in here as I'm discovering this exact issue as I'm testing ActiveMerchant with my Auth.net account.  What's happening is that Response#authorization is actually returning the \"transaction_id\" in Auth.net terms, not the actual 6-letter/digit authorization code generated by the card issuer.\nWhile the transaction_id may be usable to capture a charge directly in Auth.net, it is NOT usable outside of Auth.net.  So, for example, if you need to simply authorize an amount using Auth.net and then later capture it on a physical terminal (as I do in my business - we pre-auth on the web and then capture with a physical swipe using a physical terminal), you MUST use the 6-letter/digit authorization code, which as @rocanion has pointed out does not seem to be supported by ActiveMerchant at the moment.\nIf I were a touch better with my programming skills I'd submit a Pull request, but I'm not quite there yet (sorry) so my \"business case\" will have to do for now.  But if someone else can take a stab at this, it is truly useful and necessary for some transactions.\n. Ok scratch that - it wasn't that hard so I've submitted my first pull request on the issue ;)\n@rocanion Thank you for the code above -- instead of using what you proposed, I modified it slightly and instead added the authorization code to the Response#params.  This way, existing functionality is not changed for those that rely on the transaction_id as a means of capturing pre-authorized transactions.  \nHope this helps!\n. Absolutely - sorry I left those out!  I'll add commits shortly.\n. ",
    "superplussed": "Appreciate the work of all in this thread.  Helped me alot.\n. ",
    "drewblas": "Sorry guys, this was a mistake trying to PR into Shopify!\n. ",
    "Sjors": "@mnoack thanks. I sent bitpay.com an application to open an account with them. Once I have figured out if that works and if I have the time, I'll try to contribute a gateway. Should we keep this ticket open so that other people who are interested can find each other?\n. Ok, that's fine.\nCoinbase doesn't do bank transfers outside the USA, but that's not necessarily a problem. I'll see which API I like best.\n. ",
    "jordanmichaelrushing": "Any progress on this at all? Would love to get Bitcoin processing on my site!\n. ",
    "JoshMcKin": "Any feedback for this, i'd really like to get it out of an initializer.\nThanks,\nJosh\n. Hi @ntalbott \nSounds responsible. It was a quick patch to get a feature request going over here. Adding pinless_debit to CreditCard  would provide the other gateways stepping stone to their own implementation should the service exist. I should have some time later today to rework.\nThanks,\nJosh\n. Sorry for the delay got caught up in some finer details and wanted to get ya'll input before proceeding\nThere are actually 4 ways to Process a Debit Card:\n1. As Credit Card - processed over the credit card network as a credit card\n2. Debit Card (credit card) - processed over the credit card network but marked as a debit card\n3. With Pin - requires pin and is processed over Debit Card network\n4. Pinless - processed over a Debit Card network \nAlthough a card may be a debit card it does not guarantee the Gateway and its Merchant account will process the card as a debit card or that the Vendor (coder) wants every debit card to run as a debit card.\nI do thinks its correct to add #debit_card? to CreditCard but also believe its necessary to set the :pinless_debit option on a per transaction basis to account decisioning at the coder's client level. TrustCommerce and CyberSource support Pinless Debit and debit card decision on one level or another.\nAre you all ok with adding the debit_card? option to CreditCard and pinless_debit to the Gateways that support that feature?\n. ",
    "s-osa": "@ntalbott, thanks for your reply.\n- I'm sorry, I'll implement or remove commented out code.\n- It is possible to run remote tests in test mode. I'll write it.\n- GMO-PG(this gateway) has no public test account. All developers have to get their own ID and password.\n- It must send 2 requests in authorize or purchase. First one is to register transaction, second one is to commit it.\nI am fixing commented out code and writeing tests around failures.\n. ",
    "hron": "CI build failed due to timeout during bundle install. I think rerun of built will show green light for the commits.\n. @ntalbott I think this change will definitely break integrations which uses 'credit' call. Unfortunately, I can't test v3 (old) API by myself because my test account doesn't work with it. \nHowever, if I understand correctly, ActiveMerchant is useless for those merchants who obtained accounts recently, because they can't use v3 API.\nThe only option I can imagine is to implement both v3 and v4 API in ActiveMerchant and give users a choice. Unfortunately, I have no test account which work with v3 API, so I need help here. I am also not sure if that is a good way to follow.\n. So, I think having two separate gateways is a better option. I can restore the old class and make my work available as MerchantWareVersion4 class. \nLet me know what do you think folks! Thanks.\n. @ntalbott, please let me know if you find any issues with the new version with separated gateway modules for MerchantWARE. Thanks!\n. @ntalbott The test was updated according the new guides. Please have a look. Thanks!\n. The Travis build was failed due to timeout from rubygems.org. I think it's safe to merge my branch.\n. ",
    "maxwhite": "Yes, it is\n. With second attempt I have all builds passed exept one : https://travis-ci.org/Shopify/active_merchant/jobs/7221393\nIt seems it is not my problem. Should I create another pull request ?\n. Thanks for review and comments. I will fix these issues.  About the remote tests DIBS does not have test account that can be used for remote testing, thats why I had not included remote tests. Is it possible to do contribution without remote tests ?\n. ",
    "futhr": "@ntalbott DIBS do not have a sandbox so when you do remote tests you will actually spam your active account.....uch.......not ideal for a CI. We built a Spree gateway based on this branch (i have forked it so its frozen). As @maxwhite says in the commit msg, \"its huge in Scandinavia\" -but I think its a shame that it has such a outdated API ...I hope DIBS hear this and hire some Palo Alto developers ;)\n. def check_fileds(post) typo? def check_fields(post)\n. ",
    "cagerton": "@melari Whoops. I hadn't noticed that. It should be fixed now. Thanks for looking at it, and please let me know if you have any other questions about this change.\n. I think I've covered all of the feedback so far; is there anything else I need to change here?\n. Hey @melari or @jduff, would you mind taking a glance at this bug fix?\n. Is there anything else I need to do to get this fix merged in? \n. Great, thanks!\n. You're right; this is probably the wrong place to catch on fire if they change or add a field to their API.  I am worried that they may change the format of their response in the future.  Do you think it would be appropriate to add a test to remote_blue_pay_test.rb to ensure that the module understands all fields and API responses?\n. The behavior of setting the VERSION parameter to '3.0' is not defined in the Bluepay20post API.\nhttps://secure.assurebuy.com/BluePay/BluePay_bp20post/Bluepay20post.txt\n. These assertions a left over from when this module was a copy/paste job from the Authorize.net module; you can still see these assertions in remote_authorize_net_test.rb. \nThis might make some small degree of sense for auth.net's response format where these values are present as empty strings in every comma delimited response. It does not make sense to populate these values when they're not present in the bluepay20post form encoded responses.\n. This is a syntax error:\nfalse || ([]).include? ''\nThis is not:\nfalse or ([]).include? ''\nBut I can use '||' and add parens to 'include?(...)' if it's more consistent with the style here.\n. This method has been extracted again.\n. Fair enough. Done.\n. This test is now back/uncommented.\n. Well, both classes CreditCard and Check have attr_accessors + methods supporting first_name and last_name.  I don't think this gateway supports any payment methods that aren't going to be subclasses of those.\nEven if this name were blank and there was a name associated with the shipping address, bluepay is expecting this to be a name associated with the payment instrument.\n. I'd also like to point out that this is consistent with several other gateways and therefore shouldn't be unexpected behavior for any existing users. Here are a few that I checked on: authorize_net, eway_managed, balanced.\nAnyway, thanks for looking at this.\n. ",
    "Dieglock": "@ntalbott  Any branch you now about activemerchant that manages recurring (subscriptions) with paypal? sdk-merchant does not work with rails 4... There should be many people searching for the option. Thanks.\n. ",
    "jeffutter": "Just wanted to bump this since the new active_utils gem has been cut. I've pulled from upstream and re based. This patch should apply cleanly now.\n. They do indeed.\nThanks\nOn Dec 3, 2014 4:41 PM, \"Justin Mutter\" notifications@github.com wrote:\n\nCan you confirm that the remote tests\nhttps://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_money_movers_test.rb\nfor Money Movers all pass with this change?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1471#issuecomment-65505046\n.\n. Any update on if this can be merged? Let me know if you need anything else from me\n. Actually, you are right. I wanted to force it before they officially stopped offering SSLv3 since they were sending out notifications to anyone using SSLv3. However, if they ended it on the 10th as they said they were going to, AM should negotiate a proper protocol that MM supports. I have been running on a branch with SSLv3 forced, I'll try switching back to the official branch and make sure things still work.\n. \n",
    "amacneil": "No problem :)\n. ",
    "RichardBlair": ":shipit: \n. One comment, otherwise looks good. :shipit: \n. Perfect. :shipit:\n. :shipit:\n. :shipit:\n. Great write up.\nLooks good to me.\n. This formatting is messed. How do that know the different between 15 as $1.50 and 15 as in 15 cents?\n. Well, although that still sounds messed, but in a different way, :shipit:\n. Looks good. :shipit: \n. LGTM\n. lgtm\n. It would be nice to return an error that may be returned by refund_fee, so that we can log it.\nMy concern is what you mentioned yesterday, where the refund is successful but refunding the fees is not. In this case, I don't think the successful result object should be return, but the failure should be.\n. ",
    "spiritbear": "Ok, I will fix the changes, write test cases and submit a pull request\n. @psoots I have not checked that code in, we were busy with other stuff, but it simply involves changing the way the xml is generated (which means changing the order in which functions are called.). Did you want more specific details?\n. Yes sorry guys things have been a little hectic at my end, I will go back and check in my fix within a couple of days.\n. I have created a branch with my changes and completed testing, I am trying to push the branch and I get an error.\nERROR: Permission to Shopify/active_merchant.git denied to spiritbear.\nfatal: The remote end hung up unexpectedly\nI have never submitted a pull request before, can someone help me out with this?\n. Figured it out, submitted a patch. Let me know if you need anything else.\n. Any timeline on when this will be looked at?\n. @jduff sure I will do that, and add tests. It is weird, because this bug can only be caught while testing against a live system.\n. @jduff ok, I will do that\n. @ntalbott I submitted the pull request and added a case which tests the code I changed\n. Hey guys,\nAny updates on this pull request?\n. @ntalbott To answer your question, yes a bunch of tests fail. The reason behind this is not all cybersource test accounts are created equal, so testing features such as pinless debit are not possible on the test account I have, and those tests fail for me.\nCan you send me a gist of a list of tests that fail for you?\n. @ntalbott Subscriptions Tests should be failing without my changes :). I think subscription is part of a standard cybersource account, and in case it is not, I don't know how to enable that feature. \nCan you run the tests against my changes and check if the subscription tests pass for you (that will at least verify that you have subscriptions enabled and working for your test account). Please let me know the results of that. \n. @ntalbott this is the output I get when I run the tests on my machine, the only way we could do this, if I generate a transaction key for you to test with, and delete it once the testing is done.\n``` rspec\n[12/26] RemoteCyberSourceTest#test_successful_pinless_debit_card_puchase = 0.65 s\n  1) Failure:\ntest_successful_pinless_debit_card_puchase(RemoteCyberSourceTest) [/Users/shivindap/Documents/customerlobby-libs/active_merchant/test/remote/gateways/remote_cyber_source_test.rb:163]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[19/26] RemoteCyberSourceTest#test_successful_tax_calculation = 0.76 s\n  2) Failure:\ntest_successful_tax_calculation(RemoteCyberSourceTest) [/Users/shivindap/Documents/customerlobby-libs/active_merchant/test/remote/gateways/remote_cyber_source_test.rb:124]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[20/26] RemoteCyberSourceTest#test_successful_tax_calculation_with_nexus = 0.80 s\n  3) Failure:\ntest_successful_tax_calculation_with_nexus(RemoteCyberSourceTest) [/Users/shivindap/Documents/customerlobby-libs/active_merchant/test/remote/gateways/remote_cyber_source_test.rb:145]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n[23/26] RemoteCyberSourceTest#test_successful_validate_pinless_debit_card = 0.55 s\n  4) Failure:\ntest_successful_validate_pinless_debit_card(RemoteCyberSourceTest) [/Users/shivindap/Documents/customerlobby-libs/active_merchant/test/remote/gateways/remote_cyber_source_test.rb:326]:\n<\"Y\"> expected but was\n.\n[25/26] RemoteCyberSourceTest#test_unsuccessful_pinless_debit_card_refund = 0.60 s\n  5) Failure:\ntest_unsuccessful_pinless_debit_card_refund(RemoteCyberSourceTest) [/Users/shivindap/Documents/customerlobby-libs/active_merchant/test/remote/gateways/remote_cyber_source_test.rb:235]:\n<\"Successful transaction\"> expected but was\n<\"One or more fields contains invalid data\">.\n```\n. @ntalbott I will wait to hear back from you then.\n. awesome thanks :)\n. ",
    "psoots": "@spiritbear How did you change the library around to fix this?\n. Yeah, if you could at least point me to a reasonable fix/workaround, that would be super helpful.\n. ",
    "rousselle": "@spiritbear we have run into this problem. It would be very helpful if you could check in the fix. It would save us from duplicating your effort. Thanks Much.\n. ",
    "capablemonkey": "Merged.  Thanks, @melari!\n. @melari any news on this pull request?\n. Thanks a lot, guys!  Appreciate the help.  @melari @jduff @odorcicd \n. ",
    "thibaudgg": ":+1:\n. ",
    "coteyr": "The CI server is failing but it seems to be because of Nokogari not because of anything in my commits. \n. Removed the extra white space and some of the comments. Removed the dependency on addressable (it was included as a sub-dependency in testing) Added the tests you requested, but because of how the gateway works there paper thin. (it returns exactly the same thing for any successful transaction regardless of capture, auth, or auth and capture (which they call sale)).\n. ",
    "jordanwheeler": "Well the initial delay was because I was gone for a week to Euruko.  When I got back I wrote a test that worked fine on my machine (ha) so I didn't realize there was going to be a problem, but apparently it was failing in 1.8.7.  It looks like assert_equal wasn't returning a value in 1.8.7.\nI've updated the test and it's good now.\n@melari @jduff is this good to merge now?\n. Yeah, thanks.  I forgot that after I changed it from assert_equal.\n. just waiting for your :thumbsup: before i merge this @jduff \n. Yes, it's only these currencies that have a problem: CURRENCIES_WITHOUT_FRACTIONS = [ 'JPY', 'HUF', 'TWD' ]\nI was under the impression that PayPal is not OK with fractions for those currencies, which is the reason that @Soleone added this, but let's find out what he has to say.\n. \"Note: This currency does not support decimals. Passing a decimal amount will throw an error.\"\nSo yeah, we can't be sending decimals for these currencies.\n. Yep, that seems pretty gross indeed.  It looks like it should... mostly... work though.  Upon first glance I'm not sure what else we can really do in this situation without doing some sort of major overhaul and switching to rational numbers or something ridiculous.\nPayPal hasn't been very helpful with this one but I'll bug them again.\n. My PR will fix this.\n. Woohoo :thumbsup: \n. @jduff @BlakeMesdag I'd like to hear your thoughts on this one\n. There is no documentation about this.  There's PayPal documentation that those currencies will throw an error if you send them with a decimal, and there's documentation that you need to send an extra item with a negative number if you want to include a discount.  It seems like the rounding part is on us.  It's just because of the way we handle non fractional currencies, and it only pops up when we've got a shop like this one who has items that costs $4350 JPY and offers 5% discount codes.  \nWe don't do any rounding for these currencies, we just split at the decimal and take what's left.  That's fine in most cases, but when you have a $5.00 item and a -$1.50 discount, that results in a subtotal of $3.50.  Splitting at the decimal gives you a $3 subtotal and a -$1 discount, and $5 - $1 doesn't equal $3.  If you look at the issue I linked to you can see examples of what happens in these cases (the cart total does not match the item amount.)  \nIt seems to me like the solution is to either round up the order total, or round down the discount amount.  I went with rounding up the order total & item total because I thought it was the way to go, but maybe the other way is better.  \nWe talked to PayPal about this (maybe the wrong people?) but the answer was essentially \"don't send decimal amounts for those currencies, send an item with a negative amount to PayPal Express to use discounts, make sure everything adds up correctly.\"\n. Well it's already confusing on the Shopify side.  Currently we'll show the applied discount amount as 247.50, but in the summary in the top right the discount is shown as 248.  In reality, once the order is placed the discount ends up being 247.  Except right now the order total really is 4702, so it throws an error.\nI guess rounding the discount item down from -247 to -248 instead of rounding the order total up from 4702 to 4703 is probably a better approach then.\n. I realized last night that the entire fractional_discount_code? method is actually unnecessary now.  Calling .floor on -7.00 is still -7, so there's no need to check whether it's an even dollar amount or not.  Calling .floor on -7.01 to -7.99 will give the -8 we're looking for.\nI misinterpreted what you meant by non-fractional at first so I actually added a test for discounts in USD before adding the test for non-fractional discounts in the JPY currency.  I'll probably remove the USD test before rebasing, it isn't doing much.\nI've tested this in PayPal sandbox mode as well.\n. Hmm, yeah.  \"Project Shopify/active_merchant isn't configured with a deploy key or a github user, so we may not be able to test all pushes.\"\n. Cool.  LGTM :+1: \n. ",
    "demillir": "Will do.\n. I closed out #745 and refiled the Stripe fix as #779.  After I finish writing the remote tests for the Balanced fixes, I\u2019ll file a new pull request for that portion of my fork.\nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Thursday, July 25, 2013 6:05 PM\nTo: Shopify/active_merchant\nCc: Dan Milliron\nSubject: Re: [active_merchant] Two fixes: for a bug in Stripe multiple charges and support for more Balanced parameters (#745)\n@demillir https://github.com/demillir  have you had a chance to add some tests for Balanced?\nFeel free to split Balanced into a separate PR; doing that would let me go ahead and get the Stripe stuff merged.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/745#issuecomment-21595547 .Image removed by sender.\n. The master branch does not yet have this fix.\n. ",
    "GCorbel": "I Will find another solution. Tanks for your help!\n. You're right. It was a stupid error from my part.\n. ",
    "jzernisch": "You forgot to wrap you test code within an #it or #specify block. \n. Are you sure you haven't forgot the #it block as well?\n. I agree, but this error occurs within the internals of the RSpec DSL, so you would have to open an issue there I guess. \n. I did, but misunderstood :) Now I get want you meant. Sorry!\n. ",
    "mrbrdo": "Hah, I just ran into the same issue. Perhaps we should bring this to the attention of the rspec people? It fails so miserably in this case.\n. I did, but the error is disgusting and it would be nice to have a more reasonable one in this case.\n. Read what I said.. ^^\n. omg I ran into this again, and found this thread again :P I will open this on rspec mocks\n. @MattRogish you can check your RSpec version and if it's above where the guy said (in below issue) it's supposed to be improve, report it here https://github.com/rspec/rspec-mocks/issues/482\n. ",
    "jfedgar": "Yes. I have also run into this problem (stupidly) a few times. While, yes, \"shame on me\" for being fooled multiple times by this error message... it would be nice if it were a little more descriptive. \n. ",
    "MattRogish": "I also just hit this message. It's the first Google result for \"rspec stub_model undefined...\" :dart:  :D\n. ",
    "MichaelHoste": "Hi, is it because of the failed Travis build that it was not merged?\nThe only error is that I used 'in?' that's not compatible with old Rails versions. I did not noticed that before the pull request.\nWIll it be accepted if I change that (only a matter of seconds) ?\n. Oh I'm sorry, I missed it !\nThanks a lot for accepting the request !\n. @michaelbaudino I didn't need 3DSecure for my project, but I suppose it could also be pulled into active_merchant.\n@ntalbott When you merged my fork into active_merchant, you let the \"add_alias\" part out and I needed it for recurring payments. Did you forgot it or did I do something wrong ? What can I do to add it back ? (https://github.com/MichaelHoste/active_merchant/blob/add_be2bill/lib/active_merchant/billing/gateways/be2bill.rb)\n. @ntalbott thanks for the feedback, I'll try to add it back with store/unstore methods\n. ",
    "jerome": "+1\n. ",
    "michaelbaudino": "Thanks for that work, but what about 3DSecure ?\nI implemented it in my fork (https://github.com/michaelbaudino/active_merchant/blob/master/lib/active_merchant/billing/gateways/be2bill.rb), do you want me to create a PR to add it to your implementation ?\n. ",
    "ianbutler55": "Hi Nathaniel,\nOur acquiring and processing is licensed for all EU countries (including Croatia), in addition we are in the process of getting the licenses for Japan and US, which we expect by the end of 2013 or beginning 2014.\nDo I need to change the current ActiveMerchant pull request to progress the application? I will be updating the gateway code anyway soon.\nThanks,\nIan\nIan Butler\nTechnical Lead - App55\nEmail: ian.butler@app55.com\nSkype: ianbrfid\nAddress: App55 Ltd, 9th Floor, 8 Exchange Quay, Manchester M5 3EJ\nThe contents of this message and any attachments to it are confidential and may be legally privileged. If you have received this message in error, you should delete it from your system immediately and advise the sender.\nApp55 Limited, Registered in England and Wales with registration number 7199829, Registered Address: c/o Crowe Clark Whitehill, Arkwright House, Parsonage Gardens, Manchester, M3 2HP\nOn 5 Oct 2013, at 20:48, Nathaniel Talbott wrote:\n\n@ianbutler55 as per above, I just want to make sure the list of countries reflects places that merchants can acquire and use app55. Thanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. Many thanks, thats great news.\nIan\n\nIan Butler\nTechnical Lead - App55\nEmail: ian.butler@app55.com\nSkype: ianbrfid\nAddress: App55 Ltd, 9th Floor, 8 Exchange Quay, Manchester M5 3EJ\nThe contents of this message and any attachments to it are confidential and may be legally privileged. If you have received this message in error, you should delete it from your system immediately and advise the sender.\nApp55 Limited, Registered in England and Wales with registration number 7199829, Registered Address: c/o Crowe Clark Whitehill, Arkwright House, Parsonage Gardens, Manchester, M3 2HP\nOn 7 Oct 2013, at 12:58, Nathaniel Talbott wrote:\n\n@ianbutler55 no need to update at this point; I'll work on getting this merged as-is and then you can make tweaks (via new PR's) from there. Thanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Nathaniel,\n\nI've created a sandbox test account for you the details are:\nAPI Key QDtACYMCFqtuKOQ22QtCkGR1TzD7XM8i\nAPI Secret  yT1FRpuusBIQoEBIfIQ8bPStkl7yzdTz\nThis is really just for testing purposes as we would expect regular users will want to create their own test account.\nHope that helps,\nIan\nIan Butler\nTechnical Lead - App55\nEmail: ian.butler@app55.com\nSkype: ianbrfid\nAddress: App55 Ltd, 9th Floor, 8 Exchange Quay, Manchester M5 3EJ\nThe contents of this message and any attachments to it are confidential and may be legally privileged. If you have received this message in error, you should delete it from your system immediately and advise the sender.\nApp55 Limited, Registered in England and Wales with registration number 7199829, Registered Address: c/o Crowe Clark Whitehill, Arkwright House, Parsonage Gardens, Manchester, M3 2HP\nOn 24 Oct 2013, at 22:35, Nathaniel Talbott wrote:\n\nIn test/fixtures.yml:\n\n@@ -10,6 +10,10 @@\n #\n # Paste any required PEM certificates after the pem key.\n #\n+app55:\n-  ApiKey: Account Api Key\n  @ianbutler55 can you provide me with App55 credentials that I can run the remote tests with? Preferably that I can check in so other maintainers can also run them. Thanks!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Sbastien": "@ntalbott I just read in the wiki 'You shouldn\u2019t be inventing new options for the options hash that gets passed into the public methods.'\n. I found :customer in authorize_net, secure_net, stripe, realex .. I didn't check all gateways .. :) But i can change :customer by :client if you want !\n. It's done\n. indeed, I made a mistake here..\n. ",
    "sordina": "Hi Nathaniel.\nThanks for getting back to me.\nYes, the API can be used directly. If you like we can just move the functionality from the gem into the ActiveMerchant package, but this would have issues with keeping everything up to date with respect to changes, bugs, etc. We'll have a chat with the PayChoice guys to see what they would like to do.\nI saw a few other gateways that had gem dependencies, which was why I chose to take this approach, are these going to be moving away from this method too?\nLet me know if there's anything else I can do to help make the PayChoice addition go more smoothly.\n. @ntalbott Thanks for your feedback. I'll remove the gem dependency.\n. ",
    "danf": "Not yet. I've been working on higher priority stuff, but hope to get back to the Active Merchant project soon.\n. ",
    "shintre": "Hi Nathaniel,\nI liked your idea on the generic document. Hence, I have deleted the Paydollar specific document and added a new document README.Integration.md that has generic description on how to integrate with active merchant. But, it uses Paydollar as an example for ease of understanding.\nAs for the using the correct version of Nokogiri, I have made the changes per the \"activemerchant.gemspec\" file in the \"Shopify/active_merchant\" master branch.\n. @ntalbott can you please let me know if there is still something you would like me to change? If not can we have it merged into the main tree?\n. ",
    "nocache": "any progress on this PR? I'd like to get Paydollar working too.\n. I'm willing to help out if anything needs doing :) @shintre @ntalbott \n. ",
    "spk": ":+1: \n. Is there something wrong with this pull request ?\n. Hi,\nBefore this line we need to reset the Base.mode for this build\ndiff\n+    ActiveMerchant::Billing::Base.mode = :production\n+    assert_equal false, @paybox_system.test?\n+    ActiveMerchant::Billing::Base.mode = :test\n     assert @paybox_system.test?\n. ",
    "tfausak": ":+1:\n. :+1:\n. ",
    "anthonycollini": "+1\n. ",
    "bwanicur": "If that makes life easier, no problem.  Only down side to doing that is the people from Square will not get credit for their work.  Not sure if that is an issue for them.\nIs creating custom Response and perhaps CreditCard classes for AuthorizeNetCardPresent gateway too radical ?  I see that many gateways have their own directories under active_merchant/billing/gateways/ with similar classes.  Putting all of the AuthorizeNet files in such a directory could create backwards compatibility problems, right ?  Any suggestions ?\n. Yes, that makes sense.  I'm beginning to see why they did not try to merge back to master.  I think the track1 and track2 attributes are more important than returning the authorization_code.  I'll try to find a solution that does not effect the CreditCard and Response classes. \nHowever, having track1 and track2 data as separate attributes does makes sense to me.\n. Authorize.net requires different accounts for Card Present versus Non Card Present.  http://community.developer.authorize.net/t5/The-Authorize-Net-Developer-Blog/What-is-the-difference-between-Card-Not-Present-CNP-and-Card/ba-p/16916\nIt appears a lot of the common methods were overridden because of different requirements for Card Present.\n. @jduff Thanks again for your feedback.  I was able to slim down the AuthorizeNetCardPresent class by using a bit more inheritance.  However, one of the subtle differences between the Card Present and Non Card Present gateways is that there are x_ref_trans_id (card present) versus x_trans_id (non card present) parameters.  Without re-writing the way the post data is organized, I could not find an easy way to reuse the base class methods.  Therefore, for a few methods that need the x_ref_trans_id parameter, I just overrode them.  I'm open to suggestions for more efficient solutions.\nOne other significant change to the base class (AuthorizeNet):  Originally, passing in the :test option to the gateway would add the x_test_request=True parameter to the request and send the request against the testing endpoint.  I added a new option: x_test_url which sends the request to the testing endpoint, but does not add the x_test_request parameter.\nAuthorize.net provides a number of testing options:\n- Send test requests against testing endpoint or production endpoints with the x_test_request parameter.\n- Put the production endpoint in test mode and send requests against it.\n- (best option) Send real requests against a testing endpoint.  This allows one to capture the results and it most accurately mimics the production environment.\nIdeally, the AuthorizeNet class should provide separate, independent options for adding the x_test_request parameter and hitting the testing endpoint.  However, I could not change the way the :test option behaves and maintain backwards compatibility.  I thought the next best option was to have the :test_urloption remove the x_test_request parameter and send the request against the testing endpoint (Authorize.net's suggestion for the best way of testing).\n. @jduff Is this code still not DRY enough ?  Thanks again for your time.\n. For Authorize.net the authorization is the transaction_id - their own internal, unique id.  The authorization_code is issued by some banking institution. https://support.authorize.net/authkb/index?page=content&id=A469&actp=LIST\nIf the authorization_code is something not used by other gateways, perhaps Authorize.net should have it's own (subclass) Response object ?  Sorry, I did not understand your comment about leaving it in the params.\n. Yes, no problem.\n. It looks like the entire lib/active_merchant/common/ directory has been removed from master.\n. Authorize.net does support both track1 and track2 data.  They are each parsed differently.  Since they have different formats, ideally (for Authorize.net) they should have separate attributes.   \nhttp://www.acmetech.com/documentation/credit_cards/magstripe_track_format.html\nPerhaps other gateways (looks like Stripe is the only one currently using track_data) can parse either format.  The Authorize.net API requires separate parameters for each track format.  Again, maybe these attributes should exist only within the scope of Authorize.net Card Present objects ?  I'm not sure how many other gateways would require separate parameters for track1 and track2.\n. Thanks for catching that.  Sorry I do not follow on using stubs.   If I set a stub on a class method, won't I have the same problem ?  Also, did you mean to use ensure on the teardown method ?  If an exception pops up during a test, does teardown still get run ?\n. I decided to override it because it has a default option (options = {track_type: 1}).    I decided to add the default option since the add_creditcard method from the CP gateway requires that option.  I also renamed the paysource argument to creditcard, since only credit cards can be used here.  I do not think it's necessary to override thepurchase method, but it makes the code a bit clearer.  I could clean it up by using the super() method.\n. ",
    "dkharrat": "Any update on this one? Currently the the ActiveMerchant Stripe gateway is broken when using tokens.\nRegarding the approach, my vote would go to using regex to match the \"tok_\" string to determine if a token is used. This avoids having to use an extra is_token param that can easily be determined by the type of credit card that is passed.\n. ",
    "schwartzdev": "This is fixed by Pull Request #797 : \n- Allows both CardID and CustomerID to be passed to stripe as allowed by the Stripe API. \n- Allows creditcard argument to authorize() and purchase() methods to be a credit card object OR a stripe token OR a stripe CardID. \n. This fixes #770:\n- Allows both CardID and CustomerID to be passed to stripe as allowed by the Stripe API. \n- Allows creditcard argument to authorize() and purchase() methods to be a credit card object OR a stripe token OR a stripe CardID. \nPlease merge.\n. ",
    "swrobel": "@rdj did you find docs on how to do this anywhere or did you just reverse engineer? cc: @cbrunsdon\n. ",
    "rdj": "Hmmm, it's been a little while and I can't remember if this was in the published docs on Braintree's web site or if I had to poke around the source. Certainly it's not using private APIs or anything like that. \n/rdj\nSent from my iPhone\n\nOn Oct 11, 2013, at 6:21 PM, Stefan Wrobel notifications@github.com wrote:\n@rdj did you find docs on how to do this anywhere or did you just reverse engineer? cc: @cbrunsdon\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "bf4": "Great, thanks! :rainbow: (Sorry for the delay in responding. I've been out of town)\n. ",
    "mjc": "It looks like this code was changed in 399c69682b637cbae2025d9b29fcb0d164ca3500 in order to avoid breaking Ruby 1.8 installs.  Probably the way to do this without breaking either things that depend on ~> 1.6.0 or breaking 1.8 installs is to make the requirement depend on the platform.\nUnfortunately it seems adding a blank extension is the only way to do this.\n. @ntalbott ah perfect.  So, it would be excellent if this could be fast-tracked then, since with rails_admin installed on my rails4 applications I end up with activemerchant 1.34.0.\n. ",
    "rsl": ":thumbsup: \n. ",
    "bizla": "Closing this as I pulled it into #994 .\n. :+1: \n. :ship:\n. :ship:\n. Since Doku integration requires a client application to respond both to a Verify and Notify process, we treat both calls as Notifications. Based on the included parameters, we determine which we're dealing with and acknowledge accordingly. \nDoku includes a Redirect process that we can handle with a return, but the Notify process contains all the necessary information to assert that the transaction was successful, so no additional processing is done with the redirect parameters for this PR. \nNote that complete integration within Shopify requires changes in Shopify core.\n@odorcicd @melari \n/cc @louiskearns \n. Fixed the self.return and self.notification calls. \n@odorcicd @melari pls2bless.\n. [@odorcicd, @RichardBlair].any - merging on your :+1: \n. LGTM\n. :ship:\n. :pizza:\n. @odorcicd :eyes: please :heart: \n. Thanks for this @craigchristenson, a few other missing mappings caught my eye as a result of this. Moving your commits over to #1014 -- closing this\n. Clarified that comment, shipping on :green_apple: /cc @craigchristenson \n. :shipit:\n. Closing this. Merged and working code was pulled in from  https://github.com/Shopify/active_merchant/pull/994\n. :shipit:\n. :ship: that :shit:\n. :pizza:\n. could use a tad more whitespace :trollface: \njk :ship:\n. :pizza:\n. Agreed, unit test then :ship:\n. LGTM :+1: \n. Sucks that this mechanism drops the e-mail address but if there isn't an alternative then :shipit:\n. yeah, is this motivated by an open issue? If not, I think it'd be a better consumer experience to at least have all the information submitted be forwarded along, rather than make the decision to truncate that info in AM. Another way to look at it is whether this regresses the consumer experience.\nCode LGTM though. \n. One question but code LGTM\n. :fire: :pizza: :fire: \n. Minor comment, looks good overall! \n. Closing this for now. We'll flesh out a more complete implementation then re-PR. \n. haha, you didn't! I actually was closing this presumably as you posted your comment. I just wanted to confirm a successful roundtrip with a gateway before merging this. \nFor now, I think we're okay being explicit about keeping this as a concrete implementation, since there doesn't yet exist a need for the abstraction. I'm usually of the opinion of not abstracting anything unless there's a definite need for more than one type of something. (PTSD from the enterprise, maybe. :wink:) \nStay tuned.\n. Closing this on account of https://github.com/Shopify/active_merchant/pull/1437.\n. Currently working on getting all the prerequisite registrations with Apple and Auth.Net sandbox accounts done so we can validate the remote tests.\n. @ntalbott @Shopify/active-merchant Remote tests pass locally, would appreciate some review on this. \n. @girasquid @ntalbott @j-mutter Care to take a last look?\n. This LGTM. :pizza:\n. :+1:\n. Merging this on @aprofeit 's behalf.\n. ```\n$ rt test/remote/gateways/remote_authorize_net_test.rb\nRun options:\nRunning tests:\nFinished tests in 30.615383s, 1.0452 tests/s, 3.1030 assertions/s.\n32 tests, 95 assertions, 0 failures, 0 errors, 0 skips\n``\n. I'm _so with you_ on this @ntalbott. I'd love to see their API handle Apple Pay tokens directly but looking through https://github.com/stripe/stripe-ios it seems their own first-party integration relies on this mechanism... :cry:\n. Are we fiercely opposed to merging this or can I go ahead with this?\n. @ntalbott Switched up the code to make the token exchange a public method that tucks the Stripe token data into aResponse, andMultiResponse`'d purchases and auths as you suggested. The only endpoint that currently knows about Apple Pay data is the tokens endpoint so I stuck with that.\n@j-mutter @jnormore I'd appreciate another look too. :heart:\n. /cc @Shopify/active-merchant \n. @ntalbott There doesn't seem to be anything formally documented unfortunately. While I was remote testing, I had to regenerate Apple Pay tokens every day, since Stripe's API responses mentioned that 24 hour expiry if I used an old token. And I think this is just the nature of the security all these Apple Pay-like solutions are selling, i.e. your card data isn't ever kept anywhere. \nSo, my apprehension stems mostly from: \n- This is reverse-engineered from the iOS library. Nowhere in that source is there a store-like use case.\n- There's currently no formal mention of retrieving card tokens using Apple Pay like this on the API documentation.\n- The Apple PKPaymentToken reference cites that there exists only a \"Device-specific account number of the card that funds this transaction\" which doesn't seem like something that serves much purpose being tied to a customer, since it's meant to live only for the purposes of processing the single PKPayment. \n. @raycmorgan Maybe you can confirm the above for us? :heart:\n. @ntalbott Hmm, you're right that it'd be silly not to be able to purchase a subscription using Apple Pay. \nI think it would make a little more sense to keep the tokenize_apple_pay_token method since we probably don't want to spawn a Stripe Customer object every time someone uses Apple Pay, right?\nWhat about this: I'll add the conditional tokenize_apple_pay_token block into store, which should let me use the Stripe card token and attempt to commit that, if it works, then we're golden, if not, I'll merge this as is? \n. Awesome, thanks @raycmorgan! @ntalbott I'll go ahead and add the AP token exchange stuff into store then.\n. @ntalbott store stores Apple Pay! Care to take a look? \n/cc @j-mutter @jnormore \n. As @raycmorgan said: \n\nOnce you have a a Stripe token, you can attach that to a customer and use it like any stored card.\nand\nwe aren't against allowing direct POST /v1/charges with Apple Pay tokens and I agree that the current approach here isn't ideal.\n\nSo, as of right now all the card-consuming endpoints only know how to accept Stripe card tokens or JSON serializations of their card object, thus the necessary exchange from Apple Pay token to Stripe token. \n. @ntalbott Awesome, thanks for all the feedback as always. Hopefully we'll have a glorious PR of red once all these endpoints can take Apple Pay JSON directly. :smiley: \n. Got a :+1: from @edward (since he sits right next to me). Merging on green CI.\n. :pizza:\n. Sorry guys, this isn't ready for review just yet. Thanks for the keenness though. ;) \n. @ntalbott @girasquid @j-mutter This is ready for initial review. Ruthlessness in review is encouraged. :wink:\n. @ntalbott Thanks for the solid review. Ready for another look-over; voids have been removed until we have a better mechanism from Intuit, verify does $1 a auth only, defaults are in place for case statements, and the fraud_review is included in responses. \n. @j-mutter I have a more aggressive response to this in https://github.com/Shopify/active_merchant/tree/softcode_date_assertions if you wanna cherry-pick stuff from that.\n. LGTM on CI :green_heart: \n. :shipit:\n. @ntalbott My thinking is that if the API has been able to construct a JSON response, I want Response to be constructed regardless of status code -- since we can't really interpret the status code like we normally do and having sane JSON means the API actually processed the request enough to return a parseable response. (Also, I'm not sure exactly which 4xx or maybe even 5xx may be returned so I'd rather brute-force the parsing attempt but raise by default. I'll happily tweak this as their API matures.)\nAn example: A purchase with a declined card will return a 400 but a JSON body fitting the schema we use to construct the Response. I want that response body. \nBut, I can making the same request but with an invalid OAuth signature and I won't get JSON back; just a flat String. Raise that shit. \nSo, basically I'm interpreting \"ResponseError without JSON\" as a traditionally-interpreted ResponseError. \n. Oh, wow.Yeah I get that with rake test too. I usually run ruby -Itest locally without no noise. Maybe I'll have to patch the oauth gem? :confused: Dare I suggest suppressing warnings? :trollface: \n. That gem hasn't been touched in years it seems. Technically the patch would be to use whatever replaces URI.escape. I can take a look at doing that next week.\n. @ntalbott This should also get rid of that massive rake test noise we both saw.\n. :sparkles: :+1: :sparkles: \n. :+1: \n. See inline comments. I'd prefer to a bit more polish and a commit squash before we merge upstream.\n. Yeah. Pull requests are based off the diff between branches, so if you intended on a 2-line change, then your diff between master and your branch should be 2 lines. \n. Sounds good -- ping when you'd like a review.\n. Other than the whitespace comment, this looks okay to me. \nCould you squash this down to 1 commit with a descriptive commit message? Something like [PayGate] Add refund processing, accept :email and :ip to authorization parameters.\n. Looks good to me and tests passing. Merging.\n. Nice to see that this is coming one big learning exercise. :smiley: I feel like once we have a better overall grip on the tokenization landscape, we'll be able to iron out our data modelling a bit better.\n:ship: once the comments reflect the intent of PaymentToken vs NetworkTokenizationCreditCard \n. :+1: This is cool. \n. :+1:\n. :+1: \n. I'll always :+1: cruft removal efforts.\n. I'm with @ntalbott on all of this. I'd rather keep the ecosystem stable inside one gem and promote best practices for new integrations as much as possible. I'm fully on board with a quality policy too: I'd ideally like to see AM2 provide a \"remote-testable\" guarantee and have gateways provide/maintain API credentials for remote testing. Overly stale credentials could be construed as a disinterest in staying integrated in AM (and thus Spreedly and Shopify.) \nI also think it would make sense for there to exist a \"core\" API and then something like an active_merchant_extensions (working title :wink:) that takes care of integrations that don't/can't cleanly follow the API -- but are necessary to integrate -- like a Braintree. \nI'd also like for us to consider removing any consideration for Ruby 1.9 compatibility. \n. :heart_eyes: @j-mutter you continue to be a wind beneath my wings\n. Minor nitpick here too, otherwise looks good.\n. Merging.\n. :pizza: This is sweeeeeet.\n. Yes, the pizza means ship it. ;)\n. @jnormore for Auth.Net yeah, the blob was ripped from their API docs. \nTest failures aside, code LGTM :+1:\n. 38 -> 9 commits. Merging on :green_apple: if there are no objections.\n. The EMV APIs haven't been deployed to production merchant accounts yet, so those will continue to fail publicly, but the EMV test cases are passing here. Maybe I should add skips to those testcases until they can be green for everyone. \n. Apple Pay is tricky because the Apple Pay token has to be generated with an iPhone 6 containing the certificate associated to your test account. Are you folks okay with running the Apple Pay remote tests? For now, I have a branch that omits the EMV testcases on account of that API not being widely available yet. (Apple Pay currently is, though.)\n. No, unfortunately. The Apple Pay tokens generated in-app only have lifetimes of 24 hours IIRC, so the way we'd test internally is to generate a token through an iPhone 6, then fire it through our test account (where we've successfully done the Apple CSR dance.) So, similar to those Stripe tests that fail by default if you're not using Stripe Connect setup, the Apple Pay tests live there for you to run given the right testbed. \nStay tuned for the PR that omits the EMV remote tests though -- in retrospect, it didn't make sense to add those to the suite until the APIs are actually live for all production merchant IDs.\n. Yeah, Apple Pay and EMV are fairly specific so I'm cool with extracting them into their own test files. I'll get a PR in to do this. \n. This is wonderful. :+1: \n. DON'T LET IT HAPPEN AGAIN. :wink: This is a nice cleanup. :heart_eyes: \n. Make sure you don't merge this with the GitHub merge button. You'll want to merge using this method. I can merge for you when you're ready.\n. Remote tests pass and I've added the missing test assertions. I'll squash this bugger down. This should be ready to merge. \n@ntalbott || @duff : This PR adds a field to the CreditCard model too, I wouldn't mind a quick look before we commit this through. \n. LGTM. Don't merge using the green button though. I'll merge this after #1695 merges.\n. :pizza: I'll merge this in.\n. Yup. Just running through all the other PRs in order.\n. :pizza: I'll commit this on green CI.\n. LGTM.\n. One outstanding comment but otherwise LGTM.\n. :pizza: Merging.\n. Can you provide some context as to why this has to change? A test for this expectation would be appreciated -- even if it's just an extra assertion somewhere in Auth.Net card present tests.\n. :pizza: Merging.\n. Closed via 2a466b86aea8730b6499df88b56f3cc01f27ffa6\n. Looks like the original case was overwritten: https://github.com/activemerchant/active_merchant/commit/808a142691a3f452b07f275aeb1f96e4efe607cd#diff-b6ba33f7d7a676c8e0a4911fb561d9f6R490\nRemote testing with both cases works though (as it did before) -- I'll add the original test back.\n. Restored the card-token-only tests, all pass locally. I'll merge on your blessings. :rose: \n. :grinning: \n. Just some business questions, code LGTM.\n. :pizza: \n. Test added. Merging on :green_apple: \n. Closed via e54bef312b6aa9cb379825a8b7d9f0f291379469.\n. @aprofeit care to :eyes: ?\n. Merging on green CI.\n. Constantize the emv_authorization default strings and then it looks good to merge to me.\n. Looks good. I'll merge this in.\n. Thanks for this! :pizza: \n. :+1: code - make sure you edit the commit msg and CHANGELOG before merging\n:-1: :-1: :-1: :-1: :-1: Mercury\n. :+1: \n. Closing this as https://github.com/Shopify/shopify/issues/76739 tracks the actual AM bump.. The proper fix for this problem would be to construct a StripePaymentToken and have store handle it appropriately rather than guarding explicitly that an arbitrary String doesn't pass through. \nThe fix suggested in this PR is to ignore a String payment in the initial case, but the reasoning for that isn't obvious. Guarding against a primitive type at that level -- where we're still deciding on what how to express the thing we want to store -- is coding a little too close to the implementation.\nUltimately what you're actually after is having store handle the condition:\nruby\nif payment.is_a?(StripePaymentToken)\nwhereby, as you said, you want \nruby\nadd_creditcard(payment.payment_data)\nto be called. That's what the fix should look like. Doing so makes the relationship between payment tokens within this context and the desired effect obvious. \nThis means your consuming code would have to change to look something like: \nruby\nstripe.store(StripeGateway::StripePaymentToken(payment_data: token_string_from_stripe_js))\nwhich has obvious semantic benefit and fixes the interface to store properly. \n. > @bizla added StripePaymentToken but only added it halfway -- supporting it in some places but not others (e.g. not supporting it in StripeGateway#add_credit_card).\nThat's correct. StripeGateway#add_credit_card is not a public interface. It's a private helper method meant for specific consumers. It doesn't declare support for anything nor is it reasonable to think that it does.\nLook at the unit tests. While passing a string into store may have worked, there are no tests that suggest that this was an intended input with a guaranteed behaviour. \nThat doesn't mean it has to stay that way though. :wink: The interface to purchase does set a string-as-a-payment precedent. So, your code (and tests!) should coerce that expectation of store. Instead of... \nruby\nif !payment.is_a?(String) && card_brand(payment) == \"check\"\n...which is a logically unreasonable, since it's not about a String input specifically, it's about dodging the exception-throwing card_brand call, you could address the fear and fix card_brand. Have it return nil if it doesn't additionally respond to type, then you're no longer worried about passing garbage into it. It's more reasonable to pass a bad input into a pure function and get nothing rather than defensively avoiding input without a logical basis for the reader of the code. \nThen, as you desire, the original fall-through to add_creditcard happens, the code reads logically (you don't have to reason about why you have to worry explicitly about strings ever) and finally, your new tests which explicitly expect a string as an input pass, and everyone goes home happy.\n/cc @timbeiko \n. I've opened an issue since this needs a proper fix given the discussion here. I agree that this is a functional regression, but it requires a properly robust fix for merging upstream. \nKeep an eye on #2130 -- let me know if you're keen on testing in your staging environment once the fix has merged. \n. You're of course not restricted from forking the project as you require for your needs in the meantime. You've illustrated something that needs a little more attention that was initially assumed and for deployment onto Shopify and its scale, I have to be strict about a proper forward fix. That said, the next release of ActiveMerchant will have this issue resolved, and you should be able to submit the store calls as you expect.\n. Closed via 48b58efe660a9fc9522bc4d3fd8fb09c601c357c\n. \"sale\" == \"purchase\" (There is no sale method. :wink:)\n. Can you add a test?\n. LGTM!\n. > The goal would be to be able to discern from a Response what the actual error code was from the gateway and to also be able to get the standard_error_code which is Active Merchant's generic mapping.\n@duff Maybe we can add this to our AM2.0 wishlist in the repo's issues?\n. @hossamhossny For the add_capture implementation, I misspoke about my suggestion. \nThe ||= operator will overwrite a value if it's currently nil or false. \nTry this instead:\nruby\ndef add_capture(post, options)\n  post[:capture] = if options.key?(:capture)\n    options[:capture]\n  else\n    true\n  end\nend\nI think this will fix your add_capture test.\n. @davidsantoso Wouldn't mind a Spreedly \ud83d\udc40  on this!. > My only concern is maybe it shouldn't be the responsibility of #refund to void in case of an error?\nUltimately, AM modules should be written to guarantee that successful purchases can be fully refunded and successful authorizations can be voided/refunded. \nIn this case, I'm proposing we handle a Braintree-specific error that exposes a detail of their payment state machine (settled vs. unsettled) which can't be resolved with the AM protocol; there is no #settle_payment, so the fact that we void in the case of a full refund is really just an implementation detail. \nNow, a consumer of this module can write, with:\nruby\ngateway = ActiveMerchant::BraintreeGateway.new(...)\nSimply writing, with confidence: \nruby\npurchase = gateway.purchase(...) \ngateway.refund(..., full_refund: true)\n...knowing AM will do whatever wrangling is necessary to ensure the money ends up where it's supposed to. This is in contrast to handling the potential leakage of Braintree-specific situations like this: \nruby \nrefund = gateway.refund(...)\nunless refund.success? \n  if refund.params[:errors].any? { |_, v| v =~ ERROR_CODES[:braintree_cannot_refund_unsettled_payment] } \n    gateway.void(...) \n  end\nend\n\nIs there a precedent in AM where a #refund method voids a transaction?\n\nThere hasn't been yet AFAIK. In this case, the fact that we're issuing a \"void\" is mostly an implementation detail. It just happens to be what's necessary to ensure that a successful-but-unsettled Braintree purchase is refunded/cancelled/undone/settled-as-cancelled/whatever :)\n. ping @duff @ntalbott - this shouldn't interfere with anything on the Spreedly end but I'd like your stamp of approval before merging this :). Closed via https://github.com/activemerchant/active_merchant/commit/1ba258f4bc4029983e378f6be83e776b0ded9d2b.. ping @davidsantoso (or someone else from Spreedly \ud83d\ude04). @davidsantoso I was at odds with the naming of the option too. To answer your questions: \n\nwhy would I pass in that option if I'm already sending in the full amount? ... Considering in the past that this has been considered out of scope for Active Merchant.\n\nActiveMerchant still doesn't know that the amount is the full amount unless you explicitly say so. That's why I tried to make it as optional as possible; you'll still get \"but I'm not settled!\" errors by default. The AM-consuming system is still ultimately responsible for setting that flag since it has the actual context. So, in those cases, we have to somehow communicate that what we're after is a full refund by any means necessary. \n\nwhy would I need that option if I'm wanting to refund a partial amount?\n\nGood question... maybe force_full_refund_if_unsettled would be better in general? That way the interface is more clear that you're aware of possible unsettlement and that you want AM to do whatever's necessary to make a full refund happen.\nHow about this?\nruby\ngateway.refund(100, authorization, force_full_refund_if_unsettled: true)\n(I didn't want to mention void specifically because forcing a full refund may not necessarily be done by voiding. What's involved to force a full refund should remain an AM implementation detail.)\n. Thanks @davidsantoso - I'll merge this on the CI \u2705 . The 2Checkout Documentation suggests this should be Secret Word + Seller ID + order_number + Sale Total, i.e. what was there before. Did this change?\n. My mistake, I see sale_id + vendor_id + invoice_id + Secret Word for the INS messages. As you were! ;)\n. Yeah, the \"Verify\" step (the first of 2 notifications) doesn't tell us anything valuable, so we're absorbing it in our handler and rely on the \"Notify\" step to motivate the creation of the transaction.\n. If it makes sense to do with this gateway, you should also implement a cancelled? method\nSee https://github.com/Shopify/shopify/blob/master/app/controllers/orders_controller.rb#L121\n. I feel like you'd be able to work with hash directly do accomplish what you're after, so you don't have to explicitly type check here. Mind pasting the example XML response(s) that motivate needing to do this?\n. Not super crucial since there's only the one test, but \"order-500\", \"0987654321\", \"123.45\" are all expectations in later tests, so you might want to keep them as instance variables in your setup and use them instead\n``` ruby\ndef setup\n  @orderRef = 'order-500'\n   ...\ndef test_basic_helper_fields\n  assert_field 'orderRef', @orderRef\n``\n. Split this out intotest_production_urlsandtest_test_urlssince you have two separate initial conditions here. \n. Withassert_equal, the expectation goes first. \nAlso, instead of the hash string itself, use the hashing method so it's clear as to what **sign** is supposed to be doing. \n. I think you meantstatus == 'Completed'here. :wink:\n. Looks like this should beprivate. Agreed on this.\n. Do we want to use an ActiveMerchant exception here instead of a generic exception class maybe? \n. Cool, LGTM then.\n. What do you think about adding an explicitexpects(:add_verification_string)as part of your test?\n. Not a separate test really, just an added expectation.\n. We can just force consumers to pass inCompleted,Failed, orPendingas theirx_result` no? \nThen this is just \ndef status \n  @params['x_result'] \nend\n. Can't remember if success, failure, etc have magic meaning in AM core...\n. :+1:\n. :cool:\n. Why this?\n. :+1: \n. As a maintainer, I'd personally prefer this kinda stuff be explained in an inline comment, what do you think? \n. :+1:\n. You could assert_raise this.\n. There doesn't seem to be a distinct key for in-person transactions. (See: http://developer.authorize.net/api/reference/#apple-pay-transactions) \nThis may just refer to the fact that the payment token is generated within a PassKit-enabled app.\n. Yeah, I meant for metadata to be a private interface that could be used in vendor-specific implementations, e.g.\nruby\ndef vendor_specific_field\n  @metadata[:chocolate_chip_count]\nend\nso you could do vendor_specific_token.vendor_specific_field in a concrete token class. \nDoes that make sense?\n. Not for testing Apple Pay.\n. Technically, the first argument will be dumb-bound to payment_data. For the scope of this testsuite, we just want to make sure the appropriate XML snippets are rendered out.\n. These new credentials do work, they're bound to an account that's Apple Pay enabled. \n(It's the credentials used on their API page.) I was able to run all the Authorize.Net remote tests without a hitch with these.\n. OH. :confounded: You're talking about the comment. Right. I can put it back. \n. I'll change this to be a little more real-life.\n. Yep.\n. Hmm, this is meant to be representative of the PKPaymentToken more than the larger PKPayment. I think this is fine on account of the billing/shipping addresses coming down the wire for our use-case... but this may need to be revisited.\n. Yeah, good idea.\n. This is the raw response from the Stripe API, so technically it should stay as-is. :wink:\n. Yes, the de facto return for these transaction methods is a Response -- and it's consistent with the other tests in the suite.\n. Good eye. That shouldn't be there. Fixing.\n. I thought about that, but unless my understanding of store's purpose is off, I'm not sure that it really makes sense here. The Apple Pay tokens expire after 24 hours; they're meant to be throwaway data for a single transaction, so it didn't seem to make sense to put that logic into store. \nDoes that make sense?\n. Cool. I'll do that.\n. It doesn't. This just calculates the Signature Base String for us, whereby the parameters of the request need to be known to form the signature, but at this point any external calls have already been made (by virtue of having the access token credentials at this point already.) \n. @girasquid Cool, we'll do that. \n@ntalbott Unfortunately we're dealing with OAuth 1 here. :disappointed: So yes, at this point I have an access token and token secret that's reusable, but each request also requires a signature seeded by a combination of the request's HTTP verb and URL parameters; something I can't know beforehand. Would love some Bearer auth here instead.\n. Basically, OAuth::Client::Helper#header does all this stuff for us.\n. This is done.\n. Yep, that's better. Changing it up.\n. Agreed. It was in here entirely because of some awful void scenarios. I'll kill this and the void implementation altogether.\n. Agreed. We've asked them to provide a sane endpoint for voids instead of having to do this.\n. According to their dev contact, we should be good here.\n. Cool, I'll remove it.\n. I think we're safe here since we're in a private helper method. The exceptions that flare up are confusing, so to keep things clean, I'd prefer to keep this the way it is -- since this is just about constructing a request object appropriately for the Ruby being used. The Oauth headers method will barf if the URI is malformed anyway.\n. Can do.\n. Good call.\n. @ntalbott does Spreedly rely on verify being available?\n. Certainly works for me. Let's do that.\n. We're not supporting this as of yet either, I'll remove it entirely.\n. Currently, no.\n. Yes, done.\n. Yeah, you're right. I'll amend.\n. This was needed to satisfy the gem's client helper interface. It's needed for the Signature Base String. Since we have the method param already, we can just use it directly and not have to construct any URIs.\n. :+1: Switching it up.\n. Doh, I had that but didn't commit it. I'll amend.\n. Hmm, you're right, but the remote tests passed? heh I'll fix it.\n. Please fix indentation here.\n. This isn't required on account of the subsequent assert_success. \n. Add a newline above this.\n. This method is largely a duplication of #commit. If you want to add the ability to pass in authorizations, augment the #commit method rather than duplicating it. See other integrations for examples of this.\n. The block\nruby\nmoney = options.delete(:money)\nauthorization = options.delete(:authorization)\nis repeated unnecessarily inside each case block. I'd suggest you take the opportunity to clean this up, i.e. move these lines above the case statement such that it looks like: \nruby\nwhen 'authtx'\n  build_authorization(...) \nwhen 'settletx' \n  build_capture(...)\nwhen 'refundtx' \n  build_refund(...)\n. I'd suggest you look through a mature integration like https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb for ideas on how to structure your code to cleanly handle many cases.\n. :+1: sweet\n. I think you intended to line up the = here? Sorry to be so picky about whitespace. ;)\n. We have the PaymentToken class that intends to abstractly represent tokenized data. If we have a better understanding on how to model this kind of tokenized data, then I believe we should extend PaymentToken rather than introduce a new CreditCard subclass. \n. Typo: \"decrupted\"\n. Minor: Probably want to link to https://developer.apple.com/library/ios/documentation/PassKit/Reference/PaymentTokenJSON/PaymentTokenJSON.html (i.e. the non-prerelease docs) \n. I like the fool-proofing here actually. :)\n. Right, I'm seeing that now. :cool: (I'm cheating, we totally discussed this offline. ;))\n. Can you add some clarification commentary here and in PaymentToken? \nThat is -- if I'm correct -- some language to describe that: \n- NetworkTokenizationCreditCard is exactly like a credit card but with EMV/3DS standard payment network tokenization data\n- PaymentToken is meant for modeling proprietary payment token structures (like stripe and apple_pay) \n. :disappointed: \n. :cry: this is a thing of beauty\n. Yeah, now that the context is a little clearer, the comments seem good enough. \n. but can be overridden\n. +1\n. Subtle difference, we're supposed to post to charges/:authorization in this case and to charges/:authorization/capture in the else.\n. Note the /capture here that isn't in the initial if's commit call.\n. Oh yeah, probably. I'll add it.\n. Yeah, everything is in the passed ICC data.\n. Yup. Changing it up.\n. A lot was happening in this method before, so this is the residue I guess. ;) I'll change it.\n. Yes, it'd make the EMV chip unhappy and then we'd know to stop the transaction.\n. Because Stripe technically has everything they need to capture funds, but it's ill-advised to do in actual practice, since we need a message back to the chip to actually finalize the transaction on the card level. I put the comment there so we know to never use a purchase in the EMV case.\n. I'll clarify the comments.\n. Yeah, this should probably be isolated to the Stripe tests. I'll move it.\n. Though about that, but then I'd have to still ask if payment.respond_to?(:emv_payment?) since payment isn't guaranteed to be a CreditCard. \n. So you'd prefer we go from: \nruby\nclass StripeGateway\n...\ndef emv_payment?(payment)\n  payment.respond_to?(:icc_data) && payment.icc_data.present?\nend\nto\nruby\nclass StripeGateway\n...\ndef emv_payment?(payment)\n  payment.respond_to(:emv?) && payment.emv?\nend\nwhere\nruby\nclass CreditCard\n...\ndef emv? # also needs tests\n  icc_data.present? \nend\n? \nDoesn't seem better, but I might just have cabin fever. :disappointed_relieved: : \n. :ok: Done!\n. Yep, the icc_data essentially replaces the transaction JSON. It's the JSON of like... 1981.\n. There is spoon.\n. +1\n. I'd append a _by_default.\n. encrypted_pin_ksn instead? id suggests this is an index of some kind. \n. So a credit card carries on it an ID rather than a KSN? The acquiring bank knows what to do with it?\n. Sure, ultimately we want to keep this as generic as possible and make the gateway adapters worry about their field name. Since this is a KSN, the field should be called key_serial_number or encrypted_pin_ksn -- something that makes it obvious for use in other adapters. \n. You'll want to add some unit tests for this. \n. This can be simplified as: \n``` ruby\ncode = response['error']['code'] \ndecline_code = response['error']['decline_code'] \nif decline_code && code == 'card_declined'\n  STANDARD_ERROR_CODE_MAPPING[decline_code] \nelse\n  STANDARD_ERROR_CODE_MAPPING[code] \nend\n. ruby\ncode = response['error']['code'] \ndecline_code = response['error']['decline_code'] \nerror_code = if decline_code && code == 'card_declined'\n  STANDARD_ERROR_CODE_MAPPING[decline_code] \nelse\n  STANDARD_ERROR_CODE_MAPPING[code] \nend\nerror_code\n. I don't think you want to do that actually, since `card_declined` just happens to be our mapping string as well as Stripe's. Stripe could change that string and this snippet would suggest they're supposed to be the same. \n. Probably can omit this assertion altogether.\n. A comment next to that line would be helpful IMO. \n(Or instead of `new` would a a class method on `NetworkTokenizationCreditCard` like `test_credit_card` be useful here? Is that cryptogram reusable?)\n. Constantize `\"155\"` to give it some semantic value?\n. why not a simple `assert`?\n. :cool:\n. :heart_eyes: \n. No test endpoint anymore?\n. Old endpoint didn't like voids?\n. :cool: :sunglasses: \n. :+1: \n. You can do `paysource.try(:emv?)` here.\n. `\"8A023030\"` should be a constant so it reads more easily to those not familiar with EMV.\n. Same here re: constant.\n. +1\n. Yep, bit of a misnomer on the test name. Something like `test_bad_track_data_in_track_1` should suffice. \n. Nah, it's for CRM-like stuff for Stripe account holders. Note that these tests don't run on CI and there are no EMV test credentials in this repo by default, so this is mostly for our own spot-checking. \n. Forgot to add this on my last merge \ud83d\ude2c . `test_failed_refund` covers that.. Already up @ https://github.com/activemerchant/active_merchant/pull/2403. Yep, because there's an `expects(:ssl_post)` \nIf void (or anything) was called after the refund response, the test would \ud83d\udca5 . This implementation can be simplified:ruby\ndef add_capture(post, options)\n  post[:capture] = options[:capture] || true\nend\n. This looks like it can be cleaned up too:ruby\ndef commit(...)\n  url = ...\n  raw_response = ssl_request(...) # throws ResponseError\n  parsed_response = parse(raw_response) # throws JSON::ParserError\n  success_response(parsed_response) \nrescue ResponseError => e\n  error_response(parse(e.response.body))\nrescue JSON::ParserError\n  unparsable_response(raw_response)\nend\n```\n. You'll want to do handle body[\"response\"] being nil. What if this is nil? . Use Ruby 1.9+ Hash syntax instead:\nruby\npost[:card].merge!(\n  address_line1: address[:address1] \n  address_line2: address[:address2]\n  .... Same here re: Ruby 1.9+ Hash syntax, i.e.\nruby\nnumber: credit_card.number,\nexpiry_month: creditcard.month,\n.... Use new Hash syntax here throughout this file too. (Sorry for nagging so much! \ud83d\ude2c). You might as well use the same construct that reads beautifully in the implementation! :)\n``ruby\nexpected_supported_countries = %w(AD AE AT AU BD BE BG BN CA CH CY CZ DE DK EE EG ES FI FR GB\n                                  GI GR HK HU ID IE IL IM IN IS IT JO KW LB LI LK LT LU LV MC\n                                  MT MU MV MX MY NL NO NZ OM PH PL PT QA RO SA SE SG SI SK SM\n                                  TR TT UM US VA VN ZA)\nassert_equal expected_supported_countries, TrexleGateway.supported_countries   . As you have it implemented right now, every caller to#success_responsewould have to know to check forbody[\"response\"]` first.\nThe smell is that I could theoretically write:\nruby\nbody = { 'invalid_key': 'invalid_value' }\nsuccess_response(body)\nwith possibly unexpected results, because #success_response just assumes that body[\"response\"] is there. What if it isn't? \ud83d\ude09 \nSo that's why I'd prefer to see: \n```ruby\ndef success_response(body) \n  return uh_oh_something_bad_happened unless body['response']\n# do things now that I've ensured I have a body that I can work with\nend\nand also why I posed the questions of what to do if these functions are called with `nil` or a Hash that's not formed as you expect. (This can happen if suddenly the response schema from a gateway changes even slightly!). If I write...ruby \nbody = { something_unrelated: '123' }\nerror_response(body) \n``\n...shoulderror_response` not complain?. My mistake; you want capture by default if not specified. \nStill, this ternary is a bit ugly. \nTry:\nruby \ndef add_capture(post, options)\n  post[:capture] = options[:capture]\n  post[:capture] ||= true\nend\n. Yes, but the logic can be expressed more cleanly. See my other response. \ud83d\ude04 . In general, you shouldn't mutate parameters. You should reuse the add_amount, add_customer_data functions here and instead protect against a capture: true option being passed in. . Remove and replace with your add_* functions with a commit at the end.. Use Ruby 1.9+ Hash syntax here.. Indentation should be \nruby\nvariable = if condition\n  statement\nelse\n  statement\nend. Those comments were to aid your understanding, but probably don't need to be in the actual code. :). Trim whitespace. Trim. Whose IP is this? :). This line still needs removal.. You still want the capture option added to the post for authorizations?. If I call authorize(100, credit_card, capture: true), what should happen?. Which is wrong. :) authorize should never capture... but you should also never mutate the parameters from the caller, so you shouldn't mutate options. \nWhat you want is to ensure post[:capture] = false, i.e. you just want to ignore options[:capture]... can you think of how to change the implementation to accomplish this?. How about just a post[:capture] = false before the commit? . So does add_capture still need to exist?. You can return unless statement_address = options[:statement_address] . Would you maybe prefer\nruby\nreturn unless [:address1, :city, :zip, :state].all? { |key| statement_address[key].present? }. What if I pass in a statement_address[:postal_code] value instead of :zip? Should this accept either one?. We should add a test for this, something like:\nruby \ndef test_add_statement_address_returns_nil_if_fields_missing\n  post = {}\n  [:address1, :city, :zip, :state].each do |required_key|\n    assert_equal nil, @gateway.send(:add_statement_address, post, @options.delete_if { |k| k == required_key })\n  end\nend. \ud83d\ude0d . A small comment as to what that hex string corresponds to would be helpful.. \ud83d\udc4d  Nice cleanup.. Typo: Contacless. Can do double quotes instead of escaping ': \n\"Magstripe was read because the card's chip failed.\". ",
    "alan-andrade": "@melari Do you think this is good to go ?\n. ",
    "cbetta": ":+1: awesome work\n. :+1:\n. @jduff this uses the new PayPal REST APIs. In the future all of the functionally from PayPal will slowly move over to this one API. It's recommended people start moving over as soon as possible if they can.\n. ",
    "prannamalai": ":+1: \n. ",
    "ppalavilli": "Can this be merged please ? :+1: \n. ",
    "siddick": "@ntalbott, I will update this pull request after removing the external gem dependency.\n. ",
    "cjoudrey": "Definitely. Do we currently have a way of tracking v2.0 stuff? Is it something we're actively working on?\n. Once CI is green. :shipit:\n. LGTM\n/cc @jduff @melari since they were on the initial PR: https://github.com/Shopify/active_merchant/pull/794\n. > Not sure what you mean with the whitelist comment. Do you mean something other than the payment providers system in Shopify?\nI think he meant having a static array of supported gateways instead of blindly doing Billing.const_get(\"#{name_str}_gateway\".camelize).\n. If Valitor uses comma's for cents, is it using dots for thousands? If so, this will still crash.\nI would use our Money gem to parse it. It's far more robust than blindly #sub'ing. See https://github.com/Shopify/money/blob/master/lib/money/money_parser.rb\n. > [...] are you suggesting we use Money.parse here in #gross?\nYeah, I figure better safe than sorry, especially if we don't know.\n\nSo AM depends on the money gem\n\nMore reason to do so.\nBtw, thanks for tackling this. :)\n. w00t! :rocket: :moon:\n. That's a great point. I hadn't thought it.\n\nOn Dec 13, 2013, at 3:13 PM, Jesse Storimer notifications@github.com wrote:\nI haven't closed this yet because @Smcchoi brought up a good reservation. Although sub(',', '.') is brittle, Money.parse may be too permissive.\nIf you have a look at the specs for the money parser, it allows a whole lot of different formats. In this case, it turns out that Valitor gave us the transaction amount in a format we didn't expect and the code broke. That was probably a good thing. It gives us a chance to review the format(s) that Valitor is using and make sure that we convert it to the expected value.\nIf all the Notification#gross methods were to use Money.parse, it's possible that an unexpected format like this shows up from a gateway and gets passed through incorrectly without anyone noticing. In this case, I'd prefer to find errors from brittle code rather than passing through the wrong dollar amount because our parser was too good.\nDo you guys agree?\n\u2014\nReply to this email directly or view it on GitHub.\n. Makes sense. Hopefully nobody depends on those messages. o.O\n. FYI @JamieS \n. @ntalbott @edward @girasquid for context this was reverted because an emergency fix had to go out and we weren't certain if this had been properly tested given this comment: https://github.com/Shopify/active_merchant/pull/1297#issuecomment-53641008\n. cc @cgarceau \n. > seems kinda hacky\n\nI agree. I'm guessing we do this because each gateway has different validation rules for this. Some probably let you omit :state while others absolutely want a value for :state even if country doesn't have any.\n. You'll need to bump this too: https://github.com/Shopify/active_merchant/blob/9985cf51f75a0ca068c3910c9aa3e7c161803508/lib/active_merchant/version.rb\n. Better :)\n. > I am uncertain if we should at some point start having a remote integration test that validates what we are actually receiving.\nMight be tricky to write but not impossible, I think.\nYou'd have to generate a URL to hit PayPal Express Sandbox, load the URL, fill out the PayPal payment form with fake credit card, add a note, hit submit, follow the redirect url with the token, fetch the data for the given token.\n. Unfortunately tokens expire after 30 minutes that's why I proposed the\nabove solution.\nSince this is causing an actual checkout bug I'd :rocket: and open an issue\nto discuss how we should write an end to end test with PayPal Express.\nWe used to have a browser test for this in shopify/shopify but as you'd\nsuspect it was super brittle due to network. I think using VCR and regular\nhttp requests could make it less brittle though.\nOn Saturday, November 1, 2014, Izaak (John) Alpert notifications@github.com\nwrote:\n\nYou'd have to generate a URL to hit PayPal Express Sandbox, load the URL,\nfill out the PayPal payment form with fake credit card, add a note, hit\nsubmit, follow the redirect url with the token, fetch the data for the\ngiven token.\nThis seems pretty brittle -- more likely to indicate failure where there\nis none. I wonder if it's possible to have a token that doesn't expire for\nthese kinds of cases; that way we aren't testing that humans can enter the\nform properly, just that our integrations don't break.\nThe other side is that paypal-express is a very large gateway\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1444#issuecomment-61389269\n.\n. What's the status on this? Can we get this shipped?\n. Could you add a few tests to https://github.com/activemerchant/active_merchant/blob/send-cardholers-ip/test/unit/gateways/elavon_test.rb and https://github.com/activemerchant/active_merchant/blob/send-cardholers-ip/test/remote/gateways/remote_elavon_test.rb?\n. Is there anything we should assert in the remote test?\n\nOn Thursday, 26 November 2015, Alexander Profeit notifications@github.com\nwrote:\n\nChanges\nIncludes the IP in the request to Elavon. Closes #1822\nhttps://github.com/activemerchant/active_merchant/issues/1822\nTesting\nI was able to get some credentials from Elavon to run the remote tests,\nbut am waiting on confirmation they're cool with us committing the\ncredentials to AM before I add them.\nFrom my remote test runs I was able to confirm that IP shows up in Elavon.\n[image: elavon]\nhttps://cloud.githubusercontent.com/assets/1313339/11430809/5d81452e-945a-11e5-91a4-ddc77cc21364.png\nReview\n@cjoudrey https://github.com/cjoudrey @girasquid\nhttps://github.com/girasquid\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/activemerchant/active_merchant/pull/1942\nCommit Summary\n- Elavon: Include IP address\nFile Changes\n- M lib/active_merchant/billing/gateways/elavon.rb\n  https://github.com/activemerchant/active_merchant/pull/1942/files#diff-0\n  (6)\n- M test/remote/gateways/remote_elavon_test.rb\n  https://github.com/activemerchant/active_merchant/pull/1942/files#diff-1\n  (3)\n- M test/unit/gateways/elavon_test.rb\n  https://github.com/activemerchant/active_merchant/pull/1942/files#diff-2\n  (22)\nPatch Links:\n- https://github.com/activemerchant/active_merchant/pull/1942.patch\n- https://github.com/activemerchant/active_merchant/pull/1942.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/1942.\n. Cool! :shipit:\n\nOn Friday, 27 November 2015, Luke Hutscal notifications@github.com wrote:\n\nMakes sense [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/1942#issuecomment-160158909\n.\n. Hm, are you sure about this?\n\nI believe you want:\nruby\nform[:ssl_cardholder_ip]  = options[:ip] if options.has_key(:ip)\nNo?\n. ",
    "radar": "Just came across this today within my work on Spree. I can look into a regression test.\n. @ntalbott I have written some tests in radar/active_merchant@8e49f7a41929e8e39bebcd76e285f7063669aa46. I removed the test_doesnt_add_customer_if_card which would now fail with the code from this patch applied. add_creditcard did not have any tests at all, so I wrote some for that.\nLet me know if anything else needs to be done.\n. Fixes spree/spree_gateway#105.\n. The test fail appears to be in an unrelated gateway, \n1) Failure:\ntest_doesnt_add_customer_if_card(WebpayTest) [/home/travis/build/Shopify/active_merchant/test/unit/gateways/webpay_test.rb:98]:\nFailed assertion, no message given.\nFinished tests in 10.493469s, 234.2409 tests/s, 917.9996 assertions/s.\n2458 tests, 9633 assertions, 1 failures, 0 errors, 0 skips\nI will try the remote tests now.\n. I get these failures. I do not know how to set up Stripe Connect to get an access_token at the moment.\n```\n[ 1/19] RemoteStripeTest#test_application_fee_for_stripe_connect = 1.92 s\n  1) Failure:\ntest_application_fee_for_stripe_connect(RemoteStripeTest) [/Users/ryanbigg/Projects/gems/active_merchant/test/remote/gateways/remote_stripe_test.rb:134]:\nThis test will only work if your gateway login is a Stripe Connect access_token.\n[ 8/19] RemoteStripeTest#test_refund_partial_application_fee = 1.35 s\n  2) Failure:\ntest_refund_partial_application_fee(RemoteStripeTest) [/Users/ryanbigg/Projects/gems/active_merchant/test/remote/gateways/remote_stripe_test.rb:168]:\nThis test will only work if your gateway login is a Stripe Connect access_token.\n[12/19] RemoteStripeTest#test_successful_refund_with_application_fee = 1.46 s\n  3) Failure:\ntest_successful_refund_with_application_fee(RemoteStripeTest) [/Users/ryanbigg/Projects/gems/active_merchant/test/remote/gateways/remote_stripe_test.rb:160]:\nThis test will only work if your gateway login is a Stripe Connect access_token.\n[13/19] RemoteStripeTest#test_successful_store = 1.67 s\n  4) Error:\ntest_successful_store(RemoteStripeTest):\nNoMethodError: undefined method []' for nil:NilClass\n    /Users/ryanbigg/Projects/gems/active_merchant/test/remote/gateways/remote_stripe_test.rb:97:intest_successful_store'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1301:in run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit/testcase.rb:17:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:919:in block in _run_suite'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:inmap'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:in _run_suite'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:657:inblock in _run_suites'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in each'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in_run_suites'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:867:in _run_anything'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1060:inrun_tests'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1047:in block in _run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:ineach'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:in _run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1035:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:21:in run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:774:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:366:in block (2 levels) in autorun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:27:inrun_once'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\n[15/19] RemoteStripeTest#test_successful_update = 5.36 s\n  5) Error:\ntest_successful_update(RemoteStripeTest):\nNoMethodError: undefined method []' for nil:NilClass\n    /Users/ryanbigg/Projects/gems/active_merchant/test/remote/gateways/remote_stripe_test.rb:105:intest_successful_update'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1301:in run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit/testcase.rb:17:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:919:in block in _run_suite'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:inmap'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:912:in _run_suite'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:657:inblock in _run_suites'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in each'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:655:in_run_suites'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:867:in _run_anything'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1060:inrun_tests'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1047:in block in _run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:ineach'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1046:in _run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/minitest/unit.rb:1035:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:21:in run'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:774:inrun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:366:in block (2 levels) in autorun'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:27:inrun_once'\n    /Users/ryanbigg/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\n```\nI will now investigate the undefined method nil errors.\n. The undefined method errors are because the responses appear to have changed. I will amend my PR with fixes for those.\n. All good now. Stripe tests all pass on my machine and the remote tests seem ok apart from those Stripe Connect ones I cannot figure out.\n. Thanks @melari!\n. @cwise: Life gets in the way of OSS work sometimes, so things don't get attended to as quickly as they have in the past. For example, last week I was in DC at the Spree offices and we had no less than a billion meetings/discussions all week, which kinda sorta interfered with my OSS work. The jetlag this week is not helping, either.\nI'm not saying @ntalbott is in the same situation, but he's probably got Reasons(tm) why he can't attend to this right now... so some patience is the absolute best thing that we can do at the moment. \nIf it's affecting you that bad, then I would recommend using a fork of active_merchant with your patch in the meantime.\n. @momolog Did you get this error when you were using Spree?\n. @momolog Yes please do submit a patch here. I think it should be fixed in all places though.\n. @momolog The payment parameters are sent using code from Payment::Processing.\n. Thank you :)\n. Sure thing @ntalbott. I've updated the commit now to include regression tests.\n. Thank you @ntalbott!\n. ",
    "hoenth": "I am in the midst of transferring the responsibility of add_gateway from ActiveMerchant to the spreedly_gem. I am building a wrapper for the spreedly_gem add_gateway that returns a consistent object, ensures all of the appropriate options are supplied for the given gateway, and will test that the gateway works by sending an authorize request. So I am going to let the add_gateway option in ActiveMerchant drift away....\nI will likely begin storing the few pieces of information about the payment_method, so I won't need the retrieve method either. \nI appreciate your considering both, but has you have noted, they are a bit out of place. \n. fixes #853\n. I had many discussions with Cashnet about this. Apparently, the address one is redirected to is somewhat dynamic, so we cannot use that as the end point. It appears that they are piggy-backing this api, to some extent, on their transparent redirect process. We tried many different combinations of end points and parameters, but none of the results were satisfactory. \nI have appealed to cashnet to modify their api to eliminate the redirect, but have not had any success to date. \n. I will check in with CashNet on this. We had asked them about default or static values earlier and they were hesitant to provide any. Station=WEB makes sense.  I hadn't caught that we were no longer sending the credit_card_payment_code.  I believe that the CashNet clients use the item codes to distinguish where in the P/L funds are to go, so we may still need that to be configurable. \nHopefully, I will get word back later today. \n. The response from Cashnet is the following:\n- station is configurable by each gateway client. 'WEB' may not be an allowed value in some, or may have an association with another application/station. It must be configurable for each client\n- item_code is the same as station, as it is configured on a per school basis. We would prefer to keep it as part of the initialization of the gateway, as it won't change on a per purchase basis. \n- We can leave off the credit_card_payment_code. It is not used on their transaction api\n- Fine to leave customer_code as AM Version\n. Yes, let's make WEB the default for station, but allow it to be overriddent in the credentials. And using a default_item_code in the credentials works. It then could be overridden at the time of purchase. \nThank you for your good thoughts on this!\n. @rwdaigle Sorry for the delay. Took me a bit to understand how to best stub it. Let me know if you need anything further\n. OK, all done\n. @rwdaigle - It seems my fix was the same as @davidsantoso  (https://github.com/activemerchant/active_merchant/pull/1931).  The problem was with the commit to change from URI.encode(response['location']) to CGI.escape(response['location']). I'm not seeing a separate commit for that to reference, but this PR no longer includes that. \nIn essence, all this pull request does now, in comparison to 1931 is add a test for url encoding. \nWhen I run the remote tests in ruby 2.1.6, I'm not seeing any URI.escape is obsolete warnings. In what context were you seeing them?\nSo if we use this original PR, we should be fine. Tests will be added and we won't get the request_uri' for #<URI::Generic:0x007f6ee35b36d8> error that we get with CGI::escape\n. @rwdaigle, it's true I see the warnings there. But according to this: http://stackoverflow.com/questions/2824126/whats-the-difference-between-uri-escape-and-cgi-escape/13059657#13059657, the only better solution is to use the Addressable gem, which I would guess is not something that AM wants to include just to fix this one issue. According to the same SO answer (which I don't have enough knowledge on the inner workings of URI or CGI to comment on), CGI.escape should only be used for the parameters, not the entire url. \nIf we can't have this change, then transactions processed through Cashnet are at risk of raising an error (from a bad URI) and our systems wont pick up that the transaction went through. Unfortunately, I have no input into Cashnet to have them change their process, we are only a consumer of it for our clients. \nPerhaps others can suggest another library that can be used to encode the URI and parameters that Cashnet sends back, that won't raise the warning or the error we saw with CGI.escape. \n. @rwdaigle - This is a sample headers, but likely is not one to cause the invalid URI error:\nHTTP/1.1 302 Found\nCache-Control: private\nContent-Length: 603\nContent-Type: text/html; charset=utf-8\nLocation: https://commerce.cashnet.com/cashnetu/Gateway/htmlgw.aspx?client=EMARKETVENDOR_DEMO&merchant=YYYYYYYYYYY&command=SALE&pmtcode=givecorpcc&station=YYYYYYYYYY&custcode=TheCustCode&operator=YYYYYYYYYY&password=YYYYYYYYYYYY&itemcode=GiveCorps&name_g=Sally+Test&addr_g=1234+Anystreet&city_g=Anytown&state_g=CA&zip_g=94601&amount=5.00&cardno=5454545454545454&expdate=1215&desc=&fname=&lname=&order_number=&email_g=\nSet-Cookie: ASP.NET_SessionId=; path=/\nP3P: CP=\"NOI DSP COR NID NOR\"\nDate: Thu, 11 Feb 2016 19:45:51 GMT\nSet-Cookie: TS01b3ea04=; Path=/\nI have removed the sensitive information. \nHowever, there are fields that don't have values in this redirect that might, based on user entry. Or they may have different values, and perhaps they include characters that are not valid. \nUnfortunately, I can't get a sample of a URI that actually causes the error, because we don't communicate to Cashnet directly, but through Spreedly, and they aren't saving the redirect location. It happens only intermittently. \n. @rwdaigle Can we get a resolution on this? Unfortunately, if we get a URI parse error now, it may mean that a transaction has been successfully completed at Cashnet but we don't get record of it in our system, as AM never returns an appropriate response object. \n. @rwdaigle Done.\n. I agree with @ntalbott. We need to capture the times when it fails so we can be clear on the solution. Unfortunately, it means that for those times, we won't be notified about a completed transaction. \n. From what I understand, when retain is marked as true, the payment_method is saved, and the verification_value is not retained. In our process, we tokenize the card first (marking it as pending in our system), then sending the purchase request. By saving and marking the retain value false, when we send the purchase request, you send the verification_value. if the card is denied, then we remove the pending payment_method from our system. \nThe reason for this process is because we started with Authorize.net CIM, and this was there workflow. We also want to keep the flexibility of creating the token, then processing the purchase separately, with the security that the verification_value will be sent and verified with the purchase is processed. \nI recognize this is not how many/most of the AM::SpreedlyCore consumers will use it, but for now, it is how we do. \n. We don't store any of the CC information (last 4 digits, expiration date, etc). We use the retrieve method to be able to show users their information when we list their stored cards. \nPreferably, we don't need both the AM Spreedly implementation and the Spreedly Gem, so we have a single portal to Spreedly, instead to two. \n. Similar to the retrieve method, we would prefer not to have to have both AM and the Spreedly gem. Since we create gateways dynamically within our application, it made sense to have it within the same instance we use for other spreedly related operations. \n. ",
    "fuelxc": "I think I forgot to push one change after. Let me check and make sure. I remember getting that error and having to update something. \n-Eric\n\nOn Oct 5, 2013, at 12:58 PM, Nathaniel Talbott notifications@github.com wrote:\n@fuelxc I get a \"No Credit Card Number Provided\" when I run the test_successful_purchase_with_check remote test - what do I need to do to get that working? Is it a setting on my test account at SecurePay?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "hult": "Additionally, fixes a weird behavior where you'd expect this to work (it didn't because AUTHORIZATION ended with a 3)\nr = gateway.store(credit_card)\nif r.success?\n  s = gateway.authorize(1000, r.authorization)\n  assert s.success?\nend\n. It was the thing in the comment there. I wanted to implement storing a card and later do authorize on it without having to use an actual payment gateway, but that always fails. But you could of course do\ncase normalize(credit_card_or_reference)\nwhen /1$/, AUTHORIZATION\nin authorize just as is done in purchase (probably to allow purchase from a stored card) instead of this whole pull request. :)\n. ",
    "matt-optimizerhq": "Just wondering what the status of this PR is. Is there anything we can modify or improve for it to get merged? Some feedback would be great. Cheers.\n. @ntalbott thanks for getting back to us. At the moment our gateway only supports purchase and not any of those other functions. It does support card store/tokenization however, so we could add that feature if you think it would add substantial value?\nI've just had a talk with some of our web developers and we can set up a public testing account for inclusion in fixtures.yml - I'll push this change shortly.\n. Hi Nathaniel, I've added test account credentials for remote tests to fixtures.yml. Cheers\n. ",
    "llopez": "No problem. I will add the unit tests.\n. @ntalbott I have extended unit tests. Could you take a look? Thanks.\n. I will make those changes as soon as I can. Thanks you for your time!\n. @ntalbott I have already implemented the changes you have requested me! :)\n. Hi @ntalbott.\nWhat about my improvements? I think that all you requested me is done..\nI will appreciate if you could give me some feedback..\nThanks.\n. Hi @ntalbott \nI am really excited about being participating of this amazing gem. I will check the refund remote test with my credentials.\nMany, Many thanks. \n. @ntalbott I think that last commit breaks the travis building. I found the error when travis ran my pull request #899.\nThe error is line: https://github.com/Shopify/active_merchant/blob/c9d48ec44a949d0fffd6ef011a569037d7889e8e/test/unit/integrations/returns/wirecard_checkout_page_return_test.rb#L2\n. Thanks @ntalbott \nHi @melari \nCan you take a look?\nThanks again.\n. No problem @melari \nThanks!!\n. Hi @ntalbott \nThe Travis Building fails. I think is because a bug introduced in #847. \nThere is a line that says 'require rails' inside: https://github.com/Shopify/active_merchant/blob/c9d48ec44a949d0fffd6ef011a569037d7889e8e/test/unit/integrations/returns/wirecard_checkout_page_return_test.rb#L2\nCould you check it please?\nThanks.\n. @ntalbott, @melari \nI am new working with pull requests and Travis. How can I make travis to check my code again?\nThanks in advance!!\n. Ok. I will do that. thanks\n. Hi @melari \nI did what you suggested me. But Travis didn't check my commits until now. I can perform a new pull request if needed...\nThanks.\n. Sorry. Yes. Travis is building... yeah!\n. Thanks @melari \nTravis is green this time!!!\nI hope you could check out my code!\n. Hi @ntalbott \nI have had not time to work on it. But I will.\n. Hi @ntalbott \nI am working on this right now! :)\n. Hi @ntalbott.\nI have reverted to ss_post method. The problem was the ssl version.\nSorry for the delay. I've had a lot of work on my office.\n. Hi @melari \nI have already removed the curb dependency..\n. @ntalbott, @melari  \nAny new about this?\nThanks..\n. Hi @ntalbott.\nDo you think it is ok for merging? If it's not please let me know to fix it.\nThanks..\n. PRN option is one of the required credentials that PacNet supplies to the customer.\n. No problem. I will do that! :+1: \n. At the moment. I am not thinking on implement this part of the code. I can delete the comments if you prefer.\n. No they are not. I do not think I can provide those credentials because I am not the account owner. I am just a developer working for someone. Do you really need those credentials? :)\n. sure. I will change the class name. :)\n. Hi @melari \nI had to rewrite the ssl_post method because I could not perform a successfully connection to payscout site. And I took the decision of implementing the same code that is used in the ruby implementation code example and It worked.\nIf you prefer I can spent some time trying to do the same with the original ssl_post method.\nThanks.\n. Ok. I'll do my best\n. sorry. I forgot to do it.\n. ",
    "davefp": "Yeah, I messed up the commit. Working on it now.\n. Looks like active_support is constrained by the various Gemfile_railsxx files. Dumb question: Are these used in the released gem somehow, or are they just there for Travis to test against different Rails versions?\n. Never mind, I answered my own question.\n. @jduff @csaunders Everything is passing now.\nI had to make some concessions to support all the rails versions we target in Travis, but all the runtime requirements now have an intelligent lower and upper version boundary so there shouldn't be any surprises when the next major version of a gem we depend on comes out.\n. @jhawthorn This patch doesn't force old versions of Nokogiri (or the other libs, as far as I'm aware). It's designed to protect users against major version changes (e.g. 2.x.x to 3.x.x) in dependencies that will break AM by proxy.\nIn the Nokogiri example specifically, the gemspec says this: s.add_dependency('nokogiri', \"~> 1.4\"). This means AM will accept anything >= 1.4.0 and < 2.0.0. The current version is 1.6.0, and so falls into the valid range and will be installed by bundler. If version 2.0.0 comes out and works fine then sure, we can relax the constraints.\n. I think you've misunderstood the syntax. The current implementation allows Nokogiri <= 1.4.0 and < 2.0.0. Bundler will pick the highest version that satisfies all other dependency constraints.\n. ",
    "jhawthorn": ":-1: :bomb: version constraints should not be added willy nilly.\nHaving nokogiri locked down in active_merchant has already been an enormous pain for me and others (#813, #765). As active_merchant is widely used, versions should not be so strict.\n. You're entirely right, my apologies. Closing this.\n. I've pushed a commit loosening the dependency to activesupport '< 6.x'. :wave: :smile:  Hi Jason\nI always feel there should be some upper bound, just because there's no way to retroactively take it away in the future.\nHow about '< 6'? Or even better '< 6.x', which will also forbid any '6.0.0.alpha's. ",
    "pusewicz": ":+1: \n. @ntalbott @melari Can you guys review?\n. https://github.com/Shopify/active_merchant/pull/820 is a better pull request as it adds all the beta countries too.\n. ",
    "bencevans": ":+1: \n. ",
    "kilian2000": "Any chance to get this merged ?\n. ",
    "zamith": "@ntalbott It's a refactoring just removing some duplication and complexity.\n. @ntalbott Yes. But I checked out to before my commits and they were failing as well. Not sure what to do here... :S\n. @ntalbott I just checked on the active merchant travis build and they are only running the units, not the remotes. Not sure what's the policy here.\n. @ntalbott I was able to reproduce the error, and I think it all passes now.\n. @ntalbott I thought I had corrected that. It must have gone through when I was debugging. Sorry.\n. ",
    "ir-soeasycorp": "@ntalbott Well while working on this I saw that other approach (using XML builder) and I chose this for several reasons:\n- if we are looking for some flexibility using XML builder adds nothing there - whether you use xml builder with hardcoded tag names and structure or you hardcode string you need - result is the same\n- if we are looking for performance - using simple string replace will certainly beat using full blown xml manipulating methods\n- if we are looking code readability and maintainability I would say hardcoded string again wins vs hardcoded usage of xml builder\nI would agree that soap library would make this much more readable and flexible, but I also agree with you that it would add considerable overhead (which is really not needed since in reality gateway API is so rarely changed).\nHaving said that, are you sure you want me to revert it to xml builder stuff (I have it somewhere in file history)?\n. @ntalbott ok; I moved all soap strings to constants at the end of class - you were right, it is much more readable this way, I also removed all 3D handling routines and I also added test account details to fixtures.yml\nI am not sure about templates you are mentioning - I used simple strings with ${field} and I was replacing that with simple string replace - I guess we don't really need template engine for that (soap strings are still at bottom of the file, but now that doesn't obstruct anything else, since there is no code after them)\n. @judff Well I believe reasons we mentioned above are quite compelling, additionally it is in fact easier to maintain code with strings - check this page for example https://secure.soeasypay.com/gateway.asmx?op=CancelTransaction - by default .net web service page gives you sample soap strings, so all you should do is copy/paste it from web service page to your code, and I believe manually embedding something to hold tag values is easier and more readable than building soap request manually using xml  builder.\nThe only reason not to use strings would be if you prefer not to have long strings in your code (but then you have to have long pieces of code using xml builder with same effect like hardcoding string, but with worse performance).\n. @ntalbott Sorry, I completely forgot to push this. Thanks for reminding me :-)\n. ",
    "eddy03": "Any news about this integration?\n. aaa...I forgot the test part, I'll commit it later. Thanks.\n. Hi @jduff ,\nCan you check it :tongue:?,\nI'm not expert in ruby, really noob. Any advice is appreciated.\nThis is my first time programming in ruby, My bos force me to learn and complete this. :cry: \n. Thanks. \nappreciate. :+1: \n. @leoniddinershtein, @jduff , I already tidy the code. Hope it's clean enough.\nThanks\n. ",
    "kamal": "Looks good but please add tests. \n. ",
    "dinershtein": "no update?\n. ",
    "tekjau": "any update?\n. Kindly help to merge this as there quite a number of requests from South-East Asia merchants to use MOLPay as payment gateway, especially we have introduced MOLPay CASH @ 7-eleven, and also secure 1-click  payment (tokenization), loyalty program with BCard (under Berjaya Group). Thanks.\n. Supported countries: (ordered by weight)\nMY\nCN\nSG\nPH\nVN\nID\nAU\nNZ\n. ",
    "saifiikmal": "@leoniddinershtein @jduff please ignore this request..here is the latest and corrected one https://github.com/Shopify/active_merchant/pull/1143\n. Hmm..the job no. 2460.12 failed due to connection problem while others are OK..would be helpful if there is Travis CI rebuild button to rebuild again instead of commit another changes.. cc @leoniddinershtein, @jduff\n. ",
    "rafeequl": "Any updates on this request ?\n. ",
    "mbretter": "Just added some testcases ...\nOn 2013-10-05 22:49, Nathaniel Talbott wrote:\n\n@mbretter https://github.com/mbretter we'll need to see tests before\nwe can merge this - thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/847#issuecomment-25756772.\n. \n",
    "jameswritescode": "@jduff nice link but unfortunately not the right solution. Would you guys be open to a pull request that makes Gemfile eval a Gemfile_local if present? This file would be ignored by git and would allow developers to add whatever dependencies they want/need.\n. @ntalbott I understand not wanting to make it a dependency, so that's cool.\nThe Gemfile_local idea is two lines that would go into Gemfile:\nruby\nlocal_gemfile = File.expand_path(\"../Gemfile_local\", __FILE__)\neval File.read(local_gemfile) if File.exists?(local_gemfile)\nand Gemfile_local would be ignored by .gitignore.\nSo using pry as an example, putting it in .irbrc isn't helpful because I want to invoke pry's binding.pry in tests, where .irbrc is irrelevant.\nThough if there is something I don't know let me know :)\n. ",
    "silverstreaked": "LGTM. Thanks!\nWhen did the remote test start failing?\n. @melari @odorcicd is this doable or a won't fix?\n. @melari possibly also fixes the same issue we were seeing with PxPay notifications?\n. :+1: Thanks!\n. Thanks @odorcicd! PaymentExpress just let me know that transactions are processing successfully for the affected shop.\n. Oh, ok, I'll follow up.\n. ",
    "Smcchoi": "@melari any ideas what we should do in general, not just for hi trust, but some sort of currency mapping? \n. woot :+1: \n. :+1: \n. ",
    "leofischer": "Yeah, that makes sense.  I'll add that method and get back to you shortly.\n. I've added 'store' and 'unstore' and re-organized the commit function/added a few headers but it won't affect the logic of existing calls.\n. Thanks Nathaniel, please let me know if there is anything that you need from my end.\n. Valid points Nathaniel, thanks for the help!\n. Thanks @bslobodin, if you stumble on any other issues please let us know and we can help to sort it out\n. Yup :+1:, provided @MauricioMurga doesn't beat me to it\n. @bslobodin Sorry, yup, we require a description for all purchases\n. @bslobodin At the moment no, though when we launch AMEX I was planning on using it.  What is the use case that you would like to leave it blank?  If you need a default, I'll just make sure that it doesn't get shown on statements.  With regards to the value, I'm with @ntalbott, something more generic like \"Purchase\" would likely be better since it is less confusing to cardholders and business users who don't know about ActiveMerchant.\n. TGF Travis, that test url has been fixed.\n. @ntalbott at this time we only support tokenized cards since very few businesses in our market have PCI compliance (& those that do use Spreedly for tokenization).  In the future we may re-add it, but for now we have removed this for consistency.  Thanks for the help!\n. Perfect, thanks for the help and heads up.  We'll keep an eye out for the changes.\n. Just to clarify, details in our case contain optional information about the purchase and customer.  In this case it would be the name of the purchaser (though not necesarily the card on the card).  We use information in details to capture email, phone and the contents of the sale.\n. @ntalbott not a problem, the objective of these changes is moreso to correct the standard address options so that we capture it properly for customers using Shopify and Spreedly.  We don't expect the non-standard parameters to be used by anyone not running a custom implementation.\n. ",
    "dawngreen": "Thanks, Nathaniel.\n. ",
    "juicedM3": "@jduff any chance this could get some love?  Pretty minor changes.  Thanks!\n. @jduff lemme see.  Thanks!\n. @jduff after reviewing the current remote tests, I'm not sure if there's any value added.  My changes add a couple of mandatory fields to the request but the response doesn't change.  In matter of fact, the only thing that makes the fields mandatory is the documentation and the people reviewing the test cases submitted for certification.  Chase Paymentech's actual system does not validate and reject requests with missing mandatory fields.  Kinda makes the whole certification process somewhat frustrating.  I did add unit tests to make sure these fields were in the request.\nChase Paymentech rejected other tests I submitted for certification because the OrderId was not a minimal of 8 characters.  The only thing indicating a minimal length is a comment in their documentation: \"The first 8 characters should be unique for each transaction.\"  Again, their system does not enforce this.  But at least that's a value a users has control over vs the XML elements. sigh\n. ",
    "danielschwartz": "Setting the timeout is a band-aid to the real problem, but I would love directions on how to set the timeouts correctly for ActiveUtils.\nThe real issue here is that rack-timeout is propagating a TimeoutError during a charge which should sever the connection. Either it is not severing it and letting it continue or Auth.net isn't realizing it is. Either way we end up with charges that are not associated with any orders (because we rollback all the inserts). Would love some insight on whether this is an ActiveMerchant issue or if it's a Auth.net error. My assumption would be that if Auth.net can't send a response back to the server (because we severed it) it should cause an void of the charge it was trying to create, so i'm leaning towards an ActiveMerchant problem, but who knows, Auth.net isn't the best. \n. You are awesome. This is unbelievably useful information. Thanks!\n. ",
    "cschulte22": "Yeah, sorry, been busy doing a massive rails3 upgrade.  I'll get around to this soon and reopen it.  Thanks.\n. These guys just got acquired by a bigger company, so I'm guessing the usefulness of interfacing with their existing api is probably limited.  I'm not going to fix/reopen this unless someone else comes along with a need for it.\n. ",
    "waynehoover": "Thanks for helping out, but after reading this:\nhttp://guides.rubyonrails.org/initialization.html\nI think that the gem is being loaded first (section 1.2) then the initializer (section 2.3).\nSo it looks like what is happening is the gem sets the constant, then the initializer tries to set the constant again and thats where the warning comes from.\nSo I suppose without an attribute to set on the class, we will always be getting this warning. Is there no way around it? I  can't seem to find a way in the active_merchant code, but someone here might know better than I do.\n. I now realize this might actually be an issue for https://github.com/Shopify/active_utils as thats where ActiveMerchant::Connection lives. \nIn any case if anyone else comes across this warning and wants to remove it, just put this code in an initializer: \nruby\nmodule ActiveMerchant\n  class Connection\n    remove_const :MAX_RETRIES\n    MAX_RETRIES = 5\n  end\nend\n. ",
    "tahnok": " it\n. :+1: \n. \n. :speedboat: :it:\n. Is this being public going to be an issue?\n. shouldn't we return false here if we encounter invalid JSON?\n. ",
    "christianblais": "@orenmazor @cjoudrey for review\n. [].join is a good idea.\n. Fair point. What would you suggest in case it isn't valid JSON? Should we still raise an ActionViewHelperError, but with an hardcoded string?\n. I understand. However, it still only rescue ResponseError and I was under the impression that they were all non-coding issues, hence all safe to be displayed to the customer. Is there any ResponseError that we won't want to show?\n. > Should I merge my PR instead?\nCan you add a link to your PR please?\n. So I'll edit this PR to whitelist possible error codes, but I won't be able to do so before tomorrow morning. I'll reping you guys once done. Thanks for your feedback!\n. I changed it so we now rescue 401, 403 and 422. Can you think of any other code that we should rescue?\nLet me know what you think!\n. Thanks!\n. Good point, I'll try this out! Thanks!\n. ",
    "WilsonChiang": "Going to re-open this as it is still a problem that we are looking to address soon.. Sent them an email. Will let you know what I find out. Thanks!. Just an FYI, this is now fixed.. @jasonwebster mind reviewing as well, please?. Typo here. maintining . ",
    "bpollack": "@WilsonChiang I'm going to close this again, as it's been over a year. If you do in fact have a PR for this, though, I'm really happy to take a look.. @ntalbott Should I close this (and other v2.0) issues at this point? There doesn't appear to have been movement for three years.. This issue is almost three years old with no followup and no movement; closing. Please reopen if this is still an issue for you.. Seems like this has been resolved; closing.. This issue is really old; please let me know if you're still encountering issues. Otherwise, since the accompanying PR is also closed, I'll close this out, too.. Are you still encountering this issue, or has it since been solved?. @datibbaw I think, based on reading current Cybersource code, that this shouldn't still be happening; are you still seeing it?. I don't see that behavior here, but we'd be really happy to accept a PR (or even a test case for the remote suite that shows this behavior happening)!. Thanks for the report, @nspady ! I can't promise to get to this any time soon, but it looks as if this is still the current behavior. In the meantime, we'd happily accept a PR.. Yeah, I know, and this hits me too every time I grab a new machine. It'd be nice to fix, but since it'll have the side-effect of changing all downstream SHAs, we just can't. I'm sorry.. Are you still seeing this @timkleier ?. Got it. I haven't heard of this, but I'll keep an ear out. For now, I'll close it. Thanks @timkleier !. An equivalent of this appears to have already been merged! I apologize. Closing.. There's some good in this, but we really can't merge this as-is; the PR deletes comments from the README, modifies supported countries for Stripe, and tons of other things that have nothing to do with the stated objectives. Please feel free to open smaller, more targeted PRs.. @timbeiko @aprofeit Should I close this? Seems to have been open closing in on two years.. @tahb I don't think this patch is actually necessary; generally, Active Merchant will use the highest version of TLS available, so if they only support TLS v1.2, then Active Merchant should automatically default to that. Is that not the behavior you're seeing?. @jasonwebster Can this be merged, or were you holding for a reason?. @jasonwebster Ping?. While this may be the right thing to do, we're unfortunately at a place where changing the CHANGELOG extension would break downstream users in a way that's probably not worth it. Thank you for the proposal, though.. We're unfortunately not using PayPal Express internally, so I'm not sure I can provide a lot of help. If you want, please feel free to submit a PR that corrects the issue you're hitting when you figure it out.. Thanks @jeffblake . I'm going to close this ticket and focus on trying to get #2422 merged.. It's been about 19 months since the last discussion here; should I close this out?. Closing for the moment, since the build has failed and it's been nearly two years since the last update, but please feel free to reopen in the future.. We aren't currently accepting requests for new gateways through Active Merchant, so I'm going to close this out at this point.. Thanks @jeffblake ! I'm going to close this issue, since it's got a PR open.. And the patch is now landed.. ThIs seems resolved at this point, so I\u2019m closing. Please feel free to reopen if I\u2019ve misunderstood. . Thanks for the PR! While this is technically correct after a fashion, the URLs are identical according both to the docs and your PR, so I don't think this actually fixes anything. For that reason, I'm going to close out this PR. Please let me know if I've misunderstood anything.. Ah, I see; I misread the URLs @oklas . I'll reopen and try to land this today.. This was implemented in b4de7a7b6892db2a605890fbeebea186e76d0657. @jimm Should I close this out at this point? There's no movement in basically a year.. Thanks @jimm . . Seems to me as if this was resolved in #2537, so closing, but please reopen if I\u2019ve misunderstood. . Looks to me as if this was resolved in #2248, so closing, but please reopen if I\u2019ve misunderstood. . @jasonwebster Is this something you're still interested in landing?. Awesome, I'll look @albaer . I've been going through and cleaning up/landing a lot of PRs, but it's a slow burn. I'll try to get you feedback within the next week or so.. @albaer What would you need to update this and help land it?. I reluctantly think that it's not, @marjaimate, but I really appreciate you taking the time to try to supply this for Active Merchant.. Hey @mpospelov, I saw this after doing the work for #2676, which solves the same issue slightly differently. I'm going to close this at this point, but thank you for doing this work last year. I apologize it wasn't merged at the time.. Looks to me as if you handled this in 30028b69602891b0cece80ca6ea18a7dab78639d, so closing.. It seems to me as if this is actually supposed to be closed, so I'm re-closing, but please feel free to re-open if I'm missing something.. @joelcogen Any interest in updating this PR? I can't merge it in its current state, but I'd be happy to look if it passed on master.. Closing based on lack of a response, but please feel free to re-open and update if you're still interested in seeing this land.. I think I agree with @bl here; I'm going to close this issue for now. Please feel free to reopen if you've got more information.. The CI on this has been broken for 18 months with no movement; closing.. Thanks for the PR @bruno . Would you mind adding unit and remote tests so we can avoid a regression here?. Closing based on the lack of feedback, but I'm happy to reopen if you'd like.. I'm going to close this out at this point; we don't have any plans for a 2.0 release soon, and @jasonwebster 's points about backcompat are spot-on. If there's a way to do this that doesn't break existing clients, I'm all ears, but I think this would cause too much instability on our payment platforms to merge otherwise. Thank you for taking the time to tackle this refactoring, though. I really do wish we could implement this functionality safely.. @davidsantoso This still make sense to merge?. @jasonwebster @joshnuss Let me know; happy to close if it\u2019s not needed. . Thanks for the PR! This got done a different way in 27a5fdfb6fd7887b43e71c42da956ad4415e6c38, so I'm going to close this PR. Please feel free to reopen if you believe we're missing some functionality.. There\u2019s been no response for nine months, so closing out. Please feel free to reopen with more information. . Sounds like there's nothing for us to do here; closing.. The CI tests on this have been broken for over a year with no movement; closing.. Any interest in implementing the note mentioned by @bacrossland, @eddkerr, or should I close this PR?. Closing due to lack of response, but really happy to reopen if there's movement.. I can help you rebase if GitHub hasn't GC'd the original commit. I wasn't trying to make your life hard. :-). Yep, git rebase is gross. The general way to fix a rebase gone bad is:\n\nGo back to the original commit. In your case, that's f242b8473eb9e5b8cd151dbdc4810890ed080040.\nRebase from that\nResolve merge conflicts\n\nThe reason your rebase got messy is because you'd merged in master via commit c1d6f55e5f37f8645e4429f4c2668310afd68bd4, and rebase doesn't play well with merges. We'll want to drop that commit in this process.\nSo, the process: first, while on branch stripe-shipping-address, you'll throw out everything except the original commit:\ngit reset --hard f242b8473eb9\nThen, you'll rebase just that commits:\ngit fetch\ngit rebase origin/master\nYou'll have a couple merge conflicts, but they shouldn't be too bad. git add the files once you've resolved the conflicts. This is also probably the easiest time to add that missing comma. When you're done, git rebase --continue to finish the rebase.\nAt that point, you should have a nice linear history, with just one commit sitting beyond the current Active Merchant master. You'll need to force-push that branch (git push --force), at which point this will collapse down to a nice clean one-commit that I can easily merge in.\nLet me know if you've got questions.. Thanks for this, @whitby3001 ! I'll rebase and merge.. Dammit. I'm really sorry @whitby3001 ; I literally just implemented this today, and am only afterwards going through AM PRs in the afternoon. Honestly, I like your tests better than mine, but this landed https://github.com/activemerchant/active_merchant/commit/a1ed8ede2d4b8b5e4f917782417711665c2f8943. . I'll take a look, @whitby3001 . I'm not as familiar with the PayPal Express adapter, nor am I working in it, but I'll try to get to either today or early next week.. @bdewater Is this correct or should I close this or what? I don't know much about ActiveUtils, nor do I know the story with country.rb.. Perhaps, but we're not likely to make this change anytime soon; the main consumers of this all use Rails, so removing ActiveSupport isn't something we're likely to prioritize. That said, PRs are always welcome.. > I don't think the notification module works. I don't think it passes the rspec test.\nWhat test do you think is failing?. @jasonwebster Should I assume the pony never happened?. I'm going to close this; the tests are broken and there has been no movement in over a year. Please feel free to reopen if you're interested in trying to move forward.. Thanks @cle61 ; I'll merge this in.. @dtykocki Looks to me as if this was resolved, so I'm closing, but yell if not.. @bdewater Is this something you're still interested in landing?. @djsmentya Is this something you're still interested in? The CI failed and it's been over a year.. I'm closing this based on the lack of movement, but please feel free to reopen if you're interested in making tests pass.. Thanks for the PR! My understanding, based on the documentation I have available, is that this list of countries is not correct. If I'm misunderstanding, though, please feel free to reopen this PR with a link to the documentation!. As noted in #2494, this is part of how WePay works, and we can\u2019t change the baseline without breaking downstream clients. You can override the version with the options hash or the WePay dashboard. . Thanks so much for taking the time to put this together. I'm regretfully going to reject this for similar reasons as noted in #2879: WePay's API works by assuming you will set a baseline in Dashboard, so the default only matters if you don't have one set. In that context, this PR could break existing users, while new users can simply set a new baseline appropriately.. @dtykocki How do you feel about this? I know you were generally not in favor of adding to scripts/ in the past, but is adding to bin in this context okay?. @bdewater If this is something you want, I'm happy to rebase and land this today; just let me know.. @bdewater I rebased this and made tests pass. Happy to merge if you'd like.. Thanks for the PR! As @wsmoak noted, this has already landed, so I'm going to close out this PR, but thank you for taking the time, and please feel free to submit other PRs in the future!. Thanks for the PR. If this is still relevant to you (sorry it's been awhile!), I'd appreciate at least some information about what this is correcting/fixing and why, and ideally also an equivalent note in the remote tests so we can verify that it works properly. . @slogsdon Would you mind providing a link to the documentation that supports this change?. Ah, gotcha. In that case, I can just go ahead and merge.. @nfarve This one also seems clean to merge; look okay to you?. Right now, Stripe is the only gateway that supports either statement_descriptor or statement_description, but our general rule is that existing options are the standardized ones. Thus, I'd go with statement_description, since it's what Stripe expects in the options hash.. (Alternatively, if you wanted to patch Stripe to handle both and your new gateway to handle just statement_descriptor, we could chat about that. The only other thing in the code base that comes close is Mercado Pago, which uses statement_description in the response.). This seems to have been fixed by #2572; closing. . Closing; this failed CI and there were no follow-ups for a year.. @alexymik I hear you. I'm really happy to reopen this if the tests pass, but right now, I'm just mechanically closing anything that had a CI failure and no followup for over six months. If you rebase and update, that'll trigger another CI run; if the failure was indeed a fluke, it should pass cleanly.. That ought to be safe. If you want to submit a PR with the change and tests, I'd be happy to take a look.. We'd be happy to accept a PR for this.. @vitork If this is still relevant to you, would you mind adding at least unit tests, and ideally remote tests?. If this is still important to you, would you mind rebasing and seeing if tests now pass? If not, no worries; I apologize we sat on the PR so long.. I'm closing this for now, but please feel free to reopen if you've got some cycles and can fix the failing tests.. Thanks for the patch, @matthewheath ! Squashed and merged.. If this is still helpful to you, would you mind giving some more detail on what gem you were seeing issues with? Alternatively, maybe it'd a unit test or a remote test might help?. I'm going to close this due to the lack of context and tests, but I'd be really happy to take another look if you add either of those.. @curiousepic Do you know where this left off? Should I close it?. @bdewater Still want this? It's been open nine months.. I'm going to close this out due to the lack of follow-up, but please feel free to re-open if there are features unique to your PR!. Closing due to lack of additional information, but please feel free to reopen with more info.. Merging into #2901.. Thanks @pacso! I'll merge this.. @ryanbalsdon Seems like you merged this already in e99f157f; can this be closed?. What should the URL be? Could you link to the relevant docs?. @bdewater I'm not conceptually averse to this, but I think we should probably have a Slack convo before proposing code. I'm in particular concerned about how this would interact with some of our internal stuff. Even if it's a problem, it might be worth merging, but since this solves a non-problem from our end, I'd like to figure out what the benefits are.\nImplicit in which: is this something you're interested in/want to actively pursue?\n(This is separate from our convo of deprecating unused gateways, since that does have a genuine value proposition that's worth the risk.). I think my previous comment is way off-base. Having looked at this more carefully, I think it'd be great to land, and would help move towards supporting #2923 . Hmm, no one else can repro this, so I'm going to assume it's an issue local to my machine; closing.. Okay, all changes we talked about @curiousepic are in here. Code does much less and doesn't confuse :order_id for a pspReference anymore.. This is a really tiny bug that crept in with #2634, but it'll keep the changelog clean.. Per discussion, going to remove this and let @curiousepic take care of this in a separate PR.. Throwing @davidsantoso on this review so he can justify the insanity here, and the immediate insanity that's going to follow elsewhere.. Oh right, one other note: one test in this fails, but the same test fails on Worldpay US proper. Fix on the test isn't obvious, and it didn't seem worth holding up the PR, but I wanted to flag that.. @davidsantoso, @curiousepic and I had a real-life discussion; going to just go a flag route, not an entirely separate adapter route.. That's a question you'd really need to ask Braintree, unfortunately; it doesn't sound as if it's a bug in Active Merchant. If you determine based on your conversation that this is happening due to a bug in Active Merchant, though, please let us know.. No, that makes sense. So in that case, please feel free to open a pull request if this bug is blocking you. The core team unfortunately can't keep up-to-date on all the gateways, so it's not feasible for us to go to each gateway, make changes, and then add unit and remote tests to verify that we didn't break anything.. I'm going to close this for now, but if you ever get approval, please feel free to submit a PR.. @jasonwebster Are you holding merging this on purpose, or did it just slip through the cracks?. Merging into #2901.. Hi @eric-pigeon ! Would you mind linking to the docs that indicate the existing behavior is incorrect/insufficient? If so, I'm happy to merge this.. Closing due to the lack of feedback, but please feel free to re-open if you can point me to the docs.. @guaguasi I've started to merge in some of the CA updates from other PRs; I may get to this big one, but its sheer size means it's gonna take me awhile.. I'm going to close this for now; we're trying to figure out what to do internally, and I'm tracking various proposals in #2901. . In addition to what I mention here, since a lot of this is actually about handling Mexico specially, and that's mentioned neither in the code nor in the commit message, I think:\n\nModifying the commit message to give some background would probably be helpful;\nAdding to the commit message why removing some tests was okay (several tests that checked for success were altered to instead check for failure) might also be useful; and finally,\nAt least one unit tests should explain why Mexico needs to be special (see discussion kicked off beginning in https://spreedly.slack.com/archives/C5GBHQTMH/p1512154739000394). Yanking the DNM; this can go out now.. Wait, @nfarve you appear to have deleted all the unit tests; was that on purpose?. @singhai0 It's literally the internal ticket that asks us to add these exact three fields.. Are y'all still interested in moving forward here? It's been over six months, so I'm not sure if you're on a fork, no longer need this, or would still like to merge.. Thanks @wsmoak! Merging.. (Relates to ENRG-7132.). (NB, #2257 did some of this work over a year ago; I didn't see it until after I'd done my own version.). Thanks for putting the time into this, but this isn't something we're looking for right now.. Since this doesn't appear to be an actual bug, I'm closing the issue. We can always find somewhere to mark in the docs if we really need to.. That's a reasonable ask, but it's not one we're likely to support.\n\nFirst, while the issue you're identifying is legit, it's difficult to get that list consistently across gateways; many gateways themselves don't provide this information, and it would be a losing battle to try to keep Active Merchant up-to-date ourselves.\nSecond, right now, a gateway isn't (necessarily) initialized on a per-country basis; it's entirely possible to vary what country you're using from transaction to transaction with a single gateway object. So it'd be difficult to do this in a way that preserved backwards compatibility.\nWe may at some point start looking at a 2.0, in which case this is worth a re-look, but for now, I don't think it's something we're likely to support.. All right, all your concerns addressed (I think). No rush, but let me know if this looks good now.. I have no idea; it's not a gateway I'm terribly familiar with. Just something I stumbled across while working on ENRG-7214 (https://github.com/spreedly/core/pull/2867#pullrequestreview-85580546). This commit isn't required for that one, though.. @nfarve Because you're in authorize.net, hit me you'd be a really good person to tag. This seems like it might be in line with the general work you're doing right now, and the patch looks clean; any thoughts on merging?\n  . We can squash these; I don't have a strong preference.. Squashed per offline discussion.. (This blocks nothing; it's just something I noticed when tracking down remote unit tests.). @dtykocki Hah, point. That's because I wasn't consistent about what existing adapter's tests I was stealing. I'll look for what's most common as-is and then move them all over to that before merging.. Okay, all unified on test_transcript_scrubbing. I'll merge as soon as Travis verifies I didn't break anything on that massive rebase.. Thanks, @MarkMekhaiel . Are you seeing full remote tests pass with these changes? I'm getting some errors, but currently tracking down whether they're with our account setup. Also, would you mind adding a unit test as well?. Will do! Thanks for the link and context @varyonic . @dtykocki @deedeelavinder @nfarve @curiousepic Sorry for the explicit ping here, but this has to be live on Core by midnight UTC, so it's a bit of a rush to get this approved (or emended) ASAP.. Thanks @deedeelavinder !. @dtykocki I also gets tons failing. I'm using the creds in 1Password under \"Payment Express\"; do those not match yours?. Beanstream has been replaced/superceded by Bambora, and we don't have an explicit Bambora gateway; you're right. So while I'm not sure it's fair to say it's deprecated, I'm not surprised by what you're saying, either.. Feel free to file a normal pull request and we'll take a look. :). Hi @ttdonovan ! I'm going through all the old pull requests and labeling/approving/rejecting. This looks like it's probably good; I'll try to confirm the code matches the docs later this week and merge if so.. This isn't an issue with Active Merchant; I'd suggest instead asking on Stack Overflow or something similar.. So, I'm sorry to say this, but we're not currently actively looking for new gateways. Each new gateway we take on adds to our maintenance burden, and we barely have time to keep the existing gateways up-to-date as is. We'd rather not support a gateway rather than support a gateway poorly. We're thus not likely to merge this any time soon.\nFor the moment, you can put this into lib/active_merchant/billing/ in your own product and Active Merchant should pick it up. We're also talking internally about either having a better plugin system (so that, ultimately, each gateway can be its own gem) or having something along the lines of a community-supported collection of gateways that would be separate from this repository, at which point this PR could move there. But there's no ETA on either of those at the moment.. @a3y3 It's more that we're just not maintaining it anymore. If you're using it, and it works for you, keep using it. There are no plans at the moment to actively remove that functionality at any point.. Thanks @reynhout ! Merged to master.. Thanks for the issue; since I see you've already opened a PR to do this in #2734, I'm going to close this issue.. The irony is that \"Georgia is no longer supported\" is also true politically. \ud83d\ude22 . Thanks @chopenhauer! I did some slight cleanup and merged this to master.. @dtykocki Did you want to merge this? Or on the flip side, @curiousepic is there already an equivalent of this that landed?. Thanks @abarrak ! This is merged.. @swebb Could you please add some tests for this? Ideally both remote and unit, but at least remote?. @bdewater Need an approver? I can take a look if so. (Or if this already merged as a different SHA\u2026). If your local Ruby speaks TLS 1.2, then so will Active Merchant. Generally speaking, we rely on the system for underlying capabilities. There's an ability to override minimum supported versions, but that's not applicable here.. Active Merchant definitely sets it correctly (see https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/mercado_pago.rb#L179 , which seems to properly set :statement_desciptor), but Mercado Pago definitely always returns WWW.MERCADOPAGO.COM based on our unit test's sample output. So, I'm not honestly sure. What I'd ask is for you to take a look at the docs and see if we've got a bug in the implementation. If we do, I'm happy to take a look, but the library seems to be functioning correctly as-written.. Hey @rikterbeek, are you still interested in landing this PR? I notice it's been sitting with changes requested for a couple months.. Seems like there are a couple things going on here, but the ultimate fix is certs, so merging this into #2901. . Merging into #2901.. This isn't a bug with Active Merchant, and this issue tracker isn't the right place to ask this question. I'm sorry that you're not getting a response on StackOverflow; perhaps reach out to PayPal?. That URL is from 2014; we fixed this a very long time ago. I suspect you're using an out-of-date gem, but let me know if you're seeing this on 1.78.. @dtykocki Well this is kind of exciting. Now they pass for me too. Maybe an API blip on their end? I'll update the commit message.. Just updated after a clean run on remote tests (Stripe didn't time out, whee).. All right, give that a shot @curiousepic ; it makes the patch larger, but I think I agree it makes it easier to read.. @curiousepic Hash#dig negates 99% of the need I've got for Hash#fetch, so I wouldn't get too attached for it if we can indeed drop Ruby 2.1 and 2.2 support for AM shortly. :). This fix looks good @chriscz . Would you mind adding a regression unit test?. @curiousepic This is missing tests, but also looks patently correct; any concerns with landing it?. Given the common consumers of this gem, I'm going to wait to merge until at least one person from each relevant org's given a thumbs-up; I'm not interested in breaking things, but simplifying the Ruby versions supported would be very helpful regardless.. Good call @bdewater . I took a stab at that just now at https://github.com/activemerchant/active_merchant/blob/a74b16c25f9bf91e079990a654d817a7a212ea5a/README.md#ruby-compatibility-policy ; thoughts?. BTW, Travis is having a bad day, but I promise these tests do actually pass (which is pretty obviously if you click through).. Would someone from Shopify mind approving or rejecting this so I can merge? Spreedly's good with it landing.. @bdewater Done. I can flag Active Support instead if you wish, but Rails seemed like it might be clearer for people. No real preference here though.. You'll be happy to know I fixed Travis in https://github.com/activemerchant/active_merchant/commit/3efa5c901aa327445056eff0496a398bf93237ba and https://github.com/activemerchant/active_merchant/commit/f75f57e55c4cab9d2673a564243a15f810bdcb9e , but I hadn't rebased yet; just did so and re-pushed, so Travis should go well.\nAnd that's fair on the remotes. I generally avoid touching those if they've been working in prod since they occasionally require adapter tweaks, but you're right that these are pretty straightforward test-local changes. I'll take a look tomorrow.. Okay, @dtykocki I fixed everything but the source_id error, which seems like it might be 3DS-related, but at any rate isn't documented in the Openpay documentation. (The 3DS guess is from tracking down some Google rambling.) This gets us down to one remote failure.. Implemented as #2896!. This is my fault, but we duplicated this work and landed #2896 instead. Closing this.. Found and cherry-picked out the unit test; should be good now.. Hold; went too quick on this. The idea is right, implementation is wrong.. Yeah, we hit a similar issue when tackling this feature, and it's why we allow the versions to float in the gateway object:\n\nDue to the fact that WePay\u2019s system restricts transaction compatibility to the version set in your WePay account\u2019s Dashboard, and new WePay merchant accounts cannot be set to older versions, Spreedly cannot assume a single version for all of our customers. Therefore, we do not explicitly specify which version of WePay\u2019s API our transactions conform to. This means that WePay assumes that we are using the version that is set in your WePay account Dashboard.\n\nI appreciate you taking the time to try adding this feature, but I think I'm going to reject this PR for now. If WePay changes how they handle versioning in the future, though, I'm really happy to take another look.. @Shelvak I apologize for asking this, but we're a bit overloaded. I'm trying to clean up a bunch of old PRs; this one looks good for merge, but would you mind linking me to the docs where the minimum changed so I can verify?. Thanks @Shelvak . I'll leave this open for a bit, but if we can't get official confirmation, I'd rather leave this patch out and rely on users to know the minimum instead of enforcing an erroneous constraint in the library.. Hi @Shelvak , did you find anything else in the docs? If not, would you mind if I closed this out, per above?. Theoretically, yes, there is one single list, and every gateway should adhere to it. In practice, no, different gateways have different lists of what they consider three-decimal or zero-decimal currencies, if for no other reason than the lists change regularly, and gateways take time to catch up. (We literally hit an issue with this last week where a gateway that was using the master list broke because we added a new currency as zero-decimal the gateway didn't yet support.) So while I wish there could just be One True List, there simply can't be in practice. . @jonmast Sorry; we're just slow to merge features that we aren't actively using at either Shopify or Spreedly. I'll try to take a look this week if I have time.. Thanks @jonmast ; I found an existing PR, #2379, that implemented the same functionality, and just merged that. If you see anything unsatisfactory in that implementation, please feel free to submit another PR improving it.. @curiousepic Could you take another look, if you don't mind? The first code didn't actually work as intended when I prodded; I added some extra regression tests and fixed the underlying issue.. @curiousepic Specifically https://github.com/activemerchant/active_merchant/pull/2886/files#diff-154e23ec35747841db7f46d7dd8f137aR108 was needed to patch things up, and you can see the regression tests diving in pretty hard there.. @curiousepic Yeah: I have absolutely no idea at all what reasonable values for that are.. Awesome! Thanks for sticking with this. \ud83d\ude80 Ship it!. This patch makes sense to me; doing regressions against some of our internal stuff to make sure it won't cause a repeat of some of the patches that led up to this, but if it checks out, I'll rebase and merge.. Okay, this is clean, passes full tests, and doesn't break upstream, either. We're good to go!. Thanks @grantbdev !. Gonna close this PR for the moment; this isn't okay to land as-is, and the branch isn't going anywhere.. Hmm. I'm clearly misunderstanding how to get RuboCop into the Gemfile, but I don't get why what I've got isn't working. (Works locally, fails on Travis.). @activemerchant/spreedly-runtime This is ready for an approval/rejection at this point; it's passing CI and clean to merge.. Killed commented-out lines and switched separator from || to |. Unless I hear otherwise, I'll merge this when CI finishes.. What's \ud83c\udfa9  mean?. See also #2828, #2826, #2657, #2613.. See also e.g. #2662, which regenerates the cert.. Okay, so: of the 126 gateways that Spreedly uses, all but one (Ezic) are covered by the default CA list on Ubuntu, CentOS, and macOS. The Git history doesn't seem to provide a good indication of why we are running with our own certificate file in the first place, so I'm assuming it's legacy from before Ruby offered a clean way to check HTTPS certs. So assuming we get similar results for the remaining 84 AM gateways Spreedly doesn't support, how would y'all feel about deleting the CA file, replacing it with per-gateway CAs for the few gateways that need it? Or is there an alternative path we'd feel more comfy with (like having a script that runs once a month, replacing the CA with whatever Mozilla ships or something)?\n@bdewater Could you add whoever from Shopify should be part of that convo?\nGateways that I tested (including Ezic, which does need to have its CA in here for now):\n\nAdyenGateway\nAlliedWalletGateway\nAuthorizeNetGateway\nBalancedGateway\nBanwireGateway\nBarclaycardSmartpayGateway\nBarclaysEpdqExtraPlusGateway\nBeanstreamGateway\nBluePayGateway\nBlueSnapGateway\nBorgunGateway\nBpointGateway\nBraintreeGateway\nBridgePayGateway\nCardConnectGateway\nCardprocessGateway\nCardStreamGateway\nCashnetGateway\nCecabankGateway\nCenposGateway\nCheckoutGateway\nCheckoutV2Gateway\nCitrusPayGateway\nClearhausGateway\nConektaGateway\nCreditcallGateway\nCredoraxGateway\nCtPaymentGateway\nCulqiGateway\nCyberSourceGateway\nDataCashGateway\nDibsGateway\nDigitzsGateway\nEbanxGateway\nElavonGateway\nElementGateway\nEpayGateway\nEwayGateway\nEwayRapidGateway\nEzicGateway\nFatZebraGateway\nFirstdataE4Gateway\nFirstdataE4V27Gateway\nFirstGivingGateway\nFirstPayGateway\nFlo2cashGateway\nFlo2cashSimpleGateway\nForteGateway\nGlobalCollectGateway\nGlobalTransportGateway\nHdfcGateway\nHpsGateway\nIatsPaymentsGateway\nIridiumGateway\nIveriGateway\nJetpayGateway\nJetpayV2Gateway\nKushkiGateway\nLatitude19Gateway\nLinkpointGateway\nLitleGateway\nMaxipagoGateway\nMercadoPagoGateway\nMerchantESolutionsGateway\nMerchantPartnersGateway\nMerchantWareVersionFourGateway\nMerchantWarriorGateway\nMercuryGateway\nMicropaymentGateway\nMigsGateway\nMonerisGateway\nMonerisUsGateway\nMundipaggGateway\nNabTransactGateway\nNcrSecurePayGateway\nNetbillingGateway\nNetpayGateway\nNmiGateway\nOgoneGateway\nOpenpayGateway\nOppGateway\nOptimalPaymentGateway\nOrbitalGateway\nPayConexGateway\nPayeezyGateway\nPayexGateway\nPayflowGateway\nPayJunctionV2Gateway\nPaymentExpressGateway\nPaymentezGateway\nPaymillGateway\nPaypalGateway\nPaystationGateway\nPayuInGateway\nPayuLatamGateway\nPinGateway\nPlugnpayGateway\nProPayGateway\nPsigateGateway\nQbmsGateway\nQuantumGateway\nQuickpayV10Gateway\nQuickpayV4to7Gateway\nQvalentGateway\nRealexGateway\nRedsysGateway\nS5Gateway\nSafeChargeGateway\nSageGateway\nSagePayGateway\nSecureNetGateway\nSecurePayAuGateway\nSecurionPayGateway\nStripeGateway\nTnsGateway\nTransFirstGateway\nTransFirstTransactionExpressGateway\nTrustCommerceGateway\nUsaEpayGateway\nVancoGateway\nveMerchantGateway\nVisanetPeruGateway\nWepayGateway\nWirecardGateway\nWorldpayGateway\nWorldpayUsGateway. Sorry about that @elfassy ; I actually thought we'd had sign-off from both for some reason prior to landing. Internally at Spreedly, we decided not to do this again, but also decided internally that we could safely land this time since auditing this PR was relatively trivial.\n\nSo:\n\nI apologize.\nWe definitely won't be doing this again.. @anderslemke We're currently not actively merging new gateways; I apologize. I believe we've made a note to that effect in the README, but I can double-check. Medium-term, we're looking to break this library into pieces so that it's easier to add new gateways that we can't quickly verify in such a way that you can easily use them if you wish, but it'll be clear they haven't been thoroughly vetted.. Whoops, thank you @anderslemke! Sorry about that.. @bdewater The test failures from Travis look legit.\n\nConceptually, I'm fine with this; I don't think this impacts Spreedly, since we override the connection objects and just went through our own version of this internally. I'll do a double-check if it lands that it doesn't break us, but it shouldn't be a big deal to un-break if it somehow does.. Test failures look legit.. Thanks for the PR @abarrak . I don't really know that we want to support this; gzip compression is generally great for everyone involved. If the logging bothers you, I'd rather see a PR that can better handle the connection switching to gzip.. > @bpollack I'm not following your point here.\nThe gzip isn't endpoint-specific as such; it's based on the size of the content generated, and some endpoints generate enough content that our servers decide to gzip it if that's available. This line:\nhttps://github.com/activemerchant/active_merchant/pull/2911/files#diff-3d8ec2e8f34093ada56bc96cef17f9ecR290\nis working for your purposes by disabling gzip. That's not an acceptable way to resolve this issue. (This issue also applies to other gateways, incidentally, not just spreedly_core.rb, which is why a Spreedly Core-specific fix seems like the wrong way to go.) It seems like the issue you're trying to resolve here is that the transcripts contain the raw gzip data. I'm not sure I agree that's an issue, but if you do, I'd rather approach it by making the transcripts show the unzipped data, not disabling gzip for one particular gateway.\nIs that enough background/info to help out here? I also got into some of this on the email you sent to me last week.. Thank you, @shasum ! Merged to master.. Huh. Dangit. This won't fix things, because RuboCo is incompatible with ruby-parse 2.5.1.1, which is the version that fixes this bug. \ud83e\udd26\u200d\u2642\ufe0f \nI still think this is worth landing, but it doesn't get us closer to having PayPal included in tests.. I'm gonna kill this and fold it into #2928 as a demo.. I'm thinking part of this would involve me taking back my objection on #2627 and then continuing down that road. If we get to a place where the gateways are individually requireable, then the gem kind of just falls out of that.. @curiousepic If you are okay with/approve #2925, this will pass.. This PR changes way too much. Please feel free to open targeted PRs that change individual items, but we can't meaningfully review or look at this. (Plus I'm not entirely clear what this PR is even attempting to do.). @bdewater Integrated your changes. The build failed a couple times due to me rebasing a bit too much, but I think we're clean now.. Second on having a test for this. Just unit ought to be fine.. Travis is fixed. The workers we got just looked like they were bad workers, so I kicked off the bad builds again, and sure enough, clean pass.. Take a look at the Getting Started guide and the rdoc for general guidelines, and the Redsys documentation for what exact options you'll need to pass. We don't keep documentation for each gateway, since their requirements can change, but the combo of the above + Redsys' own documentation should get you going.. No one on the team speaks Portuguese; what's this doing?. This also looks like it needs to be rebased and cleaned up before the tests will even run; and also looks as if it's touching a lot more than just Worldpay. Let me know if you're interested in tackling these aspects; if not, it's okay, and I'll go ahead and close this PR.. @nfarve #2935 should allow this to pass if that looks okay with you.. > @nfarve #2935 should allow this to pass if that looks okay with you.\n@nfarve Just landed, so if you rebase, the Rubocop errors will go away.. Seems okay to me. @curiousepic this look reasonable to merge to you?. Er bah. Meant to ping @nfarve. @nfarve , this look okay to you?. Thanks @adam-stead ! Merged as ab8c6181dbad9c8ce9bb4ae9bd3643fcad170254. This completely breaks the remote test suite for Bridgepay. Are you sure that this new URL is for the same version of the gateway that Active Merchant currently supports?. Closing due to lack of response, but please feel free to re-open when you're ready for review.. Actually hold off a second; going to do this slightly differently.. Okay, reopening. Changed the API version marker to a constant.. Yeah, I honestly was surprised it went in cleanly, but the remote tests pass\u2014and that seems legit based on the docs so far, too.. Thanks! I added unit and test output. Remotes look fine, other than some breakage not related to this. (We'd be happy to take a PR to fix that, too, @vnbrs.) Merged.. Thanks, @vnbrs! Merged.. Thanks for the patch, @Ahmed-Hussein93. Could you add at least a unit test to prevent a regression?. @deedeelavinder Yeah, I saw that; I think it's bogus. I kicked off the build against just in case.. w00t, yep. Merging.. Do you know how it could even be nil? Ruby's using some super-secret cipher that's not even worthy of the array that would dare contain it?. @bdewater Do you want to kill this? I have time to merge and test today otherwise.. @bdewater Ping.. @curiousepic Tweaked naming of variables/changelog to be for the AM audience, not the Spreedly audience.. Just to clarify, do you mean the mocking service is pure HTTP? If so, that's explicitly not supported by Active Merchant. Even TLS lower than 1.2 isn't sufficient (generally) for PCI compliance, so having support for HTTP endpoints is explicitly something we don't support.. (There are tons of solutions here that cost nothing and are relatively easy, incidentally, ranging from using Let's Encrypt to puma-dev to manually self-signed certs. The lack of HTTP support is not designed to prevent you from doing development locally.). @bdewater Pinging you just in case you've got a different take here, since IIRC this is your code.. Fair enough @bdewater ; I'll merge.. Merged as 00287a262d0607b206e0682a789dc368e3fbc2d8. @activemerchant/spreedly-runtime Ping?. I know y'all are at Shopify anyway, but it seems like this is a full duplicate of #2978 . You should be doing that on your end, prior to calling into Active Merchant. It's quite easy: cards have dedicated BINs, so you would just ban the American Express ones (IIRC, card numbers that start with 34 or 37).. Recalling this from review for the moment; I may approach this differently.. All right, adding back. I'm actually happy with the direction this is going, and I'd like feedback on how others feel about it before going any further.. Also, apologies for Laser being part of this. I can strip it out before this whole PR series, but Maestro tests do (and should!) fail if Laser's left in, because it's in Maestro's current BIN range.. > While you're in here, might be nice to make the hash name CARD_COMPANIES more descriptive, perhaps CARD_COMPANY_BIN_RANGES.\nSure. I'll hold off until @bdewater or @joshnuss or someone from Shopify weighs in so I don't have to keep doing odd rebases, though.. @bdewater Any thoughts on this?. I'm going to merge this today; it's been open over a week.. @bdewater Implemented your changes, except the to_s changes; I agree we should do that, but it gets more involved really quickly (some methods that call .to_s appear as if at least we may call them directly, so I'll need to audit that on our side), and I know I've got another patch or two this direction anyway, so I'd rather delay that for a separate PR if that's all right.. @nfarve Test failure was bogus; I kicked it and it's green now.. @bdewater We don't support Komoju, and it appears y'all don't, either, so I can't easily test this. You want me to close it or assume it's okay and merge?. Actually, this is backed up by https://help-en.komoju.com/article/155-important-new-komoju-test-mode-and-termination-of-komoju-sandbox-environment ; I'll merge this and close.. Thanks for the contribution, @miyazawadegica ! I've merged this.. Sorry @bdewater ; I'll quit tagging you on this series shortly, but I want to keep at least someone from Shopify in the loop as I clean this up so I don't make things unintentionally exciting.. Also, if you're curious, e2a2a6a9f8a4a5f919b34835272623c9499f66e0 is what the more aggressive version of this would add. I'm happy to fold that in here, but it's definitely riskier.. I promise this is the last one I'll ping Shopify on for a few days, but this one still felt like one last one you all might want input on. :-). The review this depended on got approved and merged; I updated the description appropriately.. > \ud83d\udc4d First time encountering that SymbolProc thing, it seems less readable and un-ruby-like, but if it's a standard RuboCop offense I'm not bothered\nI am okay to back that one out, but it was added in Ruby 2.2 and is actually quite common; it's used nearly 300 times in Rails, 70 times in Sequel, etc.. NB that unit tests had to be changed, but all remote tests worked exactly as-is, which is expected.. I finished up the level 3 stuff (which the first commit was designed to support), so I folded that in here, too.. Hold; expanding the list of updated gateways.. Okay, adding y'all back; after further convos, we're just doing these two initially.. @curiousepic What's going on with this? Should it still be merged?. This looks way better @nfarve! I do think it'd make sense to fix up the entire hash blocks in a couple places, since this still causes some indentation regressions for two sections, but this is almost ready to go.. Level 3 is in private beta, which is why you can't find docs. But I also can't repro what you're seeing. I added the following unit test to Stripe locally, and it passes:\n```ruby\n  def test_line_items_not_included_when_absent\n    @gateway.expects(:add_creditcard)\nresponse = stub_comms(@gateway, :ssl_request) do\n  @gateway.purchase(@amount, @credit_card, @options)\nend.check_request do |_method, endpoint, data, _headers|\n  assert_not_match(%r{line_items}, data)\nend.respond_with(successful_purchase_response)\n\nassert_success response\nassert response.test?\n\nend\n```\nline_items is likewise only supposed to be included when present. Could you give me an idea how you're invoking this?. @jeffblake To be clearer, why are you passing in line_items? It was previously not honored by the gateway at all, so it would've been a no-op; it's now honored, but assumes you know what data to pass.\nOr conversely, since the comments on this ticket bring me to understand you added line_items as an attempt to rectify the issue, what were you initially including that trigger any level 3 fields getting added?. Ooookay, I get you now.\nIf that's what's going on, then this is not a bug. The options passed to calls in various gateways are not normalized (with a few very specific exceptions); they're explicitly gateway-specific options, with no intrinsic meaning to Active Merchant itself. Thus, it's not safe to assume that option foo_bar (or line_items, in this case) for one gateway does the same thing as option foo_bar on another gateway. You'd need to handle gateway-specific options in a gateway-specific way.\nI'm not currently likely to add the error handling you're asking for. In general, we can't keep track of all the specific options for all the gateways Active Merchant supports, so any validations we'd add would inevitably trail behind the official documentation anyway. There are some exceptions, but since the Stripe level 3 fields are currently in private beta, I'm very sure that any validation I'd add would be likely to change. That said, if I did add such a validation, it would raise an exception (much like we do for mandatory params in other functions), so this would still require you to handle the two gateways specifically in the calling sites. \nPlease let me know if there's something I'm not understanding here, but if I've understood things correctly, I'll likely close this won't fix.. Correct. You can confirm that by noting that the third party payout store is literally reusing existing methods to build up the submission data (and confirming is just a transaction number).. Thanks for the PR. Before I look at merging, it'd be helpful if you could let me know how nils are getting into these functions. Are these calls happening \"within\" Active Merchant, or are you calling these functions with nils from your code?. Thanks @guaguasi ; I'll take a look tomorrow and merge if things look good.. I think I'm okay with this. I'm going to tweak a few minor things as I land, but it seems safe. @activemerchant/spreedly-runtime , pinging just in case anyone wants to take a look; otherwise, I'll land this afternoon.. Bah, sorry for not circling back around @guaguasi ; this is on my todo list for today.. Merged. Thanks @guaguasi !. I think it might be worth adding CommStubs so you can do a stub_comms/check_request just to check that the data is indeed added properly on the request. I had to do that here for similar reasons: responses are reused from other tests (despite the fact they wouldn't be in real life) due to a lack of an ability to write or use remote tests, just to make sure I was adding the data correctly.. Thanks for this suggestion, @tywhang. This unfortunately falls outside the scope of what Active Merchant does; the goal of this library is to provide a common payment surface across all the gateways, rather than to provide gateway-specific features like this. It would probably make more sense either to add this functionality entirely separately in your application, or to use a refinement in your own code base to add the functionality to this class just for your use case.. @curiousepic Made your requested change; give it a quick look-over, and I think this can land.. I'm okay taking that risk. For the two routes where we know this happens, the only thing being returned is the transaction ID we're trying to void or refund, which is also what's provided to the route in the first place. If we have generic issues, I'll accept ownership.. Hmm, looks like we can; that's done by setting IndentOneStep to true. How do y'all feel about that, though? Having when flush with case is the default RuboCop style, and also the default Ruby style, but IMVHO it makes them harder to follow. If it's just me/we'd rather just obey Ruby conventions, though, I won't fight this.. > Honestly the super-indented ifs are more annoying to me... \nThis is why I haven't tried to land Layout/ElseAlignment in AM; we do this pattern so often there that it actually then overloads the line length limits. But I don't know an equivalent of EnforceStyle: end for else alignment.. Yeah, I know. I'll flip to approval, since there's nothing to be done with ElseAlignment and it seems I'm the only one upset about the when alignment.. @nfarve Do you still want to merge this as-is? It's drifted enough from master I'm getting worried about it merging cleanly.. @curiousepic Take a look at the redo and let me know if this looks better.. Generically, I think we want some sort of \"copy this hash if and only if these elements exist in it\" as a helper method in Gateway. That's the \"real\" fix. But I think this is absolutely the right approach for now.. The overall plan here looks right, but the code to check the body content won't work as intended.. @deedeelavinder I'll hold merging this until you also \ud83d\udc4d so we don't repeat last night. \ud83d\ude2c . @deedeelavinder @curiousepic Would you mind checking one last time? I fixed up the unit tests so they'd actually fail/test the right thing.. This may be too big; 203 files were touched, and while most only have literally a couple lines being altered, the final diff is still relatively large (500 lines, unsurprisingly, or a bit over double the file count). I'm happy to break this into multiple PRs, but we're getting to where some of the changes are just kind of pervasive.. @activemerchant/spreedly-endpoints Ping. If this is too big, I'm happy to break it up, but it's gonna bitrot if it sits too much longer. I already had to rebase and clean up a bit.. All right, I'll break it up.. NB, remote tests are largely currently failing because their fake Visa processor is down, so I omitted the results, but they are just failing for that reason, not anything related to the h3 field.. The RuboCop failure appears legitimate as well (and very quick to fix).. Oh BTW @molbrown don't forget to add to CHANGELOG prior to merging.. Well, at a bare minimum, I'm passing the CC in the MPI requests, which definitely needs to be scrubbed, so\u2026let's start there. :). @curiousepic Scrubbing added, plus some cleanup to reflect how three_d_secure is usually passed.. (And I also added an additional remote tests, but I think this is as far as it goes.). > I think the unit tests look good, though with the extra MPI craziness I can't quite tell if there's a permutation of request/response scenarios that isn't covered (that could be). :not_sure_if:\nIt might be a good exercise for both of us if you could articulate anything obviously missing, even vaguely; I don't exactly have super-high confidence in this code.. @curiousepic Nuked the erroneous puts, plus fixed the RuboCop error.. @nfarve Yeah. I'm going to retract this; it's been subsumed by the Core PR entirely.. @nfarve This is just the first in that RuboCop series.. @nfarve This looks safe to merge in; any concerns?. Thanks, @ta ! Merged as 1bfa5e9bebc4f656ab13cafddbba8070bb375ab4. Thanks @yosukehasumi ! Merged as fdc5468704cb9c0c951a3b9657b7a99d61699524. I'm \ud83d\udc4d , but I'll leave to @curiousepic  to actually approve if he's set.. The build error's just RuboCop, since this patch is so old; just fixed everything up and re-pushed. Again, I doubt this should be merged as-is for a variety of reasons anyway, but this logic does work.. I converted over (part of) Paymentez and pushed that up as a second commit, just to remind myself what this feels like to do fresh. I do think it's overall an improvement; there's significantly less redundancy. But it doesn't do anything for the XML gateways, and it's not quite fleshed-out enough to replace all the assignments in the non-XML ones. In particular, we struggle a bit with handling parameters that are not initialized from another hash. That may be fine, or maybe not; I'm not sure.\nI do think the name TreeCopy is wrong, though, if you want something easy to bikeshed over. Maybe HashShaper?. @activemerchant/spreedly-endpoints I wouldn't normally ping this quick, but I want to make sure this gets to prod sufficiently far before EOW that I don't leave it hanging.. Hi @lancecarlson . I'm taking a look at this to merge, and I was wondering if you might have some time to add remote tests. We generally like to have both unit and remote tests to help avoid regressions.. (Also, if you can't run the remote tests, I'd be happy for you to push remote tests in an unknown state, and I can debug and finish them over here.). Roger @lancecarlson , I'll take it from here and get this merged today.. All right, as far as I can tell, this all checked out great in the sandbox, so I've merged after some commit title cleanup, adding a CHANGELOG, and consolidating some of the commits.. Thanks so much @lancecarlson !. No worries, good luck!. Thanks, @joeyjoejoejr . Squashed and merged as e7aad1c72559aaef84634d7b8a43b2a8264442ed. I removed myself since I can't work as actively on this anymore, but adding @activemerchant/spreedly-endpoints or @activemerchant/spreedly-runtime might be worthwhile.. I couldn't find this pattern elsewhere, but it seemed like a really clean way of handling this client-side. Other reasonable options would be to do this, but without the requires! line; or just to unconditionally pass through these attributes, if they exist.. This can be pulled out of the credit card, but I was a bit ambivalent on whether that actually made sense. Nationality, entity type, and date of birth obviously cannot be pulled out of that field, so having this consistently be its own set of data seemed saner to me.. > I don't have the full scope of changes in my head so I'm assuming that each item can be sent to the gateway individually instead of requiring the entire group of options.\nIn this particular case, the absence of an order ID requires all four options at once; none are optional, and none are required for other transaction types\u2014hence this style of requires!. (More details in the JIRA ticket this branch is named after, if you're bored.) Whether it should be ActiveMerchant's job to do this, and whether shoving a requires! halfway through the method, are still points I'm not clear on. It definitely works, but it's a pattern I didn't see in other adapters I glanced at.. Dangit. Fixing.. The order_id check is because those fields aren't required if it's present. The alternative to doing it this way would be to say that it's not ActiveMerchant's problem to tell you you're missing fields, at which point this method would instead become:\ndef credit(money, creditcard, options = {})\n  post = payment_request(money, options)\n  post[:amount] = amount_hash(money, options[:cgurrency])\n  post[:card] = credit_card_hash(creditcard)\n  post[:dateOfBirth] = options[:date_of_birth] if options[:date_of_birth]\n  post[:entityType]  = options[:entity_type] if options[:entity_type]\n  post[:nationality] = options[:nationality] if options[:nationality]\n  post[:shopperName] = options[:shopper_name] if options[:shopper_name]\n  commit('refundWithData', post)\nend\nThis seemed harsher to the user and doesn't save us much work, but it permits greater flexibility on the part of the gateway.. I wrote this, but as I started updating the tests to handle it, I realized I disagree with the feature: for us to do this, you'd have to 1) issue a credit, 2) successfully supply the date of birth, entity type, and nationality, but 3) forget shopper name. That's already an edge case of an edge case, but yoinking data from the credit card fields has a fun side-effect that the user may get the credit rejected for having the wrong shopper name, and then will be trying to figure out how that's even possible/what the shopper name was in the first place.\nI thus think this is probably the best path forward as-is.. Or just do subscription_id = reference.split(';')[-1] (if I understand correctly which value you want), which I think reads a bit more clearly anyway. (Although TIL Ruby can do destructuring binds, which I hadn't known previously.). I don't think this is doing what you intend; the result of this line as-is will be buyer[:contactPhone] set to options[:billing_address][:phone], options[:shipping_address][:phone], or nil, whereas I suspect you meant to leave it unset entirely if neither is available.\nI'm not aware of a clever way to short-circuit this in our version of Ruby. The closest I could get would be something like\nval = (options[:billing_address] || options[:shipping_address] || {})[:phone]\norder[:contactPhone] = val if val\n\nbut I'm not sure that level of clever is actually wise.. Ditto. If you intend to create :contacTPhone unconditionally and are okay with it being nil, this is fine, but I don't think that's what you intended.. I didn't see the attached ticket, so that may well be the case. I'll yoink my reject.. Fair enough, I'll switch this around. Just felt odd to me, since only that one value was needed.. I'll change that as well to be consistent. Thanks!. Nice refactoring! This made the code quite a bit easier to read.. I am pretty sure you meant action == :purchased || action == :authorized; as-is, :authorized is truthy, so this condition is always true.. This is personal preference, but this condition is getting sufficiently complex I'd generally prefer it not to be a guard clause.. Same issue as line the earlier line. I know it's one line, but you repeat this exact line three times, which is three changes to have a typo, and there's already precedents of add_*s in this gateway to ameliorate this exact issue (see add_echo or add_email). I'd thus really prefer this being add_a9 or similar.. Second repetition.. Third repetition.. Ooh, good idea! I'll change this, although I'll still leave the comment.. I actually originally had that, but it felt a bit weird to me, since each alias was used only once, in the appropriate function, at which point it didn't seem to be getting much. It looked like this, roughly:\n```ruby\nACTIONS = {\n  purchase: 'DB',\n  ...\n}\ndef purchase(...)\n  ...\n  commit(ACTIONS[:purchase], post)\nend\n```\nI don't have strong opinions on this. If you do, or if you have a different spin that feels less redundant, I'm completely happy to go back to this style.. I didn't, but I will.. @curiousepic Okay, they do require a non-zero value, and 1.00 seems to be the lowest value for at least some of the processors, so I think this has to stay as-is, sadly.. Thanks for the catch, @deedeelavinder ! This isn't actually why unit tests were failing (that was because XK isn't a country code AM knows about), but it should be fixed anyway. Updated push coming in a second.. Extra space after ] and before ==.. Extra space after ] and before ==.. And again, apparently? Not sure what's going on here; buggy formatter?. And\u2026again?. And again.. You didn't actually change these lines, but they're flagged due to quote changes.. These lines aren't actually changed, but they appear to be due to quote changes.. Quotes again.. And again.. This won't work; stub_comms, when not given arguments, alters @gateway, but you're running the test against gateway, so this will be doing live requests.. But stub_comms does literally nothing here, so either this isn't a unit test, or the unit test isn't working properly. Or maybe it somehow is working properly (though I confess to confusion on how), but in that case, stub_comms is a no-op and can be deleted.. That's fair, though two notes on that: first, that should probably be a separate commit, because it'll otherwise confuse git blame; and second, I've been told (and tools like RuboCop generally enforce) the quote format to standardize on for strings that do not require interop in Ruby would be '', not \"\", specifically so that adding a random # doesn't suddenly result in surprising behavior. So I think you'd want to go the other direction here (unless we've got code standards that specify the reverse is the standard within AM).. But gateway is a live gateway; your call to .purchase at https://github.com/activemerchant/active_merchant/pull/2663/files/795afc742131856525521e627984d193c8fdfaac#diff-02139dc0c1d5f38586d52890be485342R307 going to actively call against them. So this either belongs in the remote tests, or you want\ngateway = PayuLatamGateway.new(merchant_id: \"merchant_id\", account_id: \"account_id\", api_login: \"api_login\", api_key: \"api_key\", payment_country: \"MX\")\n...\nstub_comms(gateway) do .... Indentation (I know\u2026). This is short enough that you could do shopper_interaction = payment.verification_value ? 'Ecommerce' : 'ContAuth', but that's 100% your call.. This is again stupidly minor, but RuboCop or your equivalent should be telling you to put spaces on either side of the =.. Just to sanity check here, it makes to add Compra en before the user-supplied string? I trust you, just it's the only instance of this I could find in AM (not that I spent that long looking).. Why the quote change?. What did this alter?. Would it make sense to just bump up @amount then?. This is a weird gateway.. The dying Pythonista in me respects but is saddened by your choice, @dtykocki ;-). I'll switch this pattern though.. Oh, point. Sorry, first interaction with TPV. That'll also avoid me having to make store munge. Thanks!. Seriously, @dtykocki, I was just dying for F#/Elixir/Haskell pattern matching throughout this PR. Given the heterogeneous nature of their JSON, that'd have simplified things so much it's not funny.. Yep, you've got it. I initially wrote this to just generate a random user_id so we could just store the same card multiple times (which is the approach taken by other tokenize-then-$WHATVER gateways), but because the following operations require user_id to be constant, that wasn't a viable path forward.. Yeah, that's why Ruby 2.3 named its safe navigation operator &., rather than e.g. the more common ?.: naming it &. echoes this pattern.. (Not holding for this.) This can all be combined into amount = options[:verify_amount] || minimum || 100.. I think this would be better as a straight conditional, rather than three guarded requires! calls. Best as I can figure, what you're trying to do is say you want one of customer_profile_id, email, or merchant_customer_id. In that case, I'd skip requires! entirely (which is just a function that throws ArgumentError in certain conditions) and throw the exception yourself, or do simpler logic. As an example, something like (didn't think through this, not tested, may be wrong, but points in the direction I'm thinking)\nraise ArgumentError(\"Requires one of customer_profile_id, email, or merchant_customer_id\") unless options[:customer_profile_id] || options[:email] || options[:merchant_customer_id]\nmight be a better fit.. Was this a change in the API?. That's not the response; that's the profile. Use a new variable.. Commented-out code.. Do you truly want these in all tests? If not, I'd modify the tests themselves where you want this. The fact you've got optional modifications at https://github.com/activemerchant/active_merchant/pull/2690/files#diff-068964b7f2d4b4c8f35e220595c2ee62R25 makes me think this shouldn't be a global change.. I'd prefer to guard these with .when() calls, rather than just adding new .returns() calls at specific junctions in tests, but that's a personal preference.. This line (and its twin on 358) don't seem to give us anything useful.. Was this intentional? Figure it probably was; just was surprised since there wasn't a mention of it in the commit message.. Sigh, nope. Good catch. I'll axe them.. Are you sure you want :use_first_response here? Seems like we just want the result of the last one to succeed; otherwise, I'd think you'd potentially miss a failed capture.. Since you're not doing anything with the &, and it's optional anyway, I think you can safely omit it. (Or if not, I'm curious what I'm missing/what failure you were seeing.) Same applies for the next few lines, too; in all cases, I believe you can drop the &? portion of the regex.. Does it make sense to concatenate address[:address2] in any way, or do we not care here?. I'm actually totally fine with this pattern, but you didn't use it elsewhere in the file (e.g. lines 147 and 148 could use this pattern). It might be worth being consistent one way or the other. Really up to you, though; I don't have a strong opinion.. This works fine, but I had to read it twice to grok what you're actually doing is a mapping operation; might be worth converting it to\npost[:items] = options[:items].map do |item| ...\n\nto make it clearer that's what's happening.. You likewise can do this as a mapping operation, but playing with it locally, it was a bit gross. Best I got for the whole thing was\nruby\npost[:items] = options[:items].map do | item|\n  item.map { |k, v| [k.to_s.gsub(/_/, ''), v] }.to_h\nend\nwhich wastes memory and I'm not convinced is cleaner, but your call. (There's a grosser version using .inject which doesn't waste RAM, but it gets sufficiently hard to read that I think your existing version is superior to that one.). This is the same pattern (albeit explicitly) that you did in add_additional_data (and looking back, that does it manually too, from lines 193 to 198); maybe worth extracting a method so you could cut this to something\npost.merge!(munge_keys(options, [:secure_value, :secure_xid, :secure_flag]))\n\nMay not be worth it though; entirely your call. You don't appear to be doing such direct assignments in any of the other add_* methods.. Base64.strict_encode64 shouldn't be including trailing spaces, so .strip ought to be a no-op here; should this be for the username:password string?. This needs to be vetted in some way or we're allowing ANY URL to go through here. You could exfiltrate all our cards by just passing in postbin.com or something.. Most of our other gateways return nil here, which might allow you to just drop this line in favor of a slight tweak to the next.. It this is safe to share, please add a comment indicating that. If not, this looks like it might be our actual testing creds.. This will get executed as\nassert_equal 'Approval Queued for Capture', capture.message\n\nsince 'Approved Queue for Capture' is truthy. I think you meant something closer to\nassert_includes ['Approval Queued for Capture', 'Approval Accepted'], capture.message. Is this transaction guaranteed to never exist?. (BTW, assuming this is from our convo in Slack, I was suggesting doing a regex vet. So if the URLs always have the form `*.foo.com`, we'd just throw an exception if the domain didn't match that.). Wouldn't that still allow the customer at runtime to submit any URL?. No, I was saying you want it somewhere in the actual AM adapter. Putting it in `initialize` (as opposed to right here in `url`) would be fine, and might provide better error reporting. But I don't think we want this check in Core; while that'd help _us_ out, it both puts more logic into Core, and it doesn't help out other users of AM. . Might be worth adding something like `@invalid_txn = '23221'` and then using that here to improve the documentation a bit then, but up to you.. No worries. It's doubly tricky for me to catch these, because Python can handle variants of this in certain situations. E.g., `if 0 < x < 5` actually does what it looks like it ought to do. So I always have to think a second when I see these in Ruby.. This is pithy and I feel bad suggesting it, but I think this should be called `require_valid_domain!`, not `test_domain`\u2014doubly so since it throws an exception if it's invalid. Playing off that, a slight tweak to its signature would let you drop the `if` guard without making anything much grosser. So the ultimate effect would look like this in `initialize`:\n\nruby\nrequires!(options, :merchant_id, :username, :password)\nrequires_valid_domain!(options, :domain)\nIMHO, that does a better job obeying existing expectations.. If you don't want to do what I suggested above, I would suggest redoing this as a guard, e.g.\nraise ArgumentError.new('not a valid cardconnect domain') unless /\\Dcardconnect.com:\\d{1,}\\D/ =~ domain. Were these &?s still required?. I still think you can drop line 281 straight-out; accessing nonexistent keys returns nil, and passing in nil as a key is legal, so the guard is redundant, as far as I can tell.. Other gateways I've seen usually have returned STANDARD_ERROR_CODE[:config_error] for this instead of throwing an exception. (In fact, I'm not used to seeing AM throw exceptions outside an adapter once the gateway's set up, period. I'm only used to seeing that as part of instantiation, such as the requires! calls.). Roger, so could you kill the one on line 141 too then?. Maybe this is a pattern, but if it isn't, any chance we could make this be either add_three_ds/execute_three_d or maybe add_3ds/execute_3ds? threeds is a bit hard to read.. This can be condensed to just\npost[:additionalData] = {executeThreeD: 'true'}\npost[:browserInfo] = {userAgent: options[:user_agent], acceptHeader: options[:accept_header]}. There's refute and friends instead of assert !... if you want it here, but I'm fine with this pattern also.. This is petty but why not just options[:key] = @fee_refund_api instead of the merge! call?. Oh. Looking elsewhere, it seems that everywhere in this file does that?. Strictly speaking, a_hash.delete(:no_such_key) is safe, so you don't need the guard.. Yeah, I'm with @dtykocki. Maybe something like\nruby\ndef require_success!(obj, message)\n  obj.success? ? obj : Response.new(false, message)\nend\nwhich'd make it clearer what's going on here.. I was sure Ruby had to have an equivalent of Python's not any({'address1', 'city', 'zip', 'state'} - statement_address.keys()) but nope, this seems like the Ruby way.. Kill if you've got a second.. This can just be assert_scrubbed(@gateway.options[:password]..., which would make it consistent with other remote tests that do this (see e.g. authorizenet). This can just be assert_scrubbed(@gateway.options[:password]..., which would make it consistent with other remote tests that do this (see e.g. authorizenet). Okay, I'll drop this at this point, but both the fixture and @gateway.options[:password] are already strings, so the .to_s isn't needed. I know we're trying to patch this quickly, but I'd rather take a few extra moments to make sure the code doesn't suffer than swing back later.. If you don't want to add a comment here about why you're doing it this way, it might be worth explicitly CGI.encodeing it in-place (or equivalent) to make more obvious what you're doing. Just an idea, though.. Good call; will change.. The behavior of a mandatory parameter after an optional parameter can get really weird; I think it's worth reversing these (i.e. add_payment_source(xml, source, options, action = nil)).\nThat will also allow you to ax the options=options calls at 271 and 249 to boot.. Newline after end. Gah, I did, but forgot to git add -p as I was bouncing between two other branches. Will grab it out of whatever stash it landed in and add.\nAnd re. the array access: AFAICT, the original implementation was wrong. In AM, if I understand properly, account_type should be one of checking or savings, but Bridge Pay actually requires the value C or S (see https://www.dropbox.com/s/1tg479a9n8e3dvt/BridgeComm%20Communication%20Interface%20API%20Guide.pdf?dl=0 page 96, which I think is what should be happening here).. Does it make sense to post[:ach_info] ||= {} here? If someone reordered add_address and add_payment_source calls in purchase or something, it'd suddenly crash, and the lack of unit tests means that might not be caught super quickly. (Alternatively, if there were a purchase unit test, I think I'd be okay with this arrangement.). This is 100% up to you, but an alternative to the heavy repetition here would be\nif crypt_type = options[:crypt_type] || @options[:crypt_type]\n    post[:crypt_type] = crypt_type\nend\n\nwhich is slightly longer, but might be easier to read. Again, entirely your call.. I did mean elsif, not else. In the case neither branch is taken, nil is returned, and no XML attributes will be added to the paymentDetails tag, which is indeed what we want as the default. This is also why I didn't go with a ternary; you'd have to use two of them to achieve the effect, and doing something like\nreturn if option[:action].nil?\n{'action' => options[:action] == :credit ? 'REFUND' : options[:action]}\n\nfelt more confusing to me than the version I did. I'm open to alternatives, though; this conditional definitely feels odd, even if it's mechanically correct, and I did feel as if there was probably a cleaner approach. If you feel strongly that the second version is cleaner, I'm really flexible on that point.. @deedeelavinder Actually, after sleeping on it, I think the second is actually better, because it's more obvious that the code isn't making a mistake and does intend to return nil in that use case. I'll swap that out. Thanks!. Landed. Slightly different than the above code-snippet, which is wrong, but same idea.. I dropped the require: false and it still dies.. options[:currency] || currency(money) is a pattern that shows up several times here (e.g. in build_refund_request and build_purchase_or_authorization_request). Do you think it might be worth extracting? (And that's a genuine question, because three appearances is enough to make me wonder, but not enough to be an obvious win.). Dammit, will axe. Thanks for the catch.. Just to be clear, just do | instead of ||?. Well that'll teach me not to run remote tests. Fixed (along with the corresponding test).. It didn't fail when I originally did 084b9505b33e, but that's because you could not specify a different amount for that at the time; expected behavior was it should succeed because it was ignored and meaningless. (Cf. docs in Dropbox.) But I've noticed it failing when I've done a few L3 fixups since then. This is the first time I've done a full-blown redo of the tests to compensate for the new behavior, and also why I broke form and documented why a failure is expected.. This has to become @options to distinguish itself from the local options variable that is shadowing the options method, right? If so, it's correct; just confused by the diff.. Welp that's the first time I've seen JSON in a header. Probably won't be the last.. Shouldn't this be either options[:meta].to_json or @options[:meta].to_json? If not, then I really am getting confused what's going on here.. > But headers also called options[:key] and options[:version], which, in the absence of a local options, apparently resolves to the global values?\nYep, because @options is declared attr_reader in gateway.rb, so if there's no local variable called options, then you'll grab the gateway's global config from the accessor.\nIn related news we may want to stop naming variables options in gateways\u2026. I thought RuboCop wanted exactly the opposite of these (Travis seems to agree).. I think Docs indirectly grabs this, so it's probably worth fixing.. You might be able to fit this on one line via ternary, but your call; I find this very readable as-is.. This is 100% your call, but given you immediately initialize this, you could just do\nruby\npost = {\n  LanguageCode: 'E',\n  Name: credit_card.name.rjust(50, ' ')\n  Email: options[:email].rjust(240, ' ')\n}\nwhich decreases some repetition. That said, this is 100% your call.. I don't actually see this variable used anywhere. Is this a remnant of something?. I'm confused about how this scrub method works. token and cardNumber both look as if they'd be in the base64-encoded part of the post, so I'm not clear how this filter would work in general. But beyond that, I'm also unclear why they end with : instead of =, since they're done as POST params. Could you walk me through what I'm missing here?. Should this comment be killed?. ~Do these test numbers correlate to ones that are supposed to be in the docs? Why are they all just test<num>?~ Okay, I get it; file name says yes.. Okay, I think I get what's going on after reading the tests: we're scrubbing the value they echo back in the response, not our submission. Ditto for the token.\nShould we scrub the base64 somehow? Do we do this for any other gateway? I'm asking because I'd generally consider preserving base64 strings a PAN leak, but I also don't want to remove all the debugging info\u2026. As far as I can tell, we always, without exception, call send_ack after commit, and always in the same way:\nruby\nresponse = commit(some_action, params)\nsend_ack(response.authorization)\nresponse\nGiven that, I think it'd be worth thinking about just folding it directly into commit. It'd be one thing if we sometimes didn't send the ACK, but it seems like we literally always do. (Alternatively, if we do call commit without send_ack sometimes, or if we want some flexibility, I still suspect it'd be a win to just add a ..., send_ack: true) param to commit.). It can still be folded; you'd just need to split out commit from commit_raw (or the other direction, commit_with_ack v. commit). Or just go the send_ack: param route, in which case send_ack would pass false.. Okay, last thing: I doubt these are working credentials, since they're the default, but if they are, never mind and we're good to go. (I suspect for them we just want to axe out the comment, not put in working creds.). You're welcome! You're good to ship now, just to reiterate.. Assuming this is re. RuboCop, RuboCop ought to be smart enough to allow double quotes for strings that need it (e.g., escapes like what you're doing, or \"#{injections}\"); are you seeing it get irritated about these?. It wants the else lined up with the if (and will in general want the whole block appropriately indented), so line 224 should start two spaced after the if, and the else should align with the if also.. You can run rubocop --auto-correct to see what it suggests, BTW.. YAML.load will deserialize arbitrary Ruby classes if you specify the object with a ! (so the !ruby/exception:ActiveMerchant::ResponseError here), which is really dangerous (imagine someone deserializing the File class with reading from /etc/passwd or the like). safe_load only allows whitelisted classes. In this case we control the YAML, so the RuboCop recommendation isn't strictly necessary, but it's still a good habit. The only trick is you have to tell it which classes are okay. In this case, if you change YAML.load(yamlexcep) to YAML.safe_load(yamlexcep, ['Net::HTTPBadRequest', 'ActiveMerchant::ResponseError']) (based on the class serializations on line 857 and 859), both RuboCop and your code will be happy.. I'm confused about the split between BRANDS and E4_BRANDS. We only use BRANDS for supported_cardtypes, which initially made me think that E4_BRANDS was totally redundant, but then we do use E4_BRANDS for card types later on. I think we're doing this because it was a backwards-compatibility kluge inherited from the original Firstdata gateway; if that's the case, then can we kill it, since we're introducing a specific v27 upgrade here? I think we could just have BRANDS and be done.. I can't tell what, if anything, we use this for. Do we need it?. If these creds are legit and it's okay to have them, we should probably stick the # Working credentials, no need to replace comment here; otherwise, we should probably nuke 'em.. This is nitpicky, but payload = [method, content_type, content_digest, sending_time, url.split('.com')[1]].join(\"\\n\") might be easier to read.. Parens here (and the following elsif) are strictly unnecessary. wat.\nThey should just ignore the ECI then, or automatically set it to 04. This is silly. (Their requirement, not your code.). Yeah, I'm really not questioning that the code needs to be here; I just find the gateway requirements a bit silly. It reminds me unpleasantly of when I used to do Win32 coding and you'd end up with foo.dwSomething = 6; // required for compatibility mode and the like.. I actually suggested @nfarve do this instead of the other style in the first place. In my opinion, this is easier to read (especially with symbol keys) than the other style, and it's objectively less repetitive. The main reason we do the other style is because you do this pattern:\nruby\npost = {}\nadd_frob(post, options)\nadd_quux(post, options)\nadd_bar(post, options)\n...\nwhich in this case we're (partially) skipping since we can. Given that, I don't think emulating the old style purely for consistency's sake necessarily makes sense here\u2014but I don't feel strongly about this, either.. Do we know that post['order']['contactDetails'] will always be defined here? I'm wondering if it might be worth adding post['order']['contactDetails'] ||= {} before this line. That might be redundant though.. Same here; wondering if we need post['customer']['contactDetails'] ||= {} to be safe.. Okay, nestable_hash makes this work, so ship it!. > @curiousepic for the MultiResponse wouldn't it need to be on the first commit and not nested inside of it?\nThis is moot at this point, but I'm confused. If I get what you're saying, you can control that via whether you pass use_first_response as true or not to MultiResponse.run, so that'd just be a slightly different approach than this; you'd end up with something like\n```ruby\ndef commit_raw(action, parameters)\n  ...current contents of commit method...\nend\ndef commit(action, parameters)\n  MultiResponse.run(true) do |r|\n    r.commit_raw(action, parameters)\n    r.commit_raw('ack', {TransactionNumber: split_authorization(r.authorization)[0]})\n  end\nend\n```\n(To be clear, I'm not asking you change what you're doing here; just not clear on why MultiResponse wouldn't do the trick.). Resolved this by killing E4_BRANDS.. I doubt these are actually working credentials. Scrubs are missing. We don't encourage exposing methods like this in the public part of the class API.. Probably should also be \"...prefer not to support a gateway than to support a gateway poorly\"; it reads a bit awkwardly the way I wrote it originally.. It was; RuboCop 0.58.1 has a new check, and that was the only violator, so I just figured I'd roll with it as part of the RuboCop upgrade.. Do you know if there's an advantage? I just looked at its implementation, and there's nothing obvious (it handles certain errors a bit better, after a fashion, but it's not as if a stack trace saying the file couldn't be found is gonna be hard to parse). I'd definitely have done this if I'd known about it; just wondering if it actually makes a difference.. Also allowed shoving the other Gemfiles in their own directory. Thank you for the suggestion, @varyonic ; landed in dde5ab42d5c9. Yeah; it worked, but was doing double /s in the URL. Check out how we build the URL for why.. This line, and its test, are the only actual new feature introduced in this PR. The rest is a separate commit getting picked up by this PR that's also identically in #2968.. It is, but this feature is explicitly testing the ability to override the brand via those fields for use in Core; this is intentional. Ping me on Slack and I can link you to the Zendesk ticket for more background.. Although this variable should be changed to @mastercard; let me do that.. Are you sure it needs to literally be paymentdatasource.type, as opposed to [:paymentdatasource][:type]? I'm asking because it's the latter (almost?) everywhere else in Adyen, but them being odd here wouldn't be the first.. @curiousepic What extra values? We only include just the TX_VALUE key here, which matches the Zendesk ticket.. Yeah, there's some disagreement there; I'm having to take them at face value on their example, \u2019cause that's all I've got to go with.. Nope, just me not knowing what's Rubyish. I'll change it.. Done.. Oh, point. Will do!. It's possible. If we're concerned, I can tweak this by adding a parallel structure that returns the regexes. But the regexes will be (honestly already are) wrong, so I'd personally prefer we just loudly note it's a breaking change in the release notes.. I'm not sure, honestly; this was just me coding very defensively. If you're feeling good on the Shopify side, then I'm okay switching this to assume strings, since 1) it should be anyway, and 2) we're already going to be breaking backcompat here to some degree. Preference?. Not yet; there aren't even test numbers as such. I have two live card numbers, and that's it. I'm open to ideas here, though; I obviously was planning to have more card numbers than I ended up having.... It's actually a RuboCop violation to use -> with a multi-line lambda. Was news to me, too.. I'll add a few more test cards to make sure we're flexing at least one of the card buckets and at least a couple splotches of the BIN range.. @whitby3001 This line is missing a trailing comma, causing the test suite to fail. If you still want this, would you mind patching and rebasing on master? If so, I can merge this today or tomorrow.. Thanks!. Is this always legal to add? I'm asking because, if it is, we could fold it directly into commit. (I'm aware that it's not currently added for a lot of the customer profile calls, hence the question.). Because you're ending with || ',' here, you can just axe line 980 entirely and turn this into parts = params.split(options[:delimiter] || ','). No worries! Thanks for checking.. Here, too.. The indentation pattern going on here seems weird/wrong; seems like 109 should be indented less, or these lines more, or something. There's also an awkward/insufficient amount of indentation here v. the closing brace on 113. Do you know what's going on here?. Might make sense to shorten the gap between # and the keyword in this comment, too. I have a hunch it at one point lined up with the previous lines, but that clearly stopped being the case even before your patch.. If we're going with this indentation style, it'd probably make sense to make sure {s go on their own line as part of the patch; the following lines (and those for the other hashes in this file) end up being really indented when they wouldn't otherwise need to be.. Here, too.. I'm confused again what's going on here. Seems like these should align with the } on 27?. They need to be; the request might've included a PAN.. Yeah, @deedeelavinder 's got it. In addition, the alignment issues here are probably cause because the hash is starting out underindented (which isn't new with your patch); line 95 and following should really be indented two spaces further, I suspect, and the rest of this is an alignment fight as the editor's trying to make everything work out.. Yes, but the } is aligned neither with the hash key nor with the opening brace, which are the two styles honored by RuboCop. There are a couple ways to address this, but probably the best would be to unindent the entire collection of hashes so that the closing braces align with the hash keys (which looks like a three-space unindent, fi I'm reading this properly, for lines 25\u201330, 32\u201338, and 40-whenever that block ends, inclusive). Good call; I'll add that.. @curiousepic How about now?. This one's fun. You'd think this should fail, given that the url method is called two lines later, but somehow this works:\nruby\nirb(main):002:0> class Foo\nirb(main):003:1>   def foo\nirb(main):004:2>     u = 'hello'\nirb(main):005:2>     u('goodbye')\nirb(main):006:2>   end\nirb(main):007:1>   def u(greeting)\nirb(main):008:2>     puts greeting\nirb(main):009:2>   end\nirb(main):010:1> end\n=> :u\nirb(main):011:0> Foo.new.foo\ngoodbye\nI'd have to look at the compiler to figure out what's going on here, because I have no idea.\n. I'm actually guessing here. credit isn't defined, so the author probably meant refund, but that implies this test was never run, so\u2026not 100% sure.. This should probably be _refund, or just comment out the entire method. I'm favoring the latter.. Brain fart; I was in C mode, where whens fall through. I think line 1389 should instead be deleted entirely.. word == 'validation' || 'configuration' || 'security' is always truthy, since 'configuration' and 'security' are truthy. I think you meant ...any? { |word| %q(validation configuration security).include?(word) } or something similar.. Wait, how does this work? I thought .body was a string; if it is, then how is that regex getting converted into an integer for offset purposes?. I really hate this language sometimes.. This can be address&.empty? but I don't really think that's worth altering the patch.. nil and false are bothy falsy, and nil&.whatever always returns nil, so I think it would indeed be fine to be return parameters if address&.empty?. E.g.,\nirb(main):001:0> puts 'hello' if nil&.empty?\n=> nil\nirb(main):002:0>\nBut again, I'm not convinced the half line deletion is a sufficient improvement to redo the patch here.. In general, for this one, I deleted the first method definition, since the latter would currently be superseding it, but I did audit the deletions to make sure that was a reasonable course of action. Feel free to look and make sure you agree.. Bah, you're totally right; ||, not &&. I got doubly turned around here because nil.empty? is defined (and returns true) if Active Support is loaded.. address.all? { |_k, v| v.nil? || v.empty? } will avoid creating the two extra Arrays you're making with the .values.compact sequence. I'm not sure we care in this particular case, though.. Probably not. This kind of thing adds up, especially because Ruby's memory-hungry and doesn't have the best GC ever, but when you've got super-small arrays that are very short-lived (which is the exact case here), the benefit is exceedingly minimal.. Okay, if we're going back in here anyway, let's fix this to billing_address.all? { |_k, v| v.nil? || v.empty? }. Does it make sense to just have map_address do something reasonable when passed nil? We have this pattern in a few other places, looks like, and I'm wondering if they don't all need the empty check. If they do, it might be simpler to go that route.. Damn, thank you for catching, this, @deedeelavinder ; the fix I meant to do was to change this line to %w(authorize refund).include?(action); somehow I fat-fingered it.. Previously, the requests were returned in the wrong order, so the author of this unit test checked for the authorization response. This is incorrect; the ID checked here is now the one that's actually embedded in successful_capture_response (which you can look up in the JSON way below).. I updated some, but not all, tests to make sure we would hit both :post and :put a bit.. You'd think that this would be post if you glanced quickly at the method\u2026erm, method, but I actually can't find the genuine refund route tested, period; just cancelDespoit--and that's indeed a put.. Probably. But more practically, I just can't get to it today; I need to wrap up some other gateway work. So I'd either need someone else to add that test or we'll need to hold off merging this today. Since builds are technically \"broken\", I'd rather just go ahead and merge this.. It's been fixed; you should be good if you rebase. (I literally just merged it; it's not like you missed it.). RuboCop won't currently flag this due to a disabled check, so I'll approve despite it, but the parens are unnecessary.. Okay, this is subtle, but: given that merchant_initiated? and customer_initiated? both check for options[:stored_credential_usage], it's possible for customer_initiated? to bogusly return true (or at least a truthy value). You won't hit that behavior right now, because you're testing for merchant_iniated? first, but I can easily see how a superficial refactoring could result in unexpected behavior. So what I'd instead suggest is tweaking this so that the order customer_initiated? and merchant_iniated? are called in doesn't matter. Something like this:\nsuggestion\n        !merchant_initiated?(xml, options) && options[:stored_credential_usage]. Does this test pass now, out of curiosity? If not, based on the blame, maybe we should just ax it; seems like it's been dead for a long time, Jim.. Ditto for this and the next one.. I get what's going on here, and I know it's not your code or anything, but this is a ton slower (and wastes way more memory) than just options[:crypt_type] = 7 if !options.has_key?(:crypt_type). If you're back in here for some other reason, might be worth switching it.. It's probably not worth going back and undoing, but the whitespace alignment changes here (and in the rest of this file) make the diff appear much larger than it actually needed to be, and make it a bit harder to find the actual logic changes. (They also shouldn't be necessary; it's fine if you found it annoying, but RuboCop should not have complained, since it allows extra whitespace specifically for this kind of alignment.) It'd be helpful to keep logic and whitespace changes separate when they easily can be in the future.. RuboCop shouldn't have complained about any of these, though. I actually do want to figure out why that's happening, since it implies we might've configured RuboCop wrong.. Oooh, got it! Sorry, I've clearly got a reading comprehension issue this morning. All good! \ud83d\udc4d . I do find it weird, I indeed don't see you having requested review, but I got pinged by GitHub on this this morning, and thought I saw @dtykocki and me tagged. I wonder if GitHub somehow sent emails to recommended reviewers? Or something else?. I really don't like the foo || (bar if baz) pattern, because it's very unclear what actually happens. (You responded ew to this same pattern, BTW.). There's a couple routes here, but since we're on Ruby 2.3.6 now, I'd suggest if phone = (options[:phone] || options[:billing_address]&.[](:phone)) or phone = (options[:phone] || (options[:billing_address] || [])[:phone]), or something similar to be a bit more explicit.. \ud83d\ude08 . Better than what I just said is to use .dig; sorry I spaced that. So that'd be phone = options[:phone] || options.dig(:billing_address, :phone). \ud83e\udd26\u200d\u2642\ufe0f No. Removing.. I had no idea this was a thing you could do. Awesome!. suggestion\n          [response['transaction_id'], response.dig('response', 'authorization_code'), parameters[:transaction_id], parameters[:authorization_code]].join('#'). suggestion\n          [response['transaction_id'], response.dig('response', 'authorization_code'), ''].join('#'). Whoops, point. Fixed the suggestion. response.dig('foo'), response['foo'], and response.try(:[], 'foo') are all the same, though, unless I'm missing something, so we might as well go for just response['foo'] in that case.. No; there's no do on the previous line, and this is not a block. It's honestly really misleading for exactly that reason as-is.. No. I'm not honestly entirely clear what you're responding to; the lines match up one-for-one.. Oh, I see, GitHub's being dumb in side-by-side mode. Either turn on \"ignore whitespace\" or use a different diff viewer. Or you can look at the actual line numbers. . ~This is on purpose, right?~ n/m, I see this was in the original code as well.. ",
    "saevarom": "Hey guys\nAny chance of having this reviewed and merged? @ntalbott ?\nDo you need more tests in order to move this forward?\n. Just checking again, what do I have to do to get this reviewed and merged?\n. ",
    "chiedo": "Hey @JoshuaNovak919 did you figure out how to do this? I'm looking to do the same thing.\n. Thanks @girasquid I'll give that a shot!\n. ",
    "girasquid": "I poked through some of our code and it looks like this might work if you set application_id, like so:\n``` ruby\nActiveMerchant::Billing::PaypalGateway.application_id = \"your BN here\"\nActiveMerchant::Billing::PaypalExpressGateway.application_id = \"your BN here also\"\n```\nThat's the best I've got though - if that doesn't work for you, you are on your own.\n. Looks good to me!\n. Looks good to me\n. :+1: \n. :hamburger: \n. :hamburger: \n. Sweet! :hamburger: \n. :heart_eyes: \n. @EppO You may want to check with PayPal, but I believe that line is referring to that particular library (not the API that it uses).\n. :+1: from me.\n. :hamburger: \n. :hamburger: \n. Found what looks like a bug with multiple capture; doing some more digging on that before this is ready to go.\n. Turns out it was Not a Bug, this is good to go as far as I can tell.\nPing @odorcicd @edward for review, can one of you ok this?\n. I'm not 100% on that. It looks like Nokogiri might be able to do it, but the reason this got missed was because there were no tests that passed in a customer IP. So if we were validating against the schema, we would have known that all the existing cases were fine - but still not caught this.\nI'm open to putting it in if you think it will be valuable - let me know.\n. Thanks for the reminder - going to do some last sanity checks and merge this next week.\n. If the host + SSL cert is corrected, can you remove the OpenSSL::SSL::VERIFY_NONE?\n. ping @ntalbott @duff \n. :hamburger: \n. Does it make sense to rename account_number here? It seems like the word \"account number\" means something for echecks, but in that situation is being used to mean \"last 4 digits\".\n. :+1: \n. :+1: \n. I agree with that - can we move these changes to be inline?\n. Looks good - thanks!\n. This raises a bigger question: if you're trying to do a luhn checksum on something that's clearly not a credit card number, should it work?\nI'm inclined to say no, and that raising an exception is the right thing to have happen here (although maybe it should be a particular exception so that you can catch and handle it).\nI wrote this test script to do luhn checks on some made-up numbers using the old check - it looks like a lot of things with non-digits in them actually passed:\n``` ruby\n!/usr/bin/env ruby\ndef valid_checksum?(number) #:nodoc:\n  sum = 0\n  for i in 0..number.length\n    weight = number[-1 * (i + 2), 1].to_i * (2 - (i % 2))\n    sum += (weight < 10) ? weight : weight - 9\n  end\n(number[-1,1].to_i == (10 - sum % 10) % 10)\nend\nNUMBERS = [\n  \"4242424242424242\",\n  \"4242hi\",\n  \"4242hi4242\",\n  \"4hi\",\n  \"4242424242424242hi\",\n  \"42424242hi424242\",\n]\nNUMBERS.each do |number|\n  p \"#{number}: #{valid_checksum?(number)}\"\nend\n```\n\"4242424242424242: true\"\n\"4242hi: true\"\n\"4242hi4242: true\"\n\"4hi: false\"\n\"4242424242424242hi: true\"\n\"42424242hi424242: true\"\n. Sorry for the surprise!\n. Checked - Shopify's not using unstore, all good here.\n. ping @Shopify/active-merchant \n. Same here - PsiGate looks good. :+1: \n. @ntalbott heads up - remote PsiGate tests looked good, but it looks like the SSL configurations are different between their live and test servers.\n. :hamburger: \n. :+1: \n. :hamburger: \n. I don't see it here, and there are no PRs open for it - looks like it's not supported in AM yet.\n. This looks good - and it syncs us up better with the PayPal docs, which I think is a nice bonus. Thanks!\n. ping @Shopify/active-merchant \n. @fastjames can you give it a shot with the changes from #1432 ? I believe that will fix the problem you're seeing.\n. @johndouthat ah, so they do - thanks for pointing that out!\n. ping @Shopify/active-merchant \n. Looks pretty good! Would be nice to see some remote tests for all the different failure codes; right now I can only confidently say that card declines are mapped correctly.\n. Works for me.\n. Style niggles, otherwise looks good.\n. I'm partial to \"merge pull request\" because the merge commit provides a good spot to revert from if/when you need to. It's also nice being able to make typo fixes and adjustments like @ntalbott's talking about without having to get the submitter to do the work; I go back and forth on this. Will it cause you folks problems if I stick with \"merge pull request\"? \n. @duff Scenario 2 makes sense if the committer is always squashing down to one commit - I guess it's built on the assumption (rule?) that if the committer isn't squashing to only one commit, the two commits are well separated and reverting one won't cause problems because the other wasn't reverted. That makes sense.\nI'll give this a shot - thanks for the reminder!\n. ActiveMerchant already supports TLS connections - so as long as your system SSL library also supports TLS, you should be fine.\n. @joevandyk to test, run openssl s_client -connect api2.authorize.net:443 and look at the value of protocol in the output. If you want to explicitly test TLS 1.1 or 1.2, you can add the -tls1_1 or -tls1_2 flags.\n. @brandoncc ActiveMerchant is going to use your system SSL libraries - so if your server is good, you should be ok. Your ActiveMerchant version is very old though (about 8 years); I'd recommend updating. Authorize.net is moving their URLs to Akamai, and the newer versions will have the correct URL.\n. Not anymore, sorry - Ruby 2.0+ and Rails 3.2+.\n. The restarted CI errored out:\n\n. ping @Shopify/active-merchant \n. https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_paypal_test.rb is where the remote tests live; https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_paypal_test.rb#L37 is an example of testing something in the response.\n. Right.\n. Here's express: https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_paypal_express_test.rb\n. It sounds like writing a remote test for this will be more pain than it's worth - maybe we can hold off on that and just trust the unit tests.\nDoes NoteText always come back in the response?\n. This is good to go.\n. :hamburger: \n. :hamburger: \n. The regular expression being used to check if the number is a jcb card is /^35(28|29|[3-8]\\d)\\d{12}$/ - the number you're supplying doesn't start with 35, so I'd guess that's why you're getting that error.\nAccording to the page at http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29, the IIN range for JCB cards is 3528-3589.\nI wonder if JCB has updated their IINs since that wikipedia page was updated - the PDF I found on that wikipedia page is five years old.\n. ping @Shopify/active-merchant @j-mutter \n. @grepruby GitHub doesn't let you ping teams that you are not a member of, which is why it doesn't show up in the autosuggest either - that's why I pinged them for you. :)\n. :hamburger:\n. :hamburger: \n. :hamburger:\n. Thanks for the reminder! Version 1.45.0 has been uploaded to rubygems.\n. :+1: \n. ping @j-mutter @bizla @ntalbott @duff for review\n. I had in mind something like being able to scrub out email addresses if your implementation needed that but others didn't, but I see where you're coming from and I agree that if you're going to use the scrubbing, you might as well add any app-specific scrubbing in YOUR code, not through AM. I'm going to go back to making each scrub method implement the logic in there and not allow you to inject your own.\n. @ntalbott I've switched back to each Gateway implementing scrub, and I added a supports_scrubbing? method to Gateway that returns false so that by default most gateways report that they do not support scrubbing.\n. :hamburger: \n. :+1: \n. Hi @nahtnam!\nactive_merchant is designed to handle credit card transactions/gateways - that's why it doesn't have support for any of the cryptocurrency gateways right now.\nSkimming over the README for straight-server, you might be able to get it to work, but I am not sure that active_merchant is currently accepting any cryptocurrency integrations. @Shopify/active-merchant, thoughts?\n. This looks pretty good! Can you add a remote test for it as well? It will need to first do a purchase, and then do a refund - here's an example of one for PayPal: https://github.com/Shopify/active_merchant/blob/c9198f4921de571a9051205c6f2d345a8abf9504/test/remote/gateways/remote_paypal_test.rb#L140-L153\n. @StephanAtG2 I noticed reading through their docs that there's an auto-settle setting that's toggleable - do you know if we can check whether that's turned on or not for the test account? It seems like we shouldn't be getting that error if it's turned on, but I'm not sure how we'd check.\nIf it turns out that it's turned off and we can't get test credentials that have it turned on, I'd leave the test in to show it works but add a skip(\"This test will fail unless you have auto-settle enabled on your test account\") or something similar. If it's turned on and this is expected behavior for test accounts, we can remove the test. :cry: \n. @AntonAtG2 here's a test case you can use to generate a transcript of the HTTP conversation for the refund transaction only:\n``` ruby\n  def test_capture_refund_transcript\n    purchase = @gateway.purchase(@amount, @credit_card, @options)\n    assert_success purchase\ntranscript = capture_transcript(@gateway) do |gateway|\n  gateway.refund(@amount, purchase.authorization, :note => 'Sorry')\nend\nFile.open(\"transcript.log\", \"w\") { |f| f.write(transcript) }\n# transcript.log will now contain the entire HTTP conversation with PayGate\nassert false\n\nend\n```\nIf you run that, you'll get a log that looks like this:\nopening connection to www.paygate.co.za:443...\nopened\nstarting SSL for www.paygate.co.za:443...\nSSL established\n<- \"POST /payxml/process.trans HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: */*\\r\\nUser-Agent: Ruby\\r\\nConnection: close\\r\\nHost: www.paygate.co.za\\r\\nContent-Length: 138\\r\\n\\r\\n\"\n<- \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><protocol ver=\\\"4.0\\\" pgid=\\\"10011021600\\\" pwd=\\\"test\\\"><refundtx tid=\\\"29973965\\\" amt=\\\"245000\\\"/></protocol>\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Cache-Control: private,no-cache,no-store,no-cache\\r\\n\"\n-> \"Pragma: no-cache\\r\\n\"\n-> \"Content-Length: 264\\r\\n\"\n-> \"Content-Type: text/xml\\r\\n\"\n-> \"Expires: Wed, 10 Dec 2014 16:13:10 GMT\\r\\n\"\n-> \"Server: Microsoft-IIS/7.5\\r\\n\"\n-> \"Set-Cookie: ASPSESSIONIDSQSTDTBS=JCIKBAMAAOPNAAPDNGAFHGHI; path=/\\r\\n\"\n-> \"X-Powered-By: ASP.NET\\r\\n\"\n-> \"Date: Thu, 11 Dec 2014 16:13:11 GMT\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"\\r\\n\"\nreading 264 bytes...\n-> \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE protocol SYSTEM \\\"https://www.paygate.co.za/payxml/payxml_v4.dtd\\\"><protocol ver=\\\"4.0\\\" pgid=\\\"10011021600\\\" pwd=\\\"test\\\" ><errorrx ecode=\\\"301\\\" edesc=\\\"The Requested Transaction Has Not Been Previously Settled\\\" /></protocol>\"\nread 264 bytes\nConn close\n(If you want to capture the authorization part as well, add the call to authorize to the capture_transcript block).\nHope this helps!\n. Taking a look.\n. Looks good! Merging right away.\n. :+1: \n. :+1: \n. Awesome, thanks!\n. Passing my review to @ivanfer.\n. Is there any extra setup involved on the PayPal side? I'm drawing a blank.\n. :+1: \n. :+1: \n. The Circle failures look like something is missing:\n``\nNoMethodError: undefined methodrefute' for test_supports_scrubbing?(GatewayTest):GatewayTest\nNoMethodError: undefined method refute' for test_should_not_allow_scrubbing_if_unsupported(GatewayTest):GatewayTest\n```\n. Oh ok - let me know when you're ready for review.\n. :+1: \n. :+1: \n. :+1: \n. :heart_eyes: :+1: \n. :+1: \n. lgtm\n. :+1: \n. Looking throughActiveMerchant::Billing::Response`, it doesn't look like it ever stores the card owner - does Paymill return that in their responses? That seems like something that you would be able to store before the transaction gets sent to Paymill.\n. It looks like their documentation is here - I haven't read through it yet, but you could always submit a pull request.\n. :+1: \n. Thanks!\n. :+1: \n. I did some checking into making a rake task, and it turned out to be pretty non-trivial. For now I think I'm just going to stick to having it live in the remote tests, which already have the right credentials + options for the call.\n. I merged this but forgot to update the commit message - closing.\n. None here.\n. Yup, that works. Going to close this one and wait for your squashed one.\n. @romanof76 ActiveMerchant doesn't support offsite gateways. All the offsite gateway integrations are in https://github.com/Shopify/offsite_payments, so you'll want to submit this there.\n. :+1: \n. You're going to want to upgrade your production system to at least Ruby 2.1.4 - here is a pretty good looking blog post about doing that or other upgrades on your systems to handle the change.\nThe ability to explicitly choose SSL settings for your gateway was added to ActiveUtils in 2013, and ported from there into ActiveMerchant about a month ago; your version is a year older than the ActiveUtils addition, which is why that won't work for you. I would recommend upgrading, if possible.\n. Network tokenization information looks like it always comes along with a plain-old CreditCard - does it make sense to create an augmented CreditCard class that can handle storing the original properties and also the network tokenization ones? By having the object live somewhere that wasn't in a particular gateway's integration code you'd also be able to lock it down better, I think.\n. Couple questions, looks ok though.\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :checkered_flag: \n. This looks good - why the remote ePay test changes?\n. Oh ok - :cool: \n. > No change to the class name and such, though - this is all metadata tweaks.\nIn light of that, I don't think we have any issues here. Thanks for doing this!\n. :+1: for not enforcing\n. This sounds pretty awesome.\n. > define the abstraction we offer much more strictly\n:+1: for this.\n. History question: why is/was AuthorizeNetCim broken out to begin with?\n. :+1: \n. This bug report doesn't give us a lot to go on.\nPlease tell us:\n1) What gateway you're working with\n2) How you got the transaction ID you're trying to void\n3) What kind of transaction you're trying to void\nUntil then, there's not much we can do here.\n. :+1: \n. Forgot to close this in the merge.\n. Most gateways only support voiding authorizations - if it's a purchase you'll want to refund it instead. Give that a try and re-open this if you're still having problems.\n. :+1: \n. Thanks for letting us know!\n. A PR for this would be awesome. :)\n. ActiveMerchant itself won\u2019t cause any issues with these PayPal changes, or with any SHA-2/SHA-256 certificates in general.  This is all handled by your SSL library, which is usually OpenSSL.  So long as your OpenSSL can connect successfully, ActiveMerchant will work just fine.\nTo test if your OpenSSL can support these changes, you can run the following command: openssl s_client -connect www.sandbox.paypal.com:443. If this works, you should see a successfully-negotiated TLS session, and ActiveMerchant will work just fine.\n. ActiveMerchant doesn't expose anything for querying future transactions; that's something that you're going to have to write custom for your CyberSource integration.\n. One question, otherwise :+1: \n. Thanks!\n. We have a fairly large number of credit card payments going through PayPal that are successful - do you have a test case that can reproduce this?\n. Going to close this out for now - feel free to reopen when this has a test. :)\n. > the authorization call returns a bogus transaction id which is then rejected when the capture call is made with that id.\nCan you share a test case that reproduces this? This test does a capture after an authorization against Authorize.Net with the gateway in test mode, and seems to work. What does the bogus authorization look like? What error do you get?\n. Ok - going to close this for now. Re-open it when you've got a test case for me. :)\n. I think I'm missing something - what you're describing sounds like intended behavior:\n1) When you set test to true, transactions are processed against the test servers.\n2) When you set test to false, transactions are processed against the live servers.\n3) When you set test to true on the base gateway, transactions are processed against the test servers.\nHave I misunderstood somewhere?\n. I understand now - thanks for the clarification.\nIt looks like the changes from https://github.com/Shopify/active_merchant/pull/924 didn't make it across when the Authorize.Net integration was updated a few months ago - I don't have time to get to adding this for you, but you could open a PR to re-add support for the option (along with a test to make sure we don't remove it accidentally next time).\n. Don't touch the version, we can handle that\n. No, just haven't had a chance to review it yet. It's on my list. :)\n. Can you add some tests for this? It looks like postal code 30000 will give you the E response and 30001 will give you S (https://developers.braintreepayments.com/ios+ruby/reference/general/testing#avs-responses)\n. :+1: \n. @duff As I recall it was you that added using_live_gateway_in_test_mode? - how do you feel about this change?\n. This looks ok to me - I'd like a comment from @duff to make sure he's cool before I merge it.\n. Thanks!\n. This has been fixed in a new version of ActiveMerchant/Utils; please upgrade.\n. Thanks!\n. Can confirm that we're busy - I'm unlikely to get to this this week. Don't hold up a merge on my account though.\n. Our integration goes through the v7 API; when I updated the code to reference this PR and ran our remote integration tests, I got the error \"md5check did not match expected value\" when attempting to capture an existing authorization. All the other options worked, and when I go back to the old v7 integration everything passes - is that change intentional?\n. Looks good now - can you squash this?\n. I'm still seeing 10 here - do you need to push?\n. Into 78f5897148e37a9c3bd8508c98d6cc76e9ec5c91 - this entire PR upgrades the Quickpay integration to support v10, so I think we can keep it all in one commit.\n. All done - thanks!\n. Still working on it. I'll update this when it's ready to go.\n. Could use a squash - :+1: from me.\n. I have some concerns about the scrubbing tests, but other than that this looks great.\n. Looks good!\n. I'm good to merge this once @ntalbott confirms he's happy with the changes. For integration into Shopify - send an email to payment-integrations@shopify.com.\n. Question about error codes and could use a squash, but other than that this looks good to me.\n. Awesome, thanks! After a squash I think this is good to go. @ntalbott final thoughts?\n. Merged - thanks!\n. It looks like all of the EMV/applepay remotes fail - @jnormore / @bizla ?\n. :+1: from me - thanks for doing this!\n. Thanks!\n. :+1: \n. :+1: \n. > \"manual entry\" feels like a CreditCard property, so I wonder if it should be a settable flag at the top level.\n:+1: from me for this; it seems like something a CreditCard should know about itself.\n\nDo any other adapters have a similar flag?\n\nI think so, but I'll let @andrewpaliga confirm.\nOverall I'm :+1: on this PR once a test for authorize gets added, but I think when we update another integration to support manual entry we should add the property to CreditCard as well.\n. Thanks!\n. :+1: \n. Can you add tests for this? Remote would be ideal if possible, as well as a unit test that stubs the response.\n. I have an email from a few months back that says \"trying to standardize on Nokogiri going forward.\" - please use Nokogiri if possible\n. :+1: \n. Thanks!\n. Thanks!\n. Thanks!\n. Can you keep strip_invalid_xml_chars on the Garanti gateway for now? We can move it to Gateway when another gateway needs it, but for now we only know that Garanti does.\n. :+1: \n. Updated - thanks!\n. Hi Julien,\nSee the discussion at https://github.com/Shopify/active_merchant/pull/1178\nfor more details.\nLuke\nOn Mon, Jun 1, 2015 at 6:59 PM, Julien Defrance notifications@github.com\nwrote:\n\nJust noticed the following while utilizing the last version of your gem:\n\"ARB functionality in ActiveMerchant is deprecated and will be removed in\na future version. Please contact the ActiveMerchant maintainers if you have\nan interest in taking ownership of a separate gem that continues support\nfor it.\"\nHow are you expecting to support recurring billing if you get rid of this\nfunctionality?\nWill you ultimately remove the entire AuthorizeNetArbGateway class?\nUnless you have an alternative, Is there an actual reason for doing so, or\ncould you just keep it there for people to use if they still want to?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/issues/1718.\n. Sorry about that!\n. Can you add tests for this?\n. Thanks!\n. Test servers :(\n. This change looks ok, but it can't be cleanly merged - can you rebase? Is there any possibility to get a remote test for this?\n. Sorry for the delay on this - yes please. :)\n. @duff I'd be curious to get some Spreedly thoughts on this as well\n. Tests?\n. :+1: \n. > I think we'll want to add a gateway for mercury's REST endpoint, the existing one is their SOAP - can we do that and call it \"mercury-rest\" or \"mercury-encrypted\" ?\n\nIf the REST endpoint supports everything that the current Mercury implementation needs, could we just update it to use the SOAP endpoint instead? Having two implementations for the same gateway isn't great if it's not required.\n\nMaybe we make some new subclass of the \"CreditCard\" class called \"EncryptedCard\" or something, so we can add the encryption key there?\n\n:+1: for this - here's an example for network tokenization: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/network_tokenization_credit_card.rb\n. Sorry - it looks like I got mixed up writing that.\n1. If the REST endpoint supports everything that the current (SOAP) implementation needs, could we update the current (SOAP) implementation to use the REST endpoints, and kill two birds with one stone? You'd get the new functionality AND less SOAP.\n2. Making a new subclass for encrypted cards makes sense; I added a link to the network tokenization card as an example of us doing it for another payment flow in the past.\n. If the SOAP API supports it, my vote would be to stay with that and have a small, focused PR. If it doesn't, having support for it in AM would mean rewriting - I'd prefer that over having two implementations for the same gateway.\n. Done! Let us know what you learn.\n. Can you add tests for this?\n. Thanks!\n. :+1: \n. Test fails look legit though - you'll need to handle the card being something that's not quite a credit card\n. :+1: \n. Change looks ok - @ntalbott / @duff, any thoughts?\n. :+1: \n. :+1: \n. One question about a test disappearing, but looks ok overall.\n. As a temporary workaround for now, strip non-digits from your credit card numbers.\n. @abecevello you could make it an option that gets passed in, and then fall down to the default if the option isn't provided.\n. :+1: \n. Thanks!\n. Handled in https://github.com/activemerchant/active_merchant/pull/1787 - I don't see anything in the email about apitest2 which the tests are failing on for this PR.\n. Yes - set wiredump_device on the instance of an ActiveMerchant::Billing::Gateway to a variable, and then log that after you have made your calls.\nYou can see this being used to generate the transcript to use for implementing scrubbing in new gateway implementations here: https://github.com/activemerchant/active_merchant/blob/a3b531bd8d1de4cd9d83b30e816e1fac78592102/generators/gateway/templates/remote_gateway_test.rb#L127-L145, https://github.com/activemerchant/active_merchant/blob/a3b531bd8d1de4cd9d83b30e816e1fac78592102/test/test_helper.rb#L268-L285.\n. This was taken care of in https://github.com/activemerchant/active_merchant/commit/64034cfd64ea20cc327c5ce6251522ec539b79b1.\n. I've released version 1.52.0 - if you update your gem version you'll get the new URLs.\n. I've released version 1.52.0 - if you update your gem version you'll get the new URLs.\n. One question (in a comment), and also wondering: can you do partial captures? I only see a test for the overcapture on an auth failing and now I'm curious.\n. Makes sense - thanks for the clarification! Ping when you're ready for re-review.\n. Awesome - looks good. Thanks!\n. That error gets raised when the gateway you're talking to throws a 500 error - you'll need to get in touch with them to figure out why that's happening and whether that's something they should be fixing on their end, or if something is being formatted/translated incorrectly in ActiveMerchant.\n. The ResponseError is being raised because the response coming back to you from Transfirst is something that ActiveMerchant doesn't know how to handle: https://github.com/activemerchant/active_merchant/blob/912f0760df2c2023663e87d9c8471d4f1d4f921d/lib/active_merchant/posts_data.rb#L79.\n. I'm not familiar enough with the Transfirst integration to say; try asking them?\n. :heart_eyes: thanks!\n. It doesn't appear to be - this is the output of what was POST'd to QuickPay:\n<- \"{\\\"currency\\\":\\\"CAD\\\",\\\"order_id\\\":\\\"c1.10\\\",\\\"invoice_address\\\":{\\\"name\\\":\\\"Luke Hutscal\\\",\\\"street\\\":\\\"22 Murray Street\\\",\\\"city\\\":\\\"Ottawa\\\",\\\"region\\\":\\\"Apartment 212\\\",\\\"zip_code\\\":\\\"K1N1G9\\\",\\\"country_code\\\":{\\\"value\\\":\\\"DEU\\\",\\\"format\\\":\\\"alpha3\\\"}},\\\"metadata\\\":{\\\"manual_entry\\\":false}}\"\nYou can see the country_code key has the entire CountryCode object, instead of just the string \"DEU\".\n. Can you add a test?\n. Thanks!\n. Merged in 0ce945aff6530834e07e08603acd254cbe522d20.\n. Test?\n. :+1: \n. > this will prevent any changes from actually being made, but penalties can be incurred from the card associations if gets run too many of these types of transactions.\nWhat's the benefit of doing this vs. just using the test mode/test URL? Having a test mode that might incur penalties doesn't seem great, so I'm not clear on what you would gain here.\n. All good - thanks for the review!\n. Can you add a test?\n. Would it be possible to add some test credentials for an account with no acquirers that would be able to go through this test? Or not worth it?\n. Fair enough, let's not bother.\n. Test failures look legit\n. :+1: \n. :+1: \n. Redirect-style integrations live in our https://github.com/activemerchant/offsite_payments repository, but the addition of your gateway to offsite_payments does not guarantee integration with Shopify. If you'd like to integrate with Shopify, send an email to payment-integrations@shopify.com with Offsite Payments Integration in the subject and include:\n- Name, URL & description of the payment provider you wish to integrate\n- Markets served by this integration\n- List of major supported payment methods\n- Your most recent Certificate of PCI Compliance\n- Reason that the Universal API* cannot be used for your integration.\n*The Universal API defines a standard set of requests and callbacks that can be used to integrate with Shopify. A sample app and documentation are hosted here. The Universal API should be used for all integrations in which placement within Shopify is the desired outcome.\n. The option needs to be explicit - if you have your own receipt sending code, having this also send a receipt means that your customers are going to get two receipts. Not great.\n. :+1: \n. Thanks!\n. :+1: \n. Thanks!\n. Sorry for the delay - one last question.\n. Thanks!\n. I'm not sold on the comment clearing things up that much - maybe instead, have initialize set an ivar and check that? That way you'd at least know where the value was coming from\n. I'd rather stick with options as the name of what's getting passed to the methods, to stay consistent with other implementations. Is there an issue with the ivar approach? It looks like that's how stripe.rb handles it.\n. Thanks!\n. Thanks!\n. Can you add a test?\n. Can you add a test that confirms the data gets sent over correctly? Do you want to include the key when options[:custom_id2] is nil, or should it be left out in that case?\n. Use CommStub instead: https://github.com/activemerchant/active_merchant/blob/fd505fe4708b4bc56622e7e02390665839af0d31/test/unit/gateways/stripe_test.rb#L183-L187\n. Add a respond_with at the end, like in the Stripe example (just make it return a success response or something)\n. Looks good - will merge soon, sorry for the delay.\n. :+1: Thanks for the heads-up!\n. One question, but looks ok.\n. Done.\n. Creds added! Going to merge this this afternoon unless there are any objections.\n. I think you're doing the work to modify headers in a bit of a strange place - but once that's sorted out, this looks good.\n. Looks good - thanks!\n. I forgot the '#' on the commit message :disappointed: - this has been merged. Closing.\n. :+1: \n. It's used in conjunction with wiredump_device, like so:\n``` ruby\ntranscript = ''\ngateway_instance = ActiveMerchant::Billing::Base.gateway('stripe').new(options)\ngateway_instance.wiredump_device = transcript\ndo some operations with the gateway_instance\ngateway_instance.charge(..)\ngateway_instance.refund(..)\nDump a log of the entire HTTP conversation, with sensitive information scrubbed out\nlogger.info(gateway_instance.scrub(transcript)) if gateway_instance.supports_scrubbing?\n``\n. Ah, no - because you explicitly _need_ to callscrub` to have something that's safe to log, it's not turned on by default. It's a neat idea though..\n. :+1: \n. Makes sense :+1: \n. Makes sense to me.\n. One style niggle, but otherwise this is looking good.\n. > Or having a new PaypalInContext class, so not to break every existing implementation that uses this gem\nI think this approach makes the most sense here, based on that compatibility list. Upgrading your gem version and losing the ability to do bill me later would be less than ideal.\n. Makes sense to me - @aprofeit up for second review?\n. @ntalbott / @duff any objections?\n. I'm ok with this - @ntalbott ?\n. 2checkout support is implemented in offsite_payments, here: https://github.com/activemerchant/offsite_payments/blob/master/lib/offsite_payments/integrations/two_checkout.rb.\n. :+1: \n. After this is sorted out, should we turn on branch protection to block force pushes to master?\n. Ok! Will do, once we're feeling confident.\n. branch protection from force pushes for master has been turned on.\n. :+1: \n. Sorry about that! Merged.\n. Is this covered by the chat we had on the other issue?\n. One question, but looks ok otherwise.\n. @duff can you take a look too? This might affect you folks\n. Code changes make sense. \ud83d\udc4d \n. Changes make sense to me!\n. Can you add a remote test that confirms this works? Right now you're confirming that your option gets passed through, but nothing here shows that Stripe supports this\n. \ud83d\ude0d lgtm\n. ^^ I agree with this, that sounds more useful\n. The money format is dollars, but this test changes a value to be cents. What have I missed here?\n. Ah, right. :cool: \n. Does this need to be wrapped in ()?\n. Does this need the wrapping ()?\n. Could you add () to the ssl_post call, so it's clear what is function and what is arguments?\n. Does this need the wrapping ()?\n. That's fair - thanks for the explanation.\n. What's a secerity code?\n. Are we sticking with uppercase for these? I thought I saw a comment from @mcgain go by that he preferred lowercase.\n. This seems like a weird inclusion in this PR.\n. Does this one need the success ternary?\n. Way clearer, will update\n. Actually - on second thought, this is no good. The 0.97 is still a magic number, and subtracting 0.30 from 0.97 will just give you 0.67 back - which isn't what you want. I'm going to leave this as it is.\n. Do these credentials not work anymore?\n. Can you move the ) here down to the next line?\n. Here you're instantiating an ApplePayPaymentToken with a string for the data, and in apple_pay_payment_token_test.rb you're instantiating it with a dict - which is preferred? Can you consistently do one or the other?\n. I don't follow - why update them to credentials that don't work? Could you instead change the comment to say \"Works but not for apple pay\" or something?\n. Yeah - it was just odd to see it being used inconsistently.\n. I'm not following - if the credentials work, why is \"Working credentials, no need to replace\" getting removed?\n. :heart: \n. Thanks!\n. This test name doesn't line up with what's actually happening - you send in the zip of 995770727, and then it gets reformatted to 99577-0727? Am I missing where the digits are getting stripped? Can you add another test showing the digits getting stripped?\n. Whoops, my bad - I totally misread that expectation. It might be clearer if you had variables named stripped_zip and bad_zip or something?\n. :heart_eyes: \n. The lack of parens here kind of makes these lines look like typos - could you add parens so it's clear that the trailing _ isn't a typo?\n. No problem! Looking through some docs on this, it looks like unless bill_amount was a reserved word the original trailing underscore isn't needed either. I think it might be ok to remove the underscores from most of these calls (if not all of them) the next time this adapter gets updated.\nThanks for the explanation!\n. Why is this one Multiresponse.run(:first) do... but inside authorize it's Multiresponse.run do..? Are they doing the same thing?\n. Why is this commented out?\n. Can you fill these in please?\n. What is this for?\n. I think you want CGI.escape here.\n. Also - why + instead of \"#{ENDPOINT}/#{CGI.escape(authorization)}/capture\"?\n. Do these credentials actually work? It seems like initialize only requires request_id, which I don't see here..\n. I don't think you want to commit this + the binding.pry below\n. Thanks - I've added that assertion to this test.\n. When it fails, the failure will mention that it dumped a transcript for you - is that enough, or would you like a comment here too?\n. That sounds really cool, but I haven't been able to figure out a good way to make that work. If you go simple and just say \"confirm the test credit card number doesn't appear in the scrubbed remote transcript\", you get coverage on the credit card but you still need to test the other things that this gateway does. I suppose it wouldn't be that bad to add, but I haven't figured out a great way to do it that isn't duplicating what you're doing in the scrub method in the remote tests when you go to make sure you scrubbed ok. I'm open to suggestions though!\n. Makes sense, will do\n. That looks awesome - I will get that going. Thanks!\n. This has been added. It looks like this for PayPal:\n``` ruby\n  def test_transcript_scrubbing\n    transcript = capture_transcript(@gateway) do |gateway|\n      gateway.purchase(@amount, @credit_card, @params)\n    end\n    transcript = @gateway.scrub(transcript)\nassert_scrubbed(@credit_card.number, transcript)\nassert_scrubbed(@credit_card.verification_value, transcript)\nassert_scrubbed(@gateway.options[:login], transcript)\nassert_scrubbed(@gateway.options[:password], transcript)\n\nend\n``\n. I had to make this change because the CVV for the test card is123, so the scrubbing assertion failed because the address was not scrubbed out. I wanted to keep the assertion dumb, so I changed this.\n. If quickbooks is the only integration using this gem right now, this should be optional for people who are using ActiveMerchant but not Quickbooks. [Here's how the braintree integration does it](https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree_blue.rb#L3-L7).\n. Please fill this in.\n. What is this for?\n. I think you want this test to be in the remote tests for the gateway, not the unit tests - yourtest_successful_refundis already doing the unit testing portion of the refund integration.\n. Whoops! This is a typo on my part, will fix\n. I fixed thewiredump_deviceline to be consistent and usetranscript. Does that work?\n. I think the mention was a time when it wasn't inside a code snippet actually, on an outdated diff\n. Do you get error codes back when a payment was processed successfully? If you do, should this one beincorrect_cvc?\n.PMT-1000is in here twice, and it's weird to see it listed in both success and error codes.\n. Maybe format this like the standard error codes, with a comment next to them explaining which each is?\n. Can you name thisadd_charge_data? Even though in aggregate it's making calls to theadd_*methods, seeing it inside apurchasemethod without theadd_prefix made me wonder what it was doing.\n. Why does a void also do a refund?\n. Why return this?\n. Indentation\n. These tests seem pretty empty.\n. Can you add this to Gemfile_common too? https://github.com/Shopify/active_merchant/blob/master/Gemfile_common\n. This might be clearer asunder_fraud_review?(response), but I don't have a strong feeling about it.\n. :grimacing: \n. Do you preferassert !, orrefute?\n. Technically you only need them if you're working on the braintree or QBP gateways - or running their tests, so I think it makes sense to leave these as test dependencies for now.\n. Why this change? If it's needed - do you still need to requiremocha/versionin the line above?\n. Oh ok - :cool:\n. Why did this get removed? \n. Instead of doing this, would it be clearer if this used an array andjoin`?\nruby\noauth_headers = [\"OAuth realm=\\\"#{@options[:realm]}\\\"\"]\noauth_headers += oauth_parameters.map {|k, v| \"#{k}=\\\"#{v}\\\"\"}\noauth_header_string = oauth_headers.join(\", \")\nDoing it that way means you don't need the chomp below, as well.\n. Nevermind, I see now\n. Can you change this to be an array that you join with &, to be consistent with the line above?\n. :cool: \n. :heart_eyes: \n. Why move this here?\n. I don't think you want the trailing , here - when you join it with , aren't you going to get duplicates?\n. spaces around - please\n. You're only using this for refunds - why pull it out into a message?\n. YAGNI for now, imo\n. Why scrub the amount?\n. Yes - you should only scrub things that are sensitive. Amounts are useful for debugging and not sensitive.\n. There are no credentials in the fixtures file, so I needed to run this with credentials that I can't leave in the code publicly.\n. Changed this to be # See firstdata_e4_test.rb for an example of a scrubbed transcript.\n. Not PCI sensitive; if we want to scrub those it should be done somewhere else.\n. I had to make this change in order to give the addresses being used in these tests actual values; by default they're set to \"Jim Smith\" but were falling through to the billing address of the credit card.\n. Do you need this check? It seems like you're only calling add_network_tokenization in situations where you already know that the payment_method is a NetworkTokenizationCreditCard.\n. Any docs on how to generate this for someone writing a new test?\n. Is there ever a network tokenized purchase, or is it always auth+capture? Do refund semantics change?\n. Are your tests going to pass if you only installed the things in the test group?\n. If the braintree gem is included so that the braintree tests pass - it seems like if that's what you need for those tests to pass, that should be what's in the gemfile (and then this can get updated to go back to the regular gem once it's been released).\n. :+1: \n. Whoops - I don't need the trailing part. Removed.\n. What is the message going to be, when it comes from the status? I can see that for declines/cancels it will be \"DECLINED\" or \"CANCELLED\".\n. Ah - I see now. Do we want this to be the message, or do we still want \"Transaction Approved\"?\n. :cool: - this works.\n. If I'm following this correctly - when you're in test mode, you need something different in the XML you're sending as well as hitting a different URL?\n. It seems like this and add_identification_new_order above could be wrapped up into one function, that took an optional ReferenceID:\nruby\ndef add_order_id(xml, options)\n  requires!(options, :order_id)\n  xml.Identification do\n    xml.ReferenceID options[:authorization] if options[:authorization]\n    xml.TransactionID options[:order_id]\n  end\nend\n. When will you be doing a transaction for a nil amount?\n. The tr abbreviation isn't necessary. Please name this translate, if that's what it is doing.\n. Can you add brackets to this, to make it clear what's function-call and what's arguments?\n. Brackets around arguments please, here and line 247\n. Could you name these keys something that's super obviously a test key/not expected in any way?\n. :heart_eyes: \n. This line is duplicated with the else below - maybe add :card to post and then have the commit outside?\n. Can you use a 1.9 style hash here?\n. Why split this into three lines, instead of just \nruby\npost[:card] = {emv_auth_data: icc_data}\n?\n. :heart_eyes: \n. Is it ok that you might be passing a nil emv_authorization here?\n. I don't get it. It shouldn't be legal, but the test passes? Why?\n. refute?\n. refute\n. refute\n. refute\n. :heart_eyes: \n. It kind of seems like this method:\n1) Doesn't do anything with options\n2) Has a var called defaults that is actually options and never changes.\nDo you need options to be passable? Or can you remove the argument and rename defaults?\n. Also, with this only being used for stripe unit tests right now - do you want to put it in the stripe test? Or is the hope that it's useful for other EMV implementation unit tests also?\n. Oh, yup - I see now. Thanks!\n. :cool: \n. :+1: to putting it on CreditCard\n. Maybe a method on CreditCard that can tell you if it's an EMV card, and then this method to do the checking?\n. Yeah - that way as EMV support gets added to other gateways (that only support credit cards getting passed in), they can just ask the credit card if it needs to be handled through EMV flows.\n. :heart_eyes: \n. Where is the assertion that this didn't set test mode?\n. Ah, ok - this test name looks a little unclear. Would it be better as setting_test_request_goes_to_live_url ?\n. It looks like money is a required parameter here - why the if money?\n. You can probably use assert_equal here.\n. assert is checking that @gateway.supports_scrubbing? returns true here - you don't need the == true.\n. This test doesn't do any checks for card number or CVC scrubbing - can you add them?\n. If you'd like to stick with small responses like this - you could loop over the short strings and match them individually.\n. Oh! Thanks for the explanation, I had no idea.\n. It sounds like void is not supported - this can be removed, in that case.\n. This is because the icc_data will include the amount, right?\n. JSON before it was :cool: \n. You totally did!\n. I'm cool with that.\n. Are there any other standard errors that come back? I noticed that the only error being changed is this one - do the other errors all map to ActiveMerchant's standard error codes?\n. If your messages are consistent, I think parsing them is fine - it would be great to have more standard error codes coming out of this integration if we can.\n. I'm a little nervous about this change, but the other changes in here look ok - doing a little more testing to confirm.\n. Oh - maybe I'm missing something here. How does this work for old accounts? Does the descriptor still come through properly?\n. Right - I mean accounts from versions that used statement_description, like 2014-08-20. Does it still come through ok there?\n. I'm following so far, but what I'm wondering is: when you use an API version that doesn't have the statement_descriptor (and instead expects statement_description) - what happens? \n. Aaand that's when he realized that he could run the remote tests and specify a version there, thanks to the statement descriptor test. Looks good.\n. :+1: for this\n. I think transaction should be singular, here\n. You're setting manual_entry on @credit_card, but the setup method is setting up @creditcard. Does this test pass? Should it?\n. Same question here\n. I'd lean towards using the @creditcard variable for this, but if you'd rather rename it I'm cool with that too.\n. :cool: \n. Is there any repercussion to passing this in as false? If there isn't, this could be post[:cardpresent] = credit_card.manual_entry\n. Thinking about it more - I think what you have here reads clearer right now, especially if this isn't required for all transactions.\n. Yeah, fair point. Stick with what you have here.\n. I think they capitalize the n: Authorize.Net\n. This name doesn't need the only_included anymore\n. Does it make sense to pull these magic numbers out into constants, so that you can remove the comment above?\n. Do you need this?\n. :+1: \n. If I'm following this correctly - if you have valid XML, you'll return a REXML::Document - but if you have invalid XML that raises a REXML::ParseException, you'll get a string back? Can you make the return values consistent?\nThis should also be going through Nokogiri; we'd like to use that over REXML going forward.\n. This regex is a bit hard to parse - would the regex here do the same job but be more clear?\n. Fair enough!\n. Why are these removed?\n. You can use STANDARD_ERROR_CODE[:card_declined] here instead of a magic string\n. refute ?\n. You're right - keep the string!\n. I think when we originally built these we copied them off of what Stripe had; the odds of this ever going out of sync with what they have are pretty low. That said - good arguments here for keeping it as a separate string, so I say keep it.\n. Where does this value come from?\n. :cool: \n. :+1: for this\n. Why did this get removed?\n. Is it possible that that amount is supposed to trigger the CVV response?\n. I guess if it's always been failing it makes sense to remove it.\n. :heart_eyes: for adding this test too!\n. What happens if you void without pymt_type?\n. Can you tweak the integration to return an authorization that includes the authorization code + the payment type, if that's required to be able to void? The expectation is that calling gateway.void(authorization) is all you need to void something.\nThe Authorize.Net adapter does this by joining things together with #: https://github.com/activemerchant/active_merchant/blob/93251aaf947361f3cab3be4d2356ecc636d928c7/lib/active_merchant/billing/gateways/authorize_net.rb#L736-L743\n. :heart_eyes: \n. Changed\n. Fair point; changed it to _options\n. This could be response['operations'] && response['operations'].last['qp_status_msg'], right?\n. ruby\nirb(main):004:0> foo['operations'] && foo['operations'].last['msg']\n=> \"hello\"\n. The unless/if right next to each other points to this maybe being better as an if/else\n. This is completely removing integration_mode - has it been long enough that we're fine doing that?\n. Oh! Fair enough, then.\n. This should be incorrect_cvc\n. This should be processing_error\n. This should be invalid_cvc\n. Please don't change this not to load from fixtures - this will break the tests for anyone who is running them with paymill credentials in a fixtures file right now\n. Can this come from fixtures as well? Right now an integrator who wants to run these tests won't be able to if they don't have a test key, even though there's probably one that will work in the fixtures file\n. 1.9 style hashes please (private_key: 'SomeBogusValue')\n. These changes look good except for this - the description you're passing in isn't going anywhere anymore. Should it still be getting included, or should this be removed?\n. voids create refund objects?\n. Yup, you're right. Carry on.\n. These are integrated on the Shopify side using https://github.com/activemerchant/offsite_payments; customers are redirected to the (offsite) gateway screen to complete their transaction and do the 3D secure challenge. 3DS support is out of scope for ActiveMerchant (which deals with direct connections to credit card gateways), but if you'd like to integrate it you could make a PR on offsite_payments.\n. What happens when this doesn't get sent? Would you automatically get the newest version, or 1.0, or .. ?\n. Instead of doing this here, why not modify the headers method to add the Omise-Version header for you (if available)? You'd be able to get away without modifying the body of this method at all, in that case\n. :+1: for not scrubbing if it's not actually PCI-level sensitive - accountID can be really handy for debugging if you need to look something up in logs and send to support staff somewhere\n. Instead of doing this, why not have base_redirect_url_for accept a cmd argument (that could be nil)?\n. So these calls become:\nruby\ndef redirect_url_for(token, options = {})\n  cmd = options[:mobile] ? '_express-checkout-mobile' : '_express-checkout'\n  base_redirect_url_for(token, options, cmd)\nend\nAnd the one below is just:\nruby\ndef redirect_url_for(token, options = {})\n  base_redirect_url_for(token, options)\nend\n. This goes away because with express in context, there is no mobile-specific URL, right?\n. 1.9 style hashes? :innocent: \n. Based on line 8, I think you're always going to be running this?\n. Oh, nevermind - I see the tests. Carry on.\n. Should the second e.response.body here be e.response.params?\n. That's fair - this works, then!\n. Stripe doesn't want an indication that it's an apple_pay vs. (android pay?) card anymore?\n. Ooooh. I see \ud83d\udc4d \n. ",
    "ebroder": "@ntalbott Hmm, that does have a lot of the information, but because it's calculated at compile time, it excludes some runtime data like the current kernel version (uname -r). I've found that to be very useful for debugging in the past (the version numbers are generally unique to a given distribution/release, which can be valuable for some library migration issues like openssl, etc.)\nThat's the big thing that's been useful to me in the past (though things like OS, hardware platform are also helpful), and as far as I know there's no way to get that information without shelling out.\n. (I also work at Stripe, in case that wasn't clear, and I will say that this is definitely information I've found useful in the past for debugging user problems)\n. ",
    "simonmorley": "I patched my own repo of active utils with this git repo:\nhttps://github.com/shopify/active_utils/pull/2\nAvailable here (with none of the tests as yet included from the above):\nhttps://github.com/polkaspots/active_utils\nI'll consider a pull request later but have asked why it wasn't merged previously.\n. ",
    "kcdragon": "Sure. I will rename to \"store\".\nBased on the documentation I read, Mercury does not have a concept of \"unstore\". After a successful authorization using a token, a new token is returned in the authorization response and this should be used in place of the previously generated token. A generated token will last for 6 months and then will expire. Do you want me to add some documentation relating to this in place of an implementation?\n. ",
    "joeshin": "If there is anything additional for this pull request getting merged, please let me know and I'll make it happen.\nThanks,\nJoe\n. @jduff thanks for the update.  @melari let me know how I can help.\n. ",
    "ashwinsaval": "I am facing the same issue here. Rails wouldn't allow me to update money to v6.0.0. Which was released just a few hours ago\n```\nBundler could not find compatible versions for gem \"money\":\n  In Gemfile:\n    activemerchant (>= 0) ruby depends on\n      money (< 6.0.0) ruby\nmoney (6.0.0)\n\n```\n. ",
    "divineforest": "bump :)\n. Why not use bundler for this?\n. ",
    "arthurnn": "sure thing\n. ",
    "sirupsen": "For someone who doesn't know much about ActiveMerchant, can you explain why you went for a Helper and a Notification module instead of the more standard way of implementing a gateway?\n. Thanks a lot @tcort!\n. Can you link to the documentation that specifies this order?\n. I'm sure this is right, I just want to understand the documentation as well. I cannot find a section that describes this order? One of the examples do, but that doesn't seem very official.\n. Thnks a lot @snider. This looks good to me. I'll merge and deploy this when I get a thumbs up from someone else and notify you when it's deployed.\n@odorcicd @jduff can one of you be an extra pair of eyes?\n. Can you rebase to fix the conflict so we only have the s/is/if/ change which was fixed in a previous typo PR?\nThanks!\n. Thanks @npverni!\n. LGTM.\n@odorcicd  care to take quick look and clicking the satisfying green button?\n. What is d3d usage? Do you have link to relevant documentation?\n. What does 'payment with alias' mean?\n. Thanks for your pull request @ejcosti! I've added some comments and concerns. I don't know much about ActiveMerchant, so bear with me.\n@odorcicd can you take a look too? Who else should we drag in here @louiskearns?\n. Looks much better now @ejcosti! I'll wait for one of the people mentioned in my first comment to come around and give this a final look.\nEdit: Please see my comments. :-)\n. Also can you add the gateway to the README as well?\n. Where are these defined? Might just be me who are wondering since I've never worked with active_merchant before. :-)\n. Makes sense. Everything looks good from here. :+1:\n. You can safely remove this =begin..=end block here.\n. Can you align this one with the others? :-)\n. What if your name is \"Simon H\u00f8rup Eskildsen\"? You probably want something like:\nruby\nnames      = options[:billing_address][:name].split\nfirst_name = names[0]\nlast_name  = names[1..-1]\n. When would it not have an address? Don't you want to bail in that case?\n. That regex is cryptic. What kind of order_id are you expecting and what does this regex do? Can you extract the regex to a constant with a suiting name and add a comment with what input it's matching (and why)?\n. Shouldn't this be user input?\n. What does this do? What's the .2 for?\n. I'm sure CGI or something has a bulit in helper that does this. There are probably some edge-cases here, i.e., shouldn't the key be escaped as well?\n. Are there any other response codes this provider should know about?\n. Again, remove this.\n. Can you format this a little nicer or extract to a file?\n. Same as above.\n. Where is this fixture coming from?\n. Is this test safe to run for anyone? I don't see a test flag passed to the gateway.\n. What happens if there's no name at all? Is that OK? You'd get an exception.\n. You're doing a lot of unless blank? here. Are you sure you want that? state could probably be left blank, but aren't you expecting all of the others?\n. What is an order_id anyway? Is this something posted to the gateway from an internal system for reference? Shouldn't this be required?\n. Hm, that's an odd API decision but okay. :-)\n. You don't seem to actually round it to two decimals, but the command says so?\n. Can you add a test for this?\n. And this one needs a test too\n. ",
    "isaacwaller": "@Sirupsen using a gateway would not be possible as the checkout page is hosted off-side. See the implementation of other off-site payment integrations: https://github.com/Shopify/active_merchant/tree/master/lib/active_merchant/billing/integrations\n. @justinplouffe do you think you could review this? we've updated it to support API key + secret authentication as requested.\n. Since \"cents\" is an integer, the division will always produce an amount with 2 decimal places\n. ",
    "barmstrong": "@Sirupsen (and others such as @ntalbott ) apologies for the delayed response on this thread, if any other questions please let us know, we're available to make quicker updates now.\n. ",
    "justinplouffe": "@isaacwaller I'll try this out in Shopify soon and keep you and @barmstrong updated.\n. Opening on a new PR on a branch we have write access to so we can continue work on this.\n. Dividing this in different PRs and closing this one.\nUser agent : #1181 \nNormalize: #1182 \nThe new version of this one : #1183 \n. :ship: \n. With recent 3.1 compatible credentials, @bslobodin and I are still getting an error on the remote tests :\nRemoteEwayRapidTest#test_failed_refund [test/remote/gateways/remote_eway_rapid_test.rb:87]:\n<\"System Error\"> expected but was\n<\"V6115\">.\nWe can probably remove that assertion since the response fails properly but I'm still curious about why the message is different. Maybe @atomgiant knows something about this?\n. It's not covered in CreditCardFormatting but it should probably live there. I suggest we keep the name until we have a better idea on how we could make credit card formatting a bit better since it involves changing every single call to the method.\n. @bslobodin :ship: ?\n. Much better fix : https://github.com/Shopify/active_merchant/pull/1212\n. Should I merge my PR instead?\n. I'd like to use the test added here if I do but it's currently failing on rails 2.3.\n. https://github.com/Shopify/active_merchant/pull/1202\n. I closed it when you posted this one since it seemed like a better and tested solution.\n. @ntalbott Adyen documentation comes on PDFs which is a little annoying : \nhttps://www.adyen.com/dam/documentation/manuals/APIManual.pdf\nhttps://www.adyen.com/dam/documentation/manuals/MerchantManual.pdf\n. @ntalbott I contacted Adyen support a while back and the new way I'm parsing addresses is the simplest way to get a result that's as close as possible to what they want without using repulsive regular expressions :\n```\nWe sent this as a combination to the bank. It works best if you really have the house number in the houseNumberOrName field.\nSo for example if someone fill in:\nLake Buena Vista 500\nApartment 2\nI would advise to send in:\nstreet: Lake Buena Vista\nhouseNumberOrName: 500 Apartment 2\n```\nAs far as the error management goes, I still need a bit of your insight. Adyen throws three kind of errors as far as I know :\n- 401 for unauthorized access\n- 404 when it can't find an authorization on a modification request.\n- 500 on pretty much everything else including common errors like a badly formatted value or missing field and it does so with a pretty meaningful error message.\nI'm still hesitant as far as the 500s go since they could both represent a common formatting error but also a weird and unknown error.\n. @ntalbott 500s will now create a failed response on validation errors and fail otherwise like they should. Anything missing outside of the country codes?\n. @ntalbott Still unsure what to do with the 404 since these errors don't have anything in the body.\n. Time to finally :rocket: this.\n. Moneris test servers crapped out for a while but they're back up. AVS data is now always submitted when an address is present and the tests are confirming requests aren't failing on test accounts without efraud activated.\n. Should I add Moneris US in the same PR or open another one?\n. To fix the tests on rails 2.3, you can create the ActiveMerchantResponse using stubs.\nruby\nActiveMerchant::ResponseError.new(stub(:code => \"500\", :message => \"Internal Server Error\", :body => some_json))\n. @louiskearns Any idea where I can get the list of countries for Adyen? I know there's a bunch but I have no idea where to get the list.\n. After the modifications to Mollie iDeal I think this is wrong but I'm not sure how it should be.\n. Tried to pull off some crazy regexes to make this work but it didn't work reliably. Any idea?\n. AVS and CVV aren't showing up in test Adyen responses so I left them off for now.\n. Company is the equivalent of username for Adyen. I feel like it should either be left alone or renamed to username/login so its purpose is clearer.\n. Posted the documents further in the PR but basically, instead of giving them an address in two different fields like we do for most gateways, we're supposed to separate the name of the street and the house number. I contacted their support asking about it and they said I should also include the apartment number in the houseNumberOrName field which makes it even harder to parse the ActiveMerchant address properly. The consequence of doing this wrong would be invalid AVS results (if I can ever get some out of the test account.)\n. @ntalbott An Adyen REST request is basically just a flattened and properly encoded hash : \naction=Payment.authorise&paymentRequest.merchantAccount=SupportAdyenTest&paymentRequest.amount.value=1234&action=Payment.authorise&paymentRequest.card.expiryYear=2016&paymentRequest.amount.currency=EUR&paymentRequest.card.cvc=737&paymentRequest.card.number=5555444433331111&paymentRequest.card.holderName=Test%2BTester&paymentRequest.card.expiryMonth=06&paymentRequest.reference=testReference1234\nI tried to be fancy and assemble the requests using small methods that convert ActiveRecord data structures to Adyen ones instead of using the typical add_something(post, options) pattern used in most gateways. These requests would then be made into a proper http post request before being sent. It seemed like a way to create smaller and more testable methods but I might just revert to the regular pattern if it ends up making everything simpler.\n. @ntalbott I just saw some gateways that generate a Response object with success set to false whenever a transaction fails. Is the correct behaviour to raise an exception or to generate a failed  response when a transaction is unsuccessful?\n. Just to make sure, when I test something like test_failed_authorize which simulates a badly formatted credit card number, it should raise an error?\n. https://www.adyen.com/signup/ecom/ has a list but it has an other/unlisted option at the end so I contacted their support to get something more official.\n. In this case shouldn't the fallback be negative?\n. All the 500s usually come formatted like this :\n```\nHTTP/1.1 500 Internal Server Error\nsecurity 901 Invalid Merchant Account\n```\nIf it ends up not being a clean 500 with an error message, it'll end up not entering the condition and raising the error anyways.\n. :+1: \n. Just added a failure fallback so this should probably stay there.\n. This one isn't...\n. ...but this one is.\n. ",
    "joshuapaling": "I'm getting the same error with eWay, using Active Merchant 1.42.2 with Spree Commerce 2.1.3. Spree passes in a string \"09\", and active merchant is expecting an integer.\nThe ironic thing is, Active Merchant gets the error when it's trying to convert the payment month to a string like \"09\", which is what Spree's already passing in!\nA simple fix would be to cast the month to an int before trying to convert it to string. Replace:\npost[:CardExpiryMonth]  = sprintf(\"%.2i\", creditcard.month)\nwith \npost[:CardExpiryMonth]  = sprintf(\"%.2i\", creditcard.month.to_i)\n. ",
    "momolog": "@joshuapaling: Exactly, that would be a fix. As discussed here, this behaviour of sprintf is confusing (since %i accepts strings in the first place) but there to stay.\n. @radar: Yes.\n. I would like to know the maintainers opinion on whether the Gateway API actually is expecting integers for month and year or is (should be) forgiving and tries to convert strings to integers?\nI tend towards the former, so this would really be a spree problem, right? \nIn case of the latter I would to provide a PR; should I do this against the head of the master branch?\n. @radar: can you please, very briefly, describe, how PaymillGateway#purchase gets called from Spree? I keep getting lost in the spree core code. The cc params get posted to the CheckoutController and then (via an update hook?) find their way to the PaymillGateway. Where in this process would be the right point to do param sanitization?\n. ",
    "nikoloff": "Hi guys,\nI will check in PAYMILL API, what is the expecting value for the credit card expiration date.\n. Hi guys,\nI take a look and found the core of the problem.\nIt is the usage of the ActiveMerchant::Billing::CreditCard object.\nWhen a new CC object is created via ActiveMerchant::Billing::CreditCard.new month and year are String: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/credit_card.rb#L37\nby validating the CC via cc.valid? month and year are becoming Integer (Fixnum)\nIf there is no validation of the credit card and this object is passed to the gateway's purchase method, this exception will always occur because month and year are Strings and the gateway expects ( and must have ) Integer for this fields.\nOne possible solution to solve this problem is to provide a constructor, which makes the transformation of the values, but I would not create a pull request for that, because in the README of active_merchant the client code is doing valid? before any further action.\n@momolog @radar  In my opinion this is not really an issue and can be closed, without any intervention. It is not related to PAYMILL, eWay or to any other gateway.\n. Hi @girasquid \ncan you pls check this PR again. The PAYMILL keys are now loaded from the fixtures.\n. Hi @girasquid \nthe codebase should meet your remarks.\n. Hi @girasquid \ncan you pls check this PR again, 10x\n. Yes @girasquid \nYou are right the description should be removed. I just committed this change\n. @ntalbott I fully agree with you, but here is used PAYMILL's magic token. This token is not bound to any credit card and it is used for test/demo purpose.\n. Now it loads from the fixtures\n. ",
    "KevinColemanInc": "Sure.\n. @ntappin, I think that this needs to be a remote test, but I can't seem to get all of the remote tests to pass locally.   Could it be that Authorize made changes to their responses since they were last written?\n. @ntappin, oops must of selected the wrong one in autofill.\n@ntalbott, Here are the results of my failed remote tests.  Looks like Authorize added an extra parameter that the tests aren't accepting.\n```\n  # Running tests:\n[ 4/15] AuthorizeNetTest#test_bad_login = 0.87 s                      \n  1) Failure:\ntest_bad_login(AuthorizeNetTest) [/Users/kcoleman/Documents/Sites/active_merchant/test/remote/gateways/remote_authorize_net_test.rb:108]:\n<[\"action\",\n \"authorization_code\",\n \"avs_result_code\",\n \"card_code\",\n \"response_code\",\n \"response_reason_code\",\n \"response_reason_text\",\n \"transaction_id\"]> expected but was\n<[\"action\",\n \"authorization_code\",\n \"avs_result_code\",\n \"card_code\",\n \"cardholder_authentication_code\",\n \"response_code\",\n \"response_reason_code\",\n \"response_reason_text\",\n \"transaction_id\"]>.\n[15/15] AuthorizeNetTest#test_using_test_request = 0.62 s                             \n  2) Failure:\ntest_using_test_request(AuthorizeNetTest) [/Users/kcoleman/Documents/Sites/active_merchant/test/remote/gateways/remote_authorize_net_test.rb:131]:\n<[\"action\",\n \"authorization_code\",\n \"avs_result_code\",\n \"card_code\",\n \"response_code\",\n \"response_reason_code\",\n \"response_reason_text\",\n \"transaction_id\"]> expected but was\n<[\"action\",\n \"authorization_code\",\n \"avs_result_code\",\n \"card_code\",\n \"cardholder_authentication_code\",\n \"response_code\",\n \"response_reason_code\",\n \"response_reason_text\",\n \"transaction_id\"]>.\nFinished tests in 15.294198s, 0.9808 tests/s, 4.4461 assertions/s.\n15 tests, 68 assertions, 2 failures, 0 errors, 0 skips\n```\n. @ntalbott, so I have left my employment before I wrote the tests for this branch and I no longer have a production authorize account to test this against.  Is there any chance you would be able to write those tests?\nSorry about the inconvenience. \n. @ntalbott, I guess they changed it so now you can't get transaction ids in test mode.  So I guess they are expecting you to test refunds against the sandboxed non test-mode server.\n. ",
    "ntappin": "@KevinColemanInc  I think you meant @ntalbott \n. ",
    "danrabinowitz": "It appears that this PR sets x_test_request to test? as shown here:\nhttps://github.com/Shopify/active_merchant/commit/369856ad91680ce34f16dbcba909cbd56bc037d4#diff-32b8ad7eb3755b05bb1a03b6e1f9a3cdR279\nThis results in setting x_test_request to false for the sandbox server which prevents seeing the transactions per: http://developer.authorize.net/testingfaqs/#reports\nIt seems like we want to set x_test_request to always be true.\nAm I missing something?\n. @ntalbott Thanks for correcting me about that line of code, but something's still not right. I think that x_test_request IS in fact being set.\nI think this for two reasons:\n1) I have VCR running around a test which sends a CIM transaction. The transaction request body is xml and contains this bit:\nx_test_request=TRUE\n2) When I access the sandbox web interface at https://sandbox.authorize.net/ I see customer profiles and payment profiles, but I do NOT see any transactions.\n. OK, I dug into this a bit more. I inspected the value of request immediately after this line:\nhttps://github.com/Shopify/active_merchant/blob/dd80810c3ee6aebc6a547b32c771d60464666bb7/lib/active_merchant/billing/gateways/authorize_net_cim.rb#L396\nand it contains:\nx_test_request=TRUE\nI checked to see where this is coming from. It is getting set here:\nhttps://github.com/Shopify/active_merchant/blob/dd80810c3ee6aebc6a547b32c771d60464666bb7/lib/active_merchant/billing/gateways/authorize_net_cim.rb#L616\nThat in turn comes from here:\nhttps://github.com/Shopify/active_merchant/blob/dd80810c3ee6aebc6a547b32c771d60464666bb7/lib/active_merchant/billing/gateways/authorize_net_cim.rb#L104\nSo I'm pretty sure this is a bug. I'll submit a PR.\n. I didn't look into whether I need to do anything special to run the tests. I just ran \"rake\" and all tests were green.\n. Thanks. I added my CIM credentials and ran the tests.\nAll of the CIM remote tests are passing:\n22 tests, 330 assertions, 0 failures, 0 errors, 0 skips\n. Hmmm, I tried the monkey patch above, and it stopped the SSL errors, but the API calls are still failing. I'm looking for other solutions.. ",
    "joelvh": "@nearapogee just saw your pull request after committing my updates to USA ePay from the last year as well in #950 -- Are you still actively using USA ePay?\n. @ntalbott I've rebased my commits. Let me know if I need to do anything else. Thanks!\n. ",
    "npverni": ":+1: \n. Rebased and added two 'digit' typo fixes.\n. We use it at Chargify for the same reason.\nThe problem with the existing implementation is that the error messages are all credit card related. There is no way to return relevant error messages to someone paying by check. This simply adds a way to tell the BogusGateway that we're paying by check instead of credit card. \n. I've found it pretty handy being in ActiveMerchant proper, and this just brings it in line with other gateways that support check payments (See https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L89). \nI agree with being wary about adding one-offs, but I wouldn't consider supporting multiple payment options an esoteric tweak.\n. @ntalbott Cool. Thanks for reviewing. I'm fine with rolling a custom test gateway if that is indeed the recommended approach.\n. Did a cursory survey of the gateways, it appears that these gateways support using checks by taking a credit card or check as the 2nd parameter to most of the main gateway methods:\nauthorize_net\nbeanstream_core\nblue_pay\ncyber_source\nevo_ca\ninspire\nitransact\nsage\nsmart_ps\ntransnational\nNot the majority of gateways, but some big ones. Looking through history, most gateways started with credit_card as the original parameter name, then evolved into taking a credit card or check. For example, this is when Auth.net underwent it's evolution: https://github.com/Shopify/active_merchant/commit/9681613e. I imagine more and more will undergo the same evolution in the future.\n. @ntalbott on it\n. @ntalbott I added the remote specs and rebased. I had to tweak the refund spec to get it to pass. Ready for review.\n. I can lend you some if you like\n. @bslobodin It is required for TransArmor transactions. See https://firstdata.zendesk.com/entries/407571-First-Data-Global-Gateway-e4-Web-Service-API-Reference-Guide, section 3.4\n. This fix is in production at Chargify. We have customers who have confirmed that they can now process Amex and Mastercard without error.\n. Thanks @bslobodin @ntalbott \n. Good catch, thanks @mendable \n. FYI, the failure here seems to be a false negative\n. ",
    "snider": "Hi,\nour docs can be found here: https://www.cardstream.com/integration/direct-integration\nI actually work for Cardstream Limited as the integrations specialist, we noticed this bug while helping a customer with a high amount of AVS declines due to numeric data being put into the wrong order.\nmy email is paul dot lashbrook at cardstream dot com if you want any help etc...\n. the problem is that module is using a legacy layer which is getting switched off in Feb, so there is no documentation available for that API version.\nwe have put in place a temp fix on our end that is effecting all requests to the legacy layer from Ruby, there is a project underway with someone in Shopify to upgrade to the new payment API, which is why this pull request is coming from a branch and deletes/reverts some changes made in our fork namely the working change we made to support the new gateway API that Shopify need to be using before Feb \nhttps://github.com/CardStream/active_merchant/blob/master/lib/active_merchant/billing/gateways/card_stream_modern.rb\nfeel free to drop our Technical Director a email if you want an official yes this change is correct adam dot deacon at cardstream dot com\n. - we are matching the user agent up to Ruby for the temp fix to allow merchants to transact correctly until the fix is rolled out on Shopify's system, so if you are getting AVS fails with the fixed code that would be why, if you change the user agent to anything other than \"Ruby\" the temp fix we added wont apply.\nwe will remove the fix from our code as soon as we get the heads up that the fix is about to get pushed :)\n. Hi,\nI've not been able to get the unit test scripts to work, making this pull request was the 2nd time i have programmed in Ruby, the 1st being adding HMAC's to the cardstream modern class (which needs to be rolled out by feb 2014 by shopify to keep the gateway working for our mutual customers)\ncould someone whip them up or point me in the right direction to get the test scripts working?\n. ",
    "silasjmatson": "Thanks! I looked through the issues, but apparently not closely enough.\n. ",
    "crazyivan": "Hi @ntalbott - yeah, it's kind of troublesome. I had to:\n1. Open a Payflow Pro account (and get a vendor ID)\n2. Email payflow-support@paypal.com with my vendor ID and ask them to\n   enable testing.\nI put some comments about this in the\ntest/remote/gateways/remote_payflow_test.rb file, as I anticipate that\nanyone that tries to do this is going to have the same question.\nOn Wed, Dec 11, 2013 at 10:29 AM, Nathaniel Talbott \nnotifications@github.com wrote:\n\n@crazyivan https://github.com/crazyivan were you able to get PayPal to\nenable ACH on your Payflow test account? How did you accomplish that? I\nhave a Payflow test account but ACH doesn't seem to be enabled on it, and\nI'd like to be able to run the remote tests for this before merging.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/935#issuecomment-30347644\n.\n. Yeah, exactly. (when logging in to manager.paypal.com, for example)\n\nOn Wed, Dec 11, 2013 at 11:59 AM, Nathaniel Talbott \nnotifications@github.com wrote:\n\n@crazyivan https://github.com/crazyivan OK, I see that now - super\nhelpful. What is the Vendor ID? Is it what PayPal calls the \"Merchant\nLogin\" when logging in?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/935#issuecomment-30357704\n.\n. \n",
    "tjoyal": "Cc: @cjoudrey\n. Exactly what I meant. I do not like evals unless we can ensure the user cannot take control over them. (Opening the discussion for another PR)\n. It is simply an arbitrary executed eval that I would have liked to prevent from loading an object that is not a Gateway. \n\"maintaining\" could be done programatically\neg.: Gateways class are all under the same folder and we do as rails do, validate that a specific file define an expected class.\nOr we could validate that the class loaded is a child of Gateway.\n. I'm trying but I'll need some help :(\nFrom what I can see we do not test at all the Paypal remote response via a remote test right?\n. Paypal != PaypalExpress right?\n. So none of these are actually responses from Paypal once we have a token provided by a client that already entered his informations on the remote form.\n. I am sorry but my knowledge is limited and I am short on time to tackle this. That missing remote test is something that need to be investigated further. \nFor now I'll leave that this way and hopefully have time in few weeks to take another look. If anyone feel like tackling this with me that would be great!\n. > Does NoteText always come back in the response?\nI do not know if it always come with the response, my best guess is to not thrust it :)\nFrom the cart or checkout we should always be sending the current cart/checkout note, so my guess is that unless it is disabled on the merchant PayPal account I expect it to be shipped back. Haven't tested it yet, but it should not be affecting this implementation.\n. @girasquid @karlhungus I'll defer to your judgement. I am not that much aware of the development progress on this gem.\n. ",
    "marothstein": "@ntalbott I'll get right on that. Thanks!\n. @ntalbott, there shouldn't be any more external dependencies, now.\nIs there an easy way to get the submission re-reviewed?\n. Hey @ntalbott, happy new year! \nThanks for putting it back into the rotation and for the advice. I'll squash out the merges in the future. \n. Hey @ntalbott, I added some additional things. I'm considering this frozen unless you guys find some problems. \nI tried to squash out the merge commits. Hopefully I didn't make a mess of anything in the process. Let me know if you need me to change or explain anything, and thank you for your help!\n. Hey @ntalbott, any word on this?\n. ",
    "pwoestelandt": "D3D is 3D Secure int\u00e9gration for Ogone DirectLink.\nYou can find Direct Link 3D documentation here : https://secure.ogone.com/ncol/Ogone_DirectLink-3-D_EN.pdf\n. With Ogone Direct Link there are two ways to pay : \n- with a credit card\n- with an alias\nFor example, in my case : I want to have the payment form in my website.\nI don't want to use default Ogone form. Having a payment form in its website can be dangerous because credit card datas can transit in your logs.\nTo avoid that, we need to put the ogone gateway URL in the form action. After that we receive an ogone response with an ALIAS id which is corresponding to customer credit card.\nYou can request payment with this alias.\n. Before, d3d option was available only when payment source was not a string and this case was not tested. \nD3d option is already tested for purchase method and authorize method. \nD3d is only tested with credit cards payments maybe we can add d3d tests for aliases payments.\n. Yes, I'll do that next week.\n. ",
    "marchyoung": "@pwoestelandt Hi! Any chance of seeing a test for PR? I understand the need as Ogone allows both CC and alias (token) payments, but the entire ogone_test.rb uses CC exclusively for purchase/authorize and there are no tokenized payment tests. Also, I assume the code is expecting the alias to be a string, not a Billing::CreditCard instance, so that could also be very helpful in exposing any other issues.\n. ",
    "ejcosti": "@Sirupsen Thanks for commenting on our pull request.  I have made changes based on your critique.\n- Combined the response code and response message together.\n- Did a pretty generate on the failed and successful responses for better reading.\n- Any nil or empty fields that get passed through to our api is still validated on our end.  The only field that are required by our api is the credit card, month, year, and cvv.\n- For the month field, we need to make a change on our end to accept single and double digit months.  The line \"%.2i\", ensures that the month will come through as a double digit number (1 = 01, 8 = 08).\n. Hello, our remote capture test will fail until we do a production push tomorrow morning, which will allow captures on our API.\n. This fixture is provided by Active Merchant.\n. ",
    "DavidGeukers": "@melari \n@odorcicd \n:tophat: ?\n. Can I merge this or is there a process?\n. Can you confirm that Shopify currently sends Elavon a 2 digit country code (rather than the full country name)?\nAlso, pages 225-230 of the doc (this one) seem to indicate that you'd need to change this code for all countries, not just the non-standard ones.\n. ",
    "mengqing": "Just wondering, how would one to implement the transparent redirect approach of using the eWAY Rapid 3.1 API?\nThanks\n. @atomgiant - I believe the transparent redirect is another approach of the Rapid 3.1 API which bypasses the merchant web server for PCI DSS Compliance\nhttp://www.eway.com.au/developers/api/rapid-3-1\n. ",
    "atomgiant": "@mengqing - The eWAY Rapid 3.1 API is for direct access and requires you to pass some level of PCI authorization through eWAY for access.  I believe you can still use their existing form redirect outside of ActiveMerchant but you may want to check with them if you are interested as I don't know all of the details.\n. @mengqing - Yeah that was the way the previous implementation of this gateway worked.  eWay Rapid 3.1 just added support for direct so I could do a direct implementation.  The previous Active Merchant direct implementation was basically a hack to fake a browser submission which still required PCI compliance on the caller's side.  There may be a way to use their redirect directly outside of ActiveMerchant combined with Active Merchant once you have the customer token but I haven't tried it.\n. I placed the required! on the internal methods - I'll move these up to the public methods.\n. Yep will do.  This convention was not entirely obvious within Active Merchant :)\n. OK, I will have it default to the order_id since that is always provided.\n. I'll document this :)\n. ",
    "boone": "I think OrbitalGateway::AVSResult should be used in place of AVSResult, because the results are specific to Orbital. It should be automatically handled here. Are you using it differently?\n. @aaronklaassen I don't think that to_hash is necessary, because the Response class handles it here. Can you post a code snippet of how you encounter that undefined method [] error?\n. @aaronklaassen No problem. Since you're using Orbital I would appreciate it if you could take a quick look at #973 and #988. Feedback from other Orbital users might help get those merged. Thanks.\n. This should solve the CI failures seen on #972 and #973.\n. @ntalbott I have never used those :dest_* values myself, but it is part of the Orbital Gateway spec (see page 77). Looks like that code was added in 2f7c5b8.\n. @ntalbott anything else I should do here? Thanks!\n. @ntalbott thanks for your help!\n. @ntalbott how about 8d66a8b?\n. @ntalbott this method was already handling some nil values from the tests. I updated it in 8d66a8b to remove the use of ActiveSupport's try.\n. ",
    "aaronklaassen": "@boone Yeah, for sure.\n. \nYeah, ok, this isn't an issue. I was getting burned by someone's old monkeypatch. Thanks for your time, though.\n. ",
    "yagator": "There's no access credentials for this request. This is why I didn't include them.\nYou can see it directly on your browser:\nhttps://www.srpago.com/validaciones/?wapps=WPOS&XML=SI&ecom_id=MUAyMDExMDMyNDE2NTczNQ%3D%3D&acc=Guardar&Referencia=Cargo+de+prueba&Nombre=Juan+Perez+Perez&TipoTarjeta=MAST&NoTarjeta=5453750000000011&CodigoSeguridad=666&Mes=10&Agnio=2018&Importe=10.50\nAnd the final URL (included in the branch) copes with the same fact.\nThe final user should be able to request an [ecom_id] to Sr.Pago. The [ecom_id] above belongs to the test account.\n. ",
    "CraigAPayne": "False alarm.  The test account I was given access to had been previously used by another developer, who had set the Address field to Required as part of their business rules.\nI've requested a 'clean' account, one that matches the requirements specified in their user docs.\n. I send 3 \"digit\" codes from my app, and Elavon takes them.  For grins I tried, and Elavon will happily consume \"US\" rather than \"USA\" - at least for a few of their commands.\nI'd tend to agree with DavidGeukers - the Elavon docs call out that they want to see ISO3 codes.  I'm looking at pp 250 of the VirtualMerchant-developerGuide.pdf dated (Document #VRM-0002-C) dated 2013.  I think the one David's pointing at was just released (-D), and calls out the same.\nI don't know how many other processors want to see ISO3 codes, but perhaps an optional setting in the Gateway, and a helper method to do 2-digit->3-digit conversion would be a worthwhile addition.\n. Nathaniel,\nIt's your gig, but ActiveMerchant pretty clearly documents those Recurring\nfunctions...\nNow, if you're saying that they don't jibe well with your business goals related\nto Spreedly, I get it.  Elavon's clearly got something fairly unique and I\ncan see where there would be conflict.  I'm happy to get them to chime in - they've\nlooked at the code and liked it.  Does Spreedly support Elavon now?\nUnfortunate...\nOn May 7, 2014, at 10:33 AM, Nathaniel Talbott notifications@github.com wrote:\n\n@CraigAPayne while I appreciate the work here, these functions are really outside the scope of ActiveMerchant.\n\u2014\nReply to this email directly or view it on GitHub.\n\ncap\nhttp://www.linkedin.com/in/craigapayne\ncraigpayne@mac.com\n408-242-2444\n. FYI, there are currently 16 (not counting #1052) gateways which do support some form of Recurring billing.  That's more than 10%, and includes PayPal, Authorize.net, Beanstream, Braintree, Payflow, QuickPay, Orbital, etc.  A few of those are pretty major players I think.\n. @jduff - I just did a quick scan of other, similarly focused projects for other technologies, and none that I found appear to support recurring billing (as a first class citizen) either :(  Rip it out.  I'll obviously keep my fork if anyone wants Elavon support for Recurring.\n. ",
    "ramasuresh": "Test cases are getting failed in the master branch. Please help me on this ? @jduff ??\n\n. @bizla @jduff Guys please help us to  get it resolve soon. #972\n. Can anyone merge this pull request after reviewing it?\n. @ntalbott we have changed the name of the gateway as nobody using, but you have made a valid point. So, we have reverted the changes and pushed changes again. Please review.\nThanks @ntalbott \n. ",
    "saurabhnanda": "Not interested in pull requests?\n. ",
    "rwdaigle": "Should probably close this in favor of: https://github.com/Shopify/active_merchant/commit/3f843703d4c6a0e1f71c688c99432682d2c42bb6\n. Oops, DUP!\n. @ntalbott commit amended with backwards-compatible options: https://github.com/rwdaigle/active_merchant/blob/c50a18b7ce459bbb5aecf621a93d83d1f8e59a27/lib/active_merchant/billing/gateways/iats_payments.rb#L19-L24\n. :+1: \n. Hi @jnormore. I've been doing a fair but of work at Spreedly looking into Apple Pay and network tokenization. It's great to see this becoming a first class citizen in AM. Few comments, if I may?\n\nMore gateways coming after this\n\nI would love to know what other gateways support a tokenization API. Do you have a canonical list anywhere?\nIt seems that the current landscape is quite varied, with some gateways supporting the ability to pass in encrypted (Apple Pay specific) payment tokens and others (like CS here) letting you pass in the decrypted components. It would be good to understand the range of options possible to know what's the right level of abstraction.\nWithout seeing many other examples, I tend to agree with the direction @girasquid advocates for here:\n\nNetwork tokenization information looks like it always comes along with a plain-old CreditCard - does it make sense to create an augmented CreditCard class that can handle storing the original properties and also the network tokenization ones?\n\nMy sense is there are enough different \"levels\" of network tokenization support that it will become necessary to have a separate entity from CreditCard to represent tokenized payment data (though it will share a lot of functionality with a card). While most underlying tokenization schemes adhere to a PAN and exp date format, making it look and feel very much like a traditional credit card, there seem to already be enough departures from this that forcing it into a card entity might not work.\nHowever, I'm probably getting ahead of myself. While I think we might get here eventually, at the very least I do think we should start pulling tokenization info out of the options hash and into properties of a card, as much as they can be shoe-horned in for now as @girasquid suggests.\nOtherwise, @jnormore, the implementation looks to accurately adhere to the CS spec :+1: \n. @jnormore \n\nEssentially, all network tokenization implementations will have to adhere to the spec\n\nWell, there's the network tokenization spec that deals mostly with the internals of the payment network and then there's Apple Pay, which adds a bunch of stuff above the gateway (it's brand of encryption, the payment token format etc...)\nI guess I'm wondering where the distinction in AM lies between Apple Pay specific support and network tokenization support.\nFor instance, Auth.net, Litle and others have an API that lets you pass in an encrypted Apple Pay payment token. Wrapped inside is a card token and cryptogram conforming to the network tokenization spec, but it's obscured. And here Cybersource has an API that lets you pass in the card token and cryptogram directly.\nIt seems to me that these will need to have different representations in AM even though they are both, under the covers, powered by network tokenization.\nHopefully I'm not talking past you, just want to understand what the approach is for these different gateway API scenarios!\n. > We already have support for the PKPaymentToken\nI see that now - apologies for not doing some more digging before jumping in here.\n\nWhat I'm trying to do here is support the decrypted token\n\nUnderstood.\n. @jnormore also, here's another PR that's going to the network-tokenization branch instead of master, if that's not intentional.\n. @jnormore is there a reason why this is still in the network-tokenization branch and not master (with the other Apple Pay supporting gateways)?\n. > it (customer name) is available to the device when it's generating the payment token request\nActually, it looks like name is not part of PKAddressField (which is what's used to specify required billing or shipping data). So... I do still think name should be treated as a non-required field.\n@jnormore If I fix the multi-threaded issue, are we :+1:?\n. @jnormore inheritable class attribute logic has been updated\n. Nits addressed (and happy to do so)! Ready to merge.\n. @jnormore it looks like this is not a publicly documented Stripe API - where can we find docs to cross-reference this?\n. @jnormore well then, not much to comment on :)\nWondering why you have auth/purchase tests, but only one for each of the remote and unit tests? Can we not have full coverage in both test suites?\n. :+1: \n. @jnormore I know some gateways have the ability to scrub their transcripts of sensitive data (including Stripe). I wonder how you view the cryptogram. Is it considered sensitive data that shouldn't be echoed back via insecure channels?\n. @jnormore at Spreedly we are considering the cryptogram sensitive data. I'd vote for adding it to the scrub method. Here's a regex that works (the = being to account for Base64 encoded cryptograms):\nruby\ntranscript.\n  gsub(%r((&?three_d_secure\\[cryptogram\\]=)[\\w=]*(&?)), '\\1[FILTERED]\\2')\n. Good stuff!\n. @jnormore the docs only show tokenized credit card support for the authCaptureTransaction operation, whereas I believe you've implemented it for auth, authCapture and credit (?). Do you know the docs to be incomplete?\nAlso, I see that for repeat transactions there needs to be a isPaymentToken flag set:\n\nWe should probably add support for this flag via the options?\n. @jnormore completely fair!\n. Wow, sorry I didn't see this until now. Poor GH notification management on my part.\nThis changed was introduced to allow CreditCard sub-classes to maintain their own require_verification_value default value without affecting CreditCard. Any modification of instance access was unintentional.\nInstance access is fine by me, as long as it retains the ability to set subclass values that are independent from CreditCard.\n. @duff @ntalbott do we ping each other directly on these Spreedly customer integrations?\n. @duff XML building/parsing updated to use Nokogiri.\nMerchant Partners test results:\n```\n$ ruby -Ilib:test test/remote/gateways/remote_merchant_partners_test.rb \nLoaded suite test/remote/gateways/remote_merchant_partners_test\nStarted\n..................\nFinished in 25.294422 seconds.\n18 tests, 51 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.71 tests/s, 2.02 assertions/s\n$ ruby -Ilib:test test/unit/gateways/merchant_partners_test.rb \nLoaded suite test/unit/gateways/merchant_partners_test\nStarted\n..................\nFinished in 0.027369 seconds.\n18 tests, 158 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n657.68 tests/s, 5772.95 assertions/s\n```\n. @duff nits fixed!\n. Kudos for dealing with this whacky looking API. Looks clean and secure to me.\n. @duff we should be sure to note the associated API version bump in the changelog in case there are unexpected upgrade issues.\n. @anellis Seeing this test error from Travis?\n```\nError: test_failed_authorize(LitleTest): NoMethodError: undefined method payment_cryptogram' for #<ActiveMerchant::Billing::CreditCard:0x000000058f4828>\n/home/travis/.rvm/gems/ruby-2.2.0/gems/activesupport-3.2.22/lib/active_support/core_ext/object/try.rb:36:intry'\n/home/travis/build/activemerchant/active_merchant/lib/active_merchant/billing/gateways/litle.rb:200:in `block in add_payment_method'\n```\nOther NetworkTokenizationCreditCard implementations test for type like this?\n. @anellis I don't think we should require the user to pass in order_source: \"applepay\" in the tx options. Instead, if the payment method is a NetworkTokenizationCreditCard, we should automatically set that value within the adapter?\n. @duff this gets my :+1: \n. @ntalbott\n\nis Response#authorization handling backwards compatible?\n\nIt is simply the transaction id in both API responses, so there's definitely no field ambiguity.\n. @ntalbott I'm still waiting on some more details regarding the 3DS fields. There is no solution_id equivalent. And I did make the customer_id field mapping.\nI'll post back here when I've reached a conclusion about the 3DS stuff.\n. @ntalbott the NMI 3DS story is a bit muddled, and there's certainly no mapping from the auth.net to native APIs. From NMI:\n\nWith 3DS there are two options:\n- We have our own Payer Authentication service. In order to work, the merchant has to use the three-step redirect or Quickclick (a hosted checkout page) so that we have control over the customer's browser. We then re-direct the customer to the service and back.\n- Some merchants or software providers will integrate into CardinalCommerce Centinel on their own. We have the variables there to pass them through, but the instructions on how to set that up would come from the 3D Secure provider. I do know if you run a sale with the 3D Secure variables through the gateway, and use the Query API on that transaction you'll get a \"cavv_result\". If that result is blank or null, that means the sale was run on an unsupported processor. \n\nThe current version of the adapter only passes two variables (cardholder_authentication_value and authentication_indicator) whereas NMI's native 3DS support has four:\n\nThese are related to 3D Secure (Verified By Visa, Mastercard SecureCode). I'm not sure how these map one to one, but these are the variables for the direct post:\n- cardholder_auth: Set 3D Secure condition. Values: 'verified' or 'attempted'\n- eci: E-commerce indicator.\n- cavv: Cardholder authentication verification value.\n- xid: Cardholder authentication transaction id.\n\nIt seems that there is no way to migrate these fields. Should we move forward as is, @ntalbott?\n. @ntalbott :+1: \nYou write the changelog entry, not me, right?\n. @duff fixed\n. /cc @duff @ntalbott \n. @duff was wondering if I could get your take on this. I'm most interested in how, if a :customer option is present, it routes it to a different resource. For some reason I'm uneasy with the constant resource forking.\nDocs are here: http://www.openpay.mx/en/docs/api/?undefined#introduction\n. I believe this can be closed due to changed customer requirements.\n. /cc @duff \n. @varyonic pls do\n. @mrezentes I'm seeing the following warnings on test run:\n/Users/ryan/dev/projects/active_merchant/lib/active_merchant/billing/gateways/jetpay.rb:183: warning: assigned but unused variable - approval\n/Users/ryan/dev/projects/active_merchant/lib/active_merchant/billing/gateways/jetpay.rb:183: warning: assigned but unused variable - amount\nCan you please fix these, and rebase to master while you're at it?\nAlso, are these backwards compatible changes?\n. @mrezentes I'm seeing this on the remote tests?\n``\n$ ruby -Ilib:test test/remote/gateways/remote_forte_test.rb \nLoaded suite test/remote/gateways/remote_forte_test\nStarted\n................F\n=========================================================================================================================\nFailure:\n  Response expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fb7b90be0a0\n   @authorization=\"#\",\n   @avs_result=\n    {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=nil,\n   @fraud_review=nil,\n   @message=\n    \"This user does not have permission to access one or more of the requested Ids/Tokens.\",\n   @params=\n    {\"response\"=>\n      {\"environment\"=>\"sandbox\",\n       \"response_desc\"=>\n        \"This user does not have permission to access one or more of the requested Ids/Tokens.\"}},\n   @success=false,\n   @test=true>>\ntest_successful_void(RemoteForteTest)\ntest/remote/gateways/remote_forte_test.rb:135:intest_successful_void'\n     132:     wait_for_authorization_to_clear\n     133: \n     134:     assert void = @gateway.void(auth.authorization)\n  => 135:     assert_success void\n     136:     assert_equal 'APPROVED', void.message\n     137:   end\n     138: \n=========================================================================================================================\n.\nFinished in 37.597375 seconds.\n18 tests, 43 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n94.4444% passed\n\n0.48 tests/s, 1.14 assertions/s\n```\n. Remote tests pass sporadically due to gateway side limitations. Here's output for posterity sake:\n```\n$ ruby -Ilib:test test/remote/gateways/remote_forte_test.rb \nLoaded suite test/remote/gateways/remote_forte_test\nStarted\n..................\nFinished in 44.705529 seconds.\n18 tests, 44 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.40 tests/s, 0.98 assertions/s\n```\n. @davidsantoso no tests so not sure what case this is fixing?\nIf this is intended to fix bogus UTF-8 characters, does it do that? It seems like URI encoding might obscure the URL in some other ways?\n. All around looks great! Few comments:\n- I'd use this as an opportunity to add a scrub method. Add account/routing number to that scrubbing if that's how other adapters work too?\n- Does Bridgepay support storing the card? If so, we should use this as an opp. to add store as well.\n. Merged in https://github.com/activemerchant/active_merchant/commit/15982efd6bb753bce20084a0152a4cdb73f31d8f\nUnit tests:\n```\nFinished in 14.523776 seconds.\n\n3041 tests, 14123 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n209.38 tests/s, 972.41 assertions/s\n```\nRemote tests:\n```\nFinished in 37.505004 seconds.\n\n16 tests, 37 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.43 tests/s, 0.99 assertions/s\n``\n. Merged\n. @davidsantoso Does Element supportstore`?\n. > Should store be done by default in addition to the other actions if it's available?\nI believe that is Spreedly's current approach, yes (let me know if we need to update our internal docs to reflect this if it's unclear)?\n. > wow good catch!\n10/10 would PR again?\n. Closed w/ https://github.com/activemerchant/active_merchant/commit/7519bc780e704e8e801a5483cb4a235d6b9e55f5\n. @davidsantoso running remote_authorize_net_cim_test.rb yields a bunch of the following errors?\n```\nError: test_validate_customer_payment_profile_request_old_does_not_require_billing_address(AuthorizeNetCimTest): NoMethodError: undefined method []' for nil:NilClass\ntest/remote/gateways/remote_authorize_net_cim_test.rb:587:intest_validate_customer_payment_profile_request_old_does_not_require_billing_address'\n     584:     @customer_profile_id = response.authorization\n     585: \n     586:     assert response = @gateway.get_customer_profile(:customer_profile_id => @customer_profile_id)\n  => 587:     assert @customer_payment_profile_id = response.params['profile']['payment_profiles']['customer_payment_profile_id']\n     588:     assert @customer_address_id = response.params['profile']['ship_to_list']['customer_address_id']\n     589: \n     590:     assert response = @gateway.validate_customer_payment_profile(\n================================================================================\n``\n. @davidsantoso need to updatescrub`\n. @jnormore @ntalbott would love a second set of :eyes: on this.\nBasically, an Android Pay produced NetworkTokenizationCreditCard has all the same values of an Apple Pay one. However, some gateways have apple or android specific field names, so we need to know what type of tokenized card we are dealing with. To do this, we add a simple, and explicit, source attribute to the NetworkTokenizationCreditCard that each gateway adapter can use to determine how to send the payment.\nSeems simple and straight forward?\n. @davidsantoso so it doesn't look like there was any added functionality, just some tests to confirm the behavior?\n. @hoenth if this is still an issue, would you mind submitting a corresponding test or close the issue if it's not a priority for you? Thanks!\n. @hoenth do you mind rebasing your commits on master, they seem of date?\n. Sorry for the back and forth on this, @hoenth, but any idea how to fix this? This is on Ruby 2.1.\n/Users/ryan/dev/projects/active_merchant/lib/active_merchant/billing/gateways/cashnet.rb:135:in `handle_response': warning: URI.escape is obsolete\n. @hoenth got it, looks like CGI::escape will suffice.\n. @hoenth not sure if you want to look into this or not, but it looks like the mocking approach we took has a blind spot. We had to revert this PR. See the stack trace here\n. @hoenth \n\nWhen I run the remote tests in ruby 2.1.6, I'm not seeing any URI.escape is obsolete warnings. In what context were you seeing them?\n\nCan you run the whole suite with rake - most warnings show up then.\n. @hoenth I dug into this a little more and I actually don't think the issue is URI vs. CGI.\nIf you look at the exception, the URI type that gets passed to the AM connection is URI::Generic, not URI::HTTPS, which is what it should be if the location were a valid URL.\nIs it possible Cashnet is returning a relative Location path here? Can we get a sample of what those location header values look like? I suspect we're not getting full URLs back from Cashnet...\n. @ntalbott wondering how to solve this.\nBasically, Cashnet returns a Location header that may contain URL unsafe characters. So we need to encode that value. However, the CGI.escape method is deprecated in Ruby (and there doesn't seem to be a viable replacement). What to do?\n. @hoenth looks like URI::Parser.new.escape will do the trick w/o warnings. Mind updating the PR?\n. @mddharmesh specifically, you can find complete contribution guidelines (and the command to generate a new adapter template) here: https://github.com/activemerchant/active_merchant/wiki/contributing\n. @anellis am I correct in saying that this is a backwards-incompatible change (in that there are no longer SageBankcardGateway, or vault classes)?\n. Ah, I didn't notice those weren't meant to be externally accessible classes. I think we're ok on that front.\n. What do you think about just having two SOURCE_CARD and SOURCE_ECHECK constants instead of going through a hash? If there are just two values a hash is probably overkill?\n. @anellis we should probably strive to maintain a consistent external interface, including the standard AVS messages. Is there no way to map, at the code/message level, from one to another before passing into the AVSResult class. Can you give an example of this mis-match?\n. > If I were using the code to derive the message i'd have to consolidate their \"data not checked\" and \"security checks not supported\" messages into one AM standard message, and the user would lose some information in the process.\nI'd do my best to provide reasonable mapping to AVSResult codes. If the caller wishes to dig deeper, keep in mind they can always query the raw result params hash, which retains all the original response values (so no info is actually lost, just slightly obscured for those that want to know). That seems like a reasonable trade off?\n. > I just couldn't find a way to return their messages\nI think that's ok, keeping in mind that if a caller wants access to the raw message they can still look at the response params directly to access it.\n. Few small things, but great job on your first real adapter! And you had to wade through a bunch of nested XML to get there :sob: \n. >  after I finish puzzling out a good way to handle passing the action to commit\nnp skipping if this if it's too much of a hassle\n. I think this looks great! Few small things to move around and I'll merge.\n. @davidsantoso can we capture the stack trace here for @hoenth to take a look?\n. @davidsantoso yeah, still waiting for that stack trace :)\n. @sdball I wonder if we shouldn't update CreditCardMethods#brand? to include this logic. Seems a shame to lock it up in a single gateway?\n. > We could perhaps move electron? to CreditCardMethods\nI like this as it keeps the Electron determination close to the existing branding logic while letting individual gateways determine if they want that level of granularity.\n. Seeing the remote tests fail (as they did before this commit) - want to see if we can resolve it since the failure is pretty isolated (on refund).\n. I can reset master to the state I have, which was last updated on Feb, 18th w/ sha ca6aa89 and includes all the missing commits listed above.\nThis will have the effect of orphaning the following commits:\n- https://github.com/activemerchant/active_merchant/commit/b021c2fc27da69f081c08ecf9e171e54db340ab8\n- https://github.com/activemerchant/active_merchant/commit/8b10b2b046b8cc9d7cb20b0568a6b53ea090e884\n@ThereExistsX can you confirm you have both of these commits locally? If so, I will reset master here and you can re-apply your commits after rebasing?\n``` bash\n$ git fetch\nOn your feature branch\n$ git rebase origin/master\nThen, in master\n$ git merge --ff-only feature-branch\n```\nUpdate: will also wait for confirmation from @ryanbalsdon to see if he has diff/more up-to-date local copy\n. @ThereExistsX no worries! It's really hard to lose stuff w/ git :)\n@ryanbalsdon let me know what your most recent local commits are to see if you should do the reset?\n@girasquid \n\nshould we turn on branch protection to block force pushes to master?\n\nMakes a lot of sense to me! Just a good practice all around anyway.\n. @ryanbalsdon :+1: you good force pushing to master w/ head at 033f2fc?\n. Great, thanks @ryanbalsdon! Closing this \n@ThereExistsX just a reminder that you'll still need to get b021c2f and 8b10b2b merged in and pushed.\n. @ThereExistsX no sweat! We've all been there at least once in our git lives :)\n. @sdball given that the URL that's returned sometimes has non-URL safe characters, what are our options here? This seems like an issue that should be resolved at the gateway level (to not send back invalid URLs in the first place)?\n. /cc @hoenth \n. @sdball here's the original issue: https://github.com/activemerchant/active_merchant/pull/1964\n\nHmm, perhaps leaving the current escapes, splitting apart the redirect URL parameters, uneacaping them, then escaping the entire url?\n\nSo... no other options then :)\nI think we need to roll this back, then. If Cashnet can't return valid URLs, and we can't escape their invalid URL because some of the params are already escaped, then we're in a bit of bind and shouldn't be expected to jump through hoops to debug-and-fix on the fly?\n. @anellis this looks great, thanks! We'll take it from here.\n. @aellispierce \ud83d\udc4b \ud83d\ude1d . Looks great, @shasum! Just a few comments sprinkled here and there.\nYou can push new commits to your branch to get them reflected here. @-mention me in a comment and I can merge it in!\n. @curiousepic as an FYI, it's good to @-mention the reviewer when updates to the PR are made - I don't get a notification when you push new code to the PR, nor can I know if that resolves all the issues.\nI'm assuming this is good to go again?\n. @curiousepic FYI you accidentally included some GlobalCollect files in this commit. I'll remove them when I merge, but you may want to pull them out in your local branch in case you need them.\n. @curiousepic I lied, can you do a new push so I don't have to resolve the conflicts myself?\n. What is the purpose of the merchant id from their docs? Is it assigned once per merchant account, or is it a value that can change with each transaction?\n. @shasum ah, ok then. I believe we should update this gateway to include merchant_id as a required credential that's passed to initialize.\nAnd.. if we do that, we should be able to simplify the authorization format as well?\n. @shasum \nIf the gateway is requiring all those (meaningful) fields, we shouldn't create defaults. The caller will just have to provide them when they call AM.\nAlso, @duff has a good point about the order_id. We can set the purchase_number as the order_id, providing a default as you're already doing if no order_id is provided. If the caller passes in an alphanumeric order id, it will raise an error at the gateway (which is fine).\n. > we're stripping out bad characters from passed in order_id's\nUgh, that seems bad, no? Chances of collision are high - and changing data seems much worse than creating new data. Is that really a pattern we want to propagate? \n. @ntalbott \n\nthey have to know the requirements for each gateway they're dealing with\n\nYes.. they do :)\n@shasum \nList of changes look good. Re:\n\nclean up order_id ( little unclear on what guides this. example: visanet peru order_id needs to be 9-digit numeric, latitude19 has no specific restrictions except the field type is listed as a 100-char string. how would we clean it in these 2 situations? )\n\nWe only clean up the order_id if the gateway imposes restrictions on its length and format. So for VisaNet here, we need to make it a numeric and truncate it to 9 digits. For Lat19, that's a flexible enough format that we probably don't need to do anything but pass along the order_id as it was given to us.\nHope that helps!\n. > less than 9-digits numeric - pad with leading zeros, provided gateway accepts it?\nIt has to be exactly 9-digits?!? If so, then yeah, I guess pad it (but only if it has to be 9 digits)\n\ngreater than 9-digits numeric - truncate LSBs (or MSBs), won't this risk duplicates eventually?\n\nYes, it will. But it seems that's the pattern to follow in AM...\n\nany-digits hex - not sure how to clean this up?\n\nAny alpha character just remove it.\n. @shasum what is the format requirement for externalTransactionId?\n. @shasum does this make sense?\n- Set the externalTransactionId to be the passed in order_id. It will remain unaltered and will be available in the response\n- Set the purchase_number to be a randomly generated 9-digit number. Since this is an opaque identifier, it's fine if it's not returned in the response (that's the purpose of the external transaction id)\n?\n. @shasum could you pass in the generated purchaseNumber to the commit method as an argument so it can be added as the response authorization, when needed?\n. @ryanbalsdon this is outside my domain, so consider this code-level feedback more than anything else. Is this distinction between contactless and contactless-magstripe only relevant for Stripe? Just wondering if adding it to CreditCard is the right place unless it truly is a distinction tied to the card itself and not the transaction/gateway?\n. Thanks @ryanbalsdon! I think this implementation is \ud83d\udc4d \n. @ryanbalsdon do you have a link to the official MasterCard announcement (for posterity sake)?\n. Looks good, @methodmissing. To close the loop on this thread, can you link to Stripe's API docs that describe these parameters?\n. @methodmissing I don't see cryptogram or eci listed in the (public) API docs - are they unpublished options?\nAlso, is this a typo?\nruby\ncard[:cyptogram] = creditcard.payment_cryptogram\nAssume you meant c_r_yptogram?\nAlso, do we need to update the apple pay specific remote tests at all? I'm hoping running them would have caught the above typo?\n. Hi @jawspeak - thanks for this! I'm not sure if there's precedent for merging in a gateway that doesn't support a direct PAN API, but it's not something I've personally done before. Do you have anymore relevant context for this being in ActiveMerchant?\n. @ntalbott @jnormore @duff any thoughts on this?\n@jawspeak I can definitely see why a customer would want to use AM w/ Square. I think I'm wrestling with where the line for AM stops. It's not a general purpose gateway library, it's serving a very specific niche and I want to protect it from becoming a catch all for any type of gateway interaction.\nPerhaps I'm being too protective, though, and the really old-timers can weigh in.\n. I understand from @ntalbott that we've drawn the line in the past here - with only supporting a direct PAN interface (which does include follow-on token workflows, just not in isolation). \nOf course, you're free to maintain your own fork or provide a Square patch if it's worth the effort. Sorry we couldn't pull this into the main project for you!\n. Hi @jawspeak!\n\nwould you be comfortable if the Square gateway accepted direct PANs\n\nYes! This is directly inline with the core responsibilities of Active Merchant (even if it requires a corresponding switch on your side to enable PAN submission mode for interested customers).\n. @lyverovski we should get on the same page regarding the responsibilities of ActiveMerchant (perhaps offline), so we can provide consistent guidance to contributors.\n@jawspeak if you're looking for the most expedient route while we get our story straight, feel free to go the direct PAN (and tokenized card) route :)\n. Hi @jawspeak!\nSome of the AM maintainers got together in a cold, dark, Canadien bunker to try and come up with some general-purpose guidance that might help us decide when to accept what functionality, based on the goals of the project. Here's what we came up with:\n\nActiveMerchant is focused on providing a set of transaction processing primitives that make it easy to transact against multiple gateways in a consistent fashion.\n\nAs it relates to this PR, gateway adapters that only provide a token-based transaction flow are necessarily breaking the gateway agnosticism ActiveMerchant provides since the only way that token can be created is through some other ancillary gateway-specific flow. In the interest of ensuring ActiveMerchant remains a focused and purposeful library, we don't think it makes sense to include contributions that don't support the primary transaction primitives of a multiple gateway environment.\nI hope this adds clarity to why the functionality in this PR, while technically sound, doesn't quite match with the project's goals. If the adapter's functionality can be expanded to include a direct PAN interface (thus maintaining AM's goal of gateway agnosticism and portability), we'd be happy to include it.\nThanks so much for your patience while we figured out our position here!. > I decided to just leave this as a Stripe specific change\n\ud83d\udc4d Can always generalize in the future should it prove to be broadly applicable.\n. @adyenpayments in the past we've had issues b/c Adyen hasn't allowed third party access to its APIs. Can you clarify this policy or point us to where Adyen's position is stated so we can determine if including it in ActiveMerchant is appropriate?\nThanks!. I think it makes sense not to support old versions of Ruby, especially considering the sensitive data a library like AM deals with \ud83d\udc4d . There's been some discussion amongst @activemerchant/spreedly that we should remove the certs from the project itself all together, instead relying on the certificate management of each environment as is the default for almost all other projects.\nCurious if @activemerchant/developers are using AM's certs or are already overriding with system certs?. No objection, although some fidelity will be lost since all the unit tests do is something like //Table1/* when searching for the result element.\n. @jnormore I've seen something like this is_a? check in all the adapters so far. Wondering if it shouldn't be the responsibility of the credit card/payment method to know what its type is? Something like:\nruby\npayment_method.tokenized?\nAlso, I feel like we need to decide if we're going to be generic and call this type of support \"network tokenization\" support or be specific and call it \"Apple Pay\" support. Some gateways (Cybersource) seem to implement true generic network tokenization support whereas others, like Braintree here, are specific to Apple Pay as evidence by the apple_pay_card parameter.\nYou've seen more of these than I, how are gateways implementing this feature \u2013 In true generic fashion, or specific to AP?\n. > but this breaks when you have a string or a hash at the payment method (for example stripe token)\nI don't quite follow here, but I'm the new kid on the block so that's to be expected.\n\n\nBraintree is the only one I know of that specifically calls it apple pay\n\nCool. I'm fine leaving it as the generic \"network tokenization\" until a real-world scenario forces us to do otherwise.\n. What is the experience like when somebody passed in a NetworkTokenizationCreditCard for a purchase? Looks like the tokenization parts just get ignored and its processed as though it were a credit card which, I believe, will result in a decline.\nNow that we have a growing body of payment types, should we have a standard exception thrown to denote when a certain payment type is not valid for the given operation?\n. > whether we should handle this or let the gateway handle it\nMmmm, yes, I do suppose the general approach of AM is to not introduce too much between the caller and the gateway. Ok!\n. @jnormore this was necessary so sub-classes (i.e. NetworkTokenizedCreditCard could define their own required fields without changing their parent class's settings. Without this, when NetworkTokenizedCreditCard sets self.require_verification_value = false it would cause CreditCard to not require a CVV as well.\nRegarding multi-threaded environments, would an instance variable based approach be preferred?\nruby\nclass CreditCard\n  class << self\n    attr_accessor :require_verification_value\n  end\nend\nI believe this is thread-safe while accomplishing the intended function.\n. Yeah, it throws an error about live transactions not being allowed for this one call only :(\n. That's actually what test_successful_verify is doing:\nrespond_with(successful_authorize_response, failed_void_response)\n. var1, var2, etc... are for realz?\n. So if they're not 3DS enrolled, we POST back to a URL they give us, using params they give us? Is there value in this flow I don't understand, or is it a silly API?\n. I'm surprised a hash is considered a sensitive value?\n. Should we wrap the whole cardholderAuthentication block in the if statement so it doesn't even appear unless we have a cryptogram? Otherwise there will always be an empty element.\n. What's with the removal of these tests and no new ones?\n. Reading more I believe it's because you need to toggle a setting in the control panel to get either to pass...?\n. I believe determination of the payment method type is done like so now?\nruby\ncard_brand(payment_method) == 'check'\n. @mrezentes this seems like a breaking change - could it have ever worked using transresult?\n. This seems to imply the level 3 options will be passed in not as a hash, but as an XML string? If so, I believe that's non-standard and the input options should be hash-based:\nruby\ntest_level_3 = { tax_amount: 8.84, tax_rate: 7.25 }\nresponse = @gateway.purchase(@amount, @credit_card, @options.merge(level_3: test_level_3))\n. Should this be filled in?\n. Is AccountID really sensitive? If not, don't scrub.\n. I believe we need RoutingNumber and AccountNumber here as well?\n. Thanks for this :) No worries, fixing on the merge.\n. I see the string virtual_check used in a lot of places - perhaps we could set it as a const?\n. (same for bankcard?)\n. @anellis can you explain this hard-coded self.supported_countries[0] part?\n. ah, I see it's just a carryover value...\n. I believe the AM style is: if credit_card?(payment_method)\n. I'd follow the pattern of passing the tx code into commit instead of adding it a separate step here. Mostly for consistency with most other adapters.\nruby\ncommit(:purchase, request)\n. This is tricky one but, instead of having the user pass in what type of void it is, what we can do is return an authorization from the original tx that has the tx type embedded in it. Something that looks like purchase:1298shad698a.\nThen, when an authorization is passed to this void method, we know what type the original tx was and can self-contain the logic that determines what void type to invoke here.\nIf you search AM for split_authorization you'll see a lot of other instances where this is required.\n. extra line\n. updateis not part of the AM API, so we can go ahead and omit this method.\n. We don't need to branch right here. Just have one \"Succeeded\" response message, and the caller can look at the rspCode field themselves if they to differentiate.\n. Just return nil for this case.\n. Same here.\n. Given how nasty this XML is, I buy it :+1: \n. Correct! Unfortunately it's a pretty common pattern.\n. Remove it is! Looks like the Wiki could be updated.\n. You have good instincts - the gateway is trying to do such horrible things to the user!\n. Is the wsdl param required? Usually that's what you add to get back a description of the web service instead of the service endpoint itself?\n. Are these confirmed, specifically Diners Club?\n. These are usually at the top of the gateway adapter, despite probably being better declared as private, as you have here.\n. We usually name this method add_customer instead of add_contact.\n. Totally agree on the noise. I kinda liked that I didn't have to wade through it to get to the meat of the adapter, but did note it stood out compared to the other adapters.\n. ohrly?\n. I wonder if this state should be moved outside the MultiResponse?\nAlso, do we return a Response-based error in other adapters? Seems like a Response should be reserved for when an actual call is made. What other immediate error return states can we use?\n. ugh - all of these are required to properly correlate future reference txs? :crying_cat_face: \n. I guess in that the existing behavior is to have nothing specified, we can not have a default. Only if the field were mandatory would INTERNET probably be the correct default.\n. Let's go ahead and underscore these options to: :api_key_id and :secret_api_key\n. I wonder if we should not :use_first_response since the purchase is not actually successful if the underlying auth isn't successfully captured.\n. This should probably be options[:merchant]?\n. This should probably be options[:invoice] and not inside the if block? (:invoice being one of the standardized option keys)\n. We should get the first/last names from the payment method instead of having the merchant pass in data in the options we already have.\n. We should get the phone number from the existing address options if they exist\n. ditto on name from pm here too?\n. should indent under begin?\n. I think a numerical comparison here might be more clear?\nruby\nraise e if e.response.code.to_i >= 500\n. Should we remove the test connection, especially since the hard-coded POST method in the digest creation would cause it to fail?\n. Instead of hard-coding the timezone, we should probably do:\nTime.now.utc.strftime(\"%a, %d %b %Y %H:%M:%S %Z\")\nOtherwise, the timestamp will actually be off by 4-5 hours (the diff between GMT and EDT - the local timezone)\n. I wonder if response[:errorId] isn't the better error code to use (it's what's used to determine if it was an unsuccessful response)?\n. We should remove debug code from the adapter submission.\n. (but can leave this)\n. Let's do this - since order id is truncated to a pretty short length (10), let's leave it empty and put the order id only in the merchantReference field? That way there's no loss of data.\nThis assumes the merchantOrderId isn't required?\n. The 3xx response codes just mean \"redirect\", so would probably keep it at 400 and above?\n. So MultiResponse is a way to represent more than one request as a single response. By default the status of the last response is proxied as the state of the overall tx. But, if you specify :user_first_response instead, it will use the first response as its proxy.\nSo you want to choose the call that best represents the status of the tx. For a purchase that's really an auth and a capture underneath the covers, you can't say the purchase has succeeded unless the capture has succeeded.\nHowever, for verify which is an auth and void, even if the void doesn't succeed the auth response is how we know if the card is valid or not. If the auth succeeds and the void fails, the funds just won't ever be collected, so no harm done. So in that case :use_first_response is most accurate.\n. We should use credential names that directly reflect what the gateway calls them, i.e. :access_key_id and :secret_access_key for VisaNet.\n. You can go ahead and remove this dead code.\n. Ditto for removing here.\n. Instead of initializing an empty :antifraud element here, perhaps we should check/initialize where it's needed instead, which I believe is just in add_device_fingerprint_data and add_merchant_define_data?\nAnd while I'm looking at it, it seems those two methods aren't ever called independent of each other. Can we combine them into one add_antifraud_data method?\n. For these three purchaseNumber based operations, why don't we just pass in the right string to use in the URL vs. having to map from a \"capture\" to a \"deposit\"? So the calls to commit will look like:\nruby\ncommit(\"deposit\", post, options)\ncommit(\"void\", post, options)\ncommit(\"cancelDeposit\", post, options)\nI guess you can leave \"authorize\" since it has no direct mapping.\n. Usually we treat options as a read-only hash. So instead of assigning merchant_id to a new option, just add it to the params hash.\n. Let's get rid of debug output too :)\n. Let's go ahead and do this for the purchaseNumber:\npost[:purchaseNumber] = options[:purchase_number] || rand(999999999)\nSince it's such a specific format that should probably get truncated, we shouldn't try to conflate it with the \"real\" order id. Let's give it its own option and generate a default one if not present?\n. Can we move this concatenation logic to its own method, just to keep it clearly delineated?\n. Is the :customer field name not supported at all (meaning this never worked)?\nIf so, we can be a little more liberal in introducing this breaking change.\n. I'm curious how doing a verify will automatically store the card?\nWhat does the active merchant response look like from verify?\n. Confirmed that customer along is nowhere to be found in their docs.\n. Ok, I understand now. Thank you!\n. I'd move this to its own method just to make this a bit tidier?\n. Why is this necessary?\n. So this was a bug in the original version of the adapter?\n. I would have expected a new test here to confirm this functionality? Or a modification to an existing test if it wasn't properly testing scrubbing before?\n. @duff FYI you might have committed something w/o running the tests? Would be surprised...\n. @duff they're in our 1P since I believe they're client creds.\n. How is the configuration_id described by the gateway? Is it something set once per merchant account, or something that can vary with each transaction?\n. Explain what having account_token present means/does? Looks like it bypasses the normal purchase path?\n. This method is being used to populate the error_code attribute of the response. We should keep it simple and just return the pgwResponseCode attribute.\n. Should keep it simple and just return one error message (not a concatenation)\n. Dear god, are all these really necessary in follow-up calls?\n. Is the error handling here redundant with what's in commit?\n. This will always return eCommerce, is that intended?\n. We only need to scrub sensitive values (passwords, secrets, PANs etc...) from the transcript. Are account number and configuration id sensitive/not public?\n. If we have a test only creds, we can commit them\n. Ok, it's a tough call, but let's leave it as an initialize option as it is here :+1: \n. We usually handle the stored card path using this method signature (instead of relying on an option):\nruby\ndef purchase(amount, payment_method_or_token, options={})\n  if payment_method_or_token.respond_to?(:number)\n    # ...\n  else\n    auth_or_sale # ....\n  end\nend\nBasically, the stored payment method token is passed in as the the second arg as a first-class arg vs. an option. Many gateway adapters do this if you need a reference.\n. The caller will always have access to all the response params the gateway returns if they want to get that level of info. But for the message field, we should stick to the most descriptive (single) field, assuming no conflicts/overlap.\n. If they're both always present, I'd choose the one that provides the greatest level of granularity/detail\n. > Thank god, it's a big OR and not a concatenation, again :)\nAh, didn't notice that. That's slightly less repulsive, then :)\n. :+1: \n. If the secret is test-only (and it's really the only thing that's sensitive), then we can commit.\n. > should temp (sessionToken) and long-term (accountToken) tokens be scrubbed? they represent a valid card.\nI don't believe so, unless they can be used to transact in isolation from other creds (like secret etc...)\n. I believe getSession is an endpoint we were invoking only for testing? If so, we should remove references to it from the adapter to keep it clean and debug-free.\n. Does this auth_or_sale call to the gateway really need both the token AND the payment method (which was already used to get the token)?\n. ha, totally missed that. Sorry!\n. ok :+1: \n. Two things:\n- We should probably not have divergent behavior solely based on an option value's format\n- It wasn't clear, but in my mind the right solution is to do this with the external transaction id and purchase number. Is there anything that prevents us from doing so with this new approach?\n. Is this a mandatory field?\n. Will this test now fail if no eci or source is provided? (thinking about backwards compatibility w/ existing clients and, if we want to be backwards compatible, we should probably keep a test w/o these values)?\n. Am I missing an edge case that negates the clarity of logic like this (vs. existing array-based approach)?\nruby\n\"#{first_name} #{last_name}\".strip. I believe if you use strict_encode64, you won't need to manually strip off the newline info.. Not gonna act like I'd build a library that uses class constants to define functionality, but at least it's convenient \ud83d\udc4d . I would love to see the tests updated too, to catch whatever it is that broke last time?. ",
    "karlhungus": ":tophat: \n. @odorcicd Not sure what the best thing to do here is -- Use the wiredump_device? I can't reference the Rails logger, and I'm not sure how to configure the logger for splunk, or does splunk just pick up everything in /logs?\n. Here's a snip of the logs i'm interested in sending to paypal (X-PP-AUTHORIZATION). \n``\n/home/vagrant/src/active_merchant/lib/active_merchant/billing/gateway.rb:198:inlocalized_amount': Support for Money objects is deprecated and will be removed from a future release of ActiveMerchant. Please use an Integer value in cents\n[PaypalExpress#SetExpressCheckout]: headers:{\"X-PP-AUTHORIZATION\"=>\"signature=uTM8QNO2h7gB8KhPuK16nMJGsEk=,timestamp=1408933916,token=dTlBENEdDQFT-p3LxkH29I53g92z1qeGeYYuXHNjFOF0-GY9NK9teg\", \"X-PAYPAL-MESSAGE-PROTOCOL\"=>\"SOAP11\"}, request:\n\n72\n\nhttps://checkout.myshopify.io/carts/1/92adf56c7de6a82bcde1bd417c5ab83b/create_order?utm_nooverride=1\nhttp://shop1.myshopify.io/cart?utm_nooverride=1\n0\n0\n```\n. @odorcicd Being a bit paranoid -- I'm going to wait for you before i push this stuff.\n. @odorcicd allright this is now based off of 127be6da129c198319cbbc3dca720cbfc07f6980\n. https://github.com/Shopify/shopify/pull/26873\n. I'm sorry, I'll close it\n. I don't feel super strongly about my comment, nicely done! :fries:\n. @fw42 \nWe've identified some holes on the remote side of things and have been working on adding them. We've had a semi largish discussion about our own usage of VCR that may be hiding these, and about the flakiness of them if we were to stop. \nAt this point we've identified a gap, and are working to fix it, well so far @girasquid is working to fix it. \n. \n. Love the view on history, love the rationality. Really dislike that i can't (easily) tie a merge to a PR, in particular a set of test results... I.e.\nFor this one: https://github.com/Shopify/active_merchant/commit/1e13fcc08e82c01559ba8fb2eea0c6445b3be1ee I can tie the merge back to the pull request.\nFor this one:\nhttps://github.com/Shopify/active_merchant/commit/4beaaa7514af1698eb96fe410456acf6565211db not as much.\n. > @karlhungus I could be missing something, but don't both of those commits contain a link to their respective pull requests?\nYeah they do... i'll shaddup now\n. > You'd have to generate a URL to hit PayPal Express Sandbox, load the URL, fill out the PayPal payment form with fake credit card, add a note, hit submit, follow the redirect url with the token, fetch the data for the given token.\nThis seems pretty brittle -- more likely to indicate failure where there is none. I wonder if it's possible to have a token that doesn't expire for these kinds of cases; that way we aren't testing that humans can enter the form properly, just that our integrations don't break.\nThe other side is that paypal-express is a very large gateway\n. not sure about the ivar vs locally scoped var for transcript -- i could just be mixed up. other than that :fries:\n. \n. What do you think of the alternative? I kind of would prefer less magic numbers (it's not completely apparent where 97 cents comes from.\nrefund_amount = 0.97\npaypal_flat_fee = 0.30\n...\nassert_equal refund_amount.to_s, credit.params['net_refund_amount']\n...\nassert_equal (refund_amount - paypal_flat_fee).to_s, credit.params['fee_refund_amount']\n. I've found this to be confusing before, is transcript a local var, or is it @transcript? i think it's a locally scoped var, should it be @transcript = ''?\n. @transcript as opposed to return transcript?\n. same f.write(@transcript) ?\n. > Wtf is this?\naccidentally mentioned you apparently\n. :cool:\n. ",
    "kerneldemon": "By the way, since there's going to be some suggestions of fixing/improving the code, I might as well ask:\nIs it somehow possible to provide a response text to the notification callback?\nI guess it is possible to do a full-blown request to the payment gateway in aknowledge to let it know everything is fine, but if it is possible to avoid it and just render a response message...\n. ",
    "alexandremcosta": "sorry for all the version changes...I didn't know they were going to be included automatically on the pull request.\nI just created a branch to play around with this. Now it should be ok, and I wont mess with this anymore.\nFeel free to accept this brazilian gateway, I think everything is alright.\n. Until activemerchant/active_merchant accept this pull request, the only option is to include my repository in your project. According to this doc (http://bundler.io/git.html), this is the way to go:\ngem 'active_merchant', github: 'alexandremcosta/active_merchant', branch: 'iugu'\n. Looks like it's the fifth next in the line. I have no permission to do the merge by myself, so unfortunatelly I cannot do anything besides waiting, @gcmartins93. Additionally, the project that required me to create this PR doesn't exist anymore :(\nGood luck!. As I can see, there is a queue of approval, from the last to the first. Its taking more than a year, from the submission to the approval. Since there is nothing we can do, I recommend you to use my branch, or to drop activemerchant and create your own integration using Iugu API.. ",
    "pablodenadai": "Hi Alexandre, could you please help me setting up this gateway on my shop? I can't find any documentation on how to do it.\nCheers,\nPablo\n. ",
    "granth": "The old Beanstream URL still worked, but I've updated it to the version used in the Legato 1.1 JavaScript (as @deepak did above).\nI also tried rebasing against the current master and had no problems.\n. Hmm. I get that error in two cases:\n1. I use an invalid card number: 4030000010001235\n2. I use @amex instead of @visa or @mastercard\nInterestingly, both @declined_visa and @declined_mastercard work.\nI've poked through the Beanstream configuration but haven't found anything useful.\nDoes test_update_vault_with_single_use_token succeed?\nI ran the tests with bundle exec ruby -Itest test/remote/gateways/remote_beanstream_test.rb\nThe Amex and cheque tests fail with our test account.\n. @ntalbott :thumbsup: \nThanks! Looks good.\n. 1.43.2 got yanked, and 1.43.3 doesn't include this change. Any chance of adding it in 1.43.4?\n. Why did 1.43.2 get yanked? I just realized now when I deployed to a new server.\n. @bslobodin Thanks. Missed that somehow in my search.\n. ",
    "arthurtalkgoal": "Hi, Can I ask after deleted bundle_alipay branch, how can I use alipay now?\n. Oh, what does fw42 means? does fw42 commits means active merchant is working with alipay now instead of  amassaad deleted branch?\n. ",
    "amassaad": "Hi, thanks for your inquiry, The alipay branch was never functional. To\nanswer your question, there is not a way to use alipay here.\nOn Monday, September 22, 2014, Arthur CHAN notifications@github.com wrote:\n\nHi, Can I ask after deleted bundle_alipay branch, how can I use alipay now?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/998#issuecomment-56472278\n.\n. @emilienoel can you help me with a cardserver deploy?\n. I've asked for access to to see if I can't own the whole process and get this pushed out\n. hmm, not sure how that happened.\n. @edward Good question => http://www.learnchineseez.com/lessons/cantonese/\n\nIn all seriousness I did not find any API docs and this was directly from the two open source active merchant patches (I think one was just for Ruby, can't recall). My goal was to plug it in as an off site gateway and see what errors came up . . . I didn't have much faith that it would work but was more interested in seeing what errors came up.\nUltimatley it looked as if the URL we were generating was not good, it didn't provide the correct account or something - > I translated the error page and it was always generic .\n. :clap: much more readable PR\n. @ntalbott Correct from my perspective. We can re-open if there is more need and bandwidth\n. ",
    "fw42": "What I'm up to is that using MD5(data+key) is a terrible idea for a message authentication code and a total beginner mistake in cryptography... The fact that a payment gateway makes such a mistake is just ... scary.\n. I don't get it...\n\"not supported by default in SSL connections in Ruby 2.\"\nhow does this PR solve that problem?\n. so it is supported, it's just not the default setting anymore like it used to be?\n. :+1: in that case\n. :+1: \n. seems kinda hacky\n. code looks ok to me though. :ship: \n. No test that this actually causes a sleep?\n. Kernel.expects(:sleep).with(x)\n. Hm you might need to stub it on the object that is calling the sleep and not on kernel\n. So I guess something like ActiveMerchant::Gateway.expects(:sleep)\n. I kinda liked 3x better than x3, but whatever\n. :+1: \n. ok fair enough\n. I don't get it. How did this test pass before?\n. > these don't get run often?\nWhy not? Why don't we run them on every CI run?\n. :+1: \n. \n. ",
    "faizalzakaria": "@ntalbott Wepay uses a separate API for Credit Card. There are 2 ways to create CreditCard, through credit_card API, or through filling up the CC info on a checkout_uri (from checkout/create response).\n. @ntalbott I split the card API, so purchase and authorize can use either token or cc object.\n. @ntalbott I sent you an email for the credentials.\n. @ntalbott @duff I need gateway specific fields in spreedly core gateway. Could you have a look on this?\nThanks.\n. ",
    "molpe": "Hi Nathaniel,\nThanks for reviewing this!\nUnfortunately they don't provide accounts freely (don't ask me why), but I've send you a set of credentials to the email in your profile. Hope it's enough!\nAbout authorize/capture and void, not AFAIK. They have some not-published features, so I'll try to find out, but I wouldn't count on it.\n. Ough :)\nDid you just copy and paste the credentials I've sent you?. Apparently Airmail (?) replaced a \" by a \u201c in the last value (key). \nFixing that should do the trick!\n. Hi Nathaniel,\nThanks you very much for your time!\n1) Only order_id is required, description is not.\n2) Yes, you need both and both should match original purchase's data (order's id and the reference returned by CECA).\nThanks!\n. Thanks!. \nAbout your tweak, great point! \n. ",
    "bluezeal": "update fixtures.yml for ccavenue\n. update fixtures.yml for ccavenue\n. update fixtures.yml for ccavenue\n. ",
    "darkaz": "No, because right now we support only MXN (Mexican Pesos)\n. Thank you for your comments @davidsantoso. I create a new pull request https://github.com/activemerchant/active_merchant/pull/2213 \nPlease let me know if you need something else.\n. @duff I did some changes based on your comments.\n- Added a shipping address test.\n- Name and LastName for customer are taking from card object\n- Customer simplified. Added customer_external_id and customer_id params\nmerchant_account_id it will be used by common our customer to change dynamically between his different accounts using that same gateway instance.\nRegards\n. ",
    "speric": "@ntalbott There is already an update method in the Stripe gateway on L128, but it actually adds a new card to the customer instead of updating an existing card \"in place\".\nWhat's the best way to proceed? I could modify the update method to \"do the right thing\" but I don't want to break existing functionality. Just looking for guidance here (my first time contributing to AM!).\n. @ntalbott sounds good to me, thanks for your input.\n. @ntalbott See the latest commit. Is this what you had in mind? Now, update \"does the right thing\".\n. @ntalbott if/when you want to merge this in, I will squash my commits and re-word the commit message to conform to convention.\n. @ntalbott Thanks!\n. @ntalbott Just checking to see if you need anything more from me. Do you have an idea when this would get merged/released?\nThanks!\n. ",
    "drush": "+1\n. ",
    "frdmn": "The new issue can be found here: Shopify/offsite_payments#47\n. ",
    "steveklabnik": "That sounds excellent. I'll give that a shot.\n. @ntalbott If that's the case, what about using VCR? Would using it as a development dependency be acceptable? It basically automates that whole process.\n. 1. Makes sense, I can do that.\n2. This is because the Balanced API format has moved to JSON-API, so the structure of the JSON is different.\n3. I moved it to 1.1.0 because it's updating to 1.1 of Balanced's API, but I can totally see why moving it to 2.0 makes sense. Sure thing.\n4. I'd rather keep this particular PR focused on just updating to version 1.1 of our API, and then re-do those changes on top of this. Keeps it a little simpler. If you'd prefer it all in one, that's fine, I just tend to do work in smaller chunks.\n. @ntalbott okay. It's your project, VCR versus manually doing it is your call. I just hate wasting most of a day for something that can easily be automated by a gem.\n. This is always the problem with versioning different components, yeah? I think I'll add a comment, rather than a constant. Especially if none of the others have a constant.\n. Okay, I made the two obvious changes. What's the call on the aesthetics of flattening vs not? We may or may not end up returning multiples in the future, so the way it is now will basically always be okay. If we change it to the better aesthetics way, in theory it could break in the future.\nWhat's the call?\nOnce the rest of the diff is good, I'll do the unit test stuff.\n. @ntalbott okay, I just pushed one completed unit test. I think that this is very close to what was done before, does that look okay?\n. Rebased so that Travis won't cry. :)\n. Okay! That should be unit tests for all of them. Let me know what else we need to :shipit: \n. Whoops, somehow I broke one of the tests and it slipped through. :( Fixed.\nLet me know if you want any of this squashed and re-arranged.\n. I am not an AM expert, but I do not believe that it changes the interface. Credentials are set the same way.\nI checked with @mahmoudimus, and it should not require any special steps to upgrade if you were previously using the older version.\n. Absolutely. Even with best of intentions, bugs happen...\n. Yes! I feel strongly about this, but I wanted to do the minimum work first, and then bring things up from there. And I'm the BDFL of the API, so I have full say in the matter. ;) We care about that particular index, and doing this initial work is step number one. \nhttps://github.com/balanced/balanced-api/issues/492 and https://github.com/balanced/balanced-api/pull/497 are very much related. Once those land, expect to see more from me on this.\n. Ahhh yes. I did not set .authorization, I bet. If that's needed then I need to tweak it, should be very easy.\u2014\nSent from Mailbox for iPhone\nOn Fri, Feb 14, 2014 at 9:40 AM, Duff OMelia notifications@github.com\nwrote:\n\nHi guys,\nWe've had some difficulty running a capture (so we reverted to an earlier commit of active merchant in our code for now).  In theory, we're expecting the following type of remote test to work for each gateway:\nruby\nassert auth = @gateway.authorize(amount, @credit_card, @options)\nassert_success auth\nassert auth.authorization\nassert capture = @gateway.capture(amount, auth.authorization)\nassert_success capture\nSo the result of the authorize call has an authorization that can be used for the capture.  It doesn't look like the remote test for Balanced here operates this way and I suspect that's why our captures were failing.  I also suspect that refunds and voids will fail for the same reason since their remote tests look similar in this PR.\nMight you be up for taking a peek at this @steveklabnik?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/1022#issuecomment-35106282\n. Ahhh yes, I guess this is hold-specific. I should go figure out that this is true for all of them.\n. We don't want consumers of our API to build URLs in any case.\n. I just added a patch that supports refunds as well.\n. I'm also thinking as I go through this that it'd be really nice if there was a template gateway integration suite that I could just pull over and know that I'd implemented all cases.\n. I know that feeling. :)\n. Okay! I implemented it via the method suggested by @duff , and also added voids. Is there anything else this is missing?\n. I believe that this is backwards compatible, because if it doesn't have a | character, it just gets requested. Previously, it was a single URL, which won't have |s.\n\nDoes that make sense?\n. Seems legit. Lemme think about it.\u2014\nSent from Mailbox for iPhone\nOn Mon, Feb 17, 2014 at 8:36 AM, Nathaniel Talbott\nnotifications@github.com wrote:\n\nIn the interim, I'm going to revert the commit adding API 2.0 support; the functionality is currently broken, and we need to start rolling other changes out without breaking customers using Balanced.\nAs soon as we have a solid fix for this authorization issue, I'll roll the whole thing back in.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/1035#issuecomment-35300316\n. Yes. We decided to launch Coinbase integration, and I was the project manager for it, so come Monday I will make sure to take care of it.\n\nWe also launched our first client on 1.1 at the same time, so that experience helps too.\n\u2014\nSent from Mailbox for iPhone\nOn Fri, Feb 28, 2014 at 6:06 PM, franklangston notifications@github.com\nwrote:\n\n@steveklabnik do you think you'll get to this soon?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/1035#issuecomment-36403979\n. So, apparently we have fixed this on the back end, so it should work transparently. Can you try it again, please?\n. > to set a customer name when using a tokenized card,\n\nI'm not 100% sure what you mean. Are you talking about soft descriptor stuff? Where's the output log at?\n. I think that this patch can be ported to my version just fine, if you re-name it from account to customer, like in mine.\nWe used to require Account/Customer creation before charging, and now we don't.\n. Ahhh, okay. Yes, we don't take it directly. It should be associated with whatever customer the card is associated with, if any. Not sure what to do here.\n\nIt also means the create_or_find_customer call in purchase is completely useless, but that's another matter...\n\nYes, there is actually a lot of cruft here that could be fixed. See https://github.com/balanced/balanced-api/pull/497 , which would cut down on HTTP stuff even further.\n. Cool! Let's just drop that, then. We don't require it to happen. I was mostly worried about compatibility issues.\n. :confetti_ball: \n. First comment: oh, you replaced the marketplace id with X in the output. It's fine to put it here, so the actual url being posted to was: /v1/marketplaces/MP1mLpize9DVj4kNZvxFpeA2/holds/HL3D0ghW7e2ZGhWJfaLy7oDh.\nI'm still digging into what the actual issue is.\n. @jduff @ntalbott there's no version header being sent along like there should be...\n. steve@steveklabnik.com is fine as an email.\nI wrote a small patch:\n```\ndiff --git a/lib/active_merchant/billing/gateways/balanced.rb b/lib/active_merchant/billing/gateways/balanced.rb\nindex da5c492..aa4e703 100644\n--- a/lib/active_merchant/billing/gateways/balanced.rb\n+++ b/lib/active_merchant/billing/gateways/balanced.rb\n@@ -494,6 +494,7 @@ module ActiveMerchant #:nodoc:\n         {\n             \"Authorization\" => \"Basic \" + Base64.encode64(@options[:login].to_s + \":\").strip,\n             \"User-Agent\" => \"Balanced/v1.1 ActiveMerchantBindings/#{ActiveMerchant::VERSION}\",\n+            \"Accept\" => \"application/vnd.api+json;revision=1.1\",\n             \"X-Balanced-User-Agent\" => @@ua,\n         }\n       end\ndiff --git a/test/remote/gateways/remote_balanced_test.rb b/test/remote/gateways/remote_balanced_test.rb\nindex a896df3..4db6b39 100644\n--- a/test/remote/gateways/remote_balanced_test.rb\n+++ b/test/remote/gateways/remote_balanced_test.rb\n@@ -26,7 +26,7 @@ class RemoteBalancedTest < Test::Unit::TestCase\n   def test_invalid_card\n     assert response = @gateway.purchase(@amount, @invalid_card, @options)\n     assert_failure response\n-    assert_match /Customer call bank/, response.message\n+    assert_match /call bank/, response.message\n   end\ndef test_invalid_email\n```\nI tried to write it on top of the current master, but I can't find these commits in it any longer. Did they get reverted? I would have just sent this change as a pull request...\n. I think that we need to pass along that header before we can make a meaningful assessment here: I frankly don't know how it was working without it in the first place.\n. Yes, will do that now.\n. In my comment I had an extraneous patch about the error message, which doesn't seem to be important now. I was originally suspicious of it anyway.\n. I am actually not sure how that happened. While you gave me the log of that one transaction, which test was it that actually failed? I can investigate further.\n. Actually, I guess I can create a unit test that just does this. Checking now.\n. Figured it out! I'll have a new patch incoming.\n. I've pushed another commit that handles this case. Basically, because the wrong version header was being sent, you were getting a 1.0 response, which isn't an error according to the heuristic we were using. Now we handle 1.0 and 1.1 errors, both. While this theoretically shouldn't ever happen, bugs like the ones we had can cause malformed requests, so better to handle both, eh?\nSince this is a private method, I wasn't exactly sure what to test.\n. Awesome. Thanks. Let me know how it goes.\n. Awesome.\n. You can't void a capture, you can only void a hold. Once you've captured a hold, it's a debit, and refunds are how you un-do debits.\nDoes that make sense?\n. When I mock out a request for this test, it says that ssl_request was never called. I'm not sure how that's happening... when I run it with debug logging on, it does hit the server. Any ideas?\n. Maybe the right answer is the URL of the transaction itself.\n@mahmoudimus what are your thoughts here?\n. Right.\n. Cool, thank you! It is.\n. ",
    "michaelherold": "Yay, an update to the Customer-based API! A couple comments for you, @steveklabnik:\n1. It looks like you have to drill down into the response to get an error message instead of response.message, like it used to be (see error diff). Since we use ActiveMerchant to abstract out the differences between payment processors, this would be a breaking change for our error checking. Can you set the error message to response.message accordingly to help with that?\n2. I notice the tests are accessing the response parameters via params[data_type][0][field_name], whereas it used to be by params[field_name] (for an example, check the amount diff). Is there a use case where you'll actually get multiple results back for fields like debits, card_holds, and refunds? If there is, then it could make sense to keep things the way they are. Otherwise, it seems like we could make response.params significantly lighter by flattening it down to the old access methods.\nIf it's determined that these shifts to the response format should stay, I'd suggest versioning the BalancedGateway as 2.0.0 instead of 1.1.0 to indicate that there's been a shift.\nAlso, I put in several pull requests for Balanced features (#989, #992, #995) that haven't made it into master yet; #989 in particular is something we need, so you could possibly wrap some of the functionality from those PRs into this one.\n.  In response to 2: I figured that was the reason. It makes sense to keep the whole raw response more than massaging it; my concern was mainly for aesthetics.\nIn response to 3: Oh, I understand now. I'm not sure which would be better -- syncing the version with the Balanced API, or with its own public API. I suppose we could add a API_VERSION = '1.1.0' for clarity.\nIn response to 4: Totally makes sense - I can rebase once your stuff gets pulled in. I'll keep an eye on this.\n. @steveklabnik I think he's talking about my change from #995.\n. ",
    "emilienoel": "@amassaad I cannot do the deploy myself, but I can request it in Lighthouse if you don't have access (https://vault-unicorn.shopify.com/Card-Server-Dev). Do you have a PR ready?\n. @amassaad Cool. You'll need to bump up the active merchant version and publish it first. Then you can change the cardserver gem to pickup the right active merchant version.\n. Unless we can specify a commit in the cardserver gem file... @samuelkadolph Can we do that?\n. Lots of stuff in there, but lgtm.\n. @bslobodin  :smiley: Been there!\n. @bslobodin I think cleaning it would be better... and wouldn't take long. You know about commit cherry-pick? You can start a new branch based off master, cherry-pick your last 3 commits and PR that branch instead.\n. :bee: :+1: \n. :cake: \n. Small comment, :ship: !\n. LGTM!!!\n. Do you have to keep the keys as strings? Could you use symbolize_keys ?\n. :shipit: ... since it works and I can't think of anything better... but I'll keep looking/thinking... til then, :+1: \n. \ud83d\udc4d \n. \ud83d\udc4d \n. I don't think options[:eci] && is necessary (isn't options[:eci] == 'recurring' enough?)\n. Yeah, definitely :+1: \n. Can you add a test for when the response_reason_code is not that?. Are you going to change this param for braintree as well?. Does the test assert that void is never called?. ",
    "edward": "@amassaad where did you find the docs/example code to put this together? I was looking for docs on AliPay but was having a hard time finding conclusive/official-sounding things that clearly outlined what was going on.\n. @bslobodin Yeah, @odorcicd and I were looking at that but it\u2019s still pretty sketchy\n. Test failed due to a missing SSH key in Circle CI. Related issue logged here: https://github.com/Shopify/ops/issues/569\n. @bslobodin Ah, yeah, I see that now.\nI\u2019m going to have the generated tests be skipped for now.\n. @bslobodin @odorcicd Could you please take a look at what\u2019s been done so far?\n. @bslobodin @odorcicd I think this guy is pretty much done. Can you please take a look?\n. @bslobodin @odorcicd \nI think we\u2019re good here, but I just wanted to ping you before I squash, bump the version number, and release a new version of ActiveMerchant.\nThe remaining unresolved issues are:\n- guessing the locale from the billing address country may cause an exception, but only under truly exceptional circumstances \u2013 Klarna shouldn\u2019t even appear as an option if the buyer hasn\u2019t specified one of the countries that the locale-guessing method is aware of\n- Klarna has confirmed to be throwing away information other than the shipping address email and shipping address postal code \u2013 beyond pushing Klarna not to do this, there\u2019s not much we can do on the AM side to correct this UX oddity\nAnything else that I\u2019ve missed before I squash and bump?\n. @odorcicd the Klarna gateway page will currently blow up if they are somehow sent a customer with a billing address country that is not in their supported list. Here\u2019s a picture of the error:\n\n. Squash-merged into master\n. @ntalbott Ok, deleted\n. @patrickdet \u201cIt\u2019s complicated\u201d\nShopify and Klarna are still talking about how we\u2019re going to integrate. I forget what happened to the PR.\n. Looks good overall.\n. Sounds good to me. How did you test this behaviour?\n. As a peer-reviewer/someone interested in Ruby-isms, that\u2019d be handy to see what\u2019s going on. We can remove it afterwards if you don\u2019t feel that it adds value.\n. Aw, I missed the boat.\nI would have asked how you tested this change, but I guess it\u2019s too late.\n. Two small comments; otherwise :squirrel: \n. Merge-squashed into master\n. Hgnnnn\u2026 I am a bad person and thought I saw a \n\n. Too true\n. Looks right. What about commits like https://github.com/Shopify/active_merchant/commit/a05a27c155b38242882cad5b10f86ec6aaf235a4 and https://github.com/Shopify/active_merchant/commit/787661e7b36ed8a3c4bb2e0d1344c871e61144fe \u2013 are those worth mentioning?\n. I\u2019m going to use the term \u201cdiscount line\u201d instead for consistency and then I\u2019ll ship this when CI is :ok: \n. I take it back. It was a silly rename. Waiting for CI\n. @bslobodin CI is actually green except for one Rails version that timed out: https://travis-ci.org/Shopify/active_merchant/builds/24549000\nI feel like this is pretty safe to merge.\n. You got it\n. @bslobodin I\u2019m seeing greens on Travis so far.\n. Looks good to me.\nWas this just a matter of reading more docs to learn about MerchantReference? (Asking so I can go faster on my next integration.)\n. Do the docs mention under which circumstances you should be using TxnId?\n. Got it.\nIs there a reason why we don\u2019t create a new transaction? Will the old one\njust be in an incomplete state and just act as a log of sorts of the\nhistory of what the buyer is trying to do?\n\u2014\nEdward https://www.google.ca/search?q=edward+ocampo-gooding at Shopify\nOn Wed, May 7, 2014 at 2:04 PM, Boris Slobodin notifications@github.comwrote:\n\nAs soon as we found out that TxnId reuse was causing amount fixation, I\nneeded to move the order number into a field that wouldn't do that,\nMerchantReference just seemed most natural.\nTxnId:\nContains a unique, merchant application generated value that uniquely\nidentifies the transaction. Used by Payment Express\u00ae to check for a\nduplicate transaction generated from Merchant web site. If a duplicate is\ndetected, the transaction is not retried, but an \"approved\" message is\ndisplayed and the merchant site is informed of the result. Ensure that the\nvalue is always unique per transaction request.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1175#issuecomment-42461546\n.\n. :dragon_face: after CI is :green_heart: \n. I enjoy this ducktyping\n\n:dragon_face: \n. Other than nitpicks, :dragon_face: \n. I\u2019ll take a look today. Is this blocking anything?\n. Ok, I\u2019ll prioritize\n\u2014\nEdward https://www.google.ca/search?q=edward+ocampo-gooding at Shopify\nOn Mon, May 12, 2014 at 10:57 AM, Boris Slobodin\nnotifications@github.comwrote:\n\nI'd like to get this out as soon as possible, as release process on our\nend takes a day or two.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1193#issuecomment-42842286\n.\n. Worth it to include \u201cPayex: add FI\u201d?\n\nhttps://github.com/Shopify/active_merchant/commit/7d12cdc933e4bfe7c61d5f82c206cce52c7b7085\n. Other than my nitpicks, :dragon_face: \n. :dragon_face: \n. Other than tiny nitpicks, :dragon_face: \n. @ntalbott we\u2019re taking a look now! Hoping to pick this up into Shopify tomorrow.\n. @girasquid can you take a look too please?\n. :dragon_face: \nThanks for merging this @ntalbott \u2013 we\u2019re going to test this on our staging server tomorrow morning\n. Ok, I\u2019m picking this up again.\n@codyfauser do you remember what parts were left? Should I just run the tests and fix stuff if they\u2019re broken?\n/cc @mhashemi86 \n. Ok, @girasquid and I are reviewing now\n. :hamburger: :dragon_face: \n. @cgarceau see https://unicorn.shopify.com/posts/12989\n. @cgarceau looks like we\u2019re back in business\n. Looks good; nice catch with the orderings of the elements :dragon_face: \n. Looks good! :dragon_face: \n. Also: hi @Shopify/active-merchant \n. Nice work here @bizla \n. :dragon_face: \n. Other than my question, :dragon_face: \n. This looks grrrreat! :tiger: :tiger2: \n:dragon_face: \n. :dragon_face: yesss\n. Agreed that the dependency on active_utils is bad, but this patch:\n- Fixes a thing affecting Shopify devs right now\n- Doesn\u2019t add a significant amount of work to Shopify/active_utils#36\n  https://github.com/Shopify/active_utils/pull/36\nLet\u2019s go ahead with this and keep working towards removing the dep?\nOn Mon, Dec 15, 2014 at 1:34 PM, Willem van Bergen <notifications@github.com\n\nwrote:\nWhile I agree Shopify/active_utils#36\nhttps://github.com/Shopify/active_utils/pull/36 needs to happen, it is\nmore work and more invasive. How is this change going to make that more\ncomplicated?\nThis change basically only removes code from ActiveMerchant now, and fixes\npotentially troublesome bugs being caused by the COUNTRIES constants having\ndifferent values, or the Country class having a different implementations\n(which is already the case.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1492#issuecomment-67041659\n.\n. :dragon_face: coooooooooool\n. \u201cmatch ours\u201d\n. Prefer if !condition over unless whenever possible\n. Prefer not to make assignments inside of conditionals whenever possible for clarity\n. Would def unsigned_http_raw_data read better?\n. Just pushed a new commit fixing digests. Taking a look at your comments now\n\n\u2014\nEdward https://www.google.ca/search?q=edward+ocampo-gooding at Shopify\nOn Wed, Mar 19, 2014 at 11:25 AM, Denis Odorcic notifications@github.comwrote:\n\nIn lib/active_merchant/billing/integrations/klarna/return.rb:\n\n@@ -0,0 +1,15 @@\n+module ActiveMerchant #:nodoc:\n-  module Billing #:nodoc:\n-    module Integrations #:nodoc:\n-      module Klarna\n-        class Return < ActiveMerchant::Billing::Integrations::Return\n  +\n-          def success?\n\nSame, to be completed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1059/files#r10754042\n.\n. Correct. This is still a WIP; confirming this behaviour now \u2013 just wanted to get the rest of it sorted first.\n. @odorcicd To be completed, but I\u2019m still interested in your comments on the code as-is.\n\nMy blocker right now is confirming what\u2019s different/same about the offsite Klarna thing we\u2019re using here. I\u2019m looking at http://developers.klarna.com/en/klarna-checkout and it\u2019s similar to what I\u2019m doing, but AFAIK, the checkout flow that Klarna and @louiskearns have been pursuing is an experimental thing that is completely off-site and behaves differently.\nI\u2019m pretty certain that there\u2019s some ping-controller work to do here but I\u2019m just getting there. I\u2019d appreciate any pointers you can offer.\n. Class.new for inheritance:\n\n. Oh, ActiveMerchant\n. Just curious \u2013 what is this zip/postal code?\n. Can you tell me more about what\u2019s happening here?\n. As someone with limited knowledge reading this for the first time, it is unclear what is going on here, but I wonder if the problem is just me.\n. No, API-wise, this is a pretty clean way to deal with the odd mapping and add_field-related logic.\nDo you think wrapping this in a descriptive method would make the code more clear? I suppose that\u2019s just as good as this comment, but Shopify has made me allergic to comments.\n. @odorcicd @bslobodin What\u2019s an apc in this context?\n. (This is part of the generated stuff that AM made for me.)\n. Please chop these blank lines out\n. I feel like I\u2019ve seen this field added in enough initializers that it should just be fixed upstream\n. chop this line please\n. Move these mapping calls up above the initializer to be consistent with other integrations\n. I appreciate what you\u2019re doing here with the formatting, but since it\u2019s not consistent with typical Ruby formatting, it actually makes it harder to read\n. chop this line please\n. Why are we using the x_ prefix again?\n. chop this line please\n. Why is the case of the signature not important?\n. +1 having the result passed in\n. chop this line please\n. Add a linebreak between the private and the private methods and see if it looks better to you\n. chop this line please\n. chop this line please\n. no need for the line break between the opening brace and first key\n. It\u2019s ok to close the last key with a brace on the same line\n. classy\n. Be consistent with your presentation of Hashes. Either use curly braces or don\u2019t\n. chop this line please\n. Try adding linebreaks between your setup logic, the method under test, and the assert \u2013 it can make for a more readable test.\n. chop this line please\n. chop this line please\n. chop this line\n. mapping is a class-level instance method call, similar to belongs_to and other similar jazz in  all of Shopify\u2019s Rails models for example. In those cases, the convention has been to put that first.\n. I\u2019ve filled this in. Yay notifications!\n. I don\u2019t know why, but I really like the shape of the code in this file.\nThe fact that it ends up being true in the middle feels poetic.\n. I feel like I should probably remove this.\n. So this request body includes the merchant ID that I\u2019m testing with which makes me feel a little weird.\nShould I slim it down just to the JSON blob that I need or leave it in its realistic form?\n. Yes, in Shopify\u2019s OffSitePaymentGateway\n. I can\u2019t, since parts of the digest body only arrive after initialization\n. I\u2019ll look again \u2013 I felt this was more readable so I went this way first\n. I wrote that the first time, but then found it odd that I was writing twice as many lines and introducing more complexity \u2013 mapping depends on method_missing, etc. and this way is more readable\n. Not sure \u2013 was filling in the generated template and was asking myself the same question.\nIs there a particular API to which I should be writing to or should I just stick to what Shopify needs?\n. Yeah, I felt odd about writing this too. I figured that since I don\u2019t actually know what statuses map to Pending or Failed, I shouldn\u2019t guess here.\n. No, they don\u2019t. I was surprised too \u2013 they just redirect back to merchant_confirmation_uri \u2013 I can show you the ngrok logs.\n. I don\u2019t think so. I was doing my best to follow the generated template here. Let\u2019s remove this.\n. Yep! Eagle eyes. Thanks\n. Agreed. I\u2019ll make that change.\n. It\u2019s in X.2 decimal; see https://github.com/Shopify/active_merchant/pull/1059/files#diff-be5aa1ad3c6cf070fbc1bbc495555057R16 for the test\n. Do we not want to raise an exception when we can\u2019t parse these values?\n. Thanks \u2013 removed\n. I feel like has_key? is more readable here and tells a better story \u2013 I care about whether a key is set at all.\nConversely, fields[required_field].present? is more about whether the value of that hash key is nil or not, which isn\u2019t exactly the same thing.\n. My bad. I\u2019ve moved this up to the initializer.\n. Can you suggest a default or an approach to determining one?\nThis really is exceptional behaviour here \u2013 would we not want to fail fast on something like this?\n. Ok, I\u2019ll move it there.\nIs this just a cargo-culting thing though? Why is putting it in acknowledge better?\n. My bad \u2013 I was thinking of something else. I\u2019ll remove this.\nShould we change the template generated by AM to not provide this method stub?\n. Ah, I see where it\u2019s used now \u2013 it was in the default generated test suite.\nSince it\u2019s pretty much the closest thing I have to an expected API, I filled it in. I\u2019ll update this and the test.\n. Yes, in the generated test suite. (Same answer for the rest of these comments. I\u2019ll remove them.)\nShould we remove this from the generated test suite?\n. Cool. We should probably remove these from the generated test suite to streamline implementations. I\u2019ll make a note.\n. (Same as others)\n. I\u2019ve moved it here.\n. Done\n. Good idea. Done.\n. Should I ask them to send us the same body + a digest that they send us in the notification?\n. Yep \u2013 I see that the superclass sets this to true. Removing.\n. I\u2019ll downcase all of this stuff\n. Great idea. I\u2019ve implemented this.\n. I think I took a trip to refactoring town at some point here and forgot to clean up this test when I came back. I\u2019ve simplified this down to a Hash and merged example_line_item and example_cart_item.\n. It isn\u2019t necessary since I used add_field instead.\nWould you prefer I used mappings? I find them to be clumsy and indirect in comparison with add_field\n. - Sweden has the biggest population at 9 million, but this thing will likely be supporting Germany soon at 81 million\n- The thing enforcing purchase_country is Shopify \u2013 based on the billing address, we show payment options that work for that country, right? This Shopify-supplied country code is passed to this method.\nIt really is an exceptional case, but I can set it to 'sv-se' so as to not bail out.\n. Cool. I\u2019ve refactored.\n. I\u2019m cool with removing them, but I feel like if we\u2019re going to do that, then we should update the generators, or else we\u2019re just perpetuating this issue and making the next gateway implementor\u2019s job more complex.\n@odorcicd what do you think?\n. Klarna sends us back a param used to populate #gross_cents and I use that here to populate #gross \u2013 I do it in this order since I can count on whatever Klarna sending us to be the most precise number available.\nThe Notification superclass appears to calculate #gross_cents from #gross (i.e. the other way around), but I think doing it the way I\u2019ve done here is safer.\n. Ok, I\u2019ll ask them to pass some fields in the return\n. You\u2019re right \u2013 that\u2019s my mistake; I\u2019ll change this to actually be the country where the purchase is happening.\n. @bslobodin no, guessing locales is a super tricky thing.\nI really do feel like this is an exceptional case. I\u2019d rather set it to be 'sv-se' since the worst-case scenario there is that it will at least work, but might make the buyer guess some fields.\nI\u2019m going to see if I can also set this locale to be 'uk-en' or 'us-en' and see what happens. These docs show an English-language screen but this doc does not mention English as being a supported locale.\n. @bslobodin I\u2019ll let them know\n. I spoke with Denis in person and his recommendation was to let it be and leave it in.\nShould we decide to remove it, it should be removed from the generators too, but we should consult with the Spree guys who are also contributors to AM.\n. I tried setting it to values like 'us-en', 'uk-en', 'se-en' and the HPP just crashes.\nI\u2019m asking Klarna.\n. I\u2019m following up with Klarna on this issue, but here\u2019s what I\u2019ve got:\nHere\u2019s an example HTML form that I copy/pasted from a working forward.html.erb page: https://gist.github.com/edward/115f37ba310a2b6f91bb\nHere\u2019s a doc covering the fields that we send Klarna\u2019s HPP: https://hpp-staging-eu.herokuapp.com/api/doc#!/checkout/POST--version-checkout---format-_post_0\nHere\u2019s an example form-maker thing that lets you construct a Klarna-valid form and send it to their checkout: https://hpp-staging-eu.herokuapp.com/example/checkout-form/advanced \u2013 I\u2019m unable to make it pass an email, phone number, etc. to Klarna.\n. If the customer info is all valid, there is no effect.\nIf the customer info indicates that there\u2019s a customer trying to purchase something from an unsupported country, it blows up.\n. You\u2019re totally right. I\u2019ll fix this up.\n. I feel like this is borderline \u201cdoing too many things on one line\u201d. Would breaking this out to a well-named method be ok?\n. Are these last two asserts really needed now that you know for sure that they don\u2019t happen?\n. I think I\u2019m missing something here.\nWill we care if params['datacash_reference'] and params['merchantreference'] are set once this feature goes out?\n. Ok \u2013 I had read the intention of this PR as \u201cmaking this change so we don\u2019t have to care about these other params anymore\u201d, which made me think that we shouldn\u2019t care about the other params anymore.\nIf they\u2019re still important, then this is cool with me.\n. Yep. I was thinking that it was more obvious what was going on in #acknowledge this way, since I found it weird that a method called \u201cacknowledge\u201d wasn\u2019t performing any acknowledgement and was just checking verifying the incoming request, but I was on the fence.\nI\u2019ve inlined the method.\n. Thanks\n. True, but this will also act as an integration test of sorts \u2013 I\u2019ll know if anything else has changed in the production of this digest.\nI like the idea of the signature generation test, so I\u2019ll put that together quickly.\n. I just put the test together and ended up with something that doesn\u2019t buy us much:\nruby\ndef test_sign\n  expected = Digest::SHA256.base64digest('abcdefopq')\n  assert_equal expected, Klarna.digest('abcdef', 'opq')\nend\n@bslobodin do you feel strongly about adding this to the test suite?\n. Alright, I\u2019ll leave it in there.\n. Something feels wrong about this calculated amount. Is the formula correct?\n. The rate as expressed to Klarna should be a percentage multiplied by 100\nand converted to an integer.\nAm I missing something?\n\u2014\nEdward https://www.google.ca/search?q=edward+ocampo-gooding at Shopify\nOn Tue, Apr 29, 2014 at 11:21 AM, Boris Slobodin\nnotifications@github.comwrote:\n\nIn test/unit/integrations/helpers/klarna_helper_test.rb:\n\n\ndef test_merchant_digest\n@helper = valid_helper\n  +\nassert_field 'merchant_digest', \"/fUAJJiWEluzrwL1AX8pptGFYP3T1gWIv+tafLnARzY=\"\nend\n  +\ndef test_line_item\nitem = example_line_item\n@helper.line_item(item)\n  +\nassert_field 'cart_item-0_type', item[:type].to_s\nassert_field 'cart_item-0_reference', item[:reference].to_s\nassert_field 'cart_item-0_name', item[:name].to_s\nassert_field 'cart_item-0_quantity', item[:quantity].to_s\nassert_field 'cart_item-0_unit_price', item[:unit_price].to_s\nassert_field 'cart_item-0_tax_rate', '1000'\n\n\nHm, yea, the rate should be %ge? If you set the below, the rate should be\n10% or 0.1, depending on how it needs to be expressed to Klarna.\n:unit_price => Money.new(9.00),\n:tax_amount => Money.new(0.90)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1059/files#r12098609\n.\n. I thought about it, but ''.to_i == 0 so wasn\u2019t sure if it mattered or not, and I believe the values in the item hash are more likely going to be strings, so I was going for consistency.\n. Absolutely\n. Because of that Money thing that I had mentioned; it used to be Money.new(9.00) which actually means \u201c9 cents\u201d, which wasn\u2019t my intention; I was going for \u201c9 dollars\u201d.\n. no newline\n. Use :public_send for safety\n. Can you be explicit about the exception you are raising here?\n\nruby\nraise e\nwould be ok\n. I see this as being added by abisosa as well, per https://github.com/Shopify/active_merchant/commit/bd713170204a70d7f7a294ff67059b0a2c088e2a\n. @ntalbott fair enough \u2013 I\u2019m not a huge fan of the bare raise because of the implicit $! or RuntimeError because it makes it harder for people new to Ruby to understand what\u2019s up, but if it works for you, I\u2019m cool with it.\n. Other suggestions:\n- PayPal Express: pass logo image for setup request [dimko] https://github.com/Shopify/active_merchant/commit/9896bd7b64b4eb3496051aa385deae02a9619e94\n- Improve credit card validation [duff] https://github.com/Shopify/active_merchant/commit/821f14dcf8132bbec55324874d7009766655789b\n. unindent here\n. Doesn\u2019t SEK also have 0 minor units?\n. Because that was something I was running into when working on Klarna in Shopify \u2013 I could swear we had code that rounded up to the nearest whole number.\n. AVS_RESULT_CODE, TRANSACTION_ID, CARD_CODE_RESPONSE_CODE, CARDHOLDER_AUTH_CODE  = 5, 6, 38, 39\n=>\nAVS_RESULT_CODE, TRANSACTION_ID, CARD_CODE_RESPONSE_CODE, CARDHOLDER_AUTH_CODE = 5, 6, 38, 39\n. remove this line\n. Prefer\nruby\nif duplicate_window\nor can we just do\nruby\npost[:duplicate_window] = duplicate_window\n?\n. Indentation\n. Remove this empty line please\n. Indentation\n. Remove this line please\n. Just to confirm: we\u2019re removing this test because of https://github.com/Shopify/active_merchant/pull/1297/files#diff-48e328d270b74715da6db2ccd6d03ac7L14 ?\n. Why not leave the inheritance and rename the superclass to something like AuthorizeNetLegacyGateway?\n. aight\n:sheep: it\n. I kinda hate seeing is_a? since it suggests a missing ducktype but it does make things pretty simple in this case.\n. Oops. Dang merge conflicts. Thanks!\n. Indentation\n. wtf Stripe get indentation\n(Arbab just told me that this is what they actually send back.)\n. Is asserting the type here important?\n. Nice catch Luke\n. partner_id is always set, right?\nIs there a validation or something for this earlier on?\n. Oh, ok, so it\u2019ll just be nil otherwise? Cool.\n. > Wtf is this?\nBe cool\n. <3\n. ",
    "vitaliyvasin": "It seems configuration was fixed. Rerun build\n. Guys, please review.\n. When my changes will be reviewed? Our clients waiting for it.\n. due to this branch was merged by my mistake, I close temporary pull request until repair branch\n. Note: now interface of CG CAPTURE and REFUND changed, became same as PARTIAL_CAPTURE and PARTIAL_REFUND:\n<gatewayRequest>\n  <action<CAPTURE</action>\n<credentials>\n  <apiUsername>10201423</apiUsername>\n  <apiPassword>myAPIpassword</apiPassword>\n</credentials>\n<capture>\n  <transID>34394300989</transID>\n  <amount>10.00</amount>\n  <currencyCode>USD</currencyCode>\n</capture>\n</gatewayRequest>\n<gatewayRequest>\n  <action<REFUND</action>\n<credentials>\n  <apiUsername>10201423</apiUsername>\n  <apiPassword>myAPIpassword</apiPassword>\n</credentials>\n<capture>\n  <transID>34394300989</transID>\n  <amount>10.00</amount>\n  <currencyCode>USD</currencyCode>\n</capture>\n</gatewayRequest>\n. Guys, could your review? Thanks\n. I notify our tech support. They will provide it soon (I hope tomorrow). Thanks\n. @ntalbott, sorry for the issue. It will be fixed soon. We are working on it. I will notify you when it will be fixed.\n. New testing account credentials sent to your email. Sorry for delay.\n. The issue under investigation. \n. @ntalbott you can try it now. Sorry for delay.\n. @ntalbott here is list of supported countries: AD AE AT AU BA BE BG BN CA CH CY CZ DE DK EE EG ES FI FR GB GI GL GR HK HR HU ID IE IL IM IN IS IT LI LK LT LU LV MC MT MU MV MX MY NL NO NZ PH PL PT QA RO RU SA SE SG SI SK SM TR UA UM US VA\n. @ntalbott GC is a gateway certified in the EU region.\nA merchant must be in the EU region - the customers (end users) can be from anywhere basically.\nThere are some countries we block but those can be turned off..so basically a customer can be from any country.\n. @ntalbott, I will consult with sales departement and provide answer on Monday morning.\n. @ntalbott, here is list of countries: AD AT AX BE BG CH CY CZ DE DK ES FI FR GB GG GI GR HR HU IE IM IS IT JE LI LT LU LV MC MT NL NO PL PT RO SE SI SK VA\n. Ok. I understand. I thought that I can provide my one interface. So now questions is, can I extend common interface with our specific?\n. Could I add CommerceGate specific options to Options hash? As standard doesn't cover CommerceGate needs.\n. Thanks for describing approach. My excuse for my misunderstanding, now it's clear for me. \n. It used in authorize and purchase methods:\ndef purchase(money, creditcard, options = {})\n        post = {}\n        add_creditcard(post, credit card)\ndef authorize(money, creditcard, options = {})\n        post = {}\n        add_creditcard(post, creditcard)\n. Yes, you are right.  Removed\n. Cool. Thanks\n. ",
    "mendable": "There are many issues with this PR - i'll point out some in the code but please also read the Contributing Guide.\n. @ntalbott There are a couple of us working on this, we've added some remote regression tests for those changes ^\nReady for re-review.\nNote that Wirecard's standard demo account does not return AVS/CVV results. We've defined another Wirecard demo gateway account in the fixtures (with public credentials) that supports  AVS/CVV results.\nIs this approach acceptable or would you prefer to switch the main Wirecard demo account over?\nThanks :)\n. @ntalbott Thanks for the clarification, we've done that for you now. ^\n. - This method should be called purchase\n- This method should have the signature purchase(money, creditcard, options = {})\n. - This method should have the signature capture(money, identification, options = {})\n. - This method should have the signature authorize(money, creditcard, options = {})\n. - This method should have the signature refund(money, identification, options = {})\n. The standard across most other gateway implementations is for the API username to be named :login, and the API password to be named :password.\nYou should try to maintain that active merchant library interface, and write your gateway implementation to translate that to those to names required by the backend API.\n. As per the Contributing guide, you should set a default currency here also.\n. - This method should return an instance of ActiveMerchant::Billing::Response\n  - The response instance should be correctly populated with success status or error message, AVS and CVV response and authorization codes where appropriate.\n  - Please see other gateways for examples\n  - Please look at ActiveMerchant::Billing::Response\n- This method should have error handling e.g, rescue from ResponseError\n. Please also include a .supported_countries definition as per the Contributing guide.\n. Please read the Options Hash section of the contributing guide. You generally should not make up your own options in the ActiveMerchant options hash given to authorize, purchase etc, specifically:\n- customerIP should be ip\n- currencyCode should be currency\n- amount does NOT go in the options hash, but is specified as the first argument to authorize, purchase, etc\n- postalCode and countryCode should not be here - they should be nested in a billing_address, shipping_address or plain address sub-hash, as per contributing guide.\n- Not sure what siteID or offerID are..\netc.\nAgain - please read the contributing guide and follow it.\nPlease consider the purpose of the ActiveMerchant library - to provide a common standard interface between multiple gateway implementations, even though the underlying API of each gateway implementation is different. The idea is that anyone using ActiveMerchant should be able to write code against one interface that should largely work for all gateways.\nCurrently you seem to have confused the options hash being passed into authorize et al. with what is passed to the CommerceGate API. The gateway class you are implementing should construct the correct request to the API given the standard options input.\nIt is the responsibility of the gateway implementation to understand the CommerceGate API, not the ActiveMerchant end user.\n. As an FYI : this (and other) lines having the side effect that is will update the original hash that was passed in which is generally a bad practice, e.g:\nruby\nirb> def foo(x); post = x; post[:y] = 'modified'; end\n=> :foo\nirb> z = {:something => \"else\"}\n=> {:something=>\"else\"}\nirb> foo(z)\n=> \"modified\"\nirb> z\n=> {:something=>\"else\", :y=>\"modified\"}\nJust an FYI - when you refactor the approach to construct an API request derived from the passed in options you might end up fixing this anyway.\n. Yes - where the standard options hash doesn't already have a space for the additional data you want to accept.\nPlease try to use snake_case rather than camelBack in your key names though.\n. FYI ActiveMerchant has a standard debugging mechanism already: If you run with the environment variable DEBUG_ACTIVE_MERCHANT set to true (e.g, $ DEBUG_ACTIVE_MERCHANT=true rake test) then you should see debugging output.\nThis is enabled via test/test_helper.rb which flows down into ActiveUtils via a fairly convoluted chain and eventually gets set inside the connection class that all of ActiveMerchant uses, which is then used for general logging as well as within net/http.\nBut in summary - You should remove your DEBUG constant and all puts from your code.\n. In fact the entire void implementation needs changing.\nThe standard AM interface is to have a single #void method specified as def void(identification, options = {}).\nPlease do the following instead:\n- Remove the void_auth method.\n- Remove the commented out void_capture, void_sale, void_refund methods.\n- Correct this method signature to match the ActiveMerchant standard.\n- Move this method UP the file to be above the private line to make it public.\n- Adjust this method to perform a VOID_AUTH API action only.\n  - This would be the standard behaviour that I would expect from calling #void on a gateway.\nExplanation: CommerceGate gateway's additional VOID_CAPTURE, VOID_SALE, and VOID_REFUND API methods will not be used, because as a) they are only time-sensitive temporary dependant on the state of the transaction, b) the API does not appear to offer any way to query the state of the transaction, c) if you auth+capture then want to \"undo\" after capture, the standard AM behaviour would be to issue a subsequent refund.\n. According to the CommerceGate API documentation, there is support for a \"PARTIAL_CAPTURE\", and it can be given amount less than or equal to the amount that was initially authorized.\nIt would be preferrable to switch the commit method to performing a PARTIAL_CAPTURE instead of a CAPTURE, and accept the money amount that is given to the capture for passthrough to the CG gateway.\n. According to the CommerceGate API documentation, there is support for a \"PARTIAL_REFUND\" API call that can be given an amount. Please can you confirm (by testing and if necessary talking to CommerceGAte) if this works if given a full amount to refund?\nThe API documentation is somewhat ambigious, but guessing from the description for CAPTURE + PARTIAL_CAPTURE i'm guessing PARTIAL_REFUND with an amount that is the full amount should work. If it does, that would be preferrable.\n. As mentioned in the last review, this post = options assignment is incorrect - when you change the post variable in this method it may also affect whatever variable was given as options in the methods caller.\nThe correct way to go about this is to start with post as an empty hash, and then add keys to it that you allow to be passed from options.\nFor an example of the correct pattern to use, look at the way the SagePay gateway #refund method constructs its post variable here.\n(same comment applies to your #capture as well)\n. This is not a valid value.\n.supported_countries expects an array of ISO 3166-1 alpha-2 country codes of MERCHANTS the gateway supports.\nThe CommerceGate.com website for example says \"CommerceGate.com offers website operators based in Europe and North America an easy, reliable and secure solution which enables them to immediately start accepting online payments.\"... \nThat is contradictory to \"all countries in the world except these 5\".\nPlease contact CommerceGate to find the exact list of merchant countries they accept if you do not already know.\n. As previously mentioned, please use snake_case for custom option keys as this is what people using your gateway interface will see and is the more typical approach in ruby for this sort of thing.\ni.e: \nruby\npost[:siteID] = gateway_specific_options[:site_id]\npost[:offerID] = gateway_specific_options[:offer_id]\n. Also note - it would probably be preferable not to use this gateway_specific_options sub-hash, and just include :site_id and :offer_id within the options hash directly.\n. Please don't hardcode the test mode.\nIf the gateway response doesn't include a live or test indicator then please use the #test? method that's provided by ActiveMerchant::Billing::Gateway.\n(example)\n. This options hash to Response takes additional keys, including avs_result and cvv_result. As these are being returned by the gateway on successful payment please include them.\n. As previously mentioned, when calling methods without arguments there is no need to include parens. Please remove.\n. ruby\npost[:amount] = amount(money)\n- method source\n- example\n. should be an integer in cents then the money method would translate that internally.\ni.e, @amount = 1000 means 10.00\n. The reason for requiring this is the ActiveMerchant Gateway API for #authorize, #capture, #purchase, #refund when given an amount as the first argument expect that to be in cents for all gateways, even if the gateway APIs require the amount as \"10.00\" for example.\nThe money method translates between the expected ActiveMerchant Gateway API interface and the format your gateway requires.\n. It looks like you've copied this method over verbatim from gateway.rb in response to my previous note about making use of this method for handling amounts correctly.\nBecause this class inherits from ActiveMerchant::Billing::Gateway, this #amount method is already available in your class, so no need to copy and paste the entire method. It can be removed from here.\n. As previously mentioned by @boffbowsh here and after checking the CG API documentation (page 4), each val from the body would be URL encoded.\nIt would be less bug-prone in future and make logical sense to perform a CGI.unescape(val) here so you know everything has safely been unescaped, rather than piecemeal unescaping later on.\n. the unless money.nil? or money == '' conditional is not required, those cases are already handled as we expect within the #amount method.\n. As per the contributing guide, the correct way to assign currency would be:\nruby\npost[:currencyCode] = options[:currency] || currency(money)\nThis applies to the two other places you are assigning post[:currencyCode] = .. also.\nI don't believe the unless conditional wrapper is required, let's default to always passing the default currency or allow the currency to be overridden by the options hash.\n. This method does not appear to be used anywhere?\nCan it be removed, or is it required for something?\n. ruby\npost[:amount]       = amount(money)\npost[:email]        = options[:email]\npost[:currencyCode] = options[:currency] || currency(money)\n\nthen, in the places where you do this:\nruby\nadd_auth_purchase_options(post, amount(money), options)\ndo this instead:\nruby\nadd_auth_purchase_options(post, money, options)\nIf you look at how the #currency method in ActiveMerchant::Billing::Gateway works, it would behave differently if given a Money object, so we don't want to convert a Money object to an Integer before using it in #currency.\n. - ActiveMerchant depends upon ActiveSupport, which provides us with String#blank? and String#present? among other things, which are a shorter ways of checking for nil or an empty string (or not).\n- Let's see if we can improve the \"no error message\" error message a bit, it might help anyone in future trying to diagnose an issue. I had a quick look at a few other gateways for guidance on what's typically accepted.\nI would suggest:\nruby\nif response['returnText'].present?\n  response['returnText']\nelse\n  \"Invalid response received from the CommerceGate API. Please contact CommerceGate support if you continue to receive this message. (The raw response returned by the API was #{response.inspect})\"\nend\n. Let's not hard-code our logins and passwords - anyone temporarily changing them to run the tests always runs the risk of forgetting to change them back again before git committing their other changes.\nActiveMerchant has a feature for loading sensitive supporting gateway configuration options.\nIf you add this to the test/fixtures.yml file:\nyaml\ncommercegate:\n  login: \"123456\"\n  password: \"password\"\n  site_id: \"10000012345\"\n  offer_id: \"10000012345\"\n  card_number: \"4111111111111111\"\nYou will then in your test code be able to call fixtures(:commercegate) and get back a hash of your sensitive info.\nWhen developing locally, you can add a file in ~/.active_merchant/fixtures.yml (note that directory is in your home directory, then inside a DOT active_merchant directory) where you can repeat that YAML but override those default dummy values with your real confidential values.\nruby\n    @gateway = CommercegateGateway.new(\n      :login => fixtures(:commercegate).fetch(:login),\n      :password => fixtures(:commercegate).fetch(:password)\n    )\nI've suggested using Hash#fetch in this case as it would be a mis-configuration if the key was not specified and would prefer the test raised an error at that point if the key wasn't specified in the fixtures.yml file.\n. ruby\n:number             => fixtures(:commercegate).fetch(:card_number),\n. ruby\n:number             => fixtures(:commercegate).fetch(:card_number),\n. ruby\n      :site_id => fixtures(:commercegate).fetch(:site_id),\n      :offer_id => fixtures(:commercegate).fetch(:offer_id),\n. successful has 2 c's.\ni.e, def test_successful_authorize \n. I'm referring to the expdate method.\nI don't see anything calling it, like there is no params[:expiryDate] = expdate(creditcard) for example, so i'm guessing it's not required?\n. These tests are not actually checking that response has been populated entirely correctly, response.params is returning whatever the gateway returned (and in this case its your stubbed string).\nThe code is not currently working, but the test isn't catching it either.\nTest should be changed to as follows to catch the bug:\nruby\n    assert_equal \"U\", response.avs_result[\"code\"]\n    assert_equal \"S\", response.cvv_result[\"code\"]\n(same for remote test also, and a few other places - please check)\n. These two lines have a bug and don't currently work:\nYour response is a hash but the keys must be accessed by strings, not symbols, otherwise options[:avs_result] and options[:cvv_result] will always be assigned nil.\nruby\n          options[:avs_result] = { :code => response['avsCode'] }\n          options[:cvv_result] = response['cvvCode']\nAlso, I think I would be inclined to remove the if AUTH or SALE conditional around these and always populate them when you construct the options hash, otherwise we're bringing per-action specifics down into a generic method. It looks like ActiveMerchant::Billing::Response should cope with that.\n. Some of these new files have a extra whitespace all over the place, any chance you could tidy the whitespace a bit? Most ruby devs have their editors configured to automatically trim trailing whitespace.\nHow you go about that depends on your editor, take a look at http://makandracards.com/makandra/11541-don-t-leave-trailing-whitespace or google $YOUR_EDITOR remove whitespace\n. - this comment is incorrect as we can auth 1000 and capture only 500\n- the comments really apply to everything inside Activemerchant and are not specific to this gateway, so I think let's just remove all the comments from #authorize, #capture, #purchase, #refund, #void.\n. This has a small bug that when we get to 2019, someone will need to come in here and edit this test so it doesn't break.\nActiveMerchant has a credit_card helper method that we can use work around that, and also simplify a lot of this code, something like this should do the trick:\n``` ruby\n@credit_card = credit_card(\n  fixtures(:commercegate).fetch(:card_number)\n)\n@expired_credit_card = credit_card(\n  fixtures(:commercegate).fetch(:card_number), \n  :year => Time.now.year - 1\n)\n``\n. We can remote this address variable and hash entirely, then in options we can do:address => address` and that will use the address test helper method.\n(Same points apply to the unit tests also).\n. No need for assigning a local amount variable here, can just reuse @amount in the two lines of this test it is used.\n. As per my previous comment, although you've fixed /part/ of the original, it would also be great to use the credit_card factory method to generate the ActiveMerchant::Billing::CreditCard objects, most other active merchant tests do and is the preferred way to do things. It allows your test to be focus on the bits you care about testing, without being heavily coupled to the parts you don't care about.\n. Possible Bug - The CommergeGate API documentation, page 18, says this should be called \"merchAcct\" (with a \"t\" on the end). Please can you double check?\n. ruby\nassert_equal expected, actual\nwill give a much better error message in the case of failure.\n(applies to multiple tests here)\n. ",
    "meetme2meat": "Ok, I'll add it over the weekend thanks for the review\n. ",
    "guibernardino": "@louiskearns Akatus isn't a PCI compliant.\n. ",
    "diegosouza": "Does it need to be PCI compliant to be merged?\n. ",
    "kernow": "@ntalbott this should be ready to go now unless you have any more comments. Thanks\n. @ntalbott actually, this isn't quite resolved. Using Response.authorization to return the token when calling store works fine. However this is not the only time a request to store a token can be made. When a purchase is made the CreateToken and StoreToken options can be passed to the gateway. CreateToken creates a token on the gateway from card details and returns the token, StoreToken tells the gateway to keep storing the token when running a purchase with a previously stored token. In both of these situations a token as well as authorization information will need to be returned.\nWhat would you suggest as a way to support both?\n. Would it be possible to add @token = options[:token] etc. to the Response class to support tokens across all responses or do you have other plans to support tokens in the long term?\n. I didn't add the token to this field as it already contains a string such as \"12345;B8AE1CF6-9DEF-C876-1BB4-9B382E6CE520;4193753;OHMETD7DFK;purchase\" which is built up from 5 separate pieces of data. Adding a the token to this field will make it rather hard to access requiring parsing a ; separated string and knowing the position the token is stored in. The token may or may not be present in the response from the gateway so the resulting Response#authorization field will contain a varying number of items.\nIf you want to avoid having a custom response I'd suggest the token is retrieved from the params rather than complicating the authorization field even further.\n. Not that I'm aware of, all of the remote tests pass. I believe the changes are additional features see: http://www.sagepay.co.uk/support/12/38/protocolv3\nThe token system is only supported in v3 so this commit requires the v3 protocol\n. I've updated this in the branch\n. No problem, done and pushed\n. ",
    "rocketlobster": "Of course ! I just changed it. \nNow : \n- You can pass a store: true option to the purchase call if you want Be2Bill to register the customer datas and send you back an Alias ID (that you will have to store)\n- You can pass an alias: \"customer_alias\" option to the purchase call if you want the customer to be able to pay without giving again its credit card informations.\n. Done !\n. Is there still something to fix so you can merge it?\n. We do add a credit card when an alias is being assigned, but not when he uses his alias to pay without entering again his credit card, that is linked to him through his alias !\n. ",
    "franklangston": "@steveklabnik do you think you'll get to this soon?\n. ",
    "MohdAnas": "I dint know how but it working now? :)\n. Thanks for your reply.\nMy app is deployed on heroku still it is giving me the same error? \n. Just changed the credit card number and it worked. \nThanks :)\n. ",
    "celsodantas": "Hey @guibernardino obrigado pelo PR! =D\nDo you mind moving some of the XML/JSON builder logic from the moip.rb to a helper class? The idea is just to reduce the size of the current file. \n. LGTM @odorcicd mind taking a lot at this?\n. I just think it's cleaner to have all that logic in the helper and not a huge class with everything.\n. Yeah. Can't say you are wrong. =/\nrollback to the previous code then?\n. @bslobodin for review too =)\n. Wanted to make sure you were ok to add the gateway to the Readme file\n. +1 for that @ntalbott \n. ping @ntalbott you too buddy\n. The problem with Net::HTTP is that it has a huge quantity of possible exceptions. Using a HTTParty-like gem would handle that for us. But I like the grouping thing, if you guys are not ok with adding a dependency.\n. Yeah, I don't care about the gem, actually. I'm fine with excon. Just would like to use a wrap around Net::HTTP.\n. should this be unless?\n. also, there's no test that covers instruction_line_*\n. I guess it would. PagSeguro has 2 different meanings for Pending.\nPending means the payment was made by credit card and is under fraud analysis. \nWaiting payment would means that the user choose to pay by other means.\n1. If the user choose to pay by Debit, as soon as he's redirected to the Bank's website, we'll get the Waiting Payment notification. I wonder if he closes the Bank's website if we'll get the Cancelled notification from PagSeguro . \n2. If the user chooses to pay Boleto Banc\u00e1rio: which is something like a serialization of the Order (issued by a Bank) into a looong number which can be paid in any bank (and the bank that issued the Boleto Banc\u00e1rio will get a notification once the payment is made). This method can take hours or days to be completed. I wonder if the client never pays the Boleto Banc\u00e1rio we will ever get a Cancelled notification from PagSeguro .\n- I'll get in contact with PagSeguro and ask about it. \nIf we don't get a notification, the order will sit forever in Pending status. Is that ok?\n. :+1: indeed!\n. I'm not sure. I follow the pattern I found in ActiveMerchant (like Paypal's Return class), and if I don't have a Return class, it will fail in Shopify. Thoughts?\n. Just for the record: PagSeguro will return the 'Cancelled' if a timeout occur while in Pending or if the Bank notifies PagSeguro that a timeout occurred. FYI, the timeout can take days.\nFrom PagSeguro's API notification page:\nCancelada: Quando a opera\u00e7\u00e3o \u00e9 negada pela institui\u00e7\u00e3o financeira ou quando o PagSeguro n\u00e3o recebe uma confirma\u00e7\u00e3o ap\u00f3s um intervalo de tempo.\nCancelada: Quando ou o PagSeguro ou a operadora de cart\u00f5es de cr\u00e9dito negam a transa\u00e7\u00e3o.\n. Indeed! Fixed!\n. guess I simplified some number formats and forgot to remove duplicates.\nI rewrote the tests names and removed unnecessary ones. Initially I had a regex based phone number parsing which made me triangulate it. Now it's a simpler version, so some tests are no longer needed.\n. fixed\n. ",
    "X0Refraction": "@ntalbott It's purely cosmetic as we'd like to move away from the Iridium brand, but this needs to be updated now as the Iridium class has been changed since I made this request.  I've got a few other integrations I need to get to first so I'll let you know when it's ready.\n. @ntalbott I've updated to use the :avs_result and :cvv_result and removed the changes to the message, can the merchant choose to display the avs and cvv result to the user on the transaction failing?\n. @ntalbott do you happen to know how Shopify handle it? That's the system the merchant is using.  If they cannot choose to display those on failure then I'll need to add the changes to the message back in (although I understand your reluctance to that - the transaction could still be successful on an AVS failure depending on the merchants settings in our merchant management system).\n. @jpudney I'm still waiting on a reply from Shopify on this unfortunately.  I'll let you know once they get back to me.\n. ",
    "onurozgurozkan": ":+1: \n. :+1: \n. ",
    "muhammet": "@ntalbott I will add remote tests.\n. @ntalbott  What should I do ?. I added remote test in last commit. https://github.com/lab2023/active_merchant/commit/f0a1caea04ca7d3520dc19857bb312f5ce967ae7\n. ",
    "spurnaye": "Here is more information about the steps:\nhttps://developer.paypal.com/docs/classic/express-checkout/ht_ec-orderAuthPayment-curl-etc/ \nAnd the step#4 was missing in the typical work flow.\n. ",
    "maartenvg": "The flow is like this\n- Customer requests pay action\n- Shopify retrieves list of banks from ActiveMerchant to show for the iDeal option\n- Customer selects iDeal and clicks proceed\n- Form with gateway selection + selected bank goes to Cardserver\n- Card server redirects uses to commit\n- We grab the selected bank from the params and save it as a gateway parameter\n- commit redirects to forward\n- forward ask ActiveMerchant to generate a form which will redirect the customer to his offsite gateway. (Helper)\n  - a service_url is required. ActiveMerchant does a GET to Mollie on a generated URL based on the selected bank and the merchants ID. We also tell them where to ping us, and where to send the user when all is done. Their response is an URL to the customer's bank\n- the form is submitted by javascript and the customer is sent to the bank.\n- When the customer pays we are pinged with a GET by the bank with a transaction token\n- ActiveMerchant iDeal will GET based on this transaction token to retrieve the status. (Notification)\n- We retrieve the checkout and process it according to the notification status\n- Customer will be send to the done page by the bank where we show the thank you page.\n. We were just informed that the new JSON API from Mollie does support directly accessing iDeal. That API is a lot cleaner, and we will move towards that. \nThis PR will therefore change considerably.\n. @wvanbergen have you started the migration to the new API yet? If not, I can do that.\n. 1. is definitely a problem. You now have to set it (as a merchant) in your profile.\n2. is annoying but we can circumvent it if they don't want to change it. We get the transaction_id when we retrieve the paymentUrl, we could send that to Shopify to store somewhere.\nI suggest we contact them and ask them to fix both points.\n. Cool, I'll test the flow today to see if everything is as it should be.\nI'll adjust the Shopify accordingly where necessary.\nOn Mar 12, 2014 7:02 AM, \"Willem van Bergen\" notifications@github.com\nwrote:\n\nAdded webhookUrl parameter support, and rebased.\n\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1056#issuecomment-37396480\n.\n. Only 2 tiny changes were necessary, both related to propagating options to the Payments POST.\n\nAll is in good working condition. I vote for beta testing!\n. Tests are green :)\nCan we have a proper review please @Soleone & @odorcicd Would be great if we can merge this soon.\n. :+1: #1056 loves this too, thanks!\n. Cool! :shipit:\n. I agree with @bslobodin here: I think we should be more specific. For example we want to know about sudden 404s (which would be a coding error, because we control the URL) and 429s, but 401s or 403s like this should be shown to the user. The same goes for 5xx's, they are never our fault either.\n. That is no longer necessary\n. We could verify to some degree, but then we need to keep it up to date. What do we do for other gateways/integrations?\n. is this necessary after setting query to an empty string?\n. s/sjop/shop ... and yes, that would be great, but Order ID # 1001  is not created until it is an order, while at this moment it is still a checkout.\n. Let's check whether @options[:notify_url] contains a question mark.\n. Should we make this a little robust by checking/raising when the extract_response returns nil?\n. Does this occur?\n. This test is still commented out.\n. We can split this method up in a few distinct steps.\n. Because it is currently responsible for multiple things (setting up HTTP, firing off request, handling response). Splitting it up increases reusability, readability and testability.\n. :+1:\n. Ok, we have different opinions on readability and what constitutes as clean code then, which is fine. :) \n. This needed to be :notify_url. I've pushed a commit that fixes that.\n. Scratch that - this is not currently used, but can be used to retrieve the current issuers list, in a rake task or whatever.\n. I'm not so sure this is necessary anymore. I think we can call super now.\n. This is a remnant from when we needed to pass this along. This is no longer necessary.\n. :+1:\n. Docs are hard to find on this, but I think iDeal only does EUR \n. Ok, checked mollie docs, and they only support EUR. We're not really using that method anymore though. \n. I'll check with the Mollie docs, but I believe all client errors are using\nJSON, yeah. We can rescue and have a fallback message though\n. No docs on errors, apparently. I can email them, but maybe we should ship\nand see.\n. ",
    "thuynguyen": "oh great, I did follow you @MohdAnas, it worked well.\nThanks\n. ",
    "patrickdet": "Whatever happened to this Klarna patch? It's nowhere to be found but in this pull-request. Did you decide to drop support for Klarna?\n/cc @edward \n. ",
    "beranPro": "anything new on this PR ?\nAre there any plans to integrate Klarna ?\n. ",
    "markabe": "Replaced by #1062.\n. @ntalbott Made ReferrerID conditional when sending and used CommStub to test the request data.  I ran the remote tests.  It fails on Amex and Solo but passes everything else.\n. @ntalbott Oh yes.  Here's an updated version.\n. @ntalbott Wow that was interesting. Probably the most prominent Ruby bug I've ever seen.  Fixed.\n. @ntalbott Yes, I find that I have to change the amount to make it not a duplicate.  Thought that might be par for the course.  Should I code the amount to a random number?  I think we have to watch out for certain numbers though.  2.00 and 3.00 are automatically declined in the test system.\n. @ntalbott Sure thing. Remote tests are now re-runnable.\n. @ntalbott I see. Reverted that part and remotes run fine.\n. @ntalbott I just re-ran the remote tests and everything looks ok here\n12 tests, 26 assertions, 0 failures, 0 errors, 0 skips\nThe creds are checked in. I never requested a firewall exception for test.  Brainstorming...\n. @ntalbott 1.9.2-p320\n. I ran remote again with 1.9.3-p448. Everything still good.\n. Yup, 2.0 broke it for me.  sslv3 alert handshake failure  This should be an adventure.\n. @ntalbott Here are the intermediate PEMs\nhttps://gist.github.com/markabe/194ff7a37e247c78fe76\nhttps://gist.github.com/markabe/78fac1a3ec82ac21f559\n. Heard back from Litle.  They support zero auths and perform automatic $1 where they don't.\nCard Brand Support\nVisa, MasterCard and Discover support $0 authorization attempts\nAmerican Express does NOT support $0 authorization attempts\nIf you send in a $0 authorization, AMEX will convert it to a $1 auth.\n. Good idea. Switched to assert_raise.\n. @duff Gotcha.  Pushed a revision.  Includes a test for backwards compatibility.\n. Like a band-aid.  :boom: :+1: \n. This will be nice! :+1: \n. I see, lots of cleanup too.  Cool. :ship: \n. Closing due to dupe.\n. @ntalbott True. Updated.\n. @ntalbott Updated display name.\n. @duff @ntalbott please review.\n. Thanks for the merge!\n. @ntalbott @duff If you get around to CenPOS, maybe include this one too.\n. Might as well flag you too @duff :smile: \n. There did appear to be some information in the response.  However I tried to altering the requests in order to affect the response and it always came back Match.  I didn't have much confidence that it did what it should so I left it out.\n. Yes, they whitelist in production.\n. Yes we do.  Here are the prod and test chains.\nhttps://gist.github.com/markabe/cd39dae738fc633b0105\nThe remote tests run fine in ruby 1.9.* but fail in 2.*\n. 1.9 and 2.0 appear to get their data from different places.\nhttp://ga.be/blog/2013/10/02/fixing-rubygems-ssl-issues-certificate-verify-failed/\nhttps://groups.google.com/forum/#!topic/rubyinstaller/DVIDvs7xKC0\n. I believe so.\n. I've informed them but it is not a priority for them.\n. Perhaps.  I've tried OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE but didn't have any effect.\n. @ntalbott Made suggested changes.  This bit here where I supply the responses appears to be LIFO rather than FIFO.  It looks strange but I suppose it is OK.\n. I was unfamiliar with the Nokogiri underscore paradigm and thought for a second that the original line had a typo in it as well.  So if there is a problem here, it seems it is because this convention looks like there is an unintentional underscore.  So even with parentheses it will look like an errant underscore to the uninitiated.  So I probably won't bother with an extra PR at this point.\nHowever if I make any changes in this adapter in the future I wouldn't mind adding the parentheses to make the oder of operations more explicit.\nThanks for reviewing.\n. ",
    "matsubo": "I'm using this code in production.\nThis payment gateway does not provide sandbox environment. However they gave us test credit card number. Endpoint is identical to test and production.\nI will fix the issues you mentioned and test works.\n. ok. sorry for being late.\n. @ntalbott Thanks for the response. But can you please clarify \"The expected interface\" ?\n. @ntalbott Thank you for referring the code. I added a test case for purchase method after authorization with reference transaction.\n. @ntalbott Thank you for your review.\nIf the merchant_code  parameter is set, the authorisation request can refer to the orders in different merchant code.\nWorldPay offered this parameter and they set permission to refer to the other merchant code.\n. Thank you for merging and review.\nI'll improve following request after a while.\nhttps://github.com/Shopify/active_merchant/pull/1063\n. ",
    "hps": "I simplified the code as you asked. Could you please give it another look. \nThanks.\n. @ntalbott is there anything else I need to change or do?\nThanks\n. @ntalbott I resolved the issues you put in line, and I created a common commit method. I left the Response mapper in because our gateway was originally designed for POS systems, and most of our error messages are cryptic to the end user.\n. @ntalbott https://developer.heartlandpaymentsystems.com/SecureSubmit/Documentation\n. CreditAccountVerify is used to verify that the card is active. \n. ",
    "rafiamafia": "Um..are we evening using supported_countries for any sort of validation? Especially, in case when the caller passes a currency as part of the options. According to the code it seems like you take currency from the options and just post it as part of the request to Authorize.net API.\nruby\ndef add_currency_code(post, money, options)  \n  post[:currency_code] = options[:currency] || currency(money)\nend\nWhats the point of supported_countries?\n. @ntalbott I have opened a pull request @ https://github.com/Shopify/active_merchant/pull/1099  Kindly let me know your thoughts.\n. I am open to harding coding :login instead of calling super.first and :password vs. super.last - considering these are symbols and not strings. It might be easy on the eyes.\nFor example:\nruby\ndef self.required_login_params\n  @@required_params ||= [:login] #vs. [super.first]\nend\n. @ntalbott Kindly let me know your thoughts.\n. I like your feedback. Could you emphasize on the second bulletin; I would like to understand why it is an anti-pattern to use :login and :password as common params. Because we inherit from the same Gateway class it made sense (to me) to add inherited attributes considering at least 70% of the gateways only require :login and :password to be initialized.\nI will be working on the proposed changes and thanks for the great feedback.\n. Yes, I will get back to this. Please do not close the pull request, we are just prioritizing our project and at this point there are a few things that take a higher priority.\n. ",
    "Viruthagiri": "I'm getting this error\nbash: script/generate: No such file or directory\nI googled. This is the answer I got\n```\nRails 3 is your problem (or rather the cause of). Since rails 3 all of the \"script/whatever\" commands have been replaced with \"rails whatever\".\nSo now you want \"rails generate ...\" or \"rails server\" instead.\n```\n. I'm still not sure how to do that since i installed as a gem in my ubuntu 12.04.  Could you tell me how to do that?\n. Ok Thankyou. \nBy the way one more question. I would like to use paypal and stripe gateways in my saas project. \nIs there any activemerchant demo application available to understand everything?\n. ok. Thanks for your time\n. ",
    "msdundar": "Why still not merged?\n. @ntalbott That issue should be fixed with my second commit.\n\"All is well \u2014 The Travis CI build passed\"\n. ",
    "jsoma": "If you include the field delimiter in an order description, ActiveMerchant chokes on the response. \nFor example, the default delimiter is ,. If your order description is 2 cats, orange, then parsing fails because it assumes each field is separated by a comma. As a result, 2 cats and orange are understood to be two separate fields.\nActiveMerchant tries to support passing a delimiter option but unfortunately doesn't actually send it over to Authorize with the request. You can see more from the API end on page 40 of this Advanced Integration Method guide or this knowledge base question.\n. I suppose you could substitute the delimiter in the description with something else (e.g. pipe for comma). That way you might wonder where your commas went in the response, but at least AM wouldn't choke on it?\n. ",
    "Aaron-Harrison": "@bslobodin Apologies, I am a noob with Github. I have now re-ordered the currencies keeping the original currencies at the top, the rest are then alphabetical. The extra commits were due to my IDE keeping tabs insteads of 2 spaces which caused more incorrect deletions/additions of code.\n. ",
    "artemaminov": "In case of using spree or whatever else, that automatically generate it's own form tags\n. ",
    "ksondere": "Submitting code for the authorizenet xml gateway. This has been implemented to provide both CP & CNP transactions on consolidated accounts.\n. Hi Boris,\nSorry to be slow on this but I did a rebase but uh...there were no changes\nto push.\nThanks Kelly\nOn Mon, Apr 28, 2014 at 8:21 AM, Boris Slobodin notifications@github.comwrote:\n\n@ksondere https://github.com/ksondere, sorry about the delay, I'll be\nreviewing this shortly. In the meantime, would you mind rebasing off master\nagain to bring this up-to-date?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-41563578\n.\n. Ok, so here is where I sink into stupid :-)  do I just push this then now\nthat I've rebased?\n\nOn Thu, May 1, 2014 at 11:50 AM, Boris Slobodin notifications@github.comwrote:\n\nThere may be no changes per se, but the diff would be against a new master\nwhere things like LitleOnline gem had been removed since you branched.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-41935490\n.\n. OK, so I did a \"git rebase\" from my fork, then a \"git push -f origin\nmaster\" on my fork.\n\nHope that's what I was supposed to do.\nOn Thu, May 1, 2014 at 1:59 PM, Boris Slobodin notifications@github.comwrote:\n\nYea, I think you need to force push (-f).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-41950033\n.\n. Did the rebase today.\n\nOn Thu, May 1, 2014 at 2:21 PM, Boris Slobodin notifications@github.comwrote:\n\nYes, what @mabeller https://github.com/mabeller said, otherwise nothing\nis actually changing.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-41952159\n.\n. Hey, sorry to be so slow responding.  I just got back to doing some on\nthis.  So I've checked in just initial code and thought I'd get your\ncorrections more along the way.  Just checked into\nhttps://github.com/ksondere/active_merchant in the workspace branch.\n\nAny feedback on initial work is great. thanks.\nOn Wed, May 7, 2014 at 6:08 PM, Nathaniel Talbott\nnotifications@github.comwrote:\n\nAlso we're still not seeing your rebased version here; did you force push\nit into this branch?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-42498445\n.\n. Thanks Nathaniel.  I've just created the new pull request.\n\nOn Thu, May 22, 2014 at 11:55 AM, Nathaniel Talbott \nnotifications@github.com wrote:\n\n@ksondere https://github.com/ksondere I'm going to close this PR; if\nyou could open up a new PR based on your new branch, that'll make it easier\nto give feedback. It's fine if it's not ready to go.\nI did take a look, and while I have some suggestions, it looks like things\nare headed in the right direction. I'll drop feedback on the code once you\nopen the new PR. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-43921880\n.\n. @ntalbott, just checking in with you.  I checked in some stuff Friday.\n. Wow, thanks for the feedback Nathaniel!\n\nOn Thu, May 22, 2014 at 1:44 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nI added some comments - let me know if you have any follow-on questions.\nIn general I like where this is going.\nI'll note I always make revisions when I merge, so don't feel like it has\nto be 100% perfect; mostly I just need the approach to match what\nActiveMerchant expects, and more importantly, I need rock-solid remote\ntests since they let me clean up with confidence.\nI'm psyched to see this go in - will be great to have Authorize be using\nthe latest and greatest!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1219#issuecomment-43935155\n.\n. @ntalbott all initial recommendations are checked in now.  Thanks again.\n. Hey, Nathaniel, sorry you haven't heard from me.  Been out for the week.\n\nOn Thu, May 29, 2014 at 8:48 AM, Nathaniel Talbott <notifications@github.com\n\nwrote:\n@ksondere https://github.com/ksondere any progress on getting the rest\nof the API implemented?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1219#issuecomment-44539888\n.\n. all remote tests checked in.\n. Hey, @ntalbott sorry I've been on vacation.  Got your feedback and have responded to all I think but the refund issue.  I uh..will respond to this as soon as I'm able.  Thanks for the feedback.  Much appreciated.\n. @ntalbott, ok I think all issues mentioned are now corrected.  Eager for any more feedback.  You've been fantastic help @ntalbott, most appreciated.\n. @ntalbot, any more thoughts on what you think ought to be worked on?  If not then uh...how would you like to do the wrap up on this? \n\nThanks,\nKelly\n. @ntalbott just checking in with you to see what else needs to be done.  Thanks my friend.\n. OK, working on the refund issue.  Hopefully I'll have something by Tuesday next.\n. @ntalbott went back and re-examined the old gateway and it uh...we don't seem to have any case where we didn't use money amount for a refund.\nIn any case the new xml api does require it as did the old one.  Is this sort of a newer requirement in the active_merchant api?\nThanks @ntalbott \n. Thanks @ntalbott..look forward to hearing from you next week!\n. @ntalbott...any x_field can be passed in the user fields element.  So for example.\n<userFields>\n      <userField>\n        <name>MerchantDefinedFieldName1</name>\n        <value>MerchantDefinedFieldValue1</value>\n      </userField>\n      <userField>\n        <name>x_currency_code</name>\n        <value>USD</value>\n      </userField>\n</userFields>\n. @ntalbott Also for general documentation that might be of help to you.\nhttp://developer.authorize.net/api/reference/\n. @ntalbott...this is a workaround for now.  These will become first class elements in the XML API but for now this is what we need to do.\n. @ntalbot just so I understand.  This is not working when you do it?\nOn Wed, Jul 9, 2014 at 2:02 PM, Nathaniel Talbott notifications@github.com\nwrote:\n\n@ksondere https://github.com/ksondere the issue is that we can't put\nthis new API in place if I can't map all the functionality directly over,\nas we'll break existing ActiveMerchant users if we do. It's infeasible to\nhave currencies in particular not get transmitted.\nWhen will first-class support for these fields get added? We'll probably\nhave to wait to merge this until all functionality can be matched from the\nold API.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1297#issuecomment-48533553\n.\n. It is not a first class element in the XML API.  Nevertheless it is mapped\nto the backend.  So uh...yes the form is not pretty being in the user\nfields but it does function.\n\nOn Wed, Jul 9, 2014 at 2:07 PM, Kelly Sonderegger ksondere@gmail.com\nwrote:\n\n@ntalbot just so I understand.  This is not working when you do it?\nOn Wed, Jul 9, 2014 at 2:02 PM, Nathaniel Talbott \nnotifications@github.com wrote:\n\n@ksondere https://github.com/ksondere the issue is that we can't put\nthis new API in place if I can't map all the functionality directly over,\nas we'll break existing ActiveMerchant users if we do. It's infeasible to\nhave currencies in particular not get transmitted.\nWhen will first-class support for these fields get added? We'll probably\nhave to wait to merge this until all functionality can be matched from the\nold API.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1297#issuecomment-48533553\n.\n. @ntalbott  here is the source I use for that\n\n\nhttp://www.authorize.net/support/merchant/wwhelp/wwhimpl/common/html/wwhelp.htm#context=Merchant_Integration_Guide&file=4_TransResponse.html\n. Hey while I have your attention...a little question.  I blew up my ubuntu box and did a reinstall.  Can't even remember how I got around this last time but my gem install of mongrel for active_merchant fails.  I've definitely seen a lot of rants against mongrel while searching for an answer but...I'm stumped.  Any suggestions on getting the native extension of mongrel to build?\n. Ok. Just trying to clear up my confusions that I have.  As you know by now I'm easily confused @ntalbott :-)\nThe work main work I did was in three sets of files.  \nlib/active_merchant/billing/gateways/authorizenet.rb\ntest/unit/gateways/authorizenet_test.rb\ntest/remote/gateways/remote_authorizenet_test.rb\nThese were done in the workspace branch.  \nI'm a bit confused as to why I see my code changes in what were originally the old gateway files.\n. OK, just checking.  Initially I was told they wanted both in place.  In any case I thought that might have been what happened and uh...just wanted to make sure because the diffs weren't making sense to me.  Now they'll make a bit more sense\n. OK @ntalbott . Nice changes my friend.  Looks good to me.  The one question I had is uh...actually ok. So I think this should be good to go.\n. @ntalbott, long time no see, wondered what your thoughts were on this.\n. yes, authorizenet.rb will be the replacement for authorirze_net.rb\nOn Thu, May 22, 2014 at 1:35 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nIn lib/active_merchant/billing/gateways/authorizenet.rb:\n\n@@ -0,0 +1,282 @@\n+module ActiveMerchant #:nodoc:\n\nThis should just replace the authorize_net.rb gateway, rather than being\nwhole new gateway, right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1219/files#r12969641\n.\n. So here your talking about the fact that builder is created in each request\nyes?  Nice example you game me I'll go for that change.\n\nOn Thu, May 22, 2014 at 1:36 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nIn lib/active_merchant/billing/gateways/authorizenet.rb:\n\n\nself.live_url = 'https://api.authorize.net/xml/v1/request.api'\n  +\nself.supported_countries = ['US']\nself.default_currency = 'USD'\nself.supported_cardtypes = [:visa, :master, :american_express, :discover]\n  +\nself.homepage_url = 'http://www.authorize.net/'\nself.display_name = 'AuthorizeNet Gateway'\n  +\ndef initialize(options={})\nrequires!(options, :login, :password)\nsuper\nend\n  +\ndef purchase(money, payment_source, options = {})\npayload = Nokogiri::XML::Builder.new do |xml|\n\n\nRather than have all this boilerplate in each file, see the approach I\ntook in hps.rb to share the boilerplate:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/hps.rb#L40-L48\nYou'll need to adapt it, but it should reduce a lot of duplication.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1219/files#r12969694\n.\n. Nope no address2 :-)\n. done.\n. done.\n. removed the file.\n. removed the file.\n. same as above\n. Consolidated accounts been activated.  As for this file it's been deleted.\n. As per an earlier discussion I think you mentioned we wouldn't start by doing this.  I left it in case uh...this was now wanted.\n. same as above.\n. Did this work to set the nil value to 0?  I thought I had tried this and it failed with an invalid amount.\n. \n",
    "mabeller": "You might need to follow the instructions in this link. That is, you need to update your forked repository by fetching the master branch from Shopify/active_merchant and rebasing your code from that. Based on your description, you\u2019re probably just rebasing your branch off the master branch in your own repo, which will be behind master in Shopify/active_merchant.\nhttp://robots.thoughtbot.com/keeping-a-github-fork-updated\nOn May 1, 2014, at 1:09 PM, Kelly Sonderegger notifications@github.com wrote:\n\nOK, so I did a \"git rebase\" from my fork, then a \"git push -f origin \nmaster\" on my fork. \nHope that's what I was supposed to do. \nOn Thu, May 1, 2014 at 1:59 PM, Boris Slobodin notifications@github.comwrote: \n\nYea, I think you need to force push (-f). \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1112#issuecomment-41950033 \n. \n\u2014\nReply to this email directly or view it on GitHub.\n. \n\n",
    "berkcaputcu": "Done\n. > Can you add a remote test that confirms this works? Right now you're confirming that your option gets passed through, but nothing here shows that Stripe supports this\n\ud83d\udc4d done\n. > These changes will assign the Response#error_code to the response type if no code is provided. This allows us to have a \"default\" error code for each Stripe response type when no actual code is provided.\nIn which cases, we don't get an actual error code from Stripe? What's the use case for this change?. api_error types (and other error types) are explained in more detail here: https://stripe.com/docs/api#errors\nThis LGTM. not sure where this is used but this can be a Set instead of Array\n. should we log something if it falls back to this case? is it expected that it falls back to else?\n. :heart: \n. I see, Array.wrap is a tricky one. This comment is not in the scope of this PR anyway, so :+1: \n. /s/teset/test. ",
    "ahawthorne": "This differs from pull request #997 which works when using Legato with the secure payments profile (SPP) API. However, Legato also supports using the Process Transaction API which is much simpler in that only the token needs to be provided to make a purchase - which I've implemented here. Is there something different you'd like to see in order to reconsider this?\n. Thanks for the fast response! I'll get back to you soon.\n. ",
    "stephenfb": "Hi - thanks very much for merging this!\nTwo quick things\n1. the region should not default to NA - the big advancement to this new merge was the ability for USD and CAD currencies to go through the NA server, and the rest of the world - GBP, Euro etc (180 other countries) to go through our UK server.  By defaulting to NA, you exclude the 180 other countries and we have a number of UK/Euro/Francs customers waiting to use Shopify with iATS.\nCould you make change back for CAD and USD to go through NA server, but everything else to go through UK server?  All functions (charge, refunds etc) are the same, just the server changes.\n2. Refunds dont seem to work - when I select refund on an order the box is empty:\n\n. @ntalbott You are correct, the cr card country is not the correct determination of the region.\nThe region is determined by the currency of the store. In other words if the currency of the store is CAD or USD - then the NA server should be used.  If the currency of the store is GBP, Euro etc (basically anything else) - then the UK server should be used.\nThis is because iATS links the merchant account to the currency of the bank account where the funds need to be deposited.  So for example GBP sales will go to a GBP merchant account and GBP bank account via the UK server, USD sales will go to USD merchant account and USD bank account via the NA server.\n. @ntalbott No, the merchant credentials are unique to a currency - so there will not be a case where the same set of merchant credentials will interact with both URL's.  If a client wants a USD store and funds deposited in USD - they will get one set of merchant credentials, and another set if they have a GBP store and funds deposited into GBP account.\nWhat may be a request is that a client may want a USA store and a GBP store with funds going into 2 different accounts.  In that case they would need the ability to store 2 merchant credentials  and link the correct product price to the correct merchant credential - or they would need to open 2 Shopify stores.\nI dont think Shopify can manage multiple payment gateways in one Shop, so it seems they would need to open 2 Shopify stores if they wanted to process in different currencies.\n. @ntalbott I think the best solution at this stage is for iATS to have 2 services in AM - iATS NA (for all NA transactions) and iATS EU (for all transactions outside NA).  Then a client just needs to choose the correct one based on where they are and what iATS account they have.  Could this work?\n. Please let me know if there is anything you would like me to do to help.  Can create 2 AM bases, rename (NA and Euro) and do pull request if like?\n. FANTASTIC!!! Thank you!  Please let me know when done and I will go in an test.\n. @bslobodin hi, any news on this, did you manage to get it done this week?\n. Thank you!\n. @bslobodin Hi, any news on this?\n. Hi - just following up - any news on this yet?\n. @bslobodin  @ntalbott Hi, any news on this?  Has this been completed yet?  Please let me know if there is anything need to do my side.  Have more EU customers keen to use Shopify and iATS and waiting for this release.\n. Thanks @ntalbott.  @odorcicd @bslobodin can you help please?\n. ",
    "Irostovsky": "@ntalbott added the unit tests. There is no ability to add remote tests for reference transactions, because it needs 'user actions' on Paypal account.\n. ",
    "Kagetsuki": "Just checking in here. I'll be monitoring this and will try to catch updates. I have two apps using AM with JPY, one using AM directly and hooked to WebPay and one Spree app with the Stripe JPY beta. I'll test both and submit patches if either gateway behaves irregularly with the fixes.\n. I hate to bump this but I'm still kludging AM and it's a mess. Can we please get some official movement on this at some point in the near future?\n. OK, praboud on IRC helped me narrow down what looks to be the issue and I think it's a show-stopper in ActiveMerchant gateway.rb.\nSpecifically the localized_amount method is returning an amount unless it is a non_fractional_currency whereas it should probably be returning it if it is a non_fractional_currency:\nhttps://github.com/activemerchant/active_merchant/blob/d04532e744cb7f370e860fed419eaa70b1462597/lib/active_merchant/billing/gateway.rb#L260\nTo make things worse, the specs actually check to make sure non-fractional currencies are being mangled:\nhttps://github.com/activemerchant/active_merchant/blob/dcc2f49d60486d9a08fcac20059c537ab1772931/test/unit/gateways/gateway_test.rb#L85\n100 yen localized is 100 yen, NOT 1 yen. Furthermore, would this not NOT return a localized amount for a fractional currency? I seriously suspect this method is NOT doing what it is intended to do, and I fear that everywhere it has been used someone is expecting it to return the messed up output.\n. @ntalbott Actually it looks like the gateways I checked are taking amounts in cents (EG $4.00 = 400) and are using this. I'm fairly certain localized_amount is doing the inverse of what it was intended to do and developers who are using it were assuming this was the intended output and used it improperly in their implementations.\n. ## Options:\n1. Leave it broken so nobody has to re-factor and kludge the f* out of any gateway that handles both fraction and non-fraction currencies.\n2. Fix it and re-factor every gateway currently using localized_amount + fix tests so they actually checking to make sure localized_amount is doing what it was intended to, rather than doing the inverse of what it was intended to do [as it currently is].\nChoose 2 and I'll buy you a coffee. It looks like a proper fix could come with a few headaches.\n. So I spent some time yesterday trying to fix this and I realized it's not only going to be difficult to fix but it's also going to effect and require the attention of essentially everybody using ActiveMerchant.\nThe Fix\nFixing this isn't as simple as changing \u300cunless\u300d to \u300cif\u300d. While that DOES fix the \u300clocalized_amount\u300d method, it does not fix the \u300camount\u300d method which, if we have \u300cGateway.money_format = :dollars\u300d, will format non-fractional-currencies like fractional currencies anyway. I suspect at some point it either was or it was the intention that money objects were being passed to \u300camount\u300d which would have contained the currency and could be checked with \u300cGateway.non_fractional_currency?\u300d. That is however not currently the case as money objects are being phased out in favour of universal integer representation which means amount will now need to take in the currency as well in order to avoid conversion to fixed 2 digit of non-fractional-currencies regardless of weather or not money_format is set to :dollars or :cents.\nModified Tests\nI've modified the specs here: https://github.com/Kagetsuki/active_merchant/blob/fix_localized_amount/test/unit/gateways/gateway_test.rb#L83\nFor quick reference the original: https://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/gateway_test.rb#L83\nThe original is basically checking to make sure the amount is mangled in the same way regardless of money_format. It's essentially checking to make sure that even if you have a non-fractional currency and you went out of your way and made a futile attempt to stop your amounts from being ruined by setting money_format to :cents it will still mangle them.\nOf course if this was the intention I'd really like to ask why things were implemented this way. @melari , you wrote those specs, can you take a look and explain if / why this is the expected behaviour? \nThe Greater Effect\nFixing this will effectively mess up every single active installation of ActiveMerchant with a non-fractional-currency where someone has kludged on multiplying amounts by 100 before sending them to the gateway. For a moment I assumed gateways such as WebPay, which is JPY only and doesn't seem to explicitly call localized_amount, were unrelated so our own existing app using it would not be effected. But then I remembered we wrote a method that multiplies by 100 before sending to the gateway. I think a lot of people have done the same thing and if they just update their gem after this fix has been implemented they'll all the sudden be charging 100 times more. In fact I suspect everybody using a non-fractional currency has done this.\n. Sorry to bump this but I'd like to point out that Stripe JPY is currently in beta - if this is not fixed before they go into general release it could be a huge issue. I recommend we do something about this as soon as possible. I'm willing to contribute some coding time but first the Active Merchant maintainers need to decide on a plan of action. Please advise.\n. @ntalbott I've got everything kludged right now and my app is running - I just wanted everyone to be aware of this and want to see a fix ASAP. As for my \"approach\" I was asking what the proper one would be to fix this because I didn't see any activity. It looks like #1153 is going to eventually fix this anyway - so I'm just going to close this and let people who actually know what they are doing handle it. I'll subscribe to #1153 as well. PLEASE make sure to mention me when you want to test zero-decimal-currencies and I'll jump right on it. If there's anything else I can do please don't be afraid to ask.\n. ",
    "bani": ":thumbsup: \n. ",
    "bcackerman": "Any push from others?\n. @ntalbott Any examples how to use the solution id to create a transaction?  \nDo I put it in here?\nActiveMerchant::Billing::AuthorizeNetGateway.new(\n          login:      @login,\n          password:   @password\n        )\nOr do I add it to the gateway.purchase(amount, credit_card, options) options? Just looking for an example, thanks!. Ah, like this?\nActiveMerchant::Billing::AuthorizeNetGateway.new(\n          login:      @login,\n          password:   @password,\n          application_id: ENV['AUTHORIZE_NET_SOLUTION_ID']\n        ). Hmm, doesn't seem to be working @ntalbott Any other ideas?. ",
    "kieranklaassen": "Since Square opened up their API 2 days ago I give a +1\n. ",
    "aksh0925": "+1\n. ",
    "sejalgupta3": "+1\n. ",
    "nicklandgrebe": "+1\n. ",
    "pelletencate": "+1, this would be awesome to have!\n. ",
    "stacybchapman": "+1 We would love to have this as well!! \n. ",
    "hadees": "Looks like square was already doing it themselves.  I wonder why they won't release the code.\n. ",
    "jawspeak": "See this PR for a working implementation: https://github.com/activemerchant/active_merchant/pull/2242. FYI @snostorm this is the branch I mentioned, I'd love your feedback on this!\n. @rwdaigle or @shasum is there anything I can do to help? \n. Great question @rwdaigle, this is my first PR to ActiveMerchant but here are some things you may please consider for including this:\n- This is the same model as used in stripe's integration, but they also accept a raw pan submission in addition to a token that comes back from their stripe.js tokenizer. (Docs: https://stripe.com/docs/api#create_charge-source, impl: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb#L408)\n- There is a large Square user base that want to use ActiveMerchant for their ecommerce sites. I work at Square and we have some large partner sites that want to offer Square to their merchants but their codebase is all using ActiveMerchant and it would take 6+ months to prioritize the raw square integration vs using it in ActiveMerchant. This would help them adopt faster.\n- (The biggest reason) - Square's non-PAN API lets merchants avoid PCI compliance since they do not handle payments. With EMV growing it is harder to use cloned magstripe cards and more card fraud is moving online, also many data breaches have made merchants very concerned w/ card harvesting. (See this recent list of skimming sites for an example of the kind of concerns merchants are afraid of https://www.reddit.com/r/netsec/comments/56xou4/another_5900_stores_found_skimming_full_list) \nThanks! happy to answer any questions\n. Thanks @jnormore, @rwdaigle, and @duff for the feedback and comments so far! \nWhile we (I work at Square) can't comment about future products, would you be comfortable if the Square gateway accepted direct PANs? For instance if that was an option sophisticated merchants could enable, would adding direct PAN support to this PR be better?\nOr, would this better make sense as an \"Integration\"? https://github.com/activemerchant/active_merchant/wiki/GatewaysVsIntegrations Note: it seems that has moved to the offsite_payments gem: https://github.com/activemerchant/offsite_payments/tree/master/lib/offsite_payments/integrations\nThe area I'm wondering about is we do support all of these APIs, however we offer the benefit preventing PCI compliance from merchants, since they use the token for the PAN instead of the PAN directly. \nSupported:\ndef purchase(money, card_nonce, options={})\n      def authorize(money, card_nonce, options={})\n      def capture(ignored_money, txn_id, ignored_options={})\n      def refund(money, txn_id, options={})\n      def void(txn_id, options={})\n      def verify(card_nonce, options={})\n      def store(card_nonce, options = {})\n      def update(customer_id, card_id, options = {})\n      def update_customer(customer_id, options = {})\n      def unstore(card_id, options = {}, deprecated_options = {})\nHowever, instead of raw, sensitive PAN, it uses a tokenized PAN. \nSo this simple usage example would be included:\n``` ruby\nrequire 'active_merchant'\nUse the Square sandbox\nActiveMerchant::Billing::Base.mode = :test\ngateway = ActiveMerchant::Billing::SquareGateway.new(\n  login: 'sandbox-sq0idp-Wq3...'\n  password: 'sandbox-sq0atb-DC-...'\n  location_id: 'CBxx...')\nActiveMerchant accepts all amounts as Integer values in cents\namount = 1000  # $10.00\ncard = 'tokenized-pan'\nThis purchase call could also be:\nauthorize, for a later delayed capture\ncapture, within 6.5 days of an auth\nrefund, to refund fully or partially a previous purchase or capture\nvoid, for an authorized but not yet captured\nstore, to store a card on file with a customer_id\nunstore, to de-link the card-vaulted card from the customer\nupdate, to update the customer's vaulted card on file\nresponse = gateway.purchase(amount, card)\nif response.success?\n  puts \"Successfully charged $#{sprintf(\"%.2f\", amount / 100)} to the credit card token #{card}\"\nelse\n  raise StandardError, response.message\nend\n```\nThe standard universal API for \"Integrations\" doesn't seem to quite fit the above. \nThoughts? Thanks (:\n. Thanks for the feedback. Since we want to encourage all merchants to not need to worry about PCI compliance by offloading that responsibility to Square, yet still provide all the functionality of auth, capture, purchase, refund, void, plus recurring billing / stored card on file that a traditional direct PAN gateway has - hopefully the tokenized APIs will be something you all feel comfortable with adding :) \nIf not, I'm going to need to continue working with people on our side as accepting raw PANs is something that we're discouraging merchants to have to think about. Hope we can make a bit more headway before the holidays, although I understand this is an important and thoughtful consideration that may take some time. cheers!. Thanks @rwdaigle I apologize for my delay in following up on this. I do appreciate the feedback and thoughtful response. We'll certainly keep this in mind at the point a direct PAN interface is available from square.. Here's the details for people that reach this declined PR and want to use Active Merchant with Square: https://medium.com/square-corner-blog/activemerchantsquare-for-squares-e-commerce-api-111ea63e530a \nthanks!. ",
    "frojasg": "We just published a gem to extend active_merchant to have Square API integrated. Check it out!. we published a gem called active_merchant_square to extend active_merchant to include Square API . ",
    "hossamhossny": "Last thing I know about the lack of support to Square is that it was because Square API doesn't allow PAN processing, has this changed?. @jasonwebster Can someone take care of this please?. @jasonwebster Sorry for missing those and for the delay!\nI have just committed the unit and remote test files.. @davidsantoso I noticed that you are very active for approving new gateways commits, so mentioning you here =) I hope you don't mind.. Hi @jasonwebster \nHaven't you had the chance to review this yet? Can I get any estimates on reviewing this?\nAlso, is there any idea on the release date of v1.65?\nI see several gateways implemented and waiting for review since February, but I have no idea how to contribute/apply as a commiter to speed things up a little bit since everyone seems too busy here.. @jasonwebster I have added the missing :address_line2 to post options. With regards to the :capture optional option it is a flag that if set to false, the charge would be just authorized. If left blank - default is true - then the charge would be authorized and captured.\nI don't see why a user would pass this option directly to #purchase and override its default true value when it is never wanted.\nIt is tested successfully with the remote test unit. Anything wrong regarding this I should take care of?. @jasonwebster any updates please?. @jasonwebster It's been a couple of weeks since you lastly reviewed this, but then I am not sure if this requires further improvement or is it ready to be merged. . @bizla @shasum @curiousepic \nCan anyone please review this and feedback if there is anything needs improvement, or merge it if it's good to go?\n```\nUnits test: 37 tests, 112 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n```\nRemote test: 14 tests, 41 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n. @bizla Sorry to bother but where did I go wrong here? 1 test has failed.. It worked but something fails here, I think it's coming from the invalid_response but not sure how is that relevant to the failed tests.. I think it's failing because the gateway returns nil with 401 unauthorized, and JSON tries to parse that in the response.. @bizla The last commit fixed the failed remote test. Indeed the failed test was as I thought. There are 3 failed unit tests all due to test expecting nil as a result but instead getting the invalid_response message! :)\nWhat do you suggest to fix this?. Should be working now, thanks! Please re-review \ud83d\ude04 . @bizla should be good to go now, please review :). @bizla So is this mergeable now or is it pending @jasonwebster approval? Stripe has just listed Trexle gateway in its integrations page \ud83d\ude4c   . Can you guys update me on this? What is it waiting for?. @davidsantoso Take a look now please.. @davidsantoso Can you let me know your questions regarding this, if any? I understand you are busy, but this is being reviewed for weeks already and mostly is ready to go.. @davidsantoso Thanks, I am very confused though about this https://github.com/activemerchant/active_merchant/compare/master@%7B1496960317%7D...master and this https://github.com/Trexle/active_merchant/commit/3555c7cc93b9afed4ed54ebb1f39bd8504d2beb3 but I think it is a github issue, so I contacted them. However, did you have to close this PR as oppose to \"merge\" it? and how can I make future updates for the gateway?\nSorry for bugging you about this.. @davidsantoso Please review this when you have a chance.. @davidsantoso @curiousepic @jasonwebster \nCan someone take a quick look at this?. added :address_line2. This resulted in a couple of failed tests where the :capture flag being true when it needed to be false. I think the right way is:\ndef add_capture(post, options)\n  post[:capture] = options[:capture] == false ? false : true\nend. if body[\"response\"]\n          success_response(body)\n        elsif body[\"error\"]\n          error_response(body)\n        end\nShouldn't this forbids success_response(body) from being called if body[\"response\"] is nil?. Are we talking here about body['error_description'] or body['error'] being nil?. But we omitted here the if/elseif block that checks for body[\"response\"] and body[\"error\"] for not being nil. Am I missing something?. Thanks for the amazing explanation! \ud83e\udd47 \ud83d\ude04 \nWhat should I return though as an error message? I couldn't find something similar in other gateways implementations. Same thing for error_response(body), what should I return?\nI know I cannot come with error messages from my head here \ud83d\ude06 . Totally clear for me now.. I will fix once I know what should I return when validation checking fails \ud83d\udc4d . Oops! I should just return unparsable_response(raw_response). an orphaned GoogleBot living in Mountain View \ud83d\ude03  . We have to send a capture flag set to false in order to just authorize the charge and not actually capture it. Unless you want me to pass capture = false in the add_capture?. https://docs.trexle.com/#api-Charges-Charges. It will capture the charge.. I definitely can remove the add_capture(post, options) and substitute it with:\ncommit(:post, \"charges/#{CGI.escape(token)}\", { amount: amount(money) }, capture: true)\nWill you want this?. That did it! :). See @jasonwebster was saying this earlier but I never got it correctly.. Nope I ditched it.. @bizla So, are we there yet?. Yes, 4xx errors too. Do I need to get rid of the post[:capture] = true line?. I implemented this the same way other gateways do it. For an example, look at wepay..\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/wepay.rb#L177-L186\nOr pin payments..\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/pin.rb#L160-L174\nI see the Digitz gateway is not doing it differently handling response codes outside 300..499\nwhich is the same concept for Trexle.\nCan you recommend a better way of doing this based on existent gateways?. @davidsantoso Can I have an answer please?. @davidsantoso Thanks for understanding! I have done the squash and rebase; all good now.. ",
    "andreimc": "Everything is backwards compatible so nothing should break for anyone \n. hey ntalbott, removed the request response for the data_cash implementation\nthank you very much for the quick response hopefully it is ok to be merged now\n. I have added some remote tests making sure that when they are set the purchase is still successful\n. ",
    "jeromecornet": ":shipit: \n. ",
    "timdown": "Thanks for not having got around to it yet. The application I'm working on has hundreds of customers using recurring PayPal payments and I really don't want to have to rip out ActiveMerchant and find something else.. ",
    "hishammalik": "Thanks @ntalbott. Will do.\n. ",
    "ta": "Replaced by PR #1189\n. @ntalbott Actually, it turns out that for some acquirers hardcoding currency is not allowed.\nSo I guess that parsing options from #store() to add_amount is a more correct approach. Do you agree? \n. @ntalbott sorry - I've been away a few days. In short, yes. Some acquirers only allow specific currencies (as specified in the agreement between the acquirer and merchant), so me hardcoding currency in store() is not a good solution. I'm open to suggestions :)\n. Thanks :)\n. @ntalbott: We (QuickPay) have launched a new platform (v10) with a completely new API - the old (v7) and new platforms will co-exist for some (longer) period of time. This is why the change is substantial. \n. @ntalbott: of course :)\nWhat kind of changes would you like me to describe? The change should be 100% transparent for the AM user (in a new PR that we'll create soon).\nAs I mentioned v10 is a completely new platform and API, and for some time we need to support both platforms (v4-v7 and v10) at the same time.\nPlease let me know if you need more information\n. @ntalbott This PR is the successor of #1649 - Thx\n. @ntalbott Thank you for the review - I've now incorporated the changes pointed out by you apart from requires! method (please see inline comment).\n. Thank you for responding so swiftly!\n. As far as I know the guys at Shopify are/have been extra busy these last few days (or weeks).\nI don't know if @ntalbott can say something that might resemble an ETA?\n. @girasquid: No, that was not intentional. I've added some commits to this PR that fixes this and a few other minor issues. Thanks for testing and reporting - remote tests are now all green in my checkout.\n. @girasquid: I've squashed my changes into a single commit - ok?\n. @girasquid: oh, you want me to squash into f6b9d73 ?\n. @girasquid: +1, is now squashed into a single commit. Anything more I can do?\n. @AlonsoGonzale: Technically we are waiting for Shopify to pull the updated AM into their applications ;-)\n. @UgoMare: The code is merged into AM master (https://github.com/activemerchant/active_merchant/commit/44b47b6cb67cc879e47429138f98ea67c5bc0118). No support for 3D-Secure as of yet, sorry.\n. @stentebjerg: YES - v10 is live and in production at Shopify :)\n. @aprofeit Thanks a lot for reviewing so promptly. We've now incorporated the changes you've asked.\n. I'd be happy to but it would be somewhat difficult to test via remote as some tests requires an active acquirer agreement, and the bug I've fixed originates from a situation where no acquirers are active. I would break the other tests.\nA unit test would really just test if nil || nil || true => true.\nIf I've missed something - please enlighten me :)\n. It can be done - IMO its really not worth it.\n. @ntalbott This custom check is implemented because requires! is an instance method. If you still feel we should change this, do you have any advice as to how we could best do this?\n. Hmm.. no, then it would return a boolean. It should return the error message from the last operation (if present)\n. My bad - I stand corrected :)\n. ",
    "vanboom": "Ok, I'll try.\nDate: Mon, 26 May 2014 08:00:08 -0700\nFrom: notifications@github.com\nTo: active_merchant@noreply.github.com\nCC: dvboom@hotmail.com\nSubject: Re: [active_merchant] Authorize.NET Gateway Is Not Sending Customer Emails (#1206)\n@vanboom especially in light of the work in #1219 this needs at least a unit tests, or it's likely to get lost when that work gets merged. Can you add a unit tests please? You'll probably want to look at CommStub for checking that the data is being passed as expected.\n\u2014\nReply to this email directly or view it on GitHub.                  \n. Hi, no, sorry,  I cannot get the test environment to set up on my machine.\n--- Original Message ---\nFrom: \"Nathaniel Talbott\" notifications@github.com\nSent: June 12, 2014 8:28 AM\nTo: \"Shopify/active_merchant\" active_merchant@noreply.github.com\nCc: \"Don\" dvboom@hotmail.com\nSubject: Re: [active_merchant] Authorize.NET Gateway Is Not Sending Customer Emails (#1206)\n@vanboom did you get a chance to add tests for this?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/1206#issuecomment-45890804\n. Please consider this simple PR for the Quickbooks gateway. \n. Same issue for Payeezy Gateway on 3/7/2018\nhttps://support.payeezy.com/hc/en-us/articles/223607367-Payeezy-Gateway-SSL-Digital-Certificate-Update-Details. ",
    "DarkFox": "Well, that was odd. When I ran the tests for 16b5fa2 locally in 1.9.2 they passed. Oh well.\n. ",
    "MauricioMurga": "@ntalbott, sorry about the confusion. I will make the pull request from the master branch because these commits were included in our last pull request.\nI will also include include a units test to show the effect of this new commit.\n. Thanks, these issues are no longer present in your fix. I will cancel this PR\n. @duff has this been merged?\nThanks\n. @duff Sorry, I did not see the merge. Thanks for the help\n. @j-mutter, message_to_purchaser documentation can be found here: https://www.conekta.io/en/docs/api#errors\n. @j-mutter, no problem :)\n. @ntalbott, @pjhyett, @brynary, @NZKoz, @robbyrussell , is there something I need to change for this PR to be merged? Please advise.\n. We do not use creditcard information for details. In this sense details[:name] can be different from creditcard.name.\n. It's not necessary, we just updated to the most recent version.\n. I've already updated the PR as requested! Let me know if you need anything else!\n. ",
    "douglascamata": "Sorry for the last commit message, there was a typo in 'moil', it should have been 'moip'.\n. Can anyone have a look at this?\n. @ntalbott yes, the gateway can accept a credit card. You just need to #purchase with the CreditCard instance and the amount of money, no options are required. \nLet me explain this gateway's interface a little bit, as it's different from the other implemented gateways I've seen. MoIP authorize request has nothing to do with the payment method, as you can see in #build_authorize_request, inside moip_core.rb. I just kept the payment method parameter in there to follow the API standard. \nThen, I needed to forward the payment method to #capture. But its standard interface doesn't receive anything regarding the payment method. So this was the only way I found to do it.\nDo you have any ideas? The payment method is really not necessary in this gateway's #authorize, only in #capture.\n. @ntalbott got it. I'll do that asap. Got another gateway integration on the way too :D\n. @ntalbott made another PR with the corrections. (#1233)\n. @ntalbott it only accepts purchases in Brazil, fact. \n. Well, I can see at least 2 other gateways that only works in one country and if you see the README, you will see many other examples. And that's still useful, IMHO, what if I wanted to use Shopify here in Brazil and support brazillian's payment gateways, mainly for users that doesn't have an international credit card or even any credit card?\n. @ntalbott yup, MoIP can be used in 2 ways: transparent checkout (which is implemented in this pull request) and another called \"Checkout MoIP\", where you're redirected to MoIP's own checkout page.\nWhy remove bank debit and boleto support? I don't understand. AM's scope is \"access dozens of different payment gateways\" and some of them offers different payments methods. It's a feature that every user of MoIP will want and all of its payment method are inside one single API, you just need to change some request parameters to change between them.\nAbout the neighborhood field in addresses: is it required that all gateways implemented in AM are integrated in both Shopify and Spreedly? They both can just not use MoIP, if it doesn't fit in their parameters. \nAll these gateways only works in a single country (don't take MoIP and RedeCard in count, as I generated this list in our fork): \n- Authorize.Net CIM - US\n- Balanced - US\n- Banwire - MX\n- Barclays ePDQ Extra Plus - GB\n- Barclays ePDQ MPI - GB\n- Be2Bill - FR\n- BluePay - US\n- Braintree (Orange Platform) - US\n- CardSave - GB\n- Cashnet - US\n- Cecabank - ES\n- Conekta Gateway - MX\n- DataCash - GB\n- Efsnet - US\n- EVO Canada - CA\n- eWay Managed Payments - AU\n- Fat Zebra - AU\n- Federated Canada - CA\n- FirstGiving - US\n- First Pay - US\n- HDFC - IN\n- Heartland Payment Systems - US\n- Inspire Commerce - US\n- InstaPay - US\n- iTransact - US\n- JetPay - US\n- LinkPoint - US\n- Litle & Co. - US\n- maxiPago! - BR\n- Merchant e-Solutions - US\n- Merchant One Gateway - US\n- MerchantWARE - US\n- MerchantWARE - US\n- MerchantWarrior - AU\n- Mercury - US\n- Metrics Global - US\n- Modern Payments - US\n- Modern Payments - US\n- Moip - BR\n- Moneris - CA\n- Moneris (US) - US\n- MoneyMovers - US\n- NAB Transact - AU\n- NetRegistry - AU\n- NETbilling - US\n- NETPAY Gateway - MX\n- Network Merchants (NMI) - US\n- NMI - US\n- Openpay - MX\n- Raven PacNet - US\n- PagoFacil - MX\n- PayJunction - US\n- PaySecure - AU\n- Paybox Direct - FR\n- PayPal Express Checkout (UK) - GB\n- PayPal Payments Pro (UK) - GB\n- PayPal Website Payments Pro (CA) - CA\n- PayPal Express Checkout - US\n- PayPal Payments Pro (US) - US\n- Payscout - US\n- Paystation - NZ\n- Pay Way - AU\n- Pin - AU\n- Plug'n Pay - US\n- Psigate - CA\n- PSL Payment Solutions - GB\n- QuickBooks Merchant Services - US\n- Quantum Gateway - US\n- RedeCard - BR\n- Redsys - ES\n- Sallie Mae - US\n- Samurai - US\n- SecureNet - US\n- SecurePay - AU\n- SecurePayTech - NZ\n- TransFirst - US\n- NELiX TransaX - US\n- Transnational - US\n- TrustCommerce - US\n- USA ePay Advanced SOAP Interface - US\n- USA ePay - US\n- Verifi - US\n- ViaKLIX - US\n- WebPay - JP\n- WePay - US \n. @ntalbott if I could, I would have bombed the servers myself and slowly killed who coded it. I'll check that tomorrow and update this. Huge thanks!\n. @ntalbott Sorry for the delay. We needed to integrate both Redecard and MoIP into the gem, otherwise it'd be a waste to use one gem for Redecard and another one for MoIP, probably with a different interface. So we're gonna build a separated gem for these gateways, sorry.\n. ",
    "trev": ":+1:  This bug is in several other payment gateways. For example: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/eway.rb#L62\n. :+1: Thanks! I'd been manually casting to int before passing to ActiveMerchant due to this.\n. ",
    "sutharnishit": "Thank you for you response but can you please elaborate on this. \nThank you\n. ",
    "EiNSTeiN-": ":heart: \n. ",
    "forrest": ":+1: we got burned by this in production.\n. Is a new version coming right away?\n. @ivanfer I'm on a pretty tight timeline, so won't be able to get to this in the short-term. Perhaps someone else will be able to carry this PR the last piece of journey.\n. :facepalm: thanks for pointing this out. Will have it fixed in a jiffy\n. ",
    "nathany": "Damage already done for us. Up to you if you want to do a yank/re-release for others who might hit it.\nThanks @ntalbott \n. @ntalbott Any ideas to make the changelog more clear that there is a breaking change?\nhttps://github.com/Shopify/active_merchant/blob/master/CHANGELOG\n. Our code is compatible with 1.43.1 and yanked 1.43.2 now, so not in a rush for a new gem release.\nHere's how Hashie handled breaking changes: https://github.com/intridea/hashie/blob/master/CHANGELOG.md\n[POSSIBLE BREAKAGE] in the Changelog is a step in the right direction. Thanks. :-)\n. I agree regarding this comment.\nAnother option would be to use opts for local arguments rather than options. It doesn't make it clear where @options comes from, but at least it's clear that it isn't a typo. UPDATE: I see some methods already use parameters instead.\nI could also add comments to initialize to say which arguments it takes.\n. please take another look\n. Oh, I see what you mean.\n. Unfortunately this is a potentially breaking change. The current unit tests are directly modifying the @options hash:\nruby\n@gateway.options[:customer_profiles] = true\nNow, I could fix the tests, but if anyone else happens to be doing something like this, I've just broken their code by depending on new ivars instead of the @options hash.\nI'd rather not add additional hacks like overriding options[]=.\nI think I'm going to give up on this PR. It's just not that important to me. Thanks for taking a look at it and providing feedback.\n. ",
    "timtait": "@anniemstirling it's probably because you've Starred the active_merchant repo. Go to https://github.com/Shopify/active_merchant and click Unstar up the top right\n. ",
    "gmalette": "@ntalbott from what I'm seeing, it's a global on/off switch.\nThis PR doesn't change that, it just makes Bogus subject to the CVV presence validation, rather than skip it.\n. ",
    "buoyant": "Hi @jduff\nI have done required changes, Can you please look into this.\n. @ntalbott the parameter txn_s2s_flow which is added in payu gateway is invalid. As I spoke to payu dev team, they are saying it is an invalid parameter. There is two-factor auth for transactions to be made via payu gateway. I hope there is offsite_payments gem for such kind of gateways integration.. OK. but since payu_in.rb is a module can I create a new method and pass variables to it.\ndef self.new(options)\n  @merchant_id = options[:merchant_id]\n  @secret_key  = options[:secret_key]\nend\n. Important thing we don't want salt/secret_key to put in form as hidden field.\n. Any alternative for hidden field.\n. ",
    "fotanus": "Cool, thanks for letting me know.\n. :+1: Thanks for pointing that, and sorry for missing it!\n. ",
    "EppO": "According to Paypal: \n\nThis Classic SDK is not actively supported and will be deprecated in the future. For full support on new integrations, please use the Ruby Rest SDK\n\nCan you reconsider to reopen this issue and #790 ?\n. fair enough. My perception is that they stop supporting APIs that consume their SOAP API in order to motivate people to move on the REST API and then deprecate their old/classic API. I'm maybe wrong.\n. ",
    "eneeyac": "I may be wrong but it seems Paypal classic api does not have any equivalent for vaults https://developer.paypal.com/webapps/developer/docs/api/#vault\n. ",
    "mkashlev": "Is this commit in any of the live releases yet? If not, when is it expected to be released?\n. @duff, I meant shopify\n. ",
    "butchmarshall": "Sorry - life is getting in the way.  Thanks for writing that test.\n. ",
    "EdwardDiehl": "@ntalbott thanks for review, I inlined almost all constants in code. Unfortunately real test account for remote tests is not ready yet on hostedpci.com, so i'm using test account for staging environment in remote tests.\nHere i generate oredr_id with help of SecureRandom because regular account verifies uniquiness of that parameter.\nhttps://github.com/HostedPCI-Inc/active_merchant/commit/2575655444117d3b0ef3243d700db6cf6e9f85e5#diff-9fda89c5662461082a6a1b69e54ef005R18\n. ",
    "vishalzambre": "closing this PL due to forgot to add test cases\n. ActiveMerchant::Billing::AuthorizeNetGateway.supports?('maestro') return false always for maestro cards\n. If I check ActiveMerchant::Billing::AuthorizeNetGateway.supports?('maestro') this should return true but it is returning false, i.e. not supporting maestro card, but if I process maestro card with master as cc_type then it is working. If you have any other solution please let me know how to support maestro card\n. @ntalbott yes right?\n. @ntalbott you can use Maestro: 6759649826438453 this card number for test refer \nhttp://www.cybersource.com/developers/develop/cybersource_services/quick_references/test_cc_numbers/\nhttp://www.checkfront.com/support/authorize-net\n. ",
    "tesserakt": "@ntalbott so am I right in thinking that Auth.net is currently broken in active_merchant?\n. ",
    "vparihar01": "@ntalbott tested the above changes w.r.t old version. It looks good to me. Only one question i had. Can we don't have one common test account for authorize.net. Everytime to run test cases for authorize.net we need to enter our's sandbox account details in fixtures. I tried looking over internet over this found nothing. Any suggestion are welcome.\n. @ntalbott thanks a lot. Its very helpful.\n. I tried with my local sandbox, it worked for me. Also if this doesn't work\nthen it silently throws error \"Purchase Type Not Supported\" . From your\nerror message what i understand if not wrong that \"Postal code matches, but\nstreet address not verified\" . Their is something wrong with data :) . I\nthink you should try again with proper credentials. You can difinelty check\nwith Authorize.net guys for this issue. If I am not wrong you checked for\naddress verification also.\nPlease keep me posted let see if i can get some good data on this.\nOn Tue, Jul 15, 2014 at 8:27 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\n@vparihar01 https://github.com/vparihar01 I tried the 6759649826438453\nnumber you referenced in #1296\nhttps://github.com/Shopify/active_merchant/pull/1296, but receive this\nreply from the sandbox:\nResponse expected to succeed: <#\"P\",\n   \"message\"=>\"Postal code matches, but street address not verified.\",\n   \"street_match\"=>nil,\n   \"postal_match\"=>\"Y\"},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=false,\n @message=\"The credit card number is invalid\",\n @params=\n  {\"response_code\"=>3,\n   \"response_reason_code\"=>\"6\",\n   \"response_reason_text\"=>\"The credit card number is invalid.\",\n   \"avs_result_code\"=>\"P\",\n   \"transaction_id\"=>\"0\",\n   \"card_code\"=>\"\",\n   \"authorization_code\"=>\"\",\n   \"cardholder_authentication_code\"=>\"\",\n   \"action\"=>\"AUTH_CAPTURE\"},\n @success=false,\n @test=true>>\nAre you able to get the sandbox to successfully process a Maestro card?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1304#issuecomment-49043845\n.\n\n\n\nThanks & Regards,\nVivek Parihar,\nVP, Engineering\nTeam Webonise\nhttp://www.rediffmail.com/cgi-bin/red.cgi?red=http%3A%2F%2Fwww%2Ewebonise%2Ecom%2F&isImage=0&BlockImage=0&rediffng=0\nContact:+91 9823452012\nLinkedIn\nhttp://www.rediffmail.com/cgi-bin/red.cgi?red=http%3A%2F%2Fwww%2Elinkedin%2Ecom%2Fin%2Fpariharvivek&isImage=0&BlockImage=0&rediffng=0\n | Twitter\nhttp://www.rediffmail.com/cgi-bin/red.cgi?red=https%3A%2F%2Ftwitter%2Ecom%2Fvparihar&isImage=0&BlockImage=0&rediffng=0\n | FB Page\nhttp://www.rediffmail.com/cgi-bin/red.cgi?red=https%3A%2F%2Fwww%2Efacebook%2Ecom%2Fweboniselab&isImage=0&BlockImage=0&rediffng=0\n. @ntalbott after having a long support call with Authorize.net, they told me that it's due to Merchant Settings of Evalon bank. Thats why its working with my Production. \nBut Authorize.net clearly mention that they dont support any test account for Maestro Cards.\nSo for the solution of this issue we need to first add card_type maestro and then map it to master card type as done in this reference #1296 . By doing so we satisfy the need of Authorize.net. I made some changes in authorize_net.rb. Right now i am testing all scenarios. If it work well then i will push it to same pull request. This solution is very specific to Authorize.net only. Please give me some time to resovle this.\n. @ntalbott i agreed with your point. I somehow didn't know about the adapter working. I checked over the weekend and your each every line make sense to me. Afterall your the maintainer of this repo ;). It's my wild guess. After this supported type we are good to go. I will work on spree side to get this handled for authorize.net.\n. ",
    "bertoncobb": "@ntalbott The code was changed due to requirements in the certification process here. In the lines 77-93  if the user did not have a first name or last name it would not create a CardHolderData element. The CardHolderData element is required regardless of the the name of the user. So the CardHolderData element was pulled out of that if. The check on first name and last would also prevent the address from being sent. So I moved that out of the if block as well.\n. No problem, sorry for the confusion. \n. ",
    "cimtico": "The patch we made was overriding the ssl_request method from ActiveMerchant::Billing::Gateway\ndef ssl_request(method, endpoint, data, headers={})\n  default_headers = {'Accept-Encoding' => ''}\n  handle_response(raw_ssl_request(method, endpoint, data, default_headers.merge(headers)))\nend\nHowever that I'm aware of, in our case we are using AuthorizeNetCimGateway\n. Sorry about closing, I clicked on the wrong button\n. Sorry I couldn't answer sooner, The problem wasn't reproducible in sandbox, it only occurred on their production servers (hence why it took us a while to figure out the issue).\nWe are using ruby-2.0.0-p353, rails 4.0.6\nRegardign a stripped down case its a bit complicated. But if I get a chance I'll try to provide one.\nThe Stack Overflow link was provided by Authorize.net's support team, so it seems we aren't the only ones having a similar issue.\nHope this helps\n. I said: \"I couldn't reproduce against the production server either.\" but meant sandbox instead of production. I know ruby should probably support gzip, although for some reason it wasn't interpreting the result as gzip in our case.\nWe have created an initializer override on our end so that it will communicate with the server using an \"empty\" accepts header (which did the trick for us). If no one else is able to reproduce, then it might be something in our project that is messing that up for us.\nIn any case thanks for looking into this :+1: \n. ",
    "JDutil": "I don't think so.  I'll try.\n. I've added a regression test.  I can't find any reason why this wouldn't be backwards compatible according to the documentation I linked to they charge either payment tokens or customer tokens.  The only difference is passing the customer token defaults to the default payment method.\n. How do you run the remote tests?\nIdeally we would be able to get this to work in AM as it's being used for Spree's spree_gateway extension.  I can understand wanting to break it out though.\n. @MisinformedDNA I don't have any sample customer or payment method tokens in front of me to check, but would they be able to be matched on a regular expression?  Is there something unique about the different types we could use instead of passing in an option?\n. FYI All the remote specs are broken with or without this change...\n. I think this change should be fine, but certainly would be best to get the specs passing again as well.\n@MisinformedDNA could you add to your Gemfile:\ngem 'activemerchant', github: 'JDutil/active_merchant', branch: 'payment_token'\nBundle update and verify things are working for you as expected with this change?\n. I tried adding my own sandbox credentials to the setup method of the BraintreeBlueTest case and I still see 46 of 47 failing specs... All I need to replace is the merchant_id, public_key, and private_key right?\n. Okay after configuring credentials with a fixture file like you had I was able to get half or so of them to pass, but I'm still seeing 18 failures on master without my change:\n```\nJDutil@Jeffs-MacBook-Pro ~/Code/active_merchant$ ruby -Itest test/remote/gateways/remote_braintree_blue_test.rb                                                                             \u2739master \u20392.1.2\u203a\nRun options: \nRunning tests:\n[ 2/47] RemoteBraintreeBlueTest#test_authorize_and_void = 0.86 s         \n  1) Failure:\nRemoteBraintreeBlueTest#test_authorize_and_void [test/remote/gateways/remote_braintree_blue_test.rb:311]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[ 3/47] RemoteBraintreeBlueTest#test_avs_match = 0.75 s               \n  2) Failure:\nRemoteBraintreeBlueTest#test_avs_match [test/remote/gateways/remote_braintree_blue_test.rb:196]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[ 7/47] RemoteBraintreeBlueTest#test_cvv_no_match = 0.88 s                                          \n  3) Failure:\nRemoteBraintreeBlueTest#test_cvv_no_match [test/remote/gateways/remote_braintree_blue_test.rb:208]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[10/47] RemoteBraintreeBlueTest#test_failed_credit = 0.51 s                                   \n  4) Failure:\nRemoteBraintreeBlueTest#test_failed_credit [test/remote/gateways/remote_braintree_blue_test.rb:495]:\nYou must get credits enabled in your Sandbox account for this to pass.\n<\"Credit card number is invalid. (81715)\"> expected but was\n<\"Braintree::AuthorizationError\">.\n[17/47] RemoteBraintreeBlueTest#test_failed_void = 0.73 s                                  \n  5) Failure:\nRemoteBraintreeBlueTest#test_failed_void [test/remote/gateways/remote_braintree_blue_test.rb:322]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[19/47] RemoteBraintreeBlueTest#test_masked_card_number = 0.74 s \n  6) Error:\nRemoteBraintreeBlueTest#test_masked_card_number:\nNoMethodError: undefined method []' for nil:NilClass\n    test/remote/gateways/remote_braintree_blue_test.rb:41:intest_masked_card_number'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1265:in run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit/testcase.rb:17:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:940:in block in _run_suite'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:inmap'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:in _run_suite'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:663:inblock in _run_suites'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in each'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in_run_suites'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:884:in _run_anything'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1092:inrun_tests'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1079:in block in _run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:ineach'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:in _run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1066:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:27:in run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:780:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:372:in block (2 levels) in autorun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:33:inrun_once'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:371:in `block in autorun'\n[20/47] RemoteBraintreeBlueTest#test_purchase_with_store_using_random_customer_id = 0.94 s\n  7) Failure:\nRemoteBraintreeBlueTest#test_purchase_with_store_using_random_customer_id [test/remote/gateways/remote_braintree_blue_test.rb:225]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[21/47] RemoteBraintreeBlueTest#test_purchase_with_store_using_specified_customer_id = 0.84 s   \n  8) Failure:\nRemoteBraintreeBlueTest#test_purchase_with_store_using_specified_customer_id [test/remote/gateways/remote_braintree_blue_test.rb:237]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[23/47] RemoteBraintreeBlueTest#test_successful_authorize = 0.93 s                                 \n  9) Failure:\nRemoteBraintreeBlueTest#test_successful_authorize [test/remote/gateways/remote_braintree_blue_test.rb:34]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[24/47] RemoteBraintreeBlueTest#test_successful_authorize_with_merchant_account_id = 0.84 s\n 10) Failure:\nRemoteBraintreeBlueTest#test_successful_authorize_with_merchant_account_id [test/remote/gateways/remote_braintree_blue_test.rb:507]:\nYou must specify a valid :merchant_account_id key in your fixtures.yml for this to pass.\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[26/47] RemoteBraintreeBlueTest#test_successful_credit = 0.51 s                                  \n 11) Failure:\nRemoteBraintreeBlueTest#test_successful_credit [test/remote/gateways/remote_braintree_blue_test.rb:487]:\nYou must get credits enabled in your Sandbox account for this to pass.\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\"Braintree::AuthorizationError\",\n @params={},\n @success=false,\n @test=false>>\n[27/47] RemoteBraintreeBlueTest#test_successful_credit_with_merchant_account_id = 0.49 s\n 12) Failure:\nRemoteBraintreeBlueTest#test_successful_credit_with_merchant_account_id [test/remote/gateways/remote_braintree_blue_test.rb:500]:\nYou must specify a valid :merchant_account_id key in your fixtures.yml AND get credits enabled in your Sandbox account for this to pass.\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>nil},\n @fraud_review=nil,\n @message=\"Braintree::AuthorizationError\",\n @params={},\n @success=false,\n @test=false>>\n[28/47] RemoteBraintreeBlueTest#test_successful_purchase = 0.74 s                             \n 13) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase [test/remote/gateways/remote_braintree_blue_test.rb:185]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[29/47] RemoteBraintreeBlueTest#test_successful_purchase_using_vault_id = 1.42 s\n 14) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_using_vault_id [test/remote/gateways/remote_braintree_blue_test.rb:62]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[30/47] RemoteBraintreeBlueTest#test_successful_purchase_using_vault_id_as_integer = 1.56 s\n 15) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_using_vault_id_as_integer [test/remote/gateways/remote_braintree_blue_test.rb:76]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[31/47] RemoteBraintreeBlueTest#test_successful_purchase_with_addresses = 0.81 s                 \n 16) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_with_addresses [test/remote/gateways/remote_braintree_blue_test.rb:267]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[32/47] RemoteBraintreeBlueTest#test_successful_purchase_with_email = 0.91 s          \n 17) Failure:\nRemoteBraintreeBlueTest#test_successful_purchase_with_email [test/remote/gateways/remote_braintree_blue_test.rb:216]:\nResponse expected to succeed: <#nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n @cvv_result={\"code\"=>nil, \"message\"=>\"\"},\n @fraud_review=nil,\n @message=\"Transaction declined - gateway rejected\",\n @params={},\n @success=false,\n @test=false>>\n[33/47] RemoteBraintreeBlueTest#test_successful_store_with_billing_address = 1.58 s \n 18) Error:\nRemoteBraintreeBlueTest#test_successful_store_with_billing_address:\nNoMethodError: undefined method []' for nil:NilClass\n    test/remote/gateways/remote_braintree_blue_test.rb:146:intest_successful_store_with_billing_address'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1265:in run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit/testcase.rb:17:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:940:in block in _run_suite'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:inmap'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:933:in _run_suite'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:663:inblock in _run_suites'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in each'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:661:in_run_suites'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:884:in _run_anything'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1092:inrun_tests'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1079:in block in _run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:ineach'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1078:in _run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/minitest/unit.rb:1066:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:27:in run'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:780:inrun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:372:in block (2 levels) in autorun'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:33:inrun_once'\n    /usr/local/opt/rbenv/versions/2.1.2/lib/ruby/2.1.0/test/unit.rb:371:in `block in autorun'\nFinished tests in 49.138429s, 0.9565 tests/s, 4.1108 assertions/s.                                                 \n47 tests, 202 assertions, 16 failures, 2 errors, 0 skips\nruby -v: ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]\n```\n. Well I'm unsure how to make this work without it being an option so I've added as an option now which fixes the tests.\n. I've added a remote test.  Let me know if there is anything else.\n. @huoxito should probably add to the README as well.\n. ",
    "MisinformedDNA": "Option 1: ActiveMerchant stays as is. The developer must store multiple customer IDs in their DB and manage those IDs. When they want to show all the details to the user, they must make multiple calls to get the card details.\nOption 2: ActiveMerchant is changed to allow for customer or CC ids. The developer only needs to store one customer ID and no other CC IDs, tokens or other info. If information needs to be partially managed from the backend, they don't have 10 customers which are actually all the same.\nIn the spirit of option 2, what if we added a property to options called isPaymentToken which will be false by default?\nSo we would have something like\nruby\nif credit_card_or_vault_id.is_a?(String) || credit_card_or_vault_id.is_a?(Integer) \n    if isPaymentToken?\n        parameters[:payment_method_token] = credit_card_or_vault_id \n    else\n        parameters[:customer_id] = credit_card_or_vault_id \n    end\nelse\n. According to this and this the developer can set the customer ID and payment token to whatever, so it wouldn't be possible to distinguish them.\n. I ran the following against Braintree and verified that they were entered as two separate customers with one CC each. Thus, we can't distinguish them and neither can Braintree. If the tests pass, it is purely coincidental.\n``` C#\nvar gateway = GetBraintreeGateway();\nvar customerResult = gateway.Customer.Create(new CustomerRequest\n{\n    Id = \"TokenB\",\n    CreditCard = new CreditCardRequest\n    {\n        Token = \"TokenA\",\n        Number = \"4111111111111111\",\n        ExpirationMonth = \"4\",\n        ExpirationYear = \"2015\"\n    }\n});\ncustomerResult = gateway.Customer.Create(new CustomerRequest\n{\n    Id = \"TokenA\",\n    CreditCard = new CreditCardRequest\n    {\n        Token = \"TokenB\",\n        Number = \"4111111111111111\",\n        ExpirationMonth = \"4\",\n        ExpirationYear = \"2015\"\n    }\n});\n```\n. ",
    "j-mcnally": "+1 i can verify this is good.\n. ",
    "mhashemi86": "Integration docs sent to Ed. We'll definitely try to salvage this PR as it might be the difference between 4-6 weeks of work (Cardinal's estimate for work from scratch) and 1-2 weeks (their estimate after having reviewed this PR).\n@edward Cardinal is also willing to review this PR once more, when you feel it's ready. So we'll have their eyes on this as well. \n. @lonsun Can you send an email to payment-integrations@shopify.com. Please include:\n1- Provider name and URL\n2- Markets served by the integration\n3- Supported payment methods\n4- Most recent PCI Certificate \n5- Link to this PR\nNote that adding a gateway to active_merchant does not guarantee placement within Shopify. At this time, we have good provider coverage in the US and it's unlikely that we will prioritize this integration. However, we can continue this conversation via email. \n. @bbozo No need for an active_merchant integration. A PayU Latam integration is already in the works. \n. @bbozo  Within the next month. We have plenty of volunteers for PayU Latam here if you'd like to join.\n. ",
    "rob-anderson": "Sorry - I should really read the wiki before submitting patches.\nUnit and remote tests added.  I have confirmed the remote passes using our SagePay test account.\n. It's only the bb02f5f commit which is relevant.  Don't know why the pull request has picked up the ancient stuff, sorry.\n. OK, rebased/squashed/forced etc. and CV2 changed to verification_value.\nSorry it took so long :)\n. ",
    "camelmasa": "@ntalbott Thanks for review, and sorry for many issue point... :bow:  I'll refactor it.\n. @bslobodin @ntalbott  Thanks, I see... Should I close this PR ?\n. @girasquid Thank you for merging :smile: \n. ",
    "jpudney": "@X0Refraction Is there any more progress on this pull request?\n. @X0Refraction thanks for the update\n. ",
    "gingermusketeer": "@ntalbott Yes passing the name to the gateway is not the problem. The issue that i have is that what is being passed to the gateway is not the same as what is being validated.\nI would prefer to use the existing credit card model as i don't want to reintroduce bugs that have been already been fixed etc. \nWould you be happy with a PR that extracted the name validation into a separate method so i can override just the name validation in a subclass? \n. ",
    "davidcornu": "Anything within the gem's lib directory is accessible via require, so you can do:\n``` ruby\nrequire 'active_merchant'\nrequire 'support/gateway_support'\nGatewaySupport.new.each_gateway do |gateway|\n  puts gateway.display_name\nend\n``\n. Speaking of which, might be a good idea to movelib/supporttolib/active_merchant/supportor out oflib` altogether. @ntalbott thoughts?\n. ",
    "stewartknapman": "Awesome, thanks for that.\n. ",
    "baash05": "When I do this in the real, I get a receipt number?  Do you not get one?\nI based my bogus adjustments on the VCR cassettes that I recorded.\n. Ah.. now I see what you mean.. My endpoint might have the receipts, but not all of them do. And your gem also deals with the ones that don't.. So the gem that I use that sits on top of your gem has to add the receipts, not your gem.. \n. ",
    "tomykaira": "What I have done is to fix broken tests in remote_webpay_test, and webpay_test did not covered all methods by default (and passed).\nSo I found that it is not necessary that both tests cover all cases, but all cases should be covered by at least one of them.\nThis was already met and I did not add any case.\nPlease describe what coverage you want, if my understanding is wrong.\n. ",
    "selivandex": "No, it doesn't take credit card directly\n. ",
    "JamieS": "Amazing! Thanks :)\n. ",
    "ravish-ramrakha-cko": "fixtures.yml updated.\n. @ntalbott  Changes completed.\n. @ntalbott Changes Completed. Please review.\n. https://api2.checkout.com is our new gateway which is still under development. For the time being we have restricted refunds only to our backend.\n. ",
    "jhjwind": "If CustomerProfileFromOrderInd is added for authorizing a new order, an 'invalid account number range' error is thrown. According to Chase technical support, CustomerProfileFromOrderInd should only be used for creating a new customer profile. \n. ",
    "denis": "I've experienced the same problem. It was hard to figure out the problem. So the problem is when you want to make an authorize/capture call using a stored customer profile and don't provide a credit card you receive this error:\nxml\n<ProcStatus>841</ProcStatus>\n<StatusMsg>Error validating card/account number range</StatusMsg>\n<ProfileProcStatus>9576</ProfileProcStatus>\n<CustomerProfileMessage>Profile: Unable to Perform Profile Transaction. The Associated Transaction Failed. </CustomerProfileMessage>\nThis is what I've found in the \"ORBITAL GATEWAY XML INTERFACE SPECIFICATION\":\n\nThis PR fixes the issue but introduces the new one: when both credit card and cutomer_ref_num are set we still have to pass CustomerProfileFromOrderInd just to create a new profile or update existing one in the case when we don't use auto-generated profile IDs.\nI'm working on updated PR with fixed tests now.\n. I've provided PR with description of the problem, appropriate fix and added tests: https://github.com/Shopify/active_merchant/pull/1370\n. @ntalbott please take a look when you have time.\n. @ntalbott The build is red just because Travis failed to build this job: https://travis-ci.org/Shopify/active_merchant/jobs/34333519 Do you know any way to reschedule this job?\n. ",
    "AntoineInsa": "@ntalbott I've run the remote tests without errors, here's my output:\n```\nbundle exec rake test:units TEST=test/remote/gateways/remote_moneris_us_test.rb\n/Users/antoine/.rbenv/versions/2.0.0-p247/bin/ruby -I\"lib:test\" -rubygems -w -I\"/Users/antoine/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rake-10.3.2/lib\" \"/Users/antoine/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/rake-10.3.2/lib/rake/rake_test_loader.rb\" \"test/remote/gateways/remote_moneris_us_test.rb\" \n/Users/antoine/.rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/openssl/ssl.rb:101: warning: assigned but unused variable - id\nRun options: \nRunning tests:\n[17/22] MonerisUsRemoteTest#test_successful_purchase_and_credit/Users/antoine/Sites/active_merchant/test/remote/gateways/remote_moneris_us_test.rb:75:in `test_successful_purchase_and_credit': Support for using credit to refund existing transactions is deprecated and will be removed from a future release of ActiveMerchant. Please use the refund method instead.\nFinished tests in 69.376833s, 0.3171 tests/s, 1.1964 assertions/s.            \n22 tests, 83 assertions, 0 failures, 0 errors, 0 skips\nruby -v: ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin13.0.0]\n```\nand here's the Travis CI output: https://travis-ci.org/Shopify/active_merchant/builds/32675998\nLet me know if I missed something!\n. @ntalbott any update on the issue? Let me know if I can do/improve something! Thanks!\n. ",
    "pkoppula": "Added shipping address to be sent to cybersource for credit card orders.\n. ",
    "ZhangHanDong": "Gemfile:\n``` ruby\ngem \"activesupport\", \"~> 4.2.0.beta1\"\ngem \"activerecord\", \"~> 4.2.0.beta1\"\ngem 'activemerchant', \"~> 1.44.0\", :require => 'active_merchant'\n```\nGemfile.lock:\nruby\nactivemerchant (1.44.0)\n      active_utils (~> 2.2.0)\n      activesupport (>= 3.2.14, < 5.0.0)\n      builder (>= 2.1.2, < 4.0.0)\n      i18n (>= 0.6.9)\n      json (~> 1.7)\n      nokogiri (~> 1.4)\n      offsite_payments (~> 2.0.0)\nfull stack trace:\n/vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb:10:in `<module:Mdpay>': uninitialized constant ActiveMerchant::Billing::Integrations::Helper (NameError)\n    from /vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb:9:in `<module:Integrations>'\n    from /vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb:8:in `<module:Billing>'\n    from /vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb:7:in `<module:ActiveMerchant>'\n    from /vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb:6:in `<top (required)>'\n    from /vagrant_data/apps/mobile-api/config/all.rb:29:in `block in load_lib'\n    from /vagrant_data/apps/mobile-api/config/all.rb:29:in `each'\n    from /vagrant_data/apps/mobile-api/config/all.rb:29:in `load_lib'\n    from /vagrant_data/apps/mobile-api/config/all.rb:4:in `initialize!'\n    from /vagrant_data/apps/mobile-api/config/all.rb:43:in `<top (required)>'\n    from /vagrant_data/apps/mobile-api/config/core.rb:48:in `load_application'\n    from /vagrant_data/apps/mobile-api/config/core.rb:35:in `initialize!'\n    from /vagrant_data/apps/mobile-api/config/core.rb:54:in `<top (required)>'\n    from /vagrant_data/apps/mobile-api/config/application.rb:4:in `require'\n    from /vagrant_data/apps/mobile-api/config/application.rb:4:in `<top (required)>'\n    from /vagrant_data/apps/mobile-api/lib/command/cli.rb:163:in `require'\n    from /vagrant_data/apps/mobile-api/lib/command/cli.rb:163:in `load_applicaiton'\n    from /vagrant_data/apps/mobile-api/lib/command/cli.rb:14:in `c'\n    from /home/vagrant/.rvm/gems/ruby-2.1.1/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'\n    from /home/vagrant/.rvm/gems/ruby-2.1.1/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'\n    from /home/vagrant/.rvm/gems/ruby-2.1.1/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'\n    from /home/vagrant/.rvm/gems/ruby-2.1.1/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'\n    from ./bin/goliath:5:in `<main>'\n/vagrant_data/apps/mobile-api/lib/payment/integrations/mdpay/helper.rb: line 10\nruby\n...\nclass Helper < ActiveMerchant::Billing::Integrations::Helper\n...\n. Thanks. I have locked ActiveMerchant to 1.43.3.\n. ",
    "jengweneg": "Hello,\nI am running into a similar type of issue.\nAfter successfully instaling catarse_paypa_express gem, i can\"t start the server because of the following error.\nI have installed the most recent version of activemerchant (1.76.0)\nPlease help\nbin/rails server -d -p3005\n/usr/src/fiatope/config/application.rb:10: warning: already initialized constant OpenSSL::SSL::VERIFY_PEER\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:85:in rescue in block (2 levels) in require': There was an error while trying to load the gem 'catarse_paypal_express'. (Bundler::GemRequireError)\nGem Load Error is: uninitialized constant ActiveMerchant::Billing::Integrations\nBacktrace for gem load error is:\n/usr/local/rvm/gems/ruby-2.1.3/gems/catarse_paypal_express-3.0.2/lib/catarse_paypal_express/gateway.rb:3:in'\n/usr/local/rvm/gems/ruby-2.1.3/gems/catarse_paypal_express-3.0.2/lib/catarse_paypal_express/gateway.rb:2:in <module:CatarsePaypalExpress>'\n/usr/local/rvm/gems/ruby-2.1.3/gems/catarse_paypal_express-3.0.2/lib/catarse_paypal_express/gateway.rb:1:in'\n/usr/local/rvm/gems/ruby-2.1.3/gems/catarse_paypal_express-3.0.2/lib/catarse_paypal_express.rb:3:in <top (required)>'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:82:inrequire'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:82:in block (2 levels) in require'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:77:ineach'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:77:in block in require'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:66:ineach'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler/runtime.rb:66:in require'\n/usr/local/rvm/gems/ruby-2.1.3/gems/bundler-1.15.0/lib/bundler.rb:108:inrequire'\n/usr/src/fiatope/config/application.rb:12:in <top (required)>'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:79:inrequire'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:79:in block in server'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:76:intap'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:76:in server'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands/commands_tasks.rb:40:inrun_command!'\n/usr/local/rvm/gems/ruby-2.1.3/gems/railties-4.1.5/lib/rails/commands.rb:17:in <top (required)>'\n/usr/src/fiatope/bin/rails:8:inrequire'\n/usr/src/fiatope/bin/rails:8:in <top (required)>'\n/usr/local/rvm/gems/ruby-2.1.3/gems/spring-1.7.1/lib/spring/client/rails.rb:28:inload'\n/usr/local/rvm/gems/ruby-2.1.3/gems/spring-1.7.1/lib/spring/client/rails.rb:28:in call'\n/usr/local/rvm/gems/ruby-2.1.3/gems/spring-1.7.1/lib/spring/client/command.rb:7:incall'\n/usr/local/rvm/gems/ruby-2.1.3/gems/spring-1.7.1/lib/spring/client.rb:30:in run'\n/usr/local/rvm/gems/ruby-2.1.3/gems/spring-1.7.1/bin/spring:49:in'\n. ",
    "brianphillips": "@ntalbott thanks for taking a look.  Isn't the driver file the exact place to put these kind of gateway-specific options?  The orbital.rb gateway driver currently has 11 other options that are only applicable to Orbital.  Based on that, it seems reasonable (to me) to provide a way to perform documented functionality via the use of an option in the driver file.  Is that not how things are meant to be built?\n. ",
    "cgarceau": "Thanks guys! We have a new plus merchant who can't accept any local transactions because of this\n. <3 I hit that 3 times! thanks :)\nChristian Garceau | Key Account Manager, Shopify Plus\nhttp://www.shopifyplus.com | Book an appointment\nhttp://shopify.youcanbook.me\nOn Thu, Aug 28, 2014 at 8:23 PM, Edward Ocampo-Gooding \nnotifications@github.com wrote:\n\n@cgarceau https://github.com/cgarceau see\nhttps://unicorn.shopify.com/posts/12989\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1363#issuecomment-53824008\n.\n. \n",
    "mutemule": "Done, squashed, and re-pushed.\n. Two additions to this PR: firstly, I missed borgun.is in the initial review, so their SSLv3 forcing is now removed.\nAdditionally, PsiGate informed me yesterday that their live URI is now https://secure.psigate.com:17934/Messenger/XMLMessenger, which is a differing port number than what we had used before.\nInitial tests confirm that this new URI behaves much better than the old one.\n. @ntalbott, we've just processed a successful transaction through PsiGate with this updated configuration.  We should be good.\n. > We've had trouble connecting without the hard coded values. I don't think the version of Ruby we're using is very old. Any idea what version of Ruby one needs to be at?\nDo you remember any specifics? I know we had troubles with a very small number of gateways at one point, but I am under the impression these were all solved.\nLooks like the removal of SSLv2/SSLv3 by default happened in Ruby 2.1.4. Note that this would also rely on the underlying OpenSSL being reasonably up-to-date as well.\n\nWould moving the hardcoded ones to TLSv1_2 be a possibility?\n\nFor sure. I've actually been working through whether we can force a global TLSv1.2 minimum (so we support TLSv1.3 by default when it lands), and then we can force-downgrade the specific gateways that don't support it (I only know of one thus far). But this may still cause troubles, depending on the specifics of the troubles experienced.\n. Yeah, I know that's why this went in originally, was to force an upgrade from SSLv3.\nIf Ruby <2.1.4 is still considered supported, what about porting in the same negotiation stuff from 2.1.4 into Connection::configure_ssl? That would get us to a known-good standard across the board, and then we can discuss bumping things a bit once that's settled?\nOr would you still prefer to hard-code these all to TLSv12?\n. The only across-the-board change I'd suggest at this point is emulating the SSL negotiation introduced in Ruby 2.1.4, which means we would only support TLSv1, TLSv1.1, and TLSv1.2. Which seems like a reasonable set of protocols to support, given AM. Anything beyond that would likely be behind some configuration; so, allow a site to restrict that further, but keep operational defaults.\nAll this being said, I recognize that this is fine and dandy theoretically, but it's an extremely difficult thing to test in practice: we would need to confirm the test and live URLs across all gateways across a multitude of Ruby versions, or mark this as a potentially breaking change that should be introduced with care.\nSo long as we stick as close as possible to the default Ruby behaviour, I would be surprised to find any protocol negotiation bumps, so I'm pretty confident moving down that road. Anything beyond that is definitely considerably more risky, though.\nOne thing to note against hard-coding these gateways to TLSv1.2: when TLSv1.3 lands, and becomes the preferred protocol, we'll have to remember to come back in and fix these up again. Hard-coding the versions creates a manual maintenance burden that will always be surrounded by some confusion, a la \"why did we do this in the first place, and can we safely change it?\" -- much like what we're doing in this PR.\n. @duff: I've rebased, and added another commit that directly copies the pertinent options from Ruby's ssl options as of 2.1.4. All this does is remove SSLv2 and SSLv3 support, and optionally remove compression if supported by the local OpenSSL.\nI expect, long-term, this is going to be considerably less painful than hard-coding gateways to specific TLS versions, and considerably safer.\n. Looks like I'll need to revamp the approach a bit. I'll tackle it in the coming days and re-bump for review when ready.\n. ",
    "andrewjwu": "@ntalbott A user can enter any string they'd like as the Payment Profile identifier so there's a possibility that it'll match the format of a Legato Token. ~~I'm OK with prefixing tokens with legato- and then parsing that to determine the actual source.~~\nOn second thought, requiring the legato- prefix will introduce a breaking change as the update method currently accepts the Legato Token as-is. Tokens appear to start with the gt6- prefix (e.g. gt6-0c78c25b-3637-4ba0-90e2-26105287f198) although the documentation doesn't specify whether this is always the case. I will reach out to Beanstream to confirm.\n. @ntalbott \nFrom Beanstream tech support:\n\nYes, the prefix of the token is hard coded based on the server it's \ngenerated from, and all of the Legato tokens are created from the \nsame server, so they will all start with gt6-\n\nLet me know if you're OK with detection by gt6- prefix as that won't cause any breakage with what's currently in master.\n. @ntalbott Yup, it will break if they add more servers and change the hardcode; but I suppose that's true about any 3rd-party service that decides to change their API without notice. I'm OK with this route for now especially since it'll be resolved once the Token object is introduced.\n. @ntalbott Changes are ready for review.\n. @ntalbott Any updates on this?\n. @ntalbott The recent errors seem to be related to changes from Beanstream as they passed before. The other errors were there since the fork. We've decided to no longer use Beanstream/Legato so I will close this PR for now unless someone would like to take over.\n. Yes, prior to this PR, a string as the source parameter referred to the customerCode (AKA billing the payment profile), hence, the need for :payment_method to differentiate them.\nWith Beanstream you can make a purchase using 3 methods (active_merchant currently supports the first two):\n- Credit card (source is a CreditCard object)\n- Payment profile (AKA customerCode; this can be a profile created via Beanstream GUI or a credit card converted into a payment profile; source is a string)\n- Legato token (AKA singleUseToken; CC credentials are tokenized using legato.js and the token is posted to your app instead of the CC number; this token can be converted into a payment profile or charged directly; also a string) This PR attempts to add support for this feature\n. See prior comment for details.\n. I'm OK with removing it but I noticed that there are similar token query implementations for CyberSource and eWay already within active_merchant. In that case, shouldn't we remove those as well?\n. ",
    "caanvaga": "I cleaned up indentation. And about the question, we updated our api and also  added support for: authorize and refund.\n. @ntalbott Ready!\n. @ntalbott ok, ready!\n. @wvanbergen the fixes are ready!\n. @wvanbergen It's only API upgrade. This upgrade would support existing use.\n. @ntalbott Ready!\n. @wvanbergen is it necessary?, because I have error without these lines\n. @wvanbergen \nsuccess = true if (response[\"ID\"] && response[\"AUTH_CODE\"]) || (response[\"folio\"] && response[\"status\"] == \"ok\")\nis it correct? \n. ",
    "jasonwebster": "Closing due to age and inaction. Feel free to re-open when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. It's been open for well over a year now with no action. I've closed all PRs over 14 months old automatically. . Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing this due to outstanding comments (can't change Active Merchant's contact), and staleness.\n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Hi! Thanks for commenting. I automatically closed all open PRs that were older than 14 months, so perhaps the message didn't suit them all. I'm glad it started the conversation up again though. I'll actually take a look at this, and see what's up.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved. \n. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Hi! Thanks for commenting! I automatically closed all PRs that have been open for more than 14 months. I see this one's had some more recent activity, so it probably shouldn't have been in there. . Hi,\nJust to be perfectly clear with the expectations here, ActiveMerchant and Shopify are quite separate. Yes, Shopify uses ActiveMerchant, and we contribute to it as well. Having an ActiveMerchant integration is great--it eases implementation for many developers, but it is absolutely no guarantee that the gateway will be available to use in Shopify.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. Closing due to staleness. Feel free to reopen when the outstanding issues are resolved.. See https://github.com/activemerchant/active_merchant/pull/2272 for the PR mentioned above. We'll use that to track the addition.. This actually caused a regression for Active Merchant users that still use Money objects for amounts. Yes, that's depreciated, but it still hasn't been removed yet. By removing the #localized_amount method that checked if it was a non-fractional currency, and delegating to the default #amount method which always blindly calls #cents on any object that responds to it, amounts that are in non-fractional currencies are now erroneously multiplied by 100.\n. No problem! I've been thinking about it too.\nI think the crux of the issue is that the assumptions of the tests added in this PR are wrong. Or, at least they're inconsistent with other gateways. Looking at our base gateway and Stripe tests for example, which is another gateway with a :cents money format, if you want to charge \u00a5100, you actually have to pass in 10000--almost as if the non-fractional currency was fractional. I guess that's the external contract of Active Merchant--all transaction amounts accepted by the public API methods are expected to be in cents, period.. Opened https://github.com/activemerchant/active_merchant/pull/2267. I'd appreciate confirmation that my interpretation of the public contract for non-fractional amounts is correct.. Test added.\n. This was fixed back in https://github.com/activemerchant/active_merchant/releases/tag/v1.63.0, https://github.com/activemerchant/active_merchant/commit/6798d1539ee95c93708fb803ab56d91181defd3d specifically.. Fixed via https://github.com/activemerchant/active_merchant/pull/2324. Hi! Thanks for the PR. Do you think you could also update the README? You can generate the list of gateways and their supported countries by using a rake task: rake gateways:print:markdown\n. > Is the restriction for new gem dependencies at the gemspec level or does it also include Gemfile dependencies?\nOnly the gemspec level. That guideline is there to avoid requiring everyone that uses Active Merchant to install some gem they'll never use. It's perfectly ok to use SDKs in gateways as long as they're required just in time. Take a look at the Braintree implementation for an example.\n. Looks good to me. Thanks for the PR!\n. Hi! Thanks for the PR. Do you know if any of these should be mapped to our standardized error codes?\n. Closed #2238 via a0b3ac284ff06285ec3bf36681b8a237ab340ab4\n. Thanks @chrisboulton, that's extraordinarily helpful. I think generally, where possible, we should move towards a pattern of asking the gateway what they do  indeed support for the current merchant's account. Looks like that's possible here, and what we should be doing. . Ugh, sorry about Hound going crazy. It wasn't supposed to be on yet.\n. Hi! Thanks for the PR. Can you explain the use case for this? Why is it necessary for this gateway to have an alternative API for building requests that does not conform to the Active Merchant standard? Doesn't that kind of defeat the point of abstraction?\n. Feel free to re-open once my questions and concerns above have been addressed.. @rwdaigle Got a spare moment to take a look at this? \u2764\ufe0f \n. Hi! Thanks for the PR.\nCan you explain why you think this and https://github.com/activemerchant/active_merchant/pull/2254 belong in Active Merchant? You're introducing public methods to a single gateway that are not part of Active Merchant's established API and abstraction. How does this influence or work with the purchase flow? Do you think that 3DS support is something that should be solved by Active Merchant at all, and if yes, how do you think it could be done in a way that implements a common interface across all gateways?. Thanks for the response!\nI realized my initial questions could have be clearer. I'm well aware of what 3D Secure is, and that we support it throughout Active Merchant.\nMy primary concern is adding new public methods to a single gateway. Active Merchant is supposed to be an abstraction that provides a common interface to all gateways. If we could identify a common abstraction for this capability that we could adopt as an Active Merchant interface, I'd be all for it.\n. Looks like this is happening in <merchantAuthentication>'s <name> tag, which is crazy, since it's their account credentials. According to https://api.authorize.net/xml/v1/schema/AnetApiSchema.xsd it has a max length of 25. According to their published documentation, it has a max length of 20 though (https://developer.authorize.net/api/reference/).\nAfter reading the docs I have a feeling that these errors would be caused by someone providing an incorrect value here, such as their merchant account credentials, rather than their assigned API login ID.. Hi! Thanks for the report!\nIn the mean time, yes, just passing Mexico as your country attribute will work. If you felt like submitting a PR to update Active Merchant to handle both full names and codes, and normalize to the gateway's expected value, you'd make that change [here] (https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/pago_facil.rb) and use our country library to normalize.. @rwdaigle @davidsantoso This looks good to me. Do either of you have any outstanding thoughts or concerns?. Hey! Thanks for the issue. Feel like submitting a quick PR to fix the problem?. Thanks for taking the time to do this! Much appreciated.. Regarding adding an email address to the credit card, I'm not sure if that's correct. It's not a property of an actual credit card, it has no bearing on processing. Other gateways that expect or require this information accept it along with customer contact information. There's already a documented, normalized option for customer email.. Thanks for all the cleanup!\nI just have one outstanding question: How does this affect the #store API? Does this mean that passing an amount is required to vault a card? Hopefully not.\n/cc @davidsantoso Since this affects vaulting.. Sure you did. #store calls #save_card which calls #add_credit_card.\nAre the new fields you added (presentation.amount3D, presentation.currency3D) required for storing a card with Paymill now?. Perfect! Thanks for the explanation.. Yes, thanks! I'll handle squashing it when it gets merged.. @LarsFunke Nope, we're all good here. This'll get merged soon and will be included in the next release.. :+1: From me, I really shouldn't have added it; it was a red herring for the real issue (which was an incorrect assumption in another test). Hi! Thanks for the PR.\nCould you split out the UserAgent change into its own commit from the JP/JPY support? That's a change that should stand on its own.. :+1: from me. I like the simplification. It's a minor nitpick, but I question the necessity of the double assertions on all the tests--the assert_equal would also always fail in the cases where the assert_not_equal you added would.. If this is an abstraction we want, I'd like to revisit the naming rather than copying it directly from Stripe. api_error isn't clear at a glance (unless you're familiar with Stripe's error typing) that it's a \"shit's on fire\" type response. This is especially true considering your comment, \"generic error\", which implies it could be anything, including a not-otherwise-typed decline.. @bl I'm going to pick this up today/tomorrow and combine it with another change that's adding another standard error code, if that's all right?. I've been thinking about this more, and I've realized that this error category should be considered exceptional (literally) behavior. This is a 5xy response from Stripe's APIs, and that should result in an error being raised in the Active Merchant adapter. That's consistent with the behavior of other gateways. \nThat is to say, I don't think this is the right approach in this case. 5xy responses should raise errors, and then it's up to the implementor to deal with them.\n@davidsantoso Can you confirm if there's an existing pattern that is preferred here?. Perfect, thanks for the confirmation. Surprised to see that the default includes raising on 4xy, since more often than not, that's concretely implemented in gateways as declines or validation failures and just returns non-success Response objects. Anyway, that's a different conversation.\nOk! @bl thanks again for the PR. If you're still interested in persuing this, we'll accept one that changes the Stripe gateway to raise a ResponseError on 5xy response codes. . Hi! Thanks for the PR. Do you mind rebasing this on to latest master to pick up some CI configuration changes?. Should we document these options anywhere? I see merchant_name used in a couple other gateways.. Ugh. I'll deal with that separately, hold on to your horses.. For now, just ignore 2.0 CI. I opened https://github.com/activemerchant/active_merchant/issues/2297 to collect opinions on dropping support for it, which has been officially unsupported by the Ruby organization itself for almost a year now.. How would that play with our versioning practices? It's not a functional change, just some metadata, so I could argue that a minor release would be ok. Nokogiri, for example, dropped old ruby support in a minor version.. Sorry, been a bit distracted. I can pick this back up later this afternoon. \nLooks like we've got a bit of work to do before we can support 2.4. I'm going to have to drop testing on that version for now, and I'll create an issue to look into dealing with the outstanding issues shortly.. @davidsantoso All good here. Builds are green. Want to do the honours?. Looks good to me, but, to be honest, I don't understand the difference between the two Authorize.net APIs/systems.. Oh. So CIM is just their branding for their vaulting service. Hah. Thanks for taking the time to explain that.. Totally fine with me.. No matter what we do, we're breaking a contract or promise at some level. Currently, standardized error codes are all only for decline type errors. They indicate that he API request happened just fine, but the request was rejected by the processor for some reason or another. They've never been used to communicate communication failures.. Thanks for the PR.\nYou're right. The current way of handling non-fractional currencies is confusing, and worse, the documentation is misleading (or just wrong).\nThis has come up before in a couple issues, such as https://github.com/activemerchant/active_merchant/pull/2267. The current expectation of behaviour is:\n\nOur base gateway tests and Stripe tests for example, which is another gateway with a :cents money format, ensure that you want to charge \u00a5100, you actually have to pass in 10000, as if the non-fractional currency was fractional. That's the external contract of Active Merchant--all transaction amounts accepted by the public API methods are expected to be in cents, period.\n\nThe problem is, changing this contract requires a major release, communication, and a willingness to support 1.x for the foreseeable future. Couple that with the fact that there's a lot of things that are not perfect in Active Merchant, and lots of breaking changes we do want to make. I'd rather be making a significant amount of them in a 2.0 release, rather than just a couple. It'll hopefully ease burden of adoption (by, and ease maintenance load, as we won't have to support a number of previous major releases.. I definitely want to update the docs, yes, and I personally would love to see this change happen in the next major release.. Hi! Github issues aren't really the best place to get community support. In the future, I'd recommend using the activemerchant tag on Stack Overflow. But, what you're looking for is the standard option :order_id.\nYou can read about it here: https://github.com/activemerchant/active_merchant/wiki/Patterns-&-Standards#standard-arguments, https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L28\nAnd see the implementation for the Authorize.net gateway here: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L554-L562\n. In the course of doing this, I noticed that its quite possible to set the Ecommerce_Flag multiple times depending on the options passed in. I want to take a look at how the methods are split up that all add card data to the request, because it's pretty weird and there's some awkward duplication for sure.. @davidsantoso I'd appreciate your review when you've got a spare moment.. Yeah, I came to the same conclusion. It's fine for now, and some tests we have actually show that we trigger the duplicate scenario already without any impact. I'll still look at cleaning it up down the road. Thanks for your time!. Some context for those following along:\nUnion Pay is a distinct card brand and processing network. However, it has a partnership with Discover for cross-acceptance in North and Central American markets. So, people can use their Union Pay cards in the U.S. and the transaction will run over Discover's network. This is exactly how JCB works too.\n. @rwdaigle @davidsantoso Would appreciate your thoughts here, especially on the naming. I struggled with it. I found it hard to strike a balance between too specific and too generic.. Thanks for the context! Always helpful to know the history of things.\nI'm finding that standardized response codes like this are becoming more and more important for my use cases, so I wouldn't be surprised to see a few more PRs adding the code normalization (and preserving current messages) to other gateways. . \ud83d\udc4d Hah, sorry. I should have just checked the docs.. Oops, I always forget to do that. Thanks!. Yeah! Looks perfect. Thanks for the PR!. Hi!\nWe can't accept any gateways without unit and remote tests. Take a look over our Contributing guide in the wiki to see what's expected of any new gateway submission.. That's looking much better! Thanks! I'll take a thorough look through it as soon as I can.. I have a sandbox Paymentech account, so I can run the remotes for you.. Logs from the remote run: https://gist.github.com/jasonwebster/717a03128b953226689ae6eda3cab381 \nOne failure that seems unrelated, but we should look into regardless.. Well, it's supposed to be a failed verify, with a declined card, so it might just be stale test data. However, other test cases that rely on that card work, so /shrug. This feels like it's worth a quick regression unit test, eh?. I think we need a way to specify this via an initializer and during gateway instantiation, but what you've got so far is \ud83d\udc4c . All done! https://github.com/activemerchant/active_merchant/releases/tag/v1.66.0. Typically the ECI indicator is also required for processing tokenized requests (especially like those decrypted from digital wallets, like Apple Pay). It looks like they support passing it in according to their docs: https://secure.networkmerchants.com/gw/merchants/resources/integration/integration_portal.php#transaction_variables. Apple Pay does indeed rely on an (ab)use of the 3DS protocol for their transactions. I can say with 100% confidence that the requirement of the ECI indicator is dependent on something deep within the interaction between the issuer and acquirer, and have seen plenty of cases (funnily, mostly w/ Canadian issued Visas) where they will never, ever be accepted unless the value is set. . Cool! Thanks for taking the time to confirm that, sorry about the hassle.. Hi, just a kindly reminder that this isn't a support forum for Shopify. Active Merchant is an independent open source project used and maintained by many. \nAs for your report, it looks like the PR that @bdewater linked above has been merged, and that's about all we can do here. I encourage you to reach out to Shopify's support team if you have any issues specifically with Shopify.. /cc @davidsantoso Hi friend :wave:. Might want to take a look at this.. Yeah, I had the same failures. I'm guessing our test account that we use isn't set up to process in the currencies those tests use.. Hey @nicolas-maalouf-cko! Thanks for the contribution here. I'd really like to see a test for the response code parsing, if you've got the time. Otherwise, looks good.. We'll merge once there's test coverage for the change, as I requested above. Thanks!. I can do it when I merge, don't worry about it! Thanks again for your contribution.. Closed via 66ca4da3fe38ff3daf1e42c936f714a5c451c07f. :+1: Sure, I don't see why not. \nWhy don't you let me/us take another look at it and see if we can detect when it needs to be set, as well as normalize the responses.\nFor ref: https://developer.paypal.com/docs/classic/payflow/integration-guide/#sending-requests-directly-to-paypal-bypassing-payflow. Actually, that's the wrong documentation, whoops. https://www.paypalobjects.com/webstatic/en_US/developer/docs/pdf/pp_payflowpro_xmlpay_guide.pdf is what we're using, I believe. In which case, this header may not even have an effect. @jusleg Could you provide some more details on the conversations you had with PayPal?. Is there a reproducible remote test for the before/after? Could we have a regression unit test? Seems like a good idea for some coverage, because the reason for the order is non-obvious and super not intuitive. . This has been replaced by https://github.com/activemerchant/active_merchant/pull/2497. Merged via https://github.com/activemerchant/active_merchant/commit/9321be0495dd6da2e27764841a4bdd27b3783b14. I think this is a great idea. In some cases, this already happens through the authorization attribute of the response. However, in some gateways, that is aggregate information required to follow up with the transaction and not just the identifier.. It is, perfect. \ud83d\udc4c Thanks for putting that together.. May I ask why we defaulted it to a real value rather than leaving it blank and letter the caller know it is required? Seems like it would lead to some hard to debug situations when building an integration, accidentally leaving off the state, and having it set to a valid, yet incorrect value.. It's fine. I still disagree (I'd just drop the n/a and pass through the nil, and let integrators fix their issues), but I don't want to be in the way. Feel free to ship on! \ud83c\udf2e . Funny story! \nI'm starting to see some Bill To State/Province is required declines from Authorize.net now, at least for UK customers. \nI took a look at some other Authorize.net  documentation here http://developer.authorize.net/api/reference/#payment-transactions-charge-a-credit-card and it says something totally different than the one above for billTo.state:\n\nState of customer\u2019s billing address.\u00a0Required only when using a European Payment Processor.\n\nSo, I suspect that the n/a value was initially meant to cover those cases-- European countries that don't use a state/province.\n. Yeah, I think that's best?. I already did! https://github.com/activemerchant/active_merchant/pull/2563. Well, Active Merchant is ideally some layer of abstraction, right? We have some standardized and documented options that all gateways should adhere to. What do you think the most correct option name would be, knowing that each gateway may call it something completely different on their API?. Going to close this and re-open with just the schema validation and CAVV dupe fix. Going to solve the ECI issue generally elsewhere.. Relevant bits extracted into https://github.com/activemerchant/active_merchant/pull/2529. Heya friends! \ud83d\udc4b Could you provide a bit of clarification on this change?\nIf I use Authorize.net's docs, it seems to indicate that a Reason Code of 4 should be treated like a decline. My read on it is that it should be treated as a lost/stolen card.\nhttps://support.authorize.net/authkb/index?page=content&id=A50\nhttps://www.dropbox.com/s/02gn89bq3s2ftds/Screenshot%202018-02-22%2010.16.06.png?dl=0\nhttps://developer.authorize.net/api/reference/responseCodes.html. Huh, yeah, thanks for the quick follow up. I wonder if we're looking at different versions of documentation.. Do you recall exactly which documentation you found that in? I found another link (https://developer.authorize.net/api/reference/features/errorandresponsecodes.html) that seems to support 4 as being a decline as well.. Closed via https://github.com/activemerchant/active_merchant/commit/77e6f8aad14a566b0446d683073b9eda29938f4d. Nah, I think the best thing would be to document an aspirational standard set of options for #store and #update. Carrying over ones from the purchase API may not make sense.. Great! Then let's add it to what little documentation there is around standardized options: https://github.com/activemerchant/active_merchant/wiki/Patterns-&-Standards#options. Simply use the card token as the second argument to #purchase or #authorize instead of a card number.. Can you summarize the contact changes here the break backwards compatibility?. Closing this in favour of less gross workarounds. In the intermediary, I'm going to encourage this to be fixed on the application side, and in individual gateways. This just feels so wrong--this object should be a logic-less value object--simply a struct of card information.. For anyone who's curious as to why:\nSubmitting plain PANs to Stripe (or any gateway, for that matter) requires that your system is 100% PCI compliant. This is essentially a toggle for \"ok I know what I'm doing.\" The fact that Stripe is doing this by default is a good thing.. Turns out we can't just do this:\n\nIf receipt_email is specified for a charge in live mode, a receipt will be sent regardless of your email settings.\n\nfrom: https://stripe.com/docs/api#create_charge-receipt_email. This is an open source gem, supported by a community of contributors. Is there anything preventing you from checking yourself?. nit: class methods at the top of the definition (above instance methods) please.\n. nit: NetworkTokenizationCreditCard should be enough. Billing module is already implied and will be checked first due to resolution rules and nesting.\n. What happens in case of a connection error or 5xy response and this body isn't there? It is appropriate that we let that bubble up (probably, yes)? I'm assuming a request error will be raised before we get to the hash traversal, yeah?\n. Yes, this contains another change wherein it is not sent if non-numeric. \nI dug though the history looking at why we allow setting eci to \"recurring\" to flip the recurring option, and it seems to just be some legacy and should eventually be dropped. Original PR that added it: https://github.com/activemerchant/active_merchant/pull/1152\n. So, was this actually necessary?\nMy original questions were: \n\nWhat happens in case of a connection error or 5xy response and this body isn't there? It is appropriate that we let that bubble up (probably, yes)? I'm assuming a request error will be raised before we get to the hash traversal, yeah?\n\nNone of which were really answered.\nThis is also the incorrect error to raise here. It's only ever used elsewhere in Active Merchant in case of accept-encoding errors, or actually malformed HTTP.\n. Why is this commented out? Looks like it is covered above so can be removed.. Either implement this test or remove the empty method.. Hmm, this is tricky.\nThe #store method is part of the \"official\" Gateway abstraction API of ActiveMerchant. Not all gateways implement it, but if they do, they need to adhere to the standard interface. This would now be the only one with a different method signature. \nI don't entirely understand why an amount is needed to store a card, but in lieu of a better alternative, you'll probably have to move it into the options.\nAlso, minor nit, can you fix the indentation here?. I'm not sure about the * 100 here. Since this gateway's money_format is already :cents, #amount will be in integer cents already.. This needs to be in test/remote, not test/unit. Same applies here regarding snake casing the options. . Not sure if this is totally necessary, but I wanted to guard against cases where the node would be set twice. It's really not ideal how there's 3 different places in the  flow that this value can be set.. https://en.wikipedia.org/wiki/ISO/IEC_7813#Track_1 if you're curious. @adyenpayments Let's fix these up, then this should be good to go.. In the linked issue you mention\n\n\"capture\" test cases were rejected because I did not provide the OrderID.\n\nWhy is it that the order_id from the authorization did not work in your case? Line 584 (the top of this method) attempts to extract it from the authorization, which is what would be typically expected in an auth and capture flow. Is that behavior buggy? It seems weird to me that you'd have to pass this in separately when trying to capture an auth.\n. I don't think we should be swallowing this error. Shouldn't the caller know if they're passing in bad country data?. :D And that's why they're separate commits. Ugh. Return value from a predicate. (I know this isn't your doing, just generally complaining). Debugging code?. Should this include a precision?. Oh, nevermind. They all do this. Sorry. Can't we just delete the key from the options for the specific void request (from #verify) instead of introducing this additional piece of state?. Yeah, I get that. I'd usually shy away from mutating input as well, but in this case, I think it's better than having potentially leaky state.. According to the docs, it looks like :address_line2 is supported, so we should have it here too.. custom_fields_array feels a bit off to me, how about just custom_fields? And how do you feel about moving the default to a constant?. Yep! Like, adding a:\nruby\nDEFAULT_CUSTOM_FIELDS = [:customer_name]\nto the class and using it here.. \ud83e\udd14 I wonder why we bother with the upper bound limit.. Well, what do you think is best? I was mostly just asking for opinions. \nAs someone integrating ActiveMerchant, I'd personally find it frustrating that I couldn't test edge Rails versions without some dependency monkeying.\nI like what you've proposed as a solution to that.. Not using the normalized error messages is a big change (even if it wasn't always working as intended). This seems unrelated to actually extracting the correct reasonCode. Why'd you decide to do this too?. Correct.. Style nitpick, so not important, but I'd typically prefer when ... then syntax rather than a semicolon. We don't have any enforced linter rules (yet), so it's all right for now.. I'd like the record to reflect how dumb I think this is. . Nope, you've got it right. ActiveMerchant's contact for billing_address and shipping_address is as follows: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L39-L49. Which, I suppose, raises a question... is this a  gateway specific option, or an Active Merchant normalization? . My gut feeling is that this is a failure of abstraction on FirstData's part. Who knows what other gateways do. I'd assume most normalize data across card networks, but here we're being bit by a leaky abstraction.. The in the case of Apple Pay, the Payment Token's payment data contains an ECI value that must be passed along for certain network/issuer combinations: \n\nOptional.\u00a0ECI indicator, as defined by 3-D Secure.The card network may add an ECI indicator to the card data. This indicator is then included in the payment token.If you receive an ECI indicator, you must pass it on to your payment processor; otherwise, the transaction fails\n\nhttps://developer.apple.com/library/content/documentation/PassKit/Reference/PaymentTokenJSON/PaymentTokenJSON.html\nIt's not always required, but in some cases it is in order for the transaction to process properly. I think it would be best to pass along our standard :eci option from the options hash here.. Ahh yeah, sorry, the NetworkTokenizationCreditCard attribute is what I meant, not the option.\n\nGateways seem all over the place when it comes to accepting eci\n\nI can speak for the the ones for which we've implemented and confirmed network tokenization support, and it's all consistent if sourced from the card object.\n. Yes. This is a failure of abstraction at many levels (the gateway, FirstData, and the network) that this leaks all the way here, however, doing this is the only way we could have this \"just work\" for people without knowing this particular piece of arcana. (I'm the one that patched the original FirstData E4 gateway that this is copied from with this logic.). It will because of the line above, which removes all blank? values (and their keys) from the card hash.. ",
    "varyonic": "@ntalbott I mailed you the credentials Sep 12.  Reach me on LinkedIn if issues with email.\n. @ntalbott This build failed due to a network timeout.  Do I need to resubmit?  Can you restart?\n. Corrected test host and SSL cert.\n. Removed.\n. Removed redundant code in full.\n. Mailed you the credentials and test card details, I will need your test IP address to add to the gateway firewall.\n. Works for me.\n. Looks like you are not using valid credentials.  There is a sign-up URL in the fixtures.yml.  I have only 3 failures, which are related to optional services I haven't signed up for.\n. @j-mutter Added unit tests and re-based.  Support by this gateway is very basic, and does not yet include a #store method.\n. Hi @bruno, we don't use that feature, but you can fork and add, or I will try and find some time to look at it.  I did something similar for Redsys.\n. @rwdaigle This branch is six months old now, shall I rebase?\n. @rwdaigle Done.  Credentials for public test account included so running remote test should be straightforward.\n. Looks like this might duplicate #1883?\n. Sorry, it took me a while to notice Rails 3.2 support was broken.. I'm not a member of @activemerchant/developers and I was caught by surprise when the Digicert Global Root G2 cert expired yesterday, used to verify sermepa.es (Redsys). Took me a while first to update our old Ubuntu ca-certificates package and then to overwrite cacert.pem currently provided.  This is a small shop so not much attention paid here to managing certs at the Rails environment level.. Responded on SO.. Resolved on SO. Can be closed.. Yes, it does auto-negotiate. On Ubuntu you need an at least reasonably recent version of libssl-dev.  I would expect something similar for other distros.. It's not just vendors that implement ActiveMerchant gateway adapters, some of the small ones are just not that sophisticated. If there is a move to plugins I would still like to see a central registry, if only a wiki, of what's available.. Don't be afraid to read the code. In the case of Redsys payment can be an ActiveMerchant::Billing::CreditCard or a String credit_card_token representing a previously tokenized card.. > SIS0252: Merchant does not allow card to be sent\nProbably related to your account setup, try your Redsys technical support.. PRN = Payment Routing Number, effectively the gateway account ID to which the user belongs.\nFrom: Luis Lopez [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 5:49 PM\nTo: Shopify/active_merchant\nSubject: Re: [active_merchant] Added PacNet gateway (#810)\nIn lib/active_merchant/billing/gateways/raven_pac_net.rb:\n\n\nself.homepage_url = 'http://www.pacnetservices.com/'\n  +\n\nThe name of the gateway\n\nself.display_name = 'Raven PacNet'\n  +\ndef initialize(options = {})\nrequires!(options, :user, :secret, :prn)\nsuper\nend\n  +\ndef authorize(money, creditcard, options = {})\npost = {}\nadd_creditcard(post, creditcard)\nadd_currency_code(post, money, options)\nadd_address(post, options)\npost['PRN'] = @options[:prn]\n\n\nPRN option is one of the required credentials that PacNet supplies to the customer.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/810/files#r7202701 .  https://github.com/notifications/beacon/o8M_9fA8Mgs0x4wK_TCZ31eg55geYXrszDxVPkkUt4te4b6F-nlXEsrUaNZ42Ku6.gif \n. We are not sponsoring Luis for the fraud score functionality and will leave it to others to implement. \nFrom: Luis Lopez [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 5:53 PM\nTo: Shopify/active_merchant\nSubject: Re: [active_merchant] Added PacNet gateway (#810)\nIn lib/active_merchant/billing/gateways/raven_pac_net.rb:\n\n\n\nThe complete set of fields used to determine the fraud score are:\n\n\n\n\n\nCardIssuerName\n\n\nCardIssuerPhone\n\n\nCustomerIP\n\n\nBillingCity\n\n\nBillingRegion\n\n\nBillingPostal\n\n\nBillingCountry\n\n\nShipToCity\n\n\nShipToRegion\n\n\nShipToPostal\n\n\nShipToCountry\n\n\ndef fraud_review?(response)\n\nresponse['FraudScore']\n\n\n\nAt the moment. I am not thinking on implement this part of the code. I can delete the comments if you prefer.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/810/files#r7202796 .  https://github.com/notifications/beacon/o8M_9fA8Mgs0x4wK_TCZ31eg55geYXrszDxVPkkUt4te4b6F-nlXEsrUaNZ42Ku6.gif \n. I think future maintainers will need their own test accounts.  How critical is this?\nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 5:45 PM\nTo: Shopify/active_merchant\nSubject: Re: [active_merchant] Added PacNet gateway (#810)\nIn test/fixtures.yml:\n\n@@ -10,6 +10,12 @@\n #\n # Paste any required PEM certificates after the pem key.\n #\n+\n+raven_pac_net:\n-  user: user\n\nAre these working credentials? Can you provide working test credentials that we can check in so that future maintainers can run the remote tests?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/810/files#r7202591 .  https://github.com/notifications/beacon/o8M_9fA8Mgs0x4wK_TCZ31eg55geYXrszDxVPkkUt4te4b6F-nlXEsrUaNZ42Ku6.gif \n. The Raven API implementation is copyright Deep Cove Labs, a software company associated with a payment services company called PacNet Services Ltd.  FWIW my vote is for PacNetRavenGateway. \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Thursday, October 24, 2013 5:46 PM\nTo: Shopify/active_merchant\nSubject: Re: [active_merchant] Added PacNet gateway (#810)\nIn lib/active_merchant/billing/gateways/raven_pac_net.rb:\n\n@@ -0,0 +1,226 @@\n+module ActiveMerchant #:nodoc:\n-  module Billing #:nodoc:\n-    class RavenPacNetGateway < Gateway\n\nShould it just be called PacNetGateway?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/810/files#r7202623 .  https://github.com/notifications/beacon/o8M_9fA8Mgs0x4wK_TCZ31eg55geYXrszDxVPkkUt4te4b6F-nlXEsrUaNZ42Ku6.gif \n. So far I have only needed to update the test_url.  I don't know the plans for production.\n. Yes.  I was following the example in braintree_blue.\n. TransactPro have agreed to add a certificate, I expect to update next month.\n. We don't require: false, eg. https://github.com/activeadmin/activeadmin/pull/4810/commits/508287fe0d225a0c7f50bd5d50641bf8a00a7c89. Looks good to me.  FWIW we went with https://github.com/activeadmin/activeadmin/pull/5174/files. FWIW Bundler has eval_gemfile, eg. https://github.com/search?q=eval_gemfile&type=Code. Not much, mostly cosmetic and reflects this is a common pattern.. ",
    "angelini": "LGTM.\n. ",
    "kaspernj": "@ntappin: Thank you for reviewing my code. I will refactor it into a separate gem as suggested.\n. ",
    "RooTooZ": "Maybe I can still say something about the error, my application on production has down\n. ",
    "andrewpaliga": "test_partial_capture remote test fails with these changes as well -- can you investigate? \nhttps://github.com/shulmang/active_merchant/blob/mercury_gateway_updates/test/remote/gateways/remote_mercury_test.rb#L123\n. I share with the concern, however partial auth deny does logically make sense for me. It would be good if the latest comments/questions on the PR could be addressed. \n. @j-mutter @jnormore I removed the redundant lines, but when I ran the remote tests (before even making changes) 4/16 failed. Investigating...\n. Remote tests are passing now. I want to write a test_successful_authorize_and_capture test that uses track data but I'm not sure how to generate valid track1 data? I'm pinging mercury dev support about it. Once that's done this should be good to go.\n@j-mutter @jnormore\n. I changed the fixture credentials based on mercury dev support recommendations. \n. @jnormore np and that's the plan! I just don't know how to mimic/generate valid track1 data so the auth goes through... \n. thanks @louiskearns. @jnormore added tests. \n. @j-mutter @jnormore I removed AVS and CVV from the request when track data was present as this is not needed for swiped transactions. Mercury support recommended we do this. I also fixed the indent @j-mutter :) \n. @louiskearns the logic for that piece actually remained the same. We send track1 if we have if credit_card.track_data=true  and track 1,2,3 based on options param if credit_card.track_data=false. The only thing I changed was that the 6 encrypted tracks are not being sent if credit_card.track_data=true. Perhaps that's not necessary, should we send the encrypted tracks either way? \n. It's an odd situation because the other track data code takes a different approach. They send all track data fields every time and just set them nil if the data isn't there. Perhaps they are only working with card present. \n. @j-mutter addressed comments -- remote tests passed and 'purchase' is unit tested \n. @j-mutter good to merge? \n. @j-mutter just for consistency - the above refund test is the same. I removed the $20 and tested and it also worked. I could add remote tests for both but better to keep the remote tests more lean IMO. let me know and will merge\n. @j-mutter should be better now\n. @jnormore sure, on it. \n. Hey, just added network_merchants and mercury error codes w/ tests. It's worth noting that mercury only has 3 error codes that map directly. However, the keys of error_code_mapping are fairly arbitrary so you could always make them code+response or create a intermediary method that uses regex to map to the correct code. I stayed away from that for now though, but always possible. \n. @jpcaissy not sure if you saw my note. You actually require the success if statement in mercury.rb as it \"Success\" also returns a 00000 dsix_code (same are \"Card Declined\"...)\n. @jpcaissy thanks\n. +1 for mapping subsets, however I think we should ship this PR as is.\n. I did wait for CI\n. That's why I restarted it :) \n. Hm.. n/m? Could have sworn it was green, my bad.\n. @j-mutter @jpcaissy removed ternary operator -- c'est bon? response[:error_code] returns 00000 when success\n. @girasquid can you take a quick look before I merge? Tests passed.\n. @ntalbott woah didn't notice the updates! thx @girasquid n/m\n. @ntalbott absolutely - will make sure to keep you looped in.\n. @ntalbott @InfraRuby are you okay with me swapping :username to :login? :username breaks without us hardcoding an override in Shopify and :login is more consistent with the rest of the fixtures file.\n. @ntalbott okay makes sense. We'll handle it it similar to those gateways. \n. @ntalbott yes according to Mercury integration support it has been removed globally. From Chris Jennings:\n\nMercury does support your format [c111111111.1], in the past we  did not, but we have made changes to our platform that will enable our duplicate to still function properly.\n. Thanks for reviews -- just working through the failed remote test with Mercury support. There are some issues with how AM is passing the RefNo. Fix coming shortly. \n. @j-mutter @ntalbott remote tests should be passing now. I needed to add a filler value for preauth voids\n. @j-mutter no the unit tests don't cover void as it stands. All remotes passed however.\n. @batusai513 we are still waiting for integration work from PayU Latam\n. @j-mutter isn't that only the default currency? \n. :+1: \n. @fdezign please direct integration requests to payment-integrations@shopify.com.\n\nAlso, please note that Active Merchant only supports credit card integrations. To offer additional payments types such as wallets / direct banking integrationS you will need to integrate to Shopify using out offsite gateway integration.\n. @jomit427 we are looking to add beta IPP integration to Shopify soon. Please email payment-integrations@shopify.com for further inquires. \n. @j-mutter I :tophat:'d this locally -- looks good. Can take a quick look at the code? \n. @leolara that just means tested and the comment was directed at @j-mutter he will take a look when he gets a chance\n. ```\nvagrant@vagrant:~/src/active_merchant$ bundle exec rake test TEST=test/remote/gateways/remote_authorize_net_test.rb\n.................................\nFinished in 36.460307549 seconds.\n33 tests, 97 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.91 tests/s, 2.66 assertions/s\n```\n. Speaking with Mercury support I can verify that this is desired behaviour. Enabling Partial Auth will authorize the transaction for the remaining balance on the card. \nex. You are buying something for $100 and there is only $50 left on the card. The transaction would be approved for $50 with Partial Auth tag passed, and declined with Partial Auth tag left out. \nI think the latter is a more sensible default.\nNote that Partial Auth only applies to card present transactions. When Partial Auth is supported there are additional requirements on the POS software to handle these cases (prompt for payment completion etc.). \n@j-mutter @ntalbott do these changes look good?\n. ```\nvagrant@vagrant:~/src/active_merchant$ bundle exec rake test TEST=test/remote/gateways/remote_firstdata_e4_test.rb\n.................\nFinished in 12.435057742 seconds.\n17 tests, 69 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n1.37 tests/s, 5.55 assertions/s\n```\n. @j-mutter combined hash\n. remote output again for good measure\n```\nvagrant@vagrant:~/src/active_merchant$ bundle exec rake test TEST=test/remote/gateways/remote_firstdata_e4_test.rb\nFinished in 12.387603672 seconds.\n17 tests, 69 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n1.37 tests/s, 5.57 assertions/s\n``\n. I think Network Merchants already supports this: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/network_merchants.rb#L144\n. :+1: from me -- @j-mutter ?\n. Hi @GonzoDK, Shopify is working on this, v10 should be supported soon. \n. @ao this change looks good but we're still getting an error in our remote tests. Refund method needs to support passing in an amount as a parameter. When I switchnilto@amount[in the remote refund test](https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_worldpay_online_payments_test.rb#L69) I get an error.\n. @ao unfortunately we cannot move forward with Shopify integration without API changes as all full refunds will fail with the current implementation. \n. @ao :+1: \n. @ntalbott fyi \n. Yeah I agree it makes more sense on theCreditCard, let's make that change. Default behaviour will stay the same. I haven't seen the flag on any other adapters. \n. :ship: \n. :shaved_ice: \n. :+1: \n. LGTM\n. :+1: \n. LGTM\n. :+1: \n. @wedstar no one is working on this on our end at the moment, contributions would be welcomed. \n. :+1: \n. @girasquid do remote tests pass when the tokenization params are passed? \n. :+1: \n. :+1: \n. \ud83d\udc4d \n. @duff I've spoken to one of our devs and we usedescriptiontoo in fact. @merchantwarrior have you verified if Shopify is sending the info you are looking for in theinvoicefield? \n. @merchantwarrior it looks likenilis the value ofoptions[\"description\"]for Shopify transactions. This would explain the error you're seeing. I'm not sure in what circumstanceoptions[\"descriptions\"]in notnil. @aprofeit @ThereExistsX ?\n. @merchantwarrioroptions[:order_id]will always be populated with something similar toc12345678representing the checkout id. I'm not certain it make sense to setpost['transactionProduct'] to this value but I'll let you be the judge of that.\n. @merchantwarrior yes they'd be able to search with the value and the corresponding order would be retrieved. \n. @merchantwarrior once you add the test back we can merge this PR. Can you also verify whether the remote tests are passing for your integration?\n. It doesn't match the recommended test data:\n\n. Yeah, I believe these are the updated credentials, they told me to use them.\n\n. No actually, the add_swipe_data method adds track data based on the options param that is passed. \n. hm.. I think it might be needed here as I get an exception when I take it out... The track_data method doesn't exist on creditcard_or_vauld_id.. I don't get why it doesn't get thrown in the usa_epay code...\n. Actually I got it, @check is sometimes passed here in lieu of @credit_card , it fails then. :track_data is defined on @credit_card but not on @credit\n. @jnormore added some descriptions \n. note: we require the success if statement here. success also returns a 000000 dsix_code from mercury as card_declined does. \n. @j-mutter good point. I fixed made the fix but can't test it as I can't login to my first_data demo account for some reason. Will commit once tested. \n. Error codes is 00000 when successful so it won't map to anything. I guess that is okay?\n. okay perfect\n. yeah -- unfortunately. The rest are buried under the :card_declined code. It is possible to map out more manually though by doing the logic in AM.\n. @shulmang can you rebase against master? This line in the code has changed recently. \n. This will break out integration and the remote tests because invoice_no we use is non-numeric. Mercury enforces only numeric ref_no's. Is it required to pass in invoice_no here? \n. @shulmang I believe this is only required for non-authorized requests. Authorized requests look only use ref_no if you are refunding a capture and then they are looking for the Mercury generated 0001-0004 value. Can you verify if your tests pass without this change? (Line 297)\n. Are :sender_id and :channel_id supplied by the merchant? \n. @leolara I would just swap :given and :family for :first_name and :last_name here \n. Drop it :+1: \n. I would leave the default as not passing a :manual_entry option \n. test for authorizations? \n. Why aren't we passing market_type with auth's as well? looks like it's supported. \n. I'd add a auth test too if market_type is added to auths.\n. The test failed and I don't understand why it wouldn't be expected to fail. The test above is the exact same (other than the amount) and expects a success response... (same response the deleted test was actually getting)\n. Not sure, but the test is also failing on master.\n. What's this?\n. n/m I see Alex already commented on it.\n. ",
    "shulmang": "My wife recently had a baby and I'm currently really preoccupied with other demands at office.  Will address comments/questions on the PR ASAP.\n. I have factored out the mercury partial auth default deny logic into it's own PR: https://github.com/Shopify/active_merchant/pull/1612\nI haven't addressed any issues the default auth deny logic causes in the test suite in that PR yet.\nI believe that the AcqRefData for PreAuthCapture has already been added to the mercury integration so is not needed from this PR.\nI believe that the invoice_no for ref_no logic was really only needed for the mercury certification scripts and seems to interfere with current test suite so am not bothering to pull to it's own PR.\n. Hi, @andrewpaliga I rebased master to resolve the merge conflict.\n. Hi @andrewpaliga, In order to successfully process some of the transactions which where required as part of the mercury integration certification we where required to use the :invoice_no parameter from the mercury gateway response as :ref_no in subsequent requests.\nWould allowing for the specification of :ref_no through transaction options help the tests get around this logic? https://github.com/shulmang/active_merchant/compare/mercury_gateway_commit_options?expand=1\n. I agree that changing default behavior is a red flag.  However, while \nworking through a recent Mercury gateway integration certification with \nMichael Mantineo mmantineo@mercurypay.com, he stated that defaulting \npartial auth to true was generally undesirable.  An example use case is: \nA merchant makes a sale for $10 but the buyer's card only has $5.  In \ngeneral a merchant would want the transaction to fail for insufficient \nfunds in this situation.  However, with partial auth true the \ntransaction will result in a success but only $5 will have been charged. \nThe merchant may not realize that they where only paid $5 because the \ntransaction did not fail.\nOn 12/18/14 12:49 PM, Garett Shulman wrote:\n\nOn 12/18/14 11:52 AM, Nathaniel Talbott wrote:\n\nIn lib/active_merchant/billing/gateways/mercury.rb \nhttps://github.com/Shopify/active_merchant/pull/1399#discussion-diff-22061981:\n\n@@ -90,7 +90,7 @@ def build_non_authorized_request(action, money, credit_card, options)\n           xml.tag! \"Transaction\" do\n             xml.tag! 'TranType', 'Credit'\n             xml.tag! 'TranCode', action\n-            if action == 'PreAuth' || action == 'Sale'\n-            if (action == 'PreAuth' || action == 'Sale') and options[:allow_partial_auth]\n\nI'm concerned that this is changing the default; now a flag has to be \nset to get the old behavior? In general I'm really dubious about \nadding another flag here. Why is it even needed?\n(Also, if you use |and| in Ruby you're generally gonna have a bad \ntime. But not a big deal since whoever merges can change to |&&|.)\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Shopify/active_merchant/pull/1399/files#r22061981.\n. \n\n",
    "philipgiuliani": "What you think about using Time.now.year + 1?\n. ",
    "jcutrell": "+1.\nReally, the concept of billing a saved card relies on this feature.\n. ",
    "nsimmons": "Review @karlhungus @edward \n. Since it's a test gateway i think it makes more sense for it to be in the \"other\" list.\n. ",
    "dylanblanchard": "No, we haven't really chatted with international shops about gateways (minus the SP int'l survey).\nBut even generally, bogus gateway isn't used often as it's not clear what it is, or what it does.\nFor it to be effective, it'll need to be prioritized in later stages of onboarding. Just not there yet. \n. ",
    "eapache": "Couldn't figure out how without slowing the test suite abysmally, suggestions welcome.\n. Doesn't appear to work. It still hangs for the sleep time, then the test fails with an unmatched expectation...\n. Got the tests working (just ended up calling Kernel.sleep instead of bareword sleep), should be good now.\n. The others are all \"ends with 1, ends with 2\" so I made it x3 to avoid ambiguity for values like 31.\n. Getting push-back on this, we have other delay/benchmarking methods already.\n. It seems to me that the \"fixing minor issues yourself rather than asking the contributor\" and the \"merge vs rebase\" points are fairly distinct and we could adopt/reject them separately?\n. From the looks of it they are actually just sending raw html in the parameter; should we be preemptively escaping any other characters?\n. LGTM\n. the response = can be moved outside of the entire begin/rescue block I think?\n. gsub takes a map as its second parameter IIRC, so you should be able to do this with a single call rather than chaining them together\n. ",
    "ggrossman": "I'm co-owner with @vkmita of the https://github.com/zendesk/luhn_checksum gem ... we're fine with the code being inlined directly\n. ",
    "vkmita": "@j-mutter @ntalbott @girasquid I inlined the implementation. Looks good?\n. Let me know if I crated my PR incorrectly in any way\n. ",
    "morgoth": "run into the same issue\n. ",
    "TheKidCoder": "Thanks, I was just unsure because of their formerly super ambiguous name... Will be filing a PR soon for it.\n. ",
    "johndouthat": "It only seems to occur on systems with OpenSSL 0.9.8, like Mac OS X Mavericks and Ubuntu 10.04 LTS. It doesn't seem to be an issue on Ubuntu 12.04 LTS or 14.04 LTS.\nopenssl s_client -connect api-aa.paypal.com:443\n. See #1432 \n. The problem with forcing TLSv1.2 is that it isn't implemented in OpenSSL 0.9.8, which is the standard for OS X and Ubuntu 10.04 LTS. It only supports up to TLSv1. In my case, switching to the official API endpoint rather than the old legacy one that's in paypal_common_api.rb fixed the issue for me, regardless of the linked OpenSSL version.\nMonkeypatch:\nActiveMerchant::Billing::PaypalCommonAPI::URLS[:live][:certificate] = 'https://api.paypal.com/2.0/'\n. I believe Payflow and Payflow Express use a different set of URLs, as defined in payflow_common_api.rb and uses a different commit method defined there, too. So I don't beleive #1434 or #1432 would resolve any Payflow issues. \n@fastjames brings up an interesting point though. Is there a way to make TLSv1 the minimum required protocol? Because allowing the client to continue to offer to connect to any processor with SSLv3 could potentially open you up to PODDLE MITM attacks. AFAICT, net/https only allows you to specify a single protocol\n. ",
    "Davidslv": "Any insight you guys have will be helpful for us, thank you\n. Thank you, that actually matches with our analytics information.\n. Update:\nPaypal is going to stop supporting SSLv3 on the 3rd of December, will we be ok by using the current version on rubygems (1.44.1) or there's a need to tweak ?\nhttps://ppmts.custhelp.com/app/answers/detail/a_id/1182/kw/poodle\n@joshmyers @girasquid \n. Thanks, we are good as well on 1.44.1 (updating soon)\n. Thank you :+1: \n. ",
    "fastjames": "We began experiencing this problem today 2014-10-23 in our staging environment (\"Processor not available\" when attempting a payflow checkout). According to an alert in Paypal Manager, Paypal has disabled SSLv3 as of today in their payflow pilot/staging environments (https://www.paypal-community.com/t5/PayPal-Forward/PayPal-Response-to-SSL-3-0-Vulnerability-aka-POODLE/ba-p/891829).\nMaybe this is distinct from the paypal changes that are under discussion here, and if so I can open a separate issue/PR to fix it.\n. @johndouthat the only fallback scheme that I'm aware of is 'SSLv23' which falls back to SSLv2. Not ideal, but useful if your client doesn't support TLS.\n. Just finding this since I ran into it yesterday. The on-site CS rep explained that the auth occurs before the transaction is sent to Decision Manager, which is why it appears to be both successful and not successful. The first thing I noticed yesterday was that reason code 481 isn't in the reason codes table in the code; would adding r481 (and r480) get us a better message? I'll test that out later today.\nEDIT: removed extraneous question about extra fields\n. Closing until I can verify proper operation.\n. Closing while I work on an odd response from CyberSource.\n. I have run this code change against the CyberSource test business center, and it performed as expected.\n. I added a unit test for the presence of the ipAddress element, similar to my other PR.\n. I was reluctant to modify the existing add_line_item_data method so I overlaid what I needed to make it optional. I can fold those two together if it's OK for the tax calculation request (that seemed to be the only way the request enforced a requirement for line item data).\n. I have tested this change against the Cybersource sandbox, and it worked as expected.\n. @j-mutter I'm not aware of any cases when someone would pass the data to the call but not want it to be sent to CyberSource. We are using the data when writing \"Decision Manager\" rules (CyberSource's fraud prevention service).\nI'll add tests to this PR.\n. @j-mutter I have added tests for auth and purchase. I borrowed the pattern from the payflow unit test, since I did not see any other tests here that inspected the request structure.\n. Correct, I think the previous method was an artifact of an earlier approach. Changed.\n. ",
    "mcgain": "The motivation behind this, is that we want active_merchant to return standardized error codes to make the end users life easier. If active_merchant returns standard codes, despite the gateway, it should save the end user a lot of time translating the codes themselves.\n. We thought about adding it to the response as well but went for a minimal impact approach. That said, I agree that's the best approach. Can you do that @jpcaissy?\n. I would prefer to ship this with just one or two integrations to begin with to keep the scope small. \n. @ntalbott, agreed. \nI think I misunderstood your comment \"AM should also expose the gateway-specific \"error code\" directly in the response vs. having to pull it out of the Response#params\". Could you elaborate please?\n. I agree that this should eventually be a first class concept. Perhaps I am being to conservative, but I wanted to get this into production, test it out and add a bunch more integrations before publicizing it too much. \n. Right, let's get this shipped. \nThe other integrations seem to have gone well. It doesn't look like we need to introduce a new abstraction there to contain it. \nIn a future PR we will promote the error codes to a first class concept and discuss having a response_code instead of an error_code.\nThe question of default error messages can also wait until we have used this in production for a while. It might be worth talking to some other integrators about it to see whether it will suit all needs.\nAny objections to shipping this as is?\n. Looks good to me. What say you @girasquid?\n. I added remote tests for stripe to cover all but one of the codes. The exception requires different account settings. This is also true for a lot of the usa epay errors.\nSince I am going to need to figure out how to change settings programatically, or use different fixtures, I will add those tests in another PR.\nI am adding the usa epay tests that I can, and then the other gateways.\n. @girasquid @jnormore @ntalbott \nWhile testing the other gateways I discovered a whole bunch of undocumented error codes that we should support. Documentation on our chosen gateways (except stripe) is insufficient to develop remote tests for the error codes so for now, I have removed them. \nAll the other code is unchanged, I just removed the other gateways. \nI would like this to ship as-is, as stripe is properly remote tested. \nNext week, I will begin to contact the gateways in order to test them properly so that we can be confident in them.\n. ping @ntalbott, are you happy with this approach? I will get onto speaking with the gateways this week.\n. I would prefer to use lowercase error codes here unless anyone has any objections.\n. ",
    "jpcaissy": "I've added the standard error code to USAePay since it's a merchant we already extracted the error codes.\n@ntalbott I must admit, I have difficulty figuring out what you mean by having this become a first class at the AM level.\n. Oh yes, @mcgain and I just talked that. Once this is merged, I'll be happy to open a second PR :)\n. @andrewpaliga Wouldn't it be best to have a generic error message for arbitrary error codes that can't be mapped, and pass the merchant's error code in the response?\n. Should we just keep the error code mapping lookup, and leave to the user any further lookup? I personally find using regex to map error code a bit too complex.\n. @ntalbott I removed the mapping from the base Gateway to the merchants. I must admit, it's better.\nI also removed the double indirection on the mapping, the gateways map directly the standard codes in the attribute definition, not during the creation of the Response object.\nEdit: Updated the generator templates too!\n. Removed the success ? nil :\nCan't wait to use it here also :+1: \n. @andrewpaliga Got the email notification, so yes! Fixed it for Stripe also, it doesn't return the error array on success.\nNow :green_apple: \n. :dancers: \n. Glad to see other gateways!\nExcept from my nit-picking comment LGTM!\n. LGTM :dancer: \n. Is it worth it adding an assert in the unit tests?\n. Yep, no error code would just return nil. Fixing it up.\n. Yep.\n. Is the ternary operator needed? We needed it for Stripe because it was a nested hash and would fail otherwise. \n. Same thing about the ternary operator.\n. There's only 3 mapping possible?\n. error_code should only return a standardized error code. Instead of returning Paypal's original code, you could default to processing_error\n. ",
    "brandoncc": "Thanks for that @girasquid. Do all versions of ActiveMerchant support TLS v1.2? I am working on an app which uses ActiveMerchant v1.4.1. Using your method above I connected successfully from my server using TLS v1.2, I just need to make sure that my version of ActiveMerchant will support it as well.\n. @girasquid I agree. Honestly I am a bit afraid of upgrading things because there is basically no test suite so I am afraid of breaking things. Most current gems don't support Ruby 1.8.7 which the app is running on. I don't see a list of requirements for ActiveMerchant, does it support Ruby 1.8.7 and Rails 2.3?\n. I figured that was the case. The app may get updated but that is out of scope at the moment. Thanks for your help :smile:  As for the Akamai urls, they will automatically forward the current urls as of June, so we are going to rely on that.\n. Thank you for that@baraka2000 and @girasquid, I was also able to verify that my server is fine \ud83d\udc4d  . @girasquid  I'm working with a Rails 2.3.18 application on Ruby 2.1. Is 1.52.0 compatible with Rails 2.3.18? I suspect not, but I would like to test/switch-to these urls in my application now before time runs out to fix issues if they arise. If it is not compatible, do you have a recommendation on how to do this beside altering a local copy of the gem and running it that way?\n. Yep, I guess it is. I forgot about this one I had opened. I did open another one about RC4 cipher that I don't have any answer for yet though. Thanks for your help!\n. @ntalbott  Ruby 1.8.7, Rails 2.3, OpenSSL 1.0.1e-fips 11 Feb 2013\nI'm not in a position to upgrade anything like Ruby, I just do minor work on it. So there is nothing I need to change in ActiveMerchant or my app to make this work?\n. I'm working on a project right now that requires this. Is there any chance of getting this merged @bpollack ?. Oh, I thought this was to add the ability to use an accept.js nonce as a payment form. In that case, I am not waiting on this PR.. Thank you! I combined this url with https://gist.github.com/tmac/8483373d86a01542776a82824e8d421f for a working patch.. ",
    "baraka2000": "Trying to figure this out. This post was very useful. Thank you @girasquid. I ran 'openssl s_client -connect api2.authorize.net:443' from my server and tls 1.2 was specified. What i was looking for, thanks!. ",
    "grk": "Yes, that's the default behavior when running that test file.\n. I tried with all the test credentials I could find around the web and in paybox docs, but none worked.\n. ",
    "raycmorgan": "@ntalbott we hear you!\nWe went this route since it is the most common use case for our users' mobile apps (exchanging CC info for Stripe tokens). That said, we aren't against allowing direct POST /v1/charges with Apple Pay tokens and I agree that the current approach here isn't ideal.\nAs a note if you want billing information on the resulting card: the Apple Pay token doesn't contain billing address information directly. That would need to be passed from the resulting PKPayment.billingAddressand then provided in the card property of the /v1/token call [0].\n[0] https://github.com/stripe/stripe-ios/blob/master/Stripe/ApplePay/Stripe%2BApplePay.m#L63\n. @bizla The 24h expiry is a thing. This is only the case for exchanging the PKPayment token data for a Stripe token due to the card networks expiring the transaction's one time use cryptogram after 24h. Once you have a a Stripe token, you can attach that to a customer and use it like any stored card.\nWe are prepping some more documentation around Apple Pay. You can find a draft here: https://gist.github.com/raycmorgan/89ae88a263a109361acf\n. ",
    "pamio": "I had these 30 series numbers given by my client and I'm not sure where he got the numbers from. For now Im using the following regex as a temporary solution to verify the cards\ndef type\n    if @card =~ /^5[1-5][0-9]{14}$/\n      return SUPPORTED_CARD_BRANDS[:MASTERCARD]\n    elsif @card.match(/^4[0-9]{12}([0-9]{3})?$/)\n      return SUPPORTED_CARD_BRANDS[:VISA]\n    elsif @card.match(/^3[47][0-9]{13}$/)\n      return SUPPORTED_CARD_BRANDS[:AMEX]\n    elsif @card =~ /^3(0[0-5]|[68][0-9])[0-9]{11}$/\n      return SUPPORTED_CARD_BRANDS[:DINNERS]\n    elsif @card =~ /^6011[0-9]{12}$/\n      return SUPPORTED_CARD_BRANDS[:DISCOVER]\n    elsif @card =~ /^(3[0-9]{4}|2131|1800)[0-9]{11}$/\n      return SUPPORTED_CARD_BRANDS[:JCB]\n    elsif @card =~ /^(5[06-8]|6)[0-9]{10,17}$/\n      return SUPPORTED_CARD_BRANDS[:MAESTRO]\n    else\n      return nil\n   end\nend\nI'll have the information on where I got that series from. \nSorry for the delayed reply.\n. @j-mutter @ntalbott I got these from Authorise.net as test card numbers. \nHere are the other card numbers which Authorize.net sent in an email \n    >- American Express Test Card: 370000000000002\n\n\nDiscover Test Card: 6011000000000012\nVisa Test Card: 4007000000027\nSecond Visa Test Card: 4012888818888\nJCB: 3088000000000017\nDiners Club/ Carte Blanche: 38000000000006\n\n\nThe irony is that when I validate these numbers, they are just validated fine. Of course the regex mentioned above handles it but the question now is if the IIN's are changed ? Authorize.net is a really valid source but not sure how to take this forward. \n. @ntalbott I do agree on that. But what I can't understand is that, how can a test card number have a different IIN than to that of a real credit card number. I mean, test cards are also some relevant card numbers but used just for testing, hence they follow the same patterns as any real card number. \nThe numbers above are provided by Authorize.net which is a payment Gateway and I do not expect them to provide a test card number just like that without keeping standards in mind. However, due to the benefit of doubt, it would be better to verify before changing the regex. Let me see if I can help on this anyway. \nThanks for you help guys. \n. @ntalbott I would be more than happy to buy you a drink :) Will catch up sometime :) \n. Sure @ntalbott \n. ",
    "fuckofbitch": "I hope this work . ",
    "grepruby": "@girasquid \nI don't find  @Shopify/active-merchant in team members auto suggest list.\n. @girasquid Thanks!!!\n. @duff PayHub does support auth/capture. For first release I implemented direct purchase. \n. @ntalbott. Sure. Api docs are at http://developer.payhub.com/api\n. @j-mutter @shopify-admins @shopify-deployer @shopify-hooks @Shopify/active-merchant @duff @payhub\nHave made all requested changes and also implemented :auth and :capture call .\nThanks!!\n. @j-mutter @shopify-admins @shopify-deployer @shopify-hooks @duff \nHaven't heard anything from you. Did I miss anything ? Please let me know.\n. @j-mutter @ntalbott \nHope you guys had a great holidays!!! Is there any update for me ?\nThanks!\n. @ntalbott Have address the issue you raised. Please take a look. Thanks.\n. @ntalbott As payhub doesn't support partial refund, would it be appropriate to accept money parameter in refund method. Please advise here.\nhttp://developer.payhub.com/api#api-refunds\nThanks! \n. @ntalbott Thanks for your input. Have modified signature of refund. Its now def refund(amount, trans_id, options={})\nThanks!\n. @j-mutter @ntalbott Have removed the comments. Hope to see it gets merge soon now.\n. @wvanbergen  @ntalbott @j-mutter Hope you guys are doing really great!!\nJust wanted to checkin if you are waiting for anything from my end. \n. Hello @Shopify/active-merchant @j-mutter @ntalbott \nI have added code for recurring and made changes as per the new endpoints, Please have a a look\n. @j-mutter okay So should I remove recurring functionality from my code base, Please suggest?\n. @j-mutter I was also wondering the CI(travis) didn't execute for my PR \n. @girasquid  Have removed. Have managed response message with RESPONSE_CODE_TRANSLATOR . \n. @ntalbott  Removed test_url.\nThanks!\n. @ntalbott @j-mutter \nHave changed as per @j-mutter suggested. \nAlso :tid and :orgid is mendatory field for api. http://developer.payhub.com/api#api-fieldref \nThanks!!\n. @ntalbott @j-mutter \nHave added a private method to add the mode in post params.\nThanks!\n. @ntalbott @j-mutter \nHave removed!!\n. @ntalbott @j-mutter \nHave created private method for shared code. \n. @ntalbott @j-mutter \nRemoved all such conditional statements. \n. @j-mutter @ntalbott \nHave tried to be consistent with coding style and followed the https://github.com/styleguide/ruby for hash indentation. \n. @j-mutter \nRemoved!!\n. @j-mutter \nDone!\n. @j-mutter \nRemoved!!\n. @ntalbott Thanks. Corrected!!  Its now def capture(amount, trans_id, options = {})\n. @ntalbott  Payhub doesn't support partial refund and that why It didn't accept amount parameter. \nNot sure what would be best for this case. \n. @ntalbott Thanks! Have changed name to add_credential_cc_and_customer_data\n. @ntalbott Done Thanks!!\n. @j-mutter\nYes correct, previously I was using authorize  but now as per new changes we validates through oauth_token in headers.  You can see in headers method\n```\n  def headers(options = {})\n    oauth_token = options[:oauth_token] || @options[:oauth_token]\nheaders = {\n  \"Authorization\" => \"Bearer \" + oauth_token,\n  \"Content-Type\" => \"application/json\",\n  \"Accept\" => \"application/json\"\n}\nheaders\n\nend\n```\n. @j-mutter \nActually we are no longer using amount in refund api, but we can add for maintaining signature, Please guide me.\n. ",
    "lonsun": "@j-mutter @ntalbott \nHi, can you let me know what the process is for actually being able to use PayHub with Shopify?  Is this automatic after the merge?  If not what needs to be done to make this happen?\n. @ntalbott @j-mutter Hi, would you please let us know the status of this pull request?  It looks like we're just waiting on a final review.  Thanks in advance for your help on this.\n. @ntalbott, @j-mutter, et al\nThank you for your help on this!  \nIf you still want me to send the output of the remote tests let me know.\n. ",
    "payhub": "Thank you for the info, Mohammad.  I will do that.\n\nLon Sun  |  PayHub  |  (800) 944-1399 x5970  |  www.payhub.com\nFrom: Mohammad Hashemi notifications@github.com<mailto:notifications@github.com>\nReply-To: Shopify/active_merchant reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Thursday, December 4, 2014 at 7:56 AM\nTo: Shopify/active_merchant active_merchant@noreply.github.com<mailto:active_merchant@noreply.github.com>\nCc: Lon Sun lsun@payhub.com<mailto:lsun@payhub.com>\nSubject: Re: [active_merchant] Add support for PayHub Payment Gateway. Support transation purchase, voi... (#1453)\n@lonsunhttps://github.com/lonsun Can you send an email to payment-integrations@shopify.commailto:payment-integrations@shopify.com. Please include:\n1- Provider name and URL\n2- Markets served by the integration\n3- Supported payment methods\n4- Most recent PCI Certificate\n5- Link to this PR\nNote that adding a gateway to active_merchant does not guarantee placement within Shopify. At this time, we have good provider coverage in the US and it's unlikely that we will prioritize this integration. However, we can continue this conversation via email.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1453#issuecomment-65653288.\n. ",
    "ao": "New gateway for Worldpay Online Payments\n. yes\n. @andrewpaliga right now our API processes a full refund if a refundAmount is not set or is set to 0 (hence nil). Otherwise it attempts to process the refund as a partialRefund.\nTherefore it is attempting to process a partialRefund of the total amount, which is not partial. That is why it fails.\nIs it possible to move forward with this implementation without the API changes as they may take some time to get to production?\n. @andrewpaliga API has been updated and have amended the relevant test.\n. @aprofeit These changes are being made because the current implementation does not check for full SUCCESS and if a payment fails during security checking/fraud, then it is still considered a SUCCESS.\nThe paymentStatus needs to be included to make sure it is 100% SUCCESS.\n. @aprofeit Any reason this was closed?\n. Yes\n. Yes.\n. 200 is deemed successful in this case\n. This is how the API responds in this case.\n. They don't contain a response body, merely a 200 and skip the httpStatusCode check above\n. @ntalbott authorise3DSOrder would be called right at the end, but I'm not sure how/where to add it as I don't think this process can be automated, hence the manual section above.\nThoughts?\n. @ntalbott How is it being done for these? https://docs.shopify.com/support/settings/checkout-and-payment/does-shopify-support-3d-secure\nHow could we set this up as well?\n. ",
    "woto": "@ntalbott  Wow, many thanks. I didn't try to make it. Now all works fine.\nps. It's not my task, i only need the Robokassa integration, but what will be if developer will still need both gems? \n. @ntalbott ok, understand, thanks again!\nI think it will be handy for those who will come here from google.\nruby\nActionView::Base.send(:include, OffsitePayments::ActionViewHelper)\nOffsitePayments.mode = :test\nAnd in controller\nruby\nclass RobokassaController < ApplicationController\n  include OffsitePayments::Integrations\n. ",
    "InfraRuby": "\nPlease fill in.\n\nOk, done.\n\nIt's best to name these parameters according to what the gateway calls them.\n\nOk, done.\n\nIs this really http and not https?\n\nThat's just the \"SOAPAction\" HTTP header value. I've re-written that to be clearer.\n\nIf void isn't supported, just don't include it.\n\nOk, even better!\n\nGo ahead and fill out the unit test with the rest of the functionality, please.\n\nOk, done.\n. Thanks!\n. @bruno: how about IppGateway = BamboraGateway in ipp.rb?. @davidsantoso: ok, new PR for Bambora gateway: https://github.com/activemerchant/active_merchant/pull/2394. Documentation has 124: CVN required but not supplied.\n. ",
    "dppcode": "I agree, but I'm hesitant to change the API call for all users of the gateway. Perhaps I can use the options to toggle the command? For example:\ncommand = options[:release] ? :void_release : :void\ncommit(command, post)\nThat leaves the TRANSACTIONS Hash constant modified, but doesn't break the public abstraction, if that would be acceptable.\n. Very good point. I made your suggested modification, rebased, and pushed.\n. Something not noted in my original comment that developers will want to be aware of - the \"advanced\" (aka SOAP) API does not support the immediate release, only the \"transaction\" API does. So, in my implementation, I use the advanced API for all transactions except void, where I instantiate a new \"transaction\" API gateway object and call void (with immediate release) using that. \nAnyway, happy to go either way here, but would be nice to get this merged so I can get off my fork before I implement line_items for UsaEpay.\nShall I make immediate release the default? I could put the above note in the change log and/or document it somewhere else.\n. ",
    "ivanfer": ":+1: nice find.\n. @ntalbott indeed, working through this now.\n. I think this integration was written before transcript scrubbing support was added - would be sweet to have it here, but not dealbreaking. Questions, otherwise, LGTM :+1: \n. LGTM\n. Updated with your comments - good to go?\n. Thanks for the review!\n. questions, otherwise :cactus: \n. Someone did a bad.\n:palm_tree: \n. Looking good!\n. :+1: \n. :palm_tree: \n. Closed by https://github.com/Shopify/active_merchant/commit/abe433f6ef8c3370eeb1a6da2fb2f08bed102baf\n. Thanks for finding the zip codes that trigger that response - remote tests and indents added.\n. Do you think you could add a remote test (found here) that uses a token for purchase?\n. :+1: \n. :palm_tree: \n. Thanks @ao !\n. The commit method had the add_amount method originally, the refactor I did in #1887 left our refunds. So this restores previous behaviour.\nCredentials look expired on this gateway - I get Access refus\u00e9 ou site/lang/cl\u00e9 invalide on the remote requests. so I found some on this page: http://www1.paybox.com/wp-content/uploads/2014/02/ParametresTestPaybox_V6.2_FR.pdf , under 4.2.4 Tests Paybox System et Paybox Direct non 3D-Secure, I'll add these\n. Adding the credentials showed that the refunds method was not working. It's passing now so the fix works. \nI'll take suggestions on how to fix this encoding error on this test:\nFailure: test_unsuccessful_purchase(RemotePayboxDirectTest)\ntest/remote/gateways/remote_paybox_direct_test.rb:31:in `test_unsuccessful_purchase'\n     28:   def test_unsuccessful_purchase\n     29:     assert response = @gateway.purchase(@amount, @declined_card, @options)\n     30:     assert_failure response\n  => 31:     assert_equal \"PAYBOX : Num\u00e9ro de porteur invalide\", response.message\n     32:   end\n     33:\n     34:   def test_authorize_and_capture\n<\"PAYBOX : Num\u00e9ro de porteur invalide\">(UTF-8) expected but was\n<\"PAYBOX : Num\\xE9ro de porteur invalide\">(ASCII-8BIT)\n. I fixed the test and now we have 100% remote passes\n``\nvagrant@vagrant:~/src/active_merchant$ bet test/remote/gateways/remote_paybox_direct_test.rb\nLoaded suite test/remote/gateways/remote_paybox_direct_test\nStarted\n....test/remote/gateways/remote_paybox_direct_test.rb:66:intest_purchase_and_partial_credit': Support for using credit to refund existing transactions is deprecated and will be removed from a future release of ActiveMerchant. Please use the refund method instead.\n....\nFinished in 17.0197768 seconds.\n8 tests, 35 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.47 tests/s, 2.06 assertions/s\n```\n@j-mutter @aprofeit pls2review\n. Added explicit remote refunds tests. I'll leave the credit - type tests for when we cull them.\n. :rocket: \n. nice\n. This line, for example, is assigning the result of  REXML::XPath.first(xml, \"//types:TransactionResult\") to variable root first, then checking whether the result is truthy (in this case, not nil). The ruby interpreter may throw warnings about expecting == instead of  = , but it's valid ruby code.\nSee Variations on If in this guide for some more tips!\n. nope, this is going to go away once we get the OAuth roundtrip working\n. ah yes, will change\n. sometimes you do, see the success method below, also the error is a litte more specific than what I wrote there :\n```\nThe charge with id {0} processed, but the cvc check could not be validated. The merchant desired for this transaction to be refunded, but we were unsuccessful. The merchant must refund this transaction manually.Charge transactions with capture set to false can not be refunded.\n{0} will be the transaction id.\n``\n. to answer your question more directly, It wasn't clear to me which error it mapped to best, becauseincorrect_cvvseemed a little strong, but i'll change it to that, and for the others too.\n. Does this gateway support cvv fraud warnings at all? Couldn't check for myself - docs aren't readily available online.\n. indeed :sweat: \n. voids and refunds hit the same endpoint - once we get confirmation from Intuit that they work in sandbox, it will look like this. YAGNI?\n. cool, done.\n. only thatcapturealone uses this uri but the refund uri is to be shared with voids, which is coming later. I can factor this out then too\n. what does the passwordREDACTEDhere? xml lib?\n. A skip message would be nice here to remove the ambiguity of an empty test.\n. was thinking ofskip(\"scrubbing already done \" ), but not a big deal.\n. Seems sensitive, do we want to scrub those?\n. :cool: \n. Also, this remote test is doing a purchase and refund, renaming this totest_successful_purchase_and_refundwould bring the wording in line with the expectation of the test a little more\n. You can simply have an extra param incommitcalled auth, if present use that instead ofresponse[:tid]. For charges -AUTHORIZED, DECLINED, CAPTURED, CANCELLED, SETTLED, REFUNDED\nFor refunds -ISSUED, DECLINED, SETTLED. I think it's more descriptive this way\n. Did you want this in the other test?\n. useblank?instead of empty becauseempty?is not defined on nil\n. i refactored out the money-type fields into it's own method, from its previous home oncommit. It looks like this gateway needs a specific length for themontantfield. Dunno.\n. https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L136\n. preferelse` here and below\n. don't need the ternary here or below\n. These types of operations can never fail?\n. ",
    "uurcankaya": "@ntalbott thanks for letting me know! I will generate there again today\n. ",
    "lathiat": "Sorry yep I'll pick up on this shortly.\n. Any suggestions on how it might integrate with the existing API? It's probably not all that necessary though, so I wouldn't be that upset about removing it.\n. ",
    "afshing": "You need to Fork, apply your fix to your copy and sent a pull request. \nThen tag the main contributes to review and push if it was OK.\nI am wondering if you have followed the same process.\n. ",
    "bigtone1284": "Thanks for your clear updates!  I can contribute definitely now.\n. ",
    "bbozo": "@mhashemi86, Excellent :) Do you have a time frame? Need help? Early adopters?\n. ",
    "yoseldvp": "Alguna actualizaci\u00f3n sobre este desarrollo?, todav\u00eda no veo esta integraci\u00f3n en shopify\n. ",
    "batusai513": "Any news for payu colombia?\n. ",
    "fpinzn": "Any updates?\n. Sorry, I misread @andrewpaliga post.\n. ",
    "mayaibuki": "I'm still waiting for PayU Latam. I'm not a fan of it but is the best (and practically the only) option for shopify in Colombia\n. ",
    "sheasadev": "wip. please ignore.\n. ",
    "StephanAtG2": "Hi i have added the test but ran into a problem with the refund part\nIt looks like paygate public account somehow is not aware of the transaction that took place just before\nFailing with message The requested transaction has not been previously settled\nThis affectively turns this into a test for the purchase only\nI have commented out the refund test part for your inspection\n. I have spoken to pay gate and it looks like that wrong tid is being saved in the purchase response.\nthe authtx request tid should be kept and the not overwritten by the settletx request. Will update the code accordingly and let you know as soon as its submitted\n. the refundtx request requires that the tid from the original authtx request be sent.\nWhat happened was the capture or settletx request reponse handling was overriding the authtx tid. Thus creating a transaction id that is not valid in the final response of the purchase.\nPlease check my latest commit for the changes.\nAlso test case has been updated to include the refund remote test.\n. Moved the test to the correct location\n. Contacted pay gate. Adding ip and email always will not affect the api behavior\n. Hi thanks. \nHeck of alota comments for only 2 lines of code changed. \nAnyways expect a commit soon\n. I think its because i continued on my previous branch and just submitted an new pull request for the last changes.\nShould i have created a new branch for these changes?\n. Its fine. Most of these changes is still valid thou. Im just going to fix the ones mentioned above and recommit.\n. Please note. I have added comments to a request you made. The one about the duplicate function\n. Hi i have made the update. Can you guys please review\n. I cannot for the life of me get these commits to squash. Its like it squashes but resets back to the original commits. its cool thou gonna fork master again and add changes to a new fork and submit a new pull request. is that fine\n. One question.\nThe first commit that runs gets the auth code that is needed in the capture request call. how do i successfully merge this 2 functions into one? \nThis is probably my second day doing ruby code so bare with me please\n. Another note. Only reason that function was split up like that is because the refundtx request requires the tid from the authrx response and not the capturerx response. So i had to make sure that the purchase function returns the authrx's tid instead of the capturerx because the responses tid are infact not the same at paygate\n. ",
    "AndyOliverWpg": "A response from PayGate (passed on to me from Anton at g2design):\nAs discussed, the error message 'The requested transaction has not been previously settled' comes from PayXML validation that does not allow for a 'RefundTx' request to be sent for an Authorisation transaction ID if the Authorisation has not yet been Settled. This error message is also sent if a 'RefundTx' request is sent that includes an invalid or incomplete PayGate Transaction ID - as in this case our system can't find an Authorisation against which to process the Refund.\nFurther to our discussion, if we could see the PayXML 'RefundTx' request for the test Refund you are processing it will greatly assist in identifying why its failing validation.\nAn example of a RefundTx request is as follows (taken from the API doc)\n<refundtx tid=\"12345678\" amt=\"3295\" bno=\"\" />\nThe tid value is the PayGate Transaction ID for the approved authorisation that you intend to refund which would have been received in the PayXML 'AuthRx' response. A valid PayGate Transaction ID value is 8 digits long.\n. @StephanAtG2 Your PR shows 62 lines changed. Does this Pull Request include more code than you wanted to add to the repo?\n. ",
    "AntonAtG2": "Stephan is busy logging in... He will be there in a second!\n. Hi Luke,\nCan you supply us with a sample of the PayXML 'RefundTx'?\nRegards, Anton\n. Please see Paygate's response regarding the \"auto-settle\":\n\"The test system models AutoSettle being 'off' in that a 'SettleTx' request can be sent for an approved Authorisation.\nOn a live PayGate account AutoSettle is activated as a default but is easily de-activated by way of a terminal parameter setting which we set on our system.\"\n. Thanks Luke, thanks for the reply. Stephan is busy investigating and will have everything sorted soon. Regards, Anton\n. Please confirm that we are good to go\n. ",
    "kikito": "Yes, a NullObject must return \"safe\" values - often other NullObjects.\n. > Any reason you couldn't just use a mock in your tests?\nIt would take even more space than passing \"1\"s (or equivalent) around, which is what I want to avoid in the first place.\n. > purchase is really the only one that's guaranteed to be implemented.\nI didn't know that - I thought :unstore was the exception.\n\nAnother option, because we include Active Support, is to use try\n\nThat is a good option, thanks.\nI'll close this issue then.\n. ",
    "jasonfb": "Indeed, I understand. The main thing I would comment is the initializer, especially the options allowed to be passed in because it is not obvious what they are. \nI found some bugs in some other code using this gem (the bugs were related to test mode), and if the comments hadn't been there in the version I'm using it would have been much harder to track down my bug. \n. ",
    "kevin-jj": "ONLY insurance_total didn't appear in order summary but the payment flow can be done.  How can I write a test case for layout at PayPal?\n. I have got in touch with PayPal Developer Team and they sent me a xml schema that is different from activemerchant's xml schema but it can appear \"Insurance\" in order summary at PayPal.\n``` xml\n\n\n\n\nUSM_api1.email.com\nU4H8MACXDHMDBZ9G\nA8TGRlbpv9du8GnqgHx-LBcNnq5yAW7h2o5ZtrRKydYgD-8Jf3p4ARVL\n\n\n\n\n\n\n\nhttp://localhost:80/merchant/ExpressCheckout/GetExpressCheckout.php\nhttp://localhost:80/merchant/ExpressCheckout/SetExpressCheckout.php\n0\n0\n\nNone\n\n1\n\n74.01\n69.98\n0.50\n\n3.3\nPayPal_SDK\n\nDanny\n1,Main St\nAustin\nTX\nUS\n78701\n\n\nSaab 93 Aero 1:18 Model\n1\n1.5\n39.99\nPhysical\n\n\nBMW 135M 1:18 Model\n1\n1.8\n29.99\nPhysical\n\n0.23\nSale\n\n\n106.0\n\n\n\n\n```\n. Merry Xmas @ntalbott.   Below is the code we are using to call ActiveMerchant. Thanks\n``` ruby\ndef paypal_checkout\n    @order = current_user.orders.find(params[:id])\nitems = []\n\n@order.order_items.each do |order_item|\n  items << {\n    :name => \"#{t('item')} #{order_item.product.product_code}\",\n    :quantity => order_item.quantity, \n    :amount => @order.coupon.blank? ? order_item.item_total_cents : order_item.item_total_cents * (1 - @order.coupon.rate.to_f / 100)\n  }\nend\n\nresponse = PaypalExpressGateway.setup_purchase(\n  grand_total_in_cents(@order.order_items, @order.shipment.charge, @order.shipment.insurance, @order.coupon),\n  :ip => @tracking[:ip],\n  :order_id => @order.order_code,\n  :items => items,\n  :subtotal => item_total_in_cent(@order.order_items,@order.coupon),\n  :shipping => @order.shipment.charge.cents, \n  :insurance_total => @order.shipment.insurance.cents, \n  :handling => 0,\n  :tax => 0,\n  :brand_name => Figaro.env.project,\n  :return_url => purchase_order_url(@order),\n  :cancel_return_url => cart_url\n)\n\nredirect_to PaypalExpressGateway.redirect_url_for(response.token)\n\nend\n```\n. any update?\n. Yes, the soap response from PayPal had a non-zero insurance amount but it did not appear in the order summary as it redirected to the PayPal end.\n. The PayPal Developer Team tested it and told me that  if I use n2 namespace xml structure I have to place \nxml\n<n2:InsuranceTotal currencyID=\"USD\">1.99</n2:InsuranceTotal>\nbehind the \nxml\n</n2:PaymentDetailsItem>\nThat  will works but now I can not be able to change n2 namespace in activemerchant.\n. Is Shopify Developer Team going to fix this bug?\n. ",
    "boxofrad": "Sure thing! I agree it shouldn't be a class variable, but followed the pattern used for the simulate option.\nDo you think the simulate cvar should be deprecated & replaced with a constructor argument?\n. @ntalbott i've now made protocol_version an option in the constructor, hope that's OK!\n. ",
    "cshepherd": "@ntalbott Remote and unit test coverage is now present.\n. Remote tests appear to work fine using the default remote test credential account ID '104901072025'.. I've no access to any other credentials that aren't in production, or that are in test mode. If necessary, I can inquire about getting another set of credentials for testing.\n. ",
    "jcbantuelle": "@ntalbott Thanks for the feedback! I've updated the tests to verify this change, as well as cleaning up a few other issues I noticed while I was in there. Please let me know if you need any additional updates to get this merged in.\n. Just checking in, is there anything else you need from me to get this merged in?\n. ping @ntalbott @j-mutter \n. ping @ntalbott @j-mutter \n. @ntalbott The issue isn't with AM, it's with how FirstData E4 tokenizes credit card information. If you look at https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/firstdata_e4.rb#L200, you'll see that it calls credit_card.brand. When using the FirstData token response from their server, that brand value is 'mastercard'. The card_type function at https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/firstdata_e4.rb#L262-L264 uses the BRANDS constant to convert the brand value, and without :mastercard in BRANDS, this conversion fails.\n. @ntalbott Thank you for the feedback, that makes a lot of sense. I've pulled the mastercard value out into a separate hash that is used exclusively in the card_type function to keep this behavior encapsulated in the FirstData E4 adapter. Please let me know if you need any further changes.\n. ping @ntalbott @j-mutter \n. I've updated the fallback value to be an empty string instead of nil for consistency.\n. @j-mutter Thanks for the feedback! I've added an assertion for this, please let me know if you need any further additions.\n. ",
    "todd": "To be fair, it looks like that was merged after the most recent release was cut, so there's no official release that removes those deprecation warnings yet.\n. ",
    "jgrannas": "I was able to get this to work, but it's a little bit odd. After reading through the methods, I found this:\nxml.tag!('cardNumber', full_or_masked_card_number(credit_card.number))\nSo it's expecting an credit_card object instead of a hash (credit_card[:card_number]). I had to create an object and pass it into the hash. So if you want to update a payment with using only the last four digits, you will need to get weird.\ncc = ActiveMerchant::Billing::CreditCard.new(\n        :number => 5544\n      )\n      options = {\n        :customer_profile_id => user.customer_profile_id.to_s,\n        :payment_profile => {\n          :customer_payment_profile_id => customer_payment_profile_id,\n          :bill_to => {\n            :first_name => \"John\",\n            :last_name => \"Smith\"\n          },\n          :payment => {\n            :credit_card => cc\n          }\n        }\n      } \n      response = GATEWAY.update_customer_payment_profile(options)\n. ",
    "rud": "@ntalbott do'h, an excellent point - I'll get that sorted right away\n. @ntalbott fixed in 86f9605, thank you for the review\n. Awesome, thanks! 527520004160aff40658ef41a24ba31831022fa0 looks good.\n. This is unbaked, there's actual changes necessary to make this work properly. Closing this out, may retry with more effort later.\n. ",
    "afrieden": "@BaconSoap code review\n. ",
    "jungbunzlav": "https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/paymill.rb#L55-L60\nThe code above states, that active merchant never stores the credit card owner - is there a way to fix that by the active merchant team?\n. ",
    "jomit427": "We are actually a different gateway.  I represent Convergence Technologies and our company name is IPPay, though I can see where the confusion stems from.  Like I said we\u2019ve just boarded GAW Miners onto our gateway and they really like your service and would like to keep using you guys.  You can check out our website at www.ippay.comhttp://www.ippay.com.\nLet me know if there\u2019s any information I can provide for you guys.  Thank you.\nJoshua Mitchell\nSupport Specialist\n[cid:image001.jpg@01D03177.C635ACA0]http://www.converge-tech.com/\nWhere Best of Class Technologies ConVerge\nConVergence Technologies, Inc.\n16W215 83rd St. Suite D\nBurr Ridge, IL 60527http://maps.google.com/maps?hl=en&ie=UTF8&q=convergence+technologies,&near=Burr+Ridge,+IL&fb=1&cid=41737923,-87940278,9511917714351008728&li=lmd&om=0&ll=41.737952,-87.940235&spn=0.042591,0.080338&z=14&iwloc=A\ntel\n847-346-0990\njmitchell@converge-tech.commailto:jmitchell@converge-tech.com\nsupport@ippay.commailto:support@ippay.com\nFrom: andrewpaliga [mailto:notifications@github.com]\nSent: Friday, January 16, 2015 9:32 AM\nTo: Shopify/active_merchant\nCc: Josh Mitchell\nSubject: Re: [active_merchant] Add IPP gateway: IPPay (#1539)\n@jomit427https://github.com/jomit427 we are looking to add beta IPP integration to Shopify soon. Please email payment-integrations@shopify.commailto:payment-integrations@shopify.com for further inquires.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/1539#issuecomment-70269982.\n. ",
    "anderson-mondido": "@ntalbott I've simplified as you said and applied all your requests. Please, could you give another review? Thank you very much :)\n. Oh good to hear that you're being audited. It's always good to test your controls :P\nEven not being able to merge this week, could you perform the remote tests in advance? I can send the credentials in private for you.\n. @ntalbott Hope PCI audit has gone well. Do you happen to have any idea of when our gateway might be merged? Would be great to have a rough estimate to know how to prioritize the roadmap on our end.\n. Ok, thanks. Please let know when you could.\n. Hi Nathaniel, yes we can rip out all the de \"optional\" stuff if that's what takes to integrate. I just want to point that it's security for the client, not the server. It solve the key distribution problem with some trade-off. Actually, as a user of ActiveMerchant, I would love to have this feature for all gateways. Now talking as Mondido, ok, we rip it out. Just a couple of minutes.\n. Sure, will do now.\n. Ok, will do.\n. Ok, will do.\n. Good point. Probably saw in some gateway. Using .brand now.\n. Removed\n. Removed\n. Removed\n. Thanks. Learned something new today. Changes applied.\n. Changes applied.\n. Removed\n. Was an attempt to run remote tests without merchant specific account. Changed to use hard coded values, but need to pass the credentials for you using a private channel.\n. @girasquid I asked myself why not? It's not very sensistive as the other values. I can remove. Should I?\n. Alright! Removed from scrub :) - Thanks. I'm learning during this process hehe :D Seriously.\n. Take Heartbleed vulnerability as an example. You'll be able to read the remote server's memory. What happens if the value that you read is encrypted? It's just defense in depth, but yes, you're right about the complexity. Plus the server may have its security requirements reduced as it will recept encrypted data. Depends on more factors, but that's good for my explanation I think.\n. Do you have a email that I can send privetly?\n. Some tests require some scenarios that are specific so I've used my account. Was dynamically before but I was asked to remove in one of the previous comments. You can take the acc that I send you privetely for your tests then. Can you send me an email to anderson {at} mondido.com?\n. ",
    "robbanp": "@ntalbott I'll send you Id, password and secret \n. @ntalbott, Thanks for the feedback. We'll update and resubmit!\n. ",
    "askehansen": "Im not quite sure what you mean?\n. Yea thanks, i'll do that\n. I just added some tests\n. ",
    "alovak": "Changes look strange. Can you add card with only exp_month? I guess that no. You have card (with verification_value/without it) or you do not have card.\n. Maybe you can add test for partial card update here: https://github.com/Shopify/active_merchant/blob/master/test/remote/gateways/remote_cyber_source_test.rb#L238\nI think it will give more confidence in changes.\n. yes. it can be closed. we (as Payfort) have a new solution, probably we will have to submit new PR :)\n. Guys, what do you think about extracting gateways into separate gems? pros/cons of such solution?\n. @adz is there a possibility to add test for this?\n. +1 for this PR\n. @girasquid I have added currency to remote test. Also fixed offsite_purchase test.\nBut,\nwith my MID refund_test fails (because it works only for purchase mode)\nand test_server_purchase_url works for Visa and MC as other brands are not enabled for my MID.\n. Thanks! Now it's more clear for me. I see that it does not work automatically when log level is debug as I expected it to be :)\n. What if we add something like this (raw solution):\n```\nmodule ActiveMerchant #:nodoc:\n  module Billing #:nodoc:\n    class Gateway\n      # ...\n  def logger\n    @logger ||= begin\n                  supports_scrubbing? ? LoggerWithScrubbing.new(ActiveMerchant::Billing::Gateway.logger, self) :\n                    ActiveMerchant::Billing::Gateway.logger\n                end\n  end\n\n\n  class LoggerWithScrubbing\n    attr_reader :logger, :gateway\n\n    def initialize(logger, gateway)\n      @logger, @gateway = logger, gateway\n    end\n\n    %w(info warn debug error).each do |method|\n      define_method method do |string|                     # def info(string)\n        logger.public_send(method, scrub(string))          #   logger.info scrub(string)\n      end                                                  # end\n    end\n\n    private\n\n    def scrub(string)\n      gateway.scrub(string)\n    end\n  end\nend\n\nend\nend\n```\n. @girasquid @j-mutter what do you think?\n. @ntalbott not sure that I got your point (the last sentence) :)\nnow all output goes as is (without scrubbing) when log level is 'debug'. with this approach we only add protection to developers. Described above approach with wiredump_device will continue to work.\n. btw, we can implement default scrubbing method that will remove all card numbers (using basic regexp).\n. I can say for myself only. But after I add scrub method to gateway I expected to see filtered output in logs... Especially at the beginning we (maybe other startups and companies) set log level to debug to the whole system (all apps).\nBut explicit way is ok. Especially if you want to store gateway request/response in DB together with all other details. \n. I see.\nOne solution it to output nothing if scrub method is not implemented:\ndef scrub(transcript)\n  \"Your logs can contain sensitive information that should be filtered. If you want to see log output for GatewayName please add scrub method as described here: https://github/wiki/how_to_add_scrub_method\"\nend\nBest practice for our area: block all. allow only what you really need :D\n. the same as I have to do it now to get scrubbed output...\n```\ntranscript = ''\ngateway_instance = ActiveMerchant::Billing::Base.gateway('stripe').new(options)\ngateway_instance.wiredump_device = transcript\ndo some operations with the gateway_instance\ngateway_instance.charge(..)\ngateway_instance.refund(..)\nDump a log of the entire HTTP conversation, with sensitive information scrubbed out\nlogger.info(transcrip)\n```\nno?\n. Ok. I don't see a beautiful solution. It's a trade off. If nobody asked for this before then maybe there is no issue with this at all.\nAt least I was able to fix it for myself (with offered solution).\n. As alternative n. 1\nwe can change 'parse' method to this (tests pass):\ndef parse(xml)\n        reply = {}\n        xml = REXML::Document.new(xml)\n        if root = REXML::XPath.first(xml, \"//c:replyMessage\")\n          root.elements.to_a.each do |node|\n              parse_element(reply, node)\n          end\n          reply[:decision] = REXML::XPath.first(root, \"c:decision\").text\n          reply[:message] = REXML::XPath.first(root, \"c:reasonCode\").text\n        elsif root = REXML::XPath.first(xml, \"//soap:Fault\")\n          parse_element(reply, root)\n          reply[:message] = \"#{reply[:faultcode]}: #{reply[:faultstring]}\"\n        end\n        return reply\n      end\nbut if c:decision or c:reasonCode do not exist then this method will fail (undefined method `text' for nil:NilClass). \n. I have created a different PR...\n. @shasum @curiousepic @marquisong guys can you give me a feedback on this PR? I see that you work (worked) with CyberSource too.\n. @duff maybe you  can provide some feedback on this?\n. @davidsantoso do you have any thoughts on it?\nIf I review and update, will you merge it?. ",
    "charlie-white": "Any word on if this pull request is going to be accepted?  We've been using a fix very similar to this for several years now.  It would be nice to be on the main branch of ActiveMerchant instead of our workaround to what seems like a deficiency of the CyberSource gateway.\n. Nor do I.\n. ",
    "tonytonyjan": "FYI: tests are passed since bundler automatically load pathname for us\n. ",
    "leolara": "@ntalbott hey, could you, please, have a look at this gateway?\n. Hi @j-mutter \nI do not understand the expression, \"I :tophat:'d this locally\".\nDo you want me to look at the code?\nRegards,\nLeo\n. @andrewpaliga Awesome!! Sorry for the confusion and thank you for the attention.\n. @j-mutter @andrewpaliga @girasquid \nI think everything is done of what has been requested up to this point, with the exception of the option for first_name and last_name where I asked for feedback. What is the order of overriding first_name and last_name, like is first credit_card.first_name and if nil then options.address.first_name or inverse, or what?\nCheers,\nLeo\n. @j-mutter @andrewpaliga @girasquid I think everything you have said is done. Please, have a look.\n. I forgot to mention @ntalbott \n. @j-mutter @andrewpaliga @girasquid @ntalbott So, it seems it is everything, isn't?\n. @j-mutter @ntalbott @andrewpaliga @girasquid Thank you all!!\ncc/ @alexandresaiz\n. All four parameters are supplied from Monei to the merchant, who have to use them to configure the gateway. All four parameters are required and different for every merchant.\n. @j-mutter the first_name and last_name are taken from the CreditCard already. This is a way to override that. Should I delete this way to override, or change the options to :first_name and :last_name?\n. @j-mutter Done\n. @j-mutter Done\n. @j-mutter Done\n. @j-mutter I could translate all the rejections into :card_declined but the other values are more status that error codes.\n. @j-mutter Do you think I should add more new lines inside the test methods?\n. of course, will do\n. @girasquid In void operation. You can see it calls execute_dependant with amount=nilwhich gets passed along to this method add_payment.\n. @girasquid If an user of the library would call purchase with an options[:authorization] value that would cause a problem. I can assume the user will not do that, or check in the new_order operations whether options[:authorization] is empty. What would you prefer?\n. @girasquid The system is very flexible. There are two test modes plus live, we are only using the test mode that test the connector. Additionally, it is possible to do test requests to the live system, the only difference is that in the live system there is a transaction fee for test requests and in the test server they are for free. We do not want to do the test request to the live server, because if someone runs the remote test many times will cost money.\n. Done\n. Done\n. Done\n. Please, @j-mutter let me know the best way to solve this\n. @j-mutter Done\n. @j-mutter It is not implemented by the gateway. I event added a test that tests the failure of multi-capture and multi-refund\n. I did as @andrewpaliga said, tested and was pushing when I saw @ntalbott message.\nWhat do you prefer guys?\ncc/ @ntalbott @j-mutter \n. ok, I understand that I should remove the options to override first_name and last_name, both will be taken only from the credit_card object.\n. Hi @j-mutter,\nThe only codes that we get from the API are:\nNEW 90\nWAITING 80\nREJECTED_VALIDATION 70\nREJECTED_RISK \ufffc65\n\ufffcREJECTED_BANK 60\n\ufffcNEUTRAL \ufffc40\n\ufffcSUCCESS 00\nI translated all the rejections to card_declined because I do not get the level of detail in the response that STANDARD_ERROR_CODE has. What do you suggest?\n. ",
    "anujaware": "@ntalbott Thank you for quick response..!! Yes we are now using it from params.\n. ",
    "yazinsai": "Adding a basic description on there: \nWhite is a payment solution for developing countries .. countries that have long been neglected by larger payment solutions. It's like Stripe, and is starting off in the Middle East before expanding to other developing regions soon.\n. bump .. 2 months later.\n. @ntalbott hi Nathaniel -- is active_merchant still alive?\n. @ntalbott I can imagine -- is there anything we can do to help take some of that load off you guys, and thereby get requests approved quicker?\n. ",
    "jscheid": "Hi, thanks for taking a look at this!\nIn order to reuse the commit method here I'd have to make the value for SOAPAction (more) configurable,  the call to new_submit_xml more configurable (i.e. use new_submit_xml_with_type instead), allow passing in a custom message_from method and allow passing in a custom authorization_from method.\nI'm happy to do all that, I just figured the two API invocations and their request/response formats are sufficiently different from each other that it's cleaner to just introduce a new method.\n. When I say \"introduce a new method\" I mean \"borrow the relevant code from the commit method for the store method\" :-)\nAgain, happy to restructure this if it's not DRY enough for you guys.\n. Hi guys, is this more like it?\n. No problem. @demillir, can I leave this with you?\n. ",
    "bruno": ":+1: on getting this merged if it's ok ... \n. @ntalbott I've just made some changes to add support for purchase and authorize using the tokens. It was a good catch before prior to this, you could not have used the token you get back from the store() method in those two operations as they both expected a credit card.\n. I don't seem to be able to re-open this PR ... there were no outstanding issues per-se, just applied the changes as requested and was just waiting for a further review from the latest changes from the core/committers ... . @varyonic looks good ... the store method is not implemented, was that intentional? Just curious as I was looking at it for our use ... and we need to have support for what WorldNet calls \"Secure Card Integration\" and I was feeling lazy \ud83d\ude04 \n. Thanks @varyonic ... I will be working on it this week or next ... I will add it to your fork as a branch and PR it for you to add it to the current one if you deem it acceptable.\n. I messed up the merge from upstream, so removing this and replaced it with #2037 (from a clean master).\n. I have messed up the merge from upstream on our fork, thus the extra commit, which I want to avoid introducing into activemerchant/active_merchant ... fixing and re-submitting in a separate PR.\n. Thank you @ntalbott \n. I seem to have messed up the upstream merge ... fixing on our fork and will re-submit this pull request with a clean history.\n. Sorry, pushed again something that's specific to our implementation and mixed up a bunch of other commits. Will try again. \n. Also, an important note ... it seems that when testing tokenisation (store) you can only use a PAN (cc number) once ... and these numbers don't seem to be able to be removed ... so it's likely that, since we're using a dev account, lots of the test PANs have already been used (for when running the remote tests)\n. After extensive conversations with the Banwire team, it appears that we can avoid the exceptions when attempting to tokenise the same card twice. I will be adding support for that shortly.\n. @EvanMcEwen I haven't got around to it ... I might get to it in the coming couple of weeks. Sorry, completely forgot about this ... been swamped over the last few months and haven't really had time to go back over these changes, so as @iirving mentioned, his PR follows and implements the fixes required. Thank you!. Wouldn't it be better to add Bambora as a new gateway and make a note in the Ipp.rb gateway implementation that it's now deprecated and people using it should move to Bambora? \nJust because renaming it will cause issues for users, like ourselves, that depend on the ipp.rb implementation if suddenly it's gone ... ?. As the original author of #2188 I am happy with this, and thank you so much @iirving to continue the original intent and fixing the issues in my original PR. So how do we go from here for these two PRs to be merged?. Note this has already been done in #2531 . Seems like a debugging statement, this should probably not be here.\n. Why use builder? ActiveMerchant seems to favour Nokogiri for all XML generation/parsing\n. Oh! that's because those are the ones I could test against in our test account. I will add a few more. \n. Good catch, this fell through the cracks. :+1:\n. Sure. When you try to unstore a customer or a card, you need to use the id however when you want to make a payment using a stored card, you have to use the paymentToken so I thought it would be good to pass all of them back. The customer_id or card_id are also used in the backend administrative interface to search.\n. I guess not, will remove.\n. ",
    "aspett": "SingleSubmitVOID causes a 500 error on demo IP Payment servers. Changing this to SingleSubmitVoid fixes the issue.\n. ",
    "sjf-control": "Gateway: AuthorizeNetGateway\nRuby: ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]\nRails: 3.2.11\nOS: Ubuntu 12.04.5 LTS (production system)\nNote that my CC processor is eProcessingNetwork.com running an Authorize.Net emulator for the gateway.\nStrangely, while both my test and production gateway accounts fail on the production system. On my development system (OS X 10.10.2) I can process a transaction to the test account (haven't tried a real transaction on the development machine).  This leads me to believe there is some configuration setting somewhere that is different between the environments with whatever active_merchant is using to initialize the communications to the gateway.. \nThanks for the assistance!\n. Any help?\n. Thanks j-mutter, \nWhat specifically in the production environment needs updating? ActiveMerchant is the same version in both development and production (1.28.0). And all packages have been updated in the production Ubuntu 12.04.5 LTS OS. Are you saying I need to update to Ubuntu 14.04?  \nBTW, the file you linked to \"explicitly set\" does not appear to exist in my ActiveMerchant gem 1.28.0\n. I have access to a test account (login and password) that processes dummy transactions, if that's what you mean.\nI've never run tests on a gem before. Is there somewhere that describes how to do that? \nAre you referring to active_merchant/test/remote/gateways/remote_authorize_net_test.rb?\nThanks.\n. Yes, I never thought it was an issue with Authorize.net. It is indeed a problem with the simulator. (Or my talking to it.)\nntalbott, thanks VERY much for your suggestion. I am now able to see exactly what is being sent, and what is received. \nI've updated the server to disable insecure protocols and the site now has an A+ security rating from SSLLabs.com.\nAs a sanity check, it appears that the AIM protocol is being used to communicate with the provider's server. I downloaded \"Merchant Web Services API Advanced Integration Method (AIM)\" from the Authorize.net site, and what I am sending looks pristine with one exception. The transaction key (called a restrict key by eProcessingNetwork) is only 15 characters instead of 16. I tried generating new values for the key on the ePN site, but they are all 15 characters long, and don't appear to be manually editable.\nI notified ePN of this discrepancy on Sunday, but haven't heard anything back. \nThe response I am getting back from the transaction is ... \"Invalid Account\"\nePN claims there must be something wrong with my site, but I'm at a loss to figure out what it could be, since the SSL connection is successfully completed, And the transaction contents appears clean. \nI can manually enter a transaction to my account on the ePN website, so the account is not blocked. \nAnybody else ever have (or currently having) an issues with eProcessingNetwork should contact me.\nOh, by the way, when running the entire test routine against their server, each transaction failed with the same \"Invalid Account\" response.\n. ",
    "wmakley": "Hi guys, I have the same issue as sjf-control - Upgrading is basically not an option on this site for financial reasons (we are stuck with Ruby 1.8 as upgrading to Rails 3+ would be a massive undertaking), and I just need activemerchant (also a very old version) to stop using SSLv3. Is upgrading really the only way?\n. For the record, upgrading to activemerchant v1.43.3 on the Rails 2 sites I am dealing with seems to have resolved the issue, at least enough to permit customer checkout. The problem is (prepare to be terrified) Rails 1.2.6.\n. ",
    "ShubhamGupta": "@ntalbott Can you please review this once and let me know if we are good to go on this one. I have added test credentials for now.\n. @ntalbott Thanks for reviewing the code. I have removed the quickcharge option. Also, all remote tests are passing for me. I am on ruby 2.1.3. Can you add some backtrace so I can try and fix it?\n. @ntalbott I have fixed the failing test cases. Thanks for posting the backtrace.\nIssue: The gateway accepts a string parameter for date in format yyyymmdd. It tests the validity of date and rejects any past dates. Since, the gateway is very Japanese, there is no parameter for timezone and it treats the date accordingly (i.e. in JST). When you ran the test cases, it sent Date.today which was a past date for the gateway and the request failed. However, I was not getting any failing test case as I am in Japanese time zone and thus the current date was getting sent and the tests were always passing.\nFix: The gateway accepts current or future date (upto 62 days). Instead of sending current date, we are now sending a future date in test cases to avoid timezone issue with test cases.\nWe are good to merge this as our gateway class doesn't do any operations on date. It simply takes it as an option and sends it to the Zeus. There was no bug as per the ZeusGateway class as it never works on any date / time object in any way.\n. @jasonwebster There were a few improvements suggested by @ntalbott which have been fixed already. Please review.. ",
    "johnnyshields": ":+1: Please add this\n. @jasonwebster why are you closing this? It's ready to merge.. Can someone merge it please?. ",
    "mvarian": "@ntalbott Last thing we want to do is cause any irrational headaches, with that feedback I checked with the system guys and got the OK to include dev credentials for a demo account in our commit.\nWe've squashed into a single commit which includes test credentials.\nThank you\n. @ntalbott Thank you for your review, we'll get to work addressing your comments right away!\n. Test vs. Live is configured in the gateway account itself.  The credentials we are providing are for a gateway account configured for test mode, both do use the same endpoints.\n. ",
    "Paystation": "Hi Nathaniel\nThis has been fixed :)\nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Thursday, 26 February 2015 3:30 p.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\nWhitespace is all wonky in your patch - can you please fix?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76111369 .  https://github.com/notifications/beacon/AH5nkv-i1MAO3CKn85sy5Zob5WdNvH5wks5nvnypgaJpZM4DifQt.gif \n. Hey Nathaniel\nWe were requested to fix the whitespace, which is the purpose of this patch, if I have interpreted your question correctly?\nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Friday, 27 February 2015 10:42 a.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\n@Paystation https://github.com/Paystation  this seems like a huge regression. What's the purpose of this patch?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76280251 .  https://github.com/notifications/beacon/AH5nkj3Iv0HZqtxMlIU9ETIa12UnLDlJks5nv4q_gaJpZM4DifQt.gif \n. Hey Nathaniel\nWe are a Payment Gateway and the Pull Request is supposed to be a direct integration with Shopify.  Just checking to ensure you are referring to this pull request - https://github.com/Shopify/active_merchant/pull/1577 as the developer had originally submitted the PR into the incorrect repository (https://github.com/Shopify/offsite_payments/pull/76).\nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Friday, 27 February 2015 1:45 p.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\n@Paystation https://github.com/Paystation  sorry, should have been clearer - what is the purpose for the Pull Request as a whole? Now that the whitespace is fixed I'm reading it and it seems like a regression in functionality, and doesn't follow the ActiveMerchant project's coding standards or conventions.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76309355 .  https://github.com/notifications/beacon/AH5nkgNExpkBJ-dO33JHuUAPeg5Hzb85ks5nv7WXgaJpZM4DifQt.gif \n. Thanks Nathaniel, that adapter was not written by a Paystation developer but we will look into it.  Do you know where we would be able to find the ActiveMerchant project\u2019s coding standards and conventions?  It would be really helpful for our developer :)\nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Saturday, 28 February 2015 6:02 a.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\n@Paystation https://github.com/Paystation  there's already an existing adapter in ActiveMerchant: https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/paystation.rb\nThis Pull Request modifies that adapter in an... unhelpful way.\nSo far as I can tell this Pull Request is not needed, and you should just talk to Shopify directly about having them enable the existing adapter.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76429242 .  https://github.com/notifications/beacon/AH5nktxMpvY6bMB-4LAFyS7rF-SYhva9ks5nwJpqgaJpZM4DifQt.gif \n. Great!  Thanks Nathaniel for your help\nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Tuesday, 3 March 2015 5:08 a.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\nThe CONTRIBUTING file is of course critical: https://github.com/Shopify/active_merchant/blob/master/CONTRIBUTING.md\nAlso, it's important to check out how the other gateway adapters are implemented, as well as the default template used when a new gateway is generated.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76739949 .  https://github.com/notifications/beacon/AH5nkiHXn6udD65tgFA-Ec9e8VES2dXCks5nxIJtgaJpZM4DifQt.gif \n. Hey Nathaniel\nWe have modified the existing adapter and the updated PR can be found here https://github.com/Shopify/active_merchant/pull/1592 \nBest Regards,\nKarl Gerrie\nAccount Manager\nddi\n+64 4 917 8085\nemail\nmailto:karl@paystation.co.nz karl@paystation.co.nz \npostal\npo box 12082, Wellington 6144\nfax\n+64 4 917 8099\nphone\n+64 4 917 8097\nemail\nmailto:info@paystation.co.nz info@paystation.co.nz\nFollow us on Twitter for service status updates:  http://www.twitter.com/PaystationNZ PaystationNZ \nFrom: Nathaniel Talbott [mailto:notifications@github.com] \nSent: Tuesday, 3 March 2015 8:45 a.m.\nTo: Shopify/active_merchant\nCc: Paystation\nSubject: Re: [active_merchant] PaystationGateway purchase update (#1577)\nOK, going to close this PR for now; feel free to open a new one if you decide the adapter needs work. FWIW the one that's already here in ActiveMerchant seems pretty solid, so I wouldn't think it'd need work unless there's specific functionality you think should be added to it.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Shopify/active_merchant/pull/1577#issuecomment-76796370 .  https://github.com/notifications/beacon/AH5nklIBEMGOzLTXN2yKspE38SG8MFNXks5nxLVNgaJpZM4DifQt.gif \n. ",
    "newton10471": "I presume the plaintext endpoint we're talking about is this? \nself.live_url = \"http://soap.vindicia.com/soap.pl\"\nWhich yes, is bad, and doesn't work, but it works with https.  Any chance we could add this gateway back using https instead?\n. @ntalbott ok sounds good thanks\n. ",
    "rajeshlmindfiresolutions": "1:   ACTIVE_GATEWAY = ActiveMerchant::Billing::PaypalExpressGateway.new({:login => ACTIVEMERCHANT_CONFIG[:username],  :password => ACTIVEMERCHANT_CONFIG[:password], :signature => ACTIVEMERCHANT_CONFIG[:signature]})\n2: The transaction id we get from ACTIVE_GATEWAY.purchase method for a transaction  with a test environment.\n3 . We are voiding through the void method . ACTIVE_GATEWAY.void(transaction_id) .\nThese are the procedure we are following to void a transaction. \nPlease let us know if anything wrong . Thanks\n. ",
    "brokenbeatnik": "Thanks for the insight and feedback @ntalbott . So are you saying I should modify authorization_from to also return whether it was an auth or capture? I would add that to the end of the auth string (which for this gateway currently contains 3 fields) as an optional field. If not present, void would assume capture. \nWould it still be okay to send the card in via the options hash? The REVERSEAUTH seems to require a card number, even though VOID doesn't seem to.\n. I'm waiting on a response from JetPay engineering. They're discussing it, and once they let me know, I'll make the changes and probably submit a new pull request and close this one. I copied the tests over into a new branch and wanted to start over in the actual code part.\n. Given JetPay's comments, I will close this pull request soon, but I have one more question. @zelch - does the customer incur more transaction fees for the CAPTURE/VOID than for the REVERSEAUTH? If so, then I'll \"manually\" implement the REVERSEAUTH outside of ActiveMerchant, which is less desirable. If not, I'll implement the recommended CAPTURE/VOID flow.\n. Final word: the client cannot allow a capture/void, as to the customer it will be a flag as a false-positive fraud scenario (imagine how you'd feel if you saw $200 taken off your card by some party when you didn't explicitly say it was okay, even if it were refunded immediately). We'll have to run on the forked version until the VOID performs REVERSEAUTH for incomplete transactions. I'll close the pull request since in any case this code won't make it in to the main line, and JetPay users will wait for JetPay central to make the changes to how VOID works behind the scenes.\nThanks all! \n. ",
    "zelch": "Having reviewed the matter, we concur that the current functionality is not ideal and should be corrected.\nIn the long term, we intend to modify VOID so that it functions properly for transactions in both the captured and non-captured states, however we do not expect this to be available until some time after spring release.\nIn the meantime me recommend the somewhat awkward steps of doing a CAPTURE followed by a VOID, both of which have options that do not require a card number.\nWe apologize for the inconvenience.\nRegards,\nZephaniah E. Loss-Cutler-Hull.\nSr. Software Engineer.\nJetPay.\n. ",
    "tobinharris": "Thanks @j-mutter. Can this be fixed at server level or is it a code fix?\n. Many thanks @ntalbott. We've just started support for a Rails 2.x solution on Ruby 1.8.x so it looks like we have our work cut out for us.\nI did see the adapter monkey patch which we can try. Otherwise it's a full on Ruby update + Rails upgrade (which wouldn't be a bad move)\nThanks for your help.\n. ",
    "pollingj": "Just in case anyone is interested, I've managed to resolve this issue.  I was on ActiveMerchant 1.4.1.  The key seems to be taking the latest Certs from the master branch and putting the them into the version you are using.  \nI had to make some other minor tweaks, but I think that's just due to me messing around with upgrading to Ruby 1.9.3.  I believe you should be able to stay on Ruby 1.8.7.\nI think it might be worthwhile sticking the solution in the ReadMe, as I think there will be a number of people affected by this.\n. @Orbycius yeah.  I did have to tweak some other things, but that was more to do with our setup, than ActiveMerchant.\n. ",
    "marcosholgado": "Thanks @pollingj is it just the cacert.pem in the lib/certs folder?\n. ",
    "chrisblatchley": "This PR is redundant.\n. I'm glad I checked the pull requests today. I almost implemented this feature myself. :+1: \n. ",
    "jivamatic": "@j-mutter , Yes we are looking to send encrypted data directly. \nFor ease of payment compliance the payment gateways issue a credit card reader that encrypts card information as its read. The decryption key is only available to the payment gateway. The encrypted blob needs to be passed to gateway. We need a way to embed that information into ActiveMerchant calls. Suspect the ActiveMerchant Authorize implementation needs to allow an extra XML tag or extra set of attributes to allow for this information to be passed.\nSome Authorize.net specific information if you are interested.\nThe way Authorize.net supports this is by supporting an extra tag within the payment. Here is a link. \nHere is the what the EncryptedTrackData tag looks like in Authorize.net\nxml\n<encryptedTrackData>\n<FormOfPayment>\n<Value>\n<Encoding>Hex</Encoding>\n<EncryptionAlgorithm>TDES</EncryptionAlgorithm>\n<Scheme>\n<DUKPT>\n<Operation>DECRYPT</Operation>\n<Mode>\n    <Data>1</Data>\n<Mode>\n<DeviceInfo>\n<Description>\n4649443D4944544543482E556E694D61672E416E64726F69642E53646B\n76315e536f6d655442444b6579313d736f6d656f7468657276616c756\n</Description>\n</DeviceInfo>\n<EncryptedData>\n<Value>LongHexString</Value>\n</EncryptedData>\n</DUKPT>\n</Scheme>\n</Value>\n</FormOfPayment>\n</encryptedTrackData>\n. ",
    "brianmc": "Brian from Authorize.Net here, I think @jivamatic is spot-on and it should just be a case of adding the appropriate attributes.  We're happy to help out with any Anet or Encrypted data specific issues.\n. ",
    "szajbus": "@ntalbott Thank you for the review. We implemented the changes you suggested.\n. @ntalbott thanks!\n. That's right. Partial captures are not supported by the gateway.\n. Actually create_token API method is meant for use from JavaScript or mobile applications, so this seems to be out of the scope of ActiveMerchant. Removed it.\n. Yes, it is. Should it be a default header sent with all requests to the API? At the moment I just recorded the transcript with gzip disabled and replaced it here, but did not add the header to the requests.\n. @ntalbott updated this test case to make authorize instead of purchase.\n. @ntalbott Removed completely.\n. ",
    "noctivityinc": "+1\n. ",
    "anusha-nyros": "@girasquid When I type that command openssl s_client -connect www.sandbox.paypal.com:443 in the root path of my heroku rails application I got a big message and at the end it is returning me the message like this: \nSSL-Session:\nProtocol  : TLSv1.2\nCipher    : ECDHE-RSA-AES256-GCM-SHA384\nSession-ID: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nSession-ID-ctx:\nMaster-Key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nKey-Arg   : None\nPSK identity: None\nPSK identity hint: None\nSRP username: None\nStart Time: 1433477863\nTimeout   : 300 (sec)\nVerify return code: 20 (unable to get local issuer certificate)\nIs this going to be any problem to my paypal/ssl integration in my application? Please help me.\n. ",
    "galetahub": "Just add option CApath:\nbash\nopenssl s_client -CApath /etc/ssl/certs/ -connect www.sandbox.paypal.com:443\n. ",
    "binarylogic": "Yep, we're using active_shipping which is one 0.12.5, and activemerchant which is on 1.47.0. We're on the latest versions for most of our gems.\n. Thanks, didn't see it as it's on 'pre' releases.\n. ",
    "tzumby": "Agreed, I will update the store method to check if the argument is a credit card or a token and call either res_add_cc or res_add_token. \n. I ended up just updating the store method and checking to see if the passed argument is a CreditCard object. \nI thought about maybe using the ActiveMerchant::Billing::NetworkTokenizationCreditCard object and have that one respond to \"number\", \"year\", \"month\" but since adding a credit card vs a token is a separate API call on the Moneris side we would still have to check weather the object is a NetworkTokenizationCreditCard vs CreditCard (so duck typing this would serve no purpose). \nLet me know what you guys think, I don't like the if statement there but I can't think of an alternative without touching too many other parts.\n. @ntalbott I added the unit tests for storing and unstoring using a token and will push that commit. For the remote test the problem is Moneris doesn't provide a temporary token that doesn't expire. This means every time we run the remote tests we would have to use a fresh token. In my app I get around this by just recording the request with VCR (but at that point I'm really just using the cassette like a mock).\nLet me know if just the unit test is fine and I'll push that, otherwise we can discuss about the remote test. I'm curious what you think.\n. Yep, pretty much. We can't reuse the same token and there's no API we can use to generate those tokens. The only way is to use Moneris' Hosted Tokenization iframe and pass a bogus CC number. \nThe flow is:\nCC (via iframe) -> temp token (15 mins expiry) -> permanent token (no expiry). \nThere other way to get a token is via the already existing method using the CC number.\nHope this explains is better. \n. Done. \nThis is kind of ugly, I didn't create the pull request off a branch so I'm not sure I can rebase this into one commit. If that's a problem I can close this one and create a new pull request. \n. Thanks @ntalbott, double checked the changes and everything is good to go.\n. I understand you want to keep the library lean, but what would be the point of using ActiveMerchant for the transactions and then creating another wrapper just for the other functions ? \n. That's a fair point. Your comment about mixing in the response handling and connection code makes me think of @alovak's suggestion about extracting gateways into their own separate gems.\n. ",
    "davidsantoso": "Hi @dinesh - this is a bit stale but this isn't something we currently or are looking to support with Active Merchant.. @gauravsaini23 closing due to staleness and all remote tests passing:\n```\n\u279c ruby -Itest test/remote/gateways/remote_paypal_test.rb\nLoaded suite test/remote/gateways/remote_paypal_test\nStarted\n..........................\nFinished in 178.558084 seconds.\n26 tests, 74 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.15 tests/s, 0.41 assertions/s\n``. Thanks for the great feedback @duff. Made all of the small tweaks then refactored the building of XML to not fill up a hash then map it inbuild_xml_request`. Now it just takes a block which cleans up the request body quite a bit.\nLet me know if you have any additional thoughts and/or tweaks.\n. Closing due to staleness and associated PR also being closed.. @duff @j-mutter good call. Should there be a guard statement on Phone as well since that's part of the address hash?\n@j-mutter yep I'll add one now.\n. It is helpful when testing for adding addresses to a transaction :wink: This was probably more my issue in not having robust enough of tests. \n. @duff @j-mutter added two additional tests for transactions without addresses and refactored the guard clause on the customer info XML generation.\nLet me know if you guys have anymore thoughts/concerns!\n. Awesome thanks!\n. Ah right. Alrighty, adding!\n. @duff alrighty, added verify unit tests. Let me know if there's anything else missing.\n. Ha right? I don't know what the deal is...\nAnd, I'll remove the key symbolization. I've done it before with other gateway/seen a few other gateways do it so I wasn't sure if it was something we were trying to do by convention with AM adapters. Happy to have less code :wink: \n. @duff alrighty, changes have been made. Let me know if you have any other thoughts.\n. Forgot to update unit test. Should pass this time...\n. @duff all green!\n. @duff docs are pretty vague around echeck support. I'll write some remote tests and see what happens. You can send a card or echeck in with the transaction so it's entirely possible!\n. @duff just pushed an update to add more tests for echecks!\n. Closing due to inactivity.. @duff implemented the changes you suggested. Probably want to double check the purchase action as we figured out that Creditcall requires the transaction reference from the authorization instead of the capture, but we want to use the capture response to determine if it was a success, etc.\n. @duff one thing to note- the scrubbing regex might a bit too strict, like using \\d+ for non blank values. I wonder if that might be an issue when it comes to someone accidentally entering something that isn't a digit and then it \"leaks\" in the sense that the CVV will be present, albeit a little incorrect. Thoughts?\n. Closing due to inactivity. . @ntalbott @duff right on. I'll push an update.\n. @duff we certainly could. Although, they'd be exactly the same with the exception being during initialization. Let me know, happy to add another if that's better.\n. @duff and @ntalbott: Alrighty made the updates and added separate unit/remote tests as well.\n. Thanks for the feedback @duff. I'll get those updated. Also, I realized that I actually accidentally overwrote some changes I made to the SHA256 unit tests, so it might take me a bit to get those request/response strings updated again.\n. @duff and/or @rwdaigle. Ready for a look again when you have a minute. Fixed up the issues brought up earlier with the unit tests.\n. Ahhh good catch with the scrub- definitely needs to be updated (I think)!\nI just checked the PDF docs and they don't currently support store so I think we're ok on that end. \n. @rwdaigle ready for round 2.\n. Hi @fourfour and/or @naturalstacks- going through and pruning PRs and issues and looks like this is more or less ready to merge. Wondering if you'd be able squash into a single commit and rebase on master? I'll take another look once that happens. Thanks!. @rwdaigle it does. Should store be done by default in addition to the other actions if it's available?\n. @rwdaigle updated with store and added the ability to charge via a an Element PaymentAccountID. Let me know if you have any other feedback!\n. @rwdaigle wow good catch! Definitely need to scrub those. I just updated again!\n. @rwdaigle I think the AuthorizeNetGateway and AuthorizeNetCimGateway are separate adapters? I only made changes to AuthorizeNetGateway so I'm only running remote_authorize_net_test.rb.\nI should say, running the remote_authorize_net_test.rb tests causes some failures with the Apple Pay tests. I'm not sure how easy those are to fix though since I'm not sure how that PKPayment fixture data was collected. \nBut, this change shouldn't cause any issues with Apple Pay (afaik).\n. @rwdaigle ahh gets me every time. Alrighty, just pushed an update to include scrubbing.\n. @rwdaigle correct. It was actually already supported but the remote test is more or less confirmation.\n. @duff gotcha. Thanks!\n. Hi @Azdaroth- I'm pruning old PRs and issues and this looks fine. If you're still interested in getting it merged in please rebase on master and update the PR. Otherwise I'll close in the next couple days. Thanks!. Hi @vivekschetu - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nTag me for review\n\nThanks!. Hi @wedy - I'm grooming old pull requests and if this is still something you'd like, please-\n\nReopen the PR\nRebase on master\nTag me for review.\n\nThanks!. Hi @PaulDaviesC - I'm grooming old pull requests and if this is still something you'd like, please:\n\nReopen the PR\nRebase on master\nTag me for review.\n\nThanks!. Closing since it seems the associate PR was merged.. Hi @dontmatta - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nSquash all commits\nRebase on master\nTag me for review\n\nThanks!. @rwdaigle :+1: \n. @Krystosterone getting an undefined method exception.\nundefined method `request_uri' for #<URI::Generic:0x007f6ee35b36d8>\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/connection.rb:64:in `block (2 levels) in request'\n@rwdaigle here's the stack trace.\nvendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/connection.rb:64:in `block (2 levels) in request'\n  /usr/local/rbenv/versions/2.1.7/lib/ruby/2.1.0/benchmark.rb:294:in `realtime'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/connection.rb:60:in `block in request'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/network_connection_retries.rb:23:in `block in retry_exceptions'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/network_connection_retries.rb:46:in `retry_network_exceptions'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/network_connection_retries.rb:21:in `retry_exceptions'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/connection.rb:54:in `request'\n  lib/core_active_merchant_connection.rb:9:in `request'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/posts_data.rb:65:in `raw_ssl_request'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/posts_data.rb:39:in `ssl_request'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/posts_data.rb:31:in `ssl_get'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/billing/gateways/cashnet.rb:136:in `handle_response'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/posts_data.rb:39:in `ssl_request'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/posts_data.rb:35:in `ssl_post'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/billing/gateways/cashnet.rb:62:in `commit'\n  vendor/bundle/ruby/2.1.0/bundler/gems/active_merchant-a75f2716cfd1/lib/active_merchant/billing/gateways/cashnet.rb:46:in `purchase'\nOriginally, this was meant to fix an InvalidURIError exception from a bit ago. @hoenth any insight?\n. Hi @asanger - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Closing due to staleness.. Hi @dppcode - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi @zambot - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi @PayTabsLLC - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi @bruno - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. @aellispierce thanks for the starting point! Added in https://github.com/activemerchant/active_merchant/commit/b2f62a950faab76d1e0417fd090602ae5ac3363b.. @aellispierce I'd feel bad, except I had to do/go through their certification process so I feel less sorry about stealing your commit \ud83d\ude38 . @aellispierce please! Spare my account! \ud83d\ude4f . @tahb thanks for the PR- although I can imagine this is super handy, at the moment the scope of gateway adapters in Active Merchant stops when it comes to querying a transaction/payment. In general (with a few exceptions) gateway adapters are not pure layers on top of a gateway API but more of general interface.. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. @orenmazor I think it might be good to have someone from Adyen confirm that they are \ud83d\udc4d with being in Active Merchant. In the past they haven't been too keen on third party libraries.. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi @luukveenis - looks like in Braintree Blue we currently pass it as the channel option. I believe this should allow you to pass it for only Braintree transactions vs setting it for all gateways.. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Looks like it's been added. Thanks for pointing it out @wsmoak! . Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Hi - I'm grooming old pull requests and if this is still something you're interested in, please:\n\nReopen the PR\nRebase on master\nSquash all commits\nTag me for review\n\nThanks!. Closed with ed4ed2d03837a3a7db6a22fc37861c22f3779c90. Thanks for opening up this issue @wsmoak!. @shasum let me know about the refund method above- If we can nix doing a GET on the transaction first, we may be able to simplify the commit and response parse further down the line as well!\n. Hi @arjunmenon you're welcome add this gateway if you're wanting/needing to use it. However Active Merchant maintainers will not be adding it. See our contributing wiki page for more details.. @timbeiko just wanted to confirm that this update came to us over at Spreedly by BlueSnap. I'm happy to merge as well, just let me know.\n. Accidentally typed the wrong PR number in the closing commit. Closed with https://github.com/activemerchant/active_merchant/commit/1a661af9fe8dbe3d89d7a1a94abbcb2e8e717c35.\n. @darkaz @marcosAlvarado thanks for submitting this PR! Unfortunately it appears as though the changes were made on a very old version of master. Would you mind squashing your two commits and rebasing on the current master? \n. Closing in favor of https://github.com/activemerchant/active_merchant/pull/2213.\n. @darkaz thanks for rebasing on master. However, the commits still need to be squashed into one single commit. Thanks!\n. @darkaz I'm reviewing now, however before I push I'll probably squash all your commits into one and rebase again since there have been commits since you reopened this PR. I'll let you know if I have questions. Thanks!\n. Closing due to inactivity.. @shasum sorry I haven't merged this in! I appreciate the added test. Although I think at this point it might need a rebase on master- let me know when you've updated the PR and I'll merge it in.\nThanks!\n. Sounds good- I'll keep an eye on it.\n. @shasum thanks!\n. @curiousepic looks great- thanks!\n. Hrrrm @curiousepic mind looking into the Travis failures?\n. @joshreeves thanks for the PR! \n\nNot sure if there's some additional protocol I need to follow\n\nWe're working on getting a little more formal process in place, but for now a quick ping works! Do you happen to have a link to documentation on this? Just want to cross reference to feel confident.. @joshreeves thanks for the docs! A couple of thoughts for you-\n\nI'd like to avoid creating a custom CUSTOMER_UPDATE_DATA_FIELDS option at the top if at all possible. Generally options mappings like these in Active Merchant tend to encapsulate common groupings of fields so similar to how you split out the profile, recurring, and point of sale fields. The usual pattern is to encapsulate those then add them as necessary to the request.\nLikewise, I think that will remove the need of a custom build_field_value_array method since we can piece together to SOAP request body similar to how the add_customer_payment_method is doing it.\n\nOverall, this is certainly headed in the right direction! I think it could use a little more work re-using the existing builders/pattern the other request body builders are following.. @joshreeves I had missed the \"Arguments\" heading on the docs page so this whole PR makes a lot more sense now. My apologies and thanks for pointing it out/taking the time to really explain.\n\nIf you'd prefer to not have build_field_value and build_field_value_array as reusable methods \n\nLets keep these in. Reusable is good \ud83d\udc4d \n\nAre you saying you'd rather see something like this directly inside build_quick_update_customer\n\nOriginally yes, but looking back again at the adapter it seems like the transaction request options are building out their requests as well so I guess it's fine to add it at the top in a similar fashion. I think this adapter is on the older side and might not follow some of the more recent conventions.\nI did have one last question just to be sure-\nLooks like the address1 and address2 are separate from the COMMON_ADDRESS_OPTIONS and I was just curious as to why that might be? . @joshreeves sorry for the delay- that makes sense. Thanks for clarifying. If you could just rebase the commit on master I'd be happy to merge in.. @joshreeves thanks for the rebase! and for answering all of my questions \ud83d\ude38 Merging.. @joshreeves merged. Thanks for contributing to Active Merchant!. @duff wondering if you had any final thoughts?\n. @duff ah! Very good catch. Let me add that real quick.\n. @duff updated. Now returns 100 if the currency passed in is not in the hash.\n. @curiousepic I restarted the Travis build so hopefully we don't get a timeout this time!\n. @curiousepic also real quick- mind rebasing on master? I think it might be a commit or two behind.\n. @MauricioMurga thanks for the PR! Just added one inline question about the version number. Also, we've committed on master so could you rebase and update your PR? Thanks!\n. @curiousepic merged. Thanks!\n. @curiousepic looks great, thanks!\n. @curiousepic looks good! Mind adding a quick remote test just to verify? We can probably just add it/update the test_successful_purchase test.\n. @curiousepic sorry, completely missed this ping. Mind rebasing on master again so I can fast forward merge? Thanks!. @curiousepic thanks! . @shasum looks great, thanks!. @jasonwebster took a look at this and it's \ud83d\udc4d from me. You're correct in your interpretation of the external contract of Active Merchant:\n\nall transaction amounts accepted by the public API methods are expected to be in cents, period.\n\nEssentially it should be that you can always take whatever amount, multiply by 100, and send the currency if it's not the default, and the adapter will handle formatting it properly for you. . > Let me know if anything else from our side is required.\n@tschelabaumann apologies for this misunderstanding but those changes requested were actually meant to be done on your end. . >  If we should do it anyways on our own let me know.\nIf you could do it that'd be great. @jasonwebster I'll leave it to ya'll to merge in if things look \ud83d\udc4d on your end.. Wowza, very strange! One thought- lets move the adding of line items in the to add_invoice method. Line items are naturally part of an invoice so I think it's ok to group them in a single method. on top of the implicit ordering issue, that should allow the comment to be isolate to a single place. So, I'm thinking to the add_invoice method to look something like:\n```ruby\ndef add_invoice(xml, options)\n  xml.order do\n    xml.invoiceNumber(truncate(options[:order_id], 20))\n    xml.description(truncate(options[:description], 255))\n  end\n# Authorize.net API requires lineItems to be placed directly after order tag\n  if !options[:line_items].blank?\n    xml.lineItems do\n      options[:line_items].each do |line_item|\n        xml.lineItem do\n          line_item.each do |key, value|\n            xml.send(camel_case_lower(key), value)\n          end\n        end\n      end\n    end\n  end\nend\n``. @shasum sorry haven't had a chance to review this! I'll take a look tomorrow.. @shasum thanks!. I've updated thename` method to use the clearer approach of-\nruby\n\"#{first_name} #{last_name}\".strip\nI'll wait a little longer if others want to chime in before merging.\n. @jasonwebster that's fair. I'll drop the double assertion!. @bruno thanks!. > That is to say, I don't think this is the right approach in this case. 5xy responses should raise errors, and then it's up to the implementor to deal with them.\n@jasonwebster I agree with you here- existing pattern is Active Merchant raises when the response is outside of the 200..300 range and it's up to the implementor to deal with it. . > Surprised to see that the default includes raising on 4xy\nYeah, usually if the gateway returns a 4xx response but it's not a case where we want to raise then we rescue and parse. Here's an example from the Mastercard a gateway  I was recently working on.\nruby\ndef commit(action, post)\n  url = build_url(post.delete(:orderid), post.delete(:transactionid))\n  post[:apiOperation] = action.upcase\n  begin\n    raw = parse(ssl_request(:put, url, build_request(post), headers))\n  rescue ResponseError => e\n    raw = parse(e.response.body)\n  end\n  succeeded = success_from(raw)\n  Response.new(\n    succeeded,\n    message_from(succeeded, raw),\n    raw,\n    :authorization => authorization_from(post, raw),\n    :test => test?\n  )\nend\nLike you said, different conversation \ud83d\ude38 . @helsayed we looked into adding Payfort however their API doesn't accept PAN data directly. The API assumes tokenization via their JS library and passing that token through to run a transaction. At this point, gateway adapters in Active Merchant are scoped to not being dependent on external libraries to run a transaction.\nI'm not sure about BEE, you're welcome to explore adding it. See our contribution wiki page for more details.. @jasonwebster that's a good thought! In some ways those fields have started to become Active Merchant specific/defined fields since it's a pretty common feature among gateways, but the manner in which the gateway accepts them varies pretty widely.\nSeems like it could be another section in the wiki under the Patterns and Standards section?. Sounds reasonable to me!. Closed with #2298 . @jasonwebster just a quick thought- wondering if we should also update the gemspec to require greater than Ruby 2? \n```ruby\ns.required_ruby_version = '> 2'\nor\ns.required_ruby_version = '~> 2'\n```\n. > How would that play with our versioning practices?\nThat's a good question! As far as I know we're following standard RubyGem semantic versioning. In any case, I'm on the same with you for a minor release since there aren't any Active Merchant API level changes being made.\nThanks for your work on this!. @jasonwebster wondering if there was anything else before merging this in? Got a couple small gateway fixes I'd like to get in but I thought I'd wait for this update first so Travis is green again!. Sounds good. Thanks much!. @jasonwebster will do, thanks!. @jasonwebster since this has an effect on Shopify as well, want to make sure you're all ok with getting failed Travis builds?\nhttps://docs.travis-ci.com/user/notifications#Configuring-email-notifications. Closed with 06b03b18117ff7993c4ea86cfbbd8e03ba6c4bbf.. Hey @bdewater I recently updated the travis.yml file to take into account Rails 5. But I didn't go further than that. Wondering if you still want to update for your other changes?. No major rush! I had done the travis update and while I was combing through the issues last night,  noticed/thought I should probably mention something \ud83d\ude38 . @bdewater I'm curious about replacing rails with activesupport in the travis file.\nruby\n-gem 'rails', '~> 5.0.0'\n +gem 'activesupport', '~> 5.0.0'\nAlthough we're really only using Active Support from Rails as a whole (hopefully we can remove Active Support usage completely), I think this is meant to show that it would work in a Rails X.X app?  I could be misunderstanding how this might work exactly in a Travis build.. @bl thanks for submitting this PR! Been thinking about this one a bit this morning and have a couple thoughts/questions:\n\nI don't feel great about a raise directly following a rescue. It would probably be better to override the handle_response method like some of the other gateways have done.\nI'm a bit curious as to the forcing factor behind this change. I can see how the error_code will be set to nil on those particular responses from Stripe, but is there a reason there must be an error_code vs just leaving it as nil in the same way that we didn't receive a code from Stripe?\n\nWe need to be a bit cautious when making changes that raise errors where they weren't before. Although the general pattern is for Active Merchant to raise on 400..500 HTTP responses, the reality is that gateway APIs are just different and therefore at times we deviate from that pattern. By raising an exception now where it wasn't being raise previously, we risk breaking people that are using the adapter but are not handling the exception at the moment.. Closing due to inactivity.. @jasonwebster LGTM. I do see what you mean about possible duplicate Ecommerce_Flag fields being set. I think it should be ok though since:\n\n\nOne case it'll only duplicate if it's a NetworkTokenizationCreditCard which if it's a card present swipe then it shouldn't be.\n\nIn add_card_authentication_data method where it's being set again, that looks like 3DSecure stuff which also wouldn't happen during a card present swipe.. @jasonwebster this looks \ud83d\udc4d for me naming wise.\n\n\nbut it looks like that gateway doesn't use the standard error code mapping system\n\nSo, the STANDARD_ERROR_CODE map is quite hit or miss in terms of gateway adapter implementation. I think it started out as a convention but then as more gateways were added, it became a bit unwieldy to try and map all of the different errors a gateway might return since it actually varied quite a bit. We've found it tends to be clearer to return the exact error message from a gateway for the sake of looking through gateway docs or contacting their support.\nThat being said, feel free to add it to the Braintree gateway! Just thought I'd let you know where that stands in terms of usage.. > Should we be adding it to the Android Pay cryprogram params too (just above)?\n@jasonwebster good thought- I did a quick check of the available fields for an AndroidPayCard in the Braintree gem docs and it looks like cardholder_name isn't actually an accepted field. \nhttps://developers.braintreepayments.com/reference/response/android-pay-card/ruby\nInterestingly enough, it's not an accepted field for an ApplePayCard either so that makes me think that the field is ignored. I'll leave it in the ApplePayCard for now, but I think maybe we leave off adding it to Android Pay? Any objection?. > I should have just checked the docs.\n@jasonwebster no worries at all. It was a good thing to ask about since it could've very well been available and a good field to add!. @curiousepic updated and merged. Thanks!. @duff @rwdaigle @jasonwebster would appreciate if we could get your eyes on this one. The Kushki gateway requires a DELETE request with a request body to run their void so we're adding an additional request type. Wondering if you have any thoughts on naming, general implementation, other thoughts around this kind of addition?. @duff @jasonwebster another quick ping to see if either of you have any thoughts. No worries if not, just wanna make sure things gets a couple more eyes to be sure we're \ud83d\udc4d considering it's got a new HTTP DELETE request that allows a body.. Alrighty, looks like no major objections. I'm going to merge this in.. @shasum thanks!. @curiousepic thanks!. Thanks for the ping- \ud83d\udc4d on the Spreedly end.. @curiousepic thanks!. @shasum sorry for the delay in reviewing this. I'll take a look sometime on Monday morning.. @shasum if you could make that small update noted in the inline comments we should be \ud83d\udc4d .. @shasum @jasonwebster thanks!. @shasum thanks!. @jknipp thanks! . @shasum thanks! A bit unfortunate Kushki decided after the fact to make a body option on the void call. But, glad we can get back to the usual Active Merchant connection conventions.. @shasum merged, thanks!. @curiousepic thanks!. \ud83d\udc4d have some questions of my own!\n. @hossamhossny merged. Thanks!. @hossamhossny \n\nbut I think it is a github issue, so I contacted them. \n\nYeah, I'm not 100% sure what happened either. Wondering if something happened when you squashed and rebased but somehow the commit didn't get authored by the email address your GitHub account has?\n\nHowever, did you have to close this PR as oppose to \"merge\" it?\n\nWe follow a linear flow with the git history for Active Merchant so when we merge a commit, we update the change log, amend the contributors commit, then merge to master closing the commit by adding the PR number in the commit description.\n\nand how can I make future updates for the gateway?\n\nSame as usual! Just open a PR and tag someone!. @cesargomez89 interesting- at the moment the remote void test against the JetPay sandbox is passing.\nDo you happen to know if that's a quirk with their sandbox that doesn't match with production? Unfortunately that would be outside of convention on the Active Merchant side to require a card number to void an authorization.. @cesargomez89 I've seen that error returned before and unfortunately it's a bit misleading. Looking at pages 66-67 in the docs, it states:\n\nIf the token is not present in our system, an ActionCode of 912 is returned.\n\nI'm not sure what your @transaction.void_string returns, but it appears to be missing the token parameter from a previous successful authorize request?\nWould you be open to running a remote test off master for this to confirm it's still not working for you? At the moment I'm able to successfully void/send a REVERSEAUTH for a previous authorization without sending in the credit card number\nI'm running:\n$ DEBUG_ACTIVE_MERCHANT=true ruby -Itest test/remote/gateways/remote_jetpay_test.rb -n test_successful_void\nFull test debug output:\n```\n\u279c DEBUG_ACTIVE_MERCHANT=true ruby -Itest test/remote/gateways/remote_jetpay_test.rb -n test_successful_void\nLoaded suite test/remote/gateways/remote_jetpay_test\nStarted\nI, [2017-03-08T14:29:03.732009 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_http_method=POST connection_uri=https://test1.jetpay.com/jetpay\nD, [2017-03-08T14:29:03.732060 #74913] DEBUG -- : TESTTERMINALAUTHONLY1208bb4736603693c840003000200010000918Longbob Longsen123456 My Street Apt 1OttawaON75008USA(555)555-5555Jim Smith456 My Street Apt 1OttawaONK1C2N6USAtest@test.com127.0.0.11234579900\nopening connection to test1.jetpay.com:443...\nopened\nstarting SSL for test1.jetpay.com:443...\nSSL established\n<- \"POST /jetpay HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nUser-Agent: Ruby\\r\\nConnection: close\\r\\nHost: test1.jetpay.com\\r\\nContent-Length: 941\\r\\n\\r\\n\"\n<- \"TESTTERMINALAUTHONLY1208bb4736603693c840003000200010000918Longbob Longsen123456 My Street Apt 1OttawaON75008USA(555)555-5555Jim Smith456 My Street Apt 1OttawaONK1C2N6USAtest@test.com127.0.0.11234579900\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Date: Wed, 08 Mar 2017 19:29:04 GMT\\r\\n\"\n-> \"Server: Apache\\r\\n\"\n-> \"Vary: Accept-Encoding\\r\\n\"\n-> \"Content-Encoding: gzip\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Transfer-Encoding: chunked\\r\\n\"\n-> \"Content-Type: text/plain; charset=UTF-8\\r\\n\"\n-> \"\\r\\n\"\n-> \"ce\\r\\n\"\nreading 206 bytes...\n-> \"\\x1F\\x8B\\b\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\\\x90o\\v\\x820\\x10\\xC6\\xDF\\xEF\\xCBlfY\\xC11\\xD0\\x15\\xD8\\xB4\\x94\\x1C\\x83z7u\\x90\\x14N\\x9CD}\\xFB\\x86\\x90X\\xF7\\xE6\\xFE\\xFC\\x9E\\xE39\\x0E\\xB8\\x1Er\\xF5>k\\xDB\\x99\\xD6j\\n\\xA2W\\xADU\\xD5\\xD0\\x98\\xF6\\xB0\\xA3\\xDE\\x82l\\xCAr\\xB9\\xF6\\x83\\x80\\xF8\\xC1\\xD6\\xAF6\\x80\\x7F\\x15\\b\\xC2\\xB1d\\xA6\\xD6\\x94\\x10\\x02x\\xD6;\\xD8u\\xBDy\\xAA\\a\\x15\\xFBBx+G\\xBF\\x03\\x04L\\xCA\\x05\\xCD\\x01\\x8F\\x19\\xC1\\xF7\\x06\\xA1_\\x03\\r\\xF3\\xFC\\x9C\\xC9\\xFD\\x0E\\xF0\\xCF\\x18\\x810w\\xDD\\xD2$IO,\\xCB\\xA2$\\xE51gI\\x14G \"\"\n-> \"\\r\\n\"\nread 2 bytes\n-> \"a\\r\\n\"\nreading 10 bytes...\n-> \"\\x03\\x00\\v\\xE7f\\x020\\x01\\x00\\x00\"\nread 10 bytes\nreading 2 bytes...\n-> \"\\r\\n\"\nread 2 bytes\n-> \"0\\r\\n\"\n-> \"\\r\\n\"\nConn close\nI, [2017-03-08T14:29:04.331070 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] --> 200 OK (304 0.5990s)\nD, [2017-03-08T14:29:04.331111 #74913] DEBUG -- : 1208bb4736603693c8\n000\nTEST15\nP\nAPPROVED\nKKLNCOOBKLJHJCKBHBJOLJMC\nY\nY\nY\n\nI, [2017-03-08T14:29:04.331140 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_attempt=1 connection_request_time=0.5991s connection_msg=\"success\"\nI, [2017-03-08T14:29:04.331160 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_request_total_time=0.5992s\nI, [2017-03-08T14:29:04.333614 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_http_method=POST connection_uri=https://test1.jetpay.com/jetpay\nD, [2017-03-08T14:29:04.333665 #74913] DEBUG -- : TESTTERMINALREVERSEAUTH1208bb4736603693c8TEST159900KKLNCOOBKLJHJCKBHBJOLJMC\nopening connection to test1.jetpay.com:443...\nopened\nstarting SSL for test1.jetpay.com:443...\nSSL established\n<- \"POST /jetpay HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nUser-Agent: Ruby\\r\\nConnection: close\\r\\nHost: test1.jetpay.com\\r\\nContent-Length: 246\\r\\n\\r\\n\"\n<- \"TESTTERMINALREVERSEAUTH1208bb4736603693c8TEST159900KKLNCOOBKLJHJCKBHBJOLJMC\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Date: Wed, 08 Mar 2017 19:29:04 GMT\\r\\n\"\n-> \"Server: Apache\\r\\n\"\n-> \"Vary: Accept-Encoding\\r\\n\"\n-> \"Content-Encoding: gzip\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Transfer-Encoding: chunked\\r\\n\"\n-> \"Content-Type: text/plain; charset=UTF-8\\r\\n\"\n-> \"\\r\\n\"\n-> \"86\\r\\n\"\nreading 134 bytes...\n-> \"\\x1F\\x8B\\b\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xB2\\xF1J-\\tH\\xAC\\fJ-.\\xC8\\xCF+N\\xB5\\xB3\\t)J\\xCC+NL.\\xC9\\xCC\\xCF\\xF3t\\xB1342\\xB0HJ21763306\\xB34N\\xB6\\xB0\\xD1GU\\xC1e\\xE3\\bf:\\xE7\\xA7\\xA4\\xDA\\x19\\x18\\x18\\xD8\\xE8#\\xF1\\x81\\x92\\x05\\x05E\\xF9e\\x899v!\\xAE\\xC1!F\\x86@Y\\x98\\x00\\x97\\r\\xCC\\xD2\\x90\\xD4\\x8A\\x12;\\xC7\\x80\\x80 \\xFF0W\\x17\\e}\\x14a.\\e}4\\x17r\\x01\\x01\\x00\\x00\\x00\\xFF\\xFF\"\nread 134 bytes\nreading 2 bytes...\n-> \"\"\n-> \"\\r\\n\"\nread 2 bytes\n-> \"a\\r\\n\"\nreading 10 bytes...\n-> \"\\x03\\x00Tx\\xF5\\xCD\\xB6\\x00\\x00\\x00\"\nread 10 bytes\nreading 2 bytes...\n-> \"\\r\\n\"\nread 2 bytes\n-> \"0\\r\\n\"\n-> \"\\r\\n\"\nConn close\nI, [2017-03-08T14:29:04.678741 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] --> 200 OK (182 0.3451s)\nD, [2017-03-08T14:29:04.678783 #74913] DEBUG -- : 1208bb4736603693c8\n000\nTEST21\nAPPROVED\n\nI, [2017-03-08T14:29:04.678806 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_attempt=1 connection_request_time=0.3452s connection_msg=\"success\"\nI, [2017-03-08T14:29:04.678828 #74913]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_request_total_time=0.3452s\n.\nFinished in 0.960271 seconds.\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n1.04 tests/s, 7.29 assertions/s\n```. \ud83d\udc4d . Successful remote test run proof:\n```\n\u279c ruby -I test test/remote/gateways/remote_jetpay_test.rb\nLoaded suite test/remote/gateways/remote_jetpay_test\nStarted\n................\nFinished in 7.986752 seconds.\n16 tests, 87 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n2.00 tests/s, 10.89 assertions/s\n```. @dimitrovv thanks for the PR! A couple things- gateways added to Active Merchant generally follow a structure of a gateway adapter, remote tests, and unit tests. This PR is a bit out of the expected file structure with including helper files and breaking out the tests. See our wiki page on contributing a gateway for more details. Unfortunately we won't be adding these adapters until they fall in line with our conventions. \nWe do appreciate new gateway adapters so if you're still interested in adding them please open a new pull request utilizing the gateway patterns as outlined in contribution wiki. If anything in the wiki is unclear, feel free to open an issue to discuss.. > I have also paid attention to the breantree and paypal integrations, they also use helper classes for their gateway integrations.\nYes, I apologize- those are certainly special cases to some extent. The preference is that gateways not follow that pattern unless really necessary so we don't have too many extra helper files everywhere. I can be a bit difficult to parse through all of it! I will say, it's ok if two gateways share the exact same behavior or one is a while label of another, etc. We do have gateways that only change meta data so they include another gateway to keep things DRY. Mastercard/TNS/Citrus Pay are a good example.\n\nDo you mean that we should organize our integration into 3 files:\nGateway Class - inherits from Gateway Class\nRemote Tests - include all test cases without using shared examples in modules\nUnit Tests - include all test cases without using shared examples in modules\n\nYes. Also if it's two gateways then there would be 6 files total.\nThanks!. > Only little question I have is if we need the cattr_accessor stuff \n@duff we could just have them be passed in as the other options, bypassing the ability to do a global set. I was using the same pattern as Linkpoint and I was thinking that provided a little flexibility for someone using the adapter in terms of how they wanted to pass in the PEM.\nBut, I'll defer to your opinion since Linkpoint may not have set a good example in the first place \ud83d\ude38 . Right on. Alrighty thanks for your input! I'll push the changes and merge.. @shasum merged. Thanks!. @WilsonChiang tried accessing the account but doesn't seem to want to let me in. \ud83e\udd14 Although, looks like in the remote test there's another way to get it enabled?\n\nThis can be accomplished by sending an email to payflow-support@paypal.com with your Merchant Login.. \ud83d\udc4d I'm gonna close the issue since there doesn't seem to be any action item left.. Thanks @WilsonChiang!. Successful remote test run proof-\n\n```\n\u279c ruby -Itest test/remote/gateways/remote_global_collect_test.rb\nLoaded suite test/remote/gateways/remote_global_collect_test\nStarted\n...............\nFinished in 21.263029 seconds.\n15 tests, 35 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.71 tests/s, 1.65 assertions/s\n```. @shasum looks good. Merging in.. @jasonwebster that would be awesome. Thanks!. @jasonwebster thanks for the remote run log- So that failure is interesting cause we have this note in the remote tests-\n\nAmounts of x.01 will fail\n\nBut running a verify will do an authorize of 100 so I'm not sure that would ever pass in the test environment? Even with a declined card.. \ud83d\udc4d alrighty. Ok with you to merge then?. @curiousepic I'm not sure what's up the Travis \ud83e\udd14 Looking at the log it may be a Travis issue. But I can kick it off again to check. . @curiousepic Travis issues should now be fixed (54cf5c538e16c18d869f2011730fea4ecd1a8b16). Mind rebasing on master and updating this branch? That'll kick off Travis again.. @curiousepic thanks!. @shasum thanks for looking into this! Looks like we've already got a pattern going for Rails versions lower than 5. Seems like this could be a good time to rename the Gemfile.rails5 to Gemfile.rails51 and then locking the Rails version in that particular Gemfile. Also, we'll need to update that reference in the .travis.yml file.. @shasum thanks again for the debugging! Fixed with https://github.com/activemerchant/active_merchant/pull/2374.. Closed with 54cf5c538e16c18d869f2011730fea4ecd1a8b16.. @dimitrovv I'll try and find some time today to review. Been a busy past week.. @shasum just want to double check you also got these remote test failures? Looks like the message has changed slightly so not a huge deal.\n```\nFailure:\n   expected to be =~\n  <\"The credit card number check failed\">.\ntest_failed_verify(RemotePayeezyTest)\ntest/remote/gateways/remote_payeezy_test.rb:147:in test_failed_verify'\n     144:   def test_failed_verify\n     145:     response = @gateway.verify(@bad_credit_card, @options)\n     146:     assert_failure response\n  => 147:     assert_match %r{The card number must be numeric}, response.message\n     148:   end\n     149:\n     150:   def test_bad_creditcard_number\n============================================================================================================================================================================================================\n............F\n============================================================================================================================================================================================================\nFailure:\n  </Internal Server Error/> expected to be =~\n  <\"Server Error. Please contact Support. (42) - Unable to Send Transaction\">.\ntest_trans_error(RemotePayeezyTest)\ntest/remote/gateways/remote_payeezy_test.rb:174:intest_trans_error'\n     171:     # ask for error 42 (unable to send trans) as the cents bit...\n     172:     @amount = 500042\n     173:     assert response = @gateway.purchase(@amount, @credit_card, @options )\n  => 174:     assert_match(/Internal Server Error/, response.message) # 42 is 'unable to send trans'\n     175:     assert_failure response\n     176:     assert_equal response.error_code, \"internal_server_error\"\n     177:   end\n============================================================================================================================================================================================================\n..\nFinished in 23.749142 seconds.\n22 tests, 76 assertions, 2 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n90.9091% passed\n\n0.93 tests/s, 3.20 assertions/s\n```\nFigured if you got them as well I would update them as I merge in.. @shasum sounds good. All fixed up!\n```\n\u279c ruby -Itest test/remote/gateways/remote_payeezy_test.rb\nLoaded suite test/remote/gateways/remote_payeezy_test\nStarted\n......................\nFinished in 24.924135 seconds.\n22 tests, 78 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.88 tests/s, 3.13 assertions/s\n```\nMerging.. @jasonwebster tagging you in to get a Shopify \ud83d\udc4d . I'm going to merge this in for now, but in the future if we want we can make that an optional initializer that defaults to what user_agent currently returns.. Thanks for the update @rubemz. Wondering if you're able to add a remote test to show that this works against the Litle sandbox?. @curiousepic thanks!. @InfraRuby I think @bruno makes a great suggestion. If you're still interested in a Bambora gateway adapter, feel free to submit a PR that includes that as a new gateway and a comment that Ipp has been deprecated/renamed.. Remote test run verification:\n```\n\u279c ruby -Itest test/remote/gateways/remote_checkout_v2_test.rb\nLoaded suite test/remote/gateways/remote_checkout_v2_test\nStarted\n.................\nFinished in 22.222023 seconds.\n17 tests, 37 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.77 tests/s, 1.67 assertions/s\n``. Thanks!. @shasum looks good. One small tweak- wondering if we can add back in a remote tests that uses a state/province that is already the correct 2 character code? Reason being that we want to ensure that if someone already passes in the correct 2 character code then it doesn't returnnilif it can't find it in theSTATES` hash.\nI do see that you have the || in there which is good and covers this case, but want to make sure we have a test that ensures that || stays in there and if that gets removed it'll fail.. @bizla thinking about this a little more- wondering if the option could be more explicit? (I apologize considering the Braintree change was already merged in) Something like auto_void_unsettled instead of full_refund. Thinking mainly of the method signature being a little strange:\nruby\ngateway.refund(100, authorization, full_refund: true)\nWhere full_refund seems to be a little at odds to the first 100 amount parameter. Questions like why would I pass in that option if I'm already sending in the full amount? Or the opposite- why would I need that option if I'm wanting to refund a partial amount? Considering in the past that this has been considered out of scope for Active Merchant, it seems like being as explicit as possible might be good?. @bizla sounds good to me. Thanks for the explanations!. Remote tests passing-\n```\n/Users/david/dev/active_merchant shasum-feat/safecharge/credit \u2714\n\u279c ruby -Itest test/remote/gateways/remote_safe_charge_test.rb\nLoaded suite test/remote/gateways/remote_safe_charge_test\nStarted\n..................\nFinished in 21.084059 seconds.\n18 tests, 45 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.85 tests/s, 2.13 assertions/s\n```. Alrighty, updates made. Thanks for the second set of eyes @curiousepic. Just waiting on the production URL from ProPay now.... Live URL added. Just waiting on a \ud83d\udc4d!. Thanks @shasum and @curiousepic!. @shasum I've a PR up for fixing that strange Travis failure (#2410). Mind waiting to merge until after I've merged it in so you're checked against a non failing build?. >  Should it actually be looking at result.code\n@shasum we should definitely be relying on a field in the response body instead of an HTTP code in general. Unless the Opp documentation is explicit on using the HTTP status code. HTTP status codes can be a bit misleading in that we get a 200 response, but the transaction was a failure. The 200 only denotes that a request was received, processed, and a response given.. > If I were to nitpick, the comma on line 107 while harmless is probably not needed :)\nDefinitely gonna \ud83d\udd2a that comma! Thanks all for the review!. > Typically the ECI indicator is also required for processing tokenized requests\nI wonder if we should double check with NMI on this. Just last week I was working on Apple Pay for Moneris and their docs say it's optional and they don't use it in their examples. Makes me wonder if some gateways require it while others don't. \n\nAdding it made cavv mandatory, which I mapped to the cryptogram.\n\n@shasum the docs that Jason linked show cavv as the verification value/CVV. Did you happen to get confirmation from NMI that it should be mapped to the cryptogram? Something seems amiss to me if we send the cryptogram it two different fields. Beyond that, I don't think we know if a NetworkTokenizationCreditCard coming from Apple Pay will even include the CVV.\nSeems like getting a better sense of eci usage and why it made the cavv value required would help.. > Also, couple other gateways ( firstdata_e4 and cybersource ) map cryptogram to cavv which made me think maybe it's a typical mapping.\nInteresting! I hadn't seen that before. Curious to see what you hear back from NMI.. \ud83e\udd17 all around!. @shasum let me know when this is fully updated and I'll take another look!. @curiousepic great question- since Opp is a white label gateway some of the \"front end\"/white labeled gateways that use them require 3DS unless specifically told to disable. Spreedly has a gateway implemented in which this is the case.\nHowever, you bring up a good point in that we probably shouldn't force that custom field on Opp or any of the white labels that implement. I've updated the PR to only include it if it's sent as an option.. Thanks for the review!. \ud83d\udc4b Taking a look now.. @jasonwebster LGTM. Only remote tests still failing (with the default ECI of 07) are currency related so I think it should be ok. Most likely some stale test data.. \ud83d\udc4d . @jusleg @jasonwebster wondering if we could actually make this header optional? Looking at the Payflow docs, it looks like it changes a couple things about how the request is processed and subsequent response format. Not sure if it's needed (or maybe even wanted) across the board for all Payflow transactions.\nhttps://developer.paypal.com/docs/classic/payflow/integration-guide/#sending-requests-directly-to-paypal-bypassing-payflow\nI was thinking something along the lines of:\n``ruby\ndef build_headers(content_length, options) #<- addoptions` to the method params\n  {\n    \"Content-Type\" => \"text/xml\",\n    \"Content-Length\" => content_length.to_s,\n    \"X-VPS-Client-Timeout\" => timeout.to_s,\n    \"X-VPS-VIT-Integration-Product\" => \"ActiveMerchant\",\n    \"X-VPS-VIT-Runtime-Version\" => RUBY_VERSION,\n    \"X-VPS-Request-ID\" => SecureRandom.hex(16),\n    \"PAYPAL-NVP\" => options[:paypal_nvp] if options[:paypal_nvp]\n  }\nend\n```\n. @jusleg @jasonwebster just friendly ping on the question above- any concerns with this change?. \ud83d\udc4d so many different PayPal docs! \nFor what it's worth- the docs I linked earlier are what we go off of. Request fields seem to match up with what we generate in the Payflow adapter as well. Although, that adapter was before my time contributing to Active Merchant so could be stale by now.. > This essentially tells the system to bypass Payflow and lets all the line items be processed correctly.\nSo, I suppose this is what worries me just a tad. I'm not sure if bypassing is what we want the default behaviour to be. Could be that some people require some functionality in Payflow that bypassing would alter how they are processing. Making it an optional header would allow for both setups to coexist.. @jusleg @jasonwebster unless y'all have any major concerns with making this an optional vs default header, I'm gonna go ahead and make that change in the next day or so!. Closed with 8ccfbcc1f251ffa79ca6830c5f84a63b68d2fe73.. I should probably note that all authorize/purchase transactions that happened prior to this change will still have the bug since the fix is in the authorization concatenation. But, going forward it should be fixed.. @curiousepic ah, I made that last minute change and forgot to rerun unit tests before updating the PR! Fixing.... @shasum thanks for adding store! Two thoughts-\n\nWondering if consolidating the adding of a payment token vs credit card can be put in a single add_payment() method? So the build_sale_request and build_auth_only_request both just call add_payment(...) which has the if block and takes care of adding the payment to the hash correctly. Down the line, maybe we want to add additional payment method types which would be a single place to add them.\nI think we should add the certification tests into the single Jetpay v2 remote tests. See Credorax for an example. Mainly to just keep things in a 1-1 match and tidy up the number of files.. > Took a leaf out of Litle and Mercury. Since certification tests make us run through specific scenarios, separating them out seemed cleaner.\n\nSounds good. Thanks for the pointer!. Closed with 8ccfbcc1f251ffa79ca6830c5f84a63b68d2fe73.. @dtykocki mind dropping the remote test run suite results in the original PR comment for posterity sake? Unfortunately I can't run them and add since it looks like there's IP whitelisting involved \ud83d\ude3f . @dtykocki ah gotcha. The typical gateway sandbox quirk! Alrighty, overall this looks good since using the || should keep previous transactions with the VPSTxId in the response the same. \ud83d\udc4d . \ud83d\udc4d thanks! This is a good update since I imagine integrators will want to default their requests to one or the other vs on a per request basis.. Looking in that Authorize.Net knowledge base article:\n\nIf the address is in the U.S. or Canada, the two-digit State/Province code must be provided, along with the Zip/Postal Code.\n\nSo could be that we have a method that checks the country and if it's US or Canada, uses a default. Otherwise it allows nil. Although I can see the default possibly causing confusion I'm also guessing that if someone isn't collecting state then they don't really care would rather it \"just work\". \nIn the past we've erred on the side of make successful transactions as easy as possible which meant general (but still sane) defaults where needed. It has been helpful in the past and if a default seems strange it should be easy to override.\nI'm ok with this default, but making it a little more concise by checking country would also be a worthwhile improvement.. @jasonwebster any concerns with the above?. \ud83d\udc4d Makes sense. @dtykocki I'll leave it up to you to decide if we wanna make it a little more concise in terms of not defaulting a state if the country is outside the US and Canada.. @dtykocki Thanks \ud83c\udf2e ! . > it says something totally different than the one above for billTo.state\n\u2639\ufe0f \nI suppose we can't really know when a European Payment Processor is being used. Makes me wonder if we default to back to n/a when it's outside the US and Canada?\nruby\ndef state_from(address, options)\n  if [\"US\", \"CA\"].include?(address[:country])\n    address[:state] || 'NC'\n  else\n    address[:state] || 'n/a'\n  end\nend\n. \ud83d\udc4d I'll put up a PR!. \ud83d\udc0e !. @curiousepic thanks for the \ud83d\udc40 ! We haven't requested the test account be enabled for recurring txns. Certainly something we can request! Unfortunately it took a really long time to get new credentials working (previous credentials were deactivated)  after some black hole Payflow support and issues with whitelisting. . > I'm happy to consider an alternate method of passing the prelive url for the cert tests.\n@curiousepic was there an issue with the pervious setup of merging in a :url to the initializer? Seems like we could continue with that method and just update the URL in the certification test vs needing to passing in a new prelive_url: true option. . > I didn't see a way to create a fraud transaction\n@nfarve it's hit or miss with remote tests/gateway sandboxes providing a mechanism to test all possible responses. My only suggestion would be to write a unit test instead with a response that would be returned in the case of a fraud review. So, a stubbed out response that returns <responseCode>4</responseCode> instead and checking that it's still considered to be successful. . @nfarve was just looking at this and can see the params from the previous Authorize transaction as being pretty helpful/easy to access from the Active Merchant response. Interestingly enough, all of the params returned from a capture are present in the params of the authorize:\nAuthorize\n{\n  \"CardEaseReference\"=>\"589a356a-f980-e711-ba27-0050569277e2\",\n  \"LocalDateTime\"=>\"20170814100404\",\n  \"UTC\"=>\"20170814140404\",\n  \"LocalResult\"=>\"0\",\n  \"AcquirerResponseCode\"=>\"00\",\n  \"AuthCode\"=>\"D2F278\",\n  \"AuthorisationEntity\"=>\"Unknown\",\n  \"AmountOnlineApproved\"=>\"1.00\",\n  \"CardReference\"=>\"1031a7a3-2414-e711-94f9-002219649f24\",\n  \"CardHash\"=>\"YO5CqO1QQbHbMaFRuSV2vVq7uqQ=\",\n  \"PAN\"=>\"xxxxxxxxxxxx2224\",\n  \"ExpiryDate\"=>\"1809\",\n  \"Description\"=>\"VISA\",\n  \"CSC\"=>\"matched\",\n  \"Address\"=>\"matched\",\n  \"Zip\"=>\"matched\",\n  \"ICCTag\"=>\"000000000100\"\n}\nCapture\n{\n  \"CardEaseReference\"=>\"5f9a356a-f980-e711-ba27-0050569277e2\",\n  \"LocalDateTime\"=>\"20170814100406\",\n  \"UTC\"=>\"20170814140406\",\n  \"LocalResult\"=>\"0\",\n  \"AuthorisationEntity\"=>\"Unknown\"\n}\nMakes me wonder if we should even use the params from the capture! Or, if we want to merge them together) maybe we can reduce it to a one liner to avoid a check of the number of response elements in the multi response array:\nruby\nmulti_response.responses.map { |r| r.params }.reduce({}, :merge). @nfarve thinking about it a little more, I wonder if it'll be tough to know where the authorize response params will be- the multi response could have 1 element or two elements depending on whether or not the initialize Authorize request was successful.\nMakes me start to lean towards merging the params together since the only values that are really changing seem to be the timestamps and those will be right next to each other since we don't delay between those two during a purchase call.. >  if the auth is successful but the capture fails for some reason, and we're merging params?\nI was about to say- I think we still want to use the second (capture) transaction to determine the success since it's for a purchase. I think if we merge and the LocalResult is 1 for failed capture, then we'd get that value from the merge. Seems like overwriting the timestamps is ok too since we're more concerned about when the capture happened over the auth.\nOverall, seems like merge is ok to me.... @nfarve hrrrm. I just restarted the build so hopefully it's just a transient issue. Based on the change I imagine it'll be fine, but the restart will hopefully be fairly quick!. Closed with https://github.com/activemerchant/active_merchant/commit/011fe593375fda036d92422a76e4c82b967bb429.. @shasum thanks!. @nfarve LGTM! :shipit: . @nfarve this is great, thanks! Only minor tweak I would do is probably create separate methods for getting the AVS, CVV, and error code. For example with AVS:\n```ruby\nResponse.new(\n  ...\n  avs_result: AVSResult.new(avs_result_code_from(merged_params))\n  ...\n)\ndef avs_result_code_from(merged_params)\n  AVS_CODE[\"#{merged_params['Address']};#{merged_params['Zip']}\"]\nend\n```\nSince this is happening in two different places, it's nice to have an method to handle doing the work should that ever need to change. Then we can change it in just one spot.\n. @curiousepic just to double check- is this a gateway where the ordering of the fields matter? . @curiousepic yep figured as much since you had split them out!. For posterity sake-\n```\nFinished in 14.169873 seconds.\n\n3654 tests, 66909 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n257.87 tests/s, 4721.92 assertions/s\n/Users/david/dev/active_merchant mercado-pago-tweaks \u2714\n\u279c ruby -Itest test/remote/gateways/remote_mercado_pago_test.rb\nLoaded suite test/remote/gateways/remote_mercado_pago_test\nStarted\n...............\n/Users/david/dev/active_merchant mercado-pago-tweaks \u2714\n\u279c bundle exec rake\nFinished in 23.293175 seconds.\n\n15 tests, 42 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.64 tests/s, 1.80 assertions/s\n``. @curiousepic wondering if on the EBANX commit inmasterhad been amended by you for the \"Closes...\" text before pushing tomaster. But the EBANX commit in this branch had been rebased prior to you amending the commit so this one is pulling in a different one. The EBANX commit in this branch has a different commit SHA than what's inmasterso seems like there might be a slight \"order of operations\" issue going on!. @curiousepic weird! Wondering why it passed previously when I ran them standalone/locally. In any case, I've updated and it should pass now but we'll wait for Travis \ud83d\ude38 . @dtykocki remote test added. Unfortunately MercadoPago doesn't have a test Diners Club number so I can't write a remote test for that card brand.. \ud83d\udc4d . Ha @lyverovski right before I went to fix this one, I actually saw your commit and took inspiration \ud83d\ude09 . @bdewater I hear ya. It was also a concern of mine which is why I brought it up in the commit message. Although I am going back and forth on it since theoptions` hash in Active Merchant is sort of a catch all place where you can send in all sorts of parameters to help generate the right request. As of right now, I don't think we have any other Objects that go into the options hash with it always being more or less unstructured.\nIn this case, it feels like a bit of an in between of how we have the billing_address hash implemented and how something like the CreditCard object works- billing address isn't necessarily required so we just have a defined hash we use but no logic when adding billing address information. Credit cards on the other hand are always required and sometimes there's formatting logic for the request. Stored credential information isn't required for a gateway request, but there could be some formatting of the data required to send the correct field. \nAt this point I'm leaning towards it being a somewhat of a beta feature with documentation in the wiki on how it works and how to use it with the caveat that unless it's used accordingly, it will likely not work as expected. I'm looking into adding it across multiple gateways and once I get a better feel for implementing it in other scenarios I don't want to also prematurely optimize for these exact field level validations. However it is top of mind so I suspect it will become hardened as Active Merchant work continues.\n. \ud83d\udc4d thanks for the set of eyes!. Closed with https://github.com/activemerchant/active_merchant.\nApologies, forgot to add the \"Closes #3134\" to the commit message before pushing.. @curiousepic looks good to me in terms of using the \"defined\" stored_credential hash in the options parameter. I didn't look into Orbital's exact field requirements but the general idea of adding them based on the values in the stored_credential hash is \ud83d\udcaf . > I think for Orbital there are at least 2 message types for customer and merchant that are not covered.\nGotcha. So, I guess this where where the \"beta\" side of the stored_credential hash is clear. I surveyed 3 gateways and the bases were covered there. But, I suspect that there's a fair number of variations still out there. This is also where it seems like a structured object of some sort would come in handy.. @curiousepic for Worldpay I had a top level method which determined if it should use the stored_credentials hash or very specific fields in the options. \nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/worldpay.rb#L276\nWondering if something like that might be a little easier to grok?. ohh hmm \ud83e\udd14 I hadn't thought about mixing and matching- seems like it could get complex real quick. I'll defer to you on allowing specific field overrides vs. continuing to add to the stored_credential hash possible values.. Makes sense. I'll swap that out.\n. Yeah, definitely doesn't seem clean to have a method with just comments in it. I wasn't sure if it was supposed to be kept around in case someone wanted to be able to quickly generate a transcript again, but, if there isn't a formal convention around it, I'd say whack as well.\n. Just tested to confirm and it doesn't blow up if state is empty. Originally I thought it'd be better to have something there (\"n/a\") than nothing at all, but S5 documentation doesn't even mention addresses so maybe it's just better to remove it.\nThoughts?\n. Specifically with test_successful_verify_with_failed_void? \n. Ahh gotcha. Sounds good, thanks!\n. Fixed!\n. Ah ok. Is there a convention used in AM? Like separate by : or spaces?\n. :+1: :+1: \n. We definitely can. Didn't know that existed :wink: \n. :+1: \n. :+1: \n. :+1: \n. :+1:\n. So, I'm now realizing that I might have accidentally overwritten some changes I made to the unit tests. :disappointed: But yes, there should be a signature_algorithm.\n. Sounds good.\n. Ahh, good catch. Actually not supposed to be filled in. I'm just going to :hocho: it.\n. I don't think it is come to think of it. Updating...\n. :+1: \n. \n. @shasum wondering about this refund method since it seems a little more complicated than a typical implementation. Of course there could be something I'm unaware of considering I didn't work on the remote tests like you did. \ud83d\ude04 \nIs it not possible for us to skip doing a GET on a transaction for the amountBase and instead just pass the money parameter to the request? So, a more pared down implementation like-\nruby\ndef refund(money, authorization, options={})\n  post = {}\n  post[:transactionId] = authorization\n  post[:amountBase] = sprintf(\"%.2f\", amount(money))\n  commit(\"refund\", post)\nend\nI'm thinking that we should leave it up to the method invoker to pass in the money param to set the refund amount?\n. Ha no, that's definitely nicer \ud83d\ude04 Thanks!\n. @curiousepic wondering if Element returns any of the shipping address in the response? Could be nice to assert that the shipping address info we're sending it actually making to them.\n. Wondering if it's necessary to bump the version to 1.0.0 for the void action? Remote tests seem to be passing ok but thought I'd double check.\n. > Am I missing an edge case that negates the clarity of logic like this\nWell, not that I know of. Honestly, I was wondering if there was some edge case I wasn't aware of so seemed safer to just use the existing array based approach. Using strip certainly seems clearer.... We should probably underscore-ize these options. Which actually brings up another point- we have a couple gateway options that are standardized, email and ip being two of them.\nLooks like the gateway adapter is just mapping option keys to API request fields which works but does break that soft contract we have with the options hash. Other gateways generally take something like email from the options and map them to a appropriate API request key. For example, Be2Bill\nruby\npost[:CLIENTEMAIL] = options[:email]\nFormalizing the options hash is probably something we should revisit.. We should move this test into the current paymill remote tests at test/remote/gateways/remote_paymill_test.rb instead of it's own test file.. @curiousepic just wanna double check- any particular reason for not using the name method on the credit card?. @curiousepic \ud83d\udc4d sounds good. I'll just update/amend the commit it to use name instead if that's ok.. \ud83d\udc4d for deleting it from the options hash on line 163.. @shasum lets swap the blank? method with Active Merchants Empty module. You can also search include Empty to see how it's used in other gateways.\nMain reason is that blank? is an Active Support helper method so anyone using this gateway will now need the Active Support gem installed and it'd be good to not have that as a dependency. Also, don't want to assume we're within the context of a Rails application! Also also, if you see it used other places feel free to open an issue/PR to remove it. \ud83d\ude38 . @curiousepic wondering if we can just nix this line period?. Yep! I was following the pattern Linkpoint was using.. Wondering if we should use response.try(:[], \"statusOutput\").try(:[] \"statusCode\")? The Global Collect API responses seem to have a number of different structures so in the chance we get a response that doesn't have either types we won't run into an exception trying to reference statusCode of nil.. > I'm not sure I see how it would hit an exception in that case.\nSo, response[\"statusOutput\"] would be nil if that key doesn't exist at the top level of the response hash. Which means it'd be the same as nil[\"statusCode\"] which would raise the exception.\n\nThe first if is in the same position.\n\nFortunately this is slightly different since if you reference a nonexistent key in a hash, nil is returned-\nruby\n\u279c irb\nirb(main):001:0> hash = {a: 1}\n=> {:a=>1}\nirb(main):002:0> hash[:b]\n=> nil\n\nkind of wondering why I don't see it in more places.\n\nI've been using it anytime I'm going more than one level down in a hash. Purely for the sake of avoiding a no method error on nil since getting nil value is better than an exception being raised in the middle of parsing out a transaction response. . @shasum looks good- just FYI when I merge this in I'll probably merge these into a single line like-\nruby\nresponse = { message: e.to_s }. @curiousepic wondering if we should uncomment these? Or if they're not needed just delete the test.. @curiousepic got it. Thanks for the clarification. We can leave it in.. Personally I like the return unless ... pattern mainly because it's more explicit. Basically, I know that none of the fields below the guard clause are getting added unless some piece of data comes through.. Guessing their test URL is the same as their live URL? I've seen this pattern in other adapters-\nself.live_url = self.test_url = 'https://example.com'\nWondering if we should follow suit for the sake of consistency.. yep \ud83d\ude1e . It should! Good catch.. Hmmm I didn't try it actually. I've actually always gone off of the 100 that comes with the generator. I'll give it a shot and see what happens.. I've personally always thought it's better to pass the same value as what's in the gateway docs. Seems more explicit to me instead of relying on the underly adapter to do the right thing depending on true/false. That being said, I don't think there's actually a convention around this yet.... Hmmm. Sometimes I think it's ok to have the method just add the single value instead of always using any extracted methods. But, the more I think about it, it's probably better for me to keep using to extracted methods.. Just tried 0 auth during verify and got an Invalid amount error. \ud83d\ude3f . @shasum great question! Yes it is. ProPay is a payment gateway for platforms so for each transaction you need to specify the merchant (on your platform) that you want to actually receive the funds. Similar to WePay.. @hossamhossny I still see it? Seems like we don't need this line and the associated add_capture method since  purchase will default to true and authorize forces post[:capture] = false.. On errors, does Trexle return HTTP response codes outside of the 200..300 range?. So, the pattern we've been following this that instead of having two separate methods to build a Response object, the rescue instead will take care of pulling together the appropriate fields, namely the success, authorization, message, error_code etc. You can see how the gateway generator script automatically adds these methods to be used.\nhttps://github.com/activemerchant/active_merchant/blob/master/generators/gateway/templates/gateway.rb#L88-L114\nThe Digitz gateway is another example, although that gateway overrides the handle_response method. You don't need to do that to handle HTTP response codes outside of 200..300 but it's a pattern we often use.\nAll that goes to say, if we can consolidate the building of the Response object into a single place regardless of it being an error or not I think that would be good.. I think this syntax will error out? 'n/a', 'Version' => options[:application_version] both the comma after n/a and the 'Version' => options[...]. \nI guess that makes me wonder if we can just simplify it with:\noptions[:application] || '1.0\nUnless I'm missing something about the JetPay v2 API where we might need to send something related to that middle value.\n. I should note this goes for the line directly beneath this one as well.. Any particular reason to not have this be: %r((<CardNum>)\\d+(</CardNum>)?. @shasum I'm so sorry- I just realized that I forgot to add tick marks around my code and GitHub escaped the contents \ud83d\ude1e See my updated question!. @shasum ah I see. So really it's this-\nxml.tag! 'Application', (options[:application] || 'n/a'), ('Version' => options[:application_version] || '1.0'). @hossamhossny apologies on the tardy replies- lots going on these days. \nWePay and Pin have been in Active Merchant a while so they're not following more recent patterns. But, given that we're not as explicit about what we're looking for or conventions I'll let this one in as is. \nIf you wanna squash all your commits and rebase on master I can merge in.. So, I went back and forth on this one. On the one hand, I prefer to have them in methods if they're used more than once. But, on the other hand, I wondered if that was more confusing cause for purchase and authorize the field name is amount_total and it's added in the add_invoice method.\nThis felt a little more explicit to me to say that we're adding this exact amount field rather than having amounts being added in two different methods.. Yeah. Refunds require a description field. \u2639\ufe0f. @curiousepic I believe if you don't pass true to the MultiResponse.run it'll default to using the last response as the primary response?\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/response.rb#L44\nI think that would avoid setting it to a variable then pulling the last response.. I should also note, if you look in the Stripe adapter you'll see that it's just MultiResponse.run do |r| and since the initializer defaults to false, it'll use the last response.. Ahhh good eye. I suppose following that pattern wouldn't hurt.. I think it's ok. If the use_first_response isn't set to true, I think the default is that the last response becomes the primary response.. I wonder if we should add them here as defaults. Seems we know which ones are and if it needs to change at the gateway level it can be overridden? . Hmmm. \ud83e\udd14 That's a fair point I suppose.. Curious about the explicit check for :dollars- since we only have cents and dollars in Active Merchant, then single else seems ok?. I don't think it has a logical impact. I was just curious that maybe I was missing something. \nI think style wise I tend to say just use an else if there are only two options. Interestingly enough I would probably feel a little less clear since we call the money format \"dollars\" (which really just means \"with a decimal\") when the currency in question isn't actually called a \"dollar\".. Sorry, this is very much a nitpick... how would you feel about a method name of:\ncredit_fund_transfer_attribute(options)?. Are there other values for order_source that do not include 3DS related info? Just wondering if we need the additional options[:order_source].start_with?('3ds') conditional.. \ud83d\udd2a . \ud83d\udc4d . I gotcha. Thanks for the clarification!. @nfarve we'll actually want to keep this test even though TransFirst has a long delay between a purchase and the transaction fully settling. In the future someone could want to do a remote test for refund and just manually run a purchase and wait to run the refund test till the next day. Although we should have a remote void test so we should add that one while we're at it! I'm wondering why this never had a void test to begin with \ud83e\udd14  \nAlso, it could be good to add a partial refund remote test- for example EBANX- and this can follow the same test pattern as a full refund test where the \"tester\" just waits until the next day to exercise the test.. Well, this is where remote tests get tricky since we sort of have to work around how a gateway's sandbox is functioning. We should still test that it returns the right message, is successful, etc., but just know (or write a short comment to explain) that we need to wait for the transaction to settle which could take ~24 hours. It's unfortunate that the full remote test will never fully pass in one run but the test will still need to assert the response we want assuming the transaction was settled. \nI should note that other gateway remote tests don't necessarily always pass so this won't be a unique situation \ud83d\ude38 . @nfarve I know there are a couple places in Active Merchant where we currently use the .blank? method, but we're trying to slowly remove those/not continue using it since it's actually an Active Support extension and we'd like to remove our dependency on Active Support. It's current usage is a holdover from when Active Merchant was more tied to being used in a Rails application.\nThat being said, it's not well documented that we're no longer using that convention and instead going with something like:\ndoc[\"v1\"].addrLn2 billing_address[:address2] if billing_address[:address2]\nApologies on the poor documentation! We're not terribly clear about this in general and it's (unfortunately) become more tribal knowledge. Likewise, looking at the remote test we should probably change the options hash to instead have:\nruby\noptions[:shipping_address][:address2] = nil\noptions[:billing_address][:address2] = nil\nSince in general someone will probably not add those keys to a hash to begin with so accessing that key in the hash will just return a nil.. Just out of curiosity- do they list their API version as 7.1 but are expecting it sent as PTI71? Just wondering if we should set the API_VERSION = \"PTI71\" instead.. > But they do not refer to the schema version as PTI71... This way seems marginally more readable\nI figured as much, just thought I'd double check! I do think using the 7.1 as the API_VERSION is clearer for someone grok-ing the adapter so I'm ok with this. \n\nthough I suppose it's possible the gsub could break somehow...\n\nConsidering it's gsub-ing on a constant (well, as constant as constants get it Ruby...) I think the changes of it breaking are pretty close to zero!. Is zip expected to always be sent? Wondering if we should follow this same pattern?. Is address1 expected to always be sent? Wondering if we should follow this same pattern?. any particular reason to check for 'true' string vs boolean true?. Gotcha, so seems like you should really send the address1 and zip fields (even if they're empty) whereas the other address fields shouldn't be added to the XML if they are empty.. I guess the more I think about it, with Ruby we could just do:\nruby\nreturn unless (options[:verify_zip]) || (options[:verify_address])\nand it would work since the conditional is only checking absence of nil or false, in which case if it was true or \"true\" would both work.. Hmmm. Well that makes me think we should have guard clauses on them as well \ud83d\ude38 . @curiousepic if a value is sent, will it cause transactions to fail? Seems like we should send something along if we do have one.. > the docs say \"the ECI Indicator field can be left empty and the appropriate value is derived by the gateway.\"\nInteresting. Gateways seem all over the place when it comes to accepting eci. I'd still vote for including it since it's actually a standard field on a NetworkTokenizationCreditCard which still leaves the option for the value to be nil depending on how the NetworkTokenizationCreditCard was initialized. . I don't believe the additional && options[:billing_address][:country] is necessary on this guard clause since options[:billing_address][:country] will evaluate to nil as long as the :billing_address key exists.. Wondering if we should also check the billing address country for MX here?. Ditto to the above question when building the payer hash.. Also not sure if we need the additional && options[:shipping_address][:phone] in the guard clause here.. I'm curious about these country specific ones where we're adding the payment_country param to options- in the standard test_successful_purchase test above we don't add it to the options hash and it seems to be ok (assuming cause it's defaulting to \"AR\" give the changes here) so wondering what we're checking for each specific country and adding the payment_country field? Seems like if we didn't add it, then it would pass as well?. > Unfortunately either the sandbox isn't accurate, or the PaymentCountry field is not truly required\n\u2639\ufe0f \n\nSo this test is more checking that the (supposedly) required country-specific fields are added\n\nI gotcha. So, if that's the case wondering if it would be better for us to do the check_request method of ensuring we are adding that field to the request if it exists in the options has AND that it overrides what is in the billing address. Given the value doesn't seem to matter against the sandbox, we can probably \ud83d\udd2a each specific country and just ensure that we do send that field/it doesn't get accidentally removed. Basically, I feel dubious that changing out the country even gives us anymore confidence since it doesn't seem to be validated in sandbox?\n. > It's possible they could add actual checking to their sandbox, so I'm not sure the remote tests should be removed though.\nThat's fine. However I'm still not convinced that it gives us any more confidence.. weird.. I imagine if no ticketNumber is sent the sandbox would fail?. Seems like we check 2 places here for a phone number but on line 194 only under the shipping_address. Wondering if there's a reason for the discrepancy?. I think so. I also think I may not have full context given the purpose of these fields and how to properly formulate them.. Looking at the Payeezy docs, looks like the api_key is the same as the one we use in the initialize so we can reference it in the @options hash. Also, wondering if we should move the js_security_key to the initialize options since it's a credential? Not a required one, just set it's value there if it was passed in.. Payeezy docs make it seem like the ta_token, callback, and type fields are static? Correct me if I'm wrong \ud83d\ude2c If they are, then we can just hardcode those inline vs reference them in a hash.. +1 to using something other than .to_query purely from an Active Support dependency position.. Curious why the downcase? Usually country abbreviations are uppercase.. \ud83d\udc4d thanks for the explanation!. I wonder if we have other gateways that send a similar, \"check if the card is 3DS enabled\" field and we've defaulted in Active Merchant? Not sure, but could be worth a check to see if there's a more or less default field we use for this.. In the past we've coerced the type here to be something like-\noptions[:use_backup_url].to_s == \"true\" ? self.backup_url : self.live_url\nso we're a little more explicit about what we're expecting vs. \"false\" also causing this to trigger. Just a thought!. I agree, transaction_type is pretty generic. I looked up a couple of gateways docs and they all had a different term for this \ud83d\ude38The ones I saw were:\n\nreason\ntype\nsequence\nindicator\n\nOf those, I think the word reason is pretty good. As in, \"the reason for this transaction is a recurring monthly subscription\". Or going along those same lines the word purpose is another good synonym. \nI do think schedule still feels a bit vague since I would then assume it's a recurring transaction and the value would be something along the lines of \"monthly\".. > I wonder if it would be interpreted as a free form text field versus a using *_type as the field name that seems to imply a limited set of types.\n\ud83e\udd14 ya that's a good point.\n\nWhat values do we expect this field to hold?\n\nrecurring, unscheduled, installment. Maybe we can call it reason_type? \ud83d\ude38 . @jknipp my only hesitation with those terms is that they imply either that it is an ongoing thing- which it may not be- or that there is a set time frame between transactions.\nI think I'm going to go with reason_type which hopefully conveys the \"reason\" for a transaction (i.e. this transaction is happening cause it's a recurring transaction or this transaction is happening because a customer did a one off purchase on our website) with a _type suffix to imply there's a limited number of reasons.. ",
    "dinesh": "@davidsantoso got it. We finally supported synchronous api. Can be closed now.. ok, I guess I need to adjust more stuff.  You can reject this PR. thx\n. @timbeiko added now in description\n. ",
    "bacrossland": ":+1: \n. I would edit the title of this PR to better reflect that this change is for Authorize.net. Place \"Authorize.net:\" in front of your title.. This method currently accepts a Hash. Switching it to an ActiveMerchant::Billing::Check object will cause code that relies on this to break on an upgrade of the ActiveMerchant gem. My suggestion is that you modify the method to accept both the existing Hash and the new ActiveMerchant::Billing::Check object. If it's a Hash a Deprecation Warning is displayed that in a future release a Hash will no longer be accepted.. ",
    "jcavalieri": "Let me fork and look into it more.\n. The remote test does indeed work.\nI figured what is going on. It is the existence of option[:test] key when initializing the gateway. When it is set to false the gateway uses neither the test servers nor test requests. But setting option[:test] to true uses both the test servers and test requests.\nWhat works is setting the base mode to test and not even having a option[:test] key when initializing the gateway. This doesn't seem intuitive to me but I don't know if this counts as a an issue anymore.\n. At least for authorize.net there is a test request feature, where whether you are on their live servers or their test servers you can send a 'test' request and it sends you a bogus response. This is more intended for integrating with their live servers to verify the app is connected and they are receiving requests.\nIn order to test auth and capture the request can not be a test request.\nbase test = true, gateway option test = true, then test requests are sent to test servers\nbase test = true, gateway option test = false, then non-test requests are sent to live servers\nbase test = false, gateway option test = true, then test requests are sent to test servers\nbase test = false, gateway option test = false, then non-test requests are sent to live servers \nThis is the case that is different, and what I needed, and why the remote tests work:\nbase test = true, gateway option test key doesn't exists, then non-test requests are set to test servers\nIMO, the test option has been overloaded and used to determine both test servers and test requests. And a using test requests should be a totally separate option.\n. Oh yeah, that is exactly what I was thinking it should be. I'll craft a PR this week. Thanks for the help.\n. Sorry I didn't get to this last week. Looking at it now.\n. Hi @girasquid,\nI'm about to create a PR. What version should this be? 1.49.0 or 1.48.1?\nThanks,\nJohn\n. Ok, thanks.\n. Here's the pr:\nhttps://github.com/Shopify/active_merchant/pull/1648\n. Just following up. I see the PR is still out there. Are there any issues I need to address?\nhttps://github.com/Shopify/active_merchant/pull/1648\nThanks,\nJohn\n. Ok, no problem.\n. The test \"using_live_gateway_in_test_mode\" was the problem.\nWith Authorize.net You can send test requests to live servers. So \"test mode\" was overloaded and not sufficient and needed to be split out into the following:\n- \"Test mode\" means that you are using test servers.\n- \"Test Request\" means you send test requests whether it is live or test servers.\n. yeah, @cipater, I don't know what the hold up is. There seems to be confusion between test mode and test environments. My fix definitely addresses this and could save many people troubleshooting time.\n. I'm confused @duff , this doesn't mess with test mode, it only allows for test requests whether in test mode or live.\n. The over cautiousness is what caused the bug in the first place.\n. It is that it is using the live url instead of the test url.\n. Good recommendation, change made.\n. ",
    "hadronzoo": "CA issues can cause this error, as in this and this. Your CA bundle may be out of date, as activemerchant does not use your system's CA bundle.\n. ",
    "steakchaser": "Also ran into this issue today in production.  From what I can tell, Authorize.net did not upgrade the https://apitest.authorize.net/xml/v1/request.api endpoint (and, has still not).  Huge surprise for us.\nUsing Ruby 1.9.3-p448, OpenSSL 1.0.1f 6 Jan 2014 on Heroku.\nWhat is the official way to direct the gateway to use TLSv1?  \nIs it like what's outline here in this post?  I also see that some gateways (likeOgoneGateway) have added self.ssl_version = :TLSv1 themselves.  Help.\n. @ntalbott credit does not appear to support CIM.  \nWould you prefer a PR that updates credit to support CIM and ECC?  Or, a PR that just updates cim_refund to support ECC?\n. @ntalbott just to clarify cim_refund is actually in AuthorizeNetGateway (not the deprecated one).  The cim* methods are used if the action starts with \"cim\".  In refund for example: \ndef refund(amount, authorization, options={})\n        if auth_was_for_cim?(authorization)\n          cim_refund(amount, authorization, options)\n        else\n          normal_refund(amount, authorization, options)\n        end\n      end\n. @ntalbott Correct, ECC is unreferenced funds.  OK sounds good, I'll work on a PR soon.  Thanks.\n. ",
    "hackbac": "@steakchaser: patching ActiveMerchant::Connection.configure_ssl to comment out the hardcoded reference to the CA certificate worked for me. Without a valid ca_file or ca_path or cert_store, OpenSSL will default to its own certificate store.\n```\nmodule ActiveMerchant\n  class Connection\n    def configure_ssl(http)\n      return unless endpoint.scheme == \"https\"\n  http.use_ssl = true\n\n  if verify_peer\n    http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n    # Fix SSLv3 failure\n    # http.ca_file     = File.dirname(__FILE__) + '/../../certs/cacert.pem'\n  else\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n  end\nend\n\nend\nend\n```\n. ",
    "bgadoury": "We're definitely in a transition period right now and are aware of the delicate position we're in, but I totally agree. Thanks for the reply. \n. ",
    "danlewis": "I'm not sure exactly which commit it happened but you can see when I switch the following works\n1.47.0: \nruby\n2.2.1 :006 > ActiveMerchant::Billing::CreditCard.require_verification_value\n => true \n2.2.1 :007 > ActiveMerchant::Billing::CreditCard.new.require_verification_value\n => true\n1.48.0:\nruby\n2.2.1 :007 > ActiveMerchant::Billing::CreditCard.require_verification_value\n => true \n2.2.1 :008 > ActiveMerchant::Billing::CreditCard.new.require_verification_value\nNoMethodError: undefined method `require_verification_value' for #<ActiveMerchant::Billing::CreditCard:0x007fbee3ec3368>\n. ",
    "ericgross": "+1 Hitting this too after upgrading.\n. ",
    "amnwebmaster": "Any chance the instance method require_verification_value will be added back in?\n. ",
    "cipater": "bump \nI've been banging my head against the wall trying to figure out why Authorize.Net was telling me 'Using a live Authorize.net account in Test Mode is not permitted.' when that seems to be entirely the point of putting the account in Test Mode. \nTo my dismay, I've discovered that ActiveMerchant is the one generating this error, thus preventing me from testing a live account that's set to Test Mode. \nI fully understand the reasoning behind the default behavior. But with no alternative way around it, I'm left at a frustrating impasse. Any updates on if this PR will be merged?\n. ",
    "bradly-swart": "I guess no one looks at this repo anymore.\n. Cheers Nathaniel.\nStill not sure about getting these params usable in the options. I guess\nI'll fork and figure it out.\nBradly Swart\nSkype: bradly.swart\nTwitter: @brad8711 http://twitter.com/brad8711\nlinkedIn: http://linkedin.com/in/bradlyswart\nOn Tue, Apr 21, 2015 at 10:07 PM, Nathaniel Talbott \nnotifications@github.com wrote:\n\nClosed #1652 https://github.com/Shopify/active_merchant/issues/1652.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/issues/1652#event-286129626.\n. \n",
    "larrylv": "@ntalbott Since PostsData module will override ActiveModule::Connection's default open_timeout and read_timeout here https://github.com/Shopify/active_merchant/blob/df777e116704704a5eda7f6de76eebba637f3ae2/lib/active_merchant/posts_data.rb#L47-L48, I think the class_attribute setting in PostsData is not redundant.\nI mean, every time we try to issue a raw_ssl_request, we will create a new connection and then override the timeout variables with class_attribute value, so without the defaults they will be nil.\nWhat do you think?\n. @ntalbott Sorry to ping you, but do you think my reply reasonable?\n. @artlugovoy Could you please provide more details or a re-produce script? Because from the codes of validate_essential_attributes method, it will always return an array.\n. @artlugovoy Thanks for the reproduce codes, but I run it and the error didn't occur.\nbash\n\u279c  ~/Code/Hacks/active_merchant ruby:(1.9.3-p551)\n$ git co v1.48.0\n$ git log --oneline -1\n3120ee2 Version 1.48.0\n\u279c  ~/Code/Hacks/active_merchant ruby:(1.9.3-p551)\n$ pry\n[1] pry(main)> $:.unshift \"./lib\"\n[2] pry(main)> require 'active_merchant'\n=> true\n[3] pry(main)> ActiveMerchant::VERSION\n=> \"1.48.0\"\n[4] pry(main)> credit_card = ActiveMerchant::Billing::CreditCard.new(\n[4] pry(main)*   number: '4111111111111111',\n[4] pry(main)*   month: 12,\n[4] pry(main)*   year: 18,\n[4] pry(main)*   first_name: 'Test',\n[4] pry(main)*   last_name: 'User',\n[4] pry(main)*   verification_value: '123'\n[4] pry(main)* )\n=> #<ActiveMerchant::Billing::CreditCard:0x007fe9d0a2ac30 @first_name=\"Test\", @last_name=\"User\", @month=12, @number=\"4111111111111111\", @verification_value=\"123\", @year=18>\n[5] pry(main)> credit_card.validate\n=> {:year=>[\"expired\"]}\nThe only difference is I used 1.9.3-p551, but I don't think it is relevant.\nCould you confirm that you are using 1.48.0 version? You may output it with puts ActiveMerchant::VERSION.\nThanks.\n. @artlugovoy And if I change the year from 18 to 2018, credit_card.validate got an empty hash which means no errors.\n. Huh? That's weird. But glad you solved that problem.\n. @artlugovoy I think that's related with your activesupport version, but nothing to do with ruby version. Feel free to talk with me if you want to dig into this. Email should be fine. :-)\n. ",
    "x2q": "+1\n. Any ETA on this?\n. +1\n. ",
    "ct-clearhaus": ":tada: soon?\n. ",
    "soltveit": "+1\n. ",
    "AlonsoGonzale": "Is there any news, our Shopify shop only missing this to proceed. Please fix soon! :-)\n. Waiting for this update to be released by QuickPay, our shop only need this! :+1: \n. ",
    "UgoMare": "@ta There is a branch where I can test to integrate the v10 implementation ? And is the 3ds working with active merchant ?\n. ",
    "tojepil": "any news on this one?\n. @andrewdunbar please let us know where to ship all the beers to, if \"soon\" is defined as \"soon\" :)\n. ",
    "GonzoDK": "Who are we waiting for? SHOPIFY or QUICKPAY? Does it take 4 months to make these fixes? :-)\nTime is money...\n. ",
    "stentebjerg": "ETA?\n. Any news?\n. Hi @ta. Just activated the v10 platform on the shop, but I can't see the Mobilepay anywhere and it's activated in QuickPay. Do I need to do anything else?\n. ",
    "trevorgrayson": "Thanks Nathaniel. Will review\nOn Wed, Apr 22, 2015 at 4:43 PM, Nathaniel Talbott <notifications@github.com\n\nwrote:\nThis is looking pretty solid - see inline comments.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1660#issuecomment-95368393\n.\n. I completely missed that they had their own verify implementation.  Good work keeping me honest.  Thanks for maintaining ActiveMerchant.  Great repo.  Real pleasure to work in.\n. \n",
    "lafeber": ":+1: \n. ",
    "kurtfunai": ":clap: :+1: \n. ",
    "zdk": "cc @fred \n. @ntalbott Thanks, we'll change regarding the review.\n. @ntalbott anything you would like to add more?\nI'll check for your feedback tomorrow. \n( Bangkok time :smile: )\nThanks!\n. @girasquid Thanks for your feedback! \nI just making the change accordingly your comments. Hope this looks sane. :octocat: \n. @ntalbott here they are.\nThanks! :dancers: \n. @girasquid  just pushed the change regarding error codes, so now there are more standard error codes. Thanks!\n. you're welcome, here is a squash @girasquid.\n@ntalbott how do you feel now? :smile: \n. @ntalbott Have you had any chance to review this one?  Is it in ActiveMerchant standard/expectation now or need some more change? We're looking forward to have this merged.\nThanks!\n. cc @girasquid \n. @ntalbott that's also nice idea, to have a known-good state. I'll change it, so it will have a default version.\n. Hi guys,\nDoes everything look OK now?\n. @girasquid Awesome, thanks!\n. Hi! @jasonwebster \nThanks for reviewing this PR. I have just splitted out on its own.\nIf you could check it out again?\nThank you very much!. Hi @jasonwebster\nAlso, there is an update (https://github.com/activemerchant/active_merchant/pull/2328/commits/8b4d5fddeae1c15a53bc3b1c13cbf9e6b3b46c25) in README.md file regarding the new country added.. @ntalbott  Thanks for the clarification! :+1: \n. The way we save the card is attaching to a customer like so:\ncurl https://vault.omise.co/tokens \\\n  -X POST \\\n  -u pkey_test_4zt0fss8gs0z6b4zlsq: \\\n  -d \"card[name]=JOHN DOE\" \\\n  -d \"card[city]=Bangkok\" \\\n  -d \"card[postal_code]=10320\" \\\n  -d \"card[number]=4242424242424242\" \\\n  -d \"card[expiration_month]=4\" \\\n  -d \"card[expiration_year]=2017\"\ncurl https://api.omise.co/customers \\\n  -X POST \\\n  -u skey_test_4zt0fss8eklsj88dx9l: \\\n  -d \"description=John Doe (id: 30)\" \\\n  -d \"email=john.doe@example.com\" \\\n  -d \"card=token_id\"\nand return customer json representation (https://docs.omise.co/api/customers/)\nsimilar to https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/stripe.rb#L173\nIs this ok to support as a store method?\n. @ntalbott haha, great thanks for the explanation! :+1:  I'll fix for the omise :D\n. atm, this is the only code I could map the code directly to ActiveMerchant's standard error codes.\nunless it needed to parse a message. for example:\n{\n  \"object\": \"error\",\n  \"location\": \"https://docs.omise.co/api/errors#invalid-card\",\n  \"code\": \"invalid_card\",\n  \"message\": \"number is invalid and brand not supported (unknown)\"\n}\nor\n{\n  \"object\": \"error\",\n  \"location\": \"https://docs.omise.co/api/errors#invalid-card\",\n  \"code\": \"invalid_card\",\n  \"message\": \"expiration date cannot be in the past\"\n}\nI'm uncertain about parsing a message, is it good idea to do so? or no need to parse?\n@girasquid  what do you think?\n. The Omise api expects Omise-Version header only when user explicitly set this header.\nSo, when this doesn't get sent, Omise users expect the api version that has been set in their dashboard ( the setting in their account ).\n. I think that's a good option too, if so, I may have to write something like this.\ndef headers(options={})\n   key = options[:key] || @secret_key\n   h = {\n     'Content-Type'    => 'application/json;utf-8',\n     'User-Agent'      => \"ActiveMerchantBindings/#{ActiveMerchant::VERSION} Ruby/#{RUBY_VERSION}\",\n     'Authorization'   => 'Basic ' + Base64.encode64(key.to_s + ':').strip,\n     'Accept-Encoding' => 'utf-8'\n   }\n   h['Omise-Version'] = @api_version if @api_version\n   h\n end\nDoes this look ok?\n. Ok, thanks. I just made the fix. \nLet me know if you want me to squash.\n. ",
    "fred": "Thanks for the comments @ntalbott \nRegarding capture , in this case it's auto capture unless specified otherwise. Should we add a test to only authorize and not capture?\nok, we will under-factor it a  bit :) \n. Thanks guys for the helpful comments, we are very excited to contribute and have our awesome gateway supported in ActiveMerchant. \nWe have many Shopify customers in Thailand requesting our gateway support. The lack of a proper gateway here has put back many merchants from using Shopify.\nWe will send a request to Shopify to have our gateway supported, so, is there any changes needed that we can contribute before sending a request?\nThanks for the great support.\nCheers.\n. Guys, we did some major cleanup. looking good?\n@ntalbott @girasquid , do you guys need a squash? \nlet us know!\ncheers.\n. @girasquid @ntalbott do you guys have any updates for this PR? we're eager to move forward.\nCheers.\n. @girasquid Thank you!\n. No worry, Thanks.\n. @ntalbott no, it's a 4 letter identifier part of our UID strings.\n. yep, that's should be fixed.\n. will do\n. ok, let's remove this.\n. @ntalbott currently the settlement time is very short in the bank here, so can't do a void most of the time. Thus we dont expose an external API for void.\nFor now it must be implemented this way. but we will improve soon when we have access to more banks.\n. will fix this :+1: \n. ",
    "robinclart": ":+1: \n. Void is used by some banks to refer to the cancelling of a capture before settlement. The bank we're using calls it \"reverse\" to cancel an authorization.\nBut anyhow we currently don't support either of them because of the added complexity this feature added to our charge object representation. Furthermore since the issuing bank will reverse the auth by themselves after some time we decided to go without those.\n. ",
    "jun-omise": "Awesome! :+1: \n. ",
    "artlugovoy": "@larrylv I'm using ruby 1.9.3-p327 and the code is:\n``` ruby\ncredit_card = ActiveMerchant::Billing::CreditCard.new(\n    number: '4111111111111111',\n    month: 12,\n    year: 18,\n    first_name: 'Test',\n    last_name: 'User',\n    verification_value: '123'\n  )\ncredit_card.validate # it causes the error\n```\nOf course the code seems okay, but in fact I have the error described above\n.  @larrylv I'm sorry, it returns correct hash with errors if I specify expiration year like this \"18\" but it fails when I set the year to \"2018\"\nruby\n[8] pry(main)> ActiveMerchant::VERSION\n=> \"1.48.0\"\n[9] pry(main)> credit_card = ActiveMerchant::Billing::CreditCard.new(\n[9] pry(main)*       number: '4111111111111111',\n[9] pry(main)*       month: 12,\n[9] pry(main)*       year: 18,\n[9] pry(main)*       first_name: 'Test',\n[9] pry(main)*       last_name: 'User',\n[9] pry(main)*       verification_value: '123'\n[9] pry(main)*     )\n=> #<ActiveMerchant::Billing::CreditCard:0x000000099d8178\n @first_name=\"Test\",\n @last_name=\"User\",\n @month=12,\n @number=\"4111111111111111\",\n @verification_value=\"123\",\n @year=18>\n[10] pry(main)> credit_card.validate\n/home/arthur/.rvm/gems/ruby-1.9.3-p327@backoffice/gems/activemerchant-1.48.0/lib/active_merchant/billing/compatibility.rb:11:in `errors': Implicit inclusion of Rails-specific functionality is deprecated. Explicitly require \"active_merchant/billing/rails\" if you need it.\n/home/arthur/.rvm/gems/ruby-1.9.3-p327@backoffice/gems/activemerchant-1.48.0/lib/active_merchant/billing/compatibility.rb:11:in `errors': Implicit inclusion of Rails-specific functionality is deprecated. Explicitly require \"active_merchant/billing/rails\" if you need it.\n=> {\"expired\"=>[nil], \"is not a valid year\"=>[nil]}\n[11] pry(main)> credit_card.year = 2018 \n=> 2018\n[12] pry(main)> credit_card.validate\nNoMethodError: undefined method `+' for nil:NilClass\nfrom /home/arthur/.rvm/gems/ruby-1.9.3-p327@backoffice/gems/activemerchant-1.48.0/lib/active_merchant/billing/credit_card.rb:236:in `validate'\n. @larrylv  I've created application from scratch using 1.9.3-p551 and everything works well!  It' works correct with 1.9.3-p327 in the application started from scratch. The problem is inside my particular application. \nSorry and thanks for support. \n. ",
    "tjstankus": "@duff please review :)\n. Ping @duff \n. All good, @duff, thanks for merging!\n. On hold until store is implemented.\n. Closing. Will open a new PR when store is implemented and token support is added to purchase and authorize.\n. The one caveat with handling the response nodes like that is there's one duplicate node name. A simplified example:\nxml\n<ProcessPaymentResult>\n  <ResponseCode>string</ResponseCode>\n</ProcessPaymentResult>\n<response>\n  <ResponseCode>string</ResponseCode>\n</response>\nSo, both <response> and <ProcessPaymentResult> have <ResponseCode> nodes. This could be handled by using hash keys built from two node names, e.g. response_response_code, but that looks kinda gross. Are there any objections to using a nested hash, e.g.:\nruby\n{ process_payment_result: { response_code: 'abc' }, response: { response_code: '123' } }\n. On an unrelated note, interesting that the Travis build would fail on a Stripe-related error for this PR.\n. @duff Ping ^^ - sorry forgot to @ you in previous comments\n. @duff refactored response parsing logic now in place\n. Removed transaction_id from options per conversation with @duff \n. @duff Agreed, this is confusing. So is the other iATS PR I just submitted. I'll follow up with iATS support on this one.\n. Investigating whether #1743 affects response data, which would affect this issue as well.\n. Taking a wait-and-see approach to this issue. It only surfaced twice in quick succession and hasn't surfaced since. Closing this PR.\n. Magically, remote tests for iATS Payments gateway on master are now working. So, it appears to have been a temporary issue with that gateway requiring recurring schedule data. Grumbling, then closing this PR.\n. @duff Agreed that setting instance vars in the parse method is side-effect'y and not\nideal. Ideally, I'd simply add the CVV and AVS response parsing to the existing\nparse code. However, the ParameterValidationResultList that needs to be parsed\nto get the CVV and AVS results is more deeply nested than the current xml\nparsing code takes into consideration. Adding it would involve rewriting the\nparsing code or injecting new behavior via nested conditionals; both approaches\nseem error-prone and undesirable. \nSo, I chose to split the CVV and AVS result parsing out separately into code\nthat's not dependent on nodes being only 2 deep. Of course the XML data is\nrequired to parse it and the parse method has that data. But, it's pretty\nsimple to cache that data in a local variable and pass that to a new method that\nreturns the validation results - so that's what I did. :)\nDoes this approach seem preferable to you?\n. @duff Remote CenPOS tests are all passing for me both before and after rebasing with latest master. Perhaps it's a credentials issue? I'll send the creds I'm using separately.\n```\ntjsmbp13:active_merchant tjs$ ruby -Itest test/remote/gateways/remote_cenpos_test.rb\nLoaded suite test/remote/gateways/remote_cenpos_test\nStarted\n......................\nFinished in 34.65837 seconds.\n22 tests, 55 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n```\n. ",
    "AnotherJoSmith": "I'll be adding a similar check to Authorization.net, but those are the only two that I was told about.\n. I added a property to CreditCard instead of checking for :manual_entry in options. Let me know if this is alright.\n. Just waiting for final review on this before I merge\n. Looks good :monorail: \n. I don't have merge access, so whenever you can do it! \n. Thanks Tim!\n. Hey @shasum, no worries!\nQuebecistan has been used in the past as a derogatory expression towards muslims in Quebec, but it's not the most known term for sure.\nsee https://en.wikipedia.org/wiki/Barbara_Kay_controversy for more information.. @bdewater Probably worth a changelog entry. @malcolm-mergulhao Mind adding a changelog entry?. @aengusbates Looks good! Would you mind changing the test here: https://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/beanstream_test.rb#L216\nThanks!. @elfassy I did run the remote tests and they're all green. . As a side comment the whole CommStub class seems to be pretty bad. I think we should eventually get rid of it and use something like WebMock instead.. @nfarve Do you have a link to any documentation to shows why this change is necessary? Also would've been nice to test that the authorization is successfully voided afterwards.. Will add one\n. True, will remove this\n. Hmmm they pass but I guess that is because the manual_entry parameter is optional. Since credit card is two words should I refactor the test to use @credit_card?\n. @creditcard is used 31 times in the test directory vs 2893 times for @credit_card so i think I will change it. \n. Could be nil though\n. Not really, I can remove it\n. done! :+1: \n. Why do you need to delete the metadata from the options map here?\n. For future reviewers, this is the only new line. The others were just sorted.. \ud83d\udc4d . @elfassy No, it only needs to be in add_payment. ",
    "geermc4": "Sample response\nGateway Error\n  --- !ruby/object:ActiveMerchant::Billing::Response\nparams:\n  merchantReferenceCode: R702235851-PXF42W8W\n  requestID: 'xxxxxx'\n  decision: REVIEW\n  reasonCode: '100'\n  requestToken: Ahj/7wSR08shoErvpMIWICnDBmzYs2jZwzUXYSZ+ysAqLsJM/ZW0gPwUDF4NJMt0gPJXbg2kdPLIaBK76TCFgAAAQxY2\n  currency: USD\n  amount: '1.12'\n  authorizationCode: '152587'\n  avsCode: Y\n  avsCodeRaw: YYY\n  cvCode: M\n  cvCodeRaw: M\n  authorizedDateTime: '2015-05-12T20:42:11Z'\n  processorResponse: A\n  reconciliationID: '8033134683'\n  afsResult: '25'\n  hostSeverity: '1'\n  consumerLocalTime: '13:42:11'\n  afsFactorCode: R^V\n  suspiciousInfoCode: RISK-TB\n  scoreModelUsed: default\n  binCountry: us\n  cardAccountType: Classic\n  cardScheme: Visa Debit\n  cardIssuer: BANK OF AMERICA, N.A.\n  casePriority: '3'\n  activeProfileReply: \nmessage: Successful transaction\nsuccess: false\ntest: false\nauthorization: \nfraud_review: \nerror_code: \navs_result:\n  code: Y\n  message: Street address and 5-digit postal code match.\n  street_match: Y\n  postal_match: Y\ncvv_result:\n  code: M\n  message: CVV matches\nInteresting bits...\ndecision: REVIEW\nreasonCode: '100'    <---- 100 is Successful transaction\n...\nmessage: Successful transaction\nsuccess: false\n. And the rest stays the same? success: ?\n. Kind of a late response, but back to this again, however, I need to make a few changes to it, just ran into this :decision=>\"REJECT\", :reasonCode=>\"100\" so this PR as is doesn't really work. Decision Manager rejects, but the reason code says \"success\".... because CyberSource\n. @ntalbott @girasquid either of you have any ideas on how to handle this?\nI changed my previous commit to the following...\ndef success?(response)\n-        response[:decision] == \"ACCEPT\" || response[:reasonCode] == '100'\n+        accepted?(response) || fraud_review?(response)\n+      end\n+\n+      def accepted?(response)\n+        response[:decision] == \"ACCEPT\"\n       end\nThis now does the right thing, however, the reason code from CyberSource is still 100 and so the \"error\" I get when the transaction fails is Successful transaction\nThis is part of the ActiveMerchant::Billing::Response .... @message=\"Successful transaction\", @success=false\nCyberSource is broken with it's reason code, but we cant fix that, so what would be a good way to address this?\n. @ntalbott yes, It fails the transaction with a reason of \"Successful transaction\", kind of confusing :)\nJust got off the phone with CyberSource's support and they will look into why their API returns a 100 for this transaction.\nAs to failing fraud review, with this (once it's working properly), the response will be review if you have Decision Manager running, so why fail them? I would assume that people who turn it on would know to check right?\n. @ntalbott Still think it's kind of weird to strip out features for those that do want them. Decision manager wasn't on by default for us, someone had to set it up.\nAnyways, incase you dont remove the feature :)...\nTook a look at the unparsed XML comming from CyberSource, and it seems that the parsing of that XML is incorrect\nxml\n<soap:Envelope>\n  <soap:Header>\n    <wsse:Security>\n      <wsu:Timestamp wsu:Id=\"Timestamp-1069448404\">\n        <wsu:Created>2015-06-25T18:00:11.161Z</wsu:Created>\n      </wsu:Timestamp>\n    </wsse:Security>\n  </soap:Header>\n  <soap:Body>\n    <c:replyMessage>\n      <c:merchantReferenceCode>R908752766-P7X28EIZ</c:merchantReferenceCode>\n      <c:requestID>4352552107335000001514</c:requestID>\n      <c:decision>REJECT</c:decision>\n      <c:reasonCode>481</c:reasonCode>\n      <c:requestToken>Ahj/7wSR1+eW0Z+hIBfUakGLBwyas2LeZCa2Z7CZKT98GaQyQBT98GaQyTSCFZYKHC8OkmW6QHkrtwJyOvzy2jP0JAL6gAAAwf/o</c:requestToken>\n      <c:purchaseTotals>\n        <c:currency>USD</c:currency>\n      </c:purchaseTotals>\n      <c:ccAuthReply>\n        <c:reasonCode>100</c:reasonCode>\n        <c:amount>442.08</c:amount>\n        <c:authorizationCode>888888</c:authorizationCode>\n        <c:avsCode>X</c:avsCode>\n        <c:avsCodeRaw>I1</c:avsCodeRaw>\n        <c:cvCode>M</c:cvCode>\n        <c:cvCodeRaw>M</c:cvCodeRaw>\n        <c:authorizedDateTime>2015-06-25T18:00:11Z</c:authorizedDateTime>\n        <c:processorResponse>100</c:processorResponse>\n        <c:reconciliationID>10825317LB5YO0LJ</c:reconciliationID>\n      </c:ccAuthReply>\n      <c:afsReply>\n        <c:reasonCode>100</c:reasonCode>\n        <c:afsResult>0</c:afsResult>\n        <c:hostSeverity>1</c:hostSeverity>\n        <c:consumerLocalTime>11:00:10</c:consumerLocalTime>\n        <c:scoreModelUsed>default</c:scoreModelUsed>\n        <c:binCountry>us</c:binCountry>\n        <c:cardScheme>Visa Credit</c:cardScheme>\n        <c:cardIssuer>JPMORGAN CHASE BANK,N.A.</c:cardIssuer>\n      </c:afsReply>\n      <c:decisionReply>\n        <c:casePriority>3</c:casePriority>\n        <c:activeProfileReply/>\n      </c:decisionReply>\n    </c:replyMessage>\n  </soap:Body>\n</soap:Envelope>\nSo there is a REJECT with a reasonCode of 481 ( The order has been rejected by Decision Manager )\nBut there's also a Successful transaction within the authorization of the card, which according to CyberSource, happens before Decision manager kicks in. So the issue here is really to go and post back to CyberSource to void that authorization then right? Even if you do reject all Decision Manager review/reject, the auth stays there I believe.\n. @ntalbott :+1: we are on the same page. Yes I agree with the way you outlined the flags.\nOn the void topic. The problem is not with review, and yes, up to them if it's up for review, but the current problem I see is that if Decision Manager has rules to Reject certain transactions, succeeded will be false, fraud_review would be false, but the Auth could have gone through, and... it stays there.\nThe XML I pasted above shows exactly that actually...\n<c:decision>REJECT</c:decision>\n....\n<c:ccAuthReply>\n<c:reasonCode>100</c:reasonCode>\nAttached is not the same transaction, but the same case, I had to manually go in and do the Authorization Reversal\n\n. \"Eventually\" is like a month though, I dont know about you but a hold on my card for a significant amount of money is no good, like, from the customers perspective\n. Ah yes, some new stuff was added to the fork, I'll send a clean one when I get a chance\n. ",
    "zaakpay": "That was a mistake. Added those lines back. \n. ",
    "tahb": "I've been using this in production for a few weeks now and this change has made a massive difference in the resilience of our payments.\nWhen Ogone takes too long, it now responds with an incomplete response (e.g. 92) and ensures the rest of the request executes timeout free.\nHoping we can get this accepted now. Thoughts?\n. @girasquid Added these now, and some more thorough request specs that didn't exist beforehand!\n. @ntalbott Ah yes, I have another feature branch ready to PR which has these refactorings as a dependency. \nYou can see it here: https://github.com/tomhipkin/active_merchant/commit/9f7180188363382d80fd15738738fd5ce67c7126\nOn reflection, this would probably have been preferable as one PR, but at the time I felt it was safer to separate the two.\n. @ntalbott @girasquid is there anything further I can do to progress this change?\n. @bpollack This was a very long time ago, so long that we no longer use ActiveMerchant :( \nAt the time this was a preemptive bump that we started using it before they made v1.2 mandatory to ensure everything would remain functional. Our confidence with EPDQ was very low.\nI would assume you are correct since this change was meant to happen 1.5 years ago and there hasn't been any fix made after the fact that I can see.\nClosing \ud83d\udc4b . ",
    "ryanbalsdon": "lgtm\n. :pager: @bizla :pizza::question: \n. :grapes: \n. I think this is ready to ship. Thoughts? @bizla @abecevello @girasquid \n. Added the constants and squashed to a single commit.\n. I did a merge about 3 hours ago:\n$ git push origin master\nCounting objects: 12, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (12/12), 1.41 KiB | 0 bytes/s, done.\nTotal 12 (delta 11), reused 0 (delta 0)\nTo git@github.com:activemerchant/active_merchant.git\n   ca6aa89..033f2fc  master -> master\nThis wasn't caused by that, was it?\n. This is my local copy of master:\n033f2fc83178c35ec7a580f42cd44cd60e69df8f\nca6aa899fea89257a0cbdfaef93ef01e064c80c3\nc3d030b971ded203c9df6373a263b38488d8aa22\nc8cdfc8be1c325ec165e9e482c51cb891a41ab83\n0ecbd0bbc16ccf86eafa60c5627e9dfa15c7aaeb\n9231e0d5af01f78ee89db9e5ea69df4c2a05bb78\nf2a7ea3ed298038529acce7552b733ade8f3bc90\n8b10b2b046b8cc9d7cb20b0568a6b53ea090e884\nso it's just that one patch (033f2fc) that's missing\n. ok, force pushing now\n. Tagging @girasquid @aprofeit and @rwdaigle as per pre-merge instructions.\n. There are currently 5 different possible sources for a credit card:\n- Manual/Web Entry\n- Swipe/Magstripe\n- Chip/EMV\n- Contactless (using EMV data)\n- Contactless (using Magstripe data)\nWe know that the data is:\n- Swipe by looking for non-nil track data on the credit card.\n- Chip by looking for non-nil EMV data on the credit card.\n- Contactless by looking for non-nil EMV data on the credit card and a contactless flag set.\nThis patch adds support for knowing that the card was read from a contactless/magstripe interface by splitting the contactless flag into contactless_emv and contactless_magstripe. This turns the above list into:\nWe know that the credit card is:\n- Swipe by looking for non-nil track data on the credit card.\n- Chip by looking for non-nil EMV data on the credit card.\n- Contactless EMV by looking for non-nil EMV data on the credit card and a contactless_emv flag set.\n- Contactless Magstripe by looking for non-nil EMV data on the credit card and a contactless_magstripe flag set.\n@rwdaigle does that help a bit more with context?\n. I'm having trouble finding the official announcement on the web.\nHere are a couple credible-looking blogs though:\nhttps://www.linkedin.com/pulse/mastercards-new-2-bin-scott-tivey\nhttps://www.forte.net/blog/mastercard-bin-range-coming/\n. @aprofeit: I expanded on the test to try every single possible bin because the regex is a bit too ridiculous to trust. It adds about 1.1s (on my machine) to the test suite but did find a bug so is probably worth keeping.\n. You did purchase and authorize but no sale test?\n. :+1:\n. Same here. :shipit: \n. \ud83d\udea2 \n. The breaking change here is in credit_card.rb. Before, we had fallback_reason with two valid states and two contactless bools contactless_emv and contactless_magstripe. This patch needed to add another bool to that list called quickchip. The thing that bothered me about that was all these things are mutually exclusive. Setting both contactless flags for example is an error. You can't fallback to a quickchip transaction, etc.. Looks like I messed up the commit message and this didn't auto-close, sorry!. Can you add a line to the changelog, too? https://github.com/activemerchant/active_merchant/blob/master/CHANGELOG. There should probably be an assert in here.\n. Also here, missing assert.\n. It is an index. The table just isn't stored in memory and that was the big innovation of DUKPT.\n. KSN has 3 parts: BDK ID, Reader Serial Number and Key ID.\nIt's the Reader that encrypting the PIN, not the Card.\nencrypted_pin_key_id is the terminology used by Stripe so I assume it's what First Data is calling it too.\n. #try is a Rails thing? It makes tests fail.\n. The majority of these are going to fail Luhn already so it can't be important. I didn't put any thought into which number to use so just pasted in the one from the certification test. I'll change it to all-ones.\n. I'm considering registering wonderfullyfakedomain.com just to mess with this...\nJust to confirm, it will not send an email, right?\n. Optional: I think this would read a bit easier now as:\nif emv_payment?(payment)\n  add_statement_address(post, options)\nelse\n  add_amount(post, money, options, true)\n  add_customer_data(post, options)\n  post[:description] = options[:description]\n  post[:statement_descriptor] = options[:statement_description]\n  post[:receipt_email] = options[:receipt_email] if options[:receipt_email]\n  add_customer(post, payment, options)\n  add_flags(post, options)\nend. You aren't checking for presence of address2 up above. Would setting this to nil affect the serialization at all?. The read_method param is only used for contactless payments.. It will get captured automatically but you're right, this test doesn't match how we use the gateways. I'll fix it.. read_method only gets set for contactless!. ",
    "davidseal": "@bizla @ryanbalsdon - Added some tests. Unit tests pass, remote tests will break right now.\n. LGTM \ud83d\udcaf \n. Thank you! \ud83c\udf89 . Cool - will do\n. +1, I think using ksn would be more clear.\n. ",
    "mrezentes": "I felt the same way.\n. PR is updated with device and developer id as Jetpay has instructed.  Still waiting on test scripts from Jetpay.\n. @duff, looks like there are multiple ways to do this.  I went with user_data because they specifically mention adding key value pairs to user data.  It is one of the 3 options presented in the HS thread and the gateway documentation.  We will definitely need them to confirm it is getting to its destination.\n. @rwdaigle  Rebased.  No more warnings.  Added test to show backwards compatibility.\n. The transresult field doesn't exist in responses to eChecks.  Whereas result is listed\nin their docs and everything points to it being included in every response.\n. Yes.  The capture uses the session id of the auth.\n. @rwdaigle added test for backwards compatibility\n. ",
    "walkertexascoder": "@bvandenbos :eyes: please. \n. ",
    "dontmatta": "Sorry, double clicked.  Let me close this and fix the issues.\n. ",
    "seraphimlord": "Could it be that your quantity \"1\" is set as string value? You should assign your quantity as integer.\nFyi, set your ip to request.remote_ip instead. It will help you alot. \n. ",
    "qcam": "Thanks @seraphimlord for your comment. I don't think \"1\" will cause the problem because when activemerchant makes request to PayPalAPI over HTTP, every data in the query will be a string.\nAfter days of debugging and google-ing around, I eventually found the problem. On production environment, you need to specify tax, shipping cost and handling fee amount in order to make PayPal API work, even if you don't charge them.\nAfter specified those information, it worked like a charm.\nruby\nresponse = EXPRESS_GATEWAY.setup_purchase \\\n      @package.price_cents,\n      ip: '192.168.1.1',\n      return_url: return_url,\n      cancel_return_url: cancel_url,\n      currency: 'USD',\n      allow_guest_checkout: true,\n      shipping: 0,\n      tax: 0,\n      handling: 0,\n      items: [\n        {\n          name: @package.name,\n          description: @package.name,\n          quantity: \"1\", \n          amount: @package.price_cents\n        }\n      ]\n. ",
    "masaruhoshi": "np! :ok_hand: \n. @girasquid , @aprofeit , @j-mutter , any more comments ?\n. Good job, @duff. :tanabata_tree: \n. That's actually a good point.\n. That regex covers basically '&', '<', '>', double quote and apostrophe. Any other html entity (such as \u00e3 \u00e7 etc) will have wrongfully converted their '&' with '&'.\nwww.debuggex.com is a really option to understand complex regex.\n. You can remove the external parenthesis \n. Remove the external parenthesis \n. The outside parenthesis (sorry for being annoying :smile: ) \n. So we just create a random customer id if none is provided?\n. This make you wonder if you're seeing in double. Or triple.\n. change it to\ntransaction_id, _ = split_authorization(authorization)\n. Why did you stop getting the transaction_id at the beginning of the method?\n. You should get this transaction_id before building the xml, as you did on cim_refund and the other methods.\n. You don't need the parenthesis here.\n. Remove external parenthesis.\n. What about this:\nelement = doc.at_xpath(\"//messages/resultCode\")\nresponse[:result_code] = element.content if element && !empty(element.content)\n. Good point.\n. Thanks for the heads up, @ntalbott. :+1: \nI mentioned the parenthesis as they're not mandatory in ruby and to be consistent with the other places he's using ifs.\n. Is it OK if we have constants for those?\n. ",
    "rakvium": "Thank you for the fast feedback :construction_worker:\n. ",
    "ashutosh413": "activemerchant_mode: test\nauthorize_net_login: 5qD4tG9Y\nauthorize_net_password: 5eZ8h4V4gKHgJ78p\nActiveMerchant::Billing::Base.mode = ENV['activemerchant_mode'].to_sym\nGATEWAY = ActiveMerchant::Billing::AuthorizeNetCimGateway.new(:login => ENV['authorize_net_login'], :password => ENV['authorize_net_password'])\n######TRANSACTION\namount= 210\ntransaction_options = { transaction: { type: :auth_capture, amount: amount, customer_profile_id: customer_profile_id, customer_payment_profile_id: customer_payment_profile_id }}\ntransaction_response = GATEWAY.create_customer_profile_transaction(transaction_options)\n\n##############RESPONSE\n<ActiveMerchant::Billing::Response:0xe6cadd @fraud_review=nil, @message=\"Successful.\", @authorization=\"0\", @test=true, @params={\"messages\"=\n\n{\"result_code\"=>\"Ok\", \"message\"=>{\"code\"=>\"I00001\", \"text\"=>\"Successful.\"}}, \"direct_response\"=>{\"raw\"=>\"1,1,1,(TESTMODE) This transaction has been approved.,000000,P,0,,,210.00,CC,auth_capture,,,,,,\n,,,,,,atiflarz@gmail.com,,,,,,,,,,,,,,BFA7A766AA8EB0FC01820372358119FE,,,,,,,,,,,,,XXXX4444,MasterCard,,,,,,,,,,,,,,,,\", \"response_code\"=>\"1\", \"response_subcode\"=>\"1\", \"response_reason_code\"=>\"1\", \"me\nssage\"=>\"(TESTMODE) This transaction has been approved.\", \"approval_code\"=>\"000000\", \"avs_response\"=>\"P\", \"transaction_id\"=>\"0\", \"invoice_number\"=>\"\", \"order_description\"=>\"\", \"amount\"=>\"210.00\", \"met\nhod\"=>\"CC\", \"transaction_type\"=>\"auth_capture\", \"customer_id\"=>\"\", \"first_name\"=>\"\", \"last_name\"=>\"\", \"company\"=>\"\", \"address\"=>\"\", \"city\"=>\"\", \"state\"=>\"\", \"zip_code\"=>\"\", \"country\"=>\"\", \"phone\"=>\"\",\n \"fax\"=>\"\", \"email_address\"=>\"atiflarz@gmail.com\", \"ship_to_first_name\"=>\"\", \"ship_to_last_name\"=>\"\", \"ship_to_company\"=>\"\", \"ship_to_address\"=>\"\", \"ship_to_city\"=>\"\", \"ship_to_state\"=>\"\", \"ship_to_zi\np_code\"=>\"\", \"ship_to_country\"=>\"\", \"tax\"=>\"\", \"duty\"=>\"\", \"freight\"=>\"\", \"tax_exempt\"=>\"\", \"purchase_order_number\"=>\"\", \"md5_hash\"=>\"BFA7A766AA8EB0FC01820372358119FE\", \"card_code\"=>\"\", \"cardholder_au\nthentication_verification_response\"=>\"\", \"account_number\"=>\"XXXX4444\", \"card_type\"=>\"MasterCard\", \"split_tender_id\"=>\"\", \"requested_amount\"=>\"\", \"balance_on_card\"=>\"\"}}, @avs_result={\"code\"=>nil, \"mes\nsage\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil}, @cvv_result={\"code\"=>nil, \"message\"=>nil}, @success=true>\n\n. please check the transaction id in above response.\n. \n",
    "aellispierce": "@duff Adding Verify to Cardstream.\nAs mentioned, the remote tests are wonky for our account right now. \n. @duff updated those lines to a heredoc\n. @duff Per their API documentation it looks like the sandbox url is their only one and you just specify a test charge id and secret key if you want it to be a test, but I agree that it looks strange so I sent Ravish a message just to clarify. I've made all the other changes and I'm just waiting to hear back on that. \n. @duff updated! some of the weirdness (like the response[\"cards\"]) was left over from when I was trying to implement store before realizing that their store wasn't the same as how we think of it (for them you have to store specific customers and then store cards attached to those customers, which is why it was requiring a unique email for it) so I took that stuff out\n. Hmm that's true, I was thinking since we're interacting with it at all we may as well go ahead and make it fully available now in case anyone does want it enabled, but it does make things much more complex and this probably falls along the lines of that YAGNI acronym I keep seeing you guys throw around :)\n. @duff updated to be infinitely simpler\n. @duff addresses spreedly/core#1231\n. @duff ah, sorry! Updated. \n. @duff: addition to braintree to add hold_in_escrow\n. @duff would you mind taking a look at this apple pay addition?\n. @rwdaigle yeah I was discussing that in the dev slack since it's weird that it only failed some of them. Apparently there was a bug with try in Rails 3.2. @duff updated!\n. @rwdaigle you're right! That makes much more sense. Updated.\n. @duff take two! All weird carriage returns are removed so hopefully that fixes it\n. @duff Adding the validate:false field \n. /me is embarrassed. Updated @duff \n. @duff here is the updated paypal api version. I ran all of the remote and unit tests for paypal (remote and unit paypal_express, paypal_common_api, paypal_digital_goods, and the regular remote and unit paypal_test) and there were no new issues.\nI did however make a small change in the remote_paypal_test to make the new order id unique because otherwise it says you've already captured funds for that id. I did check before and after I updated the version though and that was NOT caused by the new version. Even in the old version the test didn't pass. \n. @duff this returns the correct refund id for authorization\n. @duff this translates the country codes to alpha 3 and handles 400 errors better.\n. @duff okay! I was thinking that but then I always get nervous about changing documented expected behavior but I suppose no one gets mad if you stop exceptions and give error messages instead :)\nThis commit is now just the country stuff and I'll follow up with another pr for the 400 stuff\n. @duff so then this is just the 4xx stuff by itself! I figure that the the login test now acts as a test for exception handling as well. If you'd like me to add another one I can, I just couldn't figure out how to trigger another exception now that I fixed the country code thing. I'm sure I can keep playing with it and break it somehow though ;)\n. ah sorry about that! This lgtm as well, seems like a good way to handle it. \n. @duff this is to address the exceptions we've been seeing with nil street addresses for cardstream\n. @duff for paystation! the test_capture_without_cvv and test_successful_purchase_in_gbp\" remote tests were failing before with our account. \n. @duff would you mind giving this a :eyes: \n. @duff one more, didn't realize it didn't have scrubbing either\n. @duff Updated! \n. @duff I added those to the scrubbing. Out of curiosity, I thought those debug lines were only available in the active merchant tests (and therefore not an issue). Is that something that customers (anyone's customers, not just ours) can turn on externally as well?\n. when i add and run thedump_transcript_and_failmethod to get the transcript.log file theDEBUG` lines don't show up in that. I was just wondering since I usually work off of that log file and wanted to make sure I wasn't missing things by not doing the DEBUG instead. I suppose either way it doesn't hurt to be safe.\n. @duff \n. @duff finally got this quickpay store working correctly! Would you mind taking a look? You'll have to use a different api key than the one in fixtures, so I've added it to the 1password\n. @duff alright! Sorry about that. Now just the acquirer test should fail with our api key (since the account I  made has different acquirers than the other)\n. @duff these are just a few tests for the whole purchase without cvv thing\n. @duff let me know what you think!\n. @duff oh good catch! maybe it actually should be mapped to description? There doesn't seem to be another \"description\" type option so I can't think of why not?\n. @duff updated! \n. @duff Would you mind taking a look? I did have to upgrade to the new bridgepay endpoint to get the store functionality but it seems compatible\n. @duff good point! Unit tests are now included.\n. @duff this is for the bpoint issue of not returning an error message when there's an invalid login\n. @duff or @rwdaigle can you give me your thoughts on this while we're working out what we want to do with vault?\n. @duff alright, I now have the vault as a nested class, sending the ssl_post through the primary gateway. This should fix the transcript issues.\n. @rwdaigle Yes, you are correct in that respect. Someone could be using the SageBankCardGateway directly instead of using it through SageGateway. Maybe I should keep those classes and put a deprecation warning?\n. @rwdaigle is this what you had in mind for using a constant with the source?\n. @rwdaigle updated!\n. @duff this remaps our authorize to cardstreams SALE with a captureDelay and our capture to their CAPTURE. This should fix the 3ds problems\n. @duff adding a few gateway specific fields\n. @duff so here's my attempt at fixing the Cardstream code and message problem. \nFor the messages, they have special messages that don't map to any of their codes, as is standard in AM, so I can't simply use the code to derive the message. Each number in the code actually provides other details, so if I only provided the code and tried to derive one of the standard AM messages from the code, I wouldn't be giving the customer back all the information. For this reason, I decided to just overwrite the AVS class message handling to be able to pass in a custom message. Would love to hear your thoughts!\n. @rwdaigle there are a few instances where the messages say things that the response code does not. For example, one possible message is \"security checks not supported\", however the response codes don't reflect that, the most it seems that one could interpret from the code is \"address and cvv not checked\" but you wouldn't get the specific reasoning for why. If I were using the code to derive the message i'd have to consolidate their \"data not checked\" and \"security checks not supported\" messages into one AM standard message, and the user would lose some information in the process. \nI could use the cardstream messages to map to standard Active Merchant messages, but I still have to overwrite the AVSResult class, as the standard is to use the code to map to messages. However that would solve the problem of providing a consistent external interface. \n. @rwdaigle alright, I went with mapping the cardstream codes to our standard codes. I just couldn't find a way to return their messages without overwriting the AvsResult class. This is because even if I just pass a regular hash in for avs_result, the Response class will take that and turn it into an AvsResult object...and then back to hash :). \n. @duff this is to truncate order_id and avoid getting the \"Invoice Number Length Error\"\n. @duff that is helpful! updated\n. @rwdaigle or @duff Would you mind taking a look here? \nWe need to call them and have them approve the integration before getting the production URL and, while they have support for store, it's not active on our test account yet so I skipped it. We can certainly add it later, but since my days are numbered here I wanted to go ahead and get the basic integration out of the way. Didn't want to be waiting on their customer support to give us the URL or turn store on for our account.\n. All my hard work, stolen right out from under me!. \ud83d\udc4b @duff! @davidsantoso This will not be forgotten. \ud83d\ude08 . @duff or @rwdaigle :eyes: \n. @duff or @rwdaigle :eyes: \n. @duff Makes sense! In the existing tests they were using the\nsuccessful/unsuccessful purchase stubs for everything (purchase, store, avs\nresults, cvv results, etc) so I just continued that pattern but I can make\na separate stub for authorize and void.\nOn Tue, May 19, 2015 at 2:27 PM, Duff OMelia notifications@github.com\nwrote:\n\nIn test/unit/gateways/sage_pay_test.rb\nhttps://github.com/Shopify/active_merchant/pull/1701#discussion_r30630455\n:\n\n@@ -186,6 +186,20 @@ def test_successful_store\n     assert_equal '1', response.authorization\n   end\n-  def test_successful_verify\n-    response = stub_comms do\n-      @gateway.verify(@credit_card, @options)\n-    end.respond_with(successful_purchase_response)\n\nSince verify is using authorize and void under the covers, I'm thinking\nyou'll want to use those rather than successful_purchase_response.\nSimilar to this:\nhttps://github.com/Shopify/active_merchant/blob/master/test/unit/gateways/merchant_partners_test.rb#L201-L215\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1701/files#r30630455.\n. \n",
    "zakariah1": "Thanks for your comments.  Would you consider just leaving the AccountUpdaterEligibility option?\norbital.rb line 728?  This field is part of the standard Chase Orbital \"customer profile\" schema.\nxml.tag! :AccountUpdaterEligibility, options[:account_updater_eligibility] if options[:account_updater_eligibility]\nFor the other Account Updater transaction, I'll stick with the monkey-patch.\nThanks\n. Great.  I'll do that.  It will make it easier to have that option in the\nXML.\nDo you want me to add a reference to the field in one of the existing\ntests?\nAssert match AccountUpdateEligibility\nThanks again.\nJon\nOn Jun 4, 2015 3:03 PM, \"Nathaniel Talbott\" notifications@github.com\nwrote:\n\n@zakariah1 https://github.com/zakariah1 sure, if you open a PR that\njust adds the field I'm OK merging it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Shopify/active_merchant/pull/1724#issuecomment-109011328\n.\n. Can this be merged?\n. \n",
    "wedy": "hi ntalbott, yeah true  it's a class_attribute, yeah i can change the value. thanks for your help\n. thanks @ntalbott, ah okay i saw ogone supports 3ds, i thought we could add 3ds into paypal soap field\nwe just need to pass these fields to paypal.\n<ThreeDSecureRequest>\n          <MpiVendor3ds>Y</MpiVendor3ds>\n          <AuthStatus3ds>Y</AuthStatus3ds>\n          <Cavv>jMKEKlqlJGiJARAbxMDZ5+fnFeg=</Cavv>\n          <Eci3ds>02</Eci3ds>\n          <Xid>TTVmdlFxbERYVXo5R1hrVUY5bjY=</Xid>\n        </ThreeDSecureRequest>\nref:  https://developer.paypal.com/docs/classic/paypal-payments-pro/integration-guide/ThreeDSecure/\nOgone code in Active Merchant:\nhttps://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/ogone.rb\nthanks\n. thank @ntalbott , yeah understood - ill add those additional fields into the options hash\nappreciate your prompt reply\n. thanks @girasquid , can you please review it again\n. ",
    "dwradcliffe": "@eapache I'd rather not guess at what else they are going to break and add unnecessary code. I attempted using a hash but it didn't seem to work and the code was much more obtuse, IMO.\n@j-mutter test added!\n. ping @j-mutter @eapache @ntalbott for review, please :)\n. ",
    "huoxito": "just amended the commit with README change and a couple other fixes after running this in production, pls let me know if I could help with anything else to get this merged\n. thanks @ntalbott, I've rebased on top of master again and renamed the method properly\n. ",
    "adz": "@alovak Updated with a little test adjustment. It's strange in that the gateway is more lax in the case of failure, so made the test show the behaviour more explicitly.\n. ",
    "cdion": "Will do.  Can I submit as a separate PR and close this one?\n. ",
    "marquisong": "I actually got this working with the support from Authorize.Net's support team.\nAlso, the following post in Authorize.Net's forum has mentioned about the invoiceNumber field for refund (by Authorize.Net's moderator Joy).\nhttps://community.developer.authorize.net/t5/Integration-and-Testing/invoice-number-for-refund-transactions/td-p/49810\nBtw, I will try to find out further documentation on this from Authorize.Net.\nThanks @aprofeit \n. @ntalbott That is correct. Thanks for looking into the PRs.\n. Thanks @aprofeit - There's already tests for billing and shipping address names are sent when present but I have added the tests for scenarios where billing and shipping address names are absent now.\n. @aprofeit Yes, new guards have been added above to make it to use and return a consistent result e.g. [nil, nil].\nThanks again.\n. ",
    "cbilgili": "Actually I got that email from support of bank. But please could you try that to see response of bank?\n. @ntalbott Which credentials do you need?\n. @ntalbott I don't have but asked to bank now.\n. @ntalbott  I have updated fixtures and valid credit card data according to bank.\n. ",
    "abecevello": "Updated to have tests and simplify the error_code_from method.\n. Looks fine to me.\n. @girasquid Should be fixed.\n. @bizla @girasquid I had to modify this to set the contactless flag when we know we have a card. With the previous code of setting it at the beginning, the post[:card] object is nil which then crashes. Setting it to an empty hash wouldn't work since some of the add_ methods just set the hash, which would overwrite the contactless flag.\nThis introduced a small amount of duplication, but I'm not sure what the active merchant convention is for these constants to avoid the duplication.\n. Please review @bizla @girasquid.\n. Updated to have tests and allow the default to be overwritten using the options hash.\n@bizla This is the recommended device type for Shopify POS from Authorize.net.\n. Looks fine. Needs a test.\n. I have the same comment as @bizla. Fine to merge from me when that constant is created.\n. This if seems redundant. The previous line protects this line from executing if there is nothing in contactless.\n. @bizla that isn't equivalent to what I have. In my code if STANDARD_ERROR_CODE_MAPPING[decline_code] doesn't have a mapping, the code falls back to STANDARD_ERROR_CODE_MAPPING[code]. Your version doesn't do that.\n. I can use parts of your suggestion to simplify what I have though. Change coming shortly once I test it.\n. Although they are the same string in this case, technically they are in different domains. The string here is part of the Stripe API domain. STANDARD_ERROR_CODE[:card_declined] is in the standard error code domain. There is nothing stopping these values from being different, although convention will probably have them be the same value forever.\nUp to you if you want me to use the standard one instead.\n. And @bizla beat me to the explanation.\n. ",
    "kitt": ":golf:\n. Removing it results in:\n..........F\n==========\nFailure: <false> is not true.\ntest_client_data_submitted_with_metadata_in_options(StripeTest)\n. yep.\n. ",
    "theinventor": "@ntalbott looks like you've done some work on the mercury stuff - if you have any additional insight into how that gateway works, and maybe encryption in general, you could save me a lot of work :smile: \n. @ntalbott unrelated - no prob.\nAnother way to put this; \nA lot of these gateways accept \"Track1 Data\" as a string, that string usually has the full card number, expiration, etc - and they are calling that a \"card present\" transaction.\nYou can get a USB/other swiper for a computer that comes with encryption loaded for a specific gateway. Then that Track1 data will be masked, there will be additional encrypted data and a token included in the string of junk you get from the swiper. You can send that to your gateway and \"only they\" can decrypt it.\nIt takes you out of PCI scope, while basically anyone else using this gem is IN scope.\n. I think we'll want to add a gateway for mercury's REST endpoint, the existing one is their SOAP - can we do that and call it \"mercury-rest\" or \"mercury-encrypted\" ?\nThe purpose will be to accepted encrypted track data, and send that plus the encryption key to their API.\nMaybe we make some new subclass of the \"CreditCard\" class called \"EncryptedCard\" or something, so we can add the encryption key there?\n. @girasquid this says \"EMV\" - I'm not sure this is applicable to an \"encrypted magnetic stripe reader\", do you know?\nI guess mercury wants us to send all this stuff:\n{\n    \"EncryptedBlock\": \"62700BLAHBLAH200CHARSHERE\",\n    \"EncryptedKey\": \"9012090B2C4ABLAH\",\n    \"TerminalName\": \"002\",\n    \"Purchase\": \"9.00\",\n    \"ShiftId\": \"Morning Aus\",\n    \"OperatorID\": \"test\",\n    \"InvoiceNo\": \"119\",\n    \"RefNo\": \"119\",\n    \"Memo\": \"Bloomforth :: FlashChec Pos\",\n    \"EncryptedFormat\": \"MagneSafe\",\n    \"AccountSource\": \"Swiped\",\n    \"Frequency\": \"OneTime\",\n    \"RecordNo\": \"RecordNumberRequested\",\n    \"partialAuth\": \"Allowed\",\n    \"LaneId\": \"001\"\n}\n. @ntalbott I only have the API doc for rest, we'll only work with the REST one..\n. Ok - that makes sense, I'll get a doc on their SOAP API and see if it supports it. \nIf so, we'll see what we can do to add it that route.\nOtherwise - understanding we might have to just be ok with this not getting upstream, I'll do what we can - thanks!\nWant to close this until I hear back?\n. They just told me the REST API is actually just using the SOAP API \u2014 haha.. so.. yeah, it supports everything.\nWe\u2019ll see if our dev is up for doing it next..\n\nOn Jun 24, 2015, at 1:34 PM, Nathaniel Talbott notifications@github.com wrote:\n@theinventor https://github.com/theinventor if encrypted track data isn't supported via the SOAP API, I'll be much more inclined to consider a rewrite against the REST API.\nLook forward to hearing what you find out!\n\u2014\nReply to this email directly or view it on GitHub https://github.com/activemerchant/active_merchant/issues/1751#issuecomment-115003046.\n. @ntalbott @girasquid I forgot to try to get this merged upstream, but we've been using this a while in production now and thought I would see what you guys think.\n\nPull Request:\nhttps://github.com/activemerchant/active_merchant/pull/1965\nBasically, when you swipe a credit card with an encrypted reader it masks a couple digits in the middle of the card number (they become \"0000\") and it adds an area to the end of the string with encrypted data. You have to pull some bits out and send them to mercury, they are able to decrypt.\nNow you've run a transaction without ever touching the real card data un-encrypted.\nMy understanding is we needed a new concept to store this encrypted blob in active merchant, but I think it was implemented in a nice way.\nHappy to answer more questions (and we'll fix that test failure too I guess)\n. ",
    "agseco": "I'm currently awaiting confirmation from CatalunyaCaixa/Redsys for ARS and BOBcurrencies in this regard.\nOnce I get the confirmation I can fix the currency codes if it's required and send a new PR.\n~~In terms of documentation, I'm afraid unfortunately there is no public material hosted. I'll enquire just in case.~~I found this link of the virtual POS documentation from CatalunyaCaixa: http://www.catalunyacaixa.com/docsdlv/Portal/Ficheros/Pdf/en/tpv_virtual_comercio.pdf\nPlease note this document has the AUD currency code specified with the leading 0; I have requested correction for it.\n. Our CatalunyaCaixa agent confirmed leading 0 should be stripped from currency codes. I'll send another PR with this changes.\n. ",
    "borislav-sabev": "Hi ntabott, I've made requested changes see \nhttps://github.com/borislav-sabev/active_merchant/commit/cc0f02428926716cd2b568812c34d0fff51a1126\nRegards\nBoris\n. ",
    "byronkelly": "Hi,\nJust curious when this will be pulled into the branch?\nThank you.\n. ",
    "timbeiko": "Shipped in https://github.com/activemerchant/active_merchant/pull/2153 \nClosing. \n. @mryanmay sorry about the delay. Could you please add tests for this and I'll have a look at it? \nThanks! \n. @mddharmesh I will close this for now. Please submit your changes as a new PR, link back to this and we'll review them. \n. Accidentally closed instead of https://github.com/activemerchant/active_merchant/commit/b0eb93a166273f6c0e8ebdb5a473f514c05cd65c . Re-opened. \n. LGTM. Maybe we can squash the commits though.\nCertoDirect does not exist anymore and all tests passing, nothing else removed. \n\nNo more uses/mentions of CertoDirect in any files except CHANGELOG & CONTRIBUTORS \n\nping @ThereExistsX @lyverovski \n. @ThereExistsX @aprofeit can you please review?\n. Had a look and LGTM. @ntalbott what do you think? \n. Just manually tested it and everything still works fine. Merging into master.\n. LGTM. @aprofeit can you please have a look? \n. Agreed, @cristianstanescu could you please add them and then I'll merge the PR? Thanks! \n. @cristianstanescu thanks! LGTM. @aprofeit what do you think? \n. @RafaelFMori could you please squash the commits, fix the merge conflicts and provide a link to the documentation for the fix? Happy to test it after\n. True, closing.\n. LGTM. @ThereExistsX @aprofeit can you have a quick look? \n. After going through the code, comparing with the docs and tophatting by integrating it onto a local shopify branch and testing purchase/refunds/authorisations/etc., LGTM.\n. ping @aprofeit \n. @Senjai I've been looking into this with the team and we're wondering if there is a way to implement the logic to defend against payment being a string inside the card_brand method itself.  And I was trying to see if there was a case where payement will be a String and should end up after the first if. \n. cc @jordan-brough @Senjai \n. Just reviewed this (and got @ThereExistsX to have a quick look). LGTM. \nping @aprofeit @lyverovski \n. @lyverovski are you ok with this?\n. Merged in https://github.com/activemerchant/active_merchant/commit/b0eb93a166273f6c0e8ebdb5a473f514c05cd65c. Accidentally closed https://github.com/activemerchant/active_merchant/issues/2014 instead. Manually closing PR and re-opened https://github.com/activemerchant/active_merchant/issues/2014 . \n. LGTM. @aprofeit can you please have a quick look since Moneris is used widely?\n. @dinesh can you please provide the docs for QuickPay regarding this change? Happy to review after!\n. LGTM. @aprofeit can you please have a look? \n. Tested it and it's true. LGTM. @aprofeit can you please have a look?\n. LGTM :+1: \n. Stripe is still in private beta in HK, can you submit a new PR once they go to Beta and I'll merge it? \nThanks! \n. LGTM \ud83d\udc4d \n. :+1: Merging this now\n. Needs rebasing, but otherwise LGTM. @aprofeit can you please have a quick look ?\n. \ud83d\udc4d \n. @AnotherJoSmith nope, please remove us :-D \n. My bad. Done @AnotherJoSmith ! \n. Sorry about the delay. LGTM. @aprofeit can you please have a quick look to be sure? \n. LGTM, thanks! \n. @mwhagedorn sorry, i'm lacking some context in this. Can you please link me to the relevant MC/AM info and I'll get this merged.\n. Thanks for the docs. LGTM, merging. \n. test\n. @shasum can you please link to their docs where they show this and I'll merge your PR?\nThanks! \n. @aprofeit just tested and it doesn't, but it does work with sleep(2), which might be worth changing.\n. :+1: \n. @aprofeit best I found in the docs is here.\nIt mentions them as part of the response (see \"Response\" tab of \"Charge a Credit Card\"), yet doesn't state that it will always be there. \nBut  for another param, cavvResultCode it says \"Blank or not present = CAVV not validated.\". \nSo you'd think they would mention it if this was sometimes blank or not present.\n. @ka8725 my bad, thanks for the link. It seems to be how they demo its usage, so LGTM.\n@aprofeit what do you think?\n. @aprofeit I had a look and add_pair handles this because it will only add a pair if the value isn't blank or if the option is required (from the same file):\ndef add_pair(post, key, value, options = {})\n          post[key] = value if !value.blank? || options[:required]\nend\n. @bruno, why did you set these defaults for the countries, currencies and card types? I looked through the API documentation and it seems there are many more supported cards. https://developer.optimalpayments.com/en/documentation/card-payments-api/card-object/\n. Ideally, could you map at least these error codes https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L81\n. Could you please remove this comment? (L113-115)\n. Could you please provide more context about this line? I tried looking through the docs but could not find where it's set.\n. Is there a reason why this needs to be here?\n. It seems that I'm unable to add the line items here. \nThe format in the Stripe docs has an empty array in the middle and I can't get the format right\n\n. These hardcoded values are placeholders\n. From Stripe:\n\n. From here: https://github.com/stripe/stripe-ruby/blob/master/lib/stripe/util.rb#L117\n. Ok, I see.\nMaybe change the comment to something shorter, then? Say auth for tokenised customer vault is returned as customer_profile_id|card_id|payment_method_token, all three parameters are passed back to allow unstoring a card, making a payment and interfacing with backend admin\n. ",
    "AyalS": "Just make sure that you check out this comment incase it's helpful, but thanks a ton for taking this on @andrewpaliga !\n. ",
    "marekstanisz": "@ntalbott what if I want to store a credit card number without performing a purchase action? From the code for this exact gateway (Worldpay Online Payments Gateway) I see it is possible, as this is the action performed first (here - if I understand what it does correctly). There is also a possibility to pay using only this token - I managed to do it using those private methods, though doing some ugly hacks by the way.\nBut from what I can see, Stripe will be easier to cooperate with than I thought at first. Anyway, thanks for a quick response.\n. ",
    "CaDs": "I wonder why GMO-PG gateway is no longer in the current maser branch.\nEdit: Oh I see, it was never merged!. ",
    "DylanFM": "I'm closing this as #1784 was included in the 1.56.0 release.\n. ",
    "willian": "Thank you @girasquid, I will test it :)\n. ",
    "praboud": "I've spent (rounds to) zero time poking around the internals, so maybe I'm missing something, but it feels like the design was intended to present the following interface: to charge 1 JPY, you'd specify money = 100. This seems broken to me, if for no other reason than the fact that nobody specifies prices in JPY using that notation.\nI'm a bit apprehensive about changing things like this, since a) I don't understand the code well enough to reason about how this would tendril out, and b) anybody making charges in JPY with a gateway that uses localized_amount must be specifying the amount as 100, and this would break their code.\nWhat do you think is the best way forwards?\n. ",
    "wedstar": "hi @jnormore, i grabbed your name from first_data's contributor list, i was wondering if you could help me with this question above, thank you.\n. thank you @andrewpaliga \ni have created a PR for this, https://github.com/activemerchant/active_merchant/pull/1824 \nim closing this issue now\n. hi @ntalbott thank you\ni was thinking to update the existing adapter or at least inherit from the original adapter.\nthe annoying part is in v14 some of elements has been renamed it, it's not really backward compatible\nso i thought to treat this as a separate adapter would be suitable,\nto update the existing adapter, there will be lots of if-conditions something like\nif version == 11\n      xml.tag! \"VerificationStr2\", credit_card.verification_value\n    else\n       xml.tag! \"CVDCode\", credit_card.verification_value\n    end\nthe benefits\n1. better security, merchants wish to use v12 above of the API must implement the API HMAC hash security calculation.\nplease advise \n. hi @ntalbott \ndo i need anything else to get this PR accepted? thank you\n. hi @girasquid , the securnet support team recommends to only use the TEST parameter to verification purposes in the production environment, i guess doesnt have many benefits \nSecurenet allows us to set TEST = true in production mode, and i think the code should allow us to do so, regardless penalties or no penalties, thats my opinion. \n. Hi @ntalbott  , i dont think it will change the default behaviour.\nif options[:test_mode] is nil, we will use test? (which this is the default behaviour)\nif options[:test_mode] is true or false we will use this test_mode value instead of test?\nthank you\n. ",
    "andola-dev": "Thanks for reply. I know this earlier. But I need to know from which source the error is captured. whether it's an issue from active merchant or transfirst.\nYour reply is not sufficient to make this ticket close.\n. active_merchant/lib/active_merchant/billing/gateways/trans_first.rb\nline no: 4\nself.live_url = self.test_url = 'https://webservices.primerchants.com/creditcard.asmx/CCSale'\nDo you think end point url should be same for live and test?\n. ",
    "kimikaza": "@ntalbott thanks for the info. Is it ok, though, to make it into one \"update\" method since usa-epay's updateCustomer accepts a CustomerObject, and quickUpdateCustomer accepts an array of FieldValue objects instead? Also if I rename the old update_customer into \"update\" we'd loose backwards compatibility. Sorry, I'm not sure I understood correctly.\n. @ntalbott \nAs you have explained it to me, I changed the \"update_customer\" so it is deprecated, and I encapsulated both \"update_customer\" and \"quick_update_customer\" into one \"update\" method. I changed the remote/unit tests to support this now.\nI hope I understood you correctly and this complies with AM policies now.\n. @ntalbott Thanks. This gateway was programmed this way when I arrived at it so I just concluded to leave it that way. Quick update would be called like this: \n  GATEWAY.update(customer_number: some_identifier, fields: [['Email', 'newemail@example.com'],['Address','newaddress']])\nDo you want me to extract identifier as a separate argument, or can I just leave this as it is?\nOh, and I'm a non-native english speaker, what does RE mean?\n. @ntalbott I've got this now changed so update method looks like this: def update(identifier, options={})\nTests updated too, everything is tested and working on my project so I hope this is my final post here :)\nThanks for helping me.\n. @ntalbott Do I need to do anything more to get this pull request accepted?\n. @ntalbott I just ping to see what is the status of this PR and is anything more expected of me regarding this? I hope I'm not sounding too eager.\n. @ntalbott I actually did those changes because I was dropped into a legacy code that used activemerchant gem for USAePAY recurring payment. I thought at first that USAePAY simply omited some of their methods, mostly for recurring payment.\nAnyway, I need things like customer history, list of transactions due in recurring payment etc. and I realized that it probably doesn't fit activemerchant philosophy at all, so I continued working on my fork of the library, and I don't have resources to make my own gem so I'll just keep it as it is on my profile for now.\nThe only thing that I can contribute with is that I actually found a bug in existing add_customer method and I'm thinking of making pull request for that, as that method is already a part of activemerchant so I could, as well, fix a bug that's in it.\nI don't think that this branch should be merged into activemerchant any more .\nThanks for your help!\n. ",
    "jordanliddle": "@cjoudrey I'll look at setting this up today\n. ",
    "damiangalindo": "This is to add the functionality for PayU Latam for Colombia, but also gives the opportunity to add the other Latinamerican Gateways for PayU\n. Hello @sdball, I'm sorry i hadn't closed this before, we solved the issue, the method was overwritted in our end, thanks anyway.\n. ",
    "juankhazbun": "PayU Latam has support for Argentina, Colombia, M\u00e9xico, Panam\u00e1, Per\u00fa and Brasil. Each of them have different currrency, so the idea of the PayuLatamGateway class is provide an easy way to extend the base functionality to the other supported countries.\nCurrently PayU Brasil is the only one that supports Authorize and Capture separately, as you can see in Transaction Processing in PayU Latam page. Authorize and Capture together is the most used transaction type.  That's why we opted to extend a base PayuLatamGateway class so that we could reimplement any specific functionality based on the country.\n. ",
    "madhusudhan518": "thank you @ntalbott \n. ",
    "dlehren": "If needed i will email the credentials privately\n. It's a separate gateway i used usapay transaction among other gateways as a guide \n. @ntalbott we had the developer account setup, and sent privately to you.\nplease confirm the you received it .\n. @ntalbott Thanks!\n. @ntalbott Thanks. I see you also cleaned up much appreciated! \n. ",
    "aaronromeo": "That makes perfect sense. I'm actually be fine if I could add a delete customer method.\n. Ah. I get what you mean. I'll put in a PR this weekend, and if you need me to make any changes with it, let me know.\n. ",
    "cyber2001": "No, there is no credit card in this website.\nthe code is:\n```\nrequire 'savon'\nmodule Jpay\ndef self.request_payment(amount, callback, order_id, text)\n    api = Rails.application.config.jpay_api\n    info = {api: api ,amount: amount, callback: callback, orderid: order_id, txt: text }\n    client ||= Savon.client(wsdl: 'http://www.jahanpay.com/webservice?wsdl')\n    res=client.call(:requestpayment, message: info)\n    if res.body[:requestpayment_response] and res.body[:requestpayment_response][:return]\n      code = res.body[:requestpayment_response][:return]\n      code\n    end\n  end\ndef self.response(amount, auth)\n    api = Rails.application.config.jpay_api\n    info = {api: api ,amount: amount, authority: auth}\n    client ||= Savon.client(wsdl: 'http://www.jahanpay.com/webservice?wsdl')\n    res=client.call(:verification, message: info)\n    if res.body[:verification_response] and res.body[:verification_response][:return]\n      code = res.body[:verification_response][:return]\n      code\n    end\n  end\nend\n```\nthe info hash contains the items required by the website.\nafter the transaction, the website deposits the amount in my site account, when I ask for money, the deposit it to my real account in any bank in Iran.\n. ",
    "tapalilov": "@ntalbott i`m using webpay gateway which inherit from stripe. I didnt get any data from gateway. How to dump data from gateway?\nedit:\ni`m getting this from gateway:\nRuntimeError: {\"id\"=>\"cus_fBz1JK8Wra5H8uT\", \"object\"=>\"customer\", \"livemode\"=>false, \"created\"=>1441404954, \"email\"=>nil, \"description\"=>nil, \"active_card\"=>{\"object\"=>\"card\", \"exp_year\"=>2016, \"exp_month\"=>8, \"fingerprint\"=>\"215b5b2fe460809b8bb90bae6eeac0e0e0987bd7\", \"name\"=>\"Bob Bobsen\", \"country\"=>\"JP\", \"type\"=>\"Visa\", \"cvc_check\"=>\"pass\", \"last4\"=>\"4242\"}, \"recursions\"=>[]}\nedit 2:\ni checked commits and i`m almost sure that problem come from here:\nhttps://github.com/activemerchant/active_merchant/commit/808a142691a3f452b07f275aeb1f96e4efe607cd#diff-8299be227de5ba32c34c30c42a828c9cL441\n. Okey. Will make PR and will try to make tests to not have issues like this in future.\nBest regards,\nGeorgi.\n. ",
    "miccheng": "Emails are never sent in test mode on Stripe. And it feels more proper to\nalways inform the payer through an email receipt in production.\nOn Saturday, September 12, 2015, Nathaniel Talbott notifications@github.com\nwrote:\n\n@miccheng https://github.com/miccheng will this cause an email receipt\nto always be sent if the :email option is set? That would be undesirable\n- it should require explicit action to trigger a receipt.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/1868#issuecomment-139609819\n.\n\n\nRegards,\nMichael Cheng CM\nMobile: +65 9185 5166\nLinkedIn: http://sg.linkedin.com/in/miccheng\n. No worries. I'll do another PR.\nOn Sat, 12 Sep 2015 at 2:25 am Nathaniel Talbott notifications@github.com\nwrote:\n\n@miccheng https://github.com/miccheng as @girasquid\nhttps://github.com/girasquid says, this conflicts with orgs that have\ntheir own receipt sending code, and breaks the current expectation. Happy\nto see a different PR that makes this an explicit option - thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/1868#issuecomment-139619683\n.\n. Follow up from #1868.\n. Any follow up on this?\n. \n",
    "JakeCataford": "@jpcaissy \n. This pr shouldn't break any existing code, as the :error_code parameter was non existent before. Is this good to go? \n. ",
    "ianmurrays": ":+1: \n. ",
    "RikkeG": "+1\n. ",
    "wsmoak": "May I ask why the use of the /subscriptions endpoint was removed?\nThe /cards/.../tokens endpoint only returns a single-use token, which cannot be stored and used for recurring payments.\nThis seems to be what is described here https://quickpay.net/quickpayapi as 'QuickPay Embedded'\n\nThis is achieved by submitting the credit card data directly to QuickPay who then hands back a token that in turn can be used for payment (one payment only) using our API.\n\nIf you change the test to the following...\ndef test_successful_store_and_reference_purchase\n    assert store = @gateway.store(@valid_card, @options)\n    assert_success store\n    assert signup = @gateway.purchase(@amount, store.authorization, @options)\n    assert_success signup\n    @options[:order_id] = generate_unique_id[0...10]\n    assert renewal = @gateway.purchase(@amount, store.authorization, @options)\n    assert_success renewal\n  end\nThen the renewal will fail with: \n{\"message\"=>\"Validation error\",\n        \"errors\"=>{\"card[token]\"=>[\"is used\"]},\n        \"error_code\"=>nil},\n      @success=false,\n. Thanks! More here: https://github.com/activemerchant/active_merchant/issues/2172\ntl;dr: /subscriptions isn't necessary, but the 'token' call needs to move from 'store' to 'purchase'.\n. No, every purchase would not store another card in the QuickPay vault.\nI don't think we need to go back to using /subscriptions (but from my brief look it didn't look automatic/scheduled.)\nI haven't tried this, but it appears that /payments/:id/authorize takes either a token or the full card info:  http://tech.quickpay.net/api/services/?scope=merchant#POST-payments--id-authorize---format- \n. Possibly fixed by https://github.com/activemerchant/active_merchant/pull/2115 Adding customer_ip for authorize action in quickpay \n. Based on discussion in https://github.com/activemerchant/active_merchant/pull/1873, 'purchase' needs to support both\n1. a single purchase with full card details, and\n2. a recurring purchase using a token\nIt appears that /payments/:id/authorize takes either a token or the full card info, so this should be possible... http://tech.quickpay.net/api/services/?scope=merchant#POST-payments--id-authorize---format-\n. I've got a fix working for this, but I'm having to dig through the response to find the payment id I need, when based on the existing code I think it should be in 'r.authorization'.\nhttps://github.com/activemerchant/active_merchant/compare/master...chargify:quickpay_recurring\nCould someone take a look?  Or should I go ahead and open a PR since there is now code to discuss?  Thanks!  /cc @duff \n. @mroach I'm glad to hear that you independently arrived at a similar solution!\n. I agree.  I fixed it in our fork and never got around to opening a PR here, but #2354 added the expiration date along with a couple of other things, so this issue is solved.. It looks like the live URL was already changed on master in https://github.com/activemerchant/active_merchant/commit/07856f6dbf6291f29b0d6446494f4ba682387bb2\nAnd I opened #2673 for the sandbox url for testing. ",
    "mroach": "I've been looking at the way this has been implemented and I haven't been able to figure out how to use a card after it has been used for the first purchase. It doesn't help that QuickPay hardly has any integration documentation, only generated API docs.\nFrom what I understand...\nWhen you store a card for the first time you're given a token and an id. The token can only be used once for a purchase and the id is the card's ID that you want to store for future charges, updates, or to delete the card. Then, every transaction requires that you first generate a new token to then be sent with you request (e.g. authorize, purchase).\nAre my understandings of this process correct? If so, it doesn't seem that the current version of the implementation allows for the creation of a token against a card since the create_token method is private. That's probably fine, but I'm thinking there should be modifications to call that internally when a card id is passed instead of a credit card object. For example if you call authorize, you should only have to call it with the card's id and internally the token should be created for you.\nEDIT: If I'm right about all that, I've got a branch ready to be PR'd: WebGents/active_merchant@5ee841dc2132134cc203ad0f9abc20a5a761d0da\nEDIT2: Well, seems like #2180 already did what I did. \ud83d\ude2b \n. I wish I had seen this before implementing nearly the exact same fix. Oh my. Facepalm on me. WebGents/active_merchant@5ee841d\nWell, at least seeing you do the exact same thing validates my theory and fix. Looking forward to this being merged!\n. ",
    "ashishCetuG": "@ntalbott can you please tell me to which portions in particular that i need to re-write and  is not following active merchant conventions. \ncan you please provide any example or some link for reference \n. Is there any modifications or changes that i need to make for this pull request.Please let me know for any kind of suggestion.\n. @ntalbott Modified initialize method and also optimized build xml methods of velocity gateway in a single file. Please go through this & provide any suggestions.\n. ",
    "zoxman-nabv": "@ntalbott Hello, any update on getting these changes reviewed and merged?\n. @ntalbott Hi, could you please give us an update on this?\n. @duff Could you please give us an update if @ntalbott is is too busy...?\n. @ntalbott Any update on this? Thank you.\n. ",
    "vexilar": "Is there anything we can do to expidite this?  We have some clients waiting on this.\n. ",
    "sdball": "That would mean that the validate_essential_attributes variable is nil. Which would be strange since that method declares, modifies, and returns an empty array variable.\nCan you share steps to reproduce?\nAnd just to get the full story, what version of active_merchant are you using? Are you including The Rails-specific methods with require \"active_merchant/billing/rails\"?\nCan you share the results of running this code?\ncredit_card = ActiveMerchant::Billing::CreditCard.new\ncredit_card.valid?\n. No problem! I'm glad you got it worked out.\n. In that case you can rebase your repo branch with the latest version of master for this repo.\nUpdate your repo's upstream remote branch, then rebase your repo branch against master on this repo.\nIf you've got this repo as \"upstream\" in your repo the steps would be:\n$ git fetch upstream\n$ git rebase upstream/master master\n. Pinging @rwdaigle for review.\n. Thanks! And wooooo XML!\nI'll get the minor fixes all wrapped up after I finish puzzling out a good way to handle passing the action to commit and dropping that into the authorization.\nI may need to actually bring in nokogiri instead of the super simple builder.\n. Ok! Revisions done. I was able to bring the addition of the transaction code into the commit method and used that to also store the action in the response authorization.\n. Ping @rwdaigle for review.\n. Taking this back, looks like we could clean up whitespace around signing keys to make it easier to create the gateway.\n. Hmm, this logic was in SagePay before so I assumed there was a reason it was not in a higher level spot, e.g. maybe some gateways want to see \"Visa Electron\" as \"Visa\". As far as I can tell only SagePay is weird and needs a special value for Electron cards.\nIf we do want to move this to brand, what would we return for visa electron cards? It's not one of the valid types already.\nWe could perhaps move electron? to CreditCardMethods.\nLooking at CreditCardMethods we could also potentially improve the brand? logic to be less\u2026\u00a0regexy. As much as I love regexes they are poor representations of number ranges.\n. Sweet, I'll get that moved around in this pull request :+1: \n. Sounds like the best course would be resetting to @ryanbalsdon's commit (https://github.com/activemerchant/active_merchant/commit/033f2fc) and force pushing that to master. Then turning on force push protection. :smile: \n. Looks good here!\n$ git fetch\nremote: Counting objects: 1, done.\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (1/1), done.\nFrom git://github.com/activemerchant/active_merchant\n + b021c2f...033f2fc master     -> origin/master  (forced update)\n```\n$ git div\nchanges from local master to remote origin/master:\nincoming:\n\n033f2fc - (origin/master, origin/HEAD) Mercury: Stripping the start and end sentinels on card-present track data for max-length track1 requests Closes\n CHANGELOG                                       |    1 +\n lib/active_merchant/billing/gateways/mercury.rb |   16 ++++++++++++----\n test/unit/gateways/mercury_test.rb              |   14 ++++++++++++++\n 3 files changed, 27 insertions(+), 4 deletions(-)\n\noutgoing:\n```\n. Once again, thanks Git for being awesome!\n@ThereExistsX: We've all been there :+1: \n. Aha! There's some CGI.escape calls still in the gateway:\n- https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/cashnet.rb#L61\n- https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/cashnet.rb#L86\nSince all the posted parameters are already encoded and are passed back in the redirect URL then encoding that redirect URL causes problems.\n. Hmm, perhaps leaving the current escapes, splitting apart the redirect URL parameters, uneacaping them, then escaping the entire url?\nWhat parts of the redirect URLs were unescaped before?\nIt sure sounds like a problem on their end to ensure they aren't sending invalid urls.\n. I don't think the issue is with the parameters already escaped, but some other part of the redirect URL returned from CashNet. It'd be good to get an example of the redirect URL encoding issue.\n. Awesome! I haven't used canonicalize before but it sounds like a potentially good approach. Like a less hacky version of the solution I proposed. :-)\n. The trouble there is that the transaction needs to be written deep into the XML document. If we build it all up it wouldn't be easy to insert the transaction code.\n. Oh hey cool, so we can add in some character separated data into the authorization? The API doesn't have to assume that it's dealing with transactions that started outside the API?\n. :+1: \n. I'm happy to remove it. But I was following the methods described by https://github.com/activemerchant/active_merchant/wiki/Patterns-&-Standards which says to have an update method if possible\n. :+1: \n. I keep wanting to jump between the gateway and the user :-)\n. I'd like to have it work the conventional way. Otherwise we'll need to add the transaction code to the XML request and separately pass the action to commit so that it can be included in the authorization. Eww.\nBut if I run into a serious wall I'll get philosophically pragmatic about it.\n. I'll give it a run and find out. Those are just the URLs they had in the documentation.\n. Hah no problem. I actually just did a commit to move them down here because it seemed like a lot of noise before the actual code.\n. :+1:\n. Cool, I've reset that commit and pushed :+1: \n. They provide test card numbers for each in the documentation, although they say \"Diners (considered MC)\"\n. Looks like it's not required at all. I'll get that committed.\n. That's a great idea :+1: I'll make a constant lookup and give it the key instead of having a ternary.\n. Hm, agreed! Keeping that inside the MultiResponse is a holdover from when I was trying to handle bank accounts directly in the purchase method.\nReturning a new Response is something we do elsewhere in the Stripe gateway, e.g. https://github.com/sdball/active_merchant/blob/add-ach-support-to-stripe/lib/active_merchant/billing/gateways/stripe.rb#L154\n. ",
    "cristianstanescu": "Thank you for your quick review.\nI see what you mean about backwards-compatibility. I thought of it that way initially, but there were two reasons I figured for doing it this way in the end:\n1. Laziness, as it seemed to me useless duplication, a little too much too write and work with something like this:\n``` ruby\n   proxy_uri = URI.parse(ENV['PAYMENT_GATEWAY_PROXY'])\ngateway = ActiveMerchant::Billing::SagePayGateway.new\n   gateway.proxy_address = proxy_uri.host\n   gateway.proxy_port = proxy_uri.port\n   gateway.proxy_user = proxy_uri.user\n   gateway.proxy_password = proxy_uri.password\n   ```\nvs.\nruby\n   gateway = ActiveMerchant::Billing::SagePayGateway.new\n   gateway.proxy = ENV['PAYMENT_GATEWAY_PROXY']\n2. I saw that @endpoint used in https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/connection.rb#L37 is also looking for a String/URI and seemed more consistent passing the proxy this way also.\n\nThese being the reasons, and not being familiar with the code and recommendations in Activemerchant, for backward compatibility, should I favor:\nA. Keep :proxy_address, :proxy_port and add :proxy_user and :proxy_password as in the first example\nB. Keep :proxy_address, :proxy_port and add :proxy as a String to be parsed as an URI and extract the data from there if it's given rather than :proxy_address and :proxy_port.\nI would go for B, but I guess it's better to ask first.\n. @ntalbott this should now be backward compatible.\nI've seen just a small thing after pushing. I've modified  the whitespace on this line by accident: https://github.com/activemerchant/active_merchant/pull/1894/files#diff-9f78979036d6e1787f93f58cf3ea6e34R65 Is it ok or should I commit a change to take it back? Thanks.\n. @ntalbott Could you please have another look at this one? Thank you.\n. I'm also interested in this issue with SagePay CV2 verification and I was actually planning to create a PR myself.\nThere doesn't seem to be a standard method in place for passing CV2 for a purchases against tokens. I've had a look at Braintree, Stripe, Paymill, Wepay and each seem to be implementing \"their own token approach\".\nHowever I would have a suggestion here: instead of using the hash key :CV2 when assigning from options (https://github.com/activemerchant/active_merchant/pull/2042/files#diff-a3db0f082e46cc719b09a6b8de5d6193R267):\nadd_pair(post, :CV2, options[:CV2])\nmaybe use :verification_value to be closer to the ActiveMerchant language (https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/credit_card.rb#L44):\nadd_pair(post, :CV2, options[:verification_value])\n. Thank you @timbeiko and @aprofeit for picking this up and helping getting it merged. Especially as we've also started working on implementing 3D Secure with SagePay on our system.\nI've added the remote tests and rebased. A bit sloppy on my side not to include the remote tests when the PR was made. I hope it's ok now. I've tested using our SagePay account.\n. ",
    "tedma4": "Ooops. Read the prompt wrong. Sorry. Thanks for getting back to me though.\n. ",
    "jsdalton": ":+1: This fix would be great for us. We're using this library as part of a Spree application, and right now the AVS code is not showing up in the admin. It's definitely a bummer for our client to not be able to troubleshoot authorization failures within our application.\n. ",
    "mryanmay": "Made a PR with a potential fix. Would love any feedback (though it is pretty simple).\n. @ntalbott @duff Any feedback on this change? Thanks!\n. ",
    "bipashant": "@ntalbott I'm using OpenSSL 1.0.1e-fips 11 Feb 2013 and ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]\n. @ntalbott Do I need to have HTTPS on my server side In order to call PAYPAL sandbox API?\n. @Ritesh-patel , Is this on production?\n. Are you using HTTPS?\n. same here.\n. @ntalbott Sorry for belated reply\nI'm using  activemerchant (1.53.0) I added the HTTPS and disabled SSLV3\nPlease find details explation here\nhttp://stackoverflow.com/questions/33359960/opensslsslsslerror-ssl-connect-returned-1-errno-0-state-sslv3-read-server-c\n. @ntalbott \nI'm still facing the problem.\n. @ntalbott and @Ritesh-patel  I solved the problem, after lots of research, finally able to solve this.\nI added the line OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE in my initializer.\n. ohh\nIs it?\nI just knew about this. Thanks a lot. So what is the best way to fix this @ntalbott .\n. activemerchant (1.53.0)\nbut I didn't find any gem/dependency named \"active_utils\"\n. ",
    "Ritesh-patel": "Hi @ntalbott \nI'm facing same issue for paypal gateway. \nActiveMerchant::Billing::PaypalGateway.new(\n    :login => 'test@foo.com',\n    :password => 'foofoo',\n    :signature => 'signature'\n)\nI'm using ruby 2.1.6p336 (2015-04-13 revision 50298) [x86_64-linux] and OpenSSL 1.0.2d 9 Jul 2015.\n. yes, it's on production.\n. No, not using HTTPS.\n. @ntalbott I'm using ActiveMerchant 1.32.1. \n. ",
    "m-nasser": "can you please state which version of activemerchant and active_utils you're using ?\n. ",
    "rgagnon": "I'm facing this issue on paypal sandbox.\nActiveMerchant is returning me this : \nThe SSL connection to the remote server could not be established\non : \nOpenSSL 1.0.1g 7 Apr 2014\nbuilt on: Tue Apr  8 09:07:07 CEST 2014\nplatform: linux-x86_64\nAny idea?\n. Humm, ok I thought it was the latest.  I'll try it thanks\n. I'm sorry, yes that was not the latest version at all :-/\nIt works now\nThank you\n. ",
    "AkashkumarDev": "If i just replace certificate with newer version\nit works, but don't know what would be negative effect.\nOR\nRE:\nhttps://github.com/activemerchant/active_merchant/issues/1643#issuecomment-142803421\nThanks. ",
    "jamesprior": "Right - I was looking at https://developer.paypal.com/webapps/developer/docs/classic/payflow/recurring-billing/#using-the-inquiry-action-to-view-the-status-of-payments which does list daily as an option.  I tested it out and FWIW it does seem to accept Daily and charge on a daily basis.\nWe could also just go the other way and remove daily as a valid option\n. I don't object to closing out of staleness but I'm not clear on what the outstanding issues are.  One set of docs didn't list it and another did.  As of a year ago it would work with daily as an option.  It sounds like this isn't affecting anyone, but if it sounds useful can you point me towards the next step to work on?. Sounds great, thanks!  . ",
    "PatrickTulskie": "Makes total sense.  Thanks a bunch!\n. ",
    "matthelm": "@AnotherJoSmith mind giving this an initial review?\n. Please review @j-mutter @aprofeit \n. @j-mutter I ran the remote tests each on their own. The output is here. Many tests failed in the first three scenarios, but they were also failing on master. All the tests in remote_stripe_test.rb were green. Is there anything else I need to test?\nremote_stripe_apple_pay_test.rb\nremote_stripe_connect_test.rb\nremote_stripe_emv_test.rb\nremote_stripe_test.rb\n. @ntalbott I ran the remote tests, ensuring the default value 2015-04-07 was used, and all the tests were green. The last file in the gist is the test output. https://gist.github.com/matthelm/0bbc060740577d009c0c#file-remote_stripe_test-rb\nIs there anything else you'd suggest me to check to verify this is sound?\n. Exactly\n. I'm ready for this to be merged, but am not an \"Owner\". Is somebody able to merge for me?\n. Stripe's Refund object doesn't have a livemode flag to use when populating test?. Suggestions?\nhttps://stripe.com/docs/api#refund_object\n. Stripe's AM adapter implements the void method using /refund, so wouldn't it be creating refunds?\n. ",
    "codesw1tch": "@anellis @ntalbott @duff \nWe would love feedback from you guys!\n. ",
    "steveklebanoff": "@anellis @ntalbott @duff @girasquid Any feedback on this?  We would love to have this change merged so we don't need to rely on a custom fork or roll this functionality ourselves outside activemerchant.\n. @elskwid this has been rebased and updated, new PR: https://github.com/activemerchant/active_merchant/pull/2513. ",
    "anthonyagresta": ":+1:\n. ",
    "elskwid": "Hi @jasonwebster. I believe there were some auto-closed PRs recently. This PR doesn't have any feedback from maintainers and, as a user of Litle/Vantiv, I am interested in the functionality. \nIs there a way to re-open the PR and discuss the changes?\nThanks!. Hi @bruno. I was looking through some scrubbing in another gateway and it seems the .gsub chain is a common pattern. It has the downside that all the regexes need to be created on each invocation of .scrub . Since you're PR hasn't been merged I thought I'd suggest an alternative (and you can freeze the constant to be even more nice to Ruby \ud83d\ude04 ):\n```ruby\nSCRUB_PATTERNS = [\n  %r((&?customer.password=)[^&]),\n  %r((&?card.PAN=)[^&]),\n  %r((&?card.CVN=)[^&]*)\n].freeze\nSCRUB_REPLACEMENT = '\\1[FILTERED]'\n...\ndef scrub(transcript)\n  SCRUB_PATTERNS.inject(transcript) do |text, pattern|\n    text.gsub(pattern, SCRUB_REPLACEMENT)\n  end\nend\n```. ",
    "datwelk": ":+1: \n. if credit_card.track_data[0] == ';'\n  .. # track 2\nelse\n .. # track 1\nend\n. test_bad_track_data_interpreted_as_track_1_data?\n. nitpick: card present are 2 words\n. ",
    "ss2k": "Thanks for your response. I wish we could update our ruby version but it throws a lot of errors on other parts of the site. I appreciate your help.\nI updated openssl and its https://launchpad.net/ubuntu/+source/openssl/1.0.1f-1ubuntu2.15 this version.\nWe are connecting to Authorize.net. I believe our cert bundle is this: https://launchpad.net/ubuntu/+source/ca-certificates/20130906ubuntu2\n. I updated my ca cert bundle.\nThis is the response from my console:\nirb(main):001:0> ENV['SSL_CERT_FILE']\n=> \"/etc/ssl/certs/ca-certificates.crt\"\nirb(main):002:0> cc = ActiveMerchant::Billing::CreditCard.new(...)\n=> #ActiveMerchant::Billing::CreditCard...\nirb(main):003:0> GATEWAY.purchase(100, cc)\nOpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\n. Hi,\nI updated ruby to 1.9.3p547 after updating OpenSSL\n. What's the latest version of ActiveMerchant that would support 1.9.3?\n. Thanks a lot. I will try to update to that and let you guys know what happens! I really appreciate the help.\n. Thanks guys. I think the 1.47.0 update worked!\n. ",
    "rafaelfranca": "@ntalbott maybe we should make that explicit and set the required_ruby_version in the gemspec? That way the gem is not installed with Ruby 1.9\n. Looks like the 1.47.0 is the latest version that support Ruby 1.9 https://github.com/activemerchant/active_merchant/commit/8a6c6ff626ebd292dc50e8e1c074aab49956a42d\n. PR updating the require ruby version to match our list of supported versions https://github.com/activemerchant/active_merchant/pull/1936\n. cc @duff \n. It is not released yet. While I agree that adding new Rails versions only when released is good for maintenance, it makes impossible to people that is using Active Merchant to test Rails 5 betas.\nWe are planning to make Shopify working with Rails 5 before the final release so as soon Active Merchant supports it better.\nSince the test suite is green and this gem only relies on Active Support I think it is safe to consider this project ready for Rails 5 even without any official release. It is very unlike that it will break in the future since Active Support is really stable.\n. Sure! I can support it.\nOn Wed, Nov 18, 2015, 20:13 Nathaniel Talbott notifications@github.com\nwrote:\n\n@rafaelfranca https://github.com/rafaelfranca if you're comfortable\nsupporting it, [image: :+1:].\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/1935#issuecomment-157881535\n.\n. Yes, it does. \n. \n",
    "porty": "I can confirm that PayPal purchases work as intended, but PayPal refunds are different because amount is divided by 100\n. ",
    "fourfour": "He guys. I was checking in to see if you had a chance to review our pull request. We have a couple of clients that are looking to use this integration.\nCheers.\n-eric\n. Hi @davidsantoso \nSorry about the late response. Can we reopen this and I will push up a single commit.\nThanks!!\n-Eric. @jasonwebster @davidsantoso \nHey guys. I merged the commits and rebased to master. Just popped in on a new PR as this was closed. https://github.com/activemerchant/active_merchant/pull/2438\nAny chance you guys could do this ASAP. We have a $2m deal with a client that uses Shopify and want to switch to our service. But, we need it done by tomorrow. I will buy you guys a beer or a pony, whatever you want :)\n. Hmm gotcha. So Shopify doesn't use ActiveMerchant as a whole? They limit the gateways they allow?\nRegardless, let's get this merged in AM. Thanks!. @jasonwebster @davidsantoso \nHey guys. I merged the commits and rebased to master. \nAny chance you guys could do this ASAP. We have a $2m deal with a client that uses Shopify and want to switch to our service. But, we need it done by tomorrow. I will buy you guys a beer or a pony, whatever you want :). ",
    "naturalstacks": "Just following up on this pull request. It's been hangin around since Nov 2015. We would really love to get this integrated. Is there anything we can do to help?\nThanks!\n. What outstanding issues need to be resolved? I haven't seen any comments regarding this since I submitted it. @jasonwebster . ",
    "RamilGilmanov": "@aprofeit @ntalbott @duff \nCould you please take a look?\n. @ntalbott are you serious? what is the reason for that?\nCan we have this merged in some minor version then?\n. Sorry, it's been already merged! Thanks!\n. ",
    "dikond": "@ntalbott thanks for fast reply!\nHowever create_customer_profile_transaction under the CIM gateway takes amount in decimal, not in cents. That's why I wrote it - because I've used the same amount for these two gateways, but authroize.net charged different amounts.\n. @ntalbott why it is deprecated? And what would you recommend to use for storing the card? I saw there is an official ruby sdk from authorize.\n. ",
    "mddharmesh": "@ntalbott Thank you for the feedback.\nI will discuss this with our gateway developers and get back to you with solution.\n@rwdaigle Thank you for the link.\n. Thank you for the feedback.\nWe will do the changes and we will make new pull request.\n. ",
    "ThereExistsX": "@aprofeit @andrewpaliga There we go, sorry about that! No idea how I got into such a weird state.\n. Post-Christmas reminder @aprofeit @andrewpaliga\n. @j-mutter Nah, I get 'em from the voices in my head.\n. @j-mutter You got it.\n. :rainbow: \n. @masaruhoshi @matthelm \n. @girasquid \n. No, it was definitely me. I'll ping you @ryanbalsdon you probably have a better copy of AM than I do.\n. @rwdaigle I do have both of those locally, and I'll reapply them after you reset. Sorry for the trouble.\n. Thank you so much, I am again, really sorry. I'll get those two orphaned commits rebased in and pushed up in a few minutes.\n. Thank you so much, guys. I'm still feeling like I'm going to be sick, but at least a little less so.\n. \ud83c\udf08 \n. \ud83c\udf08 \n. ^^ @duff @rwdaigle \n. @aprofeit I honestly don't know, I had hoped it was auto generated and you would know where it came from. I'll see if I can find where it is and kill it.\nEDIT: Looks like it's coming from this branch being based on an older version of offsite_payments\n. @aprofeit Happy now? =P\n. I'm fine with that -- @lyverovski , thoughts?\n. ",
    "Azdaroth": "Hey @davidsantoso, I've just rebased master.. Thanks for the answer.\nYeah, I definintely understand the problem with this kind of change, I'm currently handling that with checking if given currency is nonfractional and \"normalizing\" it if it is, but would be great to see in 2.0 release.\nWhat do you think about updating the docs and mention it explicitly that you need some extra \"normalization\" process for nonfractional currencies?. Any update here? Has anyone experienced that?. Thanks @guaguasi for the response. \nIf it's a matter of configuration, does it mean that, in general, using Stripe via activemerchant (or just any other way which accesses their payments parts of API) is considered unsafe by Stripe? . Thanks @guaguasi for the info, we might get in touch with someone from Stripe soon, so it should be clearer why it is the case and if there is any possible workaround that doesn't look like doing something insecure.. @padi Apparently,  to use activemerchant with new Stripe accounts, the setting for processing \"unsafe\" transactions must be enabled. . ",
    "vivekschetu": "@ntalbott This has happened as our branch was not updated, thus the pull request was not mergeable and we had to pull latest changes from base branch. Please suggest.\nCc: @vexilar\n. ",
    "ahamoudi": "Hi, any update on this?\n. ",
    "xuorig": "@ntalbott that's right, it should go back to the \"classic\" existing express flow when the In-Context checkout is not available and I confirmed that in my own tests. We are reaching out with paypal to confirm this.\n. @girasquid Addressed your comments! There's a chance the new url might work with payflow and all other express checkouts, I'm confirming that tomorrow morning by testing and also our paypal contact.\nIn this case, the PR would change to be even simpler! Will update once I know.\n. \ud83d\ude3f alright so this PR stays the same then!\n. Addressed your style comment. \nTo recap: \n- this changes only the paypal_express gateway, leaving payflow_express and digital_goods the same.\n- The new URL works only with paypal_express, and does not need the cmd param anymore.\n- The cmd param is still needed for payflow_express and digital_goods, it is appended in the redirect_url_for method.\n@Krystosterone @ntalbott for a final check ?\n. @ntalbott \n\nSo does this only affect things if the :mobile option is passed?\n\nFor paypal express, we just dont need the mobile option anymore. Every other express gateway stays the same and uses the mobile option as usual. Passing mobile to paypal express will just be ignored, so it is backward compatible.\n\nI'm surprised to only see assertions that were deleted?\n\nThe only thing changing from before is the URL returned for paypal express, which is changed in tests.\n. @ntalbott exactly.\n@Krystosterone: Can we confirm one last time with paypal that no matter what the merchant's config is, or any edge case, the new URL will indeed be backwards compatible ?\n. Closing this in favor of a new PaypalExpressInContext gateway\n. Yes exactly!\n. That's definitely cleaner :+1: \n. mobile: false does have sense when this is payflow_express or digital_goods. I can change it to build_redirect_url.\n. @Krystosterone changing to an options named parameter will break all existing implementations :/, I do agree it's weird to have both.\n. Oh I get what you meant now, you're right!\n. removed mobile\n. Wasn't sure if you wanted to keep those that way :+1: \n. ",
    "Krystosterone": "I heard back from our contact over at Paypal and sadly, this new URL is only supported by Paypal Express.\n. The URL is not fully backwards compatible. For more context, you can look at their documentation that lists the caveats here: https://developer.paypal.com/docs/classic/express-checkout/in-context/#before-you-get-started\nFor example, setting options[:funding_sources][:source] to BML would not work (https://github.com/activemerchant/active_merchant/blob/5bb9d2c16c18afde89da20a07c3f25c7002312fe/lib/active_merchant/billing/gateways/paypal_express.rb#L172).\nI wonder if we better leave everything as is, except for:\ncmd  = options[:mobile] ? '_express-checkout-mobile' : '_express-checkout'\nthat would become\ncmd = nil\ncmd = options[:mobile] ? '_express-checkout-mobile' : '_express-checkout' if options.key?(:mobile)\nOr having a new PaypalInContext class, so not to break every existing implementation that uses this gem\n. This makes sense :+1: \n. I had noticed that PR, but the listing of currencies seems to be erroneous. As of now, paypal documentation lists the currencies that don't support decimals as: HUF JPY TWD.\n. @davidsantoso What kind of issues was it causing?\n. (( \ud83d\udcdf  ))\n. I'm still waiting on an answer from FirstData. Until then, thoughts on getting this merged and fixing forward if need be?. Tests look good, code looks good \ud83d\udc4d. Thanks for that context! In that case, I'd just slightly tweak the code.. Why have a combination of named parameter and an options hash? Let's change it all to named parameters. \nAlso, mobile => false has no more sense anymore in this context. \nI'm not fond of classes or methods names base_*. WDYT of naming it build_redirect_url(\n. What I am saying is that :mobile => false doesn't make sense here because it isn't even used :arrow_down: . It was bumped up to the two other functions and now pass in cmd.\n. Why the change?\n. I'm curious to know why this was always true. Does Braintree Blue always support network tokenization?\n. Why not re-use response_code here? Also, isn't it inconsistent to raise an error here, but in the Authorize.net one (https://github.com/activemerchant/active_merchant/pull/1766/files#diff-32b8ad7eb3755b05bb1a03b6e1f9a3cdR194), we're not?\n. This isn't Authorize.net specific, it's in a module that is used in this gateway as well (see where ssl_post is used and trace it back). In this PR, authorize will eventually call ssl_post, which will go through https://github.com/activemerchant/active_merchant/blob/9b40c0b1d7feb20d3330b78e7c284d1e8083e0d7/lib/active_merchant/posts_data.rb#L79.\nThis means that the only reason why we'd raise a ActiveMerchant::InvalidResponseError is  if we get back a 2xx message back that doesn't contain the appropriate payload.\nNow wether or not this is the right way of proceeding, I don't know. All I'm saying is that the implementation of Authorize.net isn't consistent anymore with what we have here.\n. Why have network_tokenization_supported public and have it on Gateway? It's only ever used (for now) by Braintree Blue; by making it public, we're acknowledging this is now part of the public API. We're still not sure what this logic should look like, which means it will probably change in the near future. Having it public means dealing with deprecation and breaking changes as soon as you release the gem. I'd keep it as a hidden implementation detail in BraintreeBlue.. Shouldn't this be named supported_network_tokenized_brands?. I understand the discussion that was previously held https://github.com/activemerchant/active_merchant/pull/2241#issuecomment-262103147, but I don't like the lack of query / command segregation here. \nAlso, and I lack understanding around this, but doesn't Braintree Vault also use network tokenization? What if someone using the gem wants to ensure Braintree Blue supports network tokenization but isn't setup to provision apple pay? As an integrator, I'd call supports_network_tokenization? to ensure I can use Braintree Vault, but I'd get back false. Furthermore, I'd maybe even get an exception specific to Apple Pay provisioning, which is really confusing.. Once you've provisioned apple pay, can you re-provision a second time? i.e. I call supports_network_tokenization? twice in a row, will the second call fail?. What prompted this?. I don't think this is necessary anymore.. Shouldn't we be testing the public interface instead? (supports_network_tokenization?). Re-iterating my previous concern (https://github.com/activemerchant/active_merchant/pull/2275#discussion_r91172790):\n\nI understand the discussion that was previously held https://github.com/activemerchant/active_merchant/pull/2241#issuecomment-262103147, but I don't like the lack of query / command segregation here. \nAlso, and I lack understanding around this, but doesn't Braintree Vault also use network tokenization? What if someone using the gem wants to ensure Braintree Blue supports network tokenization but isn't setup to provision apple pay? As an integrator, I'd call supports_network_tokenization? to ensure I can use Braintree Vault, but I'd get back false. Is this something that is common and that can happen? Furthermore, I'd maybe even get an exception specific to Apple Pay provisioning (if it fails), which is really confusing.. This method seems unnecessary, as we can now have only:\ndef supports_network_tokenization?\n  response = Braintree::MerchantGateway.new(@braintree_gateway).provision_raw_apple_pay\n  response.success? && response.supported_networks.present?\nend\n\nThis is if we decide to address the concerns on provision_raw_apple_pay though.. Shouldn't you be stubbing Braintree::MerchantGateway rather than a private method?. This conditional seems repetitive as you already have that conditional here: https://github.com/activemerchant/active_merchant/pull/2818/files#diff-190c63e5fc794acdcbe09e98ab586881R129. Nothing to do with code logic, just code cleanup:\nI'd prefer if we didn't do any assignments in conditionals; same goes for lower down. What would you think of having:\n```\nreturn unless post[:card] && post[:card].kind_of?(Hash)\naddress = options[:billing_address] || options[:address]\nshipping_address = options[:shipping_address] || address\n```. Nothing to do with code logic, just code cleanup:\nWith these two conditionals, your method is growing and the name isn't representative of what it's doing. Have you thought of splitting into two disctinct methods? add_billing_address and add_shipping_address?. Nothing to do with code logic, just code cleanup:\nAll of these ifs seem repetitive. What if he had something like:\ndelivery_address = {\n  street: shipping_address[:address1],\n  houseNumberOrName: shipping_address[:address2],\n  postalCode: shipping_address[:zip],\n  city: shipping_address[:city],\n  stateOrProvince: shipping_address[:state],\n  country: shipping_address[:country],\n}\ndelivery_address.compact. I would expect more tests to be added because of the changes in logic \ud83e\udd14 . What if options[:phone] is present but options[:billing_address][:phone] is not? Won't then post[:telephoneNumber] not be set?. Also indicating a lack of tests. Right, hadn't seen the parentheses. Why have the if at all then?. Whatever the param, it's hard to understand what the behaviour of the code is because of the way it's written.. ",
    "prburke": "@ntalbott Thanks for the feedback.  We've found a better place to make this change so I'll close this PR.\n. Done...#2039.  My apologies, I missed the original comments.\n. ",
    "pblesi": "@prburke A month ago you added a commit that has improper assumptions about the way our client library works. Can you make an update to remove the invalid assertions?\n. ",
    "jimjeffers": "Additional info:\nI'm running Ruby 2.3 w/ ActiveMerchant 1.56.0\n. After digging through the source of the actual project I inherited I realized it was our code calling capture incorrectly. Closing this ticket. Sorry about that.\n. ",
    "sybind": "+1 It's a jruby issue, not activemerchant.. I think\n. ",
    "chrismo": "fwiw, hitting something similar now with jruby 1.7.16.1 and activemerchant 1.44.1 and OS X version 10.12 - last time I worked with this repo, I was an older version of OS X ... getting up to activemerchant 1.55.0 allowed me to get past the problem.\nProblem though had different symptom, simply getting bundler (versions 1.11, 1.13 and 1.14) hanging when trying to bundle on an existing install after 'Using activemerchant 1.44.1`.. nevermind - i think this is completely unrelated. looks like activemerchant was just the last gem installed, and bundler was actually hung doing something after installing all the gems.. ",
    "rajbits": "@chrismo @aldrinkyck  - did you finally get it to working with jruby?. ",
    "asanger": "As my project moved into a production state, I noticed that the original author had mistyped the production URL - as it stands in master, nobody will be able to use this in production. My last commit corrects this. If you would like that commit moved to a separate PR, please let me know and I will be happy to do so.\n. There has been a typo in the Element Express production endpoint (in master) for well over a year now. \nhttps://service.elementexpress.com/express.asmx does not exist.\nhttps://services.elementexpress.com/express.asmx is the correct endpoint.\nThis PR fixes that, and until the fix is made, nobody will be able to use this in production. Any chance we could get this merged?. feel free! Thanks. hah, sorry @yjukaku I totally thought you were offering to do it \ud83d\ude48  I'll get this submitted shortly!. ",
    "yjukaku": "@asanger Do you mind rebasing and reopening this PR?. Anything holding this up?. ",
    "joeblack81": "@mnoack , Thank you so much for your quick reply, I am new to rails so excuse my silly questions,\nNow I am able to get redirected to Migs server using the credentials and secure hash in the test class as following :\n options = {\n     :order_id   => 1,\n     :unique_id  => 9,\n     :return_url => 'http://localhost:3000/payments/returnurl'\n    }\n@amount = 100\n redirect_to @gateway.purchase_offsite_url(@amount, options)\nBut when I use my credentials that i got from my provider , I get this error:\nSecure Hash mismatch, response may be tampered with\nHow can I create my secure Hash?, How can I verify the response coming from Migs server to make sure that no one playing around?\nThanks and best regards\n. @mnoack  I want to use Migs in offsite_payments gem but I see that your code still not merged, how can I use it now?\n. ",
    "gautamsawhney": "Ok, Thank you\n. ",
    "atuttle": "Apologies for butting in, but...\nIsn't this the exact reason that methods like canonicalize (from OWASP's anti-sammy library) exist? My understanding is that canonicalize will un-encode everything to its raw form, and then you can then encode as appropriate for the request you need to make.\n... not that this should excuse CashNet from sending bad data.\n. ",
    "erick-mitchells": "Any word on when this will be brought in?  As noted above, the old URLs will no longer be valid as of June 30.\n. ",
    "kexline4710": ":+1: Can this be merged soon? This would fix failing Braintree Blue builds. Thank you!\n. ",
    "masak2009": "I have same problem with PayPal:\nRunning active-merchant on my development machine without test mode:\nResult of post to paypal: \n#<Net::HTTPOK 200 OK readbody=true>\nRunning active-merchant on my development machine with test mode:\nOpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 read server hello A: sslv3 alert handshake failure\nI tried override active-merchant http method to force TLS\n```\n  def http\n      http = Net::HTTP.new(endpoint.host, endpoint.port, proxy_address, proxy_port)\n      configure_debugging(http)\n      configure_timeouts(http)\n      configure_ssl(http)\n      configure_cert(http)\n      http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n      http.ssl_version = :TLSv1\n      http\n    end\n```\nLooks like that test mode still forcing SSL3 in post to paypal.\nIf test-mode not work but normal mode works then problem is not in OpenSSL !!!\nVersion of gem is \"1.43.3\" and Rails 3.2. The older one (\"1.32.1\") which works only with Rails 3.1 don't have this issue. I used the activemerchant in project for few years without problem. Now I can not make changes in project checkout to test paypal in test mode :-1: \n. Project is on Ruby 1.9.3 and activemerchant 1.58.0 require Ruby version >= 2. \nStill not resolved.\n. OK so I found where is problem:\nConfiguration: Still using version 1.43.3, Rails 3.2 and Ruby 1.9.3\nMy workaround to get it work:\n1) Upgrade macports to be able install new ports on OSX El Capitan. (maybe unnecessary step => I have to do it because nokogiri native gem dependencies)\n2) Upgrade rvm to latest version\n3) Reinstall with force ruby 1.9.3 => You will see that ruby will be installed and then SSL3 ruby patch will be applied automatically.\n```\nrvm update head\nrvm --force install 1.9.3\n```\n4) DONE => test mode works again!!!\n. ",
    "shasum": "@rwdaigle new commits submitted to address PR feedback items\n. @rwdaigle \nseeing that it has originated from a purchase tx, I'd suspect merchant_id has not been passed in the options object. Like we did with purchase_number, maybe it's good to provide a default in our adapter, which would then cause an error response from the gateway that can be handed back to the user?\n. @rwdaigle \nmerchant id assigned once per merchant account. I believe visanet assigns it to the merchant while setting up an account. It has been shared on our Trello test credentials section and not generated via any of our invoked api calls.\n. @rwdaigle \ngood suggestion. yes, it simplifies auth format as well. I'll update it.\n. @duff @rwdaigle \nYes, quite a list of options. I took it as a collection point of all the required fields. Please have a look at the field-by-field comments below.\n@options = {\n  purchase_number: rand(100000000 .. 1000000000).to_s,  ( this is visanet's equivalent of order id, just needs to be 9-digit numeric. I thought it'd be good to retain their field name, hence included in options instead of order id. This field has default with override as already noted by @duff. If order id is the preferred standard, I can use that for override and get rid of this option )\n  order_id: (SecureRandom.random_number() * (10 ** 9)).floor.to_s, ( redundant, not being used in the current version of the adapter )\n  billing_address: address, ( a common options field )\n  email: \"visanetperutest@mailinator.com\", ( required field, what's a good way to default it, some random email? )\n  merchant_id: \"101266802\", ( this will be removed, this is going with the other credentials )\n  device_fingerprint_id: \"deadbeef\", ( required field, now that I see the pattern, probably good to add a default with override )\n  merchant_define_data: {\n    field3: \"movil\",  # Channel ( required field, what's a good way to default it as it represents something about the merchant?  or should this go with the credentials just like merchant id)\n    field91: \"101266802\", # Merchant Code / Merchant Id ( this will be removed, this is going with the other credentials )\n    field92: \"Cabify\" # Merchant Name ( required field, what's a good way to default it as it represents something about the merchant?  or should this go with the credentials just like merchant id )\n  }\n}\nThe no-options test is definitely a good addition. I can do that if we settle on reasonable defaults for some of those other listed fields.\n. @rwdaigle \nList of changes:\n- remove merchant_id from options and make it a required credential passed to initialize\n- simplify authorization format by stripping out merchant_id from it\n- remove purchase_number from options, use order_id to override default purchase_number\n- ?? no other changes to existing options ??\n- clean up order_id ( little unclear on what guides this. example: visanet peru order_id needs to be 9-digit numeric, latitude19 has no specific restrictions except the field type is listed as a 100-char string. how would we clean it in these 2 situations? )\nIn case I missed anything, please feel free to include.\n. @rwdaigle \n\nWe only clean up the order_id if the gateway imposes restrictions on its length and format. So for VisaNet here, we need to make it a numeric and truncate it to 9 digits. For Lat19, that's a flexible enough format that we probably don't need to do anything but pass along the order_id as it was given to us.\n\nvisanet peru order_id from merchant What-ifs:\n- less than 9-digits numeric - pad with leading zeros, provided gateway accepts it?\n- greater than 9-digits numeric - truncate LSBs (or MSBs), won't this risk duplicates eventually?\n- any-digits hex - not sure how to clean this up?\n. @rwdaigle \nYes, their order_id( aka purchase_number) needs to be exactly 9-digits. Depending on the incoming order_id from the merchant, all this gsubbing may alter it beyond recognition.\nVisanet Peru provides a piggy back field where we can set arbitrary key/value pairs that will make a round trip and be returned in the response. Why don't we use that to list both merchant generated order_id and our adapter generated compliant_order_id. That way we not only make sure a proper order_id gets forwarded to the gateway, but also the mapping is conveyed back to the merchant.\n. Good question. 4-things to consider.\n- visanet uses a merchant supplied value (purchase_number) as it's tx id\n- gateway does not return this purchase_number in any of the response fields\n- current adapter does not rely on order_id to derive purchase_number (required to be 9-digit numeric)\n- since it's not derived from order_id, it needs to be made available in generated authorization, for subsequent requests to id the right tx\nexternalTransactionId is an open ended field defined by the merchant. Does not have a specific functional impact. Gets returned from request to response. In the current adapter version, it is being used to piggy back the purchase_number from request to response.\nexample: we send an authorize request with externalTransactionId==purchase_number. From the gateway response, we are able to look at externalTransactionId to get the purchase_number and add it to the returned authorization. subsequent capture (or) void calls extract it from the authorization to refer to the right previous tx.\n. @rwdaigle \nprior purchase_number is needed in capture and void, it serves as the tx id in this gateway. either has to make a round trip or has to have a correlation between purchase_number and order_id such that earlier value can be re-computed.\n. @rwdaigle \nessentially dealing with two different necessities.\n- purchase_number got to be different from order_id\n- purchase_number needed back in the response\n. @rwdaigle \nnice, that should definitely work :+1: \nwhy oh why do we fail to see the simple elegant solution sometimes :)\n. @duff \ncrazy me. I stared straight into the amount() method while I was doing this piece and yet failed to realize the :dollars money format does exactly what I wanted \ud83d\ude04 . thanks for pointing it out. I'll refactor the currency part and submit separate PRs.\n. @duff this PR now fixes only the message part\n. @duff emptied and squashed\n. @duff feedback updates and more tests that cover all supported Latam countries\n. @duff updated commit pushed\nPrevious feedback items have been addressed except for the following,\n- Brazil fails when shipping_address is not provided. Hence, billing_address has been retained as a shipping default with override.\n- Removing cvv from authorization. Refer previous comment thread to finalize this part.\n. > So if a customer specifies no billing_address and no shipping address, then it'll work, right?\nFor countries other than Brazil, it works, no address no problem. But, in case of Brazil, it fails Antifraud check if either address is omitted ( both addresses needed for successful Brazil txn )\n\nThe Brazil shipping address thing is an odd one! Does it happen if the country is specified for the billing address and Brazil is specified? I don't think I've ever heard of a shipping_address being required. What if nothing is being shipped?\n\nIt happens when the Brazilian account_id is used along with Brazilian currency and billing address inputs. Under these circumstances it expects a non-null shipping address, else returns ANTIFRAUD_REJECTED error. Good question about nothing being shipped, not sure what the gateway expects in such cases.\n\nI'm wondering if we can bag on using the billing_address as a default shipping address. Then if a customer gets an error message about shipping address being required in some circumstances, then they might be able to adjust their gateway settings in their gateway UI to turn off such a requirement. Or they can start passing shipping address in those circumstances. I'm a bit cautious about an implicit default shipping address. Whatcha think?\n\nInitially, I was hesitant as well in having such implicit defaults. Later, we had use cases like this, which had me think it might be okay to go with such address related defaults.\n. > I wonder if there's a way to turn off the ANTIFRAUD_REJECTED error for a Brazilian account_id in their gateway UI.\nCould be, but no way to check that immediately. Used open test credentials for their sandbox from the API docs page. There doesn't seem to be a self service portal for the sandbox.\n\nPerhaps an option is to have a default shipping_address like you mentioned in this. So it would use the specified shipping_address from the customer, or it would use the hard coded default. But it would be separate from the billing_address.\n\nThinking it might be better to let the error pass through in this case. Allow customers to send in the shipping_address when required. Hard coding an unrelated address feels odd.\n. @duff finally! end in sight.\nQuite a few changes:\n- cvv removed from authorization\n- billing_address, shipping_address, and email cleaned up\n- incorporated all feedback from gateway support\n- added query method that helps check status of pending transactions\n. @duff the no frills version!\n. Just a note to record that refund has been modified, GET removed and minor changes around generating AM response from gateway response.\n. @timbeiko http://developers.bluesnap.com/docs/country-codes\nalso a list sent to us @ Spreedly\nBlueSnap Countries_Spreedly (1).xlsx\n. @davidsantoso np! accidentally deleted the branch earlier today :)\nrebased and ready once Travis completes\n. @davidsantoso rebased n ready\n. Makes sense to locate it within invoice. Yep, really strange that it behaves this way.. Updated. @davidsantoso rebased to drop ruby 2.0, passes all Travis checks. Updated!. @davidsantoso swapped!. @davidsantoso \nYep, same errors. Think I overlooked the mis-compared messages. Seems like API has slightly altered response messages there. Thanks for spotting and offering to update. Please go ahead \ud83d\udc4d . @davidsantoso . @davidsantoso sure. I did test that case in-place but was a bit lazy to add it additionally \ud83d\ude00  . Will be back with an update.. @davidsantoso updated!. @curiousepic Awesome, the refactor looks very clean \ud83d\udc4d \nThe changes might have accidentally broken unit tests at couple spots. I'll mark them in-line.. Unit tests added for credit. Merging.. Thanks for the review \ud83d\ude4f . Rebased and merging.. @davidsantoso Absolutely! I was thinking along the same lines skimming through their documentation. Taking a more closer look it explicitly says to look beyond http status codes for transaction status. Result codes in the response body seem the right place to look for pass/fail info.\n\nFor each request you send to our API the HTTP status code of the response will already tell you the basic result.\n200 - successful request\n307 - temporary redirect\n400 - bad request. This might either point to e.g. invalid parameters or values sent. It's also returned if the payment failed e.g. because the acquirer declined.\n403 - incorrect authentication information, e.g. one of the authentication.* parameters is wrong - please check them or contact us for correct parameters\n404 - requested resource or endpoint is not found. I.e. endpoint/url doesn't exist. This can also be caused by typos like POST /v1/paymnets instead of payments or wrong IDs like GET /v1/payments/{id} where no payment with {id} exists.\nFor payments you'll want more fine grained information to find out why a payment failed. You're getting this information in the result codes.. @davidsantoso I'll go ahead change the success_from method. Appreciate if you could give a quick \ud83d\udc4d  on rest of the changes.. ```\n$ RUBYOPT=W0 be rake test:remote TEST=test/remote/gateways/remote_opp_test.rb \n\nFinished in 29.771993 seconds.\n15 tests, 48 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.50 tests/s, 1.61 assertions/s\n```. @curiousepic Good point. I'm a \ud83d\udc4d  on this PR.. I'm cool with the change :)\nThe stan ending is pretty normal for countries in our region (and not just muslim majority ones). India, a hindu majority state is called Hindustan locally. I don't see it being derogatory/offensive. I imagine other folks are likely to misinterpret.. hmm...that's a strange coincidence I happened to use that exact term. Well, at least I can now claim I've made some controversial commits to a public repo ;)\nthanks for cleaning it up \ud83d\udc4d . @jasonwebster Good point.\nNMI docs is not clear/up-to-date about network tokenization requests (example: there is no mention of the token_cryptogram field which has been added in this PR). After several back and forth with their support folks ccnumber and token_cryptogram are what they confirm as needed.\nI don't think it hurts to add eci. Adding it made cavv mandatory, which I mapped to the cryptogram. Also, added cryptogram to the list of things that get scrubbed.\nCc: @davidsantoso @curiousepic . I've sent out an email to NMI to get some clarity around their usage of eci.\nNMI doc indicates that eci, cavv, xid fields are passed in for 3DS transactions. Earlier, reading up a bit on Apple Pay I came across this article that suggests under the hood Apple Pay using 3DS like protocol. Also, couple other gateways ( firstdata_e4 and cybersource ) map cryptogram to cavv which made me think maybe it's a typical mapping.\nI realize it's best to sort this out with the gateway folks. I'll update here once I hear back from them.. NMI came back with a No.\n\nNo, the ECI indicator is not needed with the token_cryptogram\n\nCould be their focus market (US) allows them that leeway. Time to rollback and update the PR.. @jasonwebster Not at all. It was a valid observation. Thanks to you \ud83d\ude47  we got it properly clarified.. @davidsantoso updated and ready for a 2nd look!. @curiousepic Not sure if this fits well with the PO logic but I was imagining something like this.\n```ruby\nxml.order do\n  xml.invoiceNumber(truncate(options[:order_id], 20))\n  xml.description(truncate(options[:description], 255))\n  add_po_number(xml, options, transaction_type)\nend\ndef add_po_number(xml, options, transaction_type='')\n  return unless options[:po_number]\n  if transaction_type.start_with?(\"profileTrans\")\n    xml.purchaseOrderNumber(options[:po_number])\n  else\n    xml.poNumber(options[:po_number])\n  end\nend\n. @curiousepic Gotchya. I suspected some intricacy around it that I was definitely missing. What if we throw in part of the original guard clause inside the order element. Would that eliminate duplicates?ruby\nxml.order do\n  xml.invoiceNumber(truncate(options[:order_id], 20))\n  xml.description(truncate(options[:description], 255))\n  add_po_number(xml, options, transaction_type) if transaction_type.start_with?(\"profileTrans\")\nend\ndef add_po_number(xml, options, transaction_type='')\n  return unless options[:po_number]\n  if transaction_type.start_with?(\"profileTrans\")\n    xml.purchaseOrderNumber(options[:po_number])\n  else\n    xml.poNumber(options[:po_number])\n  end\nend\n```. @davidsantoso \n\nMakes sense \ud83d\udc4d \nTook a leaf out of Litle and Mercury. Since certification tests make us run through specific scenarios, separating them out seemed cleaner.. @davidsantoso Updated and all tests pass (including the certification ones)!. @activemerchant/spreedly-runtime ENRG-7445. @bpollack Thanks for the tip on rubocop auto-correct and yaml whitelist. The CI checks have passed. Unit and remote tests are good.. @rwdaigle As far as I checked, :customer was only being populated in the adapter's auth/purchase methods. Both those methods send out POST requests to create a new Charge. The create new charge documentation lists :customerId as a data input (and not :customer). Also, :customer has never been exercised in any of the existing tests. All this lead to believe :customer has either been unused or erroneous.\n. @rwdaigle When provided a valid customerId, the act of creating a new charge automatically adds the card to the customer (relevant paragraph from api doc pasted below). The authorize stage of verify does that job. Although subsequent void refunds the charge, the card stays added to the customer since the authorize step was successful. The 3rd test-case within 'test_successful_store' verifies this. Verify response is pasted further down below. The newly added card's id is available within the response params.\n\n\ncustomerId\nstring, optional (either customerId or card is required)\nIdentifier of customer that will be associated with this charge.\nThis field is required if charge is being created with customer's existing card.\nIf specified then successful charge created with new card (either by token or by card details) will add that card to customer's card and is will be set as customer's default card.\n\n{\"id\":\"char_fIZbI9jfq4t6TeE1n0o0fe6X\",\"created\":1458839587,\"objectType\":\"charge\",\"amount\":100,\"currency\":\"USD\",\"description\":\"ActiveMerchant test charge\",\"card\":{\"id\":\"card_JmBx1cu2yeFxdk6YIWMrUURd\",\"created\":1458839587,\"objectType\":\"card\",\"first6\":\"424242\",\"last4\":\"4242\",\"fingerprint\":\"ecAKhFD1dmDAMKD9\",\"expMonth\":\"9\",\"expYear\":\"2017\",\"cardholderName\":\"Longbob Longsen\",\"brand\":\"Visa\",\"type\":\"Credit Card\"},\"captured\":false,\"refunded\":false,\"disputed\":false,\"metadata\":{\"email\":\"foo@example.com\"}}\n@primary_response=\n    #<ActiveMerchant::Billing::Response:0x007ffce4123b38\n     @authorization=\"char_fIZbI9jfq4t6TeE1n0o0fe6X\",\n     @avs_result=\n      {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n     @cvv_result={\"code\"=>nil, \"message\"=>nil},\n     @emv_authorization=nil,\n     @error_code=nil,\n     @fraud_review=nil,\n     @message=\"Transaction approved\",\n     @params=\n      {\"id\"=>\"char_fIZbI9jfq4t6TeE1n0o0fe6X\",\n       \"created\"=>1458839587,\n       \"objectType\"=>\"charge\",\n       \"amount\"=>100,\n       \"currency\"=>\"USD\",\n       \"description\"=>\"ActiveMerchant test charge\",\n       \"card\"=>\n        {\"id\"=>\"card_JmBx1cu2yeFxdk6YIWMrUURd\",\n         \"created\"=>1458839587,\n         \"objectType\"=>\"card\",\n         \"first6\"=>\"424242\",\n         \"last4\"=>\"4242\",\n         \"fingerprint\"=>\"ecAKhFD1dmDAMKD9\",\n         \"expMonth\"=>\"9\",\n         \"expYear\"=>\"2017\",\n         \"cardholderName\"=>\"Longbob Longsen\",\n         \"brand\"=>\"Visa\",\n         \"type\"=>\"Credit Card\"},\n       \"captured\"=>false,\n       \"refunded\"=>false,\n       \"disputed\"=>false,\n       \"metadata\"=>{\"email\"=>\"foo@example.com\"}},\n     @success=true,\n     @test=true\n. @rwdaigle \ncommit 7fabf38 modified CVV code from integer to string causing existing scrub test to fail. This fixes it.\n. @duff \ndoes remote test_transcript_scrubbing work for you?\nunit may have worked as the request response are mocked\n. @duff my bad for not committing the test credentials. I wasn't sure if it's okay to commit them to the repo. A quick check with @rwdaigle and I can add them.\n. > Merchant\u2019s configuration identifier on the L19 Payment Gateway. A merchant may have one, or more than one configuration identifier. The configuration identifier represents a merchant \"division,\" and it determines how the transaction is routed by the back-end payment processor. The most common reason for having multiple configurations is to support multiple payment currencies. In this case, a merchant will have one configuration identifier per currency. Merchant configurations must be set up by the L19 Payment Gateway in conjunction with the back-end payment processor.\n. account_token represents a stored card. bypass path eliminates the need to generate a session and a temp token in this case where we have a long term stored token.\n. responseText conveys a meaningful transaction message. Thought it might be useful, in addition to the decoded response code.\n. Okay. It has 4 parts. I'll strip out the error descriptions. Does it make sense to leave in processorResponseCode in addition to pgwResponseCode (the lat19 gateway response code)\n. Yes sir. It's a chatty api [in your own words]  :)\nThank god, it's a big OR and not a concatenation, again :)\n. @rwdaigle \nI assume you're referring to the JSON error handler within response_error() method. It is needed. The one sitting inside commit handles JSON errors in a successful http response, this latter one handles it for ResponseError object, generated when status code falls outside of 200..300 range. Not sure if I'm addressing your question correctly.\n. They most likely are not public. Not sure if they fall under the sensitive category. Did it as a precautionary step. I'll remove them from scrub.\n. Bug. Thanks for spotting it. Supposed to be override/default.\n. @rwdaigle\nNot 100% sure about this part. Right now the creds (account_number, configuration_id, secret) work only on sandbox. From the few conversations with Mike, it seemed like the same account_number and configuration_id may get carried over to production. But, probably not the secret. Other aspect is that, these values have been setup particularly for Fonteva. So, bit unsure if this can be commiitted to the open repo.\n. modified to first class arg\n. account_number, configuration_id removed from scrub.\n@rwdaigle should temp (sessionToken) and long-term (accountToken) tokens be scrubbed? they represent a valid card.\n. Rectified\n. modified to return a single message. Either decoded pgwResponseCode or responseText\n. modified to return a single error code, pgwResponseCode or processorResponseCode\n. test creds committed to fixture\n. @rwdaigle Alright.\nhmac goes out with every request type except one, and the one without hmac contains PAN that's going to get scrubbed. so, all should be good. leaving tokens un-scrubbed  :+1: \n. If the token is a short term token (sessionToken and not long term accountToken), generating the token (tokenize) involves only the PAN. The subsequent purchase/authorize calls need to pass in card_expiry and card_type required fields.\n. getSession is the gateway to rest of the gateway calls (excuse the pun). we generate a session, based on that a token, and based on that a transaction\n\n. @rwdaigle \naccepted. externalTransactionId was used in the earlier version. got rid of it thinking order_id being merchant supplied, will there be value in sending it back along with the response. I see now it will serve good purpose as a response identifier for the merchant. will make both changes.\n. @rwdaigle \nyes, although I didn't try NOT passing it.\n\n. Agreed. There is a getting charged risk if/when void fails. Will switch to authorize. I wasn't sure if it was okay to implement an op that worked selectively. Now, I figure we just let users know about upstream gateway's limits in terms of how things work.\n. As there was lot of back n forth while testing this gateway, I had at various times tried out each different account_id that maps to a different country as you rightly guessed. In the final commit, I just left them all in.\nPattern wise, there is Brazil and the rest, so this can be trimmed down to just those two.\n. \ud83d\udc4d  had noticed it in test_helper.rb, didn't realize there's a similar one under gateway.rb\n. shipping_address else billing_address else address\nthink I saw this address fallback sequence on another gateway and borrowed it.\n. \ud83d\udc4d \nCool. The association between void-authorization and refund-purchase makes sense. Noticing the gateway does not support partial refunds, I somehow bunched those two together.\n. Right. Can't think of a way to find out for sure without running it in prod. Gateway docs has this to say about stored tokens:\n\nNote: It is impossible to process transactions without validation of the cvv2 security code for the following countries. You need to send the SecurityCode parameter in the request. Argentina, Mexico, Panama, Peru.\n\nBrazil and Colombia seem to be excluded from this cvv requirement as per docs.\nDo you see a clean alternative to NOT keeping cvv in the returned authorization and still supporting store for all countries (or) we choose to support store for only Brazil and Colombia for now?\n. Yup, agreed, definitely needs some DRYing \ud83d\udc4d \n. \ud83d\ude3f  will go ahead and change\n. \ud83d\udc4d \n. It plays tricks on the eyes, but it's the TX_VALUE ( transaction value? ) that's part of signature. Got rid of all other TAX related values.\n. For auth and purchase, it checks transactionResponse.state is Approved. \niirc from a past error, validating that response has the item that we need (eg: tokenId) is an approach I adopted to prevent runtime nil errors when we subsequently read that value.\n. Yep, could use a better refactor. Will do a separate PR.\n. with code == SUCCESS, transactionResponse.state can be one of APPROVED, DECLINED or PENDING. Only the first one is a successful transaction, which cannot be determined using code alone.\n. @davidsantoso think I made a mistake in understanding PayJunction's REFUND transaction. thought it was allowing only AM credit style operation. re-reading the docs, looks like it supports both AM credit and AM refund\ndue to the misunderstanding I tried to accomplish a read-modify-write to implement AM refund. as in, read previously charged amount, reduce the amount to be refunded, and write back the new balance to be charged. but that seems a wrong approach now. thanks for spotting, let me rework this.\n. @jasonwebster The amount() method does that internally.\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L254. Cool, will update. I wasn't sure if it was okay to alter the options hash.. Agreed.. Awesome!\nmuscle memory, making it 2 when 1 should suffice :). Bit odd that currency is not included on authorize calls. But, I guess it is what it is.. An alternate would be to separate out the concerns in the arguments list ( payment_method and authorization ). It may also help in getting rid of some of the conditionals and further breaking down to smaller parts. Something like,\n```ruby\ndef add_params_in_order(post, action, money, payment_method, authorization, options)\n  add_invoice(post, action, money, payment_method, options)\n  add_reference(post, action, authorization, options)\n  add_payment_method(post, payment_method, options)\nend\ndef add_invoice(post, action, money, payment_method, options)\n  post.Amount(amount(money))                    if money\n  post.Currency(options[:currency])             if [:purchase, :capture, :refund].include? action\n  post.ExpiryDate(expiration(payment_method))\nend\ndef add_reference(post, action, authorization, options)\n  # Merchant Reference\n  # Transaction Index\n  # Original Request Id\nend\ndef add_payment_method(post, payment_method, options)\n  post.CardSecurityCode(payment_method.verification_value)\n  post.PAN(payment_method.number)\nend\n``. Some adapters rescueActiveMerchant::ResponseErrorfrom thessl_post` HTTP call ( e.g.: trans_first_transaction_express ). I think it's useful in cases where gateways return codes outside of 200...300.. Looks like you meant to swap the placeholder keys for AVS and CVV results.. @curiousepic In the past I've totally skipped them when undefined.. Yep. The jumble of fields we start out with influence our grouping and structure in totally different ways. I guess this is where gateways with good docs and clear examples stand out by making things as clear as possible right at the beginning.\n\nI guess ExpiryDate being part of invoice rather than payment method is still an exception\n\n\u2b1b\ufe0f  \ud83d\udc11 . Separating out expiration to it's own method is definitely better \ud83d\udc4d \nif payment_method.is_a?(String) -- pattern is what I'm bit unsure about as it's commonly used to recognize stored tokens and may/may not cause trouble down the line when implementing store.. Looks clean overall. Could this one item MerchantReference be separated out to keep clear semantics. E.g.: def add_new_merchant_reference ( the new part is to market it different from the one extracted from authorization).. \ud83e\udd14  I forget order may be important and that's a reason it's living within add_credit_card.. Just thinking what would be the impact here if payment_method.is_a?(String) when someone revisits to add support for stored cards. At that point, they may have to add action as a param to add_authorization to do the right thing inside. Should be okay I guess.. Also this one, the live_url? :). Not sure if it's needed. Noticed capture does not have currency code unlike refund.. Is account_num likely to change per transaction. Just want to make sure it's better as an option vs a credential.. Cool \ud83d\udc4d . @davidsantoso \nBased off of the XML builder incantation\nxml.tag! <name>, <value>, <attributes hash>\nthe following\nxml.tag! 'Application', options[:application] || 'n/a', 'Version' => options[:application_version] || '1.0'\nhelps output a markup such as\n<Application Version=1.0>spreedly</Application>\nThe commas and || could be bit misleading but essentially it's 3 comma separated arguments with defaults for argument 2 and 3.\nCouldn't find a better ref: https://apidock.com/rails/Builder/XmlMarkup but it talks about tag! will also take text and attribute arguments (after the tag name) like normal markup methods.. @davidsantoso Reason is to target numbers that fall within CardNum and CVV2 tags only. Not including tag names as part of the pattern match may scrub off things like amount and order number?. Yep, the parens definitely helps :). @davidsantoso The start tag encompasses couple attributes.\n<CardNum CardPresent=\"false\" Tokenize=\"true\">4xxx3xxx2xxx1xxx</CardNum>\nHence the focus on >4xxx3xxx2xxx1xxx</CardNum>. Good catch. I'll edit that plus the parens before merging.. It's important that escape character \\n is enclosed in double quotes.. @activemerchant/spreedly-runtime \u261d\ufe0f . https://travis-ci.org/activemerchant/active_merchant/jobs/399726009#L596\nYou're right. It's the \".com\" at the end of the line that it complains about.. Rubocop unhappy with indentation of else relative to if. Open to ideas on how best to make it happy.. Rubocop suggests YAML.safe_load(). But using it throws an exception on objects referenced within the document.\n\nPsych::DisallowedClass: Tried to load unspecified class: Net::HTTPUnauthorized. \n",
    "curiousepic": "@rwdaigle Good to know! \n. @rwdaigle Whoops; likely a result of not pulling/rebasing before commit.  Should be good now.\n. @duff PR updated with those changes.\n. @duff Test added and passing.\n. @duff ooo, that makes sense.  Will implement.\n. Looking at implementing that also exposed some previous handling of non-fractional currencies that I need to reconcile with the new method as well.\n. @duff Removed previous handling of non-fractional currencies and related tests, and it's checking gateway's list of currencies. PR updated.\n. @duff PR updated with WorldPay-specific list.\n. Thanks for the heads up @jasonwebster; looking into a fix that supports both.. @duff Strange. I get no failures or errors with be rake test:units. AM is up to date. What command do you use, exactly, and what were the errors?\n. @duff Ah, got it. PR updated.\n. After consideration this is likely not needed, closing.\n. After consideration this is likely not needed, closing.\n. @duff Yep, PR updated with passing unit tests.\n. @wsmoak @mroach Thanks for spotting this issue and contributing, and apologies for the lag in merging a good solution!. Travis failure is Error: test_avs_enabled_and_provided(MonerisUsTest): ActiveMerchant::ResponseError: Failed with 503 Service Temporarily Unavailable It currently passes fine locally. Is there a way to re-run the Travis tests or should I resubmit the PR?\n. @davidsantoso Yep, updated remote test. Units and their mock responses would be another matter \ud83d\ude2c \n. @davidsantoso Yep, done.. @jasonwebster Ah, LGTM. Thanks!. @davidsantoso Good to go.. @molbrown @jknipp I think we would prefer request contents to be assembled before being passed to the commit method, rather than assembling them within a block. It would not take much refactoring.. I actually take back my original request after realizing this is how at least BlueSnap is built. I was only referring to how each action starts by calling commit with a block, rather than building up a param hash and passing that to commit. No big deal.. @davidsantoso @shasum Updated to more idiomatic request building structure.. @davidsantoso Yet another update; thanks for the feedback @shasum, I think I addressed everything! . @shasum Good catch, I've corrected them. Thanks!. @shasum Want to give a once-over and \ud83d\udc4d ?. @shasum Yeah I considered that initially. I thought this method would be slightly more resilient since it doesn't mutate, it just keeps the original values along for the ride.. @davidsantoso What's driving this change? Other 3Dsecure functionality doesn't seem to be supported yet, unless those fields also go in with customParameters...?. @shasum Thanks for the look over - There is a separate CIM-specific gateway which is unused by Spreedly, that those remote tests are for; this base ANET gateway had CIM txn flow integrated with it some time ago. Re: PO Number method(s), it's difficult to unify/simplify them further, given the multiple conditional dependencies \ud83d\ude15 . @shasum I tried that, but because it is also added outside the order element for normal transactions, it gets added a second time, because the transaction_type isn't actually enough for it  to determine which place it should and shouldn't go for every transaction type \ud83e\udd26\u200d\u2642\ufe0f ...if that makes any sense.. Well, that will then require passing transaction_type through basically every action, even though it's not needed in most of them. It seems as un-reason-able, if not more, than the split, isolated logic of the original... but not sure which is the lesser of evils. Anyhow this feels like an awful lot of time invested in a simple feature so I think I'm going to call it here, but totally open to revisiting it if I see other opinions - thanks for the effort!. Closed by https://github.com/activemerchant/active_merchant/commit/a7bf55caea9df1789d97d7ecd6509fe3a3915e08. Just noticed this method is used in one other gateway, Stripe.. Actually the unit tests test_successful_void and test_successful_credit  seems to be failing.. LG2M2 \ud83d\udc4d . @davidsantoso test_minimal_request now tests this implicitly, but an explicit test is also probably warranted.. Have we/can we request this new test account be enabled for recurring txns? Otherwise LGTM.. This looks good, but needs a correction in the test by including a :phone in the customer stubs.. @davidsantoso Good catch... not sure what happened there but it does seem to work fine. I'll switch back to that method.. Actually it wasn't quite that simple, but found a good similar method.. Is there any threat of getting the success state wrong, if the auth is successful but the capture fails for some reason, and we're merging params?. I see this is specifically for refunding a reference purchase/repeat payment; do any of the remote tests specifically exercise that situation, where this field would be required?. I'm rethinking this implementation after looking at their docs more closely, update coming.. @dtykocki @davidsantoso Updated with revised version. This disables AVS checking by default. This shouldn't disrupt anyone already using the gateway, since CreditCall does not factor AVS results into whether to fail a transaction, and AVS results have not been available in the response until today (https://github.com/activemerchant/active_merchant/commit/97c4a125705ca119a94e014fac558add98dba377). This simplifies the options and makes them more explicit.. @davidsantoso @jasonwebster Updated - also now passing XID, which similar to ECI doesn't seem necessary for most transactions but could be needed for specific ones.. @davidsantoso It is, hence the split methods for adding this info.. @nfarve Is the responsible sub-element required for all transactions or only for Brazil? This  implementation would always send this element since the name comes from the payment method. If there is some way to condition on the country, it might be best to restrict it to Brazil.. @nfarve Looks good other than the formatting mention.. I can't quite tell if there's something funny going on with this PR and the prior commit history, due to a fixup I did in this branch..... @davidsantoso I see, that's probably what happened. I'll close and straighten it out.. I'm actually reconsidering that this should in fact be a Gateway attribute. Originally I thought the value of this field should be specify-able per transaction, but since each PayU Latam merchant account is tied to a country, it will be the same for every transaction through that gateway.. Unfortunately there's no way for us to determine the country from any account info. PayU knows what country each merchant_id is associated with but there's no logic we can use for that. So it needs to be sent to AM separately by the merchant.. So this looks good, though the commit message is incorrect, since this allows the field to be passed in as an option, not pulling it from the payment method (PMs don't have phone attributes).. @jasonwebster That's true, and I'm actually looking to do something similar for another gateway. More gateways seem to be requiring a phone number usually associated with a PM, and there are some situations where having the option available is more convenient than relying on it being passed in the billing address. So, we could use options[:phone] || options[:billing_address][:phone] as a fallback. . For the record, Payeezy does currently look for and pass options[:phone] in its details element, which is required, for all actions, not just store. We're about to change that to my aforementioned options[:phone] || options[:billing_address][:phone] so as not to break anyone already using it that way.\nI also see it available as a top-level option for CardStream, HPS, PayHub, and Psigate.. @jasonwebster Funny thing, I've never seen that page until now \ud83d\ude05  I'm all about it though; I'll update it with a note about this sort of fledgling standard.\nLet me know if you have any further suggestions about standardizing this field, since it's definitely a minority among the others. Though as a note bolstering the case for this change, a handful of gateways also look inside billing_address for email, so phone and email both seem like fields that have use cases where it's desirable to specify independently of billing address.. @dtykocki \ud83d\udc4d  Definitely a good idea, updated. . I'm open to other ways of handling this.. Updated, addressed the points @deedeelavinder brought up.. Updated with David's suggested changes so far.. @ccarruitero Is this in support for store? FYI store isn't currently tested and I think not fully implemented yet. . @davidsantoso Travis is saying \"test_sends_american_express_as_amex\" fails. Updated to not default the field either.. Alright, back to defaulting since it seems a little more idiomatic for ActiveMerchant.. @bpollack No changes have been made but it is legit (Spreedly just doesn't have store support for this gateway yet). Apologies for the wait, all.. Updated with new test card values and remote test edits. @dtykocki Could use a sanity check that this actually does what we want.. @dtykocki Those two are known issues we've been er, politely accommodating for a while now. I did find and fix an issue with the remote tests that was causing 9 of the failures for me however; updated.. @dtykocki Initially I was bothered by not grokking exactly what the map, reduce, merge stuff was doing exactly and if any important field values were getting lost in that process, but that's just something I should look into. Otherwise, the repetition of the response creation code, and that it's housed in the action method (which shouldn't really bother me since commit ends up returning a response.. Otherwise looks good, this is probably the best we can do for now.. @deedeelavinder Well, Travis says lots of unit tests are failing since it they aren't expecting the additional semicolon?. There are many nuances to these items but after reviewing the ticket and attached info I believe this is all correct, aside from the preference of the empty string fallback for contactPhone.. Actually this is probably best as an open field that passes any value through. Revising.. Thanks for catching that \ud83d\udc4d  Updated.. I think the test changes had a side effect of looking like it has something to do specifically with Mexico when in fact it does not. This simply requires the payment_country field at initialization and removes support for allowing it to be overridden by an option field. Some of the countries do have their own specific required fields but I think the tests cover that well enough. I could definitely be more explicit in the commit message; I'll add some background.. @bpollack Updated commit message and addressed your concerns, have another look.. Yeah! Thanks for the lookover and suggestions.. Thanks @bpollack, addressed the suggestions.. @dtykocki Strange, yes I am using those. Perhaps it's an IP whitelisting issue? They are basically all failing with <\"The transaction was Declined (D4)\">. @dtykocki Cleaned up a bit. . @bpollack Updated with the alternation for the potentially double-escaped slash we discussed offline, and added a comment for the hard-coded test assertion.\nEDIT: Whoops, accidentally committed instead of amending, I'll squash.\nEDIT: Done.. And unit test added. One more thumb and I'll ship.. @dtykocki Mostly bang-for-buck while going through this batch of scrub additions, buuut I suppose it isn't that much extra work to do them in tandem... . @dtykocki Unit test added.. Updated, now with \ud83d\udcaf% less track data exposed.. FWIW, I don't think we actually support profile transactions.. @nfarve Pretty sure it applies in this case; the operative condition is that a refund is attempted but the transaction is found to be unsettled and so the initial refund method failed, so if this flag is present, we attempt whatever is needed to refund the unsettled transaction. Which could be a void, or could be some other method of refunding.. @nfarve So it doesn't look like the new functionality is exercised in any test, is that right? Would it be possible to mock a \"transaction is unsettled\" gateway response for a unit test for the new options flag?\nOops, accidental close.. I kept having a nagging feeling that I was misinterpreting how the pspReference was being handled previously and I think I finally understand it and I think it needs to be preserved (despite the fact that the tests pass with my changes). I'll rework my changes to incorporate the previous behavior and resubmit.. Thanks for taking a look @lyverovski. I saw that commit but didn't take a look at the PR. I'm working on a revision that is theoretically backward compatible with those (and changing the delimiter back to #), since I think the implementation in this PR ends up using the psp references of the capture for refunds (and weirdly, the remote tests work despite this, but I've seen stranger behavior from sandboxes).\nHowever, a confounding factor is that (for better or worse) most adapters using split authorizations have a rigid ordering to their elements, and the current implementation .compacts, which means that for any existing authorizations that don't have both elements present, there's no delimiter and we don't know if it's an original or normal psp reference. I can't quite reason whether this would actually matter though. Any thoughts?. @lyverovski Actually, I could account for the lack of delimiters by making captures and voids assume non-split authorizations are a normal psp reference, and refunds assume its an original psp reference. That seems like it would cover situations that are currently covered as tests.... Revised PR https://github.com/activemerchant/active_merchant/pull/2784. @nfarve Mostly since these fields don't come back in responses, but it doesn't hurt of course. Added.. I'm remembering some previous discussion on whether deletes should allow a body, with the consensus being that they shouldn't. See https://github.com/activemerchant/active_merchant/pull/2326 and https://github.com/activemerchant/active_merchant/pull/2348\nI don't know the details on this though (possibly a Ruby/gem version issue?) which may have changed since, so perhaps it's good to support now?. Commented out the unit test for the sake of Travis.. Revising this to make it a gateway-level option rather than options hash-level.. Updated; would appreciate another look from @nfarve @dtykocki and/or @deedeelavinder . @nfarve Even so, a stub_commed unit test that .check_requests the outgoing amount would be good.. Do we know if the field should in fact be sent for all transaction types (including ie void?). Code is good according to wiki, it was mixed up with PLZ. Merging.. Somewhat nitpicky, but maybe a unit test to confirm it's being sent? The remote test currently just determines that it doesn't fail at the gateway if the option is there.. They specifically said they could not.\nThis scrub method is the same as what Spreedly calls manually (externally) on QBMS transactions made today, and I've confirmed that those transcripts are properly scrubbed.. @bpollack I'll take readable over compact any day. Honestly, this was more about this .fetch sorcery being new/unintuitive for me and giving the logic room to breath past one line, but not a big deal, I do like it and might start using it more! Especially since the problem it solves is such a common pattern. At least, until we can .dig. Sure \ud83d\udc4d . @bpollack I was actually wondering about that hash creation, but assumed the tests were sufficient \ud83d\ude15New ones look great \ud83d\udc4d . @bpollack Wait, is there a reason there's no remote tests for extra_taxes?. Looks pretty good; this is a kind of convoluted adapter. Not seeing unit tests though, do you think they'd be worth it?. Added scrub for cavv. FWIW, I've also confirmed that any #{}s in the diff still occur only in \"s.. Also corrected quote style.. Whoops, didn't actually look at Travis, passes now, merging. Thanks for the \ud83d\udc40 @bpollack . Altered test_successful_authorization_with_extra_options to check for structure.. Should this be added to the scrub method in beanstream.rb?. Updated to actually pass the message instead of hardcoding it, and also a fix for a change in gateway behavior that seemingly was introduced since I started this branch:\nThis also fixes the verify_credentials call; a change at the gateways\ncaused the response given for a bogus url (url/nonexistent) to be a\nsuccess with a \"bad url\" message. Hitting the root url now seems\nsufficient to provoke a 401.. Actually I'm going to redo this with more robust parsing.... Nevermind, there isn't really precedent for what I was going to do and is probably not worth the effort.. Looks like this is added only for Store actions, but I think these visa card on file designations need to be sendable for any type of transaction that involves a card stored elsewhere?. @nfarve I don't think recurring in this case strictly means cards stored at Adyen... LMK if you want to chat to clarify.. Hmmmmm. Well, `store` does currently utilize https://docs.adyen.com/developers/features/recurring-payments/store-payment-details\n\nIt would be nice if they defined \"recurring\" a little more explicitly in their post.. Their docs show the field is supported for auth/purches: https://docs.adyen.com/developers/api-reference/payments-api#paymentrequest \nThis makes me think it should be passable with any transaction, not just when storing a card with Adyen.. @nfarve Cool, though looks like Rubocop caught an indentation issue.. I assume the test text there claiming there were only 3 Remote tests was a CP mishap and not some other funny business?. Just this :)\n\nInteresting about the equivalency to Android Pay payment methods. I wonder if the terminology will be updated in the future or if we'll have to always translate. Seems simple enough though. The final Travis test is failing for some reason, but otherwise \ud83d\udc4d . \ud83d\udc4d Still approved. @bpollack I am, but not sure how else to approach it without egregious jury-rigging. Any thoughts?. I'm not sure why tests didn't pick this up, but I think this breaks some error reporting. Closing for now.. @bpollack This now does truncate the reason_response_code for purposes of mapping to the STANDARD_ERROR_CODES hash. The other hashes contain only digit-only errors, so this method should not cause conflicts. I think it's good to go now.. Well... I'm still hesitant to make this change. And in fact, I added full_response_code a while back in https://github.com/activemerchant/active_merchant/pull/2924 and should be what we want - we just never made it available on our end, assuming response_reason_code was sufficient. I think I'm going to axe this in preference of exposing the existing full_response_code.. Looks good, though maybe let's get confirmation from PayU that it won't blow up with the other taxes and additional_values in there, since indeed their sandbox won't cut it, and their examples did not include them.. Missed this in the last sweep, I'll take a look!. While you're in here, might be nice to make the hash name CARD_COMPANIES more descriptive, perhaps CARD_COMPANY_BIN_RANGES.. @bpollack It was merged somehow, closing.. Looks like Rubocop is failing due to line length of the scrubbed response mock, though. You can add the file to the exceptions in .rubocop_todo.yml. \ud83d\udc40 . ~I dono how everyone else feels but I really dislike no leading space on comments, first time seeing that's an offense.~\nOh disregard \ud83d\ude04 . \ud83d\udc40 . Looks good, though I have the same worry as I did with GC, that the scrub method could potentially miss sensitive data if it appears in the interpolated response. Don't know that it would, but may be worth looking into.. Honestly the super-indented ifs are more annoying to me... not a strong opinion though.. Whoops, closed by https://github.com/activemerchant/active_merchant/commit/8e230ded182d3ff109d7617ecf9e21efc6811ef3. @bpollack Seems fine, still approved.. Open to other methods of handling this.. @bpollack Updated with a slightly different tack, LMK what you think.. Yep!. Actually, I just realized, a phone field often comes in from options[:billing_address][:phone], so we'd want to default to that, and then check for a possible options[:phone]. I think this is a common pattern in other gateways so you can check others for examples.. Yep, at least in our case. When Core sends a request to AM, the billing_address hash option is filled in with any details we have from the payment method, including phone. So we probably want to allow overriding, by also adding a new top-level options[:phone] GSF as you were planning, but also default to the phone in the billing_address if the top-level one isn't present. This is a pretty common pattern.. LGTM \ud83d\udea2 . Updated. Still needs some in-built logic since two of the values go into the same tag (unless there's a smarter way to add a second value to the same tag?). Let's add the new fields to scrub.. Well, I've never been clear on whether they really should be, curious to hear your opinion on that.. I think the unit tests look good, though with the extra MPI craziness I can't quite tell if there's a permutation of request/response scenarios that isn't covered (that could be). :not_sure_if:. Misreferenced PR # in commit, closed with https://github.com/activemerchant/active_merchant/commit/5dad76ca2fd20d1498b8e7c1c2ccd74380dac391. Given the state of remote tests, is there any way to ensure we're scrubbing acct and routing numbers for refunds with bank accounts?. I'm just thinking that sometimes gateways have different field names for different actions. Given the absence of remote tests, do we know for sure what the response format and field names are? It actually looks like no prior remote tests cover bank account number and routing number for the scrub at all. It could just be that those numbers are never returned in a response, but I'm just thinking protectively here.. Looks good, but let's add unit tests for these features.. Small rubocop violation on the stubbed response.. @nfarve \ud83d\udc4d aside from another small Rubocop complaint. Closed by 4ba8ec0789fd297b97a1c9cbfb118acabe534bbe. I don't have any obvious concerns here, but I feel like it could stand a second opinion so I'll let someone else approve.. Any particular reason remote tests are their own file? I'd think we'd want to have them in the main test run so there's less of a chance something would get missed if a future change impacts them.. @nfarve Ah, I didn't notice/forgot about that (which kind of demonstrates my point \ud83d\ude2c), but it does make sense.. I think it's related to this change in Rails (for Rails 6): https://github.com/rails/rails/commit/1b7c3222e86b98ce886110ae0860ba62e35e2299#diff-4be3c90df95ede75a8d48016f370c0d9, but I'm not sure how we'd go about resolving it. I don't think it affects us, at least.. @nfarve Travis will be fixed by https://github.com/activemerchant/active_merchant/pull/3091. Closing, will add calls to localized_amount for the other amount fields and fix the tax_amount call value. Scratch that, I'm removing localized_amount from the tax_amount field, passing all straight.. Yeah looks like the create_transaction_parameters is too long for Rubocop. Do feel like it should be broken down into sub methods; I'll look into that so we don't perpetuate this failure.. @molbrown Refactored create_transaction_parameters, give it another once-over? I'm not too concerned with the Travis failures right now.. Or wait, does this actually support an array of sub-hashes? Shouldn't line 175 be items = []?. Oh duh, got this mixed up with Bluesnap. \ud83d\udea2 . @jasonwebster Sorry for the wait; I agree this is not optimal. This aspect was not brought discussed in the PR, so the current behavior was likely not fully considered, rather than considered desirable. And nothing comes immediately to mind that I would prefer over the proposed change.. So, (sorry I didn't think to mention this earlier) but I think we want to keep the AM-level codes to the standardized list: https://en.wikipedia.org/wiki/Address_Verification_System\nLet me think about how to reconcile that.. It may be possible and desirable to override the AVSResult module's MESSAGES hash in the adapter to include the Adyen-specific codes and messages, instead of adding them directly to the module.. Small Rubocop violation caught by Travis.. Are Level 2 fields actually part of this?. Only one gateway code did not map correctly to the standard CVVResult codes.. @jknipp A better solution for this metadata would definitely be a nice to have, it's one of the things I was going to bring up in standup. But we're already pretty entrenched in it.. But nice work wrangling some complicated dependencies into a semblance of order!. This looks good, though there are a bevy of rubocop violations to clean up.. Not a big deal but it might be nice to pull out the endpoint determination (sipp or dts) into a method and set them as  a variable in the urls instead of splitting and duplicating relevant actions into an if/else. Up to you.. I had the thought that, since Orbital has more msgType values than the ones implemented here for the situations Spreedly will using, it may be desirable to allow the GSFs to override the normalized hash when provided, rather than the logic dictating that only either the normalized hash or the GSFs are used... what do we think about that (here and more generally)?. Updated with GSFs overriding the normalized hash, as well as a unique msg_type for the initial transaction that I missed the first go round.. @davidsantoso I had something like that in the previous implementation, but it wouldn't allow piece-wise overriding, which was my primary reasoning behind overriding at all, in order to utilize the normalized hash for everything except message types that the normalized reason_type doesn't cover.. Hmm, I wonder how common these other types are; and honestly it's difficult to tell whether they are proper reason types, or just a situational combination of all the factors that the gateway wants us to specify. They are:\n\nCardholder-Initiated General Transaction\nSignifies cardholder-initiated transactions that can support various merchant-initiated transactions.\nExample: A cardholder-initiated authorization that the merchant may later use to request a re-authorization.\n\nThere is virtually no other information on this type. I don't see how it's different from an initial Cardholder-Initiated Transaction (which is distinct from an initial cardholder-initiated unscheduled, recurring, or installment), unless it needs to be specified explicitly  in order to allow Merchant-Initiated Reauthorizations. And if so, should this just be the default for initial transactions? And how would it it fall within the recurring/unscheduled/installment designation? \n\nMerchant-Initiated Resubmission\nSignifies when a merchant performs a resubmission in cases where the merchant requested an authorization, but received a decline after the merchant has already delivered the goods or services to the cardholder.\nExample: A merchant receives a decline due to insufficient funds after already shipping goods and performs a resubmission transaction to obtain an approval.\n\nThis... seems like a headache to handle either in the hash or in AM logic.\n\nMerchant-Initiated Reauthorization\nSignifies a merchant-initiated re-authorization.\nExample: Merchant receives an order for several items totaling a specific amount. The items are shipped separately and split shipment transactions are created for each shipment.\n\nHeadache.\nI think these are not true reason types, with the possible exception of \"general\". So I don't think there's a place for them in the hash, but if a user wants to utilize these, overriding with GSFs should allow for all of these situations, and if they don't care about them, they're free to go all-hash. Bad field combinations should return a useful error message from the gateway, so I don't feel too bad about allowing mixing and matching. And I think mixing and matching is preferable to binary only-hash-or-only-GSFs, so the user doesn't need to bother sending in anything but the expected message type.\nMaybe not something we want to perpetuate in future implementations, but it seems helpful here given how different Orbital's expectations are with the majority of other gateways.. Brought up a few considerations but overall this looks great!. Inquiring about current test creds, but thought I'd throw this up for early scrutiny.. We would also want to cut a minor version before merging this.. @jknipp Good question; we could certainly have taken that path when implementing v28, but it probably doesn't make sense to move to it retroactively in this case. That said, I'm not sure if there are any instances of inheritance strictly for versioning of the same API; I think more often there are common core elements used for multiple endpoints with different functionality.\nEdit: Quickpay does do this for versioning.. Looking good. Don't forget test run output in the commit message.. @bayprogrammer Ah, not a big deal, I'm just used to reviewing theoretically final commits/messages (this was not submitted as a draft AFAICT), and changes due to review being amended to it.. I was originally going to wait to push this until we renamed the two adapters, but I think it's safe to go ahead and make this update before that happens. Here's the PR for the first step of renaming: https://github.com/activemerchant/active_merchant/pull/3160. The distinction between this parameter and merchantOrderId is a bit vague and meant to be whatever the merchant wants. Passing merchant could be a good use, but I think it's meant to still refer to the transaction specifically.  Could concatenate merchant + orderid.\n\nmerchantOrderId\ninteger (10)\nYour order ID for this transaction that is also returned in our report files\nmerchantReference \nstring (30)\nYour unique reference of the transaction that is also returned in our report files. This is almost always used for your reconciliation of our report files.\n. Will do.\n. Good catch, meant to strip out the conditional there.\n. Many other adapters use the regex there, but now that you point it out, this should in fact be \nraise e if e.response.code.to_i >= 300\n. Will do.\n. Something made me think any server would be on GMT.  Obviously not, good catch.\n. errorId is a unique string that refers to the attempted transaction; [errors][code] gives a meaningful response that theoretically aligns with the error message. \n. I'm still fuzzy on MultiResponse and its arguments, but that sounds right. Would the same be true of verify?\n. It's not, good idea.\n. Got it; that helps.\n. I had changed this when I began working on the update a month ago and honestly don't know why.  Remote tests pass without this nesting, so I will remove the change.\n. Will do.\n. It's not, just noticed it and tidied it up; but in fact it probably works without .has_key? which would be even tidier.  But I'll remove it since it's unrelated to the feature.\n. Hmm.  Stripe's list only has one currency that is not contained in gateway's list. And I did not see IDR called out anywhere else. \n\nCurrently, only Sagepay calls gateway's list instead of their own.\nIn any case, it won't hurt to have a WorldPay-specific list, I'll go ahead and switch back to that and update.\n. @davidsantoso In looking into that, I realized the shipping fields needed to go in the same element as the billing address fields. But apparently even after that fix, no shipping fields are returned in a response. Now I'm not sure if that's intended or if it's still not being passed correctly. Investigating...\n. @davidsantoso I think that's the expected behavior; in fact it only returns the first line and zipcode of the billing address in the response as well. PR is updated with the address element fix.\n. @davidsantoso  Really only because this was the way it was already being constructed for Apple Pay and I was in context. You're right that either would work. I could switch to name for both if it makes more sense.. @davidsantoso Brilliant! Updated.. I'm not sure I see how it would hit an exception in that case. Won't it just kick to else \"No error code available\" if there's no statusCode? Testing seems to confirm that.. The first if is in the same position. I'd be fine adding it across the board though; kind of wondering why I don't see it in more places.. Gotcha \ud83d\udc4d \nAny idea what's up with the Travis failures? Some kind of missing gem/dependency.. @davidsantoso Theoretically it works and is needed for other test accounts not using GBP, so I thought I'd leave it in. I'm fine with uncommenting it and having one failing test, though.. Good catch, this was an oversight; best to pass it along since it is accepted.. iVeri doesn't support AVS or seem to return CVV \"results\"(?), so these were untouched defaults. I'm not sure what's best to replace these with in that case... (some other gateways still have these defaults). Hah, I originally shied away from this because there were a lot more potentially accepted params in between each of these that ended up not being required, but which obscured the grouping that is now obvious after removing them! I guess ExpiryDate being part of invoice rather than payment method is still an exception...\n. Hmm... This still ends up being pretty messy in practice. Yet another alternative is to have separate add_action_params methods for each action (and possibly sub-types within) them. It's hard to know what to optimize for here. Anyhow I'd like @davidsantoso's perspective as well.... Hmm, this isn't terrible, with some guard clauses...\n```ruby\ndef add_params_in_order(post, action, money, payment_method, options)\n  add_amount(post, money, options)\n  add_expiration(post, payment_method, options)\n  add_references(post, action, payment_method, options)\n  add_credit_card(post, payment_method, options)\nend\ndef add_amount(post, money, options)\n  return unless money\n  post.Amount(amount(money))\n  post.Currency(options[:currency])\nend\ndef add_expiration(post, payment_method, options)\n  return unless payment_method.respond_to?(:month)\n  post.ExpiryDate(\"#{format(payment_method.month, :two_digits)}#{payment_method.year}\")\nend\ndef add_references(post, action, payment_method, options)\n  if payment_method.is_a?(String)\n    post.MerchantReference(split_auth(payment_method)[2])\n  else\n    post.MerchantReference(options[:order_id] || generate_unique_id)\n  end\n  post.TransactionIndex(split_auth(payment_method)[1])  if [:capture, :refund].include? action\n  post.OriginalRequestID(split_auth(payment_method)[0]) if [:void].include? action\nend\ndef add_credit_card(post, payment_method, options)\n  return unless payment_method.respond_to?(:verification_value)\n  post.CardSecurityCode(payment_method.verification_value)\n  post.PAN(payment_method.number)\nend\n. After some sifting I was able to break things down into a more idiomatic structure with fewer conditionals. The potential downside is it may be less easy to extend in the future if we need to fit in additional request fields or modes. Updating the PR.... https://www.propay.com ?. Should this (and the one in `capture`) be `amount(money)`?. Not sure how I feel about having both these direct additions to the xml in the action methods, _and_ the one-line `add_account` and `add_recurring` methods extracted. Not a big deal though.. Doesn't accept 0-value `authorize`s?. Any best practice for options passed to a gateway that are boolean being `true/false` vs the value of what's actually passed to the gateway? Or are there more options than `Y/N`?. I think that does make sense; I'll try to remember to follow that in the future.. Slight inconsistency, unless there's some logic nuance I'm missing: `CREDIT` is sent from here to the `build_credit_request` (which just passes it to `build_xml_request`) for both `refund` and general `credit` actions, but the transaction type for other actions is sent from their respective `build_` methods.. Otherwise, LGTM!. Maybe extract to a method since it's used twice, at least?. This is weird. Is it a refund-only thing? . Ugh, gotcha, I'm cool with that.. Indeed that works. I was thinking that it was set to use the first response for error/message reporting purposes during the process, but removing it doesn't cause any negative remote test failures, at least.. FYI Stripe does also call `.responses.last`on the MultiResponse. Might be extraneous.. Well, there are plenty more that just don't specify use_first and just return the multiresponse, so I'll go with that and merge if you think my imagined error reporting concerns are safe.. I know it's what was being used before, but pulling name straight from options is a pretty rare pattern. Since this method is called only when adding a credit card, I think the preference order here should be switched.  Otherwise, LGTM \ud83d\udc4d . My only hesitance would be if anyone was already transacting in 3-dec currencies with a gateway that does't consider them to be 3-dec or don't need special formatting.. I did this for clarity in readability. Would it have any \"logical\" impact?  I'm fine reverting it on the off chance.. \ud83d\udc4c . I'm not positive of this, but might a card/check not have a last name?. @dtykocki Ah, I did not see the validation at first, but I found it \ud83d\udc4d . Sounds good - updated and added a guard clause in the method.. Looks like this section was hit with some indentation shenanigans.. Small thing, but I'd go with `test_avs_with_no_house_number`, and generally favoring underscores over concatenating words like this, for readability. Long, explicit, descriptive names for methods and tests are fine! . @deedeelavinder True, the `tx` for `tx_tax` and `tx_tax_return_base` is extraneous from the perspective of the transactor, probably worth changing.. Is there any reason to not send an `order_id` with all transactions? Most test suites include the `order_id` in the default `options` hash.. Cool. I think `order_id` is typically considered part of the minimum.. @davidsantoso There are; it's a pre-existing gateway specific field.. This isn't just for debugging, I added these `puts`es to aid in certification - running the cert test will output all the txn_ids needed to provide to Vantiv and which test they're associated with. It's conceivable this would need to be done again in the future.. (note the certification test suite is separate from normal remote tests). @nfarve Here's a past example of what I've done in this kind of situation: https://github.com/activemerchant/active_merchant/blob/9c44975612deec9d6795d1ff385071a9ae5106ae/test/remote/gateways/remote_global_collect_test.rb#L79-L95. Do any of the remote tests exercise this condition?. This would overwrite any `auth` params with params of the same name from the `capture`. Just want to make sure that's safe in this context?. \ud83d\udc4d . Hmm, interesting thought. But they do not refer to the schema version as `PTI71`, that's just the format it's expected in for the schema validator to pick up. This way seems marginally more readable, though I suppose it's possible the gsub could break somehow.... There seemed to be an equal number of both in use for other gateways. I actually wasn't sure if Spreedly sends any legit boolean fields to AM. Happy to change if we do, it would be cleaner.. unless it was sent as `\"false\"`, which would still add the element and activate AVS.. The presence of this field is required, but a value is not.. It could be exposed to an optional field, but unless we want to, the docs say \"the ECI Indicator field can be left empty and the appropriate value is derived by the gateway. \". I expect they're more likely to fail if the incorrect one is sent than to let it decide from an empty field.. @davidsantoso @jasonwebster Sounds good. I didn't actually realize it was a standard attribute on `NetworkTokenizationCreditCard`. Unfortunately their test endpoint seems to accept any old value for this field so I can't properly test what happens in strange situations or brand combinations but I will pass it along if the card has it.. Let's move the addition of this sub-element to the `add_customer_responsible_person` method.. I think `add_customer_responsible_person(post, payment, options) if post[:payment][:country] == 'BR'` would be slightly preferred despite being a long line.. Sorry one more thing, I think the creation of this hash/subelement is implicit in the line below, so this isn't necessary. This pattern of first instantiating an empty hash is more often seen when you return the hash itself at the end. But here we're adding further structure directly to the base `post` hash that's already available.. Hah ...or I could just be completely wrong! I guess it doesn't like adding new elements two-deep. Merging!. Blank line here. Minor point but this is the same phone as the old one, so it's not technically testing Update.. Nope - this test is updating the info stored with a card. It is first `store`d with this value for `phone` on line 526. And then in the `update`, the same value is sent for `phone` here. So it's not testing that it is truly updated because there's no change in the value.. Let's actually not look in the shipping address for this, since it could be different from what it should be, even if it isn't provided, in which case the user needs to add it to the options/billing address.. @deedeelavinder Good catch, went back and forth on this a few times and overlooked the final field name. Thanks!. \ud83d\udc4d . Nope \ud83d\udc4d The method probably be named something other than \"add_billing_address\" too, since it's only returning it.. Yep. The shipping address could be somewhere else, so I think it's not validated.. After inquiring with PayU, they indicated that the per-country required fields refers to the country of the merchant account, not the billing address. I agree it is strange.. Unfortunately either the sandbox isn't accurate, or the PaymentCountry field is not truly required for a successful transaction and is more of a soft requirement from PayU, because even without adding the field, remote purchase tests succeed. . So this test is more checking that the (supposedly) required country-specific fields are added, rather than that the transaction succeeds.. :facepalm: thanks.. @davidsantoso I `check_request` for them in unit tests when they are options but I can add the check for overriding the billing address. It's possible they could add actual checking to their sandbox, so I'm not sure the remote tests should be removed though.. Do we want a failed refund remote test? Or does it not actually trigger in sandbox?. @dtykocki I wonder if that means we should count 500s as failure. I've seen some adapters do that.. So, a shipping address may be available independent of specified buyer data, so even if the payer's info is substituted in for the buyer fields, they may have specified a different contact phone number for shipping. If there is buyer data provided, the contact phone number should only be picked from the buyer's shipping address. Does that make sense?. Slight misnomer. `add_creditcard_for_tokenization`?. and/or does it make sense to DRY this with `use_creditcard`/`add_creditcard`?. I think `add_` is more idiomatic in AM than `use_` which is less informative..\nWhoa\n       Indents\n``. Most adapters just let theAuthorizationbenil` for a failed txn and I think we can let that be the case here too.\nAlso just FYI \"Authorization Failed\" wouldn't necessarily be accurate, since the word could mean the \"Authorize\" action, or a response reference for any action type, which is what it means here.. \ud83d\udc4d I'm sure there are exceptions, but IME methods that directly adds values to the hash that will become the request is named add_. . I think it's reasonable for them to both call a separate method for the card data itself (something like card_data), adding a hash it returns to the appropriate element. I think some gateways do this, though I can't seem to find an example. It's not a big deal though.. Hmm. If reference purchases were ever implemented, this could collide with those, since they are not tokens. Maybe premature optimization on my part.. Hmm. Checking if transaction_type is store might be more readable/reasonable? Same with endpoint above.. Whoa .to_query :mind_blown:\nThat said, I think we're trying to reduce dependency on ActiveSupport, so you might check out how some other adapters construct queries.\nSame with blank? and present? below.. Good catch - at first I thought these were static, public values from https://developer.payeezy.com/payeezy-api/apis/post/transactions-14 but those must be example values - api_key is a credential, and it looks like the gateway needs to activate the ability to store on a per-merchant account basis. That might be how the js_security_key is provided? . I know it was assumed in (my) current code, but I don't think there'd ever be an address[:houseNumberOrName] or address[:street] field sent to the adapter, so I think they can be removed. I think I was anticipating needing this split (which this commit is taking care of), but these fields wouldn't be sent in any of the options' address elements.. Though that begs the question if we need top-level street and house_number fields for both billing and shipping address.... Their documentation uses downcase so I figured better safe than sorry.. It might be good to either .check_request the fallback parsing of the address1: '\u65b0\u5317\u5e02\u5e97\u6eaa\u8def3579\u865f139\u6a13' here (even though it's not perfect), or just remove the test, since there's not much point in testing the success of the unit test mock transaction.. In fact I'm not seeing either payerId or identificationNumber fields in their documentation at all; they may have changed since, or erroneously added, to the initial implementation. I assume your remote test passes with this, but honestly their sandbox is extremely permissive, so I'm hesitant to take it as a confirmation.\nCould you link to the documentation you're using?. Yeah it's kinda difficult to determine, which probably means there's no standard. I think I'm in favor of keeping the option field verbatim to the actual request field sent until there's a more concerted effort to standardize.. Typo in shopper_name. I think it does as well. Typically I add a || creditcard.name as a fallback in these situations.. Though I see with the requires! it would never trigger... . What's the purpose of the order_id check?. And yeah it's more common to check the fields individually than with a requires! block. We usually let users send whatever they have and leave out what they don't, and get a error message from the gateway. Depends on how the gateway responds to missing or blank fields.. Now without the requires! we can at least be helpful with a fallback like || creditcard.name. I think that's fair \ud83d\udc4d . After playing around with it in irb to confirm, I believe this still assigns the second value in the string (ReferenceID). You'll probably need to specify the number of underscores matching the number of values that precede the SubscriptionID on the end.. What she has is actually what is desired, at least according to the ticket. Though looking at the ticket I'm getting a sinking sense that my summary of what should be done is not actually what the customer wants. I'll come back to this.. In fact, after reviewing the ticket again this is in fact what is basically desired, however it is likely best to send an empty string in the case of neither field being available.. Oof, good catch.. Updated.. Hrrm. This will break if we have to add yet another thing to the end of the auth. A positive reference might be better ([6])?. Are you sure? The semicolons should still be added.\nOh I see why, the auth string is being compacted first (it was originally implemented that way) https://github.com/deedeelavinder/active_merchant/blob/8afd6a18a2118b85a871e56c534031c258a6ac72/lib/active_merchant/billing/gateways/cyber_source.rb#L712\nThat should probably not be done.  It doesn't look like that would impact any of the other splits, but it is worth double checking.\nIt might be nice to pull out it out into its own authorization_from method like other gateways, too.. I feel like it's a slightly more common pattern to pass the full options hash straight to commit.  Then you can call the url method further downstream, and then it's available for anything else that might need an option param.. Maybe name it @test_options?. Did you check if they allow auths for 0?. I might consider mapping these action codes to readable aliases.. Mostly thinking that often when adding options later, we need to condition on actions, and it would be less confusing then, but NBD.. I think we may want to have the option to flag txns to either go through their 3DS system or not at all. It looks like this always defaults to attempting 3DS?. Also, Authorizations should be available for attempting 3DS in addition to Purchases, if that is possible on the gateway end.. Chatted offline about this and it looks like this is the way to go, since the determination of \"3DS flow or not\" is restricted to the merchant account level. \ud83d\udc4d . Yeah I thought I would make the quotes more uniform while I was in here because they were bothering me.. It's running against the Mexico-specific gateway local variable created on line 281.. AFAIK, it's required for the .check_request below.. Fair points; I got which were required for interops swapped in my head.. Probably a bad find and replace...ment.. I see! Thanks.. Conflict?. Oh, sorry if I caught this between updates.. @dtykocki For my own edification as well, since I don't think I've seen it before, do you have an opinion on this pattern vs. something like a more conventional verbose\nresponse['transaction']['id'] if response['transaction'] && response['transaction']['id']?. I think we might prefer to pull the user_id from options instead of requiring the user to concatenate it to the token when passing it in here.. Wait, does this not just return a bool?. Ah it returns the value for the last argument. Neat.. There may be a better way to handle this and 468. Their current state is based on the preexisting line 173 above. It gets confusing with multi-responses, \"use first response\", and \"primary responses\".. \ud83d\udc4d Good call.. Tiny nitpick, align options to match indentation context (or unalign everything else \ud83d\ude05 ). I tried a few iterations of this and gave up on making it more elegant, so suggestions are welcome. Part of the annoyance comes from it being inside a case.. Sounds good, thanks \ud83d\udc4d . Very good call, that revealed a sign error. Updated.. Hard coding this isn't... optimal, but since the login and password creds are the same, referring to the value programmatically will flag a false positive for not scrubbing the login. Suggestions welcome.. Whoops, good catch.. Removed.. Should this only be if amount, since it may not be provided if it's a full refund, and sending it as nil might cause an issue?. Might be nice to use the convention in most other gateways and call this method split_authorization.. I'm not sure I follow this conditional. So we'd return a failed cancelDeposit response if the authorization used for the refund didn't have one of the two ID numbers? Could you clarify why?. Hmm. Incoming sophomoric opinion expression: Instead of this method that mutates a bunch of stuff, I think it would be a bit cleaner to have an explicit method for building a cancelDeposit transaction and an explicit method for building a refundSingleTransaction transaction, and the refund method would then call build_refundSingleTransaction if build_cancelDeposit fails. It would also make it easier to call one or the other individually, if we need to do that in the future for some reason. \nMaybe premature optimization, and I don't know if you looked into that already and it wasn't as simple as it sounds, but consider it if not?. Gotcha, that make sense.. It would be nice to have that info in the commit message for history/context.. We'll want to add this field to the scrub method. I know Github can do weird things to how these diffs are displayed, but wanted to make sure that these lines 113 and 114 aren't missing from the above test, and same for 202/203. And the scrub tests too, preferably.. Doesn't authorization_from stringify them?. payment.verification_value errors when payment is a string, so I restructured it this way. There is probably a more concise formulation though... hmm.. The alternatives I've come up with are just less readable, for not much benefit. I'll go with this unless you have a specific suggestion.. Yes, it needs to be added both when a card is sent to be stored, and when a stored card is used for a transaction. No better way to add them in both situations is occurring to me right now but I'm open to suggestions.. Whoops, no, ty.. fixed. What's the case for relying on this flag instead of trying to void if unsettled,  by default?. Interesting, I hadn't seen those in use before... It doesn't look like Spreedly utilizes them? \nI also recall another update recently that fixed a very similar issue where a transaction may be unsettled and need to be voided instead of refunded, but I can't seem to find it... I don't think that used a flag like this.. Ah, yes. So perhaps that should use this flag as well if we want to begin using it.... Nope, good catch!. Removed unnecessary options params.. so the presence of the cookie and session are the only things flagging a request to attempt 3DS? Weird.. Yes, meant to remove it. The scrub call was just some manual verification.. Updated, good catch.. They are supplementary checks. It's not clear if/when a ...123 response will be received and when it will be all digits, so I want to make sure both are covered.. I guess that's just an artifact of the test/sandbox and it isn't actually relevant, and even if not, it's sufficiently obfuscated, so I'd be happy to remove them.... It might be worth considering concatenating \"transaction_message: error_type\" in this case, which we do for some other gateways. Unless we know there is no transaction message if there is an error.. A bit nitpicky, but it would be a little more compact and DRYer to just call the add_billing_address method here, and put the conditional/guard clause and [:billing_address] field creation into that method.. \"No error details\" might be a little more explicit than \"No details provided\", which might sound like the error was caused by some missing details in the request.. Nitpick, it would be clearer for this to be on line 60, right before the full refund is made.. I don't think it's possible to be sent as empty, given the conditions... if there's no options[:selected_brand] and it's not a NetworkTokenizationCreditCard, the field doesn't get added, otherwise a value will be present.. Honestly I think the currency method should accept options and build in that conditional, but that's for another day. It doesn't otherwise seem to be extracted for any other gateways, so I'm somewhat inclined to leave it as is, at least for this commit.. Do we want to keep this, or the url construction method that seems unused? Or is cardsecure integration still coming?. Nitpick, but this kind of makes it look like a concated split auth, when it isn't. Maybe pull the conditional outside of the interpolation string?. Oh, hah, it is concating. In that case, the opposite of what I said; separators for most split auths are single character.. This is still splitting on ||. Weird, did this fail before the change?. Ah, right.. I was also thrown for a loop by this and this was the result of trial and error, so your confusion is a good signal that I should take a step back and really learn what's going on. @options[:meta] doesn't find anything when used here. Previously, the headers method pulled it from options[:meta]. I'll root around a bit more.. I think I know what's going on here, though it's kind of a doozy to explain. Here goes. When the gateway was first added, commit called headers(options[:meta]), and headers had meta.to_json for the appropriate header, anticipating a meta option field being passed to it. However, none of the calls to commit passed options. So that has sat there doing nothing since then. But headers also called options[:key] and options[:version], which, in the absence of a local options, apparently resolves to the global values? I'm still not sure why that happens, but I've confirmed in pry. \nIn any case, my confusion led me to think the Metadata header actually wanted the global options hash, which.... no. So I'll restore it to look for options[:meta].. @bpollack Done, and added test for options[:meta]. Yep, since I need the local options also, I had to make this distinction.. Nitpick - add space before commit line. NBD Nitpick - this kinda breaks the pattern of creating an empty hash and adding the fields to it piecemeal found in the other action methods and most other gateways. . Hmm... did you consider using a MultiResponse for this instead? . Ah... well, same here TBH, this is fine.. Yep. Could be part of the commit method or it could be part of the actions, ala an auth+capture purchase. I'm honestly not sure if it's a good idea yet, but it seems like a pattern that already exists that we're recreating from scratch here. There could be a qualitative difference I can't see, though.. I don't see where/why it would be defined before this point...? I guess I am generating an interstitial envelope and its own subfield at the same time, though... is that a nono?. I don't know if this was intended to go in with these changes, but it looks fine.. This won't overwrite if the name is an empty string, not sure if that's possible, but worth looking into.. \ud83d\udc4d . Should probably also be added to the example transcript in the scrubbing unit test. Gotcha \ud83d\udc4d . Isn't maestro is a legit brand in AM, supported by the adapter? Why do we need the ability to overwrite?. I see. Perhaps the commit/changelog wording could be more accurate re:overriding?. I see now, kind of ignored that [:TX_VALUE] on the end there. They do also include currency in the example (despite saying it's ignored), but we can go with this for now and address any further issues as they come up.. Are there any further dummy numbers you could throw in here for exercising the recognition, given its complexity?. Well I'm mostly thinking that in this context it doesn't really matter if they're test cards or not, as long as they qualify for the matching criteria. Right?. Anyhow I'm fine with it if you think the logic is sufficiently tested.. That's what I thought initially but second-guessed myself, restoring.. I'll check.. Unfortunately no, this is probably safer.. SOMEONE \ud83d\ude02 . I'm trying to figure out if it's possible that the contents here might elude scrubbing... \ud83e\udd14 If you're unsure as well, it could be tested.. For some other gateways we return a slightly more elaborate response which includes the raw html (or whatever), such as the one @molbrown recently added to Global Collect. Not strictly required but might be nice to add while we're in here.. Wait, wouldn't this calll build_credit_card_data if the pm is nil? That seems like a behavior change.. Actually we need to be checking for either case. &.empty? lets nil through.. Interesting, because how I described it is how it seemed to behave in testing. I'll experiment some more for the sake of understanding.. So the thing is, in your example, we want 'hello', but it's resolving to nil instead. It's not actually evaluating truthiness. In the adapter, if address is nil, it still continues to the next line instead of actually returning parameters.. I think the confusion lies here:\n```\nnil.nil?\n=> true\nnil?.nil?\n=> false\nnil&.nil?\n=> nil\n``\nand apparently the same is true forempty?`\nhttp://mitrev.net/ruby/2015/11/13/the-operator-in-ruby/ in \"pitfalls\"!. Aaah, ok gotcha. Nevermind the above \ud83d\udc4d . Noted. I wonder if the expected processing time saved would actually be more than it takes to run remote tests again!. I don't think there's much advantage to a check in map_address since if it has name and phone and nothing else, it's not nil when it's passed. And the if options[:billing_address] already weeds out fully nil hashes. Right?. Looks good, but if we want the GSF to act as an override, it will need to come first in the || check. Parens are also unnecessary for it.. Nice, I thought that might be it as well. A couple small things that probably may not be worth changing for this:\n- This is a good use case for the .dig method (new to the recently updated ruby version) https://ruby-doc.org/core-2.3.0_preview1/Hash.html#method-i-dig\n- Usually we don't bother sticking to the 80 characters per line in adapters, but NBD.. Let's make this more descriptive, something like test_successful_purchase_without_phone_option. In fact I'm not entirely sure we even need/want these methods, rather than just passing through what is present. Currently since they aren't validated in the sandbox, I don't know if partial info would fail or how, but since we're basically leaving all this behavior up to the merchant, I don't think there's much harm in it.. They do in theory, just takes time.. Do we want this here?. Er, this might be specific to the Braintree gem?. Just to verify (since this is not true for Worldpay), are all three fields actually required in both initial and subsequent cof txns?. Are we sure these name fields come in as top-level options? A check PM  has a name already, might want to take that first if it's present.. I seeee, because refund actions don't usually ingest a PM. Hmm \ud83e\udd14  OK.. We usually add them to AM, there's no reason to keep them private at least for dLocal. In any case, they're public now :). I think it defaults to false, but there isn't much of a difference.. Nice catch.. Is this method actually getting called?. Missed a spot. Yep, in https://github.com/activemerchant/active_merchant/blob/35666a09c074ebc2c7e09f9cfa2cb8d1fc4c9e70/lib/active_merchant/billing/gateways/braintree_blue.rb#L318-L337. It's probably unlikely, but if it's not, it will cause a descriptive gateway error rather than an AM error, so I'm ok with that.. Most other adapters follow this pattern instead.. I'm not following why this is !=...? Seems like it should just be =. This also means the test might not be sufficient. Unless I'm misunderstanding this.... It's set to nil by default https://github.com/activemerchant/active_merchant/blob/6ea353a450fd48c1df7c539e698327bd5ac40e0d/lib/active_merchant/billing/gateway.rb#L142. I sorted out my confusion, but in any case I don't think we need to check Gateway's value.. If it's not different, application_id would already have inherited the default value, right?. Gah, got it. I don't know why this was so confusing for me but I'm better now. \ud83d\udc4d . This was giving a \"incompatible country data\" error so it needed to be in line with the default test card data.. I don't think so, shouldn't be a big deal if there was no change in behavior with tests.. Good lesson to keep in mind for tests. Remote tests don't check if an optional value actually reaches the gateway (and the gateway usually doesn't care because it's optional so the response doesn't help), and since we mock responses in Unit tests, it doesn't actually verify the request either, unless using .check_request. Of course, that level of test doesn't seem necessary for basic fields like this, but they don't hurt either, so just something to watch out for.. Changing this to fit the pattern other calls to split_authorization use.. I did manually test that, but probably a good idea.. Added case to same test.. Ah, I see. Yes, this was in response to the gateway throwing an error when the field was sent as an empty string, so the remote test should be inherently sufficient.. Could make this a one-liner. I don't know if I'd use the term \"transaction type\" for the normalization, seems a little general for this usage. May I suggest \"schedule\"?. I'm cool with reason_type. calling .to_s would produce authorizations of the form |purchases etc. But in any case, now that we have .split being called on authorizations, it will choke on nil. But I suppose I could call .to_s.split.... Actually noticed a lot of split-auth implementations use .to_s.split, it is more robust at least. I updated that and also some variable naming conventions, if you wouldn't mind giving another once-over.. Oops, missed amending somehow, should be accurate now.. I'd prefer these being separate credentials, unless they are always presented in this concatenated form.. Whoa, this is pretty heavy duty. I don't think any other adapters define internal classes for something like this; a check payment method class already exists. How necessary is this?. For reference, here is a typical (best case) ACH implementation https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/card_connect.rb#L192-L213. I seeeee, got it. Just wanted to make sure it was justified and sounds like it is. Thanks for the details.. I might just be confused, but shouldn't this mean that for a purchase with a stored card, the token is added to the request as [id]|card? I'd think it would need to get split out, but apparently the test_successful_purchase_using_stored_card remote test passes?. Oh, no, because it's not an alt_transaction? on store. NM!. There's no real standardization, but unless you think + is particularly suited for this gateway, let's use one of the more common separators, either ; or |.. Also, since prior authorizations only consisted of the customer token, that should be the first element so that splitting old tokens will still parse them correctly. Maybe that's not actually applicable for this gateway but should be followed generally when adding these things.. No need for parens here or in commit_url above. I assume 200 is it the minimum? If not, try 0.. \ud83e\udd14 I wonder if an un-voided auth is preferable.... @molbrown Sorry for leaving this out initially, but there may be reasons that un-voided auths are undesirable as well. It should be fine if they are automatically canceled after a short time, but I can't tell if this is the case from their Docs. Any insight on that?. This is a little weird. We usually set the response's message to something like \"Success\" on success; let's add that to message_from.. \u2795 . Nice, I think so; I didn't properly understand .dig before going back and implementing it, and missed this refactor.. I'm less sure about this, but it may work with .dig.. You're right; I had tried it that way previously and it failed for some reason now forgotten, but this is good.. I have not often used fetch, is it particularly suitable here, vs options[:stored_credential][:network_transaction_id]?. Yeah let's have this be something like if options[:order_source] || parameters[:stored_credential] && !parameters[:stored_credential].values.all?(&:nil?) and munge together the conditionals from your order_source_options_for_stored_credential with the below.. Minor quibble, we usually refer to this as authorize_and_capture, partly to not confuse the name of the action with a response's authorization.. We should probably support initial transactions with a nil reason_type in the hash. Very good questions that I'm not sure I have an easy answer for. Generally, we have leaned away from raising exceptions and toward allowing the gateway to provide whatever error they throw after receiving the request. But this might be a good candidate for standardization along with normalizing the fields. ArgumentError might be the closest fit.. Gotcha, that's fine. I don't think so, just trying to keep things permissive.. Sure, that's reasonable.. ",
    "atul25khanduri": "@girasquid Can you please check #2812? I just want to confirm if we're using TLS 1.2 in activemerchant v1.50.0 in BeanStream Payment Gateway.. @jasonwebster Thanks for your comment.\nBy checking the gem, I can see that purchase method is being used for normal payments. Then, https://www.beanstream.com/scripts/process_transaction.asp LIVE URL is being used as BeanStream API endpoint, which is called from post method.\nBut I'm still not sure which TLS version it uses.\nCan you please shed some more information to help me find the TLS version we're using?. Also, there's no ssl_version set on request and on response body, I can only see following:\n\ntrnApproved=1\ntrnId=10015006\nmessageId=1\nmessageText=Approved\ntrnOrderNumber=10\nauthCode=TEST\nerrorType=N\nerrorFields=\nresponseType=T\ntrnAmount=143.49\ntrnDate=4/22/2018+6:21:59+AM\navsProcessed=1\navsId=N\navsResult=0\navsAddrMatch=0\navsPostalMatch=0\navsMessage=Street+address+and+Postal/ZIP+do+not+match.\ncvdId=5\ncardType=VI\ntrnType=P\npaymentMethod=CC. \n",
    "methodmissing": "@rwdaigle \n. LGTM\n. @rwdaigle fixed the typo - facepalm moment, sorry :-(\nRegarding the remote tests, they're broken for me on master at the moment too:\n```\nFinished in 12.263758 seconds.\n\n10 tests, 22 assertions, 4 failures, 5 errors, 0 pendings, 0 omissions, 0 notifications\n10% passed\n```\nLooking into them.\ncryptogram and eci are currently unpublished in the docs - I'll get a timeline for when it'll be synced.\n. Track the master failures down to this:\n- Stripe (as to be expected) rejects these blank tokens with a 400 Bad Request response\n-> \"Stripe-Version: 2015-04-07\\r\\n\"\n-> \"\\r\\n\"\nreading 265 bytes...\n-> \"{\\n  \\\"error\\\": {\\n    \\\"type\\\": \\\"invalid_request_error\\\",\\n    \\\"message\\\": \\\"Your payment information is formatted improperly. Please make sure you're correctly using the latest version of our iOS library. For more information see https://stripe.com/docs/mobile/ios.\\\"\\n  }\\n}\\n\"\nread 265 bytes\n- Substituting that with a test token with valid format and data as per https://developer.apple.com/library/ios/documentation/PassKit/Reference/PaymentTokenJSON/PaymentTokenJSON.html gets us further but off course fails on the following ...\nD, [2016-07-04T00:40:04.638690 #14758] DEBUG -- : {\n  \"error\": {\n    \"type\": \"invalid_request_error\",\n    \"message\": \"It's been too long since the user approved this payment in your app. You have to create a token within 24 hours of their in-app approval.\"\n  }\n}\n. @rwdaigle some more progress, gist of the changes here:\n- The existing Stripe remote Apple Pay tests with the token pass through is broken as mentioned here and there's been a missing constant error there for a while too (CHARGE_ID_REGEX)\n- I thus only touched the cryptogram specific Stripe remote Apple Pay tests by adding explicit source: :apple_pay and eci: '05' params to the network tokenization card. Output of running those tests in isolation with DEBUG_ACTIVE_MERCHANT=true here:\n```\nLourenss-Air:active_merchant lourens$ bundle exec ruby -Itest test/remote/gateways/remote_stripe_apple_pay_test.rb -n /.apple_pay_raw_cryptogram$/\nLoaded suite test/remote/gateways/remote_stripe_apple_pay_test\nStarted\nI, [2016-07-04T10:48:31.885575 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_http_method=POST connection_uri=https://api.stripe.com/v1/charges\nD, [2016-07-04T10:48:31.885663 #18873] DEBUG -- : card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=apple_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com&capture=false\nopening connection to api.stripe.com:443...\nopened\nstarting SSL for api.stripe.com:443...\nSSL established\n<- \"POST /v1/charges HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAuthorization: Basic c2tfdGVzdF8zT0Q0VGRLU0lPaERPTDIxNDZKSmNDNzk6\\r\\nUser-Agent: Stripe/v1 ActiveMerchantBindings/1.59.0\\r\\nStripe-Version: 2015-04-07\\r\\nX-Stripe-Client-User-Agent: {\\\"bindings_version\\\":\\\"1.59.0\\\",\\\"lang\\\":\\\"ruby\\\",\\\"lang_version\\\":\\\"2.3.0 p0 (2015-12-25)\\\",\\\"platform\\\":\\\"x86_64-darwin15\\\",\\\"publisher\\\":\\\"active_merchant\\\"}\\r\\nX-Stripe-Client-User-Metadata: {\\\"ip\\\":null}\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nConnection: close\\r\\nHost: api.stripe.com\\r\\nContent-Length: 367\\r\\n\\r\\n\"\n<- \"card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=apple_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com&capture=false\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Server: nginx\\r\\n\"\n-> \"Date: Mon, 04 Jul 2016 09:48:34 GMT\\r\\n\"\n-> \"Content-Type: application/json\\r\\n\"\n-> \"Content-Length: 1522\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Access-Control-Allow-Credentials: true\\r\\n\"\n-> \"Access-Control-Allow-Methods: GET, POST, HEAD, OPTIONS, DELETE\\r\\n\"\n-> \"Access-Control-Allow-Origin: \\r\\n\"\n-> \"Access-Control-Max-Age: 300\\r\\n\"\n-> \"Cache-Control: no-cache, no-store\\r\\n\"\n-> \"Request-Id: req_8kzgpov9anxZK5\\r\\n\"\n-> \"Stripe-Version: 2015-04-07\\r\\n\"\n-> \"Strict-Transport-Security: max-age=31556926; includeSubDomains\\r\\n\"\n-> \"\\r\\n\"\nreading 1522 bytes...\n-> \"{\\n  \\\"id\\\": \\\"ch_18TTgsAWOtgoysogjTy0S9H0\\\",\\n  \\\"object\\\": \\\"charge\\\",\\n  \\\"amount\\\": 100,\\n  \\\"amount_refunded\\\": 0,\\n  \\\"application_fee\\\": null,\\n  \\\"balance_transaction\\\": null,\\n  \\\"captured\\\": false,\\n  \\\"created\\\": 1467625714,\\n  \\\"currency\\\": \\\"usd\\\",\\n  \\\"customer\\\": null,\\n  \\\"description\\\": \\\"ActiveMerchant Test Purchase\\\",\\n  \\\"destination\\\": null,\\n  \\\"dispute\\\": null,\\n  \\\"failure_code\\\": null,\\n  \\\"failure_message\\\": null,\\n  \\\"fraud_details\\\": {},\\n  \\\"invoice\\\": null,\\n  \\\"livemode\\\": false,\\n  \\\"metadata\\\": {\\n    \\\"email\\\": \\\"wow@example.com\\\"\\n  },\\n  \\\"order\\\": null,\\n  \\\"paid\\\": true,\\n  \\\"receipt_email\\\": null,\\n  \\\"receipt_number\\\": null,\\n  \\\"refunded\\\": false,\\n  \\\"refunds\\\": {\\n    \\\"object\\\": \\\"list\\\",\\n    \\\"data\\\": [],\\n    \\\"has_more\\\": false,\\n    \\\"total_count\\\": 0,\\n    \\\"url\\\": \\\"/v1/charges/ch_18TTgsAWOtgoysogjTy0S9H0/refunds\\\"\\n  },\\n  \\\"shipping\\\": null,\\n  \\\"source\\\": {\\n    \\\"id\\\": \\\"card_18TTgsAWOtgoysogRtcE26ZZ\\\",\\n    \\\"object\\\": \\\"card\\\",\\n    \\\"address_city\\\": null,\\n    \\\"address_country\\\": null,\\n    \\\"address_line1\\\": null,\\n    \\\"address_line1_check\\\": null,\\n    \\\"address_line2\\\": null,\\n    \\\"address_state\\\": null,\\n    \\\"address_zip\\\": null,\\n    \\\"address_zip_check\\\": null,\\n    \\\"brand\\\": \\\"Visa\\\",\\n    \\\"country\\\": \\\"US\\\",\\n    \\\"customer\\\": null,\\n    \\\"cvc_check\\\": null,\\n    \\\"dynamic_last4\\\": \\\"4242\\\",\\n    \\\"exp_month\\\": 9,\\n    \\\"exp_year\\\": 2017,\\n    \\\"fingerprint\\\": \\\"hfaVNMiXc0dYSiC5\\\",\\n    \\\"funding\\\": \\\"credit\\\",\\n    \\\"last4\\\": \\\"0000\\\",\\n    \\\"metadata\\\": {},\\n    \\\"name\\\": \\\"Longbob Longsen\\\",\\n    \\\"tokenization_method\\\": \\\"apple_pay\\\"\\n  },\\n  \\\"source_transfer\\\": null,\\n  \\\"statement_descriptor\\\": null,\\n  \\\"status\\\": \\\"succeeded\\\"\\n}\\n\"\nread 1522 bytes\nConn close\nI, [2016-07-04T10:48:33.372300 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] --> 200 OK (1522 1.4865s)\nD, [2016-07-04T10:48:33.372378 #18873] DEBUG -- : {\n  \"id\": \"ch_18TTgsAWOtgoysogjTy0S9H0\",\n  \"object\": \"charge\",\n  \"amount\": 100,\n  \"amount_refunded\": 0,\n  \"application_fee\": null,\n  \"balance_transaction\": null,\n  \"captured\": false,\n  \"created\": 1467625714,\n  \"currency\": \"usd\",\n  \"customer\": null,\n  \"description\": \"ActiveMerchant Test Purchase\",\n  \"destination\": null,\n  \"dispute\": null,\n  \"failure_code\": null,\n  \"failure_message\": null,\n  \"fraud_details\": {},\n  \"invoice\": null,\n  \"livemode\": false,\n  \"metadata\": {\n    \"email\": \"wow@example.com\"\n  },\n  \"order\": null,\n  \"paid\": true,\n  \"receipt_email\": null,\n  \"receipt_number\": null,\n  \"refunded\": false,\n  \"refunds\": {\n    \"object\": \"list\",\n    \"data\": [],\n    \"has_more\": false,\n    \"total_count\": 0,\n    \"url\": \"/v1/charges/ch_18TTgsAWOtgoysogjTy0S9H0/refunds\"\n  },\n  \"shipping\": null,\n  \"source\": {\n    \"id\": \"card_18TTgsAWOtgoysogRtcE26ZZ\",\n    \"object\": \"card\",\n    \"address_city\": null,\n    \"address_country\": null,\n    \"address_line1\": null,\n    \"address_line1_check\": null,\n    \"address_line2\": null,\n    \"address_state\": null,\n    \"address_zip\": null,\n    \"address_zip_check\": null,\n    \"brand\": \"Visa\",\n    \"country\": \"US\",\n    \"customer\": null,\n    \"cvc_check\": null,\n    \"dynamic_last4\": \"4242\",\n    \"exp_month\": 9,\n    \"exp_year\": 2017,\n    \"fingerprint\": \"hfaVNMiXc0dYSiC5\",\n    \"funding\": \"credit\",\n    \"last4\": \"0000\",\n    \"metadata\": {},\n    \"name\": \"Longbob Longsen\",\n    \"tokenization_method\": \"apple_pay\"\n  },\n  \"source_transfer\": null,\n  \"statement_descriptor\": null,\n  \"status\": \"succeeded\"\n}\nI, [2016-07-04T10:48:33.372510 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_attempt=1 connection_request_time=1.4869s connection_msg=\"success\"\nI, [2016-07-04T10:48:33.372542 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_request_total_time=1.4870s\n.I, [2016-07-04T10:48:33.374175 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_http_method=POST connection_uri=https://api.stripe.com/v1/charges\nD, [2016-07-04T10:48:33.374225 #18873] DEBUG -- : card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=apple_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com\nopening connection to api.stripe.com:443...\nopened\nstarting SSL for api.stripe.com:443...\nSSL established\n<- \"POST /v1/charges HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAuthorization: Basic c2tfdGVzdF8zT0Q0VGRLU0lPaERPTDIxNDZKSmNDNzk6\\r\\nUser-Agent: Stripe/v1 ActiveMerchantBindings/1.59.0\\r\\nStripe-Version: 2015-04-07\\r\\nX-Stripe-Client-User-Agent: {\\\"bindings_version\\\":\\\"1.59.0\\\",\\\"lang\\\":\\\"ruby\\\",\\\"lang_version\\\":\\\"2.3.0 p0 (2015-12-25)\\\",\\\"platform\\\":\\\"x86_64-darwin15\\\",\\\"publisher\\\":\\\"active_merchant\\\"}\\r\\nX-Stripe-Client-User-Metadata: {\\\"ip\\\":null}\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nConnection: close\\r\\nHost: api.stripe.com\\r\\nContent-Length: 353\\r\\n\\r\\n\"\n<- \"card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=apple_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Server: nginx\\r\\n\"\n-> \"Date: Mon, 04 Jul 2016 09:48:36 GMT\\r\\n\"\n-> \"Content-Type: application/json\\r\\n\"\n-> \"Content-Length: 1547\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Access-Control-Allow-Credentials: true\\r\\n\"\n-> \"Access-Control-Allow-Methods: GET, POST, HEAD, OPTIONS, DELETE\\r\\n\"\n-> \"Access-Control-Allow-Origin: *\\r\\n\"\n-> \"Access-Control-Max-Age: 300\\r\\n\"\n-> \"Cache-Control: no-cache, no-store\\r\\n\"\n-> \"Request-Id: req_8kzgTcqajsG7sg\\r\\n\"\n-> \"Stripe-Version: 2015-04-07\\r\\n\"\n-> \"Strict-Transport-Security: max-age=31556926; includeSubDomains\\r\\n\"\n-> \"\\r\\n\"\nreading 1547 bytes...\n-> \"{\\n  \\\"id\\\": \\\"ch_18TTguAWOtgoysoggdjhI9GN\\\",\\n  \\\"object\\\": \\\"charge\\\",\\n  \\\"amount\\\": 100,\\n  \\\"amount_refunded\\\": 0,\\n  \\\"application_fee\\\": null,\\n  \\\"balance_transaction\\\": \\\"txn_18TTguAWOtgoysogtPetW0MW\\\",\\n  \\\"captured\\\": true,\\n  \\\"created\\\": 1467625716,\\n  \\\"currency\\\": \\\"usd\\\",\\n  \\\"customer\\\": null,\\n  \\\"description\\\": \\\"ActiveMerchant Test Purchase\\\",\\n  \\\"destination\\\": null,\\n  \\\"dispute\\\": null,\\n  \\\"failure_code\\\": null,\\n  \\\"failure_message\\\": null,\\n  \\\"fraud_details\\\": {},\\n  \\\"invoice\\\": null,\\n  \\\"livemode\\\": false,\\n  \\\"metadata\\\": {\\n    \\\"email\\\": \\\"wow@example.com\\\"\\n  },\\n  \\\"order\\\": null,\\n  \\\"paid\\\": true,\\n  \\\"receipt_email\\\": null,\\n  \\\"receipt_number\\\": null,\\n  \\\"refunded\\\": false,\\n  \\\"refunds\\\": {\\n    \\\"object\\\": \\\"list\\\",\\n    \\\"data\\\": [],\\n    \\\"has_more\\\": false,\\n    \\\"total_count\\\": 0,\\n    \\\"url\\\": \\\"/v1/charges/ch_18TTguAWOtgoysoggdjhI9GN/refunds\\\"\\n  },\\n  \\\"shipping\\\": null,\\n  \\\"source\\\": {\\n    \\\"id\\\": \\\"card_18TTguAWOtgoysogLuo3gSiQ\\\",\\n    \\\"object\\\": \\\"card\\\",\\n    \\\"address_city\\\": null,\\n    \\\"address_country\\\": null,\\n    \\\"address_line1\\\": null,\\n    \\\"address_line1_check\\\": null,\\n    \\\"address_line2\\\": null,\\n    \\\"address_state\\\": null,\\n    \\\"address_zip\\\": null,\\n    \\\"address_zip_check\\\": null,\\n    \\\"brand\\\": \\\"Visa\\\",\\n    \\\"country\\\": \\\"US\\\",\\n    \\\"customer\\\": null,\\n    \\\"cvc_check\\\": null,\\n    \\\"dynamic_last4\\\": \\\"4242\\\",\\n    \\\"exp_month\\\": 9,\\n    \\\"exp_year\\\": 2017,\\n    \\\"fingerprint\\\": \\\"hfaVNMiXc0dYSiC5\\\",\\n    \\\"funding\\\": \\\"credit\\\",\\n    \\\"last4\\\": \\\"0000\\\",\\n    \\\"metadata\\\": {},\\n    \\\"name\\\": \\\"Longbob Longsen\\\",\\n    \\\"tokenization_method\\\": \\\"apple_pay\\\"\\n  },\\n  \\\"source_transfer\\\": null,\\n  \\\"statement_descriptor\\\": null,\\n  \\\"status\\\": \\\"succeeded\\\"\\n}\\n\"\nread 1547 bytes\nConn close\nI, [2016-07-04T10:48:35.564407 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] --> 200 OK (1547 2.1901s)\nD, [2016-07-04T10:48:35.564475 #18873] DEBUG -- : {\n  \"id\": \"ch_18TTguAWOtgoysoggdjhI9GN\",\n  \"object\": \"charge\",\n  \"amount\": 100,\n  \"amount_refunded\": 0,\n  \"application_fee\": null,\n  \"balance_transaction\": \"txn_18TTguAWOtgoysogtPetW0MW\",\n  \"captured\": true,\n  \"created\": 1467625716,\n  \"currency\": \"usd\",\n  \"customer\": null,\n  \"description\": \"ActiveMerchant Test Purchase\",\n  \"destination\": null,\n  \"dispute\": null,\n  \"failure_code\": null,\n  \"failure_message\": null,\n  \"fraud_details\": {},\n  \"invoice\": null,\n  \"livemode\": false,\n  \"metadata\": {\n    \"email\": \"wow@example.com\"\n  },\n  \"order\": null,\n  \"paid\": true,\n  \"receipt_email\": null,\n  \"receipt_number\": null,\n  \"refunded\": false,\n  \"refunds\": {\n    \"object\": \"list\",\n    \"data\": [],\n    \"has_more\": false,\n    \"total_count\": 0,\n    \"url\": \"/v1/charges/ch_18TTguAWOtgoysoggdjhI9GN/refunds\"\n  },\n  \"shipping\": null,\n  \"source\": {\n    \"id\": \"card_18TTguAWOtgoysogLuo3gSiQ\",\n    \"object\": \"card\",\n    \"address_city\": null,\n    \"address_country\": null,\n    \"address_line1\": null,\n    \"address_line1_check\": null,\n    \"address_line2\": null,\n    \"address_state\": null,\n    \"address_zip\": null,\n    \"address_zip_check\": null,\n    \"brand\": \"Visa\",\n    \"country\": \"US\",\n    \"customer\": null,\n    \"cvc_check\": null,\n    \"dynamic_last4\": \"4242\",\n    \"exp_month\": 9,\n    \"exp_year\": 2017,\n    \"fingerprint\": \"hfaVNMiXc0dYSiC5\",\n    \"funding\": \"credit\",\n    \"last4\": \"0000\",\n    \"metadata\": {},\n    \"name\": \"Longbob Longsen\",\n    \"tokenization_method\": \"apple_pay\"\n  },\n  \"source_transfer\": null,\n  \"statement_descriptor\": null,\n  \"status\": \"succeeded\"\n}\nI, [2016-07-04T10:48:35.564607 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_attempt=1 connection_request_time=2.1904s connection_msg=\"success\"\nI, [2016-07-04T10:48:35.564711 #18873]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_request_total_time=2.1906s\n.\nFinished in 3.725224 seconds.\n2 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.54 tests/s, 3.76 assertions/s\n```\n- I added a new Stripe remote Android Pay test for the raw cryptogram flows only:\n```\nLourenss-Air:active_merchant lourens$ bundle exec ruby -Itest test/remote/gateways/remote_stripe_android_pay_test.rb\nLoaded suite test/remote/gateways/remote_stripe_android_pay_test\nStarted\nI, [2016-07-04T10:46:19.708279 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_http_method=POST connection_uri=https://api.stripe.com/v1/charges\nD, [2016-07-04T10:46:19.708365 #18594] DEBUG -- : card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=android_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com&capture=false\nopening connection to api.stripe.com:443...\nopened\nstarting SSL for api.stripe.com:443...\nSSL established\n<- \"POST /v1/charges HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAuthorization: Basic c2tfdGVzdF8zT0Q0VGRLU0lPaERPTDIxNDZKSmNDNzk6\\r\\nUser-Agent: Stripe/v1 ActiveMerchantBindings/1.59.0\\r\\nStripe-Version: 2015-04-07\\r\\nX-Stripe-Client-User-Agent: {\\\"bindings_version\\\":\\\"1.59.0\\\",\\\"lang\\\":\\\"ruby\\\",\\\"lang_version\\\":\\\"2.3.0 p0 (2015-12-25)\\\",\\\"platform\\\":\\\"x86_64-darwin15\\\",\\\"publisher\\\":\\\"active_merchant\\\"}\\r\\nX-Stripe-Client-User-Metadata: {\\\"ip\\\":null}\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nConnection: close\\r\\nHost: api.stripe.com\\r\\nContent-Length: 369\\r\\n\\r\\n\"\n<- \"card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=android_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com&capture=false\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Server: nginx\\r\\n\"\n-> \"Date: Mon, 04 Jul 2016 09:46:21 GMT\\r\\n\"\n-> \"Content-Type: application/json\\r\\n\"\n-> \"Content-Length: 1524\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Access-Control-Allow-Credentials: true\\r\\n\"\n-> \"Access-Control-Allow-Methods: GET, POST, HEAD, OPTIONS, DELETE\\r\\n\"\n-> \"Access-Control-Allow-Origin: *\\r\\n\"\n-> \"Access-Control-Max-Age: 300\\r\\n\"\n-> \"Cache-Control: no-cache, no-store\\r\\n\"\n-> \"Request-Id: req_8kzeQ7NkjrqVlb\\r\\n\"\n-> \"Stripe-Version: 2015-04-07\\r\\n\"\n-> \"Strict-Transport-Security: max-age=31556926; includeSubDomains\\r\\n\"\n-> \"\\r\\n\"\nreading 1524 bytes...\n-> \"{\\n  \\\"id\\\": \\\"ch_18TTejAWOtgoysogAT3uPoQ9\\\",\\n  \\\"object\\\": \\\"charge\\\",\\n  \\\"amount\\\": 100,\\n  \\\"amount_refunded\\\": 0,\\n  \\\"application_fee\\\": null,\\n  \\\"balance_transaction\\\": null,\\n  \\\"captured\\\": false,\\n  \\\"created\\\": 1467625581,\\n  \\\"currency\\\": \\\"usd\\\",\\n  \\\"customer\\\": null,\\n  \\\"description\\\": \\\"ActiveMerchant Test Purchase\\\",\\n  \\\"destination\\\": null,\\n  \\\"dispute\\\": null,\\n  \\\"failure_code\\\": null,\\n  \\\"failure_message\\\": null,\\n  \\\"fraud_details\\\": {},\\n  \\\"invoice\\\": null,\\n  \\\"livemode\\\": false,\\n  \\\"metadata\\\": {\\n    \\\"email\\\": \\\"wow@example.com\\\"\\n  },\\n  \\\"order\\\": null,\\n  \\\"paid\\\": true,\\n  \\\"receipt_email\\\": null,\\n  \\\"receipt_number\\\": null,\\n  \\\"refunded\\\": false,\\n  \\\"refunds\\\": {\\n    \\\"object\\\": \\\"list\\\",\\n    \\\"data\\\": [],\\n    \\\"has_more\\\": false,\\n    \\\"total_count\\\": 0,\\n    \\\"url\\\": \\\"/v1/charges/ch_18TTejAWOtgoysogAT3uPoQ9/refunds\\\"\\n  },\\n  \\\"shipping\\\": null,\\n  \\\"source\\\": {\\n    \\\"id\\\": \\\"card_18TTejAWOtgoysoglncSfVpu\\\",\\n    \\\"object\\\": \\\"card\\\",\\n    \\\"address_city\\\": null,\\n    \\\"address_country\\\": null,\\n    \\\"address_line1\\\": null,\\n    \\\"address_line1_check\\\": null,\\n    \\\"address_line2\\\": null,\\n    \\\"address_state\\\": null,\\n    \\\"address_zip\\\": null,\\n    \\\"address_zip_check\\\": null,\\n    \\\"brand\\\": \\\"Visa\\\",\\n    \\\"country\\\": \\\"US\\\",\\n    \\\"customer\\\": null,\\n    \\\"cvc_check\\\": null,\\n    \\\"dynamic_last4\\\": \\\"4242\\\",\\n    \\\"exp_month\\\": 9,\\n    \\\"exp_year\\\": 2017,\\n    \\\"fingerprint\\\": \\\"hfaVNMiXc0dYSiC5\\\",\\n    \\\"funding\\\": \\\"credit\\\",\\n    \\\"last4\\\": \\\"0000\\\",\\n    \\\"metadata\\\": {},\\n    \\\"name\\\": \\\"Longbob Longsen\\\",\\n    \\\"tokenization_method\\\": \\\"android_pay\\\"\\n  },\\n  \\\"source_transfer\\\": null,\\n  \\\"statement_descriptor\\\": null,\\n  \\\"status\\\": \\\"succeeded\\\"\\n}\\n\"\nread 1524 bytes\nConn close\nI, [2016-07-04T10:46:20.949475 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] --> 200 OK (1524 1.2410s)\nD, [2016-07-04T10:46:20.949562 #18594] DEBUG -- : {\n  \"id\": \"ch_18TTejAWOtgoysogAT3uPoQ9\",\n  \"object\": \"charge\",\n  \"amount\": 100,\n  \"amount_refunded\": 0,\n  \"application_fee\": null,\n  \"balance_transaction\": null,\n  \"captured\": false,\n  \"created\": 1467625581,\n  \"currency\": \"usd\",\n  \"customer\": null,\n  \"description\": \"ActiveMerchant Test Purchase\",\n  \"destination\": null,\n  \"dispute\": null,\n  \"failure_code\": null,\n  \"failure_message\": null,\n  \"fraud_details\": {},\n  \"invoice\": null,\n  \"livemode\": false,\n  \"metadata\": {\n    \"email\": \"wow@example.com\"\n  },\n  \"order\": null,\n  \"paid\": true,\n  \"receipt_email\": null,\n  \"receipt_number\": null,\n  \"refunded\": false,\n  \"refunds\": {\n    \"object\": \"list\",\n    \"data\": [],\n    \"has_more\": false,\n    \"total_count\": 0,\n    \"url\": \"/v1/charges/ch_18TTejAWOtgoysogAT3uPoQ9/refunds\"\n  },\n  \"shipping\": null,\n  \"source\": {\n    \"id\": \"card_18TTejAWOtgoysoglncSfVpu\",\n    \"object\": \"card\",\n    \"address_city\": null,\n    \"address_country\": null,\n    \"address_line1\": null,\n    \"address_line1_check\": null,\n    \"address_line2\": null,\n    \"address_state\": null,\n    \"address_zip\": null,\n    \"address_zip_check\": null,\n    \"brand\": \"Visa\",\n    \"country\": \"US\",\n    \"customer\": null,\n    \"cvc_check\": null,\n    \"dynamic_last4\": \"4242\",\n    \"exp_month\": 9,\n    \"exp_year\": 2017,\n    \"fingerprint\": \"hfaVNMiXc0dYSiC5\",\n    \"funding\": \"credit\",\n    \"last4\": \"0000\",\n    \"metadata\": {},\n    \"name\": \"Longbob Longsen\",\n    \"tokenization_method\": \"android_pay\"\n  },\n  \"source_transfer\": null,\n  \"statement_descriptor\": null,\n  \"status\": \"succeeded\"\n}\nI, [2016-07-04T10:46:20.949653 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_attempt=1 connection_request_time=1.2414s connection_msg=\"success\"\nI, [2016-07-04T10:46:20.949697 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_request_total_time=1.2415s\n.I, [2016-07-04T10:46:20.950759 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_http_method=POST connection_uri=https://api.stripe.com/v1/charges\nD, [2016-07-04T10:46:20.950793 #18594] DEBUG -- : card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=android_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com\nopening connection to api.stripe.com:443...\nopened\nstarting SSL for api.stripe.com:443...\nSSL established\n<- \"POST /v1/charges HTTP/1.1\\r\\nContent-Type: application/x-www-form-urlencoded\\r\\nAuthorization: Basic c2tfdGVzdF8zT0Q0VGRLU0lPaERPTDIxNDZKSmNDNzk6\\r\\nUser-Agent: Stripe/v1 ActiveMerchantBindings/1.59.0\\r\\nStripe-Version: 2015-04-07\\r\\nX-Stripe-Client-User-Agent: {\\\"bindings_version\\\":\\\"1.59.0\\\",\\\"lang\\\":\\\"ruby\\\",\\\"lang_version\\\":\\\"2.3.0 p0 (2015-12-25)\\\",\\\"platform\\\":\\\"x86_64-darwin15\\\",\\\"publisher\\\":\\\"active_merchant\\\"}\\r\\nX-Stripe-Client-User-Metadata: {\\\"ip\\\":null}\\r\\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\\r\\nAccept: /\\r\\nConnection: close\\r\\nHost: api.stripe.com\\r\\nContent-Length: 355\\r\\n\\r\\n\"\n<- \"card[number]=4242424242424242&card[exp_month]=9&card[exp_year]=2017&card[name]=Longbob+Longsen&card[cryptogram]=EHuWW9PiBkWvqE5juRwDzAUFBAk%3D&card[eci]=05&card[tokenization_method]=android_pay&amount=100&currency=usd&description=ActiveMerchant+Test+Purchase&payment_user_agent=Stripe%2Fv1+ActiveMerchantBindings%2F1.59.0&metadata[email]=wow%40example.com\"\n-> \"HTTP/1.1 200 OK\\r\\n\"\n-> \"Server: nginx\\r\\n\"\n-> \"Date: Mon, 04 Jul 2016 09:46:22 GMT\\r\\n\"\n-> \"Content-Type: application/json\\r\\n\"\n-> \"Content-Length: 1549\\r\\n\"\n-> \"Connection: close\\r\\n\"\n-> \"Access-Control-Allow-Credentials: true\\r\\n\"\n-> \"Access-Control-Allow-Methods: GET, POST, HEAD, OPTIONS, DELETE\\r\\n\"\n-> \"Access-Control-Allow-Origin: *\\r\\n\"\n-> \"Access-Control-Max-Age: 300\\r\\n\"\n-> \"Cache-Control: no-cache, no-store\\r\\n\"\n-> \"Request-Id: req_8kzeIkBVlgXdWj\\r\\n\"\n-> \"Stripe-Version: 2015-04-07\\r\\n\"\n-> \"Strict-Transport-Security: max-age=31556926; includeSubDomains\\r\\n\"\n-> \"\\r\\n\"\nreading 1549 bytes...\n-> \"{\\n  \\\"id\\\": \\\"ch_18TTekAWOtgoysog1sxD9e0m\\\",\\n  \\\"object\\\": \\\"charge\\\",\\n  \\\"amount\\\": 100,\\n  \\\"amount_refunded\\\": 0,\\n  \\\"application_fee\\\": null,\\n  \\\"balance_transaction\\\": \\\"txn_18TTekAWOtgoysog6zUpPVb8\\\",\\n  \\\"captured\\\": true,\\n  \\\"created\\\": 1467625582,\\n  \\\"currency\\\": \\\"usd\\\",\\n  \\\"customer\\\": null,\\n  \\\"description\\\": \\\"ActiveMerchant Test Purchase\\\",\\n  \\\"destination\\\": null,\\n  \\\"dispute\\\": null,\\n  \\\"failure_code\\\": null,\\n  \\\"failure_message\\\": null,\\n  \\\"fraud_details\\\": {},\\n  \\\"invoice\\\": null,\\n  \\\"livemode\\\": false,\\n  \\\"metadata\\\": {\\n    \\\"email\\\": \\\"wow@example.com\\\"\\n  },\\n  \\\"order\\\": null,\\n  \\\"paid\\\": true,\\n  \\\"receipt_email\\\": null,\\n  \\\"receipt_number\\\": null,\\n  \\\"refunded\\\": false,\\n  \\\"refunds\\\": {\\n    \\\"object\\\": \\\"list\\\",\\n    \\\"data\\\": [],\\n    \\\"has_more\\\": false,\\n    \\\"total_count\\\": 0,\\n    \\\"url\\\": \\\"/v1/charges/ch_18TTekAWOtgoysog1sxD9e0m/refunds\\\"\\n  },\\n  \\\"shipping\\\": null,\\n  \\\"source\\\": {\\n    \\\"id\\\": \\\"card_18TTekAWOtgoysogVxJlAzTp\\\",\\n    \\\"object\\\": \\\"card\\\",\\n    \\\"address_city\\\": null,\\n    \\\"address_country\\\": null,\\n    \\\"address_line1\\\": null,\\n    \\\"address_line1_check\\\": null,\\n    \\\"address_line2\\\": null,\\n    \\\"address_state\\\": null,\\n    \\\"address_zip\\\": null,\\n    \\\"address_zip_check\\\": null,\\n    \\\"brand\\\": \\\"Visa\\\",\\n    \\\"country\\\": \\\"US\\\",\\n    \\\"customer\\\": null,\\n    \\\"cvc_check\\\": null,\\n    \\\"dynamic_last4\\\": \\\"4242\\\",\\n    \\\"exp_month\\\": 9,\\n    \\\"exp_year\\\": 2017,\\n    \\\"fingerprint\\\": \\\"hfaVNMiXc0dYSiC5\\\",\\n    \\\"funding\\\": \\\"credit\\\",\\n    \\\"last4\\\": \\\"0000\\\",\\n    \\\"metadata\\\": {},\\n    \\\"name\\\": \\\"Longbob Longsen\\\",\\n    \\\"tokenization_method\\\": \\\"android_pay\\\"\\n  },\\n  \\\"source_transfer\\\": null,\\n  \\\"statement_descriptor\\\": null,\\n  \\\"status\\\": \\\"succeeded\\\"\\n}\\n\"\nread 1549 bytes\nConn close\nI, [2016-07-04T10:46:22.239775 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] --> 200 OK (1549 1.2889s)\nD, [2016-07-04T10:46:22.239836 #18594] DEBUG -- : {\n  \"id\": \"ch_18TTekAWOtgoysog1sxD9e0m\",\n  \"object\": \"charge\",\n  \"amount\": 100,\n  \"amount_refunded\": 0,\n  \"application_fee\": null,\n  \"balance_transaction\": \"txn_18TTekAWOtgoysog6zUpPVb8\",\n  \"captured\": true,\n  \"created\": 1467625582,\n  \"currency\": \"usd\",\n  \"customer\": null,\n  \"description\": \"ActiveMerchant Test Purchase\",\n  \"destination\": null,\n  \"dispute\": null,\n  \"failure_code\": null,\n  \"failure_message\": null,\n  \"fraud_details\": {},\n  \"invoice\": null,\n  \"livemode\": false,\n  \"metadata\": {\n    \"email\": \"wow@example.com\"\n  },\n  \"order\": null,\n  \"paid\": true,\n  \"receipt_email\": null,\n  \"receipt_number\": null,\n  \"refunded\": false,\n  \"refunds\": {\n    \"object\": \"list\",\n    \"data\": [],\n    \"has_more\": false,\n    \"total_count\": 0,\n    \"url\": \"/v1/charges/ch_18TTekAWOtgoysog1sxD9e0m/refunds\"\n  },\n  \"shipping\": null,\n  \"source\": {\n    \"id\": \"card_18TTekAWOtgoysogVxJlAzTp\",\n    \"object\": \"card\",\n    \"address_city\": null,\n    \"address_country\": null,\n    \"address_line1\": null,\n    \"address_line1_check\": null,\n    \"address_line2\": null,\n    \"address_state\": null,\n    \"address_zip\": null,\n    \"address_zip_check\": null,\n    \"brand\": \"Visa\",\n    \"country\": \"US\",\n    \"customer\": null,\n    \"cvc_check\": null,\n    \"dynamic_last4\": \"4242\",\n    \"exp_month\": 9,\n    \"exp_year\": 2017,\n    \"fingerprint\": \"hfaVNMiXc0dYSiC5\",\n    \"funding\": \"credit\",\n    \"last4\": \"0000\",\n    \"metadata\": {},\n    \"name\": \"Longbob Longsen\",\n    \"tokenization_method\": \"android_pay\"\n  },\n  \"source_transfer\": null,\n  \"statement_descriptor\": null,\n  \"status\": \"succeeded\"\n}\nI, [2016-07-04T10:46:22.239947 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_attempt=1 connection_request_time=1.2892s connection_msg=\"success\"\nI, [2016-07-04T10:46:22.239980 #18594]  INFO -- : [ActiveMerchant::Billing::StripeGateway] connection_request_total_time=1.2892s\n.\nFinished in 2.55175 seconds.\n2 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.78 tests/s, 5.49 assertions/s\n```\nI looks like some of these remote tests are stale and would need some love moving forward. Also there's a parity mismatch with Android / Apple Pay due to a missing first class AndroidPayPaymentToken for the raw token pass through flow. It can be addressed in a subsequent PR.\n@jnormore @lyverovski @ryanbalsdon @girasquid\n. Addressed Apple Pay ECI backwards compat issue in https://github.com/activemerchant/active_merchant/pull/2146/commits/9d9128f9a93fc7d94c5d34178e28711f71cff9b5\n```\nLourenss-Air:active_merchant lourens$ bundle exec ruby -Itest test/remote/gateways/remote_stripe_apple_pay_test.rb -n /.apple_pay_raw_cryptogram.$/\nLoaded suite test/remote/gateways/remote_stripe_apple_pay_test\nStarted\n....\nFinished in 5.877204 seconds.\n4 tests, 28 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n\n0.68 tests/s, 4.76 assertions/s\n``\n. Looked into that earlier, but noticed other gateways return withResponse.new(false, \"a message\")for these cases. It requires changes to theMockResponsein the test too (doesn't implementparams`) and wanted to keep changes minimal for this edge case.\n. They do, but it's handled in https://github.com/activemerchant/active_merchant/pull/2146/files#diff-8299be227de5ba32c34c30c42a828c9cR376\n. ",
    "jaswinder97": "please merge it into master if you want. After that I'll add all other pending methods\n. ",
    "anil826": "yes it would be a good addon for active-merchant features\n. ",
    "hallelujah": "Hi, just pinging about this one.\nWe made our own implementation of Adyen Gateway https://github.com/3scale/active_merchant/tree/adyen\nPlease let us know if it is proper to a pull request or tell us what is required?\nRegards\n. ",
    "lyverovski": "Adyen is also currently on Version 18 of their spec. It's probably worth jumping straight to that version once they green light the addition. . Other than the comment on replacing with 1's, LGTM. Well done on the exhaustive tests to check the range.\n. \ud83d\udc4d \n. https://stripe.com/docs/api#token_object-card-tokenization_method\n. I'm going to agree with @jnormore on this one. This is similar to the Stripe gateway token behaviour, minus the acceptance of raw PANs. The interfaces aren't changing, and there is still the ability to perform auth/capture/refund/void transactions, which is really what defines a \"direct\" gateway vs. an \"integration\".\nIf Square is comfortable adding raw PAN support to their integration in order to conform more closely to the definition of a direct gateway, then that's fine, but I don't think it should be necessary.\n. \ud83d\udc4d . Actually, the test that was missing was the gateway.refund(\"one#two\"), since the compound pspReference occurs as a result of a capture.\nThe equivalent gateway.capture(\"one#two\") test is not really applicable (but I added it anyway). A capture would be receiving the pspReference of the auth, which will not be a compound pspReference (i.e it will not have a # join).. Deja vu moment...check out #2589 \n. @curiousepic You can find some background on pspReference in #2589.  \nI think the change you made works going forward, but breaks refunds for any existing captures that have # stored as their delimiter in the pspReference?\n. Sorry for the late reply @curiousepic.\nI had made the same assumption in the original code. You were only dealing with a compound authorization value when handling refund transactions, which had to split the authorization that was compounded in the capture transaction response.. If we don't need it to pass Luhn here (do we?), then why not just fill with '1111111111'? \n. Yes - I am OK with it for now. At some point however, I would like the method of detecting Check vs. Credit Card to follow the same logic.\n. It was always defaulted to true because there was no way to verify it before. There still isn't an \"official\" way, but the guidance from Braintree was to check for the specific error response coming back when attempting a transaction with a network tokenized card & cryptogram.\n. This is a legacy private label brand that they had. It is unused and they'll eventually (hopefully soon) be removing it from their spec. Not blocking this PR, but we can probably remove now to avoid any further confusion.. This is a mistake.\nI'll have to revisit. It should just be authorization and not psp_reference_from(authorization), since add_references already does that. . ",
    "adyenpayments": "Hi All,\nWe have just pushed a PR for a new integration to the Adyen Platform using the latest version of our APIs. \nRegards,\nRik\nAdyen. @elfassy,\nThanks for the help! Did this indeed solve the issue :) Could you merge it into the active_merchant repo ?\nRegards,\nRik\nAdyen. Hi @jasonwebster and @elfassy \nI removed these unused tests from the PR. Let me know if you have any other questions.\nRegards,\nRik\nAdyen. Hi @jasonwebster @davidsantoso @elfassy,\nMany thanks for you feedback I made changes according to your request changes are you able to merge the PR ?\nRegards,\nRik\nAdyen. ",
    "jordan-brough": "@girasquid or @duff I see you both have merged Braintree-related PRs in the past. Any thoughts on this?\n. @timbeiko it would be great to get the current PR, or something close to it, merged in since ActiveMerchant v1.58.0 broke stripejs integration as far as I can tell.  Perhaps we could merge the current PR and then work on improving things after that?\n. @timbeiko @bizla - I absolutely agree that the code in this area could be better.  But wouldn't it be best to fix the regression right away (e.g. @Senjai's commit) and then take a separate pass to move things forward?  Right now the code is just broken -- you can't pass a string anymore and you also can't pass a StripePaymentToken.\nSince the initial commit of Stripe support StripeGateway has supported passing in a credit card token as a string.  And it has continued to do so until this commit which broke it unintentionally.  Even in some remaining parts of the current code passing in a String is supported.  @bizla added StripePaymentToken but only added it halfway -- supporting it in some places but not others (e.g. not supporting it in StripeGateway#add_credit_card).\nIf someone has an alternative backward-compatible fix that's great!  Otherwise could we fix the breakage and then work on improving things after that?\n. It seems like a decent backward-compatible fix could be:\n- Update StripeGateway#store to convert payment into a StripePaymentToken if it's a string (possibly with a deprecation warning).\n- Update StripeGateway#add_creditcard to handle StripePaymentTokens.\nBut again, if it were me I'd say fix the broken code first.\n. > StripeGateway#add_credit_card is not a public interface. It's a private helper method meant for specific consumers\nI mentioned #add_credit_card because that is what #store uses, and #store is a public interface.  StripePaymentToken was added half-baked.  There simply is no other way to use #store with a stripe token except as a string, and now even that is broken.\n\nLook at the unit tests\n\nThere are no unit tests for passing in a string.  This is part of the problem.  There is plenty of code supporting it and it has always been the only way to handle stripe tokens in #store.  Whoever added the code originally did not add enough specs.  @Senjai is helping to fix that.\n\nyou could address the fear and fix card_brand. Have it return nil if it doesn't additionally respond to type\n\nI would think it would be better to have card_brand, which is shared by many different gateways, complain about garbage input than return nil.\n. Can we move StripePaymentToken out of the private area (here) so that it's a bit more prominent?  Or else move it to its own file?  Also can we add a bit of documentation to it?  I'm happy to submit a PR for any of that if you'd like.  I know that its current position doesn't actually make it \"private\", but it gives that feel when reading the code.\nI ask because StripePaymentToken is now something that can be used across the board in StripeGateway and we have public methods that expect to receive it (e.g. StripeGateway#store).\n. @bizla thanks for getting this fixed!\n. ",
    "timkleier": "I'm not sure, it was awhile ago that I worked on this project. I'd say you can close this unless others are experiencing the same issue.. ",
    "merchantwarrior": "@duff This is true. We keep this field open for either an either a product id or description. What we found is that the majority of our merchants used this particular field as a reference id and/or invoice id and left the description side of things to their shopping cart or software provider.\n@andrewpaliga In our previous check with the test store we have setup (and the one Shopify allowed us to test - merchant-warrior.myshopify.com) we found that the description was not being passed to the gateway and as such the transactions were being rejected.\n@duff @andrewpaliga The use case is that a merchant will login to our administration interface and search for a transaction, they will then see the transaction_product field and use this to match a transaction in shopify. So what we would need is some form of 'order_id' and I note that this is available in ActiveMerchant. Would we be able to use this in this implementation or does the 'description' used by Shopify contain an order id of some sort?\n. @duff Because the transactionReferenceID is used as a unique identifier to also stop duplicate transactions this may not work. Eg. order_id of a declined transaction will be the same order_id for a second attempt at the transaction which may then be approved (however the transactionReferenceID would no longer be unique and be rejected). \nIt's possible to place the order_id in a custom field e.g. custom1 etc. Is the main suggestion here to leave the tranasctionProduct as the 'description'? Not too sure if our merchants will make use of the Shopify 'description' (unless it is a unique reference number to the transaction). However if this is the recommended approach we're happy to abide by this and just place an order_id or something similar in the custom1 field. Just wondering what the best approach would be. Thanks for your help.\n. @duff @andrewpaliga  The reason we were looking at potentially changing the description to something else is that we were receiving the following when testing the current implementation of the gateway with Shopify:\n\n. @duff Have left the description alone as suggested and placed the order_id in a custom field. \n@andrewpaliga Could you please double check with your developers what data is sent as 'description'. It looks like the truncate that was added could possibly be failing and because of that shopify is sending through a blank transactionProduct through to our gateway which is then being rejected and transactions cannot be processed successfully.\n. @andrewpaliga Thanks for chasing this up. \n@duff Based on other payment providers in the activemerchant project (have only checked AU ones so far) it looks like 'order_id' is more commonly used than the 'description'. This is what we would prefer to be seeing in the transactionProduct field as well. This would also resolve the issue that is currently stopping the Shopify implementation from working. \nOur concern is that there are a number of customers of ours using Spreedly and we would not want this change to break their implementation. \nOur proposed change would be: \nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/merchant_warrior.rb#L89\nChanging the above line to: \npost['transactionProduct'] = options[:order_id] || SecureRandom.hex(15)\nThis would give us the correct value for the field, fix the issue currently with the Shopify implementation and also ensure a default value is passed across in case the 'order_id' was not available.\nYour thoughts? Just want to make sure what we're implementing is not going to be breaking anything or rock the boat anywhere!\nIn regards to the test failing - not too sure on this one. The test file was actually reverted to your original test file so the fact it's failing now and not before has me a little lost!?\n. @andrewpaliga Thanks. I guess a better question would be - what value would a customer use to relate back to an order inside Shopify? Eg. If they login to their gateway (merchantwarrior) and saw the 'order_id' attached to the transaction, would they then be able to use this value in an 'order search' inside Shopify to identify the order associated with the payment?\n. @duff @andrewpaliga Thanks very much. Changes made for review. If all is good - it would be great to get this into our test shopify store for testing of transactions.\n. @duff Cheers. order_id has been truncated and all commits squashed into one commit. Anything else let me know :)\n. @duff Just wondering if there is anything that we may have missed, or anything we can do to have this merged? We're just waiting on this new version being used within Shopify so that our clients who are waiting can take advantage of it.\n. @andrewpaliga Can confirm the remote tests are functioning correctly as we have test transactions being created successfully via our modified activemerchant module.\nThe truncate test has been placed back. We look forward to this PR being merged so that we can test our shopify implementation and make this available to our merchants. \nThanks!\n. ",
    "apdunston": "@rwdaigle, do the thing.\n. ",
    "brendandeere": ":+1:  LGTM\n. ",
    "forkata": ":+1:\n. ",
    "Senjai": "@timbeiko Just poking on this one. Is everything okay? I understand the awkwardness here with the fix but there are a few solidus stores that are eager to get past our locked down active merchant, if there is anything I can do to help you speed this along I am available.\n. @timbeiko I don't know if I follow. The card_brand method expects a token object (as far as I can tell) or an ActiveMerchant::Billing::CreditCard. However, using stripejs for token generation, all we have is the token string and it wouldn't make sense to check the brand of a token. Does that help at all?\n. @bizla @timbeiko I understand. I get that we want a better interface here but that's outside the scope of this PR.\n\nThe proper fix for this problem would be to construct a StripePaymentToken\n\nI agree, but we can't without a major version bump \n\nLook at the unit tests. While passing a string into store may have worked, there are no tests that suggest that this was an intended input with a guaranteed behaviour. \n\nBy this logic the StripePaymentToken isn't the right choice either, so what is? The commit that broke this interface is f2a7ea3ed298038529acce7552b733ade8f3bc90 when we restricted the type of the argument passed in.\nThe lack of tests is unfortunate but that doesn't mean something does not support a specific use case, it just means that tests weren't written for it and that is an important distinction. The person who originally added the stripe gateway and the store method probably intended it to accept stripe.js string tokens (otherwise nobody could use active merchant with stripe.js which is unlikely) and I'll make my case for this shortly.\nThe history of the store method goes wayyyyyyy back to the initial commit for the gateway here: ca39e94032097c53c2848119431da32ff6da3f31. This commit was absent a commit message and didn't have any tests at all just yet.\nIn this original interface, up to where the funcitonality was removed in f2a7ea3ed298038529acce7552b733ade8f3bc90 there are explicit code paths for string tokens, that do not make sense outside of this context.\nBack then (ca39e94032097c53c2848119431da32ff6da3f31) the store method looked like this:\n``` ruby\n      def store(creditcard, options={})\n        post = {}\n        add_creditcard(post, creditcard, options)\n        add_customer_data(post, options)\n    if options[:customer]\n\ni thought your PR was minimally invasive, included specs, had a great commit message, fixes what seems like a significant regression.  i'm somewhat perplexed by their unwillingness to fix what's broken, given that you handed all of that to them on a platt\n          commit(\"customers/#{CGI.escape(options[:customer])}\", :post, post)\n        else\n          commit('customers', :post, post)\n        end\n      end\n```\ncreditcard is passed to add_creditcard which is implemented thusly:\n``` ruby\n      def add_creditcard(post, creditcard, options)\n        if creditcard.kind_of?(CreditCard)\n          card = {}\n          card[:number] = creditcard.number\n          card[:exp_month] = creditcard.month\n          card[:exp_year] = creditcard.year\n          card[:cvc] = creditcard.verification_value if creditcard.verification_value?\n          card[:name] = creditcard.name if creditcard.name\n          post[:card] = card\n      add_address(post, options)\n    elsif creditcard.kind_of?(String)\n      post[:card] = creditcard\n    end\n  end\n\n```\nsince then add_creditcard has expanded in functionality but this code path still exists and is still supported in master\n``` ruby\ndef add_creditcard(post, creditcard, options)\n...\n    elsif creditcard.kind_of?(String)\n      if options[:track_data]\n        card[:swipe_data] = options[:track_data]\n      elsif creditcard.include?(\"|\")\n        customer_id, card_id = creditcard.split(\"|\")\n        card = card_id\n        post[:customer] = customer_id\n      else\n        card = creditcard\n      end\n      post[:card] = card\n    end\n\n...\n```\nWe can also infer that the only time stripe accepts a plain string in the card param is when that string represents a token. Additionally this logic for \"track_data\" would also not work because this code path would also be broken which also means a stripe token here may be incorrect as this is probably magstripe data too depending on the options[:track_data]\nI expect the tests were written for store after the fact and a code path was missed, but it's not fair to say that this probably wasn't intended just by looking at tests alone. To make that assertion we would have to say our tests have 100% code coverage, and test every possible code path. \nWhat I have in this PR is the least invasive and smallest  possible fix as well as solid regression tests to prevent it from happening in the future. Changing the interface to require a StripePaymentToken is a breaking change and I don't think we should do it in a minor version release.\nChanging card_brand (which as @jordan-brough mentioned) that is used by all gateways and having it accept bad input in a system we control I think is a step back. If I don't have a \"card\" I should not be asking for the brand of it. card_brand always returns a string, and it is fair to have a method that expects things of it's arguments. The case I'm making is that a string was always an expected argument of store, but that wasn't very transparent or documented.\nThis is_a?(String) check is a code smell for sure, but it follows the conventions used in the rest of the class and is checked in several other areas. Despite the standard \"you shouldn't do this\" standard practice smell, the solution is actually very clean and relatively debt free. I put in time diagnosing this issue and I would like to unrestrict active merchant versions for people who use the solidus gateway extension. The solution is simple, and is the least invasive fix we have. \nIf we want to do a larger refactoring of the private interface I'm on-board with that, but I'd like to open it up as an issue and have someone interested in contributing to the project further take it up, or I can when I have more time. Given the limited amount of free time I have for this, I'm doing what I can to help this project.\n@timbeiko I really hope you'll accept this PR as a small iterative approach to fixing the regression so we could have a larger discussion later on how encapsulate this type of data and handle it better in the private interface and it will let our extension and others using Stripe.js (there are people I know who also hit this without our extension who use active merchant directly) stay up to date with recent versions.\n@bizla If you wanted to help out with the implementation I would also accept a pull request to the branch I'm using for this PR.\n. @bizla @timbeiko You're kidding me right?\nI maintain a few gems, solidus extensions and cancancan. I try to model what I would hope from one of the contributors to any of them.\nI gave you a very robust fix. It passes all tests. It adds two new tests to ensure regressions are covered. It was a one line fix. One line. This feels like a total slap in the face to contributors who decide to fix problems rather than just open issues. I've contributed to this project in the past and it feels like there was an entirely different atmosphere at the time and I'm likely not to continue.\nThe place to have this discussion was here https://github.com/activemerchant/active_merchant/commit/f2a7ea3ed298038529acce7552b733ade8f3bc90 two months ago when card_brand was being applied to the argument and by extension redefined the acceptable interface. It was missed in code review which is totally fine and happens quite often.\nThis would have made it feature equivalent to the code that existed before that commit which is only two months old or so. \nIf you want to spend time and refactor things, go for it. But when someone has a one liner to solve the problem now, and doesn't want to spend hours fixing a private interface that has existed for 3 years that's okay. The fix has no downsides whatsoever, it breaks no tests and it is blatantly obvious and self contained behavior. \nIt is extremely simple to get the fix in now, and fix it however you like later. \n. ",
    "chobson": "@girasquid I believe this is online now, would you be able to take a peek?\n. Sorry, Luke's busy. @aprofeit ?\n. \ud83d\udc4d \nHearing from Elavon on this subject, the issues that led to this PR were caused by a defect on their end which they are now looking into. \n. ",
    "awladnas": "@ntalbott \nThanks for your reply.I can not find any example of purchasing from customer profile of beanstream gateway. Can you provide one?\nI  was not able to set payments_api_key. Can you help how can I set it ?\nThere is only one example of purchasing, there is no example for storing and purchasing with secure payment. \n. ",
    "Danielpk": "Travis is falling, I'll fix the issues.\n. Hey guys, the build is green.\nLet me know if is there is anything to improve.\n. ",
    "rubemz": "does anyone have any thoughts on this change?\n. This has been in production for some months already\n. cc @davidsantoso Please Review. \nI reopened https://github.com/activemerchant/active_merchant/pull/2116 and rebased with master. Based on https://github.com/activemerchant/active_merchant/pull/2116, which was closed. @davidsantoso Please Review. @davidsantoso sure I will add one. I've been using this in production for around a year now too.. @davidsantoso took a bit :p but I added the integration test here  0a09118\nanything else?\nIf not I can squash it\n. 03e08a1\nOn Wed, Jul 6, 2016 at 9:26 AM, Fabio Kreusch notifications@github.com\nwrote:\n\nIn lib/active_merchant/billing/gateways/litle.rb\nhttps://github.com/activemerchant/active_merchant/pull/2116#discussion_r69720248\n:\n\n@@ -197,7 +197,10 @@ def add_payment_method(doc, payment_method, options)\n         if payment_method.is_a?(String)\n           doc.token do\n             doc.litleToken(payment_method)\n-            doc.expDate(options[:exp_date]) if options[:exp_date]\n-            if options[:exp_month] && options[:exp_year]\n-              expiration_date = \"#{format(options[:exp_month], :two_digits)}#{format(options[:exp_year], :two_digits)}\"\n\nMaybe refactor the existing expiration_date method so that it can be used\nhere too?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/2116/files/877e0a4af24b3de30d6a3bc9c1ee5802e7c3f068..9449ae41640035b2cd95e533f7b51eb749892abf#r69720248,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAJOzeG3Z_Xe05x3xpf0tqbf5sOyGIstks5qS57dgaJpZM4IorHs\n.\n\n\nRubem Nakamura\n. ",
    "rhlrjv": "https://stripe.com/sg\n. ",
    "krtschmr": "Ah, i'm in, but yes, private Beta. i forgot about it. ill ping ya!\nOn 06.06.2016 20:23, Tim Beiko wrote:\n\nStripe is still in private beta in HK, can you ping me once they go to \nBeta and I'll merge this?\nThanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/activemerchant/active_merchant/pull/2128#issuecomment-224044217, \nor mute the thread \nhttps://github.com/notifications/unsubscribe/AMv1un-ATH3bsRcb1Q3KYCuH5qZ2RriKks5qJGWPgaJpZM4IvK7h.\n. \n",
    "ekremkaraca": "Any updates? @ntalbott @timbeiko. ",
    "shantilal-narola": "Thank you @ntalbott , Braintree Support Team was solved this error.\n. ",
    "talyssonoc": "I've found out that it's missing a n2:SoftDescriptor in that array: https://github.com/activemerchant/active_merchant/blob/v1.60.0/lib/active_merchant/billing/gateways/paypal/paypal_common_api.rb#L623. If it's the correct fix, I'll be glad to send a PR to fix that.\n/cc @duff @ntalbott @Soleone @melari \n. @Soleone I believe it was removed here: https://github.com/activemerchant/active_merchant/commit/aec39c6fb89ed335c43ef284db3d7e382ede1bd9#diff-ab5a6a27fa046b2655fb1cae4c373356L607\nIn this commit it was moved to a different place, but then in this other commit (https://github.com/activemerchant/active_merchant/commit/e7b35c2ea9925dbecf6424e86353ae1e9daad794#diff-ab5a6a27fa046b2655fb1cae4c373356L584) it was moved to the pay_pal.rb file, that PayPal Express gateway doesn't use. I think it may be a good reason to put it back on paypal_common_api.rb again?\n. @duff I'm glad to help!\n. ",
    "balexandr": "I was on the wrong version. Needed to be on 2.63.0 not 2.4.0\n. ",
    "srpago": "Gateway for Mexican provider Sr. Pago(http://senorpago.com/).\n. ",
    "henriquesacramento": "hi, nice job.\nHow can i use that implementation in my project?\nThanks.\n. Ok. I do that.\nBut in application backend i can't see any option to configure iugu.\nCan u help me?\n. ",
    "iagopiimenta": "Any chance of being merged?. ",
    "gbrlcustodio": "It's been a while since this pull was requested, no updates since then? It would be great to have any response from author/contributors.. Thanks for reply, @alexandremcosta, it's being a while since this PR was open. Do you think that it would take too long to be merged? In the meanwhile do you suggest to use your branch?. Thanks for the fast reply, it helped to move forward with my decision.. ",
    "alexandresaiz": "@duff any chance to have this merged before the end of July?\n. @duff thanks! Closing this then, as @davidgf as created a new PR following your instructions\n. @jasonwebster hey Jason, we'll definitely do so !\n. @jasonwebster hey Jason, we did it. When do you think this will be live?\n. ",
    "zxlin": "Can someone take a look at this please, it's 5 lines of change to the country code mappings, nothing different with the logic. We would love to be able to have these up to date country codes.\n. ",
    "ericduvon": "@duff how long till you can merge this change into next release?\n. ",
    "rickywiens": "Thanks for resolving this.. ",
    "smogil-squadup": "Awesome - thank you! . ",
    "EvanMcEwen": "Hey @bruno any chance you have made these changes and can push the relevant commits? I would love to start using this Gateway with ActiveMerchant. If not I can make a new PR referencing this one with the requested changes.. ",
    "iirving": "Hey @bruno what is the status of this PR? and is there anything I can do to help?. I'm looking to finish this PR here : https://github.com/activemerchant/active_merchant/pull/2456. the https://github.com/activemerchant/active_merchant/pull/2456 has been accepted and merged so this PR can be closed (many thanks to @bdewater and @jasonwebster) and @bruno for the orignal heavy lifting!. responded to all comments, and barring anymore feedback, ready for merge \ud83d\ude4f . ready for my close up, mr @bdewater !. will do. I'll remove :swiff. as per https://developer.paysafe.com/en/payments/cards/api/#/introduction/error-summary\nthe api paysafe has 32 common errors, 48 Authorization Errors,  7 Authorization Reversal Errors, 7 Settlement Errors, and 14 Refund Errors.  I was not sure about mapping those to the 13 standard_error_codes (https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L81) but will try again.  I would expect that most of the paysafe error codes will resolve to  :card_declined or  :processing_error.  If that is expectable. \n. that's the approach i'm taking, minus any clever heuristics, just a brute force case statement string matching with an else clause the falls back to :processing_error.  that way it will also be easy to understand and amend the mapping.. okay I figured out that the unstore method was removed because the test was failing and that was because the successful_unstore_response was undefined.   fixing. updated. fixed. thats what happens when you don't line warp :man_facepalming: thks. fixed. fixed. yep a few ambiguous error code on both sides.. changed it to then's and yea it is so much better. thk u @jasonwebster . ",
    "Amos47": "This LGTM \ud83d\udc4d\n. ",
    "mwhagedorn": "@timbeiko please see:  https://www.mastercard.us/en-us/issuers/get-support/2-series-bin-expansion.html, starting in October MC will support two BIN ranges\n. ",
    "jeffblake": "This is the monkey patch I've come up with. Sorry, I'm short on time for a proper pull request...\n```\n  ActiveMerchant::Billing::AuthorizeNetGateway.class_eval do\nACCEPT_JS_DATA_DESCRIPTOR = 'COMMON.ACCEPT.INAPP.PAYMENT'\n\nclass ActiveMerchant::Billing::AcceptPaymentToken < ActiveMerchant::Billing::PaymentToken\n  def type\n    'accept'\n  end\nend\n\ndef add_payment_source(xml, source)\n  return unless source\n  if source.is_a?(String)\n    add_token_payment_method(xml, source)\n  elsif card_brand(source) == 'check'\n    add_check(xml, source)\n  elsif card_brand(source) == 'apple_pay'\n    add_apple_pay_payment_token(xml, source)\n  elsif card_brand(source) == 'accept'\n    add_accept_payment_token(xml, source)\n  else\n    add_credit_card(xml, source)\n  end\nend\n\ndef add_accept_payment_token(xml, source)\n  xml.payment do\n    xml.opaqueData do\n      xml.dataDescriptor(ACCEPT_JS_DATA_DESCRIPTOR)\n      xml.dataValue( source.payment_data )\n    end\n  end\nend\n\ndef add_market_type_device_type(xml, payment, options)\n  return if payment.is_a?(String) || card_brand(payment) == 'check' || card_brand(payment) == 'apple_pay' || card_brand(payment) == 'accept'\n  super\nend\n\nend\n``\n. Would be great to get this merged. This broke my company's Stripe Connect integration with all of our clients, appears to be due to the fact that we have always exposedline_items` to the post data. The Stripe error we are getting (and we are not in the level3 beta) is: \n{\"error\"=>{\"code\"=>\"parameter_missing\", \"doc_url\"=>\"https://stripe.com/docs/error-codes/parameter-missing\", \"message\"=>\"Missing required param: level3[merchant_reference].\", \"param\"=>\"level3[merchant_reference]\", \"type\"=>\"invalid_request_error\"}}\nAlso can't find any Stripe documentation on what these parameters are supposed to even be.. Also I quickly added in those fields, and now get this error:\n{\"error\"=>{\"message\"=>\"Received unknown parameters: item_id, name, price\", \"param\"=>\"level3[line_items][0][item_id]\", \"type\"=>\"invalid_request_error\"}}\nSo I think the level3 integration should only copy in attributes in line_items that Stripe understands. \nI have no idea what this level3 stuff is, and I can't find documentation on it, so I'll have to rollback gem version.. Is that test hitting the Stripe servers? I'm getting the error directly from Stripe when the line_items are passed into the @options\nI'm calling the capture method on the gateway from an authorized payment. I don't know / haven't checked if the bug also occurs on the purchase method. I'm using customer profiles, \ndef capture(cents, response_code, gateway_options)\n    provider.capture(cents, response_code, adjusted_gateway_options(gateway_options))\n  end\nwhere gateway_options[:line_items] is present.. Sorry, let me be more clear. Our software supports multiple payment gateways. line_items has always been there, from an Authorize.NET integration. Authorize.NET expects different parameters than Stripe's level3... so I think there should be some validation done within this library so that errors aren't triggered.\nI basically have a single GatewayOptions class that takes in a payment record, and generates a hash to send as the options to the Active Merchant gateway. Among many things, this includes line_items . I appreciate the response, and understand your position. I suppose I will have to refactor GatewayOptions and make it more gateway-specific. . ",
    "taf2": "https://github.com/activemerchant/active_merchant/pull/2422. This looks like it's working let me know if I can do anything to help with merging.. Anything needed to get this merged?. Okay, I see https://github.com/activemerchant/active_merchant/pull/2496 so a default is required.  I guess was there any specific reason for NC vs another state?. ",
    "ashukasma": "@shaded13 , we can help you to create this payment gateway in Shopify as an alternative payment option.\n. ",
    "yogendra689": "it worked for me after I change ,\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/cyber_source.rb#L272\nto \nrequest_id, request_token, action, money, currency  = identification.split(\";\")\noptions[:order_id] = request_id\nLet me know your thoughts on this.\nhttps://github.com/activemerchant/active_merchant/compare/master...yogendra689:test\n. Closing this issue, as I found order_id parameter is required for authorize method in options.\n. ",
    "joshreeves": "@davidsantoso @jasonwebster - Hey guys. Would love some feedback on this. Not sure if there's some additional protocol I need to follow, but it would be great to get this merged so that I can switch back to using an un-forked version of AM. . @davidsantoso - Thanks for the response. Here is the documentation for the method (https://wiki.usaepay.com/developer/soap/methods/quickupdatecustomer).\nThe reason this feature is critical for us is because the updateCustomer method, which AR currently only supports, requires a complete payment method at the time of updating. If a complete payment method is not present then the existing payment method is overwritten. Since it is impossible for us to retrieve a complete payment method from the USA ePay customer store, we would have to resort to an \"all-or-nothing\" approach to updating customer data. In other words, to update a customer's zip code, we need their credit card number. Using the quick_update_customer solves this problem for us.. @davidsantoso - Sorry in advance for the long-winded response....\nThanks for the feedback. I think there might be some confusion (possibly on my side). If you look at the docs (https://wiki.usaepay.com/developer/soap/methods/quickupdatecustomer), you'll see under the \"Arguments\" heading a table of arguments that the quickUpdateCustomer accepts. One of them is an array of things called a FieldValue. There are a number of places in the USA ePay API where it accepts a FieldValue, however AM currently does not support any of them. My PR is adding in support for creating both a FieldValue and a FieldValue array (https://wiki.usaepay.com/developer/soap/objects/fieldvalue). My attempt was to add them in such a way that they could be used for other end-points if needed (for example, build_customer_data contains a build_custom_fields call which is currently marked as TODO. CustomFields on the Customer object is similarly a FieldValue array).\nIf you'd prefer to not have build_field_value and build_field_value_array as reusable methods for building those types of params, I can move that logic into the build_quick_update_customer method directly. However, as far as I can tell, build_field_value_array is really no different than build_transaction_field_array in terms of its purpose of being a reusable method for building an array of common params.\nTo demonstrate the reusability of what I've added, I could add to this PR support for the CustomFields property of the build_customer_data (currently marked TODO); however, my intention was to keep this PR focused for just the purpose of adding support for quickUpdateCustomer, while doing it in a way that would be reusable so that CustomFields could eventually benefit from it.\nAs far as the CUSTOMER_UPDATE_DATA_FIELDS, at some point I need to construct a single hash of all the options that the FieldValue array can accept. Are you saying you'd rather see something like this directly inside build_quick_update_customer:\ndef build_quick_update_customer(soap, options)\n  soap.tag! \"ns1:quickUpdateCustomer\" do\n    build_token soap, options\n    build_tag soap, :integer, 'CustNum', options[:customer_number]\n    fields = [\n        CUSTOMER_PROFILE_OPTIONS,\n        CUSTOMER_RECURRING_BILLING_OPTIONS,\n        COMMON_ADDRESS_OPTIONS,\n        EXTRA_ADDRESS_OPTIONS,\n        GENERAL_PAYMENT_METHOD_OPTIONS\n      ].inject(:merge)\n    soap.tag! \"UpdateData\", 'SOAP-ENC:arryType' => \"xsd:FieldValue[#{options.length}]\", 'xsi:type' => \"ns1:FieldValueArray\" do\n      options[:update_data].each do |k, v|\n        build_field_value soap, fields[k][1], v, fields[k][0] if fields.keys.include? k\n      end\n    end\n  end\nend\nAgain, sorry for the long-winded reply. My goal is to fit this into the standards of AM and have it be as DRY as possible.. @davidsantoso - Awesome. Glad to hear it. We've been using this code in production since September and I'm eager to get back to using the AM repo.\nSo the reason for breaking out the COMMON_ADDRESS_OPTIONS is because in some cases ePay refers to those params as address1, address2 and some times street1, street2. I assume this was a mistake on their part, but I actually attempted to combine them and it didn't work, so I reluctantly broke them out.. You can see here they are street1, street2 (https://wiki.usaepay.com/developer/soap/objects/address)\nAnd here they are address1, address2 (https://wiki.usaepay.com/developer/soap/methods/quickupdatecustomer)\nI believe that only QuickUpdateCustomer refers to them as address1, address2\u2014which is why I didn't separate them further.. @davidsantoso - Rebased and tested in our app. Thanks for working with me on this!. ",
    "oklas": "Hi @bpollack, thanks for attention to this pr. Actually the original code has a bug wich appears in test environment.\nThe first bug is in the line 24 where both test and production variables (test_url and live_url) is initilaizing by merchant production url - this is not rigth, for test variable must be used test url. And the second bug is that test variable does not used anywhere when it must be used as gateway url in test environment at line 296.\nThe documentation which declare both test and production url on provider site is here. As you noticed the production url it same as in origin code. But test environment implementation is wrong. This pr is a fix.\nThis will be useful for future users wich wants to integrate this merchant and for systems which wanted to be actual and tested each time before deploy. Thanks.. ",
    "cyclotron3k": "@jasonwebster I expect so. I'll take a look...\n. I'm closing this pull request because I deleted the fork that it was based on, and was thus unable to make the requested changes. I've re-forked, added all the changes there and made a new pull request: #2333. ",
    "mward-nerdery": ":+1: for this. Our team would certainly take advantage of being able to set the duration window\n. ",
    "chrisboulton": "With Braintree, they also support a provision_raw_apple_pay call, which enables \uf8ff Pay on the Braintree account and also returns a list of supported card brands. (https://github.com/braintree/braintree_ruby/blob/02db6f8d75830aa3338d61985183aab4eebfab9b/lib/braintree/merchant_gateway.rb#L8). Is it worth calling this instead of attempting a test transaction? Or is it worth doing both?\nI feel like this is probably a good start, but longer term, is it worthwhile evolving the network tokenization checks, into something where a list of card brands/payment instruments supported is returned? If that list is empty, tokenization isn't supported.\nThings are somewhat problematic in this space right now. A merchant might be using a PSP with their gateway that only supports tokenization on specific card brands - for example, if they're using the AMEX processing network, AMEX only supports tokenization for AMEX cards. Right now there's an assumption in Active Merchant that tokenization is supported if a test against a VISA bin returns successfully.\nWith Braintree this kind of check is simple, because provision_raw_apple_pay gives you that list. It's accurate from what I can tell. For other gateways such as Auth.net, I'm not aware of any API call that returns such information, so some kind of test transaction might be the only option for those.. ",
    "alisyed": "@jawspeak thank you - even though it didnt make it into AM, we're finding this very useful. I wish we had known about AM's mission beforehand so we could have gone about building our own abstraction layer to ensure our logic isnt filled with ifs, buts and elses to cater to different payment gateways!. ",
    "Tonkpils": "@jasonwebster , no worries. Any feedback on this PR would be great. We've been using it in production for a couple of weeks already and it's working fine. I know there's a couple of clean up things I have to tackle but any feedback on structure and design would be greatly appreciated. \n. @jasonwebster anything else that needs to get done for this to be merged?. @jimm could you take over this? \ud83d\ude04 . I'm not sure how this should work, I see some gateways have API keys and some don't for remote tests...ideally I'd remove these but then the tests would fail?\n. ",
    "jimm": "@Tonkpils of course!. @bpollack Yes, please feel free to close it. Although the changes might still be useful for ActiveMerchant, we are no longer Flow.io customers (changes in our business, no fault of their fantastic platform) and have not used this code for a while and are not able to support it.. ",
    "bl": "@joevandyk You mentioned this breaks the code in parse. From what I can tell I can't see where this would cause any unexpected behaviour. Only the first message element that appears is used.\nIs the goal to transform on multiple messages?. It sounds like you're describing two separated actions to store the new credit card, then create a transaction. From my knowledge both these actions are defined and implemented separately on the Braintree's store and purchase actions.\nIs there a particular reason why you're looking to perform both of these simultaneously?. @berkcaputcu The rationale for this change is Stripe's api_errors return a Response where error_code: nil, instead of an actual error code. This \nCurrently I've only checked for api_error type responses. The Stripe API has returned responses structured in the JSON format above in the description. These responses don't include any other error codes other than the broad error_type.\nI haven't checked other Stripe responses to see if they also only include an error type field (and not a code or decline_code field). This shouldn't be an issue though as errors are filtered on STANDARD_ERROR_CODEs, and the only Stripe API error type included is api_error. This means responses other than api_error that return only a type field still result in Response.error_code: nil\n@jasonwebster I agree that api_error is not a great description, as these errors are generic and revolve around the API itself and (probably) not actual payment service data. I couldn't come up with something better at the time though, so I'm all ears for suggestions.. Additionally it looks like the Redsys gateway is failing on master, which is causing this branch to fail. I'm currently \ud83d\udc40 to figure out what exactly is going on.\nI've got a PR up to resolve this here https://github.com/activemerchant/active_merchant/pull/2296. @jasonwebster @berkcaputcu \nI was wondering if we could get some feedback on a better name to categorize this generic API error instead of api_error.. @jasonwebster sounds good.. Hmm \ud83e\udd14, It looks like nokogiri 1.7.0 was released over the break. This version no longer supports ruby 2.0 and is causing CI to fail. I'm not too sure what the approach to solving this would be.\nhttps://rubygems.org/gems/nokogiri/versions/1.7.0. @davidsantoso Thanks for the feedback. I've responded to your comments below:\n1. I agree this approach might not be most ideal. I'm currently looking into a cleaner alternative that doesn't rely on raising a previously rescued exception.\n2. The goal of this change is to have a way of correctly categorizing an API/service error from the Stripe gateway. Currently error_code: nil doesn't tell us much more than the error received couldn't be mapped to an AM supported error code. This could have been a valid 4xx response with an error code not currently supported, or a 5xx API error response. Either approach of adding api_error to AM's supported error codes, or raising the ResponseError on 5xx responses satisfies this and gives more insight into the type of error received.\n3. I agree that raising the error is new behaviour that forces the hand of people integrating AM without explicitly handling 5xx responses in this way. I think this is one of the major benefits of adding an api_error code to the Stripe gateway's supported error codes .nil error codes become api_error without raising unexpected exceptions.. @jasonwebster I agree. Additionally implementing this into handle_response as @davidsantoso suggested would require minor refactoring as the Stripe gateways call to ssl_request already expects handle_response to raise a ResponseError exception.. I've removed the #{(Time.now.year + 1).to_s.slice(2,2)} bit here as this test is now always operating on the year 2017.\nFor a more detailed breakdown of the cause of this error, the DS_SIGNATURE was being generated from the sign_request method. This generated a base 64 encoded number using a bunch of test data, which does not change, but also used the credit_card.year and credit_card.month (where the credit card year changes every year).\nThe credit card data is added to the Gateway.options on add_payment called within RedsysGateway.purchase. It's later used in sign_request when generating the base 64 value here via merchant_data_xml method.. This test simply covers test_mode_live_card standard error codes are being assigned correctly on decline_code: test_mode_live_card Stripe API responses. This is unrelated to this PR and can be moved to a separate PR if it makes more sense.. ",
    "amandapuff": "Just ran into this error on the following line:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net_cim.rb#L861\nRelevant stack trace:\nTypeError: no implicit conversion of String into Integer at lib/active_support/rescuable.rb:L#80\n/usr/local/lib/ruby/gems/2.3.0/gems/activemerchant-1.58.0/lib/active_merchant/billing/gateways/authorize_net_cim.rb:861:in `[]'\n/usr/local/lib/ruby/gems/2.3.0/gems/activemerchant-1.58.0/lib/active_merchant/billing/gateways/authorize_net_cim.rb:861:in `commit'\n/usr/local/lib/ruby/gems/2.3.0/gems/activemerchant-1.58.0/lib/active_merchant/billing/gateways/authorize_net_cim.rb:397:in `create_customer_profile_transaction'\nSeems like response_params['messages']['message'] must be returning an Array, not a Hash.. ",
    "albaer": "Hi! I'm interested in getting this PR merged, if that's still on the table, and I'd be happy to help if I can. I'm working with the iframe auth/server capture setup Chris described above, and it would be nice to be able to pass in the order id. . I'm not sure. If adding this option is good with you, I can just rebase it, make sure everything is all set  with contribution guidelines and documentation, and then let you know. How does that sound?. ",
    "joeyjoejoejr": "@bpollack I was just talking to some coworkers, and they said they had this open.  It's been rebased and should be ready to go.  Let me know if there are any changes you would need to it.. ",
    "marjaimate": "Hi @jasonwebster,\nWhen doing checkouts / purchases in Europe (or with a European card), it's very common to be faced with a 3D secure flow from the customer point of view. From the customer's point of view, it's a small inconvenience to complete, but at least they know they are covered.\nHowever, from a developer / integration angle, it's not the easiest flow to get right. 3D secure related code already exists in active_merchant so I say it's ok to add it for Realex as well.\nOn the common interface, 3DS has strict rules how to handle, which are all common between these solutions. Having a common interface for it would be great, all it is, is a redirect to a 3rd party with set params (TermURL, PaReq, MD), and then handling the callback when that 3rd party site finished, and sending on the appropriate params (PaRes, MD, etc.) to the next call. Active Merchant is there to make checkout code and integration easier, so having a simpler out-of-the-box solution for 3D secure flows would be an asset to the library I think.. Sure thing, I wouldn't be that familiar with the internals of Active Merchant to identify that common ground for all 3DS and implement nicely. I get the argument on keeping it checkout focused, although there are already some gateways that have other APIs - see some not so common examples - so I thought this can be added too.\nIf you feel like, this is not appropriate to Active Merchant, that's totally fine by me.. ",
    "abarrak": "Hi @bpollack,\nI wonder why closure of this fine PR by @mpospelov .\nactive merchant master is not working with migs #purchase_offsite_url unless such changes applied.\nThis is the rendered error from MiGS unless SHA256 is used:\n. Fantastic indeed @tubbo.\nI was seeing the failure in app tests only, and now this solves it !. Fixed in PR: https://github.com/activemerchant/active_merchant/pull/2874.. >  If the logging bothers you, I'd rather see a PR that can better handle the connection switching to gzip\n@bpollack I'm not following your point here.\nGizp behavior is inconsistent, and occurs in some endpoints only.\nThe logging bit is beyond AM, where internal ::HTTP doesn't handle compressed string.\nI'll submit another approach of handling inside scrub.. I agree with you that disabling gzip is not an optimal workaround.\nSince you indicated this isn't specific to SpreedlyCore, I'll look into another mean to resolve it or keep it outside AM.. @bpollack what's the status on the PR?\nParsing gateway_specific_response_fields then return it with response reflects the full API return.. Updated accordingly.\nSome projects required ruby-gemset to be checked, hence ignoring it in .gitignore.\n. I had similar thoughts initially, but didn\u2019t want to refactor as author\u2019s intention may be different.\nsave_card now is refactored to more consistent.. Alright, I will reset to the old setup.\nI don't know whether it's better to keep supporting :store option as another way while keeping the refactor:\nruby\ndoc.retained(true) if options[:store] || options[:retain]. I've updated to maintain :store too.\nPlease advice @dtykocki if it's better to revert back.. Alright, I restored back old setup in new PR #2798.. ",
    "ghartsho": "Just ran into this, you may have your LoginId and TransactionKey swapped. ",
    "takatoshiono": "@jasonwebster What do you think about this PR? If I add more tests to this PR, will it be possible to merge?. ",
    "rikterbeek": "Hi @rwdaigle,\nClients only need to setup a Test account to get access to our APIs, but that\u2019s it. You can signup here: https://www.adyen.com/signup. Very happy to give you more background and context around this initiative: just email support@adyen.com asking for Rik, and we can set-up a call? \nRegards,\nRik\nAdyen. @bpollack,\nYes I would like to for a joined customer.  I will update the PR.\nRegards,\nRik\nAdyen. @bpollack,\nChanges are made is this something you can merge ?\nRegards,\nRik\nAdyen. I am not that familiar in ruby. Can you provide me some details what test you want to see ?. if that is the case then options[:phone] will be used right ?. ",
    "renatodex": "@jasonwebster \nThis is already merged? There is something pending?. ",
    "aemonm": "I dropped in a PR for this, #2344. . ",
    "bdewater": "PR merged \ud83d\ude04 . Forgot about this one :) will update for latest Rubies and Rails 5.1 Monday at the latest.. It aligns better with our gemspec. By requiring a specific rails gem version (which is just a readme file and gem requirements) we indirectly require a newer version of activesupport.  Now that version requirement is made directly. \nAlso we don't need to download and Rails and it's dependencies, which means we cut down from 44 to 18 gems on the CI for the ActiveSupport 5.0.x test. The way it (AFAIK) works is that it looks in the gemspec and in the specified gemfile to build the dependancy graph that satisfies both.\nIf anything, I should rename those files to show we're not tightly coupled to Rails :). It has been split off into a separate gem: https://github.com/activemerchant/offsite_payments/blob/master/lib/offsite_payments/integrations/bit_pay.rb. No, still valid.. Thanks for your contribution!. \ud83e\udd26\u200d\u2642\ufe0f . The docs on this are a bit out of date. A gateway would exist in this repository, an integration would live in offsite_payments. The split happened in June 2014. \nWhich one of the two to go with depends on the API. Some payment gateways support both options, and the choice would depend on the application requirements, the biggest one being PCI compliance for ActiveMerchant gateways.. Closing this, please reopen if there's still something unclear.. The short answer is no, as explained in https://github.com/activemerchant/active_merchant/issues/2430#issuecomment-307126223\nI'll close this issue so we can have the discussion in one place over there, if you have further questions.. That list is not up to date. When in doubt, use the source https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/visanet_peru.rb \ud83d\ude04 \nSpree and Solidus specifcy activemerchant as a dependancy, so I expect it to work.. You're welcome!. To get the tests to pass you probably need to change this line to match the additional check you added whether responseMessage is \"Approved\".. Somebody's working on this \ud83c\udf89  https://github.com/activemerchant/active_merchant/pull/2528. ISK is already defined as a non-fractional currency, but you must use localized_amount in this gateway's code to properly format amounts.. Hey, thanks for your pull request! I've taken the liberty to update the title to actually reflect the changes of this pull request \ud83d\ude04 . Looks good, thanks for seeing this through @iirving \ud83d\ude04 pinging @jasonwebster for a second pair of eyeballs and merge if he's ok too.. Shopify still uses ActiveMerchant but like the link states we're not using it to accept new payment providers on to our platform. Contributing.md also states new gateways for Shopify are invite only now.. I assume this answered the question, if not feel free to re-open the issue :). I guess we could add the XSD to the test suite and validate a generated Apple Pay request against that. It should fail without this change.. Took longer then expect but adding XSD validation to all network tokenization tests uncovered that our code for Mastercard was also not putting out valid XML. CI should be all green now.. Thanks!. Merged with https://github.com/activemerchant/active_merchant/commit/2b89e5295c1fdc7769e44f51b9fbd36b0c84fcf9. Hello! And thanks for contributing. It looks like some folks are already working on this in https://github.com/activemerchant/active_merchant/pull/2591 - could you take a look and see if there's anything missing over there?. Which gateway are you using? And have you contacted their support? This does not seem to be an issue with the code here since you're not getting an error, but a failure. There's a ton of reasons why an authorization might fail.. Tokenization is usually done by the payment gateway (e.g. Stripe or Braintree tokens, specific to the gateway) or the network (Visa, MasterCard, etc. used for example by Apple Pay, tokens look like normal credit card numbers for backwards compatibility). If you don't have the security expertise and/or don't want to handle the PCI DSS compliance you're better off not processing raw credit card data, absolutely.\nI'm closing this issue since building your own tokenization solution (not something I would recommend) or support for integrating tokenization solutions on your website is not the scope of the ActiveMerchant project.. I think this is a great idea, and a fair tradeoff that users opting into this bring their own active_support require if needed. @jasonwebster @davidsantoso WDYT?. Won't the client (AM) automatically negotiate the highest supported version with the server?\nLooking at git blame for other gateways where this is explicitly set, it's usually because it needed downgrading because the latest version had problems. Which was then forgotten and unchanged for years.... Rebased now that Travis is running 2.5 tests.\nI've added a rake task similar to the SSL certificate verification one to test the version negotiation. It requires Ruby 2.5. Output:\n```\n$ bundle exec rake gateways:ssl:min_version\nCould not load gateway PaypalExpressCommonGateway from /Users/bartdewater/src/github.com/activemerchant/active_merchant/lib/active_merchant/billing/gateways/paypal_express_common.rb.\nCould not load gateway Cc5Gateway from /Users/bartdewater/src/github.com/activemerchant/active_merchant/lib/active_merchant/billing/gateways/cc5.rb.\nCould not load gateway SmartPsGateway from /Users/bartdewater/src/github.com/activemerchant/active_merchant/lib/active_merchant/billing/gateways/smart_ps.rb.\nVerifying 202 gateways for SSL min_version=TLS1_1\n......E........E.................EE...............E...........................E........EF......E...E.........E.......E......................E.........E..E.E.E.E.................E......\nSucceeded gateways (165)\nFailed Gateways (1):\nActiveMerchant::Billing::ModernPaymentsCimGateway - #\nError Gateways (18):\nActiveMerchant::Billing::BalancedGateway - #\nActiveMerchant::Billing::BorgunGateway - #\nActiveMerchant::Billing::CreditcallGateway - #\nActiveMerchant::Billing::CredoraxGateway - #\nActiveMerchant::Billing::EzicGateway - #\nActiveMerchant::Billing::LitleGateway - #\nActiveMerchant::Billing::MigsGateway - #\nActiveMerchant::Billing::NcrSecurePayGateway - #\nActiveMerchant::Billing::NetbillingGateway - #\nActiveMerchant::Billing::PacNetRavenGateway - #\nActiveMerchant::Billing::PaySecureGateway - #\nActiveMerchant::Billing::PslCardGateway - #\nActiveMerchant::Billing::SafeChargeGateway - #\nActiveMerchant::Billing::SallieMaeGateway - #\nActiveMerchant::Billing::SecurePayAuGateway - #\nActiveMerchant::Billing::SecurePayTechGateway - #\nActiveMerchant::Billing::SkipJackGateway - #\nActiveMerchant::Billing::WebpayGateway - #\nGateways missing live_url (12):\nActiveMerchant::Billing::BanwireGateway\nActiveMerchant::Billing::BraintreeBlueGateway\nActiveMerchant::Billing::CC5Gateway\nActiveMerchant::Billing::CitrusPayGateway\nActiveMerchant::Billing::IatsPaymentsGateway\nActiveMerchant::Billing::JetpayGateway\nActiveMerchant::Billing::MerchantOneGateway\nActiveMerchant::Billing::MerchantWarriorGateway\nActiveMerchant::Billing::MercuryGateway\nActiveMerchant::Billing::PayexGateway\nActiveMerchant::Billing::SwipeCheckoutGateway\nActiveMerchant::Billing::TnsGateway\n``\nSo farModernPaymentsCimGatewayis the only worrying one, and the others we can look into. I do believe we should make this a default setting after the deadline has passed on supported Rubies, but I'm open to feedback.. @bc-anna 1.78 was [released last week](https://rubygems.org/gems/activemerchant/versions/1.78.0) which includes that fix \ud83d\ude04 unless there's still any trouble, I'll close this issue.. yw!. Thanks for your contribution, but this pull request really requires some cleanup before it can be properly reviewed. Please undo your changes to the.gitignorefile, the readme andskip_jack_test.rband squash down the commits with more meaningful messages (see http://www.rakeroutes.com/blog/deliberate-git/). More-or-less monthly, there's no firm schedule. You could always point your Gemfile to the merged commit on master if you need it now, the delta with the latest release is pretty small :). Kinda forgot about this one; just rebased so a review would be much appreciated!. I feel we should make our stance on dropping unsupported Ruby/Rails explicit in the readme here as well: https://github.com/activemerchant/active_merchant#api-stability-policy. @bpollack can you include Rails (or Active Support) in that compatibility policy?. For the curious,req['connection'] ||= 'close'` was previously set automatically here:\nhttps://github.com/ruby/ruby/blob/fef8339f582b125e1fec5f3d47adbb48f7cede92/lib/net/http.rb#L1453-L1455\nbut now that we start it ourselves, we have to set this ourselves, too. Thanks @bpollack !. Hi @grantbdev sorry this is causing you trouble, the change had a much larger impact than I anticipated \ud83d\ude1e \n\nAssigning request_start before headers\n\nMakes sense \ud83d\udc4d should've caught that in the review, anything we do in there should be instrumented, even if it's simply assignment.\n\nI am making sure to pass a non-frozen headers hash for now, but if frozen headers are supposed to be a supported use case maybe it should be converted to not do a mutation.\n\nI believe this usually gets dup'ed in most libraries to prevent mutating passed in arguments.\nWould love to see a PR to fix these \ud83d\ude04!. Fabulous first contribution! Thanks \u2728 . Shopify jargon for manual testing. We've rolled this out in production and confirmed it works.. Devil's advocate: should we configure Rubocop with double_quotes style? Rails uses this for example. My gut feeling says it's much more prevalent in this codebase and thus will need less fixing.. I had forgotten I had written a test for this \ud83d\ude05 should be fixed now.\n. Fixed both issues and added a reference to discuss the plugin/gem idea. Please re-review \ud83d\ude04 . It baffled us as well, and for some reason it's consistently happening with only Paypal Payflow. Makes you wonder what ssl_version would return if it doesn't blow up.... Synchronicity is real \ud83d\ude05 the nil error spiked for us around the time https://www.paypal-status.com/history/eventdetails/8400 happened (hours after this PR was opened).. We monkeypatched this in locally and I believe the errors we saw went away. Let me circle back and see what the logs say about the cipher in these cases.. While non-HTTPS production traffic is a big no-no according to the PCI DSS, the case for a HTTP mocking service seems perfectly valid. Certificates are yet another thing to configure and maintain, even with the things @bpollack mentioned. \nAlso, I'd argue ActiveMerchant is mostly concerned with OSI layer 7 and less so 6 \ud83d\ude42so I'm \ud83d\udc4don merging this.. Sounds good to me!. TIL about this. I'll have to read a little to get more context, but one concern I'd like to voice now for implementing this:\n\nHowever the downside to this setup is that there is no field level validation which we get with something like an Active Merchant CreditCard.\n\nIf we're officially introducing this as an addition to the API I think it's better for the long term to introduce a proper object. It's a one time pain to change now but I think it's better than yet another defined-but-not-enforced hash (which smells like primitive obsession) that's harder to evolve in the future.. > I'm looking into adding it across multiple gateways and once I get a better feel for implementing it in other scenarios I don't want to also prematurely optimize for these exact field level validations.\nThis makes a lot of sense - let's iterate and get a sense of what the proper encapsulation should look like as we go :) . If I'm reading the docs and the source right, can't we just have @proxy_address = :ENV by default and have Net::HTTP take care of it?. How about !response[\"responseMessage\"].start_with?(\"40\") ? This puts the opening parenthesis for the second conditional method in a more clear place, and is more precise in matching the 40xxx codes at the start of the string.\nAlso it would be very helpful to codify the cases you mentioned in the pull request in the tests to prevent regressions. Could you add them to https://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/checkout_v2_test.rb ? Thanks!. Visa debit and electron can be removed according to https://github.com/activemerchant/active_merchant/wiki/Contributing#credit-card-types. Agree with @lyverovski let's just remove this one.. I believe this comment from the original PR that added this gateway meant to add mapping, not remove it entirely :). Since the unstore method is still on the gateway, I think this shouldn't be removed.. Nested ternary operators \ud83d\ude45\u200d\u2642\ufe0f  could you please change this to something similar to the structure used in add_payment?. Hey @iirving - I've taken a quick look at the list of error codes and those look like they fit the bill. A possible way to implement this could be to map highly specific error codes (e.g. AVS/CVC checks) in this constant and use the example error_code_from(response) method to look up the code here and return it.\nIf it is not found, apply some heuristics to figure out if :card_declined (e.g. if response.code.to_s.start_with?('30')) and fall back to the generic :processing_error. Hope this helps!. Typo here.. when '3032' ; this needs to go on a new line. :invalid_expiry_date seems more appropriate for this one?\nEdit on second thought, the description is a bit ambiguous whether it's invalid (incorrect formatting) or correctly formed but not the right data. Not blocking IMO.. Come to realize the if options[:decision_manager_enabled] is redundant now #nitpick. \ud83c\udfc6 . Other gateways seem to use options[:tax]. We can remove strip since base64 will not output spaces.. It's defined on Object so that's pretty much a given? https://ruby-doc.org/core-2.4.2/Object.html#method-i-frozen-3F. It's covered in the include directive below. Otherwise I'd had to add three exclude directives for Ruby 2.1 and Rails versions >= 5.0.. Yes since the require happens earlier in the load process now, in lib/active_merchant.rb.. Creating a 'pseudo' HTTP verb here doesn't feel right to me me. It also burdens the caller knowing about ambiguous specs and resulting implementation choices. Is there a strong reason against using these lines to replace or amend the current :delete implementation?. As long as the default behaviour remains the same - not sending a body unless one is specified - I think we should be good. Everybody has programmed around that exception up until now.. Nitpick: we can just completely remove this.. This seems unrelated to what we're testing here, can we remove it? Same question for the other test.. Nitpick: we can remove the unused response variable. Same for the other test.. Can we axe this matrix block while we're here? The rvm/gemfile combinations already do it :). We can add the --parallel flag \ud83c\udfce since we will not autocorrect functionality here.. Can you make sure this changelog line is moved up? This version (1.78.0) was released a while ago.. We'll can use cover instead of include, it's a bit faster since it doesn't traverse the entire range \ud83d\ude42 . We can get rid of the repeated to_s calls in the CARD_COMPANIES hash by just coercing it here. Although I wonder if that's even needed - are there cases where this is called with anything other than a string?. ",
    "tschelabaumann": "Thanks for the review, we merged the changes regarding your comments.. Thanks for the review. The styles are fixed now.. Hi, thanks for the fast reply. No we did not touch the #store API, because it was not used in the old code nor in changes.. Sorry for the misunderstanding (I'm kind of a proxy between you and the devs). The additional data is not required to be stored in the vault. The #add_credit_card is just combining credit card data  and the additional data we need for internal checks. . No problem it's fine. Please go ahead. Let me know if anything else from our side is required.. Hi, we made now the requested changes. I guess the squash and rebase can be done automatically when you accept the final state of the pull request. If we should do it anyways on our own let me know.. ",
    "LarsFunke": "@jasonwebster @davidsantoso @pi3r is anything still required from PAYMILL? as far as I can see 2 of 3 Changes are ok. For the x ones we confirmed the change 8 days ago. Thank you very much for your support in advance.. ",
    "jimryan": "Done! . ",
    "pablofullana": "Hey, are there any updates on this? I'm especially interested in the Payfort integration. ",
    "fwilkens": "Hi Jason,\nThanks for considering this. Some background that might be helpful:\nThe entry point for non-cim (ad-hoc transactions with CC/ACH details):\nhttps://developer.authorize.net/api/reference/index.html#payment-transactions-charge-a-credit-card\nFor CIM transactions (charging a payment profile): https://developer.authorize.net/api/reference/index.html#payment-transactions-charge-a-customer-profile\nIn each case, if you look under the available request parameters for TransactionSetting > , you'll notice there are a number of optional settings. For our use case, we want to be able to specify a duplicateWindow for CIM transactions. It's possible right now with ad-hoc transactions, but not for CIM transactions, because the options specified in AM are not applied to the request that's built.\nLet me know if I can clarify anything on that. Thanks!. ",
    "akihitoalextsuboi": "I will patch this code until next major update will be released, thank you @Azdaroth !!!\nThough active_merchant is really awesome!. ",
    "reneklacan": "@bdewater I missed that. Thank you!. ",
    "UTKARS": "Hi,\nWaiting for your response, Please write!\nThanks. ",
    "joshnuss": "@lyverovski Should we contact someone at China Union Pay to verify this makes sense?\nAlso, do you think we should surface a new brand called \"unionpay\" or should we continue to use \"discover\"?. @jasonwebster this PR is ready for review. Waiting on response from Cayan/Merchant Ware to confirm if this is the correct fix.. @jasonwebster this isn't needed anymore, right?. Should we add a section to the readme to list the gateways that support 3DS?. \ud83d\ude04  felt the same way. Not sure this is correct, this defines discover as starting with 6011, 65,64, 62212 etc, everything else starting with 62 is being mapped to union pay.\nAccording to this bin list we should be more specific about what is an acceptable. (note: not sure about the quality of that bin list). ",
    "lsamayoa": "You would need to implement an adapter for that gateway, I see they have an API. I would be glad to help you if you can provide me with an account to that provider since I have no access to it from my country.. @xokvictor leonel01017@gmail.com. ",
    "xokvictor": "@lsamayoa thanks! Can you give me please your email, then I will send you access to the account of this provider.. ",
    "trademinister": "Hello!\nDid You get solution for LiqPay and Shopify?. ",
    "andres3210": "Is there any ETA on when this pull request will be taken care of ? We have a couple of big merchants using a platform based on this library and they are waiting on this merge to use our services.\nPlease let us know if you need any support from our end to speed up the process. Hi Team,\nCan you please reply to give us a heads up on the process to Merge our Payment Solution ?\nAs stated before we have a client waiting for this piece of code in order to integrate with us, and he requires our code to be part of the Active-Merchant repository.\nWe have been waiting for this almost 3 months now.\nRegards,. Hi Active Merchant team, can some one look at this request ? its been more than 6 months since we developed this payment gateway, and we still waiting for the pull-request approval so we can offer our services through platforms using Active Merchant.\nRegards,. ",
    "dmitrypol": "I was wondering if you had a chance to look at this PR?  Elavon supports custom fields and I think this could be a valuable feature for other devs.  . Hi @jasonwebster - did the PR changes I make reflect your ideas?  . no problem changing custom_fields_array to custom_fields.  Can you clarify what you mean by changing default to constant?  Do you mean customer_number?  . no problem, just pushed.  Thank you for considering my PR. ",
    "matthewheath": "Would you be able to provide a copy of your PayPal Express Checkout code here? It sounds like a currency was perhaps set in the setup_purchase method that doesn't match the transaction currency passed to the purchase method?. Can you provide the hash of the test credit_card_or_reference_id you're passing? The credit_card_or_referenced_id.number shouldn't be blank if the hash is set correctly.. ",
    "jknipp": "At least in the sandbox, the android_pay_card details are not exposed on the Braintree Transaction response object.  I was able to confirm the changes are saved by using the sandbox ui.  \nAttached are screenshots showing before and after adding the attributes.\n\n\n.. Fwiw, the attribute on the Braintree transaction request is source_card_last_four, but in the response it is source_card_last_4, verified in the Braintree gem source.. @molbrown Should this be renamed to reflect that this gateway is in support of Bambora Asia Pacific, rather than implying generic support of Bambora gateways?. That or Bambora APAC? Not sure if it is best to use the acronym or not here.. @curiousepic For my education, what lines are you referring to?. \ud83d\udc4d Thanks @martinbjeldbak! \nMerged in https://github.com/activemerchant/active_merchant/commit/c05d4cae80d09c159bcb5e2ab041accc31845047. Thanks @lancecarlson! \nMerged as https://github.com/activemerchant/active_merchant/commit/31db9e6926656301bc0dcc7afdc5d6c9aa5bc579. @therufs Do you have any unit or remote tests for this one?. @molbrown I went ahead and added a minimal unit test. . Payment Express does not echo the ClientInfo field back in the response so that we can verify it in the response. However, it is saved and displayed in the UI as part of the transaction details.\n\n. I did not add a check in remote test because test_succesful_purchase_with_check passes with or without the name field.. A yet to be realized benefit of introducing the internal class is that adding other alternate payment types should be easy (support the new type in the class, add supporting XML changes).. @molbrown The Fat Zebra violation is fixed in master.. Thanks @prashcr! Merged in https://github.com/activemerchant/active_merchant/commit/dc9fb68868f82085f42fbe84ee491be465643358. @bayprogrammer You will have similar changes for https://spreedly.atlassian.net/browse/ECS-138, taking advantage of the Stored Credential framework built by @davidsantoso . @curiousepic I like that idea, but I know that @davidsantoso made updates to the framework expand support for cases such as Orbital. I can't answer if what we have covers all cases. I think for Orbital there are at least 2 message types for customer and merchant that are not covered.. @bayprogrammer The standard process is to include test run output as reassurance that tests were executed. It also serves as an indicator that the PR is ready to be reviewed and merged once approved.\nThis is especially true in Core where the absence of test output in a PR is a code smell. . Upgrading from 7.1 to 7.7 seems like a big jump in version to me. Any concerns here? Should the upgrade be separate from the credentials update?. It felt appropriate to update the XSD used for tests to be consistent with the API version update. I left this as a distinct commit in case we decide against doing so.. It looks like we are letting customers drive setting the recurring and transaction_source fields. Is there any concern that we may set recurring to true and the transaction_source would not be 'recurring'? \nDoes one field take priority over the other at Braintree?. I suggest renaming dest to doc to be consistent. I also recommended renaming dest_path to options_key or similar, source to options and source_path to xml_element_name (or equivalent - element_name, elem_name).\nCouldn't lines 225 - 234 be  condensed to: \n```\nsource_path ||= dest_path\nreturn unless source[key]\ndest_path = dest_path.to_s.dasherize\ndest.send(dest_path, source)\n```. @molbrown try \n```\ndef send_when_present(doc, options_key, options, xml_element_name = nil)\n  return unless options[options_key]\n  xml_element_name ||= options_key.to_s\ndoc.send(xml_element_name.dasherize, options[options_key])\nend\n``. \ud83d\udca5 \n. Going to ask the obvious, cancustomer_reference_numberbe excluded but 1 or more of the other fields provided, where we should send L3 data elements?. \ud83d\udc4d . \ud83d\ude1eGood catch @molbrown. I had copy/pasteddoc.email` and moved on to testing. \n@curiousepic Good to know - thanks for the info!. I agree transaction type is too general in this context - and could be confused with the general transaction type (auth, credit, etc). \nI like reason, though I wonder if it would be interpreted as a free form text field versus a using *_type as the field name that seems to imply a limited set of types.. What values do we expect this field to hold? . Digging into synonyms, do any of these feel more appropriate and encompassing?\n\nfrequency\ncycle\nperiod. \ud83d\udc4d Works for me.. Not something you have to change. I guess you could avoid the else and then call authorization_from(response, success, uri).to_s. Probably better to be explicit.. This field must always be true for ACH/ECP and other alternate payments to be accepted. However, BlueSnap requires that the merchant have a checkbox with specific verbiage on their checkout page and require the customer to agree to terms. \n\nI left it up to our customers to pass this value in to ensure they were meeting the gateway's requirements.. Not sure it's worth the effort, think I'd leave it as is for explicitness.. Are the url's country specific? https://dev-apac.bambora.com/checkout/guides/get-up-and-running/migration-to-production. @curiousepic There is one other place in AM that defines an internal class. I started off keeping track off the payment method details using a hash, however, this quickly became unruly as I had to perform checks multiple places to see if the payment method is an alt transaction and/or if it is a check. For this particular case, creating a class with accessors allowed for better encapsulation of functionality.\nUnlike a straightforward implementation, Blue Snap's API changes the resource URL, XML root element and other aspects based on if the transaction is a card or an ACH/SEPA/Paypal/etc (alt transaction).  What we end up with is needing to classify 4 payment method types 1) String 2) String, but storing an Alt payment method (ACH/eCheck, but in theory it is not locked to being an ACH/eCheck) 3) Check, 4) [Default] Credit card.\nMy first pass required values to be passed repeatedly to different methods - because url and root_element are deeply nested in commit I had to pass data from method to method to end up with if-elsif-else statements replacing the ternary form action == :store ? 'vaulted-shopper' : 'card-transaction'. \nI'd prefer to not use an internal class but felt it was much cleaner to do so because of the encapsulation. I'm happy to pair and walk through these changes.\n. @curiousepic I'm going to make one small update: \ndef check?\n  @payment_method.is_a(Check) || @payment_method_type == 'check'\nend. +1 for using a common separator.  . @prashcr The card number length change looks good, will you rollback the change to the URL? . This won't hold up approval, just something to consider. I think I would name the function endpoint and avoid including the beginning forward slash in the return values - it was not immediately apparent when reviewing the URL's where it was or how it was included.\n```\ndef endpoint(action)\n  action == 'TokeniseCreditCard' ? 'sipp' : 'dts'\nend\nExample usage\nresponse = parse(ssl_post(\"#{commit_url}/#{endpoint(action)}.asmx\", new_submit_xml(action, &block), headers))\n``. Can we simplifyparameters[:mit_stored_credential_ind] && parameters[:mit_stored_credential_ind] == 'Y'toparameters[:mit_stored_credential_ind] == 'Y'?. Likewise, can we simplifyparameters[:stored_credential][:initiator] && parameters[:stored_credential][:initiator] == 'merchant'toparameters.dig(:stored_credential, :initiator) == 'merchant'?. I don't think we need.digbecause we aren't dealing with a nested hash. The result ofparameters[:mit_stored_credential_ind]if the keymit_stored_credential_indis missing isnil`.. We should either wrap the assignment in parenthesis or perform the assignment outside of the conditional, see https://github.com/rubocop-hq/ruby-style-guide#safe-assignment-in-cond\nOptionally, you could also simplify to this: (Please check my logic)\norder_source = order_source(options)\nif order_source\n  doc.orderSource(order_source)\nelsif payment_method.is_a?(NetworkTokenizationCreditCard) && payment_method.source == :apple_pay\n...\nThen change lines starting at ://github.com/activemerchant/active_merchant/pull/3155/files#diff-dd66c97494b66bac9b8815d6b5e36e2bR383 to\n```\ndef order_source(options={})\n   return options[:order_source] unless options[:stored_credential]\n   order_source = nil\n...\n``. We set the idempotency_key to nil here because we've already used it in theauthorize? I'm guessing we have to do this because the void will fail because of a duplicate key.. Makes sense \ud83d\udc4d . Nice!. Also, wouldn'tmerge!` have side effects with other tests since we are updating an instance variable in place?. Ahh yes, that's correct.. Does this change the error message format from commas to pipe? I'm not sure if this might cause a problem for customers if they are parsing on commas. Also, if it changes the order, we might think about reworking this.. Ok, that makes sense and if it wasn't working before there is a lower risk.. ",
    "filipebarcos": "@eddkerr Seems like you're referencing some code from your codebase and we're lacking some context here. Is this still a issue for you, if so, can you provide more info? Or can we close this? . @joshnuss I'm down for that, but I could do it in a separated pr, if that's fine for you. We have more PRs coming with similar purpose, so we can just group them all. @pi3r done \u2705 . this does fail the tests... actually tried to refactor the entire method, but made the tests fail. So decided to not do it now. I wonder what really matters, if it's more like 1 vs. 2, or the actual number matters. Would make sense to leverage the allow_guest_checkout for this?. ",
    "eddkerr": "Hey Filipe,\nI was able to fix the problem. I have later discovered that active merchant\nmight not be supporting what it is that I am attempting to do. The issue\nwas that the add_bank_account method was looking for a hash, when it needed\nto be looking for an object! It now works the same way that add_credit_card\ndoes, and it actually works. I hope this clarifies things, but the portions\nof the code that I touched seemed like they could never work.\nOn Tue, Apr 11, 2017 at 5:00 PM, Filipe Costa notifications@github.com\nwrote:\n\n@eddkerr https://github.com/eddkerr Seems like you're referencing some\ncode from your codebase and we're lacking some context here. Is this still\na issue for you, if so, can you provide more info? Or can we close this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/activemerchant/active_merchant/issues/2353#issuecomment-293398501,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AM1I5-7lenbZd-qugCEuHzP-G1Wczfkdks5ru-oIgaJpZM4MWDVf\n.\n. \n",
    "cesargomez89": "Hey @davidsantoso I've been working on something like this with jetpay and forked the repo,\nYour code looks great but I think you need to add another tag to the xml before sending\nruby\n          add_credit_card(xml, options[:credit_card])\n          xml.tag! 'Approval', approval\n          xml.tag! 'TotalAmount', amount(money)\n          xml.tag! 'Token', token if token\nthe documentation says that is required.\n\n. @davidsantoso I'm testing\nwhen I use the official activemerchant I receive this:\nI, [2017-03-08T12:53:52.031534 #44024]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_http_method=POST connection_uri=https://test1.jetpay.com/jetpay\nD, [2017-03-08T12:53:52.031633 #44024] DEBUG -- : <JetPay><TerminalID>APPTEST01</TerminalID><TransactionType>VOID</TransactionType><TransactionID>2c726a9e07fda2595c</TransactionID><Approval>TEST34</Approval><TotalAmount>500</TotalAmount></JetPay>\nI, [2017-03-08T12:53:52.707471 #44024]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] --> 200 OK (182 0.6758s)\nD, [2017-03-08T12:53:52.707555 #44024] DEBUG -- : <JetPayResponse><TransactionID>2c726a9e07fda2595c</TransactionID>\n<ActionCode>000</ActionCode>\n<Approval>TEST42</Approval>\n<ResponseText>APPROVED</ResponseText>\n</JetPayResponse>\nAs you see, it is sending a VOID request (I want to send a REVERSEAUTH)\nI updated this method in my fork:\nruby\n      def build_void_request(money, transaction_id, approval, token, options)\n        build_xml_request('REVERSEAUTH', options, transaction_id) do |xml|\n          add_credit_card(xml, options[:credit_card]) if options[:credit_card]\n          xml.tag! 'Approval', approval\n          xml.tag! 'TotalAmount', amount(money)\n          xml.tag! 'Token', token if token\n          xml.target!\n        end\n      end\nNow when I send credit card I receive this:\nI, [2017-03-08T12:30:40.077698 #41815]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_http_method=POST connection_uri=https://test1.jetpay.com/jetpay\nD, [2017-03-08T12:30:40.077771 #41815] DEBUG -- : <JetPay><TerminalID>APPTEST01</TerminalID><TransactionType>REVERSEAUTH</TransactionType><TransactionID>0d22c81df8b01b052b</TransactionID><CardNum Tokenize=\"true\">4111111111111111</CardNum><CardExpMonth>12</CardExpMonth><CardExpYear>22</CardExpYear><Approval>TEST80</Approval><TotalAmount>500</TotalAmount></JetPay>\nI, [2017-03-08T12:30:40.813701 #41815]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] --> 200 OK (222 0.7359s)\nD, [2017-03-08T12:30:40.813788 #41815] DEBUG -- : <JetPayResponse><TransactionID>0d22c81df8b01b052b</TransactionID>\n<ActionCode>000</ActionCode>\n<Approval>TEST63</Approval>\n<ResponseText>APPROVED</ResponseText>\n<Token>KKLNCOOBKLJHJCKCIKNKLJKO</Token>\n</JetPayResponse>\nNow is a reverseauth! it works for me.\nBut the tricky part is when I call the void method without sending a credit card like this:\nresponse = gateway.void(@transaction.void_string, {})\nI'm getting an invalid card type error, which is weird \ud83d\ude15 \nI, [2017-03-08T12:50:36.980340 #43204]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] connection_http_method=POST connection_uri=https://test1.jetpay.com/jetpay\nD, [2017-03-08T12:50:36.980433 #43204] DEBUG -- : <JetPay><TerminalID>TESTAPP01</TerminalID><TransactionType>REVERSEAUTH</TransactionType><TransactionID>e00a782cec778d4a64</TransactionID><Approval>TEST05</Approval><TotalAmount>500</TotalAmount></JetPay>\nI, [2017-03-08T12:50:37.531776 #43204]  INFO -- : [ActiveMerchant::Billing::JetpayGateway] --> 200 OK (191 0.5513s)\nD, [2017-03-08T12:50:37.531854 #43204] DEBUG -- : <JetPayResponse><TransactionID>e00a782cec778d4a64</TransactionID>\n<ActionCode>912</ActionCode>\n<Approval>TEST05</Approval>\n<ResponseText>INVALID CARD TYPE</ResponseText>\n</JetPayResponse>. Oh I see, you can send the token or the credit card, then I need to save the token and send it to the void method, I'll change the code I have. Thanks!. ",
    "dimitrovv": "@jasonwebster @davidsantoso this PR is ready for review. @davidsantoso thanks for the update.\n\nA couple things- gateways added to Active Merchant generally follow a structure of a gateway adapter, remote tests, and unit tests. This PR is a bit out of the expected file structure with including helper files and breaking out the tests.\n\nWe decided to separate our integration into modules and helper classes, because the gateway class should have become large and would have been difficult for review and etc. \nI have read the wiki page for contributing, before starting with the development. I have also paid attention to the breantree and paypal integrations, they also use helper classes for their gateway integrations.\nDo you mean that we should organize our integration into 3 files:\n Gateway Class - inherits from Gateway Class\n Remote Tests - include all test cases without using shared examples in modules\n* Unit Tests - include all test cases without using shared examples in modules. @davidsantoso thanks for the details, the integrations will be restructured and then submitted. @davidsantoso this PR is ready for review.\nThanks.. @jasonwebster @davidsantoso could you please have a look at this PR.\nI have restructured it to meet your Contributing Guidelines as @davidsantoso advised me here.\nI will highly appreciate if someone review it and the time you invest in it. We have one more similar gateway integration to this one, but I need a feedback from you guys.. @davidsantoso Thanks, will appreciate it. @davidsantoso I can see you are quite busy these days reviewing many PRs, but would you also find some time to review this briefly. We have done our best to develop this integration in the most proper way, hope you will like it.\nOur merchants ping us very often, because they have an extreme need of using it.\nIt would be grateful if you manage to review this integration these days. We need to submit one more similar gateway to this one, but need an expert to review them.\nThanks in advance! . ",
    "whitby3001": "Sorry, I think I've messed this up trying to do a rebase, I'll just re-fork and create a new pull request tomorrow.. Ok, if there's a way to fix it then I'm all for it - how do i go about that? Sorry my git-fu isn't particularly good :/. Thanks, followed those instructions and it's back up to date now with just the one commit. Fixed the comma and the single/double quote thing one of the tests was complaining about so all the builds pass now too :). @bpollack I've rebased this one too and all builds passing. Would be great if you could include this one as well. Thanks. . Will do!. ",
    "manpreetnarang": "@InfraRuby Will this work for other countries as well? Bambora recently acquired BeanstreamGateway (http://www.beanstream.com/home/). ",
    "molbrown": "@jknipp I can only find evidence of Bambora Ready being an older version/ something not supported anymore. I agree that this should be named descriptively, but I'm not sure how (maybe Bambora Asia Pacific?). The Beanstream gateway represents Bambora's North America region.\nI am working in a branch off of this to add void and store and will open a separate PR, to preserve authorship.. My understanding of that is to move the role of new_submit_xml, called on line 129 inside of commit, to take place before the commit method. Or at least make the request build before commit so it is ready to be passed in. (@curiousepic please correct me if this is off...). Cybersource and AuthorizeNet also build requests in blocks, and it looks like Payflow first builds the request then passes it in. So, there's not really a standard pattern it seems.. Continued in #3145 to include needed updates.. Interesting, even though Paymentez doesn't appear to nest [:phone] like that?. Failing remote tests appear to have passing \"This transaction was successful\" result in tests when it shouldn't. I also get this result when checking out earlier commits. . Looks like Travis has a problem with something other than these changes. . Nice, LGTM.. I don't believe extra_params is an array. Described here.. @nfarve only pulling you in because you originally reviewed and added this commit.. The difference between Level 2 or 3 (or 2 with TAA) depends on the fields passed, but all are put in the level-3-data container - https://developers.bluesnap.com/docs/level-23-data. I went ahead and added void and fixed Rubocop (only remaining violation is in Fat Zebra).. Updated with some re-factoring around the endpoint determination, removes verify, adds Succeeded to message_from.. Those updates weren't related to my ticket, just an error message update. Ok for you to add the change \ud83d\udc4d . Core testing issue will be resolved in Core, in parallel with pulling in this update.. Just to clarify, you are saying the contents should be scrubbed and it might not be? Or the other way around?. @curiousepic @bpollack @nfarve New test to confirm scrubbing in the message revealed it may not have been scrubbed, though I had to get creative with the error response I tested with. Updated the scrub method to cover bases, in any case. . Also, I modeled this solution after other gateways that also use raw_response.inspect in error messages, and those do not test errors for scrubbing either. May be worth checking for those other gateways.. FYI, the Travis failure is due to a Rubocop problem with a file outside of this commit, being addressed elsewhere.. Thanks, updated. I was not familiar with &., perfect!. \ud83d\ude05 updated thanks!. Are the fields shipping.postal_code and shipping.country_code_alpha3 already handled elsewhere? I noticed those in the docs  but don't see them built in right here.. Is it possible that line_items ever comes in as something other than an array? That's really the only reason I could see for keeping this. If not, \ud83d\udc4d . transaction_source follows new visa mandate, but I don't know which has higher priority. Updated to only send transaction_source if both are present.. I could also see an argument for not limiting this, and leaving it to the merchant to use the fields the right way. I don't think this hurts, though.. Condensing it that way (or a few other ways) doesn't seem to work. I adopted this pattern from something very similar, implemented on the Stripe gateway. Updated to re-name variables for better clarity/ consistency. . Nice! Updated.. Added return condition here to prevent empty level-3-data element.. Good q- customer_reference_number and sales_tax_amount are the only fields required by all 3 processing types: Level 3, Level 2, Level 2 with TAA. There are no processing types that are valid without both of those.. (Level 3 requires several more in addition) Docs link below \ud83d\udc47 . Does send need a second argument here to grab the value?. Is it worth looking for the name being absent from the request? Or will the sandbox error if you send it blank. It could be a unit test, alternatively.. I guess I was thinking about verifying that the blank name field is not added to the request. But I wasn't sure if you needed to write that into the test necessarily, or if the sandbox would error in that case.. This was not spotted in the internal reviews, but I'm confirming with a technical contact that it will support both countries. . I wanted to, but I could not get 100 or 0 to work. Voids only work on purchases, not auths, and it won't accept a $0 purchase. It seems that 100 is an amount that generates an error for tests (\"declined_message\"=>\"Refer Card Issuer\"), though that did not seem apparent in the docs. https://dev-apac.bambora.com/checkout/guides/get-up-and-running/test-your-setup. I was having the same thought, it would be lame if the void fails, then there are random $2 purchases \ud83d\ude2c . Updated to a 0 un-voided auth.. I have contacted Bambora support about this, and have decided to remove verify from this commit and proceed without it. It will be added in once there is more information about how to best implement.. \u2705 . Yes, it can't have the key already used in the auth. Look at remote test test_verify_with_idempotency_key to see how I checked repeating voids on auths that were already canceled. I'm also not as concerned about this as purchase, as it's a $0-amount, and there's not a lot of hurt in repeat-voids. This could be a big benefit, as re-trying verify without idempotency might raise a fraud flag at the bank for hitting the card with multiple authorizes.. I followed the pattern from the above test test_successful_purchase_with_more_options and didn't give a lot of thought to the best way to set it up. I think a benefit to defining the options variable is readability. It makes it more apparent that a modified options hash is being passed to purchase, though I guess the .merge could happen inside the method signature, reducing lines/ still being clear. Can edit, if you have a preference. (I do like consistency in a test file, though...). @jknipp @bayprogrammer The purchase action mutates options[:idempotency_key] after authorize so that the capture request has a unique key. This is why I re-set the key before the second purchase request in the remote test.\nI chose to modify it in the exact same way each time, so that repeat purchase requests will lead to a non-unique key for the capture. Then the entire purchase action can be repeated without risk of duplication.. I like this a lot! \ud83c\udd92 . ",
    "pi3r": "My only concern is maybe it shouldn't be the responsibility of #refund to void in case of an error? Is there a precedent in AM where a #refund method voids a transaction?. Thanks for the clear explanation, I see your point better now.. small typo: I believe you meant with error code 54 in the description of the pr not error code 91506.. @Krystosterone not as long as it's still supported by Google.. @rikterbeek can you rebase this please?. I'm gonna close that for now. Will reopen once we revisit this issue on our side. Thanks for keeping track of it :). Any way to add a remote test for it?. Can you update the unit tests here https://github.com/activemerchant/active_merchant/blob/master/test/unit/gateways/netbanx_test.rb?. How will you be able to track to which order the refund belongs to?. We need to merge this and include the new version in our production environment. We will let you know when this is done, after merging.. @payfirma1 Changes should be live on our platform.. extra space at the end options={}. bad indentation here (only 2 spaces indent is needed). extra space before options. can you remove those new lines?. bad indentation here too, the else needs to be aligned with the when. extra whitespace in front of options. missing new line between the require and the class definition. extra new line. extra new line. extra new line. extra new line. extra new line. new line missing. extra new line. extra whitespace before the parenthesis. why the change to expanded_name?. eci isn't needed for capture/void/refund right (only for authorize/purchase)? . The modifications shouldn't be stored as comments, it should be in the commit message body. Why is Empty included here? I can't find where it's used.. What's the point of inheriting from Gateway if it's never meant to be used as a gateway? Here new is a factory method that will return a Gateway object but BeanstreamGateway is not meant to be one.. @bdewater Can I have some thoughts on that? Wondering if anything will be used at the class level and Beanstream does need to impl Gateway even if it doesn't use it.. @curiousepic pinging you here because I'd like a second opinion on that. Hijacking .new to implement a factory feels wrong to me but I'm not sure if you have any experience on how to do that in AM. Also, should the \"factory gateway\" inherit from Gateway?. Isn't that a breaking change? Someone might be using this method.. That works for me!. You don't need the parenthesis here.. ",
    "richpeck": "Would be good to get this merged. ",
    "davidray": "I'd really like to use this in my project - it would be great if it could get accepted... Is there anything I can do to help?. ",
    "jake-mia": "I don't think the notification module works.  I don't think it passes the rspec test.  Anyways, took out some code from the Notification.rb and came up with this to process my IPN.  Hope it helps someone else.  You can close issue, but please fix gem.\n```\ndef create\n    notify = request.raw_post\n    @raw = notify.to_s\n    for line in @raw.split('&')\n      key, value = CGI.unescape(line).scan( %r{^([A-Za-z0-9_.[]]+)\\=(.)$} ).flatten\n      jparams[key] = value\n    end\nif jparams.present?\n  PaymentNotification.create!(:params => jparams, :email_id => jparams[\"tracking_id\"], :status => jparams[\"status\"], :transaction_id => jparams[\"pay_key\"])\nend\n# Critical things you will want from your IPN\n#jparams[\"status\"]\n#jparams[\"tracking_id\"]\n#jparams[\"transaction[0].invoiceId\"]\n#jparams[\"transaction[0].id\"]  #confirmation for txn 1, primary\n#jparams[\"transaction[1].id\"]  #confirmation for txn 2, other\nrender :nothing => true\n\nend\n```. ",
    "johnnncodes": "closing... for some reason, secrets.yml is not picking up the new api key what we set in the .rbenv-vars file. It was using an old api key that is already invalid. ",
    "ignaciosm": "great, thanks!. ",
    "nicolas-maalouf-cko": "@davidsantoso would you please be able to assist here?\nI'm not sure why the checks failed.\nPlease let me know if anything else is required from our end to have this pull request merged.\nI'll also inform Shopify when done.\nThanks a lot,\nCheers,\nNicolas. Thanks @bdewater I have created a new PR using a different logic. @bdewater thanks for the review, I improved the logic as suggested.\nI also added a list of all our supported currencies without fractions.\nThere's a merchant using the extension who got ISK transactions charged 100 times the amount. \nI'll try to add tests to cater for the cases described in the PR later, but can we please merge this especially for the currencies without fractions?\nThanks. Thanks for the help @bdewater \nWill using:\npost[:value] = localized_amount(money, options[:currency])\non line 79 do it?\nAnd should I remove \nself.currencies_without_fractions = %w(BIF BYR CLF DJF GNF ISK JPY KMF KRW PYG RWF UGX VND VUV XAF XOF XPF)\nfrom the pull request in that case?. @bdewater I added localized_amount in the latest commit. @jasonwebster is this planned to be merged anytime soon?\nWe're having currency localisation issues with the Spreedly integration.\nThanks. @jasonwebster just added the test, please let me know if it looks good.\nThanks again. @jasonwebster @bdewater would you please be able to let me know if anything else should be done to be able to merge?\nWe're having customers using the gateway getting charged wrong amounts in some currencies because of localized_amount.\nThanks. @dtykocki do you mean doing a squash and merge on your end?\nOr you prefer if I do the squash on my end?\nThanks. @dtykocki squashing my commits (first one dating back to April) along with many commits coming from other contributors seems to be less clean to do than I expected.\nShould I just close this PR and create a new clean one?\nPlease let me know,\nThanks. Thanks @jasonwebster @dtykocki !. ",
    "troyswanson": "Does anyone have any time to help review this and make any comments?. ",
    "dtykocki": "@nicolas-maalouf-cko would it be possible to squash all of the commits down?. @nicolas-maalouf-cko Squash on your end. @davidsantoso / @curiousepic . @davidsantoso - I intended to, but the remote tests will not fully complete. I was forced to drop in a sleep 200 (sometimes 300) between each HTTP request to SagePage. Even with the sleep, some remote tests fail with 2002 : The Authorisation timed out.. If there's some secret handshake I need to perform with SagePay, I'd love to know what that is at this point.. @curiousepic - Just curious, how were you able to get the full set of remote tests to pass? When I was working with SagePay, I had to drop in sleep statements before each HTTP request.. @jasonwebster - Unfortunately, state is not always required. See https://support.authorize.net/authkb/index?page=content&id=A1454&actp=RSS for some background. Whether or not state is required seems to depend on the country of the address - a field that is also not required. \nMore specifically, we've seen transaction failures due to the \"N/A\" default value. I was originally going to default state \"XX\" like I've seen in other adapters, but I suspect that value will still trigger validation errors from ANET since it's not a valid state code.\n. Cleaned this up a bit to only send a default when the country is US or CA.. Howdy @jasonwebster - hopefully I can help shed some light on this one. There were instances where funds were debited from an account even after receiving this responseCode 4 and under the previous implementation, the transaction was treated as a failure. This left a number of folks quite confused. \nThe documentation we used for this was generally ambiguous when describing responseCode 4:\n Also, based on a community article, we were left with the impression that there's really know way to know whether or not the transaction will complete.\nDoes that make sense? . That said, after looking through the links you posted @jasonwebster I am thinking that responseCode of 4 should be a decline or the success criteria needs to account for a combination of codes. . That came from a PDF document named \"Merchant Web Services API Advanced Integration Method (AIM) XML Guide\" we have saved off. I just tried to find it on ANET's site, but it looks like it's been removed https://www.authorize.net/content/dam/authorize/documents/AIM_guide_XML.pdf - which is not too promising \ud83d\ude04.. \ud83d\udc4d . @curiousepic @deedeelavinder @davidsantoso - Updated this slightly to ensure backwards compatibility.. @curiousepic - When I run the remote test suite on master, I see two failed tests. Both of these tests fail with the error message \"Internal payment provider error.\":\nResponse expected to succeed: <#<ActiveMerchant::Billing::Response:0x007fdb974287c0\n   @authorization=nil,\n   @avs_result=\n    {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=\"INTERNAL_ERROR\",\n   @fraud_review=nil,\n   @message=\"Internal payment provider error. \",\nThe above failures also occur on your branch (payu_latam-payment_country), but I'm not seeing the 11 failures mentioned in the commit message.. Er, I see that you updated the commit message, but that update isn't reflect in Github \ud83d\ude0a . @curiousepic - What felt off about this? If there's a concern, feel free to raise it.. >  There are many failing remote tests but they are not related to this change (they fail on\nmaster as well)\n@curiousepic - Remote tests did not fail for me on master when I ran them. Did you use the credentials we have on file?. Okaaayy weird... remote test are now failing on master even with the creds... Carry on. > Mostly bang-for-buck while going through this batch of scrub additions\nThat's fair, but I figure since we're improving the scrubs, we might as well ensure we have proper test coverage along the way. . Thanks @chopenhauer and @bpollack!. @bpollack - I've got a lot on my plate..feel free merge if this hasn't already been taken care off.. Dahh... I just realized that the request was to add these countries, not replace the existing set. Let me fix this up real quick... @curiousepic - Fixed up.. review again if you'd like.. As of Ruby 2.3.6, Net::HTTP, the library used make gateway calls, does not allow for a body when making a delete: http://ruby-doc.org/stdlib-2.3.0/libdoc/net/http/rdoc/Net/HTTP.html#method-i-delete. Huh.. it actually looks like we're override the call in https://github.com/shasum/active_merchant/blob/714a1153554ce97f7ce4e1d3294b9c212d97af58/lib/active_merchant/delete_with_body.rb. @nfarve You'll need to test it out, but I think you can try something like https://github.com/activemerchant/active_merchant/pull/2326/files#diff-154e23ec35747841db7f46d7dd8f137aR156.. @curiousepic - Did you mean to close this one out?. @curiousepic - Their latest documentation, attached to the JIRA issue, says that the field is mandatory for all types.. I gave the documentation a second glance and the StoredCredentialMode option may not apply for all transaction types:\n\nThis parameter is only applicable to merchants that store tokenized card data and is mandatory when sg_cardnumber is sent. Merchants that do not store card data, or that are using SafeCharge\u2019s tokenization feature (sg_CCToken parameter), should not send this parameter.\n\nThe adapter only sends sg_cardnumber for purchase, authorize, and credit. The remaining reference based transaction types use sg_CCToken. We don't directly use SafeCharge's tokenization feature (through store), but a sg_CCToken is returned and later used for reference transactions.\n. Updated to reflect what SafeCharge's documentation states. We'll only send the sg_StoredCredentialMode for purchase, authorize, and credit now. @curiousepic - Can you give this one a second review?. I went ahead and renamed the option to stored_credential_mode.  I felt that card_not_present did not clearly describe the purpose of the option. For now, I'd rather keep this option very gateway specific.. @shasum - I'm unable to add you to the list of reviewers. Tagging you here instead.. @curiousepic - I presume the gateway can't provide an ETA when their sandbox will be available?\nAlso I don't follow this statement:\n\nWe also can confirm properly scrubbed recent transcripts using the same scrub\nmethod externally.. @bpollack I wonder what's up with the remote tests. All green here on a latest master:\n64 tests, 291 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed. The above output was from ruby -Itest test/remote/gateways/remote_stripe_test.rb.. :angry_homer: Come on Travis! \n\nLocally, on master, I'm seeing four remote test failures that I think could be fixed up. The test_successful_purchase_with_card_stored fails with message \"Please specify a valid source_id\". Maybe we can provide a source_id to make this one pass?\nThe remaining three failures are:\n\"The card is not supported on online transactions\" expected but was \"The card was declined\".\nIt's your call here, but just the message for these failures could be changed.. I'm sorry @curiousepic I don't entirely follow your question. The docs I linked aren't directly related to tests but to GooglePay in general.. Also, not sure if this helps, but Braintree's sandbox UI shows the transaction is processed as GooglePay:\n\n. Ahh, gotcha. The \"3\" is a simple copy and paste error, I'll fix that up. RE Travis: Rubocop is not happy about something on Ruby 2.5...not sure exactly what yet though.. Travis is failing with: Offenses:\nlib/active_merchant/billing/gateways/braintree_blue.rb:545:7: C: Metrics/PerceivedComplexity: Perceived complexity for create_transaction_parameters is too high. [33/32]\n      def create_transaction_parameters(money, credit_card_or_vault_id, options) ...\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nbut only for Ruby 2.5. This method has been in place for a while now - gonna see if it can be ignored.. TravisCI is looking good now.. @deedeelavinder - It looks like there are a good number of what appear to be legit failures on CI. We should probably get those fixed up before reviewing in detail.. @curiousepic Update made.. I wasn't sure at first either, but both CreditCard and Check have first and lastname:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/credit_card.rb#L117-L122\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/check.rb#L9. Should this have a guard like we do in https://github.com/deedeelavinder/active_merchant/blob/dbd6f141c6ae0e3db15d3b3f37d0bf50f5c79663/lib/active_merchant/billing/gateways/payu_latam.rb#L163?. Excess comment?. Regardless of how the sandbox behaves, we should have unit tests that at a minimum exercise each country option.\nedit: which it looks like we have in place already :). I tried many ways to generate a failure response here. You would think that a failure would occur with an empty ticketNumber, but I only get a 500 error with message: {\"message\":\"Missing Authentication Token\"}%. Added a remote test for failed refunds.. Yeah, treating a 500 as a failure is something I've considered, but question if that change should happen along with switching to a \"real\" refund. Best I can tell, all of Kushki's endpoints may return either a 400 or a 500 with a response code and message.. Any particular reason why we don't default the email?. Where does the api_key and js_security_key come from? Are these sensitive values that should not be hardcoded in?. \ud83d\udc4d Their documentation is certainly lacking in this area.\n@deedeelavinder - It might be worth digging through their admin / management UI to verify how sensitive these two values are.. I'm going with a different approach here; I realized that this change won't be backwards compatible. . As I'm reading through this and run into params[:ta_token] used in a few conditionals I start to wonder what the presence of a ta_token represents. It seems that one must know that a ta_token is used when storing a card. I came to this conclusion by scrolling up and reading add_creditcard_for_tokenization. This is fine, but I wonder if we should encapsulate this concept in a single place, i.e. (another) private method. . I'm okay with worrying about this when reference purchases are requested.. Nitpick: Could name the test test_unsuccessful_store_via_create_with_cvv and nix the # without cvv comment.. This reads like purchase used to return an authorization structure, but will now be nil. Seems like a compatibility issue?. I think we can use @options[:apikey] here since it's passed in via initialize. It looks like the call to super will create this instance variable: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateway.rb#L183.. I've typically seen the pattern of conditionally adding each option individually vs the use of requires!. Example:\npost[:dateOfBirth] = if options[:date_of_birth]\npost[:entityType] = if options[:entity_type]\npost[:nationality] =  if options[:nationality]\nI don't have the full scope of changes in my head so I'm assuming that each item can be sent to the gateway individually instead of requiring the entire group of options.. It's for sure less verbose, which is pretty nice, but I'd prefer to stick with our current convention for consistency sake. . Well.. if Ruby had pattern matching like Elixir, this would be a nil point.. So remove the previously stored card (if one exists) and store a new one instead. Am I following that correctly?. Fair enough \ud83d\udc4d . \ud83d\udc4d updated. Should both of these File.open calls be here?. @nfarve - The 8443 port might be an issue for us since it's non-standard. Just to be safe, it's probably worth checking with the ops team on this.. We only need 8443 since that's the production endpoint. The test endpoint doesn't need to be whitelisted.. @bpollack - This is for a credit card right? We'll need:\nassert_scrubbed(@credit_card.number, transcript)\nassert_scrubbed(@credit_card.verification_value, transcript). Agreed. There is a quite a bit going on in just a few lines of code. At a minimum, while I try to load up in my head what's going on, refund_fee.success? ? refund_fee : Response.new(false, \"Application fee could not be refunded: #{refund_fee.message}\") could be moved to a private method as the same pattern is used on line 468.. Do you think we need #{CGI.escape(identification)} here? I'm not sure what values identification could hold, but looks like we've escaped this variable in other calls.. @curiousepic - To start off, you could eliminate the case statement and use an if/else on the action instead - there's the authorize action and then every other action.  . Because of the nested hash access, there isn't much else you can do right now. Once we're on Ruby 2.3, .dig should help here http://ruby-doc.org/core-2.3.0/Hash.html#method-i-dig. You could take this a step further by isolating the nested hash logic into their own methods. Something like:\nif action.to_s == 'authorize'\n  authorization_response_from(response)\nelse\n  other_response_from(response)\nend\nThis at least makes things a bit more descriptive.. According to https://developer.payeezy.com/payeezy-api/apis/post/transactions/tokens we don't need to send in the callback and js_security_key.. Also, there's a strong possibility we'll no longer need to send in the the apikey param in add_creditcard_for_tokenization anymore https://github.com/activemerchant/active_merchant/blob/ccca1e2e72c3277c1257e27c911acf0d63b95d66/lib/active_merchant/billing/gateways/payeezy.rb#L137\nIt's worth looking into this since we should already be performing the authentication Payeezy expects in https://github.com/activemerchant/active_merchant/blob/ccca1e2e72c3277c1257e27c911acf0d63b95d66/lib/active_merchant/billing/gateways/payeezy.rb#L301-L312. Do we have a test for when refund_fee_amount is zero?. @curiousepic - Should this file be committed? I'm not seeing others like this one.. Yup, per CardStream, Maestro requires 3DS. This test is no longer relevant and will never pass.. Commit message updated.. Why the need to check for a numeric type now? . Maybe it's the naming of the methods being used in here in refund (add_echeck_purchase_params and add_auth_purchase_params) but do refunds require the exact same params as echeck and auth purchases?. Yeah authorization_from should turn them into strings so I'm a bit \ud83d\ude15 here.. @nfarve - Try that and maybe we'll be able to remove that number check.. Nitpick: indentation is slightly off here.. I'm guessing that this change is intentional. $0 auths are supported now?. \ud83d\ude48 I didn't read the message. Whoops.. Hmm it looks like this was modified to pass in the amount. The current refund method on master ignores the amount: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/visanet_peru.rb#L52-L56. I'm thinking we'll need a guard around the amount here.. add_recurring_contract is called here and in add_payment. Is this intentional?.  Fair enough. I don't have an alternative that would be any better. \ud83d\udc4d . Nitpick: indentation is off. Also nitpick.. What's the rationale for passing ruc through @options instead of using the options hash?. This will always return response['data']['DSC_COD_ACCION']. Give the modification on line 204, it seems like we don't want to always return response['data']['DSC_COD_ACCION'].. Is this line needed? options is not referenced or returned anywhere after this assignment.. @bdewater - Should this list include 2.1?. @bdewater - Do the remote tests for both migs and clearhaus still pass after the require removal?. @nfarve - If the gateway doesn't provide a sandbox with a test URL, there's not much point in have both URLs. The test_url and conditional logic around the live_url can be removed with there's no sandbox. Thoughts?. Nitpick: Indentation is in the hash is different than the rest.. Maybe it's a gateway requirement, but this seems off: set the capture flag to false when the payment is a voucher? I guess I'm expecting post[:payment][:voucher][:capture] = true when calling capture with a voucher.. For consistency sake, name this method add_billing_address? . Should this line have if address[:neighborhood]?. I noticed that the fixtures.yml contains an entry for gateway_id. Any particular reason we don't require gateway_id here?. Gotcha. If the field is only for testing / debug purpose, should it only be sent if test?. Determining which URL to use would be better suite with a case statement here. Additionally, if the trailing slash is removed from https://github.com/activemerchant/active_merchant/pull/2791/files#diff-d6e4d483fbc1ae8bde58049c05c40018R4, it'll be easier to read which endpoint is being used:\n\"#{url}/customers/#{auth}/cards\"\nvs\n\"#{url}customers/#{auth}/cards\"\n. This should probably be deleted.. Neat, I see that now.. We typically don't introduce new methods to AM's public API. I can't say for certain that it hasn't happened before, but I believe it's discouraged. When a gateway requires additional setup, like creating a customer, the process is encapsulated in the public API . So instead of increasing the public footprint, would it be possible to make create_customer private or move the logic to add_customer?\n@curiousepic - Any thoughts here? You've worked with AM longer than I have.. Nice!. \ud83d\udc4d Can you add a test for a successful refund with a voucher?. @jasonwebster or @bdewater - we'd appreciate another set of eyes on this bit. This gateway requires a DELETE with a body when performing a refund or void. Any thoughts or concerns here? For some additional history, we almost went with the same approach in https://github.com/activemerchant/active_merchant/pull/2326, but the delete_with_body addition to  lib/active_merchant/connection.rb didn't land in master.. My first pass at this didn't include the flag. I only added it in when I saw that other adapters (those mentioned in the commit message) use force_full_refund_if_unsettled to determine if void should be called. I tend to favor existing conventions for consistency sake, but I can see a case for not including the flag.. No, we don't utilize the the force flag on any gateway right now. For CardStream, I am thinking that we'll want to utilize the flag on our side to ensure existing behavior doesn't change wrt to refunds.\nHmmm maybe you're thinking of https://github.com/activemerchant/active_merchant/pull/2772?. @curiousepic - Commented on the force_full_refund_if_unsettled flag on #2772. Any other concerns with this one?. This can be removed. Instead of adding this to the project's .gitignore file, you can add to a global .gitignore that's local to your workstation. See https://help.github.com/articles/ignoring-files/#create-a-global-gitignore for the details.. I like the direction you've gone in with save_card. However, I do think that there's an additional refactoring opportunity here. Consider removing options[:store] as an argument to save_card all together and leverage the existing options hash instead. The save_card method could then be modified to only accept two arguments and determine when the retained attributed should be true:\ndef save_card(credit_card, options)\n  ......existing code.....\n  doc.retained(true) if options[:retain]\nend\nAdditionally, instead of using store as key, retain is more appropriate when working our API. Using store may lead to confusion with the store method itself.\nThoughts?. Yeah... it's been forever since I've actually looked at this gateway. I just noticed that we probably shouldn't rename store to retained - that won't be a backwards compatible change. The save_card refactor is great, but the we'll need to keep the store option around. Sorry, that's my fault for not seeing it was used originally.. @abarrak - Let's just go with using store instead of supporting both store and retain. I think it'll keep things clearer this way. Once you've made the change, we should be ready for a merge.. Doh.. I suppose something changed on their sandbox that requires the sleep statement now.. Minor tweak for consistency: headers.merge!('Set-Cookie' => options[:cookie]) if options[:cookie].. I'm guessing this xmr variable should be named xml?. Hah okay. The diff sometimes make it hard to tell.. Is it possible to add a failure test with 3DS?. \ud83e\udd14 I thought the purpose of this method was to dump the transcript in a raw form. The raw transcript is then used to assist in building the scrubbing logic for new gateways.. To be fair, this isn't bad idea. Maybe a new method that'll assist in verification.. Are these <CardNumber> elements supposed live outside the main XML body?. It's your call here. I can see both sides of the argument and am fine with either.. I don't believe the account_type property is an array. Is the [0] necessary here?. Duh.. this is Ruby - it could also work for strings. . How about adding a unit test for this fix?. Is the removal of the / intentional? . Alrighty. . Note: Setting the paymentdatasource.type field is required per an Adyen contact. Unfortunately, I've been unable to find any mention of this field in their public documentation.. I'm pretty sure, but only because it's what Adyen said to do and the GooglePay tests passed right after adding paymentdatasource.type. I don't mind trying [:paymentdatasource][:type] and see what happens.\n. Also, Travis isn't happy with this PR, I'll take a look.. We'll for sure need to go with paymentdatasource.type. I'm seeing the same \"Additional data fields acquirerCode and authorisation MID required for external MPI\" error when sending [:paymentdatasource][:type].. Rubocop warning has also been fixed. Waiting on Travis now.. I'd normally expect to see a lambda invoked via .call, so func.call(number). Is there a benefit to invoking the function as func[number]?. I take it you're not going with the stabby lambda ->(num) here for readability sake?. Aw yeaa.. recursion \ud83d\udc4d . ",
    "jusleg": "@jasonwebster @ntalbott for review. PayPal's response regarding NVP:\n\nAfter looking over the logs and playing with the code, it looks like passing \u201cPAYPAL-NVP:Y\u201d in your header clears up the issue (noted here). This essentially tells the system to bypass Payflow and lets all the line items be processed correctly.\nThe testing shows that up to a small number of line items can be processed without the NVP flag before the Payflow system truncates the request. Because it gets truncated, the totals don\u2019t match up. The NVP Y header is a best practice if you\u2019re going to pass multiple line items. If you think there will be line items regularly, I would suggest implementing the header.\n\nFrom our testing, this does not affect the way we handle the response. The additional fields in the response are being ignored for now.. ",
    "danielavilac": "@dtykocki it wasn't clear for me how did you resolved the issue. The only option is to store the card at the merchant level? I'm still getting Please specify a valid source_id while trying to make the charge with a stored customer card id as the source_id.. ",
    "AvaNguyen": "Hi team! I just wanted to provide some additional context behind this. The merchant is looking to switch payment providers asap and so they need to get the Apple pay part working correctly before they do. There's a bit of urgency in this request and I would appreciate any prompt assistance that can be provided. Thanks!. ",
    "fmendez": "Whenever possible, can anyone take a look and tell me if there's any additional step(s) that I need to take? . ",
    "frank184": "Exactly, for example BeanstreamGateway where authorization is an aggregate of trnId;trnAmount;trnType.. ",
    "deuxpi": "cc @davidsantoso @jasonwebster @jusleg . Positive and negative tests (from default value) added for option flag. I amended/squashed in the same commit (not sure if that's what is usually done in active_merchant.). ",
    "kjbkjb": "THANK YOU!. @curiousepic Thank you for maintaining the Vantiv/Litle AM module. It is appreciated.. Looking back on earlier implementations, I see that the expiration date used to be passed, see:\nhttps://github.com/activemerchant/active_merchant/blob/v1.40.0/lib/active_merchant/billing/gateways/litle.rb#L240\nWhen token/expDate is added, the additional fields must be added to fulfill the full schema requirements.\nHere are the two altered methods for your consideration\n```\ndef add_auth_purchase_params(doc, money, payment_method, options)\n  doc.orderId(truncate(options[:order_id], 24))\n  doc.amount(money)\n  add_order_source(doc, payment_method, options)\n  add_billing_address(doc, payment_method, options)\n  add_shipping_address(doc, payment_method, options)\n  add_payment_method(doc, payment_method, options) ##Add options to call\n  add_pos(doc, payment_method)\n  add_descriptor(doc, options)\n  add_debt_repayment(doc, options)\nend\ndef add_payment_method(doc, payment_method, options) #options added to args\n  if payment_method.is_a?(String)\n    doc.token do\n      doc.litleToken(payment_method)\n      if options[:token] #backward compatible implementation for expDate\n        doc.expDate(\"#{options[:token][:month].to_s.rjust(2, '0') }#{options[:token][:year].to_s.last(2)}\")\n        doc.cardValidationNum(options[:cvv])\n        doc.type(options[:type])\n      end\n    end\n  elsif payment_method.respond_to?(:track_data) && payment_method.track_data.present?\n    doc.card do\n      doc.track(payment_method.track_data)\n    end\n  else\n    doc.card do\n      doc.type_(CARD_TYPE[payment_method.brand])\n      doc.number(payment_method.number)\n      doc.expDate(exp_date(payment_method))\n      doc.cardValidationNum(payment_method.verification_value)\n    end\n    if payment_method.is_a?(NetworkTokenizationCreditCard)\n      doc.cardholderAuthentication do\n        doc.authenticationValue(payment_method.payment_cryptogram)\n      end\n    end\n  end\nend\n```. I'm going through the red-tape right now in order to become a contributor. We benefit, we should contribute.. (our corporate policy says \"it could take several weeks for approval of requests\") \ud83d\ude21 . ",
    "brianarnold789": "@kjbkjb pull request for prod and cert/prelive URL updates: https://github.com/activemerchant/active_merchant/pull/2504. ",
    "slogsdon": "@bpollack Thanks for following up.\nThis change corrects AVS behavior for non-GB countries that support AVS through the Realex gateway. Here's the relevant Realex documentation that covers this functionality: https://developer.realexpayments.com/#!/api/fraud-management/avs. Essentially, only GB address should strip non-numeric characters from the postal code and first address line when constructing the code field that is sent to the gateway. Previously, it would incorrectly perform this for all cases.\nAre you able to confirm if you're looking to add tests/assertions for this change to match the unit test assertions?. @bpollack Thanks for following up.\nI'm not sure if there is a published list of supported countries, but I'll reach out to my teammates at Realex to verify. As a note, this was a story submitted to my team to complete on behalf of Realex (I work for Global Payments, just not for Realex specifically).. ",
    "hendie": "I understand about the abstraction, and in this case would go with what the services prefer to call it. They are closer to the FIs, and probably have a better handle on what things are called in the financial world. After a quick Google search, it looks like descriptor would be better than description. Some call it billing descriptor, transaction descriptor. So statement_descriptor seems to me like a good choice?  . ",
    "nfarve": "@dtykocki @davidsantoso @curiousepic @deedeelavinder \nHey everyone, \nNot able to add you guys as reviewers.. @davidsantoso @dtykocki @curiousepic @deedeelavinder \nAnother activemerchant change. \nI didn't see a way to create a fraud transaction, so was unable to write a test. If you have suggestions definitely open to them. \nhttps://developer.authorize.net/hello_world/testing_guide/. @davidsantoso looks there was already a unit test. I updated it to test for success instead of failure. . @davidsantoso @curiousepic @dtykocki @deedeelavinder . @curiousepic added order_id to the order instance and went back to using that for all of the tests!. @deedeelavinder @dtykocki @davidsantoso @curiousepic . @davidsantoso @curiousepic \nOkay so I added the refund and partial_refund and just commented them out per DP's suggestion. \nI also added the void tests to the unit tests since they were missing. . @davidsantoso @dtykocki @curiousepic @deedeelavinder . @davidsantoso I think your right we technically don't need to response from the capture. We can just return the first response at all times since that has all of the information they actually want. . @davidsantoso so it looks like localresult is just the result code (0 for success 1 for failure) so merging would never overwrite a failure code. I can't find authorizationentity in their docs to check what exactly that is and if there is a problem if we overwrite. \nBut it sounds like if we are fine updating the timestamps there isn't any real harm in overwriting params, per @curiousepic concern.. @curiousepic @davidsantoso @dtykocki @deedeelavinder . @davidsantoso Think I captured your suggestions, not sure why this last check wont start though.. @deedeelavinder @dtykocki @davidsantoso @curiousepic . @davidsantoso cool! Went ahead and made sure nothing in the shipping or billing address is passed empty and added a test for a purchase not using AVS. . @curiousepic @davidsantoso @deedeelavinder @dtykocki . @davidsantoso good point! Updated. . @dtykocki @davidsantoso @curiousepic @deedeelavinder . @curiousepic @davidsantoso @dtykocki @deedeelavinder . @curiousepic its only required for Brazil and businesses. Since we aren't supporting the business fields, I added a conditional to only add it for Brazil. . @curiousepic cool updated!\n. I was wondering why my change was being grouped with yours. . You can pull the country from the merchant's account?. Gotcha. So when they set up the gateway they would add their country and we would use that every time they process a transaction with that gateway?. @curiousepic @deedeelavinder @davidsantoso @dtykocki . @curiousepic @dtykocki @deedeelavinder @bpollack . @bpollack I think its up to par now. Going to look into RuboCop.. Did the response change? Or it was just wrong from the beginning?. @AnotherJoSmith We had direct conversation with Payflow that stated ..Currently today for AMEX direct or AMEX via processor $0 authorization is only support for AVS not CSC \u2013 so if they remove CSC it would work\u2026. However our customer wanted to use the csc, which required the change. I can add a test for voiding these transactions. . @bpollack Round 2 is up\n. @bpollack minor tweaks \ud83c\udfc1 . Wasn't sure if a new PR was necessary, but just incase. . @curiousepic nitpick received and \u2702\ufe0f \ud83d\ude09 . @dtykocki not sure if would apply here since we are doing a different kind of refund if unsettled. force_full_refund_if_unsettled seems like something that would happen after both refund attempts fail. Is that what you are suggesting?. @curiousepic Yea we worked with visanet, but there is no way to test it out. Cabify has agreed to test it in production for us. . @dtykocki and @curiousepic change all auth tokens to strings in remote test and got rid of test for numeric.. @dtykocki updated the store test to be a store and purchase. . Was there a reason to not add to the remote tests?. @curiousepic hmmmm might need to add a new http method. @dtykocki Yea I think delete_with_body was removed. I would have to reimplement it. The current code I pushed works though. . @curiousepic and @dtykocki added back delete_with_body and a test for it!\n. @curiousepic @dtykocki  new and improved up with old and funky change to :delete\n. Note: It wasn't possible to add a test since the gateway returns all amounts as a BigDecimal. @curiousepic officially given up trying to write the test for BraintreeBlue since its a Gem, but did add it for BraintreeOrange. @chopenhauer is there somewhere we can verify the codes?. @curiousepic done!. @curiousepic can you run the remote tests. My ip address changed and I wont me back home till Monday anyway. I will update the commit message with the passing test results. . I was unable to reproduce the error with a card with an old year, so I think expired here means something different. Thats why only the unit test. . @bpollack thanks updated! I always struggle with balancing changing as little as possible and making necessary changes. . @curiousepic updated!. I went down the path of implementing all of the store features for ACH until I realized that we don't support Store for this gateway. We may want to open a separate ticket to support store, but this gateway is being decommissioned. . @curiousepic and @bpollack added unit tests!. @bpollack definitely were. Should be fixed. . Weird failures on Travis. Can we add a unit test to check that the fields are now being passed properly?. @curiousepic updated!. @bpollack I update fixtures which should update all the tests to include the api_key. I was using the local and forgot to update the master. \nAlso it looks like tests are failing in Travis because the \"module has too many lines\" any thoughts on how to get around this?. @bpollack deleted some spacing for the time being. . @vnbrs do you have successful remote test I can add to the merge? Unit tests worked fine locally. . @vnbrs I am more so looking for text similar to what can be found in most of the commits. Showing successful unit and remote tests run for the gateway: \nhttps://github.com/activemerchant/active_merchant/commit/99db685a6940b1ba5f6d00047e9d908a5330fcd0. @curiousepic from the post, it looks like this only applies to recurring transactions which are stored cards: https://www.adyen.com/blog/update-on-visas-new-card-on-file-transaction-type\n. Hmm Let me know think about it some more then. Whats throwing me off is this statement: \nBy default Adyen will flag recurring transactions as 'subscription'.. @curiousepic It looks like the only place it could be added is for recurring transactions, which we don't seem to currently support. https://docs.adyen.com/developers/api-reference/recurring-api. Right and that is where I have added it. Can't see where else it could be added in our current implementation. . @curiousepic okay moved to add_invoice\n. @curiousepic It did. Fixed. @bpollack cleaned it up a bit. Hopefully more readable and less indented. . @bpollack I think that was the last 2.. @bpollack there is no equivalent for Layout/ElseAlignment. We would just have to agree to ignore it all together. . Also not sure I am on board for the indent on the when. I see your point that its a happy medium between the indent with the = or with the end.. Its personally daunting to me to try and remove at its current size. . I could not get the remote response to actually return the AVS and CVC so I used a actual response sample from the ticket and update unit tests. . @bpollack So I started there but then saw all of the refund test are Faux: https://github.com/activemerchant/active_merchant/blob/master/test/remote/gateways/remote_authorize_net_test.rb#L471. @curiousepic we are already scrubbing both the routing number and account number: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/authorize_net.rb#L218\nDo you want a separate unit test to test that it is actually scrubbed?. @curiousepic Definitely undestand. \nIt looks like from the documentation only accountNumber is returned and that is only the last 4. We do have a scrub method in the unit test that makes sure its scrubbed. \nhttps://developer.authorize.net/api/reference/index.html#payment-transactions-credit-a-bank-account. @curiousepic updated!. @curiousepic updated 2 things:\n1.) Adding the authorize only in purchases when using 3DS\n2.) Adding 'Authorise3d' in the success_from method.. Nice work! Really clean implementation.. @curiousepic and @molbrown ready for \ud83d\udc40 . @curiousepic Stripe seems to have most of the tests broken out like this. I think because it's become some big. Right now there are 5 remote tests for stripe. The base remote test is pretty huge. . @lancecarlson you should be able to force push and it will restart. Let me know when its passing and I will merge it. . looks like its \ud83d\udc4d now. . You should be able to do a git push -f origin <your branch name>\n. @lancecarlson how is the invoice used differently than the order_id? Am I correct in understanding that invoice is only a number but order_id can be a string?. @molbrown this caused an issue?. @molbrown commented on the ticket, since this was a change that usa epay felt was necessary. . @molbrown after reviewing I think there are 2 options:\n- Revert and then add a GSF for invoice. The issue here is that invoice (our GSF) would point toorderID (USA Epay) and order_id (our field) would point to invoice (USA Epay). Pretty confusing.\n- Add a invoice GSF that would point to USAEpay invoice field. . Further reference: https://help.usaepay.info/developer/transaction-api/#ccsale-credit-card-sale. Sorry for taking so long to get to this!\n\nIt seems our intent is to stash the errorMessage in options so it can be added\nto a follow up request if the follow up request fails (this would only happen\nwhen the user has opted to force a full refund for an unsettled refund, if I'm\nunderstanding the logic correctly).\n\nI think you have it correct. I am trying to follow my logic and it looks like your change makes sense.. I wasn't sure if we try to only have the bare minimums in the options hash. Definitely can add to all though. . Okay so keep the refund method but maybe test for failure with the right message? . Yes the failed purchase. . Gotcha!. Note: Address and Zip Code are required to participate in the address verification service (AVS) and highly recommended for appropriate card not present qualification.\nFrom reading their docs its conditional for just a regular credit, with the stipulation above. Not sure if if best to also pass it only when given so that non-AVS calls can be made. . I just checked passing the address1 and zip as an empty string and get the same error as I would get with the other params. . When I remove it I get errors for an undefined method '[]=' for nil:NilClass. @curiousepic just pushed updated that only checks billing_address.. More so just making it consistent with the rest of test. . You cant use a value less than the tax values. So I had to increase the purchase amount for the test to pass.. Yea from the ticket: \n\"PayU Latam requires their description field. We noted in our documentation that it is a required GSF, however, if it's not sent, then we currently send \"unspecified\" and PayULatam wants us to default to \"Compra en insert merchant name\". We can't do this because we don't have the merchant name. But we do have their merchant_id from their gateway credentials which they said are approved.\". Just tried that and it fails another test. . Yea I was getting user authenticated errors and Paypal asked that we change our password. It ended up being a IP whitelisting issue though. . Guess it doesn't hurt to concatenate the two together into the one field. \ud83d\udc4d . So I did have that pattern above and rubocop complained (wanted a guard clause) about it so I modified to the current. . Would the test for this be better suited as a unit test?. So your saying it should be on the core side? I was going to check in the initialize step before a commit was made.. I always do that. Thanks for the catch\n. Yea it needs to be 14 digits.. \ud83d\udc4d . Ticket up to whitelist both ports. . required? It scrubs without them.\n. Updated the ticket. Thanks for the catch.. @dtykocki thanks for the catch. Will \u2702\ufe0f that. . We can't process a refund without the id that is the second part of the ID numbers. Trying to do so gives a new error. I felt it wasn't worth making the second call since we don't have the key piece of information we would need. . Definitely will consider. I generally try to touch others code as little as possible, but definitely agree with your opinion. . I haven't touched this. Seems like its currently not causing an issue. . Was there a reason to get rid of this test?. good catch.. Ooh look like it is. I think it was a merge conflict auto-merging thing. Will fix that. . \ud83d\udc4d check and check. @dtykocki in the tests it was giving tokens/auth codes as numbers and not strings. @dtykocki Litle allows for \"credits\" of non-vantiv (litle) transactions. In those cases you give it the same info as a purchase and they \"credit\" the amount instead. . @dtykocki and @curiousepic So I can change remote tests so they pass only strings and not numbers. Cases like this: https://github.com/activemerchant/active_merchant/blob/9885a343a0bd9a004b3a3cff9bb2f34357f53ad3/test/remote/gateways/remote_litle_test.rb#L320. Was there a reason to break this out?. I assumed so from the commit message. @curiousepic sorry I thinking about the params[:amount] in add_invoice. Updated to have the if statement. . In this new configuration, message_from will be called twice (once for cancelDeposit and once for refundSingleTransaction). If it fails in the first call, I want to save the error message so I can show it in the second call. I wanted to capture both messages incase these calls failed for a reason other than the transaction wasn't settled. . Did you mean to include this in this PR?. so capture just says if it will automatically be captured (why its only added on authorized). The default value is true. I have to set if for vouchers differently than credit cards.\nIndicates whether payment should be processed immediately. If it is false the payment should be confirmed later. The default is true .. So I had it that way and changed it since its \"building\" the billing address object and not really \"adding\" it. Maybe I am being too literal.. Its a field they use the track with. They only asked us to include it when were trying to debug how to send the voucher requests correctly. . This is actually the standard for any request with a body\nhttps://github.com/activemerchant/active_merchant/blob/3b428287e5f2d96d41c986abe0a83fb72032e2c9/lib/active_merchant/connection.rb#L77. I can make it private.. its a required field so I didn't include the if. I don't think its just for testing. I think it similar to when we want to monitor traffic from a specific merchant. Or when a gateway wants to track Spreedly traffic. . Done!\n. @bdewater our original implementation had it in the :delete but we thought this was safer. I don't think we would be against going back to the original . If its gateway-level do you need these?. Yea but unfortunately it doesn't work when all the test run, but if I run the test one by one they pass.. @curiousepic the acceptHeader and userAgentHeader must also be sent, but I didn't encapsulate that in a if. @dtykocki probably. I just kept the variable name that was there originally. . @dtykocki added!. Might be misunderstanding, but it looks like its one or the other. We get back an error or a transaction.. Is it okay to pass this field empty?. @bpollack Went ahead and added the unit test. . @bpollack yea this is a remanent of me getting stuck in rubocop looks. It was complaining that the one line ternary was too long so then I did multiline then it complained that it should be a if else statement. Going back and fixing that stuff now. . Good catch, scrubbing the payload. . Was working but putting it back due to your COBOL theory. . It can't be folded into the commit, it would end up in an endless loop since the send_ack is also a commit. . Fixed. Thanks @bpollack for all these catches. . Waiting for certification test to be approved so they can give us the actual live url. . Gotcha. Updated!. I did... trying to remember why I went back to this way. \ud83e\udd14 . @curiousepic for the MultiResponse wouldn't it need to be on the first commit and not nested inside of it?. Yea I had in each method, but this reduced lines of code. . @bpollack I as more so asking how could it be done with the current commit structure. Definitely see how add a new commit commit_raw could achieve the goal though. . @bpollack and @curiousepic new and improved with MultiResponse\n. It actually is not present in the transcript. I am more so thinking of this as a precaution. . These lines are aligned with line 101. This rubocop is trying to align the :'s with each other. Not to the {. Here billing_address is aligned with description on line 20. . @curiousepic is the complete response gets scrubbed I don't see why having raw_response.inspect would cause an issue. . @bpollack ummmm I think I fixed it. . :nice:. Err I think this is different. Maybe response.dig('transaction_id'), response.dig('response', 'authorization_code'), parameters[:transaction_id], parameters[:authorization_code].join('#'). Updated!. Shouldn't this be indented?. Did most of this file get re-ordered?. So we return first_name and last_name in core on all refunds. The check isn't present unless we pull the name and pass it instead from core. https://github.com/spreedly/core/blob/master/app/models/gateways/authorize_net_gateway.rb#L49\n. Should post[:card][:capture] always be passed?. These are public credentials or Spreedly specific?. Did you mean to keep this?. Okay. I thought the standard was to put a placeholder, unless they are values anyone uses when testing. . There is a default value for all Gateways. I think the value is https://github.com/activemerchant/active_merchant or something like that. . Well thats what this made me believe: https://github.com/activemerchant/active_merchant/blob/60efe5c5bd27cafa22edb6cdef2273ca7a8da72f/lib/active_merchant/billing/gateways/eway_rapid.rb#L45\nBut I can't find where its set. . okay so yea there is a default value. We want to only use it if there's a different value.. Right so in that case we don't want to set aggregatorID. ",
    "alexymik": "Hi @bpollack, the CI failure was a fluke. It was with a gateway test that failed in an unrelated gateway.. Sorry to be a bother but could you tell me how to do that?. ",
    "malcolm-mergulhao": "@bizla I added the test for statement_address not being populated when required fields are missing. . I squashed my commits, its looks like I cant merge though so whenever you guys want this should be good to go.. it could. I chose zip instead of postal code to stay consistent with the billing address parameters that get passed in but if we want the values to match with the ones stripe accepts thats fine too. I guess it depends on what we were thinking of passing in through the options. . yeah, that would be better. oh yeah i meant to have a check on that line to make sure address2 was present. The reason i didnt check above is that its not required. . ",
    "Lorel": "@ntalbott thanks so much for your quick reply, highly valuable, you rock ;). ",
    "kaiomagalhaes": "@vitork any news on this?. ",
    "vitork": "Hey @bpollack!\nNo, this is not relevant anymore. The gateway API has changed a lot and I believe the whole integration would need to be rebuilt. For that reason I've decided not to use Active Merchant for this specific gateway and to implement the integration manually since I'm using just some basic endpoints.\nUnfortunately I don't have the time to implement the necessary changes for the API to work again at this moment, but I'll be happy to help in the future if the integration is still outdated.\nIf you don't mind, I'm closing this PR since the code changes here would not solve the problem at all. As for the issue #2534, I'm not sure if we should close it or leave it opened to sinalize that the gateway integration is not working.\nThanks!. ",
    "kalmbach": "Really sorry, wasn't the intention to create this pull request. Case of fat-finger-click. . ",
    "nicholsonm2": "@jasonwebster Is there an ETA on when this will be deployed?. @jasonwebster @AnotherJoSmith \nIs there an ETA for when Shopify will deploy this fix?. ",
    "aengusbates": "@AnotherJoSmith: Done! Unit test updated. (waiting on Travis to confirm). @AnotherJoSmith: Done++. ",
    "megetron": "Seems like there is a partial support for it, you can check here:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/connection.rb\nfor authenticated proxies I suggest to overide net::http call:\n```\nmodule ActiveMerchant\n  class Connection\n    alias_method :http_original, :http\n    private\n    def http\n      _, username, password, host, port = ENV[\"PROXIE_URL\"].gsub(/(:|\\/|@)/,' ').squeeze(' ').split\n      http = Net::HTTP.new(endpoint.host, endpoint.port, host, port, username, password)\n  configure_debugging(http)\n  configure_timeouts(http)\n  configure_ssl(http)\n  configure_cert(http)\n  http\n\nend\n\nend\nend\n```\n. ",
    "stevenjonescgm": "I added on top of this pr (because it is less effort than cutting independent prs) some fixes for tests for other Gateways that concern me.\nStripe only needed modern (dynamic) expiration on Track1\nAuthrizeNetCim has a \"A duplicate record with ID 1810384386 already exists.\" error. this was being obfuscated by assuming the response was valid (bad assert pattern?) and so surfaced as an Error instead of a Failure. I have not determined the root or solution to this failure, but this at least makes it easier to identify for the next person.. CI failure seems to be due to instability in moneris_us_test, which should be independent from the above changes, and passes locally. it seems Vantiv/Mercury updated their API recently to either separate card_present_code from card_input_code, or now properly validates these values. \nfyi\nCardPresentCode 0/1/2/3 Default/Unknown/Present/NotPresent\nCardInputCode 0/1/2/3/4/5 Default/Unknown/MagstripeRead/ContactlessMagstripeRead/ManualKeyed/ManualKeyedMagstripeFailure\nI'm working on my own changes to fix Check/ACH, store and more. I'll try to remember to clean up my changes once they are stable, make a PR and link this. ",
    "code-bunny": "@matthewheath I found the problem, it was with another gem that was overriding the number attribute of my payment class.. ",
    "deedeelavinder": "\ud83d\udc4d :shipit: . @curiousepic -- Unit tests added using .check_request to verify request structure with new option fields, both for billing and shipping.. \ud83d\udc4d . LGTM \ud83d\udc4d . \ud83d\udc4d  Even though the tests aren't altered, including the test results in the commit maintains consistency and could be helpful in the future.. @curiousepic GAH -- added now.. @dtykocki Reconfigured the optional parameter . . . want to take a quick look?. \ud83d\udc4d . CI fails on Gemset '' does not exist. @dtykocki I tried lots of variations on remote tests, but the risk_data parameter always showed device_data_captured as false and the value passed in device_data was never returned. Since there was no way to verify device_data had been received, or even passed correctly, I couldn't picture how to write helpful unit tests. I was thinking remote/unit tests could be added iteratively as we heard back from the customer, perhaps with some examples. Open to suggestions!. @bpollack Re-approved. \ud83d\udc4d . @dtykocki Yes, they are all the same failure. \ud83d\ude2c A collision with Discover. back to the drawing board. This causes a collision with a Maestro number.. \ud83d\udc4d . \ud83d\udc4d . @curiousepic Are you thinking of the new test with phone from billing? That is using the other phone number. Line 279.. \ud83d\udc4d Of course!  Thanks, @curiousepic -- updating now.. Is the post parameter needed here? Or in add_shipping_address on line 199?. Duplicates line 164.. Is the if options[:payment_country] == 'MX' qualifier for :postalCode only needed for the billing address and not the shipping address?. This is the only place using options[:country]. Elsewhere options[:payment_country] is used (lines 169, 182, 192, 227, and 228).. format_billing_address?. \ud83d\udc4d . I looked at that but it would require a potentially more confusing refactor of add_creditcard due to other params being used & set in that method.. My thought was the add in add_payment_method would suffice and that the add here was confusing in the context of adding a tokenized card. Happy to switch it back if use isn't working.. GAH!. \ud83d\udc4d . \ud83d\udc4d . No transaction_type in calls to the /securitytokens endpoint.. \ud83d\udc4d . \ud83d\udc4d \n. As @davidsantoso pointed out, we can use the :apikey used to initialize the gateway. The js_security_key is merchant-specific but is not treated as ultra-sensitive in their documentation and support forums. This now allows that parameter to be passed in with options. That will allow backward compatibility for current users who wish to use store in the future. . Agreed about address[:houseNumberOrName] or address[:street] being unlikely, but will leave in case they are currently being used somewhere since they were pre-existing. \nThis does include top-level street and house_number fields for both billing and shipping addresses.. \ud83d\udc4d Great suggestion -- added and open to naming suggestions. @dtykocki . \ud83d\udc4d . \ud83d\udc4d Good point -- .check_request now added.The fallback parsing will return 'Not Provided' for the street address which is a new addition. @curiousepic . Sure -- done. @dtykocki . Thank you, @sebastianGitDL -- will modify now.. @dtykocki Restructured the way the authorization is built to accommodate the failed store response and returned these tests to the way they were. . \ud83d\udc4d . \ud83d\udc4d . Should this be = options[:responsible_document] if options[:responsible_document]?. This doesn't work because not all of the options are passed in every time. The reference can have a variable number of objects.. @curiousepic \ud83d\udc4d  Added an authorization_from method with no compact. . ugh, yes! Thanks for catching. . Agreed -- removed.\n. Looks like @amount is what is initialized. @money is also used on line 88.. @bpollack I didn't dig into why the unit tests were throwing errors -- just noticed the discrepancy between @money and @amount. Glad the tests are easy to fix.. @curiousepic I think I mentioned their internal assessment: if the merchant is not approved for 3DS, Safe Charge will default to Sale. And they do not allow for 3DS authorizations, only purchases.. The elsif in this context caught my eye. Did you mean else? This is a great spot for a ternary operator. \noptions[:credit] ? { 'action' => 'REFUND' } : { 'action' => options[:action] }\nAlso, what will happen if there is no options[:action]?. @bpollack You could also set a variable for use in the ternary (so that it is clear nil is returned when appropriate), but the latest also looks good.  . @nfarve It looks like the closing brackets on 109 and 113 need to go left two spaces so that they align with the beginning characters of their block or section. That would follow the pattern, e.g. lines 121 & 127 and 202 & 206.. \ud83d\udc4d . http://ruby-doc.org/core-2.5.3/String.html#method-i-5B-5D. @kheang, What if build_otb_request were build_verify_request? It has the benefit of being more descriptive and following the established pattern.. Since the others use a recognizable word, and not an acronym, you could add a Comment where the method is defined indicating what otb stands for.. \ud83d\udc4d . @bpollack Do you think it is beyond the scope of this PR to add tests for prepare_refund_data?. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d \n. Sure, no problem.. \ud83d\udc4d \nRubocop had lots to say about these files and I thought reformatting the file would help. It did some, but there were lots of adjustments like these. I agree that that it is easier to keep logic changes separate and intended to take these out this morning. I hadn't requested any reviewers yet for just that reason. Since you have already approved, and waded through the extra long diff, I will just leave them in.. Rubocop is fine. Its complaints were about my additions (lots of options massaging) and reformatting addressed most of the issues I introduced. It also deleted all the extra spaces, which as I said, I intended to undo this morning. . yes, @curiousepic, all three are required for first and subsequent cof transactions. . ",
    "ccarruitero": "r? @curiousepic @davidsantoso . @curiousepic is for support purchase with token. In my case I was getting the token from the client using payu latam javascript. But I think should be useful to use with store too.. I was using their tokenization documentation: http://developers.payulatam.com/en/api/tokenization.html\nThe remote test for store is passing.\n```\nUnit Tests:\n23 tests, 89 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\nRemote Tests:\n19 tests, 49 assertions, 2 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n89.4737% passed\n```\nThe failures in remote tests are for void and capture, these fails because an internal problem in Payu Latam sandbox.. ",
    "juan267": "This PR as with #2590 also needs to be merged in order to be able to create purchases using credit card tokens. . Please merge this PR, it correctly fixes the store method which is currently broken. ",
    "achasveachas": "Fixed in https://github.com/activemerchant/active_merchant/pull/2580. Same bug if payment method doesn't respond to manual_entry\nFixed in the same PR.. ",
    "wowinter13": "What is it?\n. ",
    "sebastianGitDL": "Hi! Nice! I'll take a look at that link and run some tests then. Thanks for for the answer!. Hello! How are you?\nThanks for helping improving this particular Gateway! I am currently working on the implementation of Payeezy and I have to use the same method as well. I just wanted to share with you that the ta_token should be configurable, since that token NOIW is only accepted in a SANDBOX environment. If we want to use this tokenization feature in a LIVE environment, the ta_token should be set according to the given by FirstData in the Terminal (take a look at the documentation for that particular field https://developer.payeezy.com/payeezy-api/apis/get/securitytokens)\nHope this helps! . ",
    "EssenKh": "@bcackerman  interesting i just get an issue there. did you get any solution ?. ",
    "Ligator": "+1. ",
    "nfriend21": "Just \"passing the card token\" is not really clear enough.  I expected that wording to be the token object, especially because you pass the credit card object in other scenarios.  But, it is actually the token ID that you need to pass, otherwise you will get the error:\n{\"error\"=>{\"type\"=>\"invalid_request_error\", \"message\"=>\"Must provide source or customer.\"}}\nI think the docs should be more explicit there.. ",
    "mamhoff": "I've kinda moved on from this task, and won't spend time on this PR right now. Feel free to rebase, re-open, squash. For the record: I think this would still be a good step for the library to take. . ",
    "yosi-dediashvili": "Braintree does support passing it: https://developers.braintreepayments.com/reference/request/credit-card/create/ruby#payment_method_nonce\nIt's a matter of implementation in the gem.\nThe credit_card.update method of the gateway accepts the payment_method_nonce param, looking at the implementation of the gateway in active_merchant though, you can see that it's not possible to provide the nonce: https://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree_blue.rb#L249\nOn the other hand, the method being used for creating both a customer & payment method, i.e. add_customer_with_credit_card, is accepting that param:\nhttps://github.com/activemerchant/active_merchant/blob/master/lib/active_merchant/billing/gateways/braintree_blue.rb#L215\nPlease let me know if I made it clearer. Sure thing.\nAt the moment we just implemented a wrap around the ActiveMerchant gateway that takes care of the \"existing customer\" flow and maintains the same interface. ",
    "ralleman": "This is good to know because I'm seeing the same thing. What's the correct resolution for this?. ",
    "guaguasi": "Copying the system's ca-bundle was how I initially fixed my issue (#2657) before finding out how to regenerate the mozilla bundle file. I'm currently assigning the system bundle to the CA_FILE constant as a stop gap which seems to be working but is throwing a warning. It appears that currently it's still using AM's certs.\nPersonally, I feel it should use the environment's bundle by default with an up to date cacert.pem  file as a fallback, as well as a proper way to specify a custom location for a bundle.\n-- Edit --\n@rwdaigle Even if that's the case, I think the internal bundle should be updated via this PR or some other method in the interim. This peer verify issue should be affecting a number of people, specifically NAB Transact and Barclays EPDQ Extra Plus users.. @bpollack I can understand that. I literally just downloaded certdata.txt file the original cacert.pem was generated with and used mk-ca-bundle.pl to generate the cacert.pem in this PR. It should contain all the current certificates, right?. This isn't an activemerchant issue, it's a configuration issue on the Stripe side. I haven't done it myself, but there's an option somewhere in the Stripe dashboard, behind a couple of scary prompts, that needs to be enabled. Something about allowing unsafe transactions.. In their eyes, it does appear that way. I think there might be an increase in transaction fees, too, though I'm not certain. I have yet to fiddle with the Stripe JS library, opting for the \"unsafe\" route, but below is how Square works and I believe they are similar.\nSquare has their own activemerchant extension that handles things \"properly\" in conjunction with their JS library and iframes. The JS library rerenders the CC fields of the form as iframes so the information is submitted to them directly. The library then returns a nonce to us as a reference to the CC information stored on their system. Their activemerchant extension uses the nonce instead of a CC number to submit the purchase information using the same syntax as any other gateway. It's not necessary but it does help keep things somewhat standard.\nI'm not entirely sure what the difference is, but I assume that it's because they trust their own server's security over a random other server.. I suppose the nils would be considered as coming from outside ActiveMerchant. If the ActiveMerchant::Billing::CreditCard instance has a nil number, the various methods such as #first_digits fail with exception in contrast to how it used to behave and return an empty string. \nIf you notice in the originally referenced commit, there are various locations that once had #to_s and now have the SNO. This PR merely accounts for the nil without doing string conversion while also maintaining the original return values.\nThe other item of note, is that the now changed #last_digits matches the return value of #first_digits when number is nil. Prior to 2bc7493, #last_digits returned nil whereas it now returns an empty string. By the same token, prior to that commit, #first_digits returned an empty string and now it just throws an exception of undefined methodslice' for nil:NilClass. After this PR, they both return an empty string whennumberisnil`.. ",
    "singhai0": "Closing as #2670 got merged.. @bpollack What's ENRG-7184? (On a casual glance, It seems like a jira ticket -- quite possibly internal to Spreedly \ud83e\udd14).. I wrote this while I was an intern at Shopify, where we had a lot of data from various gateways that could've been used to fully build this reverse lookup of sort. Now that I am back in school, I no longer have access to that data and am unable to make progress on this \ud83d\ude29.\nMaybe @tothpete or someone else can continue work on this. What do you think @infiton, @rperetti?. No. If either street_match or postal_match is available, we can generate A or P codes respectively.\nIf if street_match.blank? && postal_match.blank? is true, these two letter codes offer no valuable information, and thus no code can be generated. Although it can be said that U should get generated in those cases, but in various implementations, I found out that this made the most sense.. ",
    "rperetti": "At this point I think we should just close it.. ",
    "munderseth": "Hi @jasonwebster and @Krystosterone  I was hoping if you had a moment to take a look/review this pull request. It basically captures your test results and presents them in an organized format based on your source repo. There is no impact on the workflow. There are a number of benefits and we are working on more analytics to be rolled out in 2018.\nWe somewhat new to open source, but not the enterprise world. So we decided to fork repos and add the test reporting. This is our approach to getting users.\n\nMark\n\n. ",
    "padi": "@Azdaroth any update on this? I think it might related to https://github.com/activemerchant/active_merchant/issues/2620\nI'm also encountering the same exact error. . @Azdaroth Thanks!\nFor everyone else who might stumble upon this warning and want to perhaps temporarily get past it,\nthis can be found under Business settings > Integration in your Stripe Dashboard (https://dashboard.stripe.com/account/integration/settings).. @jasonwebster Thanks for pointing that out.\nI've investigated further and if you don't want to get through PCI compliance, the only secure option you have is to pass those credit card information directly from the front-end form fields to stripe using Stripe.js' createToken and use that token in the backend instead.\nReference: https://stripe.com/docs/stripe-js/reference#stripe-create-token. ",
    "alexcwatt": "@bpollack Thank you for all the feedback; I know my style needs improvement and I love that open source projects allow learning like that :) I pushed another commit a few days ago that I think addresses the change requests; if you could take another look and let me know if you see anything else, that would be great!. Sounds good, I was just following a pattern I found in create_customer_profile. But that would be a lot cleaner.. I don't know how this ever passed before. The description was being set, so it shouldn't have been asserted as nil.. ",
    "ttdonovan": "I am also interested in getting this pull request approved and merged into ActiveMerchant. I've had to use a fork of this gem for a long time as a work around for partial captures.\nWhat are the steps for getting a reviewer and/or labels assigned to this pull request?. Just checking in to see if there is any progress on approving this pull request. As a work around I'm using the following snippet to enable support for partial captures of an authorization.\n```ruby\nrequire 'active_support/core_ext/module/aliasing'\nmodule LitleGatewayWithPartialCapture\n  def capture(money, authorization, options={})\n    options[:partial] = true if money\n    super(money, authorization, options)\n  end\ndef transaction_attributes(options)\n    attributes = super(options)\n    attributes[:partial] = options[:partial]\n    attributes.delete_if { |key, value| value == nil }\n  end\nend\nActiveMerchant::Billing::LitleGateway.send(:prepend, LitleGatewayWithPartialCapture)\n```. @bpollack I've been using my changes in production since Feb. The commit looks good and includes test coverage. I believe it's ready to go.. ",
    "molejnik-mergebit": "Not quite sure how the process of integration looks from now on. Can anyone have a look at this and merge if all is OK? @curiousepic @bpollack @dtykocki @bdewater \nPlease let me know when it could be reviewed, as one of our client is awaiting this integration.. ",
    "mprostko": "Any progress on this pull request?. ",
    "ccallebs": "@varyonic @bdewater Gotcha! Will close then. Thanks for clarifying.. ",
    "chopenhauer": "Wonderful!\nOn Mon, Feb 26, 2018, 19:35 Benjamin Pollack notifications@github.com\nwrote:\n\nThanks @chopenhauer https://github.com/chopenhauer! I did some slight\ncleanup and merged this to master.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/2756#issuecomment-368602456,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANPuweYUi8A_STaLc2axC0SREAYlI2Dyks5tYvl7gaJpZM4SOh5c\n.\n. @nfarve @curiousepic \nYou can check it here\nhttps://en.wikipedia.org/wiki/ISO_4217\nYou will see that PLZ 616 was deprecated against PLN 985\n. \n",
    "bc-anna": "This is the fix - https://github.com/activemerchant/active_merchant/pull/2759 - but there's been no version bump since so you can always point to the latest master sha in the meantime.. Excellent, thanks for the update @bdewater \ud83d\ude47. ",
    "betam4x": "Thank you SO MUCH!. ",
    "bbergstrom": "Revised.. Thanks @bdewater How often does a release get cut of this gem?. That is my understanding as well.  . @bdewater Created https://github.com/activemerchant/active_merchant/pull/2800 with the revised approach.  Please review.. ",
    "a-salty-strudel": "I updated the unit tests to expect the new countries as well.. ",
    "lumiit-adam": "@elfassy squashed now. Hi, @elfassy\nI have split the committed code, please have a look.. I have changed code, please continue to review.. Finished squashing commit and waiting for final reviewing. Yes, I add a option to pass the region.. If there is other way can pass the parameter without add new option, please tell me.. I changed the code following your guide. Please continue to review.. I think there is no exact function for this change, I will revert it.. I am not clear about tht. The staff from ipp just asked for the unify gateway for different regions' orders. So, I think that if there is a way to judge the region automatically? Could you give me some suggestion about it?. I think I can do it.. Fixed.. Fixed.. Fixed.. Fixed.. Fixed.. Deleted.. Finish this change request.. Finish this change request.. Finish this change request.. I update the commits to let the BeanstreamGateway to inherit from Gateway. Please have a review.. ",
    "chriswongipp": "@elfassy is there anything outstanding before this can be merged into Master?. ",
    "tmac": "@neha-p6 I was just about to submit an issue for this as well. We were able to fix it by monkey patching the live site url:\nhttps://gist.github.com/tmac/8483373d86a01542776a82824e8d421f\nNote that updating to the latest version of ActiveMerchant should solve the issue as well. \nI believe that this is the root of the problem:\nhttps://community.developer.authorize.net/t5/News-and-Announcements/SSL-Certificate-Updates-for-Legacy-SDKs/m-p/62935#M207\nThanks for the warning Authorize.net! \nIf AM wants to continue supporting those legacy endpoints older versions are going to have to be patched with the updated certs.\n. ",
    "seebq": "We have activemerchant locked at 1.50.0 and had to do this to get our older legacy app working again.  Confirmed this monkey patch worked.  I added to rails initializers with a comment linking the developer announcement.\nLonger term we should update the certs, not just that one URL.\nThanks for posting this.\n\ud83d\udc4d . You know, just searching the repository:\nhttps://github.com/activemerchant/active_merchant/search?q=transHash&unscoped_q=transHash\nIt looks to me like transHash isn't used as part of authorize.net's implementation in ActiveMerchant.\nIt only looks like it's referenced as part of the response in a test file. \nCan anyone else confirm?  I think the real question is:  Is your code using the returned transHash value to save or reference any transactions. \nCan anyone else chime in if that's right?. ",
    "jnwaletzko": "@filipebarcos thanks for responding to this! I went on vacation after making these changes. I'll update the PR and get back to you. . @filipebarcos moved the comment and updated the description. Let me know if there is anything else needed. Thanks again. . @filipebarcos can this be merged soon?. ",
    "adam1010": "The problem wasn't as much with ActiveMerchant as it was with Braintree's awful API design where they do not let you specify a currency code. They take the money amount from your request but then match it with the currency code from your account. So sending a request for 10,000 INR will go through as 10,000 USD with no errors or warnings whatsoever.   Thanks #Braintree. ",
    "grantbdev": "@dtykocki @bdewater This change started failing some connections for me in a not-so-obvious way. If you pass a frozen headers hash, FrozenError: can't modify frozen Hash will be raised internally and the method will jump to the ensure block. Then TypeError: nil can't be coerced into Float will be raised because request_start is used for subtraction, but it has not been defined yet.\nAssigning request_start before headers['connection'] ||= 'close' could help people see the actual error.\nI am making sure to pass a non-frozen headers hash for now, but if frozen headers are supposed to be a supported use case maybe this operation should be converted to not do a mutation.\nWhat do you think?. @bdewater I'd be happy to submit a PR for this.\n\nI believe this usually gets dup'ed in most libraries to prevent mutating passed in arguments.\n\nDo you have a preference where this happens? #raw_ssl_request and #request seem like the primary candidates to me, but I'm not sure how high/low in the stack this should be done.\nThanks! \ud83d\ude00 . ",
    "NeilsC": "I'm not sure why the CI build is failing. Open to suggestions.... ",
    "mcelicalderon": "I'm using v1.70.0. Now I understand why I'm getting the error as that version defaults to api version 2017-02-01 here https://github.com/activemerchant/active_merchant/blob/v1.70.0/lib/active_merchant/billing/gateways/wepay.rb#L13\nStill, this change will allow you to configure the gateway object to optionally use the specified API version for all request you make, unless otherwise specified in the options param for each request.. Reading this https://developer.wepay.com/api/guides/how-to-versioning now I'm not completely sure this change is that useful, as to globally change you API version you can do it from the wepay app console and all your requests will use that version unless otherwise specified. The only possible use I see for this change is to upgrade API version and test that it works from your code before actually changing the config in the app console. API version can be set to one version above the one configured in the dashboard.\n\nStarting with version 2016-07-13, an application can only use the Api-Version header to make an API call request equal to the API version set on the application\u2019s dashboard and one version above it. If an application attempts to make an API call request with the Api-Version header set to below the application\u2019s version, or more than 1 version above the application\u2019s version, then the API will respond back with an error code of 1016. This will break an application\u2019s functionality if it is not properly set up.\n. \n",
    "Shelvak": "@curiousepic , @dtykocki  Sorry to bother you, could you check or add any reviewer to this please?\nThanks in advance :) . Hi Ben, thanks for the answer. I didn't find the official minimum amount. I asked in the forum but no answer yet, anyway I changed that because at least in sandbox the test fails with less than 5 Argentine$. I don't know if that was always in that way and in Prod the min is $17 or not. Waiting for the PayU official answer.... Hey @bpollack Sorry for the delay, I saw the comment and I totally forget about it....\nNo, I didn't find specific info about that. And I don't have a production account to test in Argentina. \nLet's close that and If I can check that in prod or get any official answer I'll reopen (and update :+1:). ",
    "jychen7": "@sehgalmayank001 \nI think different gateway could have its own list\nbtw, we can use permalink to show code snip in same repo\ne.g.\nhttps://github.com/activemerchant/active_merchant/blob/84d758583c3a55afa6478fd8c9bea33a78fef2b8/lib/active_merchant/billing/gateway.rb#L129\nhttps://github.com/activemerchant/active_merchant/blob/84d758583c3a55afa6478fd8c9bea33a78fef2b8/lib/active_merchant/billing/gateways/worldpay.rb#L12\nhttps://github.com/activemerchant/active_merchant/blob/84d758583c3a55afa6478fd8c9bea33a78fef2b8/lib/active_merchant/billing/gateways/credorax.rb#L21. ",
    "sehgalmayank001": "@jychen7 I need to be sure of it.\ntake this link https://www.currency-iso.org/dam/downloads/lists/list_one.xls\nor https://en.wikipedia.org/wiki/ISO_4217\nBoth have the similar list, i.e. there is supposed to be standard based on  ISO 4217. ",
    "jonmast": "@bpollack Anything I can do to help get this merged?. Oops, I somehow missed that. The implementation looks good (better than this one) at first glance, I'll open a PR if I run into any problems integrating it.. ",
    "andrewariley87": "Is there anything I need to do before this is ready for review?. ",
    "gurmindersingh4260": "I am still getting the following error.\n ' SIS0252 '  =>  ' The trade does not allow card sending '.\nI am sending the parameters as per docs.\ncredit_card = ActiveMerchant::Billing::CreditCard.new(\n  :number => number,\n  :month => 10,\n  :year => 2010,\n  :first_name => 'Bob',\n  :last_name => 'Smith',\n  :verification_value => '111', #verification codes are now required\n  :type => 'visa'\n)\ncustomer_credit_card = ActiveMerchant::Billing::CreditCard.new(credit_card)\nresponse = GATEWAY.purchase( 200 , customer_credit_card,  options )   \nIs there anything special needed to done for redsys? \nI could not find what am i doing wrong.. I have contacted Redsys. They are not supporting for credit card params as POST params. Is there any other way to redirect to Rerdsys website and make the payment over there using activ merchant?\n. ",
    "isaacsouzard": "Sorry, the PR should have been opened on our fork. In the future we will do the PR for the original project. ",
    "vnbrs": "Can we have this merged? \ud83d\ude04. Yes! We're using these new URLs on our official integration libraries. ",
    "abunsen": "Includes scrubbing as well.. ",
    "mastermatt": "yes, you are correct, the mocking service only offers HTTP and I don't control that service unfortunately. \nWhile I'm not surprised to hear this lib doesn't support HTTP in principal, there is code in place already to protect against it so I took a shot. The first line of ActiveMerchant::Connection#configure_ssl for instance.\nhttps://github.com/activemerchant/active_merchant/blob/3169f0c1dd58cc3e195df0e6be7ed392c7cab256/lib/active_merchant/connection.rb#L149. ",
    "lancecarlson": "@bpollack Pushing 3 more remote tests. I ran them locally against your key and they returned successfully, however I wasn't able to verify the data inserted properly given the response. If I get around to it, I will try applying my own sandbox key to verify, but if you get around to it first, that would be amazing!. I believe this is failing for the same reason this other PR is failing (same version of Ruby, irrelevant error message, etc):\nhttps://github.com/activemerchant/active_merchant/pull/3089.\nThe PR itself should be fine.. @curiousepic Is it possible to force re-run Travis again?. Looks like you're supposed to close and re-open to get it to rerun.. @nfarve I'm not sure how to accomplish this! Assistance would be appreciated. haha. @nfarve \norder_id: Order identifier. This field can be used to reference the order to which this transaction corresponds. This field can contain up to 64 characters and should be used instead of UMinvoice when orderid is longer that 10 digits. \ninvoice: Unique Invoice or order number. 10 digits. While not required, it is strongly recommended that this field be populated for CC:Sale, CC:AuthOnly, CC:PostAuth, CC:Credit, Check:Sale and Check:Credit \nInternally we use both for different things. It makes it pretty confusing when invoice is pointing to order_id. It also makes it difficult to specify both.. I'm going to make this cleaner.. This is only supported in Rails 5+. Perhaps it makes sense to start supporting 5+ at some point?. I can add the active support file into the active merchant and require it if the rails version is older. Is this desired?. ",
    "chriswhalen": "Accidental pull request! Sorry!. ",
    "montdidier": "Looks like current check failure is a bundler failure on Travis to me, rather than a problem with the PR.. When merging, I would imagine you'll want to squash.. When merging, I would imagine you'll want to squash.. ",
    "joshRpowell": "Link to Article detailing the end of life/support for MD5 Hash and it's replacement option: \nMD5 Hash End of Life & Signature Key Replacement\nLink to Upgrade Guide\n. ",
    "carlos-serfe": "HI every one,\nI'm having here the same question and to be sure, and because none answer this thread with facts beyond @seebq \nI've checked the source code at the current master and some other tags and at any moment the transaction is validated.\nAlso @seebq please note that in master there's a md5_hash at the parse_direct_response_elements(response, options) but it's unused.\nIn previous tags, the method was named parse and the mechanism employed to get the information was using the same nokogiri gem but in a more direct way. Anyway the transactions it's never confirmed, it justs trusts that the transaction_id will only be provided when a transaction it's completed.\nHope this helps someone and also I wish if someone who had worked on the gem could provide some kind of confirmation here.\nThanks!. ",
    "tarragonparagon": "Any updates on this? From reading the Authorize.net docs, it seems to me that the MD5 hash is only used in verifying the API response, but it seems to be implemented in the Authorize.net CIM Gateway (line 927, 'md5_hash' => direct_response_fields[37]).\ncc: @DavidStoltzfus. ",
    "thilonel": "my bad, wrong base.. ",
    "therufs": "hey @activemerchant/spreedly-connect, \nThe possibility of breaking out AVS messages per card provider has been brought up with product, but we think it's outside the scope of this ticket, so the above is what we're going to go with for now: just populating existing AVS codes/messages where they match. (So, this is ready for actual review!). Remote: 39 tests, 100 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\nUnit: 26 tests, 127 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed. @jknipp Good catch. The concatenation option is covered in test_invalid_xml_response_handling, but I've added a check for the error-only text to test_unsuccessful_request.. \ud83d\udc4d . ",
    "payfirma1": "As per the Pay safe API documentation and our discussion with their representative we know that the merchantRefNum has to be unique each time we communicate with the API. Also we specifically asked that if the merchantRefNum has to be the order id, to which the answer was no. It can be any random string, as long as it is unique each time.\nWe tried the same process via their virtual terminal and it lets us perform multiple partial refunds by giving any random merchantRefNum. We are just hoping that what was told to us is correct.. You think we can proceed with this pull request or is there more you want from our side ?. Hi. Is there something else you would like us to add in order to proceed with this pull request ?. Thank you. What is the next step for us to test this functionality ? When will these changes reflect on the production Shopify site ?. Thank you. Will wait for next piece of communication from your side and will then test this functionality.. Hi. May I please request to get an estimate on the timeline when we can expect this change to get pushed to production ?. The reason for us to make this change is that the PaySafe gateway expects a unique merchantRefNum each time we make a partial refund for an order. In the code the order id was being sent as the merchantRefNum for each refund and this allowed only 1 refund per order (full or partial).\nGiven that the earlier code change affected multiple line, we have now moved the only change we wanted into its own method. We just needed this functionality in the refunds method, not anywhere else. \nA test case won't be required now because this line of change will only affect the refunds method and as per the existing test cases it's not possible to test the refunds without going through the full transaction and settlement cycle from the gateway.\nWith this final commit we hope that we can push this change onto the Shopify platform and it won't have any negative affect on any functionality except refunds.\nAdditionally all existing test cases are being satisfied after this code change and also the automatic build on our branch is passing. . ",
    "prashcr": "Sure, I'll do that soon.\nOn Thu, Feb 21, 2019, 02:18 Jared Knipp notifications@github.com wrote:\n\n@jknipp commented on this pull request.\nIn lib/active_merchant/billing/credit_card_methods.rb\nhttps://github.com/activemerchant/active_merchant/pull/3146#discussion_r258613526\n:\n\n@@ -104,7 +104,7 @@ def valid_start_year?(year)\n       # master:           http://www.mastercard.com/ca/merchant/en/getstarted/Anatomy_MasterCard.html\n       # jcb:              http://www.jcbcard.com/security/info.html\n       # diners_club:      http://www.dinersclub.com/assets/DinersClub_card_ID_features.pdf\n-      # discover:         https://www.discover.com/credit-cards/help-center/glossary.html\n+      # discover:         https://www.discoverglobalnetwork.com/downloads/IPP_VAR_Compliance.pdf\n\n@prashcr https://github.com/prashcr The card number length change looks\ngood, will you rollback the change to the URL?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/activemerchant/active_merchant/pull/3146#pullrequestreview-205921005,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHKn0hYW5t-6TWk5PyxWQKPkPEjDt4A3ks5vPZGSgaJpZM4bCcbd\n.\n. Related question for maintainers:\nIs it worth distinguishing card network vs card brand?\n\nCurrent\nbrand? == discover includes Discover cards, PayPal cards, China UnionPay cards and Elo cards\ndiners_club, jcb are considered as different card brands, even though they're also on the Discover network.\nWe don't handle partnerships/co-branded cards well\nIdeas\nI think there are users like me who primarily care about which network the card is on. E.g. I want to make sure cards on the Discover network are sent to a suitable processor.\nTypically in the case of co-branded cards and partnerships, the cards are designated to be processed on one of the networks in particular (e.g. Diners/Mastercard as Mastercard, China UnionPay/Discover as Discover, Visa/Dankort as Visa etc.)\nhttps://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_(IIN)\nWe could break up the current Discover range into its constituent brands, and provide a separate network? method to check the card network. And then do the same for other known partnerships.. ",
    "bayprogrammer": "@molbrown I noticed the failing tests wrt 'Refused' vs 'CVC Declined', but that you had fixed those in your recent Adyen commit that you rolled back. Should I go ahead and include those fixes in my branch here, or leave them for when your revisions get merged back in?. > Looking good. Don't forget test run output in the commit message.\nOn that, is the \"draft-final\" commit something I should include with my pull request, or wait until all it said and done to prepare? For some reason I was thinking I'd add that as part of the final squash-commit preparation phase post-review, but should I include that up front (and then retain and/or update the commit message when doing the final squashing)?. @curiousepic Yah, didn't do as a draft PR this time. I'll squash and include the proper commit message for future PRs (and will do that shortly for this one). Thanks for the heads up on our process! :). I've properly prepared my commit (squashed, with test run information included). I also tweaked #add_risk_data per my comment earlier.\nThe remote tests that were failing yesterday due to mismatched expectations with the expected failure message string suddenly stopped failing, so I did not change the remote test as I had expected I would.. Updated commit (squashed from initial commit used in draft):\n\nVisaNet Peru: Always include DSC_COD_ACCION\nAlways include the action code description (DSC_COD_ACCION), when\navailable.\nThis also adds a test[1] to ensure the logic[2] is correct for our\nstashing the message in the options hash for retrying a full refund if a\npartial refund fails.\n[1] https://github.com/activemerchant/active_merchant/pull/3174#issue-260959877\n[2] https://github.com/activemerchant/active_merchant/pull/2772#discussion_r174914253\nECS-173\nUnits:\n14 tests, 78 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\nRemotes:\n17 tests, 25 assertions, 15 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n11.7647% passed\n(Please note that most of the remote tests are failing because our test\ncredentials are invalid and we've not been able to get new/valid\ncredentials as of the time of this commit).. > Can we add a remote test and also a unit test for the full message that would be returned if all values are present?\n@jknipp Yep, I'll add those. For the remote test I won't be able to run the test successfully (we don't have valid credentials for VisaNet Peru), but I think I can write something reasonable and perhaps leave a note that we should verify it's correct once credentials are obtained in the future.. Yah, I didn't like mutating the options hash to achieve the necessary result.\nI think I've found a good solution, at least one that has the same desired effect (setting orderSource under certain conditions when stored_credential is being passed, but still ensuring logic falls back to default for CIT used cases, without mutating the options hash directly).\nhttps://github.com/activemerchant/active_merchant/pull/3155/commits/2ccd672242a4743ae39f1c53fbdc6340337bfa51\nPlease let me know if my proposed solution misses something that you were seeing here in my original hack. Thanks!. So the stored credential spec I'm implementing from seems to indicate that even for the initial transaction you need to set processingType to one of initialRecurring, initialInstallment, or initialCOF.\nI'm not sure how we can satisfy that requirement if we don't have the user pass in the reason type even for that initial transaction. (See the spec PDF attached to ECS-138, page 2). Am I missing something there?. Yah, this was one of those soft-blocker questions I alluded to yesterday. What Hash#fetch does is get the value at the given key (first argument to #fetch), and if that key wasn't found raise an exception. My wanting to explicitly not support calling this method without providing the :network_transaction_id is why I used fetch here. (This method only gets called if the user is asking to use existing stored credentials, and if they're doing that they should have a network transaction id).\n(As a side-note, #fetch is also handy if you do want the key to be optional but want to explicitly set the default value to something other than the Hash instance's default when the key isn't provided; I didn't want that here so I didn't pass the second argument to #fetch).\nBUT, I'm not actually sure if we want to raise an exception here or not. From the perspective of the user of AM, should we alert the user immediately if they're not passing the needed data? Also, if we do still want to raise here, what exception would be appropriate to raise? (Something specific to ActiveMerchant?). I'll go ahead and not raise in this case, to better match what we're already doing. I don't want to break with convention/consistency needlessly. Thanks for your feedback, it was very helpful!. Ok, cool. I don't think I'm actually enforcing this in the gateway adapter, so we should still be OK for being permissive (though like with not submitting the network_transaction_id, not submitting the reason_type will likely cause the gateway itself to raise some kind of error). Thanks again!. @jknipp Good call on assignment in a conditional. I like your simplification and will implement that presently. Thank you!. It occurs to me that this method can be further simplified since we're not creating a sub-hash under additionalData. It made sense to exit early and avoid creating an empty sub-hash for riskData, but if we're merging directly into additionalData I'm pretty sure it's not more efficient than simply merging the hash (even if it's empty). I'm going to tweak this a bit and see if I can't simplify and make more clear. Won't take much effort to do.. Would the following be preferable to avoid needless instantiation of a new Hash?\ndef add_risk_data(post, options)\n        if (risk_data = options[:risk_data])\n          risk_data = Hash[risk_data.map { |k, v| [\"riskdata.#{k}\", v] }]\n          post[:additionalData].merge!(risk_data)\n        end\n      end. @curiousepic When you have a moment, would you give me your opinion on this? I don't want to try to micro-optimize here, but when I thought about it more it seemed more logical to just skip all of it at least if the user doesn't pass any risk_data option at all. Since you already approved, I don't want to sneak in a change after-the-fact without running it by you first. Thanks!. Are we setting the idempotency_key again just for readability, or does this actually change options some way relevant to the next set of requests? (Wouldn't idempotency key still be in the options hash?)\nAlso, since @options is being transformed in place above, do we need the local options variable at all (if I'm reading things right, it's just an alias for @options rather than a copy, since we're using merge! vs merge earlier)?. FWIW, I am pretty sure @options will be reset via setup before each test, so I don't think it would impact other tests functionally.. What if we just use merge instead of merge!? That seems consistent with some of the tests in the same file (see test_successful_authorize_with_idempotency_key for example). Then there is no confusion whether options is a copy vs. just an alias for an object that might be mutated inside the method being tested.\nThis does raise the question in my mind, though, whether we want to be mutating the :idempotency_key for the input options hash. Doing so makes the method itself non-idempotent (you can't call the method with the same exact options hash multiple times idempotently because the idempotency_key will be changed in-place on each call).\nI'd prefer it if we could call the purchase method using the exact same options hash instance, without having to reset the idempotency key field between calls, just so it's harder to do the wrong thing from the user perspective.. Ah yes, I saw that. Very elegant solution to the problem!\nI'm wondering if it might not be valuable to extend your solution a bit to make the second call with a copy of the input options hash to avoid mutating it in place? Maybe something like:\n```ruby\ndef purchase(money, payment, options={})\n  # ...\n      r.process { capture(money, r.authorization, capture_options(options)) }\n  # ...\nend\nprivate\ndef capture_options(options)\n  return options.merge(idempotency_key: \"#{options[:idempotency_key]}-cap\") if options[:idempotency_key]\n  options\nend\n```\nThat should have the same effect, but would allow the caller to not have to worry about whether or not the idempotency_key they pass in will be mutated between subsequent calls (should they be using the same hash instance for subsequent calls, as we bumped into with the remote test).. I don't think the joining was working in the first place: because the cancelDeposit case comes first, the original elsif action == 'refund' condition would not have been true such that the stashed message would have been returned to the user (it may have been stashed, but we would never have used it when the action was refund). This is what prompted my initial draft PR with the additional test to verify what the intended behavior was (properly distinguishing between a refund and cancelDeposit and how that affected the message construction.\nIf that is correct, my thinking was that the risk of end users relying on parsing the field is minimal, and the advantage of the pipe over the comma moving forward is that if sometimes the messages we're joining have punctuation already, I wanted to avoid something like \"Error message., Error code explanation\". I don't know whether that's a real concern, just noticed the punctuation in some of the canned responses.\nSince there was only this one (probably not working) case where we were doing the joining of any kind, I don't think there is an order to preserve for the expanded case. In the specific case where we were joining only if the first cancelDeposit refund attempt failed, this does change the order. ~~However, if people are parsing this string, then previously they would be getting the response['errorMessage'] in practice, so putting that first seemed logical (even though it changes our original intended ordering in the special case).~~\nEdit: I made a mistake there, when the errorMessage was empty then the DSC_COD_ACCTION would have been used instead for the broad case; still the two would only have been joined as I previously described.\nI'm not opposed to changing any of this though, just laying out my thought process so far.. ",
    "mdeloupy": "The remote tests fail for me locally, but they also fail on master : \nFailure: test_successful_authorize_and_capture(RemoteMoneiTest):\n  Response expected to succeed: <#<ActiveMerchant::Billing::Response:0x00007fcb2538a7a0\n   @authorization=\"8ac7a4a16970b8a80169733d69600f16\",\n   @avs_result=\n    {\"code\"=>nil, \"message\"=>nil, \"street_match\"=>nil, \"postal_match\"=>nil},\n   @cvv_result={\"code\"=>nil, \"message\"=>nil},\n   @emv_authorization=nil,\n   @error_code=\"card_declined\",\n   @fraud_review=nil,\n   @message=\n    \"Invalid payment data for Recurring transaction. Merchant or transaction data has wrong recurring configuration.\",\n   @params=\n    {\"unique_id\"=>\"8ac7a4a16970b8a80169733d69600f16\",\n     \"status\"=>:rejected_validation,\n     \"reason\"=>nil,\n     \"message\"=>\n      \"Invalid payment data for Recurring transaction. Merchant or transaction data has wrong recurring configuration.\"},\n   @success=false,\n   @test=true>>\n========================================================================================================. Closing since the API documentation for Monei is not for the same version as the AM integration.. Fixed :-). ",
    "PhilibertDugas": "@pi3r @filipebarcos . > Do I understand correctly in that passing in \"Login\" as the landing_page wouldn't solve the problem?\nThat's right. When the landing_page parameter is not set at all, PayPal will decide between Login and Billing based on the browser's information. From what I got, they tweak this algorithm to optimize the buyer's journey.\nSnapshot of the conversation I had:\n\nPhilibert Dugas [12:15 PM]\n\nremove  landing_page= all together and let the PayPal cookie or Non-Cookied user allow PayPal to decide to show either Login or Billing Page\n\nHow is that done? Removing the param would trigger a fallback mechanism based on the cookies?\nPayPal [12:18 PM]\nYes. If the user has a PayPal cookie on their device we would display the login page. If the user doesn\u2019t have a cookie we would show the billing screen expanded, but also have an option for a existing PayPal user to login in case they removed their cookies. Make senSe?\nThere is a lot of logic/experiments our teams do to show what page and when. But the above is what it would look like with or without a cookie\nAnd if they were using PayPal OneTouch it just auto logs them in.. sure, maybe I can pass paypal_chooses_landing_page too and that would result in\n\nruby\nxml.tag! 'n2:LandingPage', options[:landing_page] || 'Billing' unless options[:paypal_chooses_landing_page . ",
    "maxsilver": "That is very true:\nI only left it in to stay consistant with smart_ps.rb, which does the same thing\nruby\n      # smart_ps.rb - line 155\n      def add_processor(post, options)\n        post[:processor] = options[:processor] unless options[:processor].nil?\n      end\n. ",
    "mattly": "The original problem here (and what ultimately led to us abandoning ActiveMerchant in favor of the Braintree API) was that the braintree wrapper would send the braintree -account- token to bill to rather than the -credit card- token. It's not actually a credit card reference in that case. \nIt's been nearly six months since we submitted this patch and honestly I can't remember most of the details of the problem we were encountering. I do know that this was preventing us from using AM for our application.\n. ",
    "reinh": "@dasch Yes, it's a poor name. Unfortunately, the parameter itself is ambiguous, so we are forced to use an ambiguous name. Fixing the parameter semantics was IMO out of scope of what we were trying to accomplish.\n. If someone wants to improve the variable name, we accept patch patches.\n. ",
    "calebperkins": "PayPal Express works the same way though:\nYou first send a setup_purchase with a return_url and amount to charge.\nAfter you are redirected back to your site, you do a purchase with the token that was returned in the URL.\nConceptually, the only difference between the PayPal Express workflow and this one is, instead of being redirected to PayPal to securely enter your information, you are given a URL for a form action to embed directly on your site. \n\nCaleb Perkins\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Thursday, August 18, 2011 at 9:31 AM, jduff wrote:\n\n\n\nassert_success response\nassert_equal \"Step 1 completed\", response.message\nassert @gateway.form_url_for(response).present?\n  +\n\nStep 2: send credit card number, etc to remote form\n\nendpoint = URI.parse(@gateway.form_url_for(response))\nz = Net::HTTP.start(endpoint.host, endpoint.port, :use_ssl => true) do |http|\nreq = Net::HTTP::Post.new(endpoint.path)\nreq.set_form_data(@step_two_form_data)\nhttp.request(req)\nend\n  +\n\nStep 3: use token to make purchase\n\ntoken = CGI.parse(URI.parse(z[\"Location\"]).query)[\"token-id\"][0]\nassert token.present?, z[\"Location\"]\nassert response = @gateway.purchase(token)\n\n\nTo make a purchase all you should be calling is purchase, you shouldn't be required to call a bunch of setup methods before calling purchase. ActiveMerchant provides a unified interface for working with the different gateways, users of the library expect that all they need to call to create a purchase transaction with the gateway is the purchase method, not a number of setup methods before the purchase.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/172/files#r95820\n. Yes, similar to the way PayPal express works, the customer sends their information directly to the gateway, and the gateway uses the return URL to send the customer back to your site. In PayPal Express's case,you enter your information on PayPal's site. In NMI's case, you put your information in a remote form on your own site.\n. I understand. The advantage of this gateway compared to the Authorize.net implementation is that you do not need PCI compliance, and 3-D Secure logic, if applicable, is handled for you when you submit the remote form (but to be honest, I'm not sure how 3-D Secure works with the Authorize.net implementation).\n\n\nCaleb Perkins\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Thursday, August 18, 2011 at 11:44 AM, jduff wrote:\n\n\n\nassert_success response\nassert_equal \"Step 1 completed\", response.message\nassert @gateway.form_url_for(response).present?\n  +\n\nStep 2: send credit card number, etc to remote form\n\nendpoint = URI.parse(@gateway.form_url_for(response))\nz = Net::HTTP.start(endpoint.host, endpoint.port, :use_ssl => true) do |http|\nreq = Net::HTTP::Post.new(endpoint.path)\nreq.set_form_data(@step_two_form_data)\nhttp.request(req)\nend\n  +\n\nStep 3: use token to make purchase\n\ntoken = CGI.parse(URI.parse(z[\"Location\"]).query)[\"token-id\"][0]\nassert token.present?, z[\"Location\"]\nassert response = @gateway.purchase(token)\n\n\nPayPal Express is an exceptional case with the direct gateways, and something we would like to avoid patterning other gateways off of, if possible.\nWhat advantages does the 3 step redirect gateway provide over the current Authorize.net (http://Authorize.net) implementation that is already in ActiveMerchant? Does it provide any additional features?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Shopify/active_merchant/pull/172/files#r96026\n. \n",
    "ksnyder": "I don't remember this needing to be nil? -- I would use blank?  Same for below.\n. ",
    "ivanvanderbyl": "It is only used in external libraries and very specific to FatZebra. It constructs a hash which can be sent for customer data.\n. I don't mind what we use, so long as it returns true or false as expected. In the original instance it returned false or a hash.\n. ",
    "necrodome": "This is the method definition of the running branch:\nruby\ndef transliterate(string)\n  string.mb_chars.normalize(:kd). # Decompose accented characters\n        gsub(/[^\\x00-\\x7F]+/, '')     # Remove anything non-ASCII entirely (e.g. diacritics).\nend\nThe problem is $KCODE is set to \"NONE\", and in that case mb_chars returns a Ruby String instead of ActiveSupport::Multibyte::Chars, which doesn't have a normalize method. The proposed solution was to set $KCODe = 'u' as in https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/gateways/garanti.rb#L1 (While not a fan of modifying a global variable, I guess it is an acceptable solution)\n. ",
    "keikubo": "WebPay may support other fractional currencies like USD and EUR in future.\nSo I think overriding localized_amount is better than overriding mount.\n. ",
    "f3ndot": "There are a few cases where Stripe has requested some users of their API\nsend an ip along with a purchase call. So it's important that active\nmerchant can pass it along (it is a valid Stripe param, after all).\nI kept browser_ip on the right hand side so it doesn't introduce a breaking\nchange to what's expected to be sent in options.\nSent from mobile.\nOn 2013-10-08 1:15 PM, \"Denis Odorcic\" notifications@github.com wrote:\n\nIn lib/active_merchant/billing/gateways/stripe.rb:\n\npost.update(options.slice(*metadata_options))\n-        post[:ip] = options[:browser_ip]\n\nIf browser_ip doesn't work and never worked anyway, should the reference\njust be removed completely?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/871/files#r6832184\n.\n. Yeah. Me too. I'm just assuming they changed it after looking at that\ncommit comment / summary that I mentioned in the PR description.\n\nSent from mobile.\nOn 2013-10-08 1:26 PM, \"Nathaniel Talbott\" notifications@github.com wrote:\n\nIn lib/active_merchant/billing/gateways/stripe.rb:\n\npost.update(options.slice(*metadata_options))\n-        post[:ip] = options[:browser_ip]\n\nI'm confused then, since I thought :ip was the standard ActiveMerchant\noption for passing the ip [image: :confused:]. I've never seen :browser_ipbefore.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Shopify/active_merchant/pull/871/files#r6832506\n.\n. \n",
    "peterhuene": "Shouldn't the cvc be sent even if the track data is present?  It's not part of the track data (we're talking CVC2 here), and I would expect Stripe to take it in addition to the track data for verification purposes.\n. ",
    "boffbowsh": "The trailing () isn't required on method calls, and generally isn't used in Ruby, and certainly not in the AM codebase\n. You're specifying that DEBUG is false at the top of the file, so this will never be true. This code will be packaged into the gem, and will only be changed by people who are needing to do a bunch of debugging themselves.\n. ruby\ndef void(action, transID)\n  post = {:transID => transID}\n  commit(action, post)\nend\n. Is the response URL-encoded? You may need to unescape the values\n. ",
    "deepak": "the posted data format and api url has changed now\nusing a helper class in my tests\n``` ruby\ndepends on version 1.1 of api\nin production we would use javascript to generate this token\nand then submit the token to the server\nfor ease of unit-testing this ruby class\ngenerating this token via ruby on the server\nclass GenerateTokenHelper\n  API_URI = URI.parse(\"https://www.beanstream.com/scripts/tokenization/tokens\")\n# send a \"new token\" request using the credit card as per the docs\n  # which returns an approved message\n  def generate_test_token_for_approval\n    http = Net::HTTP.new(API_URI.host, API_URI.port)\n    http.use_ssl = true\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\nvisa_credit_card = \"4030000010001234\"\n\nrequest = Net::HTTP::Post.new(API_URI.path)\nrequest.content_type = \"application/json\"\nrequest.body = {\n  \"number\" => visa_credit_card,\n  \"expiry_month\" => \"10\",\n  \"expiry_year\" => (Time.now.year + 5) % 100,\n  \"cvd\" => \"123\"\n  }.to_json\n\nraw_response = http.request(request)\nresponse = JSON.parse(raw_response.body)\n\nif response[\"code\"] == 1\n  response[\"token\"]\nelse\n  nil\nend\n\nend\nend\n```\n. ",
    "RickWong": "@wvanbergen @maartenvg @odorcicd  Is it possible to use order as the description here, instead of options[:account_name]? That description is displayed at the iDEAL bank in the actual payment process & also on the bank statement afterwards. Normally it would be best to at least include the order number in the description.\nCongratulations with the deployment, and thank you for all the hard work so far. If there're any questions, please let me know!\n. ",
    "kanishkdudeja": "Fixed.\n. Fixed!\n. I'm not able to see the unnecessary spaces around the parameters in any editor. Have tried nano, vim and gedit. Could you please point me to an editor through which i would be able to see the unnecessary spaces.\n. Indentation has been fixed. In the code, credential3 is the secret key. credential2 is for the mid(merchant identifier) and credential4 is for the merchant name. we need both the merchant name and the merchant identifier to process the payment. \n. Could you point me to a sample where i can see the implementation of self.service_url. Actually we needed another parameter :credential5 for setting the mode(test or live). Depending upon the value of credential5(test or live), i wanted to set the corresponding url. After seeing samples from other gateways, we implemented it the same way. I hope the switching between live and testing functionality would be managed my Shopify itself? Or will we need to manage it from the code?\n. Fixed.\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Shouldn't those spaces be there? Since they constitute the body of the function.\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. Fixed!\n. I am not sure. Acknowledge only checks the checksum and returns true or false depending if the checksum matched or not. The status function i have called above inside the success function can return 'Tampered', 'Successful' or 'Failed' depending upon whether the checksum matched or not. If the checksum matched, it would then return 'Failed' or 'Successful' depending upon the response code received from Mobikwik.\n. Fixed! Sorry i thought you meant the two spaces before \"checksum_fields = \"'\" + @fields[\"cell\"]...\". \n. ",
    "bhserna": "They are too similar but not identical, the the test url is \"pagofacil.net/st....\" and the live url is \"pagofacil.net/ws...\"\nThanks for the code review :smiley: \n. ",
    "transcript": "Wtf is this?\n\u2014\nSent from Mailbox\nOn Thu, Dec 11, 2014 at 6:28 PM, Izaak (John) Alpert\nnotifications@github.com wrote:\n\n\n@@ -273,7 +272,7 @@ def dump_transcript_and_fail(gateway, amount, credit_card, params)\n       gateway.purchase(amount, credit_card, params)\n     end\n-    File.open(\"transcript.log\", \"w\") { |f| f.write(gateway.transcript) }\n-    File.open(\"transcript.log\", \"w\") { |f| f.write(transcript) }\n  same f.write(@transcript) ?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Shopify/active_merchant/pull/1488/files#r21725720\n. \n\n",
    "ka8725": "I don't know, I just followed this example.\n. @timbeiko I made changes for this request.\nLook there the description for messages and message param: https://db.tt/qBsHeLWu\nIt says \"one or more elements\".\nFurther there is a Ruby code example there from official library. As you see they rely on the same construction to get the error code.\n. ",
    "joseluistorres": "@jasonwebster I agree sorry I totally forgot about this PR . ",
    "yaychris": "Apologies for not being more detailed in the issue.\nTo my knowledge, that behavior is not buggy. However, it only works if you performed the auth using Active Merchant. I'm using Chase's Hosted Pay Form, which performs the auth in an iframe and provides the authorization token. I send the token to the server and capture there, using Active Merchant.\nThis can be resolved by combining the token and order ID into a string, like Active Merchant does. That's non obvious, though. Given:\n\nChase requires both the authorization token and the order ID to be certified for production;\nThere are two common ways to perform an auth outside of Active Merchant (Hosted Pay Form and Hosted Pay Page);\nCombining into a string breaks encapsulation by requiring my app to know about Active Merchant's internals (authorization_string, which does the combining, is a private method); and\nThis change preserves existing behavior\n\nIt seems reasonable to make this a first-class parameter, rather than tacking it on to the authorization.. ",
    "sunblaze": "These two changes are messing up the indentation \ud83d\udc4e . ",
    "nima-namjouy": "\ud83d\udc4d .. we could potentially support QR code based emv processing in the future. For normal contact EMV transactions, does read_method get set in the post?. does read_method get set for standard magstripe and fallback transactions?. is authorization a transaction type that's supported for emv contactless?  does it get captured automatically?. Is there any need to set the read_method for contact transaction tests?\n  . @ryanbalsdon could you clarify why quick_chip processing method has to be set here (instead of here).  Perhaps a comment might be necessary to prevent someone from accidentally moving this.\n  . ",
    "robinbrandt": "I think we should make sure that device responds to frozen? . \ud83d\udc4d . ",
    "damianthe": "Looks good. I wonder if we have any other downstream dependencies on the 'Y' value other than risk_analysis. Definitely worth a look. ",
    "infiton": "should this be street_match.blank? || postal_match.blank?. ",
    "kheang": "@deedeelavinder I'm happy to change this.  I used \"otb\" to signal that Realex's request type is \"otb\", but if that causes confusion, I can swap with \"verify\".  Thoughts?. I see now how refund/rebate is handled, consistent with your suggestion. I'll revise!. @deedeelavinder Revised per your comments.  Thanks!. ",
    "AnnaGyergyai": "I think yes, there's already some logic for cavv and eci, but it's pulled from payment for tokenized cards: https://github.com/activemerchant/active_merchant/blob/8535adc31d6e4285924b8418b61699aee1424fe7/lib/active_merchant/billing/gateways/realex.rb#L279. "
}