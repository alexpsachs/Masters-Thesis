{
    "GQHD168": "I'm sorry about that. I just start learning. Sorry.\n\u53d1\u81ea\u6211\u7684 Windows Phone\n\n\u53d1\u4ef6\u4eba: Tony DiColamailto:notifications@github.com\n\u53d1\u9001\u65f6\u95f4: \u200e2015/\u200e5/\u200e2 17:12\n\u6536\u4ef6\u4eba: ms-iot/samplesmailto:samples@noreply.github.com\n\u4e3b\u9898: [samples] Python libraries wingpio, winspi, wini2c not yet published? (#1)\nSorry if this is the wrong spot to raise an issue like this, but I'm hoping it can make it to the right folks.  I'm checking out the Python IoT preview samples (PythonBlinky, PythonBlinkyServer) but I can't seem to find the source for the wingpio, winspi, and wini2c libraries that provide Python access to GPIO, SPi, I2C, etc.  The readme.txt for the PTVS IoT preview mentions a repository that should be here:\nTo use GPIO, I2C or SPI from python project:\n=============================================\nOption 1 - Use source projects for extensions (useful in case you are building same app for multiple platforms)\n=============================================\n1. Enlist in http://github.com/ms-iot/python\n2. Pull down entire project\n3. Add projects (e.g. wingpio, winspi or wini2c) to your python solution\n...\nHowever it looks like http://github.com/ms-iot/python doesn't exist or is a private repo right now.  If possible it would be great to make this available for folks to check out.\nIf the source isn't ready to be published yet, are there any docs that describe how to use those python libraries or their interface?\nI'm curious to check them out because I create and maintain python modules for Adafruit that abstract away access to GPIO, I2C, SPI, etc. across multiple platforms and am curious about adding support for the new Windows IoT core system.  The library (here) hides platform-specific hardware access behind a standard interface that other modules can code against and then easily run on various platforms (like the Raspberry Pi and Beaglebone Black).  If I can add support for the Windows IoT core python libraries then a lot of fun hardware could easily work on win IoT, like TFT and OLED displays, LED matrices, temperature sensors, touch sensors, NFC readers and more.\nLet me know if it's possible to share the Python windevices library code or at least interfaces.  Thanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ms-iot/samples/issues/1\n. Hi\uff0ci'm using gpio of rpi2\uff0cbut i can't find the interface of gpio in vs 2015rc, no matter I use c++ or c#.  What's the problem?\n\u53d1\u81ea\u6211\u7684 Windows Phone\n\n\u53d1\u4ef6\u4eba: Bruce LANEmailto:notifications@github.com\n\u53d1\u9001\u65f6\u95f4: \u200e2015/\u200e5/\u200e2 23:46\n\u6536\u4ef6\u4eba: ms-iot/samplesmailto:samples@noreply.github.com\n\u4e3b\u9898: [samples] Cinder or openFrameworks sample? (#2)\nhello,\nIt would be great to have a sample for this frameworks.\nThank you\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ms-iot/samples/issues/2\n. ",
    "alecont": "this is the right place! thx for reporting this, tdicola. We messed up a little our links, and we're correcting this now.\nAlso, we'd love to collaborate to get your libs to support Win10 IoT Core! And get your input on our versions of the libs.\n. Yep! I love Cinder and OF from my days in VC++ :-) MS OpenTech worked a bunch on Cinder and OF for ports to Windows Store (which will be beneficial for the UWP angle).\nOne of the main issues I can see is that we don't have yet a performant DirectX stack on the Rpi2. But it's there (already) on the MBM.\nI'm checking with some of the folks that worked on Cinder and OF, and I'll report back.\n@brucelane: what projects/samples do you have in mind?\n. uhm... kind of messy this PR. let me close it.\n. looks good\n. looks good (sorry, mistakenly close the PR before\n. looks good! thx Rachit.\n. looks good! thx Jesse\n. yep, looks good.\n. looks good!\n. couple of minor comments.\n. great thx!\n. I also added a small fix for blockly...\n. looks good. merging\n. there are conflicts...\n. what happened to gpiotesttool? removed from samples?\n. looks good. merging\n. Hi Dave, sorry for the delay. I added some comments. can you review?\n. looks good. merging.\n. looks good to me. Checking with Rachit as well, then we will merge.\n. thanks for the feedback! We'll look into this in the next couple of days. We made a couple of changes to the source code here on github which are not reflected yet on the appx deployed by IoT Dashboard.\n. looks good. merged.. Should be \"This sample\" and not \"This samples\"\n. You can remove the trailing \":\" from the subsection titles :-)\n. How does \"localhost\" works? are you sure it works if the projects is deployed not from VS? Usually VS enables localhost loopback...but is someone deploys the project via WebB, will this still work?\n. why don't we use the absolute path here? if the file is in a subfolder in the storage file location, this code will pick up the wrong file...\n. looks good, but I have one question: I thought there was a regression somehow and reading files from a web location was broken... but from the PR it looks it never worked... is that correct?\n. chatted with Slavi, it never worked. works now :-)\n. why all these comments? are they useful? or should we just clean them up?\n. This is still \"HidInjectorKd\" with \"Kd\", is that ok?\n. ah my bad... left in this test code... i'll clean up. pauseHelper is defined in the .js/.html files themselves\n. same as above. pauseHelper is injected into the code that comes across from index.html, so we're ok here\n. Dave, why change the target platform?\n. Uhm... I guess it's ok to remove this as we don't use the continuations... but why remove this? did they create problems?\n. typo\n. if we decide to remove the taskQueue, let's just remove these and not just comment out. I wonder if this queue gets populated ever. Can you check?\n. I like the new ScriptProcessor(). Few comments:\n- minor: let's use the same \"scriptProcessor()\" naming convention to be consistent\n- where do we call init()? I don't see a call to init() anymore...\n. same as above\n. Let's add a REVIEW comment to improve this and that is ok to comment this out\n. good change. no need to add your alias to the code. Git history will keep that info\n. let's just remove these; no need to keep the comments\n. I like this :-)\n. is there a case when dataRead != BufferSize but dataRead > 0? are we leaving some bytes on the ground?\n. nothing changed here right? just spaces/tabs?\n. same comment as above\n. any news on this? :-)\n. checked with Dave offline, we're good here\n. ",
    "munyirik": "Hi @tdicola, you may know this already but just in case, http://github.com/ms-iot/python is public now. And the code for wingpio, winspi, and wini2c is shared there.\n. cc. @alanch-ms for the Python sample\n. Really cool. Are you also adding pages and links from windowsondevices.com?\n. \ud83d\udc4d \n. cc @stephenhuang \n. typo: \"cannot\"\n. nit: just a styling preference to maybe do it this way\nvar buttonPinResult = ...\nif((!buttonPinResult.succeeded)...\nvar letPinResult  = ...\nif (!ledPinResult.succeeded) ...\n. typo?\n. nit: log led value too?\n. typo: press\n. do you need to check if recording is in progress or is it ok to stop recording anytime?\n. I think storageFile will be null if createFileAsync fails so check for that.\n. same for other places where createFileAsync is used.\n. ",
    "ooeygui": "We would love to have some help on this. \n. Wrong bug\n. This one was correctly closed; per conversation with @zhuridartem \n. There was a collision on this change and can no longer be merged. Would you mind merging upstream changes?\n. Hello, Thank you for the report. On the desktop, the Windows Shell provides dialog boxes and other user interface overlays. Windows 10 Core does not have a shell component, so the Maker's application needs to provide all user experience elements. \n. OpenZWave was ported. The sources are available at the AllSeen git: https://git.allseenalliance.org/cgit/dsb.git.\nWe are using the DSB to wrap devices that are exposed by non-AllJoyn networks as virtual AllJoyn devices.  For 6LoWPAN the end-points are typically IPv6 addresses which is more of a transport than a virtualizable device.  One option would be to translate your 6LoWPAN ipv6 address into an ipv4 one and just use a standard AllJoyn producer rather than our DSB to create a bus attachment (device) and expose the signals, methods, and properties you want.  AllJoyn will not support ipv6 until later this year.\n. The source files are available in the AllSeen git -  https://git.allseenalliance.org/cgit/dsb.git. We will update the samples to make it more clear.\nHope that helps,\nLou\n. Closing per conversation with @zhuridartem \n. We now have a hardware compatibility list\nhttp://ms-iot.github.io/content/en-US/win10/SupportedInterfaces.htm\n. Hi @elmerm,\nWe do not have drivers planned for the pi camera interface. We will however be supporting USB camera in a coming release. With a USB camera, you will be able to use the UWP Camera APIs to consume camera information. With that release, we will also have camera samples. I do not have an ETA for that release.\n. Hi @elmerm,\nI will follow up and see what can be done.\n. These were remove in pull 50\n. Hold off on pulling this.\n. Many app developers come from a C# background. Could you add a C# version?\n. @zhuridartem is working on a solution for this.\n. Closing the issue here while we fix the issue in Alljoyn Explorer.\nThanks for reporting!\n. This has been captured in the sample. Thanks for reporting!\n. @bfjelds Do you want to take a peek at this?\n. +1\n. :+1: \n. We've captured this feedback internally and are working to improve the native experience. \nThank you for the feedback. . Hi there @KaraOttewell; Could you also fill out the microsoft cla (even for internal)?\n. :+1: \n@bfjelds Can you signoff on this with a +1?\n. Wow! Thanks for the report and closing the loop. \n. Thank you for the request. The Web interface cannot be open sourced at this time. \n. Please check with the latest release of Windows 10 IoT Core - it was released after this thread.\n. Based on the last comment, this sounds like it works now.\n. Hi there,\nThank you for your contribution. You need to rebase your repository and reissue pull request as there is a conflict.\nThanks\n. The original file was tabs, I was configured for spaces. Fixed.\n. @alecont Can you take a peek at this?\nme? \ud83d\udc4d . Hi @djaus2 \nOur documentation is currently set up to be localized in ms-iot/content. For example, the documentation for HidInjector project which is on the ms-iot/Samples site is actually in content https://github.com/ms-iot/content/blob/develop/en-US/Samples/HidInjector.md.\nTo add a sample: \n\nAdd fork the samples repo and content repo.\nAdd your code to samples, and documentation to content.\nSubmit a PR for Samples\nOnce committed, submit the documentation to content.\n\nWe have a script which munges the whole thing for publish, so it will take time to be public.\nhope that helps.\nLou. This project might help you out:\nhttps://www.hackster.io/windows-iot/windows-10-iot-core-for-adafruit-spi-touchscreen-bb3795\nIt isn't exactly for your screen, but give you most of what you need to get going.\nHope this helps!. Oh... Good catch.\n@alecont ?. Merges from develop to master are made by the internal engineering team. We cannot accept this change.\nIf you had intended something else, could you provide a description?. MS?\n. MS?\n. I'll add a note. These are how you'd send these messages, but doing them all together they really make no sense.\n. I renamed it. This is the removed one.\n. Thanks for finding this.\n. Good catch. Thanks!. ",
    "brucelane": "It seems ANGLE project is a good base to build upon...\n. @alecont : Andrew Bell from the Cinder team is working on the glNext branch which can use ANGLE but needs more time to add the ARM branch of it... \nI'm a visual artist building my own VJ software, and I would like to use Cinder on the RPI2 on W10 to use it as a MIDI (or other devices) network router so send WebSocket messages.\nIt would imply maybe a node.js server (which is working fine right now)\nAlso a openGL fragment shader browser and/or editor for live-coding.\nMy goal is to create a remote UI for my software.\n. ",
    "olivierbloch": "Hi @GQHD168 \nChances are this is due to the fact that the original commit was referencing an older version of the SDK. I just merged a pull request that solves this issue.\nLet me know if that works for you.\n. ",
    "bfjelds": "Thanks for the fix!  Royal or not, we should definitely get the name correct!\n. Thanks for finding that!  We have updated all of our license.txt files to reflect the MIT license that is called out in the source code.\n. We were aiming for simplicity in our initial sample, but this is a great idea.  For clarity sake, can you separate the v6 and v4 (create an \"IPv4 address\" label and an \"IPv6 address\" label).  Thanks for helping improve this sample!!\n. Thanks for pointing out the v6 omission ... we really appreciate the feedback!\n. Agreed.  We have updated the sample to clarify this.  Thanks!\n. It shouldn't be necessary add the AppServiceConnection details.  There is a bigger issue we need to find here.  To get to the bottom of this, I created this issue:  https://github.com/ms-iot/samples/issues/25\nThanks again for bringing this to our attention!!!\n. Thank you for submitting the fix!\n. I'm sorry that the samples aren't working for you!  To help us track down the problem and fix it, can you please specify which sample you are seeing this error for?\n. We are still working on implementing the graphics driver for the Raspberry Pi.  This results in many GPU operations being handled by software.  You are seeing the results of that first hand.  Be assured that we are well aware of this and working to fix it!\n. Thank you!  That is awesome!!!\nWe can work at pulling your project into our samples if you'd like, or if you want to better understand how to do it yourself (the benefit there is that you would get the credit for your contribution!!):  http://ms-iot.github.io/content/en-US/Contribute.htm\nLet me know and I will either start migrating your project to our repo or start watching for your pull request...\n(Another idea would be to put your project on hackster.io ... something like https://www.hackster.io/4360/i2c-accelerometer)\n. I haven't done any tilt compensating, but I found this on stackoverflow.com:  http://stackoverflow.com/questions/24639529/tilted-magnetometer-output-pitch-and-roll-tilt-compensation-i-am-lost\nHope that helps!\n. Our strategy has been to create in depth descriptions on our documentation site (look under the Samples tab):\nhttp://ms-iot.github.io/content/en-US/win10/StartCoding.htm\nPlease take a look!\n. That makes a lot of sense!  We'll look into getting the link into our MD files.\n. Please contact @bfjelds to discuss.\n. Thanks for the feedback!  We'll talk to the Visual Studio team and look into fixing this correctly.\n. https://github.com/ms-iot/samples/pull/50\n. please add license.txt to folder and copyright banner to source code (see other samples)\n. please add a sln file\n. Thank you for raising this issue!  We will look into a fix for this.\n. Servicing is a scenario that we are thinking a lot about currently.  It is definitely on our radar.  I don't have an answer for you right now, but will work at getting an answer for you ASAP.\n. Thank you for the feedback!  \nWhen an app is specified as a startup app (it has been configured to be a foreground app that is always running and visible), the platform is ensuring that this app is always running.  You can see how to configure the Startup App in the 'Set HelloWorld as the Startup App' section of here.\nWe are working to bring more system management APIs into our platform and appreciate the suggestions for health query, servicing (update), etc.\n. Regarding the CPU usage, we are still working on implementing the graphics driver for the Raspberry Pi. This results in many GPU operations being handled by software. You are seeing the results of that first hand. Be assured that we are well aware of this and working to fix it!\n. We created a simple C++ service based on the C++ Console Application template that can be used to create a service for IoT Core:\nhttps://github.com/ms-iot/samples/pull/119\nHope this helps!!\n. Only C++ is supported for console applications and services currently.\n. Outside of WinRT, we don't have plans to support managed code on IoT Core.\nFor the service sample, it is not managed C++.\n. remove project.lock.json file ... project.json should be included\n. Thank you for creating a fix for this!\n. Thanks!  This is an awesome update ... we are going to run through some testing before merging.\n. Agreed.  We use this code as the actual default app on our device, so we need to rope in a couple people (designers, etc) before merging this.  The only issues I've seen with the changes are on the OOBEWelcome screen (where the Cancel and Next buttons show up on top of eachother).  Otherwise, your changes really highlight what your second comment.  We should be able to move forward with this on Monday ... thanks again for helping improve this sample!!\n. Thanks for fixing up the cancel/next button.  I have our designer folks taking a look today.\n. Thank you for finding this and bringing it to our attention!  We'll work on fixing this ASAP.\n. Thank you for sorting this out!  We will work to update our samples accordingly.\n. This has been addressed with https://github.com/ms-iot/samples/pull/98\n. Thank you!  This has been addressed with https://github.com/ms-iot/samples/pull/98\n. This locale change issue is a problem with the OS currently that we are working to fix.\n. Thanks for the feedback!  To be honest, when we put the Console application sample together, I don't think we gave a tremendous amount of thought as to the destination directory (especially given that it is completely configurable).  We will look into what the most appropriate location is for user scenarios (it might be more practical to aim at windows\\system32?) and where we can access (given that MSVSMON is typically running as DefaultAccount, it may not be feasible to point at certain directories).\nThe reason that the Console Application requires more work than the UWP apps do is mainly an issue of prioritization.  The first priority was (and continues to be) getting UWP apps that can be developed and run across all Microsoft platforms.  As we progress, IoT will continue to work with Visual Studio to make our customers' priorities smoother and simpler!  Towards that goal, we will certainly think about how we can make developing the C++ Console Application a better experience.\n. That's great insight and I've added all of that to our bug tracking this!\n. This change will only build and run with our next release.  Hold off on merging this until we release new bits.\n. This change will only build and run with our next release. Hold off on merging this until we release new bits.\n. The WebView does not support displaying PDF files.  Here is a summary of WebView info:  http://blogs.msdn.com/b/wsdevsol/archive/2014/04/03/ten-things-you-need-to-know-about-webview-2d00-an-update-for-windows-8.1.aspx.\nThere is a small mention of Windows.Data.Pdf which may work (I don't believe that anyone has tried that API yet on IoT Core).\n. have corresponding changes been added to ms-iot/content?\n. Thanks for finding this issue!  We will look into a fix for this ASAP.\n. hold off on merging until TH2 bits available\n. wait to merge this for RTM\n. Looks good ... will only work with new bits.  Wait for next release to merge.\n. CR passed w/ 2 +1s\n. waiting on team CR\n. Thanks for the feedback!  We will correct this ASAP.\n. Pull Request to fix this: https://github.com/ms-iot/content/pull/747\n. If this is implemented like other async stream reads, the hasdata=false code will only be executed when the stream is closed.  Otherwise, the LoadAsync will only be triggered when there is data to read.  \nYou may need to interpret the data after each LoadAsync call is triggered and determine in your code if what you've loaded is complete.\n. What I meant was that after each call to LoadAsync returns, check to see if the data that has been received is \"complete\".  If it is, do not call LoadAsync again.  If it is not, then call LoadAsync again.\n. replace the pfx file here with one copied and renamed from another sample (they are all tied to MSFT as a publisher and have the same expiration date)\n. Curious.  I'm not sure why you are seeing errors without that reference.  We don't require that reference when we build the templates.  Out of curiosity, why are you building the templates?  If you aren't making any changes to them, you can download them from VS Gallery here:  https://visualstudiogallery.msdn.microsoft.com/55b357e1-a533-43ad-82a5-a88ac4b01dec\n. Thank you for clarifying.  The templates have been updated with each release of Visual Studio.\nI just installed the templates from VS Gallery, created a new C# Background Application template, successfully built the project, and looked at the project.json:\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.UniversalWindowsPlatform\": \"5.0.0\"\n  },\n  \"frameworks\": {\n    \"uap10.0\": {}\n  },\n  \"runtimes\": {\n    \"win10-arm\": {},\n    \"win10-arm-aot\": {},\n    \"win10-x86\": {},\n    \"win10-x86-aot\": {},\n    \"win10-x64\": {},\n    \"win10-x64-aot\": {}\n  }\n}\nThe dependencies should get filled in by Visual Studio when you create the template by one of the TemplateWizards in the vstemplate.  When you open a new C# Blank App (Universal Windows) project, does the project.json contain the UWP dependency?\n. The dependency gets added to project.json when a template is instantiated (into a project).  The C# Blank App template's project.json doesn't hard code the NetCore dependency either.  This allows VS to use a more recent NetCore dependency without having to change/reinstall the actual template.\nThat said, none of that answers the question of why you aren't seeing the dependency in your projects which is very strange.  Stranger still that the other templates are successfully adding the dependency.\nI will reach out to the VIsual Studio team and see if they have any suggestions (though their usual answer, and typically the most effective, is to reinstall VS ... yuck!).\n. Closing this PR as it should not be needed.  Will continue this thread in this issue: https://github.com/ms-iot/samples/issues/199.\n. The dependency should be added (as it is for the other C#/VB UWP projects) when the template is instantiated.  \nCan you look at the versions you have installed in About Visual Studio?\n. Please reopen this if you continue seeing this issue!\n. This is an unfortunate limitation of the Device Portal currently.  It can only start headed applications.  \nAs a workaround, in the Processes page, you can use Run command to execute this command to start a background application (by specifying it as one of the startup apps):\niotstartup add headless AppNameHeadless\nThis will start the background application.  NOTE: this will configure IoT Core to ensure that this background application is always running (so if it crashes or exits, the OS will restart it ... also, if you restart the device, the background application will be started)\nTo undo this, you can execute this command in the Processes page:\niotstartup remove headelss AppNameHeadless\nWe are working on adding a simpler way to start background applications.\n. Thank you for letting us know about this.  We will investigate.\n. What device are you running into this on?\n. I see instability there too.  I'll see if I can't figure out what is causing this to see if there is a code fix (hopefully!) or there is an issue in the underlying platform.\n. It is true that the HttpServer needs to be started separately from BlinkyWebService.  It is also unfortunately true that, as a Background Application, it cannot be started from the device portal.\nBoth should be invoked from Visual Studio using F5.  Please see the sample's deployment documentation here: http://ms-iot.github.io/content/en-US/win10/samples/BlinkyWebServer.htm.\n. For default/startup apps, you can specify one GUI app and any number of Background Applications.  The easiest way to do this would be to:\n1. Deploy these using Visual Studio's F5.\n2. Use iotstartup (using Powershell or SSH or from the Device Portal's Processes Run Command section):\niotstartup add headed BlinkyWebService\n   iotstartup add headless HttpServer\nThis will configure the OS to start both BlinkyWebService and HttpServer when the system boots up (and make every effort to keep them running should one exit for any reason).  \nKeep in mind that the sample was not written to be started on boot and may need to be adjusted (for example, the App-to-app communication currently just tries once to connect ... you may need to try multiple times as the timing may be such that the Background Application starts first ... you may need to watch for any disconnection between the two apps to revive communications ... etc).\n. Sorry for the inconvenience!  \nFor the Samples, I believe we are simply using the standard Git UI color scheme ... I'm not aware of how much customization is available, but we will look into it. \n. Thanks for the feedback!  We will look into this as soon as we can!  \nWhat screen size did you experience this on?\n. Thanks for the feedback!  Can you specify which sample you are interested in for .NET cli?\n. Thank you for the awesome contribution!  What a great idea!  \nWe are encouraging people to use hackster.io as a forum for great IoT projects.  Please make a contribution there so that other people can benefit!!\n. We definitely appreciate the interest in our platform!  However, we are encouraging people to contribute to hackster.io rather than contributing new samples here.\n. What do you mean by \"in a simulated mode\"?  Also, when you look at Help > About Visual Studio, what version of Visual Studio Tools for Universal Windows Apps do you have installed?\n. Does this refer to a particular sample?  Or have you written your own code to experience this?\n. Thanks for the comment.  This is a great suggestion and we will add it to our backlog of items!\n. Thanks for the submission!!  That is awesome!  \nI have started working with the MSFT localization team to understand what sort of review is required for this.\n. Our localization team ran the resw through our tools and it looks great.  Thanks!\n. Awesome!  We will work with our localization team to validate the resources and then merge it.  Thanks for the contribution!\n. :+1:\n. Can you include more of your code?  For example, what is \"trigger\" ... how is it created?\n. No problem!  We love any and all questions ... we are actively monitoring the samples Issues for any problems that people run into when trying to apply the samples to their real-world scenarios.\n. In progress ... eta 6/6\n. what is in TpmDeviceSample.Net.zip?\n. update publisher to MSFT and use PFX from one of the other samples (like HelloWorld)\n. Looks good.  If the app no longer crashes when the network cable is unplugged, merge it!\n. Thank you for the feedback.  Are you building the templates yourself?  What version of VS2017 are you installing the templates for (VS2017 Preview 4, Preview 5, RC)?\nOur goal will be for it to be a peer to Windows Universal.  That said, we haven't finished working on compatibility with VS2017 yet.. It looks like the RC has two states ... \n\n\nIf the C++ UWP templates are installed, they will show up under Templates > Visual C++ > Windows > Windows Universal.\n\n\nIf the C++ UWP templates are NOT installed, a node for installing the templates will show up as Templates > Visual C++ > Windows Universal.\n\n\n. How are you trying to deploy the APPX file?  Are you including the dependency APPX files?\nAs an example, from the Device Portal, to deploy HelloBlinky, you should build the APPX and then enter:\n\nEnter App Package = HelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Blinky_1.0.0.0_arm_Debug.appx\nEnter Certificate = HelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Blinky_1.0.0.0_arm_Debug.cer\nClick Add Dependency 2x\nHelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Dependencies\\ARM\\Microsoft.NET.CoreRuntime.1.0.appx\nHelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Dependencies\\ARM\\Microsoft.VCLibs.ARM.Debug.14.00.appx\n\n\nClick Go button\n\n. Leave this PR until Python is better supported.. seems fine, but merge conflict and potentially this PR (https://github.com/ms-iot/samples/pull/505) should be included. had to do some merging \u2026 closing this PR, but opened a new one here: https://github.com/ms-iot/samples/pull/544. Windows 10 IoT Core supports one UWP startup app and any number of background startup apps.  Are you seeing an error when attempting to set multiple background startup apps?. It looks like this was taken care of in the move to https://github.com/Microsoft/Windows-iotcore-samples.. move PR to https://github.com/Microsoft/Windows-iotcore-samples. remove appinsights code\n. remove appinsights code\n. what does \"blow write\" mean?\n. msft publisher\n. publisher=some form of microsoft\n. remove app insights\n. publisher should be some form of msft\n. publisher should be some form of msft\n. publisher should be some form of msft\n. remove app insights here\n. instead of \"at below please write the message...\", try \"Write the message you are going to send\"\n. remove all references to your personal account\n. remove all commented code\n. add license banner\n. why is this commented?  if not needed, remove it\n. remove applicationinsights code\n. how are we requesting microphone permission?  there is no consent UI on Iot Core.  should this method be renamed?\n. do not include your personal accounts in the samples\n. add license banner\n. this isn't even close to the current version?\n. why is all of this commented code in here?  remove it if it isn't needed.\n. remove applicationinsights code\n. this belongs in ms-iot/content, not ms-iot/samples.\n. probably don't need to personally identify this bit as added by Maggie?\n. put these with the other usings above\n. ssh/telnet/powershell\n. this link doesn't contain the ability to simply download ... try pointing to the ms-iot/samples zip download (see the other samples in ms-iot/content) and direct them to download the zip of all samples and open the speech project.\n. \"to get an account\" not \"to get a account\"\n. formatting here ... too many spaces: \"And     once\"\n. if you are using VS to deploy, why not use F5 and actually start the app?  then tell the users that they can use webb as well.\n. this sentence needs work...maybe simplify: \"Now you are ready to use the speech translator!\"\n. Windows.UI.Core is in the usings, no need to specify\n. Windows.UI.Core is in the usings, no need to specify\n. this comment is not applicable to IoT Core ... there is no settings.  there is no idea of consent on IoT Core.\n. Windows.UI.Core is in the usings, no need to specify\n. Windows.UI.Core is in the usings, no need to specify\n. what is this doing?  can it be removed?\n. Windows.UI.Core is in the usings, no need to specify\n. change this method name to RequestMicrophoneCapture ... there is no permission on Iot Core\n. clean up the usings of your cs files ... VS can remove unused usings easily.\n. there is no mention of the #define RPI1 or RPI2 here???\n. why are we casting interfaceMemberAuthType?  isn't the point of Enum.IsDefined to protect this sort of cast?\n. why is this added?\n. 10240\n. should we put this into some kind of scroll viewer...there may be screens of smaller width.\n. i'm talking about the buttons ... not the content\n. I don't think that the usefulness of the browser is as important as enabling the buttons to click for any screen size is.  The buttons allow someone to trace through the code as a page changes (wihtout a keyboard attached, right?).  Maybe it isn't vital, but if we are making changes to accommodate smaller screens, I don't know why we'd reinforce 400 as a minimum.\n. why is SPI_CONTROLLER_NAME and SPI_CHIP_SELECT_LINE defined for each board?  they are always the same...I would suggest moving the identical settings to a section of constants that is not conditioned.\n. the rpi2 code was uncommented previously ... does the sample build without any of these uncommented?\n. leave this as 10240\n. please undo formatting changes so we can see what is actually a change more easily.\n. just want to make sure that people using small screens can still use the bt functionality\n. why all the commented code?\n. either add comments to describe why all of this unused code is in the file or get rid of it. (I would prefer getting rid of it)\n. don't add these  tags\n. why is generated code checked in?\n. why are we setting Grid.Column and a width?  shouldn't the column have the width?  also, does this app work if the width is less than 400?\n. should imageInstance.Visibility be set to Collapsed here?\n. make the publisher some variant of msft\n. i'd suggest removing all the applicationinsights code\n. is there any UI to this?  maybe consider making it a background application?\n. the generated files shouldn't have been checked in to begin with ... please remove them if possible.\n. why is this hard coded to 640x480?  do we need to set values for width and height?\n. get rid of app insights\n. remove app insights\n. i think Bertha started comparing subsets of the complete name because BIOS changes affected this sort of comparison.  Might make sense to take a look at what Bertha is doing and match it: https://github.com/ms-iot/samples/blob/develop/IoTCoreDefaultApp/IoTCoreDefaultApp/Utils/DeviceTypeInformation.cs\n. yes.  it is aligned with the uwp templates and allows for development on win7 machines.\n. \"bin place\" may not be a concept to anyone outside of msft\n. use MSFT as the publisher\n. If we don't actually care about the telemetry for this sample, remove the ApplicationInsights references everywhere.\n. use MSFT for publisher here and in Identity\n. also copy the pfx file from Blinky and rename it to HelloCloud_TemporaryKey.pfx (that enusres that all of our samples have the same pfx that matches publisher MSFT and have the same expiration date)\n. this is a generated file, right?  should it be checked in?\n. remove all applicationinsights code/files unless you're actually using it\n. use publisher=MSFT and the pfx from Blinky\n. nit: i think the newer APIs are more intuitive:\nvar i2cController = await I2cController.GetDefaultAsync();\n        var sensor = i2cController.GetDevice(new I2cConnectionSettings(0x40));\n(though i'm not sure it'd work with 10240)\n. why is the package family name provided here, but not for OemApp2_Click?\n. Is this true? \"may make it difficult to pass\" ... or does it make it impossible?\n. you might want to demonstrate how to get back to the IoTHomeApp from App1 and App2 ... could be accomplished by adding a protocol hander here that the other apps call.\n. maybe add the oem detail\n. Great catch ... thank you!  The wording we intended was: \"all of the source code for this is open source and is available on\"\n. no source code changes for pythonblinkyserver?\n. no source code changes for pythonblinkyheadless?\n. shouldn't the usage of GetPin switch from .GetPin to .GetPin?  I don't see a corresponding change?\n. is pauseHelper defined elsewhere?  I see it used in active code below and commented out here?\n. is pauseHelper defined in uncommented code somewhere?\n. why is a new capability needed?  i don't see new code ... does lightning require serialcommunication?\n. ComPtr::As can fail too, right?  Do our samples assume success or demonstrate error handling (fwiw, for the Windows UWP samples, they advised us against including error checking)\n. TODO-TODO?\n. Add something like you have in the GUI readme:  This sample demonstrates how to send a single message to Azure IoT Hub\nOtherwise, someone would have to go to the GUI sample to know what the headless sample does.\n. use msft. has this been added  to the docs yet?. I think we need a little summary here of what this sample does. ",
    "charlehsin": "My workaround is:\nAdapterValue^ attribute = ref new AdapterValue(\"\");\nattribute->Set(adapterProperty->Attributes->GetAt(0));\n. Great. It fixes it.  By the way, do you know why there can only be 1 background service running at 1 time?  When I deploy this, the in-box ZWave Adapter service stops.\n. Thanks.... That works.\n. Thanks for the reply. I have another question related to this.\nI understand the idea of DSB. However, in my understanding, one can also use Windows.Devlices.AllJoyn to create a AllJoyn Producer and use the target device's SDK to hook up the device and the AllJoyn network. Why do we need a DSB, instead of using AllJoyn Producer? Does DSB make the whole process easier, or/and does DSB provide other features/capabilities?\nThanks,\nChih-fan\n. Thanks.\n. Thanks for the reply. I have another question related to this.\nI understand the idea of DSB. However, one can also use Windows.Devlices.AllJoyn to create a AllJoyn Producer and use the target device's SDK to hook up the device and the AllJoyn network. Why do we need a DSB, instead of using AllJoyn Producer?\nThanks,\nChih-fan\n. The behavior is not consistent.  Sometimes, I am getting this. Sometimes, I am not. So I am closing my own issue now.\n. ",
    "zhuridartem": "The document is missing a dynamic_cast for the following line:\nAdapterProperty^ adapterProperty = dynamic_cast(Property); \nAdapterValue^ attribute = adapterProperty->Attributes->GetAt(0);\nshould be:\nAdapterProperty^ adapterProperty = dynamic_cast(Property); \nAdapterValue^ attribute = dynamic_cast(adapterProperty->Attributes->GetAt(0));\n. Documentation at https://github.com/ms-iot/samples/blob/develop/AllJoyn/AllJoynDSBGuide/AllJoyn_DSB_GPIODevice_Sample_Tutorial_v1.0.pdf was updated with correction.\n. Hello,\nWe've reproduced this issue. Turns out the required Assets\\ that are referenced in project AdapterBackgroundService file Package.appxmanifest are missing. They are present in the AdapterHostApp project.\nSo, to fix:\n1. Copy Assets directory from AdapterHostApp folder to AdapterBackgroundService folder.\n2. Under AdapterBackgroundService project, right click, Add -> New Filter, call it \"Assets\" \n2. Right click on the created \"Assets\" filter,  Add -> Existing Item, and select all files under AdapterBackgroundService\\Assets\\\nThis will add all the missing Assets files back to AdapterBackgroundService. \n. The template DeviceSystemBridgeTemplate.vsix file at https://github.com/ms-iot/samples/tree/develop/AllJoyn/AllJoynDSBGuide has been updated with the Assets fix.\n. We also noticed that existing DSB Background Service gets stopped when deploying another one from Visual Studio. Once deployed from Visual Studio, you can use iotstartup.exe to add the new BackgroundService as a headless startup task so it starts on next boot.\nUsing remote powershell session (http://ms-iot.github.io/content/win10/samples/PowerShell.htm), run \"IotStartup add headless AdapterBackgroundService\"\nThen run \"IotStartup list headless\" to make sure both ZWaveBackgroundService and AdapterBackgroundService are registered.\nReboot and both should get started now.\nFor more details on setting startup app, see http://ms-iot.github.io/content/win10/tools/CommandLineUtils.htm\n. Overview of the BridgeRT at https://git.allseenalliance.org/cgit/dsb.git/plain/Docs/AllJoyn%20-%20Device%20System%20Bridge%20-%20Whitepaper%20v1.0.pdf\nOverview of AllJoyn API surface for UWPs in Windows 10 at https://channel9.msdn.com/Blogs/Internet-of-Things-Blog/Step-By-Step-Building-AllJoyn-Universal-Windows-Apps-for-Windows-10-Public-Preview\nBoth the BridgeRT and Windows.Devices.AllJoyn use MSAJAPI.dll, which is AllJoyn Standard Client C API with reference at https://allseenalliance.org/docs/api/c/index.html\n. The primary targets for the Device System Bridge are existing device networks. Our goal with DSB is to offer a cost efficient and quick method to bring existing devices to AllJoyn as virtual devices on the AllJoyn network through a pre-baked AllJoyn producer implementation (Bridge), and implementing calls to SDK hooks to support translating between AllJoyn concepts to target devices (Adapter). As a developer you don\u2019t need to touch AllJoyn producer with a DSB, unless want to change default behavior of the Bridge.\nFor existing devices, you should go with DSB to allow those devices to be visible and controllable from AllJoyn bus. \nThe bridge generates AllJoyn services, interfaces, objects, properties, methods and signals based on device data and capabilities returned from the Adapter. This allows the DSB to handle a wide variety of devices such as ZWave or BACnet from the same reference code provided in the Visual Studio template.\nFor new devices, you should go with AllJoyn APIs (such as Windows.Devices.AllJoyn) to create an AllJoyn producer.\nNote that there is also an AllJoynCodeGen Tool (https://msdn.microsoft.com/en-us/library/dn913809.aspx) that generates Windows.Devices.AllJoyn producers or consumer code to make it easier. You will need to declare the introspect upfront.\nThere is also a useful tool to generate AllJoyn introspect XML from an existing AllJoyn device: https://github.com/MS-brock/AllJoynToasterDemo/tree/master/getajxml, usage described in detail on https://channel9.msdn.com/Blogs/Internet-of-Things-Blog/Step-By-Step-Building-AllJoyn-Universal-Windows-Apps-for-Windows-10-Public-Preview\n. There are three application projects with the ZWaveAdapter sample.\n1. ZWaveBackgroundService - a background service app that initializes bridge and adapter from a startup task. On Windows 10 IOT Core a startup task can be registered for automatic start as a background service type application. Used for deploying and debugging on Windows 10 IOT Core. \n1. AdapterHostApp - simple app that initializes bridge and adapter on UI activation. Used for deploying and debugging on Windows 10 desktop.\n2. AdapterTestApp - simple app that was used for testing the implementation of the adapter. It skips the bridge and instantiates the adapter lib directly and exercises entry points of the adapter. Sort of like a Unit Test. You can safely remove this project. And you are correct, options.xml is missing from the project.\n. Hello Chih-fan,\nThere are two plug and play stories here:\n1.  Plug in Z-stick dongle. \n2.  Pair new Z-Wave device with already running dongle\nThe first story is supported. When StartDeviceDiscovery( ) is called, it asks the OpenZwave stack to open the serial port. OpenZWave will keep on retrying for \u2018DriverMaxAttempts\u2019 (specified in Options.xml, default = 0), until it is able to open the port. If DriverMaxAttempts are attempted without successful opening of the port, DriverFailed is notified, in which case the ZWaveAdapter will restart the discovery after 30 seconds. DriverMaxAttempts is by default 0, which means infinite attempts. Hence, the ZWave stack will keep on retrying until successful. You should be able to remove and reinsert the Z-Stick with ZWave DSB running, and devices should disappear/reappear on the bus.\nFor the second story, I don't think you are allowed to pair a new device while the Z-stick is already plugged in and running. But, you should be able to remove the stick, pair it and then re-insert into the USB port and new device should show up. ZWave DSB can be left running and it will pick up device removals (when dongle is removed) and device arrivals (after re-insert). We did not try it out though. \nPlease let us know on your findings.\n. Hello Chih-fan Hsin,\n1)  The team made a design decision that we could not know in advance if an adapter change would require a restart or not.  We decided it was up to the adapter writer and they could modify the bridge if desired\u2026.or simply require a system reboot. The bridge config update should initiate a bridge restart. \n2)  We do not support Secure inclusion of devices. It has to be done through external applications like Zwave Control Panel. We did have to add the NetworkKey value to Options.xml in the past for some network that had a paired secure device, but cannot say whether the secure device was truly usable at that point and if additional effort is required to enable such devices.\nHope this helps!\nArtem.\n. Please see https://github.com/ms-iot/content/blob/develop/README.md on how to add new .md files for Docs.You would need to also update _data_docs-index.json to add a link to new doc. \n. Hello Ian,\nFor Windows Runtime apps, network communications using an IP loopback address for interprocess communication is restricted. This applies between two apps running on the same machine, but does not apply if running on different machines or within the same process. You can learn more about the loopback restrictions here: https://msdn.microsoft.com/en-us/library/windows/apps/Hh780593.aspx\nIn your setup, sounds like you have AllJoyn Explorer UWP app and your AllJoyn Producer UWP app running on the same machine. AllJoyn allows for discovery of the service, but network loopback restriction prevents establishing an AllJoyn session which is required for introspection and enumerating objects.\nNote that for AllJoyn for Windows 10 IOT Core you CAN run multiple apps and they will be able to communicate on the same device via AllJoyn. For Windows 10 Desktop, however, you will need to enable a loopback exemption for both apps.\nA loopback exemption must be enabled for both apps: AllJoyn Explorer and AllJoyn Producer.\nThere are two ways to enable network loopback exemption:\n1. Using Visual Studio: When building and deploying your app, look for and enable \"Allow Local Network Loopback\" option in project settings. This will ensure when an app gets deployed it also gets loopback exception enabled.\n2. Using built-in CheckNetIsolation.exe tool: At any point you can enable loopback exemption of an installed/deployed app. For specific steps for AllJoyn Explorer see Troubleshooting section of the https://github.com/ms-iot/samples/blob/develop/AllJoyn/AllJoynExplorer/AllJoyn_Explorer_Setup_Guide_v1.0.pdf?raw=true\nPlease let us know if these steps worked for you! \nArtem.\n. Hello, and thanks for the feedback. Doing the cross reference as git submodules is a good idea. We did not get around to this yet.\nThe zip files do come from another git repo that contains more than the samples mentioned. Each zip here is made to be self-contained. We will evaluate the git submodules option.\n. Fixed. Thank you for your patience!\n. Hi Folks! I've reproduced this issue, thank you for reporting this. The screenshots are great!\nWhat is happening is when you add a new AdapterValue to the property Attributes, the generated AllJoyn interface (which is based on the Property name and Attributes content) changes. But the interface name is the same. \nSo, if you have some application like AllJoyn Explorer that has seen the other version of the interface with the same name, it gets confused. To fix, simply restart the consumer application (AllJoyn Explorer) and you should see the new version of the interface with updated properties. \n. Hi Morten. Thank you for trying out these new bits, and we appreciate the feedback. \nOur initial thinking was to make the samples fully self-contained, thus the .zip files. We have heard of making the AllJoyn samples as source and were pointed to use the git submodule to reference other repositories. This makes sense, we have not gotten to refactoring these sames to work with that. \nSorry to hear the latest ZWaveAdapter is not working for you. I've tried to reproduce the not compiling issue, and it built without this error. Sounds like the project that is failing to build is the .\\ZWaveAdapter\\open-zwave\\cpp\\build\\winRT\\vs2015\\OpenZWave.vcxproj. The location of this project was moved from the previous version, so, could you please confirm that the older version of the project is not being used. \nI am assuming this is reproducing on the clean copy of the latest ZWaveAdapter. Could you share more details of the build output, as well as the version and flavor of Visual Studio that you are using? \nThe version of VS I used for repro is 14.0.23107.0, with Windows 10 SDK (Visual Studio Tools for Universal Windows Apps) 14.0.23121.00.\nWe will investigate the AllJoynExplorer deployment issue in more detail. \nThanks again,\nArtem.\n. Update: we have reproduced the ZWaveAdapter not building. The issue is with the OpenZWave project's pre-build step that generates the winversion.cpp. To fix, in OpenZWave.vcxproj, please add missing quotes around $(ProjectDir)....\\windows\\GIT-VS-VERSION-GEN.bat.\nE.g.\n    \ndel ....\\windows\\winversion.cpp\nCALL \"$(ProjectDir)....\\windows\\GIT-VS-VERSION-GEN.bat\" \"$(ProjectDir)\\\" \"....\\windows\\winversion.cpp\"\nXcopy /E /I /Y ........\\config config\\\nexit 0\n    \nThis will be fixed in next update of ZWaveAdapter.\n. This is now fixed. Please let us know if you have any issues!\n. This will be updated with https://github.com/ms-iot/samples/pull/201\n. We have not tried yet. Are you having problems with it?\n. Thanks for the feedback. The ZWaveAdapterApp that is part of the stock image is indeed https://github.com/ms-iot/samples/tree/develop/AllJoyn/Samples/ZWaveAdapter 's HeadlessAdapterApp. \nYou can disable the app from running by default by running in SSH or in WEBB's Process view the following command: \"iotstartup.exe remove headless ZWave\" and restarting your device. Now it should not start on boot.\n. We will not be adding the UZB in-box driver to support the Gen5 in the near future. \nFrom http://aeotec.com/z-wave-usb-stick/1358-z-wave-drivers.html it does not look like they have a published ARM driver. \nI don't have the Gen5 hardware on hand.\n Perhaps you can manually try getting it to work by following these steps:\n1. Get the driver from http://aeotec.com/z-wave-usb-stick/1358-z-wave-drivers\n2. Copy the uzb.inf and uzb.cat to IOT Core device (x86 or amd64)\n3. Follow https://developer.microsoft.com/en-us/windows/iot/win10/samples/driverlab3 to install the driver on IOT Core device.\nDon't know if the OpenZWave stack that is in the sample also needs an update to support Gen5 stick. \n. ZWave App is no longer enabled by default. Closing issue.\n. Duplicate of https://github.com/ms-iot/samples/issues/151\n. Could you tell us more about the setup that you are using? \nSpecifically, are AllJoyn producers and AllJoyn Explorer running on the same machine? If so, please double check network isolation has been applied to both AllJoyn Explorer and producer application by following Troubleshooting section of the https://github.com/ms-iot/samples/releases/download/AllJoynExplorer_1.0.11/AllJoyn_Explorer_Setup_Guide_v1.0.pdf\n. We are currently not planning to release AllJoynExplorer as source. \nHowever, AllJoynExplorer uses the following source to enumerate and interact with AllJoyn devices: https://github.com/ms-iot/samples/tree/develop/AllJoyn/Platform/DeviceProviders\n. Closing. \nPlease use dotMorten's NuGet DeviceProviders or get the source from link above for generic AllJoyn enumeration.\n. Could you clarify which tools are you referring to? Is this the AllJoyn Studio or the Device Providers?\n. Latest implementation for DSB templates and AllJoyn Studio output for managed do support CoreCLR, which is required to run on IoT Core anyways. \nFor DSB example, please take a look under https://github.com/ms-iot/samples/tree/develop/AllJoyn/Samples/ZigBeeAdapter/HeadlessAdapterApp. In project.json it calls out \"Microsoft.NETCore.UniversalWindowsPlatform\": \"5.0.0\" dependency. In HeadlessAdapterApp.csproj it specifies NETFX_CORE define constant, and references Universal CRT SDK. \nFor AllJoyn Studio output example, please take a look at https://github.com/ms-iot/samples/tree/develop/IotOnboarding. The org.alljoyn.Onboarding project is generated using AllJoyn Studio, and is a C++/CX WinRT dll project. It can be directly consumed by a CoreCLR project and application, as seen in https://github.com/ms-iot/samples/blob/develop/IotOnboarding/IoTOnboardingService/IoTOnboardingService.csproj\nNow, if you need to call to AllJoyn APIs directly from a managed project, that is a bit more involved. You have several options here - wrapping AllJoyn C API calls with C++/CX WinRT project, or wrapping AllJoyn C API calls with p/invoke definitions. The DSB BridgeRT.dll is doing the former.  For PInvoke see https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx. \nHope this helps!\n. Noted. We will attempt to repro and get back to this post.\n. Won't Fix. AllJoyn Explorer is currently not supported on Windows 10 mobile, with no ETA.\nNote that DeviceProvider based projects should not be crashing on Mobile, IoT Core, or other editions. \n. Looks good.\n. Controlee only. DSB is the application that advertises the control panel for each device that it represents on AllJoyn\n. You can find documentation about Control Panel at Allseen Alliance: https://identity.allseenalliance.org/developers/learn/base-services/controlpanel\nIt links to Samples page\nhttps://identity.allseenalliance.org/developers/develop/run-sample-apps/controlpanel\nNote that there are no Windows samples. Code for Controller is available for other platforms on Allseen Alliance.  \nIt is possible to implement the Controller and Controlee using AllJoyn Studio as a start. The trick with consuming Control Panels is that you can't rely on About Announcements to get the full tree of control panel containers and properties. The Control Panel Interface specifies that you need to use https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties org.freedesktop.DBus.Properties.GetAll() to get the list of Properties in a container. You can't rely on the org.alljoyn.About.GetObjectDescription(), and in our experience anything lower than ControlPanel object was not advertised.\nSome more useful information here: https://identity.allseenalliance.org/developers/develop/api-guide/controlpanel\n. Closing as Answered.\n. The AllJoyn DSB template (https://visualstudiogallery.msdn.microsoft.com/aea0b437-ef07-42e3-bd88-8c7f906d5da8) was updated and should now be compatible with VS 2015 Update 2.\n. This sample relies on the Open source BACnet Protocol Stack (bacnet-stack-0.8.2 from http://bacnet.sourceforge.net/), which had problems building for ARM and that is why we disabled that configuration.\nI just tried with VS 2015 Update 2 to re-enable ARM configuration, and it built with warnings.\nYou can enable the ARM build configuration in VS by selecting Build -> Configuration Manager -> Active solution platform: , Type or select the new platform: ARM, Copy settings from x64.\nThis should build the project, but be warned that we have not done any validation to this sample for RPI3. \n. Thank you for reporting. My apologies for taking so long - \nShould be fixed with https://github.com/ms-iot/samples/pull/450. This issue is now fixed.. Thank you for the feedback. This is a known current limitation. \nTo unblock anybody for adding signals and methods to a specific interface: please follow similar model as LSF and Control Panel special handler in BridgeRT.\nDSB was designed to project a generic device to an AllJoyn representation. Current implementation has a limitation for projecting to a specific AllJoyn service standard. To enable such mapping, DSB has a concept of a Special Handlers. It does require adding code that does the projection in the DSB though. LSF and Control Panel services have been implemented in the DSB's BridgeRT as an example. \n. This issue should be fixed in latest version of the code. \n. The missing ApplicationInsights should be resolved with the pull request #455. \nTo work with ZigBee devices, please see our tutorial at https://developer.microsoft.com/en-us/windows/iot/Samples/ZigBeeAdapter. You will need to setup a ZigBee network first before bridging it to AllJoyn. . If you haven't already, please run \"iotstartup add headless \" for registering and triggering a start of the additional continuous background task (CBT) app. Multiple CBTs launch is supported. \n. Is this the right platform version?\n. Using CortanaSettings WinRT API needs to be checked with IsAPIPresent or IsContractPresent checks. Using CortanaSettings WinRT API needs to be checked with IsAPIPresent or IsContractPresent checks. Done need this here since using CortanaHelper only.. Need to check for contract or API presence.. Should check for API presense. Need to check for API presense. Lets evaluate a conditional include here - only include 14993 if that SDK is installed. Should use Conditional include - only if 14993 is installed. Otherwise, fallback to existing SDK.. Keep as 0. This way this file is compatible with older version.. Will need to #define exclude when using old SDK.. Still there, needs to be removed. ",
    "snobu": "I've tried doing v4/v6 in separate boxes but at low resolution that space gets really cramped really fast. https://ms-iot.github.io/content/images/DefaultAppRpi2.png I'll see what i can do.\n. Nevermind me, i just saw you guys re-did the whole UI. I think it looks great! With v6! Congrats!\n. ",
    "endy66": "Same Problem here. If i deploy the code to win10 preview pc, the MessageDialog works perfect. On Win IoT Core (RPI2), the MessageDialog does not appear.\n. ",
    "parnz": "\nthe Maker's application needs to provide all user experience elements.\n\nThat means I have to create my custom MessageBox class myself right?\nThanks.\n. ",
    "mms-": "That makes sense, however there should be a natural way to implement the dialog box service, there shouldn't be an API that exists but crashes the app..\nThat is, is there a way to plugin our own dialog functionality without going in and wrapping dialog code all over the app?\n. CPU usage is very high when let say a LifeCam Studio is connected to a Raspberry Pi. At 1080p not much room is left for other computation. This is because the CPU is not as powerful as a normal PC, however is there room for optimization?\nPerhaps the driver model on Windows can be optimized to support a very low fps, i.e. 1 or 2 fps but full resolution? For some applications that will suffice. Otherwise it's a big waste running the camera at higher fps, having it consume CPU, and power, only to take 1 frame a second from the stream.\nEven better, would be if the camera APIs could do 30fps at 480p while having a simultaneous stream of 1 fps at 1080p. With the computation done on the GPU by the platform since the cameras can't do this. Though I suspect UVC is a bit primitive to do this efficiently?\n. Common scenarios for a Windows Service or a Background App are 'is the app running and healthy if not restart' and 'update the app'. Both of these should be handled by the platform. \nThat is Windows IoT could (does?) have an update mechanism, something like ClickOnce (but reliable) or APPX or whatever. It should also have a durability feature, so an ability to set an app as foreground app, meaning it is always running and visible (in the case of a headed app) and is actively being checked for to enforce this, not just on start-up. It should also have a basic health query API, if the app does not respond it is shutdown and restarted.\n. Good to know that always running check is already in there. I haven't had time to play around with the start-up functionality yet.\nOne un-related issue that we ran in to is the high CPU usage on Raspberry Pi with webcams : https://github.com/ms-iot/samples/issues/30\n. Will try the C++ service soon. What is the recommended way to run C# code within that? Or can the service also be C# based without loss of functionality?\n. Is it managed C++ that can call managed c# assemblies?\n. That makes sense, I assume then that WinRT will grow in capability and WinRT based services or equivalent will arrive at some point. Hopefully not years..\n. ",
    "Injac": "Perfect :) Thanks Lou!\n. ",
    "jklemmack": "It is taking the variable passed in to the constructor and assigning to a private variable of the same name that's a class member.  It could be rewritten as\n```\nprivate AppServiceConnection appServiceConnection;\npublic HttpServer(int serverPort, AppServiceConnection randomVariable)\n {\n        listener = new StreamSocketListener();\n        port = serverPort; \n        this.appServiceConnection = randomVariable; \n        listener.ConnectionReceived += (s, e) => ProcessRequestAsync(e.Socket);\n}\n```\n. ",
    "tscholze": "Ah, I see.\nI would recommand that little refactoring. It would help beginners to understand the source without the question in mind \"why does vs mark this yellow\".\n. No problem. I'm glad I could help. :)\n. ",
    "MHesham": "I`ve reverted the Wifi crash fix, Rachit seems to have a wider crash coverage on a different pull request\n. ",
    "PatGet": "Renaming the private AppServiceConnection var of the HttpServer class fixes this scope issue and the resulting null issue.\n. ",
    "muziekklas": "Blinky (normal one)\nI also followed steps on http://ms-iot.github.io/content/en-US/win10/samples/Blinky.htm but mainly used the code from the repo\n. I fixed it by reflashing the SD card. I assume it was not correctly flashed the first time because I see more Processes on the webUI\n. ",
    "mwgladding": "Hi Chih-fan. The CSP will be available as part of the IoT Core operating system, and not in the DSB code. We should have documentation available for the CSP in the next few weeks. Please note that we will be working with both first and third party MDM providers to build MDM management solutions for IoT Core. The timeline for MDM support for IoT Core has not been finalized at this point in time. \n. ",
    "elmerm": "That's a bummer. It's a shame that a native Raspberry Pi component like the camera is not going to be supported. \n. Thanks @ooeygui. \n. ",
    "ethanhs": "Any eta on the graphics driver being released? I am hoping to use the pi for a webcam, and currently, it just doesn't do. \n. Am I correct in that you are waiting on https://github.com/Microsoft/graphics-driver-samples for gpu acceleration? As I understand it, the issue with the video capture sample is that it needs hardware acceleration. Is this correct? Also, thanks for the suggestion, but the Pi is essentially a requirement.\n. ",
    "jessekaplan": "This is a priority item for us, with work underway, but unfortunately we don't have a timeline to announce at this point. \nI normally hate suggesting spending more money as a workaround for a limitation of our product, especially a temporary one, but just in case this would be useful for you I wanted to let you know. We recently released support for the Dragonboard 410c with GPU acceleration (there were already windows drivers for that gpu). It does cost a bit more than the RPI2, but it has on-board wifi and bluetooth and so, if those features are important to you, the cost evens out a bit. \nThanks for your continued interest, and please let us know if you have any more questions. \n--Jesse\n. Our team is actually working on the driver directly, we're not waiting on another project. You're understanding is correct though, the issue is that this scenario requires hardware acceleration.\n--Jesse\n. If you build a \"Universal Windows\" Blank App (XAML) you can easily build a UI app for IoT Core. We'll have a few headless VB samples available by RTM as well. \n. The DHT22 sensor has timing requirements that require a sequence of GPIO operations that are just on the border of what can be accomplished with the current product. It's not so much that there isn't enough precision, but rather that the operations take too long and so you miss the window. It's actually right on the border of what that version of IoT Core supports. You can look at the code in this sample for a sample that often succeeds (~1/3 tries): https://github.com/ms-iot/samples/tree/develop/GpioOneWire\nWe are working on options to improve this performance, but nothing we can announce quite yet. \nThanks,\nJesse\n. Now we do have something we can announce :-)\nThe latest \"Insider Preview\" has significant performance improvements to the Gpio operations that should make it much easier to use the DHT22. We see ~3x improvements in speed over the 10240 build and the Fall Release will have another 50% on top of that. \nAdditionally, this preview also includes an optional driver that, when enabled, increases performance more than 100x above the 10240 build. You can find information on this here: http://ms-iot.github.io/content/en-US/win10/LightningProviders.htm\nPlease let us know if that solves your issues. \nThanks,\nJesse\n. ",
    "artus9033": "So one year passed, is there any progress?. ",
    "tig4647": "Thanks for adding, also the template helps for VS 2015\n. ",
    "msftclas": "Hi @jayhopeter, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @rachitb777, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @jessekaplan, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @kcc1988, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @kcc1988, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @kcc1988, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @DavidShoe, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @reneherrero, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @reneherrero, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @buchizo, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @cicconej, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jayhopeter, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @superlime, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @superlime, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @MagicBunny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @MagicBunny, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @francob1982, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @MagicBunny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @dotMorten, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @dotMorten, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @francob1982, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @francob1982, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @PatGet, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @stephenhuang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @stephenhuang, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @dankuo, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @sely2k, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @TychosNose, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @JimGaleForce, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @sely2k, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @JimGaleForce, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @Sumahitha, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @Sumahitha, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DavidShoe, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @DavidShoe, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @dankuo, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @MagicBunny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @apdutta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @KaraOttewell, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @KaraOttewell, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @jayhopeter, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @Sumahitha, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @kusumamurthy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Kusuma Srinivasa Murthy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @kusumamurthy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Kusuma Srinivasa Murthy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @MagicBunny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alanch-ms, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alan Chan (IOT)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @arturl, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @arturl, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @francob1982, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @turkycat, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @kusumamurthy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Kusuma Srinivasa Murthy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @TychosNose, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @mskalra, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @TychosNose, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jplafonta, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @Sumahitha, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @munyirik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Munyiri Kamau). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @dotMorten, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @trmck, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @trmck, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @dotMorten, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @dotMorten, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @arturl, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DavidShoe, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @LeCampusAzure, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @LeCampusAzure, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @mattkm, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @Vinz68, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @Vinz68, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @brucelai, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @javiddhankwala, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @javiddhankwala, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @javiddhankwala, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @AirportsFan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @AirportsFan, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @alanch-ms, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alan Chan (IOT)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @trmck, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alanch-ms, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alan Chan (IOT)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @ooeygui, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Lou Amadio). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alanch-ms, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alan Chan (IOT)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @SlavyMihov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @AndrewGaspar, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Andrew Gaspar). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ooeygui, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Lou Amadio). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @arturl, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Artur Laksberg). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @EdiWang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @EdiWang, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jessekaplan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DivyaMahadevan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DivyaMahadevan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @parameshbabu, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Paramesh Babu). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jadeiceman, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jonathan Chiu). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @namkedia, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Namrata Kedia). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ooeygui, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Lou Amadio). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DivyaMahadevan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @stephenhuang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @MasayukiNagase, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Masayuki Nagase). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @DivyaMahadevan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @gloveboxes, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @gloveboxes, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @stephenhuang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @derekameer, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @derekameer, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @derekameer, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @arturl, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Artur Laksberg). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @munyirik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Munyiri Kamau). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ooeygui, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Lou Amadio). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @namkedia, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Namrata Kedia). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @stephenhuang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @How2Compute, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @jordanrh1, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Jordan Rhee). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @arturl, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Artur Laksberg). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @trmck, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Tre`Von McKay). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @mskalra, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahir Kalra). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @munyirik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Munyiri Kamau). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @djaus2, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @hxlnt, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @hxlnt, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @stephenhuang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @Daniel-Walther, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ezuidema, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @jslobodzian, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @increddibelly, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @MattGosline, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Matt Gosline). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @derekameer, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @ooeygui, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Lou Amadio). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @bfjelds, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brian Fjeldstad). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @msalehmsft, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Mahmoud Saleh). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alecont, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ale Contenti). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Rachit Bajpai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Artem Zhurid). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zhuridartem, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Artem Zhurid). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @tiagoshibata, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicogbg, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @alanch-ms, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor. If you're full-time or an intern, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @mabotaka, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @rachitb777, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor. If you're full-time or an intern, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @paulmon, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@jslobodzian,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@javiddhankwala,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @javiddhankwala, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @paulmon, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @paulmon, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @paulmon, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@derekameer,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@zhuridartem,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @paulmon, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@jordanrh1,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@zhuridartem,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@javiddhankwala,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@javiddhankwala,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @javiddhankwala, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@jslobodzian,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@jordanrh1,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@zhuridartem,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@javiddhankwala,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @javiddhankwala, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@rachitb777,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@derekameer,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@aviral04,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. \n@mohandatla,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@mohandatla,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@mohandatla,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@lflct,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@zhuridartem,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@JordanReimers,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @JordanReimers, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@JordanReimers,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@namkedia,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@sukusuma,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@paulmon,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@rachitb777,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@rachitb777,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@sukusuma,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@fractalguy,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot. \n@bfjelds,\nThanks for your contribution as a Microsoft full-time employee or intern. You do not need to sign a CLA.\nThanks,\nMicrosoft Pull Request Bot.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: bramptons sign nowYou have signed the CLA already but the status is still pending? Let us recheck it..  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: dldlsgh2 sign nowYou have signed the CLA already but the status is still pending? Let us recheck it.. ",
    "reneherrero": "Thank for the link on hot to contribute, I'll figure that out tonight.  I think keeping things synced up will be easier that way.\nNote that the IC has many more capabilities that I haven't yet explored (self-test, adjusting the gain to increase accuracy, ...).  Also, the algorithm that converts the 16-bit 2\u2019s compliment hex values returned by the IC to X, Y and Z values (which in turn are converted to a bearing) is off.\nAlso, here's where I got the PCB board from ($6 -> dirty cheap): http://www.amazon.com/gp/product/B00QAG7SH6\nThe board layout is a little odd as some of the markings are on the underside. You\u2019ll find yourself flipping it around quite a few times to make sure it\u2019s connected appropriately.  The nice thing is that it also exposes the DRDY pin (Data Ready, Interrupt Pin) allowing you to get the maximum output rate by monitoring the hardware interrupt pin (next in my TODO list).\nI anyone knows where I can find tilt compensating algorithms, please let me know!\n. ",
    "braegelno5": "Thanks i got it. If this link is not in the Main MD file it would be helpfull to place them there also, i think.\n. ",
    "djaus2": "Why not keep that file with the project code in the MS-IOT/Samples repository? That way updates to the documentation can be part of the specific project updates. Could have an automatic copy mechanism to https://github.com/ms-iot/content/tree/develop/en-US/Docs.\nPS I am looking at contributing a new project to Samples. How do I currently get my .md file up into Docs?\n. OK it works now thx.\nClosing\n. IoTGirl,\nI am just trying to get my head around contributing to the ms-iot/Samples repository.\nTo get things going, I have created a simple project to add, rather than modify an existing project.\nOK I have forked and cloned the whole repo and will add my project as a new folder.\nI will create a README.md for my project.\nMy question is what how do I action: You must have a page on the IoT Core samples pagehttps://developer.microsoft.com/en-us/windows/iot/samples corresponding to your code.\nThx david\n. So do I need to get an .md file into https://github.com/ms-iot/content/tree/develop/en-US/Samples?\nIn my case my project is called NoPopUps so I will need https://github.com/ms-iot/content/tree/develop/en-US/Samples/NoPopups.md??\nSo do I need to for the contents repo, place my NoPopups.md there and get it accepted, its sounding a bit recursive??\n. I'm working on a \"parallel\" site to list Community ms-iot samples . ",
    "IoTGirl": "Closing Stale - Site has been overhauled and is scheduled for another soon.. Fixed\n. Feedback taken by IoT Team member - Closing\n. @jpoon I would normally link to the fix, but in this case it looks like the fix has been in for quite some time so we do not have a direct change that we can point to. \n. Please use \"https://insider.windows.com/\" for feedback on IoT Pre-release images. \n. @dotMorten That poster is incorrect. Windows IoT Core no longer uses Connect for distribution and has shifted to Windows Insiders to align with the other versions of Windows 10.\n. Closed based on @zhuridartem's response\n. Confirmed - Closed\n. Blinky App has been updated to reflect 10586 (RTW) - Closing\n. Hi Brian,\nHas this issue been suitably captured so that it might be closed?\nSincere thanks,\nIoTGirl. Confirmed with Alan. No response in more than 1 month - Closing\n. Closing - No update for more than 1 month so I assume the issue is solved.\n. Hi demon-xxi,\nMy apologies regarding the time it has taken to reply but the team is confident they know the source of the issue now and have added a work item to their Agile backlog.\nMy understanding is that this will involve changes to the AllJoyn Explorer to add missing interface descriptions but as the team is Agile, I can not give you a timeline for when this issue will be addressed.\nSincerely,\nIoTGirl\nSincerely,\nIoTGirl\n. Repro secured and issue logged : See MSDN: https://social.msdn.microsoft.com/Forums/en-US/63c8f470-7f63-4ea3-929f-c11bd61d1929/accelerated-video-on-dragonboard-410c?forum=WindowsIoT\n. Closing as stale - No response for more than one Month\n. Feedback taken by Dev Team member - Closing issue\n. Hi MCE1978,\nI have re-consulted the team and again, they would like to focus on getting generic support rather than any specific device.  I am closing this request as rejected but a third party could certainly tackle any third party hardware support.\nSincerely,\nIoTGirl\n. Closing - No response from the original poster for more than 1 month\n. Closing - No response from the original poster for more than 1 month\n. Raspberry Pi does not support Direct X - https://social.msdn.microsoft.com/Forums/en-US/457f1b43-2779-4a92-abcd-3257be41e599/directx-support?forum=WindowsIoT \n. Hi Mika,\nthere was a big push done for connectivity work on RPi2&3 for builds 14366 and higher.  Are you still seeing this issue? If so can you tell us more about your environment?\nSincerely,\nIoTGirl\n. Closing based on no response after more than a month\n. Closing: No response from poster in more than one month\n. Closing based on Fix by Jordan\n. Feedback taken by IoT Team member - closed\n. Confirmed with Maggie - Closing\n. The sample csProj states \"Update SDK version to 10586 \".  This image does not support the Pi3 so this sample is not yet supported for Pi3.  Basically, if you are targeting Pi3, you are using a pre-release image and all samples are not expected to keep up with the myriad of changes in pre-release images.  Note that once a stable image is available, all samples will be run through a test pass for support on the release image.\nNOTE: This does not preclude you from taking the project and modifying it to make it work for your situation\n. Hi GrahamHorner,  This issue has been reviewed and your feature request has been passed to the Azure Team that supports gateway solutions.  We have no way of tracking it from this end so this request will be closed.  Sincere thanks for your request/idea.  IoTGirl\n. Hi Scott,\nI am closing based on answer given.  Please reopen if this does not address your question.\nSincerely,\nIoTGirl\n. Hi Torben,\nWhat does the sensor manufacturer say about the return value? Do you need to parse it in some way? \nSincerely,\nIoTGirl\n. There is a previous temp issue as well. See https://github.com/ms-iot/samples/issues/228 \n. Hi torbenvaering,\nI am sorry to hear that you have abandoned this project but I do hope you start another!\nAs there have been no more questions from you, I am closing this issue.\nSincerely,\nIoTGirl\n. Hi Jason,   There is really not enough detail here to move forward.  Can you try and provide more information?  At Microsoft we collect all the information needed to see the issue here and I have a simple template that might help you provide the detail we need. \nENVIRONMENT:\nWhat Computers, OS and devices are involved with this repro? How are they connected?\nREPRO STEPS:\nWhat steps would someone else need to follow to see the issue?\nRESULTS:\nWhat did you Expect to happen?\nWhat did Actually happen?\nNOTES:\nAny other details/workarounds potentially related info you can provide?\nSincerest thanks,\nIoTGirl\n. These samples are targeted for IoT Core of which there is no x64 version.  Can you tell me which board you are using? MBM, RPi or DragonBoard 410c?\n. Sorry Zeeshan, I have no BT hardware.\n. Hi JasonBu,\nI have some more information for you:\n- There are some known issues with Bluetoooth GATT on IoTCore ( See https://social.msdn.microsoft.com/Forums/en-US/3c6bb41c-6f1d-4e11-ba3a-fac208721bc7/new-flight-14955-released?forum=WindowsIoT) \n- These samples are focused and tested on platforms with IoTCore (MBM, RPi & DB410c) and that is only shipped with X86 support though I believe x64 can be created by an OEM\n- IoTCore does not support WOW64 so x64 versions will not run x86 code so your assumption \"I think x86 should work all right with x64 machine\" is not valid on this OS.  See https://social.msdn.microsoft.com/Forums/en-US/3e66b0ab-d332-4f5a-8b4c-cdbb3ca68ac3/i2ctesttool-and-spitesttool-cannot-find-controllers-in-iot-x64?forum=WindowsIoT \"WOW64 - the ability to run 32-bit executables on 64-bit OS is not supported on IOT core.\"\nCan you confirm with the latest version of Windows 10 (14393) and hardware you are using?  Can you also confirm the version of IoT you are using?  IoT Enterprise, IoT Mobile or IoT Core?\nSincerely,\nIoTGirl\n. Hi Jason,\nI am sorry I don't have a better answer for you but please take a look at the RFCOMM sample at https://github.com/Microsoft/Windows-universal-samples as that should be directly related to the desktop.\nYou are correct that UWP should work across the OS platforms but not all flavors of Windows 10 have the same API surface and the same capabilities available.  This repository is supported by the IoT Core Team but the repository above is supported by the folks you want to leverage.  Please try the RFCOMM sample and give feedback as to your experience on that sample share.\nSincerely,\nIoTGirl. You are \"Assigned\". Thanks Stefan! \n. Hi Edi,\nStepnanGordan has already stated that he will provide a sample in the previous item you answered. See https://github.com/ms-iot/samples/issues/284.  I am closing this as a duplicate.\nSincerely,\nIoTGirl\n. Hi mjmeans,\nCan you please confirm the devices involved? What preview build are you using?\nSincere thanks,\nIoTGirl\n. Hi mjmeans,   I have asked a member of the IoTCore Team to take a look. Sincerely, IoTGirl\n. Fixed \n. Hi Ed,\nAs this app is already featured in https://www.hackster.io/microsoft then we would not want to host a duplicate that might get out of date.\nClosing this request.\nSincerely,\nIoTGirl. Hi fumiya-kume,\nThere is no VB version but there is a C# version - See https://developer.microsoft.com/en-us/windows/iot/win10/samples/blinkyheadless.  There is no reason you could not use the logic in the C# version to create a VB project.\nMore sample links are available from https://developer.microsoft.com/en-us/windows/iot/win10/StartCoding.htm\nSincerely,\nIoTGirl\n. I'll need to do more digging but I suspect you will need to use a UWP version of WinHTTP.SetProxy.  Here is a previous version of the documentation https://msdn.microsoft.com/en-us/library/windows/desktop/aa384069(v=vs.85).aspx \nUpdate: Did more digging and did not come up with an easy solution so I have asked the IoT Team to review this scenario (8305489).\n. Hi Rudman,\nThe team has accepted this request as a work item and have added it to their backlog. \n\nWe are working on support for configuring the proxy on IoT via netsh.exe command. (9113049)  \n\nAs this team works on the agile model, I can't give you a timeline for this feature to be implemented.\nSincerely,\nIoTGirl. NOTE: Add WinHTTP netsh helper for proxy configuration in IoTCore images was checked in to address this request and should appear in an upcoming Insider build.. This should be addressed with @jhutchings1 merge. \n. Hi Saicharan,  Please take a look at http://stackoverflow.com/questions/30082322/windows-10-iot-raspberry-pi-2-dht22-am2302 as it explains the precision required for the sensor you are asking about.\nSincerely, IoTGirl\n. Can you please provide a link to the Microsoft Sample you are referring to that is failing?\n. Excellent! Thank you for the link. Assigned @rachitb777 to take a look.\n. Note that this forum is Windows IoT. Please leverage the resources at Azure IoT Hub.\n. Hi PRIMETSS,\nHave you tried this on other IoT Core platforms?  There are known issues with the GPU on RPi not supporting Direct X and therefore the graphics performance suffers. \nSincerely,\nIoTGirl\n. We have a video loop running on an MBM at the office without issue. Basic HD TV resolution, nothing fancy.  I would take a look at some of the other IoT Core offerings at https://azure.microsoft.com/en-us/documentation/articles/iot-hub-tested-configurations that are based on the same Intel chipset.\n. No update for more than 1 month - closing.  Please see the MSDN IoT Forums for more questions regarding IoTCore.. Page is: https://github.com/ms-iot/samples/blob/develop/README.md\nBad Link: https://developer.microsoft-int.com/en-us/windows/iot/samples\nCorrect Link: https://developer.microsoft.com/en-us/windows/iot/samples\n. This should be fixed now.\n. Thanks!\n. Hi David,\nYou need a description for the samples page and a page for your sample, does that clarify? If you take a look at some of the other samples in the repository you should get an idea of what is needed.\nSincerely,\nIoTGirl\n. Hi Shubham,\nDo you have an update? \nSincerely,\nIoTGirl. Great! I am closing this issue based on your success.. Hi John,\nThis is usually due to mis-matched tools versions. There are many threads like this one in the Windows IoT MSDN forums for example https://social.msdn.microsoft.com/Forums/en-US/fe438536-67e0-4771-a462-c64a64f8bfeb/windowsdevicesgpio-not-in-namespace?forum=WindowsIoT.  I suggest you follow up in that forum as this question is not related to a specific sample in MS-IOT GITHUB.\nSincerely,\nIoTGirl. Hi Tak1wa,\nBased on Brian's check in I am closing this issue.  Please reopen if you feel the problem has not been addressed.\nSincerely, IoTGirl. Hi juunas11,\nThe IOT Core team has accepted this request into their backlog (10105126) but as this team works on the agile model they can not provide a timeline for it to be reviewed/addressed.\nSincerely,\nIoTGirl. Hi Jay,\nYou should be able to make your own projects and even build your own images with the information that can be found through WindowsOnDevice.com.  Specifically please see WindowsOnDevice.com>Samples.\nSincerely,\nIoTGirl. Hi Daniel,\nPlease review the suggestions by serusako for final submission.\nSincerely,\nIoTGirl. Hi Daniel,\nOne last fix! Please review serusako's latest request.\n Sincerely,\n IoTGirl. Thanks for your input Daniel!. Hi v-tbert,\nNo specific to only alljoyn but I would expect such a violation if I attempted to access any object property after it was shut down. Can you please provide far more detail as to how this message is generated and why you think it is in error?\nSincerely, IoTGirl. Closing - No response. Closing duplicate - See https://social.msdn.microsoft.com/Forums/en-US/d09494a0-f0af-434a-9e77-72da7500a8bb/windows-10-iot-speech-languages?forum=WindowsIoT and other similar threads. Hi Eg-Virus,\nThere are known issue with the RPi3 miniUart.  Please try other settings or use a device with a full UART implementation.\nSee https://social.msdn.microsoft.com/Forums/en-US/b1d0a1f3-3ef2-4b74-afa9-f0a75e530a64/accessing-pure-uart-on-windows-10-iot?forum=HardwareBoards \nSincerely,\nIoTGirl. Hi DJaus2,\nMany thanks for that alternate sample location.  However, this forum is for issues related to the GitHub content. Closing as there is nothing for MS to address here.\nSincerely,\nIoTGirl. Closing as you have an answer at your prior post.. Closing based on our confirmation. There is a blog at https://blogs.msdn.microsoft.com/iot/2016/01/26/using-power-bi-to-visualize-sensor-data-from-windows-10-iot-core/. @florindpreda  As you have no further questions I am closing your issue.. Hi Leonardo,\nAs you have the sample are you able to step through the code and identify the changes you would like to make for your implementation?  These are samples and not robust solutions so likely they would need more work before being ready for a real world product.\nSincerely,\nIoTGirl. Hi Leonardo,\nThis is the correct forum for that posting as it relates to a sample within this repository. \nSincerely,\nIoTGirl. Hi Paul,\nIs this addressed by your other Pull request?\nSincerely,\nIoTGirl. Hi CaseyLu,\nThere is an existing issue at https://social.msdn.microsoft.com/Forums/Windowsserver/en-US/57d40f2a-399a-46d9-91da-6e6c273baf13/cbs-status-failure-unable-to-debug-the-deploy-driver-to-rpi3?forum=WindowsIoT that indicates this error may have been the result of mis-matched tools.  Can you confirm the actual version number of both the device OS and ADK/SDK/WDK you have installed?\nSincerely,\nIoTGirl. Hi @CaseyLu,\nAs you have not responded I would ask that you follow up on the forums thread above if you have more questions regarding this issue.\nSincerely,\nIoTGirl. Hi Andre,\nHave you tried repairing the toolsets in question? ADK/SD?WDK?  Also can you confirm that the versions all match?\nSincerely,\nIoTGirl. Hi Andre,\nIs this still an open issue for you?\nSincerely,\nIoTGirl. Hi @MyersMade ,\nI will ask someone to review this issue but please be aware that there are a number of issues with the USB hardware Stack in the RPi.  Have you seen this issue on any other platform?\nSincerely,\nIoTGirl\n. This issue has been cross posted - https://social.msdn.microsoft.com/Forums/en-US/a299cdbf-6087-4f37-baa9-43e9f8cea2af/serial-rs232-datawriterstoreasync-causes-blue-screen-in-windows-iot-core?forum=WindowsIoT#6b167353-a856-4ab2-b372-31eea9d12cc6  Adding the link for tracking.\n. Hi @rajnishc8,\nThe message 'wrl\\client.h' says you are missing the \"wrl\" or Windows Runtime Library files.  Are you sure you have installed all the required tools to use the IoT Core samples?  \nSincerely,\nIoTGirl. Thanks for the update Rajnish!. Hi @rajnishc8,\nDo you have VS 2015 also installed on this machine?  The packages seem to only attribute to one or the other not both versions of VS so if you have VS2015 installed, it may be that the packages are actually attached to that prior version of VS rather than VS 2017.\nSincerely,\nJustine. Hi @bfjelds,\nDoes  the sample documentation also need to be updated to indicate the correct repository wrt background vs Nodejs samples? \nSincerely,\nIoTGirl. Hi @akeilox ,\nPlease research this with the repository owners at https://github.com/Microsoft/opencv/issues \nSincerely,\nIoTGirl. Rejecting - No description and many conflicts. Depending on your hardware choice you are likely to bottleneck pretty quickly.  What have you tried?. Hi @btusca,\nIf you are using the distributed image, the SoftAP should be enabled by default. Are you attempting to disable it?\nTake a look at http://###.###.###.###:8080/#Onboarding replacing the # with the IP address of your device to see the status/settings of the SoftAP.\nSincerely,\nIoTGirl. Hi @aegiMt,\nPlease submit a code change request rather than sample txt like this.  Code change requests can be code reviewed and accepted in place rather than adding this complexity.\nSincerely,\nIoTGirl. Hi @phardesty,\nHave you looked at David Jones's post regarding the Ti Sensor tags?  Maybe it would help.\nhttp://www.embedded101.com/Blogs/David-Jones/entryid/782/Bluetooth-BLE-Creators-Edition-and-RPi3-issue-\nSincerely,\nIoTGirl. ",
    "superlime": "Sorry for the delay!  Was out on vacation.  Publisher info should be fixed now.  :)\n. ",
    "rachitb777": "You can use the powercfg tool to set display timeout property. You can run the following command from PS/SSH \npowercfg -x -monitor-timeout-ac 1\nIoTCoreDefaultApp doesn't have any code for display standby.\n. Thanks for the feedback. We are looking into adding APIs for power-management in our future releases. \n. We have added Keyboard layout setting in the IoTCoreDefaultApp. Skip OOBE and then goto settings to change the keyboard layout. \n. Changes looks good to me. \n. Looks good to me. \n. This is fixed now. It might still wrap on low resolution displays as there is simply no way to show enough information.\n. Looks good. \n. Looks good. \n. +1\n. Looks good. \n. Looks good. \n. Looks good. \n. Looks good.\n. Looks good. \ud83d\udc4d \n. @jwillmer Do you see IoTBlocklyBackgroundApp [Startup] listed in the apps page in Windows Device Portal? \n. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . Looks good. . \ud83d\udc4d . Looks good. Added a few comments. Also please rebase the changes on ms-iot/develop. \ud83d\udc4d . Can you change this as well. \n. Make them consts as well. . No change here. Remove the extra space. . Add this to resex. Remove if this is not used. . display. ",
    "Dids": "Thank you, that does indeed work! I had no idea that something like the powercfg tool was also available on IoT. :)\n. I don't suppose there's a way to hook up an event handler to detect standby/wakeup?\nI'm essentially trying to trigger a pin on my Rasberry Pi, which will turn my display off (or on).\nI'm currently using a countdown timer to do so, but I couldn't find a way to have a global tap/mouse handler for the entire app, so I'm manually triggering the pin when any buttons in my app are pressed.\n. ",
    "turkycat": "Are we also checking in the Arduino echo sketch or documenting the steps to recreate?\n. As a general comment, I've noticed that your source files have inconsistent formatting. I realize this is very nitpicky, but I think formatting consistency shows attention to detail and high quality. For example, there are lines with variable declaration and initialization not separated by spaces:\nvar obj=new Object()\nand others that are\nvar obj = new Object()\nSome methods also begin on the very next line (no whitespace) after another method's closing brace, where as others do not (have one empty line). VS auto-format abilities can fix these (and other) little details for you. You can set your formatting preferences in Tools > Options > Text Editor and then auto format your documents by selecting relevant sections (or select all) and type CTRL + K, F (without releasing CTRL)\n. Have you updated the WOD content to show support for the 3008 chip as well as an additional step to verify the pin number is correct depending on which board you are using?\n. I'll sign off, 2/2\n. looks good\n. is this an abstract from the RFCOMM sample?\n. should you be error checking here that selectedDevice is not null?\n. Looks like you aren't using this. You are using local variable with the same name. You may want to remove the member variable, or remove the local variable instead to avoid confusion. If you choose the 2nd option, add 'private' qualifier.\n. Why is this commented out? In my experience, the DeviceCapability for RFCOMM must have:\n<Device Id=\"any\">\n  <Function Type=\"name:serialPort\" />\n</Device>\nIn order for the capability to work.\n. Should we clarify the step here? the comment says to 'uncomment' but is wrapped around #if blocks.\n. remove this comment\n. consider making these member variables for the class? I noticed we have these strings as well as four Language objects which actually only point to two objects (en_lang and InputLang). Are they all necessary?\n. ",
    "Sumahitha": "Thank you for reporting this problem. We are currently investigating.\n. These changes were tested on all 3 platforms and also reviewed by another team member\n. Hello,\nCan you provide some more details? Are you using the on-board UART or a USB-to-TTL device? What IoT device are you using? Are you seeing this problem when you use the sample?\nThanks!\n. Can you please post the code you are using? Also please give us a brief description of what your expected outcome is -  how are you using the coin device? Are you are using Raspberry Pi or Minnowboard Max or Dragon Board.\n. The Read operations look correct. Please check the following:\n1. Hardware connections -  the TX from the coin device is connected to the RX on the UART pins and RX from the coin device is connected to the TX. Please ensure that GND is also connected correctly\n2. You have used DeviceInformation entry = (DeviceInformation)selection[0]. Please make sure that entry [0] corresponds to the UART you have connected to the COIN device. I would suggest to use UART0 (which does not have the control pins). But the coin manual should be able to give better guidance here\n3. Also try to simplify your read write to verify and then add on the timer code\n4. If possible connect the coin device to your computer via any terminal to verify that the serial port on that device works as expected.\nHope this helps and good luck!\n. Also please make sure that the serial capability is added to your project - package manifest\n<Capabilities>\n    <DeviceCapability Name=\"serialcommunication\">\n      <Device Id=\"any\">\n        <Function Type=\"name:serialPort\" />\n      </Device>\n    </DeviceCapability>\n  </Capabilities>\nRefer here for more details: http://ms-iot.github.io/content/en-US/win10/samples/SerialSample.htm\n. this particular UI element is set to 400 to read the contents easily. We have verified the UI with various screens and it is consistent.\n. I tried to check-in the generated files that were already checked in. I did not want to remove any that were already there but I did not add any new ones\n. ",
    "marcusrussell": "Hello pwi1263,\nThis behavior has been improved, and the resolving changes are available in current releases.  Keyboard input should be functional in the scenario you describe with the latest content. You can get the latest content from the following link: http://go.microsoft.com/fwlink/?LinkID=625104 \n. Hello VTNI,\nThanks for your feedback.  We are considering developing a 433 MHz code sample and will update this post with our plans and progress.\nThanks\n. Assigning to Jesse, who has a task associated with this topic.\n. ",
    "ianlee74": "Artem,\nThank you for the explanation. I was able to get it working by enabling the loopback exemption for the AllJoyn Explorer application.  Unfortunately, this was not well documented in the manual and makes an assumption that someone already knows the package ID of that application.  I worked out a process that is easier to follow.  You may want to update the manual.\n1. Start AllJoyn Explorer.\n2. Open Task Manager and find AllJoyn Explorer in the Processes list.\n3. Right-click on AllJoyn Explorer and select \"Properties\".\n4. In the General tab, you will see a name such as \"adff22a6-72bc-4137-be64-04899205e0a71.0.1.5_x64_hk7qwdpjbkp1m\".\n5. Open a Command Prompt (in Administrator mode).\n6. Type \"CheckNetIsolation.exe LoopbackExempt -a -n=adff22a6-72bc-4137-be64-04899205e0a7_hk7qwdpjbkp1m\".\n   Note that the last parameter is the combination of the two highlighted portions from # 4.\n7. Restart AllJoyn Explorer and it should be able to successfully introspect your producer's interfaces.\nDo you have any plans to release the source code for this sample app?  I'm building something similar for my needs.  This would have been a great starting point.\nThanks!\nIan\n. +1 for making the AllJoynExplorer source available.  I've also started a customized version of something similar.  Given this is an app that basically everyone developing for AllJoyn on Windows uses, I think there would be great value in making it available as a reference project.\n. ",
    "jordanrh1": "The performance is barely there as-is ... I don't think a C# version will be able to meet the necessary timings.\n. What build number are you running (type 'ver' at the SSH prompt)? The DHT11 sample only works on build 10556 and higher.\nThe sample is right on the edge performance-wise of being able to service the DHT11. If there is significant background activity (e.g. network, USB, disk, video activity) it could prevent the sample from working correctly.\n. Sent code review: http://codeflow/Client/CodeFlow2010.application?server=http://codeflow/Services/DiscoveryService.svc&review=jordanrh-ad206d95ad7a4edfa0ca063ef29ad671 \n. Codeflow Review\n. Code review has been completed.\n. Hi Zach, do you have a code sample where this is working correctly, like on an Arduino?\n. I'm sorry that you running into issues with the DHT22. The sample was tested only with a DHT11. I've ordered a DHT22 and will update the sample when I can verify the fix with a DHT22.\n. No, C++ only.\n. Yes, that is expected.\n. Use System.Diagnostics.StopWatch.\n. Are you using the 'master' branch or the 'preview' branch? There are known issues with the sample that will be fixed in the next OS version.\n. Please try the 'preview' branch on the latest OS version.\n. It doesn't make any sense. These lines should have no effect on the serial port operation. Could there be another reason ReadAsync isn't returning data? How is data being written to the port?. I verified the sample on both the DHT11 and DHT22 and the calculations were correct. I accepted a previous pull request that claimed to correct the math, but it was wrong and I had to revert the change. I'm sorry but I cannot accept this pull request without seeing the issue and fix firsthand.. ",
    "ricl": "None of the IoT sample apps run well/at all on 800*480 screens (which is a common screen size for the Pi).\n. It would appear that both\nFrame rootFrame = Window.Current.Content as Frame;\n        rootFrame.Navigate(screenType, parameter);\nand\nFrame rootFrame = Window.Current.Content as Frame;\n        rootFrame.GoBack();\nALWAYS call the constructor on the Page referenced. This is regardless as to whether the Page is in the BackStack or not.\n. SOLVED:\nAdd\n...\n            this.InitializeComponent();\n            this.NavigationCacheMode = NavigationCacheMode.Enabled;\n...\nto all the pages to allow for correct BackStack implementation on IoT Core.\nConstriuctors are then not called (unless needed) on .Navigate(...) or .GoBack()\n. :-) The actual destination directory is of course up for grabs. The only\nreasons for suggesting /PROGRAMS/... are\n1. It's where they always were back in the day....\n2. It's a path without spaces in its name (banish the risk of spaces now!)\n3. It works currently in 10240 and 10556 with both Admin and User privileges\n4. It provides a useful point at which to spawn the various sub directories\n   that individuals might like to accumulate from elsewhere (i.e. Manufacturer\n   named)\nP.S. C applications are always the last....\nOn Mon, Oct 26, 2015 at 2:42 PM, Brian Fjeldstad notifications@github.com\nwrote:\n\nThanks for the feedback! To be honest, when we put the Console application\nsample together, I don't think we gave a tremendous amount of thought as to\nthe destination directory (especially given that it is completely\nconfigurable). We will look into what the most appropriate location is for\nuser scenarios (it might be more practical to aim at windows\\system32?) and\nwhere we can access (given that MSVSMON is typically running as\nDefaultAccount, it may not be feasible to point at certain directories).\nThe reason that the Console Application requires more work than the UWP\napps do is mainly an issue of prioritization. The first priority was (and\ncontinues to be) getting UWP apps that can be developed and run across all\nMicrosoft platforms. As we progress, IoT will continue to work with Visual\nStudio to make our customers' priorities smoother and simpler! Towards that\ngoal, we will certainly think about how we can make developing the C++\nConsole Application a better experience.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ms-iot/samples/issues/128#issuecomment-151160204.\n. 1. It means we don't need to step on the /Windows directory which might\n   muddy things\n\nOn Mon, Oct 26, 2015 at 2:58 PM, Richard Linsley-Hood \nrichardlinsleyhood@gmail.com wrote:\n\n:-) The actual destination directory is of course up for grabs. The only\nreasons for suggesting /PROGRAMS/... are\n1. It's where they always were back in the day....\n2. It's a path without spaces in its name (banish the risk of spaces now!)\n3. It works currently in 10240 and 10556 with both Admin and User\n   privileges\n4. It provides a useful point at which to spawn the various sub\n   directories that individuals might like to accumulate from elsewhere (i.e.\n   Manufacturer named)\nP.S. C applications are always the last....\nOn Mon, Oct 26, 2015 at 2:42 PM, Brian Fjeldstad <notifications@github.com\n\nwrote:\nThanks for the feedback! To be honest, when we put the Console\napplication sample together, I don't think we gave a tremendous amount of\nthought as to the destination directory (especially given that it is\ncompletely configurable). We will look into what the most appropriate\nlocation is for user scenarios (it might be more practical to aim at\nwindows\\system32?) and where we can access (given that MSVSMON is typically\nrunning as DefaultAccount, it may not be feasible to point at certain\ndirectories).\nThe reason that the Console Application requires more work than the UWP\napps do is mainly an issue of prioritization. The first priority was (and\ncontinues to be) getting UWP apps that can be developed and run across all\nMicrosoft platforms. As we progress, IoT will continue to work with Visual\nStudio to make our customers' priorities smoother and simpler! Towards that\ngoal, we will certainly think about how we can make developing the C++\nConsole Application a better experience.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ms-iot/samples/issues/128#issuecomment-151160204.\n. Or create a brand new directory from the root and move into a new world.\nc:\\IoTWin32{Manufacturer}{MyProject} perhaps.\n\n\nOn Mon, Oct 26, 2015 at 3:36 PM, Brian Fjeldstad notifications@github.com\nwrote:\n\nThat's great insight and I've added all of that to our bug tracking this!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ms-iot/samples/issues/128#issuecomment-151176913.\n. That should do it\n. \n",
    "SlavyMihov": "This issue has been brought to the attention of the app contributors and will be addressed.\n. Yes, the apps have already been updated to display properly on small screens.\n. Thank you for your comments. I'll be taking a look at the issue. Can you describe me your setup? Which version of VS and SDK do you have installed?\n. ravindrank, did you try building/deploying any of the other sample applications? Do you see the System.Runtime.dll missing error with any of them, or is the error specific to the DigitalSignage app?\n. In order to avoid uninstalling/reinstalling the NETCoreUniversalWindows platform Nuget package and have this automatically resolved when you first rebuild the solution, you can try enabling automatic package resolution by the NuGet Package Manager:\n1. open Tools -> NuGet Package Manager -> Package Manager Settings\n2. select NuGet Package Manager -> General\n3. check \"Allow NuGet to download missing packages\" and \"Automatically check for missing packages during build in Visual Studio\"\n. No, that is not necessary/desired.\nWe can have image slideshow and audio playback going on simultaneously. On the other hand, when video is playing, then we collapse/pause audio playback and image slideshow.\n. The local paths use backslashes (\"\\\") while the URLs use forward slashes (\"/\"). Therefore LastIndexOf('/') above will only affect the URL paths. Filenames in subfolders on the local filesystem should be resolved correctly as defined in the Assets\\config.xml file.\n. ",
    "jpoon": "@IoTGirl what does that mean? Are the apps being updated to support running on smaller screens?\n. Cool. \ud83d\udc4d \ngitetiquette: link the issue with the PR.\n. It's strange to have a zip file of source code within a repository as you prevents browse/search/maintain history of the code through git and GitHub.\nAs a suggestion, as the dsb.git is a git repo, add these as a git submodule? \n. ",
    "TorstenStein": "The zip files are provided to contain only the code needed for the sample. You can find the complete open source tree here: https://git.allseenalliance.org/cgit/dsb.git\n. ",
    "dotMorten": "This pattern is extremely annoying and prevents us from seeing the history here, bloats the git database and the download. Also the AllJoynExplorer app doesn't even have source code, but just the appx.\nIf these aren't samples, but copies from elsewhere, what are they doing here in the sample repo?\nThis isn't how you do versioned source control:\n\n. Thanks. Let me know if you need me to make any adjustments. Layout should stay more or less the same on higher resolution screens, but had to move some scrollable areas around (or add scrollable areas)\n. ...to work with even smaller screens some more serious changes are needed (ie reduce font sizes and margins). Would be good to use some adaptive triggers to do that so really small screens work too, but I didn't want to go ahead and make so serious changes to your app just yet (and the above changes would still be needed and a step in the right direction)\n. I'll fix the cancel/next issue before Monday. Good catch!\n. @zhuridartem \n. The Gen5 adapter uses a different serial device driver, which I'm pretty sure doesn't work with IoT Core.\n. @AndreyShpilevoy Make sure you vote (or suggest if it's not already there) on connect: https://connect.microsoft.com/windowsembeddedIoT/Feedback\n. @iotgirl the location that @AndreyShpilevoy posted, is the place the IoT team keeps telling us to use\n. @TheFlyingDutchMark Is your z-stick correctly paired with your z-wave devices?\n. I think your next step is to download the source code for the zwave adaper in this repo and step through it to see where it stops. I'm guessing the adapter doesn't work quite as well as you think and isn't really found? If so, check around here if it finds an adapter: https://github.com/ms-iot/samples/blob/develop/AllJoyn/Samples/ZWaveAdapter/AdapterLib/ZWaveAdapter.cpp#L646\nAlso you can try and run the app on your PC instead, where the driver issue shouldn't be a problem (run the headed app there as opposed to the headless app on IoT)\n. @stephenhuang Yes I can provide you with this, however, can you help guide me to solve the issue on the last paragraph?\n. Got it! What do you want on the screensaver? Do you have a PNG or JPEG I can use? Perhaps a Windows IoT Core logo?\n. @stephenhuang Alright! Check out the PR and let me know what you think.\n. @zhuridartem Are you guys looking into providing this library as a nuget package for easy consumption? If not I'll be happy to do that, but figured I would ask the owners first. the DeviceProviders library is hugely useful for generic device consumers.\n. I put up a nuget package of the DeviceProviders here: https://www.nuget.org/packages/dotMorten.AllJoyn.DeviceProviders I hope you're ok with this.\nStill it would be great with an official package released by Microsoft, but I'm happy to maintain this package too.\n. @koapeadu Glad you found it useful. I just published another library that builds on top of the device providers lib and exposes the common AllJoyn devices in an easy to use way: http://github.com/dotmorten/AllJoynClientLib\n. FYI @zhuridartem \n. Sad Panda :-(\nQuite useful to have a device next to you to monitor alljoyn services while debugging\n. @zhuridartem Was just thinking... I'm not sure if line 713 needs a similar fix? Couldn't really make sense of it.\n. @zhuridartem Strike that. The edit in the second file was apparently already fixed in your dev branch and I wasn't paying attention when merging my fix over* :). So only thing left is the nullable stuff.\n*Btw this also means you should update the DSB project template in the visual studio gallery, since the dictionary key check is a quite important fix.\n. Being able to configure the wifi using AllJoyn onboarding is really cool. Why remove this?\n. Just a comment: I only added the string resource to en-US. Not sure what your process is for localizing\n. @bfjelds This is not the reference needed for building the templates. This is the project.json that goes into the generated project. Without it, none of the .NET APIs are available when you create a new project:\n\nThe project won't compile until you add this. I do indeed use the templates from the VS Gallery, but these templates are broken, and won't compile until you add the entry to project.json. All the other .NET Project Templates has this entry. Only the background tasks are missing out.\nI'm guessing they were never correctly updated after VS2015 shipped (this entry wasn't needed in the previews)\nThis pull-request fixes this. However you will need to regenerate the project templates and update VS Gallery afterwards.\n. @bfjelds I should probably have done this first, but I just added an issue with repro steps and more details and linked to it in the PR description.\n. @bfjelds That's odd. All other projects works just fine except the background task ones. I even uninstalled the project template and reinstalled. I'm using VS2015 Update 1.\nAlso why are all the other .NET project templates in this repo including the reference then?\n. @nicogbg Just an FYI I noticed 3 .bak files in the PR you probably didn't intend to add ;-)\n. /CC @zhuridartem \n. @zhuridartem If I were to rewrite the DSB so a IDeviceAdapter instead has an IVector<IDeviceBusObjects> which in turn has list of IVector<IDeviceInterfaces> which has a collection of properties, methods and signals, would you be open for changing the DSB here? If not, I'll probably create my own (competing :smile:) version\nI can see a huge benefit of this for especially .NET developers, because it becomes really easy to implement any interface and group them so they follow the specifications.\n\nDSB was designed to project a generic device to an AllJoyn representation. \n\nI don't know what this means. You can't implement any alljoyn representation which is what I would think \"generic\" means.\nYou currently have properties on any number of interfaces, and methods and signals on MainInterface only. This is extremely inconsistent.\n\nTo unblock anybody for adding signals and methods to a specific interface: please follow similar model as LSF and Control Panel special handler in BridgeRT.\n\nSo what you're saying: Just write it in C++ against the Alljoyn_C library? I took a look at the LSF implementation. It's an ridiculous amount of tedious code that I could cut into a fraction with my approach, not to mention you'll be inviting a huge amount of C# developers to the AllJoyn party. The bridge is so close to function from the C# end, and fairly easy to work with.\n. If anyone is interested, just published my modified (read: much improved :smile:) DSB to nuget: https://www.nuget.org/packages/dotMorten.AllJoyn.DSB/\nNow you can create bridge devices in just a few lines of code, like this HAE device: https://github.com/dotMorten/AlljoynDSB/blob/dev/src/AllJoyn.Dsb.MockDevices/MockCurrentTemperatureDevice.cs#L58-L67\nThis meant I could delete a HUGE amount of code from all my various DSB services and just reference this nuget instead.\nMain benefits:\n- You can implement multiple bus objects with multiple interfaces. Each interface can have properties, methods and signals, so you can finally match the alljoyn specifications.\n- MainInterface is finally gone\n- Much easier programming pattern for C# devs\n- The DSB now allows you to set a proper name for the DSB device itself. If you have multiple DSBs on your raspberry, they don't all have the same name. \n. Seems like something is borked on my Visual Studio installation. Doesn't work for any C++ background tasks (C# projects works however).\n. ",
    "JohnMasen": "Background App(Aka: headless app) may be an option. it has no UI and can start automatically with OS.\nps: you need use IoTStartup command to set your headless app run at startup.\n. thanks guys, this answered my question. I can continue work with my MQTT_DSB now :)\n. ",
    "TheUltimateC0der": "Hey guys,\nthank you for your fast reply.\n@JohnMasen : Background Apps, are not suitable for my needs, i have to access the filesystem, in order to update my application. As far as i know, you cannot access the filesystem as from a normal UWP application. If i missed something, please point me to the right direction :)\n@mms- : Good mention with the ClickOnce. That would be very handy to use. Another possible way would be, to publish the application to the normal store, so others can install them on their devices as well, from like Webb ?! maybe ?. I think it is just easy as a pie, for the @msftgits guys to add a new category or something like that. I think that would be a plus for the new eco system, microsoft is trying to implement with iot.\nCheers Guys !\n. Hey guys. Any updates here ?\n. When will VB.Net or C# will be supported ?\n. ",
    "StepMan91": "Thank you !  very good screenshot\n. ",
    "TychosNose": "Thank you for pointing out this bug. You are correct in that the MCP3008 is 10-bits.\nThe comment\n     /*Uncomment if you are using mcp3208/3008 which is 12 bits output */\n should be\n     /*Uncomment if you are using mcp3204/3208 which is 12 bits output */\nUnfortunately, there doesn\u2019t appear to be code for the MCP3008 in this sample as is. But, it isn't much to make the code work with the MCP3008. Here is what you need to do.\nFor reference, here is the MCP3008 datasheet. Take a look at Figure 6-1 in the datasheet for reference. I\u2019ll assume you are using channel 0 (Pin1) on the MCP3008.\n1) Replace this code:\n/*Uncomment if you are using mcp3002*/ \nint result = data[0] & 0x03; \nresult <<= 8; \nresult += data[1];\nWith this code:\n/*Uncomment if you are using mcp3008*/ \nint result = data[1] & 0x03; //note we are using the second byte here instead of the first\nresult <<= 8; \nresult += data[2]; //note we are using the third byte here instead of the second\n2) Find the following code which should be around line 100 in the same file\n/*Uncomment if you are using mcp3002*/ \nbyte[] readBuffer = new byte[3]; /*this is defined to hold the output data*/ \nbyte[] writeBuffer = new byte[3] { 0x68, 0x00, 0x00 };//01101000 00;\nAnd replace with this code:\n/*Uncomment if you are using mcp3008*/ \nbyte[] readBuffer = new byte[3]; /*this is defined to hold the output data*/ \nbyte[] writeBuffer = new byte[3] { 0x01, 0x80, 0x00 }; //00000001 10000000 00000000\nGood luck! Let us know if you have any more issues.\n. ",
    "sebagomez": "Cool thanks. Will let you know how it went\n. ",
    "grahamehorner": "@PatGet have you performed a reboot after changing the Language Settings; I had something similar with regards to date/time region; and it's because of the system/thread culture change isn't detected by the app.\nA restart stored it for me\n. https://github.com/ms-iot/samples/issues/147\n. doh! I feel really stupid now! yes that is the DefaultApp   Thanx for pointing me in the right direction. \n. I'm looking for the source code for the web management page; but can't seem to locate this? @piwi123 any pointers greatly appreciated.\n. If that is the case the Raspberry PI that is not receiving the time NTP on boot; have confirmed that this is the case when using WiFi as well as wired.\n. I'm running build 10.0.10556.0 and w32tm /query /status returned [minwinpc]: PS C:\\Users\\Administrator\\Documents> w32tm /query /status\nLeap Indicator: 3(last minute has 61 seconds)\nStratum: 0 (unspecified)\nPrecision: -6 (15.625ms per tick)\nRoot Delay: 0.1842967s\nRoot Dispersion: 8.0847694s\nReferenceId: 0x00000000 (unspecified)\nLast Successful Sync Time: 11/9/2015 9:24:14 AM\nSource: time.windows.com,0x9 \nPoll Interval: 10 (1024s)\nhowever the time is incorrect\n. I've also ran \n[minwinpc]: PS C:\\Users\\Administrator\\Documents> tzutil /s 'GMT Standard Time'\n[minwinpc]: PS C:\\Users\\Administrator\\Documents> w32tm /query /status\nLeap Indicator: 3(last minute has 61 seconds)\nStratum: 0 (unspecified)\nPrecision: -6 (15.625ms per tick)\nRoot Delay: 0.1842967s\nRoot Dispersion: 8.0847694s\nReferenceId: 0x00000000 (unspecified)\nLast Successful Sync Time: 11/9/2015 5:24:14 PM\nSource: time.windows.com,0x9 \nPoll Interval: 10 (1024s)\nseveral times the date/time is doesn't change?\n. @cmaloney-msft local GMT time is 11:00am the Raspberry PI is showing 2:40am;  the w32tm /tz shows \nminwinpc]: PS C:\\Users\\Administrator\\Documents> w32tm /tz\nTime zone: Current:TIME_ZONE_ID_STANDARD Bias: 0min (UTC=LocalTime+Bias)\n  [Standard Name:\"GMT Standard Time\" Bias:0min Date:(M:10 D:5 DoW:0)]\n  [Daylight Name:\"GMT Daylight Time\" Bias:-60min Date:(M:3 D:5 DoW:0)]\ncorrection the app is showing 2:40am; while the date command on the Raspberry PI shows \n[minwinpc]: PS C:\\Users\\Administrator\\Documents> date\nTuesday, November 10, 2015 11:04:52 AM\ncould this be that the system account is running in a different local to that of the administrator account?\n. OK, so after some checks the date and time only gets updated in the app after a reboot? you can change the timezone and datetime via remote powershell but it seems to have zero impact until the raspberry pi is reboot?\n. Yes, thanks the Raspberry PI needs a reboot when changing timezone otherwise the DefaultApp will show the incorrect time, it would be good to allow the user to seect the timezone via the DefaultApp simlar to the language selection.\n. the VSIX tools for AllJoyn\n. I think that support for coreclr should be done in a platform agnostic way similar to the way the aspnetcore team use libuv for kestrel, .net should have a AllJoyn implementation abstraction layer, this allowing .net cross platform AllJoyn applications.\n. which sample do you refer to ? there are lots of samples and some are/have C# ?\n. This could be as simple as providing a resx for the board named something like RaspberryPi.resx, RaspberryPi3.resx, MinoboardMax.resx etc. which can be dynamically loaded. \n. ",
    "vtni": "Hi,\nare there any news about this?\n. Any news?. ",
    "EdiWang": "I have got a 315 MHz working, it's very straight forward, when your remote send signal to the receiver, the corresponding pin will output GPIO.High, so in your code, just check for the particular GPIO Pin input, there's really nothing special here. I think it's the same thing with 433 MHz also.\nI have write a blog post about this http://edi.wang/post/2016/5/21/windows-10-iot-remote-door-control but it's in Chinese. Hope it will help. \n. I use code from https://www.hackster.io/porrey/dht11-dht22-temperature-sensor-077790?ref=part&ref_id=9417&offset=15 seems to be accurate on my RPi3\n. I agree. I am also looking for the I2C version instead of SPI version of SSD1306, but I can not find it anywhere, seems nobody has written code for this on Windows 10.\n. WOW! Thanks very much @stefangordon \nThat's exactly what I am looking for!\n. ",
    "miniatur": "Gesendet\u00a0von\u00a0meinem\u00a0BlackBerry\u00a010-Smartphone.                                                                                                                                                                                                                Von: alecontGesendet: Freitag, 2. Oktober 2015 03:20An: ms-iot/samplesAntwort an: ms-iot/samplesBetreff: Re: [samples] Cleanup loc strings and fix the ko-KR issue (#92)Closed #92.\n\u2014Reply to this email directly or view it on GitHub.\n. ",
    "dankuo": "Hello,\nTry using these values instead:\ncs\nprivate const UInt32 SCREEN_WIDTH_PX = 128;                         /* Number of horizontal pixels on the display */\nprivate const UInt32 SCREEN_HEIGHT_PX = 32;                         /* Number of vertical pixels on the display   */\nprivate const UInt32 SCREEN_HEIGHT_PAGES = SCREEN_HEIGHT_PX / 8;    /* The vertical pixels on this display are arranged into 'pages' of 8 pixels each */\nYou were correct in changing SCREEN_HEIGHT_PX to 32. However SCREEN_HEIGHT_PAGES should remain at its original value. This calculates the number of 8-pixel tall pages on the screen, so we continue to divide by 8. Also since your display is only 32 pixels tall, you only get lines 0 and 1 for text. You'll need to comment out the code where the sample tries to write out lines 2 and 3.\ncs\n/* Update the SPI display to mirror the textbox contents */\nprivate void DisplayTextBoxContents()\n{\n    try\n    {\n        ClearDisplayBuf();  /* Blank the display buffer             */\n        WriteLineDisplayBuf(Display_TextBoxLine0.Text, 0, 0);\n        WriteLineDisplayBuf(Display_TextBoxLine1.Text, 0, 1);\n        //WriteLineDisplayBuf(Display_TextBoxLine2.Text, 0, 2); // Comment this out\n        //WriteLineDisplayBuf(Display_TextBoxLine3.Text, 0, 3); // Comment this out\n        DisplayUpdate();    /* Write our changes out to the display */\n    }\nWith these changes, you'll only be able to use the first two textboxes in the UI to input text. Once you have the display working, you can remove those two lines from the UI.\nRegards,\nDaniel\n. What are you seeing on the screen now?\n. Thanks for your contribution! We'll review your pull request shortly.\n. Hi there sely2k,\nBefore we can merge your pull request:\n1.  Please add your code as a separate project under a different folder (For example, you can use this path for your project instead: ms-iot/samples/SSD1306Display).\n2.  Would you mind removing the 3rd party Adafruit library and in your documentation reference how to acquire it? We\u2019d like to have one source of truth for 3rd party libraries and a copy like this could go stale.\n3.  [Optional] We recommend sharing your project on hackster.io/microsoft. You can create a tutorial that describes your project and shows others how to make it themselves!\nRegards,\nDaniel\n. Thanks for moving your code to a separate folder. I have one last request:\nI noticed in SSD1306DeviceConfiguration.cs you have a chuck of commented out code which came from Adafruit.\n``` cs\n//not uncomment it is for 96*16\n//came from adafruit library\n//#if defined SSD1306_96_16\n//    // Init sequence for 96x16 OLED module\n//    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE\n//    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5\n...\n//    ssd1306_command(0x40);\n//    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4\n//    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6\n//#endif\n```\nCan you remove this and instead link users to actual source code from Adafruit? That way users know where to get the most up-to-date version of the library.\n. Thanks! Pin mappings have been updated to reflect the addition of Serial UART.\nhttps://ms-iot.github.io/content/en-US/win10/samples/PinMappingsRPi2.htm \n. ",
    "sely2k": "unfortunatly still not work\n. this nigth i've solve a lot of problem :) asap i'll fork the project and i'll make a pull request!\n. sorry this comment was contained in a old folder not referenced by the solution. now i've removed it.\n. hi @stefangordon the two version is because the \"original version\" of the sample is not well fit for the oled display 1306 with 64 line\n. ",
    "Car-Sun-Key": "Just to be clear for others:\nWithin the OpenZWave.vcxproj file there are several instances of this line:\nCALL $(ProjectDir)....\\windows\\GIT-VS-VERSION-GEN.bat \"$(ProjectDir)\\\" \"....\\windows\\winversion.cpp\" \nwhich will need to be changed to this (add quotes around first path):\nCALL \"$(ProjectDir)....\\windows\\GIT-VS-VERSION-GEN.bat\" \"$(ProjectDir)\\\" \"....\\windows\\winversion.cpp\"\n. Hardware issue: When running AllJoyn Explorer I only see the zwave bridge (minJon - zwave bridge)  and the Pi (minJon). I currently have 2x Z-wave appliance modules and 1x Z-wave multisensor plugged in and paired - none displayed in AllJoyn explorer\nNote: The tutorial shows different project names than what is provided in the sample. I'm assuming tutorial:ZwaveBackgroundService = samples:HeadlessAdapter app.\nQuestion: What is the Z-wave headless app that is included in the stock image (and running by default)? Should this be stopped before deploying the headless z-wave app in the tutorial instructions?\nEnviro: Win 10.0.10240, VS2015, fresh unmodified samples downloaded 10/31 (aside from the winver.cpp fix)\nThanks!\n. ",
    "MaheshGaware": "I am also facing this issue while I try to build and deploy UWP app with debug build. In release build, it works fine. \n. ",
    "AndreyShpilevoy": "It will be supported in the near future?\nAs I know it's very common device, it very pity, that it not supported yet. \n. @dotMorten thank you for the link. I just created the task on this issue.\nhttps://connect.microsoft.com/windowsembeddedIoT/Feedback/Details/2388618\n. @Maarten88 check this article: http://jellebens.blogspot.com/2016_02_01_archive.html?m=1\n. ",
    "Maarten88": "We tried to get the Sample to work with our Gen 5 Z-Stick on Pi 2 and could not get it to recognize the device. Tried installing manually, copying .inf files as per the suggestion above, but could not make it work.\nI think this is a problem, because the Series 2 hardware is getting hard to find, while the Gen 5 is everywhere. It's hard to follow the sample when you can't buy the hardware to make it work.\nAny suggestions on how to get a working UZB driver for IoT on ARM?\n. Tnx @AndreyShpilevoy, that was exactly what I tried, and indeed it reports \"Driver is running\". So maybe USB does work. Yet the sample still does not report any devices/sensors... I'm stepping through it with the debugger (my c++ is very rusty) and see no obvious errors, but it does not find any sensors (in IoT Explorer for Alljoyn)... Is there anything stupid I might be missing?\n. ",
    "TheFlyingDutchMark": "I also installed the driver for the Z-stick gen 5 and it reports \"Driver is running\".\nI followed these steps to setup the device: https://developer.microsoft.com/en-us/windows/iot/win10/samples/zwavetutorial\nIt says \"Launch IoT Explorer for AllJoyn app. The app should find the following three devices:\"\nI stil don't see any device except the \"ZWave Bridge\"\n. @dotMorten \nThank you for the response\nWhen I plug in the z-stick in my pc I can see that the stick is paired with my smoke alarm. I'm using the tool from aeontec to diagnose the z-stick on my normal PC.\nBut when I connect it to my raspberry it doesn't show my stick at all in the IoT Explorer for AllJoyn app.\n. @dotMorten \nMaybe you're right. I loaded the files and the app is running. I'm going to figure out this week if it finds something. I'll post an update.\n. @dotMorten \nI ran the headed app from the source code and put breaks around line 646. To see what was going on I put a watch on \"this pointer\" in L645. I see the \"ZWaveBridge\" in there, but that's it. It doesn't find the Z-stick Gen5. So I think the result is the same as before with the raspberry and the IOT explorer.\nI'm really wondering if there is somebody who has the gen5 working. I can't find anybody confirming it.\n. I found something. When I add a watch for the string path, I see the value \"VID_10C4&PID_EA60\".\nWhen I looked in windows device manager I found that the Z-Stick has as path \"VID_0658&ID_0200\".\nSo I manipulated the code by adding \"path = \"VID_0658&PID_0200\";\" to line 641. When I open the IoT explorer, I saw the ZWaveBridge is gone and the Z-Stick Gen5 is visible! But no paired device.\n. I think I found a solution for the Z-Stick Gen5.\nFirst I did what AndreyShpilevoy wrote:\n\n@Maarten88 check this article: http://jellebens.blogspot.com/2016_02_01_archive.html?m=1\n\nAdditionally I edited the options.xml files in the project folder.\nI changed the line \n<Option name=\"ControllerPath\" value=\"VID_10C4&PID_EA60\" />\nto\n<Option name=\"ControllerPath\" value=\"VID_0658&amp;PID_0200\" />\nNow when I open IoT Explorer I can see the adapter!\n. ",
    "TimmiT93": "I doubt if changing the ControllerPath is the right way to go.\nThe AllJoyn Z-Wave Bridge sample still didn't work with the Z-Stick Gen 5 after installing the drivers described in Jelle Bens his blogpost. What I did is replacing the 'config' folder in the OpenZWave project by this one: https://github.com/OpenZWave/open-zwave/tree/master/config. In this folder you can find all (newer) config files for Z-Wave devices, including the one for the Gen 5 stick. Of course you can also just copy the ones you need right now. In my case that were the zstickgen5.xaml and multisensor6.xaml files, which can both be found in the aeotec folder. Good luck! :)\n. ",
    "windowsondevices": "@bfjelds @alecont Could one of you signoff on this?\n. ",
    "JimGaleForce": "reviewed by turkycat and herrick\n. good\n. you probably don't need the namespaces if you are 'using' them - easier to read\n. required for appx deployment\n. ",
    "stephenhuang": "Hi dotMorten,\nI'm part of the Microsoft IoT Team. \nThis is a great idea and we'd love to see your sample. Please submit a pull request and we'll take care of the rest. \n. @dotMorten My suggestion would be to have the screensaver disabled by default and to add an option to enable/disable it under settings (the gear in the top right hand corner).\nIn the coming months, we can take your work and improve it so it can be set remotely from a computer. This will solve your problem :) \n. Will do, thanks for helping out. We can always change the jpeg on our end (We'll need to comply with branding guidelines so it's best if we change it anyway).\nWill take a look shortly \n. Looks good. We'll pull this shortly \n. Hi guys,\nI've passed this on to my team. We'll be looking at revamping some of the samples (including this one) at the end of the month. I'll keep you updated\n. Hi guys, after consulting with the team, we'd like to put out an open request to change the sample to not depend on a specific 3rd party device - our focus is less on the sensortag and more on Bluetooth\n. ",
    "apdutta": "Looks good to me :+1: \n. Need to add MCP3008 to the comment\n. It is the same for these 3 boards but this may change if there's any further addition.\n. ",
    "MagicBunny": "Apu did the wod update, with the mcp3008 and also fritzing\n. You need to pair your BT device with the board first before you try the sample.\nCan you take a look at this sample steps on how to pair the device first?\nhttps://github.com/ms-iot/content/blob/develop/en-US/win10/samples/BTSerial.md\n. Hi, Mike, sorry that you are having the issue. This sample was made for Pi2 and hasn't been tested on Pi3 yet. I will try it out on Pi3 and get back to you. Thanks for the feedback.\n. good catch. Fixed this.\n. yes\n. good point. I have added a couple of  more error checking places.\n. Oh, I didn't know what is the function type name to use. Therefore I didn't specify. Just tried, both of the below work:\n<DeviceCapability Name=\"bluetooth.rfcomm\">\n</DeviceCapability>\nand \n    \n\n\n\n\n\n. good catch. Cleaned them up\n. I wrote the documentation for how to repro the sample. But I don't know where to check it in, also not sure where to check in the serialReadWrite.ino file. Do you know where shall I check them in?\n. \n works as well. I was not sure what function to use so didn't specify.\n. yeah, the problem is speechRecognizer and translator don't use the same language string; like for Chinese, the speechRecognizer accepts zh-CN, but the translator service accepts zh-CHS; And for English, speechRecognizer accepts en-US, but translator service uses en. \n. That is also ok. But F5 is slow for this sample. If deploy to device first, then start the deployed App on webb. It is much faster. \n. removed\n. ",
    "alanch-ms": "Sorry for the late reply.  I just double checked the samples.  The reference to _wingpio.pyd is there.  There's a bug in VS where the reference doesn't show up on the solution explorer.  However, if you look at the XML of *.pyproj, you can see the reference there.\n. Hello,\nThanks for the report!  We were able to reproduce the problem you have with the DHT11 sensor.  For some reason, when running on Windows IoT core, we are not reading the full 40 bits of data from sensor.  That's why the DHT11_Python library is reporting Error 1 (Missing Data).  We are working on it and will update you as soon as possible.\n. @munyirik , @alecont - Please CR\n. @munyirik , @alecont - Please CR.\n. Updated the readme.md\n. Update _wini2c.pyd with the signed version.\n. Addressed feedback & updated the publisher to 'MSFT'\n. Minor comments.  Otherwise :+1: \n. @rachitb777 - please CR. @bfjelds Can you please CR?. \ud83d\udc4d . Yes, no changes in the source change.  The magic is in the .dll (.pyd); it will detect and auto switch between inbox drivers and DMAP drivers.\n. ditto\n. So the main thread exits here?  Don't you need to keep it alive so that the app won't exit?\n. Don't you need a reference to _wingpio.pyd?\n. This is my unit test code.  This isn't really suitable for a sample.  I think you should simplify it bit so the user can have an easier time understanding.\n. Duplicated file?\n. Question: Should this file be here or should it be in the \"content\" repo?\n. Question: Since this is not the content repo, what does 'site.baseurl' point to?\n. Can you check the indents (ie. space vs tabs?)  On chrome, the indents are off, but they look fine in IE.  Not sure which one is correct.\n. Ditto - indent\n. Ditto - indent\n. Ditto - indent\n. ",
    "ravindrank": "Additionally, in my case, immediately after getting the project from git, I could not build DigitalSignageUAP with an error indicating System.Runtime.dll missing. I had to remove the NETCoreUniversalWindow platform Nuget package and install it again, accept licence agreement during this process and then it builds. \n. Hi SalvyMihov,\nSorry for my confusing post. I don't see any certificate errors etc like Housten sees.\nI did see the System.Runtime.dll missing error. I remove the NETCoreUniversalWindows platform Nuget package and install it again, accept licence agreement during this process and then it built fine. I was able to successfully deploy as well.\nI'm on VS2015 Update1.\n. Hi,\nYes I see the same issue with Blinky as well..\nWe need to remove and readdd NETCoreUniversalWindows platform Nuget package and install it again, accept licence agreement ..\n. ",
    "tomkuijsten": "Thanks for the great tip!\nGot it working on the emulator, can't test yet on the pi, will do that soon but I have no reasons to believe it won't work.\n```\nprivate async void WebView_NavigationStarting(WebView sender, WebViewNavigationStartingEventArgs args)\n{\n    if (args.Uri.AbsolutePath.EndsWith(\".pdf\"))\n    {\n        try\n        {\n            // 1. Download the pdf\n            var getPdfHttpClient = new HttpClient();\n            var pdf = await getPdfHttpClient.GetByteArrayAsync(args.Uri.AbsoluteUri);\n        // 2. Store it in a temp file\n        StorageFolder folder = ApplicationData.Current.TemporaryFolder;\n        StorageFile pdfFileOriginal = await folder.CreateFileAsync(Guid.NewGuid().ToString() + \".pdf\");\n\n        using (IRandomAccessStream pdfFileStream = await pdfFileOriginal.OpenAsync(FileAccessMode.ReadWrite))\n        {\n            await pdfFileStream.WriteAsync(pdf.AsBuffer());\n            await pdfFileStream.FlushAsync();\n        }\n\n        // 3. Load pdf as PdfDocument\n        var _pdfDoc = await PdfDocument.LoadFromFileAsync(pdfFileOriginal);\n\n        // 4. Create png file\n        StorageFile pngFileOriginal = await folder.CreateFileAsync(Guid.NewGuid().ToString() + \".png\");\n\n        // 5. As a test, only show first page\n        using (IRandomAccessStream pngFileStream = await pngFileOriginal.OpenAsync(FileAccessMode.ReadWrite))\n        {\n            await _pdfDoc.GetPage(0).RenderToStreamAsync(pngFileStream);\n            await pngFileStream.FlushAsync();\n        }\n\n        // 6. Set image as source for xaml image\n        pdfImage.Source = new BitmapImage(new Uri(pngFileOriginal.Path, UriKind.Absolute));\n    }\n    catch (Exception ex)\n    {\n    }\n}\n\n}\n```\n. Just tested it on a Raspberry Pi II and it works like a charm.\n. Is it fixed?\n. ",
    "serusako": "Hi,\nplease try the following workaround - reboot your RPi2 platform and terminate the following process ZWaveHeadlessAdapterApp (shown in App Manager as running app)  before you plug in your USB serial adapter. You can also uninstall this app ZWaveHeadlessAdapterApp to make your changes persist across reboots.\n. If Physical maximum comes from HID_REPORT_DESCRIPTOR at the driver (HidInjectorKd.c) then my suggestion is to share constant with report in a form of #define  rather than hardcode a number.. this is good. number is still there. Please replace with macro TOUCH_PHYSICAL_MAX is that's the intent. ",
    "mskalra": "Brian, I just sent a pull request for the corresponding changes to ms-iot/content. Thanks\n. @bfjelds sure, will reword this\n. ",
    "anthony-ngu": "Have you tested this against the RPi2 and MBM resolutions?\n. ",
    "piwi1263": "Do you mean this https://github.com/ms-iot/samples/tree/develop/IoTCoreDefaultApp ?\n. ",
    "arturl": "Updated!\n. Thanks for the feedback, I addressed all comments except I2C initialization suggestion -- I'll use the old API for now, just like other samples do.\n. Thanks!\nArtur\nFrom: Brian Fjeldstad [mailto:notifications@github.com]\nSent: Friday, January 22, 2016 12:19\nTo: ms-iot/samples samples@noreply.github.com\nCc: Artur Laksberg Artur.Laksberg@microsoft.com\nSubject: Re: [samples] PowerBI sample (#203)\nMerged #203https://github.com/ms-iot/samples/pull/203.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/ms-iot/samples/pull/203#event-523380675.\n. My bad, I removed the zip file. Please take a look again.\n. thanks @rachitb777 \n. Thanks, I addressed this and other comments as well.\n. this is safe to remove -- it produces annoying frame counters that you don't need.\n. for my education: why is this necessary?\n. old comment?\n. why organizations and not consumers?\n. and if provider.Id is something else, then what?\n. why is this function async? I don't see any awaits in it\nalso, please audit your code for async void functions -- these are bad (event handler have to be like that, but not other methods)\n. Avoid 'return null' -- this just makes callers life miserable (\"billion dollar mistake\")\nApplies everywhere :-)\n. hm... this sounds suspect. what is stored in the hashtable -- user named or ids?\n. Useless. Just return token.\n. dead store\n. nitpick on styling -- showError and hideErrors are in camelCase, other names are PascalCase.\n. how about: \nHubList.Items.AddRange(hubs.Select(_ => _.HubName)); \n?\n(Avoiding loops, my other pet peeve. Only nulls are worse than loops :-))\n. loop!\n. null!\n. how about: return jo.ContainsKey(\"value\");\n. oops! \nassert that token is not null\n. I will stop complaining about nulls now, but please audit the code for return null and see if you can avoid it.\n. Can we factor out the api version into a variable, for consistency and so it can be bumped in one place\n. consider: var ids = partIds.Select(_ => _.GetString()).ToList();\n. remember to not check this in. \nany customizable code should be in one place, so it's easy to find.\n. I suggest doing validation in place to avoid extra lookups ( var a = x[\"y\"]; if(!a) a[\"z\"] ... )\n. and if it's not?\n. dead store?\n. why not do this inside catch, and avoid the exists variable?\n. ",
    "cmaloney-msft": "Hi Grahamehorner, Windows 10 IoT Core is configured to sync the time on boot as you suggest. \nAre you experiencing issues with the date/time? \n. Can you share what build you are running and the output of the following command using a SSH or PowerShell console? \nw32tm /query /status\nThanks!\n. Looks like your system is successfully contacting the time server. \nCan you tell if your issue is a time zone issue and your clock is off by hours exactly, or if your issue is a NTP/RTC issue and your clock is simply wrong? \nIf it appears that it is a time zone issue can you confirm that your tzutil command took by running \"w32tm /tz\"\nEdit : words\n. The time zone for the default app comes from the CultureInfo.CurrentCulture property which is set at thread start in this case. You can see this here\nHowever there the Clock in the default app should be accurate to the time-zone at boot. \nCan you confirm you are seeing the clock update (move/tick) a time different than that of the system time?\n. Hi Grahamehorner, did we get your questions answered? \n. Thanks, I will make sure your feedback gets passed onto the team. \n. ",
    "wleev": "This example only runs on the latest Insider Preview version of the Windows 10 SDK, so you'll need that SDK plus an Insider Preview of the OS to run it. As far as I know Bluetooth pairing is not possible without the new Insider Preview, but you should be able to use the current SDK to receive/send data to already paired Bluetooth devices.\n. There's no RPi OS yet that supports the API features in the BluetoothGatt project. You can't access Bluetooth from simulators either. Your only option is to get Insider Preview builds for your Windows 10 OS ( or possibly VM ). \nI've got the example working on my desktop, with some minor code changes. It appears DeviceInformationCustomPairing is already no longer supported on my current OS build ( 10586.0 ).\nIf you only want to prototype on the RPi, you'll have to do manual pairing until they release the new IoT Core image file.\n. ",
    "Mitwpgm": "Thanks wleev for that!  I have installed the latest Insider Preview version of the WIn10 SDK .  I can open and build project now.  However, I can't deploy to target device as the OS version is incompatible.  Where do you get the latest Insider Preview of the Win10 IoT OS?  I have downloaded the latest version of the Insider Preview for Raspberry Pi from  http://ms-iot.github.io/content/en-US/Downloads.htm .  However, that version of OS firmware is only 10.0.10556.0.  Where and how do you obtain version 10.0.10563.0 preview OS for Raspberry PI?  Thanks!\n\n. Thanks again very much wleev for your helpful reply to my question!  I will try on desktop as suggested meantime while waiting for next release of the OS.\nKusumamurthy, thanks for the feedback on this sample project.  Could you please tell me when about is the next release going to be rolled out to public?  I wish to know the time frame I will have to wait for.  Thanks! \n. ",
    "kusumamurthy": "The changes in the Bluetooth GATT sample were pushed early. We are working on our next release and that release should work.\n. Unfortunately, we cannot publicly announce any dates. We will update this thread when the sample can be run from the released bits.\n. ",
    "demon-xxi": "@zhuridartem, I am using Router and thin client on Linux machine running 15.04 version of alljoyn. \nThe explorer itself is running on windows in the same network.\n. ",
    "mwmckee": "signoff\n. ",
    "koapeadu": "Thanks guys. You made my final year project a success. :+1: \nI also found @dotMorten's tutorial on hackster.io very useful.\n. I also have the same issue on the Raspberry Pi 2.\n. Oh wow. Well I understand that. The DSB is meant to enable non-alljoyn devices to be able to communicate in the alljoyn ecosystem so it makes sense to have only the controllee.\nAnyway, I would like to know if there is an implementation of the controller side of the control panel service in the UWP or a third party/sample implementation that is compatible with the UWP.\n. ",
    "msalehmsft": "+1\n. Thanks for bringing up this issue. \nWe've updated the OOBE screen XAML, so it's got a responsive UI now and should adapt to any screen size (240px or more).\n. +1\n. :+1:\nAnd, the localization to Arabic looks great. It will benefit a lot of users.\nThank you!\n. The closing tag here is missing a \"/\". Should be \n\"\u0647\u0644 \u064a\u062a\u0637\u0627\u0628\u0642 \u0631\u0642\u0645 PIN \u0627\u0644\u0638\u0627\u0647\u0631 \u0639\u0644\u0649 \u0627\u0644\u062c\u0647\u0627\u0632 \u0645\u0639 {0} \u061f\".\nCan you please add it?\nThanks!\n. Hardware Serial, especially Serial.print(), which is popular in Arduino, requires the capability. So, adding it by default to the template will reduce the chances someone hits the missing declaration exception when the function is used.\n. ",
    "HeyJude1997": "Currently running Version 10.0.10240. Here is the model number of the DHT22 as well as the kind I have bought. Model # (SN:150605AB6),  http://www.amazon.com/Temperature-Humidity-Measurement-Appliance-XYG-Study/dp/B0130I6MIC/ref=sr_1_8?ie=UTF8&qid=1449176521&sr=8-8&keywords=dht22\n. That fixed it.\n. ",
    "jwinarske": "I experienced the same on a 410c running the .63 build\n. ",
    "jplafonta": "Rebased.\n. ",
    "tobiasstraub": "@tomkuijsten has found a solution for this problem. You can read about this here and show the code here.\n. ",
    "afoliaco": "Basically LoadAsync will in a waiting state if I call it after the last byte read. Can explain when you said create a trigger? you mean look something on the data that come back and that trigger the stop or some other class method to validate?\n. ",
    "nicogbg": "We will remove it from IoTCoreDefaultApp and add it in Windows Device Portal\n2016-01-13 7:53 GMT+01:00 Morten Nielsen notifications@github.com:\n\nBeing able to configure the wifi using AllJoyn onboarding is really cool.\nWhy remove this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ms-iot/samples/pull/195#issuecomment-171194638.\n. thanks Mortem. I'll remove them\n\n2016-01-20 2:05 GMT+01:00 Morten Nielsen notifications@github.com:\n\n@nicogbg https://github.com/nicogbg Just an FYI I noticed 3 .bak files\nin the PR you probably didn't intend to add ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/ms-iot/samples/pull/200#issuecomment-173041057.\n. since DispatcherTimer aren't guarantee to fire immediately after interval expires and also because\nit started some when seconds within a minute there is no guarantee that time will exactly be 0:00 when reloadContentTimer_Tick will be called. You should allow a time window around midnight in the if statement (and debounce).. wring pull request (it contains a change that has already been merged). \n",
    "trmck": "All changes have been made and committed.\n. Corrected\n. The content repo...this should have been excluded from the PR\n. Added error handler function that follows the JS promise examples on MSDN\n. Conditional added to check recording status\n. Corrected\n. Noted\n. Changed to Input Pull-up\n. ",
    "MfCAYO": "ok, thank you for the support!\nif I change the following asynchronous methods to synchronous, the stability improves, but I do not think that is the best way...\nc#\n// await resp.WriteAsync(headerArray, 0, headerArray.Length);\n// await stream.CopyToAsync(resp);\n// await resp.FlushAsync();\nresp.Write(headerArray, 0, headerArray.Length);\nstream.CopyTo(resp);\nresp.Flush();\nand than i put the call of ProcessRequestAsync inside a lock block:\nc#\nprivate void listener_ConnectionReceived(StreamSocketListener sender, StreamSocketListenerConnectionReceivedEventArgs args)\n{\n     lock (syncLock)\n          {     \n               ProcessRequestAsync(args.Socket);\n          }\n}\n. Raspberry PI 2\n. thank you very much, I long to see you! ;-)\n. hello bfjelds,\nsorry but the last published version (Feb 6, 2016) of BlinkyWebService does not start HttpServer and if I try to manually run HttpServer from Windows Device Portal displays the error \"Failed to start package HttpServer...\".\nWhat can I do?\n. There is a way for you to use this sample as a default app?\nthanks for your invaluable help\n. thanks again, I applied your advice and usability and reliability are now excellent!\n. ",
    "asebak": "Any updates on this?\n. ",
    "mce1978": "From your point of view I can understand why you want to do that. That's fine! However, this \"popular\" device has barely got any \"good\" C# code out there. We, and our customer, wanted to try this device together with the Windows 10 raspberry pie for a proof of concept industry thing. We have dropped that idea, seems like it is easier to go the linux route.\n. The uuids are available at Texas Instruments webpage.\nThis page is also very informative:\nhttp://processors.wiki.ti.com/index.php/CC2650_SensorTag_User%27s_Guide. ",
    "phardesty": "Hello -\nDoes anyone know the new UUIDs for the new CC2650 Texas Instruments sensorTag that replaced the CC2541. The CC2541 is no longer available from Texas Instrument and was \"replaced\" by CC2650. The code in the sample uses the old UUID's. \n. ",
    "ManniAT": "In general Control Panel is put in second place\nThere are no samples (neither controller nor controllee).\nDocumentation just shows \"...and interface for...\" - but no hints (snippets) of how to handle it.\nOr am I wrong and just didn't find the information?\n. ",
    "0kkult0": "Hello, I'm using UART, the device is a coin selectors, I started from the example SerialSample, but I can not read from the coin input.\nthanks\n. I'm only using raspberry pi 2, IOT windows operating system, this is a piece of code that I use to read data from the coin selectors. The myTimer function sends a command to the coin and should intercept a response, but does not work.\nprivate SerialDevice serialPort = null;\nDataWriter dataWriteObject = null;\nDataReader dataReaderObject = null;\nprivate ObservableCollection listOfDevices;\nprivate CancellationTokenSource ReadCancellationTokenSource;\nDispatcherTimer mytimer = new DispatcherTimer();\npublic MainPage()\n{\n     this.InitializeComponent();\n     comPortInput.IsEnabled = false;\n     sendTextButton.IsEnabled = false;\n     listOfDevices = new ObservableCollection();\n     ListAvailablePorts();\n     OpenPort();\n }\n```\n    private async void OpenPort()\n    {\n        ConnectDevices.SelectedIndex = 0;\n        var selection = ConnectDevices.SelectedItems;\n        DeviceInformation entry = (DeviceInformation)selection[0];\n        try\n        {\n            serialPort = await SerialDevice.FromIdAsync(entry.Id);\n            comPortInput.IsEnabled = false;\n            serialPort.WriteTimeout = TimeSpan.FromMilliseconds(1000);\n            serialPort.ReadTimeout = TimeSpan.FromMilliseconds(1000);\n            serialPort.BaudRate = 9600;\n            serialPort.Parity = SerialParity.None;\n            serialPort.StopBits = SerialStopBitCount.One;\n            serialPort.DataBits = 8;\n            serialPort.Handshake = SerialHandshake.None;\n            status.Text = \"Serial port configured successfully: \";\n            status.Text += serialPort.BaudRate + \"-\";\n            status.Text += serialPort.DataBits + \"-\";\n            status.Text += serialPort.Parity.ToString() + \"-\";\n            status.Text += serialPort.StopBits;\n            rcvdText.Text = \"Waiting for data...\";\n            ReadCancellationTokenSource = new CancellationTokenSource();\n            sendTextButton.IsEnabled = true;\n            Listen();\n        }\n        catch (Exception ee) {  }\n    }\n\nprivate async Task WriteAsync(string comando)\n{\n    Task<UInt32> storeAsyncTask;\n    dataWriteObject.WriteString(comando);\n\n    // Launch an async task to complete the write operation\n    storeAsyncTask = dataWriteObject.StoreAsync().AsTask();\n\n    UInt32 bytesWritten = await storeAsyncTask;\n    if (bytesWritten > 0)\n    {\n        if (status.Text.Length > 200) { status.Text = \"\"; }\n        status.Text += \"bytes written successfully!\";\n    }\n\n}\n\n\nprivate async void Listen()\n{\n    try\n    {\n        if (serialPort != null)\n        {\n            dataReaderObject = new DataReader(serialPort.InputStream);\n\n            // keep reading the serial input\n            while (true)\n            {\n                await ReadAsync(ReadCancellationTokenSource.Token);\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        if (ex.GetType().Name == \"TaskCanceledException\")\n        {\n            status.Text = \"Reading task was cancelled, closing device and cleaning up\";\n            CloseDevice();\n        }\n        else\n        {\n            status.Text = ex.Message;\n        }\n    }\n    finally\n    {\n        // Cleanup once complete\n        if (dataReaderObject != null)\n        {\n            dataReaderObject.DetachStream();\n            dataReaderObject = null;\n        }\n    }\n}\n\n\nprivate async Task ReadAsync(CancellationToken cancellationToken)\n{\n\n    if (rcvdText.Text.Length > 200) { rcvdText.Text = \"\"; }\n    if (status.Text.Length > 200) { status.Text = \"\"; }\n\n    Task<UInt32> loadAsyncTask;\n\n    uint ReadBufferLength = 4096;\n\n    // If task cancellation was requested, comply\n    cancellationToken.ThrowIfCancellationRequested();\n\n    // Set InputStreamOptions to complete the asynchronous read operation when one or more bytes is available\n    dataReaderObject.InputStreamOptions = InputStreamOptions.Partial;\n\n    // Create a task object to wait for data on the serialPort.InputStream\n    loadAsyncTask = dataReaderObject.LoadAsync(ReadBufferLength).AsTask(cancellationToken);\n\n    // Launch the task and wait\n    UInt32 bytesRead = await loadAsyncTask;\n    if (bytesRead > 0)\n    {\n        rcvdText.Text = dataReaderObject.ReadString(bytesRead);\n        status.Text = rcvdText.Text;\n\n        txtRisposta.Text = rcvdText.Text.Substring(11, 2);\n        //010B02000101010000000000000000EF\n\n        int lunghezza = rcvdText.Text.Length;\n\n        if (rcvdText.Text.Substring(11,2) == \"01\")\n        {\n            txtRisposta.Text = \"\";\n            txtRisposta.Text = \"OK\";\n        }\n\n\n    }\n}\n\nprivate void CancelReadTask()\n{         \n    if (ReadCancellationTokenSource != null)\n    {\n        if (!ReadCancellationTokenSource.IsCancellationRequested)\n        {\n            ReadCancellationTokenSource.Cancel();\n        }\n    }         \n}\n\nprivate void CloseDevice()\n{            \n    if (serialPort != null)\n    {\n        serialPort.Dispose();\n    }\n    serialPort = null;\n\n    comPortInput.IsEnabled = true;\n    sendTextButton.IsEnabled = false;            \n    rcvdText.Text = \"\";\n    listOfDevices.Clear();               \n}\n\n```\nprivate void Mytimer_Tick(object sender, object e)\n{\n     SendE5();\n}\n`\n. ",
    "mahoekst": "great, I can get through the pages now on a mobile device.\n. ",
    "mjmeans": "There is a PWM driver with settable I2C address in project https://github.com/jbienzms/iot-devices.\n. Raspberry Pi 3 with CSR 4.0. The Bluetooth devices in question are: \"[TV] Samsung LED46\" which is actually a Samsung TV; and the other device is a laptop (Dell Inspiron 7537) which has built-in Bluetooth. I am available for a remote screen connection if you need to actually see it happen.\n. ",
    "JGuebert": "We released the Z-Wave adapter as a sample but do not have plans to update it to stay in sync with the latest version of OpenZWave. Should anyone from the community wish to take on this work, we are happy to review a pull request to update the sample.\n. ",
    "MikaVirkkunen": "Yep it's paired but not working. I've tried with other paired devices too. The result is same if I try to run it locally in my laptop win10. It seems that I get some AMQ response with UUID value etc but device1 seems to be always null. I've also verified the app manifest file values etc and everything seems to be ok. I'm probably missing something really simple here :) in what format the bt device name should be defined? simply the display name which is visible under bluetooth devices or something else like the UUID value?\n. ",
    "LeCampusAzure": "Shall I understand that my pull request is not accepted here?\n. ",
    "zach78954": "This is using the GPIOOneWire example, with no modifications. \n. No, unfortunately I have no other test setups. \n. Ok, please let me know the results of the tests. Thank you for your help. \n- Zach Stinnett\n\nOn Mar 9, 2016, at 10:43 PM, Jordan Rhee notifications@github.com wrote:\nI'm sorry that you running into issues with the DHT22. The sample was tested only with a DHT11. I've ordered a DHT22 and will update the sample when I can verify the fix with a DHT22.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "jasjitchopra": "Same issue here with DHT22 - I do not have DHT11 so cannot test the difference in the output between the two. Temp showing as 8-10 C whereas it should be between 30-33 C\nEven the humidity levels show up as 10-20% whereas actual values are between 40-55%.\n. ",
    "mgutski": "Hey guys, I had the same issue with DHT22 module (connected to RaspberryPi 2 Model B) - this is the bad news. The good news is that I managed to identify and resolve the bug that was causing this.\nAfter reading a DHT22 datasheet (see https://www.adafruit.com/datasheets/DHT22.pdf) and scanning the code, it became quite clear to me that the bug is related to the invalid alignment of the sensor data. To be more explicit, the bug is located in GpioOneWire::Dht11Reading::Humidity() and GpioOneWire::Dht11Reading::Temperature() functions. \nIn order for \"((value >> 32) & 0xff) + ((value >> 24) & 0xff) / 10.0\" expression to work we need to shift the bits of integral RH data by 5 bits to the left. So the correct expression will look like \"(((value >> 32) & 0xff) << 5) + ((value >> 24) & 0xff) / 10.0\". Moreover, we actually don't need to do this additional bit shifting. Instead, the expression can be written as \"(((value >> 24) & 0xff00) + ((value >> 24) & 0x00ff)) * 0.1\". As you can see, I also replaced the division with multiplication since it requires fewer clock cycles.\nWe can apply the same procedure to the temperature readings, but this time we also need to remember about +/- sign. So the expression for temperature will be \"double t = (((value >> 8) & 0x7F00) + ((value >> 8) & 0x00FF)) * 0.1;\" and then we do \"if ((value >> 16) & 0x80) t = -t;\".\nYou may also be wondering why are we multiplying the obtained value by 0.1. Well, this is strictly related to the humidity and temperature resolutions of DHT22 module which are 0.1%RH and 0.1Celsius respectively. Hope this helps :-)\n. ",
    "mikestu": "I don't see that anything was changed for that sample, but this is now closed.  What does \"Confirmed\" mean...were you able to get it to work properly on your end?  Thanks!\n. ",
    "Vinz68": "Ok, I just did an attempt to contibute the dutch resource file (and modified project file) after a quick online guide for Github. \nLooks OK so far. Hopefully it gets approved and merged into the master eventually.\nNot sure if I need to assign a reviewer or team; but we will see...\n. I see that my contribution of the NL-nl resource file has been merged and the dutch language is now available.\nThanks !.\nThis issue can be closed then since it is solved.\n. ",
    "asherkariv": "On Raspberry Pi2,Pi3 HW flow control is not available, so any attempt to change DTR/RTS will result in a 'not supported' error.\nThis is also reflected in the properties of the serial port.\n. ",
    "afan02": "There. Fixed both issues commented :)\n. ",
    "VinceT25": "The above issues are all resolved w/ the update 2 release of 4/21.\nThanks.\nVinceT25\n. All above issues resolved when I made the following change:\nFile: ControlPanel.cpp, line #481:\n       Old:\n            allJoynWidgetName += std::_Integral_to_string(\"%d\", idx);\n       New:\nallJoynWidgetName += std::to_string(idx);\nThanks,\nVinceT25\n. Thanks for the tip Zhuri. I'll keep those caveats in mind as I proceed cautiously.\nVinceT25\n. ",
    "gloveboxes": "Will you be updating the Alljoyn template libraries as they have the broken code in still...  \nhttps://visualstudiogallery.msdn.microsoft.com/aea0b437-ef07-42e3-bd88-8c7f906d5da8 \nand \nhttps://visualstudiogallery.msdn.microsoft.com/064e58a7-fb56-464b-bed5-f85914c89286?SRC=VSIDE\nThanks, Dave\n. no more reason than the latest SDK was released, I wanted to test it worked ok...\n. I did check (a lot) and it's never called\n. as above - more for testing as the 19393 SDK was final release.\n. Ah capitalised following C# method naming conventions, but am easy:)  init() is called inside the try catch block after the waitone.\n. as below, never used.  Commented out as I felt guilty removing your code:)\n. will remove - as above felt a little guilty removing your code:)\n. thought ha crossed my mind too, I look at again\n. ",
    "JimSEOW": "@ScottLiuGitHub Please see the C# version. @IoTGirl  We need to have opencv_core300d.lib and opencv_core300,lib available through Nuget. So others do not have to repeat the the process of how to get it works. ",
    "Patafoin": "my bad, I think I have made a mistake modifying sample code thinking it was original code...\nI just unzipped original zip and tried again, it works.\nsorry for the useless post...\n. ",
    "TGoodhew": "Hi Torben - IoTGirl mentioned your issue to me and I vaguely remember having a similar issue for another project I worked on.\nIt was related to the actual conversion of the value read from the sensor to a real value. Can you point me to the exact piece of code that is causing you the problem? \nIoTGirl said that it was the old Galileo sample for SmartFan - I still have the working code there that I forked off for my own use so if that is it then I can share.\nPlease let me know.\nTonyG\nProgram Manager, Windows IoT Core.\n. Ahh \u2013 This doesn\u2019t have anything to do with SmartFan & Galileo.\nIt\u2019s not unheard of for components of EBay to be broken but Aosong is the original vendor of the DHT11 sensor.\nThis sensor uses the Dallas Semiconductor OneWire protocol \u2013 It\u2019s unfortunate but we don\u2019t have native support for that in IoT Core \u2013 How the sample is working is to basically trying to read the pulse width and then calculate a 1 or 0 from the time between two falling edges.\nThis makes it very sensitive to the performance of the RPi.\nWhat I would do is reflash the SD Card with the current RTM version of IoT Core (not the insider version) and then go into the web admin tool and turn on the DMAP driver (Details here https://developer.microsoft.com/en-us/windows/iot/win10/lightningsetup) \u2013 This driver provides a much faster GPIO access so there should be less overhead to the Pi polling to find the falling edge.\nIf that doesn\u2019t help then you\u2019ll need to put an oscilloscope on the sensor output to measure the actual signal being sent back from the device and confirm that it is returning valid data. If it is then you\u2019d need to debug into GpioOneWire::DhtSensor::Sample() to see what the code thinks is being returned.\nIf you don\u2019t have a scope and the lightning driver doesn\u2019t help then I\u2019d suggest changing the sensor to an I2C or SPI one. Personally I like this guy:\nhttps://www.adafruit.com/products/2652\nBut there are many options.\nIf you really want to try and get the DHT11 to work then you could use our implementation of Arduino Wiring and try getting the Arduino code located here working - https://learn.adafruit.com/dht\nIf none of this works for you then let me know and I\u2019ll see if I can dig up a DHT11 and put it on my scope to see whether there is just an issue with our sample.\nTonyG\n. I also just heard that there is a performance regression in the .NET Native Toolset \u2013 I don\u2019t know much more about that but you should try these two things first:\n1. Turn on the Lightning driver\n2. Turn  \u201cCompile with .NET Native tool chain\u201d on the Build tab of the project properties\nIf they don\u2019t help then try the other stuff I mention.\nTonyG\nFrom: Tony Goodhew\nSent: Sunday, June 5, 2016 12:34 PM\nTo: ms-iot/samples reply@reply.github.com; ms-iot/samples samples@noreply.github.com\nCc: Assign assign@noreply.github.com\nSubject: RE: [ms-iot/samples] Temp calculation - much too high (#275)\nAhh \u2013 This doesn\u2019t have anything to do with SmartFan & Galileo.\nIt\u2019s not unheard of for components of EBay to be broken but Aosong is the original vendor of the DHT11 sensor.\nThis sensor uses the Dallas Semiconductor OneWire protocol \u2013 It\u2019s unfortunate but we don\u2019t have native support for that in IoT Core \u2013 How the sample is working is to basically trying to read the pulse width and then calculate a 1 or 0 from the time between two falling edges.\nThis makes it very sensitive to the performance of the RPi.\nWhat I would do is reflash the SD Card with the current RTM version of IoT Core (not the insider version) and then go into the web admin tool and turn on the DMAP driver (Details here https://developer.microsoft.com/en-us/windows/iot/win10/lightningsetup) \u2013 This driver provides a much faster GPIO access so there should be less overhead to the Pi polling to find the falling edge.\nIf that doesn\u2019t help then you\u2019ll need to put an oscilloscope on the sensor output to measure the actual signal being sent back from the device and confirm that it is returning valid data. If it is then you\u2019d need to debug into GpioOneWire::DhtSensor::Sample() to see what the code thinks is being returned.\nIf you don\u2019t have a scope and the lightning driver doesn\u2019t help then I\u2019d suggest changing the sensor to an I2C or SPI one. Personally I like this guy:\nhttps://www.adafruit.com/products/2652\nBut there are many options.\nIf you really want to try and get the DHT11 to work then you could use our implementation of Arduino Wiring and try getting the Arduino code located here working - https://learn.adafruit.com/dht\nIf none of this works for you then let me know and I\u2019ll see if I can dig up a DHT11 and put it on my scope to see whether there is just an issue with our sample.\nTonyG\n. Ahh \u2013 Sorry I thought you were using your own C# version of the sample - .NET Native doesn\u2019t apply to the C++ case.\nWhen you change to lightning you\u2019ll need to change how you get the default controller. You do it this way:\nvoid MainPage::InitGPIO()\n{\n    if (LightningProvider::IsLightningEnabled)\n    {\n        // Set Lightning as the default provider\n        LowLevelDevicesController::DefaultProvider = LightningProvider::GetAggregateProvider();\n    }\n```\nauto gpio = GpioController::GetDefault();\nif (gpio == nullptr)\n{\n    pin_ = nullptr;\n    GpioStatus->Text = \"There is no GPIO controller on this device.\";\n    return;\n}\npin_ = gpio->OpenPin(LED_PIN);\npin_->Write(pinValue_);\npin_->SetDriveMode(GpioPinDriveMode::Output);\nGpioStatus->Text = \"GPIO pin initialized correctly.\";\n```\n}\nFrom here: https://github.com/ms-iot/BusProviders/tree/develop/Microsoft.IoT.Lightning.Providers\nBasically if you don\u2019t get the lightning provider then you\u2019ll get nothing.\nTonyG\n. It isn\u2019t a cut and paste \u2013 What I was showing with that piece of code is how you get the lightning controller for GPIO.\nIf you look at the GpioOneWire::MainPage::Page_Loaded() you\u2019ll see where it creates the controller object:\nGpioController^ controller = GpioController::GetDefault();\nif (!controller) {\nthis->statusText->Text = L\"GPIO is not available on this system\";\nreturn;\n}\nYou want to replace that with the patter of:\n1. Check if the lightning driver is enabled\n2. If so then set the low level default controller to be the lightning controller\n3. Get the GPIO controller\n4. Party on controller like normal\nBasically this code ensures that you\u2019ll get the lightning controller if it is present and the normal one if not.\nTonyG\n. This is a case where there are tight tolerances for the digital signal transitions and, unfortunately things can fall far enough apart that the same doesn\u2019t work.\nWe have addressed this in the next version of Windows 10 IoT Core by enabling interrupts on digital pin transition so it makes the timing aspect much simpler and more reliable.\nPersonally I use I2S or SPI based sensors for temperature \u2013 If I\u2019ve already included an ADC in my project then I\u2019d use something simple like a TMP36 analog temperature sensor.\nTonyG\n. ",
    "torbenvaering": "First of all, thanks for helping me!\nI have no clue where it goes wrong. Sorry. I am a total newbie when it comes to win iot.\nI just decided to start of with an easy example, and purchased the parts (mostly from eBay).\nI have included a picture of my DHT11. I thought it was one vendors item name, and not a generic name.\nI have tried different environment, and even exhaling on it, just to see if the values at least changed - and they did.\nIt is a temp and humidity example: github.com/ms-iot/samples/tree/develop/GpioOneWire\nDoes that have something to do withSmartFan and Galileo?\n\n. Hi TGoodhew (and other who helped),\nI have installed the Lightning driver, but that only results in no data being read. So I'm ready to try the Native Tool Chain, but I can't find the tabs and menu you describe. I have Googled it, and can recognize what it looks like, but I can't get to it. This is what I see when I right click on the project name in the solutionexplorer:\n\n\n. Thanks Tony! Where do I put that piece of code?\n. Thanks again Tony. I really appreciate you taking the time.\nI don't think I'm going to do this project anyway. It is just too complicated for me. What I don't understand is why MS present this as something that is ready to go. I don't understand how the original example was able to produce a valid measuring.\nBut really. Thanks for helping!\n. ",
    "jasonbu": "I found it only happen when i debug the x86 on my x64 system\n. tks for reply\nENVIRONMENT:\nWin10x64 10586\uff0cble work with usb bcm20702, \nREPRO STEPS:\nclone the repo, work with samples/BluetoothGATT/CS,debug with local machine,tried x86 and x64 mode\nRESULTS:\nWhat did you Expect to happen?\nI think x86 should work all right with x64 machine\nWhat did Actually happen?\nx64 work perfectly and x86 got null service pointer\nNOTES:\nas a x86 environment, it's unable to watch the variable in vs2015, but it seems to get a null pointer when service discovery finish, and in the gatt discovery finish callback. x64 work perfectly\n. just pc... what amazing uwp...\n. um... I'm just using desktop computer with x64 14393 Enterprise now,  when i found the trouble I'm using 10586 x64 Enterprise desktop... maybe it's not tested with my platform\n. ",
    "stefangordon": "Yes I actually ported it to an i2c version, which is why I was investigating current state.  I'll get it put up somewhere later today and update here with a link if you need it @EdiWang  - will figure out how to get it merged in properly later.\n. @EdiWang I pushed my i2c sample here\nhttps://github.com/stefangordon/IoTCore-SSD1306-Driver/tree/master/ssd1306/Display\nIt is basically the SPI sample but ported to I2C.  I've enhanced it with the ability to define images (of arbitrary size) in addition to fonts, and added a bit of inline documentation to display.cs.\nI also created a little web app you can use to design images for the screen\nhttp://dotmatrixtool.com/\nI'll get this all cleaned up and figure out how to merge in later, but feel free to use it for now.\n. May be best to improve the original sample as it is confusing this way.  If you are able feel free to assign this issue to me and I'll try to work on it in a few weeks.\n. My fork is still there for people who want an i2c version, but I have not had a chance to integrate into the repo yet.  Given it isn't actually a bug we can probably close the issue if appropriate.. ",
    "sukeshak": "Thank you @stefangordon \nI found this implementation very interesting since it uses System.Drawing namespace... do you guys think this method has any downside to it?\nhttps://github.com/jakkaj/xIOT/tree/master/Samples/OLED_SSD1306\n. ",
    "jhutchings1": "Hey Morten,\nThanks for your contributions! Unfortunately, our dev team is heads down on coding right now and won't be able to look at pull requests for the DSB project right now. We'll check back when we've got more bandwidth to validate your changes. \nThanks!\n. ",
    "DivyaMahadevan": "@arturl \n. the deferral is there to delay showing the AccountsSettingsPane until I'm finished building it\n. Nope. The storage system in place right now is from the WAM tutorial. If I can get WAM to work, I was planning on looking into the APIs you sent me about storage account info and changing it.\n. this is part of the reason why I want to change the storage layout. The consumer/organization accounts are set up differently so if account.UserName exists, then it is a consumer account and the account is stored with that. Otherwise, the account is stored by its id, and I need to retrieve it that way. I based my storage off the WAM sample (found here) but it's not ideal.\n. unfortunately, ItemCollection does not have an addRange method or the equivalent. I cannot think of another way to iterate over the whole list without using a for loop\n. ",
    "jadeiceman": "I've code reviewed this and signed off.  This is an intern project that we'd like to get into Hackster.\n. ",
    "kedar94": "I am a newbie to Microsoft Azure, Please help me. I have a raspberry pi and I need to control LED lights from android app remotely, How to do it,? and which all services I have to use.\n. ",
    "paulmon": "re-merged and submitted new PR. closing this PR. See this pull request.  https://github.com/ms-iot/samples/pull/421 \nIt's important to register the Canceled event for each AppService instance and Complete the deferral if a deferral is still held.. Yes. https://github.com/ms-iot/samples/pull/421. That is by design since the task type=startup in the appxmanifest.\nIf you would like the appservice to exit when it has no clients I suggest you take a look at this sample.\nhttps://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/AppServices. @bfjelds is added to the review. #Closed. If you have the current code in github it shouldn't be using the 14393 version of the SDK, it should be using 15063.  It should also be using the v141 compiler settings rather v140.  Those are the the supported settings to use with VS 2017. waiting on possible matching changes to dashboard to merge. In the project properties make sure the Target version and Min version are set to SDKs that you currently have installed.\n\n. It seems like the merge in the first change should be a rebase rather than merge.. need officially signed bits. A nuget package exists for c#/c++.  There is no support for nuget packages with Python tools for VS. @rachitb777 @namkedia @sukusuma @saraclay . not sure what you are trying to do but you shouldn't be merging from vs2017conversion to develop. Are these comments dead code?  If yes, please delete. Consider renaming CollapseGridViews to ShowOneGridView or SelectGridView.  Or maybe CollapseGridViewsExceptOne?  Is there a reason this method is separate from SwitchToSelectedSettingsAsync?  They seem pretty tightly couple now.. ",
    "steven045": "I am having a similar issue. When I open the ZwaveAdapter solution from Visual Studio 2015, I don't see ZwaveBackgroundService. I See something completely different.  The tutorial mentions to set ZwaveBackgroundService as startup project. Has something changed from the tutorial?\n. ",
    "jwillmer": "After a restart the heartbeat example is working on Windows IOT Preview but updating the heartbeat does not work. \nI get this exception on the command line of Chrome:\n192.168.1.130/:1 Uncaught (in promise) DOMException: The play() request was interrupted by a call to pause().\n. I was now able to reach the web interface on the stable build after redeploying the build and the app. \nI also managed to get the heartbeat to run after pressing countless times on run but the method is not relayent. \n. IOT Blockly\nFYI the blockly example is one of 4 examples that you can automatically download and install to your Raspberry PI via the IOT Dashboard. I think it is pretty bad that a promoted example does not work.\n. Of course, how else would I be able to browse to the website? \n. @OwenBrotherwood I can try it but the Windows IoT Remote Server is not using port 8000 it uses 8080 as default. Anyhow I think the example should work without any hack.\n. @OwenBrotherwood I mixed up the Device Portal with the Windows IoT Remote Server. The Windows IoT Remote Server was not active. I deployed a clean install of Windows IoT and used the IoT Dashboard to deploy blockly\n. Yes, I see the Blockly web page but I am unable to start any template.\n. @OwenBrotherwood Yes, there is for instance a heartbeat demo that I tryed to run \n. @OwenBrotherwood so now you can reproduce the problem?\n. Works now (for me) with the latest IOT Preview build: 10.0.14931.1000\nSteps to reproduce:\n- Start Win10 IOT Core Dashboard\n- Insert empty SD card\n- Deploy latest IOT Preview build\n- Setup WIFI\n- Use Win10 IOT Core Dashboard to install blockly\n- Browse to x.x.x.x:8000. I installed the latest preview build version the Win10 IOT Dashboard found. For me it was 14931 but I see right now that there is a update scheduled.. ",
    "gourabSh07": "I also have almost same problem Windows IOT image I can't reach the web interface of blockly \nI am using windows build  14393\n. After disabling  Remote Server i was able to get web interface of iot blockly but heart example is not working for me do i have to do something else to run it ??\n. ",
    "OwenBrotherwood": "@jwillmer \nHow about testing with and without Windows IoT Remote Server enabled.\nBoth the example and the remote server seem to be using the same port, 8000.\nThat is, do not start the remote server and deploy the sample.\nEdit\nHw: 10.0.14393.0 Pi3\nCommit: https://github.com/ms-iot/samples/commit/44daa3131eeb71d8b60215115b12f99f403a93d0 \n. @jwillmer : \nWindows IoT Remote Server is NOT started by default: it is up to the administror to start it: a choice that can be affected by the other software chosen to be run on the unit ie NOT a hack\nThe Web Interface uses 8080 (where one enables Remote Server) \n@alecont The example will work, however the port used should be changed from 8000 to some other port plus a clear indication where in the source code the chosen default can be changed or made as a configurable option.\nI have not found out yet where the port 8000 is set: given some information, I can create a pull request.\n. @jwillmer \nIs your status, No Windows IoT Remote Server aktive and Blockly works?\n. @jwillmer OK I do not have a sense hat: I want to use the example as a start to integration to https://www.microbit.co.uk/ which has strong links to microsoft\n-- and create a pull request for the result if I ever get that far.\nEdit: https://github.com/ms-iot/samples/blob/6d70b2a8f1d951a59491c180ee87a019c869b1f8/IoTBlockly/IoTBlocklyHelper/SenseHat.cs#L235\nEdit Edit: https://github.com/ms-iot/virtual-shields-universal Arduino but make it micro:bit\n\"start any template\" : do you mean get the template (program) to run and show a result on the sense hat?\n. @jwillmer /cc @IoTGirl @alecont @rachitb777 \nThe line of code that dictates port 8000  (grep -r 8000 *)\nI have to double check the port used by Remote server and try and make a pull request with the port as a configurable option with a default that does not conflict with the standard ports used with the startable services, such as Remote Server \nhttps://github.com/ms-iot/samples/blob/44daa3131eeb71d8b60215115b12f99f403a93d0/IoTBlockly/IoTBlocklyBackgroundApp/StartupTask.cs#L69\nI also took the time to do:\n```\nroot@home:/mnt/c/Users/owen/Documents/GitHub/samples# grep -r 'server.Listen(8000)' *\nIoTBlockly/IoTBlocklyBackgroundApp/StartupTask.cs:            server.Listen(8000);\nroot@home:/mnt/c/Users/owen/Documents/GitHub/samples#\n```\n(from Microsoft's Windows 10 Canonical/Ubuntu Bash prompt)\n@jwillmer \nI will receive a sense in a few days, then I will try to use the sample as intended\n. quick update and I may forget to update when finished\nA change of port to 8001 did not help.\nI have not as yet scanned if the port is already used\nI disabled the remote server again as I want to see the Astro work.\nI have a blicking red heart\n\"And it is goodnight from me at the Windows 10 IoT workshop\"\nEdit:\nCoding Pirates Silkeborg Lyd og Lys\n. @jwillmer The example works if remote server is disabled. \nThe device was used for 8 hours at this Maker Faire in \u00c5rhus, Denmark with the Blocky example \nThe last minute of the video shows the stand I was playing at (with 7 inch red screens)\nhttps://www.facebook.com/karinhoegh/posts/10154792942724610\n. The heart example works for me\n. ",
    "dnkmk": "Shouldn't that be version 14971.1000?\nSent from my Windows 10 phone\nFrom: Jens Willmernotifications@github.com\nSent: Thursday, December 1, 2016 13:43\nTo: ms-iot/samplessamples@noreply.github.com\nSubject: Re: [ms-iot/samples] Blockly not working (#342)\nWorks now with the latest IOT Preview build: 10.0.14931.1000\n-\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/ms-iot/samples/issues/342#issuecomment-264164394, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AWVo1jTdfo_XlYZBOn7oJLHQWlu5y2yPks5rDsDmgaJpZM4KLCFA.\n. Okay,\nCould it be you forgot to choose \u201cCustom\u201d for device type during new device setup?\nNot choosing custom results in a production setup I think\u2026.\nVan: Jens Willmer [mailto:notifications@github.com]\nVerzonden: donderdag 1 december 2016 15:29\nAan: ms-iot/samples samples@noreply.github.com\nCC: dnkmk daniel.komkommer@outlook.com; Comment comment@noreply.github.com\nOnderwerp: Re: [ms-iot/samples] Blockly not working (#342)\nI installed the latest preview build version the Win10 IOT Dashboard found. For me it was 14931 and the admin web panel tells me there are no updates available for the system.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/ms-iot/samples/issues/342#issuecomment-264186486, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AWVo1jGDA6p76WAr25oYliT3FDyQuC9Eks5rDtmggaJpZM4KLCFA.\n. ",
    "PRIMETSS": "Worked it out, The Shared Key is for the Device, and you need to create a new Device (Devices Button In Azure Greyed out otherwise)\nhttps://azure.microsoft.com/en-us/documentation/articles/iot-hub-csharp-csharp-getstarted/\n. Not yet, does anyone have recommendations on board on a board they have tried that doesn't have this problem?\n. Looks at least like your managing to write to Display Ram...\nIs the Column Remap ADC set correctly? So Col / Segment is not swapped over?\nLooking at Memory Address layout Im calculating its 8 bits (Data) x 64 Line Addresses (LA 00H-3F) x 132 Col (00H->83H) = 67584 bits Per Page x 8 pages  = 540672 bits\nSo looks like 132 Col x 64 Lines x 8 bit (Display Data)\nIm confused about the Common Output mode (COM0-COM63) as seems to suggest relationship between COL & Rows (lines) is swapped??\nAre you seeing Page / Column & Line Address right?\nIs D0 in the Address Control set to \"0\" or \"1\" (which reverses the column order)?\nThe Specs diagram is a bit confusing with how the Data Bits are written, is it \nWhen you write data with a Read-Modify-Write command, the column address is automatically incremented, until you finish writing and send the end command.\nIt appears that the ram is divided into 8 Pages, each page is 132 Col x 64 Lines.\nEach time you complete a Col write, you need to reset the Page. Col counters\nHave you tried just getting 1 page turned on, and see where it shows up on the display, Im assuming if you selected Page 0, and the set Col to 0, and write 8 x 256(FFh) on each write, then and end, you would get a black bar top of display? Each page being 132 Cols of 8 bit (data/lines) over 8 pages which are oriented vertically in bands???\n. ",
    "lflct": "I just tried opening that project in VS 2015 Update 3 and I can see the Remote Device option in the list of debuggers, so I believe you're right, the problem is not with the project itself. Make sure you have the latest files, though, just in case.\n. ",
    "How2Compute": "No clue, I only edited that line and github seems to have messed that up a bit, sorry\n. ",
    "shubhamkumarnayak": "Master branch\nSent from my iPhone\n\nOn 15-Nov-2016, at 12:27 AM, Jordan Rhee notifications@github.com wrote:\nAre you using the 'master' branch or the 'preview' branch? There are known issues with the sample that will be fixed in the next OS version.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ok thanks.\n\nOn Thu, Nov 17, 2016 at 12:46 AM, Jordan Rhee notifications@github.com\nwrote:\n\nPlease try the 'preview' branch on the latest OS version.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ms-iot/samples/issues/362#issuecomment-261043205, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHGDbJDYqMg5hlgnJXsKlE2wx3yH8gHzks5q-1aogaJpZM4KvHKq\n.\n\n\nShubham.....\n. yep It is working now, I created a cli from the project and using it from\nc# to get the data and it is working perfectly... :)\nOn Thu, Dec 1, 2016 at 5:22 AM, IoTGirl notifications@github.com wrote:\n\nHi Shubham,\nDo you have an update?\nSincerely,\nIoTGirl\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/ms-iot/samples/issues/362#issuecomment-264034756, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AHGDbDjiu-wecqmpCTjaZ13pXz6sgggBks5rDgxFgaJpZM4KvHKq\n.\n\n\n-- \nShubham.....\n. ",
    "rederekt": "A few suggestions to improve the README\n1. For community members, direct them to somewhere they can post their projects, i.e. Hackster\n2. Change the Rules section to indicate the guidelines are only for contributors, i.e. employees\n. Looks good to me.\nWould you mind adding the \"Detection failed\" statement to the ResultBox when emotionResult is null just for completeness?\nThanks!. Mine assume success, since they all come with default images that work.\n. In the content-private PR. ",
    "Daniel-Walther": "Hi,\nI exchanged the two hard coded values with the defined one.. Hi serusako,\nYour suggestion sounds like a clean solution. I moved the hardcoded value to a #define definition at common.h and pushed it to github.\nDaniel. ",
    "Yuexs": "Iot OS version:10.0.14393.576. I tried to extract the windows10 voice to the device\nAnd try to set up the registry\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech_OneCore\\Voices\\Tokens\nStill no effect\nAsk for help. ",
    "MattGosline": "Added README.md for VirtualMicrophoneArrayDriver sample. ",
    "brandonzuech": "The module is currently not supported by windows iot. Your only option atm is USB based cameras. ",
    "piffarettig": "Thanks!. ",
    "kikinewton": "Thanks for the help. Your solution worked.\n\nFrom: Brian Fjeldstad notifications@github.com\nSent: Tuesday, February 14, 2017 5:10:57 PM\nTo: ms-iot/samples\nCc: Derrick Agyemang; Author\nSubject: Re: [ms-iot/samples] Error while deploying appx file. (#410)\nHow are you trying to deploy the APPX file? Are you including the dependency APPX files?\nAs an example, from the Device Portal, to deploy HelloBlinky, you should build the APPX and then enter:\n\nEnter App Package = HelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Blinky_1.0.0.0_arm_Debug.appx\nEnter Certificate = HelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Blinky_1.0.0.0_arm_Debug.cer\nClick Add Dependency 2x\nHelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Dependencies\\ARM\\Microsoft.NET.CoreRuntime.1.0.appx\nHelloBlinky\\CS\\AppPackages\\Blinky_1.0.0.0_Debug_Test\\Dependencies\\ARM\\Microsoft.VCLibs.ARM.Debug.14.00.appx\n\n\nClick Go button\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/ms-iot/samples/issues/410#issuecomment-279770980, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AO38RO5eTf9tEHxXRLBHvQb3lexxGaGtks5rceAhgaJpZM4MAR7R.\n. ",
    "LeonardoDaga": "Hello IoTGirl,\nI really don't know where to change the code to change the behavior. I already described the situation also here: \nhttps://social.msdn.microsoft.com/Forums/en-US/59e959dc-52eb-4034-89fb-bee7812fc010/appservicesharednotepadc-example-survival-of-the-server-after-a-client-closes?forum=WindowsIoT\nSorry for posting twice :-(. I tested this change, it looks fine because the NotepadService doesn't close when a client detaches. \nEdit: I noticed something about the client service task, that seemed to remain alive after the client detach, but now I'm not able to reproduce the error, then it could be a mistake I made.. ",
    "Leeway213": "Recent update: This issue existed when I was using a z-tek USB to serial cable to debug but disapeared when using another one which is SoC internal UART. Maybe it's a hardware bug of USB to serial device?. ",
    "CaseyLu": "PS: My win 10 IoT is on Raspberry pi 3. ",
    "hansmbakker": "The url https://developer.microsoft.com/en-us/windows/iot/samples/OICAdapter gives a 404. Aren\u2019t those dlls part of a nuget package making it redundant to put them in version control? (Don\u2019t know how that works for python). I didn't try it on Win IoT Core yet or on Win x32. For me it worked when I deployed it to a tablet running Win 10 x64 (build 16278). I had to use Visual Studio 2015+WDK 15063 since the Insider Preview WDK (16267) has a bug that makes it impossible to build drivers. As a quick hack I did a cast to ULONG but I think that's not the cleanest solution. Probably changing the ReportSize type would be better so that the cast can be avoided.\nSince that tablet does not have a supported NIC I couldn't do kernel debugging there; and when I changed the code to my own HID descriptors it didn't work anymore.. Exactly. The sample app + sample driver worked (at least the keyboard part, I didn't try the mouse or touch input); it injects something like Aa in the terminal.\nBut after I changed it to other HID descriptors (I wanted to emulate a surface dial using https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/radial-controller-sample-report-descriptors), it didn't work anymore. I verified that these HID descriptors do work, though, with an Arduino.\nI couldn't debug it with my tablet so I don't know where it goes wrong yet. Hopefully I can debug it with an Intel NUC.\nIf you find out more, please let me know.. The odd thing is that the report descriptor is read properly (Windows shows the Wheel tab in the settings app) but the actual reports seem to be not delivered. When I know more I'll post it here, but let's discuss it in a new topic. This topic is for a request to make the code compile on x64.. @FansteKaRiNa1998 please comment in #523, this topic is for a request to make the code compile on x64.\n@ooeygui @Daniel-Walther @parameshbabu @serusako can you have a look at how the code should be properly changed for x64? C++ is not my \"native\" programming language.\nHID_XFER_PACKET cannot be changed since it is part of hidclass.h, reportBufferLen is an ULONG there. EVT_WDF_IO_QUEUE_IO_WRITE (where the report length comes from) cannot be changed since it is part of wdfio.h. Is a simple cast good enough or should something else be taken into account?. Quotes from @FansteKaRiNa1998 from #522 \n\nTry copying the code to a new project, works for me. I have the exact same problem with delivering actual report.\n\n@FansteKaRiNa1998 what works for you? I thought that you said that you have a problem?\n\nWhen transfering a project to x64, additional dependencies are deleted. That's why you must add in the project properties -> linker -> input -> additional dependencies\nnext line: (DDK_LIB_PATH)vhfkm.lib\n\nThat line was already ok here, I took the whole HIDInjector project as a basis, I didn't create a project from scratch.. Unfortunately the kernel mode debugging tools are a disaster. I could not connect properly with the Visual Studio debugger, but oddly enough I CAN connect with WinDbg Preview from the Windows Store. However with that I'm not sure what to do.\nSo - unfortunately now new insights.\nHaving my custom code deployed I did see that there is a HID-compliant device node in the Human Interface Devices class. It reports being on Virtual HID Framework (VHF) HID device which is also in the Human Interface Devices class. Lastly there is the Sample device node.\nUnfortunately it still doesn't give a sign of life... I\u2019m using visual studio 2015 update 3 with WDK 15063 since unfortunately that is the only usable combination now.\nI tried WDK 16278 on vs 2017 15.4.0 preview I but that didn\u2019t install, but somehow the windbg version in visual studio 2015 got upgraded to 16278..\nVisual studio 2015 can provision the target pc properly and also it can deploy the driver. However that builtin windbg version does not connect to the target of while the WinDbg Preview app from the windows store can connect to the target fine. So not a problem with the target pc.\nLastly I didn\u2019t know how to use that separate Windbg Preview app - it didn\u2019t recognize the source files I loaded, therefore I couldn\u2019t set breakpoints properly. Yes the driver is deployed successfully, but when running the HidInjectorTest sample app, which uses modified HID reports so that they match the modified HID report descriptors, nothing happens. The driver / device is correctly recognized as a Windows Wheel device but no actions are triggered.. Aah - You mean I should see them in WinDbg without having a breakpoint set? I didn't notice them, but I'll have a look again when I'm home.\nDid you do any kernel debugging? Did you see these messages?. I tried\ned Kd_DEFAULT_Mask 0xFFFFFFFF and ed Kd_DEFAULT_Mask 0x8 according to https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/reading-and-filtering-debugging-messages (KdPrint uses the default component and by default it publishes at level 3 which in bitmask is 0x8). It showed a lot of Windows kernel messages but strangely enough not the ones that are in the HidInjector Sample driver code... The driver is installed fine, though, and the test application finds its device node properly (if it is not installed the test application will return an error)\nI don't know what I'm missing here.... I didn\u2019t do it via regedit, I did it directly via WinDbg. Those commands should have effect immediately. And they triggered other log messages from Windows.. ",
    "javiddhankwala": "There is a pull request for the OICAdapter documentation to be added to the content repository. Here is the link to the pull request:\nhttps://github.com/ms-iot/content/pull/1096\n. The pull request for the documentation is at https://github.com/ms-iot/content/pull/1113\n. This is to demonstrate the use of optional LauncherOptions, to resolve ambiguity, if multiple apps support the same protocol\n. I thought there is some kind of white list with the store for the oems that may allow restricted capability\n. Its a sample and we do demonstrate how to launch apps based on protocol.\n. ",
    "ghost": "hello\nADK and WDK should not be needed and SDK from both machines is the one included in the VS Editions and both are new installations\nbr\nAndre. even if i don't have an answer or solution its now on the big list of not working iot projects\nbr\nAndre. Hello thanks for reply i just using raspberry pi2 and i have two types of cameras usb and ip .cam..but what part of code explain number of cameras unfortunally i'm beginner of visual c# for understand... ",
    "MyersMade": "No, Pi and Windows Desktop is all I have available.. @jordanrh1 , have you had a chance to look at this?. Thanks for your response.  My hardware is an external USB-RS232 adapter\nI've tried two different models:\nGEARMO FTDI-LED\nChipset FTDI FT232RL\n(tried 2 different units)\nUnknown Mfg\nChipset FTDI FT232RL\nBoth devices I got the same results.\n\n\n\n\nI guess I had assumed the hardware was okay, since they work fine in Windows Desktop.\nMy gut tells me that the issue is coming from whatever driver that IOT ships with for the FTDI chipsets.\nDoes anything stand out from what I've posted here?\n. ",
    "embedded101": "@MyersMade,\nThere are known issues with certain FTDI USB-to-RS232 chip (I don't remember the details.).\nA while back, I was using a batch of USB-to-RS232 adapter from FTDI for a community project using Windows 10 as the dev machine.  I got report from some participants the FTDI adapters had problems.\nI reached out to my contact at FTDI at the time and was told there was known issue with the USB-to-RS232 adapters we were using. \nSorry, I don't have the affected FTDI) part number.  You should check to make sure you are not using a problematic device.  \nIf the USB-to-Serial device is external to the controller, I would try a different chip to see whether the same problem occur.. ",
    "GouthamiJJ": "Hi all,\nEven I'm also facing the same issue please give a solution to solve it.\nRegards,\nGouthami. ",
    "summoncse": "I have installed Microsoft.ApplicationInsights.WindowsApps dependency but I am not able to discover any ZigBee Device.. ",
    "rajnishc8": "Hi @IoTGirl,\nI have vs2015, vs2017, EWDK installed.\nTo get it to build successfully in VS2017, I had to set\nAdditional Include Directories to:\nC:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.14393.0\\um;C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.14393.0\\shared;C:\\EWDK\\Program Files\\Windows Kits\\10\\Include\\10.0.14393.0\\winrt\nand\nAdditional Dependencies to:\nC:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.14393.0\\um\\x64\\onecoreuap.lib;$(AdditionalDependencies)\nThanks,\n--Rajnish\n. Please refer to screen shot given below\nSDK version is :  10.0.15063.0 .\n\nIt can be seen in the screen capture that it does not build with vs2017 and sdk 10.0.15063.0 . \nThanks,\n--Rajnish. ",
    "phenixita": "It doesn't seem a critical section to me.\nIf emotionResult is null the GUI could state \"Detection Failed\" or something like that.. ",
    "akeilox": "following up on the post above, i might have a hacky progress but still falls short;\nafter installing c++ dev tools for vs 2015, the project openCV still did not  compile.\nSo I have tried renaming all the references from 140 to 141 in the .vcxproj files\nAfter which I have changed the SDK version of the openCV fork to 10.0.15 (latest)\nthen i have compiled both debug and release versions for ARM and x86, to get the libs (w/o ..d) build.\nAfter all of the above 'hacks' i was able to compile the openCV for arm and x86 within VS 2017.\nFinally I have build the OpenCV iot example, built went fine with no errors, but noticed it complains about App being started but activation request failed -  when i try to release/debug it to Raspberry Pi 3 running latest IOT - assuming there is a trick here im missing?\nHopefully someone can clarify.\nExact error when debugging on remote machine, after transferring the app;\nUnable to activate Windows Store app\n'4277356b..........'\nThe OpenCVExample.exe process started but the activation request failed with error 'The app didnt start'\nunder output log:\nOpenCVExample.exe' has exited with code -1073741515 (0xc0000135) 'A dependent dll was not found'.\nwith no mention of which dll its about.\nWould appreciate if someone can shed light on this.. ",
    "mohandatla": "Currently used certificate subject is in lower case so added lower case CN. Please let me know if you think it has to be Upper case for some other reason.. ",
    "btusca": "yes, it is enabled,\nI just want to change the wifi configuration without using an ethernet cable or the device portal.. ",
    "wirelessdreamer": "This example is not working for me either.\nWindows Build: 14393.1480\nBluetooth Adapter ASUS USB-BT400\nVisual Studio 2017\nSensorTag with CC2650 MCU\nOn startup the sensor tag shows up in the device list.\nit takes about 10 seconds for pair and connect to change color, so it can be clicked on.\nafter clicking on it it says Setting up Sensor tag. then throws an exception on line 444 of MainPage.xasl.cs :                    GattReadResult result = await characteristicList[0].ReadValueAsync(BluetoothCacheMode.Uncached);\nif I comment out 441-447 it starts up, and temperature, humidity, and keypress are enabled on startup. when I select Accel, Magnometer, or Gyro the enable button next to them never enables, and I am unable to read data from them.\nI am missing something, or is the example currently broken?\n. ",
    "JordanReimers": "@zhuridartem please review. ",
    "mtheolog": "What I am facing this moment is that i would like to launch the background apps through another app (uwp or background app) that it will act as a startup app. In other words i would prefer to have one startup app that launches all my background apps with a specific order. . ",
    "Apflkuacha": "I also encountered this problem, this is most probably a bug (or unsupported feature) in Windows IoT \nEdit: it is possible to set it on external devices (USB - Serial converters)\nAt the internal serial port it isn't possible to set StopBits.. ",
    "FansteKaRiNa1998": "Did it work for you on x32? I am trying to make it work last 6 months, but it's like vhf isn't really making the changes with reportsubmit method. All this time I was testing a copy of the sample on x64. Wait, did you say that when you decided to change the report descriptor (for example to gamepad, joystick, etc), it didn't work?. Thank you for the insight. Unfortunately, I don't have any more clues than you have. To be frank, this is the first time someone shares his experience with me about VHF HID. I commented on their official page, but nobody haven't replied to me yet. https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/virtual-hid-framework--vhf-\nMaybe, if you comment on that section too, will wake up the developers and have a conclusion. I highly think this is an unfinished technology, possibly reasoned because it's very young (less than a year), but that should naturally justify their attention which is at the moment zero.. Try copying the code to a new project, works for me. I have the exact same problem with delivering actual report.\nWhen transfering a project to x64, additional dependencies are deleted. That's why you must add in the project properties -> linker -> input -> additional dependencies\nnext line: (DDK_LIB_PATH)vhfkm.lib. After some time, there happen to be some strange bugs, for example, it deploys an old version although I clean and build or just click on rebuild. Another example is when targeting x64, it removes additional dependencies from the Linker -> Input section.\nMy safest bet is always to create an empty KMDF driver and put everything there. It always works for me, and it costs the least amount of time.. @wind-rider A simple cast is good enough, I have verified it on x64.. Did you look at the device manager when you tested keyboard? When testing for a gamepad, it would appear only in USB Game Controllers, while it wouldn't appear in Device Manager. Also, I could uninstall driver at any time.\nThe difference with testing a keyboard is that it created a HID compliant device in the Keyboard section of Device Manager, and I couldn't uninstall the main driver until I uninstalled HID compliant keyboard I have just added.\nMaybe the problem is not registering it in the system? This is a quote from https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/virtual-hid-framework--vhf-\n,,Note In some scenarios, a HID client might need to identify the source of HID data. For example, a system has a built-in sensor and receives data from a remote sensor of the same type. The system might want to choose one sensor to be more reliable. To differentiate between the two sensors connected to the system, the HID client queries for the container ID of the TLC. In this case, a HID source driver can provide the container ID, which is reported as the container ID of the virtual HID device by VHF\".\nThis probably means what I have just described: the source is an unknown device and thus it doesn't listen, while, for the keyboard, it properly registers the device object and thus it listens to it.. In which Visual Studio are you working? Also, describe the problem with kernel mode debugging.. You mean you deploy the driver successfully but you don't see any messages shown?. Okay, we recognized that problem earlier. I am asking you about KdPrint/DbgPrint messages. I thought they also don't display?. For that, there are three possible reasons that I know of:\n\n\nSomething went wrong when turning up the test machine or the computer you are programming on. This solution is the easiest and it just requires you to reboot.\n\n\nWhen provisioning target device for deployment, you mismatched your own ip address (host address) or your address isn't static so next time you booted in it got changed. Try updating host address to solve this problem.\n\n\nYou didn't add a key in RegEdit to make those messages pop up. This is the link which solves it: http://karuppuswamy.com/wordpress/2008/09/04/enabling-debug-print-dbgprint-in-windows-vista-and-server-2008/\nNOTE: don't edit default value \"default\". Add a new value \"DEFAULT\" and apply the described rule.\n\n\nCan you execute DebugView on that Win 10 tablet? If anything can see these messages, than the DebugView in administrative mode (check Capture -> Capture Kernel is checked) can see these messages.\nThis is going off the current topic, but I didn't understand clearly what is your problem. I will try to stick to the topic.\n. You must restart test PC after making changes in its RegEdit. I really can't help you other way, I am not familiar with the utility.. ",
    "MtotheKay": "Reinstalling Windows IoT did the job.. +1 Please Elaborate! It's more then a month now..... ",
    "kolive": "lets remove the extraneous comments (e.g., //zh-CN)\n. duped line?\n. ",
    "DavidShoe": "It already handles putting scrollbars for the content.\n. The buttons will fit in anything bigger than 400 px, smaller than that and the usefulness of this sample is pretty much shot anyway.\n. ",
    "KaraOttewell": "How should I reply? On the GitHub web site?\nThe reason is that people couldn't make up their minds whether to allow ceremony selection via toggle buttons or just use the OR to get all of them so I left the code.\nSent from my Windows Phone\n-----Original Message-----\nFrom: \"Brian Fjeldstad\" notifications@github.com\nSent: \u200e10/\u200e26/\u200e2015 4:05 PM\nTo: \"ms-iot/samples\" samples@noreply.github.com\nCc: \"Kara Ottewell\" karaottewell@outlook.com\nSubject: Re: [samples] Changes to add the Bluetooth tab to Settings so that BT Inbound and Outbound Pairing can be done (#130)\nIn IoTCoreDefaultApp/IoTCoreDefaultApp/Views/Settings.xaml.cs:\n\n\n\n/// \n\n\n/// \n\n/// \nprivate void ResultsListView_SelectionChanged(object sender, SelectionChangedEventArgs e)\n{\n  +\n}\n  +\n\n/// \n\n\n/// Get the set of acceptable ceremonies from the check boxes\n\n\n/// \n\n\n/// \n\nprivate DevicePairingKinds GetSelectedCeremonies()\n{\nDevicePairingKinds ceremonySelection = DevicePairingKinds.ConfirmOnly | DevicePairingKinds.DisplayPin | DevicePairingKinds.ProvidePin | DevicePairingKinds.ConfirmPinMatch;\n//if (confirmOnlyOption.IsChecked.HasValue && (bool)confirmOnlyOption.IsChecked) ceremonySelection |= DevicePairingKinds.ConfirmOnly;\n  why all the commented code?\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. It won't compile if you do that iirc\n\n\nSent from my Windows Phone\n\nFrom: Brian Fjeldstadmailto:notifications@github.com\nSent: \u200e10/\u200e26/\u200e2015 4:01 PM\nTo: ms-iot/samplesmailto:samples@noreply.github.com\nCc: Kara Ottewellmailto:karaottewell@outlook.com\nSubject: Re: [samples] Changes to add the Bluetooth tab to Settings so that BT Inbound and Outbound Pairing can be done (#130)\n\n@@ -11,8 +11,8 @@\n     IoTCoreDefaultApp\nen-US\nUAP\n-    10.0.10240.0\n-    10.0.10240.0\n-    10.0.10545.0\n\nleave this as 10240\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/ms-iot/samples/pull/130/files#r43065615\n. Done\n. Got rid of commented out code\n. Removed. Good catch!\n. ",
    "gmileka": "Instead of btn1 (and btn2, etc), it will be more readable if we give name indicating its function.\n. Same with event handlers names, it would be more readable to indicate their function.\n. Usually, the coding standard is using an underscore and camel notation for data members (for example; _lena). Also, what does Lena mean?\n. Initialize to nullptr.\n. Can this fail?\n. Maybe a comment to describe what 80 and 90 are?\n. These globals can be made locals to btn3_Click() and passed as const & to internalDetectObject(). The strings can be moved to the top of the file where constants are typically defined.\n. Coding standard, InternalDetectObject().\n. Why do we need to do this assignment?\nIf it's for convenience, we can do a reference (auto& body = bodies[i]). But it's only used once, so we might as well using bodies[i] instead.\n. ",
    "parameshbabu": "We can remove these variables. Not used anymore. ( HIVE_ROOT / WIM_ROOT )\n. Recommended to use /onecore  instead of /nohives. \n. I think we still need /variables:\"_RELEASEDIR=%OUTPUT_DIRECTORY\\;\"\n. ",
    "JohnTasler": "The RunAsync causes this lambda to run on the UI thread, therefore the .Wait() will block the UI thread. Instead add the async keyword before the () => of the lambda, and change the .Wait() to an await at the beginning of the line.\nAlso, the await before the RunAsync is not necessary, and also unnecessary in most (if not all) calls to RunAsync. But, since the others are in code not written in this review, it doesn't really hurt to leave them.. Remove the Wait and put the await keyword at the beginning of the line. Will need to add the async keyword before between private and void.. Remove the Wait and put the await keyword at the beginning of the line. Will need to add the async keyword before between private and void.. ",
    "namkedia": "The bluetoothRadio.State saves the systems state if the radio is turned on. The function checks for this and accordingly displays the Bluetooth settings.  . This was not part of my changes in en-US. Not sure why the (,) is added. . String in English: Successfully registered for inbound pairing, supported ceremonies: {0} . \nNote that the (,) is replaced by a (.). String in English: Successfully registered for inbound pairing, supported ceremonies: {0} . \nNote that the (,) is replaced by a (.). Change for \"BluetoothInboundRegisterationSucceededFormat\" has not been added. \nChange in eng:  Successfully registered for inbound pairing, supported ceremonies: {0}. . change to BluetoothInboundRegistrationFailed is not added.\nChange in English:  Failed to register for inbound pairing.  . ",
    "sukusuma": "Started with other logic and later merged.  will merge into one function. Deleting all commented code out.. "
}