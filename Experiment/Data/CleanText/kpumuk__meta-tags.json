{
    "kpumuk": "Could you show an example on how to reproduce this error? I've tried a few variations and can't get it failing:\n```\n  @view.title('someTitle'.freeze)\n  @view.display_meta_tags(:site => 'someSite').should == 'someSite | someTitle'\n@view.title(['someTitle'.freeze].freeze)\n  @view.display_meta_tags(:site => 'someSite').should == 'someSite | someTitle'\n```\n. Added frozen strings in production everywhere. No exceptions. Could you help me to find the problem?\n. Closing issue since, there is no new information. Please re-open or create a new issue if you still having this problem.\n. Could you show the stack trace for the error you've mentioned?\nAlso, when you use <% titile %> no output will be produces, instead your title will be saved to display in  tag in the header. To display the text and set the , use <%= title \"some title\" %>.\n. Added information about bundler to the README\n. Done\n. Commit f5bca6807bf4ce2257aee9240f613d5dee7f2599 should fix this\n. You can use :open_graph => {} to set OG tags:\nset_meta_tags(:open_graph => {\n  :title       => 'Facebook Share Title',\n  :description => 'Facebook Share Description'\n})\nAdded in version 1.2.4\n. Fixed in master\n. It should not be the case in Ruby 1.9, and I don't really see the point to support such a decorative feature (it requires lots of code changes).\n. In this case you would have to duplicate default parameters both in the header, and in the title attribute. I think we should come up with another idea how to implement this.\n. I don't think this is a right place to do the job. Not everybody uses UTF-8 (yeah, I know, this is silly). Where non-utf8 strings come from in your application? Maybe you forgot to set default encoding for your application or forgot to add magic comment?\n. I don't see any specs, +you forgot to add comments to the meta_tags method. But the idea is right, and I re-implemented this, and add you to the contributors list. Thanks!\n. Correct. Thank you for investigating. Also make sure you set noindex and nofollow to false (if it was previously set to true) so it won't duplicate robots meta tag.\n. Thanks!\n. Sub-properties and arrays of values implemented in #31\n. I don't see any problems with Rails 4.0. Closing this issue for now, please re-open if you guys have any more details.\n. Merged 497d46cd1325a1e32019778c31341a2fe9049007\n. Sub-properties and arrays of values implemented in #31\n. Sub-properties and arrays of values implemented in #31\n. Implemented in issue #31 \n. Sub-properties and arrays of values implemented in #31 \n. I don't see any problems with Rails 3.0+. Closing this issue for now, please re-open if you guys have any more details.\n. Implemented in #32, released in 1.4.0\n. This change will break \"Twitter Cards\" feature (see README), and arbitrary hashes support (\"Hashes\" section in README). Instead of filtering by list of \"known\" parameters, what about we delete items from a copy of meta tags Hash once they are processed, and then just render the rest?\n. Implemented in #32\n. More flexible solution in issue #31 merged\n. Thank you, merged this one to master, will be released as a primary feature of 1.4.0\n. Released version 1.4.1\n. You can use\nset_meta_tags(:site => nil)\n. Added :charset attribute in a853b127ed10ac377da996064fbaccdb4a60df55, will be released in next version.\n. Merged\n. Tripple space comes from :prefix and :suffix. Basically pattern looks like:\n[SITE TITLE][PREFIX][SEPARATOR][SUFFIX][TITLE]\nIf you do not specify separator, either prefix nor suffix will be used. But, if you do - they will be used both. In your case, you need to disable them:\n:separator => ' ', :prefix => false, :suffix => false\n. Implemented in version 1.6.0, thank you for your suggestion\n. This will break the usecase when title is an array itself\n. I'd prefer to keep ruby 1.8 support for a while. Fixed Travis CI using more complex build matrix, but thanks for your contribution anyway.\n. Merged with pull request #55 and commit a43016afe622aaaa10ffc644f69e63a1ef0847f9\n. Default limit changed to 160, you can configure it now in initializer (see f194614e2900f2e9a906d0c12f5a5bc22791493f)\n. I don't see any problems with Rails 4.0. Closing this issue for now, please re-open if you guys have any more details.\n. Merged in faee4c0b0506576e2f8de1f097b8bbaf67800cc8\n. In version 1.6.0 I have added meta-tags.rb, so you don't need to specify :require in Gemfile anymore.\n. Fixed in ceeac0f4a9d13f4edcd3ed34e268c7606daddb53, will be released in version 2.0.0\n. Fixed in ceeac0f4a9d13f4edcd3ed34e268c7606daddb53, will be released in version 2.0.0\n. As far as I understand, itemprop is for microdata on HTML elements level, while Open Graph tags will be used for +Snippet. There are no mentions if <meta itemprop/> in documentation for Google+\n. Merged in a43016afe622aaaa10ffc644f69e63a1ef0847f9\n. Yes, it is being maintained. \n. Merged in a20c6f211b27f8c2c552d6d428994727e687a340\n. Fixed in 1c4ed2157e4a869dc57ed521fbe562522c872ecf and 60483ec6c60346546780ac58bbb5f98443ca11ee\n. Added in d321be1856528dea2af2b67cfb8a026da80c52d1\n. This is already supported, see https://github.com/kpumuk/meta-tags/commit/c92294fa9a91a0c08720cb323a9d9bf55810e1e8 for example\n. Will this work for you: 6c0d4fa6e9c4a516bcabc7e697f9d6ba8805f550 ?\n. See c92294fa9a91a0c08720cb323a9d9bf55810e1e8 for example, this is already supported\n. Not exactly. Two hours ago documentation and a spec was added (pull request merged)\n. Resolved in https://github.com/kpumuk/meta-tags/pull/101. Merged in 85eae097ea8537eaaebc2d8d2035ef03316cac0d\n. Merged in c92294fa9a91a0c08720cb323a9d9bf55810e1e8\n. There was a problem with double-escaping, it should be fixed in 60483ec6c60346546780ac58bbb5f98443ca11ee\n. Unfortunately, I don't understand you problem. Could you please provide more details? Until then I am closing the issue. Feel free to re-open it if the problem is still happening in your environment.\n. Meta tags are updated automatically in Turbolinks 5, so meta-tags gem fully supports turbolinks now.. Fixed in 5436a38e1e6af88aea16c02d7ba3e7fd9badff41\n. You can configure limits now, see README change in f194614e2900f2e9a906d0c12f5a5bc22791493f\n. Should not be a problem, because our Tag lives in MetaTags::Tag\n. Missing escaping fixed in 1c4ed2157e4a869dc57ed521fbe562522c872ecf and 60483ec6c60346546780ac58bbb5f98443ca11ee\n. The main idea was to remove HTML tags, which strip_tags does. I understand the problem with special chars, but the PR as it is now breaks the initial goal, allowing certain HTML tags to pass through. If you would update it to make sure no HTML tags pass through, and add specs - I don't see any reasons why it could not be merged.\n. And it breaks current specs suite :-)\n. We pass encode_special_chars: false to Loofah when doing strip_tags now.\n. Sorry, it took a while for me to get back to OSS. MetaTags is alive, and I intend to support it a long as there are active users.\n. Merged as 4d5dc6d6ee7d5f8b89b607d07db9d5b45ba8d063\n. There is no canonical helper. But you can use `<% set_meta_tags canonical: 'http://google.com' %>\n. This method is in master, but not yet release as a version. You can point your app adding this to Gemfile:\ngem 'meta-tags', github: 'kpumuk/meta-tags'\n. I just released a new version of meta-tags gem, try updating it to 2.1.0.\n. No problem, sorry I was delaying the release beyond any reasonable point\n. With Ruby using ordered hashes by default, this is the default behaviour of the gem now.. The issue has been resolved in https://github.com/kpumuk/meta-tags/commit/f0f83641ba2eba5dc6eeb5610d8e6cb1d7a5e785\n. Closed in https://github.com/kpumuk/meta-tags/commit/b550266bc0e49ee975f8bcae430ebecce47bd989\nThanks for the PR\n. Merged in https://github.com/kpumuk/meta-tags/commit/b550266bc0e49ee975f8bcae430ebecce47bd989\n. Rails 4.2.1 is no longer supported. Closing the ticket. Fill free to re-open if you see any issues with newer versions of Rails.. Considering closed :-)\n. Should be resolved in https://github.com/kpumuk/meta-tags/pull/120\n. Resolved in https://github.com/kpumuk/meta-tags/pull/120\n. AppLinks support has been added in https://github.com/kpumuk/meta-tags/commit/364bc4a4da20a9565688d55cd3c380ad4c67f148\n. The issue has been resolved in https://github.com/kpumuk/meta-tags/commit/f0f83641ba2eba5dc6eeb5610d8e6cb1d7a5e785\n. Fixed in https://github.com/kpumuk/meta-tags/pull/120\n. Merged in https://github.com/kpumuk/meta-tags/commit/c0be9e4b3c816a54b917d09984293db1a6843297\n. The PR has been merged in https://github.com/kpumuk/meta-tags/commit/849aacf2356a6ca946383e4f19a39bf0c3fe844f\n. The issue has been addressed in https://github.com/kpumuk/meta-tags/commit/f0f83641ba2eba5dc6eeb5610d8e6cb1d7a5e785\n. The issues should be resolved in https://github.com/kpumuk/meta-tags/pull/120\n. At the moment pjax does not support meta tags updates. I would recommend considering this approach for title updates.\n. Pull request has been merged to the master, released with 2.2.0\n. This change has been merged in https://github.com/kpumuk/meta-tags/commit/aa51c7982f2fb2ee1d67b3cf46b67449c9f5b0b2\n. Yes, the gem integrates with ActionView, which is part of Rails rendering pipeline. There are no plans to release it for Sinatra\n. Valid HTML should escape & symbol into &amp; in attributes. See https://mathiasbynens.be/notes/ambiguous-ampersands for details\n. If your url already has escaped ampersand (&amp;) you can use .html_safe on your url like\nruby\nset_meta_tags image: { url: my_url.html_safe }\nI would recommend to always escape ampersands in URL\n. This is interesting. I will investigate\n. So, I have tested a twitter card with url https://dummyimage.com/600x400/ff0000/fff&text=test, and it seems to be working fine:\nhtml\n<meta name=\"twitter:image\" content=\"https://dummyimage.com/600x400/ff0000/fff&amp;text=test\" />\nTesting with multiple ampersands...\n. Just tested on an image from imgix: https://assets.imgix.net/changelog/changelog_20160930.jpg?w=640&h=640&fit=crop&rot=1&crop=bottom&auto=enhance%2Cformat&sharp=30&q=15&blur=75.0\nI added blur=75 so it is obvious if the url was used properly.\nCode:\nruby\ndisplay_meta_tags(\n  twitter: {\n    image: 'https://assets.imgix.net/changelog/changelog_20160930.jpg?w=640&h=640&fit=crop&rot=1&crop=bottom&auto=enhance%2Cformat&sharp=30&q=15&blur=75.0'\n  }\n)\nGenerated meta tag:\nhtml\n<meta name=\"twitter:image\" content=\"https://assets.imgix.net/changelog/changelog_20160930.jpg?w=640&amp;h=640&amp;fit=crop&amp;rot=1&amp;crop=bottom&amp;auto=enhance%2Cformat&amp;sharp=30&amp;q=15&amp;blur=75.0\" />\nResult:\n\n. Thank you for reporting the issue, Guardian. Even if it is a no-issue, we have learned something new today :-)\n. Thanks @cookiescrumbs . Merged https://github.com/kpumuk/meta-tags/pull/131 with documentation update in https://github.com/kpumuk/meta-tags/commit/382aef3b1ee6085f11410678710489394c06a32a. Do you have <%= display_meta_tags %> in your layout file? set_meta_tags is used on page templates to add meta tags defined in a layout. So,\n1. Add this to your layout:\nhtml\n   <%= display_meta_tags description: 'Welcome to the Manly Art of BBQ, the online knowledge     stockpile of all things manly. This includes, but is not limited to, how to cook great barbecue.',\n                         keywords: 'knowledge, home, BBQ, barbecue, manly, art',\n                         site: 'The Manly Art of BBQ' %>\n2. On your page files use <% set_meta_tags title: 'Another page' %> to set custom title, add tags, change description, etc.\n. If you use set_meta_tags in the layout, the values you passed will override the ones you set in your views. Instead, only display_meta_tags should be used in the layout:\nerb\n<%=\n  display_meta_tags(\n    description: 'Welcome to the Manly Art of BBQ, the online knowledge stockpile of all things manly. This includes, but is not limited to, how to cook great barbecue.',\n    keywords:    'knowledge, home, BBQ, barbecue, manly, art',\n    site:        'The Manly Art of BBQ',\n  )\n%>\n. Resolved in https://github.com/kpumuk/meta-tags/commit/47a3b9e1500e461e8ac49fe97231ed8cd89005aa\nConfiguration option name is truncate_site_title_first. Could not merge this PR because it breaks existing logic, and does not handle reversed titles properly.. Hi! Version 2.4.0 with amphtml was just released :-) Hope it helps. Version 2.5.0 released, with proper support for all the Open Graph object types (so for your case it will work out of the box), and an ability to specify which tags should be rendered with property key (see Configuration for details). Thank you. I have made couple changes to your code to support all Open Graph object types out of the box (and renamed config option to property_tags). You can check the changes in https://github.com/kpumuk/meta-tags/commit/e36406d572925959378ac55ba1426825c2336fd7\nThank you for your contribution!. set_meta_tags is used in a controller or in a view to change meta tags. display_meta_tags is used to render them.\nUse:\nerb\n<head>\n  <%= display_meta_tags description: \"test\" %>\n</head>. Version 2.4.1 was just released to fix the issue. Kudos to @BenjaminKim for https://github.com/kpumuk/meta-tags/pull/136. You can use <% set_meta_tags description: 'Other description' %> or <% description 'Other description' %> in your views. Checking, thank you for the report. Could you remove set_meta_tags and pass arguments directly to display_meta_tags? Like:\nerb\n<%=\n  display_meta_tags(\n    site:        home_meta_title,\n    description: \"Default description\",\n    charset:     \"utf-8\",\n    canonical:   canonical_url,\n    icon:        favicon,\n    reverse:     true,\n    viewport:    \"width=device-width, initial-scale=1, maximum-scale=1\",\n    twitter:     { widgets: { csp: \"on\" } },\n  )\n%>\nIf you use set_meta_tags in the layout \u2013 it will override the values you set in your views. If you pass values to display_meta_tags \u2013 they will be used as defaults, and views will override the values.. You're welcome. @aapljack Could you provide more details?\n\nwhere do you have display_meta_tags declared? (layout? view?) If it is a layout, please make sure it is the one used for your controller.\ndo you change description via set_meta_tags or description helpers?\ndo you by any chance have @page_description instance variable declared in your controller?. We do support Open Graph: https://github.com/kpumuk/meta-tags#open-graph. Thank you!. Hey. MetaTags does not strip any characters if they fit into the limit (70 characters by default). Could you add something like \n\nerb\n<pre><%= @page.meta_title.inspect %></pre>\nto your page and post the result here for me to reproduce/investigate?. Tried:\nruby\nset_meta_tags(\n  title: 'Overriding the title | Example Site',\n)\ndisplay_meta_tags(\n  site: 'My website',\n  reverse: true,\n)\nand it is rendering:\nhtml\n<title>Overriding the title | Example Site | My website</title>. The only way to reproduce the issue you're seeing is here:\nruby\nset_meta_tags(\n  title: 'Overriding the title very long title something wtf | Example Site',\n)\ndisplay_meta_tags(\n  site: 'My website',\n  prefix: false,\n  reverse: true,\n)\nRenders:\nhtml\n<title>Overriding the title very long title something wtf || My website</title>\nThis is because the result title is reaching the limit (70 chars), and page title gets truncated. There are two options:\n\nChange title limit to a bigger number (keep in mind that search engines will truncate it to 60-80 chars anyway): config.title_limit\nChange the truncation rules to first truncate site title: config.truncate_site_title_first\n\nGlobal settings file can be generated using rails generate meta_tags:install. One small correction: if the string was truncated as is, on the character break, the result would have been Overriding the title very long title something wtf | Exam | My website. But MetaTags tries to break title on word edges, so the truncated word Exam does not appear in the result.. @rsiddle hey. could you confirm that the issue is resolved for you? :-). Closing the issue. If you have any more questions - feel free to re-open.. Interesting. The logic in the code handles prefixes, so profile:username should be covered by profile only. I have tried following spec, and it passed on the current implementation:\nruby\n  it \"should display profile meta tags\" do\n    subject.display_meta_tags(og: { type: 'profile' }, profile: { username: 'kpumuk' }).tap do |meta|\n      expect(meta).to have_tag('meta', with: { content: \"profile\", property: \"og:type\" })\n      expect(meta).to have_tag('meta', with: { content: \"kpumuk\", property: \"profile:username\" })\n    end\n  end. \ud83d\udc4d . @bteixeira Is this something you have in mind? https://github.com/kpumuk/meta-tags/pull/150. You can use set_meta_tags in the controller:\nruby\nset_meta_tags og: { title: 'My Page', author: 'Me' }. There is a reason I built the list as it is now. restaurant is not a valid open graph object type, but restaurant:menu is. The same goes for books, business. The only weird exception from this is product, which is a valid object type, as well as product:group. For the purposes of clarity, I added object types exactly as they listed in the reference.. Valid point. Didn't realize there are exceptions like restaurant:contact_info. Thank you!. As much as I would love to be responsible for breaking Facebook, that is highly unlikely. Closing as irrelevant (besides, the URL you specified works in the OG debugger now).\nThank you for the feedback. Resolved by pull request. Thank you, @gururuby . Thank you!. We use CodeClimate to ensure code quality, there is no need for a second opinion from CI :-)\nThank you for your work!. Merged in https://github.com/kpumuk/meta-tags/pull/186. Thank you!. @andriy-baran What was the issue?. Sounds like a useful addition.. Resolved by #165. Released in 2.9.0. Thank you!. Looks pretty good. I have concerns about the helper method index, as the name has a special meaning in Rails (not in the views, but still). Do we need it, or just rely on set_meta_tags? People often complain about the gem defining methods like title or description, so I am trying to avoid adding any more helper methods.\nAnother option would be to rename it to something like robots_index.. Good job! Thank you for your contribution. Yes, this is a great idea, I have been thinking about this change for a while. My only suggestion would be to return title and description back for the next version (2.10) and raise deprecation warnings on every use.\nWith version 3 we can remove the old methods. What do you think?. I am updating docs and the build matrix (to include Rails 5.2). Will release shortly.\nThank you for your contribution!. \n. Facebook is looking for fb:app_id meta tag, so the answer is fb: { app_id: '108427863187624' }. You're looking for :reverse and :separator options:\nerb\n<%= display_meta_tags site: 'awesomesite', reverse: true, separator: '\u2013' %>. Is this still relevant?. Closing as incomplete. Please re-open if the issue is still relevant and you have more information.. I like the idea. My main concern is that if you send an object by accident, it will throw a confusing error like:\nNoMethodError: undefined method `to_str' for #<User:0x00007fda326480e8>\nWhat do you think about moving this change to cleanup_string method, and also adding a validation? Like\n``ruby\n    def cleanup_string(string)\n      raise ArgumentError, 'Expected a string or an object that implements #to_str' unless string.respond_to?(:to_str)\n      strip_tags(string.to_str).gsub(/\\s+/, ' ').strip.html_safe\n    end. Merged within https://github.com/kpumuk/meta-tags/pull/183. 1. Only a handful of meta tags support aliasing. This includes:title,:site, and:full_title,:description,:keywords`, and links.\n\n\nIn your case instead of aliasing set the og:image directly:\nruby\nset_meta_tags og: { image: '/path/to/file.png' }\n\n\nMeta tag image is not a valid meta tag as far as I know:\nruby\nset_meta_tags image: '/path/to/file.png'\nWill generate:\nhtml\n<meta name=\"image\" content=\"/path/to/file.png\">. Which gems do you use? Seems like one of them exposes title helper, or you have it somewhere defined as helper (e.g. helper_method :title). There are plans to get rid of this helper in favor of meta_title or something like that. @jessecampos Thank you for the report, awesome catch!. Thank you!. Resolved in https://github.com/kpumuk/meta-tags/pull/189\n\n\nThank you. Released 2.11.1. The file is in the package. Technically, it is the only one that was changed (besides the metadata). Could you try restarting spring (e.g. run spring stop) before running rails server (just once, to make sure the gems are reloaded). Maybe move this condition to truncate? There is already if limit modifier, maybe change it to if limit.to_i > 0 ?. Both description and title should follow the same rules: https://github.com/kpumuk/meta-tags/blob/master/lib/generators/meta_tags/templates/config/initializers/meta_tags.rb#L4\nSo I would fix it in truncate method as it is used for both.. Definitely, I will add it to my todo, thank you. The idea was that limit would define whether we need to truncate, and how many characters to truncate to. So it checks if limit was supplied, but I forgot about 0 :-) So yes, checking if limit is 0 or nil is the right way. ",
    "marius": "It is only happening in production mode, and only for some pages. We couldn't figure out what triggers this. The backtrace shows that the error occurs on the line with .map inside normalize title. Maybe rails does some caching for strip_tags or h and freezes the resulting string?\nCan you somehow test in production? Maybe with some tags and unescaped html entities in the title.\n. Sorry, I have no idea what to do. Maybe it's one of the other gems or plugins we are using.\n. ",
    "joelmats": "Will this be merged?\n. ",
    "aaronchi": "It would be nice to have this. Sites use other meta tags besides just description and keywords\n. ",
    "amoslanka": "The error I mentioned is a routing error, and the only information available is \"undefined method `set_meta_tags' for ApplicationController:Class\"\nAs for the title tag, that actually is how I'm using it. There's just nothing output. I've placed \n<% title 'Site Name' %>\nin the header and\n<%= title 'Page Title' %>\nin the body and still, no page title is rendered.\nthanks\namos\n. ",
    "csiszarattila": "First: Great plugin, thanks!\nI can also confirm this error: failed to use it with bundler in a rails2 app.\nHowever I think its an error on bundler because when I installed as a rails plugin it work like a charm.\n. ",
    "chessguy": "I was able to generate an actual error in Rails 3.05 with <% set_meta_tags  :description => \nActionView::Template::Error (undefined method `display_meta_tags' for #<#<Class:\n. ",
    "Fedalto": "To fix this in Rails 3, just put in the Gemfile:\ngem 'meta-tags', :require => 'meta_tags'\nand then:\n$ bundle install\n. ",
    "jspaper": "@Fedelto, I did as you say, development is fine but production will show undefined display_meta_tags or undefined title method. \n- Ruby 1.9.3-p125\n- Rails 3.2.3\n- meta-tags 1.2.6\nthanks.\n. ",
    "jamonholmgren": "Having this same problem with Rails 3.2.6, Ruby 1.9.3-p125, meta-tags 1.2.6.\nundefined method `title' for #<#<Class:0x007fde87924420>:0x007fde878a7f88>\n. ",
    "wspruijt": "Same issue here:\nundefined method `set_meta_tags' for ApplicationController:Class\nruby 1.9.3p125\nrails 3.2.3\nmeta-tags 1.2.6\n. ",
    "vijaybrr": "I am also seeing this issue in production, but works fine in development. \n. ",
    "Stratus3D": "I am having the same issue as well.\nMy environment:\nruby 2.0.0p247\nrails 3.2.14\nmeta-tags 1.5.0\n. ",
    "demirhanaydin": "If you're using unicorn, maybe restarting unicorn after deploy can solve your require problem.\n. ",
    "AtaruOhto": "@demirhanaydin\nThanks. Restarting unicorn solved the problem.\n. ",
    "manvedu": "I have the same problem, undefined method `set_meta_tags' for ApplicationController:Class and Im in development enviroment. ruby '2.5.1' and  'rails', '~> 5.0.1'. ",
    "andmej": "Just wondering why this hasn't been merged yet?\n. ",
    "sethiele": "How can i set the \"new\" openGraph Tags without the og: in the front?\nLike:\nhtml\n<meta property=\"app_name:location\" content=\"Sample location\" />\n. ",
    "doabit": "I use rails3.1.rc6,it works well.\n. ",
    "tarellel": "I'm using rails_3.1.3 and works fine for me, it must be something else in your setup that's causing this.\nEDIT: I've also confirmed it works in the 3.2rc1 as well, care to elaborate if you're still getting the error?\n. ",
    "philbotto": "I am also using Rails 3.1.3 and have had no problems.\n. ",
    "marshluca": "thanks, I solved the problem after upgrad rails to 3.1.3\n. ",
    "omarvelous": "Concur. Experiencing the same issue.\n. ",
    "tmeasday": "Works great! Thank you very much.\nTom\nOn 04/03/2012, at 7:39 AM, Dmytro Shteflyuk wrote:\n\nIn this case you would have to duplicate default parameters both in the header, and in the title attribute. I think we should come up with another idea how to implement this.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/kpumuk/meta-tags/pull/12#issuecomment-4304412\n. \n",
    "graffzon": "Hay!! Anybody!!\n. ",
    "skarface": "Someone can add this abilyti? Thanks. \n. ",
    "MatthewCallis": "This seems to be working fine in this way with the most recent version:\nruby\nset_meta_tags :robots => \"noindex, follow\"\nThis can be closed.\n. Facebook correctly recognizes both name and property attributes now, I just tested this on their Debugger and the OpenGraph data was recognized correctly.\nThis can be closed.\n. Is there any reason this hasn't been pulled in? I need this feature and would rather not fork the gem.\n. Maybe something like:\nruby\nset_meta_tags\n  :og             => {\n    :title        => title,\n    :description  => meta_description,\n    :image        => images[0],\n    :url          => canonical_url,\n    :type         => \"xxx:yyy\"\n  },\n  :fb             => {\n    :app_id       => app_id\n  }\n. ",
    "tigluiz": "+1\n. ",
    "nelsonmhjr": "Made a Pull Request fixing. Waiting to be merged.\n. ",
    "karl-petter": "Just had the same problem, great if that could be pulled in!\n. ",
    "hmayer00": "+1\n. ",
    "carminelavalle": "Very useful!\n. ",
    "philister": "+1\n. ",
    "wtfleming": "Would love to see either this or another solution merged in. We have meta tags in a custom namespace that facebook requires us to use - and these commits allow us to do so.\n. ",
    "fredkelly": "I definitely would like a nicer solution to implementing FB Open Graph meta tags... I've tried a couple of gems including this and acts_as_opengraph.. Would like to be able to define a list of attributes in my model and then just call Model.open_graph or something to return all the required meta tags.. Bit of a tricky one as things like url helpers aren't accessible inside of a model (for obvious reasons).. hmm.. may have to roll my own! \n. Just to update: I've had a bash at solving this issue myself - https://github.com/fredkelly/acts_as_graph_object\n. ",
    "kulbida": "Having an issue like this too.\n. ",
    "travisbot": "This pull request passes (merged 2edb9445 into 1f04b9e9).\n. ",
    "pedrofs": "I have made a pull request with my commit.\nhttps://github.com/kpumuk/meta-tags/issues/28\n. please, forget it. this commit made some tests to break up.\n. i fixed the broke tests and added one to test my feature.\n. ",
    "michaelbaudino": "What's the status of this ? I may also need this.\n@kpumuk is there a problem in @pedrofs implementation ? Shall we try to change something in it ?\n. ",
    "esthervillars": "+1 for this one\n. ",
    "stereoscott": "Awesome. Thanks @kpumuk! Your time and efforts are greatly appreciated.\n. ",
    "hyperrjas": "Thanks!\n. ",
    "bourgeois": "Right, I didn't think about that,\nThanks !\n. ",
    "PikachuEXE": "HAML:\nhaml\n%meta{charset: \"utf-8\"}\n. Any reference for that limit?\n. I can use it on rails 4.0.4\nAnyone got issues?\n. ",
    "ryantownsend": "It would be great if we could add generic link tags - this way adding dns-prefetching, favicons etc would supported.\n. ",
    "richardrails": "Check app called MS SEO Toolkit. I got the recomendation of the length.\n. ",
    "mhoad": "Sadly it appears not, I was trying to use it in a Rails 4 project today and was unable to get it to work, was constantly plagued with undefined method errors unfortunately.\n. ",
    "Theminijohn": "Oh, Sad :(\n. ",
    "juno": "I can use meta-tags with rails-4.0.0.\n```\nGemfile:\ngem 'meta-tags', '1.5.0', require: 'meta_tags'\n```\nDid you specify a require option?\n. folks,\nmy workaround assumes the title string explicitly marked with .html_safe or wrapped h rails helper.\nerb\n<% set_meta_tags(title: h(\"&\")) %>\nhtml\n<title>&amp;</title>\nUnfortunately, I found same problem in set_meta_tags(og: ...) but I couldn't fix that...\n. ",
    "yagudaev": "Weird, seem like it grabbed a really old version for me for some reason when I did my bundle install.\nJust bundle update meta-tags to fix :).\n. ",
    "dmitry": "I guess pull-requests are welcome. :+1: \n. @zrisher open graph is supported by this gem.\n. ",
    "zrisher": "+1 for the ability to specifically target Google Plus using itemprop tags. Understood that this is not a priority for maintainer, but it's a useful feature. Hopefully someone (including myself) will find the time to build this in.\n. @dmitry Yes, open graph is, but how would you provide one tag to facebook/instagram, and a different version to google plus? That's what I meant by \"specifically target.\"\n. That would be useful to me, especially if it supported the sizes attribute: \nsizes=\"16x16 32x32\" or sizes=\"228X228\" \nand different values for rel:\napple-touch-icon, apple-touch-icon-precomposed to specify a precomposed version for < iOS7.\nPer these sources 1,2,3, we don't need an IE statement since we can include favicon.ico in the site root at public/.\nMaybe the easiest way to do this would be a hash that takes the value for each attribute? \nset_meta_tags icons: [\n  { href: '/images/icons/icon_96.png', rel: 'icon', sizes: '32x32 96x96', type: 'image/png' }, \n  { href: '/images/icons/icon_itouch_precomp_32.png', rel: 'apple-touch-icon-precomposed', sizes: '32x32', type: 'image/png' }, \n  ...etc...\n]\nWe can support newer IE tiles with the existing custom tag functionality.\n. @rmm5t Ok agreed support for precomposed is probably unnecessary. \nSupporting type is probably unnecessary too, since the only time you'd need a type other than image/png is if you're providing an ico file to non-IE browsers (which don't necessary look in root). That's a sub-optimal choice compared to giving them resolution-targeted png files that only include the necessary data for that browsing environment. I guess someone might want to use jpg's since they're smaller at larger resolutions, but they're lossy and it's unlikely to save much space for favicons.\n. @naveda89 Supporting both :image and :images would make the most sense for the general Ruby user, whereas :image makes sense for someone who knows that the OG property value will simply be og:image repeated multiple times. Similarly, using :_ for the image URL is probably confusing for someone who doesn't know that og:image:url and og:image are equivalent properties.\nSince this gem creates an interface, I'd personally opt to abstract away the actual OG property values. But I understand that staying closer to them simplifies implementation quite a bit, so I won't complain. : ) Thanks for the PR.\n. Fixing #63 would fix this as well.\n. ",
    "scarfacedeb": "+1\n. ",
    "andrewgarner": ":+1: \n. ",
    "svoop": "@kpumuk Thanks!\n. ",
    "lehni": "Great, thank you both!\n. ",
    "dudo": "Yup... I saw the hashes section of the readme after I posted this... you can pass pretty much anything. Awesome!!\n. ",
    "sachin87": "i fixed this by using display_meta_tags helper method.\n. @josegrad you are  welcome.\n. ",
    "josegrad": "@sachin87 Thanks for the hint. I spent too much time getting something out of the gem.\n<%= display_meta_tags :nofollow => true %> worked for me.\n. ",
    "rmm5t": "@zrisher Some good suggestions, but I don't really want this to be just a direct mapping to the <link> tag.\nSupport for apple-touch-icon is a good idea too, but I think we should just let precomposed die off. It's deprecated afterall.\n. ",
    "naveda89": "Instead of use an option like [:og][:images] I would suggest to keep the option as [:og][:image] and let pass an attribute as an array of string (with URLs) or an array of hash with the desired structure.\nI'm gonna take a look :smile: \n. This maybe fixed on #68.\n. ",
    "lulalala": "In our fork https://github.com/GoodLife/meta-tags/tree/flexible-alternate, you can use the following to achieve what you want:\nset_meta_tags(\n    alternate: [\n      {href:\"http://www.example.net/feed.rss\", type:\"application/rss+xml\", title:\"RSS\"},\n    ],\n  )\nTo maintainer:\nthe current alternate logic is only limited to hreflang. However alternate can also be used at many places, such as mobile versioned pages (https://developers.google.com/webmasters/mobile-sites/mobile-seo/configurations/separate-urls#annotation-in-the-html)\nSo can you consider my fork and see if see if you are happy with the syntax? It is not compatible with previous versions, but I think that can be fixed.\n. :+1: thanks!\n. YAY! :+1:\n. Just wondering if those new merges 1 month ago will be published anytime soon?\n. ",
    "pnull": ":+1: \n. ",
    "AlecRust": "Would be great to get this fixed :+1: \n. Would be great to get this merged. Fixes support for Facebook OG images (#65) and Twitter Cards to name a couple.\n. Thanks @lacco, that did work! I'm using Kaminari for pagination and I added this to _paginator.html.erb:\n<% set_meta_tags title: \"#{meta_tags[:title]} - Page #{current_page}\" unless current_page.first? %>\n<% set_meta_tags description: \"#{meta_tags[:description]} Page #{current_page}.\" unless current_page.first? %>\nClosing this issue.\n. ",
    "flaviomestre": "Looking forward to this fix too! thanks\n. ",
    "zfhui": "We bypassed this problem like this:\nset_meta_tags og: {\n  'image': \"http://example.com/lamb-full.jpg\",\n  image: {\n     type: 'image/jpeg', \n     width: '3523',\n     height: '2372'\n  }\n}\n. ",
    "nunommc": "Also, the documentation has got 2 use cases for author and doesn't seem to be returning what was expected.\n```\n1 .set_meta_tags author: \"http://yourgplusprofile.com/profile/url\"\n\n\nset_meta_tags author: [ \"Dmytro Shteflyuk\", \"John Doe\" ]\n\n\n\n```\nThis one is not working the way it was expected. Instead is creating a string with both names, rather than 2 meta-tags\n. ",
    "dlackty": ":+1: \n. @wielinde Is there any reference link that states Twitter uses property instead of name? From their official guide, they use name.\n. ",
    "thatandyrose": "@askehansen have you found a workaround. Getting this too. @schiza is this a known issue?\n. @askehansen I see. Have you tried @juno's fork?\n. @askehansen yeah tried it too, doesn't work for me either... looks like this gem is broken.\n. @junya ahh I see.\nGood stuff, I'll try that. Thanks for the work around AND the heads up!\n. ",
    "askehansen": "No.. But it looks like some sanitization is happening twice:\nhttps://github.com/kpumuk/meta-tags/blob/master/lib/meta_tags/text_normalizer.rb#L9\nhttps://github.com/kpumuk/meta-tags/blob/master/lib/meta_tags/text_normalizer.rb#L60\n. Yes I have tried it but doesn't seem to work\n. Works for me.. Great found @lacco :+1: \n. ",
    "lacco": "Using gem 'meta-tags', github: 'juno/meta-tags', branch: 'fix-issue-69' seems to solve the issue for me:\nruby\n  set_meta_tags(\n    title: '& \"Hi\"'.html_safe, \n    # Just don't call html_safe here...\n    og: {title:  '& \"Hi\"'}\n  )\n. I finally found some time to dig into this issue: Rails 4.2 has changed the behavior of strips_tags(\"&\"), which now returns a html encoded version (\"&amp;\"), see https://github.com/rails/rails/issues/18527 and https://github.com/rails/rails-html-sanitizer/issues/28. meta-tags is using this method in MetaTags::TextNormalizer#strip_tags. \nI am not sure if this is should be directly fixed in rails-html-sanitizer gem, but my workaround for now is calling the loofag library directly. I am not sure about security implications (https://github.com/rails/rails-html-sanitizer/blob/master/lib/rails/html/sanitizer.rb#L25 is doing some special things with script and form tags), but using something like Loofah.fragment(string).text(encode_special_chars: false) instead of strips_tags fixes the issue for me.\nYou might want to try my fix using gem 'meta-tags', github: 'lacco/meta-tags', calling html_safe for the title tag is no longer needed.\n. It seems like Rails 4.2.2 might fix this issue: https://github.com/rails/rails-html-sanitizer/pull/35\n. I am using this gem with Turbolinks, no problems so far...\n. As far as I see meta-tags isn't ready for Rails 4.2 yet, see also my comment in https://github.com/kpumuk/meta-tags/issues/69#issuecomment-74526894 .\n. What is the exact error message? Normally this shouldn't be a problem since tag.rb is living in the meta tags namespace.\n. Not sure if it helps, but you can read the current description with meta_tags[:description]. So perhaps something like\n<% set_meta_tags description: \"#{meta_tags[:description]} - This is a description\" %>\nmight help?\n. ",
    "jezstephens": "This still seems to be happening in 2.1.0 and master. Please can this be re-opened?\n. ",
    "bengalamx": "This happens when you don't review the docs, i fixed it with:\nruby\n<%= display_meta_tags site: SITE_NAME,\n    description: DESC,\n    keywords: %w(KEY1 KEY2 KEY3),\n    reverse: true,\n    prefix: false,\n    separator: '.'\n%>\nThe reverse, prefix and separator did the trick.\n. ",
    "harisaurus": "@lacco you'll notice that only the title tag changes when navigating through pages. The description tag for example remains the same. Anyone have any suggestions?\n. ",
    "dminchev": "@harismahmood89 this should tell us enough for the issue http://cookieshq.co.uk/posts/easy-seo-metatags-with-rails-4/#a-word-about-turbolinks\n. ",
    "Bahanix": "\ud83d\udc4d would be helpful, especially for AMP pages https://www.ampproject.org/docs/tutorials/create/basic_markup. My bad, I was using 2.4.1, then forked with 2.6.0 and was thinking it worked because of my changes. But everything works nicely with 2.6.0. Thanks for your work!. ",
    "brentdodell": "+1. Has anyone come up with another gem that supports json-ld/schema.org metadata? I would love for it all to be in this one gem, but would also be willing to pull another gem in for the time being until it gets added to meta-tags.. \ud83d\udc4d I'm having this issue too\n. @kpumuk Is there any chance I could get this integrated. It fixes an issue noticed by a couple of different people.\nI'm not sure why the one spec is failing, but the same spec appears to fail when I run the test suite against master on my local machine.\n. Thanks @kpumuk!\n. Wow! That was fast! Thanks @kpumuk! Should I have bumped the gem version to 2.9.1 as well?. ",
    "grammakov": "@brentdodell https://github.com/public-law/schema-dot-org. ",
    "paulanthonywilson": "Oh, workaround to run the specs for now, is something like\nexport RAILS_VERSION=4.1.9\nbundle update actionpack\nbundle exec rspec spec\n. I'm inclined to ignore the houndci comments, as the code is consistent with the rest of the code in the files.\n. Prefer to retain single quotes as that is the general style in the rest of the gem.\n. Prefer to retain single quotes as that is the general style in the rest of the gem.\n. Older hash syntax is prevalent in the rest of the gem, so would prefer to retain it.\n. ",
    "jasdeepsingh": "Have you restarted your application in Production environment? Also, please paste your Gemfile.\n. ",
    "devilankur18": "I have found the problem, the missing link is that in Gemfinle it requires a require and it works.\ngem 'meta-tags', require: 'meta_tags'\n. ",
    "forvalho": "No feedback whatsoever... I'll do this in my app instead.\n. ",
    "mtrolle": "A very simple solution for this request is to paste the following code to your ApplicationController\n```\n  before_filter :read_meta_tags_from_locales\ndef read_meta_tags_from_locales\n    name_space = \"meta_tags.#{controller_name}.#{action_name}\"\n@page_title = I18n.t(\"#{name_space}.title\") unless I18n.t(\"#{name_space}.title\", default: '').blank?\n@page_description = I18n.t(\"#{name_space}.description\") unless I18n.t(\"#{name_space}.description\", default: '').blank?\n@page_keywords = I18n.t(\"#{name_space}.keywords\") unless I18n.t(\"#{name_space}.keywords\", default: '').blank?\n\nend\n  protected :read_meta_tags_from_locales\n```\nThis will support the locales structure given above for title, description and keywords.\n. ",
    "momelnyk": "+1 for merge\n. ",
    "alexkravets": "+1 for merge, right now we have to link to the branch instead\n. ",
    "kle-roy": "+1 for merge, using willybaer's branch too\n. ",
    "irubnich": "+1 for merge\n. ",
    "kgorin": "@kpumuk Can we get this updated and merged? I could provide tests for this as well.\n/cc @willybaer \n. @kpumuk can you review this PR?\n. @kpumuk hey, have you had a chance to review this PR?\n. @kpumuk hey, any chance this is getting merged?\n. ",
    "fabn": "That's a good question. @kpumuk are you there? Are you still interested in this great gem?\nIf not you could ask for community help and add some maintainers to it.\n. @AaronLasseigne I suggest to leave the ticket open, in this way it appears in the issue list (by default it only shows open issues). Maybe someone will fork and maintain it.\n. ",
    "AaronLasseigne": "Appears to be abandoned.\n. Sure, why not.\n. Oh, well, welcome back.\n. ",
    "cmckni3": "Aha! Apologies, I didn't notice that master had unreleased changes.\n. Works great! Thanks!\n. ",
    "mibamur": "Could someone fix it?\nFailures:\n  1) MetaTags::ControllerHelper.render should set meta tags from instance variables\n     Failure/Error: render\n     NoMethodError:\n       undefined method `empty?' for nil:NilClass\nhttps://github.com/kpumuk/meta-tags/blob/master/spec/controller_helper_spec.rb\n. ",
    "siegy22": "uuum.. what about:\nruby\nset_meta_tags(robots: 'noindex, follow')\n. @phlegx So the solution would be chaning https://github.com/Elektron1c97/meta_tags-rails/blob/master/lib/meta_tags-rails/text_normalizer.rb#L74 <= this line\nto \nruby\ndef self.strip_tags\n   ERB::Util.html_escape helpers.sanitize(string)\nend\n?\n. I forked this repo (as it's a little bit inactive) to https://github.com/Elektron1c97/meta_tags-rails, and I used this to speed up travis, thanks \ud83d\udc4d \n. I decided to fork this project onto my account as the owner is no longer really active.\nI implemented this change in https://github.com/Elektron1c97/meta_tags-rails/commit/8e873c70c3e2ab718f5d58ec986954969f00a5d9\nYou can use my gem for the future \ud83d\udc4d \n. @teohm Yes I'm thinking about that because the maintainer here was not active for over a half year..\n. I decided to fork this project onto my account as the owner is no longer really active.\nI implemented this change in https://github.com/Elektron1c97/meta_tags-rails/commit/2d08ca85bfa6a868c20210a22bb93ee7f5e58254\nI'm releasing the \"new\" gem under the name meta_tags-rails, feel free to check it out and use it in your project \ud83d\udc4d \n. I decided to fork this project onto my account as the owner is no longer really active.\nI implemented this change in Elektron1c97@8e873c7\nYou can use my gem for the future \ud83d\udc4d\n. Sure \ud83d\udc4d  @jeroenvisser101 \n. I decided to fork this project onto my account as the owner is no longer really active.\nI implemented this change in https://github.com/Elektron1c97/meta_tags-rails/commit/2d08ca85bfa6a868c20210a22bb93ee7f5e58254\n. Make sure you rebase it with my master branch before opening a PR.\nWe'll need to discuss this back at my repo. :+1: \n. ",
    "zamakkat": "Oh an for those looking for a fix, you just need to add an initializer. Create a file config/initializers/meta_tags.rb with this content:\n``` ruby\nMetaTags.configure do |config|\n  # How many characters to truncate title to.\n  config.title_limit = 70\n# How many characters to truncate description to.\n  config.description_limit = 160\n# How many characters to truncate keywords to.\n  config.keywords_limit = 255\n# Keywords separator - a string to join keywords with.\n  config.keywords_separator = ', '\nend\n```\nChange the title_limit accordingly to what you need :)\n. ",
    "toobulkeh": "I ended up with this code in my layouts (HAML):\nruby\n- set_meta_tags keywords: \"#{meta_tags[:keywords] + \", \" if meta_tags[:keywords]}#{t('keywords').join(\", \")}\"\n= display_meta_tags\nwith this (the list of keywords on every page) in my en.yml:\nyaml\nen:\n  keywords:\n    - word1\n    - word2\n    - word3\nIf anyone else has a cleaner way to do this (or if this is supported by this gem) please let me know!\n. ",
    "LeEnno": "You may shorten it to something like\nruby\n- set_meta_tags keywords: ((meta_tags[:keywords] || []) + t('keywords')).join(', ')\n= display_meta_tags\nAnd you may close the issue, since I think is an acceptable way of merging keywords :)\n. ",
    "mtin79": "Ran into the same issue.\nPlease fix!\nThanks.\n. ",
    "hisapy": "Please fix\n. ",
    "chr1s1": "updated description as & was transformed to &\n. ",
    "danielfriis": "+1\n. ",
    "ishields": "+1 Any solution to this problem?  I reverted to 2.0.0 and this problem doesn't occur.\n. ",
    "phlegx": "+1 same problem in keyword and description if I use e.g. John's\nPut this code in meta_tags.rb file under config/initializers and restart your app:\n``` ruby\nmodule MetaTags\n  # Module contains helpers that normalize text meta tag values.\n  module TextNormalizer\ndef self.truncate(string, limit = nil, natural_separator = ' ')\n  string = helpers.truncate(string, length: limit, separator: natural_separator, omission: '', escape: false) if limit\n  string\nend\n\ndef self.normalize_keywords(keywords)\n  return '' if keywords.blank?\n  keywords = cleanup_strings(keywords).each(&:downcase!).map(&:html_safe)\n  separator = strip_tags MetaTags.config.keywords_separator\n  keywords = truncate_array(keywords, MetaTags.config.keywords_limit, separator)\n  safe_join(keywords, separator)\nend\n\nend\nend\n```\nThis works only for version 2.1.0!!!\nThe problem is, that the strings gets encoded twice. Truncate gets as parameter an escaped string and don't needs to escape the string again. safe_join needs all keywords as html_safe because the keywords has been encoded with cleanup_strings just before.\n. @mrfoto why? My title is shown correctly with the above code. I take a look at the linked issues. Thx @prosanelli, here more about the patch http://weblog.rubyonrails.org/2016/1/25/Rails-5-0-0-beta1-1-4-2-5-1-4-1-14-1-3-2-22-1-and-rails-html-sanitizer-1-0-3-have-been-released/\nRails rails-html-sanitizer gem (included in Rails 4.2 and above) has a security alert. This gem includes used method strip_tags. \nPut this code in meta_tags.rb file under config/initializers and restart your app to test:\n``` ruby\nmodule MetaTags\n  # Module contains helpers that normalize text meta tag values.\n  module TextNormalizer\ndef self.strip_tags(string)\n  ERB::Util.html_escape helpers.sanitize(string)\nend\n\nend\nend\n```\n. Hi! In the new version 2.4.0 I get this description and this keywords as example:\nDescription tag:\nDon&#39;t ...\nKeywords Tag\nkeyword1, don&amp;#39;t\nThe description tag is ok but not the keyword because & of &#39; gets re-sanitized. Any idea?. I found that the following code at text_normalizer.rb#L98 re-encodes the keywords:\nruby\ndef self.safe_join(array, sep = $,)\n    helpers.safe_join(array, sep)\nend\nThis function is called by text_normalizer.rb#L57.\n```ruby\ndef self.normalize_keywords(keywords)\n      return '' if keywords.blank?\n      keywords = cleanup_strings(keywords).each(&:downcase!)\n      separator = strip_tags MetaTags.config.keywords_separator\n  keywords = truncate_array(keywords, MetaTags.config.keywords_limit, separator)\n  # variable keywords should be an array of raw elements because cleanup is always done on line 59.\n  safe_join(keywords, separator)\n\nend\n```. Hi @siegy22 and @kpumuk!\nI use latest version 2.4.0. I have solved the problem described in the last comment with this code:\n```ruby\nmodule MetaTags\nmodule TextNormalizer\ndef self.normalize_keywords(keywords)\n  return '' if keywords.blank?\n  keywords = cleanup_strings(keywords).each(&:downcase!)\n  separator = strip_tags MetaTags.config.keywords_separator\n  keywords = truncate_array(keywords, MetaTags.config.keywords_limit, separator)\n  # Replace safe_join with simple join.\n  # safe_join produces from don&#39;t the re-escaped string don&amp;#39;t\n  keywords.join(separator)\nend\n\nend\nclass Tag\ndef render(view)\n  # Method tag don't accepts symbols as option values.\n  attributes.each { |k, v| attributes[k] = v.to_s if v.is_a?(Symbol) }\n  # Keywords don't should be re-escaped.\n  escape = attributes[:name] == 'keywords' ? false : true\n  # Method tag re-escapes keywords values.\n  # tag(name, options = nil, open = false, escape = true)\n  view.tag(name, attributes, false, escape)\nend\n\nend\nend\n```\nWhit this changes I have all meta tags (title, description, keywords, etc.) escaped in the right way. This is not an elegant way but it shows how the problem can be solved. The attributes as a symbol can be changed in file renderer.rb using a string instead of a symbol e.g.:\nruby\nrender_with_normalization(tags, 'description')\nrender_with_normalization(tags, 'keywords'). ",
    "mrfoto": "@phlegx that doesn't solve the title problem. You have #85 and #105 open for that\n. I fixed it by just\ndef self.strip_tags(string)\n  helpers.sanitize(string)\nend\nNow better way would be to rename strip_tags everywhere to sanitize. But yeah, please merge some variation that will fix this bug.\n. ",
    "prosanelli": "This is now an issue for everyone that wants to upgrade to the Rails 4.2.5.1 security patch\n. ",
    "Lewis-Clayton": "+1\n. ",
    "wielinde": "Thank you for revising the PR. Looks like I was wrong about twitter cards.\nHowever, I am pretty sure about Applinks (al). I am off for holidays now\nand will check everything again as soon I am back.\nHave a happy new year!\nWielinde\nRichard Lee notifications@github.com schrieb am Mi., 23. Dez. 2015, 17:46:\n\n@wielinde https://github.com/wielinde Is there any reference link that\nstates Twitter uses property instead of name? From their official guide\nhttps://dev.twitter.com/cards/getting-started, they use name.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kpumuk/meta-tags/pull/106#issuecomment-166941535.\n. As @dlackty pointed out, I was wrong changing twitter's meta tag attribute \"name\" for \"property\". I now updated my pull request accordingly. So it basically just adds support for App Links (\"al\") meta tags.\n. \n",
    "etdev": "I ran into this with Facebook's fb:app_name and fb:admins tags as well.  Their crawler will recognize:\nruby\n<meta property=\"fb:app_id\" content=\"your_app_id\">\n<meta property=\"fb:admins\" content=\"your_admins\">\nbut not\nruby\n<meta name=\"fb:app_id\" content=\"your_app_id\">\n<meta name=\"fb:admins\" content=\"your_admins\">\nwhich is what's currently being generated.\n. ",
    "alpaca-tc": "\ud83d\udc4d Thanks!\nhmm.. how can i create rspec fixes PR to this one?\nhttps://github.com/kpumuk/meta-tags/commit/8cfc0f86549d\n. ",
    "plguo": "Not familiar how it works\n. ",
    "teohm": "@Elektron1c97 do you plan to actively maintain the project?\n. @srecnig As the repo maintainer is not active recently, @Elektron1c97 has forked the project at https://github.com/Elektron1c97/meta_tags-rails, and published a new gem called \"meta_tags-rails\". He has intention to actively maintain the new gem.\nWould you consider to submit this PR over there?  \ud83d\ude47 \n. ",
    "luizpicolo": "Thanks Brow\n. ",
    "vinnie-eb": "Any chance this is going to be merged soon?\n. ",
    "jazzz13": "Merge it please !\n. ",
    "svyatov": "@kpumuk are you planning to merge it anytime soon?\n. ",
    "jeroenvisser101": "seems this is already possible using Custom Metatags\n. @kpumuk would you accept PRs created to fix this? I'd be happy to give it a shot\n. @Elektron1c97 thanks, that's great! Please don't forget to add docs for the new things you add, so when @kpumuk will be active again it could easily be merged back :)\n. ",
    "zealot128": "There is already a PR open #109 \n. ",
    "bragovo": "Rails 5 released by warning still exists.\n. ",
    "simoniong": "Thanks for the great work @Elektron1c97 \n. ",
    "dangodev": "+1\n. ",
    "consegrado": "+1\n. ",
    "kira4ka": "I found a trick to temporarily solve the problem. I added a new initialiser into my app with the code: \nmodule MetaTags\n  module TextNormalizer\n    def self.strip_tags(string)\n      helpers.strip_tags(ERB::Util.html_escape(string))\n    end\n    def self.truncate(string, limit = nil, natural_separator = ' ')\n      string = helpers.truncate(string, length: limit, separator: natural_separator, omission: '', escape: false) if limit\n      string\n    end\n  end\nend\nHope it can be useful for somebody.\n. ",
    "patricklindsay": "Unless I am going crazy (I probably am) the above worked for me for a couple of requests then stopped working. I ended up also overriding self.safe_join.\n```\nmodule MetaTags\n  module TextNormalizer\n    def self.strip_tags(string)\n      helpers.strip_tags(ERB::Util.html_escape(string))\n    end\ndef self.truncate(string, limit = nil, natural_separator = ' ')\n  string = helpers.truncate(string, length: limit, separator: natural_separator, omission: '', escape: false) if limit\n  string\nend\n\ndef self.safe_join(array, sep = $,)\n  array.flatten.join(sep).html_safe\nend\n\nend\nend\n```\n. ",
    "srecnig": "here's another try on this issue: https://github.com/kpumuk/meta-tags/pull/120\n. @kpumuk great, thx! \ud83c\udf89 \n. ",
    "lustremedia": "Looks like pjax is actually considering meta tag refresh, at least there is a discussion going on ...\nhttps://github.com/defunkt/jquery-pjax/pull/284\n. ",
    "killerham": "Yeah I just found out that we're having this issue too.\n. ",
    "javogel": "Having the same issue here. Any luck with this change being pulled into the meta-tags gem? @Elektron1c97 's chage seems to fix it. Everything was going very smoothly with meta-tags until I came across this.\n. ",
    "detonatR": "having this issue too, did you manage to get a work around going?\n. ",
    "jakebellacera": ":+1:\nany forks with this solved already?. ",
    "kuboon": "I wrote monky patch for this issue. Add this to config/initializers/meta_tags.rb\n```rb\nmodule MetaTags\n  class Renderer\n    def render_title(tags)\n      site       = meta_tags.extract(:site) || ''\n      title      = meta_tags.extract_title || []\n      separator  = meta_tags.extract_separator\n      reverse    = meta_tags.extract(:reverse) === true\n  normalized_meta_tags[:site]  = site\n  normalized_meta_tags[:title] = TextNormalizer.normalize_title('', title, separator, reverse)\n\n  site_title = TextNormalizer.normalize_title(site, title, separator, reverse)\n  normalized_meta_tags[:site_title] = site_title\n  tags << ContentTag.new(:title, content: site_title) if site_title.present?\nend\n\nend\nend\n`normalized_meta_tagsis a hash which is referred by symbol like:title.\nUnfortunatelyextract_full_titleremovestitle`` from hash and keeps it to nowhere, I didn't use the function.. ",
    "erahm": "yes & should be encoded as &amp; when part of a URI or %26 when part of a word in a link. The issue comes from these not actually being href elements. The browser properly interprets the HTML encoded URL's in an href, but when using set_meta_tags image: { url: my_url } the URL is actually put into a content attribute on a meta tag. The link then doesn't work and Twitter is unable to render the card because it can't find the image.\n. As a side note, using .html_safe did work for me, but I feel like this might be something worth looking at. Ideally speaking, Twitter should be able to handle HTML escaped URL's but since it doesn't the metadata generated should be something Twitter can handle.\n. Ok, I've been testing from the same environment. Perhaps there's an issue with the way that environment is handling HTML encoded URL's that's causing Twitter to not be able to find the image on the server. Thanks for looking into this though.\n. ",
    "cookiescrumbs": "I've got a fix for this. Can someone give me access to enable me to push my branch, create a PR and get it reviewed? . ",
    "cmalpeli": "@LizBayardelle it's not too clear in the docs, but the order matters:\n```\n<% set_meta_tags description: 'Welcome to the Manly Art of BBQ, the online knowledge stockpile of all things manly. This includes, but is not limited to, how to cook great barbecue.',\n                 keywords: 'knowledge, home, BBQ, barbecue, manly, art',\n                 site: 'The Manly Art of BBQ' %>\n<%= display_meta_tags %>\n```\n. Thanks for the quick reply!  That is what I'm doing.\nMain Layout:\n<% set_meta_tags site: home_meta_title,\n                 description: \"Default description\",\n                 charset: \"utf-8\",\n                 canonical: canonical_url,\n                 icon: favicon,\n                 viewport: \"width=device-width, initial-scale=1, maximum-scale=1\",\n                 twitter:{widgets:{csp: \"on\"}} %>\n  <%= display_meta_tags reverse: true %>\nMy View:\n<% set_meta_tags title: @job.seo_title, description: @job.short_description,\n  og: {\n    title:    @job.title,\n    type:     'article',\n    url:      @job.url,\n    image:    @job.logo.opengraph,\n    site_name: @current_tenant.name } %>\nBut my output is:\n<meta name=\"description\" content=\"Default description\" />\n. That worked great - thanks!!. ",
    "pChaAnthony": "I have the same request, I am using Facebook's profile type.. ",
    "snicky": "Unfortunately, it seems the gem doesn't allow to specify the name_key for meta tags with custom names. If you look into the MetaTags::Renderer, the render_tag method pulls the name_key attribute from the options argument (https://github.com/kpumuk/meta-tags/blob/afcbbc7f16cdf2b00a457cf55cf2ec5508d67994/lib/meta_tags/renderer.rb#L252) which in case of custom meta tags is not passed at all (https://github.com/kpumuk/meta-tags/blob/afcbbc7f16cdf2b00a457cf55cf2ec5508d67994/lib/meta_tags/renderer.rb#L38)\n. The PR above solves this problem by allowing to specify custom meta tags that should use property attribute instead of name in the config.. ",
    "Startouf": "The following warning is given by facebook's debugger for a meta profile:first_name\nMeta with name instead of property\nThe meta tag on the page was specified with name 'profile:first_name', which matches a configured property of this object type. It will be ignored unless specified with the meta property attribute instead of the meta name attribute.. Maybe we should preconfigure the gem to use the property on metas that require it ? (cf brand, profile, etc.) ?\n. ",
    "aapljack": "@kpumuk I am having a similar issue. I am trying to put in a default description, but when I use<%= display_meta_tags( description: 'Default description' ) %> I get nothing back in the layout. I am using version 2.4.1 of the gem since I am on an earlier version of Ruby. Any advice?. @kpumuk Thanks for the response. Some details..\n\nI have display_meta_tags declared in the layout and it is the one being used by the controller.\nI am attempting to set the description via set_meta_tags in the controller. To test, I have completely removed this from the controller and I still do not get the default description set in the display_meta_tags.\nI have an instance variable of @page set and am pulling in the description with @page.description. When no description is present, I want it to fall back to the default.. \n",
    "bteixeira": "@kpumuk seems like it yes! Thanks for the fast reply, I'll try it today.. ",
    "kdonovan": "Ah, I hadn't realized the intent was to document the explicitly valid OG types (I think some of the confusion came from how configured_name_key checks against a regex rather than for explicit tag name matches).\nI can see why you might want to explicitly include only the valid object types, but it turns out that to actually use some of those object types requires additional metatags that must also use 'property' rather than 'name'. e.g. for restaurants, a given restaurant\u2019s OG tags also include things like \u201crestaurant:contact_info:street_address\u201d that must use the property field in order to pass FB\u2019s validations - https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.restaurant/.\nI may be misunderstanding the intent, but may I suggest either switching to a more permissive default list (as in my PR) or, if explicitly documenting the valid types is important, then expanding that explicit list to include any potentially required attribute for any of their object types (though that seems a long list and a moving target, which is why I lean toward the namespacing approach being cleaner)?. ",
    "artplan1": "@kpumuk codeclimate uses rubocop-rspec if it's defined in project. So it's not second opinion :) it's just more rubocop cops for specs :). ",
    "andriy-baran": "@kpumuk Sorry I my fault. Gem works just perfect.  Thank you for the gem. . ",
    "athix": "+1 to this issue.. ",
    "rafallo": "@kpumuk I have prepared PR, please take a look. @kpumuk I have removed index and follow methods from helpers and fixed related tests. ",
    "Spone": "Thanks for the reply. I will update the PR to raise deprecation warnings for now.\nMaybe we could also add an option to manually use the new names only, starting with the next release?\nAlso, what do you think about the naming? Actually, I think using the meta_ prefix makes more sense (as it's closer to the name of the gem, and less likely to cause collisions):\n\ntitle > meta_title\ndescription > meta_description\nkeywords > meta_keywords\nnofollow > meta_nofollow\nnoindex > meta_noindex\nrefresh > meta_refresh. \n",
    "AstmDesign": "Thanks guys,\nI fixed it, please close this ticket . ",
    "yuis-ice": "Thank you!. ",
    "thebravoman": "Created a PR\nhttps://github.com/kpumuk/meta-tags/pull/175. ",
    "grichardomi": "Used set_meta_tags  as an alternative!. Installation\nAdd the \"meta-tags\" gem to your Gemfile.\n\n\n\n\n\ngem 'meta-tags'\nAnd run bundle install command.\n\n\n\n\n\nI was not aware of other gem version. Please advise.\nThanks!\n. You are correct. I found title helper from one gem.  . ",
    "ACPK": "It seems that meta-tags was conflicting with https://github.com/calebthompson/title.. ",
    "atstockland": "AWESOME!. ",
    "houndci-bot": "Line is too long. [85/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [154/80]\n. Line is too long. [120/80]\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [97/80]Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [114/80]\n. Use the new Ruby 1.9 hash syntax.Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Line is too long. [81/80]\n. Line is too long. [96/80]\n. Line is too long. [81/80]\n. Line is too long. [96/80]\n. Line is too long. [81/80]\n. Align the elements of an array literal if they span more than one line.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Surrounding space missing for operator '='.\n. Line is too long. [103/80]Use the new Ruby 1.9 hash syntax.\n. Line is too long. [95/80]Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Surrounding space missing for operator '='.\n. Surrounding space missing for operator '='.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Line is too long. [95/80]Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [102/80]Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [97/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. unexpected token tCOLON\n. Assignment Branch Condition size for meta_tags_from_locales is too high. [17.29/15]\n. Line is too long. [123/80]Unnecessary spacing detected.Redundant self detected.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [129/80]Unnecessary spacing detected.Redundant self detected.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [135/80]Redundant self detected.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Trailing whitespace detected.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use 2 (not 1) spaces for indentation.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Space inside square brackets detected.\n. Line is too long. [100/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [81/80]Use %q only for strings that contain both single quotes and double quotes.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [97/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [98/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [97/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [112/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [92/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [107/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Separate every 3 digits in the integer portion of a number with underscores().Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [101/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [101/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [102/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [100/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Extra empty line detected at block body end.\n. Line is too long. [93/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [87/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Trailing whitespace detected.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [105/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [105/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [105/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [109/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [86/80]Space inside square brackets detected.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Separate every 3 digits in the integer portion of a number with underscores().\n. Line is too long. [97/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [91/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Final newline missing.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.\n. Extra empty line detected at block body end.\n. Line is too long. [96/80]\n. Line is too long. [93/80]\n. Line is too long. [124/80]\n. Line is too long. [122/80]\n. Line is too long. [103/80]\n. Line is too long. [83/80]\n. Line is too long. [122/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Indent the right brace the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [95/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [98/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [105/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [110/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [156/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [110/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [149/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [85/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [122/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [106/80]Space inside parentheses detected.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Use 2 (not -6) spaces for indentation.\n. Align else with if.\n. end at 24, 8 is not aligned with if at 19, 16.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Freeze mutable objects assigned to constants.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. ",
    "gururuby": "Hi, I would move this check then in a separate private method, for example - description_limit_enabled?. And did the same with the title limit.What do you think about this?. I think it is possible. But you need to write more tests. But you have to pass an additional argument to the method, for example truncate_enable?, I do not know how true this is.\nOr be guided by the second argument limit and on its basis to do a check. "
}