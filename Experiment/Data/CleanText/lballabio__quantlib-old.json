{
    "lballabio": "Hello,\n    thanks for the contribution.  I'm a bit concerned about making all these methods virtual, though, because it makes quite easy to break the relationships between them.  In the use case you mention (that is, different calculations of accrued interest) it seems to me that if you just override accruedAmount(), which is already virtual, the other results (prices, settlement value etc) should get the correct value.  Do you have other cases in mind in which the relationship dirtyPrice = cleanPrice + accruedAmount doesn't hold and should be overridden?\nThanks again,\n    Luigi\n. Wait, don't close it yet.\nWould it be possible to add the functionality in a way that doesn't need making everything virtual? For instance, defining two methods for accrued interest (we'd have to come up with a new name for the one for settlement), having them return the same thing in the default case, and overriding one for Canadian bonds?\n. Merged, thanks.  Just one request: if possible, set up your editor so that it uses 4 spaces, not hard tabs, so that it matches the default used in the library.\n. I think so. Funny though, I expected emacs to pick them up from the emacs-specific comments at the beginning of the files...\n. Peter,\n    I'd prefer to freeze the 1.3 branch after your Markov-related fixes and put this into master instead. Sorry for the additional work I'm putting you through...\n. Peter,\n    the perturbative-engine commit fixes a genuine bug, but the run time of the corresponding test passes from 1.5 minutes to 15, which is a bit too much.  Could you look into the test and see if it could be made faster? (Maybe requiring less accuracy, or finding an easier case for the optimizer.)\nThanks.\n. Holy cow.  How long does the whole test suite take on your machine? Careful\nwhat you answer. If I get too envious, I'll stop merging your changes :)\nAnyway: I guess I'd disable order 2 for the time being.  You don't need to\nchange the pull request, I'll do that on my machine after I pull your\nbranch.\n. I don't know if there's a switch for that. Anyway, with the current code, parallel test cases would interfere because of singletons such as Settings.  You'd need to enable sessions and provide some thread-local id; or you might apply the changes in the thread-local-singleton branch.\n. It took some researching... I could run a single test file as, for instance,\nquantlib-test-suite --run_test='*/*/*BarrierOptionTest::testPerturbative*'\nor a single suite as\nquantlib-test-suite --run_test='*/*/*BarrierOptionTest*'\n. Merges from default shouldn't be a problem (in fact, I don't see those changes in the diff in  \"Files changed\" above).\n. Hi Nick,\n    do you think it would make sense to add it as a variant of the existing act/365? (Like, say, the way the different conventions of act/act are implemented.)\n. Ok, I've merged it (even if github doesn't realize it...)\nThanks.\n. Hello Michael,\n    sorry it took me a while to pull your code.  I made a couple of changes, namely:\n- I moved the parsing into the existing DateParser class, instead of adding a string-based constructor to Date;\n- I renamed the manipulator to formatted_date (userdefined_date seemed a bit off, since it's the format that is user-defined, not the date).\nThanks,\n    Luigi\n. #31 was merged, so we can close this one.\n. No, don't close it. I just didn't get around to have a good look at it. I will eventually...\n. Merged. I've moved the files to experimental/risk.\n. Ok, I'm about to push it.  I've left singleton.hpp as just a header file for compatibility (if someone had inherited from Singleton, moving its implementation to a cpp would break the build) and I have added an #ifdef to switch to your CLR-safe version if needed. Please check that the version now on the master branch works for you.\n. Ok, I've merged it.\nIt doesn't show because I've rebased a commit to remove the GPLed code (and thus the hashes have changed and GitHub doesn't recognize the commits) but it's in there anyway.\n. Merged, thanks. I did some more nitpicking on the parameter names. Bear with me...\n. It seems like quite a bit of baggage.\nMaybe we can start by putting the rebate info into a separate Rebate class?\n. I think it would be better to have a separate file (maybe in experimental? I know it feels like a ghetto, but it leaves one free to experiment with the design---which is kind of difficult to nail without a few use cases...)\n. Hi Peter,\n    I've merged the PR, but I've reverted the change to exercise.hpp. Instead of adding an index check in exercise.date(i) (which is undesirable in loops like\nfor (Size i=0; i<exercise.dates().size(); ++i)\n    do_something_with(exercise.date(i));\nwhere you're bounding the index beforehand) I've added a dateAt method which adds range checking and works like (and actually calls) vector::at.\n. Just curious---with what platform? I don't seem to need it with g++ and openjdk.\n. @eehlers and @fametrano : I'm merging this pull request. May you pull from my master and see that it works for you?\n. Peter,\n    if I run the test suite with your patch I get two errors, with the strange messages:\nmarkovfunctional.cpp(565): error in \"QuantLib::detail::quantlib_test_case(&MarkovFunctionalTest::testKahaleSmileSection)\": smile12 left af strike is 0.01expected 0.01\nmarkovfunctional.cpp(658): error in \"QuantLib::detail::quantlib_test_case(&MarkovFunctionalTest::testKahaleSmileSection)\": smile32 left af strike is 0.01expected 0.01\nMaybe some numerical error?\n. #51 was already included.\n. Is there anything I can check on my machine to help you diagnose the problem?\n. What's more strange, on master (which includes #51, too) I don't have the error...\n. Anyway: g++ 4.8.1, boost 1.55, ubuntu 13.10 on an old 32-bit machine.\n. On the other hand, I see the failures on master when I use clang...\nmarkovfunctional.cpp(564): error in \"QuantLib::detail::quantlib_test_case(&MarkovFunctionalTest::testKahaleSmileSection)\": smile12 left af strike is 0.02expected 0.01\nmarkovfunctional.cpp(574): error in \"QuantLib::detail::quantlib_test_case(&MarkovFunctionalTest::testKahaleSmileSection)\": smile12 is not reproduced on grid at strike 0.01input smile call price is 0.0400019kahale smile call price is 0.0400004\nmarkovfunctional.cpp(655): error in \"QuantLib::detail::quantlib_test_case(&MarkovFunctionalTest::testKahaleSmileSection)\": smile32 left af strike is 0.02expected 0.01\n...and I don't see them when I pull your fix.\n. Sure.\n. Hi Paul,\nthanks for the contribution. It's a good start, but it will need some changes to make it work as intended.\nAs it is, it works when you call the blackVol method you overloaded. However, there are a number of other methods inherited from BlackVarianceSurface that are not overloaded: blackVariance, blackForwardVol and blackForwardVariance, as well as another overload of blackVol taking a time instead of a date. They would also need the conversion between strike and moneyness.\nOverloading blackVol and the other methods is not the right way to do it, though. Those methods are not virtual, so if you access the method through a pointer to base class\u2014for instance, if you write something like:\nshared_ptr<BlackVolTermStructure> vol = ... // instantiate a BlackVarianceMoneynessSurface\nvol->blackVol(date, strike);\nthe blackVol method called would be the one in the base class, not the one you redefined. If you want to store the moneyness, the right place where to convert the strikes would be the blackVarianceImpl method, which is virtual and is called by all methods such as blackVol and blackVariance. This way, you would write it in just one place.\nOn the other hand, I think that storing the moneyness in the contained data matrix is going to give other problems. For instance, the minStrike and maxStrike methods are going to return the minimum and maximum moneyness instead, which would be confusing.\nInstead, I would suggest another implementation. It would require promoting a couple of data members of BlackVarianceSurface (namely strikes_ and varianceSurface_) from private to protected, which might be the reason you didn't propose it. But if you do it, then you might:\n- define another data member storing the vector of moneyness;\n- store the current price as you do already;\n- pass the strikes (instead of the moneyness) to the base BlackVarianceSurface constructor;\n- in setCurrentPrice, calculate the new strikes based on the stored moneyness, write them into strikes_, and re-interpolate varianceSurface_. You'll also have to call notifyObservers(), in case some other object is observing your surface.\nThis would have the advantages that:\n- the inspectors would return the correct minimum and maximum strikes;\n- conversions would be performed only when setting a new price, instead of inside every call to blackVol etc.\nLet me know what you think.\n. Hi Nick,\n    thanks for the commit, I've finally got around to look at it. The only doubt I have is whether the tradingExCoupon method should be defined in CashFlow or just in Coupon, but I guess doing it in the latter would cause a lot of casts in the CashFlows class. Is this correct?\n. No, I think exCoupon it's ok. \n. For some reason, GitHub doesn't see it's merged. But it is, I'm not just closing it.\n. Oh, I see. Can you try removing the last commit, ffb186d? The one where you merged from my master?\n. No, I can't even see the others now :(\nOh well, it's in anyway.\nHave a happy new year!\n. Manual. The projects are just xml files.\n. I've added the last few things.\nA tip I forgot to share: running dev_tools/sync_projects.sh from the QuantLib directory (the one that contains ql) will tell you what's missing and what should be removed from the projects.\n. Hello Peter,\nI didn't think there was so much stuff that was unused. I would delete it instead of commenting it out, though. It will remain into the repository anyway. Do you have some time to do it?\n. Thanks, Peter.\nI had a look, and I think I'll cherry pick some of the changes and leave others (there are data members that look like they should be used, so deleting them would just sweep a possible problem under the carpet).\nIn any case, Clang is doing a pretty good job of analyzing what is used and what is not. What level of warning are you using? (Partly I'm just curious. Partly I'm wondering if someone using the \"standard\" warning level would see the warnings.)\n. I've cherry-picked most of the changes. I left some to be investigated.\n. What if you simply move the\nif (moving_) { ... }\npart out of SwaptionVolatilityDiscrete::update() and into performCalculations()? The calculation would be done after all the various notifications have made the rounds, and it shouldn't matter who gets notified first. Also, you get to do the recalculation only if needed.\n. @fametrano, you're the resident volatility expert. May you have a look at this request?\n. Thanks.\n. @fametrano, are you ok with the code?\n. @fametrano , @paolomazzocchi : any progress on this one?\n. @pcaspers: how about this one? It didn't seem to go anywhere. Should we close it?\n. Ok. There was no objection on my part, it's just that I didn't know where we stood after the discussion. I'll migrate this to the new repo.\n. Migrated to https://github.com/lballabio/QuantLib/pull/2\n. I think you can delete your old repos now, or at least the branches I migrated (which in your case are all of them, I think).\n. I've merged to master, thanks. Two notes:\n- I've added code to convert the first node, too: please check that everything works as expected.\n- do you have any test cases we might add to the test suite?\n. Apologies for the delay. I'm not sure that I'd enable directors and export boost::shared_ptr for the sake of an example. Maybe you can provide the changes as a branch in your fork for those who want to experiment with it?\n. Ok, I think I'll leave the specific helper then (one less object to instantiate).\n. Sure, the change from vector<FixedRateBondHelper> to vector<BondHelper> makes a lot of sense. As for instantiating a FixedRateBondHelper rather than a BondHelper, I guess the question is whether we want to send the message \"there are specialized helpers for your convenience\" or \"you can build a helper with any bond\", respectively. I'm kind of agnostic on this one. Actually, no: it would be best to have both, of course :)\n. Right, done.\n. Hi Peter,\nI think we should generalize FloatingLeg to accomodate these cases. The idea could be that, instead of passing the index and the coupon type and instantiating coupons inside FloatingLeg as we do now, we should pass an instance of some kind of factory that will create the coupons when passed dates, notional and whatnot. The index, or the two indexes, would be stored inside the factory instance and no longer part of the interface.\nI'm not sure how much to extract from the function and into the factory. The switch between base coupon and capped coupon, for instance, could go there, but then it would have to be repeated inside each factory. With luck, we might have a few modular pieces...\nHope this helps.\n. Deal.\n. Thanks for the contribution.\nI've merged the commits, except for the one that replaced types such as\nstd::vector<boost::function1<Real, Array> >\nwith\nstd::vector<boost::function1<Real, const Array&> >\nIt's a change I'd very much like to do (and I suspect it accounted for a fair share of the time you gained in the test-suite run) but it modifies the types in a public interface and thus it can break client code. I'll apply it if we decide to drop backward compatibility in some future version of the library.\n. Duplicate of #88.\n. No problem, I've added the VC++ projects myself.\nI've made two small changes:\n- I went back to boost::timer. I'd like to use the new one (for the other examples, too) but it was first released in Boost 1.48 and we still support 1.39.\n- I added a switch to skip the \"press return to continue\" prompts. (It's useful\u2014at least to me\u2014for when I run make check-examples, I let the machine run all of them, and I check the output later.)\n. Migrated to https://github.com/lballabio/QuantLib/pull/3\n. Yes, I'm ok.\n. Ok. Food for thought at a later date, I guess...\n. I don't know. I'm not sure if the addin has automated tests of some kind.\nI'll try and include @eehlers in the discussion, but in the meantime I think I'll merge the request.\n. This also happens in 1.4, right?\n. Interesting. In principle, this helper could be used to bootstrap either a discount curve or an inflation curve. It would have to inherit from both BondHelper and BootstrapHelper<ZeroInflationTermStructure> and implement both behaviors. I'm not sure I want to go into this :)  I'll add it as it is.\n. @fametrano, as far as I can see, in QLXL you're filtering the deposits out if their fixing date is in the past: see the qlRateHelperSelection function in QuantLibAddin/qlo/ratehelpers.cpp, line 444.\n(By the way, is this your intended behavior? You're using a depo-futures-swap curve on business days and a futures-swap curve on holidays?)\n. @pcaspers, the ad-hoc calendar seems like the only solution given the constraints, but it's quite convoluted. I'd prefer for the logic to be a bit more explicit; for instance, we could have an explicit check for whether today is a holiday in DepositRateHelper::initializeDates and set fixingDate_, earliestDate_ and maturityDate_ accordingly. It can't be done with the public IborIndex interface because we coded ourselves into a corner with all our checks for valid fixing dates, but we could declare DepositRateHelper as a friend of IborIndex and use its private forecastFixing method in DepositRateHelper::impliedQuote.\nP.S.  About the valid-date checks: I suspect they're done at least twice for each call to the fixing method, but this is a problem for another time. Unfortunately, we can't add a flag to disable them. Even if we gave it a default value, adding a parameter to a virtual method would be a breaking change.\n. Alternative solution (as in: sidestepping the problem) in #124. Does anyone have a preference for either one?\n. Superseded by #124\n. Re the big file: you can declare the array in a header and define it in a cpp, as done e.g. in ql/math/randomnumbers/primitivepolynomials.[hc]. Then you can include the header and use it in the usual way. \n. Closed by 308711d5.\n. Fixed by c1cebdcd\n. This is trying to solve the same problem as #117, right? Peter's trying to get a deposit quote on today's date even if it's a holiday, and you sidestep the problem by moving to the next day (but bootstrapping on a rate which is not quite the one which is quoted, as it's one day forward).\nIf #117 worked as well, which one would you prefer?\n. Ok, I'll close the other one.\n. I see your problem, but you opened a pull request for it (and one to merge some 400 unrelated commits, at that).\nI suggest you post to the mailing list instead, to reach more people that work on Mac OS X and can advise.\n. #118 was accepted, so I'm closing this one as duplicate.\n. size=2305843009213692540 is enormous. At 8 bytes per double, the vector would require 16777216 terabytes of memory, so it's no wonder that the program balks. Can you step through the constructor of eigenVector and see what size it is passed (it seems strange that ev_.rows() returns such a number) and what happens in the constructor?\n(A small problem: you pasted your code as simple text and the GitHub parser mangled it; for instance, see the  declarations of vector, that lost the template arguments, and the for loop. It would help if you pasted it again as code. It should be enough to just make sure that there are four spaces before each line.) \n. The same functionality (with more freedom with respect to date formats) is available by taking a string in input and passing it to the DateParser class.\n. Thanks for the contribution. Just one thing: is the copyright held by Riccardo Ghetta, by Thema Consulting, or by both?\n. Thanks. Do you have any test case that would have triggered the error before your fix?\n. I'll check your branch. You can reach Cathie Jin by commenting on the original bug report on Sourceforge (linked above).\n. For the time being, I left the double-barrier stuff in ql/experimental. This way we can further refine the interface if we need it, without worrying about backward compatibility.\n. It looks like a data problem. In the corresponding example in the QuantLib C++ distribution, we're not using the 2-years swap; adding it gives the same problem you're getting in R. Removing s2y from  tsQuotes should allow the curve to bootstrap.\n. The other difference I see between the R and C++ code is the evaluation date; setEvaluationDate(as.Date(\"2004-11-22\")) seems suspicious. I'd use September 20th instead (which is today's date in the example, and is used for tradedate a few lines above).\nAnyway, I'm bringing in the RQuantLib maintainer, since I guess that the documentation will have to be updated one way or the other. @eddelbuettel, do you copy? \n. @eddelbuettel what about setting the evaluation date to 2004-09-20 as in the C++ example? November seems either a typo or a leftover to me...\n. Ok, glad to hear it. I'll close the issue if there are no further problems.\n. No problem. If I'm not mistaken, when I merge #149 I might see just your modifications here. But even if I don't, I can see the relevant diffs from git.\n. This should have been superseded by the consolidation of the VC++ project files I did the last couple of days. May you pull the latest master from my repo and test that it works for you?\n. I think the warnings can be ignored. The actual error seems to be the undefined reference to PrimitivePolynomials. Can you check if it's defined in the libQuantLib.a you're linking?\n. On Linux, I would do\nnm libQuantLib.a\nto get a list of the symbols defined by the library. Can you do the same in a MinGW shell?\n(Note: there will be characters before the symbols to tell you more info on the symbol; see http://unixhelp.ed.ac.uk/CGI/man-cgi?nm for details.)\n. No idea. Can you try posting the problem on the mailing list and see if anybody has run into this?\n. I don't remember why these are still plain C files. I'll try changing them and see that everything works on the other platforms.\n. Solved by #160 \n. Closes #159 too.\n. Moved to https://github.com/lballabio/QuantLib/issues/333. @fametrano, may you too have a look at this one? Thanks. \n. Migrated to https://github.com/lballabio/QuantLib/pull/4\n. Confirmed in the current git master, too. The same error also shows up in other places.\nSigh. I guess I'll just sidestep boost.lambda entirely...\n. It's a clang problem.\n. Fixed on master. I just replaced a few boost::lambda with function objects. Not entirely satisfactory, but I couldn't make heads or tails of the template error messages from within Boost...\n. Ok, thanks. I think I'll make a 1.4.1 with the fix.\n. @eehlers, may you have a look at this one? Do you want to merge it in your repo, or should I merge it in mine?\n. Maybe using\n$(PYTHON) $(GENSRC_DIR)\\gensrc.py -xdlv --oh_dir=$(OH_DIR)\nmight work for both? The default would be for the PYTHON variable to be empty, so it would work for association as in the present case. If needed, one might define it to python.exe or whatever. It would need to be documented, though.\n. Ok, but I'll keep the PR alive. Once I pull from your repo and push the changes here, it will be marked as merged.\n. Hmm. It didn't. Oh well. It's merged now.\n. Ok, let me know. If it's not needed, I'll just close it.\n. Done.\n. The else is necessary for code such as:\nif (condition)\n    QL_REQUIRE(assertion, \"...\");\nelse\n    do_something();\nWithout the trailing else, the second branch above would be captured by the if in QL_REQUIRE and the code would expand to the wrong logic.\n. Superseded by #186 .\n. I see. How about trying to write some rules and, on top of that, list just the exceptions per year? \n. Done. I've extracted a few rules where possible (Labour day, Russia day etc).\n. The changes to use Boost.Date seem ok (we should check performances, just in case).\nI'm not sure about the day counter modifications, though. They would mean that if I'm given an instance of DayCounter and I don't know its exact type, I can't use it because I don't know what the return value of yearFraction means. (Days? Years?)\nThe new timeFraction method could solve this by returning a (time, unit) pair, but this probably doesn't solve your problem since the term-structure interface just expects a time. Also, we'd have the same problem on the other side. Given a YieldTermStructure instance with no further type information, what am I supposed to pass to its time-based interface? Days or years? I can't know. In the end, this breaks the substitution principle.\nNow, just an idea: I don't know the details of bitcoin pricing, but would it be possible to just convert the daily rate to an annual one and continue from there?\n. In any case, I would add the intraday patch. This way, you'll only have to maintain the continuous day counter for your stuff to work while we think of a solution. \n. Obsoleted by #289 \n. Fixed by #190.\n. No, it wouldn't. Inside the Coupon constructor, you don't have access to the implementation of dayCounter() defined in derived classes.\n. You seem to have committed the whole debian build tree, as well as a patch and some commented-out stuff.  May you clean up and resubmit?\n. Migrated to https://github.com/lballabio/QuantLib/pull/5 and https://github.com/lballabio/QuantLib-SWIG/pull/1 for the C++ and SWIG parts, respectively.\n. Merged. Please check if everything is all right. There were a number of other pull requests merged lately, and I think I solved the couple of conflicts I had, but there might have been other changes getting in your way.\n. Is this supported in version 10 and above? \n. Thanks!\n. As for the variable name: in the end, I just used B.  It was difficult to choose a decent variable name meaning \"discount from value date to maturity\", so I bailed out. Its definition and use are close anyway, so it should be clear what the variable is.\n. No harm done.\n. As we discussed in #237, I pulled out the part on adjusters.\nIt can be added back later by reverting 54c3f65.\n. If you want to remove the check, please remove it, don't comment it out. \nThe previous version is in the repo anyway. \nSorry for the Hamlet quote  :smile: \n. It would be a comment about code that is not there, but it's ok for me.\n. Paolo,\n    I already replaced it with Nando's comment from the conversation in #221 (which is not as cool as Shakespeare, but actually explains what's going on.)\nSee https://github.com/lballabio/quantlib/commit/3aaad246.\n. No problem :)\n. @eehlers , any news on this one?\n. It might be smart enough. If not, don't worry. I'll solve the conflicts on my box before pushing. \n. About the RebatedExercise class: do you think the rebate belongs into the exercise, or was it a way to get the rebate into the swaption without changing its signature? (I'm a bit worried about all the code that might take a RebatedExercise and ignore the rebate entirely...)\n. No, you're right, it's not an issue.  What I was wondering about was more: do we include the rebate information into the exercise, or do we pass exercise and rebate separately to the swaption? But I think your solution is ok.\n. It would be nice to have a few test cases for this. Do you think you can find some time for them? Or maybe you want to have a go at it, @igitur ? \n. Where is that? \n. The methods are available already. They're not defined in the HullWhiteProcess declaration, but they're inherited from the StochasticProcess1D class.\nAs for the difference, I have to look into it. \n. Oh, I see. I didn't realize they were still missing in 1.5, so I didn't understand what you meant, either. I'll start packaging 1.6 after I merge the last few PRs I tagged with it. It might be out in a few weeks. \n. Ok, how about this: for now, I put in @pcaspers's #216, but without CalibrationHelperBase and AdjustedHelper, and I get out 1.6 quickly.\nThen we them get back in, and I also give you free rein to really break CalibrationHelper: that is, we rename it to something more specific, rename CalibrationHelperBase to CalibrationHelper, and make your changes. But we take a bit more time to do it so we get the names right.\nWhat do you say?\n. Do you have a bit more info? (compiler version, error number...)\n. Ok, I guess I'll just remove non-ascii symbols for now.\n. Ok, please do.  One thing: QuantLib/QuantLib.vcxproj shouldn't have needed changes, so try reverting those.\n. @eehlers , did you merge this into your repo? Should I close it?\n. It seems like a compiler misconfiguration. Is there any further info in the last lines written into config.log?\n. Another possibility is that you didn't install the command-line tools from XCode. May you check this? \n. Migrated to https://github.com/lballabio/QuantLib/pull/6\n. This needs to go into the 1.6 release, right? \n. @paolomazzocchi , may you submit this to @eehlers instead?\n. Should be opened against https://github.com/eehlers/reposit.. Migrated to https://github.com/lballabio/QuantLib/pull/7\n. Migrated to https://github.com/lballabio/QuantLib/pull/8\n. The old dilemma: idea or execution?  :D\n. @paolomazzocchi : let's recreate this one later from your newer branch.\n. Migrated to https://github.com/lballabio/QuantLib/pull/9\n. Migrated to https://github.com/lballabio/QuantLib/pull/10\n. Yes, please do.  In the meantime, I'm merging this change.\n. What if the discount curve was added by means of a decorator instead? I mean something like:\nclass SpreadFittingMethod : public FittedBondDiscountCurve::FittingMethod {\n  public:\n    SpreadFittingMethod(shared_ptr<FittingMethod> method,\n                        Handle<YieldTermStructure> discountCurve)\n    : method_(method), discountCurve_(discountCurve) {}\n    Size size() const { return method_->size(); }\n    DiscountFactor discountFunction(const Array& x,\n                                    Time t) const {\n        DiscountFactor d = method_->discountFunction(x, t);\n        d *= discountingCurve_->discount(t, true)/rebase_;\n        return d;\n    }\n};\nThen you would instantiate it as, for instance,\nSpreadFittingMethod(make_shared<NelsonSiegelFitting>(),\n                    discountingCurve);\nThis would remain backward compatible (and also, the base methods would remain unchanged and wouldn't have to know about discount curves). Do you think it would work?\n. Unfortunately, the code doesn't compile on gcc after the latest changes. Does it works on your machine? With what compiler? \n(I'll also make a few comments in the code.)\n. Thanks. It compiles, but the FittedBondCurve example now crashes while using the spreaded method. Does it work on your machine?\n. Thanks for following up so quickly, Andres.  A few more things:\n- if you try to add the output from the spreaded method to the rest of the example, you'll run into other errors. One is because the weights and the first cash flows were not recalculated when the evaluation date or anything else changes; I've fixed that, and I'm sending you a patch that you can apply,\n- even after the patch, one of the later calculations fails complaining of unsorted dates. I haven't had time to debug that one, so I'd be grateful if you could have a look.\n- finally, do you have any idea why the par rates are so off for the spreaded method in the first table, especially at the short end?\n. I sent you the patch via email.\n. Ok. For the purposes of the example, I've set the underlying discount curve to a flat rate, which is unrealistic but makes a lot easier for the optimizer to get the correct spread.\nI've also fixed the second error (it was just a test too strict in the example). I'll be merging the PR shortly.\n. Not sure which is better. Sharing code is ok, I guess.\n. Migrated to https://github.com/lballabio/QuantLib/pull/11\n. On what compiler did this happen? \n. Yes, it's a known problem. Upgrading to QuantLib 1.6.1 fixes it.\n(As an aside, thanks for the Homebrew support.)\n. No problem. 1.6.1 is just a couple of weeks old...\n. Migrated to https://github.com/lballabio/QuantLib/pull/12\n. We could exit if the interpolation is local and the choice is LastRelevantDate for all helpers.  It becomes complex to check and probably gains very little performance...\n. Ok, it's not that complex. :smile: \nIt can't be precomputed, though, since dates might change. It could probably go into IterativeBootstrap<Curve>::initialize().\n. I hear you. However, the underlying C++ library doesn't support a corresponding type, so Python's Decimal would have to be silently converted to double when passed to the constructor of the C++ instance. I figure it's better to keep the conversion explicit, so users are not misled into assuming that fixed-point decimals are used underneath.\n. Did you also compile the NQuantLib and NQuantLibc projects? (I'm asking since you don't mention them.)\nAlso, are you compiling in 32 or 64-bit mode? \n. Weird. Is it possible that your application is picking an old version of either DLL from somewhere else in your path? \n. And you don't have older versions around that could take precedence? \n. Ok, glad to hear this. \n. Set by experiment, I guess?\n. Migrated to https://github.com/lballabio/QuantLib/pull/13\n. Are you using a QuantLib-SWIG release or a git checkout?\n. This might help:\nhttp://superuser.com/questions/282450/where-do-i-set-dyld-library-path-on-mac-os-x-and-is-it-a-good-idea\n. I think it's the issue described by Klaus Spanderen at https://hpcquantlib.wordpress.com/2015/02/28/quantlib-1-5-swig-patch-for-jvm-net/ . He also provides a patch at the same link.\n. I'm not familiar with the patch, but from the error it looks like you should add boost_system to the linked libraries.\n. (or whatever it's called. It could be libboost_system or something like it.)\n. Similar code should also be added to the C# wrappers (for system and threads but not the unit test library).\n. No, I don't think so.\n. What compiler are you using? I thought you were using VC14. If so, you don't need the Boost libraries from VC10, whatever the error says.\n. It's the same issue you had with the test suite. Add the libraries and the #include code to the other projects, too.\n. @klausspanderen Yes, we should add it.\n. Yes, we'll try that, at least as a branch. \n. Another user reported the same problem on the mailing list last month. He fixed it by following the instructions at http://quantlib.org/install/macosx.shtml, section \"A note on Mac OS X 10.9 (Mavericks)\". It seems it also applies to Yosemite.\n. Thanks, but it would be best if you opened the PR on Eric's fork.\n. @igitur , if you opened a PR to Eric I'd close this one. Do you agree?\n. Migrated to https://github.com/lballabio/QuantLib/pull/14\n. You must probably link QuantLib to the generated wrappers. What compiler does the build use?\n. First, make sure it's installed. If you compiled QuantLib yourself, you should have run make install. If you got it through apt, you're ok already.\nOnce it's installed, adding -lQuantLib to LDFLAGS should work.\n(Side note: you're the first I hear of that tries using the thing from Go. Let me know how it works.)\n. Not really. As I said, you're the first tackling Go...\nIt looks like the wrappers are missing a few types. From what I see of the errors, they're both enumerations defined inside a class to which an %ignore directive is applied. I'd suggest you to take this to the SWIG mailing list and check if that's the intended behavior. The SWIG file below should trigger the error:\n```\n%module Test\n%ignore Foo;\nclass Foo {\n  public:\n    enum Bar { A, B, C };\n};\nFoo::Bar get_enum();\n```\nI don't know Go syntax, but from what I see the generated wrapper uses a FooBar type without first defining it.\n. Merged, thanks. Did you also have a look at the remaining failing test in CPISwapTest?\n. Migrated to https://github.com/lballabio/QuantLib/pull/15\n. Moved to https://github.com/lballabio/QuantLib/issues/332. Migrated to https://github.com/lballabio/QuantLib/pull/16\n. Migrated to https://github.com/lballabio/QuantLib/pull/17\n. Great. Thanks for the contribution. \n. @fametrano , @pcaspers : do you think this makes sense? With this patch, asking for the fixing of the inflation index at any past date would look for it at the start of the inflation period. It avoids storing the same fixing for all days, but it might be surprising. What do you think?\n. Ok, so if we're not the only ones then it does kind of sense at least...\n. Ok. Pending further feedback, I'll apply this patch but leave the behavior in InflationIndex::addFixing that stores the giving fixing over the whole month. I'll document the change and remove the override in next release, so if anyone has written code that relies on the month being filled (shudder) they'll have time to repent and change their ways.\n. Yes, I'll take the PR.\n. That's to be expected. When you pass the original Actual360 instance, the swap makes a copy (it doesn't take a reference) and stores it as a DayCounter instance. That's what you're seeing returned.\n. I'd keep distributing the projects and Makefiles so that the releases can be built without additional tools, but I'd be happy to add CMake as another possibility.\n. No, not easily, I'm afraid.\n. Yes, I'm afraid so. Currently, the only way I see this working is if Travis could build on previous runs (e.g., some runs build part of the libraries and another one links the results).  But the final result should be a single library, or we'd start having multiple copies of singleton classes.\n. Migrated to https://github.com/lballabio/QuantLib/pull/18\n. I think we can upgrade. Boost 1.47 is from July 2011.  I guess all Linux systems, including long-term support, are beyond that already. It shouldn't cause trouble to anybody.\n. Ok, I stand corrected.\n. Hmm. I just pulled up a Docker image of Ubuntu 12.04. Apparently, Boost 1.48 is available but the default is still 1.46.  @pcaspers, we might want to downgrade the accumulator after all...\n. Glad you could solve it. Maybe you might signal the issue on the swig mailing list so they can add the workaround in next version? \n. They're included so that they're available to Windows users that check out the repository.\n. No, none that comes to mind now. \n. I got this from clang's static analysis tools (http://clang-analyzer.llvm.org/scan-build.html).\nI still have the email of one of the authors. I'll reach out to him and ask for confirmation.\n. Hmm, I take that back--the email I had is no longer valid.\nOk, I'm doing the change anyway.\n. Did you try the flags mentioned in http://quantlib.org/install/macosx.shtml, where it says \"A note on Mac OS X 10.9 (Mavericks)\"?\n. Yes, I've seen the warnings. The command is generated by automake and libtool, though, so I'm not sure how to avoid it.\n. I think so.  I've run a search on the error message and the first results seem to be discussions on the automake and libtool mailing lists.\n. I think so. The warnings should be reminder enough, I guess. \n. Migrated to https://github.com/lballabio/QuantLib/pull/19\n. Migrated to https://github.com/lballabio/QuantLib/pull/20\n. Migrated to https://github.com/lballabio/QuantLib/pull/21\n. Thanks, but we'll need some order if we're to be able to merge this pull request.\nFirst: please don't rename files. We have version control to track changes :smile:  Renaming the files defeats the purpose and makes it more difficult to merge your changes.\nSecond: you created the pull request from your master. Unfortunately, this means that whatever you commit and push to your master is ending in the PR, too. It's probably better if you move the calendar change to a branch and recreate the PR from there.\nSorry for stopping you in your tracks---I do appreciate the contribution---but this risks getting difficult to manage very quickly...\n. Ok, no problem. Whistle if you need help.\n. No, that's an actual file rename.  If I pull your request, I get an actual new file QuantLib34/ql35/time36/calendars37/saudiarabia.cpp.  Are you sure you don't have it on your machine?\n. That's weird. Anyway: pushing from an older version is not a problem; git can merge your changes into the current code.  (Actually, pasting from a modified old version on top of a newer one can cause problems, instead, since the old code might overwrite modifications made in the meantime.)\n. I can work with this, so there's no need to change it again, but you've renamed QuantLib/ql/time/calendars/saudiarabia.cpp to QuantLib34/ql35/time36/calendars37/saudiarabia.cpp.\nIs it your environment playing tricks?\n. That's strange.  May I suggest that, instead of using the web interface, you simply push from your local copy to your GitHub fork? (That's the way git is supposed to be used anyway...)\n. Ok, I'm closing this one.\n. Ok, this worked.  However, modifying an old version of the library and pasting the code on top of the new version is unsafe, since it might overwrite newer changes.  For future pull requests, please consider pushing from your local repository instead.\n. No problem.\n. Migrated to https://github.com/lballabio/QuantLib/pull/22\n. Migrated to https://github.com/lballabio/QuantLib-SWIG/pull/2\n. Thanks. There's no need for an issue, though. Just opening the PR directly is enough. \n. Migrated to https://github.com/lballabio/QuantLib/pull/23\n. Yes, the June 11 bug is mine.  The May 4 bug was in your original code.\nIt teaches us both to write more tests, I guess.\nThanks for the fix, I'll merge it into next release.\n. Migrated to https://github.com/lballabio/QuantLib/pull/24\n. Migrated to https://github.com/lballabio/QuantLib/pull/25\n. Migrated to https://github.com/lballabio/QuantLib-SWIG/pull/3\n. Migrated to https://github.com/lballabio/QuantLib/pull/26\n. Migrated to https://github.com/lballabio/QuantLib/pull/27\n. Replaced by https://github.com/lballabio/QuantLib/pull/1\n. That's for Visual C++ (which is the only compiler for which ql/auto_link.hpp is used) and is set via compiler options. There are project configurations for this already, so you can switch the option by choosing to build as  \"Release\" or \"Release (static runtime)\". The former defines _MT. (The same goes for the Debug configurations.)\n. I think the symlink is the only way. (And it's not that bad, I guess. On my machine, the official Boost build script creates symlinks too.)\nThis said, it could just be that you ran into the problem fixed by https://github.com/lballabio/QuantLib/pull/27. May you try applying that patch and see what happens?\n. Migrated to https://github.com/lballabio/QuantLib-SWIG/pull/4\n. @japari , I was trying to migrate this PR to the new repo but I noticed that a binary file slipped in some commit.  May you recreate the PR without it? (Possibly against https://github.com/lballabio/QuantLib, but against this repo would work too.)\n. Opened on the new repo as https://github.com/lballabio/QuantLib/issues/47.\n. I don't know what happened here.  Anyway, this repository is discontinued and you should submit a pull request to https://github.com/lballabio/QuantLib instead.. There's a typo here\n. I'll leave the last word to Klaus, of course.  Just an idea, though: it seems like an awful lot of data members to cover the various cases. If it doesn't hinder performance, would it be possible to store just a function< Real (Real,Size) > (that is, f(t,i) returns the value at time t and index i) and to treat the other cases (constant etc) as degenerate cases? It will require a few small helper classes that can be added to the cpp file, but it would probably make the whole thing clearer. It would cause some loss of performance, so it would have to be measured.\n. Was this a bug of the previous implementation (which was empty) or is this only required for space- or time-dependent conditions?\n. Hmm. I guess if we're using Settings::instance().evaluationDate() directly in the code of the helper, we should register, but if we're using it only indirectly through the curves then we shouldn't.  It probably doesn't hurt though.\n. Should we do the same cd trick for 'make install'?\n. Should this file be included in the distribution (that is, into Makefile.am), or is it just a convenience for developing the module?\n. What did Clang warn about?\nAnyway: I'd keep this as \"evolve\" if it can be called by client code. I'd call it \"evolveImpl\" if it was only used by the other overload (but in that case, I'd move this to the private section).\n. Hmm, this breaks backwards compatibility. What was the warning here?\n. I think adding\nusing StochasticProcess1D::evolve;\nbefore declaring the new one should bring the base-class method out of hiding and avoid the warning.\n. Agreed, but it might break existing code.  How about calling it something like Real unused in the signature, or just Real without a parameter name?\n. Better yet, we might use it :)\n. On g++ with -Woverloaded-virtual,\nusing StochasticProcess::evolve;\nseems to work. Peter's suggestion should work, too. The point though is that we do want to hide the multi-dimensional version in 1-D processes. I'd rather disable the warning for that line by using a pragma, as shown in http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas. (It should probably go into an ifdef that checks if we're using clang, though.)\n. This is another copy of discountingxccyswapengine.cpp, not crosscurrencyswap.hpp.\n. CrossCurrencySwap (camel case) would be better for consistency with the rest of the library.\n. Are \"fixed\" and \"floating\" the terms used in cross-currency swaps? There might be two floating-rate legs (right?). Are there any other ways to specify the leg that could be used?\n. The above creates the coupons, but there might also be an exchange of notionals at the end.  Are you planning to support this?\n. For readability, I'd compare explicitly with Receiver instead of assuming it's 0.\n. I would remove the defaults for the curves and the fx. Once any of the handles is default-initialized, there's no way to set it a value, so an engine that doesn't provide all three becomes unusable. (I know there's a default empty curve in discountingswapengine, but it's not useful there either. We're only leaving it there for backward compatibility.)\n. Instead of using static data, would the CLI compilation work if we just moved the existing constructors to a .cpp file?  The exact same idiom doesn't seem to cause problems in the calendar classes, which also use static variables in constructors.  If this worked, we could unify the CLI and non-CLI implementations for currencies.\n(The singleton would still need the change, since it's a template and can't go in a .cpp file.)\n. Hi Simon,\n    I think you can just add commits to this pull request instead of creating another.\nGreat news about the currencies. With regards to the Singleton, I'm ambivalent. I'd probably leave your CLI implementation in the hpp together with the other and use an #ifdef to select the one to use. I'm not enthusiastic about explicit instantiation, and keeping the template in the cpp seems kind of strange. But maybe it's just me...\n. You don't need a wrapper class for this.  Once you created the spline object as in the original code, just call\nf.enableExtrapolation();\nto allow out-of-range values. (You'll have to remove the const from the variable declaration, though).\nThe same goes for all the instances below.\n. Why the pimpl and the inner class? Would it be possible to wrap the Boost class in a more straightforward way?\n. You're right, this is in a lot of places.\nI wonder how expensive it is to create a boost::math::normal_distribution instance.  If the constructor just stored average and sigma, it would be cheap enough to just use a temporary inside our operator() and so keep the whole thing in the cpp. Let me check... no, it performs some error checks. Bother.\nNo, strike that. I ran a few simple tests, and the time for the call to quantile() seems to dominate. You might want to check yourself, but compiling with -O2 it seems that it makes no difference whether we store the normal_distribution instance or we create it on the fly. Let me know if you see the same results.\n. I think if we add\nAC_SUBST([CXXFLAGS],[\"${CXXFLAGS} ${OPENMP_CXXFLAGS}\"])\nhere, we can avoid modifying all the Makefiles. At least, it seems to pass the flags correctly to both compiler and linker on my system. May you check that this works for you, too? I'd rather have one change than 120.\nAlso, at the beginning of this file we need to change the autoconf version check to\nAC_PREREQ(2.62)\nto make sure that AC_OPENMP is defined.\n. I don't think this is going to work. It looks like all the boundary conditions in the bcs vector will try to modify explicitPart_ at once. \nThe same goes for the other changes in this file. Am I missing something?\n. Joe, this is a modified copy of the AC_OPENMP macro distributed with autoconf.\nYou can't do this: it's released under the GPL and it would override our license.\n. Ok, I have another way to make it disabled by default. I'll commit that one instead.\n. Does this stand for \"probability of default\"? I'd make it more clear...\n. I would have expected that parametersFreedom_[i] = true meant that the parameter were free, not the other way around.\nI realize this comes from the current ProjectedCostFunction code and thus we can't change the behavior, but at least I'd change the parameter name. Do you have any suggestions?\n. What was the problem here?\n. I'm ambivalent about overloading virtual functions, but renaming them to doCalc breaks backwards compatibility (people might have inherited from FDMultiPeriodEngine).\nHow about adding\nusing FDMultiPeriodEngine<Scheme>::calculate;\nto FDBermudanEngine instead? Does this prevent the warning?\n. Here you could just keep the old code and instantiate a FixedRateBondHelper; the shared_ptr will be downcast automatically when passed to push_back below. Did you change it on purpose? (Say, because it would translate better to R.)\n. Klaus, does this have a reasonable default? It's in the core library, so I'd keep backward compatibility.\n. Peter, just wondering: do you think this should be an index? How about simply passing the two swap indexes to the coupon? (It would also sidestep the problem of native fixings that you had to tackle in the Index class.)\n. I see. Yes, the concept is appealing. I'd wait for a use case to modify Index, though, so I'd go for the two swap indexes at this time. What do you think?\n. I would try to remove duplication between this function and cleanPrice above.  For instance, cleanPrice could call dirtyPrice instead of calculating.\n. Maybe endOfMonth should default to false, so that it doesn't have to be specified each time? (It looks like the true case would be used very seldom.)\n. For backward compatibility, this should still be used if withPaymentCalendar is not used, as in:\nif (paymentCalendar_.empty())\n    paymentCalendar_ = schedule_.calendar();\nso that old code using CPILeg doesn't break (in fact, there are four failures in the test suite on this branch, and I suspect this is the reason).\n. Yes, I had missed that one. I would add the default there, too (it's a backward-compatible change, so it's ok).\n. An alternative would be to initialize paymentCalendar_ to schedule.calendar() in the CPILeg constructor.\n. It seems a bit weird to ask an index to return a swap with a different tenor. On the other hand, using the previous version (which, by the way, could have been written as tmpIdx = swapIdx->clone(tenor)) loses the caching of the swap across calls. Does it make a lot of difference?\n. Yes, please try that.\n. This seems a roundabout way to add date logic. What was the idea here?\n. Is this necessary, given the call to originalEngine_->reset() below? \nOf course it doesn't hurt, but it seems unnecessary if the data members will be overwritten by that call anyway.\n. Shouldn't this be modifiedBesselFunction_i_impl<T,W>(-nu,x)?\nOtherwise, we always use the unweighted version.\n. Also, do you have a test case for the new ones? It would disambiguate this case.\n. The two test cases above take 6 minutes each on my machine. This file alone uses up about 40% of the whole test suite. Would it be possible to decrease precision, or reduce the execution time in some other way, and still have a meaningful test?\n. This is the copyright attribution for the other (non-partial lookback) engines.\nWhose should it be for these ones? You or your company?\n. If you did it on your own time, it's probably your copyright. But to remove all uncertainty, I'd ask your boss.\n. Ok then, I'll leave the original attribution.\n. Every file has a copyright attribution, so the idea is not to prevent copying.\nDisclaimer: I'm not a lawyer, what follows is my personal interpretation and might be utter nonsense.\nFor other, more restrictive open-source libraries (e.g., GPL), holding the copyright means that you can distribute the code not subject to the license restrictions. With our license, there are practically no restrictions and the problem is moot. It becomes more a matter of giving credit where credit is due. And maybe making some company lawyers happy (but don't tell them I said this).\n. Also, don't bother making another commit. I'll add the attribution when I merge the PR.\n. I think the denominator should be just nPeriods here. Am I correct?\n(For instance, if nPeriods is 2 and the initial notional is 100 the resulting notionals should be [100, 100/2, 0]. Come to think of it, it would be nice to have a couple of test cases for this function...)\n. I'm not sure about this macro. If we call it QL_INFINITY, there are expectations about it (e.g., that infinity/2 is still infinity) that are not met by QL_MAX_REAL. Instead, I would use QL_MAX_REAL explicitly in BinomialDistribution.\n. Sorry, I'm not sure what \"like this\" means...\n. Yes, I'd do this.\n. To keep backwards compatibility, these two should go after the discount curve.\n. To keep backwards compatibility, the new parameter should have a default value.\n. Maybe Interpolator::requiredPoints?\n. \"shifted\" as in \"using a displacement\"? In this case, shouldn't Normal be shifted, too? (Or we could just drop the \"shifted\" from both.)\n. Ok, I see. I had just looked and the signature and thought the displacement was used... I'd remove it from the signature of the engine. It might be confusing.\nAs for the if/else: I think is ok. I'd drop the \"shifted\" from the enum and just keep Normal and Lognormal, though. I don't think it makes much sense to have Normal and ShiftedNormal in case we start supporting a displacement. It's Normal anyway.\n. Yes, sure. I was just wondering if it's worth mentioning the \"shifted\" part or if it's kind of a given (since we're passing a displacement).\n. Ok, let's keep it as it is then.\n. You're saving these two at the beginning of the loop. Shouldn't you do it at the next-to-last step instead? As it is now, in the European engine you're taking the theta as the difference between now and maturity.\n. Just a thought: instead of relying on the model keeping the previous state, the engine could explicitly roll to right before today's date, extract the values, and roll to today. This would also make it possible to choose the dt to be used for the theta independently of the time step used for rollback.\n. Instead of using a different grid, you could use the same grid as the values and use the central derivative (values_[i+1]-values_[i-1])/(grid_[i+1]-grid_[i-1]).\n. Instead of bypassing the interpolation (which leaves us with an outdated data member), would it be possible to modify the backward-flat and forward-flat interpolations instead, so that they only require one point instead of two?\n. Since typename seems to be the more correct syntax, I'd rather use a define that excludes the compilers that don't recognize it, i.e., something like\n```\nif !defined(QL_PATCH_MSVC90)\n```\nHowever, we might be able to sidestep the issue. Does something like the following work for you?\nprivate:\n    typedef typename BaseModel_T::copulaType::initTraits initTraits;\npublic:\n    BaseCorrelationLossModel(\n        const Handle<BaseCorrelationTermStructure<Corr2DInt_T> >& correlTS,\n        const std::vector<Real>& recoveries,\n        const initTraits& traits = initTraits()\n        )\n(It works for me on gcc 4.9, but I haven't checked on Visual C++.)\n. I agree that this should have been const from the beginning, but making it const now can break code.\n. Same here. It should have been called endCriteria_, but someone might have inherited from CalibrationHelper and used the current name.\n. Because you're requiring the vector to be empty :smile: \n. Just nitpicking: why shortening instruments to instr?\n. \"Volatility nature\" sounds weird, but I don't have a better name. \"Volatility model\" means something else. \"Volatility type\", maybe? \"Volatility model type\"?\n. Instead of storing these two (which forced you to add public variance methods to the LocalConstantVol and LocalVolCurve classes), what do you think about storing pointers (either shared_ or weak_) to the underlying black volatility instead, and calculate the variance in the evolve method?\n. Oh, I didn't know that :smile: \nIf \"nature\" is an established name it's ok, then.\n. This might be written in a (very close to) backward-compatible way by adding maxDate_ as a protected data member to the base InterpolatedCurve class. The bootstrapper can set it at the end, since it's a friend. A bit smelly (since the other data members are times) but I wouldn't be outraged.\nThe only way this could break is if someone had written a bootstrapped curve that doesn't inherit from InterpolatedCurve. But that's very unlikely, since its data members are required for bootstrap.\n. Weird. Any idea why this happens?\n. This should be grouped differently; it's (30 sep || 1 oct) && 2018. The same goes for the two that follow.\n. @fametrano , @paolomazzocchi : I've made the maxDate_ change above. Please check out my master and verify that everything still works.\n. discountingCurve is no longer necessary here, and neither is the data member. \n. This might probably be if (weights_.empty()). If the size is != n but not null, we should probably raise an exception instead.\n. This is back to being pure virtual; the implementation should be deleted (it no longer compiles anyway).\n. I would add some documentation of the behavior. I'd also make it more explicit, for instance as:\nif (curve_->maxEvaluations_ == 0) {\n    // ...explain...\n    return;\n}\n// here goes the optimization code.\n. This is ok, but I'd avoid the code duplication in value and values. You can implement value(x) by calling values(x) and adding the errors in the returned vector.\n. This should be back to discountFunction.\n. You're negating method, so this actually requires that the method is null. It should be QL_REQUIRE(method, ...) instead.\n. ",
    "ikhramts": "A quick scan through pricing conventions suggests that every other market is consistent in how they treat accrued (though often different day counts are used for yield calculation and for accrued -- but that's a different matter).  The only other occurrence I found was Portuguese govt bonds before 1998. So yeah, I understand reluctance of changing this for one market. \nI don't think just overriding accruedInterest() is sufficient though.  Looks like accruedAmount() is also used by BondFunctions (http://git.io/Jr38Ug) to convert dirty price to clean price, which means that it's impossible to use one day count (ActualActual) for converting PV of payments to clean price and another day count (Actual365Fixed) for calculating accrued for settlement.  \nAnyhow, I can close this.. bummer though, would have been nice to have everything inherit from the Bond class.\n. ",
    "pcaspers": "again I should have sent this request against the 1.3 branch, so I will close this issue and create a new one\n. I should have sent this request to the 1.3 branch, so I will close it and create a new one.\n. ok, of course. I am using emacs. Would the following configuration do the trick ?\n(setq-default c-default-style \"gnu\"\n      tab-width 4\n      indent-tabs-mode nil\n      c-basic-offset 4)\n. Hi Luigi,\nno problem. So I wil close this request and reopen the other one connected to your master branch.\nthank you\n   Peter\n. Maybe one word on the optional nominal parameter in the swaption helper. In the current official quantlib's context this is rather useless, because for RelativePriceError and ImpliedVolError it does not matter and for PriceError we already have the (generally applicable) weights in the calibrate method. However when computing a calibration basket through the representative basket approach where the underlying npv function is locally matched up to order 2 by optimizing nominal, strike and maturity of the respective helper, the nominal is a valuable information that should be stored in the helper in my opinion. Also in this case one may want to use the nominal as a natural weighting in a caliibration by absolute price difference (i.e. using PriceError). That was the motivation for adding the nominal to the swaption helper.\n. Hi Luigi,\nI see the same issue (I have 5s vs 63s on my machine :-) - it is the same factor as yours though). What I can say is that almost all of the computation time is attributed to the order = 2 test case, the other two (order = 0 and order = 1) take below 1s. However I do not see how to modify the test case to make it faster - I played around with the financial data like maturity and barrier level, but there are no obvious parameters in the pricing engine allowing for a relaxation in accuracy, so it seems that we would have to go into the engine itself (which I do not want to do at the moment) . A possible solution would of course be to just exclude the order = 2 case. What do you think ?\nPeter\n. the whole suite takes 9m2s (-O3). By the way, it would be nice if boost could run the test cases on several cpus, wouldn't it? Did not find any option to do that though.\n. I was more thinking about several processes to avoid exactly these kind of\nproblems. Like starting four instances of the suite from the shell in\nparallel, each processing roughly one fourth of the cases.\nOn 28 July 2013 14:28, Luigi Ballabio notifications@github.com wrote:\n\nI don't know if there's a switch for that. Anyway, with the current code,\nparallel test cases would interfere because of singletons such as Settings.\nYou'd need to enable sessions and provide some thread-local id; or you\nmight apply the changes in the thread-local-singleton branch.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/18#issuecomment-21682738\n.\n. do you maybe know how to use the --run_test option ? I am always getting \"Test setup error: no test cases matching filter\". With \"QuantLib_\" or \"_test*\" all tests are run, but I am not able to choose specific cases by their names displayed when running the suite with --log_level=test_suite.\n. cool, thanks. When I just invoke each single test from a bash script in\nparallel, I can run the suite in below 3 minutes :-)\n\nOn 29 July 2013 09:58, Luigi Ballabio notifications@github.com wrote:\n\nIt took some researching... I could run a single test file as, for\ninstance,\nquantlib-test-suite --run_test='//BarrierOptionTest::testPerturbative'\nor a single suite as\nquantlib-test-suite --run_test='//BarrierOptionTest'\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/18#issuecomment-21704513\n.\n. can you try if pull request #31 (https://github.com/pcaspers/quantlib/commit/a5f6bd8743518cbf68f7887fa7f306a4cc46b555) fixes this ?\n. yes. I changed it accordingly.\n. Hello Luigi, shall I close this ? Maybe this class is not fitting well into the library after all. If it is just bad code give me a shout, then I'll try to rewrite it more cleanly. Best regards, Peter\n. sure, take all the time you need\n. this is part of fix20131021 now\n. yes, good idea. I updated the pull request just by renaming the parameter. Looks better in my opinion. What do you think ?\n. sure, you are right. Would that be better ? We can of course put the new class in a separate file, if you want. Also, if the design is ok from your side, I'd like to check if everything works before you merge this.\n. yes, it's a bit like this room in the cellar of our house where I can do what I want ... anyway, I moved it into a new directory in experimental, you meant it like that ?\n. Hi Luigi,\nthank you. Got it.\nPeter\n\nOn 30 December 2013 16:48, Luigi Ballabio notifications@github.com wrote:\n\nHi Peter,\nI've merged the PR, but I've reverted the change to exercise.hpp. Instead\nof adding an index check in exercise.date(i) (which is undesirable in\nloops like\nfor (Size i=0; i<exercise.dates().size(); ++i)\n    do_something_with(exercise.date(i));\nwhere you're bounding the index beforehand) I've added a dateAt method\nwhich adds range checking and works like (and actually calls) vector::at.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/49#issuecomment-31351525\n.\n. Hi Luigi,\nI missed to edit the error message (it should read \"expected 0.02\" in both cases). However it should not appear, if (and this is my question) you run the suite with #51 included ?\nThanks\n    Peter\n. that's interesting. Which configuration do you use ? I am not able to\nreproduce using the standard values.\n\nOn 25 November 2013 16:45, Luigi Ballabio notifications@github.com wrote:\n\n51 https://github.com/lballabio/quantlib/pull/51 was already included.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/56#issuecomment-29211896\n.\n. that you do not observe the error on master is consistent - obviously in\nyour enviroment the KahaleSmileSection does not consider the strike 0.01 to\nbe bad when applying the new check introced with #51. I will do some\nfurther tests on my side and come back to you.\n\nOn 25 November 2013 17:42, Luigi Ballabio notifications@github.com wrote:\n\nAnyway: g++ 4.8.1, boost 1.55.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/56#issuecomment-29217555\n.\n. indeed it seems compiler dependent. on my side, clang 3.4 and g++ 4.6.3 (and msvc10) produce the error without the fix (both with boost 1.53 and 1.55)\n. could you produce some outputs under your g++ 4.8.1 with a modified kahalesmilesection.cpp (I will send you a separate mail) so that we can see what is going on ?\n. these are compiler dependent numerical differences. I adjusted the test cases so that no error should be thrown any more, in particular it should be fine with your g++ 4.8.1.\n. ok, done. Does is look ok now ?\n. Happy new year, Luigi.\n\nOn 31 December 2013 15:27, Luigi Ballabio notifications@github.com wrote:\n\nClosed #63 https://github.com/lballabio/quantlib/pull/63.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/63\n.\n. It seems that usually you are doing the update of the VC project files (I think we still have to do it for this commit here). I wouldn't mind to do it myself when adding new files to take some of the merging work from your shoulders -- do you use some tool or script to update these files or is it a manual process ?\n. Hi Klaus, shouldn't the message read \"... less or equal ...\" ?\nbest regards, Peter\n. thanks a lot. The script is very useful (obviously).\n\nOn 8 January 2014 15:41, Luigi Ballabio notifications@github.com wrote:\n\nI've added the last few things.\nA tip I forgot to share: running dev_tools/sync_projects.sh from the\nQuantLib directory (the one that contains ql) will tell you what's\nmissing and what should be removed from the projects.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/66#issuecomment-31837316\n.\n. since I recently burned my fingers on code similar to this ;-) ... shouldn't we even safer write std::fabs(riskFreeDiscount-1.0) < QL_EPSILON ? ... : ... \n. Hi Luigi, sure I will do that in the next days.\nthank you\n    Peter\n\nOn 21 January 2014 14:53, Luigi Ballabio notifications@github.com wrote:\n\nHello Peter,\nI didn't think there was so much stuff that was unused. I would delete it\ninstead of commenting it out, though. It will remain into the repository\nanyway. Do you have some time to do it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/70#issuecomment-32886358\n.\n. done\n. yes sure, actually it did not feel good to delete the code at all places. I used -Wall. With the standard level I don't get any warnings (except the one concerning the depricated Handle constructor). Cheers, Peter\n. great, that works ! I updated the PR accordingly. Thanks a lot.\n. actually I did not touch the computational part, which (as you say) is already well optimized. The time consuming part seems to be in the constructor of OvernightIndexedCoupon, where the value and fixing dates are set up and the accrual periods are computed. Removing the part of the schedule which is not used in the coupon pricer anyway already gives the improvement (from 1.8sec for the bootstrapping of one 50y Eonia curve to 0.015sec on my machine, with the same result in terms of stripped zero rates).\n\nSo the side effects when turning on the optimization should be limited to the case when you set up an OIS swap and then roll the evaluation date forward into the period, which is now optimized out. We could even handle this case by observing the evaluationDate and recomputing the reduced schedule on demand. But I thought for a start it is enough to have the optimization for the curve - building case (the optimization is off by default and turned on in the rate helper only). A warning concerning the optimization will be in order anyway.\nTherefore I think also the non-zero spread case should be unaffected by the change. To be proved: I will add test cases as you propose above.\n. is the reduced schedule built correctly ? Can you have a second look please ?\n. you can find an example showing the effect here\nhttps://gist.github.com/pcaspers/9366298\n. Hi Paolo,\nfirst of all, telescopicValuDates = true were meant more (or only) to be used in rate helpers (i.e. OISRateHelper) for curve building, not in \"real\" instruments. For rate helpers it should not make any difference as far as I can see (i.e. the bootstrapped curve is exactly the same as before). For instruments it may lead to problems, when the current coupon ages and we are going into the \"empty\" area between the daily fixings at the start (I took 7 days as a grace period from today / the start date) and the tail.\nHowever you are right, that it is not nice that the fixing dates change. I amended the code, so that this should no longer occur. Can you have a look ? \nMaybe we should restrict the usage of telescopic value dates to the construction of OISRateHelper's also, I am not sure ?\nThanks\nPeter \n. as briefly discussed during the workshop: this change speeds up the construction of OISRateHelper objects, but not the bootstrap itself once they are there, for example triggered by market data changes - still the change looks attractive to me, if you have to set up long term OIS curves in an application. \n. I still consider this an enhancement, that we could merge. It speeds up the initial OIS curve building considerably while it does not affect the re-bootstrapping of an existing curve. The latter was addressed in another PR (by @fametrano if I am not mistaken), but this here is orthogonal to that. In a non-realtime application the initial curve setup can be a critical factor, so why shouldn't we take this improvement? Except there are still issues in the implementation, but I am not aware there are.\n. alright, I think Ferdinando and / or Paolo had some open thoughts on this, we can discuss with them again\n\nAm 19.12.2015 um 12:03 schrieb Luigi Ballabio notifications@github.com:\nOk. There was no objection on my part, it's just that I didn't know where we stood after the discussion. I'll migrate this to the new repo.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/lballabio/quantlib-old/pull/83#issuecomment-165976737.\n. btw, should we keep our old repositories and the branches underlying the\nactive PRs until you have migrated them? After migration, are they\nindependent of our repos?\n\nOn 19 December 2015 at 14:30, Peter Caspers pcaspers1973@gmail.com wrote:\n\nalright, I think Ferdinando and / or Paolo had some open thoughts on this,\nwe can discuss with them again\nAm 19.12.2015 um 12:03 schrieb Luigi Ballabio notifications@github.com:\nOk. There was no objection on my part, it's just that I didn't know where\nwe stood after the discussion. I'll migrate this to the new repo.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib-old/pull/83#issuecomment-165976737\n.\n. Hi, I don't get the derived index class totally clean. Mainly because of the template method addFixings, which can not be made virtual. So I began to rewrite the code with two swap indexes in the cms spread coupon class. However I get into trouble in my CmsSpreadLeg class since it uses FloatingLeg which requires one index type as a template parameter (a similar situation occurs for my own extension of the FloatFloatSwap instrument whis expects one index, I think I mentioned that already ... - two independent places that seem to indicate that it is convenient to have a spread index class after all ?). Do you have an advice for me how to proceed, please ? Thanks, Peter\n. I tried to follow Luigi's suggestions in #92, maybe you can have a look. It is not finalized yet (the existing coupon types need to be adjusted), but if this is the direction we want to go, I am happy to do it and test the whole thing.\n\nIf we decide to go for the composite index, I'd try to generalize the approach in this PR here.\n. After working with the cms spread stuff in practice for quite a while now, I have to say that I like this spread index approach here more than the other in #92. In addtion this PR here is complete and (I think) working well, while the other is just a draft that would need more work and tests. In short: If I had one wish free, I'd like to have this PR here merged in the master. If the design turns out to be bad later on, I promise to refactor the whole thing again.\n. great, thank you\nOn 14 May 2014 16:37, Luigi Ballabio notifications@github.com wrote:\n\nNo problem, I've added the VC++ projects myself.\nI've made two small changes:\n- I went back to boost::timer. I'd like to use the new one (for the\n  other examples, too) but it was first released in Boost 1.48 and we still\n  support 1.39.\n- I added a switch to skip the \"press return to continue\" prompts.\n  (It's useful\u2014at least to me\u2014for when I run make check-examples, I let\n  the machine run all of them, and I check the output later.)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/94#issuecomment-43088535\n.\n. ok. however I introduced a flag copy defaulting to true, since the usual expectation would be to get a copy from the clone method. if false, a cached index may be returned if available.\n\nBTW the timings for the 6 markov cases are 28.6s on one thread, 19.2s on 8 threads. I think before the change we had >1min on one thread.\n. In the end, all this doesn't look very clean. I removed the changes from the index class again and placed the caching in the gaussian1d - model class completely. I'd be happier with this solution. The timing stays at the same good values above. \n. to modify the calendar such that the evaluation date is always a business date (and leave everything else as it is) \n. I don't know about QLXL, but in the core lib it still seems to be a problem:\n``` c++\ninclude \ninclude \ninclude \ninclude \nusing namespace QuantLib;\nint main(int argc, char **argv) {\nSettings::instance().evaluationDate() = Date(26, July, 2014); // Saturday !\n\nboost::shared_ptr<RateHelper> rh = boost::make_shared<DepositRateHelper>(\n    0.03, 1 * Months, 2, TARGET(), ModifiedFollowing, false, Actual360());\n\nstd::vector<boost::shared_ptr<RateHelper> > helpers(1, rh);\n\nPiecewiseYieldCurve<ZeroYield, Linear> yc(0, TARGET(), helpers,\n                                          Actual365Fixed());\n\nstd::cout << \"test: \" << yc.discount(0.01) << std::endl;\n\n}\n```\nterminate called after throwing an instance of 'QuantLib::Error'\n  what():  1st iteration: failed at 1st alive instrument, maturity August 29th, 2014, reference date July 28th, 2014: Missing no-fix1M Actual/360 fixing for July 25th, 2014\n/bin/bash: line 1:  2368 Aborted                 (core dumped) ./test3\n. yes, that works, thanks a lot.\n. yes your are right, I fixed that. I also added a test cases for the weighted versions.\n. I like Ferdinando's assumption more than mine, because the resulting instrument is actually traded. My method replicates the Murex logic on the other hand, which has some value (but more for me personally). Let's go for Nando's approach.\n. replaced by #280\n. yes, in addition to the extra day in the last coupon period we should maybe\ninclude the full first coupon in 1.5 (which is also in the branch) ? Some\nhelp on the final steps of the ISDA engine would be great :-)\nOn 3 October 2014 21:51, Pepe notifications@github.com wrote:\n\nAlternatively I can just pick the modif for this problem and set up a PR,\nPeter will be reading this so he can give his opinion too.\nYes, I am trying to figure out which email I sent to sourceforge to use\npwd recovery.......brave world.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-57847143.\n. yes, we were in the middle of testing. I will try to check against BBG und\nMurex next week. The full coupon and the additional day should already work\nthough.\n\nOn 4 October 2014 13:51, Pepe notifications@github.com wrote:\n\nYes, we might just as well finish this off and fix this issue with it. We\nwere testing the paper results right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-57902538.\n. I think there is another issue in the current CDS schedule generation, which I wasn't aware of. If I understand\n\nhttp://www.cdsmodel.com/cdsmodel/documentation.html?# \ncorrectly, the first accrual date should be an adjusted IMM date (following, weekends only calendar for what matters in the standard model) while the maturity date is unadjusted always. In ql (for DateGeneration::CDS) it is the other way round (maybe this detail changed over time?). I will add the change to my CDS branch.\n. but for DateGeneration::CDS you get 20-Sep-14, no ? That's what I got (at\nleast I think I saw that ...)\nOn 22 October 2014 11:14, Pepe notifications@github.com wrote:\n\nMaybe I lost grip of it by now so apologies if I didnt understand, but if\nI enter today=25/Sept/2014 I get dates:\n22-Sep-14\n22-Dec-14\n20-Mar-15\n22-Jun-15\n21-Sep-15\n21-Dec-15\n21-Mar-16\n20-Jun-16\n20-Sep-16\nIsnt that what your expecting? (not talking about the last date)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-60056922.\n. ups, sorry. I changed this myself some time ago in my CDS branch, which was\nwrong (8be7e31). The termination date should be unadjusted always, but this\ncan be done with terminationDateConvention = Unadjusted, so no change to\nthe code needed. Sorry for the confusion.\n\nOn 22 October 2014 20:41, Pepe notifications@github.com wrote:\n\nok puzzled now I am. Cant see why your not getting the same. Can you pls\ntry this code:\nDate todaysDate(25, September, 2014);\nSettings::instance().evaluationDate() = todaysDate;\nDate termDate = TARGET().adjust(todaysDate+Period(2*Years), Following);\nSchedule cdsSchedule =\n    MakeSchedule().from(todaysDate).to(termDate)\n                  .withFrequency(Quarterly)\n                  .withCalendar(WeekendsOnly())\n                  .withConvention(ModifiedFollowing)\n                  .withTerminationDateConvention(ModifiedFollowing)\n                  .withRule(DateGeneration::CDS);\nstd::copy(cdsSchedule.begin(), cdsSchedule.end(),\n    std::ostream_iterator(cout, \"\\n\"));\nmy output:\nSeptember 22nd, 2014\nDecember 22nd, 2014\nMarch 20th, 2015\nJune 22nd, 2015\nSeptember 21st, 2015\nDecember 21st, 2015\nMarch 21st, 2016\nJune 20th, 2016\nSeptember 20th, 2016\nDecember 20th, 2016\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-60133872.\n. yes, sure. As soon as the ISDA engine is finished let's consolidate\neverything and check out the changes one by one into a clean branch\n\nOn 23 October 2014 16:47, Pepe notifications@github.com wrote:\n\nsolved then. I have the same problem with my cds repo; its mixed with\nother things. We need something clean for the PR\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-60249956.\n. I do not reproduce this with gcc 4.9.1.\n\nOn 10 November 2014 10:58, Luigi Ballabio notifications@github.com wrote:\n\nConfirmed in the current git master, too. The same error also shows up in\nother places.\nSigh. I guess I'll just sidestep boost.lambda entirely...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/163#issuecomment-62362930.\n. it seems to be solved for recent clang versions though (I tested with 3.6.0\ntrunk 219085)\n\nOn 10 November 2014 14:14, Luigi Ballabio notifications@github.com wrote:\n\nIt's a clang problem.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/163#issuecomment-62382246.\n. ok, done. Thank you.\n. 2) yes, you are right, that's better - I will change it and update the PR\n1) I tried but the daycounter() is not yet available during construction of the coupon base class. \n. it compiles, but does it work at runtime ? I saw a missing implementation exception then.\n. what if you replace \" = make_shared ...\" by \" =\nboost::shared_ptr(new DigitalReplication())\", would\nthat work ?\n\nOn 25 March 2015 at 07:41, Cheng Li notifications@github.com wrote:\n\nI tried this on windows machine with vc11. It doesn't compile with boost\n1.55. Compiler complains can't match any existing make_shared template...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/207#issuecomment-85877368.\n. ok thanks, I will update the pr\n\nVon meinem iPhone gesendet\n\nAm 01.04.2015 um 04:13 schrieb Cheng Li notifications@github.com:\nHi Peter. Yes, that solution works.\n\u2014\nReply to this email directly or view it on GitHub.\n. ok, it should work on msvc now. I also changed the digital cms spread coupon classes in this PR which I think are already merged into the master. Hope that works, since it looks as if I added new files here on github.\n. rounding up is better, you are right, can you just change it in this PR ?\n. hopefully this question is not too ridiculous, but does that only happen\nfor certain models and/or the underlying forward rate being negative ? Is\nthe \"usual\" Hull adjustment formula wrong for a negative forward ?\n\nOn 13 April 2015 at 11:49, Luigi Ballabio notifications@github.com wrote:\n\nIt would be a comment about code that is not there, but it's ok for me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-92295566.\n. ok, got it. Thanks !\n\nOn 14 April 2015 at 15:58, Ferdinando M. Ametrano notifications@github.com\nwrote:\n\nConvexity being calculated as sigma^2*T, it must be positive.\nBut convexity, as FRA/futures adjustment, has been used in the past to take\ninto account futures margining vs FRA being uncollateralized OTC. Nowadays\nFRAs are margined too, and their margining could be heavier than futures\none, inverting the sign of the adjustment.\nIn order to fit this new scenario in the current quote framework the most\neffective approach is to allow adjustment to go negative if needed.\nPlease note I'm not stating that the FRA/futures adjustment is currently\nnegative, but in sub-par parametrizations and systems this might be the\ncase\nOn Mon, Apr 13, 2015 at 12:28 PM, Peter Caspers notifications@github.com\nwrote:\n\nhopefully this question is not too ridiculous, but does that only happen\nfor certain models and/or the underlying forward rate being negative ? Is\nthe \"usual\" Hull adjustment formula wrong for a negative forward ?\nOn 13 April 2015 at 11:49, Luigi Ballabio notifications@github.com\nwrote:\n\nIt would be a comment about code that is not there, but it's ok for me.\n\u2014\nReply to this email directly or view it on GitHub\n<https://github.com/lballabio/quantlib/pull/221#issuecomment-92295566\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-92302527.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-92861119.\n. hm, this is based on your current master and may collide with other PRs (e.g. #216), except git is smart enough to merge changes in moved files ... ? Anyway, if you have any problems with the merging, I can just send a new request.\n. I thought an engine could use the additional Information or may also ignore\nit, but yes in the latter case the result would not be as expected. A\nsecond point is that the RebatedExercise drops the EarlyExercise feature\nimplicitly.\n\nhmm...\nOn 12 May 2015 at 12:17, Luigi Ballabio notifications@github.com wrote:\n\nAbout the rebated exercise: do you think the rebate belongs into the\nexercise, or was it a way to get the rebate into the swaption without\nchanging its signature? (I'm a bit worried about all the code that might\ntake a RebatedExercise and ignore the rebate entirely...)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/229#issuecomment-101223303.\n. I could fix the second point by deriving RebatedExercise from EarlyExercise\ninstead of Exercise and returning false in case only an Exercise instance\nis given. This would make sense in any case, wouldn't it ?\n\nFor the first point, is it really an issue ? As soon as adding more,\noptional Information to exercise, it might always be the case that this\nis not taken into account by an engine. However I could go through the\nengines and throw an error if a rebated exercise is fed into an engine,\nthat does not support it, if you think this is safer ?\nOn 12 May 2015 at 14:00, Peter Caspers pcaspers1973@gmail.com wrote:\n\nI thought an engine could use the additional Information or may also\nignore it, but yes in the latter case the result would not be as expected.\nA second point is that the RebatedExercise drops the EarlyExercise feature\nimplicitly.\nhmm...\nOn 12 May 2015 at 12:17, Luigi Ballabio notifications@github.com wrote:\n\nAbout the rebated exercise: do you think the rebate belongs into the\nexercise, or was it a way to get the rebate into the swaption without\nchanging its signature? (I'm a bit worried about all the code that might\ntake a RebatedExercise and ignore the rebate entirely...)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/229#issuecomment-101223303.\n. ok, thanks\n\n\nOn 12 May 2015 at 16:22, Luigi Ballabio notifications@github.com wrote:\n\nNo, you're right, it's not an issue. What I was wondering about was more:\ndo we include the rebate information into the exercise, or do we pass\nexercise and rebate separately to the swaption? But I think your solution\nis ok.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/229#issuecomment-101299427.\n. yes ... I added this on 20-04-2013 in my own branch only ... I will update the PR and remove the variable - thank you Francois and sorry for the confusion I caused.\n. ok it should be better now\n. Francois ? You have the more interesting use cases ;-) I can add some\ntests, too, if you don't have the time to do it.\n\nOn 15 May 2015 at 15:54, Luigi Ballabio notifications@github.com wrote:\n\nIt would be nice to have a few test cases for this. Do you think you can\nfind some time for them? Or maybe you want to have a go at it, @igitur\nhttps://github.com/igitur ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/230#issuecomment-102404681.\n. I added some basic checks. Did you read Eric's hint about qlxl ?\n\nOn 16 May 2015 at 23:26, Francois Botha notifications@github.com wrote:\n\nOK, I can add a test for this. My ultimate goal is still to get this\nconstructor working in the QuantLibXL interface.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/230#issuecomment-102699686.\n. for me as well \n\nVon meinem iPhone gesendet\n\nAm 23.05.2015 um 11:27 schrieb Ferdinando M. Ametrano notifications@github.com:\nfine with me!\nOn Fri, May 22, 2015 at 11:59 AM, Luigi Ballabio notifications@github.com\nwrote:\n\nOk, how about this: for now, I put in @pcaspers\nhttps://github.com/pcaspers's #216\nhttps://github.com/lballabio/quantlib/pull/216, but without\nCalibrationHelperBase and AdjustedHelper, and I get out 1.6 quickly.\nThen we them get back in, and I also give you free rein to really break\nCalibrationHelper: that is, we rename it to something more specific,\nrename CalibrationHelperBase to CalibrationHelper, and make your changes.\nBut we take a bit more time to do it so we get the names right.\nWhat do you say?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/237#issuecomment-104604733.\n\u2014\nReply to this email directly or view it on GitHub.\n. oh, hold on, there are a few more things to do in case we have more grid points than exercise dates, I will update this PR \n. Now I can use the engine for bermudan swaptions on paths with a time grid that is a superset of the exercise times. I'd like the additional inspectors to reuse the calibrated regression functions for proxy pricing. @klausspanderen, are you ok with these changes (of course I checked the test suite)\n. I removed the addtional inspectors again, the related extended functionality for \"proxy pricing\" should be implemented in derived classes better, since it turns out that this is a more delicate and non-standard task than I initially thought. For this I added a post processing hook. So this PR just boils down to make the pricer and engine ready for non-american optionalities. It's a better design this way in any case I guess.\n. Hi Johannes, I fear that I am guilty since I added these weighted variants to Klaus' implementation. However I do not get the actual problem. Can you explain that in a few sentences maybe ? Thank you, Peter\n. yes, I get the part with factoring out the exp(-x) term for the expected result. Why do we need to floor the tolerance for the k-case at QL_EPSILON though ?\n. ok. Thank you, Johannes !\n\n\nOn 12 June 2015 at 20:45, Johannes G\u00f6ttker-Schnetmann \nnotifications@github.com wrote:\n\nOn Friday, June 12, 2015 09:51:29 AM Peter Caspers wrote:\n\nyes, I get the part with factoring out the exp(-x) term for the expected\nresult. Why do we need to floor the tolerance for the k-case at\nQL_EPSILON\nthough ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/266#issuecomment-111554589\n\nOtherwise the tests fail if the result is small. An example (I have\nincluded\nthe tol, which results from the other formula):\nfunctions.cpp(267): error in\n\"QuantLib::detail::quantlib_test_case(&FunctionsTest::testWeightedModifiedBesselFunctions)\":\nfailed to verify exponentially weightedmodified Bessel function of second\nkind\norder : -4.5\nargument : 11.1\ncalculated : 2.01882e-10\nexpected : 2.01882e-10\ntol : 2.96624e-18\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/266#issuecomment-111586560.\n. you mean Pascal, right ? ;-)\n. fair enough, but according to wikipedia he made it only up to order 6 :-) \n. Hi Paolo,\nso far I understood there is an \"implicit convention\" in QuantLib that the pillar dates in yield curves are on the last date entering the instrument valuation (i.e. in general the index estimation period end date in the case of swaps and FRAs). See for example the latest date calculation for swap rate helpers (if QL_USE_INDEXED_COUPON is active, otherwise the index estimation period end date is forced to be the accrual end date of the coupon). Otherwise, i.e. when choosing the instrument's coupons latest dates as curve pillars, you are right that one would need a convergence loop. But then we would have to amend the swap rate helper's definition of their latest date as well to stay consistent, wouldn't we? In general I believe this is an user option (for example in Murex you can choose between these two alternatives for the curve pillar determination in the revaluation rate curve definition), so we could implement both. I personally would also be happy with the index end date variant alone. What do you think ?\nBest regards\nPeter\n. yes, this would be a real step forward, in particular the custom defined\npillar dates. Also, it seems that this could be integrated rather smoothly\nin the existing infrastructure.\nbest regards\nPeter\n\nOn 26 August 2015 at 11:47, Paolo Mazzocchi notifications@github.com\nwrote:\n\nHi Peter,\nyou're rigth, to be consistent we need to modify the swap rate helper too.\nThis should be an user option.\nWe could implement both and maybe add a third one, like custom pillar\ndates. In this way each user can use the desired pillar dates .\nWhat do you think?\nBest regards,\nPaolo\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/297#issuecomment-134927177.\n. I will have a closer look, but as a quick question: Can't we exit without convergence iteration when the pillar choice is \"last relevance date\" (and the interpolation is local) ?\n. yes, agreed. Why is it complex to check though ? We could precompute a\nboolean in the constructor and then just modify the existing exit\ncondition, no ?\n\nOn 27 August 2015 at 12:14, Luigi Ballabio notifications@github.com wrote:\n\nWe could exit if the interpolation is local and the choice is\nLastRelevantDate for all helpers. It becomes complex to check and\nprobably gains very little performance...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/297#issuecomment-135371399.\n. cross posting, sorry.\n\nOn 27 August 2015 at 13:05, Peter Caspers pcaspers1973@gmail.com wrote:\n\nyes, agreed. Why is it complex to check though ? We could precompute a\nboolean in the constructor and then just modify the existing exit\ncondition, no ?\nOn 27 August 2015 at 12:14, Luigi Ballabio notifications@github.com\nwrote:\n\nWe could exit if the interpolation is local and the choice is\nLastRelevantDate for all helpers. It becomes complex to check and\nprobably gains very little performance...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/297#issuecomment-135371399.\n. The first date of a ZeroCurve implicitly defines its reference date, which\nis today + 0.192 in your case. You ask for a forward rate spanning [today,\n11.12.2015] though, so a discount factor for a maturity before the\nreference date of the curve is required. Adding a \"CRate() { ExpiryYear =\n0.0, Rate = 0.002275 };\" as the first element of your cRate array should\nsolve your issue.\nPeter\n\n\nOn 4 September 2015 at 15:03, vinaydwivedi notifications@github.com wrote:\n\nWould you mind advising on following please.\nDouble rate = Pricer.GetForwardRate(Pricer.GenerateRateCurve());\npublic class CRate\n{\npublic Double ExpiryYear;\npublic Double Rate;\n}\npublic class Pricer\n{\npublic static YieldTermStructure GenerateRateCurve()\n{\nCRate[] cRate = new CRate[11];\nSortedList matrix = new SortedList();\n```\n    cRate[0] = new CRate() { ExpiryYear = 0.0192, Rate = 0.002275 };\n    cRate[1] = new CRate() { ExpiryYear = 0.2521, Rate = 0.002275 };\n    cRate[2] = new CRate() { ExpiryYear = 0.5041, Rate = 0.002775 };\n    cRate[3] = new CRate() { ExpiryYear = 0.7507, Rate = 0.003275 };\n    cRate[4] = new CRate() { ExpiryYear = 1.0027, Rate = 0.003275 };\n    cRate[5] = new CRate() { ExpiryYear = 1.5068, Rate = 0.0032625 };\n    cRate[6] = new CRate() { ExpiryYear = 2.0027, Rate = 0.003275 };\n    cRate[7] = new CRate() { ExpiryYear = 3.0027, Rate = 0.003435 };\n    cRate[8] = new CRate() { ExpiryYear = 4.0027, Rate = 0.003785 };\n    cRate[9] = new CRate() { ExpiryYear = 5.0055, Rate = 0.00425 };\n    cRate[10] = new CRate() { ExpiryYear = 10.0082, Rate = 0.007485 };\nforeach (CRate r in cRate)\n{\n    if (!matrix.ContainsKey(r.ExpiryYear))\n    {\n        matrix.Add(r.ExpiryYear, r.ExpiryYear);\n    }\n}\n\nDateVector matVec = new DateVector();\n\nforeach (double mat in matrix.Keys)\n{\n    matVec.Add(Date.todaysDate().Add(((int)(365.0 * mat))));\n}\n\nDoubleVector rates = new DoubleVector();\n\nfor (uint i = 0; i < matrix.Count; ++i)\n{\n    rates.Add(GetRate(cRate, matrix.Keys[(int)i]));\n}\nYieldTermStructure yield = new ZeroCurve(matVec, rates, new Business252(), new Japan());\n\nyield.enableExtrapolation();\n\nreturn yield;\n\n}\npublic static Double GetForwardRate(YieldTermStructure yield)\n{\n    double rr = yield.forwardRate(Date.todaysDate(), new Date(11, QuantLib.Month.December, 2015), yield.dayCounter(), Compounding.Continuous).rate();\n    return rr;\n}\nstatic double GetRate(CRate[] cRate, double mat)\n{\n    foreach (CRate r in cRate)\n    {\n        if (r.ExpiryYear == mat)\n        {\n            return r.Rate;\n        }\n    }\nreturn 0;\n\n}\n```\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/302.\n. No. I was not using any particular compiler flags (just -O3 -m64 -qopenmp). On the other hand, do we expect those tolerances to hold or are they set just by experiment ?\n. doing some more tests:\n\nwith icpc and with IncrementalStatistics (i.e. using SequenceStatisticsInc here) I have a max error of 1.16891e-18 (regardless of using #299 or not, by the way)\nwith SequenceStatistics, it is 2.17176e-15\nwith gcc 5.1.0 the respective numbers are\nIncrementalStatistics  1.30274e-18\nSequenceStatistics 1.30274e-18\n. it is a bit strange, that with gcc both the incremental and general\nstatistics deliver the same value, while icpc produces different values;\nstill both might be in line with the C++ standard, I guess, which leaves\nsome room for the exact implementation of FP operations (I\nmean, the result can even depend on the optimization level ... )\njust leave this PR open (it doesn't seem to hurt at the moment), I will\nredo the tests (to be sure) and try to find out if there is something\nspecial with icpc in this regard\nOn 8 September 2015 at 11:36, Luigi Ballabio notifications@github.com\nwrote:\n\nSet by experiment, I guess?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/303#issuecomment-138496126.\n. Oh, you are right, this ones fails as well with indexed coupons. I don't\nknow where the hard coded reference value in L365 comes from, but it seems\nreasonable just to increase the tolerance a bit (the inflation swap's NPV\nobviously changes slightly because of the GBP Libor leg's indexed coupons).\nI will send a new PR for this.\n\nOn 24 September 2015 at 17:18, Luigi Ballabio notifications@github.com\nwrote:\n\nMerged, thanks. Did you also have a look at the remaining failing test in\nCPISwapTest?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/315#issuecomment-142960192.\n. I haven't tried but I think this may break the stripping, since the instruments constructed in L121 and L130 are not updated accordingly, while during stripping (L144) the updated option type is used. I would suggest to break the block in L105-L140 into two parts, one that is executed only once during initialization and the other on each udpate.\n. Yes as I said the construction of the instruments in L121 and L130 need to be extracted from the if-not-initialized block (of course with L111 and also together with the engine construction, btw. we only need one MakeCapFloor, don't we?). The rest can be done in the original block, since independent of updates, so I would keep the flag.\n. I can provide a test case, if you want, since I still need some PR for the Hacktoberfest :-). My view is that it is never obvious that an untested change will work. You can see it from the commit history and the discussion here, can't you :-/. Also, it seems the test suite currently wouldn't recognize the difference before and after the patch. Alone this requires a test case in my opinion (a more pressing reason is to exclude the chance for breaks like after the first commit, that may rarely occur in practical applications and may therefore remain undetected therefore for a long time). Finally one should note, that this PR isn't actually a fix, i.e. before the change no wrong results were produced, only the calculations become numerically more stable with keeping the options out of the money. Still I agree, it makes sense to carry this behavior over to updates due to rate changes.\n. At best we would store the fixings with (month,year) as a key instead of\n(day,month,year), but this would require a new index class probably. So the\nsolution sounds not bad. But I might be biased because Murex stores CPI\nfixings the same way (on the 1st calendar day of a month, the other days\ncontain NULL), so I am used to this kind of representation.\n\nOn 23 October 2015 at 16:59, Luigi Ballabio notifications@github.com\nwrote:\n\n@fametrano https://github.com/fametrano , @pcaspers\nhttps://github.com/pcaspers : do you think this makes sense? With this\npatch, asking for the fixing of the inflation index at any past date would\nlook for it at the start of the inflation period. It avoids storing the\nsame fixing for all days, but it might be surprising. What do you think?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/333#issuecomment-150598941.\n. it should be fine now (please cross check once again)\n. Maybe you wanted to send a PR to my repository ? In every case this one should be closed. Best regards, Peter \n. It seems the only place where it is referenced is in IncrementalStatistics through #299. I do not see any problem in replacing it there by a plain sum accumulator, if we want to stick with boost 39 for the time being.\n. alright, that is even better\n. afaik 12.04 LTS has boost 1.48 by default - anyway, if I should downgrade the used accumulators, just give me a shout \n. ok, I will remove the Kahan accumulator and send you a PR shortly\n. Interesting. Did you get that from some compiler diagnostics? \n\nThe website given as a reference in the code contains a summary of the paper and Fortran code for download. The Fortran code shows the same peculiarity regarding caux and ccaux (lines 200 and 201 in Fmain.f90). The full paper can be downloaded here: \nhttp://www.researchgate.net/publication/228454708_A_perturbative_formula_to_price_barrier_options_with_time-dependent_parameters_in_the_Black_and_Scholes_world\nFormula 36 seems to be the function v implemented in pertubativebarrieroptionengine.cpp, L393. The loop starting at L163 seems to compute the integral of formula 34. Lines 172-173 correspond to [E(\u03c4, t, x, x\u2217,\u03b3)\u2212 E(\u03c4, t, \u2212x, x\u2217,\u03b3) + E(\u03c4, t, x, \u2212x\u2217,\u03b3)\u2212 E(\u03c4, t, \u2212x, \u2212x\u2217,\u03b3)] (see lines 4 to 6 of formula 34 in the paper).\nIf this is all true, we would have to replace caux by ccaux in L172 and would be fine.\nWe should probably send the corresponding fix of the Fortran implementation to the authors of the paper. Maybe they can confirm that it is correct. Do you know them ?\n. that's good, thank you\n. I am confident that this is ok.\n. ok, so this is more a libtool / automake issue, that has to be solved on their side? \n. then probably we do not need to do anything to fix that (just wait), shall we close the issue then?\n. ok\n. I do not exactly remember why I added it, I guess it is not needed. Klaus should confirm, then I will remove it. It was not related to the introduction of space / time dependency.\n. yes you are right, Klaus, sorry I forgot that. I will close this issue.\n. The registration to the evaluation date does not matter for the current helpers (SwaptionHelper, CapHelper), because they build the schedules relative to the termstructure's reference date and we registered with the termstructure already. We should nevertheless register here to be on the safe side ?\n. You are right, we should not register here. If needed in new implementations, the registration should be done in the derived class. This seems cleaner, doesn't it ? I removed that line again in the pull request.\n. Hi Klaus, Luigi,\nI don't know. Can we overwrite evolve in the derived class, and there just call StochasticProcess1D::evolve(...) ?\nPeter\n. I wonder why I see this change here. While I branched this PR branch from an older version of your master and  therefore expect to see the change on my side, in your master the part \", public MeanRevertingPricer\" seems already to be present ... ?\n. Hi Luigi. Probably it should not be an index (because it does not represent\none actually). Yes, you are right. It seemed practical though in some\ncircumstances, e.g. the FloatFloatSwap instrument takes an\nInterestRateIndex and this can now be a cms spread index without any\nchanges there (I haven't commited this part of the development yet). It is\nlike in Murex where you have derived indices which can very generally set\nup as a weighted basket of underlying indices. I did not want to go as far\nhere without any use case at the moment, but the concept is quite appealing\nfrom my point of view. However I am also completely fine to change this as\nyou propose.\nOn 8 April 2014 18:04, Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp:\n\n\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. /\n  +\n  +/! \\file swapspreadindex.hpp\n\\brief swap-rate spread indexes\n  +*/\n  +\n  +#ifndef quantlib_swapspreadindex_hpp\n  +#define quantlib_swapspreadindex_hpp\n  +\n  +#include \n  +\n  +namespace QuantLib {\n  +\n//! class for swap-rate spread indexes\nclass SwapSpreadIndex : public virtual InterestRateIndex {\n\n\nPeter, just wondering: do you think this should be an Index? How about\nsimply passing the two swap indexes to the coupon? (It would also sidestep\nthe problem of native fixings that you had to tackle in the Index class.)\n\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88/files#r11397067\n.\n. yes, true. Can I try to introduce the more general notion of a \"derived\nindex\" though (from which the cms spread index would then inherit),\nhopefully cleaner ? Then, if you still don't like it I'll revert the whole\nthing back to the two index solution.\n\nOn 9 April 2014 16:23, Ferdinando M. Ametrano notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp:\n\n\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. /\n  +\n  +/! \\file swapspreadindex.hpp\n\\brief swap-rate spread indexes\n  +*/\n  +\n  +#ifndef quantlib_swapspreadindex_hpp\n  +#define quantlib_swapspreadindex_hpp\n  +\n  +#include \n  +\n  +namespace QuantLib {\n  +\n//! class for swap-rate spread indexes\nclass SwapSpreadIndex : public virtual InterestRateIndex {\n\n\nfor what is worth I also agree that a coupon with two indexes is better.\nthere are no official (ISDA) fixings of the spread as far as I know, so\nthis suggests to avoid creating a non-existent index\n\u2026 <#14546df6528f5d57_>\nOn Wed, Apr 9, 2014 at 1:41 PM, Luigi Ballabio notifications@github.comwrote:\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > + WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY > + or\nFITNESS FOR A PARTICULAR PURPOSE. See the license for more details. */ > +\n\n+/! \\file swapspreadindex.hpp > + \\brief swap-rate spread indexes > +/\n- > +#ifndef quantlib_swapspreadindex_hpp > +#define\n  quantlib_swapspreadindex_hpp > + > +#include  > +\n  +namespace QuantLib { > + > + //! class for swap-rate spread indexes > +\n  class SwapSpreadIndex : public virtual InterestRateIndex { I see. Yes, the\n  concept is appealing. I'd wait for a use case to modify Index, though, so\n  I'd go for the two swap indexes at this time. What do you think? -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11431644> .\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88/files#r11437655\n.\n. no it is not an index, I agree. It seems convenient to package the spread\nformula into the same kind of object as say a Libor or CMS index though,\ne.g. I have this float float swap instrument\n\nFloatFloatSwap(\n        const VanillaSwap::Type type, ...\n        const boost::shared_ptr<InterestRateIndex> &index1,\n        const boost::shared_ptr<InterestRateIndex> &index2, ... )\nand it would be nice if it could just take a cms spread payoff on one leg.\nBut it is just a feeling, one can solve that in other ways, too. I'll\nsketch something, but if it doesn't feel natural I'll just\ngo back as you propose.\nThanks !\nPeter\nOn 9 April 2014 19:11, Ferdinando M. Ametrano notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp:\n\n\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. /\n  +\n  +/! \\file swapspreadindex.hpp\n\\brief swap-rate spread indexes\n  +*/\n  +\n  +#ifndef quantlib_swapspreadindex_hpp\n  +#define quantlib_swapspreadindex_hpp\n  +\n  +#include \n  +\n  +namespace QuantLib {\n  +\n//! class for swap-rate spread indexes\nclass SwapSpreadIndex : public virtual InterestRateIndex {\n\n\nPeter, I'll leave the final decision to Luigi, but considering you\nimpressive track record I am afraid I might be losing something here. Why\ndo you think \"derived index\" might be better? In my book an index is\nsomething that has a public fixing from some recognized institution, as\nsuch a cms-spread is not an index. In a term sheet you always state the\nspread as difference between two real indexes, you do not refer to the\n2Y/10Y-spread\n\u2026 <#14547795eb4c2b4b_>\nciao -- Nando\nOn Wed, Apr 9, 2014 at 6:52 PM, Peter Caspers notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > > > + WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY > > + or\nFITNESS FOR A PARTICULAR PURPOSE. See the license for more details. */ > >\n- > > +/_! \\file swapspreadindex.hpp > > + \\brief swap-rate spread indexes\n\n+/ > > + > > +#ifndef quantlib_swapspreadindex_hpp > > +#define\n  quantlib_swapspreadindex_hpp > > + > > +#include \n+ > > +namespace QuantLib { > > + > > + //! class for swap-rate spread\n  indexes > > + class SwapSpreadIndex : public virtual InterestRateIndex { >\n  yes, true. Can I try to introduce the more general notion of a \"derived >\n  index\" though (from which the cms spread index would then inherit), >\n  hopefully cleaner ? Then, if you still don't like it I'll revert the whole\n  thing back to the two index solution. > ... <#1454767706537443> > On 9\n  April 2014 16:23, Ferdinando M. Ametrano notifications@github.comwrote:\n  In QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > > > + WITHOUT\n  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY > > + or\n  FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. / > >\n- > > +/! \\file swapspreadindex.hpp > > + \\brief swap-rate spread indexes\n+/ > > + > > +#ifndef quantlib_swapspreadindex_hpp > > +#define\n  quantlib_swapspreadindex_hpp > > + > > +#include \n+ > > +namespace QuantLib { > > + > > + //! class for swap-rate spread\n  indexes > > + class SwapSpreadIndex : public virtual InterestRateIndex { >\n  for what is worth I also agree that a coupon with two indexes is better.\n  there are no official (ISDA) fixings of the spread as far as I know, so >\n  this suggests to avoid creating a non-existent index > ...\n  <#14546df6528f5d57_> > On Wed, Apr 9, 2014 at 1:41 PM, Luigi Ballabio <\n  notifications@github.com>wrote: In\n  QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > + WITHOUT ANY\n  WARRANTY; without even the implied warranty of MERCHANTABILITY > + or\n  FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. / > +\n  +/! \\file swapspreadindex.hpp > + \\brief swap-rate spread indexes > +/\n- > +#ifndef quantlib_swapspreadindex_hpp > +#define\n  quantlib_swapspreadindex_hpp > + > +#include  > +\n  +namespace QuantLib { > + > + //! class for swap-rate spread indexes > +\n  class SwapSpreadIndex : public virtual InterestRateIndex { I see. Yes, the\n  concept is appealing. I'd wait for a use case to modify Index, though, so\n  I'd go for the two swap indexes at this time. What do you think? -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11431644> . -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11437655> . -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11445484> .\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88/files#r11446407\n.\n. yes, if Klaus' signal2 observer is used, this is one of the major points to\nget acceptable runnning times. But also with the default implementation it\nspeeds up things considerably.\n\nthe clone(tenor) method was not present by the time I wrote the code but as\nyou mention it, maybe we can implement a cache in the clone method and then\nuse this ? Would that be cleaner ?\nOn 25 June 2014 16:36, Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/experimental/models/gaussian1dmodel.cpp:\n\nboost::shared_ptr<VanillaSwap> underlying =\n-            tmpIdx.underlyingSwap(fixing);\n-            swapIdx->underlyingSwap(fixing,tenor);\n\nIt seems a bit weird to ask an index to return a swap with a different\ntenor. On the other hand, using the previous version (which, by the way,\ncould have been written as tmpIdx = swapIdx->clone(tenor)) loses the\ncaching of the swap across calls. Does it make a lot of difference?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/101/files#r14189070.\n. that's true, I agree. Can you just do it like this ?\n\nOn 25 November 2014 at 10:23, Luigi Ballabio notifications@github.com\nwrote:\n\nIn QuantLib/ql/qldefines.hpp:\n\n@@ -141,6 +141,10 @@\n #define QL_MAX_REAL            ((std::numeric_limits::max)())\n #define QL_MIN_POSITIVE_REAL   ((std::numeric_limits::min)())\n #define QL_EPSILON             ((std::numeric_limits::epsilon)())\n+#define QL_INFINITY                                                            \\\n-    ((std::numeric_limits::has_infinity                               \\\n-          ? std::numeric_limits::infinity()                           \\\n-          : QL_MAX_REAL))\n\nI'm not sure about this macro. If we call it QL_INFINITY, there are\nexpectations about it (e.g., that infinity/2 is still infinity) that are\nnot met by QL_MAX_REAL. Instead, I would use QL_MAX_REAL explicitly in\nBinomialDistribution.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/173/files#r20850826.\n. oh sorry, I meant discarding the QL_INFINITY definition and replacing this\nby QL_MAX_REAL in the patch for the BinomialDistribution\n\nOn 25 November 2014 at 10:41, Luigi Ballabio notifications@github.com\nwrote:\n\nIn QuantLib/ql/qldefines.hpp:\n\n@@ -141,6 +141,10 @@\n #define QL_MAX_REAL            ((std::numeric_limits::max)())\n #define QL_MIN_POSITIVE_REAL   ((std::numeric_limits::min)())\n #define QL_EPSILON             ((std::numeric_limits::epsilon)())\n+#define QL_INFINITY                                                            \\\n-    ((std::numeric_limits::has_infinity                               \\\n-          ? std::numeric_limits::infinity()                           \\\n-          : QL_MAX_REAL))\n\nSorry, I'm not sure what \"like this\" means...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/173/files#r20851780.\n. absolutely !\n\nOn 20 March 2015 at 17:15, Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/math/interpolations/loginterpolation.hpp\nhttps://github.com/lballabio/quantlib/pull/194#discussion_r26852252:\n\n@@ -235,6 +195,51 @@ namespace QuantLib {\n                                 CubicInterpolation::SecondDerivative, 0.0) {}\n     };\n-    namespace detail {\n  +\n-        template \n-        class LogInterpolationImpl\n-            : public Interpolation::templateImpl {\n-          public:\n-            LogInterpolationImpl(const I1& xBegin, const I1& xEnd,\n-                                 const I2& yBegin,\n-                                 const Interpolator& factory = Interpolator())\n-            : Interpolation::templateImpl(xBegin, xEnd, yBegin,\n-                                                 LogLinear::requiredPoints),\n\nMaybe Interpolator::requiredPoints?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/194/files#r26852252.\n. it is still used in the fullInterface() inspector (other than I described\nmy plans on the Mailing list), to keep that backward compatible in case any\nclient code should rely on this inspector (at leat in the library,\ntest-suite and examples only the schedule class itself seems to use it).\n\nOn 28 April 2015 at 09:43, Francois Botha notifications@github.com wrote:\n\nIn QuantLib/ql/time/schedule.hpp\nhttps://github.com/lballabio/quantlib/pull/230#discussion_r29220231:\n\n@@ -90,11 +103,12 @@ namespace QuantLib {\n         //@}\n       private:\n         bool fullInterface_;\n\nThe fullInterface_ variable is no longer used. Perhaps remove it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/230/files#r29220231.\n. In the default implementation the bond start is assumed to be equal to the option maturity (i.e. zero settlement delay), you can overwrite the function with a more sophisticated version taking into account the delay (this is for example done in the Hull White Model). The JamshidianSwaptionEngine (for example) will provide more accurate pricings of market swaptions then.\n. Murex calls it volatility nature :-) I would vote for volatility type,\nthat's nice\n\nOn 15 May 2015 at 15:44, Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/termstructures/volatility/volatilitynature.hpp\nhttps://github.com/lballabio/quantlib/pull/216#discussion_r30408879:\n\n+\n- This program is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- FOR A PARTICULAR PURPOSE.  See the license for more details.\n  +/\n  +\n  +/! \\file volatilitynature.hpp\n-    \\brief volatility nature descriptions\n  +*/\n  +\n  +#ifndef quantlib_volatility_nature_hpp\n  +#define quantlib_volatility_nature_hpp\n  +\n  +namespace QuantLib {\n  +\n-    enum VolatilityNature { ShiftedLognormal, Normal };\n\n\"Volatility nature\" sounds weird, but I don't have a better name.\n\"Volatility model\" means something else. \"Volatility type\", maybe?\n\"Volatility model type\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/216/files#r30408879.\n. yes, that's good. I will do it and update the PR.\n\nOn 15 May 2015 at 16:10, Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/processes/blackscholesprocess.hpp\nhttps://github.com/lballabio/quantlib/pull/234#discussion_r30410998:\n\n@@ -87,12 +91,14 @@ namespace QuantLib {\n         Handle blackVolatility_;\n         mutable RelinkableHandle localVolatility_;\n         mutable bool updated_;\n-        mutable boost::shared_ptr localVolCurve_;\n-        mutable boost::shared_ptr localConstantVol_;\n\nInstead of storing these two (which forced you to add public variance\nmethods to the LocalConstantVol and LocalVolCurve classes), what do you\nthink about storing pointers (either shared_ or weak_) to the underlying\nblack volatility instead, and calculate the variance in the evolve method?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/234/files#r30410998.\n. with #295 this can be directly checked with vol_->volatilityType()\n. again with #295 this can be checked with vol_->volatilityType()\n. with #295: the OptionletVolatilityStructure already knows which displacement to apply, so we should take it from there via vol_->displacement()\n. with #295 not necessary, we should remove this inspector again\n. see above, with #295 not necessary, remove this inspector\n. same as above, remove this inspector, see #295 \n. do we need this (doesn't hurt much, but seems redundant ?)\n. Yes, it is indeed good style, if the indirect inclusion via another file is accidental (thereby creating the possibility for an error if the other file is no longer included or the include chain going from there changes, as in #330, where the situation is even more complicated). But it is different in case of inheritance as here (the Black / Bachelier engines clearly have to include PricingEngine). In any case the redundancy is killed via the include guard immediately, so as I said it is not too important.\n. makes sense, I just replicated the previous logic (which was then buggy). I will update the PR.\n. \n",
    "eddelbuettel": "Grr. I missed one 'git checkout' in the process. I reverted that, but the changet still has the \"Merge remote-tracking branch 'upstream-master'\".  Also, I deleted  makeRData.R and have yet to update Makefile.am.  Will do later.\n. Right. It also only says 'four files' affected -- so my 'git reset' worked. I just freaked out as it still listed the action. Oh well.\nYou should be able to apply this without qualms. I'll follow up with another one for more of the examples as well as Makefile.am.\n. It now does the install step too.\n. No sure. Can't recall.  I think I tried to leave this as \"vanilla\" as possible. \nSee also the code used by RQuantLib which I am ever-so-slowly modernising as far as the R / C++ interface is concerned (as Rcpp has come a long way since RQuantLib was first written).\n. Either way is fine. I got the change I needed in the R code; I thought it would make sense over here but if I overlooked something I will surely appreciate a hint from your end :)\n. Maybe \"do both\" by picking one and showing the other as a possible alternate in a comment?  After all, code is documentation :)\n. @lballabio that is a super-annoying example which has blown up a million times for me, and over the years, and with different QL version, I had to put certain parts of the curve in, and out, and others in.  It seems wacky numerically. I never got to the bottom of it.  Maybe in Duesseldorf in December when we have nothing else to talk about :)\nNow: it so happens that @mzivi recently started a cleanup / consolidation of some of the fixed income code in RQuantLib and has already contributed two very nice pull requests [ on top of lot of other work I did in the spring on a lot of the R/C++ interfaces -- Github's RQuantLib is now quite a bit different from what is at CRAN ]. So Michele, when you get a moment, maybe let's play with this example a little.\nLastly, @Beatgodes you clearly complained to the wrong project/repo/...  as this is really an RQuantLib issue.  But it's good to get @lballabio involved either way :)\n. For what it is worth here is the complete example based on current GitHub sources.  Something is probably still amiss as the plot looks borked.  This is a very old example...\n``` R\nR> library(RQuantLib)\nR> example(DiscountCurve)\nDscntCR> savepar <- par(mfrow=c(3,3), mar=c(4,4,2,0.5))\nDscntCR> ## This data is taken from sample code shipped with QuantLib 0.9.7\nDscntCR> ## from the file Examples/Swap/swapvaluation\nDscntCR> params <- list(tradeDate=as.Date('2004-09-20'),\nDscntC+                settleDate=as.Date('2004-09-22'),\nDscntC+                dt=.25,\nDscntC+                interpWhat=\"discount\",\nDscntC+                interpHow=\"loglinear\")\nDscntCR> setEvaluationDate(as.Date(\"2004-11-22\"))\n[1] TRUE\nDscntCR> ## We get numerical issue for the spline interpolation if we add\nDscntCR> ## any on of these three extra futures -- the original example\nDscntCR> ## creates different curves based on different deposit, fra, futures\nDscntCR> ## and swap data\nDscntCR> tsQuotes <- list(d1w = 0.0382,\nDscntC+                  d1m = 0.0372,\nDscntC+                  d3m = 0.0363,\nDscntC+                  d6m = 0.0353,\nDscntC+                  d9m = 0.0348,\nDscntC+                  d1y = 0.0345,\nDscntC+ #                 fut1=96.2875,\nDscntC+ #                 fut2=96.7875,\nDscntC+ #                 fut3=96.9875,\nDscntC+ #                 fut4=96.6875,\nDscntC+ #                 fut5=96.4875,\nDscntC+ #                 fut6=96.3875,\nDscntC+ #                 fut7=96.2875,\nDscntC+ #                 fut8=96.0875,\nDscntC+                  s2y = 0.037125,\nDscntC+                  s3y = 0.0398,\nDscntC+                  s5y = 0.0443,\nDscntC+                  s10y = 0.05165,\nDscntC+                  s15y = 0.055175)\nDscntCR> tsQuotes <- list(\"flat\" = 0.02)        ## While discount curve code is buggy\nDscntCR> times <- seq(0,10,.1)\nDscntCR> # Loglinear interpolation of discount factors\nDscntCR> curves <- DiscountCurve(params, tsQuotes, times)\nDscntCR> plot(curves,setpar=FALSE)\nHit  to see next plot: \nDscntCR> # Linear interpolation of discount factors\nDscntCR> params$interpHow=\"linear\"\nDscntCR> curves <- DiscountCurve(params, tsQuotes, times)\nDscntCR> plot(curves,setpar=FALSE)\nDscntCR> # Spline interpolation of discount factors\nDscntCR> params$interpHow=\"spline\"\nDscntCR> ## NB Commented out for numerical issues under current parameterisation\nDscntCR> #curves <- DiscountCurve(params, tsQuotes, times)\nDscntCR> plot(curves,setpar=FALSE)\nDscntCR> par(savepar)\nR> \n```\n. @lballabio so if I don't overwrite the discount curve with just a flat curve (as above), things still go belly up:\nR\nR> params <- list(tradeDate=as.Date('2004-09-20'),\n+                settleDate=as.Date('2004-09-22'),\n+                dt=.25,\n+                interpWhat=\"discount\",\n+                interpHow=\"loglinear\")\nR> setEvaluationDate(as.Date(\"2004-11-22\"))\n[1] TRUE\nR> tsQuotes <- list(d1w = 0.0382,\n+                  d1m = 0.0372,\n+                  fut1=96.2875,\n+                  fut2=96.7875,\n+                  fut3=96.9875,\n+                  fut4=96.6875,\n+                  fut5=96.4875,\n+                  fut6=96.3875,\n+                  fut7=96.2875,\n+                  fut8=96.0875,\n+                  s2y = 0.037125,\n+                  s3y = 0.0398,\n+                  s5y = 0.0443,\n+                  s10y = 0.05165,\n+                  s15y = 0.055175)\nR> times <- seq(0,10,.1)\nR> discountCurve <- DiscountCurve(params, tsQuotes, times)\nError: 1st iteration: failed at 10th alive instrument, maturity September 22nd, 2006, reference date September 22nd, 2004: root not bracketed: f[0.929837,0.934946] -> [1.205717e-04,2.907284e-03]\nR> setEvaluationDate(as.Date(\"2004-11-20\"))\n[1] TRUE\nR> discountCurve <- DiscountCurve(params, tsQuotes, times)\nError: 1st iteration: failed at 10th alive instrument, maturity September 22nd, 2006, reference date September 22nd, 2004: root not bracketed: f[0.929837,0.934946] -> [1.205717e-04,2.907284e-03]\nR>\nSwitching the date by two days does not seem to matter.\n. Yes, that probably was a typo, but changing it does not matter:\nR\nR> library(RQuantLib)\nR> params <- list(tradeDate=as.Date('2004-09-20'),\n+                settleDate=as.Date('2004-09-22'),\n+                dt=.25,\n+                interpWhat=\"discount\",\n+                interpHow=\"loglinear\")\nR> setEvaluationDate(as.Date(\"2004-09-22\"))\n[1] TRUE\nR> tsQuotes <- list(d1w = 0.0382,\n+                  d1m = 0.0372,\n+                  fut1=96.2875,\n+                  fut2=96.7875,\n+                  fut3=96.9875,\n+                  fut4=96.6875,\n+                  fut5=96.4875,\n+                  fut6=96.3875,\n+                  fut7=96.2875,\n+                  fut8=96.0875,\n+                  s2y = 0.037125,\n+                  s3y = 0.0398,\n+                  s5y = 0.0443,\n+                  s10y = 0.05165,\n+                  s15y = 0.055175)\nR> times <- seq(0,10,.1)\nR> discountCurve <- DiscountCurve(params, tsQuotes, times)\nError: 1st iteration: failed at 10th alive instrument, maturity September 22nd, 2006, reference date September 22nd, 2004: root not bracketed: f[0.929837,0.934946] -> [1.205717e-04,2.907284e-03]\nR> setEvaluationDate(as.Date(\"2004-09-20\"))\n[1] TRUE\nR> discountCurve <- DiscountCurve(params, tsQuotes, times)\nError: 1st iteration: failed at 10th alive instrument, maturity September 22nd, 2006, reference date September 22nd, 2004: root not bracketed: f[0.929837,0.934946] -> [1.205717e-04,2.907284e-03]\nR>\n. However, changing date and removing s2y works:\nR> tsQuotes <- list(d1w = 0.0382,\n+                  d1m = 0.0372,\n+                  fut1=96.2875,\n+                  fut2=96.7875,\n+                  fut3=96.9875,\n+                  fut4=96.6875,\n+                  fut5=96.4875,\n+                  fut6=96.3875,\n+                  fut7=96.2875,\n+                  fut8=96.0875,\n+                  s3y = 0.0398,  # s2y removed here\n+                  s5y = 0.0443,\n+                  s10y = 0.05165,\n+                  s15y = 0.055175)\nR> times <- seq(0,10,.1)\nR> discountCurve <- DiscountCurve(params, tsQuotes, times)\nR> str(discountCurve)\nList of 7\n $ times     : num [1:101] 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 ...\n $ discounts : num [1:101] 1 0.996 0.993 0.989 0.985 ...\n $ forwards  : num [1:101] 0.0376 0.0375 0.0375 0.036 0.034 ...\n $ zerorates : num [1:101] 0.0388 0.0377 0.0376 0.0376 0.0375 ...\n $ flatQuotes: logi FALSE\n $ params    :List of 5\n  ..$ tradeDate : Date[1:1], format: \"2004-09-20\"\n  ..$ settleDate: Date[1:1], format: \"2004-09-22\"\n  ..$ dt        : num 0.25\n  ..$ interpWhat: chr \"discount\"\n  ..$ interpHow : chr \"loglinear\"\n $ table     :'data.frame': 5479 obs. of  2 variables:\n  ..$ date     : Date[1:5479], format: \"2004-09-22\" \"2004-09-23\" \"2004-09-24\" \"2004-09-25\" ...\n  ..$ zeroRates: num [1:5479] 0.0388 0.0388 0.0388 0.0388 0.0388 ...\n - attr(*, \"class\")= chr \"DiscountCurve\"\nR>\nI'll take that as a starting point.  Thanks!\n. Yes. please do.  I just committed a correction in https://github.com/eddelbuettel/rquantlib/commit/eb7dc911afc2c852682720d1292d5fc0e1440da5\nAnd I will not admit in public just how many years this was busted... \n. It helps to be in the source when 'R CMD check' is running so that src/ is pruned.  So I'd say yes -- I should have added it.\n. No, it is not needed. R CMD INSTALL works from 'within' and 'from above'.   But R CMD check works less well from within as it creates ..Rcheck about it then complains.\nFor symmetry you could add it.\n. ",
    "BGC-nglass": "I'm not sure.  They could be logically grouped, but if you renamed the file to actual365, then that could cause confusion as actual365 is actually in actualactual.  I'm happy to defer to your opinion.\n. Thanks\n. ```\n/*\nUK Gilts have an exCouponDate 7 business days before the coupon is due.\nhttp://www.dmo.gov.uk/index.aspx?page=Gilts/Gilt_Faq\nOn the exCouponDate the bond still trades cum-coupon so we use 6 days below\nand UK calendar\nOutput verified with bloomberg:\nISIN: GB0009997999\nIssue Date: February 29th, 1996\nInterest Accrue: February 29th, 1996\nFirst Coupon: June 7th, 1996\nMaturity: June 7th, 2021\ncoupon: 8\nperiod: 6M\nSettlement date: May 29th, 2013\nTest Price : 103\nAccrued : 38021.97802\nNPV : 106.8021978\nYield : 7.495180593\nYield->NPV : 106.8021978\nYield->NPV->Price : 103\nMod duration : 5.676044458\nConvexity : 0.4215314859\nPV 0.01 : 0.0606214023\nSettlement date: May 30th, 2013\nTest Price : 103\nAccrued : -1758.241758\nNPV : 102.8241758\nYield : 7.496183543\nYield->NPV : 102.8241758\nYield->NPV->Price : 103\nMod duration : 5.892816328\nConvexity : 0.4375621862\nPV 0.01 : 0.06059239822\nSettlement date: May 31st, 2013\nTest Price : 103\nAccrued : -1538.461538\nNPV : 102.8461538\nYield : 7.495987492\nYield->NPV : 102.8461539\nYield->NPV->Price : 103\nMod duration : 5.890186028\nConvexity : 0.4372394381\nPV 0.01 : 0.06057829784\n*/\ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \nusing namespace QuantLib;\nint main(int argc, char*argv[]) {\n    Calendar calendar = UnitedKingdom();\nInteger fixingDays = 3;\nNatural settlementDays = 3;\n\nDate settlementDate(29, May, 2013);\n\nDate issueDate(29, February, 1996);\nDate interestAccrue(29, February, 1996);\nDate firstCouponDate(07, June, 1996);\nDate maturityDate(07, June, 2021);\n\nRate coupon = 8.0;\n\nPeriod period = 6*QuantLib::Months;\nPeriod exCouponPeriod = 6 * QuantLib::Days;\n\nCompounding comp = Compounded;\nFrequency freq   = Semiannual;\nDayCounter dc = ActualActual(ActualActual::ISMA);\n\nFixedRateBond bond (settlementDays, 100.0,\n                Schedule(\n                         interestAccrue,\n                         maturityDate, \n                         period,\n                         NullCalendar(),\n                         Unadjusted,\n                         Unadjusted,\n                         DateGeneration::Forward,\n                         true,\n                         firstCouponDate),\n                std::vector<Rate>(1, coupon/100.0),\n                dc,\n                Unadjusted,\n                100.0,\n                issueDate,\n                calendar,\n                exCouponPeriod,\n                calendar);\n\nstd::cout << std::setprecision(10);\n\nstd::cout << \"ISIN: GB0009997999\" << std::endl;\nstd::cout << \"Issue Date: \" << issueDate << std::endl;\nstd::cout << \"Interest Accrue: \" << interestAccrue << std::endl;\nstd::cout << \"First Coupon: \" << firstCouponDate << std::endl;\nstd::cout << \"Maturity: \" << maturityDate << std::endl;\nstd::cout << \"coupon: \" << coupon << std::endl;\nstd::cout << \"period: \" << period << std::endl << std::endl;\n\nfor (int i=0; i<3; i++)\n{\n    std::cout << \"Settlement date: \" << settlementDate << std::endl;\n\n    Real testprice   = 103.00;\n    Real accrued = bond.accruedAmount(settlementDate);\n    Real npv = testprice + accrued;\n\n    const Leg& leg = bond.cashflows();\n\n    Rate yield = CashFlows::yield(leg, npv, dc, comp, freq, false, settlementDate);\n    Time duration = CashFlows::duration(leg, yield, dc, comp, freq, Duration::Modified, false, settlementDate);\n    Real convexity = CashFlows::convexity(leg, yield, dc, comp, freq, false, settlementDate);\n\n    Real calcnpv = CashFlows::npv(leg, yield, dc, comp, freq, false, settlementDate);\n    Real calcprice = calcnpv - accrued;\n\n    std::cout << \"Test Price : \" << testprice << std::endl;\n    std::cout << \"Accrued : \" << accrued * 10000.0 << std::endl;\n    std::cout << \"NPV : \" << npv << std::endl;\n    std::cout << \"Yield : \" << yield * 100.0 << std::endl;\n    std::cout << \"Yield->NPV : \" << calcnpv << std::endl;\n    std::cout << \"Yield->NPV->Price : \" << calcprice << std::endl;\n\n    std::cout << \"Mod duration : \" << duration << std::endl;\n    std::cout << \"Convexity : \" << convexity / 100.0 << std::endl;\n\n    std::cout << \"PV 0.01 : \" << npv * duration / 10000.0 << std::endl << std::endl;\n\n    settlementDate = calendar.advance(settlementDate, 1, Days);\n}\n\n}\n.\n/*\nAustralian Government Bonds have an exCouponDate 7 calendar days before the coupon is due.\nOn the exCouponDate the bond trades ex-coupon so we use 7 days below and NullCalendar.\nAGB accrued interest is rounded to 3dp.\nOutput verified with Bloomberg:\nISIN: AU300TB01208\nIssue Date: June 10th, 2004\nInterest Accrue: February 15th, 2004\nFirst Coupon: August 15th, 2004\nMaturity: February 15th, 2017\ncoupon: 6\nperiod: 6M\nSettlement date: August 7th, 2014\nTest Price : 103\nAccrued : 28670\nNPV : 105.867\nYield : 4.723814867\nYield->NPV : 105.867\nYield->NPV->Price : 103\nMod duration : 2.262763296\nConvexity : 0.0654870275\nPV 0.01 : 0.02395519619\nSettlement date: August 8th, 2014\nTest Price : 103\nAccrued : -1160\nNPV : 102.884\nYield : 4.72354833\nYield->NPV : 102.884\nYield->NPV->Price : 103\nMod duration : 2.325360055\nConvexity : 0.06725307785\nPV 0.01 : 0.02392423439\nSettlement date: August 11th, 2014\nTest Price : 103\nAccrued : -660\nNPV : 102.934\nYield : 4.719277687\nYield->NPV : 102.934\nYield->NPV->Price : 103\nMod duration : 2.317320093\nConvexity : 0.06684074058\nPV 0.01 : 0.02385310264\n*/\ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \ninclude \nusing namespace QuantLib;\nint main(int argc, char*argv[]) {\n    Calendar calendar = Australia();\nInteger fixingDays = 3;\nNatural settlementDays = 3;\n\nDate settlementDate(7, August, 2014);\n\nDate issueDate(10, June, 2004);\nDate interestAccrue(15, February, 2004);\nDate firstCouponDate(15, August, 2004);\nDate maturityDate(15, February, 2017);\n\nRate coupon = 6.0;\n\nPeriod period = 6 * QuantLib::Months;\nPeriod exCouponPeriod = 7 * QuantLib::Days;\n\nCompounding comp = Compounded;\nFrequency freq   = Semiannual;\nDayCounter dc = ActualActual(ActualActual::ISMA);\n\nFixedRateBond bond (settlementDays, 100.0,\n                Schedule(\n                         interestAccrue,\n                         maturityDate, \n                         period,\n                         NullCalendar(),\n                         Unadjusted,\n                         Unadjusted,\n                         DateGeneration::Forward,\n                         true,\n                         firstCouponDate),\n                std::vector<Rate>(1, coupon/100.0),\n                dc,\n                Unadjusted,\n                100.0,\n                issueDate,\n                calendar,\n                exCouponPeriod,\n                NullCalendar());\n\nstd::cout << std::setprecision(10);\n\nstd::cout << \"ISIN: AU300TB01208\" << std::endl;\nstd::cout << \"Issue Date: \" << issueDate << std::endl;\nstd::cout << \"Interest Accrue: \" << interestAccrue << std::endl;\nstd::cout << \"First Coupon: \" << firstCouponDate << std::endl;\nstd::cout << \"Maturity: \" << maturityDate << std::endl;\nstd::cout << \"coupon: \" << coupon << std::endl;\nstd::cout << \"period: \" << period << std::endl << std::endl;\n\nfor (int i=0; i<3; i++)\n{\n    std::cout << \"Settlement date: \" << settlementDate << std::endl;\n\n    Real testprice   = 103.00;\n    Real accrued = QuantLib::ClosestRounding(3)(bond.accruedAmount(settlementDate));\n    Real npv = testprice + accrued;\n\n    const Leg& leg = bond.cashflows();\n\n    Rate yield = CashFlows::yield(leg, npv, dc, comp, freq, false, settlementDate);\n    Time duration = CashFlows::duration(leg, yield, dc, comp, freq, Duration::Modified, false, settlementDate);\n    Real convexity = CashFlows::convexity(leg, yield, dc, comp, freq, false, settlementDate);\n\n    Real calcnpv = CashFlows::npv(leg, yield, dc, comp, freq, false, settlementDate);\n    Real calcprice = calcnpv - accrued;\n\n    std::cout << \"Test Price : \" << testprice << std::endl;\n    std::cout << \"Accrued : \" << accrued * 10000.0 << std::endl;\n    std::cout << \"NPV : \" << npv << std::endl;\n    std::cout << \"Yield : \" << yield * 100.0 << std::endl;\n    std::cout << \"Yield->NPV : \" << calcnpv << std::endl;\n    std::cout << \"Yield->NPV->Price : \" << calcprice << std::endl;\n\n    std::cout << \"Mod duration : \" << duration << std::endl;\n    std::cout << \"Convexity : \" << convexity / 100.0 << std::endl;\n\n    std::cout << \"PV 0.01 : \" << npv * duration / 10000.0 << std::endl << std::endl;\n\n    settlementDate = calendar.advance(settlementDate, 1, Days);\n}\n\n}\n```\n. Yes, all the routines I touched in CashFlows would need to do a cast and the code starts to look messy.  Perhaps a change of name to tradingExDividend (and associated exDividendDate) would make it seem less directly coupon related?\n. ",
    "dev-zero": "Yes, that solves that test failure.\n. ",
    "klausspanderen": "Thanks Peter,  my mistake was that I've tried \nusing StochasticProcess1D::evolve;\n. Thanks Peter for fixing it!\n. Works Luigi, Thanks!\n. I've also added the newest version of the intraday patch including unit tests to this pull request. In addition template metaprogramming is now used to reduce the runtime penalty. Under Linux/clang++ there is almost no performance penalty when running the whole test suite.\nIn order to separate concerns this pull request skips the new timeFraction method as there is an another discussion ongoing.\n. Hi Nando\nthanks for looking after the code. I was going to write a short note about the broken unit test while you have already fixed it.\nKlaus\n. w.r.t. the first problem with QL-1.6.1: The interface of the class Observer has changed from version 1.5 to 1.6. In particular the method \nvoid registerWithObservables(const boost::shared_ptr&);\nwas added. Even though the implementation is straight forward (more or less copy the original implementation plus a mutex lock around the body of the method) I haven't yet had the time to release a version 1.6 of the patch. If you need 1.6 then please just add the method to the patched version.\nw.r.t. the second problem: As Luigi mentioned depending on your boost version you'll have to add libboost_system and libboost_thread to your linked libraries.\n. No.\nOn Tuesday, September 08, 2015 11:05:55 PM vinaydwivedi wrote:\n\nQuick question:\nDo I need to rebuild Boost after updating to #if\ndefined(BOOST_SP_ENABLE_DEBUG_HOOKS_2)?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/issues/306#issuecomment-138795275\n. Easiest way might be to add these libraries to the auto_link section in test-suite/quantlibtestsuite.cpp, line 30ff should become\n\n``` c++\nifdef BOOST_MSVC\ninclude \ndefine BOOST_LIB_NAME boost_unit_test_framework\ninclude \nundef BOOST_LIB_NAME\ndefine BOOST_LIB_NAME boost_thread\ninclude \nundef BOOST_LIB_NAME\ndefine BOOST_LIB_NAME boost_system\ninclude \nundef BOOST_LIB_NAME\n```\nThe first five lines are unchanged w.r.t. the original version of the file. Thanks for highlighting this issue. I'm going to add the modified quantlibtestsuite.cpp file to the patch,\n. A new version of the patch for QuantLib 1.6.2 is available: http://hpc-quantlib.de/src/observer-1.6.2.zip. The new version requires boost version 1.58 or higher. This boost version allows for a much cleaner implementation without having to change boost itself and without preprocessor defines like BOOST_SP_ENABLE_DEBUG_HOOKS. Actually most files are touched in order to link boost_thread and boost_system to all libs and .exe. Please find a short description here https://hpcquantlib.wordpress.com/2015/09/20/quantlib-1-6-2-multithreading-patch-for-jvm-net/\nLuigi, this version doesn't need ugly workarounds anymore, so maybe we should consider adding it to QL with conditional preprocessor defines?\n. Peter, could it be that this version was the starting point of a discussion last summer and we have then created the new class FdmTimeDepDirichletBoundary, which covers the new functionality and have left the old class untouched?\nI think the reason for creating a new class instead of extending the existing one fits to Luigi's arguments. If a remeber correctly we've finally reverted the change \nvoid applyBeforeSolving(operator_type&, array_type&) const {}\nbecause this one shows a better convergence for dt->0 for barrier options.\n. you are right, the code doesn't look any better, but this is the error message I'm getting with the current version. Do you have a better idea?\nIn file included from vpp.cpp:37:\n../ql/experimental/processes/gemanroncoroniprocess.hpp:63:14: warning: \n      'QuantLib::GemanRoncoroniProcess::evolve' hides overloaded virtual function [-Woverloaded-virtual]\n        Real evolve(Time t0, Real x0, Time dt, Real dw, const Array& du) const;\n             ^\n../ql/stochasticprocess.hpp:240:27: note: hidden overloaded virtual function\n      'QuantLib::StochasticProcess1D::evolve' declared here\n        Disposable evolve(Time t0, const Array& x0,\n. fixedSum is not used in the class and having such a variable in the signature might give a wrong impression.\n. Hi Luigi,\nI've tried this already and it doesn't work with clang++ because the evolve method inherited from StochasticProcess is private\n. The parameter fixedSum is pretty much useless here (don't know how it got here in the first place), the pricing engine uses pastFixings to calculate the fixedSum and the pricing engine takes care of it.\n. Hi Peter, Luigi\nwith clang++ the line \"using StochasticProcess::evolve;\" does not work. I'm getting the following error message\n../ql/experimental/processes/gemanroncoroniprocess.hpp:63:37: error: 'evolve' is a private member of\n      'QuantLib::StochasticProcess1D'\n        using  StochasticProcess1D::evolve;\nPeter, the method StochasticProcess1D::evolve(...)  in line 240 of stochasticprocess.hpp is private, therefore IMO we can't overwrite evolve in the derived class.\nWhat works for me is the following #pragma directive \nifdef clang\npragma clang diagnostic ignored \"-Woverloaded-virtual\"\nendif\nI've checked the code in. Shall we use this approach?\n. I didn't want to include the boost header already in normaldistribution.hpp \nbecause a lot of cpp files include this header file and I wanted to minimize \ncompile time.\nThe implementation w/o the pimpl idiom is much simpler. What do you think, \ndoes leaner code overvalue compile time issues in this example. Or is there a \nbetter way to implement the pipml idiom?\n. thanks for the hint, I'm going to change the code accordingly when I'm back \nfrom vacation.\n. I've changed the implementation accordingly\n. To many different functions called \"calculate\" in the class hierachy. IMO it is \nin general not a good style to override a virtual method with different \nsignatures. clang++ generates warnings like \".. hides overloaded virtual \nfunction\". I Guess because base and engine in FDEngineAapter had defined\nvirtual void calculate(PricingEngine::results*) const;\nor \nvirtual void calculate() const;\nOn Tuesday, January 07, 2014 09:40:30 AM Luigi Ballabio wrote:\nIn QuantLib/ql/pricingengines/vanilla/fdbermudanengine.hpp:\n\n@@ -46,7 +46,7 @@\n                                       gridPoints, timeDependent) {}\n         void calculate() const {\n             this->setupArguments(&arguments_);\n-            FDMultiPeriodEngine::calculate(&results_);\n-            FDMultiPeriodEngine::doCalc(&results_);\n  What was the problem here? \n  \u2014\n  Reply to this email directly or view it on GitHub.\n. Luigi, thanks for the hint. I have changed the default behaviour accordingly.\n. \n",
    "maksqwe": "I went to travel. I'll be home in a week. Then I can rebase or reset my fork when your changes will be accepted.\n. ",
    "simonshakeshaft": "Ok thanks.  Will try to give it a check this evening.\nSent using BlackBerry\u00ae from Orange\n-----Original Message-----\nFrom: Luigi Ballabio notifications@github.com\nDate: Thu, 24 Oct 2013 01:21:11 \nTo: lballabio/quantlibquantlib@noreply.github.com\nReply-To: lballabio/quantlib reply@reply.github.com\nCc: simonshakeshaftsimon.shakeshaft@estrategy-solutions.com\nSubject: Re: [quantlib] C++/CLI wrappers and local static variables in\n Quantlib (#41)\nOk, I'm about to push it.  I've left singleton.hpp as just a header file for compatibility (if someone had inherited from Singleton, moving its implementation to a cpp would break the build) and I have added an #ifdef to switch to your CLR-safe version if needed. Please check that the version now on the master branch works for you.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/41#issuecomment-26974213\n. Hi Luigi,\nAll seems fine.\nCheers\nSimon\nSent using BlackBerry\u00ae from Orange\n-----Original Message-----\nFrom: Luigi Ballabio notifications@github.com\nDate: Thu, 24 Oct 2013 01:21:11 \nTo: lballabio/quantlibquantlib@noreply.github.com\nReply-To: lballabio/quantlib reply@reply.github.com\nCc: simonshakeshaftsimon.shakeshaft@estrategy-solutions.com\nSubject: Re: [quantlib] C++/CLI wrappers and local static variables in\n Quantlib (#41)\nOk, I'm about to push it.  I've left singleton.hpp as just a header file for compatibility (if someone had inherited from Singleton, moving its implementation to a cpp would break the build) and I have added an #ifdef to switch to your CLR-safe version if needed. Please check that the version now on the master branch works for you.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/41#issuecomment-26974213\n. Hi Luigi,\nSorry for the delayed response...\nAs you note the calendar classes did not give a problem when wrapped, so following on from that I have moved the implementation into cpp files for the currency classes and tested against test cases I had, which previously failed.\nThat all seems ok and I'm just tidying up and testing against the existing QuantLib test suite.\nAdditionally I've moved the templated Singleton instance() method to a cpp file and then explicitly instantiated the various Singleton specializations so they can be linked. \nThe disadvantage of this is obviously the explicit instantiations that need to be maintained in the cpp file.  On the other hand the dependency issues when making changes to the Singleton implementation go away (and these were pretty extensive!).  Also I am more happy that this retains the initialisation on first use idiom for static variables, which I think is to be preferred.\nWhen I'm happy with what I have I'll update my repo and send another pull request across.\nCheers\nSimon\nSent using BlackBerry\u00ae from Orange\n-----Original Message-----\nFrom: Luigi Ballabio notifications@github.com\nDate: Thu, 10 Oct 2013 06:39:46 \nTo: lballabio/quantlibquantlib@noreply.github.com\nReply-To: lballabio/quantlib reply@reply.github.com\nCc: simonshakeshaftsimon.shakeshaft@estrategy-solutions.com\nSubject: Re: [quantlib] C++/CLI wrappers and local static variables in\n Quantlib (#41)\n\n\nRounding(),\n\"%3% %1$.2f\");\n  +\nCurrency::Data USDCurrency::usdData_(\"U.S. dollar\", \"USD\", 840,\n\"$\", \"\\xA2\", 100,\nRounding(),\n\"%3% %1$.2f\");\n  +\nCurrency::Data VEBCurrency::vebData_(\"Venezuelan bolivar\", \"VEB\", 862,\n\"Bs\", \"\", 100,\nRounding(),\n\"%3% %1$.2f\");\n  +\nARSCurrency::ARSCurrency() {\ndata_ = boost::shared_ptrCurrency::Data(&arsData_, null_deleter());\n}\n\n\nInstead of using static data, would the CLI compilation work if we just moved the existing constructors to a .cpp file?  The exact same idiom doesn't seem to cause problems in the calendar classes, which also use static variables in constructors.  If this worked, we could unify the CLI and non-CLI implementations for currencies.\n(The singleton would still need the change, since it's a template and can't go in a .cpp file.)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/41/files#r6886553\n. ",
    "joequant": "Hi,\nI've fixed the issues that you mentioned, and made openmp non-default.\n. I've had to put it in on my linux64 box with g++ 4.8.2\n. Converting a day based interest rate into a year based one, won't work because the conversion would be different for leap years.  You can't do bitcoin calculations in years at all.\nLet me check to see if there is a way of adding type information so that you don't end up with a conflict.\n. It looks like it was just legacy code that was there at one point.  It's really not necessary.\n. #/usr/bin/python\nfrom QuantLib import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nsampled_curve = SampledCurve()\nsampled_curve.setGrid([1,2])\nsampled_curve.setValues([1,2])\nthis works\nplt.plot(sampled_curve.grid(), list(sampled_curve.values()))\nthis doesn't\nplt.plot(sampled_curve.grid(), sampled_curve.values())\n. ",
    "piterdias": "Just checked and it is all good. Thanks a lot for accepting it.\n. ",
    "japari": "Just in case anyone makes the relevant question: Yes, Boost has a T random number generator but the algorithm there generates first a normal and a chi-squared and then combines the values to generate a T. This generates the T directly.\n. I have included part of the optimizations pending and it seems to do the trick. If that speed up is not enough one can then be agressive on the tolerance or remove again the T-test of the Hull-White paper. The bucket loss models still need to intgrate with the LM machinery but I'll do that when I (or anyone else) turn them to multifactor models (they are 1f only today ). \nBest\n. This is correct. Peter and I have been working on this particular point and others, can you check whats done in branch pcaspers/CDS ? You also have this is my CMCDS branch but thats mixed with other things. Since you are familiar with CDS, would you like to join our efforts to match the ISDA engine to the femtobasispoint? ('you' I mean Cathie Jin, which I am not sure is getting this feed)\n. Alternatively I can just pick the modif for this problem and set up a PR, Peter will be reading this so he can give his opinion too. \nYes, I am trying to figure out which email I sent to sourceforge to use pwd recovery.......brave world.\n. Yes, we might just as well finish this off and fix this issue with it. We were testing the paper results right?\n. Maybe I lost grip of it by now so apologies if I didnt understand, but if I enter today=25/Sept/2014 I get dates:\n22-Sep-14\n22-Dec-14\n20-Mar-15\n22-Jun-15\n21-Sep-15\n21-Dec-15\n21-Mar-16\n20-Jun-16\n20-Sep-16\nIsnt that what your expecting? (not talking about the last date)\n. No, thats the case above. Maybe I have modified something in the past and didnt add it to the lib (which would be a bit unsocial) but I am getting this from a codebase pretty similat to Luigis current master. From excel. Let me cook a two line example to agree on.\n. ok puzzled now I am. Cant see why your not getting the same. Can you pls try this code:\n```\nDate todaysDate(25, September, 2014);\nSettings::instance().evaluationDate() = todaysDate;\nDate termDate = TARGET().adjust(todaysDate+Period(2*Years), Following);\nSchedule cdsSchedule =\n    MakeSchedule().from(todaysDate).to(termDate)\n                  .withFrequency(Quarterly)\n                  .withCalendar(WeekendsOnly())\n                  .withConvention(ModifiedFollowing)\n                  .withTerminationDateConvention(ModifiedFollowing)\n                  .withRule(DateGeneration::CDS);\nstd::copy(cdsSchedule.begin(), cdsSchedule.end(),\n    std::ostream_iterator(cout, \"\\n\"));\n```\nmy output:\nSeptember 22nd, 2014\nDecember 22nd, 2014\nMarch 20th, 2015\nJune 22nd, 2015\nSeptember 21st, 2015\nDecember 21st, 2015\nMarch 21st, 2016\nJune 20th, 2016\nSeptember 20th, 2016\nDecember 20th, 2016\n. solved then. I have the same problem with my cds repo; its mixed with other things. We need something clean for the PR\n. This could be nice; also some ide linux tools use cmake files to import projects.\nI did not have the time to really try this thoroughly but if you are interested there this project. You might follow on from where it is:\nhttps://github.com/jppm/QuantLib-cmake\nBest\n----- Original Message -----\n\nI'd keep distributing the projects and Makefiles so that the releases\ncan be built without additional tools, but I'd be happy to add CMake\nas another possibility.\n\u2014\nReply to this email directly or view it on GitHub .\n. OK, sorry its the samples' exec that gets pushed no matter what I say in .gitignore\nSince its there now I'll close this one and move the code to the new repo.\nBest\n\n----- Original Message -----\n\n@japari , I was trying to migrate this PR to the new repo but I\nnoticed that a binary file slipped in some commit. May you recreate\nthe PR without it? (Possibly against\nhttps://github.com/lballabio/QuantLib , but against this repo would\nwork too.)\n\u2014\nReply to this email directly or view it on GitHub .\n. \n",
    "fametrano": "fine with me!\nand it seems to me that Peter could easily replace me as new resident volatility expert :-)\n. I did enforce telescopic property for the not-fixed-yet part of OvernightIndexedCouponPricer, so for every coupon the non-fixed-yet (forward) part is evaluated using just 2 discount factors.\nThis should make forward OIS coupons computationally equivalent to Ibor (par) coupons.\nDo you have a contrasting evidence?\nWhat is exactly your improvement? It probably consists into avoiding multiple coupons altogether, e.g. for a 3months old 50y OIS you can avoid the last 49 coupons, using 2 discount factors for the whole forward part spanning multiple coupons.\nAnyway this would disrupt cashflow analyisis, and that was my main motivation into avoiding this further optimization.\nI agree that moving from 100 discount to 2 discounts for a 50Y OIS can be such a significant improvement to give up cashflow analysis, and I'm all for it, but I couldn't figure out quickly how do you achieve that. I thought the easiest way would have been to massage the schedule to have just one coupon spanning the whole forward part. Am I missing something?\nWhat are the crucial lines I should look at?\nthank you very much for the contribution: speeding up bootstrapping is a major plus. \n. two more observations:\n1) we do need a unit test to ensure that the OIS evaluation is coherent with or without telescopic optimization, both for a completely forward OIS than a partially seasoned OIS (few fixings are enough...). And also for spread = 0.0 and != 0.0\n2) in case of non null spread on the floating leg the telescopic feature should probably be disabled. The market practice for the spread is to be added to the compounded coupon/period rate, so periods cannot be telescopically bundled together\n. Luigi I agee but I would hate to stop Peter, and I am consider retracing\nback my steps.\nIf we go for a some composite index is there a clear idea how to manage its\nfixings?\nThere should be two policies: all indexes' fixings are needed or use just\nwhat you have. would it be derived from InterestRateIndex or Index?\nOn Fri, Apr 18, 2014 at 10:51 AM, Luigi Ballabio\nnotifications@github.comwrote:\n\nHi Peter,\nI think we should generalize FloatingLeg to accomodate these cases. The\nidea could be that, instead of passing the index and the coupon type and\ninstantiating coupons inside FloatingLeg as we do now, we should pass an\ninstance of some kind of factory that will create the coupons when passed\ndates, notional and whatnot. The index, or the two indexes, would be stored\ninside the factory instance and no longer part of the interface.\nI'm not sure how much to extract from the function and into the factory.\nThe switch between base coupon and capped coupon, for instance, could go\nthere, but then it would have to be repeated inside each factory. With\nluck, we might have a few modular pieces...\nHope this helps.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88#issuecomment-40795967\n.\n. can we have both\nstd::vector >\nand\nstd::vector >\n?\n\nthe first one should be deprecated and just call the second one not\ndeprecated. Am I missing something?\nOn Thu, Apr 17, 2014 at 1:37 PM, Luigi Ballabio notifications@github.comwrote:\n\nThanks for the contribution.\nI've merged the commits, except for the one that replaced types such as\nstd::vector >\nwith\nstd::vector >\nIt's a change I'd very much like to do (and I suspect it accounted for a\nfair share of the time you gained in the test-suite run) but it modifies\nthe types in a public interface and thus it can break client code. I'll\napply it if we decide to drop backward compatibility in some future version\nof the library.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40705111\n.\n. ok, it was so obvious that I should have realize I was missing something...\nbig!\n\nplease don't tell around I much I goofed ;-)\nOn Fri, Apr 18, 2014 at 7:56 PM, masrtis notifications@github.com wrote:\n\nIt's not possible to overload on return type only in C++.\nIt's possible, but I'm not certain, that automatic return type deduction\nin\nC++11/14 would allow use of auto in this situation so it wouldn't be\nnecessary to specify the return type at all.\nOn Fri, Apr 18, 2014 at 10:35 AM, Ferdinando M. Ametrano \nnotifications@github.com wrote:\n\ncan we have both\nstd::vector >\nand\nstd::vector >\n?\nthe first one should be deprecated and just call the second one not\ndeprecated. Am I missing something?\nOn Thu, Apr 17, 2014 at 1:37 PM, Luigi Ballabio \nnotifications@github.comwrote:\n\nThanks for the contribution.\nI've merged the commits, except for the one that replaced types such\nas\nstd::vector >\nwith\nstd::vector >\nIt's a change I'd very much like to do (and I suspect it accounted for\na\nfair share of the time you gained in the test-suite run) but it\nmodifies\nthe types in a public interface and thus it can break client code.\nI'll\napply it if we decide to drop backward compatibility in some future\nversion\nof the library.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40705111>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40827576>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40829328\n.\n. It is not clear to me what does mean to use clean prices...\nOn May 26, 2014 2:47 PM, \"Luigi Ballabio\" notifications@github.com wrote:\nYes, I'm ok.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/98#issuecomment-44185942\n.\n. not sure this is a problem anymore, as far as I know QLXL now bootstrap\nwith no problem on holidays\ni might be missing something...\n\ntel:+393358470410\ntwitter.com/Ferdinando1970\nfacebook.com/ferdinando.ametrano\nhttps://www.facebook.com/ferdinando.ametrano\ngoogle.com/+FerdinandoMAmetrano\nhttps://www.google.com/+FerdinandoMAmetrano\nlinkedin.com/in/ferdinandoametrano\nhttps://it.linkedin.com/in/ferdinandoametrano\nreddit.com/user/Nando1970/ http://www.reddit.com/user/Nando1970/\nOn Tue, Jul 29, 2014 at 6:27 PM, Peter Caspers notifications@github.com\nwrote:\n\nto modify the calendar such that the evaluation date is always a business\ndate (and leave everything else as it is)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/117#issuecomment-50500994.\n. qlRateHelperSelection filters out all ratehelpers which are expired for the\nsake of bootstrapping. deposits happen to be discarded when they are fixed.\n\nI'm going to make a pull request which I've been sitting on for a long time\nand it might also solve the deposit issue\ntel:+393358470410\ntwitter.com/Ferdinando1970\nfacebook.com/ferdinando.ametrano\nhttps://www.facebook.com/ferdinando.ametrano\ngoogle.com/+FerdinandoMAmetrano\nhttps://www.google.com/+FerdinandoMAmetrano\nlinkedin.com/in/ferdinandoametrano\nhttps://it.linkedin.com/in/ferdinandoametrano\nreddit.com/user/Nando1970/ http://www.reddit.com/user/Nando1970/\nOn Wed, Jul 30, 2014 at 10:23 AM, Luigi Ballabio notifications@github.com\nwrote:\n\n@fametrano https://github.com/fametrano, as far as I can see, in QLXL\nyou're filtering the deposits out if their fixing date is in the past: see\nthe qlRateHelperSelection function in QuantLibAddin/qlo/ratehelpers.cpp,\nline 444.\n(By the way, is this your intended behavior? You're using a\ndepo-futures-swap curve on business days and a futures-swap curve on\nholidays?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/117#issuecomment-50587113.\n. +1\nI cannot help right now but would love to use the ISDA engine in\nQuantLib(XL)\n\nOn Sat, Oct 4, 2014 at 6:00 PM, Peter Caspers notifications@github.com\nwrote:\n\nyes, we were in the middle of testing. I will try to check against BBG und\nMurex next week. The full coupon and the additional day should already\nwork\nthough.\nOn 4 October 2014 13:51, Pepe notifications@github.com wrote:\n\nYes, we might just as well finish this off and fix this issue with it.\nWe\nwere testing the paper results right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-57902538.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/143#issuecomment-57909814.\n. 1) accrualPeriod_ in Coupon could be initialized at construction time, avoiding to declare it mutable\n2) boost::shared_ptr cp = boost::dynamic_pointer_cast(leg[i]); should be inside the if avoiding the pointer cast if the cashflow has occurred.\n\nI had other optimizations about occured cashflows that I might have forgot to share: I will shortly \n. I have no problem in changing the hpp in \n        Time accrualPeriod() const { return accrualPeriod_; }\n         ....\n      protected:\n         ....\n        Time accrualPeriod_;\nthen compiling\n        accrualPeriod_ = dayCounter().yearFraction(accrualStartDate_,\n                                                   accrualEndDate_,\n                                                   refPeriodStart_,\n                                                   refPeriodEnd_)\n;\ninside the Coupon constructor\n. I would keep an explicit comment about negative convexity being allowed,\nwhich could also save the Hamlet quote :-)\nOn Sat, Apr 11, 2015 at 9:14 AM, Luigi Ballabio notifications@github.com\nwrote:\n\nIf you want to remove the check, please remove it, don't comment it out.\nThe previous version is in the repo anyway.\nSorry for the Hamlet quote [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-91782103.\n. Convexity being calculated as sigma^2*T, it must be positive.\n\nBut convexity, as FRA/futures adjustment, has been used in the past to take\ninto account futures margining vs FRA being uncollateralized OTC. Nowadays\nFRAs are margined too, and their margining could be heavier than futures\none, inverting the sign of the adjustment.\nIn order to fit this new scenario in the current quote framework the most\neffective approach is to allow adjustment to go negative if needed.\nPlease note I'm not stating that the FRA/futures adjustment is currently\nnegative, but in sub-par parametrizations and systems this might be the case\nOn Mon, Apr 13, 2015 at 12:28 PM, Peter Caspers notifications@github.com\nwrote:\n\nhopefully this question is not too ridiculous, but does that only happen\nfor certain models and/or the underlying forward rate being negative ? Is\nthe \"usual\" Hull adjustment formula wrong for a negative forward ?\nOn 13 April 2015 at 11:49, Luigi Ballabio notifications@github.com\nwrote:\n\nIt would be a comment about code that is not there, but it's ok for me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-92295566.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/221#issuecomment-92302527.\n. @lballabio: if you merge this you will partially merge also Peter's request #216 \n@pcaspers: pulling from this branch would be equivalent to pulling from @lballabio's master and updating your request #216 (including of course my changes to CalibratedModel)\n. it now includes also #246 which slipped in... no big issue I hope as #246 is a very basic fix \n. fine with me!\n\nOn Fri, May 22, 2015 at 11:59 AM, Luigi Ballabio notifications@github.com\nwrote:\n\nOk, how about this: for now, I put in @pcaspers\nhttps://github.com/pcaspers's #216\nhttps://github.com/lballabio/quantlib/pull/216, but without\nCalibrationHelperBase and AdjustedHelper, and I get out 1.6 quickly.\nThen we them get back in, and I also give you free rein to really break\nCalibrationHelper: that is, we rename it to something more specific,\nrename CalibrationHelperBase to CalibrationHelper, and make your changes.\nBut we take a bit more time to do it so we get the names right.\nWhat do you say?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/237#issuecomment-104604733.\n. you're welcome\n\nOn Thu, May 21, 2015 at 6:46 PM, Klaus Spanderen notifications@github.com\nwrote:\n\nHi Nando\nthanks for looking after the code. I was going to write a short note about\nthe broken unit test while you have already fixed it.\nKlaus\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/246#issuecomment-104350884.\n. Maddalena please add your copyright notice to /ql/termstructures/yield/ratehelpers.cpp and /ql/termstructures/yield/ratehelpers.hpp\n. Luigi: this would get your master in synch with Eric's master and mine, with no QuantLib C++ code involved.\n. thank you Peter for the observations. Paolo and I were already planning to tackle swaps, but your point about being able to choose the pillar policy in Murex prompted us to make that available in QuantLib too.\n\nSome implementation details are convoluted because of Luigi's obnoxious backward compatibility requirements ;-), anyway the only real unsatisfactory detail is in InterpolatedXxxCurve. The maxDate method had to be patched (with a generic +7D) for the sake of repricing the longest swap when its pillar is the maturity date and QL_USE_INDEXED_COUPON is defined. This should not be needed as maxDate is actually calculated during the iterative bootstrap.\nIt goes without saying... any suggestion about the above problem or the general proposed pillar policy is welcome\n. for what is worth I also agree that a coupon with two indexes is better.\nthere are no official (ISDA) fixings of the spread as far as I know, so\nthis suggests to avoid creating a non-existent index\nOn Wed, Apr 9, 2014 at 1:41 PM, Luigi Ballabio notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp:\n\n\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. /\n  +\n  +/! \\file swapspreadindex.hpp\n\\brief swap-rate spread indexes\n  +*/\n  +\n  +#ifndef quantlib_swapspreadindex_hpp\n  +#define quantlib_swapspreadindex_hpp\n  +\n  +#include \n  +\n  +namespace QuantLib {\n  +\n//! class for swap-rate spread indexes\nclass SwapSpreadIndex : public virtual InterestRateIndex {\n\n\nI see. Yes, the concept is appealing. I'd wait for a use case to modify\nIndex, though, so I'd go for the two swap indexes at this time. What do\nyou think?\n\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88/files#r11431644\n.\n. Peter,\n\nI'll leave the final decision to Luigi, but considering you impressive\ntrack record I am afraid I might be losing something here.\nWhy do you think \"derived index\" might be better?\nIn my book an index is something that has a public fixing from some\nrecognized institution, as such a cms-spread is not an index.\nIn a term sheet you always state the spread as difference between two real\nindexes, you do not refer to the 2Y/10Y-spread\nciao -- Nando\nOn Wed, Apr 9, 2014 at 6:52 PM, Peter Caspers notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp:\n\n\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. /\n  +\n  +/! \\file swapspreadindex.hpp\n\\brief swap-rate spread indexes\n  +*/\n  +\n  +#ifndef quantlib_swapspreadindex_hpp\n  +#define quantlib_swapspreadindex_hpp\n  +\n  +#include \n  +\n  +namespace QuantLib {\n  +\n//! class for swap-rate spread indexes\nclass SwapSpreadIndex : public virtual InterestRateIndex {\n\n\nyes, true. Can I try to introduce the more general notion of a \"derived\nindex\" though (from which the cms spread index would then inherit),\nhopefully cleaner ? Then, if you still don't like it I'll revert the whole\nthing back to the two index solution.\n... <#1454767706537443_>\nOn 9 April 2014 16:23, Ferdinando M. Ametrano notifications@github.comwrote:\n\nIn QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > > > + WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY > > + or\nFITNESS FOR A PARTICULAR PURPOSE. See the license for more details. */ > >\n- > > +/_! \\file swapspreadindex.hpp > > + \\brief swap-rate spread indexes\n\n+/ > > + > > +#ifndef quantlib_swapspreadindex_hpp > > +#define\n  quantlib_swapspreadindex_hpp > > + > > +#include \n+ > > +namespace QuantLib { > > + > > + //! class for swap-rate spread\n  indexes > > + class SwapSpreadIndex : public virtual InterestRateIndex { >\n  for what is worth I also agree that a coupon with two indexes is better.\n  there are no official (ISDA) fixings of the spread as far as I know, so >\n  this suggests to avoid creating a non-existent index > ...\n  <#14546df6528f5d57> > On Wed, Apr 9, 2014 at 1:41 PM, Luigi Ballabio <\n  notifications@github.com>wrote: In\n  QuantLib/ql/experimental/coupons/swapspreadindex.hpp: > + WITHOUT ANY\n  WARRANTY; without even the implied warranty of MERCHANTABILITY > + or\n  FITNESS FOR A PARTICULAR PURPOSE. See the license for more details. / > +\n  +/! \\file swapspreadindex.hpp > + \\brief swap-rate spread indexes > +*/\n- > +#ifndef quantlib_swapspreadindex_hpp > +#define\n  quantlib_swapspreadindex_hpp > + > +#include  > +\n  +namespace QuantLib { > + > + //! class for swap-rate spread indexes > +\n  class SwapSpreadIndex : public virtual InterestRateIndex { I see. Yes, the\n  concept is appealing. I'd wait for a use case to modify Index, though, so\n  I'd go for the two swap indexes at this time. What do you think? -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11431644> . -- Reply\n  to this email directly or view it on GitHub<\n  https://github.com/lballabio/quantlib/pull/88/files#r11437655> .\n\n\n\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/88/files#r11445484\n.\n. would it be problematic to just add\n\nCopyright (C) 2014 Francois Botha\n?\nOn Thu, Oct 16, 2014 at 12:02 PM, Luigi Ballabio notifications@github.com\nwrote:\n\nIn\nQuantLib/ql/pricingengines/lookback/analyticcontinuouspartialfixedlookback.cpp:\n\n@@ -0,0 +1,165 @@\n+/* -- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -- /\n+\n+/\n- Copyright (C) 2006 Warren Chou\n- Copyright (C) 2007 StatPro Italia srl\n\nOk then, I'll leave the original attribution.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/125/files#r18947015.\n. you should, and adding copyright is not preventing copying. It actually\npreserve the right as the copyright holder is releasing the code under a\nfree software license that grants freedom to copy, modify and redistribute\n\nOn Thu, Oct 16, 2014 at 12:21 PM, Francois Botha notifications@github.com\nwrote:\n\nIn\nQuantLib/ql/pricingengines/lookback/analyticcontinuouspartialfixedlookback.cpp:\n\n@@ -0,0 +1,165 @@\n+/* -- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -- /\n+\n+/\n- Copyright (C) 2006 Warren Chou\n- Copyright (C) 2007 StatPro Italia srl\n\nNo, no problem. I just don't want to create the impression that I'm trying\nto prevent copying. I'll add it if you guys think I should.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/125/files#r18947691.\n. I vote for {Normal, ShiftedLogNormal}\n\nShiftedLogNormal conveys the notion that negative rates can be handled, and\nif you set the shift=0 then you have the standard lognormal model.\nUsing just LogNormal would leave the user wondering about negative rates\nOn Wed, Mar 25, 2015 at 5:59 AM, Michael von den Driesch \nnotifications@github.com wrote:\n\nIn QuantLib/ql/termstructures/volatility/optionlet/optionletstripper.hpp\nhttps://github.com/lballabio/quantlib/pull/167#discussion_r27095157:\n\n@@ -40,6 +40,7 @@ namespace QuantLib {\n       public:\n         //! \\name StrippedOptionletBase interface\n         //@{\n-        enum Model{Normal, ShiftedLognormal};\n\nI can make the change with regards to the \"case naming\". But just to be\nsure we have no misunderstanding ...\nNormal Case\n[image: equation]\nhttps://camo.githubusercontent.com/9fc010d56cc0e0b0638a7f2e3603b6a086b26d15/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f64462533442535437369676d612532306457\nShifted LogNormal Case\n[image: equation]\nhttps://camo.githubusercontent.com/bf165397780cb0237c1e6fe1c50eded7f957797a/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f64253238462532302b253230612532392533446446253344253238462b612532392535437369676d612532306457\nwhere a is the shift (i.e. displacement within the constructor). So\nthere is no shift in the normal case whereas the shifted LogNormal case\ncontains the usual LogNormal case with a=0 as a special case. This has\nbeen the reason for my naming convention.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/167/files#r27095157.\n. imo this is more a bug fix than a backward compatibility change (along with making CalibratedModel constructor private). We should just document in the new release the breaking fixes, as even boost does...\n. argh... hard to live with a nonsensical shortRateEndCriteria_, especially when there is a dedicated inspector such as\nEndCriteria::Type endCriteria() const;\n\nIf we document the breaking changes to CalibrationHelpers and CalibratedModel this could go with them, otherwise I agree we could go back to shortRateEndCriteria_ :-(\n. thx, shame on me\n. just to better fit into 80 colums.\nI'm just changing this to helpers and h instead, to convey more meaning (and even... drum rolls... to helpers_, but just for the cpp only CalibrationFunction inner class :-) )\n. I would vote for type too, not nature.\nOn Fri, May 15, 2015 at 4:11 PM, Luigi Ballabio notifications@github.com\nwrote:\n\nIn QuantLib/ql/termstructures/volatility/volatilitynature.hpp\nhttps://github.com/lballabio/quantlib/pull/216#discussion_r30411109:\n\n+\n- This program is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n- FOR A PARTICULAR PURPOSE.  See the license for more details.\n  +/\n  +\n  +/! \\file volatilitynature.hpp\n-    \\brief volatility nature descriptions\n  +*/\n  +\n  +#ifndef quantlib_volatility_nature_hpp\n  +#define quantlib_volatility_nature_hpp\n  +\n  +namespace QuantLib {\n  +\n-    enum VolatilityNature { ShiftedLognormal, Normal };\n\nOh, I didn't know that [image: :smile:]\nIf it's an established name it's ok, then.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/216/files#r30411109.\n. \n",
    "pmazzocchi": "Hi Peter,\nI'm testing your modifications, but I don't understand some things. \nFor example, what is the meaning of lines 134-152 in Overnightindexcoupon? In particular I can not really understand the meaning of this line:\nDate tmpEndDate = telescopicValueDates ? std::min( std::max(evalDate, startDate) + 7 , endDate) : endDate;\nI export  \"TelescopicDates\" field in the function \"MakeOIS\" in Excel and I analyze the difference in the swapLegAnalysis between using TRUE or FALSE. \nI would expect that using \"TelescopicDates\", the flow analysis would have failed, instead it seems that in both scenarios it construct all the coupons flows.\nI obtain the same flow analysis, except for the fixing dates.\nFor example for an OIS with start date 19 november 2014 and tenor 2Y I obtain:\n- without TelescopicDates: fixing dates = 18-nov-2015 and 18-nov-2016;\n- with TelescopicDates: fixing dates = 26-nov-2014 and 26-nov-2015.\nHow can I explain this difference?\nThank you for your help.\nPaolo\n. yes, no problem!\n. Ok, sorry for this PR :)\n. Yes, thank you.\n. Yes, but Tartaglia was the first one ;-)\n. ok!\n. Hi Peter,\nyou're rigth, to be consistent we need to modify the swap rate helper too. \nThis should be an user option.\nWe could implement both and maybe add a third one, like custom pillar dates. In this way each user can use the desired pillar dates .\nWhat do you think?\nBest regards,\nPaolo\n. Yes, we could use a flag that is set, for example, to false if at least one helper has the pillarDate() different from latestRelevantDate().. I don't know if this is a real gain for performance..\n. We just added the check in IterativeBootstrap::initialize()\n. @lballabio ok, thank you. Tomorrow I'll test it!\n. @lballabio the change is ok, everything works fine!\n. ",
    "aradicchi": "Ok, thanks. I'll send shortly some test cases.\n. ",
    "masrtis": "I completely understand. You're absolutely right that the type change is\nresponsible for the majority of the time gained in the test suite run.\nWould it make sense to replace the boost::function types with a typedef,\nand optionally use a combination of #ifdefs and a deprecated\nattribute/#pragma as described at\nhttp://stackoverflow.com/a/295229/1181561to inform clients that the\ntype might eventually change?\nEven after making the switch, the top five functions responsible for doing\nthe most work are:\n1) RtlAllocateHeap\n2) std::exp()\n3) TripleBandLinearOp::solve_splitting()\n4) NonCentralChiSquareDistribution::operator()\n5) ValueEstimate::value() in parametricexercise.cpp\nFor item 1, there's a lot of little places where memory is allocated. It\nmight not be worth spending a lot of time tracking down specific places\nwhere it'd be possible to save on allocations because each contribution to\nthe overall running time should be pretty small.\nFor item 2, most of the time is spent in AccountingEngine::singlePathValues\nand InterestRate::compoundFactor, which isn't surprising. There is some\nability to improve smaller contributors to the overall time, and I might\nimplement one of them because it shouldn't be a large change even if it\ndoesn't lead to much improvement in the final running time of the test\nsuite. For InterestRate::compoundFactor, if the same time values are passed\ninto the function for a variety of interest rates, it would be interesting\nto me to see if a wrapper could be implemented for the compounded case that\nsplits the math into exp(r) * exp(t). You would then only need to compute\nexp(r) when the rate changes, and exp(t) could be computed once for each\ntime series and cached. Has this already been investigated/implemented in\nsome form?\nI don't have enough experience with the math involved in 3 and 4 to have an\nimpact on how to approach speeding those up, but perhaps others might have\nideas?\nI'll look into cleaning up the code related to item 5 a little bit.\nMichael\nOn Thu, Apr 17, 2014 at 4:37 AM, Luigi Ballabio notifications@github.comwrote:\n\nThanks for the contribution.\nI've merged the commits, except for the one that replaced types such as\nstd::vector >\nwith\nstd::vector >\nIt's a change I'd very much like to do (and I suspect it accounted for a\nfair share of the time you gained in the test-suite run) but it modifies\nthe types in a public interface and thus it can break client code. I'll\napply it if we decide to drop backward compatibility in some future version\nof the library.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40705111\n.\n. It's not possible to overload on return type only in C++.\n\nIt's possible, but I'm not certain, that automatic return type deduction in\nC++11/14 would allow use of auto in this situation so it wouldn't be\nnecessary to specify the return type at all.\nOn Fri, Apr 18, 2014 at 10:35 AM, Ferdinando M. Ametrano \nnotifications@github.com wrote:\n\ncan we have both\nstd::vector >\nand\nstd::vector >\n?\nthe first one should be deprecated and just call the second one not\ndeprecated. Am I missing something?\nOn Thu, Apr 17, 2014 at 1:37 PM, Luigi Ballabio notifications@github.comwrote:\n\nThanks for the contribution.\nI've merged the commits, except for the one that replaced types such as\nstd::vector >\nwith\nstd::vector >\nIt's a change I'd very much like to do (and I suspect it accounted for a\nfair share of the time you gained in the test-suite run) but it modifies\nthe types in a public interface and thus it can break client code. I'll\napply it if we decide to drop backward compatibility in some future\nversion\nof the library.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40705111>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/lballabio/quantlib/pull/91#issuecomment-40827576\n.\n. Should bondStart be named, since it isn't referenced?\n. \n",
    "igitur": "Luigi, are you OK with this change in principle, even though the implementation might not be 100% correct yet?  If so, I'd like to continue with the QuantlibXL changes required to expose this change.\n. the useCleanPrices flag indicates whether the quote market prices (first parameter of the constructor) are clean or dirty prices and hence whether the bootstrap algorithm should use clean or dirty prices.\nI couldn't think of a better variable name, but you're welcome to suggest an alternative.\n. I removed that duplication as you suggested. Are there any tests that I can do for the add-in, besides testing it myself?\n. Yes, the error was in 1.4 too.\n. Yes, that is interesting. I'll keep it in the back of my head for one day when I'm brave enough.\n. Hang on with this PR. I don't think I require this anymore (our data source was wrong - still have to confirm). But if you think it's a useful change for the project in general, you can go ahead.\n. OK, I can add a test for this. My ultimate goal is still to get this constructor working in the QuantLibXL interface.\n. Yes, I saw something about XOPER... but I still have to go figure out what that's all about. Don't let this PR wait for the QuantLibXL functionality though.\n. @fametrano Do you perhaps have any test cases for this?\n. @eehlers Against which branch in your fork should I base this PR?\n. @eehlers Your master branch already contains the reposit change, right?\nIs there another pre-reposit branch where I can create this PR against?\n. Thanks. https://github.com/eehlers/quantlib/pull/14 created.\n. Agreed.\n. I believe https://github.com/lballabio/QuantLib/pull/50 will address Gerardo's concern about the period used for interpolation.\n. I agree, but don't you think it's also important to be consistent with the FixedRateLeg::withExCouponPeriod() parameters?\n. My bad. I didn't run the test suite for any of my recent pull requests. Let me do that first before you continue reviewing my pull requests.\n. Fixed the issues that you mentioned and I ran the test suite. All the CPI and Inflation tests pass.\n. Yes, I'm a bit unsure about how copyrights work. What I did was base my code on the existing lookback option code, so I didn't want to remove those copyright attributions. I added the new code in my own capacity, not in my company's capacity. Please advise how I should attribute.\n. What does 'copyright' mean in this context anyway? I mean... this is open source software, so according to the license, anybody may copy and distribute it. I don't want to hold any rights over copying. And I'm quite sure my company would like to avoid having its name here. \n. No, no problem. I just don't want to create the impression that I'm trying to prevent copying. I'll add it if you guys think I should.\n. Thanks for the clarification.\n. The fullInterface_ variable is no longer used. Perhaps remove it?\n. Where is the fullInterface() inspector? I commented out the fullInterface_ variable and its use in 2 constructors and could successfully compile QuantLib and run the test-suite without problems. I suppose it's very trivial, though.\n. ",
    "Rodneyh303": "This issue only seems to occur using Visual Studio with Debug settings. I rebuilt the debug quantlib static library and the problem remains. In practice it means it's difficult to debug code using integration because the program always crashes in debug mode. I'm using the latest intel parallel studio in conjunction with VS2013, compiling with the intel tools. GaussKronrodAdaptive is OK as is SimpsonIntegral, the problem is with the Gauss...Integration classes that call the Eigen decomposition as above. Can anyone else using 1.4 (esp. on Windows) reproduce the problem?\n. ",
    "rglarix": "By Thema Consulting\n. Unfortunately not. It came out from our internal QA while we were still \nintegrating QuantLib in our products and the exact details were lost.\nIt had something to do with a forward quanto, if I remember correctly.\nI'll try to concoct something.\n. Added a test case triggered without the fix. Remove redundant initialization\n. rebased pull request to latest head\n. rebased to latest head\n. Ok, thanks\n. ok, thanks\n. rebased to latest head\n. Yes, it was added following the better safe than sorry principle :)\n. right, done\n. ",
    "Beatgodes": "Removing s2y doesn't seem to be working for me.\n. ",
    "quanttiger": "Your consolidation of the VC++ project files is a much better approach. Everything compiles using VS2013. I tried a few examples and they work. Thank you very much!\n. Thanks, Luigi! I have made the change and tested using VS2013 on Windows 7, MinGW GCC4.6.3 on Windows 7, and GCC 4.8.2 on Ubuntu 14.04. Please verify using any OS/compiler you typically use and merge the pull request. Thanks again!\n. ",
    "wegamekinglc": "Hi Luigi. I have fixed the denominator and write some simple test for AmortizngFixedRateBond, the result is checked against Excel pmt function.\n. @kosynski I tried your multi-curve framework on my machine. Try your testing case through vs2010, vs2012, vs2013 and gcc 4.8 and clang 3.3.0. It all works fine except vs2013. vs 2013 test passed when I change the curve accuracy from 1-16 to 1e-12. \n. I only change the accuracy in simultaneous  building test case.\n. Sorry, I messed up the commit.... Please help me to close it...\n. Is there anyone know why requiredGridValue_  was introduced previously?\n. I tried this on windows machine with vc11. It doesn't compile with boost 1.55. Compiler complains can't match any existing make_shared template...\n. Hi Peter. Yes, that solution works.\n. I'll have a try to fix this. If it works i'll sent it as pr to the master.\n. Sorry, I miss these important information. I am working on windows and tried vc10\nError    92  error C2001: newline in constant    d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  271 1   QuantLib\nError   96  error C2059: syntax error : ')' d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  273 1   QuantLib\nError   97  error C2059: syntax error : ')' d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  273 1   QuantLib\nError   93  error C2146: syntax error : missing ')' before identifier 'Rounding'    d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  272 1   QuantLib\nError   95  error C2146: syntax error : missing ')' before identifier 'Rounding'    d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  272 1   QuantLib\nError   94  error C2661: 'QuantLib::Currency::Data::Data' : no overloaded function takes 4 arguments    d:\\dev\\github\\quantlib\\quantlib\\ql\\currencies\\asia.cpp  272 1   QuantLib\n. Sorry, merged in wrong direction. Actually I want to merge FROM Luigi's master\n. I have spotted this both on visual studio 2013 and visual studio 2015.\n. I am sorry for polluting the pull request with unrelated commits. I have reverted all the unnecessary changes. \n. Hi @jwg4. quantlib version number is coded under the root folder quantlib/version.hpp. You can easily write a free function to expose it in your .so file.\n. I  agree with you. The denominator should be nPeriods. Besides I'll try to write down some tests for this function.\n. ",
    "grandtiger": "Hi Luigi, thanks for your quick response! \nI don't use C++ much and don't know how to check. I have QuantLib-1.4.x-32 and QuantLib-1.4.x-64 for 32bit and 64bit compilation respectively. I run ./autogen.sh  to generate the configure file and configure make files in similar way, except that I passed the extra settings CXXFLAGS=\"-m64\" --build=i686-w64-mingw32 for 64bit.\nThe compilation for 32bit seems perfectly fine. But there is something strange about the 64bit compilation. For example, I go to /c/R/cpp/QuantLib-1.4.x-64/ql/math/randomnumbers and do make clean, and then run make again. There is no compilation errors or warnings. But I do notice that the size of sobolrsg.o is much smaller under 64bit (6,445KB) vs 32bit (10,940KB). However, the size of primitivepolynomials.o is the same (87KB) under both 32bit and 64bit. The libQuantLib.a generated by 32bit compilation is 504,407KB (same size from XP or win7), but the libQuantLib.a generated by 64bit compilation is only 357,066KB (missing some stuff due to compilation errors).\nI tried the 64bit compilation on both my home PC and work PC with both boost 1.55 and 1.56, and got same exact errors. Please advise how to check undefined reference to PrimitivePolynomials and what else I can check/try.\nThanks a lot for your help!\n. Thanks again! Looks like this command work in the msys shell as well. Follow is what I got. So according to the nm document, this means PrimitivePolynomials is undefined, right? But the question is really why it's undefined and how I can fix it.\nOutput for 64bit libQuantLib.a:\n$ nm libQuantLib.a | grep PrimitivePolynomials\n00000000 R _PrimitivePolynomials\n                 U PrimitivePolynomials\n0000000000000000 d _ZN8QuantLib12_GLOBAL__N_1L23AltPrimitivePolynomialsE\nRunning the same command on the 32bit libQuantLib.a produces the following:\n$ nm libQuantLib.a| grep PrimitivePolynomials\n00000000 R _PrimitivePolynomials\n         U _PrimitivePolynomials\n000001c0 r __ZN8QuantLib12_GLOBAL__N_1L23AltPrimitivePolynomialsE\n. Sure, will do when I get home. Thanks again!\n. I googled and found a not quite related issue here:\nhttp://quantlib.10058.n7.nabble.com/compiling-Quantlib-Eclipse-with-CDT-3-0-2-td4535.html\nRunning out of ideas, I gave it a try anyway and changed QuantLib\\ql\\math\\randomnumbers\\primitivepolynomials.c to primitivepolynomials.cpp (also edit Makefile.am). \nNow everything compiles, but the library file size is still smaller than the 32bit (this is a puzzle to me and may imply other issues). However, the examples work and they don't run on XP 32bit PC, so they are indeed 64bit binary. Perhaps there are more source code using .c extension but are not used by any of the examples and are ignored silently?\nIs there any reason that primitivepolynomials.c doesn't have a .cpp extension? If not, could you please rename it as well as the header file primitivepolynomials.h? Thank a lot!\nAnother thing that I noticed is that running strip --strip-unneeded libQuantLib.a  on the 32bit and 64bit  libraries gave very different result. the 32bit one shrinked from over 500MB to about 80MB, the 64bit one shrinked from 360MB to 320MB. Not sure why there is such a big difference.\n. ",
    "kosynski": "@wegamekinglc Thank you for your time and effort. I hope it will be helpful.\n. ",
    "tdsmith": "Awesome, thanks. Backported to 1.4: https://gist.github.com/tdsmith/b2d5909db67b3173db02\n. Awesome. Sorry for bothering you about an old release!\n. ",
    "eehlers": "The suggestion is to replace this:\n$(GENSRC_DIR)\\gensrc.py -xdlv --oh_dir=$(OH_DIR)\nWith this:\npython.exe $(GENSRC_DIR)\\gensrc.py -xdlv --oh_dir=$(OH_DIR)\nWhen I tried the proposed change just now on my machine, it failed with the following error:\n1>  'python.exe' is not recognized as an internal or external command,\n1>  operable program or batch file.\nObviously, on my machine, the first incantation works because .py files are associated with python.exe, and the second incantation fails because python.exe is not in my path.\nI appreciate that the current syntax fails on some machines but I hesitate to replace it with something else that fails on other machines.  What do you guys think?\n. Perfect.  On my machine, this works:\n$(PYTHON) $(GENSRC_DIR)\\gensrc.py -xdlv --oh_dir=$(OH_DIR)\nAnd on my machine as well as on machines such as Francois's, this should work:\nPYTHON=C:\\path\\to\\python.exe\n$(PYTHON) $(GENSRC_DIR)\\gensrc.py -xdlv --oh_dir=$(OH_DIR)\nI updated the build documentation and commented the makefiles.  I pushed this change to my remote for inclusion in the upcoming release of QuantLibXL 1.5, here is the commit:\nhttps://github.com/eehlers/quantlib/commit/ec312fbcd92bcf9ac6db1da14b69241b7d5b5665\nI think you can cancel this pull request, you will get my changes next time you pull from me (I will email you with more details on that after the release).\nMany thanks to you both for your help.\nKind Regards,\nEric\n. i'll do that and the other one this weekend and let you know!\n. this one is done, please try again!\n. it appears to be missing.  off the top of my head i'm not sure why.\nmy best guess is....  somebody must have sent me x64 support in VC11 and i used that.  i don't have 64-bit excel on my machine so had i backported the build to VC10 i would have had no way to test it.\n. that would be great, many thanks.  i would prefer that you send the pull request to my master.\n. Luigi if you want I can try to merge this into my master first.\n. i took a crack at merging this.  after reverting the changes to QuantLib, i found some other problems (paths hard-coded to D:\\local\\boost_1_55_0, non-ASCII (Chinese?) characters, etc) that I do not have time to unravel at the moment.\nI have all the relevant changes squashed into one commit in my local repo and I will attempt again to merge it in before the QLXL 1.6 release.\n. i parked the commit here:\nhttps://github.com/eehlers/quantlib/commit/abdec04b958a6933a04fdf4f7f4cd1c1f37a0bee\n. master please!\n. My repo is organized so that the old and new builds coexist without conflict.\nThe directories for the old build are unchanged:\ngensrc\nlog4cxx\nObjectHandler\nQuantLibAddin\nQuantLibXL\nFor info, the directories for the new build are:\nlog4cxx\nreposit\nQuantLibAddin2\nQuantLibXL2\nBut you don't need to worry about those.  You can create your PR for the old build as if the new one didn't exist.\nNow that I have created the v1.7.x branch I would be grateful if you could please create the PR against that.\n. ",
    "mdriesch": "Ok. I wanted to say \"shifted\" lognormal cap vols (since \"simple\" lognormal vols are already included anyway).\n. Added an additional test case for shifted log normal vols. Also took back some of the changes in the \"stripper\" classes. I hope the design is cleaner now.\nUsing realistic market data, the shifted log normal test case reveals numerical issues in the optionletstripper. This is why I used the \"dontThrow\" flag of the stripper constructor and this is also the reason why I had to turn down the tolerance in the test suite.\n. You are right. Even the creation of a cap or floor (since depending on the switch strike) might change (L111). From what I see at the moment I don't see any chance of time savings and I would just skip the initialize flag altogether. What do you think?\n. Avoided additional includes. Left out the test cases since this should be more or less clear from the laziness of the object. If majority insists I'll create one;-).\n. Sorry, messed up the previous PR (forgot to actually delete the include).\n. Yes, shifted as in \"using a displacement\". \nYour second question. Well, the idea has been to keep signatures of normal and (displaced) lognormal engines (Bachelier vs Black enginge) identical. The displacement is actually not used in the normal case. By doing this one could possibly try a templated approach for the optionletstripper instead of the rather naive if model is a then ... approach. Is this clear? I was just not sure, whether the templated version is worth the hassle of changing \"the rest\" of the existing code. Therefore I decided to first go for the simple if / else approach to see if there is any interest in the contribution. \n. I can make the change with regards to the \"case naming\". But just to be sure we have no misunderstanding ...\nNormal Case\n\nShifted LogNormal Case\n\nwhere a is the shift (i.e. displacement within the constructor). So there is no shift in the normal case whereas the shifted LogNormal case contains the usual LogNormal case with a=0 as a special case. This has been the reason for my naming convention. \n. Probably not. One could argue,  that it is\"good style\" to always directly include the headers referred to rather then indirectly using them. What is current QL best practice? \n. ",
    "nesteruk": "Hmm, I left a comment here before but now it's gone. The problems with the MOEX calendar are that:\n- The calendar is different every year\n- It is impossible to define 100% patterns, for example sometimes a week-end is a working day\n. @lballabio done! I've rewritten the calendars to fast-track evaluation of week-end dates\n. Oh wait, hold that thought, need to fix something...\n. There we go! All good now.\n. ",
    "ghost": "Pushed.\n. ",
    "Laeeth": "Great - thanks,\n. ",
    "mmport80": "Hey Luigi, just spotted it - will do!\n. ",
    "gpazmandi": "Yes, it is supported for vc10 and above (I'm currently using vs2010/vc10). See also \nhttp://blogs.msdn.com/b/visualstudio/archive/2010/03/08/tuning-c-build-parallelism-in-vs2010.aspx)\n. Ok, I agree, the definition and the use are so close, that it is easy to understand the code.\nThanks!\n. Sorry for the \u201cunwanted change\u201d (in push request #208 I messed up a bit because I\u2019m a git newby \u2026) Now that I understand better how it works I will push the future requests from the right version so you will have only one checkout in the branch \u2026\nThank you again!\nGiorgio\nFrom: Luigi Ballabio [mailto:notifications@github.com] \nSent: marted\u00ec, 31. marzo 2015 18:13\nTo: lballabio/quantlib\nCc: gpazmandi\nSubject: _spam_ Re: [quantlib] Small enhancement jamshidian engine (#208)\nMerged #208 https://github.com/lballabio/quantlib/pull/208 .\n\u2014\nReply to this email directly or view it on GitHub https://github.com/lballabio/quantlib/pull/208#event-269734992 . Web Bug from https://github.com/notifications/beacon/ALAD2R3u2DOt9Gbj_UHhpsuD5_wdlY9Lks5n6r8LgaJpZM4DzsEz.gif http://cdn.mailscanner.info/1x1spacer.gif \n. I had the same compilation problem, this push solves the issue\n. Maybe I've done something wrong, because the system says that I'm pulling 10,000 commits, but I only wanted to push the last three .... Ok, I will try it on Monday\nThanks\nGiorgio. ",
    "gouthambs": "I got it. I am using V1.5 where the base class didn't have the additional methods. I just checked the master, and I see what you are saying. Thanks for clarifying. \nDo you have a timeline for V1.6 release?\n. @lballabio \nI wrapped some of the methods in VanillaSwap and I am able to call them from python. For instance, I have wrapped the floatingDayCount as shown below:\nconst DayCounter& floatingDayCount() {\n    return boost::dynamic_pointer_cast<VanillaSwap> (*self)\n     ->floatingDayCount();\n}\nNow, when I inspect the floatingDayCount() method from the VanillaSwap object, I get this:\n<QuantLib.QuantLib.DayCounter; proxy of <Swig Object of type 'DayCounter *' at 0x03897D40> >\nIf I inspect the floating day count object that was originally passed into the VanillaSwap constructor, I get this:\n<QuantLib.QuantLib.Actual360; proxy of <Swig Object of type 'QuantLib::Actual360 *' at 0x037FF668>\nI was expecting the inspection of the two to give me identical results since internally they are all references.\nDo you know if this some SWIG idiosyncrasy that I am not understanding right? Or is this some issue to be concerned? \nMy guess is that the difference arises from the fact that latter is a Actual360 object, and the former is cast to its base class. Any light you could shed would be helpful.\n. @luigi I played with the LocalVolSurface implementation. I noticed that we don't currently have an arbitrage free smoothing implementation a la Fengler. This leads to the local volatility surface not being smooth and continuous. Any thoughts? @klausspanderen @fametrano Any one else has expertise in this? \n. OK. Will do that moving forward. \n. @sfondi it would be nice to have this exposed in SWIG extensions as well.\n. No worries. I will add a SWIG extension after your PR gets merged. Thanks.\n. ",
    "ben46": "try \n./autogen.sh\n. ",
    "student-t": "It looks like a compiler issue. Have you checked \"-stlib=libstdc++\"?\nBy the way, I was able to compile everything simply download the latest\nXcode and copy-and-paste all source code into a new project. Running on\nXcode is recommended because it gives intelligence checking and advanced\ndebugging.\nOn Mon, Oct 12, 2015 at 3:41 PM, pazzo83 notifications@github.com wrote:\n\nI am having a similar issue (on Mac OSX 10.11), this is what I see in the\nconfig.log:\nclang: error: argument to '-V' is missing (expected 1 value)\nclang: error: no input files\nconfigure:3384: $? = 1\nconfigure:3373: gcc -qversion >&5\nclang: error: unknown argument: '-qversion'\nclang: error: no input files\nconfigure:3384: $? = 1\nconfigure:3404: checking whether the C compiler works\nconfigure:3426: gcc   -I/opt/local/include -stlib=libstdc++ -mmacosx-version-min=10.6 -L/opt/local/lib conftest.c  >&5\nclang: error: unknown argument: '-stlib=libstdc++'\nconfigure:3430: $? = 1\nconfigure:3468: result: no\nconfigure: failed program was:\n| /* confdefs.h /\n| #define PACKAGE_NAME \"QuantLib\"\n| #define PACKAGE_TARNAME \"QuantLib\"\n| #define PACKAGE_VERSION \"1.6.2\"\n| #define PACKAGE_STRING \"QuantLib 1.6.2\"\n| #define PACKAGE_BUGREPORT \"quantlib-dev@lists.sourceforge.net\"\n| #define PACKAGE_URL \"\"\n| #define PACKAGE \"QuantLib\"\n| #define VERSION \"1.6.2\"\n| / end confdefs.h.  */\n|\n| int\n| main ()\n| {\n|\n|   ;\n|   return 0;\n| }\nconfigure:3473: error: in `/Users/christopheralexander/c_and_c_plus_plus/quantlib_built/QuantLib-1.6.2':\nconfigure:3475: error: C compiler cannot create executables\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/issues/242#issuecomment-147290476.\n. \n",
    "maddazanzi": "Copyright notice added\n. ",
    "jschnetm": "Hi Peter,\nit seems to be a rounding problem in the test. I have reformulated the test a \nbit (pull request #266) and now the tests run through. Apart from some eye \ncandy and added \"consts\" the core of the patch is to extract the exponential \nweight from the sum as:\n                M_PI_2 * (modifiedBesselFunction_i(-nu,x) -\n                          modifiedBesselFunction_i(nu,x)) * exp(-x) / \nstd::sin(M_PI*nu);\nSecondly the test tolerance will now not go below QL_EPSILON, which is needed \nfor the tests of the very small results.\nKind regards,\nJohannes\nOn Friday, June 12, 2015 07:44:02 AM Peter Caspers wrote:\n\nHi Johannes, I fear that I am guilty since I added these weighted variants\nto Klaus' implementation. However I do not get the actual problem. Can you\nexplain that in a few sentences maybe ? Thank you, Peter\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/266#issuecomment-111515800\n. On Friday, June 12, 2015 09:51:29 AM Peter Caspers wrote:\nyes, I get the part with factoring out the exp(-x) term for the expected\nresult. Why do we need to floor the tolerance for the k-case at QL_EPSILON\nthough ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/lballabio/quantlib/pull/266#issuecomment-111554589\n\nOtherwise the tests fail if the result is small. An example (I have included \nthe tol, which results from the other formula):\nfunctions.cpp(267): error in \n\"QuantLib::detail::quantlib_test_case(&FunctionsTest::testWeightedModifiedBesselFunctions)\": \nfailed to verify exponentially weightedmodified Bessel function of second kind\n order      : -4.5\n argument   : 11.1\n calculated  : 2.01882e-10\n expected   : 2.01882e-10\n tol        : 2.96624e-18\n. ",
    "Andres-Hernandez": "I have changed it so that the discount curve is passed as a decorator. It is indeed a better solution as it not only remains fully backwards compatible, but also stops the discount curve appearing everywhere where it is just making noise. Now only the helper method SpreadFittingMethod knows about an underlying curve on top of which the spread will be calculated. \n. OK, it compiles now and I made the extra adjustments to the code and documentation that you requested (value references values, etc)\n. I am starting to debug it, but I checked on the last point. My suspicion was that it was due to the default simplex optimizer falling into a local optima. I tried it with the SimulatedAnnealing optimizer and it looked very close to the levels of the bootstrapped case (e.g. the first tenor had in bootstrap case a value of 2.000 and in the spreaded case 1.958, although the value will oscillate as SimulatedAnnealing has a stochastic component). \nBy the way, since I'm new to github I don't know where I should find the patch that you mention. \n. Great, thanks!\nI am currently also working on writing up more global optimizers. I already\nhave a second type of simulated annealing, and I am in the process of\nwriting up a canonical particle swarm optimizer with three different types\nof topologies (global, k-neighbor ring, and random clubs) and wanted to do\na second type of pso called random drift pso, also having the choice of the\nthree topologies.\nI plan on finishing the code before the User Conference, and then I wanted\nto write an example file where all four types (including Peter Casper's\nsimulated annealing) of global optimizers could be shown in order to fit\nbond curves\nOn Fri, 30 Oct 2015 14:05 Luigi Ballabio notifications@github.com wrote:\n\nOk. For the purposes of the example, I've set the underlying discount\ncurve to a flat rate, which is unrealistic but makes a lot easier for the\noptimizer to get the correct spread.\nI've also fixed the second error (it was just a test too strict in the\nexample). I'll be merging the PR shortly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/288#issuecomment-152518704.\n. Sorry, I didn't test it after the changes. Let me see...\n\nOn Fri, 23 Oct 2015 16:35 Luigi Ballabio notifications@github.com wrote:\n\nIn QuantLib/ql/termstructures/yield/nonlinearfittingmethods.cpp\nhttps://github.com/lballabio/quantlib/pull/288#discussion_r42871693:\n\n@@ -213,6 +222,35 @@ namespace QuantLib {\n         }\n         return d;\n     }\n- \n-   SpreadFittingMethod::SpreadFittingMethod(shared_ptr method,\n-                        Handle discountCurve)\n-    : FittedBondDiscountCurve::FittingMethod(method ? method->constrainAtZero() : true, method ? method->weights() : Array(),\n-                                            method ? method->optimizationMethod() : boost::shared_ptr()),\n-      method_(method), discountingCurve_(discountCurve) {\n-       QL_REQUIRE(!method, \"Fitting method is empty\");\n\nYou're negating method, so this actually requires that the method is\nnull. It should be QL_REQUIRE(method, ...) instead.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lballabio/quantlib/pull/288/files#r42871693.\n. \n",
    "algemeen": "vs2015, quantlib_vc14, win32 release static runtime\n. ",
    "vinaydwivedi": "Thanks for your reply Luigi, Adding a complete set of builds/test I've done so far.\nyes, I did compile both the projects - in 32 Bit mode\n- Want to keep it in 32 Bit mode only (there are some reasons as current project build is in 32 bit to support some other unmanaged 32 builds).\n- I am trying to upgrade to V1.6 from V1.2. Existing 1.2 build has mulitple access violation issues and hoping those are fixed in V1.6)\nIn VS2010 - I managed to Run 1.6 Version by adding to Bermudan Project\n\n\n\nBut then when I port into this NQuantLib.dll and NQuantLibc.dll into my existing application I get following now,\nFollowing is a complete set of Steps that I followed,\n- Build QuantLib version: at C:\\QuantLib-1.6.1 using Boost 1.57.\n- Set QL_Dir (System Variable) to C:\\QuantLib-1.6.1 project directory.\n- Copy SWIG.EXE (and related dependencies from SWIG folder) from Latest SWIG downloaded swigwin-3.0.7 t0 C:\\QuantLib-SWIG-1.6\\CSharp.\n-  Go to C:\\QuantLib-SWIG-1.6\\CSharp run swig.cmd.\n- Open QuantLib_vc10.sln located under C:\\QuantLib-SWIG-1.6\\CSharp in VS2010 (using VS2010 Premium).\n- Build NQuantLibc (Release Mode) project in QuantLib_vc10 Solution located at C:\\QuantLib-SWIG-1.6\\CSharp using Boost 1.57.\n- Build NQuantLib (Release Mode) project in QuantLib_vc10 Solution located at C:\\QuantLib-SWIG-1.6\\CSharp.\nResults:\n1- \nRun - BermudanSwaption Project:\nException\nA call to PInvoke function 'NQuantLib!QuantLib.NQuantLibcPINVOKE::new_Date__SWIG_1' has unbalanced the stack. This is likely because the managed PInvoke signature does not match the unmanaged target signature. Check that the calling convention and parameters of the PInvoke signature match the target unmanaged signature.\n2 -\nAdd APP.Config to Bermudan project,\nAdd NetFx40_PInvokeStackResilience enabled (If I don't add this, I get Unbalanced Stack Exception)\n\n\n\n- Run Bermudan project - seems to run fine.\n- Take a copy of NQuantLib and NQuantLibC dlls from Release path, and migrate them against my existing project to replace old V1.2 Quantlib  and QuantLibC dlls.\n- Run the project \n  Exception: Unable to find an entry point named 'CSharp_new_ZeroCurve__SWIG_3' in DLL 'NQuantLibc'.\nFollowing is the C# call:\n  DateVector matVec = new DateVector(); (Maturities - is not the full code)\n  DoubleVector rates = new DoubleVector(); (Rates- is not the full code)\nYieldTermStructure yield = new ZeroCurve(matVec, rates, new Business252(), new Japan());\n. I manually copied both the DLLs from BermudanSwaption Project release folder to my application's Build Binaries... Same result :(\n. no, I am building a project, will send it across soon. Where should I upload it?\nFor example - I am getting this error while generating YieldTermStructure.\nI will attach entire project with latest SWIG Build of V1.6\n. Phewwww!\nYes - you were right.\nRealized after building a test project - the lib was set to copy always (to a Lib folder), and debug folder file was not updated. Sorry my bad!\nAll Good up and running very well.\nThanks a ton for your help.\n. You are a rock star man, thanks again. Access Violation issue is also gone with version upgrade.\n.  Access Violation still exists - Very hard to reproduce... often involves simulating a heavy load.\nhttps://github.com/lballabio/quantlib/issues/306\n. Aahh, Thanks Peter. Solved.\n. Ok - Going to try it, will post my results by tomorrow after load testing. Thanks a lot.\n. ok - I tried to compile QuantLib V1.6.1 with the patch (boost_1_57_0). Having hard time building it.\nDo you plan to include this patch in the Github's version any time soon?\nFollowing steps,\n- Copy Patch\\QuantLib\\ql\\patterns files to QuantLibV1.6.1\\ql\\patterns\n- Copy (other than Patterns file) Patch\\QuantLib\\ql files to QuantLibV1.6.1\\ql\n- Make following changes in boost_1_57_0/boost/smart_ptr/detail/sp_counted_impl.hpp\n  #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)\ninto \n#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS_2)\n(Total 3 occurrences were changed)\n- Open QuantLib_VC10 solution at QuantLib-1.6.1\n- Include ql/patterns/observable.cpp to the solution\n  \u2013 Include boost lib path and the QuantLib lib path in all the projects Project properties > Configuration Properties > Linker > General > Additional Library Directories\n  it looks like ....\\lib;C:\\boost_1_57_0\\libs;C:\\QuantLib-1.6.1\\lib;%(AdditionalLibraryDirectories)\n- Build Fails\n\nError   1   error C3861: 'registerWithObservables': identifier not found    C:\\QuantLib-1.6.1\\ql\\instruments\\swaption.cpp   109 1   QuantLib\nError   3   error LNK1181: cannot open input file 'C:\\QuantLib-1.6.1\\lib\\QuantLib-vc100-mt.lib' C:\\QuantLib-1.6.1\\Examples\\MarketModels\\LINK    MarketModels\n\nHave not tried following (or I don't need to build QuantLib 1.6 libary)?\n4. Add the full boost lib path and the QuantLib lib path in:\n    Project properties > Configuration Properties > Linker \n                       > General > Additional Library Directories\n   to your SWIG Visual Studio project, which compiles quantlib_wrap.cpp\n   (Similar to what is needed to build the test suite.)\n5. build solution\n. Unable to build it with V1.5 QuantLib as well sadly, Multiple errors e.g.\nError   1   error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\MarketModels\\QuantLib-vc100-mt.lib(settings.obj)   MarketModels\nError   2   error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\MarketModels\\QuantLib-vc100-mt.lib(blackformula.obj)   MarketModels\n. Quick question:\nDo I need to rebuild Boost after updating to #if defined(BOOST_SP_ENABLE_DEBUG_HOOKS_2)? My OS is 64 BIT, how to do that in 32 version on a 64 bit OS? I need to compile NQuantLIb in 32 Bit.\nRe: Add Libboost_System, libboost_thread to linked libraries - Where can I find these libraries in Boost 1_57 directories, and how to add them - Linker>general>Additional Library Dependencies> C:\\local\\boost157M\\boost_1_57_0\\libs?\nPS: I primarily program using C#, VC++ is a bit of gray area for me ATM :/\n. okay, Re: Add Libboost_System, libboost_thread to linked libraries - Where can I find these libraries in Boost 1_57 directories, and how to add them - Linker>general>Additional Library Dependencies> C:\\local\\boost157M\\boost_1_57_0\\libs? I've already tried that, doesn't work :/\nPS: I primarily program using C#, VC++ is a bit of gray area for me ATM :/\n. Any such changes required in the QuantLib project in the VC++ solution (other than Test-Suite)?\n. I had excluded testsuite in my earlier QuantLib VC++ builds. I always get an error Error    \nStill have these errors:\n1476    error LNK1104: cannot open file 'libboost_unit_test_framework-vc100-mt-1_57.lib'    C:\\QuantLib\\QuantLib-1.5 - PatchBuild1\\QuantLib-1.5\\test-suite\\LINK testsuite\nI've already set VC++ directories, and linker for all projects including TestSuite (other than QuantLib) in VC++ solution is pointed to\nC:\\local\\boost157M\\boost_1_57_0\\libs\nC:\\QuantLib\\QuantLib-1.5\\lib\n*** And probably because test-suite is not build - other build errors e.g. unresolved external symbol \"class boost::system still persist.\nI also tried manually compiling Boost using B2 command, I compiled everything into a different folder - but all those are named vc140 instead of VC100 e.g. I do see libboost_unit_test_framework-vc140-mt-1_57.lib in the folder path passed to B2 command.\nI am trying to build my VC++ QUantlib solution in 32 bit on a 64 Windows 7 OS.\nPlease advice... \n. Trying this command: b2 --toolset=msvc-10.0 --build-type=complete stage to build Boost in 32 Bit with VS2010 compiler - I will update all the Boost Lib paths to Stage\\Lib - Hope that will work... Phew!\n. No, I've  been using VS2010 - Never had to compile Boost.\nJust Adding Boost (downloaded precompiled v1_57_0) - to include directory, and Boost/Lib to Library directory for all the projects was  good to compile both Quantlib VC++ and SWIG GitHub versions. Has been quite difficult to get the patch working - but I need to - Hoping after all this work - AccessViolationException issue would be gone. \nI saw a release note: re: QuantLib usage in multiple threads. My pricing code is multi threaded, but threads do not share quantlib members with each other. I am hoping there won't be any problems around that.\nMay be I will also upload a patched version - (Boost, VC++ QuantLib, and SWIG) - after I get everything compiled well, and working along with steps somewhere. Possibly that may help someone who is not from VC++ background.\nYou guys have been quite responsive in the forum - many thanks for all the help so far!\n. Still have compilation issues after adding libaries in QUantlibtestsuite.cpp in every project other than QuantLIb and TestSuite (about 1475 compilation errors)\nError   5   error LNK1120: 2 unresolved externals   C:\\QuantLib-1.5\\Examples\\MultidimIntegral\\bin\\MultidimIntegral-vc100-mt.exe MultidimIntegral\nError   196 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\bin\\Gaussian1dModels-vc100-mt.exe Gaussian1dModels\nError   245 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\LatentModel\\bin\\LatentModel-vc100-mt.exe   LatentModel\nError   300 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\BasketLosses\\bin\\BasketLosses-vc100-mt.exe BasketLosses\nError   359 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\CDS\\bin\\CDS-vc100-mt.exe   CDS\nError   400 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\MarketModels\\bin\\MarketModels-vc100-mt.exe MarketModels\nError   487 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\CallableBonds\\bin\\CallableBonds-vc100-mt.exe   CallableBonds\nError   636 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\Bonds\\bin\\Bonds-vc100-mt.exe   Bonds\nError   719 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\FittedBondCurve\\bin\\FittedBondCurve-vc100-mt.exe   FittedBondCurve\nError   760 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\DiscreteHedging\\bin\\DiscreteHedging-vc100-mt.exe   DiscreteHedging\nError   941 error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\BermudanSwaption\\bin\\BermudanSwaption-vc100-mt.exe BermudanSwaption\nError   1006    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\Repo\\bin\\Repo-vc100-mt.exe Repo\nError   1115    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\FRA\\bin\\FRA-vc100-mt.exe   FRA\nError   1224    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\ConvertibleBonds\\bin\\ConvertibleBonds-vc100-mt.exe ConvertibleBonds\nError   1285    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\Replication\\bin\\Replication-vc100-mt.exe   Replication\nError   1374    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\EquityOption\\bin\\EquityOption-vc100-mt.exe EquityOption\nError   1475    error LNK1120: 4 unresolved externals   C:\\QuantLib-1.5\\Examples\\Swap\\bin\\SwapValuation-vc100-mt.exe    Swap\nError   2   error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\MultidimIntegral\\QuantLib-vc100-mt.lib(observable.obj) MultidimIntegral\nError   54  error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(discretizedswap.obj)    Gaussian1dModels\nError   55  error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(overnightindexedcoupon.obj) Gaussian1dModels\nError   1043    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(cashflowvectors.obj) FRA\nError   1044    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(couponpricer.obj)    FRA\nError   1045    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ)   C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(voltermstructure.obj)    FRA\nError   4   error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\MultidimIntegral\\QuantLib-vc100-mt.lib(observable.obj) MultidimIntegral\nError   125 error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(discretizedswap.obj)    Gaussian1dModels\nError   126 error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(overnightindexedcoupon.obj) Gaussian1dModels\nError   1000    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\Repo\\QuantLib-vc100-mt.lib(bond.obj)   Repo\nError   1001    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\Repo\\QuantLib-vc100-mt.lib(discountingbondengine.obj)  Repo\nError   1003    error LNK2001: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) C:\\QuantLib-1.5\\Examples\\Repo\\QuantLib-vc100-mt.lib(observable.obj) Repo\nError   6   error LNK2001: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(makevanillaswap.obj)    Gaussian1dModels\nError   7   error LNK2001: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(makeois.obj)    Gaussian1dModels\nError   8   error LNK2001: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const *)\" (?get_tss_data@detail@boost@@YAPAXPBX@Z)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(mt19937uniformrng.obj)  Gaussian1dModels\nError   1007    error LNK2001: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z)   C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(floatingratecoupon.obj)  FRA\nError   1008    error LNK2001: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z)   C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(couponpricer.obj)    FRA\nError   30  error LNK2001: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(makevanillaswap.obj)    Gaussian1dModels\nError   31  error LNK2001: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\QuantLib-vc100-mt.lib(makeois.obj)    Gaussian1dModels\nError   1025    error LNK2001: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(floatingratecoupon.obj)  FRA\nError   1026    error LNK2001: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(couponpricer.obj)    FRA\nError   1027    error LNK2001: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) C:\\QuantLib-1.5\\Examples\\FRA\\QuantLib-vc100-mt.lib(imm.obj) FRA\nError   1   error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\MultidimIntegral\\MultidimIntegral.obj  MultidimIntegral\nError   121 error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\Gaussian1dModels.obj  Gaussian1dModels\nError   224 error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::`dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\LatentModel\\LatentModel.obj    LatentModel\nError   1075    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\FRA\\FRA.obj    FRA\nError   1180    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\ConvertibleBonds\\ConvertibleBonds.obj  ConvertibleBonds\nError   1255    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::generic_category(void)\" (?generic_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::`dynamic initializer for 'posix_category''(void)\" (??__Eposix_category@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\Replication\\Replication.obj    Replication\nError   3   error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'native_ecat''(void)\" (??__Enative_ecat@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\MultidimIntegral\\MultidimIntegral.obj  MultidimIntegral\nError   192 error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'native_ecat''(void)\" (??__Enative_ecat@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\Gaussian1dModels.obj  Gaussian1dModels\nError   1002    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'native_ecat''(void)\" (??__Enative_ecat@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\Repo\\Repo.obj  Repo\nError   1111    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::dynamic initializer for 'native_ecat''(void)\" (??__Enative_ecat@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\FRA\\FRA.obj    FRA\nError   1220    error LNK2019: unresolved external symbol \"class boost::system::error_category const & __cdecl boost::system::system_category(void)\" (?system_category@system@boost@@YAABVerror_category@12@XZ) referenced in function \"void __cdecl boost::system::`dynamic initializer for 'native_ecat''(void)\" (??__Enative_ecat@system@boost@@YAXXZ)   C:\\QuantLib-1.5\\Examples\\ConvertibleBonds\\ConvertibleBonds.obj  ConvertibleBonds\nError   394 error LNK2019: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z) referenced in function \"public: class QuantLib::SeedGenerator * __thiscall boost::thread_specific_ptr::get(void)const \" (?get@?$thread_specific_ptr@VSeedGenerator@QuantLib@@@boost@@QBEPAVSeedGenerator@QuantLib@@XZ) C:\\QuantLib-1.5\\Examples\\MarketModels\\QuantLib-vc100-mt.lib(mt19937uniformrng.obj)  MarketModels\nError   754 error LNK2019: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z) referenced in function \"public: class QuantLib::SeedGenerator * __thiscall boost::thread_specific_ptr::get(void)const \" (?get@?$thread_specific_ptr@VSeedGenerator@QuantLib@@@boost@@QBEPAVSeedGenerator@QuantLib@@XZ) C:\\QuantLib-1.5\\Examples\\DiscreteHedging\\QuantLib-vc100-mt.lib(mt19937uniformrng.obj)   DiscreteHedging\nError   26  error LNK2019: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const *)\" (?get_tss_data@detail@boost@@YAPAXPBX@Z) referenced in function \"public: class QuantLib::Settings * __thiscall boost::thread_specific_ptr::get(void)const \" (?get@?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QBEPAVSettings@QuantLib@@XZ) C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\Gaussian1dModels.obj  Gaussian1dModels\nError   1225    error LNK2019: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z) referenced in function \"public: class QuantLib::Settings * __thiscall boost::thread_specific_ptr::get(void)const \" (?get@?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QBEPAVSettings@QuantLib@@XZ) C:\\QuantLib-1.5\\Examples\\Replication\\Replication.obj    Replication\nError   1287    error LNK2019: unresolved external symbol \"void * __cdecl boost::detail::get_tss_data(void const )\" (?get_tss_data@detail@boost@@YAPAXPBX@Z) referenced in function \"public: class QuantLib::Settings * __thiscall boost::thread_specific_ptr::get(void)const \" (?get@?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QBEPAVSettings@QuantLib@@XZ) C:\\QuantLib-1.5\\Examples\\EquityOption\\EquityOption.obj  EquityOption\nError   397 error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSeedGenerator@QuantLib@@@boost@@QAE@XZ) C:\\QuantLib-1.5\\Examples\\MarketModels\\QuantLib-vc100-mt.lib(mt19937uniformrng.obj)  MarketModels\nError   757 error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSeedGenerator@QuantLib@@@boost@@QAE@XZ) C:\\QuantLib-1.5\\Examples\\DiscreteHedging\\QuantLib-vc100-mt.lib(mt19937uniformrng.obj)   DiscreteHedging\nError   50  error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QAE@XZ)    C:\\QuantLib-1.5\\Examples\\Gaussian1dModels\\Gaussian1dModels.obj  Gaussian1dModels\nError   1039    error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QAE@XZ)    C:\\QuantLib-1.5\\Examples\\FRA\\FRA.obj    FRA\nError   1140    error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QAE@XZ)    C:\\QuantLib-1.5\\Examples\\ConvertibleBonds\\ConvertibleBonds.obj  ConvertibleBonds\nError   1229    error LNK2019: unresolved external symbol \"void __cdecl boost::detail::set_tss_data(void const ,class boost::shared_ptr,void ,bool)\" (?set_tss_data@detail@boost@@YAXPBXV?$shared_ptr@Utss_cleanup_function@detail@boost@@@2@PAX_N@Z) referenced in function \"public: __thiscall boost::thread_specific_ptr::~thread_specific_ptr(void)\" (??1?$thread_specific_ptr@VSettings@QuantLib@@@boost@@QAE@XZ)    C:\\QuantLib-1.5\\Examples\\Replication\\Replication.obj    Replication\n. Problem is all: I am able to build original GITHub (from Sourceforge) version of QuantLib V1.5, even after making Boost Change related to Patch i.e. (BOOST_SP_ENABLE_DEBUG_HOOKS_2)\nbut after copying all the files into the destination folders of QuantLib, i.e. in following from Patch folder -\n1 *******_1*_********\nQuantLib\\ql\\makefile.am\nQuantLib\\ql\\qldefine.hpp\nQuantLib\\ql\\userconfig.hpp\nTo C:/QuantLibV1.5\\ql\n2 *******_2*_********\nQuantLib\\ql\\patterns\\makefile.am\nQuantLib\\ql\\patterns\\observable.cpp\nQuantLib\\ql\\patterns\\observable.hpp\nQuantLib\\ql\\patterns\\singleton.hpp\nto C:/QuantLibV1.5\\ql\\Patterns\n3 *******_3*_********\nQuantLib\\test-suite\\makefile.am\nto C:/QuantLibV1.5\\test-suite\\\n4 *******_3*_********\nQuantLib\\configure.ac\nto C:/QuantLibV1.5\\\nand Finally Updating test-suite/quantlibtestsuite.cpp with Code snippet suggested by Klaus\nVC++ Directories -\nInclude Directories: C:\\local\\boost157M\\boost_1_57_0;$(IncludePath)\nLibrary Directories: C:\\local\\boost157M\\boost_1_57_0\\libs;$(LibraryPath)\nLinker:\nC:\\local\\boost157M\\boost_1_57_0\\libs;C:\\local\\boost157M\\boost_1_57_0\\stage\\lib;C:\\QuantLib-1.5\\lib\nBuild - and then all these compilation errors.\nI start getting these compilation errors! \n. Am I missing anything here?\n. Ok, all compiled and running. Will test the new DLLs over next few days, Thanks for all your help!\n. V 1.5 patched version has been running good for last few days, no issues so far (a bit more testing is still pending). \nI am going to compile the version that you have added with Boost 1.58, and post the results.\nThanks.\n. I used v1.6.2 patch with V1.6.2 quantlib, I see some similar build issues that I saw earlier with 1.5 version. Would be much more easier to build and integrate if version 1.6 ++ is going to include all these changes in the GIThub version. \nPS: I used Boost 1.59. \n. ",
    "curtgeen": "My bad on that. After cloning the correct version it's building but I'm still getting two errors. It seems that these are caused on mac osx 10.9 and 10.10 if you don't use the environment flags. The quantlib that's currently linked was installed via brew. I've searched for a solution but couldn't find it on either 1) how to get the brew installed version to use the environment flags; or 2) how to get the build process to use a different quantlib library where I did use the environment flags (at opt/local/lib). Sorry for the rookie questions, this is my first time trying to integrate a C library in ruby.\ncreating Makefile\ncompiling quantlib_wrap.cpp\nIn file included from quantlib_wrap.cpp:2647:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/quantlib.hpp:47:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/all.hpp:35:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/matrixutilities/all.hpp:4:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/matrixutilities/basisincompleteordered.hpp:25:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/valarray:4035:59: error: \n      'value_type' is a private member of\n      'boost::iterators::detail::operator_brackets_proxy<QuantLib::step_iterator<double\n      *> >'\n    __val_expr<_BinaryOp<__bit_shift_left<typename _Expr::value_type>,\n                                                          ^\nquantlib_wrap.cpp:8228:23: note: while substituting deduced template arguments\n      into function template 'operator<<' [with _Expr =\n      boost::iterators::detail::operator_brackets_proxy<QuantLib::step_iterator<double\n      *> >]\n                    s << (*self)[i][j];\n                      ^\nIn file included from quantlib_wrap.cpp:2647:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/quantlib.hpp:47:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/all.hpp:35:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/matrixutilities/all.hpp:4:\nIn file included from /usr/local/Cellar/quantlib/1.6.1/include/ql/math/matrixutilities/basisincompleteordered.hpp:25:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/valarray:4036:46: error: \n      'value_type' is a private member of\n      'boost::iterators::detail::operator_brackets_proxy<QuantLib::step_iterator<double\n      *> >'\n               __scalar_expr<typename _Expr::value_type>, _Expr> >\n                                             ^\n2 errors generated.\nmake: *** [quantlib_wrap.o] Error 1\n. ",
    "kuperov": "Thanks, Luigi. I can confirm that setting LDFLAGS and CXXFLAGS to \"-stdlib=libstdc++\" fixed SWIG compilation. (Unfortunately I'm now stuck with this issue, though, which appears to be unsolved on clang.)\n. ",
    "stephenwithav": "g++ on Debian 8/Jessie.\nHow do I link QuantLib?\n. Running make install now.  Want me to send a PR if this works?\n. Adding #cgo LDFLAGS: -lQuantLib eliminates those earlier errors.  Now I'm getting:\n```\ngithub.com/lballabio/quantlib/QuantLib-SWIG/SWIG\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8875: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8883: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8891: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8899: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8917: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8943: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:8944: undefined: ExerciseType\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:45020: undefined: BlackVarianceSurfaceExtrapolation\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:45038: undefined: BlackVarianceSurfaceExtrapolation\n/home/steven/repos/gopath/src/github.com/lballabio/quantlib/QuantLib-SWIG/SWIG/QuantLib.go:45038: too many errors\n```\nDo you have any ideas?\n. ",
    "jbcoe": "I'm looking into this now.\n. The build takes over 50 mins without getting to the test run on travis-ci machines. This is too long for free CI builds. Could the project be broken into components that can be built and tested in isolation?\nhttps://travis-ci.org/jbcoe/quantlib\n. How about non-easily? How would I start?\n. I'll close this issue as the timeout is considerable and is non-trivial to fix.\n. pull request submitted\n. closed\nThe need to use kahan accumulator will be removed as Ubuntu 12.04 LTS does not support it by default.\n. closes #342 \n. Ubuntu 12 LTS used by Travis CI does not have Boost >=1.47.\nI'll find out the actual version number and update this comment.\n. Odd. Travis-ci build fails as it can't find the sum_kahan accumulator:\nhttps://travis-ci.org/jbcoe/quantlib/jobs/87321226\nbut Ubuntu 12.04 has Boost 1.48 as @pcaspers and @lballabio said\nhttp://packages.ubuntu.com/precise/libboost-all-dev\nsum_khan was introduced in Boost 1.47\nhttp://marc.info/?l=boost-users&m=131740509419634\nhttp://www.boost.org/doc/libs/1_47_0/doc/html/accumulators/reference.html#header.boost.accumulators.statistics.sum_kahan_hpp\nIt's probably safe to upgrade the minimum version requirement. I'll look into the travis-ci issues.\n. I'll close this pull request as updating the minimum requirement is not the desired action.\n. ",
    "pazzo83": "This issue is resolved by changing the call to \"assign\" on line 5602 of quantlib_wrap.cpp (as referenced above) to swig::assign (I guess that is what was meant by adding the namespace).  Perhaps this is an issue with older compilers?  I haven't run into this issue on Mac OS X.\n. ",
    "jwg4": "Thank you @wegamekinglc This looks like a solution for us, I am trying it out now.\n. This worked perfectly, thank you very much.\n. This makes sense, thanks for the quick response.\n. ",
    "sercanatalik": "Yes, I only see the issue when testing&using swig.\nThanks \n. sorted, i had to switch to gcc5 and recompile boost159..all fine now\n. ",
    "jrvarma": "On Mon, Nov 23 2015 at 08:03:10 PM, Luigi Ballabio \nnotifications@github.com wrote:\n\nThanks, but we'll need some order if we're to be able to merge \nthis pull request.\nFirst: please don't rename files. We have version control to \ntrack changes :smile:  Renaming the files defeats the purpose \nand makes it more difficult to merge your changes.\nSecond: you created the pull request from your \nmaster. Unfortunately, this means that whatever you commit and \npush to your master is ending in the PR, too. It's probably \nbetter if you move the calendar change to a branch and recreate \nthe PR from there.\nSorry for all this mess. I do not have much experience with this.\n\nAm still not able to make this pull request work correctly after \ncouple of attempts. Will need to read up more about this process \nover the next few days.\n\nProf. Jayanth R. Varma, Indian Institute of Management,\n      Vastrapur, Ahmedabad 380 015 INDIA\nemail:    jrvarma@iimahd.ernet.in  OR  jrvarma@gmail.com\nTel:      +91-79-6632 4867 (Off)   +91-79-6632 5318 (Res)\nPersonal Homepage:   http://www.iimahd.ernet.in/~jrvarma/\nPersonal Blog:       http://www.iimahd.ernet.in/~jrvarma/blog\n\n. On Mon, Nov 23 2015 at 08:03:10 PM IST, Luigi Ballabio \nnotifications@github.com wrote:\n\nThanks, but we'll need some order if we're to be able to merge \nthis pull request.\n\nI hope that I have got things right this time around with the two \npull requests of today. If you can delete the old pull request of \nyesterday, you may please do so.\n\nFirst: please don't rename files. We have version control to \ntrack changes :smile:  Renaming the files defeats the purpose \nand makes it more difficult to merge your changes.\n\nThere was actually no file rename. What happened was that I did \nnot compose a commit message and then GitHub automatically \ngenerates this message about renaming files though the file name \nis not changed -- there are only some numbers 34/35/36 in the \nfolder names presumably to identify my fork. Anyway with a proper \ncommit message, things should be OK now. Githib still shows two \nfiles as changed and still has these numbers in my file. If I am \nstill making a mistake, please let me know. I have read the GitHub \nguides and they do not explain where these mysterious numbers come \nfrom and whether they are harmless.\n\nSecond: you created the pull request from your \nmaster. Unfortunately, this means that whatever you commit and \npush to your master is ending in the PR, too. It's probably \nbetter if you move the calendar change to a branch and recreate \nthe PR from there.\n\nThis time, I have pull from non master branches.\n\n\nProf. Jayanth R. Varma, Indian Institute of Management,\n      Vastrapur, Ahmedabad 380 015 INDIA\nemail:    jrvarma@iimahd.ernet.in  OR  jrvarma@gmail.com\nTel:      +91-79-6632 4867 (Off)   +91-79-6632 5318 (Res)\nPersonal Homepage:   http://www.iimahd.ernet.in/~jrvarma/\nPersonal Blog:       http://www.iimahd.ernet.in/~jrvarma/blog\n\n. On Tue, Nov 24 2015 at 05:26:29 PM IST, Luigi Ballabio \nnotifications@github.com wrote:\n\nNo, that's an actual file rename.  If I pull your request, I get \nan actual new file \nQuantLib34/ql35/time36/calendars37/saudiarabia.cpp.  Are you \nsure you don't have it on your machine?\nMy machine does not come into the picture because I am using the \nGitHub web interface to edit the file. I did not push from my \nmachine because I am running an older version of QuantLib to test \nmy code.\n\nProf. Jayanth R. Varma, Indian Institute of Management,\n      Vastrapur, Ahmedabad 380 015 INDIA\nemail:    jrvarma@iimahd.ernet.in  OR  jrvarma@gmail.com\nTel:      +91-79-6632 4867 (Off)   +91-79-6632 5318 (Res)\nPersonal Homepage:   http://www.iimahd.ernet.in/~jrvarma/\nPersonal Blog:       http://www.iimahd.ernet.in/~jrvarma/blog\n\n. Please ignore this pull request because of the unintentional file name. Another pull request created without file renames.\n. On Tue, Nov 24 2015 at 05:17:30 PM IST, Luigi Ballabio \nnotifications@github.com wrote:\nI can work with this, so there's no need to change it again, but \nyou've renamed QuantLib/ql/time/calendars/saudiarabia.cpp to \nQuantLib34/ql35/time36/calendars37/saudiarabia.cpp.\nIs it your environment playing tricks?\nI am simply editing the file directly in the browser using \nGitHib's web interface by cutting and pasting from my local \ncopy. So my environment should not come into play.  Precisely \nthese numbers (34,35,36) appear in the other patch that I \nsubmitted today. These numbers are a mystery to me.\n\nProf. Jayanth R. Varma, Indian Institute of Management,\n      Vastrapur, Ahmedabad 380 015 INDIA\nemail:    jrvarma@iimahd.ernet.in  OR  jrvarma@gmail.com\nTel:      +91-79-6632 4867 (Off)   +91-79-6632 5318 (Res)\nPersonal Homepage:   http://www.iimahd.ernet.in/~jrvarma/\nPersonal Blog:       http://www.iimahd.ernet.in/~jrvarma/blog\n\n. Please ignore this pull request. The folders get renamed when using Google Chrome (I found this happens in my other repos as well when editing a file inside a folder).\nSo I edited the file in Firefox and things seem OK. There is a new pull request for this\n. Will do so in future. Sorry for all the mess over the last two days.\n. \n",
    "sfondi": "@gouthambs It could be a good idea, but unfortunately I'm not familiar with SWIG, sorry.\n. ",
    "jeroen": ":thumbsup: :thumbsup:\n. ",
    "rimrockcapitalold": "Meant to merge to my local  v.1.7.x. branch instead of lballabio:v1.7.x. Please Ignore. \n. ",
    "smallnamespace": "@lballabio Thanks for the explanation.\nSo my issue is that I'm trying to build QL on OS X, and the build is looking for libboost_thread, whereas Boost was built tagged so the library is actually named libboost_thread-mt.\nI worked around it by adding a symlink, but is there a nicer way to do this through QL's configuration? Trying to pass -D_MT to the linker didn't seem to help.\n. ",
    "bozothegrey": "reported to new git. ",
    "midox007": "Yes there might be normally two floating rates, but I actually limited at moment the instrument to one fixed leg vs float leg as its is the case currently for vanilla swaps. As far as I understand, the vanilla swaps in Quantlib are fixed leg vs float leg in order to be supported by  the curve builder right ? \nMy next goal is to implement in Quantlib curve building using cross currency swaps (ex. USD discount curve with EUR funding). \n. "
}