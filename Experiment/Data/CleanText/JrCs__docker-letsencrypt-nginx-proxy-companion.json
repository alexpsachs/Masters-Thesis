{
    "DanTheColoradan": "Well, it appears to work when I use just the docker command :-/ Hmmm.\n. :clap: awesome.\n. ",
    "anoopr": "@DanTheColoradan I'm having the exact same issue with docker-compose. Have you been able to resolve it?\n. @DanTheColoradan @JrCs Tracked down the issue. This pull request fixes it!\n. ",
    "jacobtomlinson": "Same for me, updating docker fixed.\n. ",
    "JrCs": "Yes currently this container only work with docker 1.9.1.\nI'm working on a version that will work on all docker version\n. Done by 6f731e4716df67d5f0138f39d7d0c756145d4ae4\n. Every 3600 seconds it will check the certificates. Every certificates that will expire  in the next 10 days  are renew. \n. @wader sorry you're right. The certificates are renew every 30 days.\n. @ggramlich can't use --cidfile in docker-compose currently :(\nI will find a solution that work for everybody\n. Yes it's automatic.\nEvery 3600s it will check if a certs need to be renew and if it expires in less than 30 days (90/3) it will be renew automatically.\n. All you need to do is put your self signed certificates in the nginx certs directory.\nCerts are created with this container ONLY if the webserver container defines the LETSENCRYPT_XXXX environment variables.\n. @asmaloney exactly\n. @kachkaev We don't have dummy certs. Certs are created by letsencrypt container in the nginx certs directory automatically.\n. You can't create certs for .dev domain because i don't think the root .dev domain exists.\nFor your dev environment you can use the .com certificates create by letsencrypt and when you connect to the .dev site allow to use an invalid certificate (a .com certificate for a .dev domain).\nYou can also access you .dev sites using http instead of  https.\n. Just add some links in the nginx cert directory. Each must be name as a .dev domain (like www.a.my-project.dev) that point to the my-project.com multidomain certificate.\nNginx will use any certs that it will find in the nginx cert directory.\nBut i think it must be easier to access .dev domain directly (without https) and only proxyfied https to http the .com domains with nginx\n. @kachkaev Sorry but this companion is only used to create signed certificate from letsencrypt, no more no less.\nIf you want to create self-sign certificates use another container that will use the openssl tools to create this certificates.\n. If a particular vhost already exists in vhost.d it is modified has the default.\nCan you double check ?\n. Yes it automatically forward the well known uri to challenge files by modifying the vhost.d/default file or the vhost.d/yourdomain file if it exists\n. @ippa it's not the right place here.\nConfiguration of the nginx-proxy must be done by the nginx-proxy container.\nMy container is only used to create Let's Encrypt certificates, not to proxy web request.\n. My container call the nginx proxy container to recreate the nginx configuration with docker-gen.\nWhy don't you use the original nginx-proxy container with docker-gen in it ?\nIf you need to change the template that is used to create the nginx configuration you can mount bind the nginx.tpl with your configuration.\n. To use my container we need to know the container id of the docker-gen container.\n@konstantinj is your docker-gen container do an nginx reload ? if yes how ?\n. @konstantinj no the docker-gen command of the nginx-proxy call directly the nginx reload command (they are in the same container)\n. How the docker-gen image reload the nginx in the other container ?\n. A PR #20 is open to fix this issue.\n. Hi,\nsorry but it's not the right place to speak about nginx configuration.\nMy container only create letsencrypt certificates.\nI didin't know about to help you about your nginx problem.\nTry to report issues to author of docker-wordpress-nginx-ssh.\n. Hi,\ni really don't know how DEFAULT_HOST is working.\nYou should try to post an issue in the nginx-proxy github page.\nMy container only create letsencrypt certificates and do not manage nginx-proxy.\nIn the letsencrypt view i think you must have 2 differents certificates: one for domain.tld and one for subdomain.domain.tld.\n. Put all your domains in the LETSENCRYPT_HOST and it will create a multidomain certificate\n. If each container have their own subdomain, only define the subdomain in the LETSENCRYPT_HOST per container. So each container will have it's own certificate dedicated for the subdomain.\nIf you don't want to hit the cap use the same LETENCRYPT_HOST value (with all subdomain) for all containers.\n. Don't use https for you zetta container.\nnginx-proxy talk to local containers using pure http protocol. Not https.\nSo retry removing VIRTUAL_PROTO=https in your zetta container\n. Check that zetta.justbuchanan.com is well resolved to the ip of the nginx-proxy.\n. Check that /etc/nginx/vhost.d/defaultcontain configuration for the .well-known directory\n. Try also to remove the enviroment vraiables DEFAULT_HOST=example.comand VIRTUAL_HOST=example.com from the nginx-proxy container\n. In your web container you must specify your listen port with the environment variable VIRTUAL_PORT(see the documentation of nginx-proxy)\n. Yes you can mount nginx-proxy volumes /etc/nginx/vhost.d and /usr/share/nginx/htmlinto the docker-letsencrypt-nginx-proxy-companion\n. The problem is how to identify the nginx-proxy from the LE container using docker API\n. We can't bypass the function because we need to have the nginx-proxy cid\n. @OmgimAlexis I have create a dev image, can you test it ?\nYou must add the NGINX_PROXY_CID environment variable to my LE container.\n. Close by 0d6d1052701dcb19faf208b1250d4f83b486b559\n. Thanks nilroy, i will merge it as soon as possible\n. Will close #12\n. @nilroy the LE container have the docker-gen command so we doesn't need another docker-gen container, but only the right nginx.tmpl file\n. The problem is nginx.tmpl. I don\u2019t want to have a specific version in my container. \nThis container was solely created to generate letsencrypt certificates, not to manage nginx proxy configuration(s).\n. @nilroy yes but i need some time to review/test it.\n. @nitroy not needed it's already in the master branch.\n. @nitroy i'm currently thinking how to mix your PR and some enhancement i have.\n. @falcon15500 What modifications have you done in nginx.tmpl.\n. @nilroy and @falcon15500 can you try my dev branch (image dev created also) ?\n. Thanks @falcon15500, need some little enhancement and il will merge into the master branch.\n. Close by 0d6d1052701dcb19faf208b1250d4f83b486b559\n. No we can only group subdomains with a primary domain (aka examplea.com, doc.examplea.com, admin.examplea.com, www.examplea.com) using SAN.\n. @j16sdiz I need to check but if you define a LETSENCRYPT_HOST with the main domain then all the subdomains it must create only one SAN certificate with the domain and all subdmonain in it.\n. You mix abc.com and cde.com so you can only create ONE certificate:\nSAN=abc.com, cde.com, www.abc.com, www.cde.com, webmail.abc.com, webmal.cde.com, etc...\nIn ALL your containers defined LETSENCRYPT_HOST=abc.com, cde.com, www.abc.com, www.cde.com,webmail.abc.com,webmain.cde.com, etc....\nI think it must work\n. Are you sure that services like postfix can't use fullchain.pem as certificate ?\n. @jokogr the best is to use a different image container to create your certificates.\nYou can use this container with a VIRTUAL_HOST in your service docker containers to just create the certificates but it's not really elegant.\n. I don't have a docker image to suggest.\nThe best is perhaps to get a docker image that use the new dns challenge of letsencrypt, so you don't have to use a web server to create a certificate. \n. You need to create your own certificate and let's letsencrypt sign it for you.\nYou must use a native letsencrypt client to do that.\nThis container can't be use for that.\n. Thanks @mhils \n. Try to not use a VIRTUAL_PORT to test and made your web container to listen on port 80 to see if it's help.\n. For question\na), it think you can you the DEFAULT_HOST of nginx-proxy and/or add minimal site files in the /usr/share/html directory of the nginx-proxy.\nb) you can't create wilcard certificates with letsencrypt. I think you can create a conf in conf.d to redirect a non existent site to another. But you need to check how to do that in the README.md of the nginx-proxy (see Proxy-wide and Per-VIRTUAL_HOST configuration)\n. Thanks !\n. Images and readme was updated. Thanks.\n. Can you explain how to reproduce the problem ?\nI have try the example in the readme and i don't see an \"Invalid character in DNS name\".\n. Thanks for the explaination.\nBut for the docker run command on a terminal it's better to have the strings quoted.\n. Close by 63b8458\n. The RSA key is already a 4096 bit-length by default.\nUse a service like Qualsys SSL Server Test to list parameters of the generated certificates.\n. Thanks @disruptiveware.\nIf you like the container you can add a star to the project on GitHub and on DockerHub.\n. Thanks @fatk and @pascalandy\n. Hi, the directory /usr/share/nginx/html from the nginx-proxy container MUST be export and import in this letsencrypt container.\nIf you want to use docker-compose see #33\n. Thanks @fatk for finding the problem.\n. The directory /path/toin the README is an example and must be replace to a path to a directory on the host.\nAlso this directory must contain (if you follow the commands in the README):\n- A directory certs\n- The nginx.tmpl file\nPlease read the documentation about docker volumes (espacialy the Mount a host directory as a data volume)\n. @fatk thanks for you help.\nCan you provide an example of docker-compose.yml file (version 2) so i can add it in the README ?\n@flexbrane docker-gen is used to create the configuration of nginx when containers are create/remove.\nAlso you can use the ACME_CA_URIenvironment variable (see the README) for your tests to bypass the limits of certs generation\n. @flexbrane if you use the 3 containers you need to use the official nginx image (not the jwilder/nginx-proxy)\n. Look at the ACME_CA_URIenvironment variable in the README.\nIf you set its value to https://acme-staging.api.letsencrypt.org/directory you will using the ACME test server that don't have the 5 certs/week/domain limits.\n. Hi, no we can't remove VIRTUAL_HOST environment variable because it is use to configure nginx proxy and it is not used by this letsencrypt container.\nIf you don't have a VIRTUAL_HOST environment variable on your web container, the nginx proxy will not respond to requests for the domain.\n. Yes the letsencrypt container add some configurations to the nginx proxy.\nYes we need to change the nginx.tmpl to get this case, and nginx.tmpl is a template from nginx-proxy.\nI don't have a specific version of nginx.tmpl for this letsencrypt container. Each container use it's own environment variable (VIRTUAL_HOST for the docker-gen container and LETS_ENCRYPT_XXX for this container) and i don't want to mix all of them.\nThe nginx reverse proxy can be used with the docker-gen container without the letsencrypt container.\nThis container is just an add-ons to the nginx/docker-gen containers and it is not design to replace functionnality of one of them:\n- nginx container do the reverse proxy\n- docker-gen update the nginx proxy configuration when containers are create/remove\n- letsencrypt-nginx-proxy-companion create letsencrypt certificats\n. @sherter ok ~~i will add a LICENSE file~~ done\n. Do what you like.\ndocker-compose is easier to maintain and start the containers in right order.\n. You can't use an underscore at start of a dns domain.\nThis is not allowed:\nThe Internet standards (Requests for Comments) for protocols mandate that component hostname labels may contain only the ASCII letters 'a' through 'z' (in a case-insensitive manner), the digits '0' through '9', and the hyphen ('-'). The original specification of hostnames in RFC 952, mandated that labels could not start with a digit or with a hyphen, and must not end with a hyphen. However, a subsequent specification (RFC 1123) permitted hostname labels to start with digits. No other symbols, punctuation characters, or white space are permitted.\n. No. Read the conclusion:\n\nUnderscores are allowed in certain DNS entries\n\nSo you can use name starting with _ for SRV, TXT, etc.. entries but not for A, CNAME, MX entries.\n. Yes you must first remove the sub.example.com domain from the LETSENCRYPT_HOSTenv variable.\nYou must also remove the links in the certs directory so the docker-gen container (or nginx-proxy) will not create a configuration to redirect http to https for the sub.example.com.\n. Yes all the files that correspond to the sub.example.com domain\n. The best is to restart your web container\n. @ammmze this container is a compagnion to nginx in reverse proxy mode.\nIt is not designed to work in \"standalone\" mode.\nI think you must use a dedicated container (with the official letsencrypt client) to do it.\n. Using the nginx-proxy container the docker socket is bind into the container. So if the nginx-proxy container is compromised the attacker can use the docker socket to do some bad things.\nIf you use the Separate containers, the docker socket is not bind into the nginx container, that is much better in a security point of view.\n. The order of domain in the LETSENCRYPT_HOST is important !\nSo for you example use:\nLETSENCRYPT_HOST=willtho.com,www.willtho.com,mail.willtho.com\n. Yes but i think www and mail must be links and the directory must be the main domain willtho.com.\n. See https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples\n. 1) try a docker logs on docker-letsencrypt-nginx-proxy-companion and restart your fautly web container and watch if you see something.\n2) yes you can remove the certs and they will be recreate if it's works properly.\n. Like said in the REAME of the example site: https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples#docker-compose-v2 you need an unofficial version of nginx.tmpl to use version 2 of docker-compose.\n. I think you can convert the docker image to an .aci to use in Rkt.\nIt must work.\n. Thx for your comments.\nI will update the documentation but you can add a PR.\n. Done\n. If you open the url you will see the error:\n\nCould not connect to http://yourdomain.com/.well-known/acme-challenge/04Mtiy6quj2-29IuGgDGh3GDNUOBNu1iC5Qfya7VUCI\"\n\nSo it must be a misconfiguration. Perhaps the dns didn't point to the nginx proxy for the yourdomain.com host ?\n. done\n. It seems it can't connect to the acme server of letsencrypt.org.\nCheck that the dns and connections to internet are good.\nAlso double check the ACME_CA_URI variable if you have change it.\n. I didn't know unRAID.\nThe certificate will be renewed if you have a docker container with the right variables (LETS_ENCRYPT_XXXX) and that can be access from the internet through the nginx proxy.\n. Fixed in ae21e24\n. The first time (without any cert) nginx is not configured to proxy the https requests (because no certs exists).\nBut after the certs are created, the nginx configuration is changed to proxy the https request.\nSo i think you have a bad nginx.tmpl file or any other nginx configuration that create this issue.\nSo look closely the default.conf file. \n. ~~If i remember well (perhaps i'm wrong) verification is done using http protocol, not https protocol.\nCan you try to get the challenge file using http protocol ?~~\nThe .well-known/acme-challenge must be access with http or https protocol.\n. Perhaps the issue is the docker-compose fault ?\nHave you try to start the container in order manually without using docker-compose ?\n. @mvdstam can you try and make tests using the stable image instead of the latest one ?\n. @falcon15500 do you use a dedicated network for your container.\nIf yes can you check that the LE container can access the challenge files using the public ip ?\n. You need to connect the nginx proxy container to your dedicated network.\nIf you use a firewall check also that you can telnet the port 80 of the nginx proxy container from the LE container.\nAlso if you use a version of docker > 1.10 be sure to not start docker with the option --userland-proxy=false\n. Thx for all the informations\n. Need to check if we can use \"any number\" for DH size.\n. @briceburg what is your use case to need to change the number of bits for DH keys. It's already 2048 and give us a A+ grade on  Qualsys SSL Server Test ?\n. No more info. Closing this PR\n. Yes it must work as you describe.\nIf not can you post the logs ?\n. All seems ok except wiseadvices.com. Perhaps you create it before grouping all domains. So remove wiseadvices.com directory and relaunch the companion.\n. The \"main\" domain is the first domain set in LETSENCRYPT_HOST variable\n. Because it's the \"main\" domain. Open certificat details to see other domain that are in the certificat:\n\n. Remove all certs and restart companion.\n. No, it's the first one i'm sure.\nTry to declare one cert by one cert in LESTENCRYPT_HOST and see if it works\n. You must see this message in the logs:\n\nCreating/renewal $base_domain certificates...\n\nWhere $base_domain is your first host of LETSENCRYPT_HOST variable\n. Sorry i can't acces to the video at the moment. Check if the message in the logs is right.\n. So all certs must point to the weare.de.com directory ?\n. Check that a new certificat has been created (check details in certificate about creation date).\nYou can try also to remove adjaragroup from LETSENCRYPT_HOST and in the certs directory and restart the companion. If a new certificat is created you must not see adjaragroup in the common name.\n. It seems that simp_le create SAN with domain sort alphabetically. So the common name will be adjaragroup. But it's doesn't care because your certificat is valid for all alternate domains.\n. Yes i think.\n. The companion container doesn't use the letsencrypt client but simp_le.\nThere seem an issue open for that: https://github.com/kuba/simp_le/issues/72\n. Good !\n. Hi @Dinoshauer.\nNo the /etc/nginx/certs don't need to be mount rw in the nginx-proxy or nginx containers. This containers only read the certificates.\nOnly the companion need to have write access to the certs directory to write or update the certificates.\n. No because if you have a vhost declared it will override the default config.\nSo we need to declare the config in that specific vhost.\n. @benjamin-smith thank for the PR.\n. Closed. See #64 \n. Like @falcon15500 on #63 we must not change the nginx.tmpl file.\nThe challenge files are managed with vhosts.d/default: nginx_location.conf\n. There already a stable and latest tag.\nIs not enough ?\n. Ok i see, i will add version tag\n. By default all requests are redirect to https (using HSTS) as soon as a certificate is created.\n. The problem is that the official client didn't check if the certificat need to be update or not.\n. No i can make a patch to transform domainname to lower case.\nA PR is welcome if you have one.\n. It's also better if it is fix in simp_le client\n. It is normal that it will redirect http to https if you have a certificate installed.\nCheck if you have a certificate for you domain in the certs directory.\nIf yes check you can access the challenge file with https. If not check that your server is well configured to listen for https connections.\nAlso check if not relate to #55 \n. Yes wildcard is not support by letsencrypt. You need to add each domain in the LETS_ENCRYPT_HOST environment variable.\n. Can you give me your VIRTUAL_HOST and LETSENCRYPT_HOST variables ?\n. I prefer that the LETSENCRYPT_HOST is distinct from VIRTUAL_HOST\n. I think yes if you have the same LETSENCRYPT_HOST variable. Try yourself.\n. @smiklosovic try to create all the san in ONE certificate with:\n```\ngitlab:\nVIRTUAL_HOST=gitlab.domain.net\nLETSENCRYPT_HOST=domain.net,gitlab.domain.net,nexus.domain.net,sonar.domain.net\nnexus:\nVIRTUAL_HOST=nexus.domain.net\nLETSENCRYPT_HOST=domain.net,gitlab.domain.net,nexus.domain.net,sonar.domain.net\nsonar:\nVIRTUAL_HOST=sonar.domain.net\nLETSENCRYPT_HOST=domain.net,gitlab.domain.net,nexus.domain.net,sonar.domain.net\n``\n. try to put domain.net first on the list and add it into VIRTUAL_HOST for one container only\n. It 's ok to remove the dir with generated certs.\nPerhaps the problem is the client that verify the certs. If it works with all domains from a browser, it must work also from client.\n. If you set VIRTUAL_HOST correctly (1 domain, 1 container) it must work.\nAnd create a SAN certificat with LETSENCRYPT_HOST with all domain you need.\n. Any news ?\n. @b3nk3 the best is to look at the logs of the letsencrypt container.\nI don't think you can retrieve old certs.\n. @b3nk3 logs are not store in container. Use thedocker logscommand.\nYou can't request wildcard domain to letsencrypt. You need to specify each of them in LETSENCRYPT_HOST AND VIRTUAL_HOST (look at the readme)\n. If you have multiple backend webserver launch each one with docker and with the specific VIRTUAL_HOST/LETSENCRYPT_HOST variables.\n. This must works.\nPerhaps is a bad nginx.tmpl in nginx-proxy.\nTry to look at the generated/etc/nginx/conf.d/default.conf` nginx file.\n. The piwik container is not in the default.conf file.\nSo check your docker run to see if you are not done a mistake.\nVIRTUAL_HOST is only use in this case.\nAfter you start the piwik container IT MUST APPEAR in the default.conf file.\n. Thanks for the report\n. Hi @deadcyclo.\nI don't have time too to add new features to this companion.\nLook at the https://traefik.io project, perhaps you can do what you want with it.\n. @joaocc but the only-exposed option is used to ONLY detect change in \"backend\" web containers (that expose a/some port(s)).\nSo i don't understand why it can cause problem in the 3 containers configuration ?\n. Done\n. Look at logs of jrcs/letsencrypt-nginx-proxy-companion container\n. 2016-07-20 04:01:14,956:WARNING:simp_le:1303: www.babatundebusari.io was not successfully self-verified. CA is likely to fail as well!\nSo it seems that www.babatundebusari.io do not point to your nginx-proxy.\nAlso check you have a section for www.babatundebusari.io in your /etc/nginx/conf.d/default\n. Yes look here: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#optional-container-environment-variables about the ACME_CA_URI environment variable\n. It's nginx-proxy that intercept challenge request. So it must never proxy to your container for all the /.well-known paths.\nCheck your nginx.tmpl and your nginx configuration\n. There already a link in the readme file: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#examples\n. Yes the documentation is correct.\nSeparate each host in LETSENCRYPT_HOST with a comma.\n. Are the certs for autobazaris.sk generated correctly by letsencrypt ?\nIf yes your problem is from ngnix-proxy (or docker-gen container) and the nginx.tmpl file.\nTips: is ssl_ciphers xxx; in your configuration is correct ?\n. Please give me the logs of your containers\n. @SnowMB can you try with -only-exposed option removed ?\n. Idealy it will be great to add an example in https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples.\n. Thanks for the snippets.\nBut do we really need an orchestrator (swarm in that case) to launch 3 containers that it prefer to be start on the same host ?\n. Yes a better approach is perhaps to use https://traefik.io\n. Update done.\nClosed by 7b00e3f\n. It must work now with the new version\n. The problem is:\n++ LETSENCRYPT_b949687adea6_HOST=('')\nThis container was start with an empty  LETSENCRYPT_HOST environment variable.\n. If the upstream configuration is empty it's that the \"backend\" web server doesn't expose any port ?\nIf it is the case add a --expose port when you start the backend container\n. Try with publishing the port.. Please RTFM.\nExamples are here: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#examples\n. Sorry but I can't explain to everybody how to run docker containers. There are so many possibilities: docker-compose, kubernetes, mesos, docker run, etc....\n. Look the readme espacially https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#multi-domain-san-certificates.\nThere also an example to create multidomain certificats\n. The nginx proxy is not restart but reload.\nOnly the nginx proxy have the certificates so no other containers need to be restart/reload.\n. Exactly\n. The best is to only start one nginx-proxy. The problem was to reload ALL the nginx-proxy.\n. Updating certs is managed by simp_le, so we can \"watch only\" for new certificates.\nPerhaps the companion proxy is not the right solution for you. Look at traefik perhaps it's better in your case.\n. Like said in the log it seems that the nginx volumes are not mount into the letsencrypt container.\nI never use docker-compose to start the containers. For working docker-compose examples look in the README (in the examples section) \n. Have you fixed your problem ?. You need to open an issue in nginx-proxy repository as is not relate to letsencrypt container.\nPerhaps because of a specific docker version ?\n. Sorry @teohhanhui but you didn't reply to the reviews i have made (the 21 sept) so i have to modify the code on my own.. It's not managed by the letsencrypt container but by nginx-proxy.\nPost your issue over there.\n. In any case this is not a problem with the letsencrypt container, but with nginx-proxy.\nPerhaps you don't have the right nginx.tmpl file ?\nYou must first check that it works without the letsencrypt container, and with only nginx-proxy (or nginx + nginx gen).\nIf not, please, post your issue in the nginx-proxy repository.\n. Your issue is not related to the docker-letsencrypt-nginx-proxy-companion container..\nPlease post your issue to docker-letsencrypt-nginx-proxy-companion-examples.\n. Sorry but your issue is not related to this container.\nit's seems to be a docker specific issue.. Hi, the nginx configuration is not managed by the letsencrypt companion container. It's the responsability of nginx-proxy.\nSo you need to post your issue to the nginx-proxy project.\n. @ento can you fix the code with the reviews i have made ?. I think the best is to use labels to references each others containers ?. Is it working now for all and my latest container version ?. Closed by 8d3b188. Closed by 8724387. Closed by 8724387. Closed by 8724387. @Rid can you make a PR for this project ?. @dullin can you rebase your PR ?. All the commits are merge into the master branch.\nOnly the docker-gen-multi endpoints not merged. If it's really necessary, open a new PR for this.. Thanks for this PR.. Please made only ONE PR by functionnality/fix.\nCan you split and rebase your work to multiple PR ?\nThanks.. Seems all the patchs are already merged.\nOnly the docker-gen-multi not merged.. @nachokb check https://acme-v01.api.letsencrypt.org/acme/authz/kshaYAr5amwiMuTJRXrz1nI8_SCmzgkXNMUTyrWRQLc\nCurrently i can't access http://registry.seiel.com.ar/.well-known/acme-challenge/gmasXFBSuo0ERCdTXVp68DRyMpNyGC6B5LuzmAN4ig0\nSo check your nginx-proxy or your dns.. Are you using docker swarm v1.13 ?. Issue closed: no more information.. As i don't support docker-swarm, docker-compose and other tools to start the container, i think the best is to use a dedicated variable like in PR #126 to force the id of the nginx proxy container.\nPR are welcome.. Look at the url that simp_le give you.\nYou can find why your certificate can't be create.. This not the container that serve the file but nginx proxy container. Remove the directory and the links about your domain in the certs directory then restart your application container.. For kubernetes it's better to use traefik. Sorry, i don't support docker-compose to start the container.\nOnly the legacy docker run commands.\nLike @ggramlich said you can test some examples from https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples. You must change the nginx proxy configuration manually so your api requests will be redirect to your service.. See how to add the configuration for your domains in nginx-proxy: https://github.com/jwilder/nginx-proxy#per-virtual_host\nFor the companion, the best is perhaps to create a dummy container with the LETSENCRYPT_ variables.\nYou can also look at another solution: https://traefik.io. Thanks for the informations.. Sorry but i don't support docker-compose.\nAll the containers are start with a docker run command.. No you must use the proxy that is links to the domain. Check with the latest version of the container.. Sorry, i don't understand why the function fails if you are giving a hostname to your container ?\nThe docker API use container ID not hostname.. Commit 8b97f203\n@bnfinet can you check with the dev version of the container ?. @cpu thx to have replied to @de-robat . The best is perhaps to use another solution like traefik. Hi, why do you want to remove the -only-exposed option ?\nThis option is used to select containers with exposed port(s) (which is the case if you want to server http requests).. @thomasleveil thanks a lot for the study.\nI really don't want to maintain my own version of the template.\nIs it not possible to update the template do work in the 2 cases (one or two nginx-proxy/docker-gen containers) ?\nIf not, why the nginx-proxy project do not support 2 versions of the template (it is said, in the readme, that the containers can be separated containers) ?. Merci @thomasleveil . @joantune yes you can proceed with a PR to use labels instead of volumes_from to get the container id.. Thanks. Please post an issue to nginx-proxy as is not related to this container.. @1beb yes we can post links in the readme to working templates if we have ones.. You didn't configure properly the access to your domain from internet.\nPlease read the log:\n2017-02-23 06:55:17,009:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X.\nand especially: \nhttps://acme-v01.api.letsencrypt.org/acme/authz/ABjPJkNYIAs0hmysB3RuQTX3SoZq-MomHCZ5EeCXWig. If you want to generate a certificate for example.com the ip of example.com must be the ip where the nginx-proxy container listen.. Close by #181. Changes was already made.\nClosed by b002a6bfa56db3698722907a23e1a9dbc19eb46d. Hi @ekkis.\nNo i don't want to include nginx.tmpl in the container because it is a nginx proxy file and it's not used/needed by the letsencrypt container.\nThe best is to add a working version of nginx.tmpl to your repository and mount bind the file into the nginx proxy at launch.. Hi @ekkis, thanks for your PR but i don't want to add files specific to the manner that the container are start (in this PR docker-compose).\nThis project contain only the container and the basic methods to start it (using docker run only command). There so many different manners/environment to start the container that i don't want to support.\nSo if you want to propose a manner to start the container with docker compose v3, the best is to create your own repository with the examples/files that are needed to work.\nThen i can create a link on the README page to your repository like i already done for other people.. @ekkis sorry for this but like i said in #202 i don't want to include the nginx.tmpl file into my letsencrypt container. Closed by #231. Thanks @buchdag . For deployment other than pure docker run, we use links to other repositories in the README (topic examples.\nCreate your own repository and i will create a link for it.. Closed by #229 . @XPLOT1ON  what is your use case to need to change the number of bits for DH keys. It's already 2048 and give us a A+ grade on Qualsys SSL Server Test ?. @buchdag is it ok to merge this PR ?. Fixed by #282 . LGTM. lgtm. @buchdag so we can close it ?\n. No it's ok for me, if we have usefull debug trace.\nPerhaps a DEV variable to allow full bash debug (with set-x) if you think it can be usefull for us.. @buchdag i'm agree with you.. If the nginx process can read the certs files it's good.. Feel free to choose. Just a little sentence to said that we can use default self-signed certificates.. It 's better to use\nif [[ -n\nthan\nif [[ ! -z. Sed is not necessary here. Instead use\nbash\nexport NGINX_DOCKER_GEN_CONTAINER=$(echo ${!NGINX_DOCKER_GEN_LINKED_CONTAINER_ENVVAR#/*}). Yes it will better to use a fully qualified domain name.\n@emmetog can you make the changes ?. Don't force the user to add DH_PARAM_SIZE environment variable. If not set the default must be 2048. Add something like\nbash\n: \"${DH_PARAM_SIZE:=2048}\"\nto have a default value for DH_PARAM_SIZE variable. If prefer that you use [[ -n \"${base_domain// }\" ]] && .... I prefer not to depend of the content of the dockerfile.\nCloser to the code is better.. Is it normal to use a static IP here ?. ",
    "wader": "Ok, thanks! you sure it's 10 days? is it just the default used by simple_le? https://github.com/kuba/simp_le/blob/ecf4290c4f7863bb5427b50cdd78bc3a5df79176/simp_le.py#L72 that seems to be 30 days (90 days / 3).\n. ",
    "atomaka": "This is actually an issue with links to the key and certificates as well.  I'm updating to account for that.  Will rebase when complete.\n. Should be done messing around with with this now, @JrCs.\n. ",
    "ggramlich": "Just some ideas from stackoverflow, which should work for me and hopefully everybody:\nUse --cidfile Option\nhttp://stackoverflow.com/a/26980210/32679\nGo for a specific line from the output, like the cpu line\nhttp://stackoverflow.com/a/28483314/32679\n. Thanks so much.\nI was just able to make my first https request to a gogs server behind my dyndns address. This is freaking awesome :-)\n. In the meantime I switched over to traefik. Took me a little longer to configure, but the arm image is up to date and, unlike the nginx-proxy and the companion, no breaking changes.\nhttps://hub.docker.com/r/hypriot/rpi-traefik/\nhttps://hub.docker.com/r/nsteinmetz/traefik-arm/\n. Take a look at your volumes:\nyou are mapping the docker.sock to /tmp/docker.sock inside the container.\nThis is correct for nginx-proxy, but not for jrcs/letsencrypt-nginx-proxy-companion\nIn jrcs/letsencrypt-nginx-proxy-companion you need\n/var/run/docker.sock:/var/run/docker.sock:ro\nYou might want to take a look at\nhttps://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples/tree/master/docker-compose\n. This question belongs to https://github.com/jwilder/nginx-proxy\nSee https://github.com/jwilder/nginx-proxy#how-ssl-support-works\nThe ENV Variable HTTPS_METHOD controls the behavior.\n. It looks like, you forgot to define WORDPRESS_DB_USER=wordpress for the wordpress container.\n. https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples. You are using the same volume for all the directories. Use different volumes for each dir or at least for the certs.. You can correct me, if I am wrong. But you can imagine the volume being a folder from the Docker host machine that is mounted inside the container. So you mount the same folder to multiple folders inside the container.\n- nginxstore:/etc/nginx/certs:rw\n      - nginxstore:/etc/nginx/conf.d\n      - nginxstore:/etc/nginx/vhost.d\n      - nginxstore:/usr/share/nginx/html\n      - nginxstore:/etc/test\nThey all point to the same physical folder, but you expect to see the certificates in some of those mount points, but not on others. How should this work?\n. ",
    "ulm0": "I know support for other platform is not that important, still it would be great to have an official image of this project for armhf. Thing is you can't set proxy headers in traefik yet, as you do in nginx. ",
    "asmaloney": "OK -  thanks.  That might be worth adding to the README.\n. Just to clarify - if I don't set the env vars, this container will still see the self-signed certs in the certs directory and modify the nginx config to pick them up and use them, it just won't try to create or renew them?\n. Great, thanks!  And thank you again for creating this.  Very helpful.\n. The solution I used wasn't exactly awesome, but it got me where I needed to go.\nI did this a while ago, so I hope I'm not missing steps.  I did the following:\n- took docker-letsencrypt-nginx-proxy-companion completely out of the loop by not passing LETSENCRYPT_HOST\n- generated a self-signed cert: openssl req -x509 -days 365 -keyout localhost.key -out localhost.crt\n- copied the localhost.crt  and localhost.key files into my certs directory\n- changed VIRTUAL_HOST in my run command to point to localhost: -e \"VIRTUAL_HOST=localhost\"\nI only used this on one domain at a time, but I imagine for multiple domains you could generate the certs as above with foo.local instead og localhost and then just make sure your host system resolves foo.local properly?\n. Didn't restart yet, but the log shows this:\n2016-04-04 14:09:24,519:ERROR:acme.challenges:267: Unable to reach http://www.asmaloney.com/.well-known/acme-challenge/DRNqgLaUJSeHAxTOj-f-u1YprCengpiw9Jyd_-wUhqk: hostname 'www.asmaloney.com' doesn't match either of 'asmaloney.com', 'andymaloney.com'\n2016-04-04 14:09:24,520:WARNING:simp_le:1292: www.asmaloney.com was not successfully self-verified. CA is likely to fail as well!\n...\n2016-04-04 14:09:28,178:ERROR:simp_le:1260: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/fS6cBwFyU0tat6HGwqEPWZUZMvmGz4JDJQGO_rEUnCg\nI can go to the site when using \"www\", so it is accessible, and the \"www\" CNAME is set up properly.  All three sites behind nginx use the same cert directory and are all mounted the same way.\n. Don't understand what was wrong (which is disconcerting), but I removed the certs & restarted and it generated new ones correctly.\n. ",
    "kachkaev": "@JrCs could you please extend README.md a bit to help newcomers configure the dev environment? My app consists of a few docker-compose.yml files, the first of which sets up nginx/docker-gen/letsencrypt bundle. Other services are started later and expect the traffic to arrive from that bundle. When I'm on localhost, my root domain name is my-project.dev. The services I start are at a.my-project.dev, b.my-project.dev, etc. Because all the traffic is expected to go via https and letsencrypt fails to get the right certs, I can't open anything in the browser. Would be good to know in which folders and in what format to put these dummy certs you are mentioning.\n. @JrCs OK, thank you. I'm new to letsencrypt, so might be asking stupid questions. Given the configuration of the services I shared above, how would recommend organising the development environment?\nI would like my future dockerized services my-project.com, a.my-project.com and b.my-project.com to stay behind nginx / docker-gen & letsencrypt even in development, while I play with them at my-project.dev, a.my-project.dev and b.my-project.dev. This means that there should be some mocking of https certs on my localhost so that I could open .dev domains in the browser in https mode. This will allow me to test the full stack before putting it to production.\nWhat should I tweak to be able to use the same dockeer-compose.yml files in dev and prod (with different .env, of course)?\n. @JrCs this suggests that I can have a bunch of files on my laptop that represent a certificate for some domain (which is not any of my dev domains, of course). What I should do is to copy these files into /certs/ folder that nginx picks and then rename them somehow so that they represent a.my-project.dev and www.a.my-project.dev, for instance. What is unclear to me is what files to take and where to put them. I'm happy with a security warning in a browser when I access *.dev.\nThere could be a section in your readme that helped in such case. It could provide a link to the files that represent an invalid certificate and explain where to put these files to mock a successfully generated certificate. Nginx proxy will swallow them and will enable local testing of the complete stack of the docker services.\nWould be really good if you could help with this.\n. Or maybe even docker-letsencrypt-nginx-proxy-companion could create some fake dev-mode certificates for my domains if I pass it some flag via an ENV variable? This would be just perfect!\n. I've been trying to copy and rename different files inside /etc/nginx/certs, but never got to a point when they were picked by nginx.\nLooks like local testing of https in a multi-domain project is quite a pain these days even maybe if you are knowledgeable. You first have to obtain a bunch of files that represent some domain and then for each new domain manually go to /etc/nginx/certs and create symlinks. Then there's probably a need to trigger some hook afterwards.\nAn ideal solution would be just to start the container with something like SELF_SIGNED=true or DUMMY_CERTS=true or ACME_CI_URI=dummy to completely mock letsencrypt requests. Getting a red crossed lock icon for my-super-domain.dev should not take time at all with such a nice bundle of containers sitting in the very front of the web requests (I mean nginx, docker-gen and letsencrypt companion). \n@asmaloney @JrCs could you please suggest some little cheat sheet on what to do to enable self-signed (or what ever dummy) certificates for the development domains? Let's assume I don't have any certificate in my local filesystem and I also don't have a production server yet (i.e. I can't copy my-super-domain.com.pem or whatever from there).\n. Thanks @asmaloney!\nYeah, this looks a bit tedious to do apply, especially if you want to have multiple domains and use dockercompose. I'm using a combination of variables from .env in my docker-compose.yml and the configs often contain the following:\nservices:\n  web:\n    environment:\n      - VIRTUAL_HOST=${SUBDOMAIN}.${ROOT_HOST},www.${SUBDOMAIN}.${ROOT_HOST}\n      - VIRTUAL_PORT=80\n      - VIRTUAL_NETWORK=proxy\n      - LETSENCRYPT_HOST=${SUBDOMAIN}.${ROOT_HOST},www.${SUBDOMAIN}.${ROOT_HOST}\n      - LETSENCRYPT_EMAIL=admin@${ROOT_HOST}\nMy goal is to start app1-prod.my-project.dev, app1-next.my-project.dev, app2.my-project.dev, etc. and then re-use the same git repos and images on the server just by changing ROOT_HOST and some DEV flag in the .env files. Rather than testing the containers locally one by one I see a huge benefit in running the whole project together. If letsencrypt-nginx-proxy-companion could work in some dummy cert mode on a local machine while I'm playing with https://*.my-project.dev, it would be awesome.\n. @JrCs could you please consider automating self-signed certificates as an extra dev mode option in the companion? What is your opinion on this?\n. @JrCs that's a bit of a shame as such functionality would be useful in some dev workflows, but I understand your view. Keeping the list of features as small as possible is a great, not a bad thing!\nI might do a small investigation later on how to make https available on a local machine while testing websites behind nginx reverse-proxy and docker-gen. The goal would be to exclude any manual work and minimise the difference between docker-compose.yml on the local machine and on the real servers. Drop your ideas here if you're in the same situation as I am!\n. Thanks a lot for reacting to this so quickly @JrCs!\nHere's the ToS diff (if anyone is interested in what they sign):\nhttps://letsencrypt.org/documents/LE-SA-v1.0.1-v1.1.1-diff.docx\nMore links to letsencrypt documents:\nhttps://letsencrypt.org/repository/\n. @alastaircoote that must be something else. Just got the same error while trying to get a cert for a .\u0440\u0444 domain for the first time and got this (it is defined as .xn--p1ai in my ENV). Tried replacing jrcs/letsencrypt-nginx-proxy-companion with thomastweets/docker-letsencrypt-nginx-proxy-companion, but that did not help too.\nIt seems like this repo's image has got a right hash for the ToS because they haven't changed anything since August and I've been successfully getting certs for ASCII (non-IDE) domains since then.\nThis issue is likely to be a duplicate for https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/130, which is probably still topical although marked as fixed. The reason why I decided to get a cert for an IDE domain is because they became supported by Letsencrypt just a few hours ago: https://github.com/letsencrypt/boulder/issues/2277#issuecomment-265830438\n. /cc  @jsha. ",
    "hadim": "That feature would be really helpful !!!. ",
    "mvigneron": "Hello @kachkaev,\nI am in the same situation. I would like to have https available in developpement environnement. did you manage to do that ? \nThanks for your help. ",
    "buchdag": "```\ndocker exec your-le-companion-container \\\n    openssl req -x509 \\\n    -newkey rsa:4096 \\\n    -sha256 \\\n    -nodes \\\n    -days 365 \\\n    -subj '/CN=yourdomain.tld'  \\\n    -keyout /etc/nginx/certs/yourdomain.tld.key \\\n    -out /etc/nginx/certs/yourdomain.tld.crt\ndocker exec nginx-proxy nginx -s reload\n``. @psytron is it the same issue as #373 and #411 ? It seems to be.. @bfayers on theletsencrypt-nginx-proxy-companion` container\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#optional-container-environment-variables. @krystalcode #277 #282 . Closed due to old age.. @domdorn that solved failing certificate validations for me as well, many thanks.. @tomajask > Hi ! jwilder/nginx-proxy and jwilder/docker-gen are not supposed to be used together, the later is meant to be used with the official nginx image : https://github.com/jwilder/nginx-proxy#separate-containers\n@Routhinator > I had that issue with non port 80 services as well, maybe because i wasn't using the  \"VIRTUAL_PORT\" environment variable (I believe I wasn't supposed to, as the container was exposing onyl one port) ? In thoses cases, @domdorn modification of nginx.tmpl solved it, but the one suggested by @Nierrrrrrr did not.. I confirm that #192 resolve the failed validation issue without modifying the nginx.tmpl file.. This was supposedly fixed by #192, reverted, then fixed again by #335 . Issue closed due to age.. Fixed by #232, closing the issue.. Issue closed due to age.. This has been closed by #165 . This should no longer be relevant after #491 #499 and #516 . This was fixed on master by commit 86ee879. An experimental feature allowing to generate certificates from a config file instead of containers env var (inspired by @ymettier PR #220) has been added to dev.\nThis instructions are here. Any feedback is welcome.\nClosing in favor of #368 so we can keep track of this in a single issue.. @JrCs is there something preventing this from being merged ?. Duplicate of #242 so closing to have only one issue tracking this.. LE does follow 301 redirects.\n192 was merged, then reverted as it proved problematic and things seems to have been working fine since, I don't think this issue is relevant anymore so I'm going to close it.. I had to do the same modification to my nginx.tmpl to solve a similar issue. I'd like to know about other solutions as well (which might or might not be better than maintaining our own modified nginx.tmpl).. #192 Seems to be the correct solution, works straight out of the box with vanilla nginx.tmpl file.. #192 has been merged, reverted, then merged back again and should be here to stay. Closing.. SAN indeed works only by discrete container, there is currently no alternative names merging logic across containers. The idea is interesting but I doubt it will be feasible any time soon.. docker-letsencrypt-nginx-proxy-companion should create a file named default in vhost.d with the following content :\n```\nStart of configuration add by letsencrypt container\nlocation /.well-known/acme-challenge/ {\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\nEnd of configuration add by letsencrypt container\n```\nTesting with a setup similar to yours, it looks like the correct default file isn't created in the host volume when docker-compose start the containers so the validation fails (I just got an empty default file), but it does get created after the first failed validation, which would explain why you get a duplicate location notification.\nI'd guess that if you add the default file with the correct location for /.well-known/acme-challenge/ in your vhost.d before you start the containers, validation will work.\nEDIT:\ndamn, the file is zeroed again when the containers exit, so that's only a very short term fix.\nBy the way, If you get yet another domain validation error despite having the correct default file, you might want to take a look at #192  . The SSL configuration is mostly provided by the nginx.tmpl file so this issue is more immediately relevant to jwilder/nginx-proxy than it is to this project.\nThe F rating from CryptCheck is mostly due to TLSv1 and TLSv1.1 support. Remove them from the nginx.tmpl you're using and you'll obtain an A on CryptCheck.\nFor an A+ you'll need to remove the ciphers that do not permit Perfect Forward Secrecy from the next line, namely:\nAES256-GCM-SHA384\nAES256-SHA\nAES256-SHA256\nAES128-GCM-SHA256\nAES128-SHA\nAES128-SHA256. You can now do this in an easier way if you use the latest version of nginx.tmpl: juste add the environment variable SSL_POLICY set to Mozilla-Modern to your proxyed container(s).. Hi Chris\nYou have to add\n--volumes-from nginx-proxy\nto the docker run command for letsencrypt-nginx-proxy-companion in order to give it access to the volumes used by the nginx-proxy container.. Could that be a bug on simp_le side rather than on letsencrypt-nginx-proxy-companion side ?\nThe container appears to be issuing the simp_le certificate creation command every 3600 seconds, which should trigger certificate renewal for certificates who are still valid for less than a fixed default duration.\nSpeaking of simp_le it looks like the original project https://github.com/kuba/simp_le has been abandoned by its author is no longer actively maintained. This fork is still in active development : https://github.com/zenhack/simp_le\nAnyway if auto renew is not working at all that's a pretty serious bug.\nIs there a suggested way to test / help ? (I don't have any certs nearing expiration at the moment)\nEdit : \nOr maybe the same issue as #121 and proposed fix #165 ?. I just watched one of my certificates getting correctly auto renewed, perfectly on time (as soon as its validity went under 30 days / 720 hours) but as no change in configuration where picked up by docker-gen, it did not issue SIGHUP to the nginx container and the proxy was still serving the old certificate for this page, valid until may 23.\nAfter a container restart the correct, renewed certificate is served, valid until august 22.\nSo certificate renewal does happen, but the proxy does not use the renewed certificates without a container restart.\nPR #165 is aiming to fix this.\nI'm using Docker version 17.05.0-ce, and the docker-letsencrypt-nginx-proxy-companion container that correctly renewed the certificates has all the commits up to b002a6b\nI have another certificate scheduled for renewal in 17 days, I'll try to switch to a version of the container with #165 fix included before renewal happen to see if the fix works correctly.. I confirm that #165 fix works and that the container now properly reload the nginx proxy to have it serve the new certificates as soon as they've been renewed. No need to restart it anymore.\nDo not forget to use the env variable NGINX_PROXY_CONTAINER=your_nginx-proxy_container if you don't or can't use volumes_from. This is not the same issue as #211 . Fixed by #165, closing.. Hi ekkis,\nYou docker-compose file have several errors : \n\nyou have to use the exact container name you gave to your nginx container on the command: key of the docker-gen container (-notify-sighup nginx if it's named nginx, -notify-sighup nginx-proxy if it's named nginx-proxy).\nI don't think links: keys are of any use here.\nI'm really unsure that setting the volume path once on the first container then using only the volume name on subsequent containers works, I've seen it discussed somewhere else too, tried it, and it did not seem to work. It's not on the compose file reference either. Even if it did work, it would mean the letsencrypt companion container would not be able to write certificates as it would inherit :ro  permissions on the nginx-ssl volume from the nginx container.\nI think the labels and environment list syntax are wrong (you can use docker-compose config to check your file's yaml syntax)\nThe containers will be attached to a new network (created automatically) when you docker-compose up your file. If you don't attach containers to be proxyed to the same network, it won't work. From what I understood, the preferred solution is to manually create a new network beforehand and use it as default network on the proxy docker-compose file and on every container you want to proxy.\n\nHere is the working docker-compose file I'm currently using, if it can be of any use : \n```\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.12\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs:ro\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\n    restart: on-failure\ndockergen:\n    image: jwilder/docker-gen:0.7.3\n    container_name: nginx-proxy-gen\n    depends_on:\n      - nginx\n    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n    restart: on-failure\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    container_name: nginx-proxy-le\n    depends_on:\n      - nginx\n      - dockergen\n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=nginx-proxy-gen\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: on-failure\nvolumes:\n  conf:\n  vhost:\n  html:\n  certs:\nDo not forget to 'docker network create nginx-proxy' before launch\nand to add '--network nginx-proxy' to proxyed containers.\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nDeclaring the volume globally and listing them in every container that need them is indeed the way you're supposed to do it if you want to use docker compose v3 file.. If it works for you I'll give another try with volume declared this way, that's way cleaner than having to repeat the path every time.\nI got the container dependencies in reverse order from yours, because the way I see it a running nginx container with a generated nginx config is required for letsencrypt to perform the domain based challenge validation.\nRegarding network, I manage all my services with systemd service file and docker-compose files, even if they only run a single container (because I find it easier an cleaner to edit a yaml file than a multi line or very long command in a systemd service file). So I actually don't use \"--network nginx-proxy\" with docker run but rather add the external network nginx-proxy as default network on the docker-compose file for containers that need to be proxyed.\nIf I don't add an external default network for those other services managed by a docker-compose file, docker-composer will create one automatically upon launch and it will pretty quickly end up being a mess of auto created network. Plus using an external network ensure that docker-compose won't remove it or try to.. @lounagen \nI did not know the bit about \"real\" interface naming with --opt com.docker.network.bridge.name, that's super useful, thank you.. It's not the default because whilst being more secure it is harder to configure. I prefer that people try and understand the nginx-proxy + le companion setup first rather than jumping to the three containers setup rigth away and hitting configuration issues.\nAlso the fact that the three containers setup is more secure doesn't mean that the two containers setup is unsafe. It's probably fine for most people, hence being presented as the default.\nFor example compose files under vcs, have a look at https://github.com/buchdag/letsencrypt-nginx-proxy-companion-compose. Hopefully this issue is not relevant anymore. Closing.. https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#lets-encrypt ?. @revolunet simp_le will now automatically clean the challenge files after the authorization has either succeeded or failed. I can assure you that the file won't be deleted before the request happen.. This is an old issue. Closing.. I'm having this too BUT right after that I get another request that nginx handles correctly and the validation ends up succeeding despite the \"CA marked some of the authorizations as invalid.\" warning. I don't get what's going on at all.\nI was already using a version of the container including #192 when I noticed this behavior.. Sounds like misconfiguration or outdated container somewhere, one of my own production setups correctly renewed two certificates the past two weeks, and correctly generated a new one for testing purpose just now.\nnginx-proxy-le | 2017-06-14 22:07:26,126:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\nnginx-proxy-le | 2017-06-14 22:07:27,307:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): test.abcde.com\nnginx-proxy    | test.abcde.com 172.18.0.1 - - [14/Jun/2017:22:07:27 +0000] \"GET /.well-known/acme-challenge/FzjWnaKV8NJLeseNr8AyH0Ky3R0wWMt49qUa5L62QTA HTTP/1.1\" 200 87 \"-\" \"python-requests/2.8.1\"\nnginx-proxy-le | 2017-06-14 22:07:27,328:INFO:simp_le:1305: test.abcde.com was successfully self-verified\nnginx-proxy-le | 2017-06-14 22:07:27,573:INFO:simp_le:1313: Generating new certificate private key\nnginx-proxy    | test.abcde.com 66.133.109.36 - - [14/Jun/2017:22:07:27 +0000] \"GET /.well-known/acme-challenge/FzjWnaKV8NJLeseNr8AyH0Ky3R0wWMt49qUa5L62QTA HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\nnginx-proxy-le | 2017-06-14 22:07:28,954:INFO:simp_le:391: Saving account_key.json\nnginx-proxy-le | 2017-06-14 22:07:28,956:INFO:simp_le:391: Saving key.pem\nnginx-proxy-le | 2017-06-14 22:07:28,957:INFO:simp_le:391: Saving chain.pem\nnginx-proxy-le | 2017-06-14 22:07:28,958:INFO:simp_le:391: Saving fullchain.pem\nnginx-proxy-le | 2017-06-14 22:07:28,958:INFO:simp_le:391: Saving cert.pem\nnginx-proxy-le | Reloading nginx docker-gen (using separate container nginx-proxy-gen)...\nNo LE challenge request passed to the proxyed container anymore, I have no idea why I got that last month on another server, I probably had a configuration issue myself that I don't even remember fixing.\nCould you tell us more about how you run the nginx-proxy + letsencrypt-companion containers ?. Unfortunately I am totally unfamiliar both with docker cloud and with the single container approach to nginx-proxy, so I don't think I'll be able to help you troubleshoot much. If it can be of any help, here is my working docker-compose file: \n```\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.13.1\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\ndockergen:\n    image: jwilder/docker-gen:0.7.3\n    container_name: nginx-proxy-gen\n    depends_on:\n      - nginx\n    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-proxy-le\n    depends_on:\n      - nginx\n      - dockergen\n    environment:\n      NGINX_PROXY_CONTAINER: nginx-proxy\n      NGINX_DOCKER_GEN_CONTAINER: nginx-proxy-gen\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs\n      - /var/run/docker.sock:/var/run/docker.sock:ro\nvolumes:\n  conf:\n  vhost:\n  html:\n  certs:\nDo not forget to 'docker network create nginx-proxy' before launch, and to add '--network nginx-proxy' to proxyed containers.\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nI get the nginx.tmpl file (the exact version I'm using right now is this one), create the network nginx-proxy, then I'm good to go.\nYou can use volumes_from: if you switch back to version: '2'. Just tested it again on a fresh install of debian 8 and docker.\nsimp_le self-verification fails while on my ubuntu 16.x and 17.x servers it works ok. I'll do more test later and try to understand why.\nverification by LE then proceeds ok, the certificate gets created and I can browse to my test app.\nnginx-proxy-le | 2017-06-15 08:49:20,497:INFO:simp_le:1211: Generating new account key\nnginx-proxy-le | 2017-06-15 08:49:22,055:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nnginx-proxy-le | 2017-06-15 08:49:22,882:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\nnginx-proxy-le | 2017-06-15 08:49:23,893:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): test.abcde.com\nnginx-proxy-le | 2017-06-15 08:49:23,897:WARNING:simp_le:1303: test.abcde.com was not successfully self-verified. CA is likely to fail as well!\nnginx-proxy-le | 2017-06-15 08:49:24,244:INFO:simp_le:1313: Generating new certificate private key\nnginx-proxy    | test.abcde.com 66.133.109.36 - - [15/Jun/2017:08:49:24 +0000] \"GET /.well-known/acme-challenge/GXIeYCfbB25DnA2kB8r9HlvW0fFPLl3tgh2_axZcGho HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\nnginx-proxy-le | 2017-06-15 08:49:26,602:INFO:simp_le:391: Saving account_key.json\nnginx-proxy-le | 2017-06-15 08:49:26,603:INFO:simp_le:391: Saving key.pem\nnginx-proxy-le | 2017-06-15 08:49:26,604:INFO:simp_le:391: Saving chain.pem\nnginx-proxy-le | 2017-06-15 08:49:26,604:INFO:simp_le:391: Saving fullchain.pem\nnginx-proxy-le | 2017-06-15 08:49:26,605:INFO:simp_le:391: Saving cert.pem\nnginx-proxy-le | Reloading nginx docker-gen (using separate container nginx-proxy-gen)...\ntest.abcde.com | 2017/06/15 08:49:23 [error] 5#5: *1 open() \"/usr/share/nginx/html/.well-known/acme-challenge/GXIeYCfbB25DnA2kB8r9HlvW0fFPLl3tgh2_axZcGho\" failed (2: No such file or directory), client: 172.18.0.4, server: localhost, request: \"GET /.well-known/acme-challenge/GXIeYCfbB25DnA2kB8r9HlvW0fFPLl3tgh2_axZcGho HTTP/1.1\", host: \"test.abcde.com\"\ntest.abcde.com | 172.18.0.4 - - [15/Jun/2017:08:49:23 +0000] \"GET /.well-known/acme-challenge/GXIeYCfbB25DnA2kB8r9HlvW0fFPLl3tgh2_axZcGho HTTP/1.1\" 404 169 \"-\" \"python-requests/2.8.1\" \"-\"\ntest.abcde.com | 172.18.0.2 - - [15/Jun/2017:08:50:22 +0000] \"GET / HTTP/1.1\" 200 324 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:54.0) Gecko/20100101 Firefox/54.0\" \"123.123.123.123\"\n```\nduch@some-vps:~$ curl https://test.abcde.com\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n\n\nTitle Goes Here\n\n<body>\n    <p>Test nginx-proxy</p>\n</body>\n\n \n```. I just ran into a CA authorization error while performing additional tests. After trashing all the four docker volumes I use in the docker-compose file (conf, vhost, html and certs), CA authorization started working again.. I don't know the internals but I think LE will always prefer validation through IPv4 if available. I have both IPv4 and IPv6 configured on my hosts and DNS for proxyed services resolve to both addresses but I never saw an IPv6 request from a LE server on any of them.\nI would advise against modifying the template as it would make further issues even harder to troubleshoot for you.\nRenewals do work perfectly fine on my already setup proxy stacks with the vanille nginx.tmpl, so I still think you have a configuration file somewhere that prevents CA validation, either one of your own or a container generated one that's stuck in a bad state.\nReverting your stack configuration to something closer to base configuration would give you a clean start. More specifically, change from :\nvolumes:\n      - '/root/nginx/certs:/etc/nginx/certs'\n      - '/root/nginx/conf.d:/etc/nginx/conf.d'\n      - '/root/nginx/vhost.d:/etc/nginx/vhost.d'\n      - '/root/docker-gen/nginx.tmpl:/app/nginx.tmpl:ro'\n      - '/var/run/docker.sock:/tmp/docker.sock:ro'\n      - '/apps/letsencrypt:/usr/share/nginx/html'\n      - '/apps:/var/www'\n      - '/root/nginx/htpasswd:/etc/nginx/htpasswd'\nto something like\nvolumes:\n      - certs:/etc/nginx/certs\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - /root/docker-gen/nginx.tmpl:/app/nginx.tmpl:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - html:/usr/share/nginx/html\nAgain I'm not familiar with docker cloud, my idea is to use freshly created named volume to revert all configuration dir/files to base state, check if that gets CA validation to work again, and if it does try adding your own custom configuration files one by one like this:\n- conf:/etc/nginx/conf.d\n      - /root/nginx/conf.d/somefile.conf:/etc/nginx/conf.d/somefile.conf\nuntil you find which one prevents CA validation.\nAlso, are you sure your proxied containers are configured properly ? Better check that too.. I think at some point we might have to add a troubleshooting guide to this container.\nDo you have any insight on why LE chose IPv6 over IPv4 to reach your domain for validation ? And on why did the nginx container failed to answer properly to the request made over IPv6 ?. I did not enable the dual stack in docker daemon and yet my proxyed services and the ACME challenges are reachable both through IPv4 and IPv6. This might be related to the fact that the containers are connected to a user created bridge network (the nginx-proxy network in my docker-compose file), not to docker's default bridge network.. I did not configure anything specific on the docker side, the only IPv6 related config I did on each host was setting up the correct addresses (static) on the real public-facing interfaces.\nThe command I use to create my docker network is the following:\ndocker network create -o com.docker.network.bridge.name=nginx-proxy nginx-proxy\nthe com.docker.network.bridge.name is only there to provide a clean kernel name to the gateway interface.\nThe results of ifconfig nginx-proxy then looks like this:\nnginx-proxy: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.xxx.xxx.xxx  netmask 255.255.0.0  broadcast 0.0.0.0\n        inet6 fe80::xx:xxx:xxxx:xxxx  prefixlen 64  scopeid 0x20<link>\n        ether 02:xx:xx:xx:xx:xx  txqueuelen 0  (Ethernet)\n        RX packets X  bytes X (X MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets X  bytes X (X MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nLocal IPv4 address, link local IPv6 and that's it.\nEdit: by the way you did put your finger on something else. When a certificate is present, no matter if it is valid or not, the nginx.tmpl will add a 302 redirect to https.\nThat mean that if, for a reason or another, one of your certificate expire, you won't be able to renew it without deleting the old one first as the CA validation will be redirected to https with an expired certificate and will fail.. They were extremely helpful, thank you @cpu !. Closing issue due to inactivity.. Yes, in this case you'll need to use dns-01 validation but you won't be able to do it with this project as it is. It uses simp_le as its Let's Encrypt client, and the only challenge method available in simp_le is http-01. I saw forks of the original (abandoned) simp_le that try to add support for dns-01 challenge, like this one.. There is no \"beta\" or \"public\" version of letsencrypt (well letsencrypt was in beta at some point but it left beta in april of 2016 and that's irrelevant to your issue anyway).\nThe duplicate certificate limit of 5 certs a week is the same for everyone and is enforced to ensure \"fair usage by as many people as possible\" : https://letsencrypt.org/docs/rate-limits/\nEdit : I'd guess your certificates are not persisted correctly and re-created each time you change something on your docker-compose file.. yep,  I wanted to test it before to be sure : you don't use named volumes or host directories as volume so every time you go through a cycle of docker-compose down and docker-compose up or change your docker-compose.yml and restart the services, docker-compose will re-create new randomly named volumes instead of using the previous ones.\nThat can be easily verified with docker volume ls, you should see a huge number of randomly named volumes.\nSo one way to fix this is to use named volumes in your docker-compose.yml : \n```\nversion: '2'\nservices:\n[...]\nnginx-proxy:\n    image: jwilder/nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"vhost:/etc/nginx/vhost.d\"\n      - \"html:/usr/share/nginx/html\"\n      - \"certs:/etc/nginx/certs\"\n      - \"/var/run/docker.sock:/tmp/docker.sock:ro\"\n    networks: \n      - \"proxy-tier\"\nletsencrypt-nginx-proxy-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n    volumes_from:\n      - \"nginx-proxy\"\nvolumes:\n  vhost:\n  html:\n  certs:\nnetworks:\n  proxy-tier:\n    external:\n      name: nginx-proxy\n```\nThose will be correctly reused across restarts or docker-compose.yml modifications.\nYou can also use host directories as you did for the commented out ghost container.\nAlso, following this container documentation, you should add \nlabels:\n        - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\nto the nginx-proxy service definition.\n. Nope, if you use a bind mount Docker won't create a Docker volume.. That should be possible if --reuse_key is passed to simp_le.\nThat's not possible right now without manually modifying letsencrypt_service but adding a new environment variable that would make it possible does not seems too hard.. PR opened.. Closed by #218 . @JrCs  any issue with this PR ?. You're welcome. I hope JrCs will have time to merge it soon.. @JrCs ?. Thank you !. That won't work without modifications on nginx-proxy side as there is currently no feature to proxy to anything else than a Docker container IP short of adding you own additional config file.. @ymettier your original idea was translated to something a bit more fleshed out and added to the dev branch for testing, any feedback is welcome on #368 . zenhack's simp_le 0.3.0 isn't released yet.\nAs @zenhack points out, the changelog section mentions that sometimes the most recent entry is as-yet-unreleased.. This PR + an additional commit to add a git checkout seems like a good idea to me.. Yes, that's not explicitly stated in the doc but docker-gen needs access to vhost (and gets it in the provided example thanks to --volumes-from nginx).. Closing due to inactivity and probably not being relevant anymore.. That looks a lot like a lack of SNI support in the client app you are using (gradle) : https://github.com/gradle/gradle/issues/1868. > - LETSENCRYPT_TEST=true\nYour are requesting test certificates. They normally won't be recognized by web browsers because they're issued by a \"fake\" intermediate certificate, itself signed by a \"fake\" root certificate absent from browsers trust stores, hence the UNKNOWN_ISSUER warning.\n\nThe staging environment intermediate certificate (\u201cFake LE Intermediate X1\u201d) is issued by a root certificate not present in browser/client trust stores. If you wish to modify a test-only client to trust the staging environment for testing purposes you can do so by adding the \u201cFake LE Root X1\u201d certificate from the certificates page to your testing trust store. Important: Do not add the staging root or intermediate to a trust store that you use for ordinary browsing or other activites, since they are not audited or held to the same standards as our production roots, and so are not safe to use for anything other than testing.\n\nhttps://letsencrypt.org/docs/staging-environment/. @evertramos your docker-compose configuration won't reload nginx on automated certificate renewal and serve the renewed certificates due to the absence of the NGINX_PROXY_CONTAINER environment variable.\nSee the last bullet point there and the relevant PR.. If you use a docker-compose version 3 file with the three container setup (nginx / docker-gen / letsencrypt) you actually have to specify both environment variable on the letsencrypt container:\nNGINX_PROXY_CONTAINER pointing to the nginx container itself\nNGINX_DOCKER_GEN_CONTAINER pointing to the docker-gen container as you did. Yep, that's it !. You're more than welcome to go for the social approach and ask @zenhack to have shorter release cycles. Actually I asked him to tag the 0.3.0 release 4 days ago, but I don't feel like asking any more from him, not being a contributor to simp_le.\nMeanwhile I'd really prefer this project to build against a fixed release of simp_le, but that's up to @JrCs, not me.\nThe simp_le installation is handled by a separate script, not by the Dockerfile. As for the sizes:\n79285426 bytes for the latest image of this project built locally from a github clone.\n79285333 bytes for the one I built with the commit in this PR.\n79285392 bytes for the last one I built with git -C /src clone --depth=1 --branch '0.3.0' https://github.com/zenhack/simp_le.git in the install script to avoid cloning the whole tree.\nWe're looking at size differences of less than 100 bytes, so I don't believe that cloning the whole tree in the install_simp_le.sh script actually increase the size of the container.  The cloned source directory is being removed at the end of the script anyway.. This project was originaly using kuba's simp_le, the switch to your fork was only made a month and a half ago. Maybe kuba's original project wasn't as well maintained on pypi as yours, hence jrcs choosing the git route instead.. 2017/07/15 07:44:40 Template error: readdirent: no such file or directory\n2017/07/15 07:44:40 [notice] 61#61: signal process started\n2017/07/15 07:44:40 [alert] 61#61: kill(22, 1) failed (1: Operation not permitted)\nnginx: [alert] kill(22, 1) failed (1: Operation not permitted)\nThose lines are fishy to me.\nSome troubleshooting steps If you have CA validation issues:\n\ncheck what version of docker and the le-companion you are running.\ncheck what version of nginx.tmpl you are using.\nif you use docker-compose, quadruple check your compose file.\ndelete either the cert volume or the certs files that failed verification:\ndocker exec your-le-container rm -rf /etc/nginx/certs/yourdomain.tld*\nrestart the nginx-proxy + le-companion or nginx + docker-gen + le-companion containers, without the service you are trying to proxy, and with the DEBUG=true env variable passed the le-companion.\nverify that yourdomain.tld correctly resolve to the host.\nif you have an AAAA record setup on the domain, make sure it is correct and that the host is reachable through IPv6.\ntest if you have access to http://yourdomain.tld/.well-known/acme-challenge/foo from the outside world, both over IPv4 and IPv6 if your domain have an AAAA record. You can either try to curl a previous acme-challenge file or create a file to curl yourself:\n```\nyou@yourhost$ docker exec your-le-container bash -c 'echo \"Hello world!\" > /usr/share/nginx/html/.well-known/acme-challenge/hello-world'\n\nyou@localcomputer$ curl http://yourdomain.tld/.well-known/acme-challenge/hello-world\nHello world!\nyou@localcomputer$ curl -6 http://yourdomain.tld/.well-known/acme-challenge/hello-world\nHello world!\n```. No answer from the issue creator for more than 90 days, closing.. Have you tested it ?\nI just tested what you suggested (portainer on an internal network) in a variety of docker networks setup, none of them works with your PR, you end up with an empty upstream section in the generated /etc/nginx/conf/default.conf\nI'm not sure of what you are trying to accomplish by putting a container supposed to provide an UI on an internal network that is unreachable from the outside.. > The idea is simply to keep all containers that don't absolutely require outside internet access on an internal network\nCorrect me if I'm wrong, but if you want to proxy traffic to a container and have it accessible via a domain name (and a portainer container you can't reach has pretty much zero purpose), it no longer qualify as a container that don't require outside internet access. The two seems pretty contradictory to me.\nedit : oh I think I get it, you mean preventing those containers from reaching the outside world on their own accord, not the other way around ?. > My thought behind the pull request was that the argument is unnecessary since containers will be filtered out by the LETSENCRYPT_HOST and LETSENCRYPT_EMAIL environment variables anyway, so I can't imagine anyone unintentionally generating certs for containers by removing it.\nTrue.\nI don't see any real necessity behind the argument either (beside the presumption that container without exposed ports won't require proxying anyway and thus don't need to be feeded to docker-gen, which prevents your use case).. Maybe the commits should be squashed to have a cleaner commit history and no doing-undoing commits ?\nOtherwise nice PR, I hope it'll be merged. Even outside of swarm and docker cloud it makes more sense this way than having a label on one container and env variables on the other.. Any issue ?. @JrCs ping ?. The DKIM public key and its selector are a DNS TXT record you set up at your domain name registrar or DNS provider.\nIt is unrelated to SSL certificates, Lets Encrypt or proxying.. simp_le have a fork that is still actively maintained, this project switched to it a few months ago.\nAs for the failed self-verification, I noticed it too but haven't been able to find the reason yet.. One thing I'm sure, It is not happening on every host where I deployed the docker nginx-proxy stack and/or on every proxyed containers. Some of them won't self verify, others are ok.\nAll of them correctly generate certificates wether they are able to self verify or not.. Self verification in simp_le is based on certbot / acme simple_verify, and self verification is deemed unreliable by cerbot devs themselves (as in there is a lot of way to have self verification fail but LE challenge succeed anyway).\nSo I guess one should not be too concerned if self verification fails as long as certificates get successfully generated, and self verification isn't super useful as a troubleshooting tool.. Self verification have been removed from simp_le due to its lack of reliability, so closing this issue.. You can't, docker-letsencrypt-nginx-proxy-companion use a third party client called simp_le that does not implement DNS challenge at all.. \ud83d\udc4d . You can check issued certificates for your domain here : https://crt.sh. Can you post the commands / docker-compose file you are using ?\nDoes crt.sh shows that some certificates were issued multiple times per week ? (There is a delay before a newly issued certificate shows up there, can't say how much for sure, a few days at most). I see a bunch of strange stuff / probable misconfiguration:\n\nports 8083:8083 on the calibre-web service. That bind the container's port to a public port, potentially bypassing the proxy. Any specific reason of doing this ?\nthe le companion require exposed ports on proxyed containers : https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#usage (last paragraph right before separate containers)\nthe local docker socket bound to two different places on the letsencrypt container. It should only be bound to /var/run/docker.sock\n\nStill no clue why your certs got generated multiple times a day. Did you wipe the /var/nginx/certs between tests ?. I don't know how @githtz came to the conclusion that letsencrypt-nginx-proxy-companion only retrieves certificates if there is an application on port 80, I never had any issue proxying lots of apps that don't expose and/or listen on port 80 at all (chronograf, gitlab, gogs, grafana, kibana, portainer to name a few) and more importantly there is nothing in the code that could make the container behave this way.. I'm running the latest version on several hosts with non port 80 containers and zero issues.\nI Just forced a certificate renew on two of them without issue either.\n\nThis container compose file only expose port 3000/tcp, and I double checked with docker inspect that there isn't any other port exposed.. Closing due to age and no new comment for more than 90 days.. If you intend to use the nginx-proxy + le companion for SSL termination, the proxyed nginx container should listen on port 80 for plain http, not on 443.\nAnd listening on 443 for https without providing a key and a cert will fail like it did in any case.. SSL termination means that your proxy handle all the TLS work for the services behind it and that the backend (proxy to services) communication is assumed to take place on a secure private network and therefore is unencrypted. That's a pretty common setup for nginx-proxy and for proxies in general.\nYou can have SSL backend communication if you really require it but it needs a bit more configuration on the proxy : https://github.com/jwilder/nginx-proxy#ssl-backends. No activity for 90+ days, closing.. Are you certain your host is actually listening on port 443 and if yes that it is reachable from outside on this port ? Try netstat -lt for the former and nmap XXX.XXX.141.136 for the latter.. Could you have a firewall / security group or something similar at the host provider level ?\nDo you have se linux or another firewall like nftables running on this host ?. @rjsteinert I think you should read the Let's Encrypt section of the doc.. As the doc state pretty early:\n\nNOTE: The first time this container is launched it generates a new Diffie-Hellman group file. This process can take several minutes to complete (be patient).. Closing due to age and info about DH generation being outdated.. Is it even possible to have multiple nginx-proxy on the same host ? I don't get how you would do that with the vanilla version.. @oktango if you follow the same logic you should be able to edit the letsencrypt_service_data.tmpl to use LETSENCRYPT_HOST_1 instead of LETSENCRYPT_HOST, then bind the nginx-proxy container to a specific host IP by using -p IP:host_port:container_port or -p IP::port.\n\nHaving the ability to run multiple disctint nginx-proxy stack each bound to a specific host ip without modification to either nginx.tmpl or letsencrypt_service_data.tmpl would be a nice feature addition to both projects.. Do you have the required LETSENCRYPT environment variables on your squidex_squidex service ?. Your issue seems related to nginx-proxy configuration rather than docker-letsencrypt-nginx-proxy-companion. The letsencrypt-companion only functions are to create / renew certificates, put them and the private key on the correct place with the correct name, and reload the nginx proxy on cert creation or renewal.. The error message is rather clear, you can't use relative (../../stuff) paths for docker volumes, only absolute path (like /path/to/stuff).\nThat's not entirely true with compose files though, as you can do stuff like this:\nvolumes:\n  - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\nif the nginx.tmpl file is located right next to your compose file. But ../ wont work wether you are using a compose file or not.. No answers from issue creator for more than three months, closing.. Just tried and it worked out of the box on a fresh VPS.\nUbuntu 16.04\nDocker 17.06\ndocker-compose 1.15.0\nCreating Diffie-Hellman group (can take several minutes...)\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\n............+............++*++*\nSleep for 3600s\n2017/08/07 14:03:50 Generated '/app/letsencrypt_service_data' from 3 containers\n2017/08/07 14:03:50 Running '/app/update_certs'\n2017/08/07 14:03:50 Watching docker events\n2017/08/07 14:03:50 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\nReloading nginx proxy (7b26f73a05f7634a2c8a30e4e7185b1d11fbbf146bf0782f8f90592af7ad856c)...\nQ2017/08/07 14:03:51 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\n;2017/08/07 14:03:51 [notice] 43#43: signal process started\nCreating/renewal testle.domain.tld certificates... (testle.domain.tld)\n2017-08-07 14:03:52,633:INFO:simp_le:1213: Generating new account key\n2017-08-07 14:03:58,047:INFO:simp_le:1306: testle.domain.tld was successfully self-verified\n2017-08-07 14:03:58,310:INFO:simp_le:1314: Generating new certificate private key\n2017-08-07 14:04:03,565:INFO:simp_le:393: Saving account_key.json\n2017-08-07 14:04:03,566:INFO:simp_le:393: Saving key.pem\n2017-08-07 14:04:03,566:INFO:simp_le:393: Saving chain.pem\n2017-08-07 14:04:03,567:INFO:simp_le:393: Saving fullchain.pem\n2017-08-07 14:04:03,567:INFO:simp_le:393: Saving cert.pem\nReloading nginx proxy (7b26f73a05f7634a2c8a30e4e7185b1d11fbbf146bf0782f8f90592af7ad856c)...\n2017/08/07 14:04:03 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\n2017/08/07 14:04:03 [notice] 55#55: signal process started\nSleep for 3600s. Self verification is no longer relevant (it was unreliable and consequently removed from simp_le) and a note on CAA was added to both the README and project's wiki, so I'm closing this issue.. Hi,\nDo you mean the container self verification or the (external) verification made by Lets Encrypt ?. Yes, the standard configuration (which depends on nginx.tmpl) does redirect http requests to https BUT the Lets Encrypt validation server does not follow redirections to https when attempting to validate a challenge over http.. @cpu > I remembered you said it ignored cert validation, went to your comment to verify, and manage to read a \"don't\" that isn't there. derp.\n@ismay > I'm not so sure of that. The redirection to https only happens if a certificate and key corresponding to the domain exists when docker-gen create the default.conf and reloads nginx.\nThe old certificates / keys, if they exist, should be deleted and nginx reloaded through docker-gen just before certificate creation or renewal, so all challenge validations should happen over http.. My bad, I completely misread the linked code yesterday, what is deleted are certificates of a given type (test or non test) if you ask for a certificate of the other type.\nSo challenge validation should happen over http:\n- on first creation of a certificate no matter the type\n- on creation of a non test certificate if a previous test certificate for the same domain was created\n- on creation of a test certificate if a previous non test certificate for the same domain was created\nChallenge validation should happen over https on renewal of a certificate by a certificate of the same type.\nSorry for yesterday misinformation.. @JrCs any thought on this ?. some immediate issues:\n172.200.0.0/16 is a public IP range (@lounagen the private range you are referring to is 172.16.0.0/12), you don't want to use that for private networking and you certainly don't  want to have your domain's DNS records pointing to a public IP that is most probably not yours.\nYou bind the same directory to both the wordpress container webroot and nginx-proxy webroot. Again you absolutely don't want to do that, both should be completely separate.\nIf you wordpress container is supposed to be only available through the vpn, ports \"8080:80\" defeat that and makes it available from the outside.. For a setup this specific you'll probably be better not using the le-companion and nginx-proxy at all and obtaining your certificates in manual mode with certbot (using another challenge method as @lounagen suggested), then setting up this cert manually in the wordpress container's apache.\nYou'll also need openvpn to tell connecting client to use a DNS server that resolve your domain to the correct private IP on your docker network (so probably something you'll have to set up too).. @XPLOT1ON > let me know if you need help to complete this :). @JrCs I think this is good to go now, awaiting your approval.. Hi\nThe environment variables NGINX_DOCKER_GEN_CONTAINER and NGINX_PROXY_CONTAINER both go the letsencrypt-nginx-proxy-companion container.\nYou are right, the doc is unclear.. Fixed by #257 . I think that can be easily fixed with adjustment to letsencrypt_service_data.tmpl, I'll give it a try tomorrow.. My fix worked, but as I suspected the same trailing comma in the VIRTUAL_HOST variable cause nginx-proxy / docker-gen to generate an invalid conf file anyway:\nnginx-proxy    | 2017/09/01 14:06:46 [emerg] 1#1: invalid number of arguments in \"upstream\" directive in /etc/nginx/conf.d/default.conf:54\nSo there is no point in trying to fix that if the nginx.tmpl isn't fixed first to strip the trailing comma from VIRTUAL_HOST.  nginx.tmpl is way more complex than letsencrypt_service_data.tmpl and I'm not good enough with the Go template package to come up with a fix yet.. So the issue has been fixed for LETSENCRYPT_HOST by 4085f64, but since a trailing comma in VIRTUAL_HOST will still cause nginx-proxy / docker-gen to generate an invalid nginx config file, I think using trailing commas should still be avoided for now.. If you get a 404 the problem lies with nginx-proxy/docker-gen. The letsencrypt-companion only functions are to create / renew certificates, put them and the private key on the correct place with the correct name, and reload the nginx proxy on cert creation or renewal.. This was fixed by 4085f64. @JrCs I think the wording is still unclear as it is mixing labels themselves with the --label argument to docker run and variable names with their value in the context of an example while you carefully avoided doing that in the existing doc.. @mjmayer I might not have been clear enough myself, your use of markdown was perfectly right, sorry for the unnecessary work.\nWhat I meant is that you have be more explicit on the fact that nginxand nginx-gen both depends on the name you chose earlier for you container. If you use different names for your containers, you'll have to set the env var to different values.\nLet me show you what I mean:\n\nIf [...] static names, both labels com.github.[...].nginx_proxy on the nginx container and com.github.[...].docker_gen on the docker-gen container can be removed.\n[...] on the letsencrypt container are NGINX_PROXY_CONTAINER set to the name of the nginx container (here nginx) and NGINX_DOCKER_GEN_CONTAINER set to the name of the docker-gen container  (here nginx-gen).\n\nAnd then your example. The [...] are meant to be replaced by the existing text, obviously.\nBTW there are two small typos (\"using using\" and \"evironment\").. Your link is a 404 and the original URL points to a repo that does not make any mention of HTTP Authentication.. Are you asking if HTTP authentication also works with the three containers setup (nginx/docker-gen/letsencrypt-nginx-proxy-companion) ?. I have not tested this feature personally but yes, every configuration option for nginx-proxy should work wether you're using the standalone container or nginx + docker-gen, as long as you use the latest nginx.tmpl with docker-gen.\nNote that your question is not related to letsencrypt-nginx-proxy-companion, if you have further question about nginx-proxy it would be best to ask them on the project's repository.. Just tried it and it worked fine.. force_renew has an issue and will only renew the domain(s) for the first container id found on the letsencrypt_service_data file, not all of them as it should.\n270 will fix this when merged, before that you can manually patch it by removing the && shift on line 73 of letsencrypt_service  if you need complete forced renewal.. Hi. Unfortunately at the moment there is nothing in this container that will help you implement certificate transparency.\nYou'll need at least a custom built nginx with the nginx-ct module acting as the proxy, modification to the nginx.tmpl from nginx-proxy plus scripts to submit certificates to log servers as -if I'm correct (@cpu ?)- LE does not offer SCT and does not plan to in the near future.\nmore info here: https://www.certificate-transparency.org/resources-for-site-owners/nginx. You have to configure your backend web server serving your falcon app to use the nginx-proxy HTTP X-Forwarded-For header. Here is how to do it with apache: https://www.daveperrett.com/articles/2009/08/10/passing-ips-to-apache-with-nginx-proxy\nThis is completely unrelated to docker-letsencrypt-nginx-proxy-companion. Might be.\nBut again docker-letsencrypt-nginx-proxy-companion is unrelated to the actual proxying anyway, it's just there to automate creation and renewal of certificates, and trigger reloads of nginx configuration on creation / renewal of those certificates. Nothing more.. How are you running your containers ? docker run or docker-compose ? Are you on mac ?. Is your instance reachable through IPv6 ?. @cpu I wasn't able to reproduce letsencrypt-nginx-proxy-companion getting an empty LETSENCRYPT_EMAIL but I was using a working nginx/docker-gen/le-companion stack, without more information I can't say wether @Algodrill stack is properly configured or not.\nYou guessed correctly, if the letsencrypt_service_data ends up with an empty mail variable it means docker-gen was unable to get it from the to be proxyed container or that something went wrong with the template. Never encountered this case though.\n\nAnother thought is that simp_le should probably try to validate that the contact email being provided is valid before using it for a new-reg request.\n\nAgreed, thanks for the suggestion.\n@Algodrill can you share your entire docker-compose file for the nginx-proxy ?\nWhich versions of docker-gen, letsencrypt-nginx-proxy-companion, docker and docker-compose are you using ?\nAside from this mail issue you might not get certificate with this config anyway as the env variable VIRTUAL_NETWORK does not exist in nginx-proxy, so what you were trying to do with it won't work. If you were trying to attach your proxyed container to an existing nginx-proxy docker network, you should either add this to your docker-compose file:\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\nor this:\n```\nsample-website:\n  [existing config]\n  networks:\n    - nginx-proxy\nnetworks:\n  nginx-proxy:\n    external: true\n```\n. > You need my docker-compose of my website?\nYep, will be useful too. Don't forget to remove personal info like domains and mail adresses.. @funaz is correct LETSENCRYPT_MAIL won't work.. Fixed by 1bb6e861bfc669fc4707dfad3bd8ca88a01cb566.. Can you explain what exactly you had to solve ?\nI run this container with the latest version of nginx.tmpl that does include a default dhparam file at /etc/nginx/dhparam/dhparam.pem but nginx never complained about this file missing.. I really don't get how you end up with this error, I tried again with a fresh three container setup on a new VM and the latest nginx.tmpl, I did not manage to trigger it.\nIn which case is this default dhparam file supposed to be used (by nginx) ? If you provide a certificate and a key but no dhparam ?. So if I understand correctly, this default dhparam is used if you also have a (self signed, obviously) default.cert and a default.key in /etc/nginx/certs ?. Can you give a try to this nginx.tmpl file: https://raw.githubusercontent.com/buchdag/nginx-proxy/dhparam-separate-container/nginx.tmpl\ndiff from the latest nginx.tmpl:\n# Default dhparam\n+{{ if (exists \"/etc/nginx/dhparam/dhparam.pem\") }}\n ssl_dhparam /etc/nginx/dhparam/dhparam.pem;\n+{{ end }}\n. BTW:\n\nthe standalone nginx-proxy does not have this issue because it is using a pre generated default dhparam at /etc/nginx/dhparam/dhparam.pem and generating a stronger one at first launch.\nthis issue is not related to letsencrypt-nginx-proxy-companion because it isn't supposed to handle self signed certs.\n\nBecause of 1), if you use nginx-proxy with letsencrypt-nginx-proxy-companion you end up wasting ressource by generating two 2048 bits DH parameters at first launch.. I don't think you are doing anything wrong, I mean when the dhparam stuff was added to nginx-proxy (and to more specifically to the nginx.tmpl), the fact that the two container setup won't get an auto generated DH parameter file and that the nginx container would fail if you provide a default.crt and default.key was clearly overlooked.\nThe problem would be exactly the same if you didn't use letsencrypt-nginx-proxy-companion at all.\nI'll submit a PR for this change to the nginx.tmpl\nIf you still want better security with your self signed SSL, you can create a DH parameter file with this command:\nopenssl dhparam -out /path/to/your/dhparam.pem 2048\nand then mount it inside you nginx container:\n-v /path/to/your/dhparam.pem:/etc/nginx/dhparam/dhparam.pem:ro. @slyrus https://github.com/jwilder/nginx-proxy/pull/955 took care of this issue, could you close please ?. Are you using a recent enough version of jrcs/letsencrypt-nginx-proxy-companion ?\n199 was a similar issue fixed by #165 on May, 28.. Yes, better use latest, the project maintainer seems to be very busy and only shows up once in a while to merge some simple PRs.. Are you sure all your containers are properly setup with the right labels or env variable ?. Preferably the com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy label set on the nginx / nginx-proxy container or alternatively if your nginx / nginx-proxy container has a static name, the NGINX_PROXY_CONTAINER env variable set to this name on the letsencrypt-nginx-proxy-companion container.. I just forced the renewal of one of my certificate from inside the letsencrypt-nginx-proxy-companion, the nginx container was correctly restarted as stated by the last line:\nCreating/renewal app.example.com certificates... (app.example.com )\n2017-11-01 14:19:51,658:INFO:simp_le:1306: app.example.com was successfully self-verified\n2017-11-01 14:19:51,879:INFO:simp_le:1314: Generating new certificate private key\n2017-11-01 14:19:53,500:INFO:simp_le:393: Saving key.pem\n2017-11-01 14:19:53,504:INFO:simp_le:393: Saving fullchain.pem\n2017-11-01 14:19:53,505:INFO:simp_le:393: Saving cert.pem\nReloading nginx docker-gen (using separate container 7dd2fcadc5e2756e070e9f2688611419870c8c663eccf4f17f269e12779d89e6)...\nReloading nginx (using separate container 39cb4f97bfc0f723260fdd0d427f20ab72ab3887be7dd3a889187be013195942)...\nAnd it served the renewed certificate for this webapp (expiring on january 30 2018), so I confirm that with a correctly configured stack renewal work as it should.. Okay, turns out there seems to be an issue with the com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy label on a test VM that I never encountered on my production VMs. Suspected an issue with the docker version but both are current (either 17.09 or 17.10), so no idea where it comes from. I'll have a look into this.\nHere is a working compose stack for nginx-proxy + letsencrypt. Just remember that you have to manually create the nginx-proxy network before starting the compose stack with docker network create nginx-proxy.\n```\nversion: '3'\nservices:\n  nginx:\n    image: nginx:1.13.5-alpine\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs:ro\ndockergen:\n    image: jwilder/docker-gen:0.7.3\n    command: -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    container_name: nginx-proxy-gen\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-proxy-le\n    volumes:\n      - conf:/etc/nginx/conf.d\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      NGINX_PROXY_CONTAINER: nginx-proxy\n      NGINX_DOCKER_GEN_CONTAINER: nginx-proxy-gen\nvolumes:\n  conf:\n  vhost:\n  html:\n  certs:\nnetworks:\n  default:\n    external: \n      name: nginx-proxy\n```\nPining the version of nginx and docker-gen is not required, that's just my habit with compose stacks.\nAnd an example proxyed app (a simple nginx serving static content):\n```\nversion: '3'\nservices:\n  web:\n    image: nginx:alpine\n    volumes:\n      - ./www:/usr/share/nginx/html:ro\n    expose:\n      - \"80\"\n    environment:\n      VIRTUAL_HOST: nginxproxyle.duuu.ch\n      LETSENCRYPT_HOST: nginxproxyle.duuu.ch\n      LETSENCRYPT_EMAIL: whatever@email.tld\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nYou can access it at https://nginxproxyle.duuu.ch, there is nothing else running on this vm than those two docker compose files.\nFirst cert generated at container launch: https://storage.googleapis.com/dl.duuu.ch/cert1.png\nForced a renewal, refreshed the page, renewed certificate is correctly served by nginx: https://storage.googleapis.com/dl.duuu.ch/cert2.png\n(sorry for the french UI)\n\nCan you clearify how you forced the renewal of a given certificate? I've been looking for this feature before with no success.\n\ndocker exec NAME_OF_YOUR_LE_CONTAINER /app/force_renew but turns out there is an issue with that too and it's only renewing the first domain it finds, not all of them as it should. I'm the one who added this feature so I'll have a look at it immediately.. I'm pretty sure I already know why it does not work as intended, very basic and stupid mistake on my behalf.. @victor-lund > the fix was just merged, if you pull jrcs/letsencrypt-nginx-proxy-companion:latest it should correctly force renewal of all existing certificates when you execute the /app/force_renew script.. > Although everything seems to be OK the nginx-proxy container is not being restarted.\nThat's expected, the entire container is not restarted, instead a SIGHUP is sent to the nginx process running inside the nginx-proxy container to make it reload its configuration (and the keys / certificates) without restart.\nThat's what those lines tells you:\nReloading nginx docker-gen (using separate container nginx-gen)...\nReloading nginx (using separate container nginx-proxy).... @victor-lund Hi ! Was this issue fixed for you ?. @ArtemisSaber probable CAA record issue with your DNS provider: Letsencrypt have to check for a CAA record on your domain before issuing a certificate and can't issue if they get a SERVFAIL from you DNS provider.\nhttps://unboundtest.com allows you to test for this and it seems your DNS provider have this issue.\n```\nQuery results for CAA semimajoraxis.com\nResponse:\n;; opcode: QUERY, status: SERVFAIL, id: 23720\n;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0\n;; QUESTION SECTION:\n;semimajoraxis.com. IN   CAA\n```\nUsing the letsencrypt companion with the DEBUG env variable set to true will give your more insight and can confirm this is a CAA record issue.. No activity for 90+ days, closing.. Does the letsencrypt container correctly generate your certificates anyway ?\nThe self verification is not reliable and have been discarded from the next version of simp_le, it was generating more false positive than useful insight.. Looks like your nginx container don't even get a correct proxy configuration from docker-gen.\nHave you tried adding an explicit VIRTUAL_PORT: 80 on the non working container ?\nAre you using the latest versions of jrcs/letsencrypt-nginx-proxy-companion and nginx.tmpl ?\nAdding DEBUG: \"true\" to your nginx-letsencrypt container will give you more verbose logs.. DEBUG: \"true\" goes to the jrcs/letsencrypt-nginx-proxy-companion container, not the proxyed one.\nYou should remove VIRTUAL_PROTO and DEFAULT_HOST, adding optional stuff certainly won't help troubleshooting. Go back to only one VIRTUAL/LETSENCRYPT_HOST (same domain for both variables).\nAs you use the NGINX_PROXY_CONTAINER on the letsencrypt container with a fixed nginx container name, the label on the nginx container isn't needed, but that probably is of no consequence.\nAre you sure your mydomain.com and rtfm.mydomain.com A records point to this host ? Do you have AAAA records on this domain and its subdomain ?. The log shows that your nginx container is not even receiving the GET request from the Letsencrypt servers, you definitely have a DNS or network issue somewhere.. That's to be expected, test certificates obtained from https://acme-staging.api.letsencrypt.org/directory are signed by an intermediate that is not in browsers trust store. When the LE rate limiting has elapsed you can switch back to the production ACME API endpoint and get a trusted certificate for you domain.\nThe three container setup (nginx / docker-gen / letsencrypt) seems to be extremely prone to misconfiguration, I don't think this repo should ever have designed it as the \"recommended method\" (the nginx-proxy repo certainly does not imply that it is recommended to run it this way).\nIf this works for you, keep this configuration.. Why would it fix a cert generation issue ? It's just a script forcing renewal of all existing certificates, nothing else. If you cert creation fails, /app/force_renew won't change it.. @JrCs > thanks !. If docker-gen keep restarting something is misconfigured and the stack won't work. Most probable cause is you did not grab the nginx.tmpl template file from jwilder/nginx-proxy.\nTry the two containers setup with a compose file version 2 before going for the unnecessary complex (for a first try) three container setup on compose file version 3. If you need a starting point you can grab this one and replace duch with jrcs.\nI know this repo's doc says the three container setup is recommended but truth is it's not.\nAlso your golang application container expose only port 8080 (on which something is listening) but your docker-compose file also expose ports 80 and 433 on which nothing is listening. When a proxyed container has multiple ports exposed including port 80, nginx-proxy will default to port 80.\nRemove this expose: directive from your app compose file or you app won't work even if the cert get generated.. Oh and right now your domain appears to resolve to cloudflare, I have no idea if the le-companion container will work behind cloudflare.. 1. Let's Encrypt does not support wildcard certificates yet : https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html\n\n\nYes, you'll get a test certificate too. What LETSENCRYPT_TEST=true does behind the scene is telling simp_le to use the staging api endpoint.. Sorry that's not readable, could you try using mardown's \"insert code\" button to have your compose files displayed properly ?. Let say you have those domains and subdomains all pointing to your host's IP:\n\n\nbar.com\n\nww.bar.com\nfoo.com\nwww.foo.com\n\nIf you have only one service running on your host's docker and you want all those domains/subdomains proxyed to the same container with SSL for all of them you'll have to do something this:\n```\n[...]\nservices: \n  [...]\nyour_proxyed_service: \n    [...]\n    environment:\n      VIRTUAL_HOST: bar.com, www.bar.com, foo.com, www.foo.com\n      VIRTUAL_PORT: XXXX\n      LETSENCRYPT_HOST: bar.com, www.bar.com, foo.com, www.foo.com\n      LETSENCRYPT_EMAIL: you@gmail.com\n     [...]\n```\nEvery domain and subdomain that you want to be proxyed to the container must be explicitely declared in the VIRTUAL_HOST variable. Wether there is a redirect or not at the DNS level is an entirely different thing.\nThe same goes for the LETSENCRYPT_HOST variable.\nThe VIRTUAL_PORTmust be declared only once for each proxyed container and set to a single port you know to be exposed by the container.. What version of the container are you using an how are your starting your nginx-proxy stack's containers ? Please provide a copy of the commands you run or the docker-compose file you use.. REUSE_KEY is just meant to make simp_le reuse private keys on certificates renewal instead of generating  a new one. That's not the same thing as the account key and that probably won't change anything in your case.\nI recommend you don't use --restart=unless-stopped, it does not play nice with this container as the normal exit code is not zero (I don't know why and I don't get the reason given in the code).\n/path/to/certs is supposed to be a local path on you host. Certificates stored there should not disappear and the container should not try to renew them on reboot.\nIf you use --volumes-from you don't need the label on the nginx-proxy container but that's irrelevant.\nDo you have more complete logs from both containers ?\nTry starting the letsencrypt container with -v DEBUG=trueto get more info.. --restart=always. Woops yes -e not -v, sorry for the typo.. You can create untrusted test certificates (that are not subject to the same rate limits as the 'true' certificates) by using -e LETSENCRYPT_TEST=true on the proxyed containers.\nThe files in the certs folder other than dhparam.pem are in facts symlinks to the private key / chain / cert files that are inside each base domain folders.\nI have no idea why they get removed on reboot though, the container clearly should not do that (and can only do that on its own in some very specific case, when going from discrete certificates to a single SAN certificate for multiple domains, and when switching back and forth between test and normal certificate).\nCan you try using named volumes instead of host and anonymous volumes for persistent data and see if the data inside them better survives reboot ?\n```\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    --restart=always \\\n    -v certs:/etc/nginx/certs \\\n    -v vhost:/etc/nginx/vhost.d \\\n    -v html:/usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\ndocker run -d \\\n    --name nginx-letsencrypt \\\n    --restart=always \\\n    -e DEBUG=true \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volumes-from nginx-proxy \\\n    jrcs/letsencrypt-nginx-proxy-companion\n```\nIt's not crucial that nginx gets read only permission over the certs at this point.\nI think what you are experiencing might be specific to rancher, I've never experienced a behaviour similar to this (with files completely disappearing).. I also remember seeing Rancher specific issues on nginx-proxy's repo: https://github.com/jwilder/nginx-proxy/search?p=1&q=rancher&type=Issues&utf8=%E2%9C%93. Neat ! Looks like Rancher does not like host volumes.\nIn case you wonder where does docker store the data, if you have a volume named test, by default the data will be inside /var/lib/docker/volumes/test/_data.. @creecros Can I close the issue ?. > What happens to the certificates when I restart, stop-then-start, remove-then-start etc a container (volume not deleted). Do the previous certs are discovered first and used if available, which I most probably think is happening behind the scenes. Or, new cert is created every time?\nIf the volume is not deleted the certificates will stay there and if the same volume is re-used again the existing certificates will be re-used by the container. To ensure volume reutilisation you should use host or named volumes rather than anonymous volumes. Anonymous volumes are tied to a specific container, so if the container get removed this volume won't get automatically reused (it can but its name will be a random generated id, not super user friendly).\n\nanonymous volume: -v /etc/nginx/certs\nhost volume: -v /path/to/some/local/dir:/etc/nginx/certs\nnamed volume: -v certs:/etc/nginx/certs\n\nNamed volumes (handled by docker and referred to with their name) is IMO the best option, and it seems to avoid issue with data persistence on some specific case (see #273).\n\nWhen running the container again, is there any need to use the LETSENCRYPT_HOST and other le env vars again. Can I not simply use VIRTUAL_HOST env var to instruct nginx-proxy to create config file for that domain and because there is already a cert for the virtual host, so it is used automatically? How do you suggest running the app containers again?\n\nIf you don't set the LETSENCRYPT_HOST variable again, automatic renewal won't work. This env var is how the letsencrypt container keeps track of the domains it has to handle certificates for. But yes even without this variable set, if the certs are still there with the correct names, nginx-proxy will enable SSL for those virtual hosts.\n\nCan I expose multiple apps on same port, I generally use 8080 while developing locally, so can I expose port 8080 for app1 as well as for app2 in their Dockerfiles, or they have to different?\nIn case I don't wish to terminate SSL at nginx, then I would need to enter path to certs in the app's code. Consider a Golang application using ListenAndServeTLS function. So, how can I point to that path. Generally, to access anything from outside, I create an env var in docker compose file (say for mongo db host uri) and use that env var in my app. But, how can I make this trick work this time as, in the app's docker compose file, I only run one service which is of the application itself and the rest is taken care of by your code.\n\nBoth those questions are not relevant to this project but to nginx-proxy, they should be asked there if reading the doc does not answer them.\nFor the port: yes, you can (as long as you expose it correctly and set VIRTUAL_PORT if the container expose multiple ports).\nFor the SSL backend: see https://github.com/jwilder/nginx-proxy#ssl-backends\n\nI never know beforehand how many subdomains I may need. So suppose I first create a cert for my base domain (example.com) using LETSENCRYPT_HOST: example.com. Then few days later, I wish to use another subdomain, so now in this case how should my LETSENCRYPT_HOST env var look like -\nLETSENCRYPT_HOST: example.com,sub1.example.com? And then again few days later I need another subdomain, so will it be like LETSENCRYPT_HOST: example.com,sub1.example.com,sub2.example.com. That is, we have to keep the history and that too in exact order intact while creating certs for new subdomains?\n\nYou should try to keep the first domain the same because it's considered as the base domain by the letsencrypt container and it impacts where the files are created and looked for by simp_le. The order of the alternative names does not really matter.\nAs told previously, the container does not keep a persistent DB of the domains it handles certificate for, it just derive this at runtime from the LETSENCRYPT_HOST vars of the containers that have it set. So yes you need to keep the whole history set at all time if you want to avoid mistakes, just don't bother with the order of the domains beside the first one.\nNote that the rate limit by registered domain is not the same as the rate limit for duplicate certificates. If you add an alternative domain to a SAN certificate, that's not considered a duplicate certificate. You got 20 of those / week vs 5 / week for duplicate certificates.\n\nSo, I don't know of any automated volume backup/restore system for docker. And I have read the docker docs for doing it manually, but I don't want to. If I had backup of my certs, then I yesterday I would have saved my time because I believe copying the original cert back after generating a test cert would result in showing original cert and not the test cert right? So could you please recommend any good solution, or point me towards a resource to do backups in the right manner?\n\nYou can easily rotate between different named volumes, for instance let say you have test certificates on the named volume certs-test and the non test certificates on the named volume certs, you can then mount either one or the other depending on what you want to do:\n\n-v certs-test:/etc/nginx/certs and you're working with the test certificates\n-v certs:/etc/nginx/certs and you're working with the non test certificates\n\nCloning an existing named volume to a new one will have to be done manually from inside a container, there is no command like docker volume clone vol1 vol2 (yet ?).\nI'm not aware of an existing automated solution for doing backup/restore of volumes, but I haven't really searched for one. If I happen to need it at some point I'll probably write a small script from the manual steps described in the doc. That's not hard if you know a bit of bash scripting, so there must already be stuff like this on github or stackoverflow or [...]. Hi,\nCan you elaborate on this ? Do you mean for instance generating certificates for apache or nginx running out of docker ?. If you want to create LE certificates without installing an ACME client you can run simp_le in a Docker container: https://hub.docker.com/r/zenhack/simp_le/\nsimp_le is the ACME client used by this project.. It's not possible as is (not without doing some super hacky stuff and even then it would be quite limited). I get the idea and agree that it would be handy but I also think it is out of scope. Both this project and nginx-proxy were intended for containers only.\nIf your non docker web server is not running on port 80 or 443, you can run a dummy container with the desired domains just to get the certificate created and auto renewed, but that's not pretty.. Duplicate of #127 #220 and #164 \n@hamon-e and @Panderine , could take a look at the workaround proposed in #127 ?. An experimental feature allowing to generate certificates from a config file instead of containers env var (inspired by @ymettier PR #220) has been added to dev.\nThis instructions are here. Any feedback is welcome.. Closing in favor of #368 so we can keep track of this in a single issue.. While the issue is being fixed upstream you should use the ACME_TOS_HASH en var set to the new ToS hash : cc88d8d9517f490191401e7b54e9ffd12a2b9082ec7a1d4cec6101f9f1647e7b. This issue has been fixed in simp_le, a PR to remove the hardcoded ACME ToS hash from docker-letsencrypt-nginx-proxy-companion will be submitted as soon as a fixed tagged release of simp_le is available.. PR is up.\nUntil it is merged, if you need a fixed container, do:\ngit clone --branch tos-fix https://github.com/buchdag/docker-letsencrypt-nginx-proxy-companion.git\ncd docker-letsencrypt-nginx-proxy-companion\ndocker build -t jrcs/letsencrypt-nginx-proxy-companion:latest .. The official LE rate limits doc might be clearer than #274 \nMore specifically:\n\nThe main limit is Certificates per Registered Domain, (20 per week). A registered domain is, generally speaking, the part of the domain you purchased from your domain name registrar. For instance, in the name www.example.com, the registered domain is example.com. In new.blog.example.co.uk, the registered domain is example.co.uk. We use the Public Suffix List to calculate the registered domain.\nIf you have a lot of subdomains, you may want to combine them into a single certificate, up to a limit of 100 Names per Certificate. Combined with the above limit, that means you can issue certificates containing up to 2,000 unique subdomains per week. A certificate with multiple names is often called a SAN certificate, or sometimes a UCC certificate.\n\nSo 20 or 2000 new users a week depending on wether you use discrete certificates for each user's subdomain or group them into SAN certificates ...\nBUT currently the project handles ACME account registration in a simplistic way: it creates a new account for each new base domain, no matter what. If you request 20 discrete certificates, you'll end up with 20 accounts key. And guess what, there is rate limiting on this too.\n\nYou can create a maximum of 10 Accounts per IP Address per 3 hours. You can create a maximum of 500 Accounts per IP Range within an IPv6 /48 per 3 hours. Hitting either account rate limit is very rare, and we recommend that large integrators prefer a design using one account for many customers.\n\nSo you might hit the 10 accounts per IP Address per 3 hours limit if you generate your 20 allowed certs per Registered Domain per week at once on the same host, or more probably if you use test certificates (because these too register new accounts, whose keys are wiped when you switch to production certificate). I use my own modified version of this project to circumvent this (it attempt to re-use a single account key for all domains and certificates).\n\nI'm thinking of mounting the volumes from a distributed file system (EFS), is their another solution / best practice ?\n\nTake a look at Docker Volume plugins.\n. @dj-hedgehog turns out we did not really need -only-exposed at all, so I believe #230 takes care of this ?. Right, #230 removed the -only-exposed from /app/start.sh but not from the  reload_nginx() function on /app/functions.sh.\nI think you can modify the PR to just remove the -only-exposedfrom line 101 on /app/function.sh. \n-only-exposed does not appear to be of any use anymore in the case of nginx-proxy + the le companion (as the two templates fed to docker-gen already filter containers through other means), so we probably won't need a feature to turn it back on.. If you need a fixed container before this is merged, you can build it from a git clone:\ngit clone --branch tos-fix https://github.com/buchdag/docker-letsencrypt-nginx-proxy-companion.git\ncd docker-letsencrypt-nginx-proxy-companion\ndocker build -t jrcs/letsencrypt-nginx-proxy-companion:latest .. @JrCs could you please review and merge this ?. What's that D:/ on the second docker-gen volume ?. First try starting your nginx-proxy stack from scratch:\ndocker-compose down -v\ndocker-compose up\nThis will delete then re-create the volumes declared in the compose file in addition to the containers:\nnginx_proxy_conf.d:\n  nginx_proxy_vhost.d:\n  nginx_proxy_html:\n  nginx_proxy_certs:\nThat won't touch D:/\nThen when the letsencrypt container is ready, try starting nextcloud again.. I just tried with the same compose files as you and I had no issue, the two certs were create and I could access nextcloud login page.\nThe only two difference were\n\nD:/Docker/nginx-proxy:/etc/docker-gen/templates replaced by\n./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\nusing nextcloud bundled sqlite instead of a mysql container (does not matter for this issue)\n\nCan you send me a mail so I can check something with you privately (address is on my github profile) ?. @TheLux83 > did you manage to get a SAN certificate after all ?. We haven't identified any precise cause or been able to reproduce @TheLux83 issue so there is unfortunately not much to update.. hi @m4teh \nUnfortunately that's currently not supported by nginx-proxy and it does no appear that it will be in the foreseeable future: https://github.com/jwilder/nginx-proxy/pull/254. I'm not witnessing this behaviour on any of my running container. I'm doing additional tests right now. It's true that we have a couple of dangerous rm -rf with unchecked variables that need to be secured, I'll work on that asap.\nIn the meantime please pull and use\njrcs/letsencrypt-nginx-proxy-companion:v1.6\nor\njrcs/letsencrypt-nginx-proxy-companion:stable. I think I found why you are experiencing this. Do you happen to have a trailing comma on one of your LETSENCRYPT_HOST value, likeLETSENCRYPT_HOST=example.com, ?. Did you have a working setup with a trailing comma before ? I ask because as @brainyron found in #254 , a trailing comma on LETSENCRYPT_HOST would not work even before recent commits.\nThe letsencrypt registration rate limit will cool down in 3 hours: https://letsencrypt.org/docs/rate-limits/\nI'm afraid there isn't much you can do before that short of getting a new account key from another IP Address and transferring it back to each of your domain folders in /etc/nginx/certs.. Oh, I meant trailing comma at the very end of variable like LETSENCRYPT_HOST=xxx.me, www.xxx.me,. So what's broken appears to be comma separated host lists with spaces in between, I'll have a look into that.\nSorry for the regression. :. Fixed by 4085f64 / #289 . Added real fix for #254 and #288 in addition to the rm -rf safeguard.. Hi. The only thing I can tell from your logs is that the LE validation server are getting a 503 when they try to get the challenge file. Is your nginx container working ok ?. I did not catch the HTTPS_METHOD=nohttp on cadvisor.\nThat won't work, see https://github.com/jwilder/nginx-proxy/issues/471. You can trigger a forced certificate renewal (of all certificates) with:\ndocker exec yourLEcontainername /app/force_renew.. I've already got this feature covered, I'll try to merge it in dev this week end.. A first version of the feature has been commited to dev : 7f66758f01855bdd3ac5008702c2ac23611502c0.\nIt's closely inspired by the way certbot handle account keys. You can check the doc and try it now by pulling and using jrcs/letsencrypt-nginx-proxy-companion:dev.\nNote: if you use the dev version with an existing certificates volume/dir, on the next certificate(s) renewal it will replace corresponding account keys with a symlink to\n/etc/nginx/certs/accounts/acme-v01.api.letsencrypt.org/directory/default.json\nThis new file will be copied from the account key of the first renewed certificate.\nThis will in turn cause a re-validation of all the other domains to the new common ACME account when their certificates are due for renewal. So be sure that your nginx-proxy stack is working properly and that you have no issues wit LE domain validation before using jrcs/letsencrypt-nginx-proxy-companion:dev, and backup you certificates volume.\nYou can also disable the feature entirely by setting the REUSE_ACCOUNT_KEYS to false on the letsencrypt container. This will make the container behave as it does currently in master (create a new ACME account for almost every new domain).\nThe automatic switch to a common ACME account key on renewal has been tested with success on two separate hosts running different services.\nI pondered about having the whole feature be opt-in or opt-out, IMO the current behaviour is generating enough issues on its own for this to be opt-out.. Merged in master as of #298 . LGTM. @zvinger > remove the symlinks inside /etc/nginx/certs to the key and certificate for the subdomains you don't want https turned on, then restart the nginx container. This will disable https for those subdomains.\nExample : for the subdomain phpmyadmin.service.com, remove\n\n/etc/nginx/certs/phpmyadmin.service.com.crt\n/etc/nginx/certs/phpmyadmin.service.com.key\n\nCurrently letsencrypt-nginx-proxy-companion does not have the logic needed to remove those symlinks when needed.. Weird. If you use the latest upstream nginx.tmpl, SSL for subdomain shouldn't be enabled at all if you don't have both a subdomain.crt and subdomain.key files inside /etc/nginx/certs/.\nCan you share your nginx-proxy config and the config of your service containers ? You can remove any personal information you don't want to share as long as you replace them with anonymized  values.. Did you enable https / SSL cert creation for docs.service.com at some point in the past, even just for test or on another host ?. Hi @zvinger \nAny clue of what went wrong ?. > When I add new containers to my docker environment, the lets encrypt companion should realize that certs are missing\nThis is normally what it does. There was an issue in your case but it's impossible to find what caused it with just the environment from the two proxyed apps, so leaving this issue open without more information won't help much.. Hi.\nWhat version of the container are you using ? Can you provide the full docker run commands you are using to start your nginx-proxy stack and your proxyed containers, and if possible the log output of the letsencrypt container when it issues a certificate with the wrong domain set ?. You shouldn't try to publish ports 80 or 443 ports on the proxyed containers with the -p argument, just expose the 80 port (or whatever port your container is serving http over) with the --expose argument if it's not already exposed by the Dockerfile (they are most probably already exposed). If you try to reach http serving containers with directly published ports, that won't go through the proxy and the certificate won't be served.\nThe --link is a legacy argument dating back from when docker networks didn't exist, I know it's unfortunately still on a lot of containers docs but its usage should be avoided in favor of said docker networks.\nTo get the logs of the container, do docker logs container-name. If you'd prefer no to publicly post your domains and subdomains (they'll appear in the logs) you can send me the logs by mail.\nDo you use the exact same config with docker compose ?. > Sorry if this didn't answer the origin post.\nNo problem \ud83d\ude03\nAlso, If you have a working setup with docker-compose don't spend too much time trying to find why your first attempt with docker run did not work as intended. I'll give it a try with the same configuration as yours but I don't see any obvious reason for the proxy to randomly serve the wrong certificate.. Where does your compose file pick those variables from ? Are you sure they are set correctly ? Have you tried with hardcoded values ? Do you have any logs from the letsencrypt container to share ?. Wait, what ? Why and how do you get those log output from certbot ?\nWe aren't using certbot at all in this container but simp_le.. You can get them with docker logs name-or-id-of-the-container.. No apologies needed ! Could you detail how do you think your previous use of certbot led to a symlink issue ? That could be helpful to me on another issue (#337).. No activity for 90+ days, closing.. Wasn't this fixed in compose 1.17.1 ?. No answers from issue creator for more than three months, closing.. Can you try again with the two containers setup rather than the three container setup ?. Maybe with HTTPS_METHOD=noredirect ?\nhttps://github.com/jwilder/nginx-proxy#how-ssl-support-works\n\nTo serve traffic in both SSL and non-SSL modes without redirecting to SSL, you can include the environment variable HTTPS_METHOD=noredirect (the default is HTTPS_METHOD=redirect).  HTTPS_METHOD must be specified on each container for which you want to override the default behavior. If HTTPS_METHOD=noredirect is used, Strict Transport Security (HSTS) is disabled to prevent HTTPS users from being redirected by the client. If you cannot get to the HTTP site after changing this setting, your browser has probably cached the HSTS policy and is automatically redirecting you back to HTTPS. You will need to clear your browser's HSTS cache or use an incognito window / different browser.. That can't be done solely from this project's side as it depends on an nginx.tmpl modification, but nothing prevents you from using a modified nginx.tmpl if needed.\n\nI gave it a shot there. Changes are from line 196 to 207. \nTest using this template seems ok, /.well-known/acme-challenge isn't redirected to https but everything else is. If you test with a browser you already used to navigate to one of your site, HSTS will force it to use https but Let's Encrypt will ignore HSTS for HTTP-01 validation.\nThe method for clearing the HSTS settings depends on you browser. I prefer to use TorBrowser for that kind of test as it clears most of its config (including HSTS) when you request a new identity.. I think you presume correctly, this is probably too specific to LE or to this project to get merged in the upstream nginx.tmpl. Maybe we should have a separate doc on this repo that covers modifying the template for stuff like this.. Hi ! Thanks for that PR. I have two remarks:\n\ncould you use a parameter substitution instead of removing set -u and testing for a non null variable ? Something like this:\nDOCKER_PROVIDER=${DOCKER_PROVIDER:-}\nif [[ \"${DOCKER_PROVIDER,,}\" == \"aws\" ]]; then\nsimilarly, could you do grep 'ContainerID' directly from the file  rather than disabling SC2002 ?\n\nbtw 1) is currently lacking on this line and that line could directly sed from the file as suggested on 2). If you don't mind adding that to the PR that would be neat \ud83d\udc4d . @myoung34 is it possible that in some case AWS ECS does not set the DOCKER_PROVIDER environment variable ?\nIs this DOCKER_PROVIDER variable a standard among container management services or unique to ECS ?\nIf it's not widely used and/or if it is sometimes not set by ECS, maybe the fix should rather directly test [[ -n \"${ECS_CONTAINER_METADATA_FILE:-}\" ]] instead ?. @myoung34 do you think a better approach would be to check in /proc/self/cgroup first, then if it returns nothing either use ECS_CONTAINER_METADATA_FILE or a different regex ? \nFrom what @DurinMusicspear said, if ECS_CONTAINER_METADATA_FILE isn't enabled by default the alternative regex seems to be a bit more reliable.\nThere is a similar proposition for the same issue in docker-gen: https://github.com/jwilder/docker-gen/issues/263. Ok I might have misunderstood something from the beginning, the DOCKER_PROVIDER was supposed to be a new user provided environment variable ?. Got it. I thought DOCKER_PROVIDER was supposed to be set by ECS itself and I'm under the impression that @DurinMusicspear did not understand that it was supposed to be set by the user either. \nIf you introduce a new environment variable you'll have to document its use in the README.\nWith all that in mind i think the sed override might be simpler / more reliable. Something like, let's say:\n```\nDOCKER_PROVIDER=${DOCKER_PROVIDER:-docker}\ncase $DOCKER_PROVIDER in\naws|AWS)\n    CGROUP_PREFIX=ecs\n    ;;\n*)\n    CGROUP_PREFIX=docker\n    ;;\nesac\nexport CONTAINER_ID=$(sed -nE \"s/^.+$CGROUP_PREFIX\\/-.*/\\1/p\" /proc/self/group | head -n 1)\n```\nUnless I've missed something, default behavior is unchanged, it is explicit and it work under ECS even if ECS_CONTAINER_METADATA_FILE hasn't been enabled. We could directly set the CGROUP_PREFIX but I think it's better to abstract away what the container really does to get its own ID under different container management services and just have the user set an environment variable with a self explanatory name and value.\nIf in the future getting the container ID under Kubernetes or another container management service require something more complex than a regexp change, the export CONTAINER_ID can be moved inside the case.\nYour thought ?. Ok so let's go for ECS_CONTAINER_METADATA_FILE. There are still a some changes needed for this to be merged:\n\ndocument the new DOCKER_PROVIDER environment variable use (and clarify the fact that in ECS, \nECS_CONTAINER_METADATA_FILE has to be manually enabled).\nuse the value ecs rather than aws (you can run containers on AWS without using ECS at all, so I'm afraid it might mislead some people if we stick to aws).\nuse a case rather than if/else, it's cleaner and will be easier for us to maintain in the long term if the plan is to add other container management services. If you're worried about speed, it does not make any measurable difference whether you have two patterns in your case statement or several thousands (tested for real with time and script-generated case).\npreferably check in the ecs case that ECS_CONTAINER_METADATA_FILE is set, and  if it's not exit with a message explaining that it needs to be enabled.\nno need to check DOCKER_PROVIDER with -n if it is a user set environment variable. Either it's set by the user or it's not, get a default value and is caught by the default case.\n\nproto code:\n```\nDOCKER_PROVIDER=${DOCKER_PROVIDER:-default} #or docker or whatever default value seems more relevant to you\ncase $DOCKER_PROVIDER in\necs|ECS)\n    if [[ -z ${ECS_CONTAINER_METADATA_FILE:-} ]]; then\n        echo instructions\n        exit 1\n    fi\n    export CONTAINER_ID=$(ecs method)\n    ;;\n*)\n    export CONTAINER_ID=$(default method)\n    ;;\nesac\n```. @jschlieber As soon as the requested changes are made.\n@myoung34 If you lack time to make the changes or if you think they're problematic, please let me know.. @pbreah thanks for reporting the issue, there are a few more instances of functions sharing names with variables, I'll try to fix them asap.. @myoung34 LGTM, thanks for this PR and the added effort on changes.\nIs it ok with you if I squash the commits ?. This self container ID issue with AWS ECS bugs me.\nThe sole purpose of getting the LE container ID are a configuration check during container startup and the ability to automatically get the nginx-proxy container ID with --volumes-from.\nNone of them are actually required to correctly run the container.\nI'm a newbie with ECS but I guess the --volumes-from flag of docker run does not even make sense in this context ?. The self container ID is now retrieved with a way simpler method that has been tested to work on Amazon ECS (and should work on Kubernetes too) + the hard requirement that the container be able to retrieve its self ID during startup has been lifted if you use other methods of getting the nginx/nginx-proxy container ID. See #491 for details.\nThis should greatly simplify the use of this container on Amazon ECS.. That should not be too difficult with a modified version of nginx.tmpl.\nI think deleting from line 296 to line 355 included will get you pretty close.. No answers from issue creator for more than three months, closing.. Hi. I'm not super familiar with docker-cloud but I just tried your stack with a self-provided node running debian 8 and everything worked ok.\nI also tried without \nlinks:\n    - proxy\nand\nroles:\n    - global\nas both aren't required (nginx-proxy does not need to access dockercloud API, and I don't get the why of the links statement on the letsencrypt container). Works the same.\nMaybe that's related to the specifics of the nodes you are running this stack on, can you provide more info so I can try to reproduce the issue ?. Hi,\nProviding ownership information requires either an OV (organization validated) or EV (extended validation) certificate.\nThose two type of certificates are obtained through a manual validation process, you have to prove that you are the organization you claim to be, and not just prove that you own a certain domain or set of domains. So Let's Encrypt aim being to provide free certificates in an automated way, they only issue DV (domain validated) certificates.\nhttps://community.letsencrypt.org/t/adding-ownership-information/20174. Hi.\nThe reverse proxy is in fact another project : https://github.com/jwilder/nginx-proxy\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" functions are to enable the automatic creation of certificates, to put them in the right place with the right name so they can be used by nginx-proxy and to reload the proxy when needed.. You are using an outdated version of the container (the lines quoted in the traceback don't match the version of simp_le.py in use on the current container), please try pulling stable / v1.6 or latest. @donicrosby I'm afraid I won't be of much help, neither this project nor nginx-proxy officially supports archs others than amd64.\nBut alpine and nginx are now both natively multiarch, and jwilder/docker-gen provides binary for armhf so I think it's totally doable to create armhf Dockerfiles for both with a bit of tinkering and build them on your armhf device.\nOut of curiosity, were did you get your current armhf images from ?. Please see #305 . ?. @tradziej please take a look at this pending pull request: #300 . Closed by #300 . @tldzyx > by \"In my network, only 443 port can access.\", do you mean you have no way of using port 80 ? \nIf so you won't be able to use this project at all, the ACME client used (simp_le) only support http-01 challenge, which require a working port 80 connection. There is no way to bypass or change that.\n@hoonoh > what version of the letsencrypt container are you running ?. Nope, again simp_le does not use the tls-sni-01 challenge.. As no precise issue have been identified yet it will be pretty hard to solve it with a workaround.\nFailed authorization are most often the result of a misconfiguration.. Okay, so you updated from v1.5 to v1.7 before automatic renewal was due, then when automatic renewal triggered with v1.7 it failed. Did I get that right ?. > Is there any specific ports needed by letsencrypt except the port 80 and 443 ?\nFor inbound ports yes that's all you need. The host on which I do most of the dev tests only has an SSH port + 80 and 443 opened. Do you think the doc is unclear or vague about the port 80 requirement ?\nAbout tls-sni-01, let this be crystal clear for anybody reading this issue:\nNeither this project nor simp_le (which it is based upon) use or even can use tls-sni-01 challenge. Any issue with tls-sni-01 challenge won't affect letsencrypt-nginx-proxy-companion.\nOn the other hand issues with http-01 challenge most definitely will as it is the only supported challenge.. Regarding the CAA record, Let's Encrypt does not require it to be set but require the DNS provider of the domain to answer correctly to requests for a CAA record.\nhttps://letsencrypt.org/docs/caa/. @jsaalfeld you can check this example of compose v3 file for a two containers setup.\nedit : you can ignore the dhparam volume on the letsencrypt container, it's not used.. Closing due to age + no answer from issue creator.. Hi. The program writing to STDERR inside the container is simp_le, which is a different project. Could you open an issue there ? https://github.com/zenhack/simp_le. What do you mean by \"broken\" ? Did you have an issue related to the fact that the symlink point to an absolute path rather than a relative one ?\nI agree that the symlink should be relative though, do you want to submit a PR ?. Hi,\nFirst, the name of the key file (key.pem) is hardcoded inside the ACME client we're using, simp_le. The project manifesto state that specifying output file paths is not allowed by design (don't ask me why, I'm not the original creator) and that user should symlink if necessary. That's precisely what letsencrypt-nginx-proxy-companion does to have automated working setups with nginx-proxy.\nWe could add that kind of feature but I think that's tangent to #275, as in the end goal make sense to me but is out of the stated scope of the current project (automated cert creation for nginx-proxy). I'm not saying that won't be done ever but I think there is still a lot of work to do on the core functionality and that jury rigging out of scope features right now might not be a good long term idea.\n. And I can help you jury rigg this feature into a forked version if you'd like.. This project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the nginx-proxy project, which does the actual proxying and is maintained by different people.\nIf your plan is to generate millions of certificates on the fly, you should also be very aware of Let's Encrypt rate limits. Edit : removed the last part, might not be true.. @cpu, is there a rate limit for registered domains per account per week ? I mean would boulder issue certificates for one million discrete registered domains without hitting any rate limit other than requests per second ?. Please read https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/315#issuecomment-356681055 again.\nThis is not nginx-proxy repo.. Hi ! That's planned but I can't tell you when that'll be done. Note that if you use raspbian, you'll need arm/armhf/armv7l binaries rather than arm64 (raspbian on rpi3 is still 32 bits, as far as I know there is no 64 bits os on rpi3 yet. Arch, maybe ?).\nI think just changing the Dockerfile to use the correct docker-gen binary and building from it on the arm machine should work, but I haven't tested it yet. I'll probably try that later this WE.. With a bit of Dockerfile hacking it worked perfectly on a Raspberry Pi 3 (just very slowly for everything related to cryptography, as expected). I don't think it will be any different on Scaleway's arm or arm64 servers.\nI submitted a PR on jwilder/docker-gen to have arm64 binaries availables.\nDeployment to arm and arm64 can be made relatively easy with docker-compose and custom Dockerfiles once those binaries are available.. I came up with this to have an easier to use solution: https://github.com/buchdag/multiarch-letsencrypt-nginx-proxy. The image isn't natively multi arch on Dockerhub yet, but #391 brings the ability to build the image on non amd64 archs.. Hi @cdrage \nI understand the issue but I'm afraid that adding documentation from nginx-proxy in the README might turn out to be a slippery slope toward more and more people thinking this project is nginx-proxy and opening issues that don't belong here.\nI'm not really happy with the doc as it is and any modification that would clarify the fact that additional knowledge of the nginx-proxy doc is also required to use this project would be welcome (I'm not a native english speaker so doc related stuff take huge amounts of time for me).\nOn the other hand I started a Wiki for this project, and that might be the right place for something like \"nginx-proxy docs relevant to this project\" (this is a bad name but I think you'll get what I mean). Again help from people more fluent in english than me is welcome.. I think the recent work on the Wiki took care of this issue:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Basic-usage#step-3---proxyed-containers\nContributions to the Wiki are still welcome.. Wilcard certs will require dns-01 challenge and simp_le only support http-01,  so they won't be available through letsencrypt-nginx-proxy-companion.\nhttps://github.com/zenhack/simp_le/issues/101. Unfortunately it's not as simple as that, let me clarify : support for ACME V2 will be implemented in simp_le, but dns-01 challenge won't.\ndns-01 challenge is not new or specific to ACME v2 and the original simp_le developer (@kuba) made the explicit choice to limit simp_le to http-01 challenge from the beginning (you can see it in the manifesto, point 3).. @Raqbit I'm re-opening so the issue and the reason why we won't (/ can't) support wildcard certs have better visibility.. @almereyda as told in my first message on this issue and on the simp_le issue you mentioned, wilcard certificates requires dns-01 challenge support, which is absent from simp_le (and there are no plans to add it).\nThis is not the same thing as (or related to) Acme v2 support.. It could, letsencrypt-nginx-proxy-companion is pretty much \"just\" bash automation around simp_le and nginx-proxy, there is nothing preventing someone from re-writting it to use another ACME client and provide additional features. As usual with small open source projects the only real issues are the amount of work necessary and the time it takes.\nI've been thinking for a while about doing a fork of this project using certbot instead of simp_le but it's pretty far from a drop-in replacement as the two behave in very different ways. I lack the time to do more than experiment a bit with the idea once in a while.\nAs for other options, the most serious is probably switching to a bigger project like https://github.com/containous/traefik\nTo be honest I have my doubts about the long term viability of the nginx-proxy / docker-gen solution as it's now extremely hard to get contributions merged to those projects (mostly due to the fact that their creator is very busy working at influxdb, I guess. That's understandable).. Errr no it does not.\nWe (zenhack and I) said on that issue that ACME v2 support is planned (we said nothing about when, and it might turn out to be harder than expected) and that dns-01 is out of scope.\nAgain dns-01 challenge is required to obtain a wildcard certificate through the Let's Encrypt ACME v2 endpoint, but they are not one and the same thing: implementing ACME v2 does not imply implementing dns-01 challenge at all.. @BirkhoffLee \"expect this to work\" \"useless error\" ... nice tone there.\nBTW the \"useless error\" actually comes from simp_le, not from this container's code.. My bad, I did not realize you were a non native english speaker. \ud83d\ude05\nYou're right with the fact that some warnings about unsupported features (as of now) like ACME V2 endpoints and wildcard certificates should be added. I'll try to add this to dev this week.. letsencrypt-nginx-proxy-companion does not \"use\" certificates. It handle their creation, renewal, and some symlink work so that nginx-proxy can pick them up.\nThe application you want to use your externally obtained certificates with is nginx-proxy and that amount to following their existing doc and doing a naming or symlinking job similar to what the companion do.\nThe companion should not be involved at all when you use externally obtained wildcard certs.. Ok that's a bug, it should not happen. Do you mind opening a separate issue so we can work toward fixing it ? . A v2.0 version using acme.sh is being worked on and will be available at least on the dev branch by the end of march (that's an estimate, not a hard deadline).\nThis new version will be able to use ACME v2 endpoint (and will probably default to them) and to issue ECDSA certificates but I'm not sure yet if the ability to issue wildcard certificate will be present as soon as v2.0 or on a later version.\nSome feature will have to be handled very differently than on the current version (namely pretty much everything about ACME accounts and emails), the container will require some additional configuration and all existing certs will have to be issued again (with new domain authorisations).\nI've considered and tested lego as suggested by @whlsxl but it does not fit as well as acme.sh and require too much work (it pretty much require to build all the new / existing / changed / renewed cert logic from the ground up).\nAlso considering(ed) dehydrated but it does not have built in DNS manipulation and would require pairing with something like lexicon to enable automated wildcard certificate issuance.. Backward compatibility might be really hard depending on what you expect to be backward compatible, ie most environment variables and config parameters won't change, but reusing existing data will be either hard (certificates and private key) or very hard / not possible (ACME account keys) as simp_le and acme.sh store them in very different ways.. I'll open another separate issue with more details about were I am now with the acme.sh version and what the issues / challenges are so we can discuss this as soon as I'll have some time.. Duplicate of #319 . Hi ! Thanks for the PR. Were you able to find exactly why the check_nginx_proxy_container_run is failing with the three containers setup ?. ... and the test are currently running with --volumes-from, so indeed you don't get an nginx container id on three container setup. Make sense.\nI'll cleanup the \"get nginx container id\" logic later to make this work with the three containers setup too, that was planned anyway.\nI've got only three minor request for changes that I missed the first time.. Thanks for the changes.\nLooks good to me, can you squash the three commits into one or do you want me to do it ?. Hi.\nThe fact that port 80 has to be opened does not introduce security problem(s).\nUsing the default nginx.tmpl, with no additional nginx-proxy configuration, when you send an http request to the port 80, either one of those things happen:\n\nthe hostname sent by the client correspond to a domain that's currently configured on the proxy and ssl is not configured for this domain : the request is forwarded to the corresponding container.\nthe hostname sent by the client correspond to a domain that's currently configured on the proxy and ssl is configured for this domain : the request is redirected to port 443 and forwarded to the corresponding container.\nthe hostname sent by the client does not correspond to a domain that's currently configured on the proxy : nginx answer with a 503 error.\n\nYou can't close or change the port 80 or http-01 challenges will fail. There isn't really a way to \"hide\" a port, either it is open and will answer / shows up on scan, or it's closed. Reasons why you can't filter either are described here : https://community.letsencrypt.org/t/ip-addresses-le-is-validating-from-to-build-firewall-rule/5410/22\nAuthentication is not a concept related to a port. The web servers that get request forwarded to them can ask for authentication but it is disabled for the challenge folder anyway, because as you correctly guessed that would prevent the validation server from accessing the file.\nThose challenge file do not contain any sensitive info and are deleted right after challenge completion anyway, wether it succeeded or failed.. If the 503 is bothering you, you can use nginx-proxy DEFAULT_HOST environment variable.. Yes, nginx-proxy environment variables have to be set on the docker-gen container when you use the three containers setup.. Hi, can you try with jrcs/letsencrypt-nginx-proxy-companion:dev ?. Obviously simp_le is unable to reach the letsencrypt api endpoint. I have zero experience with running python apps with http proxys, so I don't really know what's going wrong here.\nDo you have any logs on the proxy to check if the requests are even reaching it ?. @andre-dierker what you describe is Let's Encrypt servers being unable to reach the host.\n@dmanser92 issue is the other way around, simp_le running inside the container on the host can't reach the Let's Encrypt API endpoint.. @russiano I don't think it's linked to requests or urllib3 versions as stated in the certbot issue, they're the same in v1.6, v1.7, latest and dev: requests-2.18.4 and urllib3-1.22\nsimp_le version is also the same across v1.6, v1.7 and latest.\nCould you try building a letsencrypt-nginx-proxy-companion image with the current Dockerfile but with alpine:3.6 instead of alpine:3.7 ? I don't have a proxy myself so I can't really test this.. Just tried without issue on two containers, one based on alpine (nginx:alpine) and another based on debian.\nThe container based on alpine resolve its domain name to its own IP because hostname and domainname were set on its compose file.\nThe container based on debian resolve its domain name to the public IP of the docker host.. Hi. Additional configuration is required if you want to run this container on ECS.\nPlease check the DOCKER_PROVIDER environment variable under the Optional container environment variables section of the Readme.. Do you have the log output from the letsencrypt-nginx-proxy-companion container ?. I'm afraid I won't be able to help you much, I don't even know how to check containers logs under ECS \ud83d\ude10 \n@myoung34 contributed the DOCKER_PROVIDER / ECS code, maybe he can assist you in troubleshooting your setup ?. Closing in favor of the more complete discussion in https://github.com/jwilder/nginx-proxy/issues/1052. Hi.\nThis project (letsencrypt-nginx-proxy-companion) is separate from nginx-proxy and maintained by different people. We only deal with issues related to letsencrypt-nginx-proxy-companion.\nPlease submit your nginx-proxy issues directly to the nginx-proxy repo.\nAlso note that you won't be able to use the letsencrypt-nginx-proxy-companion if your nginx proxy does not run on the default ports 80 and 443.. Please base your PR on a clean fork of the project, not on a branch that have irrelevant past commits followed by a revert and would result in added noise in the final squashed changes (if you are just adding one line to README.md, no other file should be modified by the PR as a whole).\nAlso a minimal description would be welcome.. Woops wrong button.. Hi. When you have https enabled for a virtual host, the default behavior of nginx-proxy is to redirect http traffic to https for this virtual host.. If needed you can control this behavior with the HTTPS_METHOD environment variable on the nginx-proxy container (or on the docker-gen container if you are using the three containers setup): https://github.com/jwilder/nginx-proxy#how-ssl-support-works\nDo you mind if I close the issue ?. Correct me if I'm wrong, but due to this and this, your compose file example does not actually use jrcs/letsencrypt-nginx-proxy-companion but your own version (registry.progress44.com/letsencrypt) ?\nSame thing for nginx and docker-gen ?. @jrcs as stated this compose file does not use jrcs/letsencrypt-nginx-proxy-companion but a (now out of sync) fork. I think this is unclear and confusing, and shouldn't be merged. Any advice ?. Yup.. This is entirely controlled by the nginx.tmpl fed to nginx-proxy/docker-gen, so unfortunately we have zero control over it from this container.\nI did not use the nginx-proxy default domain feature a lot, I'm going to do some tests and see if the le companion has an effect on it.. @fabiansiegel yep, I think this comment confirms that this is an issue with nginx.tmpl : https://github.com/jwilder/nginx-proxy/issues/105#issuecomment-369428711\nClosing.. Hi !\nAdding that kind of cert post processing is definitely possible (in the sense that it can technically be done) but it's also, out of scope in my opinion : as the name of the project imply, it aims solely to provide auto LE cert generation for nginx-proxy.\nI'm well aware that the ease in auto managing certificates with this container have people wish for its scope to be extended (see #315 and #275 for instance) but for now I don't see how to get down this road without those scope extensions ending up as jury rigged features on a very purpose specific project.\nDon't hesitate to give me your toughts on this.\nBack to the feature you asked for, the best I can do right now is try to help you add it on a forked version if you'd like.. I think you should rather go for something simpler and modify the letsencrypt-nginx-proxy-companion to add an env var like MONGODB_POSTPROCESS which, when set to true, will trigger the post processing for this specific certificate during the letsencrypt service loop. You already have docker-gen running inside this container and watching the events on the docker socket, so don't waste time and ressource doing another watcher.. Interpreting bash commands from environment variable does not really sound like a good idea to me :fearful: . Additional commits have been pushed to the dev branch:\n\n\nThe single domain certs whose domain is now part of another SAN certificate are no longer removed. There is no need to remove them as they are not symlinked to anyway, and keeping them allows going back to the single cert if required without issuing a new one. 40a4d9c\n\n\nThe symlinks are no longer created / changed when simp_le was unable to generate the certificate. With the previous commit, this prevent issues like #337 where the target certificate does not cover the required domain(s) but the symlink get created anyway. 810a6cd\n\n\nRather than overwriting the certificates coming from the staging endpoint with those coming from the production endpoint and (more annoyingly) vice versa, both are now kept, the staging cert / key / chain being put in their own directory prefixed with _test_. 0312525\n\n\nAddition of a script that print information about existing certificates, including the domains that are using it. fa837ba\n\n\nFix the link creation function that was skipping creation based solely on the link target existence. d606704\n\n\nThe whole symlinking process had many issues and should be way more reliable now.. Hi\nI think that the reason why it was removed was rather that @jrcs encountered errors with it, check the commit comments : https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/commit/1f678ed2c205b94d0f66dc8ec0270805d86f74a4\nI personally never encountered any error with it and it seemed to solve an issue at some point, but the same issue was gone even after the revert, so I don't really know where we stand with this right now, and I'm not experienced enough with nginx to see why the ^~ could have caused errors.. @thomaco my bad, I thought this might have been related and a broader issue with the /.well-known/acme-challenge/ location.. @thomaco I'm not forgetting this PR, I'll get back to it as soon as #334 is merged and v1.8 released.. So. Using the ^~ make sense to me.\nDo you see a case where having it would have resulted in a failed authorization and removing it would have solved the issue ? I'll try to have @JrCs chime in on this but I believe he did not find exactly why the ^~ caused authorization issues in his case (authorization issues that appeared to be solved by reverting the commit).. Ok, as far as I'm concerned I think this should be merged back, but it won't be without @JrCs approval.. Please check the the failing authorizations URL returned by Let's Encrypt.. I just sent you an email.. @streamholder was it solved in the end ? I kindda lost myself here.. @hthieu1110 yes it does, you have nothing to do. If you have an authorization issue, you can start by following those troubleshooting tips: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations\nNo answer from issue's creator for more than 90 days, closing.. Hi @mortenhartvig , thanks for your report, I think I identified a bug thanks to it: the certificate creation / renewal process does not care wether the certificate issuance succeeded or not when creating symlink to certificates, so you can end up with say a www.domain.tld.crt symlink to a certificate that actually does not include this domain. I'll try to fix this soon.. This was fixed in commits 810a6cd27c49997fdb57d7786d4332a8ca325557 and d606704119a9cef53b9ea7405fd51fad0415e858. The error message is self explanatory, /etc/nginx/vhost.d has to be writable and yours is not because it's declared in nginx-proxy as ro.. Hi. The two setups are either:\n\nnginx-proxy + le-companion\nnginx (not nginx-proxy)  + docker-gen + le-companion\n\nnginx-proxy + docker-gen + le-companion is an erroneous setup.\nIf you want to use the three containers setup, as explained in the doc you have to share the /etc/nginx/conf.d folder between the nginx and docker-gen containers with a docker volume.\nThat's what your docker-gen container is complaining about, it can't write to /etc/nginx/conf.d because it did not get this volume / folder from the nginx container.\nI'd suggest that you check https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Basic-usage and https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Advanced-usage. Hi. Please check the the failing authorizations URL returned by Let's Encrypt (in the containers logs) for additional informations on the reason LE couldn't validate the authorization. Be advised that it will contain your domain names, so don't post the URL here if you don't want your domain names to be made public.. @javierojeda94 the only challenge type we're interested in here is http-01, if it fails its status will be invalid like in @Egregors logs and you'll have a bit more details on the failure (here the server returned a 404 error). \n@Egregors this is not the first time I see someone having an authorization issue cleared up by removing the certs, I'm pretty sure we're having issues with the certs symlinks.\n@Archcry it will be hard to provide without logs output. Have you checked https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations ?. @Archcry Glad it resolved itself even if we could not find the issue.\n@gentle9 Yep, you have to be absolutely certain about IPv6 if you put an AAAA record on your domain DNS zone.. The certificate generation process only rely on the proxyed container environment variable, wether this container actually run a service or not and this service is ready or not should not have any bearing on it.\nYou can try to create a certificate for a busybox container running nothing but sleep 3600, it will work all the same.. Can you provide at least the commands / config details of your setup ?. Can you try without network_internal.conf and with -p 443:443 on the proxy ?. Closing issue due to inactivity.. Hi. You shouldn't do anything specific regarding permissions or process owners, everything should work out of the box when you follow instructions, with no additional step (provided the basic requirements are met).\nThe full path of the challenges directory if supposed to be /usr/share/nginx/html.well-known/acme-challenge, where do you get this data/ from ? Are you using Host Volumes ?. I'm using nginx:alpine too and having none of those issues. My guess is that the permission issue comes from your local directory, could you try using a named volume (eg html:/usr/share/nginx/html and adding the corresponding named volume declaration to your compose file) instead of a host volume ?. No activity for 90+ days, closing.. Hello. When you request a certificate with multiple domain names, Let's Encrypt will issue a SAN (Subject Alternative Name) certificate.\nThe first domain provided will be the CN or Common Name of the certificate, all the others will appear under the Certificate/Extensions/Certificate Subject Alt Name field (using Firefox as an example) along with the Common Name.\nSo yes, using your example it's expected that when browsing service.example.com, when looking at the certificate details, you'll see api.example.com as the certificate Subject / CN.. Do you mind if I ask why would you want to do this ?\nWhat is bothering you with the way SAN certificate works ?. @r14c ping ?. @rakshazi I have no way to test this, can you confirm that the PR solve the issue ?. ping @rakshazi @r14c . No problem, thank you for your answer @rakshazi . Considering hardened kernel / grsecurity is being dropped in alpine 3.8 and the absence of answer from the PR author, this won't be merged. Closing.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi. Closing for the same reason as #345, this a nginx-proxy issue / feature request.. Support for wildcard certs won't be possible, see #319 . Support for wildcard certs won't be possible, see #319\n. Not with the current ACME client (simp_le), even if it supports ACME v2 later. See #319 . Sorry for the regression, I identified the reason, that should be fixed on dev, could you pull jrcs/letsencrypt-nginx-proxy-companion:dev and try it ?. Thanks for the fix confirmation. The fixed version has been pushed as latest and v1.8 too to prevent this regression from affecting further people.. Fixed by #352 . alastaircoote/docker-letsencrypt-nginx-proxy-companion is an extremely outdated fork of this project.. The specific rate limit you just hit is this one:\n\nYou can create a maximum of 10 Accounts per IP Address per 3 hours. You can create a maximum of 500 Accounts per IP Range within an IPv6 /48 per 3 hours. Hitting either account rate limit is very rare, and we recommend that large integrators prefer a design using one account for many customers.\n\nThis rate limit is on Let's Encrypt side, and the only thing you can do is wait for three hours.\nThe recommendation to use one account for many customer to prevent that kind of rate limiting has been merged to jrcs/docker-letsencrypt-nginx-proxy-companion a few months ago: 7f66758f01855bdd3ac5008702c2ac23611502c0. VIRTUAL_HOST control proxying by nginx-proxy, not certificate creation by this container.\nYou should probably start by reading the doc.. > OK duchbag\nbuchdag \ud83d\ude04 . Can you try with tagged version v1.7 ?. @sereysethy I'll try to help you find why the LE companion has issue with your nginx container. Can you give me more info about your configuration (compose file or CLI commands you run your containers with for instance) ? \nDon't forget to redact personal informations that you might not want to share, like domains or email addresses.. @sereysethy could you try again with tagged version dev ?. Nope, I made mistake, I'm correcting it and pushing a fixed dev version.. Ok your issue is completely different than what I thought.\nDocker swarm and using several nginx instance are completely unsupported at the moment so what I think I found and fixed in dev probably won't help you.\nNGINX_PROXY_CONTAINER and NGINX_DOCKER_GEN_CONTAINER should be set to a container name, not to a service name.\nWhen using a two container setup, you must not use NGINX_DOCKER_GEN_CONTAINER. This one is used only when nginx and docker-gen are separate containers (three containers setup).\nYou should not use both the environment variables and the labels, pick either depending on what your setup require.\nThe order of priority the letsencrypt container uses to get the nginx container ID is label > environment variable > --volumes-from, ie label has the highest priority because it's the only method that can deal with dynamic names.. Could you try dialing the nginx-proxy container back to one replica and removing the two environment variables on the letsencrypt container ?. Start with v1.7 then if it works and you can spare the time, try with v1.8.. Glad it worked.\nBTW I think this feature (support for multiple nginx containers) should be easy enough to add, I'll come back to you when I'll have something worth testing.. Inactive issue, closing.\nSupport for multiple nginx container is still planned but I can't provide any ETA for this.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi.\nUnfortunately you can't, as stated in the doc the only challenge method supported is http-01.. @fkling yes but that's mid / long term, I can't give you any ETA or even an estimate.. Okay, sure.. This should have been fixed recently on master (latest on Dockerhub).. No activity on this issue, closing.. I'm not sure I get what you mean / would like, could you clarify ?. There must be an issue somewhere with your setup, Let's Encrypt don't send expiration notification when you renew a certificate : https://letsencrypt.org/docs/expiration-emails/\n\nIf your certificate is already renewed, we won\u2019t send an expiry notice. We consider a certificate to be renewed if there is a newer certificate with the exact same set of names, regardless of which account created it. If you\u2019ve issued a new certificate that adds or removes a name relative to your old certificate, you will get expiration email about your old certificate.. @cpu, any idea about this ?. @almereyda any update on this issue ?. Closing due to inactivity.. Never saw this one. Have you tried manually removing the offending key.pem ?. You're welcome, thanks for the update on the resolved issue.. Hi.\n\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nSolving your redirection loop issue depends on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi. Were you able to troubleshoot and/or solve this? . Was it working before ? What version of the container are you using ? What OS, Docker and Docker Composer version are you using ? Can you share your compose file ?. I have no idea how memory_limit plays with this container.\nHave you tried raising the limit ? Using docker stat and manually triggering /app/signal_le_service, I just saw memory usage slightly above 30 Mib.. @kaiokenx10 I suspect your issue has the same cause.. No update from issue creator, closing.. Hi.\nThis project (letsencrypt-nginx-proxy-companion) does not handle the actual proxying so you probably won't get the answer you are looking for here. nginx-proxy does and you should ask there instead.\nIf something is possible at all with nginx, it will probably be possible with nginx-proxy too (using a custom nginx.tmpl for docker-gen).. Hi @maximkrusina \nThis is a duplicate of #8\n@JrCs explained in that issue that he doesn't want to implement this feature on his project, I'll ask him if he'd reconsider, that seems like a good idea to me and not too hard to implement.\nIn the meantime you can use openssl from inside the container with docker exec, that's pretty straightforward and probably the easiest way for now.. An experimental version of this feature inspired by @ymettier PR #220 has been added to dev.\nThis instructions are here. Any feedback is welcome.. @ladrua for now they're not picked up at all, meaning you'll either have to\n\nwait for the next service loop execution (every hour)\nmanually trigger it with docker exec your-le-container /app/signal_le_service. @ladrua I pushed two more commits to dev. The missing ; has been corrected and the challenge config should be correctly removed too. No idea where you permission issue came from, I'll have to take a look again.. > does it create the challenge configs even though renewal is not necessary? Must it?\n\nYes, because simp_le is determining by itself if the certificate needs to be renewed or not, there is no \"pre-renewal\" hook we can use to create / change the challenge config only when a certificate is about to be created or renewed.\nThe situation is the same for the certificate that are created from containers environment variables, add_location_configuration is executed every hour for every domain, wether a certificate is going to be created/renewed or not.\n\nhow are we sure the challange configs are used in favour of the manual configs you have for the underlying services during renewal/generation?\n\nI can't answer with certainty yet, that's why this feature is considered experimental for now.. I've pushed a new commit with the vhost logging format defined directly in the challenge config file, that should fix that logging error.\n\nI see, I guess there must be a naming convention for the standalone configs(maybe matching the LETSENCRYPT_STANDALONE_CERTS array defeintions?), and the service disable/re-enable them somehow?\n\nThe expected behavior is (no matter what happen to the certificate):\n- create required standalone config files\n- reload nginx\n- let simp_le create / renew / do nothing\n- remove standalone config files\n- reload nginx\nNo idea why simp_le crashed like that, I did not touch anything that effect the simp_le process. The only relevant issue I found is this one on another repo : https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion/issues/62. > I think you need to remove the fix for the vhost log_format\nDone. I also changed the test unit slightly to cover making change to letsencrypt_user_data and manually triggering of the service loop to pick up those changes.\n\nit happened because of my domain name starting with da and hence the config is loaded before the default.conf Not sure how to solve that though.\n\nThe most straightforward and simple solution is probably just to name the config file standalone-cert-$domain.conf instead of $domain-standalone-cert.conf. This change has been committed to dev.\n\nIt still leaves my example.com-standalone-cert.conf it might be because the second domain example2.com fails?\n\nCould you try to remove the certificate covering the domain whose challenge is failing from letsencrypt_user_data ?. > but the change of name convention to standalone-cert-$domain.conf would not work for say.. xxx.com\nI don't understand why it would not work, \"working\" here being the domain specific, self generated conf file loading after default.conf no matter what the domain is.\nUnless I'm mistaken, a conf file starting with an s will always load after a conf file starting with a d.. > Hope this makes it to master as this is super usefull, well done!\nThanks, I really appreciate that you took the time to test this and give feedback.\nI'd like a bit more user testing and feedback (even just \"yup it works\") from people with different setups before merging it into master. \nI'll keep dev in sync with master anyway.. @ymettier @mossholderm @ryneeverett @ForsakenHarmony @augusteo @Pimmetje @hamon-e @Panderine @CWempe @flocomkoko @cphamlet @hadrien-toma @kosli @VeeeneX @felixsteghofer @curtiszimmerman\nYou manifested interest at some point for the ability to generate \"standalone\" certificates with letsencrypt-nginx-proxy-companion (ie certificate not created from a Docker container environment variables). A beta version of this feature, inspired by @ymettier #220 has been merged to the dev branch and is available through Docker hub with the dev tagged version of this container.\nInstructions are here : https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Standalone-certificates-(beta)\nIf you are still using letsencrypt-nginx-proxy-companion and are still interested by this feature, test and feedback would be super helpful.\nSorry in advance if the mention for an old topic bothered you.. That's weird, I've tried adding special checks for that in the test unit, and the resulting build pass without issues. Are you sure you pulled or build an up to date version and those aren't leftovers files from a previous dev version ?. I updated the dev image to track changes in latest + the following changes:\n\n/etc/nginx/conf.d presence and writeability is now checked once during container init with the existing check_writable_directory function\nany remaining standalone configuration files are cleaned up on container exit\nadded the previously mentioned check to the certs_standalone test unit\nadded an additional debug message when standalone configuration files are deleted during the LE service loop. @ladrua the for loop that handle standalone config removal was at the wrong level, that should finally be fixed in the latest dev version.. Anything else to report from people who tested this feature (or are currently using it) ?\n\nI'm considering it for merging into the master branch in the coming weeks.. Hi, this warning will disappear in the next version, when thesimp_le version in use will be updated to >= 0.8.0. Hi.\nstable is currently v1.7, the /app/cert_status script was added in v1.8.\n/app/cert_status works fine with latest, just tested it.. Could you try pulling jrcs/letsencrypt-nginx-proxy-companion:latest again ?. Was this fixed in alpine: 3.7 ?. Thanks for the contribution @Javrd\nThis PR has been superseded by #391. Hi.\nCorrect me if I'm wrong, but I think the same thing would happen even if one does not use letsencrypt-nginx-proxy-companion at all and just manually put certificates on the /etc/nginx/certs folder as described in the nginx-proxy doc.\n. Contributions to the project's wiki are welcome :) . @vicary for clarity sake I'm going to close this issue so we can focus the discussion on #411 . Hi.\nWhat version of the container are you using ?\nDo you have any log output from the container ?. Okay, before we start digging into logs, how did you notice / reach the conclusion that the container creates new certificates on every docker-compose up ?. Sounds like there is something fishy with your volumes. Is it possible that your cert volume is deleted or recreated on docker-compose down / docker-compose up ?. I'll give a shot at your repo as soon as possible but I didn't see anything out of the ordinary either.. > Is there any fix ?\nNo clear and reproducible issue has been identified, so there is unfortunately nothing to fix at this point.\nUnder normal operation the container does not recreate existing certificate on restart and I haven't observed this behaviour on any of my own servers.\nIf your compose file don't use external volumes, the volume creation / deletion is handled by docker-compose itself and you might be deleting or recreating your volumes without realising it. Please check docker-compose doc, watch your Docker volumes and the docker-compose command output.\nIs docker-compose down deleting your volumes ?\nIs docker-compose up creating new volumes ?\n. The heavy CPU consuming openssl process at start is probably the 2048 bits DH parameters generation, but like the rest it should only happen once. It's also heavily nice'd and should not lock anything beside extremely small single core servers (the only thing I run that have issue with it is a Google Cloud f1-micro instance, and even that become slow but not locked), what hardware or VM are you running this on ?\nYour container appears to be acting exactly as if its /etc/nginx/certs folder was wipped on each restart.\nWhat happen to the files inside your /srv/docker/nginx/certs folder after a docker-compose down ?\nCould you try using a Docker named volume for /etc/nginx/certs instead of a bind mount ?\n```yaml\nversion: 2.1\nservices:\n    nginx-proxy:\n        restart: always\n        image: jwilder/nginx-proxy\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n        volumes:\n            - certs:/etc/nginx/certs:ro\n            - /etc/nginx/vhost.d\n            - /usr/share/nginx/html\n            - /var/run/docker.sock:/tmp/docker.sock:ro\n            - ./http_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro\nnginx-proxy-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n        - certs:/etc/nginx/certs:rw\n        - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n        - nginx-proxy\n\nvolumes:\n  certs:\n``. Can you try withjrcs/letsencrypt-nginx-proxy-companion:dev` this time ?. Okay, found the bug, a fix is on the way.. Hi. That's tied to the ACME client being used (simp_le) which does not support EC cert generation for now.. As told in my previous message we don't use certbot but simp_le.. A change of ACME client is planned but I can't give you any ETA. Changing the client without breaking anything and maintaining downward compatibility is not a trivial task, I'm currently pretty much the only regular contributor to this project and I work on this on my free time, which I don't have much of.. Woops sorry, forgot about the second message.\nYou can obtain your ECDSA certificates separately and use them with nginx-proxy without issue, you'll just have to follow nginx-proxy doc for SSL support.\n\nThe contents of /etc/nginx/certs should contain the certificates and private keys for any virtual hosts in use. The certificate and keys should be named after the virtual host with a .crt and .key extension. For example, a container with VIRTUAL_HOST=foo.bar.com should have a foo.bar.com.crt and foo.bar.com.key file in the certs directory.\n\nECDSA is already enabled in the default cipher suite generated by nginx.tmpl so that should work out of the box.\nOn a side note, please be aware that the LE companion and nginx-proxy are two completely separate projects even if one is meant to work with the other. The two are maintained by different peoples, and I can't really handle nginx-proxy specific issue or assistance. The LE companion is pretty must \"just\" an automated ACME certificate manager. The actual proxying, nginx configuration, etc, that's on nginx-proxy side.. A version supporting ECDSA certificates generation is being worked on.. I modified the ACME endpoint availability check again to have it performed from within the Boulder container itself rather than trying to reach the container from the host. That takes care of both Linux / macOS differences and potential future changes in Boulder's Docker Compose file network setup.. LGTM\nIn the longer run we should probably find a more reliable way of determining if a cert is handled by the LE companion than just  \"the file is a symkink pointing to a cert issued by Let's Encrypt\",  I'm open to suggestions if you have any. . Addition of an empty dotfile next to the certs maybe? . The debug output is still a bit too verbose to my taste but I'll go ahead and merge it like this.\nThanks for the contribution.. Hi, could you try with jwilder/nginx-proxy instead of jwilder/nginx-proxy:alpine ?. Scratch the previous suggestion, I just tried your compose file and everything started ok, including getting a test certificate.\nWhat version of Docker and Docker Compose are you using, and what OS is your Docker host running on ? I just tried with Docker 18.05.0-ce and Docker Compose 1.21.2 on Ubuntu 18.04.\nAny particular reason to run you nginx-proxy container with privileged: true ? If not, you probably shouldn't.\nCould you try using a named volume instead of a host volume for /etc/nginx/certs ? In my opinion using host volumes with Docker often ends up in permission issues.\nBy the way you don't need to use volumes_from AND the NGINX_PROXY_CONTAINER env var AND the com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy for the le-companion to find the proxy container ID. Only one of them is enough. As you already use volumes_from I'd suggest you remove the env var and the label\nexample compose file with the suggested modifications (tested and working under the same environment) :\n```\nversion: '2'\nservices:\n  nginx-proxy:\n    restart: always\n    image: jwilder/nginx-proxy:alpine\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/etc/nginx/vhost.d\"\n      - \"/usr/share/nginx/html\"\n      - \"certs:/etc/nginx/certs:ro\"\n      - \"/var/run/docker.sock:/tmp/docker.sock:ro\"\nnginx-letsencrypt:\n    restart: always\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-letsencrypt\n    depends_on:\n      - nginx-proxy\n    volumes_from:\n      - nginx-proxy\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"certs:/etc/nginx/certs:rw\"\nsttdb-client:\n    image: sttdb/sttdb-client\n    container_name: sttdb-client\n    environment:\n      - VIRTUAL_HOST=your.domain.tld\n      - LETSENCRYPT_HOST=your.domain.tld\n      - LETSENCRYPT_EMAIL=email@domain.tld\nvolumes:\n  certs:\n``. Docker 1.13.1 isn't **that** old, I'd be curious to know why it did not work.. It is butdocker execcan't read this variable because it does not go through the entrypoint script and the currentCONTAINER_ID` variable scope is limited to this same script.\nA better approach might be to save and export the result of get_self_id in the entrypoint script and do something like ${CONTAINER_ID:-$(get_self_id)} when retrieving the nginx container ID through --volumes-from. Sounds okay to you ?. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nThe issue you are facing with nextcloud concerns the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo and/or to nextcloud.. I think this might be tangent to #333. @jmarceli ?\nsimp_le already support external scripts but the feature is very poorly documented and I never experimented with it, I'll try to have a look at it.. This comment might be helpful to people using Cloudflare: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/247#issuecomment-329233092. This PR has already been merged 7 months ago :). Do you build the image from sources on the Scaleway ARM server ?. The goal of this PR was to allow building the image from the Dockerfile on any arch, not providing multi arch image straight from Dockerhub. The image you pull from Dockerhub is still amd64 only.\nClone the repo on your Scaleway server and build the image from it. It does not work with docker-compose build but with docker build -t jrcs/letsencrypt-nginx-proxy-companion . from inside the cloned repo (BTW I'm not aware of any --push flag to docker-compose build).. Might fix #396 . https://github.com/letsencrypt/pebble#avoiding-client-https-errors\nAnd I don't think it'll work anyway, pebble being ACME v2 only, which isn't supported by this container yet.. > So I'd need to place a root cert at /etc/nginx/ssl/?\nNo idea, I haven't used Pebble yet and I don't know how to manipulate simp_le trusted root configuration.\n\nIs Pebble really ACME v2 only?\n\nYep, that's why we're using Boulder instead in the current test setup.. There is a pending PR that might help with this issue #394 . I think I've been experiencing the same issue on Travis CI.\nThere is definitely a timing issue somewhere, even with background DH group creation merged in.. By the way you can always manually trigger the letsencrypt service loop with\ndocker exec your-le-companion-container /app/signal_le_service\nThat's might be marginally faster than using docker restart when the first cert creation fail.. Ok so the culprit appears to be the $DIR variable in letsencrypt_service.sh that end up being empty sometimes. I can't figure if this is caused by a shell scope issue or by \"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\" not working properly for some reason. No timing issue after all.\nConsidering that this variable is used a grand total of three times, the safest/fastest fix would be to hardcode /app/letsencrypt_service_data rather than use $DIR/letsencrypt_service_data.. @NicolasDorier now that #404 has been merged, that should be fixed. Could you test and confirm ?\n. Looks like the issue was more with simp_le that handled an ACME related error badly.. Potential issues in the first setup are the /etc/nginx/conf.d,  /etc/nginx/vhost.d and /usr/share/nginx/html volumes being :ro on the nginx container and relying on the auto generated name docker_nginx_1 for the docker-gen command.\nUse :ro sparsely where you are absolutely sure its required and won't break anything.. @techhazard Can I close this issue ?. Hi. Neither nginx-proxy, docker-gen or letsencrypt-nginx-proxy-companion have support for docker swarm.. #399 will have to be merged first so the test can pass. The docker_api test unit has to be modified to take your changes into account.. LGTM, thanks for this PR !. ping @JrCs . I'm not happy with this yet, #368 has shown that this output might still yeld useful debug info.\nI'll probably rework and amend this PR soon-ish.. I ended up using sed to strip lines that don't include a YYYY/MM/DD date + the characters before that date. That should take care of:\n\nempty lines \nlines not logged by docker-gen such as \"Custom dhparam.pem file found, generation skipped\"\nbogus characters before the actual docker-gen output. @JrCs would you prefer to keep set -x when DEBUG is set, and if yes why ?. I'm going to merge this as is for now and add another way to allow set -x later (soon), right now it's really making my life harder more than anything.. Google tells me it looks like a nasty bug related to 32 bits Arch in either Go or Docker.\n\nI'm not sure we can be of any help. :confused:. Closing due to inactivity.. > Let's encrypt now consider example.com emails invalid. This is a breaking change as lot's of people were using it before as a dummy.\nThe doc clearly state that the address must be valid and the email has been made entirely optional more than six months ago.\nI think that if a check for @example.com addresses has to be made somewhere, it's in the ACME client, not in this container code. This has been suggested and done before on a similar issue.\n@JrCs considering the above, I'm in favor of closing this PR. Your thought ?. Have you actually tried before claiming that it does not work ?\n<no value> is what you get from docker-gen when an environment variable is not set for a given container. ie if you don't set LETSENCRYPT_EMAIL on a container, the corresponding entry in letsencrypt_data will be <no value> and the email flag won't be passed to simp_le.\nI use the fact that the email is optional on an almost daily basis and the whole test suite works without setting emails addresses.. Ok, I get your issue. Your use case is a bit specific as you set a LETSENCRYPT_EMAIL variable on your container no matter what whereas most people will either set this variable or not set it at all. That was the intended use case when we made LETSENCRYPT_EMAIL optional, and it work as it should when the variable is not set, but not when when it is set and get assigned a null value (or anything that does not look like an email).\nI've got change that should take care of this use case (negating the need for :-<no value>) queued as part of another feature in dev, would it be useful to you if I merged them ? . > Letsencrypt supports that\nI'm pretty sure they don't support http-01 challenge validation without an opened port 80.. Closing due to inactivity.. Unfortunately no, that's not possible at the moment, but that might be a use case for the experimental standalone cert feature, if you are willing to give it a try.. @ivolution643 thanks for spotting that, I've just pushed a version of dev that should take care of it (it does according to the short test I did).\nDon't hesitate to try again with the fixed version and to report back (just wait for the new dev tag autobuild to complete on Dockerhub).. Please see #373 . I feel that the issue is more on the nginx-proxy side if the config generated by docker-gen requires a default.cert and default.key files and does not work as expected when they are not present.\nLet me know your advice on this.. Not at the moment but I'm considering it.. Ok, judging by the number of people that reported this as an issue the past few weeks, I think automatic creation of this default certificate should be added to the container. I'm already working on it.. Update : I'm still working on this, just not very fast 'cause summer holidays. I intend this to be fixed by the end of august at the very latest.\nMeanwhile, you can manually create a default cert and key with this command, just replace your-companion-container with the actual name or id of your letsencrypt-nginx-proxy-companion container:\ndocker exec your-companion-container openssl req -x509 \\\n    -newkey rsa:4096 -sha256 -nodes -days 365 \\\n    -subj \"/CN=default\" \\\n    -keyout /etc/nginx/certs/default.key \\\n    -out /etc/nginx/certs/default.crt. This should be fixed by #423 . I'd say it's probably possible by hacking nginx.tmpl but I'm not fluent enough in nginx.conf nor in go templating language to have an immediate solution :confused: . relevant certbot reference:\n[drwxr-xr-x]  /etc/letsencrypt\n\u251c\u2500\u2500 [drwx------]  accounts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwx------]  acme-v01.api.letsencrypt.org\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [drwx------]  directory\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 [drwx------]  somehash\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 [-rw-r--r--]  meta.json\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 [-r--------]  private_key.json\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 [-rw-r--r--]  regr.json\n\u251c\u2500\u2500 [drwx------]  archive\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [drwxr-xr-x]  domain.tld\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  cert1.pem\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  chain1.pem\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  fullchain1.pem\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-r--r--]  privkey1.pem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwxr-xr-x]  subdomain.domain.tld\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [-rw-r--r--]  cert1.pem\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [-rw-r--r--]  chain1.pem\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 [-rw-r--r--]  fullchain1.pem\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [-rw-r--r--]  privkey1.pem\n\u2514\u2500\u2500[drwx------]  live\n \u00a0\u00a0 \u251c\u2500\u2500 [drwxr-xr-x]  domain.tld\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [lrwxrwxrwx]  cert.pem -> ../../archive/domain.tld/cert1.pem\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [lrwxrwxrwx]  chain.pem -> ../../archive/domain.tld/chain1.pem\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 [lrwxrwxrwx]  fullchain.pem -> ../../archive/domain.tld/fullchain1.pem\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [lrwxrwxrwx]  privkey.pem -> ../../archive/domain.tld/privkey1.pem\n \u00a0\u00a0 \u2514\u2500\u2500 [drwxr-xr-x]  subdomain.domain.tld\n \u00a0\u00a0     \u251c\u2500\u2500 [lrwxrwxrwx]  cert.pem -> ../../archive/subdomain.domain.tld/cert1.pem\n \u00a0\u00a0     \u251c\u2500\u2500 [lrwxrwxrwx]  chain.pem -> ../../archive/subdomain.domain.tld/chain1.pem\n \u00a0\u00a0     \u251c\u2500\u2500 [lrwxrwxrwx]  fullchain.pem -> ../../archive/subdomain.domain.tld/fullchain1.pem\n \u00a0\u00a0     \u2514\u2500\u2500 [lrwxrwxrwx]  privkey.pem -> ../../archive/subdomain.domain.tld/privkey1.pem\nTranslated to our case, that might be:\n[drwx------]  /etc/nginx/certs\n\u251c\u2500\u2500 [drwx------]  accounts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [drwx------]  acme-v01.api.letsencrypt.org\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 [drwx------]  directory\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 [-r--------]  default.json\n\u251c\u2500\u2500 [-rw-r--r--]  dhparam.pem\n\u251c\u2500\u2500 [drwx------]  domain.tld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [lrwxrwxrwx]  account_key.json -> ../accounts/acme-v01.api.letsencrypt.org/directory/default.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  cert.pem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  chain.pem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  fullchain.pem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-------]  key.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  domain.tld.chain.pem -> ./domain.tld/chain.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  domain.tld.crt -> ./domain.tld/fullchain.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  domain.tld.dhparam.pem -> ./dhparam.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  domain.tld.key -> ./domain.tld/key.pem\n\u251c\u2500\u2500 [drwx------]  subdomain.domain.tld\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [lrwxrwxrwx]  account_key.json -> ../accounts/acme-v01.api.letsencrypt.org/directory/default.json\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  cert.pem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  chain.pem\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [-rw-r--r--]  fullchain.pem\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [-rw-------]  key.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  subdomain.domain.tld.chain.pem -> ./subdomain.domain.tld/chain.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  subdomain.domain.tld.crt -> ./subdomain.domain.tld/fullchain.pem\n\u251c\u2500\u2500 [lrwxrwxrwx]  subdomain.domain.tld.dhparam.pem -> ./dhparam.pem\n\u2514\u2500\u2500 [lrwxrwxrwx]  subdomain.domain.tld.key -> ./subdomain.domain.tld/key.pem\nChanges that need to be made to stick to this:\n[drwx------]  /etc/nginx/certs\n\u251c\u2500\u2500 [drwx------]  accounts\n\u2502   \u2514\u2500\u2500 [drwx------]  acme-v01.api.letsencrypt.org\n\u2502       \u2514\u2500\u2500 [drwx------]  directory\n\u2502           \u2514\u2500\u2500 [-r--------]  default.json\n\u251c\u2500\u2500 [drwx------]  domain.tld\n\u2502   \u2514\u2500\u2500 [-rw-------]  key.pem\n\u2514\u2500\u2500 [drwx------]  subdomain.domain.tld\n    \u2514\u2500\u2500 [-rw-------]  key.pem\nI don't see the point of restricting read permissions of certificate, chain, fullchain and dhparam as all those are meant to be publicly available in the end.. @JrCs any thought on this ? Should we lower the read permissions on the private keys and ACME account keys ?. nginx won't have any issues, its master process (but not the worker processes) run as root.. BTW I did a quick test with the permission changes I suggested ~ a month ago and didn't run into any issue.. It should be possible, yes. \nDo you think the permissions check should be enabled or disabled by default ?. Thanks for the feedback. I'm working on changes to the permissions checks that will allow customisations through environment variables. In the meantime please use tagged image v1.9.1 as is does not include the permissions checking code.. Hi.\nPlease fall back to tagged version v1.9.1, then manually change permissions of the private keys with docker exec and chmod.\nAgain a PR allowing more customization is on its way ASAP but I'm really really short on time those days.\nYou can have a look a the intended changes there, any feedback is more than welcome.. docker exec your-le-container-name bash -c 'chmod a+r /etc/nginx/certs/*.key'. Hi\nIs it the same as this issue ? https://github.com/jwilder/nginx-proxy/issues/1164. The is an nginx-proxy issue then, closing this one.. > Is there a way I could have letsencrypt-nginx-proxy-companion restart an arbitrary container when a cert is renewed?\nUnfortunately no and I don't think this will be added, because this is a bit too far from the original scope (automate creation and renewal of LE certificate for use with nginx-proxy, which assume that nginx-proxy acts as an SSL termination proxy).\nThat might be doable using some combination of inotify and the docker API but I won't be of much help if you want to try this.. According to the answer from server fault that you quoted:\n\nIf you omit the default parameter, the first server block is treated as the default.\n\nSo this server block is already the default, being always the first.\nI think your issue is instead yet another duplicate of #74, #373 and #411 \nIf it is, could you close this issue and continue the discussion on #411 ?. Try to troubleshoot step by step:\n\ncheck that your domain(s) DNS A/AAAA record is(are) correctly set.\nstart a single nginx container with published port 80 and check if you can reach it from the outside with the domain(s) that point to your host.\nstop/remove the previous container, start nginx-proxy with a single proxyed container (yet another nginx container to keep it simple) and without letsencrypt-nginx-proxy-companion. Again test if the proxy is working correctly and if you can reach your proxyed nginx container.\nadd the letsencrypt companion container, create a dummy file inside /usr/share/nginx/html/.well-known/acme-challenge and try to access it from the outside.. Can you provide the config (compose file or CLI commands) you are using to setup your nginx-proxy and letsencrypt containers, and the logs from the containers ?. Have you both followed the troubleshooting steps for failed auth described in the project wiki?. Why are you defining the /usr/share/nginx/html volume  two times in the nginx-proxy service ?\n\nYou are also defining a volume that isn't used (vhost).. https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations. Your containers logs will have additional informations about the reason why the certificate isn't created.. I don't see any obvious error.. Can you curl the api endpoint from inside the container too ?\n@cpu @zenhack any clue on this ?. docker exec -it your-container-name bash will give you an interactive shell inside your container.. You probably guessed but that's an issue with you container dns. Is it the same for your other containers ? For those based on alpine Linux you migth not have bash installed inside them, try ash instead. You migth need to install curl inside them, too.. I don't see anything obviously misconfigured in your compose file. Do you have the containers logs ?. @dridri the discussion is actually on #411 . Hi. I don't see any network configuration statements in your compose files. If you have multiple compose files and zero additional network configuration, there is no way they'll be in the same docker network.. Closing due to inactivity.. Aaaaand I ripped and reopened the issue \ud83d\ude04 . Under which section of the doc do you think this should go ?. Travis is having network related issues since two days ago, might be a while before the tests finally succeed.. Hi\nThe magic happens thanks to docker-gen, a go program that render templated files from container metadatas (which it gets from a docker API endpoint, either the host docker socket exposed inside the container or a tcp endpoint).\nYou have two docker-gen processes running when you use nginx-proxy with letsencrypt-nginx-proxy-companion : \n- one to render nginx's default.conf from nginx.tmpl (this one run either inside the nginx-proxy container or on its own docker-gen container in the three container setup).\n- the other to render the letsencrypt_service_data file from letsencrypt_service_data.tmpl (this one run inside the letsencrypt-nginx-proxy-companion container).. What\n- OS\n- Docker version\n- jrcs/letsencryt-nginx-proxy-companion version\nare you using ?\nIf using jrcs/letsencryt-nginx-proxy-companion:latest, did you pull a new version of the container lately ?\nCan you try those troubleshooting steps : https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations especially the part at the end about creating a dummy file inside /usr/share/nginx/html/.well-known/acme-challenge and accessing it from outside the host ?. Can you share the JSON returned by LE when the authorization fails (should be on the letsencrypt-nginx-proxy-companion logs ?).\nIf you don't want to share publicly the IPs and/or domains that are inside this JSON, either redact them or send me the JSON via email.. @schizophrene can you try with jrcs/letsencryt-nginx-proxy-companion:v1.8.1 ?. @schizophrene nevermind, looks like you misconfigured nginx-proxy and forgot to mount the same volume used by the letsencrypt container to /usr/share/nginx/html\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Basic-usage. Can you try to put -v /path/to/certs:/etc/nginx/certs/:rw after --volumes-from nginx-proxy in the letsencrypt container docker run command ?. Try using a named or anonymous docker volume for /etc/nginx/certs instead of a host volume or in last resort try not using :ro on the volume mounted to nginx-proxy /etc/nginx/certs if you do not absolutely need to restrain nginx-proxy write access to the cert dir.. Hi. Letsencrypt http-01 challenge can only happen over ports 80 and 443, there is no way to obtain a certificate with this container if your proxy container can't use those ports.. This is a Letsencrypt hard requirement, there is nothing you can do to change this, your only alternative if you can't clear and use ports 80 and 443 is to get your certificate through another LE client that supports other challenges methods. This container only work with http-01 challenge.. You can take a look at traefik, which supports dns-01 challenges.\nRegarding using or not using SSL, well I tend to use it no matter what, with self generated certificate if the service is not public and if I can't get a trusted cert and/or setup automated renewal of a trusted cert for this service. I won't go into the details of why SSL by default, there are a lot of people who already wrote about it way better than I would.\nIf you want to use a self generated certificate and need help, don't hesitate to ask.\nIf you can configure OSX Server to use SNI and redirect incoming request to the nginx proxy when needed, that would work too but you'll lose the automation when spinning up new containers with other VIRTUAL_HOST / LETSENCRYPT_HOST, as you'll need to append OSX Server Apache's configuration each time.\nIf you can configure OSX Server to use ports others than 80 and 443, you could also do the reverse, ie adding a static configuration to nginx proxy and having it forward traffic to OSX Server ports.. Closing due to inactivity.. You need all domains in both *_HOST variables. Can you share the logs of the letsencrypt container ? Be advised that those logs and the eventual links to LE logs will contain your domains in clear, so either anonymize them or share the logs privately if you don't want your domains to be made public here.. Try with the non alpine version of nginx-proxy.\n-v /root/nginx/vhost.d:/etc/nginx/vhost.d:ro\n-v /root/nginx/:/usr/share/nginx/html:ro\nDo not use :ro on every volume of the nginx-proxy container. That's not necessary and prone to issues.\nAdditional troubleshooting steps: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki. Closing due to inactivity.. Have you tried building the Dockerfile directly on your i386 host ?. We're not offering native multiarch images from Dockerhub yet because that's a real pain to setup (it involves either shoehorning qemu into the base image or having your own Jenkins -or similar- infrastructure, with agents for every target archs).\nBuilding the image locally is easy:\nbash\ngit clone https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion.git\ncd docker-letsencrypt-nginx-proxy-companion\ndocker build -t jrcs/letsencrypt-nginx-proxy-companion .\nBut i'm not sure docker-gen will build on alpine + i386. Let me know if that work or not.. Oh, our Dockerfile use multi-stage build, you'll need at least Docker 17.05 to build it.. AFAIK Docker is now considered unsupported on i386.\nDebian buster and sid repositories seems to have i386 packages for Docker 18.03 but going down that road (using testing or unstable debian repo on ubuntu) doesn't seems safe to me.\nI built an alpine-linux/i386 version of docker-gen, uploaded it to my fork of docker-gen on a new tag, and created a non multi-stage Dockerfile that should work for i386.\nbash\ngit clone https://github.com/buchdag/docker-letsencrypt-nginx-proxy-companion.git\ncd docker-letsencrypt-nginx-proxy-companion\ngit checkout i386\ndocker build -t jrcs/letsencrypt-nginx-proxy-companion -f Dockerfile.i386 .. I'd say just follow the basic usage example, then use the forced renewal script to see if renewal works.\nBTW how did you manage to get an i386 version of nginx-proxy ?. Yeah, I was expecting nginx-proxy to be an issue too. I don't think forego has i386 binaries available but as it's golang it can be cross compiled like I did with docker-gen. I'll try to patch something together tomorrow.. bash\ngit clone https://github.com/buchdag/nginx-proxy.git\ncd nginx-proxy\ngit checkout i386\ndocker build -t jwilder/nginx-proxy -f Dockerfile.i386 .\nAs usual let me know if this work or not.. Glad everything finally works ok. I'm closing the issue as the letsencrypt-nginx-proxy-companion part is resolved.\nNo idea for the i386 Elasticsearch Docker image, you'll have to ask on their repo.. Which version of the container are you using ? If using latest, could you pull it again ?. Does the certificate mismatch appears to be triggered by a specific event (like after a config change, a container start/stop, etc) ? Or is it happening randomly ? . Does it happen straight away when re-deploying ?. Could you try removing -wait 5s:30s from the docker-gen command ?. Okay, seems like we're missing a reload condition somewhere.. Could you run the letsencrypt container with the DEBUG=true env var ?. Could you post what comes after, up to the point where you have to manually reload nginx ?. That last reload is the manual one ?. Okay, that's weird, testing with a docker-compose setup emulating yours I don't encounter this issue, nginx is correctly reloaded right after the web container comes up.. Do you have the logs of the docker-gen container too ?. Okay I must be tired if I failed to see this right away.\nThe vanilla docker-gen container doesn't work in swarm mode because container names are dynamic and unlike in letsencrypt-nginx-proxy-companion there is no support for this built into the docker-gen container.\nMaybe this fork from @helderco can help : https://github.com/helderco/docker-gen\nYou could also try to switch to the two containers setup (nginx-proxy + letsencrypt-nginx-proxy-companion). If you remove a domain from the LETSENCRYPT_HOST env var, the corresponding symlinks will be removed from /etc/nginx/certs and nginx will serve the virtual host over http again BUT as HSTS with long duration is enabled by default in nginx.tmpl, any browser that visited this domain when it was served over https won't accept to connect over http.\nsee v1.8 release notes for more details.. Have you tried again with helderco's docker-gen fork ? That might be tied to docker-gen not working properly previously.. Sounds like an issue with nginx.tmpl, you should report it to jwilder/nginx-proxy.\nMost probably this line https://github.com/jwilder/nginx-proxy/blob/e80fc0b304bcbcf703d86392394c1a5adb823e3c/nginx.tmpl#L180. I get the idea and see how it could be useful but that's going pretty far from the original project scope.. The only way I  see this working for now is placing your modsecurity-crs container between nginx-proxy and your application (with modsecurity-crs acting as a second reverse proxy), which mean one modsecurity-crs container you'll have to manually configure for every proxyed app.\nPlacing the modesecurity-crs container on the front is not really feasible as you would lose the tls termination and all the automatic tls configuration provided by docker-gen.. @JrCs any advice on changing /etc/nginx/certs permissions vs leaving them as they are ?\nIt works in both case with docker volumes, but it might be an inconvenience for people using host volumes (ie -v /path/to/certs:/etc/nginx/certs ).. I've decided not to touch /etc/nginx/certs ownership and permissions.\n@JrCs can you review and approve ?. ping @JrCs . Hi. Can you post your whole container configuration ? . Thanks for the config, I had more in mind the command (or compose file if you use docker compose) you use to launch both the nginx proxy and companion container.\nYou can use docker logs to check why your certs fails to be created. If you are experiencing let's encrypt validation issues, please check the corresponding wiki page on this project.. Again, can you post the whole commands (redacting personal info like mails or domains if needed) you use to launch your nginx proxy, companion and proxyed container ? . Okay. You have to add specific environment variables on the proxyed containers for the whole thing to work. I'd recommend you review both nginx proxy readme and the companion doc (in the project's wiki).. @Helmi Can I close the issue ?. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi.\nThis container \"just\" create, renew and manage certificates for nginx-proxy. What version of OpenSSL it use has no effect on wether the nginx-proxy container is able to use TLS 1.3 or not.\nPlease note that nginx-proxy and docker-letsencrypt-nginx-proxy-companion are actually two separate projects created and maintained by different peoples, which mean we don't handle nginx-proxy specific issues.. You don't need to use standalone certificates at all in this case. Just follow basic usage and use the LETSENCRYPT_HOST environment variable on your wordpress container.\n```yaml\nversion: '3.1'\nservices:\nsite:\n    image: wordpress\n    environment:\n      - VIRTUAL_HOST=yourdomain.tld,www.yourdomain.tld,othersite.tld,www.othersite.tld\n      - LETSENCRYPT_HOST=yourdomain.tld,www.yourdomain.tld,othersite.tld,www.othersite.tld\nnetworks:\n  default:\n    external:\n      name: mynetwork\n```\nStandalone certificates are only meant to be used when you need to create and renew certificates that are not tied to a container environment variable and/or not used for proxying with nginx-proxy.\nIf you want to use standalone certificates, the variables go into the file that you mount as /app/letsencrypt_user_data inside the container.\nUsing your example, create a file with this content:\nbash\nLETSENCRYPT_STANDALONE_CERTS=('web' 'othersite')\nLETSENCRYPT_web_HOST=('yourdomain.tld' 'www.yourdomain.tld')\nLETSENCRYPT_othersite_HOST=('othersite.tld' 'www.othersite.tld')\nAnd mount it inside the LE container as /app/letsencrypt_user_data.\nI think I kinda see where the confusion with the docker-gen.cfg file came from, I'll try to clarify the doc.\nAs for the part about picking up change, it means that if you make change to your /app/letsencrypt_user_data while the container is running, those change won't be picked up right away and you'll have to use a manual command or wait for the next execution of the cert creation / renewal loop (every hour).\n/app/signal_le_service is the actual path of the script that you have to use inside the container to trigger this loop.\nAlso please keep the discussion about this feature on #368 . Closing due to inactivity.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi. I haven't forgotten about this PR but I'm still unsure about merging it (because of the project scope issue).\nBy the way if this is to be merged it'll require a corresponding test unit.. No hurry for the test unit, at least until we've reached a decision about merging the feature or not.. > Another thing that I noticed in the test units:\n\nShouldn't the loop in line 34 in the default_certs test unit contain a break?\n\nYes it should, thanks for spotting that.\nI've been lacking spare time for the last few weeks, I'll come back to this PR as soon as I can. Got a few thinks I want to clear first.. Okay, I've just reviewed your PR, thanks for your work.\nI think a separate test unit for this feature would be more fitting, rather than adding more logic to three existing tests. You could just take the basic cert_single test, remove all the cert verification code and just check that the container is restarted correctly.\nAlso if your test generate extra files (docker_event_out.txt), don't forget to add them to .gitignore, just in case (even if it has a trapped removal).. BTW if this wasn't clear this PR will be merged as soon as the last details are ironed out \ud83d\udc4d . If you can cleanup the two remaining whitespace typos and write a line of doc explaining this feature I think we're good to go.. Hi. Can you provide more info on your setup ? Which OS are you running docker on, which version of docker and of this container are you using, how are your containers (nginx-proxy or nginx + docker-gen, the LE companion and the proxyed container) created, ie either the full cli or compose file(s) used to create them. Is this a fresh setup or one that was working previously ? . The unsupported action seems to be ln trying to create symlinks, I can't really tell you more without the full log output to put things in context.\nCould you try using docker named volume instead of host volumes for /etc/nginx/certs ?\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Persistent-data. @samara8609 any updates on your issue status ?. @leokun please take a look at https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Standalone-certificates-(beta) and the discussion in #368 \nThis feature is in jrcs/letsencrypt-nginx-proxy-companion:dev\nI'm closing this issue so we can stay focused on #368 . Every domain name that you request on the certificate (ie that you configure inside the LETSENCRYPT_HOST environment variable) must also be configured in the VIRTUAL_HOST environment variable.\nIf you don't do that, the LE challenge validation will have no chance to succeed for the domains not in VIRTUAL_HOST as the request from the LE validation server will be answered with a 503 by nginx-proxy.\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#lets-encrypt\nyou can have \nyaml\nVIRTUAL_HOST: xyz.com, abc.com, 123.com\nLETSENCRYPT_HOST: xyz.com, abc.com\nbut if you do\nyaml\nVIRTUAL_HOST: xyz.com, abc.com\nLETSENCRYPT_HOST: xyz.com, abc.com, 123.com\nthe validation for 123.com will fail and the certificate won't be issued.. Certificate issued by the staging endpoint are not signed by a trusted intermediate.\nhttps://letsencrypt.org/docs/staging-environment/. What do you mean and what do you call a \"certer\" ?\nThe container is not responsible for signing certificate, it's done by the Certificate Authority (in this case Let's Encrypt).\nIf you use the staging API endpoint you get a certificate signed by an untrusted (as in not in browsers trust store) intermediate because this endpoint is meant for tests only.\nIf you use the production API endpoint you get a certificate signed by a trusted intermediate.\nEither way you are getting a signed certificate and the signing process is done by the CA alone.. Please re-read the parts about API endpoints in the previous answer and https://letsencrypt.org/docs/staging-environment/\nThe following line in your compose file\nyaml\nACME_CA_URI: https://acme-staging.api.letsencrypt.org/directory\nMean that you are using the staging API endpoint of Let's Encrypt. Certificate obtained through that endpoint are signed by letsencrypt but by an untrusted intermediate (intermediate does not mean it's not signed by LE).\nIf you want certificate that are trusted by browsers, use the production API endpoint, ie remove the ACME_CA_URI:[...] line.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. The LE companion isn't stopping any container. The only signal sent are SIGHUP to trigger config reload from nginx or docker-gen. Additionaly the docker-gen container being down won't cut any access as it it not responsible for proxying.\nThe CI test setup doesn't use restart at all and works fine.\nIf you have containers that are stopped as a result of being used with the LE companion, there is an issue somewhere.. This is not the expected behavior (docker-gen container exiting), again you have an issue somewhere.. Closing due to inactivity.. Hi. Could you provide a more detailed example ?\nI don't really get what you are doing and if that feature migth benefit others or if it's too specific to you own setup.. Okay.\nTell me if I got this right:\n- in your dev environment the LE container try to create a certificate for whatever.domain.tld.localhost\n- then simp_le fails to create the certificate (either because it's unable to contact the ACME api endpoint or because of the tld being part of RFC2606)\n- as a result the symlinks to the certificate aren't created in /etc/nginx/certs\n- without the symlinks, SSL isn't enabled for this service in the nginx config. ping @blackandred . Why don't you use Let's Encrypt staging API endpoint on your test environment ? That would be a perfect fit.\nAs for not attempting to request certificates for reserved tlds, I feel that should be done by the LE client itself (ie simp_le) rather than the scripting around the client.. Closing issue due to inactivity.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi.\n/etc/nginx/vhost.d and the VHOST_DIR variable in function.sh are not where the acme challenge file are created but the location of the nginx vhost configuration files. I have no idea of why this is a variable in functions.sh, that's probably a leftover that serve pretty much no purpose now (you can't even set the vhost conf location on nginx-proxy).\nThe location of the challenge file is /usr/share/nginx/html and is not tuneable.. ACME server returned an error: urn:acme:error:malformed :: The request message was malformed :: Error creating new authz :: Name does not end in a public suffix\nYou can't obtain a certificate from letsencrypt (or from any serious CA for that matter) for a .local domain because this tld is reserved / not public https://tools.ietf.org/html/rfc2606\nAdditionally:\nyaml\nvolumes:\n      - ssl-data:/etc/nginx/certs:ro\n      - ssl-data:/etc/nginx/vhost.d\n      - ssl-data:/usr/share/nginx/html\nDon't reuse the same volume for different folders inside the container.\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Basic-usage\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Persistent-data\n. ```yaml\nservices:\n  nginx-proxy:\n    [...]\n    volumes:\n      - certs:/etc/nginx/certs:ro\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n[...]\nvolumes:\n  certs:\n  vhost:\n  html:\n```\nUse whatever volumes names suits you as long as they are different from each other and you mount each volume to the correct location on each container.. @javierojeda94 Is your issue solved ?. Could you try again ? #491 should make running this container on ECS way easier.. Well, seems like docker-gen have an issue with the latest ECS AMI and is unable to correctly generate nginx configuration on this platform.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi @kevin-lot \nBy original client, do you mean certbot or simp_le ?. Let say you have a certificate for www.example.tld obtained with certbot on the same machine where you are running docker and nginx-proxy + the LE companion, and your LE companion container is named your-le-container.\nFirst, create the /etc/nginx/certs/www.example.tld folder inside your docker volume for certificates:\nbash\ndocker exec your-le-container mkdir -p /etc/nginx/certs/www.example.tld\nThen copy the existing certificate, chain, full chain and private key inside this folder with the correct names (only the private key has a different name between certbot and simp_le):\nbash\nsudo docker cp -L /etc/letsencrypt/live/www.example.tld/cert.pem your-le-container:/etc/nginx/certs/www.example.tld/\nsudo docker cp -L /etc/letsencrypt/live/www.example.tld/chain.pem your-le-container:/etc/nginx/certs/www.example.tld/\nsudo docker cp -L /etc/letsencrypt/live/www.example.tld/fullchain.pem your-le-container:/etc/nginx/certs/www.example.tld/\nsudo docker cp -L /etc/letsencrypt/live/www.example.tld/privkey.pem your-le-container:/etc/nginx/certs/www.example.tld/key.pem\nsudo will probably be necessary because the folders inside /etc/letsencrypt/live aren't world readable. Don't forget the -L flag to docker cp or you'll end up copying the symlinks rather than the actual files.\nThen create your proxyed service with VIRTUAL_HOST and LETSENCRYPT_HOST both set to www.example.tld as you would normaly do. If the certificate is still valid for more than 30 days, the container will use the existing files you just copied into it.\nIf the certificate is a SAN certificate, be sure to put the name of the folder you created inside /etc/nginx/certs first in the LETSENCRYPT_HOST environment variable.\nExample: you have a SAN certificate covering example.tld, www.example.tld and whatever.tld inside /etc/letsencrypt/live/example.tld. Create the /etx/nginx/certs/example.tld folder inside the container, copy the files, then put example.tld first inside the LETSENCRYPT_HOST environment variable of the proxyed container (so either LETSENCRYPT_HOST=example.com,www.example.com,whatever.tld or LETSENCRYPT_HOST=example.com,whatever.tld,www.example.com)\nLet me know if something is unclear.. I don't know what you might have missed, I just tried using the exact same method and it just worked. \nAre you sure your certificate is an RSA cert ? simp_le does not handle ECDSA certificates at the moment.\nAre you certain your files were copied correctly ? Are they readable with openssl (openssl rsa -in key.pem -noout -text for the private key and openssl x509 -in file_name -noout -text for cert.pem, chain.pem and fullchain.pem -don't post the output here, just check on your host-) ?\nNote that I won't be able to provide much more support if you use Evert Ramos examples.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Could you be a bit more specific about how you ended up with this error ?\nFIY using somewhat recent versions (as in less than 12-18 months old) of both this container and nginx-proxy (or the nginx.tmpl file), the intermediate is correctly included.. Yep, client SNI support is required to have working TLS with nginx-proxy.\nIf your client don't send the SNI it will receive the default certificate from nginx-proxy, and if you don't provide your own default certificate you'll get a self signed one created by the LE companion container (the one with subject=/CN=letsencrypt-nginx-proxy-companion).\nIs there still an issue or can we close ?. @JrCs ping. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Hi. Your docker-gen container dying has probably little (if any) to do with the LE companion container or its version.\nI've been running v1.9.1 and jwilder/docker-gen:0.7.4 built from git since I tagged v1.9.1, without issue. I just tried again on another host with a docker-gen container built from the master branch of the git repo, no issues, no container exiting without reason.\n@blackandred seems to have experienced something similar in #448 . I don't really have clues about how you should proceed to debug this \ud83d\ude41\nI know that your docker-gen container isn't exiting when used solely with nginx-proxy but as it is the one exiting (and due to the fact that both our automated tests and my manual attempts have been unable to reproduce the issue) I'd be more inclined to think the issue comes from it.\nHave you checked docker-gen's repo for similar issues ?. Closing due to inactivity.. Please fall back to tagged version v1.9.1. It contains everything but the permissions change.. As noted in the wiki that's still worked on and should be merged soon.. I'll try to have the PR submitted this week end.. Fixed by #463, without additional configuration the container should revert files and folders permissions as they were before #436.. > Maybe it is not OK to set the \"main domain\" (example.de and/or example.com) as first entries in both docker-compose??\nYou got this right, you can't have the same base domain ( = first entry) for two different containers.\nAdditionally you can't reuse the same domain on different containers VIRTUAL_HOST. nginx-proxy redirect each incoming request with a given SNI to one container and one container only.. Let me complete my previous answer as it was quite uncomplete.\nFirst regarding nginx-proxy and the VIRTUAL_HOST variable:\nYou can't reuse domains for more than one container. That's a basic principle of a reverse proxy based on SNI in general and of nginx-proxy specifically, you can't proxy to more than one service on the same port(s) (80/443 in our case) for a given domain, as the proxy will have no way to tell which request must go to which backend service.\nSo\n```\ncontainer1\nVIRTUAL_HOST=example.com,sub1.example.com\n...\ncontainer2\nVIRTUAL_HOST=example.com,sub2.example.com\n```\ndoesn't work, because in the configuration file that nginx-proxy dynamically creates, only one of those two containers can receive the requests for example.com.\n. The way letsencrypt-nginx-proxy-companion works with certificates in conjunction with nginx-proxy is a bit more complex.\nThe companion will attempt to create / renew a certificate for every LETSENCRYPT_HOST environment variable found on a container, wether the variable values is the same as another or not.\nThe ACME client (simp_le) on the other hand won't try to recreate a certificate that cover the same set of domains as an existing and still valid certificate in its working directory.\nBUT, because the companion put certificates in folders named after the first domain in the LETSENCRYPT_HOST variable (the \"base domain\") things like example.com,sub1.example.com and sub1.example.com,example.com are considered as two different certificates by the container because the ACME client will be working inside different directories.\nFor example, something like\n```\ncontainer1\nVIRTUAL_HOST=example.com,sub1.example.com\nLETSENCRYPT_HOST=example.com,sub1.example.com,sub2.example.com\n...\ncontainer2\nVIRTUAL_HOST=sub2.example.com\nLETSENCRYPT_HOST=example.com,sub2.example.com,sub1.example.com\n```\n(same base -first- domain, same set of domains, different ordering)\nWill work and generate only one certificate if the two containers are started at the same time. If you don't start both at the same time, the first certificate creation will fail as one of the domains (sub2.example.com) won't be configured inside nginx-proxy, resulting in failing challenge authorization.  Starting the second container should make the certificate creation succeed as all the domains covered by the certificate are now configured inside nginx-proxy.\nYou could, theoretically, have a a hundred containers each with a single domain as VIRTUAL_HOST and all sharing the same certificate with a hundred domains long LETSENCRYPT_HOST variable. \nThis is however not a recommended way of using this container and considered unsupported for now, as the container lacks the mechanics needed to make it work consistently.\nThe recommended way is that each container have its own set of domains, and that all the domains set in the LETSENCRYPT_HOST variable of a container be also set on its VIRTUAL_HOST variable. You can set additional domains in the VIRTUAL_HOST variable of the container but they'll result in certificate errors when you'll try to use those domains to access the proxyed service.. Yes, this is the \"normal\" way of using those two containers together.\nDo you mind me asking why you thought adding example.com in front of each VIRTUAL/LETSENCRYPT_HOST variables values was required ?. There are multiple issues with your compose files:\n\nyour haven't published port 443 on your proxy container\nyour nginx-proxy and letsencrypt-nginx-proxy-companion aren't sharing their vhost and html volumes.\nyour proxyed service will be on a different network than the proxy itself\n\nfast correction, I can't guarantee I've spotted everything:\nfirst create a web network (or whatever other name suits you) with docker network create web\n```yaml\nversion: '3'\nservices:\n  proxy:\n    image: jwilder/nginx-proxy\n    restart: always\n    ports:\n      - 80:80\n      - 443:443\n    volumes:    \n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - /home/user/tools/nginx_webproxy/certificats:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\"\n    networks:\n      - web\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    depends_on:\n      - proxy\n    volumes:\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - /home/user/tools/nginx_webproxy/certificats:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    networks:\n      - web\nnetworks:\n  web:\n    external: true\nvolumes:\n  vhost:\n  html:\n```\n```yaml\nversion: '3'\nservices:\n  wikidb:\n    image: mongo:3\n    restart: always\n    expose:\n      - '27017'\n    command: '--smallfiles --bind_ip ::,0.0.0.0'\n    environment:\n      - 'MONGO_LOG_DIR=/dev/null'\n    volumes:\n      - /home/user/tools/wikijs/data/data:/data/db\n    networks:\n      - web\nwikijs:\n    image: 'requarks/wiki:latest'\n    restart: always\n    depends_on:\n      - wikidb\n    ports:\n      - '5080:5080'\n    environment:\n      WIKI_ADMIN_EMAIL: mail@mail.com\n      VIRTUAL_HOST: sub.example.com\n      VIRTUAL_PORT: 5080\n      LETSENCRYPT_HOST: sub.example.com\n      LETSENCRYPT_EMAIL: mail@mail.com\n    volumes:\n      - /home/user/tools/wikijs/install/config.yml:/var/wiki/config.yml\n      - /home/user/tools/wikijs/data/repo:/var/wiki/repo\n    networks:\n      - web\nnetworks:\n  web:\n    external: true\n``. Can you describe how you organize your custom certificates in/etc/nginx/certs` ? Exactly like the LE companion does (a folder named after the certificate's base domain and symlinks pointing to the cert and private key inside) ? Please try to be as precise and detailed as possible.\nAre they obtained through Let's Encrypt ? I guess they are.. Okay.\nSo the issue at hand is that the LE companion can't really discriminate the certificate it creates from other obtained through another method when they use a similar structure (symlinks to files in a subfolder).\nThe best solution I can think of right away would be to include a dot file next to the certs handled by the companion during creation / renewal (most importantly before the symlink cleanup function). Then the symlink cleanup function check for the presence of this dot file. If it's not there, those files are not handled by the companion, don't touch the symlinks.\nDoes that seem sound to you ?. Duplicate of #376 . That's the default, self signed certificate generated by the companion if you don't provide you own default certificate. And yes client without SNI will get either this certificate or the one you provided, that's expected.\n\nThe default behavior for the proxy when port 80 and 443 are exposed is as follows:\n\nIf a container has a usable cert, port 80 will redirect to 443 for that container so that HTTPS is always preferred when available.\nIf the container does not have a usable cert, a 503 will be returned.\n\nNote that in the latter case, a browser may get an connection error as no certificate is available to establish a connection. A self-signed or generic cert named default.crt and default.key will allow a client browser to make a SSL connection (likely w/ a warning) and subsequently receive a 500.\n\nhttps://github.com/jwilder/nginx-proxy#how-ssl-support-works. No, they'll get recreated when the container restarts.\nIf you don't have default certs, non SNI clients (or client trying to access the server by IP) will get a wrong certificate anyway, the certificate of the first proxyed service in the nginx config file if I recall correctly.\nWhat behaviour would you like to see ? Again the default cert is only served to non SNI client, or client reaching the server through IP or non configured domain, if you don't care about them I'm not sure I understand the issue.. > I don't know what happens when a non SNI client tries to access a SNI server only.\nIt will most probably reach another site on the same server than the one it's trying to connect to and will get a certificate mismatch warning.\n\nI suppose there will be some kind of warning telling them to upgrade or something.\n\nNope. The obsolete client isn't aware of the reason why it is getting a mismatched certificate.\n\nIf not, the ideal solution would be to display a blank page in https (maybe with a different subdomain... something like error.domain.com) telling them to upgrade their client if they want to visit the website.\n\nI think you might be able to do this with nginx-proxy default domain option + a custom default certificate. Not sure though. Check the docs.\n\nI don't understand why you can't at least have the default certs being a subdomain with a valid cert at all?\n\nYou are free to symlink the default cert and key to an existing cert and private key. As told previously the self signed default certificate only gets created when you don't provide your own default cert and key.\n\nIf someone access my website with a non-SNI client, I don't want to scare them away. Do you think the average user will understand that it's their fault and not my website?\nAlso if that website can see I'm serving invalid cert, search engines can too. Will they find that suspicious? I don't know. Why would a domain be serving a valid & invalid certificate?\n\nThis is how name based shared hosting has been working for years if not decades all over the world. Does not seem to be an issue at all in the long run.. Your /etc/nginx/vhost.d volumes aren't shared between the containers, each will get its own anonymous volume.. https://github.com/buchdag/letsencrypt-nginx-proxy-companion-compose those examples are actually tested on a regular basis.. > Firstly, I am worried that that I in my \"application nginx container\" (running either reactJS or django) I have changed a setting that is making the letsencrypt challenge fail. In the past I had to do zero configuration of the nginx.conf to make a special route for /.well-known/acme-challenge/X.\nYou don't have anything to configure in your app beside setting the correct Docker environment variables. The challenge validation and cert generation are entirely handled by the nginx-proxy and LE companion duo, even something with zero connection to the outside like a busybox container will get certificates correctly generated.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. The permission issue is specific to your system and your docker setup, there is nothing in your docker compose file that should cause this. What OS and Docker version are you using ? Do you have anything configured elsewhere that could make containers processes not run as root by default ?\nThere is one major error that would prevent the companion to work anyway:\n```\n[...]\n### N G I N X ###\n  nginxServer:\n    [...]\n    ports:\n      - \"8080:80\"\n      - \"443:443\"\n```\nYou can't use any other external port than 80 for http and 443 for https or the challenge validation will fail. See #428 \nAlso mounting the docker socket inside the nginx container in a three containers setup is unnecessary and not recommended, as that's precisely why the three container setup exists (to avoid having the docker socket mounted inside a publicly reachable container).. Good to know that things like SELinux and AppArmor can cause permissions issues with Docker Host Volumes. That could help others in the future.\nBy the way Docker 1.13 is almost two years old, aren't RH / Fedora repos more up to date than this ?. Do you have the container's log output ?\nWhat OS and docker version are you using ? Anything specific on your host like SELinux or AppArmor? . Debugging info about the permissions changes are in the middle of the certs info.. Are you sure you are using an up to date version of the container ?. @techoutlooks > OS, Docker version, LE companion version, config, container logs ? \n@desimaniac > my bad, you don't have debug output enabled at all. The value you have to set the DEBUG environment variable to is true, not True. I'll make this case insensitive asap.. Okay, I see. Are you experiencing issues because of the symlinks being owned by root:root ? . Can you describe more precisely the issue your are running into because of the symlink ownership ? Does your cert folder has the sticky bit set ?\nFrom the test I just did, symlinks ownership does not appear to matter : even an unprivileged user can mv or rm a symlink owned by root:root. That was tested on Alpine, Ubuntu and Manjaro. If you are on RHEL / CentOS maybe that's different ?. Could you test it (taring / untaring and the other operations you had in mind) to be sure it's not impacting you in your intended usage of the files ?. Sure it's working within parameter but the fact you thought this was a bug means not changing symlinks ownership might cause confusion.\n@techoutlooks is your issue about symlinks too ? . Yes, I'll look into this. Not that hard, but it'll require to use core utils instead of their busybox equivalent.. Hi\n\n2018-11-23 16:18:16,165:INFO:simp_le:1538: Retrieving Let's Encrypt latest Terms of Service.\n\nThis log output indicate that you're not using an up to date container. All that ToS stuff was removed from simp_le more than one year ago on version 0.6.2.\nstable use simp_le version 0.6.2 and v1.9.1 and latest both use way more recent versions, so I don't really know where you got that log output from.. Can you take a look at https://github.com/certbot/certbot/issues/6278 and https://github.com/certbot/certbot/issues/5737 ? They look similar to what you are experiencing.\nBTW the issue is obviously with simp_le, so this might not be the good repo to get this fixed.. Errr but does it work then ? If your proxyed container does not have any LETSENCRYPT_* environment variable at all, no certificate will be created / renewed.. Oh. It's extremely likely that this is related to the alpine host in my opinion. Alpine is a very peculiar beast, even more so as a host.\nOur automated testing is done under Ubuntu and I think that our user base is mostly debian / ubuntu, probably by a wide margin.. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Please check the failing authorization link provided by simp_le.. https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations#your-domain-name-does-not-resolve-to-your-host-ipv4-andor-ipv6. Nope, that does not work with the validation method used by simp_le. The domain you want to issue a cert for has to be public and reachable.. > After some time, the custom cert files are removed, and I suspect this container is overwriting those files. Note the filename does not match any host that this container is configured for with a LETSENCRYPT_HOST env var. Custom files are removed, not overwritten.\nThis should have been fixed recently (see #465 and #472).\nCould you try again with an up to date version of the container ?. Closing due to inactivity.. Glad it works OK for you now, there is no need to apologise \ud83d\udc4d . > And also, as it currently stands, the auto renewal process is not even tested by the test units (only the default_cert unit tests the renewal of the default certificate).\n\nAdding a variable would allow to \"spoof\" the validity check (by giving a higher min validity than the current certs have), in order to test the auto renewal feature.\n\nIn fact this is already more or less what the force_renew script does, and this one is tested.\nAnyway the feature seems sound to me, feel free to submit a PR \ud83d\udc4d . The validation depends on Let's Encrypt severs being able to read a challenge file on your server. If your setup is not publicly reachable, there is no way the validation can suceed and no certificate will be issued.. Please check https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations. In case you don't spot it:\nenvironment:\n      - VIRTUAL_HOST=cv.mydomain.com\n      - LETSENCRYPT_HOST=mydomain.com\nYou are requesting a certificate for mydomain.com but only configuring cv.mydomain.com for proxying. nginx-proxy will have zero knowledge of mydomain.com and requests to this domain will fail, including LE challenge validation.. yaml\ncommand:\n      \"-notify-sighup nginxServer -watch -only-exposed /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\"\nCould you try without -only-exposed ?. Could you tell me were you picked up the use of -only-exposed from ? It was removed from nginx-proxy and from this repo at least one year and a half ago.. fixed by #483 . LETSENCRYPT_MIN_VALIDITY should be capped a bit lower than 90 days, because capping at 90 days will have the same end result as no capping at all: the container will attempt to renew the certificate on every run of the service loop and will hit LE rate limits pretty fast.\nConsidering LE rate limiting on this is 5 renewal / week for a given cert, 7655040 seconds (7776000 - ( ( 24 * 7 * 60 * 60 ) / 5 ) seems to be the highest sensible capping.\n88 days / 7603200 seconds, ie taking a small security margin over LE rate limit and rounding it to the nearest whole day would also make sense.. My understanding is that Duplicate and Renewal are considered to be the same from a rate limit perspective:\n\nThis is the same definition used for the Duplicate Certificate limit described above. Renewals are still subject to the Duplicate Certificate limit.\n\nSo (from what I understood) each pre-existing discrete certificate (same set of domains) can be renewed up to five times a week. @cpu did I get this right ?\n\nYeah, originally I wanted to cap it to a lower value for the stated reasons, but then comes the problem of testing. How can the test unit test this feature by \"simulating\" a passing of 48 hours in a reasonable time?\n\nRigth, I did not think about this. User adjustable MAX_VALIDITY perhaps ?. > Well, the thing is that LE CA always gives certificates with a lifespan of 90 days (not adjustable through simp_le). So even when adjusting MAX_VALIDITY we would have to somehow trick simp_le to think that the period given through --min_valid has been reached.\nYou might have mixed up things here, or I did. If the MAX_VALIDITY is adjustable, it can default to say 88 days and we can manually set it to 90 days for the test so that the rest of the existing test unit will work as is (and we don't have to fiddle with the container localtime).\nMaybe MAX_VALIDITY should be renamed MIN_VALIDITY_CAP, that might be a bit clearer.\nRegarding the improved support of other ACME CA I was about to answer that I'm not aware of any other CA offering free certificate through ACME v1 protocol with http-01 challenge, but a quick research seems to indicate that there is now at least one candidate.. > we trust the user to give a value that has already taken account the rate limits (e.g. 88 days instead of 90), IF he sets the variable manually and doesn't use the default value.\nMaybe it should be documented that this value is (for now) only adjustable for test purpose.\n\nAnd according to them they give certificates with a lifetime of 180 days.\nSo, what do you say? (I could integrate the check in this PR)\n\nThey also seems to have a limit of one domain per certificate:\n\nThis is a Domain Validated (DV) certificate including a single domain name per certificate.\n\nSo we'll probably have to add checks for that to if we intend to support this ACME CA as well. I'll do some tests with Buypass Go as soon as possible and we'll handle the \"other ACME CA\" compatibility in another, later PR.. I'm okay with the lower bound too. 7200 seconds ? More ?. @Greek64 thanks for the notification. I'm currently bed ridden due to flu, so merge will have to wait a bit. Don't want to merge stuff while my brain is half functional.\nAdditionally I thought ~ one week ago that maybe the adjustable  MIN_VALIDITY_CAP for test purpose wasn't the cleanest idea : we could just change the test boulder config to issue certificates with a 88 days validity. We're already touching the config to change ports for the http-01 challenge back to the usual 80/443 and whitelist the test domains, so adding another change should be easy.\nYour thought on this ?. > And that will conflict with the force_renew test, which assumes a 90 day validity in order for it to work.\nHmmm as I view it the test will still work, /app/force_renew script only assume that the default cert validity is X (seconds days or whatever) and run simp_le on the existing certificates with a minimum required validity greater than or equal to X, hence forcing the renewal.\nThe minimum validity of the /app/force_renew script might as well be 300 days or even 10 years, as long as it's above the default validity of the issued certs (wether 90 days for real LE certs or 88 days for our boulder certs), it would work the same.\nWe just have to make sure that changes made still allow the /app/force_renew to use a --min-validity of 90 days or above.\nThis seems to be the same type of confusion as https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/485#issuecomment-449719052. The different time value relationship and current values (in seconds) is as follow:\n0 <  A (7200) \u2264 B (LETSENCRYPT_MIN_VALIDITY) \u2264 C/D (7603200) <  E (7776000) \u2264 F (7776000)\n\nA: lower bound to LETSENCRYPT_MIN_VALIDITY (not user defined)\nB: user defined or default LETSENCRYPT_MIN_VALIDITY value\nC: upper bound to LETSENCRYPT_MIN_VALIDITY (not user defined)\nD: default validity of cert issued by the test suite's Boulder\nE: default validity of cert issued by Let's Encrypt\nF: value of the --min-validity flag used by /app/force_renew. Yes, I'm aware of this, and I haven't managed to understand why this is happening yet.. Oh, one last thing, I've noticed that for some reason your commit messages are prefixed with a star and a space (*), I'd prefer that to be removed if possible.. Thanks for the good work \ud83d\udc4d . @Greek64 the test unit fails quite often, if you have some spare time could you try to investigate and see if it could be made a bit more reliable ?\n\nedit : it seems to be failing way more often on the three containers setup than on the two containers setup.. I haven't seen CI errors related to this in weeks, so I guess this is no longer relevant. The errors are probably more Travis related than anything.. @offbeatful : the simp_le traceback seems to indicate that you are using an outdated version of the container.\n@h44z : we don't provide support for forks of this project.. This looks similar to #397 . My take on this issue is that the standalone docker-gen container cause the authorization to fail for some reason and then simp_le is unable to process this specific answer from the ACME CA. That's only a guess from the fact that taking the docker-gen container out of the equation seems to solve the issue. I'm still unable to reproduce it.\nWhat OS are you using with which docker version ? Is everything up to date (containers, docker-compose, nginx.tmpl, etc) ?\n@offbeatful I see that your are building the docker-gen container, could you share the Dockerfile you are using ?. Looks like simp_le is having a hard time handling network related issues, I'm not sure there is much we can do from the letsencrypt-nginx-proxy-companion container perspective.. As this is most probably a simp_le issue that we can't fix from our end, I'm going to close this issue for now. Feel free to re-open it if needed.. Hi. Sorry but we can't provide support for third party implementation of this project.\nThe certificate with CN=letsencrypt-nginx-proxy-companion is the default certificate that get created on container startup. If you hit the default certificate instead of your service's cert, that probably means the proxy is not configured properly. No idea why.\nPlease open an issue directly on the algolia/sup3rS3cretMes5age repository if you need further help.. Hi.\nThat's currently not possible as simp_le (the ACME client used by this container) does not support this but that will be looked into when we'll switch to another ACME client.. That's fixed.. Thanks !. Sorry for the multiple pingbacks, I was unsure how to use co-authoring properly.\nEdit: the wiki was also fixed, thanks for spotting this.. I've pushed an image with a possible fix to duch/letsencrypt-nginx-proxy-companion:496, could you pull this image and try again ? I'll PR and merge the fix if it works ok.. Thanks ! . Have you follwed the troubleshooting steps in https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Invalid-authorizations.md ? . Do you have complete log output from the container ?. If you check the \"Failing authorizations\" link provided in the logs you'll see:\n\"type\": \"http-01\",\n      \"status\": \"invalid\",\n      \"error\": {\n        \"type\": \"urn:acme:error:unknownHost\",\n        \"detail\": \"No valid IP addresses found for www.bakeitcookbook.com\",\n        \"status\": 400\nYou DNS isn't correctly configured for www.bakeitcookbook.com or hasn't propagated yet.. This is the test for the CAA record. The problem the Let's Encrypt validation server returned is different : at the time you tried to get a certificate, it did not find any valid IP address (so either an A or AAAA record) for your www subdomain.. Merged, thank you !. Clarifying a point from @Greek64 explanation:\n\nSince docker-letsencrypt-nginx-proxy-companion removes the certificates if the respectable container (for which the certificates are meant) is not running, and recreates them at container start\n\nWhen the corresponding container is stopped, the companion does not remove the certificates but the symlinks to the certificates. The only two case when the container should remove a previously generated certificate is when this certificate is renewed, or when a SAN certificate with the same base name (= first domain on the certificate) as an existing certificate but with a different set of domains is issued. \nAny other cert / chain / key deletion is unintentional and should be reported as an issue.\nThe rest of the explanation still stands, ie certificates currently not in use are not automatically renewed.. What version of the container are you running ? Can you post the log output from the letsencrypt companion container (not the whole log, just the last execution of the loop) ?. The container correctly attempts to renew the certificate but you are hitting an authorization issue.\nMore specifically, the LE validation server got a 403 error when trying to access the challenge file.. Looks like a network error incorrectly handled by simp_le.. Do you have the exact commands or compose file you used and the containers logs ?. If you attempt to close port 80 of the proxy, domain authorizations will fail. Please check the requirements at the beginning of the doc.\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/README.md#requirements\nNextcloud specific questions should be asked on Nextcloud's repository.. yaml\nservices:\n  nginx-proxy:\n    image: 'jwilder/nginx-proxy'\n    container_name: nginx-proxy\n    ports:\n      - '443:443'\n    volumes:\n    [...]\nThere is no mapping for nginx-proxy port 80, meaning it's unreachable from outside the container's docker network.\nIt has to be mapped to your host's own port 80.. > My nginx container seems to not have access to anything.\nBy this do you mean that the volumes are correctly mounted inside the container but with no read permission, or are the volume not even correctly mounted ?. Your /share/nginx/html host folder might have permissions that prevents the container's nginx process from reading files inside it. Try using a docker named volume instead of a bind mount.\nI'd personally advise to avoid bind mount whenever possible as they more often than not lead to permission issues.. Thanks ! Merging.. As usual : container version (if your are using latest, when was it pulled ?), nginx-proxy stack and proxyed app full configuration (either command line or full compose files, not just isolated snippets), containers log outputs, etc.. And please don't \"bump\" issues after just two days, this is not a paid for support service.. Please post the whole compose file including volumes declaration and the letsencrypt container logs.\nAre you sure your app is starting correctly and remains up ?. Do you have the log output of the letsencrypt container alone ?\nCould you post the result of docker exec letsencrypt cat /app/letsencrypt_service_data ?\nDon't forget to remove personal data like domains or emails.. > I think that the error is related with the thing that Im running this in a dev enviroment.\nWhat do you mean exactly by running in a dev environment ? It's not publicly reachable ?. I'm not sure I'm getting what you mean.\nIf you want to get a certificate from LE:\n\nthe domain and every subdomains you want to issue your certificate for have to be existing, public domains with publicly available DNS resolution. You can't get any certificate from LE for a private / test / invalid domain.\nthe domain and every subdomains have to point to your host public IP (or to your host router's public IP with correctly configured NAT). Host not publicly reachable (wether behind a NAT or not) = no domain authorisation = no certificate.\nthe host or router must listen on 80 for http and 433 for https, you can't use any other port.\n\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#requirements\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Invalid-authorizations.md. In the current acme.sh based version I've got (which pass all tests and is currently used on one of my servers), I did the following to address each issue:\n\n\nthe image comes preconfigured to use a default configuration directory at /etc/acme.sh/default, with /etc/acme.sh being defined as a volume in the Dockerfile. I personally don't think ACME accounts and acme.sh config should be stored in /etc/nginx/certs or be shared with the internet facing proxy container. My thought is we'll probably be forced to break backward compatibility for some stuff anyway, so we should as well correct design issues like this one along the way.\n\n\nacme.sh puts it certificate in /etc/acme.sh/default then copy them with the same naming convention as simp_le in the /etc/nginx/certs folder. Proceeding like this require the least amount of modification on the existing service loop and test suite code. I haven't yet worked on migrating existing cert and I highly doubt that the process could be made automatic because of what I said previously.\n\n\nI haven't covered that yet but I think it might be easily addressed by using multiple cert subdirectories in /etc/acme.sh/default based on the ACME endpoint used.\n\n\nfor now my solution is not caring about migrating ACME account keys and just let acme.sh create its own account keys. Extracting private key in PEM format from a JWK is doable (did a proof of concept a few days ago) but I really don't think it's worth the effort plus not trying to import account keys from another client is kind of the recommended solution when using certbot anyway, so I don't think this will change.\n\n\nthe container use as a DEFAULT_EMAIL environment variable that set the contact email address for the default ACME account. @cpu answer implies that the way the containers have been doing it for a while does not actually work (= using a single account and being able to specify a per container/certificate email address). I don't remember exactly how simp_le handle this internally, but I suspect the email address used is the one supplied when the account creation happens for the first time.\n\n\nthis is going to be adresses by an upcoming separate PR that rework the logging system, and DEBUG=true will automatically be converted to the relevant environment variable and value.\n\n\nwe could pipe acme.sh output to grep or sed to try to strip out the certificate from the std out but that's not a super clean solution. Or we could try to contribute a 'non interactive' output mode to acme.sh.\n\n\nthe environment variable REUSE_PRIVATE_KEYS defaulting to false has been replaced by the RENEW_PRIVATE_KEYS defaulting to true but it's probably better to keep the old environment variable even is the acme.sh command line flag is actually the inverse.. @cpu yes that was helpful, thanks ! \ud83d\ude03 . @cpu if you have 5~10 minutes to spare, would you happen to have an advice on the 4th point above ?. I'm not sure how this relate to this project as its only purpose is to automatically generate certificates for your containers behind nginx-proxy.. Yup. That might not be obvious but this project and nginx-proxy project are actually maintained by different peoples. We only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your issue directly to the nginx-proxy repo.. The companion is not responsible for this, nginx-proxy is.\n\n\nWe merely accomodate what's done in the vanilla nginx.tmpl to enable automated ACME cert generation.. Moving Let's Encrypt related config to its own file would have the net result of preventing the container from working with upstream nginx-proxy as there is currently nothing in place to make use of a /etc/nginx/vhost.d/letsencrypt in the nginx.tmpl file.\nThis HAS to be merged to nginx-proxy first, it won't work the other way around.. @h-rasi what is this xalt/nginx image your are using ?. Also we only deal with issues directly related to jrcs/letsencrypt-nginx-proxy-companion. As far as I can tell what you posted is an issue inside an unknown fork of nginx-proxy.\ncrt.sh shows that your certificates have been correctly created.. Hi.\nCould you give me the exact file path we're talking about and its full content ?. > Are there situations where the docker_api approach might not work correctly?\nYes, because it relies on the fact that the container name and hostname are the same, and indeed you can set different values for those.\nThe idea of falling back to the API was also that reading content from a file is faster than an API call (an order of magnitude faster, the API call taking around 0.05s and the file method around 0.005s when measured with time).\nThe problem here is not the system.slice/ prefix itself but the fact that they add docker-and .scope to the container ID (probably because it has something to do with systemd). Maybe we chould check for both the file existence AND the length of the string returned by this method before using it ? That should correctly fall back to the API call in this case.. @xiamaz any advice on the previous proposition ?. Many thanks, sorry for the merging delay !. Hi.\nThis project (JrCs/docker-letsencrypt-nginx-proxy-companion) \"only\" purpose is to:\n\nenable the automatic creation of certificates from containers env var.\nput them in the right place with the right name so they can be used by nginx-proxy docker-gen template.\nreload the nginx proxy when needed (cert creation or renewal).\n\nWhat you want to achieve depends entirely on the jwilder/nginx-proxy project, which does the actual proxying and is maintained by different peoples.\nWe only deal with issues related to letsencrypt-nginx-proxy-companion, so please submit your nginx-proxy issues directly to the nginx-proxy repo.. Could you share the logs from your letsencrypt-nginx-proxy-companion container ?. I don't know if it's related to your issue but I thinks this:\n2019/03/10 22:38:30 [emerg] 74#74: PEM_read_bio_DHparams(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: DH PARAMETERS)\nHas been fixed recently on nginx-proxy.\nAs I suspected you're hitting an authorization issue. Please check https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Invalid-authorizations.md. No need to search very far though\nyaml\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"1080:80\"\n      - \"10443:443\"\nACME http-01 challenge happens over ports 80 or 443 ONLY and require port 80 to be opened on your host (and bound to your proxy).\nThis is in the doc, please let me know if the wording is unclear or could be improved as this is a very common and recurring mistake.. To be honest I think this is out of the scope of this repo.. You should try without the first reverse proxy, with nginx-proxy directly mapped to 80/443.\nIf the certificate generation works this way, the issue lies somewhere in the double reverse proxy setup, and I can't help with that (as this is clearly out of scope).\nIf you are still hitting an authorization issue without the first reverse proxy, try to follow the troubleshooting steps described in the doc. If they don't solve the issue, please let me know here.. Hi.\nACME http-01 challenge isn't made over HTTPS but over HTTP as the name imply, and it will follow redirect to HTTPS.. This depends on nginx-proxy's nginx.tmpl file.\nWe try to have something that work out of the box with the upstream nginx.tmpl file but as you found out the upstream template does not work for every scenario. You can however use a custom nginx.tmpl file tailored to your needs. I think I did something similar a few months ago, let me search.. Found it : #299 \nLet me know if that helps.. @DominikUrban Can I close the issue ?. Hi. I'll try to take a look at this soon.. Hi.\nCould you post more details about this issue ? Config, container's version, etc. The variables themselves are just NGINX_DOCKER_GEN_CONTAINER and NGINX_PROXY_CONTAINER, not the whole thing with the -e switch and the variable value.. The variables are NGINX_PROXY_CONTAINER and NGINX_DOCKER_GEN_CONTAINER, nginx and nginx-gen are their respective value in the context of this example only, that should be made clear like in the rest of the doc.\nIn my opinion the way you wrote it might cause people to believe that the two variables have to be set to nginx and nginx-gen regardless of the name given to the nginx and docker-gen containers. It should be made clearer that those two values have to be the static names chosen for the nginx and doker-gen containers.. see below. Sure, that's cleaner. Done.. date output should be formatted like docker-gen (date \"+%Y/%m/%d %T\").\nMinor english typo too: \"nginx-proxy container id isn't running.\". date output formatting + typo: \"Check if the container is running.\". Same as above.. The parenthesis here are not needed.\nI'd prefer [[ -n \"$exec_id\" && \"$exec_id\" != \"null\" ]] to stay in line with existing code style.. I think the \"Check if the container is running\" on this error message is redundant, as we'll get it from the docker_exec error just before that, right ?. Could you end the error messages with a . ? \ud83d\ude03. They modified the docker-compose file to use two Docker networks with specific subnet (10.77.77.0/24 and 10.88.88.0/24) instead of running on the default bridge network, so the previous method to retrieve the Boulder container's gateway IP now return two IPs.\nI think I can come up with something a bit more robust if required.. -n check if the length of a string is non zero.\n${VAR// } strip all space characters from $VAR. More specifically, it's this form of bash string manipulation : ${string//pattern/replacement} which replace all matches of pattern with replacement, the pattern here being a space and the replacement nothing because /replacement is omitted.\n[[ -n ${VAR// } ]] check that $VAR length is not zero and that $VAR isn't only whitespace, because if that was the case it would be reduced to zero length by the string manipulation. This is to avoid inserting an empty or all space string where it might be dangerous (typically something like rm -rf /somepath/$VAR).\n-n alone does not check the case where the variable is all space.. The certificates issued by the test Boulder are signed by either happy hacker fake CA or h2ppy h2cker fake CA (only the later if I recall correctly, but let's be on the safe side), so this check ends up breaking the CI. You should replace this check with something like:\nif [[ -f \"${certfile}\" ]]; then\n    issuer=\"$(openssl x509 -noout -issuer -in ${certfile})\"\n    le_regex=\"Let's Encrypt\"\n    ci_regex=\"h[a,2]ppy h[a,2]cker fake CA\"\n    if [[ ! \"$issuer\" =~ $le_regex ]] && [[ ! \"$issuer\" =~ $ci_regex ]]; then\n        continue\n    fi\nfi. He he thank you, I'm relatively new in Nantes but yes that's one hell of a nice city \ud83d\ude03 . Because we're just doing a quick internal file comparison and an md5 hash is more than enough for that purpose.\nWorst case and extremely improbable scenario is you generate a dh params file whose md5 collide with the pre generated dh params and a new one is generated again at container restart.. No, this is completely unrelated to certificate requests.\nWhat this PR does is outlined in the first message:\n\ncheck if a custom (ie different from the bundled one) DH parameters file is present.\nif not, use the pre generated DH parameters file bundled with the image and start generating a new one in the background, with a low priority process.\nwhen the new DH parameters file is generated, reload nginx so it start using it.\n\nThe goal here was to remove the initial wait and service unavailability due to foreground DH parameters file generation (which could be quite long on some low end hardware) whilst still using a strong 2048 bits DH parameters on first start.. Whitespace issues ?. Same here.. While we are changing this line, could you update the link URL to point to the actual version / repo of simp_le we are using ?\nhttps://github.com/zenhack/simp_le/blob/a8a8013c097910f8f3cce046f1077b41b745673b/simp_le.py#L73. Maybe rename this variable to MIN_VALIDITY_CAP (or something else along the same line) to avoid possible confusion with the default duration of certs generated by LE / the ACME CA used ?. ",
    "mynameisfiber": "Ah, yea... it works.  The problem was that I was using a wildcard domain for VIRTUAL_HOST and then drilling down to one specific host for LETSENCRYPT_HOST. \nNow that I have VIRTUAL_HOST contain a list of hosts, LETSENCRYPT_HOST has one of those hosts and vhosts.d/ contains one entry for every VIRTUAL_HOST things work just fine.\n. ",
    "stevenroose": "Thanks. I think that part works, just not the part forwarding, but that's not an issue here.\n. ",
    "konstantinj": "The default nginx-proxy container is using the /app/nginx.tmpl file which I can't overwrite with a mount. Also by using nginx separately I can use a newer version and the docker socket won't be exposed publicly. \n. In the readme from https://github.com/jwilder/nginx-proxy it says that the nginx container must be named \"nginx\". So I guess that's how docker-gen can reload nginx. So it should work the same with your container I guess when the container name is hard \"docker-gen\".\n. Yes, when using nginx-proxy image. But in my case, when using docker-gen image and nginx image separately, docker-gen is reloading nginx in the other container. \n. Awesome!\n. ",
    "bobmaerten": "Exactly my setup, @konstantinj. I'll try installing/using the @JrCs image to get it running, and I'll report back here then.\n. Well, no luck with containerized docker-gen, so I switch back on default nginx-proxy for now.\n. @JrCs docker-gen tool has a -notify-sighup <container_name> flag to do some sort of kill -HUP to the container.\n. ",
    "mpatton125": "I have this working (for the most part) with minimal code changes, with official nginx image and docker-gen 0.5.0.  Everything is working as expected getting certs etc.  The only bump I currently have is that docker-gen command run in the docker-gen container doesn't seem to exit properly (or in fact, at all).\nSo while the LE companion container does it's work correctly and fires off the docker-gen command followed by the nginx container HUP, the docker-gen command never exits so the LE container sits there doing nothing, waiting for it. :(  I have raised an issue with docker-gen and will see what is said.\n. Sorry... I perhaps wasn't very clear.\nEach of those subdomains runs in it's own container.  So there are as many containers running as there are subdomains.\nDo I use the same LETSENCRYPT_HOST value for all containers?  Containing a list of all the domains?\n. Just an FYI...  I did the above (for a SAN certificate), however in my situation I only needed to put all the subdomains under LETSENCRYPT_HOST in 1 container.  It works fine.  If I put the LETSENCRYPT_HOST env variable on all containers it just makes the process repeat as many times as you have containers (with no real difference in the outcome).\n. So the LE container has /usr/local/bin/docker-gen (I wasn't aware), then this is even easier and better than my currently (mostly) working implementation.  Get the LE container to update the default.conf via the same template and just restart nginx.  Very simple and great!  Am testing it now locally (mainly because I can't wait).  Thanks!\n. Actually...  I note that the nginx.tmpl file that comes with docker-gen 0.5.0 is very basic and doesn't cater at all to SSL.  I am currently using my own version of that file which is an amalgamation of the one from the current nginx-proxy and the newer network specific parts of the docker-gen 0.5.0 template...\nWhat are you guys using for this?\n. I have the mixed scenario working using the files from this pull request along with my own modified template (and docker-gen 0.5.0). This container handles the ssl stuff and the docker-gen container handles the rest.\nThey both reference the same template.\nIn regards to the issue with docker-gen 0.5.0 not exiting, I encountered this only when calling the docker-gen command remotely from the LE container (via that api exec call). However it seems to be working okay by itself.\nI did raise it as an issue in the docker-gen github.\n. Problem I currently have, is that the version of docker-gen included within this LE container isn't new enough to accept the docker networking changes with the newer nginx.tmpl file I am using...\nAny chance you can upgrade the docker-gen binary?\n. Using docker-gen 0.5.0 definitely doesn't work due to the already reported \"non-exit\" bug.  I tried the binary from 0.4.3 as well, but it's not updated with the new networking stuff so I can't use it.\nHopefully the 0.5.0 issue will be sorted soon, as that is all that I need to have this all working seemlessly.\n. @nilroy Definitely doesn't exit for me, even when run manually. I need to CTRL C to kill it. Tried it this morning.\n. Okay, jwilder has just put through a commit that fixes the \"not exiting\" problem in docker-gen 0.5.0 and the new version is 0.6.0.  I have just tested it and it is working fine. \nSo now my nginx (official), docker-gen (0.6.0) and an LE companion container (modified with this pull request, my own modified nginx.tmpl and injected with the new docker-gen 0.6.0 executable) are working perfectly to grab/renew my SAN certificate under docker 1.10.1 (with the new networking changes).\nThanks everyone! :) :+1: \n. I am completely new to templating, but here is my nginx.tmpl - it's an amalgamation of the template inside your LE container and the one from the newer docker-gen (0.5.0 at the time), with it's support for the newer docker networking.\nnginx.tmpl.txt\n. @JrCs @nilroy I have tested out your DEV branch and it seems to be working fine.  I started fresh and it generated my 10+ domains worth under the 1 SAN certificate, sent a HUP to the nginx-gen which regenerated the nginx default.conf via my nginx.tmpl - all working.  Good job!\n. It's very odd, because the certificates work correctly when browsing the websites.  If I grab one of the verification URLs from the log and put it in the browser, it downloads the file?\nEdit:  Okay, it would appear to be a problem with HTTP/1.1 somehow.  If I hit the servers with 2, it proxies fine.  If I (or anyone else) use 1.1 it fails to a 503 error...\n. Okay, so that's not true.  Just performed a test with openssl:\n\n[root@ferryman templates]# openssl s_client -connect www.nine-hells.net:443\nCONNECTED(00000003)\ndepth=2 O = Digital Signature Trust Co., CN = DST Root CA X3\nverify return:1\ndepth=1 C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\nverify return:1\ndepth=0 CN = couch.nine-hells.net\nverify return:1\nCertificate chain\n 0 s:/CN=couch.nine-hells.net\n   i:/C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\n 1 s:/C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\ni:/O=Digital Signature Trust Co./CN=DST Root CA X3\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIIG1jCCBb6gAwIBAgISAyruGi7WEsiZHgVY7OJhIX3pMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjA0MjUwNTUzMDBaFw0x\nNjA3MjQwNTUzMDBaMB8xHTAbBgNVBAMTFGNvdWNoLm5pbmUtaGVsbHMubmV0MIIC\nIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA6g0NaR7ChR/J+0imUNXsEqdz\n0B3CgZkJJqrlXuCu4SDFdNGqE/zf90IA7aI7AzcY/ltFYnLiZyu18RRjVO/1NKLT\n8tXfkmmfgdIXfawhf9sTQhuAmMG9eEtV9exWg/H+kU9E/LjPkjdS3RReDgikgs7W\n5XNprpCjASZRJAQlU/Jw24B4CZkGXIPpYBMlj9FFZ1GiaZpbSYhxkTCwSCedjXzg\nmEiUEyFAtn3i13Wzylw3UrRS4xdIOX9myWI7EEeqZ3XYjPfUrRWCjZojMmwhIf4f\n91UG346QLcMIjf60VURcOdIyzFGKEByV9YpRe3djFqVPX1M6NW7l7+NB3C5+oWJ0\nDUu3L4Arj2t8nIdv7naYPgCLh7npUJEzB/V1bM89DG44EmnNsg107jb2rPgRuyAm\n8VGomPdB4CWZTiHcrWREsxTbyGfE9ho8OD+QoMRTJQ7Pr5xgHI4uUOoRy+obRe3V\n2ugAQcOtqTRH0UD9jv/KVoItL9iXlDltXYC8YFOsDzgbfNwau/H+JtjBmC0RRG/Y\nPq5t5PE0LzS5pjdWhZiI14p2onFkCJFSavKRA5qfSZmSdao84QntQc85J+Iw4imm\n4IrC/+53MCUkHAai3DhRPp2rfdD8ojr0UBz1T1tBwuNGmSi5+BM01yOO+W5y9T3N\nVHqLfRstcX0fPc0nEtkCAwEAAaOCAt8wggLbMA4GA1UdDwEB/wQEAwIFoDAdBgNV\nHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4E\nFgQUDRV5v76HMmJdl2kgGlDm0V4A6XEwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3\npkVl7/Oo7KEwcAYIKwYBBQUHAQEEZDBiMC8GCCsGAQUFBzABhiNodHRwOi8vb2Nz\ncC5pbnQteDMubGV0c2VuY3J5cHQub3JnLzAvBggrBgEFBQcwAoYjaHR0cDovL2Nl\ncnQuaW50LXgzLmxldHNlbmNyeXB0Lm9yZy8wgegGA1UdEQSB4DCB3YIUY291Y2gu\nbmluZS1oZWxscy5uZXSCFWRlbHVnZS5uaW5lLWhlbGxzLm5ldIIVZWJvb2tzLm5p\nbmUtaGVsbHMubmV0gg5uaW5lLWhlbGxzLm5ldIITcGxleC5uaW5lLWhlbGxzLm5l\ndIIacGxleGNvbm5lY3QubmluZS1oZWxscy5uZXSCFnNhYm56YmQubmluZS1oZWxs\ncy5uZXSCF3NpY2tyYWdlLm5pbmUtaGVsbHMubmV0ghJ3d3cubmluZS1oZWxscy5u\nZXSCEXptLm5pbmUtaGVsbHMubmV0MIH+BgNVHSAEgfYwgfMwCAYGZ4EMAQIBMIHm\nBgsrBgEEAYLfEwEBATCB1jAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5j\ncnlwdC5vcmcwgasGCCsGAQUFBwICMIGeDIGbVGhpcyBDZXJ0aWZpY2F0ZSBtYXkg\nb25seSBiZSByZWxpZWQgdXBvbiBieSBSZWx5aW5nIFBhcnRpZXMgYW5kIG9ubHkg\naW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBDZXJ0aWZpY2F0ZSBQb2xpY3kgZm91bmQg\nYXQgaHR0cHM6Ly9sZXRzZW5jcnlwdC5vcmcvcmVwb3NpdG9yeS8wDQYJKoZIhvcN\nAQELBQADggEBADBkQZGrBBptzZ0Fjqd5iNHO5zp6kuRIROirg3K19VpygOJVHE1C\nMYduFuOE+MF9FAdLbVYTBNuTJVI5n6OG7N6Dxp9MNZ2ckTFebkGSnwufxu+QyTzg\nhICcizAeYM3prE+SFjgZjF49bWDuoWYsFz8PY+tgdDtarUveein5pdwApET/MWlK\n3FfaM79r6QFiGyO9+kTQE6op1dsdKHMgMefdG2zjmT60yEvdIkXftx6rTWl3HJXI\n7bAb5wTHn/6gHnKfabLKn3QbxT+j3798/xHuVRwN6F7UJwDKoWwe6VrDgUNTEm6W\n5OXWwz0WAKhpTgviIqUGLXuBmplkfQ7IDXI=\n-----END CERTIFICATE-----\nsubject=/CN=couch.nine-hells.net\nissuer=/C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3\nNo client certificate CA names sent\nPeer signing digest: SHA512\nServer Temp Key: ECDH, P-256, 256 bits\nSSL handshake has read 3862 bytes and written 327 bytes\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-AES128-GCM-SHA256\n    Session-ID: 5F1A0FE31DCC123E2D1E2D44CB531986E4B86AE9EF9C27B8AABE06C5A3656215\n    Session-ID-ctx:\n    Master-Key: 2E4A24B5584BB39AB77C9D7D0721A9F2CC7768FDE12BEA0830F7ACB72A77BE0C38CCB17579C5F54C1CADE7DD1A86411F\n    Key-Arg   : None\n    Krb5 Principal: None\n    PSK identity: None\n    PSK identity hint: None\n    TLS session ticket lifetime hint: 300 (seconds)\n    TLS session ticket:\n    0000 - e9 78 23 86 40 0b 2d b2-ac 9a ba f3 1e 5e 75 35   .x#.@.-......^u5\n    0010 - 64 f5 23 f5 57 d9 22 52-73 d8 2a 41 e1 d9 a8 77   d.#.W.\"Rs.*A...w\n    0020 - 56 fb ae 19 a3 24 20 14-fe 7b 8e 9d 0b 5a 77 67   V....$ ..{...Zwg\n    0030 - 0d 4e e5 7e d7 00 45 4c-f9 33 ff 81 b5 af e4 27   .N.~..EL.3.....'\n    0040 - c6 a2 7d d6 50 2f 47 84-fa 4b 99 bc 9a 03 52 92   ..}.P/G..K....R.\n    0050 - fb 34 08 31 44 fa d5 36-ab dd 27 67 12 50 30 ce   .4.1D..6..'g.P0.\n    0060 - fb 5c 11 8e 87 5d 17 a4-b3 73 ea c4 58 41 8d 0c   ....]...s..XA..\n    0070 - 9b af 8f b4 c7 80 ff bf-a0 02 a6 e1 de 6b 13 79   .............k.y\n    0080 - 45 69 45 64 4f ce 73 a2-b1 79 e6 74 26 ad 5b 48   EiEdO.s..y.t&.[H\n    0090 - 14 a5 8a a7 3a 7c 29 43-3a 9e ac 8e e8 ab 5b 09   ....:|)C:.....[.\n    00a0 - b0 d5 19 a1 7b 34 3b 0b-25 d3 91 86 ec e2 a0 71   ....{4;.%......q\nStart Time: 1461652579\nTimeout   : 300 (sec)\nVerify return code: 0 (ok)\n\nGET /.well-known/acme-challenge/zk0acTDR1rJ4seBosynJA5niKsJU0nKqD_STKwBtkD0 HTTP/1.1\nHost: www.nine-hells.net\nHTTP/1.1 200 OK\nServer: nginx/1.9.14\nDate: Tue, 26 Apr 2016 06:36:27 GMT\nContent-Type: application/octet-stream\nContent-Length: 87\nLast-Modified: Mon, 25 Apr 2016 06:18:39 GMT\nConnection: keep-alive\nETag: \"571db6bf-57\"\nStrict-Transport-Security: max-age=31536000\nAccept-Ranges: bytes\nzk0acTDR1rJ4seBosynJA5niKsJU0nKqD_STKwBtkD0.yCerLuhuTaQrEdvYLhNIzp_RW3EKJ1A8FXwQUyl8oqw\n\nAs you can see from the above, I connected over HTTP/1.1 & SSL to www.nine-hells.net on port 443 doing a GET on the verification file I listed above - and it all worked.  The data was received... \n. Here is a copy of my nginx default.conf:\ndefault.conf.txt\nI am no NGINX expert, but it appears to be fine to me.  And the sites work fine over HTTPS.\n. I don't use docker-compose at all.\nAnd while the renew process is getting 503's, if I use a browser to go to\nthe same URL, it works perfectly.\nOn 17 May 2016 21:32, \"Max van der Stam\" notifications@github.com wrote:\n\n@JrCs https://github.com/JrCs Well, restarting the containers one by\none with (or without) docker-compose doesn't cause the problem. It's the\nfull docker-compose stop command that causes some kind of\ndesynchronization issue.\nThe cause of the HTTP-503 itself seems logical, as nginx-proxy creates a\ndefault block for the nginx.conf config which handles all unknown URI's and\nreturns them as a HTTP-503. My guess is that the nginx server doesn't\ncorrectly pick up the /.well-known/acme-challenge (as done by\nhttps://github.com/kuba/simp_le) after a restart. Thoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/55#issuecomment-219691664\n. BOOM! Headshot! :)\n\nYes, I use the same dedicated bridge network for all my containers.  No, the LE container gets a 503 when I try to do a wget of any of the challenge files! :)\nSo now we can reproduce it in the container - how do we resolve it?\n. I have just checked.  All my containers are on the same network, including the nginx instance and the LE instance.  Telnet to port 80 of the nginx instance works fine from the LE container... However.\nWhen I simulate a genuine HTTP call to the nginx proxy, passing correct host etc, I get the same 503 error in return.\n```\nGET /index.html HTTP/1.1\nHOST: www.nine-hells.net\nHTTP/1.1 503 Service Temporarily Unavailable\nServer: nginx/1.9.14\nDate: Wed, 01 Jun 2016 04:00:11 GMT\nContent-Type: text/html\nContent-Length: 213\nConnection: keep-alive\n\n503 Service Temporarily Unavailable\n\n503 Service Temporarily Unavailable\nnginx/1.9.14\n\n\n```\n. I see it... I think.  The only part of the generated nginx default.conf that listens on port 80 is:\nserver {\n        server_name _; # This is just an invalid value which will never trigger on a real hostname.\n        listen 80;\n        access_log /var/log/nginx/access.log vhost;\n        return 503;\n}\nAll of the other stanzas are:\nlisten 443 ssl http2 ;\nSo if a HTTP request shows up, it's going to get a 503.\n. And to test... I added a:\nListen 80;\nLine to one of my vhosts in the default.conf and reloaded the nginx config (without triggering the docker-gen process).  And this time to port 80 from the LE container:\n```\nbash-4.3# telnet nginx 80\nGET /index.html HTTP/1.1\nHOST: www.nine-hells.net\nHTTP/1.1 200 OK\nServer: nginx/1.9.14\nDate: Wed, 01 Jun 2016 04:21:41 GMT\nContent-Type: text/html\nContent-Length: 7\nConnection: keep-alive\nLast-Modified: Tue, 02 Feb 2016 00:51:18 GMT\nETag: \"7-52abee64115fc\"\nAccept-Ranges: bytes\nStrict-Transport-Security: max-age=31536000\nHello!\n```\nSo... The generated default.conf doesn't allow for normal HTTP traffic?\n. (sigh) Newest template \nhttps://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl\nSeems to somewhat fix this issue.\nWas changed via commit on May 2.\nUnfortunately this latest template doesn't seem to use the container IP for the \"server\" directive.  In fact, it doesn't insert a server line into the upstream stanza at all?\nEDIT:  Okay.. So I made a bastardised template using the new nginx-proxy template (above) but replacing the \"upstream\" stanza code with the old one I had.  Then of course I had to restart all my containers with a new environment variable:\nHTTPS_METHOD=noredirect\nAnd now, all sites are accessible via HTTP and HTTPS.  Which means the HTTP requests to the ACME content should now work fine?\nNot sure how optimal this is... I would prefer to have everything over TLS if possible, but apparently the LE mechanism requires HTTP for the renewal process?\n. Next thought...\nWill the renewal process work with the default \"redirect\" instead of \"noredirect\"?  I can't really test until my certs are up for renewal. :(\nMy certs aren't up for renewal until 25th of June.\n. Okay...  An update.  There is a known issue for the docker-gen container, whereby the newest nginx.tmpl file causes the \"no server line in upstream stanza\" issue I referred to above.  There is a workaround, however.\nWhen you run the docker-gen container, expose some arbitrary port (doesn't have to be published) and then the nginx default.conf will be generated correctly.\nSo it's now \"all good\", provided that the LE renewal process accepts starting a HTTP connection and being 301'd up to HTTPS.\n(Sorry for all the posts today!)\n. > The next thing I figured out is that you can't customize the html directory of the nginx container with -v /my/custom/html/dir:/usr/share/nginx/html. It has to be -v /usr/share/nginx/html or you get 404 errors.\nCan't say my experience mirrors that.  My run command for my nginx container has:\n-v /docker/nginx/html:/usr/share/nginx/html\nAnd I have no issues at present.\nM.\n. Okay... My certificate successfully self-renewed today!  w00t! :)\nThe only very minor niggle, is that even though nginx was reloaded (as per logs), the old certs still showed until I restarted the nginx container.\nStill, am happy!  You can close this.  Thanks again!\n. This doesn't need to be (and shouldn't be) in the nginx.tmpl as we want it to stay stock.  The companion container provides this functionality via the vhosts.d/default entry. \nM.\n. ",
    "rgarrigue": "Merci, je vais voir \u00e7a chez eux donc.\n. ",
    "justbuchanan": "Hi, thanks for the suggestion!  I tried it with the VIRTUAL_PROTO=https part removed and I'm seeing the same error in the logs :/.  Anything else I should try?\n. ",
    "johnny2678": "Thanks for this. Got really excited that I might have made this work out but then I got the same error with virtually the same configuration:\n`proxy:\n  image: jwilder/nginx-proxy\n  container_name: proxy\n  ports:\n    - \"80:80\"\n    - \"443:443\"\n  volumes:\n    - /mnt/docker/certs:/etc/nginx/certs:ro\n    - /etc/nginx/vhost.d\n    - /usr/share/nginx/html\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n  environment:\n    - DEFAULT_HOST=example.com\n    - VIRTUAL_HOST=example.com\nletsencrypt:\n  image: jrcs/letsencrypt-nginx-proxy-companion\n  container_name: letsencrypt\n  volumes_from:\n    - proxy\n  volumes:\n    - /mnt/docker/certs:/etc/nginx/certs:rw\n    - /var/run/docker.sock:/var/run/docker.sock:ro\ndreg:\n  image: registry:2\n  container_name: dreg\n  hostname: dreg\n  ports:\n    - \"5000:5000\"\n  volumes:\n    - /mnt/docker-aux/docker-reg:/var/lib/registry\n    - /mnt/docker/certs:/certs:ro\n  environment:\n     VIRTUAL_HOST: dreg.example.com\n     LETSENCRYPT_HOST: dreg.example.com\n     LETSENCRYPT_EMAIL: admin@example.com`\nTrying to setup my own docker registry.  LETSENCRYPT container output:\nReloading nginx proxy...\nQ2016/02/05 05:51:58 Generated '/etc/nginx/conf.d/default.conf' from 2 containers\n;2016/02/05 05:51:58 [notice] 39#39: signal process started\nCreating/renewal dreg.example.com certificates... (dreg.example.com)\n2016-02-05 05:51:58,844:INFO:simp_le:1210: Generating new account key\n2016-02-05 05:52:00,131:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:00,652:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:00,971:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:01,534:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2016-02-05 05:52:02,061:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:02,455:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:02,880:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): dreg.example.com\n2016-02-05 05:52:02,942:INFO:simp_le:1311: dreg.example.com was successfully self-verified\n2016-02-05 05:52:02,951:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:03,343:INFO:simp_le:1319: Generating new certificate private key\n2016-02-05 05:52:04,799:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:09,107:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-05 05:52:09,432:ERROR:simp_le:1277: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/UCvJnsaUEV5-altIPt_mnsvBi-jF2rqo4TAgf5Ef1jk\nChallenge validation has failed, see error log.\nnginx default.conf entries look like this:\nupstream dreg.example.com {\n                        # dreg\n                        server 172.17.0.5:5000;\n}\nserver {\n        server_name dreg.example.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        include /etc/nginx/vhost.d/default;\n        location / {\n                proxy_pass http://dreg.example.com;\n        }\nI'm kind of a noob at nginx but this looks right. dreg.example.com is accessible from the internet. Any tips?\nedit: formatting\n. This is what is in /etc/nginx/vhost.d/default\n```\nStart of configuration add by letsencrypt container\nlocation /.well-known/ {\n    auth_basic off;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n} \nEnd of configuration add by letsencrypt container\n```\nI'm guessing this is correct?\n. getting a 503 just starting the jwilder/nginx-proxy with no extra config other than what was in the docker-compose.yml post above.\nStopped that and pulled the office nginx image and started with:\ndocker run -d -p 80:80 nginx\nand was greeted with the Welcome to nginx default index.html\nMust be something missing in the way I'm running jwilders image.  Off to compare conf files...\n. nevermind... not sure I'm saying this right but letsencrypt doesn't work when there isn't an http port exposed on the target container.  The docker registry exposes port 5000 but it's not a web/http port.  That was the hang-up.  I just tried with a 2nd nginx container on port 8080 and everything worked perfectly.  Thanks for sticking with me.\n. @tinybitsofnothingness yep, at one point I had it working on two subdomains. Both showed up as secure when using http and https.  Then reconfigured one of them and attempted to regenerate the cert, hit the cert limit, and now neither works. Prob something on my end... but need to wait for the cert ban to be lifted before I can keep testing.  Is it 7 days?\n. oh, it won't work for Docker reg (at least I couldn't get it too).  Letsencrypt has to be able to connect to an http backend (web server/app server) to verify/create the cert.  Saw that somewhere but can't remember where now, so I gave up.\nCerts generated fine when proxypassing to an nginx container running on 8080.   Also got a gogs container to work.\n. i'm sure a smart person could figure it out ;)\n. ",
    "tinybitsofnothingness": "@johnny2678 May I ask, did you manage to create a certificate for Docker Registry container in the end? Automatically that is, with this docker companion container of course :)\n. @johnny2678 Yeah, it's 7 days... You can check the details of certificate for your domain at crt.sh.\nI'm really curios why doesn't it work for me then... I have more/less exactly the same configuration, but keep getting the same error for my Docker Registry container which runs on port 5000, even if I include VIRTUAL_PORT variable... Will try to recreate everything from the scratch maybe...\n. Ah, I see... Maybe it could be done with manual config addition for particular vhost or maybe even with additional \"dummy\" container which would properly respond to letsencrypt and generate/renew certs which could be used for Docker Registry...\n. ",
    "OmgImAlexis": "That doesn't work as I just get this.\n2016-02-05T15:56:20.402903862Z Error: can't get nginx-proxy container id !\n2016-02-05T15:56:20.402994232Z Check that you use the --volumes-from option to mount volumes from the nginx-proxy.\n. @JrCs any ideas?\n@dmp1ce it's an issue with shipyard not supporting --volumes-from.\n. Maybe add an optional ENV var that if set bypasses the function?\n. @JrCs wouldn't something like this work? I don't really use bash but basically we check if the env var is not set, if it isn't then try and create it using the function otherwise just return the one that's already set.\nfunction get_nginx_proxy_cid {\n    if [[ -z \"${NGINX_PROXY_CID:-}\" ]]; then\n        # Look for a NGINX_VERSION environment variable in containers that we have mount volumes from.\n        local volumes_from=$(docker_api \"/containers/$CONTAINER_ID/json\" | jq -r '.HostConfig.VolumesFrom[]' 2>/dev/null)\n        for cid in $volumes_from; do\n            cid=${cid%:*} # Remove leading :ro or :rw set by remote docker-compose (thx anoopr)\n            if [[ $(docker_api \"/containers/$cid/json\" | jq -r '.Config.Env[]' | egrep -c '^NGINX_VERSION=') = \"1\" ]];then\n                export NGINX_PROXY_CID=$cid\n                break\n            fi\n        done\n        if [[ -z \"${NGINX_PROXY_CID:-}\" ]]; then\n            echo \"Error: can't get nginx-proxy container id !\" >&2\n            echo \"Check that you use the --volumes-from option to mount volumes from the nginx-proxy.\" >&2\n            exit 1\n        fi\n    fi\n}\n. @JrCs that's what I was saying, you could add an ENV that can just be set manually if the user knows it. Since the nginx-proxy is created before this normally you'd already have it when you create this container.\n. Looks like it works, I couldn't even get it to start before.\n\n\n\n. http://domainkeys.sourceforge.net/underscore.html I wouldn't be too sure about that. It seems they may be allowed in hostnames.\n. I had a cert in the directory but it expired, I figured this would auto renew but looks like it's getting stuck.\nEverything was working fine until it expired 4 days ago both on http and https.\nI've also reinstalled nginx-proxy and letsencrypt-nginx-proxy-companion with the latest version.\n. Looks like this may be the issue: https://github.com/mail-in-a-box/mailinabox/issues/856\n. I have added each of them but it looks like maininabox wasn't setting the www subdomain to point to my other server even though I had a DNS entry for *.wvvw.me.\n. Like I said I don't think this is an issue with this and looks more like an issue with mailinabox's dns setup.\nBoth of them are set to www.wvvw.me, wvvw.me.\n. Looks like this was an error from an old version. I've updated my containers and everything seems fine now.. ",
    "dmp1ce": "@OmgImAlexis I was also getting this error on a recreate of my containers using docker-compose. I'll keep an eye out for getting this error showing up again. Removing your containers and creating them again might help for whatever reason. It fixed the issue for me.\n. ",
    "nilroy": "@JrCs --> We are using separate docker-gen and nginx containers for some security reasons. This PR addresses our case and at the same time it works with the bundled nginx-proxy also.\n. @JrCs Yes you are right...I am currently testing the stuf without the docker-gen container. However I could not use docker-gen 0.5.0 as it does not exited  out after generating the nginx files https://github.com/jwilder/docker-gen/issues/159 .I mean docker-gen version 0.5.0 can't be used in LE container.Probably there are some options that I am not aware of. Also the readme needs to be changed a bit. And do you have a plan to keep the nginx.tmpl file as part of this repo?\n. @falcon15500  I am using nginx.tmpl from nginx-proxy stuff. Also have you encountered rate limits for letsencrypt?\n. @JrCs I tested. It works without docker-gen container only when we use SSL and there is nothing wrong in it. The LE container is designed for SSL. Now I have adifferent scenario. In my environment we need to use mixed type of containers where some will use SSL and some not. I would still use the setup that contain both docker-gen and the LE container. I would leave a note in the README about it. So that people can choose whatever that fits them. What do you say?\n. @falcon15500 I have encountered the issue(docker-gen not exiting)  even If ran it on the docker-gen container. But let them solve it anyways. In my environment also we are using the same nginx.tmpl file for docker-gen and LE container. Now I have another problem. I have encountered rate limit from ACME.\n. @JrCs then lets not maintain nginx.tmpl here. But can we merge this PR?\n. @JrCs No hurry. :+1: \n. I can test if that works.\n. @falcon15500. I tested docker-gen 0.5.0 in LE container and it works. It is exiting properly while it is run locally inside the LE container.\n. @JrCs I am updating this PR\n. @falcon15500  Sorry... Its not exiting. I was wrongly testing. Its generated the configuration file but did not reloaded nginx. My bad\n. @JrCs  Should I bump the docker-gen version here?\n. @JrCs  cool. I shall wait for this PR to be merged and the latest LE container available publicly. Till then I am using my locally built one.\n. @JrCs Well I think its better to do that in a separate PR \n. ",
    "j16sdiz": "@JrCs , you have misunderstood the problem.\nI want to group with same domain.\nBut the current setup groups by containers and domain, resulting in 9 certs in total.\nIt should group all same base domains across all containers.\n. @JrCs \nMy use case is.... I have a \"webmail\" container do all webmail stuff and a \"phpmyadmin\" container do all phpmyadmin..  like this:\n```\ndocker run -d \\\n    -e VIRTUAL_HOST=webmail.abc.com,webmail.cde.com  \\\n    -e LETSENCRYPT_HOST=webmail.abc.com,webmail.cde.com \\\n    -e LETSENCRYPT_EMAIL=support@abc.com \\\n    webmail\ndocker run -d \\\n    -e VIRTUAL_HOST=phpmyadmin.abc.com,phpmyadmin.cde.com  \\\n    -e LETSENCRYPT_HOST=phpmyadmin.abc.com,phpmyadmin.cde.com \\\n    -e LETSENCRYPT_EMAIL=support@abc.com \\\n    phpmyadmin\ndocker run -d \\\n    -e VIRTUAL_HOST=abc.com,cde.com,www.abc.com,www.cde.com  \\\n    -e LETSENCRYPT_HOST=abc.com,cde.com,www.abc.com,www.cde.com \\\n    -e LETSENCRYPT_EMAIL=support@abc.com \\\n    web\n```\nBecause the ratelimit on letsencrypt, it would make sense to do this:\nabc.com  SAN=www.abc.com,webmail.abc.com,phpmyadmin.abc.com\n   cde.com  SAN=www.cde.com,webmail.cde.com,phpmyadmin.cde.com\nBut it is not currently possible..\n. ",
    "jokogr": "Such feature would be helpful for me, too. I have some services running in Docker containers which do not need a reverse proxy, yet they need an SSL certificate.\nDo you have any thoughts on how I could handle this?\n. @JrCs thanks for the prompt reply! Do you have another Docker image to suggest?\n. I was having the same issue until I upgraded to a newer Docker version.. @ScyDev I think it was 1.12.6 and it is now 17.03.1-ce. I have also added the label parameter in the nginx container (--label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true), it was something I didn't have.. ",
    "Elroban": "I started nginx-proxy with docker run -d -h nginx-proxy -p 80:80 -p 443:443 --name nginx-proxy --restart always -v /mnt/nfs/homer/ZFSStorage/Configs/certs:/etc/nginx/certs:ro -v /etc/nginx/vhost.d -v /usr/share/nginx/html -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy\nAnd removed the virtual_port assignment of AutoSub container but no luck:\n2016/02/23 16:06:49 Generated '/app/letsencrypt_service_data' from 13 containers\n2016/02/23 16:06:49 Running '/app/update_certs'\nshell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nchdir: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nchdir: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\nCreating/renewal autosub.ownpleasure.org certificates... (autosub.ownpleasure.org)\n2016-02-23 16:06:49,988:INFO:simp_le:1202: Generating new account key\n2016-02-23 16:06:50,425:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:50,702:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:51,286:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:51,616:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2016-02-23 16:06:52,189:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:52,523:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:52,916:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): autosub.ownpleasure.org\n2016-02-23 16:06:52,926:INFO:simp_le:1294: autosub.ownpleasure.org was successfully self-verified\n2016-02-23 16:06:52,941:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:53,315:INFO:simp_le:1302: Generating new certificate private key\n2016-02-23 16:06:54,268:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:58,539:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-02-23 16:06:58,801:ERROR:simp_le:1260: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/slL8xeERCT_BfA4CMMFCv8gQURWO5XDRDUfEdiIVRuA\nChallenge validation has failed, see error log.\n. Ah found the problem.\nMy sites were only visible on the SSL port (443) and I've never opened port 80 on my router to the container.\nAfter mapping the port in the NAT configuration, the certificate gets created perfectly.\n. ",
    "Nardian": "Thanks, got it working :)\n. ",
    "Panthro": "I mistakenly ported the sample to a docker-compose file with the\nENVIRONMENT\n - VIRTUAL_HOST=\"foo.bar.com,bar.com\" \n - LETSENCRYPT_HOST=\"foo.bar.com,bar.com\"\nAnd the error occurs, using docker run it won't happen because of the bash interpreter, but on a docker-compose it will.\nI know it was entirely my fault, but as domains are not allowed to contain  or any special chars I created the pull request so others won't have the same problem.\n. Well, I don't think anyone will use a domain with an invalid char, and the good thing is that bash will complain and warn the user (docker run will fail, easier to detect);\nbut up to you :ok_hand: \n. btw, sorry for the lack of explanation on the original PR description, It feld obvious to me, but clearly wasn't, my bad.\n. even better! :+1: \nthanks\n. ",
    "aphillipo": "Just a comment to say 4096 bit keys take out 10x longer to process (and possibly more, depending on the mobile device, hardware acceleration, even the kernel version) - and they add zero value compared to 2048 bit keys for now at least.\nLETSENCRYPT_KEYSIZE=2048 if SSL stuff is taking a large percentage of your load time.. ",
    "fatk": "Have a look at this compose file\nIt uses the 3 images you mention (The nginx is a bit modified from the official image because it has a lot of SSL conf embedded in it, but you should be able to use the official one without trouble)\n. Your .txt file has a misspelled volume:\n```\nnginx-proxy:\n  image: jwilder/nginx-proxy\n  volumes:\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n    - ../volumes/secureproxy/certs:/etc/nginx/certs:ro\n    - /etc/nginx/vhost.d\n    - /user/share/nginx/html\n  ports:\n    - 443:443\n    - 80:80\nletsencrypt:\n  image: jrcs/letsencrypt-nginx-proxy-companion\n  environment:\n    - DEBUG=true\n  volumes_from:\n    - nginx-proxy\n  volumes:\n    - ../volumes/secureproxy/certs:/etc/nginx/certs:rw\n    - /var/run/docker.sock:/var/run/docker.sock:ro\ntest:\n  image: nginx\n  environment:\n    - VIRTUAL_HOST=test.XXX.YYY\n    - LETSENCRYPT_HOST=test.XXX.YYY\n    - LETSENCRYPT_EMAIL=ZZZ@XXX.YYY\n```\n- /user/share/nginx/html\nIt should be \"/usr/share/nginx/html\"\n. I think your nginx.tmpl is either missing or has a syntax error. could post those 2 commands with the real paths along with the content of your nginx.tmpl?\n. Can you post your docker-compose.yml or your docker run command(s) ?\n. Nothing strikes me as wrong with any of what you posted.\nHowever, you're using a custom reverse-proxy config. Do you mind posting the contents of \"/home/reverse_proxy/my_proxy.conf\" ?\nThe normal behaviour for this setup shouldn't allow you to connect through regular HTTP: original nginx.tmpl should redirect HTTP to HTTPS if a certificate is found. It doesn't look like it, but are you using a customised nginx.tmpl somehow?\nI'll need you to post the logs from 1_nginx-proxy and 2_nginx-companion along with the generated default.conf from nginx-proxy when everything has launched and you're encountering the issue. You can do the later using\ndocker exec -it 1_nginx-proxy cat /etc/nginx/conf.d/default.conf\nIt might also help you to start using the 3 containers version of nginx-proxy + docker-gen + companion, which compartmentalises access to docker.sock, making it the more secure standard (Instructions in the README). There's also docker-compose which might help you put things down more clearly.\n. So, it would seem that your issue comes from the fact that your wordpress domain doesn't have a certificate, unlike all the other services it's missing a server block for 443/https.\nAlso, because you miss a default catch server for https (probably because you don't have a default.crt certificate) you're being redirected to the cozy instance as a default.\nI think there must have been an issue retrieving a certificate for your wordpress service.\nYou can access logs by running\n$ docker logs 1_nginx-proxy\nIn your case, since your problem seems to come from certificate retrieval/challenge failure, you should post your logs for the companion container (the part about the wordpress container, your other containers are OK), see what went wrong.\n. Can you also post logs for nginx-proxy as well, same parts?\nJust put a default.crt and default.key certificate in your certs directory, which you can generate like so\n$ openssl req -newkey rsa:2048 -nodes -sha256 -keyout default.key -out default.csr\nand self-sign like this\n$ openssl x509 -req -days 365 -in default.csr -signkey default.key -out default.crt\nthis should add a \"_\" server block that will catch undefined server names for https as well.\nSee this part of nginx.tmpl : \n```\n{{ if (and (exists \"/etc/nginx/certs/default.crt\") (exists \"/etc/nginx/certs/default.key\")) }}\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    listen 443 ssl http2;\n    access_log /var/log/nginx/access.log vhost;\n    return 503;\nssl_certificate /etc/nginx/certs/default.crt;\nssl_certificate_key /etc/nginx/certs/default.key;\n\n}\n{{ end }}\n```\n. I hadn't seen that you hadn't changed the folder \"/path/to/certs\".\nYou should create a folder, \"/home/reverse_proxy/certs\" and use it instead of /path/to/certs which is an invalid path, it's just an example string.\n. @JrCs glad i could help out! \nI just created a repo with out-of-the-box examples for docker run, compose v1 and v2.\nIn the future, i might add other examples for other popular setups.\nLet me know if i'm missing something.\n. @flexbrane \nTry using the official nginx image, and fix the following issue:\nIn this block: \ndocker run -d \\\n   --restart=always \\\n    --name 2_nginx-gen \\\n    --volumes-from 1_nginx-proxy \\\n    -v /home/reverse_proxy/docker-gen/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n        jwilder/docker-gen \\\n    -notify-sighup nginx -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\nYou're not giving the correct container name to docker-gen. \nThis line:\n-notify-sighup nginx -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\naccording to your current configuration should be:\n-notify-sighup 1_nginx-proxy -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\nIf it doesn't work, check out this repo and see if those examples help you.\n. Your nginx-gen container should not get this path if you've mapped volumes like this:\n-v /home/reverse_proxy/docker-gen/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\nDocker containers do not have access to local file system, therefore if your nginx-gen container complains about a local path, it probably means there's something wrong with your volume mapping.\n. Looks like somehow your nginx.tmpl file is not openable. Try to put it in another place and not use a link/symlink.\n. Your problem is located here:\n36   -notify-sighup 1_nginx-proxy -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\nAs i mentioned earlier, containers cannot access local filesystems, you need to give the paths that you mapped:\n-notify-sighup 1_nginx-proxy -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n. It means that you're mapping a directory instead of a file your -v declaration.\n. what about the logs for the other 2 containers?\n. Looks good, try posting the generated default.conf: \n$ docker exec -it 2_nginx-gen cat /etc/nginx/conf.d/default.conf\n. Did you modify nginx.tmpl?\nWhat's the error returned when you try to access your site?\nTry posting the output of:\ncurl -I http://forum.mydomain.com\nand\ncurl -I https://forum.mydomain.com\n. Your nginx volumes are incorrectly mapped:\n14 docker run -d \\\n 15   --restart=always \\\n 16   --name 1_nginx-proxy \\\n 17   -p 80:80 -p 443:443 \\\n 18   --env 'DEFAULT_HOST=www2.mydomain.com' \\\n 19   --env 'MAX_UPLOAD_SIZE=200M'\\\n 20   -v /home/reverse_proxy/conf.d  \\\n 21   -v /home/reverse_proxy/certs:/etc/nginx/certs:ro \\\n 22   -v /home/reverse_proxy/vhost.d:/etc/nginx/vhost.d \\\n 23   -v /home/reverse_proxy/html:/usr/share/nginx/html \\\n 24   -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n 25   -v /home/reverse_proxy/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro \\\n 26     nginx:latest\nShould be:\ndocker run -d \\\n   --restart=always \\\n   --name 1_nginx-proxy \\\n   -p 80:80 -p 443:443 \\\n   --env 'DEFAULT_HOST=www2.mydomain.com' \\\n   --env 'MAX_UPLOAD_SIZE=200M'\\\n   -v /home/reverse_proxy/conf.d:/etc/nginx/conf.d  \\\n   -v /home/reverse_proxy/vhost.d:/etc/nginx/vhost.d \\\n   -v /home/reverse_proxy/certs:/etc/nginx/certs:ro \\\n   nginx:latest\nI've removed your my_proxy.conf. Since you're now mapping a local directory, you can copy your my_proxy.conf file into your local \"/home/reverse_proxy/conf.d\" directory.\n. ",
    "pascalandy": "@fatk I used your compose file and I works! Thank you so much!\nNow I have to fix this. https://github.com/jwilder/nginx-proxy/issues/304#issuecomment-195616673\n. cheers!\n. Alright! I was look at yaml files when I cloned the project. \nCheers!\n. ",
    "hyp530": "First, I simply run the two commands exactly the same with that in the instructions:\nhyp@vultr:~$ docker run -d -p 80:80 -p 443:443 \\\n\n--name nginx \\\n -v /etc/nginx/conf.d \\\n -v /etc/nginx/vhost.d \\\n -v /usr/share/nginx/html \\\n -v /path/to/certs:/etc/nginx/certs:ro \\\n nginx\nUnable to find image 'nginx:latest' locally\nlatest: Pulling from library/nginx\n\nfdd5d7827f33: Already exists\na3ed95caeb02: Pull complete\n716f7a5f3082: Pull complete\n7b10f03a0309: Pull complete\nDigest: sha256:f6a001272d5d324c4c9f3f183e1b69e9e0ff12debeb7a092730d638c33e0de3e\nStatus: Downloaded newer image for nginx:latest\ncbe27695310d474aad23eeee28387f3aaad3ade2a510b21e84934324ed27903f\nhyp@vultr:/path/to$ docker run -d \\\n\n--name nginx-gen \\\n --volumes-from nginx \\\n -v /path/to/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n jwilder/docker-gen \\\n -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\nUnable to find image 'jwilder/docker-gen:latest' locally\nlatest: Pulling from jwilder/docker-gen\n4d690fa98655: Pull complete\na3ed95caeb02: Pull complete\n15845219ea85: Pull complete\nDigest: sha256:48471b4b3317ca38df9e143ab377ec225d4da64a010a63c86c5508314ff831ec\nStatus: Downloaded newer image for jwilder/docker-gen:latest\n4efb0a437bcd2e408b5ec028db2e27c5f97c56e673aa7c9cd5fe1c10c2001e78\n\nSecond, I found Nginx-gen container not running, and I use docker logs to find the error as below\nhyp@vultr:/path/to$ docker logs nginx-gen\n2016/03/16 02:32:27 unable to parse template: read /etc/docker-gen/templates/nginx.tmpl: is a directory\nThird, I found /path/to/nginx.tmpl automatically created, and it's a folder. Then I remove it and replace with a new file of /path/to/nginx.tmpl with content copied from (https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl).\nThen, I restart Docker-gen container again and encounter a new error:\nhyp@vultr:/path/to$ docker start nginx-gen\nError response from daemon: Cannot start container 4efb0a437bcd2e408b5ec028db2e27c5f97c56e673aa7c9cd5fe1c10c2001e78: [9] System error: not a directory\nFourth, I check the logs with the following records:\nhyp@vultr:/path/to$ docker logs 4efb0a437bcd\n2016/03/16 02:32:27 unable to parse template: read /etc/docker-gen/templates/nginx.tmpl: is a directory\nTimestamp: 2016-03-16 02:36:50.210673626 +0000 UTC\nCode: System error\nMessage: not a directory\nFrames:\n0: setupRootfs\nPackage: github.com/opencontainers/runc/libcontainer\nFile: rootfs_linux.go@40\n1: Init\nPackage: github.com/opencontainers/runc/libcontainer.(*linuxStandardInit)\nFile: standard_init_linux.go@57\n2: StartInitialization\nPackage: github.com/opencontainers/runc/libcontainer.(*LinuxFactory)\nFile: factory_linux.go@240\n3: initializer\nPackage: github.com/docker/docker/daemon/execdriver/native\nFile: init.go@35\n4: Init\nPackage: github.com/docker/docker/pkg/reexec\nFile: reexec.go@26\n5: main\nPackage: main\nFile: docker.go@18\n6: main\nPackage: runtime\nFile: proc.go@111\n7: goexit\nPackage: runtime\nFile: asm_amd64.s@1721\nTimestamp: 2016-03-16 02:37:01.470234867 +0000 UTC\nCode: System error\nMessage: not a directory\nFrames:\n0: setupRootfs\nPackage: github.com/opencontainers/runc/libcontainer\nFile: rootfs_linux.go@40\n1: Init\nPackage: github.com/opencontainers/runc/libcontainer.(*linuxStandardInit)\nFile: standard_init_linux.go@57\n2: StartInitialization\nPackage: github.com/opencontainers/runc/libcontainer.(*LinuxFactory)\nFile: factory_linux.go@240\n3: initializer\nPackage: github.com/docker/docker/daemon/execdriver/native\nFile: init.go@35\n4: Init\nPackage: github.com/docker/docker/pkg/reexec\nFile: reexec.go@26\n5: main\nPackage: main\nFile: docker.go@18\n6: main\nPackage: runtime\nFile: proc.go@111\n7: goexit\nPackage: runtime\nFile: asm_amd64.s@1721\n. ",
    "emcniece": "If future folks need some clarity, the exact problem is the voluming of the nginx.tmpl file.\nThis:\n-v /path/to/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n... should be this:\n-v /path/to:/etc/docker-gen/templates. ",
    "LM1LC3N7": "Sorry for the answer's time.\nNginx reverse proxy commands\nsh\n docker run -d \\\n          --restart=always \\\n          -p 80:80 -p 443:443 \\\n          --name 1_nginx-proxy \\\n          --env 'DEFAULT_HOST=www2.mydomain.com' \\\n          --env 'MAX_UPLOAD_SIZE=200M'\\\n          -v /etc/nginx/vhost.d \\\n          -v /usr/share/nginx/html \\\n          -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n          -v /home/reverse_proxy/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro \\\n                  jwilder/nginx-proxy\nNginx companion's command\nsh\n docker run -d \\\n         --restart=always \\\n         --name=2_nginx-companion \\\n         -v /path/to/certs:/etc/nginx/certs:rw \\\n         --volumes-from 1_nginx-proxy \\\n         -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n                 jrcs/letsencrypt-nginx-proxy-companion\nWordpress' command\nsh\n  echo -e \"\\n\\tLancement de Wordpress\\n\"\n  docker run -d \\\n    --name wordpress \\\n    --restart=always \\\n    --link wp-mysql:mysql \\\n    --env 'VIRTUAL_HOST=wordpress.mydomain.com' \\\n    --env 'LETSENCRYPT_HOST=wordpress.mydomain.com' \\\n    --env 'LETSENCRYPT_EMAIL=admin@ydomain.com' \\\n           wordpress\nCozy Cloud's command\nWhen I type wordpress.mydomain.com, It's working. BUT if I type https://wordpress.mydomain.com I'm redirected to the service cozy equivalent to https://cozy.mydomain.com\nsh\n docker run -d \\\n         --restart=always \\\n         --name=cozy \\\n         --env 'VIRTUAL_HOST=cozy.mydomain.com' \\\n         --env 'LETSENCRYPT_HOST=cozy.mydomain.com' \\\n         --env 'LETSENCRYPT_EMAIL=admin@mydomain.com' \\\n         --volume=/home/cozy/couchdb:/var/lib/couchdb \\\n         --env 'DISABLE_SSL=true' \\\n         --env 'DOMAIN=cozy.mydomain.com' \\ # To use only trusted certs from nginx-companion\n                 cozy/full\n. ### my_proxy.conf\nThese line are because I was not able to upload to big files.\nsh\nserver_tokens off; client_max_body_size 200m;\ndefault conf of 1_nginx-proxy\n``` sh\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n  default $http_x_forwarded_proto;\n  ''      $scheme;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  '' close;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                 '\"$http_referer\" \"$http_user_agent\"';\naccess_log off;\nHTTP 1.1 support\nproxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nserver {\n        server_name _; # This is just an invalid value which will never trigger on a real hostname.\n        listen 80;\n        access_log /var/log/nginx/access.log vhost;\n        return 503;\n}\nupstream cozy.mydomain.com {\n                        # cozy\n                        server 172.17.0.2:80;\n}\nserver {\n        server_name cozy.mydomain.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        return 301 https://$host$request_uri;\n}\nserver {\n        server_name cozy.mydomain.com;\n        listen 443 ssl http2 ;\n        access_log /var/log/nginx/access.log vhost;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n        ssl_prefer_server_ciphers on;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_certificate /etc/nginx/certs/cozy.mydomain.com.crt;\n        ssl_certificate_key /etc/nginx/certs/cozy.mydomain.com.key;\n        ssl_dhparam /etc/nginx/certs/cozy.mydomain.com.dhparam.pem;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n        location / {\n                proxy_pass http://cozy.mydomain.com;\n        }\n}\nupstream forum.mydomain.com {\n                        # forum-nodebb_1\n                        server 172.17.0.8:4567;\n}\nserver {\n        server_name forum.mydomain.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        return 301 https://$host$request_uri;\n}\nserver {\n        server_name forum.mydomain.com;\n        listen 443 ssl http2 ;\n        access_log /var/log/nginx/access.log vhost;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n        ssl_prefer_server_ciphers on;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_certificate /etc/nginx/certs/forum.mydomain.com.crt;\n        ssl_certificate_key /etc/nginx/certs/forum.mydomain.com.key;\n        ssl_dhparam /etc/nginx/certs/forum.mydomain.com.dhparam.pem;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n        location / {\n                proxy_pass http://forum.mydomain.com;\n        }\n}\nupstream ghost.mydomain.com {\n                        # ghost\n                        server 172.17.0.12:2368;\n}\nserver {\n        server_name ghost.mydomain.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        location / {\n                proxy_pass http://ghost.mydomain.com;\n        }\n}\nupstream gitlab.mydomain.com {\n                        # GitLab\n                        server 172.17.0.9:80;\n}\nserver {\n        server_name gitlab.mydomain.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        return 301 https://$host$request_uri;\n}\nserver {\n        server_name gitlab.mydomain.com;\n        listen 443 ssl http2 ;\n        access_log /var/log/nginx/access.log vhost;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n        ssl_prefer_server_ciphers on;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_certificate /etc/nginx/certs/gitlab.mydomain.com.crt;\n        ssl_certificate_key /etc/nginx/certs/gitlab.mydomain.com.key;\n        ssl_dhparam /etc/nginx/certs/gitlab.mydomain.com.dhparam.pem;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n        location / {\n                proxy_pass http://gitlab.mydomain.com;\n        }\n}\nupstream wordpress.mydomain.com {\n                        # wordpress\n                        server 172.17.0.11:80;\n}\nserver {\n        server_name wordpress.mydomain.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        location / {\n                proxy_pass http://wordpress.mydomain.com;\n        }\n}\n```\nLogs\nAbout logs, where are they ? How can I find them ?\ndocker exec -it 1_nginx-proxy cat /var/log/??? ?\n. docker logs 2_nginx-companion gives \n``` sh\nDebugging tips: -v improves output verbosity. Help is available under --help.\nCreating/renewal wordpress.mydomain.com certificates... (wordpress.mydomain.com)\n2016-03-16 16:51:27,769:INFO:simp_le:1202: Generating new account key\n2016-03-16 16:51:28,532:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:28,705:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:28,916:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:29,132:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2016-03-16 16:51:29,567:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:29,795:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:30,104:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): wordpress.mydomain.com\n2016-03-16 16:51:30,587:WARNING:simp_le:1292: wordpress.mydomain.com was not successfully self-verified. CA is likely to fail as well!\n2016-03-16 16:51:30,607:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:30,843:INFO:simp_le:1302: Generating new certificate private key\n2016-03-16 16:51:31,243:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-03-16 16:51:31,432:ERROR:simp_le:1260: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/-LGFiHrcMYSJPOLI00fBiL5Q0brDC8FRw5nto9GygS4\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\nSleep for 3600s\n```\n\n\nSo, it would seem that your issue comes from the fact that your wordpress domain doesn't have a certificate, unlike all the other services it's missing a server block for 443/https.\n\nNow, another service (ghost.io) have the same problem. The same problem I think.\n\nAlso, because you miss a default catch server for https (probably because you don't have a default.crt certificate) you're being redirected to the cozy instance as a default.\n\nHow can I have a default.crt ? And how to change default instance ?\n. Based on time, here logs from nginx reverse proxy :\nsh\nnginx.1    | wordpress.mydomain.com 172.17.0.1 - - [16/Mar/2016:16:51:30 +0000] \"POST /wp-cron.php?doing_wp_cron=1458147090.3481519222259521484375 HTTP/1.0\" 200 0 \"-\" \"WordPress/4.4.2; http://wordpress.mydomain.com\"\nnginx.1    | wordpress.mydomain.com 172.17.0.1 - - [16/Mar/2016:16:51:30 +0000] \"GET /.well-known/acme-challenge/YjmhmfjNa3Ghq0wXkef0aStbpl4CX2ci8ECTDiJSkfQ HTTP/1.1\" 404 0 \"-\" \"python-requests/2.8.1\"\nnginx.1    | wordpress.mydomain.com 66.133.109.36 - - [16/Mar/2016:16:51:31 +0000] \"GET /.well-known/acme-challenge/YjmhmfjNa3Ghq0wXkef0aStbpl4CX2ci8ECTDiJSkfQ HTTP/1.1\" 404 0 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\nI have been trying to generate default certs and put them on /path/to/certs, and now it seems that the reverse proxy doesn't work with all https services :-(\nEDIT : I restart nginx-proxy and nginx-companion and it seems to be back ! \n. @>I hadn't seen that you hadn't changed the folder \"/path/to/certs\".\nYou should create a folder, \"/home/reverse_proxy/certs\" and use it instead of /path/to/certs which is an invalid path, it's just an example string.\nYes, I have seen that mistake, but if I change that, I have :\nACME server returned an error: urn:acme:error:rateLimited :: There were too many requests of a given type :: Error creating new cert :: Too many certificates already issued for: mydomain.com\nEDIT : According to the offical website (letsencrypt) the server cannot generate to much certs in 24h for a domain.\nSo I have been done cp -R /path/to/certs /home/reverse_proxy/\n. > It might also help you to start using the 3 containers version of nginx-proxy + docker-gen + companion, which compartmentalises access to docker.sock, making it the more secure standard (Instructions in the README). \ndocker-gen is using for what ?\n\nThere's also docker-compose which might help you put things down more clearly.\n\nAbsolutely, I could be more simple, but I did not know this exist before few days !\n. I have been tried to user docker-gen. But It seems that docker-gen and nginx-companion cannot start.\nAny idea of my problem ?\nCommands\n``` sh\ndocker stop 1_nginx-proxy\ndocker stop 2_nginx-gen\ndocker stop 3_nginx-companion\ndocker rm 1_nginx-proxy\ndocker rm 2_nginx-gen\ndocker rm 3_nginx-companion\ndocker pull  jwilder/nginx-proxy:latest\ndocker pull jwilder/docker-gen:latest\ndocker pull jrcs/letsencrypt-nginx-proxy-companion:latest\ndocker run -d \\\n    --restart=always \\\n    --name 1_nginx-proxy \\\n    -p 80:80 -p 443:443 \\\n    --env 'DEFAULT_HOST=www2.mydomain.com' \\\n    --env 'MAX_UPLOAD_SIZE=200M'\\\n    -v /home/reverse_proxy/conf.d  \\\n    -v /home/reverse_proxy/certs:/etc/nginx/certs:ro \\\n    -v /home/reverse_proxy/vhost.d \\\n    -v /home/reverse_proxy//html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    -v /home/reverse_proxy/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro \\\n        jwilder/nginx-proxy\ndocker run -d \\\n   --restart=always \\\n    --name 2_nginx-gen \\\n    --volumes-from 1_nginx-proxy \\\n    -v /home/reverse_proxy/docker-gen/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n        jwilder/docker-gen \\\n    -notify-sighup nginx -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\ndocker run -d \\\n    --restart=always \\\n    --name=3_nginx-companion \\\n    -v /home/reverse_proxy/certs:/etc/nginx/certs:rw \\\n    --volumes-from 1_nginx-proxy \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    -e \"NGINX_DOCKER_GEN_CONTAINER=2_nginx-gen\" \\\n    -e \"ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory\" \\\n        jrcs/letsencrypt-nginx-proxy-companion\ndocker ps -a\n```\n. @JrCs \n\nif you use the 3 containers you need to use the official nginx image (not the jwilder/nginx-proxy)\n\nIf I do that (what I have been trying), nginx is not a reverse proxy anymore ? Because my subdomains aren't working.\n. Thanks!\nAnother problem before it's fully works.\nsh\n$ docker logs 2_nginx-gen\n2016/03/18 16:22:04 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\nBut here are rights of this existing file :\nsh\n$ ls -al /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl \n-rwxrwxrwx 1 root root 15255 mars  18 11:51 /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl\n. Ok, now I don't understand what is wrong.\nsh\n$ docker logs 2_nginx-gen\n2016/03/18 16:36:19 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:20 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:22 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:23 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:25 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:29 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:36 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\n2016/03/18 16:36:50 unable to parse template: open /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl: no such file or directory\nand my commands : \n``` sh\ndocker stop 1_nginx-proxy\n  2 docker stop 2_nginx-gen\n  3 docker stop 3_nginx-companion\n  4 \n  5 docker rm 1_nginx-proxy\n  6 docker rm 2_nginx-gen\n  7 docker rm 3_nginx-companion\n  8 \n  9 #docker pull  jwilder/nginx-proxy:latest\n 10 docker pull nginx:latest\n 11 docker pull jwilder/docker-gen:latest\n 12 docker pull jrcs/letsencrypt-nginx-proxy-companion:latest\n 13 \n 14 docker run -d \\\n 15   --restart=always \\\n 16   --name 1_nginx-proxy \\\n 17   -p 80:80 -p 443:443 \\\n 18   --env 'DEFAULT_HOST=www2.mydomain.com' \\\n 19   --env 'MAX_UPLOAD_SIZE=200M'\\\n 20   -v /home/reverse_proxy/conf.d  \\\n 21   -v /home/reverse_proxy/certs:/etc/nginx/certs:ro \\\n 22   -v /home/reverse_proxy/vhost.d:/etc/nginx/vhost.d \\\n 23   -v /home/reverse_proxy/html:/usr/share/nginx/html \\\n 24   -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n 25   -v /home/reverse_proxy/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro \\\n 26     nginx:latest\n 27 #    jwilder/nginx-proxy\n 28 \n 29 docker run -d \\\n 30   --restart=always \\\n 31   --name 2_nginx-gen \\\n 32   --volumes-from 1_nginx-proxy \\\n 33   -v /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n 34   -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n 35     jwilder/docker-gen \\\n 36   -notify-sighup 1_nginx-proxy -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\n 37 \n 38 #  -notify-sighup nginx -watch -only-exposed -wait 5s:30s /home/reverse_proxy/docker-gen/nginx.tmpl /home/reverse_proxy/docker-gen/default.conf\n 39 \n 40 docker run -d \\\n 41   --restart=always \\\n 42   --name=3_nginx-companion \\\n 43   --volumes-from 1_nginx-proxy \\\n 44   -v /home/reverse_proxy/certs:/etc/nginx/certs:rw \\                                                                                                                                        \n 45   -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n 46   -e \"NGINX_DOCKER_GEN_CONTAINER=2_nginx-gen\" \\\n 47   -e \"ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory\" \\\n 48     jrcs/letsencrypt-nginx-proxy-companion\n 49 \n 50 docker ps -a\n. Same problem. Very strange.\n. sh\n  docker run -d \\\n    --restart=always \\\n    --name 2_nginx-gen \\\n    --volumes-from 1_nginx-proxy \\\n    -v /home/reverse_proxy/docker-gen/conf/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n      jwilder/docker-gen \\\n    -notify-sighup 1_nginx-proxy -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n```\nsh\n$ docker logs 2_nginx-gen\n2016/03/18 19:28:02 unable to parse template: read /etc/docker-gen/templates/nginx.tmpl: is a directory\n. This time I have been solving this problem.\nBut nginx seems to not working as reverse proxy : forum.mydomain.com doesn't work.\nsh\n$ docker logs 1_nginx-proxy\nThere is no logs in nginx.\n. sh\n$ docker logs 2_nginx-gen\n2016/03/18 19:33:59 Generated '/etc/nginx/conf.d/default.conf' from 7 containers\n2016/03/18 19:33:59 Sending container '1_nginx-proxy' signal '1'\n2016/03/18 19:33:59 Watching docker events\n2016/03/18 19:33:59 Received signal: hangup\n2016/03/18 19:33:59 Generated '/etc/nginx/conf.d/default.conf' from 7 containers\n2016/03/18 19:33:59 Sending container '1_nginx-proxy' signal '1'\n2016/03/18 19:33:59 Received signal: hangup\n2016/03/18 19:34:00 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nsh\n$ docker logs 3_nginx-companion\nSleep for 3600s\n2016/03/18 19:33:59 Generated '/app/letsencrypt_service_data' from 7 containers\n2016/03/18 19:33:59 Running '/app/update_certs'\n2016/03/18 19:33:59 Watching docker events\nReloading nginx proxy (using separate container 2_nginx-gen)...\nCreating/renewal cozy.mydomain.com certificates... (cozy.mydomain.com)\n2016/03/18 19:34:00 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016-03-18 19:34:00,278:INFO:simp_le:1372: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal forum.mydomain.com certificates... (forum.mydomain.com)\n2016-03-18 19:34:00,738:INFO:simp_le:1372: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal gitlab.mydomain.com certificates... (gitlab.mydomain.com)\n2016-03-18 19:34:01,170:INFO:simp_le:1372: Certificates already exist and renewal is not necessary, exiting with status code 1.\nSleep for 3600s\n. ``` sh\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n    default $http_x_forwarded_proto;\n      ''      $scheme;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n    default upgrade;\n      '' close;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                                  '\"$http_referer\" \"$http_user_agent\"';\n                                  access_log off;\nHTTP 1.1 support\n                              proxy_http_version 1.1;\n                              proxy_buffering off;\n                              proxy_set_header Host $http_host;\n                              proxy_set_header Upgrade $http_upgrade;\n                              proxy_set_header Connection $proxy_connection;\n                              proxy_set_header X-Real-IP $remote_addr;\n                              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                              proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\n                              server {\n                                  server_name _; # This is just an invalid value which will never trigger on a real hostname.\n                                    listen 80;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        return 503;\n                              }\n                              server {\n                                  server_name _; # This is just an invalid value which will never trigger on a real hostname.\n                                    listen 443 ssl http2;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        return 503;\n                                          ssl_certificate /etc/nginx/certs/default.crt;\n                                            ssl_certificate_key /etc/nginx/certs/default.key;\n                              }\n                              upstream cozy.mydomain.com {\n                                # cozy\n                                      server 172.17.0.3:80;\n                              }\n                              server {\n                                  server_name cozy.mydomain.com;\n                                    listen 80 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        return 301 https://$host$request_uri;\n                              }\n                              server {\n                                  server_name cozy.mydomain.com;\n                                    listen 443 ssl http2 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n                                          ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n                                            ssl_prefer_server_ciphers on;\n                                              ssl_session_timeout 5m;\n                                                ssl_session_cache shared:SSL:50m;\n                                                  ssl_certificate /etc/nginx/certs/cozy.mydomain.com.crt;\n                                                    ssl_certificate_key /etc/nginx/certs/cozy.mydomain.com.key;\n                                                        ssl_dhparam /etc/nginx/certs/cozy.mydomain.com.dhparam.pem;\n                                                            add_header Strict-Transport-Security \"max-age=31536000\";\n                                                                    include /etc/nginx/vhost.d/default;\n                                                                        location / {\n                                                                              proxy_pass http://cozy.mydomain.com;\n                                                                                                                                                                                }\n                              }\n                              upstream forum.mydomain.com {\n                                # forum-nodebb_1\n                                      server 172.17.0.8:4567;\n                              }\n                              server {\n                                  server_name forum.mydomain.com;\n                                    listen 80 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        return 301 https://$host$request_uri;\n                              }\n                              server {\n                                  server_name forum.mydomain.com;\n                                    listen 443 ssl http2 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n                                          ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n                                            ssl_prefer_server_ciphers on;\n                                              ssl_session_timeout 5m;\n                                                ssl_session_cache shared:SSL:50m;\n                                                  ssl_certificate /etc/nginx/certs/forum.mydomain.com.crt;\n                                                    ssl_certificate_key /etc/nginx/certs/forum.mydomain.com.key;\n                                                        ssl_dhparam /etc/nginx/certs/forum.mydomain.com.dhparam.pem;\n                                                            add_header Strict-Transport-Security \"max-age=31536000\";\n                                                                    include /etc/nginx/vhost.d/default;\n                                                                        location / {\n                                                                              proxy_pass http://forum.mydomain.com;\n                                                                                                                                                                                }\n                              }\n                              upstream gitlab.mydomain.com {\n                                # GitLab\n                                      server 172.17.0.11:80;\n                              }\n                              server {\n                                  server_name gitlab.mydomain.com;\n                                    listen 80 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        return 301 https://$host$request_uri;\n                              }\n                              server {\n                                  server_name gitlab.mydomain.com;\n                                    listen 443 ssl http2 ;\n                                      access_log /var/log/nginx/access.log vhost;\n                                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n                                          ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;\n                                            ssl_prefer_server_ciphers on;\n                                              ssl_session_timeout 5m;\n                                                ssl_session_cache shared:SSL:50m;\n                                                  ssl_certificate /etc/nginx/certs/gitlab.mydomain.com.crt;\n                                                    ssl_certificate_key /etc/nginx/certs/gitlab.mydomain.com.key;\n                                                        ssl_dhparam /etc/nginx/certs/gitlab.mydomain.com.dhparam.pem;\n                                                            add_header Strict-Transport-Security \"max-age=31536000\";\n                                                                    include /etc/nginx/vhost.d/default;\n                                                                        location / {\n                                                                              proxy_pass http://gitlab.mydomain.com;\n\n```\n. I havn't modify nginx.tmpl.\nMy web browser give ERR_CONNECTION_CLOSED\n``` sh\n$ curl -I http://forum.mydomain.com\nHTTP/1.1 403 Forbidden\nServer: nginx\nDate: Fri, 18 Mar 2016 19:54:45 GMT\nContent-Type: text/html\nContent-Length: 162\nConnection: keep-alive\n```\nAND\nsh\ncurl: (7) Failed to connect to forum.mydomain.com port 443: Connexion refused\n. I tried again, no more success.\nI think I will follow your example git repo to check how to do with a new conf.\nAnd keep the actual conf (only 2 containers) as default just in case.\nThank you so much for your help !\n. I just use an existing image that is built by sameersbn on the docker hub!\nOn Thu, Jul 14, 2016 at 2:46 AM, Brandon Bertelsen < notifications@github.com [notifications@github.com] > wrote:\n@flexbrane [https://github.com/flexbrane] Would you be able to post your gitlab docker code. I'm trying to get gitlab to run without much luck, would love to see how your example worked.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub [https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/36#issuecomment-232534928] , or mute the thread [https://github.com/notifications/unsubscribe/ANk4Oq8i-gv5J9T1wl7aVva7jXk-oCiJks5qVZTZgaJpZM4HxPKW] .\n. Oh, sorry, wrong repo. :/\nThat's because I used the exemple in the ReadMe to set up my reverse proxy container & companion.\n. Finaly I find the solution. I added to my gitlab docker-compose file this line :\nsh\nnetwork_mode: bridge\nWhatever is the network_mode name, if you have created a new network. In my case, I use the default network.\n. Sorry, I didn't see this one. Thank you I'll see that.. ",
    "1beb": "@flexbrane Would you be able to post your gitlab docker code. I'm trying to get gitlab to run without much luck, would love to see how your example worked.\n. Same issue here. I have to delete nginx, nginx-gen before a restart (up > down > up). Please let me know if I can help with debuging. I can share my docker-compose files (edited)\n. The answer is yes. \n. I was also able to bypass this issue using @SnowMB solution. Examples here:\nhttps://gist.githubusercontent.com/SnowMB/758bb6c993372111629f4e86c0e1de1a/raw/b1e6d4454ef4af302eca19061bebbd573725d96f/docker-compose.yml\nhttps://gist.githubusercontent.com/SnowMB/87c5360f9bf81925af26c31f6d71410e/raw/fc8784d1cbc8ad56047b10630b68c1830859bf63/nginx.tmpl\n. Can confirm that pulling the newest version and restarting worked for me.\ndocker pull jrcs/docker-letsencrypt-nginx-proxy-companion\n. Samep problem here. I think it's the upstream part of the nginx.tmpl\nupstream mydomain.com {\n           # neopolis_wordpress_1\n           server :80;\n}\nI think it should be like: \nupstream mydomain.com {\n           # neopolis_wordpress_1\n           server SOMEIPADDRESS:80;\n}. Yeah, so I think our problems are similar. I used an older version of the template and it worked out: \ncurl  https://gist.githubusercontent.com/SnowMB/87c5360f9bf81925af26c31f6d71410e/raw/fc8784d1cbc8ad56047b10630b68c1830859bf63/nginx.tmpl > nginx.tmpl\nsudo mv nginx.tmpl /path/to/proxy/templates/nginx.tmpl\ndocker-compose up -d --force-recreate  # don't do this if you having commit/volumized your container\n. @JrCs I wonder if this is something that should be documented in the troubleshooting section of the document. ie - try an older version of the template.. ",
    "sherter": "@JrCs I know that VIRTUAL_HOST is used by the proxy-container and not by the letsencrypt container. But the letsencrypt container also modifies the nginx config. The location /.well-known/ { .. } part is from the letsencrypt container, isn't it?\nSo couldn't the letsencrypt container also create a virtual host on its own, if no VIRTUAL_HOST variable is defined? This would probably require some modifications to nginx.tmpl.\n. @JrCs I understand. It's totally legitimate to keep things simple and compatible with the nginx.tmpl in jwilder/nginx-proxy :+1:\nWould you mind adding a LICENSE file to this project so I can fork it and support my specific use case?\n. Cool, thanks!\n. ",
    "flqw": "By links in the certs directory you mean the crt, key and dhparam?\n. I deleted the files, can i somehow trigger a regeneration of the nginx config manually?\n. Ok i tried a few things and only could get it working if i removed the encryption for all three domains. Seems like if the domain is present in any certificate (as it is a SAN certificate), the proxy automatically rewrites it to https. The thing is I can't create a certificate only containing example.com and www.example.com right now since I hit the Letsencrypt API limit.\n. Is this expected behaviour or could it be changed so the domain is only rewritten to https if a explicit crt and key file is present?\n. Okay i dug around some more and found the real issue. Since I have an example.com certificate present,  the nginx-proxy uses it as a wildcard-certificate and automatically assigns it to the sub.example.com domain. A workaround for this is setting the CERT_NAME environment variable to an empty value, although it requires the sub.example.com domain to be configured on an own container, as it would otherwise also remove the HTTPS from example.com and www.example.com. The issue is also described here: https://github.com/jwilder/nginx-proxy/issues/182 Thanks for the support though!\n. ",
    "chasgames": "@flqw  YOUR THE MAN! been searching this for hours, great workaround.. Thank you so much @1beb ! Spent days trying to work this out after an upgrade broke my SSL .... :(\ncurl  https://gist.githubusercontent.com/SnowMB/87c5360f9bf81925af26c31f6d71410e/raw/fc8784d1cbc8ad56047b10630b68c1830859bf63/nginx.tmpl > nginx.tmpl\ndocker-compose up -d --force-recreate\nfixed it\n. ",
    "mfilej": "Got it, thanks for the response!\n. ",
    "willtho89": "www.willtho.com is already in the first place  and Mail.willtho.com is last. See my folder output, as www.willtho.com folder got generated and mail.willtho.com is just a link \n. Curiously letsencrypt seems to always use domain.com before www.domain.com or other FQDNs. I was used to www.domain.com certs and everything else as SAN. \nAnyhow thank you for this awesome and easy to use image :-) \n. ",
    "julianxhokaxhiu": "What about docker events? Are you listening to the socket? Is it firing the same events also with rkt?\n. ",
    "JHeat": "Hmm - Ok thanks. Can you please edit out the domain name on your post?\n. ",
    "mvdstam": "@falcon15500 @JrCs I think I have pinpointed the problem!\nHaving the exact same issues here, without changed anything in particular to the nginx.tmpl file or anything else; it's all out of the box stuff regarding the nginx-proxy containers and the proxy companion container. However, this issue only seems to arise when adding new hosts after restarting the nginx containers with either docker-compose restart or docker-compose stop && docker-compose start. Restarting the three individual containers one by one is fine. This is all tested on the staging environment of letsencrypt.org.\nEnvironment\n\nHost OS: CoreOS 1010.3.0\nDocker version: 1.10.3\nDocker-compose format used: '2'\n\nReproducing the issue\n\nMake sure the certs directory which stores the certificates is empty to start off with\nSetup and start the three nginx containers (proxy, gen and ssl companion)\nAdd some containers that need to be proxied with SSL, each with it's own SSL certificate being generated. This will succeed, without any problems.\nRestart all of the containers with docker-compose restart\nAdd a new container after the restart. This will result in the HTTP-503 issue described when creating and verifying the new SSL certificate. Each renewal or creation action will result in this issue.\n\nWorkaround\nSimply remove the set of nginx containers using docker-compose stop and docker-compose rm -f. After that, start them again using docker-compose up -d and new certificates are generated without issues. In case of a server malfunction or really needing to restart the containers, running the following command should \"fix\" the SSL generation:\ndocker-compose stop && docker-compose rm -f && docker-compose up -d\nSince all certificates are stored on the docker host, this doesn't really matter much except for the fact that it's kind of a hassle to do.\nCause\nMy guess is that this has something to do with the way containers are linked with other containers, and that restarting all of them at once causes a interruption somehow. As said, the (testing) SSL certificates that are created with errors seem to work fine. Which makes sense, as we're not interested in validated certificates anyway on staging environments.\nHope this gives you enough info to at least know where to look.\nLooks related to https://github.com/jwilder/nginx-proxy/issues/381\n. @JrCs Well, restarting the containers one by one with (or without) docker-compose doesn't cause the problem. It's the full docker-compose stop command that causes some kind of desynchronization issue. \nThe cause of the HTTP-503 itself seems logical, as nginx-proxy creates a default block for the nginx.conf config which handles all unknown URI's and returns them as a HTTP-503. My guess is that the nginx server doesn't correctly pick up the /.well-known/acme-challenge (as done by https://github.com/kuba/simp_le) after a restart. Thoughts?\n. ",
    "maxkueng": "I had the same problem. Then I used the nginx.tmpl from the 0.3.0 tag and the error changed from 503 to 404. The next thing I figured out is that you can't customize the html directory of the nginx container with -v /my/custom/html/dir:/usr/share/nginx/html. It has to be -v /usr/share/nginx/html or you get 404 errors.\nSo now I finally got it work again.\n. @falcon15500: Interesting. After not getting it to work for days, that's the only thing I had to change to make it work. I'm using nginx:latest, jwilder/docker-gen:latest and jrcs/letsencrypt-nginx-proxy-companion:stable.\n$ docker -v\nDocker version 1.11.2, build b9f10c9\n. I had a similar issue but it was not IPv6 related. After many hours of trying to resolve it I came to the following solution:\nLetsEncrypt kept receiving \"503 Service Temporarily Unavailable\" as a response to the acme-challenge and I got the same message in the browser. The trick to resolve this was to remove -only-exposed in the arguments passed to the jwilder/docker-gen container. I don't know why I had this in there as it's not in any recent version of  the REAME. I must have copied it from an old one.\nIt seems that with -only-exposed docker-gen couldn't find the application container and the upstream example.com {} section in the Nginx config was empty.\nAfter resolving this the response to the acme-challenges were now \"403 Forbidden\" errors from Nginx instead. The files in .well-known/acme-challenge were actually present and when I docker exec nginx bash I was able to access and read the files. But somehow Nginx wasn't able to serve them. So I had to change the permissions of the directory mounted to /usr/share/nginx/html from 0750 to 0755 and then Nginx was able to serve the challenge files and the certificates were able to renew.\nI think it's really weird that I had to make the directory readable for \"other\" users as the directory and all files are owned by root:root and docker is running as root, and Nginx inside the container is also running as root. So shouldn't it even work if the permissions were just 0700?\nBut I had the same problem with some static sites that I'm running by just starting an nginx container and mounting. The files are readable from inside the container but Nginx won't serve them.. ",
    "briceburg": "LGTM -- any worry about merging?\n. so as an update -- it seems simp_le + letsencrpyt trigger the dns-01 challenge only if the domain contains uppercase characters. E.g. the VIRTUAL_HOST is set to AAA.qa-1.blueacorn.net (breaks) verses aaa.qa-1.blueacorn.net (works).  I'll see if I can submit simp_le a patch -- although there hasn't been any activity there since April. \n. An alternative approach would be to normalize/lowercase the domain names in this container. @JrCs would you be open to a PR for this? or is this something that you believe should be handled upstream in simp_le? Thanks!\n. @JrCs apologies for the radio delay. I agree it's better to fix in simp_le as well -- esp. considering that nginx-proxy enables SSL based on a case-sensitve search for VIRTUAL_HOST.crt in /etc/nginx/certs -- so if we do lowercase it here, we need to make sure to preserve case when generating .crt  (which I assume is kind of wonky). \n. ",
    "sandrodz": "Hi, sorry it took me a while to play with all possible combinations, hence the belated reply.\nBut I don't seem to understand the logic. Sometimes specific ssl is generated for domain, sometimes same one is used for several domains... I cannot really comprehend the logic behind these.\n\n\n\n. so:\nadjara -> adjara\ncdn -> adjara\ndemos -> adjara\nnjord -> njord\nshop -> shop\nwise -> wise\nboth shop and njord are in the group too, but they have their own certs? \nand is it possible to have main one not adjara but something else instead?\n. I deleted old certs dir and let it recreate. and I see this:\n\nI don't see how it is normal to group unrelated domains. grouping sub-domains make sense, but this is not what I see.\nwhat worries me is this though:\n\ncan I show a diff domain there? Like we are de's as common name, instead of adjara.\n. yeah I got that :) also symbolic links make sense. But why is that domain displayed in ssl overview? common name should be we are.de  not adjara right?\n. we are de is the first in LETSENCRYPT_HOST variable, you can also see that symbolic links point to we are de not adjara. So how come adjara is the main?\n. \n. result is same, could it be alphabetic? \n. hang on 5mins I'll make a video\n. Here you go, contains log messages also.\nhttp://sendvid.com/x1s0eboq\n. its correct \n\n. yes all of them point to weare.de.com dir like on screenshots.\nproblem is common name that certificate displays on all pages, which is adjaragroup.\nthis:\n\nshouldn't it be we are de?\n. So your saying even if I remove adjara, I will get common name next in the alphabetic order that is cdn ?\n. Could this be an issue? https://community.letsencrypt.org/t/common-name-change-after-using-expand-flag/14174\n. after searching and reading everything this seems to be the root issue: https://github.com/certbot/certbot/issues/2798\nso since v 0.5 this bug was introduced in letsencrypt client. 0.6 version includes the fix.\nAt what version is your docker container?\n.  I see, and there is PR that changes things: https://github.com/kuba/simp_le/pull/105\n. btw, my workaround: I added subdomain abc.main.domain to get it to be the common name.\n. I can also confirm, this seems to be working out of box. I'm still waiting to make sure its bulletproof, after few auto renewals.. ",
    "htiz": "Hi,\nSorry for this alert.\nMy symbolic links were out.\nThanks again for your great container !\n. ",
    "funkypenguin": "Think I figured it out, submitted pull request:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/64\nD\n. Ah, thanks for the explanation. I'd managed (during the process of fiddling about) to start my 3 containers out-of-order, which meant that the nginx volume mounts didn't work, thus my problem.\n. ",
    "jboesl": "I think the point is people want to control which version they are using. Just using latest or stable you never know for sure whether your container changes on restarting.\n. ",
    "gimler": "thx this was exactly the problem\n. ",
    "faultylee": "Hi, actually I'm getting the same error as well recently. I found that default.conf is pointing to another non existing .conf. Deleting it before starting again seems to resolve this issue. I've yet to dig deeper.\n. I was seeing the same message yesterday when I was adding a new host, though the cert generated properly. I guess it's non fatal since it's \"INFO\".\n. @SuperITMan  I was struggling with this earlier too, the key is no servers are inside upstream in /etc/nginx/conf.d/default.conf:36. If you open your 'default.conf' you should see empty upstream configuration. If that's the case remove \n-only-exposed from your docker-gen command\n-notify-sighup nginx -watch-only-exposed-wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\nRef: https://github.com/jwilder/nginx-proxy/issues/479\nEDIT Also https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/81\n. @JrCs I think you meant --expose port. Some how with -only-exposed docker-gen didn't pickup those with default EXPOSE from Dockerfile. Anyway I'm not really an expert here but removing -only-exposed resolved my issue I had that day\n. @ryneeverett you're right, my bad. I left out EXPOSE in my Dockerfile. Thanks\n. ",
    "deciare": "The first time the nginx container starts, /etc/nginx/conf.d/default.conf contains default configuration from the nginx image, and starts up successfully.\n/etc/nginx/vhost.d/default is later created by letsencrypt-nginx-proxy-companion, and if that file exists while docker-gen parses the template to regenerate /etc/nginx/conf.d/default.conf, the following line gets added to the newly-generated server block:\ninclude /etc/nginx/vhost.d/default;\nWhen letsencrypt-nginx-proxy-companion stops, /etc/nginx/vhost.d/default is removed, but the previously-generated /etc/nginx/conf.d/default.conf is left in place. The next time the nginx container is started, the include directive still exists, but /etc/nginx/vhost.d/default no longer does, so nginx fails to start.\ndocker-gen does notice when letsencrypt-nginx-proxy-companion is stopped, so it eventually regenerates a /etc/nginx/conf.d/default.conf without the include, but when both letsencrypt-nginx-proxy-companion and docker-gen are stopped in rapid succession, the regeneration doesn't have a chance to take place.\nSince nginx starts fine with no /etc/nginx/conf.d/default.conf at all, and the file will get regenerated anyway within a few seconds of letsencrypt-nginx-proxy-companion stopping (if only that one container is being stopped), might it be helpful to automatically remove /etc/nginx/conf.d/default.conf in addition to /etc/nginx/vhost.d/default when letsencrypt-nginx-proxy-companion is stopped?\n. ",
    "elohmeier": "+1\n. ",
    "mlegenhausen": "+1\n. ",
    "jedwards1211": "@JrCs The fact that the nginx container can start outside of the control of the nginx-gen container seems like asking for errors to me.  I'd much rather see nginx (or some plugin) be able to evaluate a script to generate the config each time it runs, much like a lot of JS tools now use JS files for config instead of JSON.\n. For instance: https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/\n. I did, unless I don't understand how YAML/docker variable substitution works:\n- LETSENCRYPT_HOST=$HOSTNAME,owncloud.$HOSTNAME\n. ",
    "smiklosovic": "@JrCs dont you have any idea or hint what could be wrong, please?\n. Doing as you suggested results into the disability to verify domain.net upon certificate generation.\nOnce I omit domain.net among hosts, all services are handled by certificate issued for github and all are handled by the same certificate even I put the respective domain to verify as the first one in LE HOST env variable - (maybe because the certificate for github is issued as the first one because it was the first container started?)\nI think the win would be if that domain.net verification was ok but I do not see the way how to get it verified because there is that nginx container itself on port 80 which sits under le companion container.\n. it failed to verify gitlab .... am I doing something wrong? are these steps idempotent? do I have to revoke something? \nmy workflow is that I just delete dir with generated certs and start all over again.\n. i have not tried it yet, i can give it a try tomorrow and let you know\n. FYI my issue seems to be fixed\n. i tried the hint of guy called m165437 above\n. i also try this like one month after i had problems, every subdomain seems to be signed properly\n. ",
    "M165437": "\ntry to put domain.net first on the list\n\nLETSENCRYPT_HOST=domain.net,gitlab.domain.net\nI had the same issue. This worked for me.\n. ",
    "b3nk3": "My issue is kind of related. I have managed to have certificate for. one of my subdomains, then it started to redirect all other subdomains and the main domain to an other container... so deleted all cert. re run everything.. problem again. deleted. cert again, and now I think I ran out.\nhow can I check if I have ran out of certificates?\nCan I retrieve the already granted ones? as I have deleted them..\n. @JrCs will do thanks. Where is it located inside the container?\nOther question... what is the best practise to get a domain fully covered with subdomains?\nI was thinking to run a container just for the purpose of getting the certificates as follows:\nVIRTUAL_HOST=mydomain.co.uk\nLETSENCRYPT_HOST=mydomain.co.uk, *.mydomain.co.uk\nWith this setup, I should get the domain and all subdomains covered, including www., right?\nSo how would I provide access to www.subdomain.mydomain.co.uk ?\nSorry for the dumb questions, but I have never worked with certificates before.\n. @JrCs apologies, I understand now.\nSo what do you think is the best practice in covering my existing subdomains?\nlet's say, I want to cover the main domain + www obviously, then blog. and www.blog. domain.\nDo I run a compose file with setting up my main site with all the required domains/subdomains?\nVIRTUAL_HOST=domain.net\nLETSENCRYPT_HOST=domain.net,www.domain.net,blog.domain.net,www.blog.domain.net\nAnd should I ever create a new subdomain with a new separate compose file, just add it in as\nVIRTUAL_HOST=another.domain.net\nLETSENCRYPT_HOST=another.domain.net\nI want to have an understanding of this, so when my rates reset I won't blow them because of inaccuracies\n. @smiklosovic could you post the solution please?\n. ",
    "auchri": "I copied the file from the container to the host and it looks like this:\n```\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n  default $http_x_forwarded_proto;\n  ''      $scheme;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  '' close;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                 '\"$http_referer\" \"$http_user_agent\"';\naccess_log off;\nHTTP 1.1 support\nproxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nserver {\n        server_name _; # This is just an invalid value which will never trigger on a real hostname.\n        listen 80;\n        access_log /var/log/nginx/access.log vhost;\n        return 503;\n}\nupstream pma.example.com {\n                                ## Can be connect with \"bridge\" network\n                        # pma\n                        server 172.17.0.5:80;\n}\nserver {\n        server_name pma.example.com;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        return 301 https://$host$request_uri;\n}\nserver {\n        server_name pma.example.com;\n        listen 443 ssl http2 ;\n        access_log /var/log/nginx/access.log vhost;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:EC$\n        ssl_prefer_server_ciphers on;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_certificate /etc/nginx/certs/pma.example.com.crt;\n        ssl_certificate_key /etc/nginx/certs/pma.example.com.key;\n        ssl_dhparam /etc/nginx/certs/pma.example.com.dhparam.pem;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n        include /etc/nginx/vhost.d/default;\n        location / {\n                proxy_pass http://pma.example.com;\n        }\n}\n```\nThe host which gets the wrong certificate is not even mentioned :flushed: \n. It happens in all browser and even at http://web-sniffer.net/\n. I edited the first comment. The piwik container is not started and still gets the wrong certificate from pma.example.com. After I accept the wrong certificate, I can see the site from pma.example.com at piwik.example.com\n. I stopped and removed all containers and deleted the content of the certs folder. Now I restarted all containers and now it's working.\n. The same issue happened again today.\n. ",
    "TLATER": "Would it be difficult to prevent serving the wrong certificate in this case? It's hard to realize that the container is actually down if you get a certificate error instead of a 404.\nThough granted, when a container is down unnoticed you have other issues...\n. ",
    "JulianKingman": "@auchri did you solve this?. ",
    "guoxiangke": "the same error!. ",
    "psytron": "Same error here. ",
    "etnbrd": "The answer is dead simple : the applications don't need to handle the certificates.\nOnly Nginx handles https traffic, and then reroutes it as plain http traffic to the application.\n. ",
    "joaocc": "Hi JrCs. \nI made the PR sometime ago and I don't really remember why I needed it, since my current setup uses your \"unmodified\" container.\nSo, I am going to close this PR to prevent confusion.\nCheers\n. ",
    "babatundebusari": "@JrCs \n```\nSleep for 3600s\n2016/07/20 01:03:13 Generated '/app/letsencrypt_service_data' from 1 containers\n2016/07/20 01:03:13 Running '/app/update_certs'\n2016/07/20 01:03:13 Watching docker events\nSleep for 3600s\n2016/07/20 01:03:13 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016/07/20 04:00:53 Received event start for container bb6d7fb6a4c4\n2016/07/20 04:01:08 Debounce minTimer fired\n2016/07/20 04:01:08 Generated '/app/letsencrypt_service_data' from 2 containers\n2016/07/20 04:01:08 Running '/app/update_certs'\nReloading nginx proxy...\nQ2016/07/20 04:01:08 Generated '/etc/nginx/conf.d/default.conf' from 2 containers\n;2016/07/20 04:01:08 [notice] 46#46: signal process started\nCreating/renewal babatundebusari.io certificates... (babatundebusari.io www.babatundebusari.io)\n2016-07-20 04:01:09,313:INFO:simp_le:1211: Generating new account key\n2016-07-20 04:01:10,861:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:11,027:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:11,416:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:11,856:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2016-07-20 04:01:12,923:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:13,308:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:13,552:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:13,891:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): babatundebusari.io\n2016-07-20 04:01:14,258:WARNING:simp_le:1303: babatundebusari.io was not successfully self-verified. CA is likely to fail as well!\n2016-07-20 04:01:14,270:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:14,576:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): www.babatundebusari.io\n2016-07-20 04:01:14,956:WARNING:simp_le:1303: www.babatundebusari.io was not successfully self-verified. CA is likely to fail as well!\n2016-07-20 04:01:14,974:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:15,242:INFO:simp_le:1313: Generating new certificate private key\n2016-07-20 04:01:16,053:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:16,243:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-07-20 04:01:16,433:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/ekHtLi_yiddSGxU2NcFtF0LyYgEBdZCt1DGi_dzndC4, https://acme-v01.api.letsencrypt.org/acme/authz/xiEvItxIcZJeqTm4irS9o6BM_WakN9CgpiGFol2T-Gc\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\nSleep for 3600s\n```\nwhen i went inside the nginx-proxy container\n```\nroot@14f5736daf98:/app# ls -lha /etc/nginx/\ntotal 49K\ndrwxr-xr-x  6 root root 4.0K Jul 20 00:50 .\ndrwxr-xr-x 60 root root 4.0K Jul 20 00:50 ..\ndrwxrwxrwx  4 root root  136 Jul 20 04:01 certs\ndrwxr-xr-x  2 root root 4.0K Jul 20 04:01 conf.d\n-rw-r--r--  1 root root 1007 Apr 19 17:27 fastcgi_params\n-rw-r--r--  1 root root 2.8K Apr 19 17:27 koi-utf\n-rw-r--r--  1 root root 2.2K Apr 19 17:27 koi-win\n-rw-r--r--  1 root root 3.9K Apr 19 17:27 mime.types\nlrwxrwxrwx  1 root root   22 Apr 19 17:27 modules -> /usr/lib/nginx/modules\n-rw-r--r--  1 root root  694 Jul 19 20:18 nginx.conf\n-rw-r--r--  1 root root  636 Apr 19 17:27 scgi_params\n-rw-r--r--  1 root root  664 Apr 19 17:27 uwsgi_params\ndrwxr-xr-x  2 root root 4.0K Jul 20 04:01 vhost.d\n-rw-r--r--  1 root root 3.6K Apr 19 17:27 win-utf\nroot@14f5736daf98:/app# ls -lha /etc/nginx/vhost.d/\ntotal 12K\ndrwxr-xr-x 2 root root 4.0K Jul 20 04:01 .\ndrwxr-xr-x 6 root root 4.0K Jul 20 00:50 ..\n-rw-r--r-- 1 root root  233 Jul 20 04:01 default\nroot@14f5736daf98:/app# ls -lha /etc/nginx/certs/\ntotal 5.5K\ndrwxrwxrwx 4 root root  136 Jul 20 04:01 .\ndrwxr-xr-x 6 root root 4.0K Jul 20 00:50 ..\ndrwxr-xr-x 2 root root   68 Jul 20 04:01 babatundebusari.io\n-rw-r--r-- 1 root root  424 Jul 20 03:54 dhparam.pem\nroot@14f5736daf98:/app# cat /etc/nginx/vhost.d/default\nStart of configuration add by letsencrypt container\nlocation /.well-known/acme-challenge/ {\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\nEnd of configuration add by letsencrypt container\nroot@14f5736daf98:/app#\n```\nso why is it not working?\n. @JrCs \nOh i see, well i was using private IP because am just testing\nIs there a way to switch to testing/dev mode for the letsencrypt and your image?\n. ",
    "tymm": "Ouch, thanks :)\n. ",
    "pdemro": "I am seeing a similar issue.  I believe I ran through all the steps correctly.  At the end my site resolves with a 503.  A few things probably worth mentioning\n1.  If stopped, the nginx container will refuse to restart.  I have to start the process over again\n2. /etc/nginx/certs directory has two items, dhparam.pem and a directory for my URL.  The directory is empty, I am assuming this means that it failed to generate certs?\n. ",
    "xar": "i'm sorry for later answer. Here are my logs:\nnginx:\n2016/08/16 19:27:52 [emerg] 1#1: no servers are inside upstream in /etc/nginx/conf.d/default.conf:36\nnginx: [emerg] no servers are inside upstream in /etc/nginx/conf.d/default.conf:36\n2016/08/16 19:32:06 [emerg] 1#1: no servers are inside upstream in /etc/nginx/conf.d/default.conf:36\nnginx: [emerg] no servers are inside upstream in /etc/nginx/conf.d/default.conf:36\ndocker-gen\n2016/08/16 19:19:03 Generated '/etc/nginx/conf.d/default.conf' from 17 containers\n2016/08/16 19:19:03 Sending container 'nginx' signal '1'\n2016/08/16 19:19:03 Error sending signal to container: API error (500): Cannot kill container nginx: Container 841adc3170366128438386fdd6793b4cf94e487a88966f2a1684a61e55f1e10f is not running\n2016/08/16 19:19:03 Watching docker events\n2016/08/16 19:19:03 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2016/08/16 19:20:33 Received event start for container 5e96b30035d7\n2016/08/16 19:20:38 Debounce minTimer fired\n2016/08/16 19:20:38 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2016/08/16 19:27:49 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:27:49 Received event stop for container 24d7b6c5ca1b\n2016/08/16 19:27:52 Received event start for container 24d7b6c5ca1b\n2016/08/16 19:27:52 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:27:57 Debounce minTimer fired\n2016/08/16 19:27:58 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2016/08/16 19:32:06 Received event start for container 24d7b6c5ca1b\n2016/08/16 19:32:06 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:32:11 Debounce minTimer fired\n2016/08/16 19:32:11 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nletsencrypt:\nCreating Diffie-Hellman group (can take several minutes...)\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\n....\n.....\n.....\n2016/08/16 19:24:51 Generated '/app/letsencrypt_service_data' from 17 containers\n2016/08/16 19:24:51 Running '/app/update_certs'\n2016/08/16 19:24:51 Watching docker events\nSleep for 3600s\n2016/08/16 19:24:51 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016/08/16 19:27:49 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:27:49 Received event stop for container 24d7b6c5ca1b\n2016/08/16 19:27:52 Received event start for container 24d7b6c5ca1b\n2016/08/16 19:27:52 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:28:07 Debounce minTimer fired\n2016/08/16 19:28:08 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016/08/16 19:32:06 Received event start for container 24d7b6c5ca1b\n2016/08/16 19:32:06 Received event die for container 24d7b6c5ca1b\n2016/08/16 19:32:21 Debounce minTimer fired\n2016/08/16 19:32:21 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n. ",
    "ryneeverett": "It looks like you didn't start the nginx container first and therefore docker-gen and letsencrypt are mounting volumes from an old (stopped) nginx container.\n. I've never had any trouble with the separate container method and the\nlatest nginx-proxy release (0.4.0). Are yall using the template on master?\nOn Tue, Oct 11, 2016 at 11:45 AM, Bryce Jacobs notifications@github.com\nwrote:\n\n@SnowMB https://github.com/SnowMB You're right, it is stemming from the\nchanges in the nginx.tmpl. With the old files, the upstream ip addresses\nare resolved.\nDid you open an issue on jwilder/nginx-proxy?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/88#issuecomment-252957005,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADINmJAI5OXQU0JCfyBjWg5oxHkugec6ks5qy67-gaJpZM4JWczy\n.\n. I've started seeing this on new instances as well. Edit: I messed up the volumes so /etc/nginx/vhost.d/default wasn't available. Can't reproduce.\n. @SuperITMan There are several things that could go wrong to produce that output. Could you show us the nginx configuration generated? docker exec -it nginx cat /etc/nginx/conf.d/default.conf\n. > Some how with -only-exposed docker-gen didn't pickup those with default EXPOSE from Dockerfile.\n\nI expose ports with EXPOSE and have not had this problem.\n. Why would you expect it to be honored?\n. I'm not familiar with that convention but that doesn't mean it doesn't exist. I doubt it will be implemented here though because it doesn't seem to be implemented in the nginx-proxy or nginx images which are, in a sense, \"upstream\".\nFurthermore, storing localized times strikes me as almost never a good idea. Best to store everything in utc and localize it in the representation layer -- in this case presumably a log aggregator.\n. It doesn't look like the letsencrypt companion is involved in your issue.\n. > I made some docker composes and they completely worked with nginx-proxy (port:80).\n\nSo, as the next step, I try to use SSL with Let's encrypt and use docker-letsencrypt-nginx-proxy-companion.\n\nPardon if you know this already, but it isn't clear from your post if you realize that this companion requires nginx-proxy and doesn't include or replace it. Therefore it doesn't make sense to show us a compose file where wordpress is listening on ports 80, 443, etc. You still need nginx-proxy.\n. > I noticed that it is trying to validate the example.com domain, but I don't know why; I don't have any example.com domain configured in any of my app containers.\nI remember seeing this and being confused as well. I'm pretty sure the error message is giving you a hardcoded example of the url it needs to access (and totally failing to make that clear).\n. Does your custom image work without nginx/letsencrypt? Also, from the logs it looks like your meteor container was restarted numerous times. Did you do that manually?\n. > But that raises a question: The instructions said you should only EXPOSE the port, not map to the host. Also, can it be ANY port, and the proxy container picks that up, or does it have to be a specific port.\nIf you only expose one I think nginx-proxy figures it out automagically. And yeah, you don't need to map it to the host because nginx is serving as the proxy for ports 80 and 443 on your host.\n\nEach time it removes them, re-pulls them, and then re-runs them. I believe this would cause the docker logs to be restarted each time?\n\nYes.\n. I don't think we could figure out what's going on without seeing the generated nginx configuration. You can grab it with docker exec -it <nginx-container> cat /etc/nginx/conf.d/default.conf.\n. > Shouldn't the proxy_pass be pointing to port 3000?\nNo, it's passing to the upstream xxx.yyy.com which should have server <app-container-ip>:3000; in it.\n. No, that should be enough. Not sure what the issue is.\nOn Sun, Sep 25, 2016 at 10:32 PM, Michael Bauer notifications@github.com\nwrote:\n\nThe only thing I do in my app container is EXPOSE 3000. Do I need to do\nsomething else, like publish them with -P?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/111#issuecomment-249466683,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADINmFJ5-N0M0YzefGD4c6L1rYAW7l0Zks5qty67gaJpZM4KEIbs\n.\n. > Shouldn't the .conf be configured to no proxy request to /.well-known/* ?\n\nThe letsencrypt companion should add a server block intercepting those in /etc/nginx/vhost.d/default.\n. Sounds like it's time to check the letsencrypt companion logs. I don't know how long it may take for letsencrypt to validate the certs the first time.\nThe order you're starting in is fine. The important part is that nginx is started first before docker-gen or letsencrypt so they can mount it's volumes.\n. The 503's to the acme-challenge don't make sense. Anything in the letsencrypt logs?\n. You might try docker kill --signal=HUP <nginx-container>. I think the letsencrypt companion ought to be doing that after appending to /etc/nginx/vhost.d/default so that nginx re-reads its configurations, but I think I've seen it fail to do so before.\n. It doesn't kill the process, it just tells it to reload.\n. It doesn't restart the container, it just sends the signal to the container and the application knows to reload in response to the signal. SIGHUP's are kind of odd. Every application responds to them however it sees fit.\nAfter doing that, you might try curling well-known, etc. again and see if you still get a 503.\n. I'm not really sure why, but you need to pass a valid host. So add the curl flag -H \"Host: mydomain.com\"\n. https://github.com/jwilder/nginx-proxy#how-ssl-support-works\n. > Why do I want to map my local directory (which doesn't exist) to this docker image?\nThe idea is that you probably want your certificates to be persistent beyond the lifespan of your container. The way the README suggests doing this is to mount a directory on the host, which indeed needs to exist already. To me it seems fairly obvious that /path/to/certs could be any path of your choosing, but perhaps that should be made explicit. Another way would be to mount a named volume.. Dupe of #127, though that one was arguably never resolved.. ",
    "brycejacobs": "This same problem is happening to me, after following your example off the README.\nMight be worth mentioning somewhere.\n. @SnowMB You're right, it is stemming from the changes in the nginx.tmpl. With the old files, the upstream ip addresses are resolved.\nDid you open an issue on jwilder/nginx-proxy?\n. ",
    "SnowMB": "Hey,\nare you using the seperated container method? The link of the nginx.tmpl file belongs to the jwilder/nginx-proxy container and wont work with seperate containers (at least it didn't for me).\nSince the readme was written there where several changes made to the template file. You could use this older version which will work.\n. @ryneeverett yeah i did. \nI played around with the template file and found the lines, that give the problems. (see #107)\nBut indeed it seems to be a problem of the docker-gen container and has nothing to do with the letsencrypt companion.\nThere is already an open issue on the docker-gen container https://github.com/jwilder/docker-gen/issues/196.\nIt links to https://github.com/jwilder/nginx-proxy/issues/479 and there is suggsted fix I can't try out right now.\n\n@NoahO and remove -only-exposed for nginx-gen\n\nCan someone try this?\nEdit: I just double checked the readme for seperated containers in https://github.com/jwilder/nginx-proxy:\n$ docker run --volumes-from nginx \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    -v $(pwd):/etc/docker-gen/templates \\\n    -t jwilder/docker-gen -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\nThe code in the readme here: \nbash\ndocker run -d \\\n    --name nginx-gen \\\n    --volumes-from nginx \\\n    -v /path/to/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    jwilder/docker-gen \\\n    -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n. Just tried it out, doesn't work for me either :disappointed: \n. Ok, I take that back. \nIt actually helps! I've just made another mistake that did result in the same error. :smile:.\nSo what I did is the following. I used docker-compose v2 and the example you linked in your readme. https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples\nThere is one mistake that shows the same empty upstream block. The docker-gen container MUST be added to the proxy-tier network.\nBut if I just add the container to the network, it still shows an empty upstream. But removing -only-exposed now makes the difference! I don't really know whats going on behind the scenes but it works for me.\nCorrect docker-gen block:\n``` yaml\nversion: '2'\nservices:\n  nginx:\n    image: nginx\n    container_name: nginx\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - ./proxy/conf.d:/etc/nginx/conf.d\n      - ./proxy/vhost.d:/etc/nginx/vhost.d\n      - ./proxy/html:/usr/share/nginx/html\n      - ./proxy/certs:/etc/nginx/certs:ro\n    networks:\n      - proxy-tier\nnginx-gen:\n    image: jwilder/docker-gen\n    container_name: nginx-gen\n    volumes_from:\n      - nginx\n    volumes:\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\nentrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/def$\nentrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\nnetworks:\n  - proxy-tier\n\nletsencrypt-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt-companion\n    volumes_from:\n      - nginx\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./proxy/certs:/etc/nginx/certs:rw\n    environment:\n      - LETSENCRYPT_TEST=TRUE\n      - NGINX_DOCKER_GEN_CONTAINER=docker-gen\n...\n...\n...\nnetworks:\n  proxy-tier:\n    external:\n      name: nginx-proxy\n```\nI also don't know what -wait 5s:30s is for. It works with and without.\nHope it helps anyone\n. Yeah sure ;).\nA few additional Infos:\n- I tried using the \"recommended\" setup with nginx and docker-gen in two seperate containers. \n- I defined no external network since all relevant containers are in the same docker-file\n- I user docker-compose version 2\nI made some changes to the template file and found out that these lines return no values. This leaves me with and empty upstream block in the config.\nIn the older file these lines are not present.\n. Hey,\nI think the template file in the docker-gen repo is a little outdated. Anyway I found a fix for the problem. See https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/88.\n. It's simple. Don't expose the wekan port on the host (it's what the reverse proxy ist for).\nLeave out these lines from the setup example:\n\nports:\n    - 8081:80\n\nInstead you want to add the following environment variables to the Wekan container:\n- VIRTUAL_HOST = domain\n- VIRTUAL_PORT = 8081\n- LETSENCRYPT_HOST = domain\n- LETSENCRYPT_EMAIL = your email that shows up in the certificate\n. ",
    "krivochenko": "Hi! I'm not sure that problem in docker-letsencrypt-nginx-proxy-companion, but I googled this issue so decided to write here.  \nI have a docker-compose.yml:\n```\nversion: '2'\nservices:\n    nginx:\n        image: nginx\n        container_name: nginx\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n        volumes:\n            - /var/www/proxy/conf.d:/etc/nginx/conf.d\n            - /var/www/proxy/vhost.d:/etc/nginx/vhost.d\n            - /var/www/proxy/html:/usr/share/nginx/html\n            - /var/www/proxy/certs:/etc/nginx/certs:ro\n        networks:\n            - portainer_default\nnginx-gen:\n    image: jwilder/docker-gen\n    container_name: nginx-gen\n    volumes:\n        - /var/www/proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n        - /var/run/docker.sock:/tmp/docker.sock:ro\n    volumes_from:\n      - nginx            \n    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    networks:\n        - portainer_default\n\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-letsencrypt\n    environment:\n        - NGINX_DOCKER_GEN_CONTAINER=nginx-gen\n    volumes:  \n        - /var/www/proxy/certs:/etc/nginx/certs:rw\n        - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n      - nginx\n    networks:\n        - portainer_default\n\nnetworks:\n    portainer_default:\n        external: true \nI use https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl as template. Also I have another one docker-compose.yml:\nversion: '2'\nservices:\n    portainer:\n        image: portainer/portainer\n        container_name: portainer\n        volumes: \n            - /var/run/docker.sock:/var/run/docker.sock\n        environment:\n            - VIRTUAL_HOST=portainer.my-domain.com\n            - VIRTUAL_PORT=9000\n            - LETSENCRYPT_HOST=portainer.my-domain.com\n            - LETSENCRYPT_EMAIL=cert@my-domain.com\n```\nAs a result I have next generated config:\n```\nportainer.my-domain.com\nupstream portainer.my-domain.com {\n}\nserver {\n    server_name portainer.my-domain.com;\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    include /etc/nginx/vhost.d/portainer.my-domain.com;\n    location / {\n        proxy_pass http://portainer.my-domain.com;\n                include /etc/nginx/vhost.d/portainer.my-domain.com_location;\n    }\n}\n```\nOf cource it calls error: \"no servers are inside upstream\".\nWhich additional information I can give you?\nThanks for help!. Thaknks!. ",
    "thomasleveil": "don't use -only-exposed. TL;DR; in it's current state the jwilder/nginx-proxy template is not meant to be working with docker-gen and nginx being on separated containers.\n@JrCs since commit jwilder/nginx-proxy@658e20f661 the template in the jwilder/nginx-proxy projet makes the assumption that the container running docker-gen is the container running nginx while checking that upstream containers are reachable. \nSince your docker-gen container does not expose any port, it's information won't be part of the data provided to the docker-gen process to fill up the template. As a result the upstream block is empty since the template is not able to check if the docker-gen container is on the same network as the upstream containers. (And that would make no sense anyway)\nRemoving the -only-exposed is a workaround. IMHO the best solution for your project is to provide and maintain your own template.\n. > Is it not possible to update the template do work in the 2 cases (one or two nginx-proxy/docker-gen containers) ?\nMaybe, probably but that would require some thinking and work (maybe with a new environment variable NGINXPROXY_CONTAINER?)\n\nIf not, why the nginx-proxy project do not support 2 versions of the template (it is said, in the readme, that the containers can be separated containers) ?\n\nI don't know, that's a question for the maintainer of the project. But I doubt this would be feasible since it would mean more maintenance work and if you look at the number of opened issues and PR you can guess the maintainer is lacking the time. \nBy the way, lot's of issues are coming from users of letsencrypt-nginx-proxy-companion, if you would just merge this PR, it would help preventing more flowing in.. jwilder/nginx-proxy#750 should provide the fix. try again after removing space characters:\nLETSENCRYPT_HOST: stage.nodeart.io,client.2canoes.stage.nodeart.io.\n",
    "jrbenito": "Hi,\nI am facing the same issue while running on AWS ECS cluster with ecs-cli compose. I tried all network modes available (bridge, host and awsvpc) and problem remains the same, no server in upstream.\nI am running the companion image with jwilder/nginx-proxy because limitations on AWS container names but tried to run docker-gen separated but config file ended up without upstream server too.\nAny idea?\nThanks. ",
    "yamalight": "@JrCs here's a few snippets, but as I said - the proxy-companion is broken at the moment since it needs --volumes-from to be used.\nRunning the following commands requires docker 1.12 and inited swarm mode.\n1) Create overlay network for all services to share:\ndocker network create --driver overlay nginx-network\n2) Create shared volumes for html and vhost.d folders:\ndocker volume create --name nginx-vhost\ndocker volume create --name nginx-html\n3) Start jwilder/nginx-proxy as a service:\ndocker service create \\\n    --name nginx-proxy \\\n    --network nginx-network \\\n    -p 80:80 -p 443:443 \\\n    --mount type=bind,source=`pwd`/nginx/htpasswd,target=/etc/nginx/htpasswd \\\n    --mount type=bind,source=`pwd`/nginx/certs,target=/etc/nginx/certs,readonly \\\n    --mount type=volume,source=nginx-vhost,target=/etc/nginx/vhost.d \\\n    --mount type=volume,source=nginx-html,target=/usr/share/nginx/html \\\n    --mount type=bind,source=/var/run/docker.sock,target=/tmp/docker.sock,readonly \\\n    jwilder/nginx-proxy\n4) Start jrcs/letsencrypt-nginx-proxy-companion as a service:\ndocker service create \\\n    --name nginx-letsencrypt \\\n    --network nginx-network \\\n    -e NGINX_PROXY_CONTAINER=7604ff51fff5 \\\n    --mount type=bind,source=`pwd`/nginx/certs,target=/etc/nginx/certs \\\n    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock,readonly \\\n    --mount type=bind,source=`pwd`/nginx/htpasswd,target=/etc/nginx/htpasswd \\\n    --mount type=volume,source=nginx-vhost,target=/etc/nginx/vhost.d \\\n    --mount type=volume,source=nginx-html,target=/usr/share/nginx/html \\\n    jrcs/letsencrypt-nginx-proxy-companion\nNote env variable NGINX_PROXY_CONTAINER=7604ff51fff5 - when not providing it, the container will try to search for other containers using --volumes-from and fail. If you provide that - it works. But considering nature of docker services and that they can die/be restarted/update/etc, it'd be best to find a different way to get that container ID.\nAnd that's the main problem here.\n5) Start nginx as a service:\ndocker service create \\\n        --network nginx-network \\\n        --name nginx-test \\\n        -e VIRTUAL_HOST=test.dev \\\n        -e LETSENCRYPT_HOST=test.dev \\\n        -e LETSENCRYPT_EMAIL=test@test.dev \\\n        nginx\n. @JrCs we have a use case where we have a front-facing web server that needs to be exposed outside (via nginx-proxy/letsencrypt companion), but communicates with a number of microservices that can be scaled using docker. \nAfter initial evaluation of that approach, I figured that starting all of the containers using services:\n1) allows to use swarm for auto-balancing running containers across nodes\n2) gives a uniform way to work with them\nI might be mistaken, so would love to hear a better/simpler approach if you have one in mind :smile: \n. @JrCs that looks exactly like what we need. thank you!\nI guess this issue can be closed then.\n. ",
    "roffe": "Found this page when looking around for alternativs to Traefik as all test in Swarm Mode has given horrible performance with it :(. ",
    "thomastweets": "As a workaround: https://hub.docker.com/r/thomastweets/docker-letsencrypt-nginx-proxy-companion/ (see also https://github.com/kuba/simp_le/issues/114)\n. ",
    "LeoFidjeland": "@thomastweets works perfectly thanks a million!!\n. ",
    "dotellie": "Am I the only one who's still getting this?\n. After countless of seemingly hopeless attempts to get this working, it somehow fixed itself after a (second) reboot of the host and all the containers.\n. While this is slightly off-topic, is @JrCs even active on this project anymore? If not, wouldn't it be better just to fork this repo and move to that permanently?. ",
    "peXed": "Hello!\nIs the problem back again? Will the issue come always after an TOS change?\nI get the error:\nTOS hash mismatch. Found: 6373439b9f29d67a5cd4d18cbc7f264809342dbf21cb2ba2fc7588df987a6221.\nThis is with a fresh image.\n. ",
    "paolomainardi": "Same problem here.\n. ",
    "fradeve": "I'm using image: 'jrcs/letsencrypt-nginx-proxy-companion:latest' and I still get this.. That fixed it! Amazing, thanks :). ",
    "mlaitinen": "Same here. @fradeve I got this working by setting an environment variable ACME_TOS_HASH to value cc88d8d9517f490191401e7b54e9ffd12a2b9082ec7a1d4cec6101f9f1647e7b. Don't know if this is a kosher solution.. @Dabada why did you close this issue? Even if it works in alastaircoote/docker-letsencrypt-nginx-proxy-companion it doesn't mean that it works in the JrCs version (=this repository). IMO this is still an issue with jrcs.. See #130 . ",
    "rgruesbeck": "Same here.. ",
    "bfayers": "@mlaitinen Where am i supposed to set this envvar?\n. I got it :)\n. Also:\n\n. To further this I've reinstalled docker (fully purged docker) and tried again. same issue.. Resolved my issue, port 80 was not forwarded correctly (dd-wrt glitch). ",
    "krystalcode": "Where can we be getting the latest hash? It seems to have changed again ...\nTOS hash mismatch. Found: cc88d8d9517f490191401e7b54e9ffd12a2b9082ec7a1d4cec6101f9f1647e7b.. Getting the same error, while unboundtest.com returns NOERROR. Only difference compared to the response above is that it returns ANSWER: 0 and there is no ANSWER SECTION.. In my same there something irrelevant that was bringing down the proxy's nginx container so Let's Encrypt couldn't contact the service and therefore wouldn't issue the certs.. ",
    "xandermar": "I can confirm that using the latest version (as of 2 DEC 2017) solves the TOS issue. I stopped/deleted my Letsencrypt container and image. I ran 'docker-compose up -d' pulling the latest image and the problem went away.. @ddhhz thanks but as of today (2 Dec 17), hardcoding the *7e7b hash didn't work for me. @JohanBillman @ddhhz - thank you! Used the latest and my issues were resolved.. ",
    "herejia": "As of e47e065463db I just ran docker rm my-container-name and docker pull jrcs/letsencrypt-nginx-proxy-companion and everything went fine. ",
    "pattonwebz": "I am unsure how long this has been a problem in my setup but I ran into it today adding a new container.\nGetting latest image as of today fixes it for me.\ndocker pull jrcs/letsencrypt-nginx-proxy-companion then restart the service.. ",
    "dblock": "dokku plugin:update letsencrypt is probably the better first thing to try, no? With 0.8.8 I got past that error but hit https://github.com/dokku/dokku-letsencrypt/issues/149.. ",
    "alexanderkjeldaas": "/usr/bin/simp_le -f account_key.json -f key.pem -f fullchain.pem -f cert.pem --tos_sha256 6373439b9f29d67a5cd4d18cbc7f264809342dbf21cb2ba2fc7588df987a6221 -d --email '' --server=https://acme-v01.api.letsencrypt.org/directory --default_root /usr/share/nginx/html/ is the command that is triggering this.\n. And this is caused by it thinking that there are two containers:\n++ LETSENCRYPT_CONTAINERS=('b949687adea6' 'a89e7f40b98f')\n++ LETSENCRYPT_b949687adea6_HOST=('')\n++ LETSENCRYPT_b949687adea6_EMAIL=\n++ LETSENCRYPT_b949687adea6_TEST='<no value>'\n++ LETSENCRYPT_a89e7f40b98f_HOST=('mydomain.me')\n++ LETSENCRYPT_a89e7f40b98f_EMAIL=me@mydomain.com\n++ LETSENCRYPT_a89e7f40b98f_TEST='<no value>'\n. ",
    "mattbsea": "Sorry, thought this was an issue because docker coudln't log into the registry, but now it seems to be working.  Sorry!\n. ",
    "SuperITMan": "Hello,\nI don't understand why the subject is closed. Am I alone to have this issue ?\nThanks for your time.\n. ",
    "stefanfritsch": "I have the same issue,\n1. If I use the provided example with tutum/apache-php it works, but only without -only-exposed.\n2. If I try it with a different server even that doesn't work.\nI expose the port (8787) in the Dockerfile, I have an expose in the docker-compose.yml but with -only-exposed nothing happens. Without it the server appears in upstream but marked as \"down\".\nHere's the dockerfile:\n```\nFROM rocker/hadleyverse\nMAINTAINER Stefan Fritsch fritsch@stat-up.com\nRUN apt-get update \\\n        && apt-get -y install nginx-light nano procps jags r-cran-rjags \\\n        && apt-get clean\nRUN echo \"fr_FR.UTF-8 UTF-8\" >> /etc/locale.gen \\\n        && echo \"de_DE.UTF-8 UTF-8\" >> /etc/locale.gen \\\n        && locale-gen\nRUN update-locale\nEXPOSE 8787\nWORKDIR /\nCMD [\"/init\"]\n```\nand here the docker-compose.yml (nginx&co. run on the same network, and as mentioned apache-php works)\nversion: '2'\nnetworks:\n  default:\n    external:\n      name: external\nservices:\n  rstudio-server:\n    build: .\n    image: stefanfritsch/rstudio_statup:3.3.2\n    restart: unless-stopped\n    mem_limit: 60000m\n    container_name: rstudio-server\n    environment:\n    - VIRTUAL_HOST=rstudio.stat-up.com\n    - LETSENCRYPT_HOST=rstudio.stat-up.com\n    - LETSENCRYPT_EMAIL=it@stat-up.com\n    expose:\n    - \"8787\"\n. ",
    "zarbis": "This behavior is controlled by HTTPS_METHOD variable in docker-gen, sorry for improper RTFM.\n. ",
    "marcofranssen": "Thanks for the nice answer! I missed that link in the README.\n. ",
    "denji": "After migrating to Tr\u00e6f\u026ak no more problems with proxying and letsencrypt. It's completely transparent and accessible, although the configuration file (traefik.toml) and the database file letsencrypt certificates in (acme.json).. ",
    "yannisc": "It works like this on other images, so I thought this is kind of standard. If not, excuse me for asking.\n. That makes sense. Thank you for your response.\n. ",
    "tinsjourney": "If your host is configured to the good time zone you can just mount /etc/localtime in your container, using \"-v /etc/localtime:/etc/localtime:ro\" \n. ",
    "danbo": "So I don't need to run proxies containers as https and I don't need to give them the letsencrypt certs?\n. I ran into the same issue. I started here, so initially assumed the issue was with the companion.\nhttps://github.com/jwilder/docker-gen/issues/196\n. ",
    "niieani": "Actually, a simpler solution came to my mind. Have a designated, single container on a single server for certificate renewal, set by an ENV variable set to let proxy-companion know that. Other servers would only need to reload their nginx config in case the certificates are renewed.\n. Yeah (you mean only start one proxy-companion, right?). Can we maybe add an ENV like RELOAD_ONLY which, when set, would run the companion, but instead of running renewals, only watch for changing certs and reloading the nginx-proxy?\n. Actually, I'm coming from traefik, hoping this help me, as it has the exact same issue: https://github.com/containous/traefik/issues/348. I'll probably have to come up with my own solution in the end. \n. ",
    "cusspvz": "In fact, it mounts. The issue is that this makes use of multi mounting in case you wan't to scale.\n@nwallace Please do this change:\n```diff\nletsencrypt:\n  image: jrcs/letsencrypt-nginx-proxy-companion\n  restart: always\n  volumes_from:\n-    - nginx\n+    - container:servicename_nginx_1\n  volumes:\n    - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n    - \"./volumes/etc/nginx/certs:/etc/nginx/certs:rw\"\n```. Inspite, IMO it should also be supported by exposing it over an ENV VAR.. ",
    "siwa-pparzer": "had the same problem -> removed container and built again. ",
    "qwertzui11": "I had the same issue. For me the problem was that docker-compose sometimes startet the nginx container AFTER the letsencrypt companion. I solved with depends:\n```yml\nversion: '3.5'\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - html:/usr/share/nginx/html\n      - dhparam:/etc/nginx/dhparam\n      - vhost:/etc/nginx/vhost.d\n      - certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\"\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-proxy-lets-encrypt\n    depends_on:\n      - \"nginx-proxy\"\n    volumes:\n      - certs:/etc/nginx/certs:rw\n      - vhost:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - /var/run/docker.sock:/var/run/docker.sock:ro\nvolumes:\n  certs:\n  html:\n  vhost:\n  dhparam:\n```. ",
    "occar421": "I defined WORDPRESS_DB_USER=wordpress in environment of wordpress container, then docker-compose down and up. But it's still not working and docker logs blog-wordpress showing same error... :mask: \nOfficial Quickstart works without WORDPRESS_DB_USER env.\n. The nginx-proxy container is running and works well on other web page containers from nginx image.\nBy the way, this is the docker-compose.yml form nginx-proxy and proxy-companion.\n``` yml\nsudo mkdir /opt/masuqat -p\ncurl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl | sudo tee /opt/masuqat/nginx.tmpl\n\npath to certs -> /opt/masuqat/certs\npath to nginx.tmpl -> /opt/masuqat/nginx.tmpl\nversion: '2'\nservices:\n  proxy:\n    container_name: proxy\n    image: jwilder/nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /opt/masuqat/certs:/etc/nginx/certs:ro\n      - /etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    restart: always\n    networks:\n      - net\ncert:\n    container_name: proxy_cert\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /opt/masuqat/certs:/etc/nginx/certs:rw\n    volumes_from:\n      - proxy \n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=proxy_gen\nnetworks:\n  net:\n```\nand the piece of the docker-compose.yml for other wep page containers, which run well.\n``` yml\nversion: '2'\nservices:\n  primary:\n    image: nginx\n    container_name: primary\n    environment:\n      - VIRTUAL_HOST=example.net\n      - VIRTUAL_NETWORK=base_net\n      - VIRTUAL_PORT=80\n      - LETSENCRYPT_HOST=example.net\n      - LETSENCRYPT_EMAIL=example@gmail.com\n    restart: always\n    ports:\n      - \"80\"\n      - \"443\"\n    networks:\n      - base_net\nsecondary:\n    image: nginx\n    container_name: secondary\n    environment:\n      - VIRTUAL_HOST=second.example.net\n      - VIRTUAL_NETWORK=base_net\n      - VIRTUAL_PORT=80\n      - LETSENCRYPT_HOST=second.example.net\n      - LETSENCRYPT_EMAIL=example@gmail.com\n    restart: always\n    ports:\n      - \"80\"\n      - \"443\"\n    networks:\n      - base_net\nand more...\n```\n. I fixed to NGINX_DOCKER_GEN_CONTAINER=proxy and run, then removed NGINX_DOCKER_GEN_CONTAINER and run, but caused nothing, to be sure.\n. Not yet. \nThis problem caused on my hobby project and I decided to setup WordPress without Docker temporarily.\nAnd I've been working hard on my task from school, ever since I laid aside this issue.\nI think it's okay to close this issue if no one got the same problem. I'm sorry for no responding for a long time \ud83d\ude1f. ",
    "omata-metamax": "I solved the issue,\nIt's look like is mandatory to set LETSENCRYPT_TEST=false to get a valid cert. Now the cert was generated and configured.\nJust remember to pass LETSENCRYPT_TEST as false if you want valid certs and no issue in the nginx-letsencrypt container log.\nRegards,\n. I did talk too fast,\nI added a second app and it failed again in the same way. I don't understand.\n. Finally,\nIt's looks like the issue is related to a kind of rate limiting by the Letsencrypt API; but there is not enough logging at the nginx-letsencrypt container to do a right debug. After a couple of hours I was able to generate the cert for the second app exposed using nginx-proxy and Letsencrypt.\nBest regards,\n. ",
    "almereyda": "If you use the blob link to download the file, you get HTML. Try https://github.com/jwilder/nginx-proxy/raw/master/nginx.tmpl instead?\n. The same location will also be appended to /etc/nginx/vhost.d/default, why changing the tmpl file is unnecessary.. This does not seem to avoid it in all cases. Still for docker networks to work with compose and this proxy, I am using a patched nginx.tmpl to avoid empty upstreams.\nOnly changing the containers exposed port away from 80 helped successfully validating its domain.. Before I hadn't recognised the releases, which mention 0.2.0.\nStill the readme claims to be advanced to 0.3.0, for which no tag exists.. This had become necessary due to a weird edge case with\nnginx-letsencrypt    | Creating/renewal okfn-de-test.matrix.allmende.io certificates... (okfn-de-test.matrix.allmende.io)\nnginx-letsencrypt    | Traceback (most recent call last):\nnginx-letsencrypt    |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1404, in main\nnginx-letsencrypt    |     return main_with_exceptions(cli_args)\nnginx-letsencrypt    |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1381, in main_with_exceptions\nnginx-letsencrypt    |     existing_data = load_existing_data(args.ioplugins)\nnginx-letsencrypt    |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1153, in load_existing_data\nnginx-letsencrypt    |     all_data = IOPlugin.registered[plugin_name].load()\nnginx-letsencrypt    |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 371, in load\nnginx-letsencrypt    |     with open(self.path, self.READ_MODE) as persist_file:\nnginx-letsencrypt    | IOError: [Errno 21] Is a directory: 'key.pem'\nnginx-letsencrypt    | \nnginx-letsencrypt    | Unhandled error has happened, traceback is above\nnginx-letsencrypt    | \nnginx-letsencrypt    | Debugging tips: -v improves output verbosity. Help is available under --help.\nwhich is now resolved, as of\nnginx-letsencrypt    | Creating/renewal okfn-de-test.matrix.allmende.io certificates... (okfn-de-test.matrix.allmende.io)\nnginx-letsencrypt    | 2017-06-25 00:59:31,835:INFO:simp_le:1213: Generating new account key\nnginx-letsencrypt    | 2017-06-25 00:59:35,805:INFO:simp_le:1306: okfn-de-test.matrix.allmende.io was successfully self-verified\nnginx-letsencrypt    | 2017-06-25 00:59:36,611:INFO:simp_le:1314: Generating new certificate private key\nnginx-letsencrypt    | 2017-06-25 00:59:42,555:INFO:simp_le:393: Saving account_key.json\nnginx-letsencrypt    | 2017-06-25 00:59:42,555:INFO:simp_le:393: Saving key.pem\nnginx-letsencrypt    | 2017-06-25 00:59:42,556:INFO:simp_le:393: Saving chain.pem\nnginx-letsencrypt    | 2017-06-25 00:59:42,556:INFO:simp_le:393: Saving fullchain.pem\nnginx-letsencrypt    | 2017-06-25 00:59:42,556:INFO:simp_le:393: Saving cert.pem\nWhyever simp_le or the container created key.pem as a directory, it does not happen anymore.. Pardon me, the error occured due to another reason, as I apparently had created the folders implicitly before the client could go to work:\n\nhttps://github.com/allmende/docker-matrix/blob/bd611109c17e0a7b747966337d816a78cc96bbe4/docker-compose.yml#L35-L38\n\nStill this PR allows to build a current simp_le version. If you wanted to go for a predictable build, we could set a distinct commit for checkout.. As much as I understand the reason of why a shallow clone cannot target at a specific commit, I would very much favour the social over the technical approach to rather ask the maintainer of simp_le to have shorter release cycles.\nAs you pointed out correctly in https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/221#issuecomment-311193619, proper tags didn't exist before. Luckily 0.3.0 has been tagged 19 hours ago (from now).\nThen, intermediate releases could follow semantic versioning and show up as 0.3.1, 0.3.2 and the likes. . Also cloning the whole tree increases the image size of the container, if we don't run all git related commands within one RUN directive and the \\ multiline pattern, including rm -rf .git after successful checkout.. Yes, I overlooked the install_simp_le.sh script does all in one filesystem layer. Fine for me to clone the whole tree, especially with the evidence provided.\nIf we wanted to use a Docker build argument, we'd be free to choose the tag upon image creation.. Please see https://github.com/zenhack/simp_le/issues/101#issuecomment-372773310 for updates on the upstream issue, since the v2 endpoint has finally been released to production.. The simp_le issue mentions that they are planning to support the DNS-01\nchallenge soon'ish.\nOn 15 March 2018 at 10:51, Dragnucs notifications@github.com wrote:\n\n@buchdag https://github.com/buchdag thank you for your reply.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/319#issuecomment-373319869,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABka_GISKEcuTX9F-FpUc2P_lNQPU3rIks5tejmzgaJpZM4RmAk2\n.\n. The certificates for domains are renewed automatically, which works\nperfectly.\n\nYet since the previous certificates are not marked as revoked with Let's\nEncrypt, they still send expiry notification messages for soon to be\nexpiring certificates, which we would meanwhile have renewed already.\nIs there a way to tell Let's Encrypt that they do not need to send expiry\nnotifications for certain certificates?\nOn 10 April 2018 at 21:09, Nicolas Duchon notifications@github.com wrote:\n\nI'm not sure I get what you mean / would like, could you clarify ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/361#issuecomment-380214327,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABka_HNE27JmMuf6BX32_Aq5Yz4C1Hzlks5tnQNmgaJpZM4TOsAZ\n.\n. This is interesting, since we are having multiple sites with up-to-date certificates for which we receive regular expiration notices. How could I debug this?. Thank you for the detailed answers. I will investigate this and report back here.. \n",
    "FallenRiteMonk": "I also had a issue with the nginx.tmpl file, not sure if it was the same, but it was fixed with using the file on the docker-gen repo. So for example i used the latest (https://raw.githubusercontent.com/jwilder/docker-gen/master/templates/nginx.tmpl) as i am also using the latest version of the docker image (0.7.3).\nMaybe the link in the documentation should be changed to the one on the docker-gen repo as the example works with that docker image and not with the nginx-proxy image.\n. That didn't work for me!\n. @buchdag I have the same situation (at least almost, i redirect the other way around), but i get an error with the certificate generation.\nMy setup is the following:\nI use jwilders proxy-gen (seperate container not the nginx-proxy)\nthe proxy-gen is setup to have the redirects from www..com to .to (also listenings on 443 so https://www..com should also be redirected to https://.com)\nI have a container with VIRTUAL_HOST .com and LETSENCYPT_HOST .com,www..com\nthe problem is that this companion ist able to generate the cert anymore, even though .com and www..com are reachable, but www..com returns a 301 redirect to .com.\nThe error thrown is the following:\n```\nCreating/renewal .com certificates... (.com www..com)\n/usr/lib/python2.7/site-packages/acme/jose/jwa.py:110: CryptographyDeprecationWarning: signer and verifier have been deprecated. Please use sign and verify instead.\n  signer = key.signer(self.padding, self.hash)\n2018-05-14 08:20:21,166:INFO:simp_le:1479: Generating new certificate private key\n2018-05-14 08:20:23,602:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/Qi_5SbKefTI2XvOqtF_ab5ZKGuF_6yClVYzBvFD8VqI\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\n    return main_with_exceptions(cli_args)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1489, in persist_new_data\n    account_key=client.key, key=None, cert=None, chain=None))\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1195, in persist_data\n    plugin.save(new_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 493, in save\n    key = self.dump_key(data.key)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 436, in dump_key\n    return OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip()\nAttributeError: 'NoneType' object has no attribute 'wrapped'\nUnhandled error has happened, traceback is above\n```\nany ideas on what could be the problem? or ideas how i could get it to work?\n. ",
    "domdorn": "I had to adjust my nginx.tmpl to don't proxy .well-known/acme-challenge through to the child-containers. Did it like this:\n`\nserver {\n        server_name {{ $host }};\n        listen 80 {{ $default_server }};\n        access_log /var/log/nginx/access.log vhost;\n    {{ if (exists (printf \"/etc/nginx/vhost.d/%s\" $host)) }}\n    include {{ printf \"/etc/nginx/vhost.d/%s\" $host }};\n    {{ else if (exists \"/etc/nginx/vhost.d/default\") }}\n    include /etc/nginx/vhost.d/default;\n    {{ end }}\n\nadded code here START\n    location /.well-known/acme-challenge {\n            root /usr/share/nginx/html/.well-known/;\n            break;\n    }\n\nadded code here END\n    location / {\n            proxy_pass {{ trim $proto }}://{{ trim $host }};\n            {{ if (exists (printf \"/etc/nginx/htpasswd/%s\" $host)) }}\n            auth_basic      \"Restricted {{ $host }}\";\n            auth_basic_user_file    {{ (printf \"/etc/nginx/htpasswd/%s\" $host) }};\n            {{ end }}\n            {{ if (exists (printf \"/etc/nginx/vhost.d/%s_location\" $host)) }}\n            include {{ printf \"/etc/nginx/vhost.d/%s_location\" $host}};\n            {{ else if (exists \"/etc/nginx/vhost.d/default_location\") }}\n            include /etc/nginx/vhost.d/default_location;\n            {{ end }}\n    }\n\n}\n`. ",
    "Nierrrrrrr": "@domdorn It finally works! But I have to change the line\nroot /usr/share/nginx/html/.well-known/;\nto\nroot /usr/share/nginx/html/;. ",
    "Routhinator": "@domdorn Solution fixed me up as well. Seems to only affect port 80 services as mentioned in #182 \nNeeded @Nierrrrrrr 's adjustment.\n. ",
    "tomajask": "Hi, guys!\nI still have problems with verifying certificate... I tried both options:\n1. location /.well-known/acme-challenge - in the nginx.tmpl\n2. location /.well-known/acme-challenge - in the vhost.d/sub.domain.tld\nFiles generated in the .well-known/acme-challenge can be accessed by me in the browser, but the script still has some problems :(\nI include some logs (interesting case...):\n```nginx\nit works... file can be accessed in the browser\nnginx-proxy               | nginx.1    | sub.domain.tld 192.168.1.1 - - [29/Mar/2017:19:55:33 +0000] \"GET /.well-known/acme-challenge/smth HTTP/1.1\" 200 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\nnew file is generated by docker-letsencrypt-nginx-proxy-companion\nnginx_proxy-lets_encrypt  | 2017-03-29 19:57:01,007:DEBUG:simp_le:983: Saving validation (u'pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs.d0Sfyt3ze6Zkhpu4NDshs08QRwRaFxYxZGePeEK9irA') at /usr/share/nginx/html/.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs\nnginx_proxy-lets_encrypt  | 2017-03-29 19:57:01,012:DEBUG:acme.challenges:252: Verifying http-01 at http://sub.domain.tld/.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs...\nnginx_proxy-lets_encrypt  | 2017-03-29 19:57:01,014:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): sub.domain.tld\nnew file can be accessed in the browser...\nnginx-proxy               | nginx.1    | sub.domain.tld 192.168.1.1 - - [29/Mar/2017:19:57:21 +0000] \"GET /.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\"\ndocker-letsencrypt-nginx-proxy-companion unfortunately cannot access the file :(\nnginx_proxy-lets_encrypt  | 2017-03-29 19:59:08,420:ERROR:acme.challenges:256: Unable to reach http://sub.domain.tld/.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs: HTTPConnectionPool(host='sub.domain.tld', port=80): Max retries exceeded with url: /.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs (Caused by NewConnectionError(': Failed to establish a new connection: [Errno 110] Operation timed out',))\nnginx_proxy-lets_encrypt  | 2017-03-29 19:59:08,422:WARNING:simp_le:1303: sub.domain.tld was not successfully self-verified. CA is likely to fail as well!\nright after previous companion logs, this log appears in the nginx logs: (200 status...)\nnginx-proxy               | nginx.1    | sub.domain.tld 192.168.1.1 - - [29/Mar/2017:19:59:09 +0000] \"GET /.well-known/acme-challenge/pfLLevTbGfHeMYx1yFuDQCCPaV-CjveX6-g_YJtvMPs HTTP/1.1\" 200 87 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\n```\nI completely have no idea, what's wrong :/ I've spent already many hours trying to fix that... \nDo you have any ideas? Thanks in advance for any clues.\n\nhere is my docker-compose.yml file: https://gist.github.com/anonymous/2083cc1d10fefc334cd8fc8dce6b0440\nand here is my nginx.tmpl file: https://gist.github.com/anonymous/4b689be2ccf605e9cedabc58a27b1f56. ",
    "JonasT": "We ran into the same problem while setting up the companion on our server. @domdorn 's modification fixed it for us with the .well-known removed from @domdorn 's modification suggestion as pointed out by @Nierrrrrrr - adding \"VIRTUAL_PORT\" on the other hand to the environment for all containers did NOT work for us.\n(so we couldn't manage to get this to work without modifying the nginx.tmpl by docker-gen)\nIs there any chance this issue will be looked at in the near future? It seems with the current jwilder/docker-gen nginx.tmpl combined with the regular latest nginx image combined with this let's encrypt companion in the current version, people are bound to run into this problem.. Oops, I missed the remark about https://acme-staging.api.letsencrypt.org/directory at the bottom :smile:\nMaybe adding this where LETSENCRYPT_TEST is mentioned would be nice, like this:\n\nIf you want to create test certificates that don't have the 5 certs/week/domain limits define the LETSENCRYPT_TEST environment variable with a value of true (in the containers where you request certificates with LETSENCRYPT_HOST). If you want to do this globally for all containers, set ACME_CA_URI as described below.\n\nSorry for the invalid ticket!. ",
    "lounagen": "i encountered a LE validation failure on renewal due to timeout on the http link (and on a renewal the http port is redirected to https port) and discovered this issue, that could be (or not) the same cause, so i share as this issue is still opened:\nMay be the same cause than for the issue #178 (and the PR #192 resolved the problem for me, and @JonasT , without modifying the nginx.tmpl file)\nbasically, the LE endpoint wasn't taking into account, and the LE request was forwarded to my webapp.. Just had such a problem on renewal. Not sure if i had the same issue than yours, but it looks like:\nAnalysis\nThe HTTP to HTTPS redirection on renewal is not a big deal as LE follows the 'HTTP 301 redirects'.\nThe problem i encountered is that the 'location /.well-known/acme-challenge' nginx directive was overridden by the 'location /' in the 'HTTPS template' from nginx.tmpl file. and the 'location /' redirects to my webapp container instead of the 'letsencrypt challenges volume'.\nWork Around\nI resolved it by declaring the well-known acme location as a prefix string, to avoid continuing to evaluate other nginx locations.\nFix\nJust put my 2 cents into the PR #192 if it could be of any use for someone.. Thanks for merging!. @ekkis \ncreation (subnet is optional, but usefull if you want to fine tune your iptables):\nnetwork create -d bridge --subnet 172.28.0.0/16 --opt com.docker.network.bridge.name=nginx-proxy nginx-proxy\nOn my side, i create it on all usefull hosts from saltstack deployment (so without docker-compose), here is the saltstack state if it could be usefull:\nnginx-proxy-network:\n  cmd.run:\n    - names:\n      - docker network create -d bridge --subnet 172.28.0.0/16 --opt com.docker.network.bridge.name=nginx-proxy nginx-proxy\n    - unless: docker network list | grep nginx-proxy\nIn the docker-compose.yml:\n```\nwhatever-servicename:\n   [...]\n    networks:\n      - proxy-tier\nnetworks:\n  proxy-tier:\n    external:\n      name: nginx-proxy\n. @ekkis, if you only dodocker network create nginx-proxy, you can list your bridge/network asnginx-proxyfromdocker network list, but on your 'real' interfaces, you will end up with a randombr-``` bridge interface name (at least under linux).\nMay be you don't care in your use-case, but i do, as i fine tune the iptables with this interface name and i don't bother to autofetch this bridge name to fill my iptables :-)\nwhen you name your 'docker network' with the arg --opt com.docker.network.bridge.name=foobar, you'll end up with a well known name ('foobar' in this sample).\nBy the way, that's not directly related to this issue, but that's the reason i need to name my docker network for this bunch of 'not publicly exposed on Internet for every remote IP':\nif someone here wanted to fine tune its iptables and ask him/herself why iptables don't filter the docker ports exposed on the host (if you'd like to restrict the ip_range allowed to connect publicly on your 443 port or whatever one from outside), i struggled on it some moths ago and found this useful post (https://fralef.me/docker-and-iptables.html).. @ekkis , sorry for the answer's delay.\nI think the saltstack sample to create a docker network sounds obvious when you use saltstack already.\nSo i've just added this saltstack sample into a README file for external references if you want to add it as a sample from your project.\nI referenced both your project and this @JrCs ' project:\nhttps://github.com/lounagen/nginx-proxy-saltstack-network-creation\n. Here are some ways of investigations:\n0- I think that your line \"command: -notify-sighup nginx ...\" should be \"command: -notify-sighup nginx-proxy\" because you called your nginx container \"nginx-proxy\". Disclaimer: if your reload wasnt effective at all you should get \u00e0 404 instead of 403, so I can mistake myself\n1- can you see the nginx configuration reload signal from docker logs nginx-proxy container?\n2- by the time the letsencrypt companion is calling  the LE endpoint, could you check if the nginx location template is well written in the vhost.d volume  (vhost conf file must exist, named 'default' if I remember well, and its content is not empty)\n3- can you check your nginx-proxy container logs to see any error that could explain the 403 (like permissions or whatever, because if the nginx location wasn't working at all, the error should have been 404), you could either check any strange permission in the .well-known folder hierarchy and if the challenge file looks correct (small text file)\n4- your business website is currently online (sandbox.graph.speakr.com) on port 80, so just to be sure: are you really launching your docker-compose on the same server, with any reverse proxy or loadbalancer before it in the call chain? (It sounds obvious of course, but may be it worths mentionning it for some other people: the url needs to be accessed from Internet (outside the firewall/loadbalancer), not only from local network)\nBy the way - no direct link with this matter - I dont understand why you need to add a (network) link to nginx-proxy in your nginx-letsencrypt and ngnix-gen defintions.\nAnd as you didn't mention your business website in your docker compose I assume you have added it from another docker compose with the nginxproxy envvars. Comments crossed themselves, glad that you resolved your problem 'magically'.\nAnyway, the template nginx.tmpl should come and refresh automatically from nginx-gens container, so for the associated #202, check the reload command for the nginx-proxy container name in nginx-gen definition. (When you restarted all, nginx reload its configuration by itself).. @ekkis : when I said that nginx.tmpl came with nginx-gen, I meant that's nginx-gen's responsability:\n- to provide the template (and I agree that the default version could be included inside its docker image, instead of asking you for manual download),\n- AND to instanciate this template (by writing the result file into conf.d/default) according to the detection of the VIRTUAL_HOST envvars for business app containers (ssl will come if tls certificates are present),\n- AND to reload the main nginx service.\nLetsencrypt nginx-proxy companion container is 'only' an automation helper to call LE for you.\nIts responsability (from my understanding) is:\n- to generate a temp vhost location for the challenges into vhost.d/default  (then flush it when certs are generated),\n- to send the reload signal to nginx-gen (nginx-nginx-gen will re-instanciate the conf.d/default, taking into accout this brand new vhost.d/default, then reload nginx)\n- to send the LE request the writen the challenge into the .well-known/... folder for LE to fetch it from Internet \n- to write the certs in the good volume when retrieved from LE\n- to infinite loop every hour to do all of this again if your cert is going to expire soon\nBy the way, i'm not the maintainer, i've just discovered this really cool stuff some months ago  (and experimented a small issue for the renew that led me to investigate deeper the internals), and i tried to help you as a participation to the community for a merged PR some weeks ago :-)\nso let you wait for @JrCs feedback for your PR/issues . @Robin2009: this project is intended to format and send certificate requests to the Letsencrypt CA registration endpoint, and does NOT create ssl certificates from local.\nSo, your domain must be valid and resolved from the LE pool of servers  (a.k.a. from the whole externat Internet network, and not 127.0.0.1).\nRegarding your bash test inside the nginx-letsencrypt container, if you put an ip into your host's etc/hosts (here, your mac os), it won't be 'copied' to your docker container, which will use its own network rules to connect this ip (you could use a dnsmask+--dns option on the host to do this or the --add-host option).\nBtw, even if you forward the my.test.com 127.0.0.1 rule to your containers, you could not see any running service from the container's localhost.\nShortly said: buy a valid domain or use a local CA instead of this letsencrypt stuff. @arthurvi, if you haven't done it for the last month, you should docker pull your letsencrypt companion image.\nThe fix #192 for the exact same issue was merged and released last month . Let's Encrypt is designed to provide free certificates to the owner of a public domain/dns host, equals to your website dns name.\nTo ensure you're really the owner, LE asks your website to host a particular challenge/token (that's the job of this docker companion to handle this mechanism) then it sends a http get request to your website to check if you really managed to add this token on your website (and if you can do that, you're the website owner, so you're granted to retrieve the certificate).\nObviously, your A record must be associated to a public IP (not 172.xxx) for LE to fetch your token. That's why it fails in your case.\nI'm pretty sure that this is not (yet?) implemented in this docker image (but I can be wrong), but for case like yours, or case when you can't modify a production website, there is another way to prove to LE you're the owner. You can put the challenge/token into a dedicated DNS txt record.\nCheck the LE'S doc (https://letsencrypt.org/how-it-works/)\n. ",
    "teohhanhui": "ping @JrCs. @JrCs Perhaps you might want to consider modifying the commit(s) next time to give credit where it's due... :smile:. It's possible to amend a commit while keeping the author (\"commited with\").\n:smile:\nOn Tue, 7 Feb 2017, 19:32 Yves Blusseau, notifications@github.com wrote:\n\nSorry @teohhanhui https://github.com/teohhanhui but you didn't reply to\nthe reviews i have made (the 21 sept) so i have to modify the code on my\nown.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/108#issuecomment-277972895,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAhf68LHTl3FMylwUb-6NEmXax3Uivjaks5raFY8gaJpZM4KANjx\n.\n. I think this is closed by #181.. This has been supported since #181 :smile:. It should use a fully qualified domain name, i.e. com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true. There's no need for =true. Just a plain label is enough. It doesn't have to be a key-value pair.. There's no need for =true. Just a plain label is enough. It doesn't have to be a key-value pair.. Actually, it's incredibly inefficient to fetch the list of all containers. The Docker Engine API allows filtering by labels.. I think we can do that in another PR.\n\nFor reference, this is my modified version of the docker_api function: https://github.com/tripviss/tripviss-nginx-proxy/blob/0028116697aef28e9e7d5fec98fc791194e98e2b/docker/letsencrypt-companion/functions.sh#L31-L59\nUsage example: https://github.com/tripviss/tripviss-nginx-proxy/blob/0028116697aef28e9e7d5fec98fc791194e98e2b/docker/letsencrypt-companion/functions.sh#L96-L97\n(really should get my changes merged upstream lol). ",
    "mareeba": "Thanks very much!\nSo would I need to stop the existing docker containers (ie. the reverse proxy etc) first?\nI am currently running this setup:\nhttps://help.nextcloud.com/t/nextcloud-nginx-reverse-proxy-letsencrypt-in-docker-containers/1687\nIdeally I would like to be able to add additional containers (and remove them) with minimal disruption to the existing running containers.\n. Thanks my friend.\nOkay, so I have the following as my docker-compose.yml but I can't seem to get it to work. It builds fine and I can see the containers running via docker ps -a however when I visit the domain I get an nginx 503 error page....?  Any thoughts?  Is there a complete step-by-step guide somewhere perhaps like the one you did for nextcloud+nginx+letsencrypt?\n```\nwekan:\n  image: mquandalle/wekan\n  links:\n    - wekandb\n  environment:\n    - MONGO_URL = mongodb://wekandb/wekan\n    - ROOT_URL = https://projects.domain.tld\n- MAIL_URL = smtp://user:pass@mailserver.example.com:25/\n- MAIL_FROM = wekan-admin@example.com\nInsert environment variables so we can use the existing reverse proxy setup.\n- VIRTUAL_HOST = projects.domain.tld\n- VIRTUAL_PORT = 8081\n- LETSENCRYPT_HOST = projects.domain.tld\n- LETSENCRYPT_EMAIL = our.email@domain.tld\n\nports:\n- 8081:80\nwekandb:\n   image: mongo\n   volumes:\n     - /mnt/docker/wekan/data:/data/db\n```\n. ",
    "mrgnou": "And they do seem to provide a HTTPS_METHOD=noredirect env var.\nMy bad, thanks.\n. ",
    "mbabauer": "So, for the first questioned: Yes, if I map the ports my custom meteor image to the host it does work. At least it did when I used the out-of-the-box MUP deploy and static certs.  The one thing that does happen is that any non-SSL connection to the app will redirect to the https:// on the same host.  But that raises a question: The instructions said you should only EXPOSE the port, not map to the host.  Also, can it be ANY port, and the proxy container picks that up, or does it have to be a specific port.\nFor the second question: I have restarted the the install process many times using the script in the original post, but I have not manually restarted the running container.  Each time it removes them, re-pulls them, and then re-runs them.  I believe this would cause the docker logs to be restarted each time?\n. I couldn't get the command to run since the nginx container shows \"Restarting (1) XXX seconds ago\", but it looks like the default.conf gets written out to the host since we are mounting the volume.  The file there has the following contents:\n```\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n  default $http_x_forwarded_proto;\n  ''      $scheme;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  '' close;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                 '\"$http_referer\" \"$http_user_agent\"';\naccess_log off;\nHTTP 1.1 support\nproxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nMitigate httpoxy attack (see README for details)\nproxy_set_header Proxy \"\";\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    listen 80;\n    access_log /var/log/nginx/access.log vhost;\n    return 503;\n}\nupstream xxx.yyy.com {\n}\nserver {\n    server_name xxx.yyy.com;\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    include /etc/nginx/vhost.d/default;\n    location / {\n        proxy_pass http://xxx.yyy.com;\n    }\n}\n```\nShouldn't the proxy_pass be pointing to port 3000?\n. The only thing I do in my app container is EXPOSE 3000.  Do I need to do something else, like publish them with -P?\n. Ok, so I did some poking around and found out that the app was starting on port 80 and not 3000, so I change the EXPOSE port to match the app.  I also had the VIRTUAL_HOST set to the DNS name, which was causing an issue as well.  The logs from nginx no longer have errors about not having upstream.\nNow, the nginx container seems to start no problem, but when the jrcs/letsencrypt-nginx-proxy-companion container tries to validate the domain and fails.  What seems to happen is that the proxy container tries to send the requests to the Meteor app, which is configured to redirect all requests to https from port 80.  Shouldn't the .conf be configured to no proxy request to /.well-known/* ?\n. Ok, I see that here:\n```\nStart of configuration add by letsencrypt container\nlocation /.well-known/acme-challenge/ {\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\n```\nNot sure why I am seeing the 307 redirect.  Even if I hit http://mydomain.com/.well-known/acme-challenge/ I get the 307 redirect.\n. Actually, looks like I am getting a 503 now.  I think Chrome was caching the old pages/responses, so I cleared out the cache and now it's a 503.  I also tried from CLI using curl and got a 503 there as well.  According to the nginx-proxy page, this is caused when port 443 is active and the certs are not valid.  So, looks like progress is being made.\nIs there a particular order that the containers need to start in?  I start them in the order of the documentation:\n1. Meteor app\n2. nginx\n3. docker-gen\n4. letsencrypt-nginx-proxy-companion\n. I added some 15s pauses to the script between the container runs, but that didn't help, so I added an exit right after the nginx container started and tried to hit http://mydomain.com/.well-known/acme-challenge/ but it's still getting a 503.\nHere are the nginx logs:\nxxx.yyy.com 23.119.238.106 - - [28/Sep/2016:00:50:45 +0000] \"GET /.well-known/acme-challenge/ HTTP/1.1\" 503 615 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36\"\nxxx.yyy.com 23.119.238.106 - - [28/Sep/2016:00:50:46 +0000] \"GET /favicon.ico HTTP/1.1\" 503 615 \"http://xxx.yyy.com/.well-known/acme-challenge/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36\"\n64.137.247.91 84.232.53.72 - - [28/Sep/2016:00:51:13 +0000] \"GET / HTTP/1.1\" 503 213 \"-\" \"curl/7.17.1 (mips-unknown-linux-gnu) libcurl/7.17.1 OpenSSL/0.9.8i zlib/1.2.3\"\nWhat else should I look for?\n. Here are the logs for let's encrypt container:\n```\nSleep for 3600s\n2016/09/28 01:48:52 Generated '/app/letsencrypt_service_data' from 3 containers\n2016/09/28 01:48:52 Running '/app/update_certs'\n2016/09/28 01:48:52 Watching docker events\n2016/09/28 01:48:52 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\nCreating/renewal xxx.yyy.com certificates... (xxx.yyy.com)\n2016-09-28 01:48:53,456:INFO:simp_le:1211: Generating new account key\n2016-09-28 01:48:56,309:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:56,592:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:56,919:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:57,348:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2016-09-28 01:48:58,595:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:58,928:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:59,224:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): xxx.yyy.com\n2016-09-28 01:48:59,276:WARNING:simp_le:1303: xxx.yyy.com was not successfully self-verified. CA is likely to fail as well!\n2016-09-28 01:48:59,308:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:48:59,628:INFO:simp_le:1313: Generating new certificate private key\n2016-09-28 01:49:00,995:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2016-09-28 01:49:01,280:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/oBliHBX4aARrmVm-cDx0Pm6MGGkwW4ZEeEvUCSuaHUw\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\nSleep for 3600s\n```\n. That doesn't seem to do anything at all.  The nginx container is still running.\n. Should the uptime change, though?  It still has the same uptime.\n. Yeah, still seeing the 503:\ncurl http://localhost/.well-known/acme-challenge/\n<html>\n<head><title>503 Service Temporarily Unavailable</title></head>\n<body bgcolor=\"white\">\n<center><h1>503 Service Temporarily Unavailable</h1></center>\n<hr><center>nginx/1.11.4</center>\n</body>\n</html>\n. Same result:\ncurl -H \"Host: xxx.yyy.com\" http://localhost/.well-known/acme-challenge/\n<html>\n<head><title>503 Service Temporarily Unavailable</title></head>\n<body bgcolor=\"white\">\n<center><h1>503 Service Temporarily Unavailable</h1></center>\n<hr><center>nginx/1.11.4</center>\n</body>\n</html>\n. I seems like I am missing something in the /etc/nginx/conf.d/default.conf\n```\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n  default $http_x_forwarded_proto;\n  ''      $scheme;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  '' close;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                 '\"$http_referer\" \"$http_user_agent\"';\naccess_log off;\nHTTP 1.1 support\nproxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nMitigate httpoxy attack (see README for details)\nproxy_set_header Proxy \"\";\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    listen 80;\n    access_log /var/log/nginx/access.log vhost;\n    return 503;\n}\n```\nShouldn't there be a reference to the upstream and maybe my hostname in the .conf?\n. I finally got it working!!!!  I ended up having to switch out the separate containers (nginx and docker-gen) for the combined jwilder/nginx-proxy images.  After some minor config changes its now working.\nThanks so much, @ryneeverett, for putting up with my questions and back-and-forths.\n. ",
    "tmtben": "Hi @JrCs,\nThanks for your great work.\nWhat about this feature?. ",
    "ncrmro": "Issue on my part the container name was to long not the image.\n. ",
    "sudoforge": "You're listening on the wrong port for HTTPS in your server block configuration.\nChange your listen lines to use 443 instead of 80, and try again.\nIf you want to direct traffic from 80 (HTTP) to 443 (HTTPS), you should set up a separate server block, like the one below:\ntext\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name localhost;\n    return 301 https://$host$request_uri;\n}\nYou'll need to provide the paths to the certificate(s) in the main block (where you are listening with 443).\n. ",
    "lucasjahn": "OMG, thank you really much @bddenhartog I completely missed this one. \n. ",
    "wlabatey": "Thanks for this guys. Was having the exact same problem and this solution fixed it.\nI had to share the volume from my nginx-proxy container to my backend nginx container, change the nginx config in sites-enabled to listen on 443 and pass it the ssl certificates.\nOne thing I also had to do was change the environment variables in my docker-compose file. I had to add VIRTUAL_PROTO=https and VIRTUAL_PORT=443. Just adding this in case it helps anyone else looking at this thread in future!. ",
    "jdoubleu": "For some reason it works for me now. Don't know what fixed it but maybe it had something todo with the first run.\n. ",
    "danhimalplanet": "@JrCs the issues filed against https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/ repo are filled with people having the same problem as me.\nLot of people propose various solutions.\nI don't see a clear solution for using docker-compose version 2 files.\nCan you point me to what everyone should be using?\nThanks.\n. so I was running docker-compose version 1.6.0, build d99cad6\ni upgraded to docker-compose version 1.8.1\nusing docker-letsencrypt-nginx-proxy-companion with docker-compose.yml v2 works now\n. The letsencrypt api changed slightly a week ago.  Someone has published a container image that successfully uses the new api.\nSo if you're using this example from JrCs docs:\n\n\nThen start this container (NGINX_DOCKER_GEN_CONTAINER variable must contain the \ndocker-gen container name or id):\n$ docker run -d \\\n   --name nginx-letsencrypt \\\n   -e \"NGINX_DOCKER_GEN_CONTAINER=nginx-gen\" \\\n   --volumes-from nginx \\\n   -v /path/to/certs:/etc/nginx/certs:rw \\\n   -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n   jrcs/letsencrypt-nginx-proxy-companion\n\n\nreplace \"jrcs/letsencrypt-nginx-proxy-companion\" with \"alastaircoote/docker-letsencrypt-nginx-proxy-companion/\". I think the current version of the python acme client breaks because as of Dec 8th 2016 the object returned by the /directory letsencrypt endpoint has changed\nhttps://github.com/letsencrypt/boulder/issues/2415. I got this working with docker-compose version 2.\ndocker-compose.yml ( notice I use alastaircoote/docker-letsencrypt-nginx-proxy-companion )\nhttps://gist.github.com/danhimalplanet/de56e3062a07fadfff256f6d94b0cc86\nnginx-compose.tmpl ( referenced as nginx-compose-v3.tmpl ) ( I got it from an issue someone commented on in this repo )\nhttps://gist.github.com/anonymous/8b038dda9d3f1e579d98b5f260b786d6. @joeknock90 paste your nginx.tmpl ?  Also try what I pasted in above.. To add even more dependencies... what version of docker-compose are you using?\nI have:\ndocker-compose version 1.9.0, build 2585387\nupdated with pip. you shouldn't have to manually define the network 'proxy-tier', docker-compose should create it automatically, from docker-compose.yml\n. I do it all in 1 docker-compose version 2 file.  Sometimes I make 2 compose files, 1 with nginx nginx-gen nginx-letsencrypt in it, 1 with the other vms and hosts im trying to launch. \nAuth will fail if you have this set:\n    - LETSENCRYPT_TEST=true\nbecause you're testing!. @bkleef letsencrypt changed their api slightly, last week.\nSome key points:  Use alastaircoote/docker-letsencrypt-nginx-proxy-companion instead of \njrcs/letsencrypt-nginx-proxy-companion:latest\nHere's the docker-compose.yml v2 I use:\nhttps://gist.github.com/danhimalplanet/de56e3062a07fadfff256f6d94b0cc86\nI think there's something weird going on with how docker-compose interprets v2 templates.  I have successfully used the nginx template here:\nhttps://gist.github.com/anonymous/8b038dda9d3f1e579d98b5f260b786d6\n. @Braintelligence I based my template on this:\nhttps://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples/blob/master/docker-compose/v2/simple-site/docker-compose.yml\nbut with alastaircoote/docker-letsencrypt-nginx-proxy-companion , and the nginx template i mentioned earlier.\nI think you're all set then?. What's wrong with bridged mode?\nSo I'm sure docker-compose makes docker actually create the needed networks when I use the docker-compose v2 yml I posted earlier.  I never have to manually create the networks with 'docker network ....'. I think in current docker all of the containers in the same network have access to other containers in the same network.  I think 'links' might not be needed anymore.  I'm not sure.\nmy nginx default.conf has blocks like this ( after its auto generated )\nupstream site.net {\n                        # site\n                        server site:80;\n}\nHere is the version of docker-engine I am using:\ndocker-engine-1.12.5-1.el7.centos.x86_64\ndocker-compose:\ndocker-compose version 1.9.0, build 2585387\n. We should get together and make a PR for @jrcs , or make our own fork and document heavily.\nI appreciate the fact that I can run somewhat automatically bring up containers and quickly set up https access through letsencrypt in docker, but I have spent many hours on dealing with little bugs.\nTo make this more even more fun, I have been using docker-compose v2 examples from @fatk repo.  I believe @jrcs just brings up containers the older way, with \"docker run ....\" instead of using docker-compose .. @Braintelligence what version of docker-engine and docker-compose are you using?. @Braintelligence sounds good, that matches my versions. I don't know.  Try pinging, by name, the other containers from other containers.  . ",
    "lvnilesh": "I am seeing this in the logs\n2016-11-06 17:11:57,961:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal be.a.cloudgeni.us certificates... (be.a.cloudgeni.us)\nSome plugins returned conflicting data for the \"cert\" component\n. What may be causing this conflicting data?\n. ",
    "arcticShadow": "I've just noticed this as well. It appears that nginx has not restarted, and applied the new certs. As i checked the cert files and sure enough they have the correct expiration dates, indicating that this container did not need to renew the certs. (as the logs suggested)\n. ",
    "prodrigestivill": "This is caused because docker-letsencrypt-nginx-proxy-companion only reloads docker-gen. And docker-gen don't see any change in the configuration files. So don't see any need to reload nginx.\nI think it should also send reload to nginx container.. At first i tried to avoid the auto-fill to interfere with the NGINX variable. But it makes sense because the auto-fill only detects for a NGINX containter, and not for nginx-proxy.. ",
    "heinemml": "I stumbled accross the same problem.\nOberservation\n I also run the solution with an additional nginx-gen container. The letsencrypt-companion refreshes the certs and sends a notification to nginx-gen. And this is the output of nginx-gen:\n2017/01/26 08:58:17 Received signal: hangup\n2017/01/26 08:58:17 Received signal: hangup\n2017/01/26 08:58:17 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification '' \nWhich is correct, the configuration did not change. But the certs did, but this doesn't matter to docker-gen.\nAnalysis\nSo I guess the right way would be to also notify the nginx container when the certs changed.\nI think this is even more important than notifying the docker-gen container. When a container is already proxied and has a cert generated the configuration shouldn't change at all. So the HUP will always lead to the situation mentioned above.\nBut the nginx container needs to be notified of every cert change.\nWorkaround\nWorkaround might be to set up a cron which HUPs your nginx container at least once a day.\ndocker kill -s HUP nginx\n But a notification on update would of course be smoother.\n. Wouldn't it make sense to also use the 'NGINX_PROXY_CONTAINER' variable for this case? From a User-perspective I think it's a bit misleading to have two different NGINX container variables. The cases are mutual exclusive, so it should simplify the configuration.. ",
    "BirkhoffLee": "Thanks.\n. Maybe give users a hint in https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/letsencrypt_service#L106 when they receive this useless error? Like adding the link to this issue in the output. We expect this to work, but it actually fails\nnginx-letsencrypt    | /etc/nginx/certs/*.birkhoff.me /app\nnginx-letsencrypt    | Creating/renewal *.birkhoff.me certificates... (*.birkhoff.me)\nnginx-letsencrypt    | /usr/lib/python2.7/site-packages/acme/jose/jwa.py:110: CryptographyDeprecationWarning: signer and verifier have been deprecat\ned. Please use sign and verify instead.\nnginx-letsencrypt    |   signer = key.signer(self.padding, self.hash)\nnginx-letsencrypt    | ACME server returned an error: urn:acme:error:malformed :: The request message was malformed :: Error creating new authz :: W\nildcard names not supported\nIt actually took me a while to figure out what happened. Thanks for the nice work tho. I\u2019m sorry, I didn\u2019t mean to say that. I\u2019m not a native English speaker so..\nhaha\nI\u2019ll try to dig into the code and see if I can add a hint to the error when\nI have free time :)\nSorry again for what I said, and thanks to everyone for the contribution to\nthe awesome project!\nOn Wed, Apr 25, 2018 at 2:23 PM Nicolas Duchon notifications@github.com\nwrote:\n\n@BirkhoffLee https://github.com/BirkhoffLee \"expect this to work\"\n\"useless error\" ... nice tone there.\nBTW the \"useless error\" actually comes from simp_le, not from this\ncontainer's code.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/319#issuecomment-384173713,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHxUf9jjsuyAqnU95EOfvJuJM1sQCOPEks5tsBZ9gaJpZM4RmAk2\n.\n. Thanks \ud83d\ude04\n\nOn Wed, Apr 25, 2018 at 2:50 PM Nicolas Duchon notifications@github.com\nwrote:\n\nMy bad, I did not realize you were a non native english speaker. \ud83d\ude05\nYou're right with the fact that some warnings about unsupported features\n(as of now) like ACME V2 endpoints and wildcard certificates should be\nadded. I'll try to add this to dev this week.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/319#issuecomment-384178784,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHxUf2i0qWuzak52cgRseaj98kZ9vYikks5tsByhgaJpZM4RmAk2\n.\n. \n",
    "mickaelperrin": "See the PR #140 it was created for this purpose.. Any problem with my PR ?. ",
    "andrewheald": "Many thanks, Mickael. I'll try it out in the coming days and look forward to your change going mainstream.. ",
    "shageman": "@victor-lund I have been seeing the same error. Try it without LETSENCRYPT_TEST=true. For the the error seems to go away (I can't confirm that everything works because I am still having other issues with the setup).. ",
    "victor-lund": "@shageman A big thanks - I can confirm that the issue was indeed the \"LETSENCRYPT_TEST\" feature - it appears to be broken causing the failures I've been having. \n. @JrCs This should probably be labeled as a bug. I do use the :latest tag, and the image i'm using was created in september 2017.\nI can confirm that the certificates are getting updated properly but that the nginx service is not reloaded as it needs to be after a certificate has been renewed. Im surprised that not everyone is encountering this issue... . @buchdag Well, Everything is working except for the nginx service not reloading. I can't swear on the fact that all settings are properly made. Which variables are needed to restart nginx after a certificate has been successfully renewed?. @buchdag Can you clearify how you forced the renewal of a given certificate? I've been looking for this feature before with no success.\nI'd also like to see a working compose stack file example, as requesten by @jasonchi38 . @buchdag thanks for your very detailed answers! I will take a closer look later this week and investigate if they solve my problems. Please let me know when the force renew works as expected - this is principally a very handy feature. . @buchdag I haven't had the time to look into it properly, but I believe it has been fixed since I'm not having any issues with my certificates for quite a while. I'll close now - if something shows up i'll re-open!\nThanks! :) . ",
    "dannyim": "I'm having this issue too, and it looks like this is due to the simp_le client using an older version of the acme-python library.  In particular, the failure happens here where the api directory endpoint returns some directory fields that the acme-python library does not recognize.  \nIt looks like this commit fixes the issue with the acme-python library, so I think this can be fixed if the simp_le client uses acme 0.6.0 or greater.. ",
    "nathang21": "Can confirm after much troubleshooting, removing the test let everything\nstarted working.\nOn Sat, Nov 26, 2016 at 11:46 PM Dan I notifications@github.com wrote:\n\nI'm having this issue too, and it looks like this is due to the simp_le\nclient using an older version of the acme-python library. In particular,\nthe failure happens here\nhttps://github.com/certbot/certbot/blob/v0.5.0/acme/acme/messages.py#L140\nwhere the api directory endpoint returns some directory fields that the\nacme-python library does not recognize.\nIt looks like this commit\nhttps://github.com/certbot/certbot/commit/6f9e28fccad96c19b3fd58560d5c6ddba8201d04\nfixes the issue with the acme-python library, so I think this can be fixed\nif the simp_le client uses acme 0.6.0 or greater.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/125#issuecomment-263107224,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHgqJrq3zrd0JP7hvsJMHJzahwjdh6iBks5rCTVRgaJpZM4K7jt5\n.\n. \n",
    "ObjectiveTruth": "Is there a workaround for this? or ETA on fix?. ",
    "helderco": "@teohhanhui #181 is only for the joined jwilder/nginx-proxy container, not separate jwilder/docker-gen and nginx. \nBut #231 is another approach using a label and should solve this as well.. Removing containers didn't help for me. Still failing CA verification (with docker cloud).. I need this, if you hadn't, I would! \ud83d\udc4d . I found an issue with containers getting redeployed during letsencrypt lifecycle, so I made my own attempt with #231. It's working in production right now, with the helder/letsencrypt-nginx-proxy-companion fork (temporary until the PR is merged).. #231 was merged so this can be closed.. That only delays the problem, when those new certificates need to be renewed again.\nAny solution yet?. Removing the certificates doesn't help me. It creates empty folders for each domain, same validation error. I have a certificate that expires tomorrow, what to do?. I use docker cloud, with the following stack:\nletsencrypt:\n  image: 'jrcs/letsencrypt-nginx-proxy-companion:latest'\n  restart: always\n  volumes:\n    - '/var/run/docker.sock:/var/run/docker.sock:ro'\n  volumes_from:\n    - nginx\nnginx:\n  image: 'jwilder/nginx-proxy:alpine'\n  labels:\n    com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'\n  ports:\n    - '80:80'\n    - '443:443'\n  restart: always\n  volumes:\n    - '/root/nginx/certs:/etc/nginx/certs'\n    - '/root/nginx/conf.d:/etc/nginx/conf.d'\n    - '/root/nginx/vhost.d:/etc/nginx/vhost.d'\n    - '/root/docker-gen/nginx.tmpl:/app/nginx.tmpl:ro'\n    - '/var/run/docker.sock:/tmp/docker.sock:ro'\n    - '/apps/letsencrypt:/usr/share/nginx/html'\n    - '/apps:/var/www'\n    - '/root/nginx/htpasswd:/etc/nginx/htpasswd'. Could it be that the CA authorization doesn't follow redirects? It's trying to access the http, but it has a permanent redirect to https.\nThis could explain why it works the first time, but not on renewal. And why it works when we paste the URI into the browser. It's giving timeouts, when trying to access.\nI'm going to try to change the template to add the location to the redirects.. Still giving timeout without the redirects.. Could it be an issue with ipv6?. It was indeed the IPV6!\nThe CA authorization chose ipv6 over ipv4. I remember docker having some issues with IPV6, which will need some further testing in my setup.\nAfter removing the AAAA record for my domain, the conection went successfully through IPV4 and the certificate got renewed.. Docker has support only for IPv4 by default, I'll probably just need to enable the dual stack in the daemon at this point. I'll try it later when I can. \nIt makes sense that LE would prefer IPv6 since it's the future. We should be pushing everyone to it as much as possible. . Did you have to do anything for IPv6 or does it work by default?. For anyone getting here in need of troubleshooting, here's how you know if the problem is IPv6.\nIf you run the container with debug on (DEBUG=true), you can see why a validation failed. You'll see something like this in the logs:\n{\n  \"type\": \"http-01\",\n  \"status\": \"invalid\",\n  \"error\": {\n    \"type\": \"urn:acme:error:connection\",\n    \"detail\": \"Fetching http://example.org/.well-known/acme-challenge/GoXuMZ3iUg_-fowOA51_RlN8tiXHWqeCjbKMnR5C9T4: Timeout\",\n    \"status\": 400\n  },\n  \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/8Fo11ildCGTTidlkONH1Ib6xr_-rOTrlk3dE22D1t6o/1351010203\",\n  \"token\": \"GoXuMZ3iUg_-fowOA51_RlN9tiXHWqeCjbKMnR5C9X4\",\n  \"keyAuthorization\": \"GoXuMZ3iUg_-fowOA51_RlN9tiXHWqeCjbKMnR5C9X4.Ev_AZ-22qa96Oz2eHtD2vI8hwC_U5JPd0cFHOpCxg6E\",\n  \"validationRecord\": [\n    {\n      \"url\": \"http://example.org/.well-known/acme-challenge/GoXuMZ3iUg_-fowOA51_RlN9tiXHWqeCjbKMnR5C9X4\",\n      \"hostname\": \"example.org\",\n      \"port\": \"80\",\n      \"addressesResolved\": [\n        \"189.162.145.42\",\n        \"2a43:a0b1:1:a1::65:5101\"\n      ],\n      \"addressUsed\": \"2a43:a0b1:1:a1::65:5101\",\n      \"addressesTried\": []\n    }\n  ]\n},\nNotice that addressUsed is using the IPv6 address.\nIf you have a AAAA DNS record, make sure the address is reachable with a tester such as http://ipv6-test.com/validate.php.. Agreed, but that's done when merging. Afterwards, my fork will be deleted. \ud83d\ude3a . I think this should be: \n[[ -z \"${NGINX_DOCKER_GEN_CONTAINER:-}\" ]] && get_nginx_gen_cid \nto allow still using a manual environment variable when you do have access to a static name.. Remove this condition to make it optional, don't error out. Document it instead.. Out of scope, changes should be discarded.. Actually there is, because it defaults to an empty string and I kept the logic from #181 where it checks for the value \"true\": jq -r '.[] | select( .Labels[\"'$1'\"] == \"true\")|.Id'\nWe would have to change this query, I'm not opposed to it.. Actually I think it's better to disregard the value, since it doesn't matter: jq -r '.[] | select( .Labels[\"'$1'\"])|.Id' \ud83d\udc4d . I'll look into that!. It's better for performance but also makes it easier to filter by simply a label or label=value. \nI improved my docker-label-sighup, based on this. \nIt's cooler now, because it allows me to do this: -notify \"docker-label-sighup com.docker.swarm.service.name=frontend_nginx\"\nSo I can reuse the labels that already exist.. ",
    "ento": "Confirmed #231 works with Amazon ECS by using the dockerLabels property:\n{\n  {\n    \"image\": \"nginx\",\n    \"dockerLabels\": {\n      \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\": \"\"\n    },\n    ...\n  },\n  {\n    \"image\": \"ento/docker-nginx-gen-with-tpl\",\n    \"dockerLabels\": {\n      \"com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen\": \"\"\n    },\n    ...\n  },\n  ...\n}. ",
    "kosli": "by using a simple socat proxy container i could solve that in a very elegant way. \nhttps://github.com/silasdavis/socat-proxy-docker. @JrCs are you going to use that fix too?. @Rid just replacing the two images doesn't work for me, I get the following error:\n\nletsencrypt-nginx-proxy-companion[999]: 2017/01/13 11:00:13 Error creating generator: Bad endpoint: Invalid bind address format: -watch \nletsencrypt-nginx-proxy-companion[999]: /app/start.sh: line 5: kill: (28) - No such process \n\nis the rest of the instruction from JrCs's version the same? e.g. i am using docker compose (v1)\n. @rid now it seems to be another problem?\nnginx-gen                            | Usage: docker-gen [options] template [dest]\nnginx-gen                            |\nnginx-gen                            | Generate files from docker container meta-data\netc.....\ni changed the container names to be nginx, nginx-letsencrypt, nginx-gen as i thought this may be an issue too... but didn't help. . it seems that somehow the certificates got renewed with the original version from jrcs. . @JrCs for me it works with the version from @Rid \nhave you merged his changes into your version? i could test on another host where some certs will need to be renewed soon. . ",
    "amlwwalker": "same issue. As far as I can tell the webroot method is the issue.\nI can't see how the endpoints are meant to be generated so that letsencrypt can callback to the .well-known endpoint on my server for each container that needs a certificate.\nI know that letsencrypt has an \"nginx\" mode which may be useful for this, and as others seem to be having issues, perhaps someone can outline what should happen, or whether moving to the nginx method is better?\n. ",
    "joeknock90": "Is this project abandoned? . I was unable to get it working with any of the posted .tmpl files. I've tried basically all of them and scoured for even older ones. If you have a suggestion on one I would be happy to give it a shot just to reduce clutter in the bug reports. . Does anyone have any idea what this could be?\nI cannot get this to work for the life of me. It worked fine 2 months ago. Ever since I rebuild my server it will never authorize the certs. \nDNS works fine, and I can access everything fine via HTTP. \nAs soon as I try to generate certs, nothing.... Sorry, just got off a vacation:\n@JrCs I just switched to a new hosting provider and now am running your latest container version. It is working. Not sure what the problem was before but those machines are gone. . Glad it isn't just me!. I've got #128  open for it and someone opened #130 for a different breaking issue. I suggest posting logs just in case it's different than one of those. .  @fayce how did you set up your containers? I've tried everything. . @fayce I've got no idea how i'm screwing this up, or why it's not working for me. \nThis is basically what I did:\nhttps://github.com/joeknock90/docker-compose/blob/master/docker-compose.yml. @danhimalplanet working on your solution now! Will report back with nginx.tmpl. I can't get the version 2 to run. keep getting ERROR: Service \"nginx\" uses an undefined network \"proxy-tier\" even though I've created the network. . Ah, I'm running docker-compose from the fedora repos, which is apparently 1.8.1\nTime to PIP it up. . Same error with docker-compose 1.9.0 for me. \nNevermind. I'm a moron. I got it. Sorry!\nEither way same thing. CA maked some authorizations as invalid error. \nGoddamn this is frustrating. \nI used the nginx.tmpl that you provided here. . @fayce Ok, I think I get what you are saying. I might have misinterpreted how this works. Previously, I was setting this up with all three containers, THEN, whichever containers I set up after that I would pass those environment variables. \ni.e.\nnginx\nnginx-gen\nnginx-letsencrypt\nTHEN I would pull my nextcloud container and pass\n-e VIRTUAL_HOST=cloud.mydomain.tld\n-e LETSENCRYPT_HOST=cloud.mydomain.tld\n-e LETSENCRYPT_EMAIL=joe@mydomain.tld\nIsn't that supposed to be how it works basically?\nNextcloud is just an example, I had this working for several other services I am hosting as well. . This doesn't fix the problem for me. I edited the nginx_location.conf in the container and I get the same error for all of my containers. . Same thing for me. \n/.well-known/acme-challenge/X is totally accessible for all my containers but Letsencrypt gives me a \"Status 400\" and says it cannot connect. . @nachokb , could you walk me through what you did to fix it? DNS makes sense, but I haven't changed my DNS config in months. It's been basically the same since I set it up the first time. \nAs far as I can tell all of my dns settings are completely correct. \nWhen I don't use the letsencrypt container I can access all of my hosted apps through http. This happened to me to. Logs were saying that the cert didn't require renewal. I ended up moving the old cert to a backup folder and it generated a new one after that and I sort of just assumed that I was doing something wrong but maybe it is an issue. . ",
    "thatbudakguy": "having this issue when using fix from #130.. @weaktyper right - just thought it worth mentioning that I could replicate this issue on the docker image that is provided in discussion of #130 as well as the default docker image.. @alastaircoote fix still runs into #128 for me.. @alastaircoote absolutely; sorry for off-topic - just wondering if anyone else has deployed the fix and also run into #128, since I'm at a loss. ",
    "weaktyper": "This is not the same issue as #130. The exception is different.. @thatbudakguy Ok, I thought you meant it was the same issue, now I understand you are having the same issue. Issue 107 seems quite similar to this one. In fact this could be a duplicate of #107 (not sure).. @joeknock90  Not so sure what template to use. If I have time some day I might have a look.. . ",
    "gtrias": "I'm having exact same problem. I'm using the forked image from #130 which fixes the Deserialization error, but now I cannot renew any certificate getting the same errors from this issue... It used to work before I'm not sure if it's related with #130 fix.. ",
    "Braintelligence": "Same issue, also using the #130 fix.\n@alastaircoote did you run in such problems yet?. @danhimalplanet Hi, I'm trying to use your yml and tmpl but for some reason nginx is timing out. Also the use of VIRTUAL_NETWORK and the proxy-tier is new to me, is it mandatory? I used docker network create to satisfy the requirement for now.\nEDIT: For some reason nginx uses this IP as upstream address for my vhosts: 172.17.0.4 in the default.conf. Seems to be related to this: https://github.com/jwilder/nginx-proxy/issues/122\nEDIT2: Adding network_mode: \"bridge\" to the nginx part I could stop using the nginx-proxy network which makes everything work again as expected. New letsencrypt-certs are also generated. Thank you very much @danhimalplanet.\nEDIT3: I still have the mentioned IP in the nginx.conf, though.. @danhimalplanet Well everything seems to work but it looks like I need to run everything (even linked containers) in bridged mode now. (I didn't use the nginx-proxy network.) Also the upstream IP is still there in the nginx.conf.\nI'm not sure if I'm running a patchwork configuration here. \ud83d\ude04 . When first using your template I was prompted to first create a network named \"nginx-proxy\" before being able to use your yml.\nI did that but then I realized from the example services in your yml, that I would have to use VIRTUAL_NETWORK from there on, which I didn't want. So I changed it to bridged mode.\nYeah I guess running everything in bridge is alright; it is the default setting in shipyard anyway. I had to do so much with docker compose today, that I didn't realize all my database-containers are bridged anyway \ud83d\ude04.. @danhimalplanet \nfor me the confs look like this:\nupstream subdomain.domain.tld {\n   # <CONTAINER_NAME>\n   server 172.17.0.4:<VIRTUAL_PORT>;\n}\nIt seems to work for every container I have set up till now, but I'm struggling with setting up a specific container right now and don't know what the cause is \ud83d\udc45 . @danhimalplanet \nsudo docker version says 1.12.4\nsudo docker-compose version says 1.9.0. @danhimalplanet Actually you had docker 1.12.5 instead of 1.12.4. After upgrading, destroying the .conf and restarting the new .conf still contains the strange IP-address in the upstream. ^^. ",
    "alastaircoote": "@Braintelligence no, I don't get this issue at all, sorry. Not sure what the cause is.. It's due to a change in the TOS. @thomastweets has been good enough to create a new version that works:\nhttps://hub.docker.com/r/thomastweets/docker-letsencrypt-nginx-proxy-companion/\nBut FYI, it doesn't work with the staging server.. Yes, I take it back - it did work for me, and issued a cert for one subdomain. But now I'm trying with another and it's failing, so I'm not sure what is going on. The core problem seems to be relying on simp_le, which seems to be kind of dead:\nhttps://github.com/kuba/simp_le/issues/118. OK, I believe I have a fix. But I should preface this by saying that I am not well versed in either LetsEncrypt or SSL certs in general, so if I were you I wouldn't trust me.\nAs mentioned in the issue I linked to, simp_le pull request #112 seems to fix the issue, but it hasn't been merged. So I made a fork of this repo that switches to the acme-0.8 branch before it builds:\nhttps://github.com/alastaircoote/docker-letsencrypt-nginx-proxy-companion\nThen put that on Docker hub:\nhttps://hub.docker.com/r/alastaircoote/docker-letsencrypt-nginx-proxy-companion/\nIt's working for me. But as I say, this needs someone with more knowledge than me to look it over if you're going to use it in a production environment or anything like that.. Agree on keeping this open, if only so that people can find it on the issues page (it's how I found it).\nI've submitted pull request #132 to incorporate my change into this repo - I'd much rather do that than have more and more people using my branch, which I won't be actively maintaining.. @thatbudakguy that looks like a totally different error to me - this only fixes the Wrong directory fields error others have encountered.. AFAIK, the problems described in this issue appear fixed when using the branch I made, and will hopefully go away when the pull request is merged\nThis doesn't apply to the problems in #128 though.. @trash-anger try using https://hub.docker.com/r/alastaircoote/docker-letsencrypt-nginx-proxy-companion/. Happy to help. I strongly encourage everyone move back to this repo as I won't be maintaining my fork!. ",
    "Rid": "I've forked and fixed the packages required to get this working again, you need to swap out docker-gen for https://hub.docker.com/r/riid/docker-gen-multi/ and swap out docker-letsencrypt-nginx-proxy-companion for https://hub.docker.com/r/riid/docker-letsencrypt-nginx-proxy-companion-multi/\nYou can use all the previous settings, however I've also added the feature to watch multiple docker endpoints on the same host.. @kosli try now please. I've forked and fixed the packages required to get this working again, you need to swap out docker-gen for https://hub.docker.com/r/riid/docker-gen-multi/ and swap out docker-letsencrypt-nginx-proxy-companion for https://hub.docker.com/r/riid/docker-letsencrypt-nginx-proxy-companion-multi/\nYou can use all the previous settings, however I've also added the feature to watch multiple docker endpoints on the same host.. @thiagotalma I don't think the dev is currently active, I'm happy to make a PR if he's around, but judging by the lack of response he may be busy. ",
    "royalaid": "@Rid Thank you for the fix, the certs are finally working again.. ",
    "dasmaeh": "Still not working for me. I and letsencrypt are always getting an error 404 on mydomain.tld/.well-known/acme-challenge/\nOnly error message is as in the original issue.\nAny ideas what could be the reason?\nEdit: My mistake, firewall wasn't properly forwarding ports 80 and 443 from outside. Testing from inside the network worked just fine of course.\nThe container is working perfectly well for me!. ",
    "Dabada": "Thank's @alastaircoote. I'll consider this for production. Do you know why it doesn't work with the staging server ?  . @alastaircoote Great ! Works for me too (staging mode). I'll try with production mode.. @alastaircoote your fix is the good one. It works in production too. Thank's. @mlaitinen (and others), you are right. The issues is reopened.. ",
    "jsha": "I agree that seems like the right choice. Older version of the acme package had a bug where they would fail if presented with any fields in the directory that they didn't recognize. Upgrading to a more recent acme package fixes it.. ",
    "pasgou": "It needs to stay open. I had the problem yesterday and this issue was necessary . I use the @Rid fork and a fork i made to correct this project in the alastaircoote/docker-letsencrypt-nginx-proxy-companion fork. \nMy pull request includes the @Rid work and permits to reduce the docker image size :\nhttps://github.com/alastaircoote/docker-letsencrypt-nginx-proxy-companion/pull/2\nI'd welcome advices.. Hello\nI made a PR here : https://github.com/alastaircoote/docker-letsencrypt-nginx-proxy-companion/pull/2 and it includes the @Rid work.\nHow to make the same PR here?\nUpdate : PR proposed. I am sorry to not know how to do that. My contrib is know used in all forks and is difficult to split. Rid made a fork using is fork of docker-gen which he calls \"docker-gen-multi\". . But for this one (docker-gen-multi), I don't know if it works. Pay attention.. ",
    "Toub": "@Dabada this project is broken and a lot of users experiment this problem in production!\nThis issue should be re-open and @alastaircoote temp fixed should be merge until a better solution is fount.. ",
    "leosprikryl": "@thatbudakguy Yes, I am having exactly the same problem. I use @alastaircoote fork and I am still running into #128. . ",
    "jakubgs": "Just today I tried using this image for the first time and I encountered this issue.. ",
    "trash-anger": "The Issue is not fixed for me using @thomastweets ...\nStill get this : \n```\nCreating/renewal gitlab.domain.tld certificates... (gitlab.domain.tld)\n2016/12/13 15:37:35 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016/12/13 15:37:35 Watching docker events\n2016/12/13 15:37:35 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2016-12-13 15:37:36,246:INFO:simp_le:1211: Generating new account key\n2016-12-13 15:37:40,587:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nTraceback (most recent call last):\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1401, in main\n    return main_with_exceptions(cli_args)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1386, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1282, in persist_new_data\n    client = registered_client(args, existing_data.account_key)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1224, in registered_client\n    client = acme_client.Client(directory=args.server, key=key, net=net)\n  File \"build/bdist.linux-x86_64/egg/acme/client.py\", line 63, in init\n    self.net.get(directory).json())\n  File \"build/bdist.linux-x86_64/egg/acme/messages.py\", line 169, in from_json\n    raise jose.DeserializationError(str(error))\nDeserializationError: Deserialization error: Wrong directory fields\nUnhandled error has happened, traceback is above\n```. Oh yeah !!!! Thank you !!! ;) \ud83d\udc4d . ",
    "smyth64": "@alastaircoote hey man you are really dope! :D. @fayce Really?\nWe still get this error\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1401, in main\nnginx-ssl    |     return main_with_exceptions(cli_args)\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1386, in main_with_exceptions\nnginx-ssl    |     persist_new_data(args, existing_data)\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1282, in persist_new_data\nnginx-ssl    |     client = registered_client(args, existing_data.account_key)\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1224, in registered_client\nnginx-ssl    |     client = acme_client.Client(directory=args.server, key=key, net=net)\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/acme/client.py\", line 63, in __init__\nnginx-ssl    |     self.net.get(directory).json())\nnginx-ssl    |   File \"build/bdist.linux-x86_64/egg/acme/messages.py\", line 169, in from_json\nnginx-ssl    |     raise jose.DeserializationError(str(error))\nnginx-ssl    | DeserializationError: Deserialization error: Wrong directory fields. I got the same problem. Any solution? =/. Now it works!\nI just deleted all the old certificates and restarted the container of my website.\nWeird... but it works!. ",
    "necevil": "Thanks @alastaircoote\nWas trying to figure this one out for quite a while.\nYour solution worked perfectly.. ",
    "pavel64-sutyrin": "@alastaircoote works like a charm, thanks, bro!. ",
    "uschtwill": "Thanks @JrCs, for not forsaking us! ;) Switching back from @alastaircoote's. \nAnd thanks @alastaircoote for the quick fix!. ",
    "codejamninja": "I'm getting the same error.. ",
    "cybergrunge": "The unexpected behaviour occurs at the first attempt to connect with https to a newly created webserver container (creation of the folder in \u201cpath/to/certs\u201d, no generation of certs and keys). Where can I find logs of this precise action?. My bad. I deleted the container and tried again, with no problem this time. Sorry for the inconvenience.. ",
    "fayce": "its working again. I think letsencrypt made a modification in their API. @smith64fx yesterday I switched to alastaircoote image https://hub.docker.com/r/alastaircoote/docker-letsencrypt-nginx-proxy-companion/ but it was still not working, I was having issues serving the .well-known/ challenge... \nbut today it suddenly went like a charm. @joeknock90 try with the example https://github.com/fatk/docker-letsencrypt-nginx-proxy-companion-examples ( the v1 with docker-compose ) , make sure your domain or subdomain really points to your server\nin your docker-compose.yml replace JrCs/docker-letsencrypt-nginx-proxy-companion by alastaircoote/docker-letsencrypt-nginx-proxy-companion \nand add LETSENCRYPT_TEST=true in the environment section of your app's container to avoid hitting the quota\n. @joeknock90  I think you are missing one more container, the one that should be proxied by the nginx. \nshould be a webserver exposing port 80 only\nin its environment you should add:\nenvironment:\n- VIRTUAL_HOST=yourdomain.com               \n- LETSENCRYPT_HOST=yourdomain.com\n- LETSENCRYPT_EMAIL=email@yourdomain.com\n- LETSENCRYPT_TEST=true\nfor the certificates, I suggest you to use a volume 'nginx_certs' that you would declare in the end of your docker-compose like this\nvolumes:\n    nginx_certs:\n        driver: local\nthen on your nginx (proxy) and your letsencrypt-companion container you would link the volume like so:\nvolumes:\n- nginx_certs:/etc/nginx/certs:rw\n( make it ro for nginx ). @joeknock90 the important thing is that in your Ngix /etc/nginx/conf.d/default.conf you should see the IP address of your app's container in the upstream{} section \nThis happen when docker-gen compiles that nginx.tmpl , \nBut if you've already compiled it and built the 3 containers first , I wonder how it would get the ip of your app. @danhimalplanet indeed you are right, auth would fail (on the browser) as you would receive a selfsigned-like certificate instead of a valid one\nBut it's the best thing to do while trying to make it work without burning your letsencrypt quotas. @bkleef have you tried alastaircoote image ? That's what I'm using . ",
    "jeisses": "@smith64fx I think your error is the same as #130 - using the fix by alastaircoote worked for me. \nHope this gets merged soon. ",
    "bkleef": "@fayce I do have exactly the same issue as @smith64fx in jrcs/letsencrypt-nginx-proxy-companion:latest:\nDec 16 00:43:34 srv.example.com sh[5327]: Traceback (most recent call last):\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1401, in main\nDec 16 00:43:34 srv.example.com sh[5327]:     return main_with_exceptions(cli_args)\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1386, in main_with_exceptions\nDec 16 00:43:34 srv.example.com sh[5327]:     persist_new_data(args, existing_data)\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1282, in persist_new_data\nDec 16 00:43:34 srv.example.com sh[5327]:     client = registered_client(args, existing_data.account_key)\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1224, in registered_client\nDec 16 00:43:34 srv.example.com sh[5327]:     client = acme_client.Client(directory=args.server, key=key, net=net)\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/acme/client.py\", line 63, in __init__\nDec 16 00:43:34 srv.example.com sh[5327]:     self.net.get(directory).json())\nDec 16 00:43:34 srv.example.com sh[5327]:   File \"build/bdist.linux-x86_64/egg/acme/messages.py\", line 169, in from_json\nDec 16 00:43:34 srv.example.com sh[5327]:     raise jose.DeserializationError(str(error))\nDec 16 00:43:34 srv.example.com sh[5327]: DeserializationError: Deserialization error: Wrong directory fields\nDec 16 00:43:34 srv.example.com sh[5327]: Unhandled error has happened, traceback is above\nLooks like it's an issue in simp_le (https://github.com/kuba/simp_le/issues/118).\nThis fork https://github.com/zenhack/simp_le contains fixes!\nBTW: looks like we got a duplicate: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/130.. @fayce @danhimalplanet yeah alastaircoote/docker-letsencrypt-nginx-proxy-companion:latest works, thanks!\nI'm running the stuff by systemd which works great:\n```\n[Unit]\nDescription=nginx\nRequires=docker.service\nAfter=docker.service\n[Service]\nEnvironmentFile=/etc/environment\nTimeoutStartSec=0\nExecStartPre=/usr/bin/mkdir -p /etc/nginx/certs\nExecStartPre=/usr/bin/mkdir -p /etc/nginx/conf.d\nExecStartPre=/usr/bin/mkdir -p /etc/nginx/vhost.d\nExecStartPre=-/usr/bin/docker kill %p\nExecStartPre=-/usr/bin/docker rm %p\nExecStartPre=-/usr/bin/docker pull nginx:latest\nExecStart=/bin/sh -c '/usr/bin/docker run \\\n   --name %p \\\n   -v /etc/nginx/certs:/etc/nginx/certs:ro \\\n   -v /etc/nginx/conf.d \\\n   -v /etc/nginx/vhost.d \\\n   -v /usr/share/nginx/html \\\n   -p ${COREOS_PUBLIC_IPV4}:80:80/tcp \\\n   -p ${COREOS_PUBLIC_IPV4}:443:443/tcp \\\n   nginx:latest'\nRestart=always\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n\n[Unit]\nDescription=nginx-gen\nRequires=docker.service\nAfter=docker.service\n[Service]\nEnvironmentFile=/etc/environment\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/curl --fail -L -o /etc/docker-gen/templates/nginx.tmpl -z /etc/docker-gen/templates/nginx.tmpl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl\nExecStartPre=-/usr/bin/docker kill %p\nExecStartPre=-/usr/bin/docker rm %p\nExecStartPre=-/usr/bin/docker pull jwilder/docker-gen:latest\nExecStart=/bin/sh -c '/usr/bin/docker run \\\n   --name %p \\\n   --volumes-from nginx \\\n   -v /etc/docker-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n   -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n   jwilder/docker-gen:latest \\\n   -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf'\nRestart=always\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n\n[Unit]\nDescription=nginx-letsencrypt\nRequires=docker.service\nAfter=docker.service\n[Service]\nEnvironmentFile=/etc/environment\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill %p\nExecStartPre=-/usr/bin/docker rm %p\nExecStartPre=-/usr/bin/docker pull alastaircoote/docker-letsencrypt-nginx-proxy-companion:latest\nExecStart=/bin/sh -c '/usr/bin/docker run \\\n   --name %p \\\n   -e NGINX_DOCKER_GEN_CONTAINER=\"nginx-gen\" \\\n   -e DEBUG=\"true\" \\\n   --volumes-from nginx \\\n   -v /etc/nginx/certs:/etc/nginx/certs:rw \\\n   -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n   alastaircoote/docker-letsencrypt-nginx-proxy-companion:latest'\nRestart=always\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n```. ",
    "bigUNO": "Ahhh, that's make sense. Thanks for the response!. ",
    "thiagotalma": "@Rid Would not it be better if you tried to collaborate with the original project rather than create a \"clone\"?. ",
    "codev": "Why was this reverted? It seems like a really useful feature.. ",
    "ladrua": "Yeah, this is definitely useful. . Just tested this feature, works like a charm. Personally really need this in production yesterday... \ud83d\ude3a \nHow are the changes to the letsencrypt_user_data file picked up/triggered though?. Thanks. Thats fine. I had some issues all of a sudden on a new build of dev, had to RUN chmod +x /app/signal_le_service && chmod +x /app/letsencrypt_service because I got Permission Error. Also after, the chalange configs are left behind in the conf.d(example.com-standalone.conf) folder, and we get errors due to double definition of hostnames(we have other configs for the actuall services).. Oh, And in /app/functions.sh:45 I got a complaint that the access_log line was missing a suffix ; . @buchdag Thanks! I'll have a go later. Also, does it create the challenge configs even though renewal is not necessary? Must it? Just realized that this recreation happend every time(hour) the service was triggered. So if I manually deleted the standalone confs, they came back an hour later.. And another thought, how are we sure the challange configs are used in favour of the manual configs you have for the underlying services during renewal/generation? Do we need some sort of naming convention for the manual configs? I have added a subfolder to the conf.d directory called manuals that I have included in the nginx.conf as a import after the include /etc/nginx/conf.d/*.conf line, just to be sure they are loaded last. But that requires changes in the nginx-proxy containers config file.. I see, I guess there must be a naming convention for the standalone configs(maybe matching the LETSENCRYPT_STANDALONE_CERTS array defeintions?), and the service disable/re-enable them somehow?. Just did a rebuild, I now get this error from docker logs unknown log format \"vhost\" in /etc/nginx/conf.d/example.com-standalone-cert.conf:4 .. Hm the domain starts with da so it tries to load the config before the default.conf and thats where the vhost logging is defined? I also get \n```\n/etc/nginx/certs/example.com /app\nCreating/renewal example.com certificates... (example.com)\n2018-07-06 09:48:46,879:INFO:simp_le:1564: Certificates already exist and renewal is not necessary, exiting with status code 1.\n/app\n/etc/nginx/certs/example2.com /app\nCreating/renewal example2.com certificates... (example2.com)\n2018-07-06 09:48:48,757:INFO:simp_le:1479: Generating new certificate private key\n2018-07-06 09:48:50,552:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/5sRAWYh8XDt0i_Zc7HTh0u61SFcMTvJFF65NUD0c9dE\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\n    return main_with_exceptions(cli_args)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1489, in persist_new_data\n    account_key=client.key, key=None, cert=None, chain=None))\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1195, in persist_data\n    plugin.save(new_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 493, in save\n    key = self.dump_key(data.key)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 436, in dump_key\n    return OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip()\nAttributeError: 'NoneType' object has no attribute 'wrapped'\nUnhandled error has happened, traceback is above\nDebugging tips: -v improves output verbosity. Help is available under --help.\n/app\nReloading nginx proxy (f6a4d720ab48f26ccb1f6ff5ae2b388579098f1547f7b98198123616f6fd3c89)...\n2Custom dhparam.pem file found, generation skipped\nh2018/07/06 09:48:50 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n\ufffd2018/07/06 09:48:50 [emerg] 3852#3852: unknown log format \"vhost\" in /etc/nginx/conf.d/example.com-standalone-cert.conf:4\nnginx: [emerg] unknown log format \"vhost\" in /etc/nginx/conf.d/example.com-standalone-cert.conf:4\n```\nThe full output of the log, there are two domains(example.com and example2.com), the first Create/renewal succeedes, but it seems that it leaves the config behind, and then the second Create/renew fails.. Sorry, I did update my comment a bit with a bit more detailed information.. I think you need to remove the fix for the vhost log_format, as I now get duplicate \"log_format\" name \"vhost\" in /etc/nginx/conf.d/default.conf:31 and I am pretty sure it happened because of my domain name starting with da and hence the config is loaded before the default.conf Not sure how to solve that though.. It still leaves my example.com-standalone-cert.conf it might be because the second domain example2.com fails?\n```\n/etc/nginx/certs/example.com /app\nCreating/renewal example.com certificates... (example.com)\n2018-07-06 10:39:58,610:INFO:simp_le:1564: Certificates already exist and renewal is not necessary, exiting with status code 1.\n/app\n/etc/nginx/certs/example2.com /app\nCreating/renewal example2.com certificates... (example2.com)\n2018-07-06 10:40:00,421:INFO:simp_le:1479: Generating new certificate private key\n2018-07-06 10:40:02,160:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/BG_wfHlxgf2zf3W0SKzcCBeapDFGszBU56tGoH7Hdp0\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\n    return main_with_exceptions(cli_args)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1489, in persist_new_data\n    account_key=client.key, key=None, cert=None, chain=None))\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1195, in persist_data\n    plugin.save(new_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 493, in save\n    key = self.dump_key(data.key)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 436, in dump_key\n    return OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip()\nAttributeError: 'NoneType' object has no attribute 'wrapped'\nUnhandled error has happened, traceback is above\nDebugging tips: -v improves output verbosity. Help is available under --help.\n/app\nReloading nginx proxy (f6a4d720ab48f26ccb1f6ff5ae2b388579098f1547f7b98198123616f6fd3c89)...\n2Custom dhparam.pem file found, generation skipped\nh2018/07/06 10:40:02 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n\ufffd2018/07/06 10:40:02 [emerg] 3929#3929: duplicate \"log_format\" name \"vhost\" in /etc/nginx/conf.d/default.conf:31\nnginx: [emerg] duplicate \"log_format\" name \"vhost\" in /etc/nginx/conf.d/default.conf:31\n``. Looks good to me with the latest changes, but the change of name convention tostandalone-cert-$domain.conf` would not work for say.. xxx.com.. Sorry, I was thinking about it all wrong. Yes, it should be fine \ud83d\udc4d \nHope this makes it to master as this is super usefull, well done!. @buchdag I just updated with the docker image, and I am still having issue that the standalone-cert*.conf files are beeing created at every check, and then not removed in conf.d folder. Casuing problems with overriding some of my configs that are imported after the conf.d import. Other then that, it is working great!. @buchdag I cant actually be sure that they werent left there from previous build. Will try and do some more tests this evening. Thank you! . I can confirm that its working as expected now. Have it running on two different live environments, and its looking good so far.. All I can say is that I've been running them since I last mentioned it, in two production environments,  without any issues.. ",
    "nachokb": "I gotta add that I can access http://example.org/.well-known/acme-challenge/deadbeef from my computer.... @JrCs you're correct. It's an incorrect DNS record on my part (+ DNS cache).\nThanks and apologies! :cry:.\n@joeknock90 I'm closing this issue as it's unhelpful. If you still find something wrong, please create a new one.. minor: this project is not renamed, -multi is not correct here. ",
    "Hermsi1337": "+1\nExperiencing the same problem.. Your trial works fine, maybe this one is worth a pull-request since no one seems to have an alternative solution?. Sorry for bothering @JrCs ... what do you think about this?. ",
    "pi0": "@Hermsi1337 I can also confirm this works well with latest docker version 1.13.0 :)\nMaybe we can make a PR from #741c683 with some docs and of course permissions of @djeeg  :)\nMeanwhile you can try using this patched image : banian/letsencrypt. @mantenpanther @mbaig25 What image are you currently using?. @mantenpanther The problem is you are missing NGINX_PROXY_SWARM_CONTAINER label. It is important because this way only we can discover main proxy service in swarm from lets-encrypt container. Here is our working compose file : \n```yaml\nversion: '3'\nservices:\nproxy:\n    image: banian/nginx-proxy\n    deploy:\n       placement:\n            constraints:\n                - node.hostname==master_node_hostname_important\n    labels:\n        - NGINX_PROXY_SWARM_CONTAINER=true\n    volumes:\n        - /var/run/docker.sock:/tmp/docker.sock:ro\n        - /data/local/nginx/vhost.d:/etc/nginx/vhost.d\n        - /data/local/nginx/html:/usr/share/nginx/html\n        - /data/local/certs:/etc/nginx/certs\n        - /data/local/nginx/nginx_log:/var/log/nginx\n    ports: [\"80:80\",\"443:443\"]\n    networks: [edge]\n    restart: always\n\nletsencrypt:\n    image: banian/letsencrypt\n    deploy:\n       placement:\n            constraints:\n                - node.hostname==node2\n    environment:\n        - NGINX_PROXY_SWARM_CONTAINER=true\n        #- DEBUG=true\n    volumes:\n        - /var/run/docker.sock:/var/run/docker.sock:ro\n        - /data/local/nginx/vhost.d:/etc/nginx/vhost.d\n        - /data/local/nginx/html:/usr/share/nginx/html\n        - /data/local/certs:/etc/nginx/certs\n        - /data/local/nginx/nginx_log:/var/log/nginx\n    restart: always\n\nnetworks:\n    edge:\n        external: true\n``. @mbaig25 Please note that this feature is not merged to this repo! So you have to (temporary) use patched imagebanian/letsencrypt` :). ",
    "mantenpanther": "Hi, I'm still not able to get the simple setup (2 containers) running in Docker Swarm v1.13. I'd be happy if anyone could help me out. I'm not sure if I need to specify the full volumes with same path in the letsencrypt-nginx-proxy-companion service, or just the name (I'm a little confused by the new volume-syntax to be honest).\nHere my stack config:\n```\nversion: \"3\"\nvolumes:\n  nginx-conf-vol:\n  nginx-vhost-vol:\n  nginx-share-vol:\n  nginx-certs-vol:\nnetworks:\n  test-net:\n    driver: overlay\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    networks:\n      - test-net\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - nginx-conf-vol:\"/etc/nginx/conf.d\"\n      - nginx-vhost-vol:\"/etc/nginx/vhost.d\"\n      - nginx-share-vol:\"/usr/share/nginx/html\"\n      - nginx-certs-vol:\"./volumes/proxy/certs:/etc/nginx/certs:ro\"\n    deploy:\n      mode: replicated\n      replicas: 1\n      placement:\n        constraints: [node.labels.servertype == web]\nletsencrypt-nginx-proxy-companion:\n    image: banian/letsencrypt\n    networks:\n      - test-net\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./volumes/proxy/certs:/etc/nginx/certs:rw\"\n      - nginx-conf-vol\n      - nginx-vhost-vol\n      - nginx-share-vol\n      - nginx-certs-vol\n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen\n    deploy:\n      mode: replicated\n      replicas: 1\n      placement:\n        constraints: [node.labels.servertype == web]\nmy-testapp:\n    image: testapp\n    networks:\n      - test-net\n    environment:\n      - VIRTUAL_HOST=mydomain.com\n      - VIRTUAL_NETWORK=test-net\n      - VIRTUAL_PORT=80\n      - LETSENCRYPT_HOST=mydomain.com\n      - LETSENCRYPT_EMAIL=mymail@mydomain.com    \n    ports:\n      - \"3000:3000\"\n    deploy:\n      mode: replicated\n      replicas: 1\n      placement:\n        constraints: [node.labels.servertype == app]      \n```\n. I've tried the docker-letsencrypt-nginx-proxy-companion and as you can see from my stack config the banian/letsencrypt images.. @pi0 Thanks for your answers, but still no luck for me. Containers do not start (tried on different hosts/docker engines; tried your file and the fixed one from mbaig25). I think I'll check again when this Issue is solved, can't spend more time ATM.. ",
    "mbaig25": "@mantenpanther I'm having the same problem as you. Very confused about the new volume syntax as well. Were you able to find a solution at all?. @pi0 Thanks for responding. I tried the config you provided but the letsencrypt image fails with the following error message:\n\"task: non-zero exit (1)\"\nHere is my compose file\nyaml\nversion: '3'\nservices:\n    nginx:\n        image: jwilder/nginx-proxy\n        networks:\n            - proxy\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n        labels:\n            - NGINX_PROXY_SWARM_CONTAINER=true\n        volumes:\n            - /etc/nginx/certs:/etc/nginx/certs:ro\n            - /etc/nginx/vhost.d:/etc/nginx/vhost.d\n            - /usr/share/nginx/html:/usr/share/nginx/html\n            - /var/run/docker.sock:/tmp/docker.sock:ro\n        deploy:\n            placement:\n                constraints:\n                    - node.role==manager\n    letsencrypt:\n        image: jrcs/letsencrypt-nginx-proxy-companion\n        networks:\n            - proxy\n        labels:\n            - NGINX_PROXY_SWARM_CONTAINER=true\n        depends_on:\n            - nginx\n        volumes:\n            - /etc/nginx/certs:/etc/nginx/certs:rw\n            - /etc/nginx/vhost.d:/etc/nginx/vhost.d\n            - /usr/share/nginx/html:/usr/share/nginx/html\n            - /var/run/docker.sock:/var/run/docker.sock:ro\n        deploy:\n            placement:\n                constraints:\n                    - node.role==manager\nAny ideas what could be causing this?. @pi0 I tried your suggested image and I'm still getting the same error.\nI used the following command to try it:\nsh\ndocker service create --name letsencrypt-companion \\\n    -l NGINX_PROXY_SWARM_CONTAINER=true \\\n    --network proxy \\\n    --mount \"type=bind,source=/etc/nginx/certs,target=/etc/nginx/certs\" \\\n    --mount \"type=bind,source=/etc/nginx/vhost.d,target=/etc/nginx/vhost.d\" \\\n    --mount \"type=bind,source=/usr/share/nginx/html,target=/usr/share/nginx/html\" \\\n    --mount \"type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock\" \\\n    --constraint 'node.role == manager' \\\n    banian/letsencrypt\nI started nginx-proxy prior to this and already have the volumes created on the manager machine.\nStill no luck. :confused: . ",
    "tve": "I now see that in one of the containers I see an error\n```\nUnhandled error has happened, traceback is above\nDebugging tips: -v improves output verbosity. Help is available under --help.\nSleep for 3600s\nCreating/renewal xyz.example.com certificates... (xyz.example.com)\n2017-01-09 18:16:28,877:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nTraceback (most recent call last):\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1401, in main\n    return main_with_exceptions(cli_args)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1386, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1282, in persist_new_data\n    client = registered_client(args, existing_data.account_key)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1224, in registered_client\n    client = acme_client.Client(directory=args.server, key=key, net=net)\n  File \"build/bdist.linux-x86_64/egg/acme/client.py\", line 63, in init\n    self.net.get(directory).json())\n  File \"build/bdist.linux-x86_64/egg/acme/messages.py\", line 169, in from_json\n    raise jose.DeserializationError(str(error))\nDeserializationError: Deserialization error: Wrong directory fields\n```. FYI, I pulled the latest companion docker image and relaunched the companion container and that did a renewal. I'd still like to know how to tell what was going wrong.. ",
    "deadcyclo": "See issue #130 . ",
    "jslatts": "I am getting the not-successfully self-verified error too followed by a subsequent acme challenge failure. I've explored a few different suggestions from some of the other open issues here (patched docker images) but nothing has worked for me.. @JamesBewley Wow that totally worked for me too. Not sure why docker-compose would work but running each container separately would not. Thanks!. ",
    "JamesBewley": "It fails because this container isn't serving up the file, nginx is simply passing the request onto my container which obviously returns 403 as it doesn't exist.\nDoes the html directory need to be the same folder servered up by my web page? if so how do you deal with multiple web servers/containers?\nSurely this need to be reopened?. So what needs to be configured above and beyond what is described in the\ninstructions?\nOn 15 January 2017 at 19:24, Yves Blusseau notifications@github.com wrote:\n\nThis not the container that serve the file but nginx proxy container\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/147#issuecomment-272717265,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD7z6sUgGnXpeZ_WvdBKXpLG4Rn6z-Ysks5rSnJjgaJpZM4Lg1X-\n.\n. I have no idea what the issue is but I had this problem in docker version 1.9\n\nI now have it working on Debian using docker version 1.13 from the following repo:\ndeb https://apt.dockerproject.org/repo debian-jessie main\nMake the directories:\nmkdir -p /etc/ssl/letsencrypt /etc/nginx/vhost.d /usr/share/nginx/html\nAnd the following docker compose as a test:\nversion: '2'\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    volumes:\n    - /etc/ssl/letsencrypt:/etc/nginx/certs:ro\n    - /etc/nginx/vhost.d\n    - /usr/share/nginx/html\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n    ports:\n    - \"80:80\"\n    - \"443:443\"\n  nginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n    - /etc/ssl/letsencrypt:/etc/nginx/certs:rw\n    - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n    - nginx-proxy\n  hello-world:\n    image: tutum/hello-world\n    environment:\n    - VIRTUAL_HOST=domain.com,www.domain.com\n    - LETSENCRYPT_HOST=domain.com,www.domain.com\n    - LETSENCRYPT_EMAIL=admin@domain.com. ",
    "dmartinpro": "I think I'm facing the exact same problem. Could you please explain what's wrong?. ",
    "bjoernbusch": "Ok, this is due to this: https://github.com/docker/docker/issues/26099. ",
    "myoung34": "300 can help to resolve this if people still wish to use this container on k8s/ecs/etc. @buchdag done. @buchdag makes sense, changed. @DurinMusicspear\n1) youre right, but there's no reason to check for ecs.config to do it. If it's not there it will fail the check for -n and behave the same as if the  code didnt exist which is good behavior\n2) looks to work as expected: \n$ unset DOCKER_PROVIDER\n$ [[ -n \"${DOCKER_PROVIDER:-}\" ]] && [[ \"${DOCKER_PROVIDER,,}\" == \"aws\" ]] && echo truthy || echo falsey\nfalsey\n$ export DOCKER_PROVIDER=\"AwS\"\n$ [[ -n \"${DOCKER_PROVIDER:-}\" ]] && [[ \"${DOCKER_PROVIDER,,}\" == \"aws\" ]] && echo truthy || echo falsey\ntruthy. DOCKER_PROVIDER is custom and meant for here to swap between kubernetes, gcp, aws, etc.\nECS_CONTAINER_METADATA_FILE is standard to AWS in ECS but has to be enabled by ecs.config\nI ilke the current way because there's no behavior change existing or across cloud providers, but is \"opt in\" by setting DOCKER_PROVIDER and enabling the use of \"cloud lookups\". @buchdag I pushed up what it would look like to test for AWS ECS.\nMy only complaint would be without \"opting in\" by telling it which one to use, if there were 15 providers (15 if()'s) it would be a long time for it to go through the failed checks to hit the original method.. I think the best way to approach it is with an opt-in flag like DOCKER_PROVIDER so that you can be explicit and not hope the trickle through works honestly. Im not a fan of changing default behavior so either that or having the cat /proc happen first would be my choices. It is, but it acts like an opt-in. not providing it would be no change in current behavior, manually providing it is a way for the user to set behavior, basically saying \"i want this to act under ECS\" , so if its ECS, use the ECS_CONTAINER_METADATA_FILE var. Then in the future someone can add a block that does something special to get it to work, say, under Kubernetes by saying DOCKER_PROVIDER==k8s then in that block doing whatever it takes to work under kubernetes, etc. Its faster since its explicit, and its opt in meaning that you have to set it manually to get it to behave differently for you (not changing behavior for anyone else currently using it by default). /proc/cgroup is not a good choice on ECS. it might work, but it might not as well. The container ID is provided first-hand in the environment variable given via the API (ECS_CONTAINER_METADATA_FILE). I dont think using /proc/cgroup is a good idea. I honestly think my first submission is the best, being opt-in (with DOCKER_PROVIDER) then using the recommended method (the env var ECS_CONTAINER_METADATA_FILE). @vfeskov I dont think you can use it in beanstalk since that's not the same as ECS. @vfeskov Im not sure but I dont use beanstalk with containers so feel free to push additional changes if anything has to change to accomodate it. As for the current push:\n```\nbash-4.3# cat test.sh\nDOCKER_PROVIDER=${DOCKER_PROVIDER:-docker}\ncase \"${DOCKER_PROVIDER}\" in\necs|ECS)\n    if [[ -n \"${ECS_CONTAINER_METADATA_FILE:-}\" ]]; then\n      export CONTAINER_ID=$(grep ContainerID \"${ECS_CONTAINER_METADATA_FILE}\" | sed 's/.: \"(.)\",/\\1/g')\n    else\n      echo \"${DOCKER_PROVIDER} specified as 'ecs' but not available. See: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-metadata.html\"\n      exit 1\n    fi\n    ;;\n)\n    export CONTAINER_ID=$(sed -nE 's/^.+docker\\/-./\\1/p' /proc/self/cgroup | head -n 1)\n    ;;\nesac\necho \"container id: ${CONTAINER_ID}\"\necho \"docker provider: ${DOCKER_PROVIDER}\"\nbash-4.3# export DOCKER_PROVIDER=ecs\nbash-4.3# sh test.sh\ncontainer id: c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\ndocker provider: ecs\nbash-4.3# unset DOCKER_PROVIDER\nbash-4.3# sh test.sh\ncontainer id: \ndocker provider: docker\n```\n@buchdag Latest meets criteria and passes manual verify on ECS with ecs.config enabled.. @vfeskov that wont work in ECS, it does not expose that in the prc file: \n[ec2-user@ip-10-0-0-148 ~]$ docker exec -it c16201cdac97 /bin/bash\nbash-4.3# cat /proc/self/cgroup\n9:perf_event:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n8:memory:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n7:hugetlb:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n6:freezer:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n5:devices:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n4:cpuset:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n3:cpuacct:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n2:cpu:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261\n1:blkio:/ecs/5c2c44db-6d3d-4224-95f8-1a5113e7de38/c16201cdac97ec6cf74c7d1a1e665c6ebfd12c1505483f73667d0edd93987261. @vfeskov feel free to submit a regex fix after this merge then, but there are better ways to get container ids in other areas (like ECS) using the metadata instead of relying on the cgroup file.. That would work but this is starting to get into scope creep. Can we just get this merged and issue subsequent pr's ? I've already added code not related to ecs here and would like to stop making changes. Good with me, I meant to originally. Thanks!. >  DOCKER_PROVIDER = ecs DEBUG=true AND\nECS_ENABLE_CONTAINER_METADATA=true in /etc/ecs/ecs.config (because it was disabled by default)\nand i maked a reboot.\nDOCKER_PROVIDER = ecs and DEBUG=true need to be environment variables.\nputting them into ecs.config is not the same thing. the ecs agent reads from there for values it expects. youll need to add these to your task definition as environment variables like \n```\n        \"environment\": [\n          { \n            \"name\": \"DOCKER_PROVIDER\",\n            \"value\": \"ecs\"\n          },\n          { \n            \"name\": \"DEBUG\",\n            \"value\": \"true\"\n          } \n        ],  \n```. > in particular, it is unclear how to get the right network\nIm not sure what you mean\nAs for the rest, have you enabled metadata lookup on the ecs cluster? the instances, ecs.config in particular. Im not sure, I dont use ecs-cli, but terraform and specify it in the userdata: \n```\n  user_data = <<EOF\n!/bin/bash\ncat </etc/ecs/ecs.config\nECS_CLUSTER=${var.ecs_cluster_name}\nECS_CONTAINER_STOP_TIMEOUT=${var.ecs_sigterm_timeout}\nECS_AVAILABLE_LOGGING_DRIVERS=[\"awslogs\", \"syslog\"]\nECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=${var.ecs_task_cleanup_timeout}\nECS_ENABLE_TASK_IAM_ROLE=true\nECS_ENABLE_CONTAINER_METADATA=true\nEOS\n${var.user_data}\nEOF\n}\n``. this change was to make it not error on \"${DOCKER_PROVIDER,,}\"` which is possibly unbound (but actually is not because of the -n sanity). ",
    "berzas": "I've got that working again:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/131\nThanks!\n. ",
    "cpu": "\nor do I need to write a mail to the letsencrypt team?\n\nWanted to leave a pointer for any wayward souls that find this thread first, since we answered it in the community forum: Let's Encrypt does support IDN domains but they must be provided in A-label (also known as ACE) form.. Hi @de-robat, I don't have direct experience with this project, but may be able to help.\n\nSo im wondering if this behaviour of getting an expiration notifcation is something all of you witness or if i've setup the companion poorly and missed something.\n\nIn our expiration email documentation we mention what Let's Encrypt's warning system considers a renewal:\n\nWe consider a certificate to be renewed if there is a newer certificate with the exact same set of names, regardless of which account created it. If you\u2019ve issued a new certificate that adds or removes a name relative to your old certificate, you will get expiration email about your old certificate. If you check the certificate currently running on your website, and it shows the correct date, no further action is needed.\n\nCan you share the set of domain names you received an expiration warning for, and the set of domain names on the current unexpired certificate you believe should have prevented the warning?. @de-robat Great! Glad to hear you were able to get to the bottom of it. Take care.. > Could it be that the CA authorization doesn't follow redirects? It's trying to access the http, but it has a permanent redirect to https.\nThe Let's Encrypt CA, Boulder, does follow redirects on HTTP-01 challenges (up to a limit of 10).\n\nI don't know the internals but I think LE will always prefer validation through IPv4 if available.\n\nThat was true historically, but changed recently.\n\nDo you have any insight on why LE chose IPv6 over IPv4 to reach your domain for validation \n\nThe presence of an AAAA record for the domain will be used to infer that IPv6 should be attempted first.\n\nThat mean that if, for a reason or another, one of your certificate expire, you won't be able to renew it without deleting the old one first as the CA validation will be redirected to https with an expired certificate and will fail.\n\nIf an HTTP-01 challenge request received on 80 gets redirected to port 443 Boulder will ignore certificate errors to prevent this sort of configuration from breaking validation. It should be OK if I'm understanding correctly (my docker-fu is extremely weak).\nHope these clarifications were helpful!. > A month ago I had another server on which I had set AAAA record and I got my certificates from Let's Encrypt. Their is some random magic happening.\nThe Let's Encrypt validation server was changed to prefer IPv6 for dual-homed hosts just over one month ago: https://community.letsencrypt.org/t/preferring-ipv6-for-challenge-validation-of-dual-homed-hosts/34774 No magic in this case :rabbit: :tophat: :sparkles: . @buchdag I think you might have misinterpreted my comment a little bit :-) Boulder does follow redirections from HTTP to HTTPS. I was saying it ignored certificate validation after being redirected. Hope that helps clarify!. 100% of Let's Encrypt issued certificates are published in the certificate transparency ecosystem. If your request is to deliver the SCT as part of the Nginx TLS handshake then @buchdag's recommendation is correct - you'll need to handle this with your Nginx installation and the nginx-ct module. \nThe alternative way to deliver an SCT proof to a client is to embed it into the certificate itself, which is where CA support is required, e.g. this would be a Let's Encrypt feature request and not something the docker-nginx-proxy-companion project can help with.\n\nLE does not offer SCT and does not plan to in the near future.\n\nWe don't presently embed SCTs into our certificates but we do plan to do so in the future. More details are available here. I believe all CAs will have to embed SCTs from 1 or more trusted logs for Chrome to consider the certificate valid sometime after April 2018 but I can't find the announcement of that policy decision handy.\n. @Algodrill If you can share the external IP address you are running docker-compose from I can check the Let's Encrypt server-side logs to determine what email address was being rejected. That might make it easier to determine how to fix the problem.. @Algodrill Thanks for sending your IP address. \nThe server is receiving an invalid contact value: \nmailto:\\u003cno value\\u003e. \n(Edit: I opened an issue on Boulder - we should send the received invalid value back when rejecting it to make this sort of troubleshooting easier: https://github.com/letsencrypt/boulder/issues/3146)\n@buchdag Do you know why the LETSENCRYPT_EMAIL @Algodrill is trying to set isn't being respected? I'm guessing the \"no value\" string is some kind of default from the templating? (I'm out of my areas of expertise here). \nAnother thought is that simp_le should probably try to validate that the contact email being provided is valid before using it for a new-reg request.. Hi @benne,\nI'm not a maintainer of this project but I believe the root of this problem is with the upstream simp_le ACME client that docker-letsencrypt-nginx-proxy-companion uses. I opened https://github.com/zenhack/simp_le/issues/85 to get this issue addressed, thanks for reporting!. Hi @flexbrane - this is a duplicate of https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/277 - see the workaround & root cause identifier there.. @buchdag If they are distinct domain names it wouldn't be a problem provided the overall requests rate limit was respected.. @buchdag @almereyda What are the domain name(s) included in the email? What are the serial numbers of the (soon to be) expired certificate and the currently valid certificate you believe is the renewal?\n(Edit: deleted my link to the docs, I missed that @buchdag already did that! Sorry :-) )\n. > Is there a way to tell Let's Encrypt that they do not need to send expiry notifications for certain certificates? \n@almereyda There is not a way to do this presently: https://github.com/letsencrypt/boulder/issues/2475. I'm catching up on email/github from the holiday period and only quickly skimmed this thread. Apologies if I'm misunderstanding something.\n\nFrom what I understood, the first 5 renewals count as Duplicates and the rest as normal renewals. (In the sense that Duplicate certificates can coexist [new key], but renewed certificates not [same key]).\n\nThe public key of the certificate doesn't have any bearing on whether or not Let's Encrypt considers it a renewal. Certificate B is considered a renewal of Certificate A if and only if the set of subject identifiers (CN and SANs) between A and B are an exact match. If Certificate A and B have the same names but different public keys Certificate B is still a renewal for rate limiting purposes. If Certificate B added or removed a name it would not be considered a renewal. \n\nIf we want to make it with the boulder change we either have to add an exception code inside letsencrypt-service to use a 88 day validity for the force renew command during a test, or restart the boulder with different settings in between the tests.\n\nI think testing this in an end-to-end integration testing scenario with Boulder will be tricky for the reasons you describe. \nIt might be helpful to know that Boulder's existing integration tests take the same approach you describe here (starting Boulder with one set of configs, doing some setup, tearing Boulder down, changing the config, and then restarting Boulder) to simulate the passage of time. See: https://github.com/letsencrypt/boulder/blob/9afa0f7f1967fd4b8c63f4a100a2795461b36609/test/integration-test.py#L722-L737 (setup_seventy_days_ago and setup_twenty_days_ago() run Boulder with the FAKECLOCK configured accordingly).\n. > BTW @cpu if you read this, I'm unsure about the way this is handled on the ACME side, are the contact address(es) only stored at the account level and written over if modified, or do you store a potentially different set of contact address(es) for each generated certificate ?\nIt's the former: contact address(es) are properties of the ACME account resource. There's no way specified in the protocol draft to set a contact address for a specific order, authorization, or issuance. Any updates to the contact information would be handled as an account update.\nHope that helps!. @buchdag I agree its probably not worth the trouble of migrating existing account keys. It might be more important one day when acme-caa is enabled in production and users could have accounturi restrictions but today that isn't the case (except in staging). The only other case I see where folks have a hard time transitioning to a new account key is if they have coordinated with Let's Encrypt for a rate limit adjustment. Those are often done by ACME account ID as well. Do you have a sense of whether your users might be in this position?. ",
    "muehle28": "Why do I have to use different volumes?\nThis is my complete docker-compose file.\n```\nversion: \"2\"\nservices:\n  nginx:\n    build:\n      context: .\n      dockerfile: Dockerfile.nginx\n    container_name: nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - nginxstore:/etc/nginx/certs:ro\n      - nginxstore:/etc/nginx/conf.d\n      - nginxstore:/etc/nginx/vhost.d\n      - nginxstore:/usr/share/nginx/html\n    networks:\n      - front-tier\n      - back-tier\nnginx-gen:\n    build:\n      context: .\n      dockerfile: Dockerfile.docker-gen\n    container_name: nginx-gen\n    depends_on:\n      - nginx\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - nginxstore:/etc/nginx/certs:ro\n      - nginxstore:/etc/nginx/conf.d\n      - nginxstore:/etc/nginx/vhost.d\n      - nginxstore:/usr/share/nginx/html\n    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    networks:\n      - back-tier\nletsencrypt-nginx-proxy-companion:\n    build:\n      context: .\n      dockerfile: Dockerfile.letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt-nginx-proxy-companion\n    depends_on:\n      - nginx-gen\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - nginxstore:/etc/nginx/certs:rw\n      - nginxstore:/etc/nginx/conf.d\n      - nginxstore:/etc/nginx/vhost.d\n      - nginxstore:/usr/share/nginx/html\n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen\n      #- ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory\n      #- DEBUG=true\n    networks:\n      - back-tier\nvolumes:\n  #######################################\n  # Storage nginxstore\n  #######################################\n  nginxstore:\n    driver: local\nnetworks:\n  front-tier:\n    driver: bridge\n  back-tier:\n```. ",
    "TroelsL": "Not sure I follow you.\nI can create the nginx config manually, but then (I assume) I wouldn't get that lovely automatic certificate renewal seeing as I don't have a container to add environment variables to.\nWhat I hope was that it would be possible to add a file somewhere with contents:\nsub1.mydomain.com\nsub2.mydomain.com\n\nAnd then the companion would automatically create letsencrypt certificates for the two subdomains above and renew them the same way as all the other certificates.\nOnly without having an actual container running for each of these.\nI could then manually create the nginx config to point to these certificates.. Ah. So a dummy container and then manually override the proxy setting to forward to another server instead?\nI guess that is certainly a workable solution, thanks.. ",
    "Berndinox": "If someone else faces this issue, i can recommand https://traefik.io/.\n\ndeploying via compose v3 to a swarm will be imperative necessity feature. \n",
    "hilyin": "I guess my goal is that I want to be able to attempt a successful use of this setup locally before deploying.. ",
    "Nemrtvej": "I can confirm, that pulling the latest version fixes the problem and certificate was successfully renewed.\nI am using the companion via docker-compose, so running docker-compose pull solved this problem for me.. ",
    "bnfinet": "this is the call to docker_api from within check_writable_directory which fails due to it's use of $HOSTNAME:\ndocker_api \"/containers/$HOSTNAME/json\" | jq \".Mounts[].Destination\" | grep -q \"^\\\"$dir\\\"$\"\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/entrypoint.sh#L45\n. ",
    "joshontheweb": "@JrCs I had this same issue due to the fact that I'm deploying via Docker Cloud and they set a hostname for you by default.  I tested this with the :dev version and it has fixed the issue.  Thank you!  I can move forward with :dev for now but a version tagged container with this change would be welcome :). ",
    "de-robat": "Thank you for taking the time to point me to the expiration email document @cpu . I screened all the expiration Mails i've got once again and i did not get one which stated the same exact dns names as the once beeing named in the currently active certificate. So i guess you are spot on and that's the reason why i got the expiration mail. \nSo for now there is nothing left to do but wait for the next expiration period to expire. Thanks again!. ",
    "ForsakenHarmony": "Yeah, only a workaround, would be interested in this. The problem is that it didn't generate the upstream content for me, so it was pretty much unusable, because it made nginx crash. ",
    "augusteo": "if you are still having problem with it, I solved it by using another nginx container to serve the static directory, like so:\n```yaml\nother lines\nstatic-main-site:\n     restart: always\n     image: nginx:alpine\n     volumes:\n       - ./static/path:/usr/share/nginx/html:ro\n     environment:\n       - VIRTUAL_HOST=www.domain.com,domain.com\n       - VIRTUAL_NETWORK=nginx-proxy\n       - VIRTUAL_PORT=80\n       - LETSENCRYPT_HOST=www.domain.com,domain.com\n       - LETSENCRYPT_EMAIL=mail@gmail.com\n```. disclaimer: I've never used DreamFactory\nthe error message sounds like a server failure. if you can get to the 403 at all, the reverse proxy should be working. Maybe better ask the dream factory people instead of here?. ",
    "Pimmetje": "I would love to be able to put some config somewhere for a reverse https proxy with letsencrypt SSL. This would also work if u for some reason don't want to use docker socket (or u can't).. ",
    "truck0321": "I was editing the wrong file in vhost.d. There was a file named \"default\"  that I edited but once I made changes to the file named \"www.truckenmiller.com\"  I was able to access the challenge file.  However,  the CA is still saying it is invalid \nHere are the logs from the companion container:\nReloading nginx proxy...\n2017/02/12 21:21:12 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n      h2017/02/12 21:21:12 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n      ;2017/02/12 21:21:12 [notice] 33#33: signal process started\nCreating/renewal  www.truckenmiller.com certificates... ( www.truckenmiller.com)\n2017-02-12 21:21:12,588:INFO:simp_le:1211: Generating new account key\n2017-02-12 21:21:12,961:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2017-02-12 21:21:13,933:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2017-02-12 21:21:14,828:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): www.truckenmiller.com\n2017-02-12 21:21:14,852:INFO:simp_le:1305: www.truckenmiller.com was successfully self-verified\n2017-02-12 21:21:14,982:INFO:simp_le:1313: Generating new certificate private key\n2017-02-12 21:21:23,708:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com\nChallenge validation has failed, see error log.. It turns out my site wasn't accessible externally which I find is really helpful if you want Let's Encrypt to work.  . Had a space in between the LETSENCRYPT_HOST= and the domain name,  works now.. ",
    "ArielGueta": "Ok, it took some time but it's seems to work now, if I will have issue I will reopened this. Thanks. . ",
    "oliverlorenz": "Same problem here. Same solution here. But it only works one time. \nIf I start docker-compose up again, the site does not appear. After I destroyed the containers with docker-compose rm -f and startup again with docker-compose up -d it works again\nAny ideas?. I found the problem by myself. It was a simple typo in the VIRTUAL_HOST :sweat: It had nothing todo with the project itself. Thank you anyways :+1: . ",
    "uLan08": "I was able to come up a way for this. What I did was to have the static files served by a vanilla nginx on a different container and then I added VIRTUAL_HOST and LETSENCRYPT_HOST for it in the docker-compose file and everything worked as expected. . ",
    "joantune": "It seems that this the way to go:\nhttps://github.com/docker/compose/issues/4379#issuecomment-279567234\nI can try to use the volumes from, and if it fails, use the label. Should I proceed with a PR?. ",
    "mikumi": "@joantune I am curious how you solved this, I haven't figured it out yet :). ",
    "oe5wei": "I did a setup using named volumes, without volumes_from. It works, don't know how as the entrypoint.sh of the letsencrypt container clearly uses VolumeFrom.\nHere is the setup as a gist: https://gist.github.com/netdesk/c1db2985b542f9916995139318e5a7ce\nThe gist also includes a docker-compose setup for gitlab. One could include this in the nginx-proxy setup, but I wanted to separate concerns and the gitlab setup basically has nothing to do with the nginx-proxy thing.\nEDIT: ah, nvm. As I'm using separate containers for nginx and docker-gen, i already used NGINX_DOCKER_GEN_CONTAINER to identify the docker-gen container. Then get_nginx_proxy_cid and VolumesFrom is never used.. ",
    "ghost": "Do you have any solution yet?. I still have the problem, that when i start my containers and the companion trys to start LE routines, the following error occurs (DEBUG=true):\n```\nReceived response: \nHTTP 200\nServer: nginx\nContent-Type: application/json\nContent-Length: 1933\nLink: https://acme-v01.api.letsencrypt.org/acme/new-cert;rel=\"next\"\nReplay-Nonce: 2r4uxkUkXbgncOfwhr0K_EG_uvk7l9VN-yqOQEI8k2U\nX-Frame-Options: DENY\nStrict-Transport-Security: max-age=604800\nExpires: Thu, 19 Oct 2017 07:24:15 GMT\nCache-Control: max-age=0, no-cache, no-store\nPragma: no-cache\nDate: Thu, 19 Oct 2017 07:24:15 GMT\nConnection: keep-alive\n{\n  \"identifier\": {\n    \"type\": \"dns\",\n    \"value\": \"myDomainChangedManually\"\n  },\n  \"status\": \"invalid\",\n  \"expires\": \"2017-10-26T07:24:13Z\",\n  \"challenges\": [\n    {\n      \"type\": \"tls-sni-01\",\n      \"status\": \"pending\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/PBC1NBqXV81v7OVsB0D8Xf6kBLV6PUCgCi7EqXn6ltI/2245995013\",\n      \"token\": \"jcamvPnxwbgq681CGzMx4j_EsqEB85QhziQi764t18c\"\n    },\n    {\n      \"type\": \"dns-01\",\n      \"status\": \"pending\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/PBC1NBqXV81v7OVsB0D8Xf6kBLV6PUCgCi7EqXn6ltI/2245995014\",\n      \"token\": \"2OWNfNJwNApqE8UqRlZ3fEFSAl46iwXgyDgIN5ht_b8\"\n    },\n    {\n      \"type\": \"http-01\",\n      \"status\": \"invalid\",\n      \"error\": {\n        \"type\": \"urn:acme:error:unauthorized\",\n        \"detail\": \"Invalid response from http://myDomain.de/.well-known/acme-challenge /mhkPm0XWHrLXJ296R721RGcmqyWciNa4khleMCp8Jjk: \\\"\\u003chtml\\u003e\\r\\n\\u003chead\\u003e\\u003ctitle\\u003e503 Service Temporarily Unavailable\\u003c/title\\u003e\\u003c/head\\u003e\\r\\n\\u003cbody bgcolor=\\\"white\\\"\\u003e\\r\\n\\u003ccenter\\u003e\\u003ch1\\u003e503 Service Tempora\\\"\",\n        \"status\": 403\n      },\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/PBC1NBqXV81v7OVsB0D8Xf6kBLV6PUCgCi7EqXn6ltI/2245995016\",\n      \"token\": \"mhkPm0XWHrLXJ296R721RGcmqyWciNa4khleMCp8Jjk\",\n      \"keyAuthorization\": \"mhkPm0XWHrLXJ296R721RGcmqyWciNa4khleMCp8Jjk.x6DiA7Kl1jSVH7G7gH_l6l-6CLk472BQy9BYPvYLR48\",\n      \"validationRecord\": [\n        {\n          \"url\": \"http://myDomain.de/.well-known/acme-challenge/mhkPm0XWHrLXJ296R721RGcmqyWciNa4khleMCp8Jjk\",\n          \"hostname\": \"mydomainChangedManually\",\n          \"port\": \"80\",\n          \"addressesResolved\": [\n            \"188.138.233.68\"\n          ],\n          \"addressUsed\": \"188.138.233.68\",\n          \"addressesTried\": []\n        }\n      ]\n    }\n  ],\n  \"combinations\": [\n    [1],  [ 2 ],  [ 0 ] \n ]\n}\n```\nI tried everything: manipulating nginx.tmpl, removing port 80 from backend container ... nothing worked. And now you reverting this bugfix. \nIs there another solution? Please help. \n. I am having an issue where I am creating containers using the same env as above, but just for docker run. The result is that it doesn't always (at random) create the right certs for the sub domains and therefore flags them as being invalid. \nIn my docker run command I have the correct domain I want, but it is not the domain being used for the certs\n. I am using docker-compose version 1.18.0, build 8dd22a9 and Docker version 17.12.0-ce, build c97c6d6\nI am a newbie at the log side of things - so not sure how to post those :-(\nIt was a late night, but when I used the docker-compose rather than docker run commands it works. If it didn't work I could just recreate the docker-letsencrypt-nginx-proxy-companion.\nBefore I started on the docker-compose route, I did this:\n```\ndocker run -d \\\n  --name nginx-proxy \\\n  -p 80:80 -p 443:443 \\\n  -v ${PWD}/certs:/etc/nginx/certs:ro \\\n  -v /etc/nginx/vhost.d \\\n  -v /usr/share/nginx/html \\\n  -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n  --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n  jwilder/nginx-proxy\ndocker run -d \\\n  --name nginx-letsencrypt \\\n  -v ${PWD}/certs:/etc/nginx/certs:rw \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  --volumes-from nginx-proxy \\\n  jrcs/letsencrypt-nginx-proxy-companion\ndocker run -d \\\n  --name mainweb \\\n  --expose=80 --expose=443 \\\n  -p 80 -p 443 \\\n  -e \"VIRTUAL_HOST=sub.my-domain\" \\\n  -e \"LETSENCRYPT_HOST=sub.my-domain\" \\\n  -e \"LETSENCRYPT_EMAIL=my-email@example.com\" \\\n  -v ${PWD}/mainweb:/usr/local/apache2/htdocs \\\n  httpd:2.2.34-alpine\n```\nThis would work, but the problems started to come up when I started adding more containers, not always (and this was random) giving the right certificate.\nThe main container that was giving me issues where the combo of a mysql and phpmyadmin container. Where the phpmyadmin wouldn't get a certificate.\n```\ndocker run -di \\\n  --name wp-cite-mysql \\\n  -p 3310:3306 \\\n  -e MYSQL_ROOT_PASSWORD=\"(password123)\" \\\n  -e MYSQL_USER=\"admin\" \\\n  -e MYSQL_PASSWORD=\"(Admin123)**\" \\\n  -v ${PWD}/cite-mysql-2018-s1:/var/lib/mysql \\\n  mysql:5.7.20\ndocker run -d  \\\n  -p 80 -p 443 \\\n  --link wp-cite-mysql \\\n  -e \"VIRTUAL_HOST=pma1.my-domain\" \\\n  -e \"LETSENCRYPT_HOST=pma1.my-domain\" \\\n  -e \"LETSENCRYPT_EMAIL=my-email\" \\\n  phpmyadmin/phpmyadmin\n```. Yeah - I do so I will look into it, the ports thing makes sense.\nI will also look into using networks, but as you said a lot of containers (and explanations on the web) still use them.\nSorry if this didn't answer the origin post.. ",
    "jtmthf": "I had the same issue as you yesterday with essentially the same compose file. I ended up using run scripts even though it's not ideal and that worked. Here's my script\n```bash\n!/bin/bash\nThis example will run a basic nginx server provisionned with an index.html file\nMake sure to replace \"site.example.com\" with a public accessible domain poiting to the server you will run this on.\nThis nginx container will get a configuration generated by the docker-gen instance and act as a reverse-proxy\necho \"Starting nginx instance...\"\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx \\\n    -v /etc/nginx/conf.d  \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v $(pwd)/proxy/certs:/etc/nginx/certs:ro \\\n    nginx\nThis nginx-gen container using the docker-gen image will generate a 'default.conf' file from the 'nginx.tmpl' located in volumes/proxy/templates.\necho \"Starting docker-gen instance...\"\ndocker run -d \\\n    --name nginx-gen \\\n    --volumes-from nginx \\\n    -v $(pwd)/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    jwilder/docker-gen \\\n    -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\necho \"Starting letsencrypt-nginx-proxy-companion...\"\ndocker run -d \\\n    -e \"NGINX_DOCKER_GEN_CONTAINER=nginx-gen\" \\\n    --volumes-from nginx \\\n    -v $(pwd)/proxy/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    jrcs/letsencrypt-nginx-proxy-companion\n```\nI would still like to get this working with compose though. Ideally v3 too.. Seems like the older template defines the upstream blocks very differently... Check the solution in #173. Seems like the latest version of nginx.tmpl doesn't work. An older version seems fine though. ",
    "oleynikd": "Anyone?. ",
    "yangxuan8282": "It turn out it's my proxy config file problem, the drone.mydomain.com can't be access via 80 and 443 ports, after delete proxy config file for drone.mydomain.com, this container works again.. ",
    "PolGuixe": "Let's say that example.com, is accessible and it is in another server and it has it's own certificate. Or generation a conflict?\nCould this be a problem?  . ",
    "ambroisemaupate": "I get this issue too. \nCA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/xxxxxxxx, https://acme-v01.api.letsencrypt.org/acme/authz/xxxxxxxxx\nChallenge validation has failed, see error log.\nWhen I follow links manually in browser, redirections to https happen and do not prevent from download the challenge file.\nIt\u2019s seems that LE can\u2019t follow 301 redirects.\n```json\n{\n      \"type\": \"http-01\",\n      \"status\": \"invalid\",\n      \"error\": {\n        \"type\": \"urn:acme:error:connection\",\n        \"detail\": \"Fetching http://www.xxxxx.fr/.well-known/acme-challenge/xxxxxx: Timeout\",\n        \"status\": 400\n      },\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/xxxxxxx\",\n      \"token\": \"xxxxxxx\",\n      \"keyAuthorization\": \"xxxxxxx\",\n      \"validationRecord\": [\n        {\n          \"url\": \"http://www.xxxxxx.fr/.well-known/acme-challenge/xxxxxxxx\",\n          \"hostname\": \"www.xxxxxx.fr\",\n          \"port\": \"80\",\n          \"addressesResolved\": [\n            \"xxxxxxxxx\",\n            \"xxxxxxxxx\"\n          ],\n          \"addressUsed\": \"xxxxxxxx\",\n          \"addressesTried\": [\n      ]\n    }\n  ]\n}\n\n}\n```\nshell\ncurl -I http://www.xxxxxx.fr/.well-known/acme-challenge/xxxxxxx\nHTTP/1.1 301 Moved Permanently\nServer: nginx\nDate: Mon, 10 Jul 2017 13:26:53 GMT\nContent-Type: text/html\nContent-Length: 178\nConnection: keep-alive\nLocation: https://www.xxxxx.fr/.well-known/acme-challenge/xxxxxxx. ",
    "nwallace": "I was maybe getting a similar error:\n2017-03-09 04:38:21,763:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nTraceback (most recent call last):\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1401, in main\n    return main_with_exceptions(cli_args)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1386, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1282, in persist_new_data\n    client = registered_client(args, existing_data.account_key)\n  File \"build/bdist.linux-x86_64/egg/simp_le.py\", line 1224, in registered_client\n    client = acme_client.Client(directory=args.server, key=key, net=net)\n  File \"build/bdist.linux-x86_64/egg/acme/client.py\", line 63, in __init__\n    self.net.get(directory).json())\n  File \"build/bdist.linux-x86_64/egg/acme/messages.py\", line 169, in from_json\n    raise jose.DeserializationError(str(error))\nDeserializationError: Deserialization error: Wrong directory fields\nI had been running a slightly out-of-date version, though, so I updated my containers to the newest stable versions (v1.4 of this companion, alongside docker-gen 0.7.3 and nginx 1:11).  After updating my containers to newer versions, I'm getting this error:\nCreating/renewal mydomain.example certificates... (mydomain.example)\n2017-03-09 04:49:58,832:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2017-03-09 04:49:59,509:INFO:requests.packages.urllib3.connectionpool:242: Resetting dropped connection: acme-v01.api.letsencrypt.org\n2017-03-09 04:49:59,879:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): mydomain.example\n2017-03-09 04:49:59,940:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): mydomain.example\n2017-03-09 04:50:00,119:ERROR:acme.challenges:256: Unable to reach http://mydomain.example/.well-known/acme-challenge/BIGLONGCHALLENGESTRING: (\"bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)\",)\n2017-03-09 04:50:00,120:WARNING:simp_le:1303: mydomain.example was not successfully self-verified. CA is likely to fail as well!\n2017-03-09 04:50:00,312:INFO:simp_le:1313: Generating new certificate private key\n2017-03-09 04:50:03,618:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/BIGLONGAUTHSTRING\nEDIT: I updated to the latest tag and it actually fixed the problem for 2 of my 3 domains, but the 3rd domain is back to getting the DeserializationError. Not sure why 2 would work but 1 wouldn't. ",
    "emmetog": "Not tested 100% yet, when I test it in docker compose v3 I'll post a comment. Feel free to comment on this PR in the meantime.. ",
    "Tabrizian": "@emmetog  It's fully functional and completely compatible with docker compose v3. Thanks for your PR :+1: \nI have test it with swarm mode.. ",
    "stepankuzmin": "Same problem here, modificating nginx.tmpl did not help.. ",
    "loomchild": "Cool, thanks for merging. ",
    "matt-hh": "An update to the latest image should fix this issue.. Hi @jsaalfeld your letsencrypt container can't see the volumes from nginx container (/etc/nginx/vhost.d). Here is an example with the relevant parts:\n```\n  nginx_proxy:\n    volumes:\n      - certs:/etc/nginx/certs:ro\n      - /etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n  letsencrypt:\n    volumes:\n      - certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n      - nginx_proxy\n```. Hi, looks like your nginx-proxy has no volume for /etc/nginx/vhost.d\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#usage\nCan you share your docker command for nginx-proxy?. ",
    "nicolinux": "That's true, the issue has been solved. Thanks!. Thanks for the info. I am running :latest so it should be v1.4 :|. ",
    "mhilaire": "I had the same issue. I pulled v1.4 and it's working again. . Well I'm not sure about that : https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion/builds/ Latest has been published 2 weeks ago whereas v1.4 has been published 2 months ago and image size seems slightly different, you should try pull v1.4. ",
    "nosovk": "Tried, but no result. Probably will left if for week.. According to logs - certificates not grouped into one.\nI mean on crt.sh I see that certificates are not merged into one fro different vhosts.\nhttps://crt.sh/?id=111742747\nhttps://crt.sh/?id=113215695\nhttps://crt.sh/?id=111730519\nthey all issued like separate pairs, and it reaches out LE limit very fast. \nCurrently SAN works only in one vhost, not merging requests from different hosts.. ",
    "fsw0422": "having the same issue here. ",
    "halfb00t": "you can put wordpress behind nginx-proxy. ",
    "raisiqueira": "Ok, thank's.... ",
    "mikeevstropov": "@ghost The same problem\n...\n      \"error\": {\n        \"type\": \"urn:acme:error:unauthorized\",\n        \"detail\": \"Invalid response from http://xxx/.well-known/acme-challenge/_P5qn8u9gAFskqqUgMf7VjkRD4oOR-LfoOwznC4O1TQ: \\\"\\u003chtml\\u003e\\r\\n\\u003chead\\u003e\\u003ctitle\\u003e503 Service Temporarily Unavailable\\u003c/title\\u003e\\u003c/head\\u003e\\r\\n\\u003cbody bgcolor=\\\"white\\\"\\u003e\\r\\n\\u003ccenter\\u003e\\u003ch1\\u003e503 Service Tempora\\\"\",\n        \"status\": 403\n      },\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/SEJeItsq2DejQInJ1epsvaOZWjvJifFpAOTLo4qAya8/2615048980\". ",
    "brendan-rius": "Thank you for investigating :)\nFor now I have switched to a regular nginx image with manually generated certificates (the hack I was using was very unstable for reasons I do not know).\nI will switch back to this solution when this bug gets fixed :). ",
    "timka": "I get similar symptoms with my per-vhost configuration. In my case after I start a container w/ LETSENCRYPT_HOST defined, letsencrypt container updates vhost config and notifies docker-gen container but the later skips reloading nginx since the default.conf didn't change. I solve this by manually restarting nginx container.. ",
    "stephane-r": "Any solution for this issue ?. Hi @buchdag \nMy letsencrypt-nginx-proxy container : \n```yaml\nversion: '2'\nservices:\nnginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./conf:/etc/nginx/conf.d\n      - ./vhost:/etc/nginx/vhost.d\n      - ./html:/usr/share/nginx/html\n      - ./dhparam:/etc/nginx/dhparam\n      - certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    restart: always\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-proxy-le\n    depends_on:\n      - nginx-proxy\n    volumes_from:\n      - nginx-proxy\n    volumes:\n      - ./certs:/etc/nginx/certs\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: always\nvolumes:\n  conf:\n  vhost:\n  html:\n  dhparam:\n  certs:\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nPortainer docker-compose file (subdomaine working) : \n```yaml\nversion: '3'\nservices:\n    portainer:\n        image: portainer/portainer\n        container_name: portainer\n        restart: always\n        environment:\n            - VIRTUAL_HOST=portainer.${SITE_URL}\n            - VIRTUAL_PORT=9000\n            - LETSENCRYPT_HOST=portainer.${SITE_URL}\n            - LETSENCRYPT_EMAIL=${MAILER_DEFAUT_SENDER_ADDRESS}\n        volumes:\n            - /var/run/docker.sock:/var/run/docker.sock\n            - ./data:/data\n        ports:\n            - '9000:9000'\nnetworks:\n    default:\n        external:\n            name: nginx-proxy\n```\nAn other docker-compose file not working (NET::ERR_CERT_COMMON_NAME_INVALID error) : \n```\nversion: \"2\"\nservices:\n  sonarr:\n    image: linuxserver/sonarr\n    container_name: sonarr\n    restart: always\n    ports:\n      - \"8989:8989\"\n    environment:\n      - PGID=1000\n      - PUID=1000\n      - TZ=Europe/London\n      - VIRTUAL_HOST=sonarr.${SITE_URL}\n      - VIRTUAL_PORT=8989\n      - LETSENCRYPT_HOST=sonarr.${SITE_URL}\n      - LETSENCRYPT_EMAIL=${MAILER_DEFAUT_SENDER_ADDRESS}\n    volumes:\n      - ${MOUNT_POINT}/sonarr/config:/config\n      - ${MEDIA_PATH}:/tv\n      - ${DOWNLOAD_PATH}:/downloads\nnetworks:\n    default:\n        external:\n            name: nginx-proxy\n```\nI run all docker-compose file with docker-compose up -d command. All app is separate : it's not only one docker-compose.yml file.\nThank you for your help !. @buchdag Do you think i need use letsencrypt-nginx-proxy-companion container directly in the webapp ?. Hi guys !\nI've \"resolve\" my problem with this docker-compose.yml : \n```yaml\nversion: '3'\nservices:\nnginx-proxy:\n    image: jwilder/nginx-proxy\n    restart: always\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:                   \n      - ./current/public:/usr/share/nginx/html\n      - ./certs:/etc/nginx/certs:ro\n      - ./vhost:/etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    restart: always\n    volumes:\n      - ./certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./vhost:/etc/nginx/vhost.d\n      - ./current/public:/usr/share/nginx/html\nvolumes:\n  vhost:\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nI say \"resolve\" because if i add new supersubdomain.my-site.com, i've only the folder create in certs, not pem files.. ",
    "HavardLine": "Hi @augusteo. Thanks for your feedback. I will try the DreamFactory comunity.. ",
    "ScyDev": "Yes, my container says the same, even now as the cert is expired since 2 days:\nCreating/renewal admin.xxx.ch certificates... (admin.xxx.ch)\n2017-04-24 19:36:37,850:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal api.xxx.ch certificates... (api.xxx.ch)\n2017-04-24 19:36:38,715:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal www.xxx.ch certificates... (www.xxx.ch xxx.ch)\n2017-04-24 19:36:39,581:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nSleep for 3600s\n2017/04/24 19:41:33 Received signal: terminated\n2017/04/24 19:41:33 Received signal: terminated\nReloading nginx proxy (using separate container nginx-gen)...\nCreating/renewal admin.xxx.ch certificates... (admin.xxx.ch)\n2017/04/24 19:41:34 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2017/04/24 19:41:34 Watching docker events\n2017/04/24 19:41:34 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2017-04-24 19:41:35,300:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal api.xxx.ch certificates... (api.xxx.ch)\n2017-04-24 19:41:36,188:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nCreating/renewal www.xxx.ch certificates... (www.xxx.ch xxx.ch)\n2017-04-24 19:41:37,056:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nSleep for 3600s. This helped me quickly get new valid certs: \nrm -rf /root/certs/*\ndocker stop nginx nginx-letsencrypt nginx-gen\ndocker rm nginx nginx-letsencrypt nginx-gen\ndocker-compose up nginx nginx-letsencrypt nginx-gen\nBut this certainly is an issue, since the documentation of the container says renewals should happen automagically.. @jokogr From which version to which version did you upgrade?. ",
    "Drakulix": "Same thing here, just happened to me today.\nThanks for the quick fix @ScyDev, although this should really not need to be done in the first place.. ",
    "mmatviyiv": "Same for me, removing containers helped. But would be nice to have a proper solution.. ",
    "Erreinion": "same here - all containers on all servers not renewing. ",
    "TylerRick": "I just ran into this too.  Manually running /app/letsencrypt_service says renewal is not necessary:\n2017-05-07 19:26:42,651:INFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\nbut clearly it is necessary because the cert is expired:\nbash-4.3# openssl x509 -dates -noout -in  /etc/nginx/certs/domain.com.crt                                                 \nnotBefore=Feb  5 23:00:00 2017 GMT\nnotAfter=May  6 23:00:00 2017 GMT\nManually removing certs to force regeneration worked as a workaround for now.... ",
    "cdelargy": "Just experienced this as well, logs show\n\nINFO:simp_le:1383: Certificates already exist and renewal is not necessary, exiting with status code 1.\n\nyet certs have expired.. ",
    "ekkis": "thanks, yes, I had already fixed the nginx-proxy reference in PR https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/203 \nas for the syntax of labels and environment variables, the config comes up clean, and regarding the use of volumes, it works as I have it.  I'm using it.\nlinks are useful to make sure one container comes up before another.  the letsencrypt should come up first because it needs to generate keys, docker-gen next because it creates the nginx config.\nas for networks, yes, I've been thinking about that.  of course, docker-compose will create a new network and automatically attach all the containers to it and I think the default behaviour is fine.  if you disagree please expound as to why. yes, you're right about the need for nginx to be running in order for challenge validation to occur.  I originally had it set up that way but changed it because without an nginx.conf (which is created by nginx-gen) nginx can't route anything, and for nginx-gen to run it needs the nginx.tmpl, which is provided by nginx-letsencrypt, thus that needs to run first\nyour point about the network is well made.  it's not something I had thought through. I currently start a bunch of services that need to be proxied in the same docker-compose file that kicks off the proxy.  a container can join multiple networks (I believe) so for the sake of this package we can have one network name, and my containers can have their own network name but join the proxy network\nif that sounds about right I will modify the PR accordingly and get back to you. @buchdag, could you share the relevant bits of your docker-compose here so I don't have to read the docs and figure out all the pieces?. with regards the network being \"external\", the docs indicate:\n\nexternal\nIf set to true, specifies that this network has been created outside of Compose. docker-compose up will not attempt to create it, and will raise an error if it doesn\u2019t exist.\n\nso how do you create the network?. oh wait... so you create a non-external network in one docker-compose i.e. you define a driver for it, and all other docker-compose files declare it as external? and if so, that means you need to run the docker-compose that creates the network first?. oh, I have to create it by hand: docker network create nginx-proxy.  so that's a step I will have to include in the instructions for using the docker-compose file (if there's a way to automate it please let me know). @lounagen, we crossed messages, however, thanks for your post because you solved another problem I had, namely that when I need to tell a process inside a container to accept connections from a certain subnet, I had to rely on knowing what Docker would use as its subnet.  I didn't know about networks and your example shows me that I can specify the subnet so that solves the problem.  thanks a bunch!. why name the network? if I do docker network create nginx-proxy then the network will be called nginx-proxy no?. that is super useful indeed.  I've added it to the PR. @lounagen, @JrCs suggested that rather than incorporating the docker-compose into this project, since there are many ways of kicking this off, that I create a separate project and he would link to it.  I did here: https://github.com/ekkis/nginx-proxy-LE-docker-compose -- and I wondered if you might do the same with SaltStack?. thanks for that.  I've added a link to your project on my page. ok, I shut down the services, removed the volumes and restarted clean.  that solved the problem. I've added a docker-compose file to the project (see PR).  in that pull request I also added a retrieval of the template, which is now included in the container and thence shared with docker-gen.  I didn't realise that it should automatically refresh.  if it's supposed to, it wasn't working because I had to manually refresh the template... so do you want to accept the PR as it is or do you want me to take that out (I think it will require a change to the docker-compose as well).\nI did also change the docs.  see if they are acceptable as they are. ah... reading your previous comments.  you're right, the reference to the nginx container was wrong.  I will refresh the PR then.  stand by. ok, I've fixed the docker-compose file but I don't know how to eliminate the changes to the Dockerfile from the PR.  can you ignore them when you apply it?. let me step back a bit.  in your docs you indicate I should retrieve the template: \ncurl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl > /path/to/nginx.tmpl\nand then mount it for docker-gen to have access to it:\n$ docker run -d \\\n    --name nginx-gen \\\n    --volumes-from nginx \\\n    -v /path/to/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\nbut if I understand you correctly, your objection to my including the template in this project's docker image (to be shared with docker-gen) is that it should already be getting fetched automatically:\n\nthe template nginx.tmpl should come and refresh automatically from nginx-gen container\n\nhowever, I don't imagine nginx-gen would be fetching it since it is a more generalised image and it really shouldn't be bound to the particular needs of this project... so the job should be this package's...\nif I run the nginx-gen by itself (by merely providing it a place to find/presumably put the template), it just dies because it can't parse it (because it isn't there)... so I need to put it there, ergo my request to have in included in this package (to save the user from having to fetch it and figure out where to put it)...\nso I think my PR stands as it is.  does that make sense?\n. no worries.  I think what I'm a little vague about is this: docker-gen (and its container) are generic functionality.  give it a template and it will fill it for you with docker meta-data.  the nginx.tmpl is specifically used to create the nginx configuration file\nthis (companion) package facilitates putting together all these containers with the resultant functionality that you have SSL for nginx, thus the nginx template used is specific to this setup and really belongs in this package.  I have added line to the Dockerfile to automatically fetch the latest version of the template in my PR and orchestrated the docker-compose.yml so it all works without user intervention.  in other words, grab the docker-compose, run, and you're done.  nice and clean. the nginx.tmpl doesn't belong in the nginx-proxy container because that gets a configuration file.  the config file is created by the nginx-docker-gen container which requires the template, but the specific template we're using doesn't belong in that image because that image is generic and can be handed templates for various purposes.  the template we're using is specific for creating configurations that support SSL, and more specifically Let's Encrypt.  therefore that template belongs in your container\nnow, I could fork your project just to include the template but at the time your image is built, it can fetch the template and include it.  that's what this small PR accomplishes\nnot including said template means having to do a lot of extra manual work as outlined in my project (the one you suggested I create)\ncould you explain what your objection is? what I'm looking for is a way to fully automate this for others. yes, you're correct.  I had already fixed that (in fact, it needs .../templates:rw since it's responsible for writing) but haven't synced it with github because I need to address the issue of the network name.  I haven't had time but in the next day or so I will test that and resubmit. @giordy, that issue is using version 2 of the docker-compose.  I guess the first question to ask would be whether it breaks with v3 (which I'm using). ok, I've made all the changes and the PR is ready to be accepted.  please let me know if there's anything else I need to do. incidentally, the PR includes the changes to the Dockerfile discussed here: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/201 which make it unnecessary to download the template. one more change: I've added name support for the real interfaces as per https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/200\n. @JrCs: yes, I can understand your point.  someone else I was discussing this with is using saltstack to start the containers.  so this really belongs as a separate project.  I will create one and get back to you with it.  as a matter of fact, I'll reach out to that person to perhaps do the same for saltstack. @JrCs: I've created a separate project for the docker-compose file but realised that the changes to your Dockerfile actually belong in your project (my project won't have a container).  can I modify this PR then for that functionality?  it allows a user not to have any extra steps (I wasted a lot of time figuring out I was missing that stuff). here's the new project: https://github.com/ekkis/nginx-proxy-LE-docker-compose I've modified your README to point to this and I've reached out to the other guy about SaltStack (hopefully he'll put it together).  so this PR is ready for acceptance. incidentally, I've added a warning to my package (https://github.com/ekkis/nginx-proxy-LE-docker-compose#warning) that depending on whether this PR is approved, there may be some manual work involved for the user.  I will remove that if you merge this PR. @Azuka, I can see that you're anchoring the volume to your file system, presumably so you can download the template and make it available to the system.  that part will work automatically if @JrCs approves this PR.  \nas for the api target, what is it? why do I need it? I don't understand what problem it solves. ",
    "guysoft": "@buchdag The sniplet in https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/200#issuecomment-297858150 is really cool, do you have it under version control anywhere or something?\nI don't seem to understand why using nginx and docker-gen is not the default that is documented everywhere. It claims in the readme its more secure.. ",
    "nathancahill": "Had a similar issue. Periodically, the .well-known route would fail to be caught by letsencrypt-nginx-proxy, ending up being passed to the underlying app and throwing an error. Shutting down the services and removing the volumes fixed the issue.. ",
    "giordy": "Hi @ekkis, I tested your PR, I think there is a small bug.\nYou should change\n- nginx-gen-tmpl:/etc/docker-gen/templates/nginx.tmpl\ninto\n- nginx-gen-tmpl:/etc/docker-gen/templates. One more note: I think that using docker compose might still be not that straight forward, since there seems to be a bug in the custom vhost management: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/193\nI stumbled upon it while working on this project, where I tried to reuse your PR, and I'm not sure how to go around it.\nIf you are familiar with the problem or have an idea for a solution it might be a good chance to include it.. @ekkis I confirm I experienced it with version 3 of the docker compose file. ",
    "dmitrym0": "Hmm, I realize that I added a duplicate request #208. Mine appears to be much shorter. What am I missing?. ",
    "Azuka": "@ekkis, thanks, this was a great lifesaver. I wanted to say that I modified your docker-compose slightly and was able to get it working without the added changes to the container: I just needed to mount the nginx.tmpl directly (well, in this case the path to the nginx.tmpl)\n```yml\nversion: \"3\"\nservices:\n  nginx-proxy:\n    image: nginx\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhost:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - nginx-ssl:/etc/nginx/certs:ro\n    labels:\n      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    networks:\n      - nginx-proxy\nnginx-gen:\n    image: jwilder/docker-gen\n    container_name: nginx-gen\n    command: -notify-sighup nginx-proxy -wait 5s:30s -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhost:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - ./nginx:/etc/docker-gen/templates:rw\n      - nginx-ssl:/etc/nginx/certs:ro\n    links:\n      - nginx-proxy\n    networks:\n      - nginx-proxy\nnginx-ssl:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-ssl\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhost:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - ./nginx:/etc/docker-gen/templates:ro\n      - nginx-ssl:/etc/nginx/certs:rw\n    environment:\n      - ACME_CA_URI\n      - \"NGINX_DOCKER_GEN_CONTAINER=nginx-gen\"\n    links:\n      - nginx-proxy\n      - nginx-gen\n    networks:\n      - nginx-proxy\n  api:\n    restart: always\n    image: $IMAGE_NAME:$VERSION\n    restart: always\n    env_file:\n      - ./.env\n      - ./version.env\n    environment:\n      - API_PORT=7000\n      - VIRTUAL_HOST=\n      - VIRTUAL_NETWORK=nginx-proxy\n      - VIRTUAL_PORT=7000\n      - LETSENCRYPT_HOST=\n      - LETSENCRYPT_EMAIL=\n    networks:\n      - nginx-proxy\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\nvolumes:\n  nginx-conf:\n  nginx-vhost:\n  nginx-html:\n  nginx-ssl:\nnetworks:\n  nginx-proxy:\n    external: true\n```\nPlease let me know if this works for you as well.. @ekkis, that's my own service that needs the nginx proxy with letsencrypt. I have them as separate files, but I combined them above just as an example.. ",
    "chicco785": "the change to app/nginx_location.confmay not be required. it's the results of different attempts to fix the issues i was facing in getting the certificate created. but the problem indeed was all related to the impossibility of connecting to the correct container due to the dynamic naming. the com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_gen label can be optional of course. let me know what you think.. ",
    "Robin2009": "@lounagen Sorry for my late reply, and that's a great explanation! Thanks so much. ",
    "opyate": "@Robin2009 if you already own a domain and use Cloudflare, I've got a nice working example for you here: https://github.com/opyate/docker-letsencrypt-nginx-proxy-companion. Sharing is caring: https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion. ",
    "Krever": "@dmitrym0 You should definitely put this somewhere, as it is clear, simple and perfectly working solution. Thanks :). ",
    "markhaasjes": "I got the same issue. I'm able to retrieve the token from the requested url but I got the same error message.. I'm facing the same issue. I'm able to go to the link itself but validation fails.\nERROR:acme.challenges:311: Unable to reach http://mywebsite.com/.well-known/acme-challenge/longHashDHz80NFyKUEM24Z4: HTTPConnectionPool(host='mywebsite.com', port=80): Max retries exceeded with url: /.well-known/acme-challenge/longHashDHz80NFyKUEM24Z4 (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f3ae0cf4350>: Failed to establish a new connection: [Errno 99] Address not available',)). ",
    "hasufell": "Anyone knows of a more reliable image/approach than this one?. ",
    "richter-p": "Is there any temporary fix? I've got a few certificates expiring in two days and really don't want to set up another VPS to fetch certs from there and copy them to the proxy.\nEdit: I've fixed it by pulling the latest nginx-proxy from jwilder which I've been using.. ",
    "revolunet": "for some reason, the challenge file gets created but are deleted instantly, before the request happen... any idea ?\n\n. thanks @buchdag, i had an hard time localizing which library does the removal :)\nlooks like i had two nginx-proxy instances running at that time, i restarted the setup and it works now OK :). schema source : https://docs.google.com/drawings/d/1tQhliw8ixWBD8ygtN1K6oTs8a7L-FFk2hfkLXUbqFqg/edit?usp=sharing. thanks for that great collaborative resolution !. ",
    "IVData": "I'm on the latest version and I am having exactly the same issue. Letsencrypt challenge requests are passed onto the container behind the proxy, which results in a 404 being passed back to LE.. I seem to have solved my issue by removing my certs folder and the container and letting the letsencrypt companion start from scratch.\nAlso make sure you have the vhosts folder mounted on nginx-proxy =). ",
    "arthurvi": "I am running the latest version but the problem still exists. The log on letsencrypt keeps saying \"Invalid response\" because my API server is handling the request, not the Nginx prox in front. Anything I can try?. ",
    "sburnicki": "I had a smilar issue and fixed it by downgrading to jrcs/letsencrypt-nginx-proxy-companion:v1.4 as mentioned here. ",
    "obaydmir": "I removed AAAA record from my domain records and now I'm getting certificates from Let's Encrypt. A month ago I had another server on which I had set AAAA record and I got my certificates from Let's Encrypt. Their is some random magic happening.\nBut at this moment I still get this error messages, before eventually I receive the certificates:\nERROR:acme.challenges:311: Unable to reach http://my.domain.com/.well-known/acme-challenge/9JHkK8UBzk6G2QKNmz5UZLtABSXouI0ATPsbD8LbXLo: HTTPConnectionPool(host='my.domain.com', port=80): Max retries exceeded with url: /.well-known/acme-challenge/9JHkK8UBzk6G2QKNmz5UZLtABSXouI0ATPsbD8LbXLo (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f473870f850>: Failed to establish a new connection: [Errno 110] Operation timed out',))\nWARNING:simp_le:1303: my.domain.com was not successfully self-verified. CA is likely to fail as well!. ",
    "markvillar": "I managed to get it working based on this example: https://github.com/gilyes/docker-nginx-letsencrypt-sample\n~~Though it is still not clear how to use the image to generate multi-domain (subdomain) certificate at once for future use. The example by gilyes still uses 1 container per sub-domain, which I think is only good if you spin up all the containers along with their subdomains all at once.~~\nUPDATE: I just read what JrCs said here: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/73#issuecomment-228017801 so I guess that answers my previous question.. ",
    "Steven-Harris": "@buchdag  So, the certs should be persisting and they are not? Do you see anything that I am missing in my docker-compose?. Awesome! Thanks for the help. That makes sense and I will make those changes. . ",
    "claym": "Had a question on this - if i'm explicitly importing volumes from my host, is using named volumes still required?\nLike if I did\nvolumes:\n      - \"/config/nginx/vhost.d:/etc/nginx/vhost.d\"\nWould this still results in random volumes being created?. ",
    "narolinus": "That would be a great addition. I would really appreciate it.. Tried it manually on my installation and can confirm that it does work. Great. Thank you.. ",
    "pidupuis": "Could you share us your docker-compose.yml file?. ",
    "githtz": "@pidupuis \nI haven't been using docker-compose, so here are the bash cmds I executed.\n```\ncurl https://raw.githubusercontent.com/jwilder/nginx-proxy/master/nginx.tmpl \\\n    > /var/docker-gen/templates/nginx.tmpl\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx \\\n    --restart=always \\\n    -v /etc/nginx/conf.d  \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/letsencrypt/certs:/etc/nginx/certs:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true \\\n    nginx\ndocker run -d \\\n    --name nginx-gen \\\n    --restart=always \\\n    --volumes-from nginx \\\n    -v /var/docker-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    -v /etc/nginx-gen/vhost.d:/etc/nginx/vhost.d:ro \\\n    jwilder/docker-gen \\\n    -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl \\\n    /etc/nginx/conf.d/default.conf\ndocker run -d \\\n    --name nginx-letsencrypt \\\n    --restart=always \\\n    -e \"NGINX_DOCKER_GEN_CONTAINER=nginx-gen\" \\\n    --volumes-from nginx \\\n    -v /var/letsencrypt/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    jrcs/letsencrypt-nginx-proxy-companion\ndocker run -d --name=nextcloud \\\n    --restart=always \\\n    --link db:mysql \\\n    -v /var/nextcloud-data:/var/www/html \\\n    -e \"VIRTUAL_HOST=nextcloud.example.com\" \\\n    -e \"LETSENCRYPT_HOST=nextcloud.example.com\" \\\n    -e \"LETSENCRYPT_EMAIL=me@mail.com\" \\\n    nextcloud\ndocker run -d --name=db \\\n    --restart=always \\\n    -v /var/nextcloud-db:/var/lib/mysql \\\n    -e \"MYSQL_ROOT_PASSWORD=secret_root_pass\" \\\n    -e \"MYSQL_PASSWORD=secret_user_pass\" \\\n    -e \"MYSQL_DATABASE=nextcloud\" \\\n    -e \"MYSQL_USER=nextcloud\" \\\n    mariadb\n```\nThen I added the apache service via\ndocker run -d \\\n    --restart=always \\\n    --name=myapache \\\n    -v /var/www:/usr/local/apache2/htdocs/ \\\n    -e \"VIRTUAL_HOST=web.example.com\" \\\n    -e \"LETSENCRYPT_HOST=web.example.com\" \\\n    -e \"LETSENCRYPT_EMAIL=me@mail.com\" \\\n    httpd:2.4\nI've found out another pretty interesting thing. When I try to access http://web.example.com I'm accessing the service that I had configured for web.example.com, but if I use https://web.example.com I just receive a warning that the certificate fits for nextcloud.example.com only. Is it possible, that the nginx-gen template file does ignore subdomains for ssl-encrypted pages? Just a random thought.... Hey there,\nI solved the problem. I found out that I am a complete idiot. \nBy adding the line -v /etc/nginx-gen/vhost.d:/etc/nginx/vhost.d:ro when calling jwilder/docker-gen I prevented the le-companion from enabling public access to my subdomains .well-known folders. After I removed the parameter everything worked fine.. You really need to expose port 80 in your docker-compose file for each docker container you're running. Should do like this:\n```\nversion: '3'\nservices:\n  calibre-web:\n    image: technosoft2000/calibre-web\n    container_name: calibre-web\n    volumes:\n      - \"/media/Storage/Calibre:/books:rw\"\n      - \"/var/calibre/metadata.db:/books/metadata.db:rw\"\n    ports:\n      - \"8083:8083\"\n    expose:\n      - \"80\"\n    environment:\n      - SET_CONTAINER_TIMEZONE=true\n      - CONTAINER_TIMEZONE=America/New_York\n      - PGID=1000 \n      - PUID=1000\n      - VIRTUAL_HOST=library.xxx.net\n      - VIRTUAL_PORT=8083\n      - LETSENCRYPT_HOST=library.xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n      - letsencrypt\n    networks:\n      - proxynet\nproxy:\n    image: jwilder/nginx-proxy\n    container_name: proxy\n    networks:\n      - proxynet\n    ports:\n      - \"13.13.13.180:80:80\"\n      - \"13.13.13.180:443:443\"\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\n    volumes:\n      - /var/nginx/certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /var/nginx/vhost.d:/etc/nginx/vhost.d \n      - /var/nginx/html:/usr/share/nginx/html\n    environment:\n      - DEFAULT_HOST=xxx.net\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt\n    networks:\n      - proxynet\n    volumes:\n      - /var/nginx/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /var/nginx/vhost.d:/etc/nginx/vhost.d \n      - /var/nginx/html:/usr/share/nginx/html\n    depends_on:\n      - proxy\n    # environment:\n    #   - DEBUG=true\nwww_main:\n    image: nginx:alpine\n    container_name: www_main\n    networks:\n      - proxynet\n    volumes:\n      - ../www:/usr/share/nginx/html\n    expose:\n      - \"80\"\n    environment:\n      - VIRTUAL_HOST=xxx.net\n      - LETSENCRYPT_HOST=xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n      - letsencrypt\nhandfuls:\n    image: drupal:7\n    container_name: handfuls\n    networks:\n      - proxynet\n    volumes:\n      - /var/handfuls/modules:/var/www/html/modules\n      - /var/handfuls/profiles:/var/www/html/profiles\n      - /var/handfuls/themes:/var/www/html/themes\n      - /var/handfuls/sites:/var/www/html/sites\n    expose:\n      - \"80\"\n    environment:\n      - VIRTUAL_HOST=handfuls.xxx.net\n      - LETSENCRYPT_HOST=handfuls.xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n    links:\n      - mariadb\nnetworks:\n  proxynet:\n    external:\n      name: nginx-proxy\n```. @ErroneousBosch you're right, if there is no application on that port exposing the port is useless. \nI've had a very similar issue a few weeks ago. It looks like the letsencrypt-nginx-proxy-companion does only retrieve certificates if there is an application on port 80. A few containers that I'm running do not have applications on port 80 but I still needed the certificates. So I created a simple httpd-container that has the VIRTUAL_HOST-variable set to all the hosts that do not export port 80 by their own. @dasmedium maybe this might help you?. @buchdag I came to the conclusion since I didn't get any certs if port 80 was not exposed in either the docker-compose file or the run command of the container, but my conclusion might be faulty of course. I'll give it a try again without exposal and report my results.. ",
    "epos": "For further reference: I had the same problem when hosting multiple subdomains in the same container. This was solved using one container for each domain.\nWhat doesn't work (for me):\n\"LETSENCRYPT_HOST=subdomain1.example.com,subdomain2.example.com\".\n",
    "pLesur": "Hi, I'm having the same issue. I guess you weren't able to find a workaround @fabricetriboix  ?. ",
    "fabricetriboix": "Hi pLesur,\nIn the end, I had to get someone to look at it for me. It looks like the \"vhost.d\" stuff actually is a problem. Here is a diff of the nginx.tmpl file the guy fixed:\n```\n--- nginx.tmpl-orig\n+++ nginx.tmpl\n@@ -207,9 +207,13 @@\n{{ if (exists (printf \"/etc/nginx/vhost.d/%s\" $host)) }}\ninclude {{ printf \"/etc/nginx/vhost.d/%s\" $host }};\n\n\n{{ else if (exists \"/etc/nginx/vhost.d/default\") }}\ninclude /etc/nginx/vhost.d/default;\n{{ end }}\n+#  {{ else if (exists \"/etc/nginx/vhost.d/default\") }}\n+#  include /etc/nginx/vhost.d/default;\n+#  {{ end }}\nlocation /.well-known/acme-challenge {\nroot /usr/share/nginx/html;\n}\n+\n\nlocation / {\n   {{ if eq $proto \"uwsgi\" }}\n@@ -246,9 +250,14 @@\n{{ if (exists (printf \"/etc/nginx/vhost.d/%s\" $host)) }}\n    include {{ printf \"/etc/nginx/vhost.d/%s\" $host }};\n-   {{ else if (exists \"/etc/nginx/vhost.d/default\") }}\n-   include /etc/nginx/vhost.d/default;\n-   {{ end }}\n+#  {{ else if (exists \"/etc/nginx/vhost.d/default\") }}\n+#  include /etc/nginx/vhost.d/default;\n+#  {{ end }}\n+\n+   location /.well-known/acme-challenge {\n+           root /usr/share/nginx/html;\n+   }\n+\nlocation / {\n    {{ if eq $proto \"uwsgi\" }}\n\n```\nIn other words, do not include any \"vhost\" generated files, and tell nginx to serve the acme thing directly.\nHTH!\nFabrice. ",
    "davidbarratt": "I'm also having this problem... it looks like the vhost.d files are never generated. I'm not really sure why they are not, but when I go into /etc/nginx/vhost.d they are missing. However, the image attempts to validate the cert, but it's forwarded to the backend. :(. Ah ha!\nin my case, both dockergen and letsencrypt needed access to the vhost volume.. ",
    "Rocks360": "Yes this is right. . ",
    "DuncanBetts": "Thank you!!\nI completely overlooked that I'd left that in.. Having removed that variable, and moved the contents of /app/volumes/nginx/certs to /app/volumes/nginx/certs/backup, I'm now getting I'm now getting an error I received earlier several times:\nroot@localhost:/app# docker-compose up --build\nCreating network \"app_default\" with the default driver\nBuilding gunicorn\nStep 1 : FROM python:latest\n ---> f9a9a73a3680\n ---> Using cache\n ---> 7b2ca99847dc\nStep 3 : ENV INSTALL_PATH /flask_app\n ---> Using cache\n ---> 1847b9fb6b94\nStep 4 : RUN mkdir -p $INSTALL_PATH\n ---> Using cache\n ---> 192372ca2061\nStep 5 : WORKDIR $INSTALL_PATH\n ---> Using cache\n ---> 749c2017da61\nStep 6 : RUN pip install --timeout 1000 flask gunicorn eventlet\n ---> Using cache\n ---> 0b7520948cae\nStep 7 : COPY . .\n ---> Using cache\n ---> cb0a9d7d456d\nSuccessfully built cb0a9d7d456d\nCreating gunicorn\nCreating nginx\nCreating docker-gen\nCreating nginx-letsencrypt\nAttaching to gunicorn, nginx, nginx-letsencrypt, docker-gen\ngunicorn             | [2017-06-29 15:21:03 +0000] [1] [INFO] Starting gunicorn 19.7.1\ngunicorn             | [2017-06-29 15:21:03 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)\ngunicorn             | [2017-06-29 15:21:03 +0000] [1] [INFO] Using worker: eventlet\ngunicorn             | [2017-06-29 15:21:03 +0000] [7] [INFO] Booting worker with pid: 7\ndocker-gen           | 2017/06/29 15:21:03 Generated '/etc/nginx/conf.d/default.conf' from 4 containers\ndocker-gen           | 2017/06/29 15:21:03 Sending container 'nginx' signal '1'\nnginx-letsencrypt    | Sleep for 3600s\ndocker-gen           | 2017/06/29 15:21:03 Watching docker events\nnginx-letsencrypt    | 2017/06/29 15:21:03 Generated '/app/letsencrypt_service_data' from 2 containers\nnginx-letsencrypt    | 2017/06/29 15:21:03 Running '/app/update_certs'\nnginx-letsencrypt    | 2017/06/29 15:21:03 Watching docker events\ndocker-gen           | 2017/06/29 15:21:03 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nnginx-letsencrypt    | 2017/06/29 15:21:03 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\nnginx-letsencrypt    | Reloading nginx docker-gen (using separate container docker-gen)...\nnginx-letsencrypt    | Creating/renewal qr.whichbonus.win certificates... (qr.whichbonus.win)\nnginx-letsencrypt    | 2017-06-29 15:21:04,163:INFO:simp_le:1211: Generating new account key\nnginx-letsencrypt    | 2017-06-29 15:21:04,609:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\nnginx-letsencrypt    | 2017-06-29 15:21:05,510:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\nnginx-letsencrypt    | 2017-06-29 15:21:06,767:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): qr.whichbonus.win\nnginx                | qr.whichbonus.win 172.18.0.1 - - [29/Jun/2017:15:21:06 +0000] \"GET /.well-known/acme-challenge/_lb3W_OPeHZ7BUH7ezJG3VKYF5bNuSefI90fES68JPQ HTTP/1.1\" 404 233 \"-\" \"python-requests/2.8.1\"\nnginx-letsencrypt    | 2017-06-29 15:21:06,802:WARNING:simp_le:1303: qr.whichbonus.win was not successfully self-verified. CA is likely to fail as well!\nnginx-letsencrypt    | 2017-06-29 15:21:07,022:INFO:simp_le:1313: Generating new certificate private key\nnginx                | qr.whichbonus.win 66.133.109.36 - - [29/Jun/2017:15:21:07 +0000] \"GET /.well-known/acme-challenge/_lb3W_OPeHZ7BUH7ezJG3VKYF5bNuSefI90fES68JPQ HTTP/1.1\" 404 233 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\nnginx-letsencrypt    | 2017-06-29 15:21:08,831:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/Fjl2mVhM_z-hIC6FrZBrS_rsLUbdwRce5N77lV6bk4k\nnginx-letsencrypt    | Challenge validation has failed, see error log.\nnginx-letsencrypt    | \nnginx-letsencrypt    | Debugging tips: -v improves output verbosity. Help is available under --help.\nnginx-letsencrypt    | Sleep for 3600s\nEarlier it seemed this resolved itself - after several attempts and some time passing, a certificate was successfully issued.. Nevermind - again, after running docker-compose down and docker-compose up a few times, waiting a few minutes, and doing the same, it's resolved itself.\nThanks for your help, much appreciated!. ",
    "evertramos": "Thanks for the comment @buchdag,\nI have the option in the jrcs/docker-letsencrypt-nginx-proxy-companion container, as of:\nenvironment:\n      NGINX_DOCKER_GEN_CONTAINER: \"nginx-gen\"\nIsn\u00b4t that right? Or I must have specify it somewhere else?\n. @buchdag \nSo it would be like this:\nnginx-letsencrypt:\n[...]\nenvironment:\n      NGINX_DOCKER_GEN_CONTAINER: \"nginx-gen\"\n      NGINX_PROXY_CONTAINER: \"nginx\"\nIs that it?\nThank you very much for your attention on that! It would take me 90 days to realize it.\n. @FractalMind you should be posting this on https://github.com/jwilder/nginx-proxy\n. @buchdag Thanks for your contribution!!! Traefik works really fine with it!!! I am doing some tests around it and it seems pretty stable as well. Since I have a couple servers running this repo It will take a couple months to release something usefull, but thank in advance!. sorry I search for wildcards not wildcard reason why I did not find it. thanks!. ",
    "zenhack": "Fwiw:\n\nThe release cycle is slow because development is slow -- I try not to let much time go by between a user-visible change and a release.\nper @buchdag's comment, the repo just isn't very big, and that's unlikely to change.\nsimp_le is also available on pypi; any reason not to just pip install? This would obviate the questions about clone depth. Note I haven't really looked at your project, so maybe I'm missing something obvious here.. I don't think the original hit pypi at all.. \n",
    "saeidscorp": "The SEGFAULT had nothing to do with the companion. It was an issue with PaX kernel. This line in the /var/log/grsec.log indicated it was the mmap/mprotect protection of PaX that caused the issue:\nkernel: grsec: denied RWX mmap of <anonymous mapping> by /usr/bin/simp_le[simp_le:23938] uid/euid:0/0 gid/egid:0/0, parent /app/letsencrypt_service[letsencrypt_ser:19109] uid/euid:0/0 gid/egid:0/0\nI tried disabling the relevant flag and then all PaX flags on the simp_le binary, but no change!\nThen I switched to PaX SOFTMODE and it went away.\nNow another problem arose, which its log entry was also present before, but I didn't notice.\nThe line:\n2017/07/15 07:44:40 Template error: readdirent: no such file or directory\nin:\n```Sleep for 3600s\n2017/07/15 07:44:40 Generated '/app/letsencrypt_service_data' from 2 containers\n2017/07/15 07:44:40 Running '/app/update_certs'\n2017/07/15 07:44:40 Watching docker events\nReloading nginx proxy...\n2017/07/15 07:44:40 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n2017/07/15 07:44:40 Template error: readdirent: no such file or directory\nh2017/07/15 07:44:40 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2017/07/15 07:44:40 [notice] 61#61: signal process started\n2017/07/15 07:44:40 [alert] 61#61: kill(22, 1) failed (1: Operation not permitted)\nnginx: [alert] kill(22, 1) failed (1: Operation not permitted)\nCreating/renewal  certificates... ()\n2017-07-15 07:44:40,755:INFO:simp_le:1211: Generating new account key\n2017-07-15 07:44:41,942:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n2017-07-15 07:44:43,048:INFO:requests.packages.urllib3.connectionpool:756: Starting new HTTPS connection (1): letsencrypt.org\n2017-07-15 07:44:43,969:INFO:requests.packages.urllib3.connectionpool:207: Starting new HTTP connection (1): \n2017-07-15 07:46:53,767:ERROR:acme.challenges:311: Unable to reach http:///.well-known/acme-challenge/TVZGnraK6RMlkgiNg5e8coBSxh1CpNJ_LkrNKkONjd4: \n    HTTPConnectionPool(host='', port=80): Max retries exceeded with url:\n        /.well-known/acme-challenge/TVZGnraK6RMlkgiNg5e8coBSxh1CpNJ_LkrNKkONjd4 \n    (Caused by NewConnectionError(':\n            Failed to establish anew connection: [Errno 110] Operation timed out',))\n2017-07-15 07:46:53,768:WARNING:simp_le:1303:  was not successfully self-verified. CA is likely to fail as well!\n2017-07-15 07:46:53,994:INFO:simp_le:1313: Generating new certificate private key\n2017-07-15 07:46:55,664:ERROR:simp_le:1271: CA marked some of the authorizations as invalid, \n    which likely means it could not access http://example.com/.well-known/acme-challenge/X.\n    Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification?\n    Are all your domains accessible from the internet? Failing authorizations: \n        https://acme-v01.api.letsencrypt.org/acme/authz/2GcpBRgUQ_-4I5GqOPV987GZxWLF0UkcoiqqSff1RJQ\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\nSleep for 3600s\n```\nNot sure if I should close this and open another issue!\n. ",
    "thmhoag": "I have tested it, but this change would only affect the generation of the certs by the letsencrypt-companion container. Did you check to see if your certs had been generated?\nTo get the default.conf to generate properly, a similar change has to be made to the docker-gen statement that generates the default.conf. The difference is that you can change this without modifying the code for docker-gen since you specify your own entrypoint for the docker-gen container.\nHere's an example docker-compose file that works and might make more sense: https://gist.github.com/thmhoag/2e160cee99fb7c9f46db8e4a34c80d15\nOf course to run it you'll have to change the image name of the nginx-letsencrypt to whatever you named the build from my pull-request, and also the VIRTUAL_HOST, LETSENCRYPT_HOST, LETSENCRYPT_EMAIL.\nThe key for the default.conf is that my entrypoint line for the docker-gen container also excludes the -only-exposed argument.\n\nentrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n\nAs far as what I'm trying to accomplish, you're right, it's a bit of an edge-case. The idea is simply to keep all containers that don't absolutely require outside internet access on an internal network, especially the containers that have access to the docker.sock. This still leaves the letsencrypt-companion container on an external network, but that is unavoidable since it requires internet access to generate and maintain ssl certs. . Right, exactly. I'm intentionally exposing web traffic via the proxy, but that container doesn't need access to the internet to serve the purpose of providing a web UI for docker.sock. \nI think my question here would be, is there any reason that we need the -only-exposed argument for this docker-gen statement? My thought behind the pull request was that the argument is unnecessary since containers will be filtered out by the LETSENCRYPT_HOST and LETSENCRYPT_EMAIL environment variables anyway, so I can't imagine anyone unintentionally generating certs for containers by removing it. However, if there is a specific reason for needing it that I'm missing here, maybe we could also consider making in an option via another environment variable, or providing some kind of override?. ",
    "nick-jansen": "Works great, thanks! When will this be merged?. ",
    "jasonchi38": "The communication is not working if you stack deploy a container on another node within the swarm. Has this problem been resolved?\nFor example:\n2 worker node, and 1 management node.\nmanage node is running nginx-letsencrypt server using deploy with contraints to this manage node.\n- If I deploy an application contraints to the management node, nginx-letsencrypt log show that it detects this application and function properly.\n- If I deploy an application contraints to workers node, nginx-letsencrypt doesn't detect the container has been started.\nIf I create two docker-gen service in the same deployment, one for manager and worker. this acknowledges container start detection in workder node, but the process returns error shown below on worker node:\n\"Error running notify command: docker-label-sighup com.docker.swarm.service.name=frontend_nginx, exit status 1\". sounds like somehow \"frontend_nginx\" is not valid from the worker node.\nso basically, running everything in the same node works fine. but if proxy and application container are in different node within Swarm it doesn work.\nHere is the frontend yml\nhtml\nversion: '3.2'\nservices:\n  nginx: #manger node- only one instance\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"   \n    #volumes are pointed to nfs, all node has access to these files.\n    volumes:\n      - ./nginx-conf/etc/conf.d:/etc/nginx/conf.d\n      - ./nginx-conf/etc/vhost.d:/etc/nginx/vhost.d\n      - ./nginx-conf/usr/share/nginx/html:/usr/share/nginx/html\n      - ./nginx-conf/var/letsencrypt/certs:/etc/nginx/certs:ro\n    labels:\n      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\n    deploy:\n      placement:\n        constraints: [node.id == rxyh541dpy2wnucsvif1cvcn6]       \n  dockergen: #manager node\n    image: helder/docker-gen\n    command: -notify \"docker-label-sighup com.docker.swarm.service.name=frontend_nginx\" -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf  \n    volumes:\n       - ./nginx-conf/etc/conf.d:/etc/nginx/conf.d\n       - ./nginx-conf/etc/vhost.d:/etc/nginx/vhost.d\n       - ./nginx-conf/var/docker-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\n       - ./nginx-conf/var/letsencrypt/certs:/etc/nginx/certs\n       - /var/run/docker.sock:/tmp/docker.sock:ro\n    deploy:\n      placement:\n        constraints: [node.id == rxyh541dpy2wnucsvif1cvcn6]    \n  dockergen-rm1: #worker node\n    image: helder/docker-gen\n    command: -notify \"docker-label-sighup com.docker.swarm.service.name=frontend_nginx\" -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n       - ./nginx-conf/etc/conf.d:/etc/nginx/conf.d\n       - ./nginx-conf/etc/vhost.d:/etc/nginx/vhost.d\n       - ./nginx-conf/var/docker-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\n       - ./nginx-conf/var/letsencrypt/certs:/etc/nginx/certs\n       - /var/run/docker.sock:/tmp/docker.sock:ro   \n    labels:\n      - com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen\n    deploy:\n      placement:\n        constraints: [node.id == rbom24xvsp57b0dwe3064xekm]            \n  letsencrypt: #manager node\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      #- /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./nginx-conf/etc/conf.d:/etc/nginx/conf.d\n      - ./nginx-conf/etc/vhost.d:/etc/nginx/vhost.d\n      - ./nginx-conf/var/letsencrypt/certs:/etc/nginx/certs\n      - ./nginx-conf/usr/share/nginx/htmlt:/usr/share/nginx/html\n    deploy:\n      placement:\n        constraints: [node.id == rxyh541dpy2wnucsvif1cvcn6]          \n  letsencrypt-rm1: #worker node\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./nginx-conf/etc/conf.d:/etc/nginx/conf.d\n      - ./nginx-conf/etc/vhost.d:/etc/nginx/vhost.d\n      - ./nginx-conf/var/letsencrypt/certs:/etc/nginx/certs\n      - ./nginx-conf/usr/share/nginx/htmlt:/usr/share/nginx/html\n    deploy:\n      placement:\n        constraints: [node.id == rbom24xvsp57b0dwe3064xekm]           \n    environment:\n      NGINX_DOCKER_GEN_CONTAINER: \"dockergen\"\n      NGINX_PROXY_CONTAINER: \"nginx\"               \nnetworks:\n  default:\n    external:\n      name: proxy\nHere is the application yml.\n```html\nversion: '3'\nvolumes:\n  nextcloud:\n  db:\nservices:\ndb:\n    image: mariadb\n    restart: always\n    volumes:\n      - db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret_root_pass\n      - MYSQL_PASSWORD=secret_user_pass\n      - MYSQL_DATABASE=nextcloud \n      - MYSQL_USER=nextcloud\n    deploy:\n      placement:\n        constraints: [node.id == rbom24xvsp57b0dwe3064xekm]     #worker node   \n  app:\n    image: nextcloud\n    links:\n      - db\n    volumes:\n      - nextcloud:/var/www/html\n    environment:\n      - VIRTUAL_HOST=www.doamin.com\n      - LETSENCRYPT_HOST=www.domain.com\n      - LETSENCRYPT_EMAIL=name@email.com\n    restart: always\n    deploy:\n      placement:\n        constraints: [node.id == rbom24xvsp57b0dwe3064xekm]    #worker node  \nnetworks:\n  default:\n    external:\n      name: proxy\n```\n. Has anyone successfully implemented in swarm mode where you deploy nginx-letsencrypt service on one node, and deploy web application on another node?\nPlease let me know if it's not possible at this time, google various answers are driving me nuts.\nThanks.. buchdag, can you post your working compose stack file examples? thanks in advance.. ",
    "markus-k": "I'm running into the same issues without auth_basic off;, can confirm this fixes failed verifications.. ",
    "andreagentili": "This may be useful: https://community.letsencrypt.org/t/underscore-in-subdomain-fails/31431/6. Lets'encrypt doesn't support underscore in DNS names.. ",
    "evilstiefel": "Thanks for letting me know, maybe someone can shed some light on the \"failed verification\" messages :). ",
    "ErroneousBosch": "Oh and I have tried removing and restarting everything, no luck. I checked and all three certs are coming back as issued, Right now I can get to the main page and the library page fine, but handfuls gives me a NET::ERR_CERT_COMMON_NAME_INVALID, with the cert saying it id for xxx.net instead of handfuls.xxx.net. Just ried it on a completely different machine and browser and it does the same.\nI checked and the nginx conf is setup for the correct cert.. Yes, crt.sh is showing certs are getting issued multiple times per week/day, showing the following:\n\n\n\nCompose below: \n```\nversion: '3'\nservices:\n  calibre-web:\n    image: technosoft2000/calibre-web\n    container_name: calibre-web\n    volumes:\n      - \"/media/Storage/Calibre:/books:rw\"\n      - \"/var/calibre/metadata.db:/books/metadata.db:rw\"\n    ports:\n      - \"8083:8083\"\n    environment:\n      - SET_CONTAINER_TIMEZONE=true\n      - CONTAINER_TIMEZONE=America/New_York\n      - PGID=1000 \n      - PUID=1000\n      - VIRTUAL_HOST=library.xxx.net\n      - VIRTUAL_PORT=8083\n      - LETSENCRYPT_HOST=library.xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n      - letsencrypt\n    networks:\n      - proxynet\nproxy:\n    image: jwilder/nginx-proxy\n    container_name: proxy\n    networks:\n      - proxynet\n    ports:\n      - \"13.13.13.180:80:80\"\n      - \"13.13.13.180:443:443\"\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\"\n    volumes:\n      - /var/nginx/certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /var/nginx/vhost.d:/etc/nginx/vhost.d \n      - /var/nginx/html:/usr/share/nginx/html\n    environment:\n      - DEFAULT_HOST=xxx.net\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt\n    networks:\n      - proxynet\n    volumes:\n      - /var/nginx/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /var/nginx/vhost.d:/etc/nginx/vhost.d \n      - /var/nginx/html:/usr/share/nginx/html\n    depends_on:\n      - proxy\n    # environment:\n    #   - DEBUG=true\nwww_main:\n    image: nginx:alpine\n    container_name: www_main\n    networks:\n      - proxynet\n    volumes:\n      - ../www:/usr/share/nginx/html\n    environment:\n      - VIRTUAL_HOST=xxx.net\n      - LETSENCRYPT_HOST=xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n      - letsencrypt\nhandfuls:\n    image: drupal:7\n    container_name: handfuls\n    networks:\n      - proxynet\n    volumes:\n      - /var/handfuls/modules:/var/www/html/modules\n      - /var/handfuls/profiles:/var/www/html/profiles\n      - /var/handfuls/themes:/var/www/html/themes\n      - /var/handfuls/sites:/var/www/html/sites\n    environment:\n      - VIRTUAL_HOST=handfuls.xxx.net\n      - LETSENCRYPT_HOST=handfuls.xxx.net\n      - LETSENCRYPT_EMAIL=user@xxx.net\n    depends_on:\n      - proxy\n    links:\n      - mariadb\nnetworks:\n  proxynet:\n    external:\n      name: nginx-proxy\n```. The port exposure was for testing purposes, to allow me to access it on my local network and make sure the service was running. It wasn't affecting the proxy when I was running with it, external traffic all went through the proxy. The Drupal7 container is based on the official PHP7 Apache container and exposes Port 80. \nI did wipe the certs once when I was setting up the initial two containers, since I had them setup as a SAN, but that was not working across multiple containers, so I wiped and went to one cert per container. I haven't wiped them for this round of testing and spinning up this latest container. . New development: Library has stopped working now. The ports actually had no bearing on this issue. Turned out to be a misconfiguration in the nginx files that was killing the linkup. I have updated the containers since then and it seems to have resolved the issues I was having.\nAlso, what would be the point of exposing port 80 on a container that has no services running on that port? Calibre-web doesn't have anything on port 80; it is a python script and only uses port 8083. Opening port 80 seems to me to have more potential to cause issues than resolve them, since if nginx-proxy looks on that port it will return an http:500 error.\n. ",
    "dasmedium": "@ErroneousBosch \nCan you share how you changed the Nginx misconfiguration issue? I am having a similar problem. :). ",
    "martinschueller": "@githtz Thanks for the tip. This wasn't needed in older versions. I suppose this way auto-renewing doesn't work and you'd have to start the httpd-container once in a while to auto renew. Correct?. @buchdag me neither. Also used gitlab, graphana etc. But in the most recent version it doesn't seem to work anymore for apps on different ports.. ",
    "tylerbuchea": "Just found the v3 link \ud83d\ude05 . ",
    "italomaia": "@buchdag what does \"SSL termination means?\" Is it a usual setup to have the proxy redirect to port 80?\nSo, 443 -> 443 is not possible (or not a good idea)? . By the way, your advise hit the apple. The handshake goes nicely now, but the second server does not respond to the virtual host server name. Always returns the nginx index.html page. . ",
    "martinhpunkt": "Hi,\nthanks for your input.\nnetstat -lt\nAktive Internetverbindungen (Nur Server)\nProto Recv-Q Send-Q Local Address           Foreign Address         State      \ntcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN     \ntcp6       0      0 [::]:http               [::]:*                  LISTEN     \ntcp6       0      0 [::]:ssh                [::]:*                  LISTEN     \ntcp6       0      0 [::]:https              [::]:*                  LISTEN\nThis seems about right. I should've mentioned that I also checked this. However, haven't checked for nmap.\nFrom my PC nmap returns:\n```\nnmap xxx.xxx.141.136\nStarting Nmap 7.01 ( https://nmap.org ) at 2017-07-26 21:05 CEST\nNmap scan report for virtualhost.somehoster.com (xxx.xxx.141.136)\nHost is up (0.070s latency).\nNot shown: 995 closed ports\nPORT    STATE    SERVICE\n22/tcp  open     ssh\n80/tcp  open     http\n135/tcp filtered msrpc\n139/tcp filtered netbios-ssn\n445/tcp filtered microsoft-ds\nNmap done: 1 IP address (1 host up) scanned in 2.10 seconds\n```\nAnd this really bothers me now. How can that be?\ndocker ps\nCONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS              PORTS                                      NAMES\n9684b9785224        jrcs/letsencrypt-nginx-proxy-companion   \"/bin/bash /app/en...\"   46 hours ago        Up 46 hours                                                    proxy-companion\n99f0daf50d9b        jwilder/nginx-proxy:alpine               \"/app/docker-entry...\"   46 hours ago        Up 46 hours         0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   proxy\nbfca61f50066        owncloud:9.1                             \"docker-entrypoint...\"   46 hours ago        Up 46 hours         80/tcp                                     owncloud\n11c1544be1be        mariadb:latest                           \"docker-entrypoint...\"   47 hours ago        Up 47 hours         3306/tcp                                   owncloud-mariadb\nAlso:\n```\niptables -nL\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nChain FORWARD (policy DROP)\ntarget     prot opt source               destination       \nDOCKER-ISOLATION  all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0         \nACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           \nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nChain DOCKER (3 references)\ntarget     prot opt source               destination       \nACCEPT     tcp  --  0.0.0.0/0            172.18.0.2           tcp dpt:443\nACCEPT     tcp  --  0.0.0.0/0            172.18.0.2           tcp dpt:80\nChain DOCKER-ISOLATION (1 references)\ntarget     prot opt source               destination       \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nDROP       all  --  0.0.0.0/0            0.0.0.0/0         \nRETURN     all  --  0.0.0.0/0            0.0.0.0/0           \nChain l (0 references)\ntarget     prot opt source               destination\n...which makes sense to me, because\ndocker network inspect nw_letsencrypt-nginx\n[\n    {\n        \"Name\": \"nw_letsencrypt-nginx\",\n        \"Id\": \"489f1344b82f5de88e71d84b52399db61edd1d8be5533bd7738c37685b7076c3\",\n        \"Created\": \"2017-07-24T23:21:07.721003414+02:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"Containers\": {\n            \"9684b97852245c781b9fb1fab89d8f022ec2f764160c015ca0ef5bbf8054ba5f\": {\n                \"Name\": \"proxy-companion\",\n                \"EndpointID\": \"35a7ce4d7630ffc51430fbaf1e05740568aa37251e95604876a495f69db16cb4\",\n                \"MacAddress\": \"02:42:ac:12:00:03\",\n                \"IPv4Address\": \"172.18.0.3/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"99f0daf50d9b2b55285645b8417642544a04db2d6a1a740ce4ced659b8b57268\": {\n                \"Name\": \"proxy\",\n                \"EndpointID\": \"53039348503c73700d9d4287414f437eb48ae193cac48baf6f7b3e891383a513\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\nAny  ideas? What am I missing?\nThanks you all again in advance!\nKind regards,\nMartin. Hi,\nsorry for the late response. Nothing at all. I haven't changed the iptables so only the rules from iptables are set. Because I needed the services I made a classical \"non-dockerized\" setup and everything works fine, so I can exclude anything from the hosting side. However, if I could switch over to Docker, it would still be great. . ",
    "alberto56": "It might be worth noting that it can take a few minutes for the port 443 to be available: I had to wait 5 minutes and everything works fine.. ",
    "grebois": "@martinhpunkt could you share the output of:\ndocker exec -it 99f0daf50d9b cat /etc/nginx/conf.d/default.conf\nThanks!. ",
    "bswinnerton": "\ud83d\udc4b Hi @grebois, I'm having a very similar problem, and don't have any firewalls in place that would be causing problems. \n\n@martinhpunkt could you share the output of:\ndocker exec -it 99f0daf50d9b cat /etc/nginx/conf.d/default.conf\nThanks!\n\nWhen I do this, I notice nginx isn't wired up to 443. Could that be the problem?\n```nginx\nIf we receive X-Forwarded-Proto, pass it through; otherwise, pass along the\nscheme used to connect to this server\nmap $http_x_forwarded_proto $proxy_x_forwarded_proto {\n  default $http_x_forwarded_proto;\n  ''      $scheme;\n}\nIf we receive X-Forwarded-Port, pass it through; otherwise, pass along the\nserver port the client connected to\nmap $http_x_forwarded_port $proxy_x_forwarded_port {\n  default $http_x_forwarded_port;\n  ''      $server_port;\n}\nIf we receive Upgrade, set Connection to \"upgrade\"; otherwise, delete any\nConnection header that may have been passed to this server\nmap $http_upgrade $proxy_connection {\n  default upgrade;\n  '' close;\n}\nApply fix for very long server names\nserver_names_hash_bucket_size 128;\nDefault dhparam\nSet appropriate X-Forwarded-Ssl header\nmap $scheme $proxy_x_forwarded_ssl {\n  default off;\n  https on;\n}\ngzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\nlog_format vhost '$host $remote_addr - $remote_user [$time_local] '\n                 '\"$request\" $status $body_bytes_sent '\n                 '\"$http_referer\" \"$http_user_agent\"';\naccess_log off;\nHTTP 1.1 support\nproxy_http_version 1.1;\nproxy_buffering off;\nproxy_set_header Host $http_host;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $proxy_connection;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;\nproxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;\nproxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;\nMitigate httpoxy attack (see README for details)\nproxy_set_header Proxy \"\";\nserver {\n        server_name _; # This is just an invalid value which will never trigger on a real hostname.\n        listen 80;\n        access_log /var/log/nginx/access.log vhost;\n        return 503;\n}\ngraphs.foo.bar\nupstream graphs.foo.bar {\n                                ## Can be connect with \"bridge\" network\n                        # grafana\n                        server 172.17.0.3:3000;\n}\nserver {\n        server_name graphs.foo.bar;\n        listen 80 ;\n        access_log /var/log/nginx/access.log vhost;\n        include /etc/nginx/vhost.d/default;\n        location / {\n                proxy_pass http://graphs.foo.bar;\n        }\n}\n```\nI'm using the nginx.tmpl from https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion#separate-containers-recommended-method, specifically https://github.com/jwilder/nginx-proxy/blob/a6e8fae7f5959d1f7a4751f495d876ed174b612f/nginx.tmpl.\nUpdate: After running docker exec -it 99f0daf50d9b ls -l /etc/nginx/certs, and saw that none existed, I realized that I had butchered the -v command of docker run. Recreating the containers fixed the problem for me \ud83c\udf89 .. ",
    "rjsteinert": "Hi folks. I'm having a similar problem where port 443 connections are refused, there is no firewall in the way, but I am seeing the app on port 80. The way I know port 443 connections are not firewalled is that when I bind some http service to port 443, browsers and curl start complaining about handshake issues.  \nGetting to the point here, this is a very vanilla hello world example. Perhaps someone could point out my folly?\n```sh\nDOMAIN=\"p2p.earth\"\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    -v $(pwd)/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\ndocker run -d \\\n    -v $(pwd)/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volumes-from nginx-proxy \\\n    jrcs/letsencrypt-nginx-proxy-companion\ndocker run -d -e \"VIRTUAL_HOST=$DOMAIN\" nginx\n```. Any clues here?\n\u279c  ssl-hello-world docker logs distracted_saha\nCreating Diffie-Hellman group (can take several minutes...)\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\n\u279c  ssl-hello-world docker logs -f distracted_saha\nCreating Diffie-Hellman group (can take several minutes...)\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\nnSleep for 3600s\n2017/12/25 15:42:36 Generated '/app/letsencrypt_service_data' from 3 containers\n2017/12/25 15:42:36 Running '/app/update_certs'\n2017/12/25 15:42:37 Watching docker events\nSleep for 3600s\n2017/12/25 15:42:37 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n. I added an extra environment variable -e \"LETSENCRYPT_HOST=$DOMAIN\" and it worked! You can see the current version of the hello world script here -> https://gist.github.com/rjsteinert/e819c547d2a37e76bb8735843f44f6bd\nDoes this log output look alright?\nSleep for 3600s\n2017/12/25 15:54:54 Generated '/app/letsencrypt_service_data' from 3 containers\n2017/12/25 15:54:54 Running '/app/update_certs'\n2017/12/25 15:54:54 Watching docker events\n/etc/nginx/certs/p2p.earth /app\nReloading nginx proxy (nginx-proxy)...\n2017/12/25 15:54:54 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\n\ufffd2017/12/25 15:54:54 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\n2017/12/25 15:54:54 [notice] 55#55: signal process started\nCreating/renewal p2p.earth certificates... (p2p.earth)\n2017-12-25 15:54:55,805:INFO:simp_le:1538: Retrieving Let's Encrypt latest Terms of Service.\n2017-12-25 15:54:56,817:INFO:simp_le:1356: Generating new account key\n2017-12-25 15:54:58,926:WARNING:simp_le:1371: --email was not provided; ACME CA will have no way of contacting you.\n2017-12-25 15:55:01,734:INFO:simp_le:1455: Generating new certificate private key\n2017-12-25 15:55:03,460:INFO:simp_le:463: Saving account_key.json\n2017-12-25 15:55:03,461:INFO:simp_le:463: Saving key.pem\n2017-12-25 15:55:03,461:INFO:simp_le:463: Saving chain.pem\n2017-12-25 15:55:03,462:INFO:simp_le:463: Saving fullchain.pem\n2017-12-25 15:55:03,462:INFO:simp_le:463: Saving cert.pem\n/app\nReloading nginx proxy (nginx-proxy)...\nQ2017/12/25 15:55:03 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\n;2017/12/25 15:55:03 [notice] 64#64: signal process started\nSleep for 3600s. Thanks @buchdag. I went back and reread that. I noticed my hello world was missing the LETSENCRYPT_EMAIL variable.\nFWIW, this is the hello world example I wish I had seen a long time ago, it might help out some other folks who come from where I'm coming from.\n```\n!/bin/sh\nDOMAIN=\"p2p.earth\"\nEMAIL=\"rj@rjsteinert.com\"\necho \"\"\necho \"Starting proxy and ssl companion.\"\necho \"\"\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    -v $(pwd)/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\ndocker run -d \\\n    --name letsencrypt-nginx-proxy-companion \\\n    -v $(pwd)/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volumes-from nginx-proxy \\\n    jrcs/letsencrypt-nginx-proxy-companion\necho \"\"\necho \"Sleeping while things start up...\"\necho \"\"\nsleep 60\necho \"\"\necho \"Starting the app.\"\necho \"\"\ndocker run -d \\\n  --name app \\\n  -e \"LETSENCRYPT_HOST=$DOMAIN\" \\\n  -e \"VIRTUAL_HOST=$DOMAIN\" \\\n  -e \"LETSENCRYPT_EMAIL=$EMAIL\" \\\n  nginx\n```. ",
    "weeger": "Thanks, for me the example usage of sleep 60 saved me.. ",
    "oktango": "I have the same question: is it possible to use two or more instances of companion for two or more nginx-proxy sets for different IPs?\nAnd yes, it is possible to have multiple nginx-proxy on the same host.\nIn case you are using separate nginx-proxy containers you will need to slightly change default nginx.tmpl per each additional instance: change VIRTUAL_HOST to some different variable (VIRTUAL_HOST_1) and then use that variable for your virtual host containers (instead of standard VIRTUAL_HOST). ",
    "SebastianStehle": "Okay, now it is official: I am stupid. ",
    "imaia": "Thanks @buchdag I'm reaching the nginx-proxy community for help.. ",
    "stratosgear": "I get the same error and I do not know how to debug it and start looking what is wrong.  I DO expose the proper ports and everything but I still get the same error... :(. ",
    "aneumeier": "The same happens here in an installation that was working before.\nUpgraded both nginx-proxy and letsencrypt-nginx-proxy-companion to the respective latest versions, still the same.. ",
    "unguiculus": "I recently got this too. I added DEBUG=true which revealed the actual error: SERVFAIL looking up CAA. I don't have a solution yet.\nSee https://community.letsencrypt.org/t/caa-servfail-changes/38298. ",
    "andiwi": "I had a similar problem SERVFAIL looking up A for ...com\nThere were some misconfigurations with the DNS Servers. I am using namecheap and disabled the DNSSEC. Now the certification process finally works again! yay!\nThis post helped me: https://community.letsencrypt.org/t/dns-problem-servfail-looking-up-a-for-sub-domain-tld/19864 \nHopefully this helps you too!. ",
    "ismay": "Hi @buchdag, I mean the verification that certbot does, where it checks if there is a file in www.domain-i-want-to-verify.com/.well-known/acme-challenge/random-filename.\nI just now found some documentation stating that certbot does indeed verify over http (which makes sense), https://certbot.eff.org/docs/using.html#webroot.\nSo what I'm now wondering, does the standard configuration of https://github.com/jwilder/nginx-proxy coupled with this container redirect all http requests to https? Also the ones to domain.com/.well-known? Because it looks like that's what's happening in my case.\n. Ok, so I can expect certbot to be redirected to https when using the standard config and then attempt to validate a file in https://domain.com/.well-known/acme-challenge? Just so I understand what's going on.. >  I'm not so sure of that. The redirection to https only happens if a certificate and key corresponding to the domain exists when docker-gen create the default.conf and reloads nginx.\n\nThe old certificates / keys, if they exist, should be deleted and nginx reloaded through docker-gen just before certificate creation or renewal, so all challenge validations should happen over http.\n\nOk cool, thanks for clarifying, that helps a lot! I'll update my config accordingly. Thanks for the help!. No problem, thanks for the update!. Ok, so just got this reply from cloudflare about this issue:\n```\nThis redirect is happening at your origin webserver which is why the redirect loop occurred:\ncurl -sv -o /dev/null http://ismaywolff.nl/.well-known/acme-challenge/ECcBmzPPHFbyyTEgdAJL3cJVrvIfepvmMb3oqoGX9UI --resolve ismaywolff.nl:80:138.68.122.12\n< HTTP/1.1 301 Moved Permanently\n< Server: nginx/1.13.3\n< Date: Tue, 15 Aug 2017 09:12:29 GMT\n< Content-Type: text/html\n< Content-Length: 185\n< Connection: keep-alive\n< Location: https://ismaywolff.nl/.well-known/acme-challenge/ECcBmzPPHFbyyTEgdAJL3cJVrvIfepvmMb3oqoGX9UI\nThis meant Cloudflare was redirecting https --> http, but your origin was redirecting http --> https so this was looping.\nYou would need to remove the redirect at your origin to resolve this issue.\n```\nSo this means that in the end all requests would end up going over https, regardless of if they're attempted over http at first.\n(This issue was originally about a redirect loop, which is what the cloudflare engineer is referring to. That's been solved by removing the redirect on cloudflare). Maybe it might be good to remove the automatic redirect for the .well-known folder so a request over http is possible?. What I did for cloudflare:\n\nAlways use https: off\nHsts: off\nOpportunistic encryption: off\nAutomatic https rewrites: on\n\nAdd a page rule:\n\nFor: *ismaywolff.nl/.well-known/*\nWith: Disable Security, Cache Level: Bypass, Automatic HTTPS Rewrites: Off\n\nFor my docker config see my cloud config above.. Weird. It's in the cloudflare settings for me. Under encryption I believe. ",
    "TheDevFreak": "@ismay I'm currently having this issue, how did you manage to remove the redirect at cloudflare?\nI've turned off SSL + rewrite http to https at CF but i am still encountering the problem\n. Hmm, I cant find \"Opportunistic encryption\" as an option anywhere. neither can i find always use https. still getting stuck in a 301 loop. @ismay not on my site!. Ah! the option appears after enabling cloudflare's SSL. That's done it! thanks.. ",
    "pcjmfranken": "Sorry for the necro but I'm having some issues with Cloudflare atm.\nMy site works fine - even in HTTPS - with the Cloudflare CDN turned off (grey cloud), but when the CDN is enabled (orange cloud) I get ERR_SSL_VERSION_OR_CIPHER_MISMATCH errors.\nI have Cloudflare SSL as well as all the HTTPS redirect settings mentioned in previous comments turned off.\nIt would be wonderful if anyone could tell me what I'm doing wrong.. ",
    "hugohil": "Thanks for you help !\nSo if I understand correctly, I need to point my DNS records towards the public IP of my server, and handle the routing with nginx directly (i.e pointing example.com to 172.200.0.11) ?\nI think I'll continue in the nginx-proxy repository, thanks again !. I did not see @buchdag answers, sorry.\nI was thinking about trying this and, as you mentioned, provide another port than 80 for the wordpress image.\nBut if this does not work, I'll definitely go with the manual mode and find some way to automate the DNS TXT record update (because, if I understood correctly, whenever certbot issues a new CA for my domain, previous TXT record becomes obsolete and does not prove ownership anymore).. ",
    "panteparak": "@JrCs Yes, 2048 does give A+ SSL raitings, but when I generate DH params, I would prefer for a bigger bit size such as 4096. and as mentioned before, if 2048 bit size is cracked (well, not very soon, I hope) a change to the DH param bit size can override the default value as needed.. @buchdag sure. I've got sidetracked from completing this due to other commitment.. Isn't ENV DH_PARAM_SIZE would be a default value for docker environment? User can override the bits size via compose or docker run. @JrCs . ",
    "wendellmva": "I had the same exact same question\n. ",
    "asdfkaba": "It seems it is a whitespace problem.\nif i change\n      - LETSENCRYPT_HOST= domain.com, www.domain.com\nto\n      - LETSENCRYPT_HOST=domain.com,www.domain.com\nmkdir doesnt fail and domain.com dir gets created.. ",
    "mjmayer": "@buchdag I've made the wording more consistent with the rest of the readme. The labels are now surrounded by double quotes instead of being prefaced by --label. The names of the containers in the text are now generic and do not reference the container by its name defined in the docker run command.  . @buchdag Thanks for clarifying. Hopefully the most recent commit is better.. I've removed the -e switch from the variable names.. I removed the -e from the variables.. ",
    "kevindesousa": "Hello,\nI have the same problem, I want to use this with the Swarm. \nIf anyone can help us.\nThanks. Sorry I fix the link.\nBecause, the nginx-proxy of jwilder can make an HTTP authentification : https://github.com/jwilder/nginx-proxy#basic-authentication-support. Yes 0:). ",
    "oronoa": "There are other issues with the swarm. You would want to run this replicated, but it needs a design where one would be the leader and acquire the new certs and write them to a share (NFS?) path while the others only listen for changes. . ",
    "cchris-org": "my basic idea is to run nginx-proxy-letsencrypt in mode=global. so .. each node have its one proxy with its own external ip. Wordpress could be deploy in replicated mode, because each node shoud be noified via docker-gen if a service replicated on it.\nbut .. on v3 there is no name to define. Docker-gen need a container-name for notify the nginx-container.\nhow can i define a name in v3??\n. ",
    "fbandrey": "Hey guys, you can find the solution of \"no containers name in Swarm mode\" issue over here: https://hub.docker.com/r/helder/docker-gen/\nThis image using labels instead of container names or IDs. I've fixed this problem few minutes ago. Yay!. ",
    "dominikkukacka": "never worked for me but I noticed in the latest tag there is a script /app/force_renew (https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/force_renew) which I trigger after adding a domain. this workes for me :). ",
    "k2xl": "Yeah, I've tried that, and it is still the IP of the docker network interface.. Hmm I'm wondering if it is related to this (actual) docker bug: https://github.com/moby/moby/issues/15086. Super strange - doesn't make sense to me. How are apps supposed to log the users IP address with containers?. If I wanted to get this letsencrypt nginx proxy to work with host networking, are there any steps I need to do? it doesn't seem like network_mode: host works (get nginx start page). docker-compose i'm on mac, but this is also* happening on our linux instance.. Not sure - it's a recently spun up EC2 instance. I found a solution to get the IP address in my wsgi app!\nrequest.environ.get('HTTP_X_REAL_IP', request.remote_addr). ",
    "Algodrill": "Of course\nversion: '2'\nservices:\n  nginx-proxy:\n    restart: always\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /srv/docker/nginx/certs:/etc/nginx/certs:ro\n      - /etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    environment:\n      - DEFAULT_HOST=nodeapp.local\nnginx-proxy-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    container_name: nginx-proxy-companion\n    volumes:\n      - \"./volumes/proxy/certs:/etc/nginx/certs:rw\"\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n    volumes_from:\n      - nginx-proxy\n    restart: always\n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=nginx-proxy\nnetworks:\n  default:\n    external:\n      name: nginx-proxy. You need my docker-compose of my website?. Thanks again for help me ^^. version: '2'\nservices:\n    db:\n        image: mysql:latest\n        volumes:\n            - db_data:/var/lib/mysql\n        container_name:website-db\n        environment:\n            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n            MYSQL_DATABASE: ${MYSQL_DATABASE}\n            MYSQL_USER: ${MYSQL_USER}\n            MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n        restart: always\n        networks:\n          - external-foo\n    php:\n        build:\n            context: php7-fpm\n            args:\n                TIMEZONE: ${TIMEZONE}\n        volumes:\n            - ${SYMFONY_APP_PATH}:/var/www/symfony\n            - ./logs/symfony:/var/www/symfony/app/logs\n        container_name: website-php\n        networks:\n          - external-foo\n        links:\n          - db\n    nginx:\n        build: nginx\n        ports:\n            - 8081:8081\n        volumes_from:\n            - php\n        volumes:\n            - ./logs/nginx/:/var/log/nginx\n        container_name: website-nginx\n        environment:\n            - VIRTUAL_HOST=website.com\n            - LETSENCRYPT_HOST=website.com\n            - LETSENCRYPT_MAIL=default.mail@gmail.com\n        networks:\n          - external-foo\nnetworks:\n  external-foo:\n    external:\n      name: nginx-proxy\nvolumes:\n  db_data: {}. ",
    "funaz": "I see in your original post your wrote \"LETSENCRYPT_EMAIL\", but in the docker-compose.yml, you wrote \"LETSENCRYPT_MAIL\". Shouldn't it be EMAIL too?\nMaybe that's why?\nBecause I had the same invalid email error and the typo in that variable was a cause.. ",
    "returntrip": "@buchdag In my case, If the path is not corrected (in the nginx.tmpl), then nginx container throws the following error (and its container keeps restarting):\n2017/10/20 08:09:34 [emerg] 1#1: BIO_new_file(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen('/etc/nginx/dhparam/dhparam.pem','r') error:2006D080:BIO routines:BIO_new_file:no such file)\n2017/10/20 08:09:35 [emerg] 1#1: BIO_new_file(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen('/etc/nginx/dhparam/dhparam.pem','r') error:2006D080:BIO routines:BIO_new_file:no such file)\nI am not expert, but this is what I think is happening:  since this change to nginx.tmpl: https://github.com/jwilder/nginx-proxy/commit/02121df3b914061040df128e8266ccad81ce3046#diff-6c19a779564e1e2f88854a4a2fffbb78, which adds the default dhparam.pem in /etc/nginx/dhparam/, there might be an issue with https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion, in the sense that:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/entrypoint.sh#L64\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/entrypoint.sh#L67\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/letsencrypt_service#L32\nshould be updated with the correct path to dhparam.pem from /etc/nginx/certs/ to /etc/nginx/dhparam/\nOr maybe should it be the other way round : \nhttps://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl#L45 should be update with the dhparam.pem path pointing to /etc/nginx/certs/?\nThis is true for docker-gen container + official nginx container + docker-letsencrypt-nginx-proxy-companion + standard nginx.tmpl and when using self signed default.crt and default.key. \nHave not tried using nginx-proxy container.. Did you also manually generate default.crt and default.key? More info about the default dhparam.pem are here: https://github.com/jwilder/nginx-proxy#diffie-hellman-groups. That is my understanding too. But I am no expert. I do not understand why this happens.... But I guess a ver small amount of people is in my situation and would not notice this happening (i.e.: generating self signed default certs to achieve this https://github.com/jwilder/nginx-proxy/issues/950\nThere is either a problem somewhere or it is me doing something wrong.... OK with your modified nginx.tmpl all works also fine.\nI think I understand what you mean, although, I am using docker-gen.  All I can think off, is that the certs volumes was previously used by nginx-proxy, maybe I should have started from scratch with  fresh volumes.\n. I can now rest in peace :). Should I close this or you want to reference it in your PR?. @buchdag Thanks for the help closing this issue.. ",
    "MichaelBorde": "Latest release (1.5) seems to be on May, 18. Do you suggest we use lastest tag when pulling your image ?. ",
    "g2gdeploy": "Hi @buchdag, I tried it with the latest version but doesn't seem to work for me.\nSteps to reproduce;\n\nrun docker-compose up  (see below)\ndocker exec nginx-letsencrypt /app/force_renew\n\nThis is the output of the second command.\nCreating/renewal some.domain.com certificates... (some.domain.com)\n2017-11-17 13:05:48,527:INFO:simp_le:1306: some.domain.com was successfully self-verified\n2017-11-17 13:05:48,739:INFO:simp_le:1314: Generating new certificate private key\n2017-11-17 13:05:50,196:INFO:simp_le:393: Saving key.pem\n2017-11-17 13:05:50,197:INFO:simp_le:393: Saving fullchain.pem\n2017-11-17 13:05:50,197:INFO:simp_le:393: Saving cert.pem\nReloading nginx docker-gen (using separate container nginx-gen)...\nReloading nginx (using separate container nginx-proxy)...\nAlthough everything seems to be OK the nginx-proxy container is not being restarted.\nAny idea what could be the problem?\nThis is my setup with docker-compose;\n```\nversion: '3'\nservices:\nnginx-proxy:\n    image: nginx:1.13\n    container_name: nginx-proxy\n    restart: always\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhosts:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - nginx-certs:/etc/nginx/certs:ro\nnginx-gen:\n    image: jwilder/docker-gen:0.7.3\n    container_name: nginx-gen\n    restart: always\n    # Use entrypoint as workaround for bug: https://github.com/jwilder/docker-gen/issues/201#issuecomment-227990877\n    entrypoint: /bin/sh -c\n    command: ['/usr/local/bin/docker-gen -notify-sighup nginx-proxy -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf']\n    volumes:\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhosts:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - nginx-certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\nnginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    container_name: nginx-letsencrypt\n    restart: always\n    volumes:\n      - nginx-conf:/etc/nginx/conf.d\n      - nginx-vhosts:/etc/nginx/vhost.d\n      - nginx-html:/usr/share/nginx/html\n      - nginx-certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      NGINX_DOCKER_GEN_CONTAINER: nginx-gen\n      NGINX_PROXY_CONTAINER: nginx-proxy\n      # set this hash manually as workaround for bug: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/277#issuecomment-344612875\n      ACME_TOS_HASH: cc88d8d9517f490191401e7b54e9ffd12a2b9082ec7a1d4cec6101f9f1647e7b\nnginx-hello-world:\n    image: karthequian/helloworld:latest\n    container_name: nginx-hello-world\n    restart: always\n    environment:\n      VIRTUAL_HOST: some.domain.com\n      LETSENCRYPT_HOST: some.domain.com\n      LETSENCRYPT_EMAIL: some@domain.com\nvolumes:\n  nginx-conf:\n  nginx-vhosts:\n  nginx-html:\n  nginx-certs:\nnetworks:\n  default:\n    external:\n      name: playground-network\n```. ",
    "erikverheij": "Ah! I also checked the browser and still saw the old certificate, but I can't reproduce it so I must have been looking with my knees or something \ud83d\ude09.\nThanks!. ",
    "mindrunner": "Same problem here +1. ",
    "Avd6977": "I'm getting this same issue (where it isn't auto-updating the cert) and my domain is returning no errors:\nQuery results for CAA krakenreview.civicplus.com\nResponse:\n;; opcode: QUERY, status: NOERROR, id: 42237\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 0\n;; QUESTION SECTION:\n;krakenreview.civicplus.com.    IN   CAA\n;; ANSWER SECTION:\nkrakenreview.civicplus.com. 900 IN  CNAME   krakenreview.civicplus.com.cdn.cloudflare.net.\n;; AUTHORITY SECTION:\ncloudflare.net. 0   IN  SOA ns1.cloudflare.net. dns.cloudflare.com. 2025983728 10000 2400 604800 3600. When will this be merged? Looks like it also might fix #266 . \"Can't automatic renew certificates\" is the issue title. That's they issue we're having with our certs. Getting emails that they are about to expire when they should be auto-renewing. Sorry if there was confusion there.. ",
    "neckaros": "I guess it is due to the fact that i lost my account key. Not sure as there is no error but i will check back in 3 months :). ",
    "Telokis": "I'd like to add that both of my containers are meant to be accessed from subdomains of my domain. I tried setting LETSENCRYPT_HOST to my domain ignoring the subdomains but it didnt work either.. I don't think it does, how do I know?\nWhen I try to access my site I get an error from chrome saying this website is not secure. (It works fine for transmission though)\nEven strangier, if I tell chrome to process anyway I notice that the vhost for my second website points in fact to transmission!\nSo host2.domain.com points to host.domain.com but without https... I don't understand at all!. $ docker-compose up\nRecreating nginx-letsencrypt ... \nRecreating nginx-letsencrypt\nStarting nginx ... \nStarting nginx\nStarting nginx-gen ... \nRecreating nginx-letsencrypt ... done\nAttaching to nginx, nginx-gen, nginx-letsencrypt\nnginx-gen            | 2017/11/02 09:29:10 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nnginx-gen            | 2017/11/02 09:29:10 Watching docker events\nnginx-letsencrypt    | Sleep for 3600s\nnginx-gen            | 2017/11/02 09:29:10 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nnginx-letsencrypt    | 2017/11/02 09:29:10 Generated '/app/letsencrypt_service_data' from 2 containers\nnginx-letsencrypt    | 2017/11/02 09:29:10 Running '/app/update_certs'\nnginx-letsencrypt    | 2017/11/02 09:29:10 Watching docker events\nnginx-gen            | 2017/11/02 09:29:10 Received signal: hangup\nnginx-letsencrypt    | Reloading nginx docker-gen (using separate container nginx-gen)...\nnginx-gen            | 2017/11/02 09:29:10 Received signal: hangup\nnginx-letsencrypt    | Reloading nginx (using separate container nginx)...\nnginx-gen            | 2017/11/02 09:29:10 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nnginx-letsencrypt    | Creating/renewal mydomain.com certificates... (mydomain.com  rtfm.mydomain.com)\nnginx-letsencrypt    | 2017/11/02 09:29:10 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\nnginx-letsencrypt    | 2017-11-02 09:29:10,560:INFO:simp_le:1213: Generating new account key\nnginx-letsencrypt    | 2017-11-02 09:29:13,518:ERROR:acme.challenges:311: Unable to reach http://rtfm.mydomain.com/.well-known/acme-challenge/qp-Mexz7a6ir5p3TTBA8X-JdIl8y5H7Ypoz0AWGWYfA: ('Connection aborted.', error(104, 'Connection reset by peer'))\nnginx-letsencrypt    | 2017-11-02 09:29:13,518:WARNING:simp_le:1304: rtfm.mydomain.com was not successfully self-verified. CA is likely to fail as well!\nnginx-letsencrypt    | 2017-11-02 09:29:13,758:ERROR:acme.challenges:311: Unable to reach http://mydomain.com/.well-known/acme-challenge/BcfNme8jZRbIcWjDX69PDI1j9JqwUJO-jTnCUBI9rGg: ('Connection aborted.', error(104, 'Connection reset by peer'))\nnginx-letsencrypt    | 2017-11-02 09:29:13,758:WARNING:simp_le:1304: mydomain.com was not successfully self-verified. CA is likely to fail as well!\nnginx-letsencrypt    | 2017-11-02 09:29:14,005:INFO:simp_le:1314: Generating new certificate private key\nnginx-letsencrypt    | 2017-11-02 09:29:14,810:ERROR:simp_le:1272: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Is there a warning log entry about unsuccessful self-verification? Are all your domains accessible from the internet? Failing authorizations: https://acme-staging.api.letsencrypt.org/acme/authz/O-YzfQbv74efzYFftT5AxeJmTkjJf4OfHVSK02eXit0, https://acme-staging.api.letsencrypt.org/acme/authz/_zGn7_PQtU03hCQ7uHgHd7_YVO2waU3ArGVZP0H6-I4\nnginx-letsencrypt    | Challenge validation has failed, see error log.\nnginx-letsencrypt    | \nnginx-letsencrypt    | Debugging tips: -v improves output verbosity. Help is available under --help.\nnginx-letsencrypt    | Sleep for 3600s\nI don't get it, nothing works at all.\nHere is a recap of my current docker-compose.yml files:\nThe one containing nginx stuff\n```\nversion: '3'\nservices:\n  nginx:\n    image: nginx:latest\n    labels:\n        com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    container_name: nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ${NGINX_FILES_PATH}/conf.d:/etc/nginx/conf.d\n      - ${NGINX_FILES_PATH}/vhost.d:/etc/nginx/vhost.d\n      - ${NGINX_FILES_PATH}/html:/usr/share/nginx/html\n      - ${NGINX_FILES_PATH}/certs:/etc/nginx/certs:ro\nnginx-gen:\n    image: jwilder/docker-gen:latest\n    command: -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    container_name: nginx-gen\n    restart: unless-stopped\n    environment:\n      VIRTUAL_PROTO: \"https\"\n      DEFAULT_HOST: \"mydomain.com\"\n    volumes:\n      - ${NGINX_FILES_PATH}/conf.d:/etc/nginx/conf.d\n      - ${NGINX_FILES_PATH}/vhost.d:/etc/nginx/vhost.d\n      - ${NGINX_FILES_PATH}/html:/usr/share/nginx/html\n      - ${NGINX_FILES_PATH}/certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ${NGINX_FILES_PATH}/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\nnginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    container_name: nginx-letsencrypt\n    restart: unless-stopped\n    volumes:\n      - ${NGINX_FILES_PATH}/conf.d:/etc/nginx/conf.d\n      - ${NGINX_FILES_PATH}/vhost.d:/etc/nginx/vhost.d\n      - ${NGINX_FILES_PATH}/html:/usr/share/nginx/html\n      - ${NGINX_FILES_PATH}/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      ACME_CA_URI: \"https://acme-staging.api.letsencrypt.org/directory\"\n      NGINX_DOCKER_GEN_CONTAINER: \"nginx-gen\"\n      NGINX_PROXY_CONTAINER: \"nginx\"\nnetworks:\n  default:\n    external:\n      name: nginx\n```\nThe one for my app:\n```\nversion: '3'\nservices:\n  rtfm:\n    container_name: rtfm\n    image: rtfm\n    restart: unless-stopped\n    volumes:\n      - ./config.json:/app/config.json:ro\n    environment:\n      DEBUG: \"true\"\n      VIRTUAL_PORT: 80\n      VIRTUAL_HOST: \"rtfm.mydomain.com\"\n      LETSENCRYPT_HOST: \"mydomain.com, rtfm.mydomain.com\" # I tried lots of things here\n      LETSENCRYPT_EMAIL: \"myemail@foo.bar\"      \nnetworks:\n  default:\n    external:\n      name: nginx\n```\nI switched to test mode because let's encrypt wasn't happy of all my attempts.. Alright, I tried some things.\nFirst of all, I had a firewall that I disabled.\nI tried using nginx-proxy alone, without SSL and it worked.\nI removed docker-gen and now use nginx-proxy alone.\nHere is the new docker-compose.yml file:\n```yml\nversion: '3'\nservices:\n  nginx:\n    image: jwilder/nginx-proxy:latest\n    container_name: nginx-proxy\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ${NGINX_FILES_PATH}/conf.d:/etc/nginx/conf.d\n      - ${NGINX_FILES_PATH}/vhost.d:/etc/nginx/vhost.d\n      - ${NGINX_FILES_PATH}/html:/usr/share/nginx/html\n      - ${NGINX_FILES_PATH}/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/tmp/docker.sock:ro\nnginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    container_name: nginx-letsencrypt\n    restart: unless-stopped\n    volumes:\n      - ${NGINX_FILES_PATH}/conf.d:/etc/nginx/conf.d\n      - ${NGINX_FILES_PATH}/vhost.d:/etc/nginx/vhost.d\n      - ${NGINX_FILES_PATH}/html:/usr/share/nginx/html\n      - ${NGINX_FILES_PATH}/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      ACME_CA_URI: \"https://acme-staging.api.letsencrypt.org/directory\"\n      DEBUG: \"true\"\n      NGINX_PROXY_CONTAINER: \"nginx-proxy\"\n```\nAnd here is the full log of docker-compose up: https://pastebin.com/MCXURRL4\nAs a reminder, the docker-compose.yml of my app:\n```yml\nnetworks:\n  default:\n    external:\n      name: nginx\nversion: '3'\nservices:\n  rtfm:\n    container_name: rtfm\n    image: rtfm\n    restart: unless-stopped\n    volumes:\n      - ./config.json:/app/config.json:ro\n    environment:\n      VIRTUAL_PORT: 80\n      VIRTUAL_HOST: \"rtfm.mydomain.com\"\n      LETSENCRYPT_HOST: \"rtfm.mydomain.com\"\n      LETSENCRYPT_EMAIL: \"myemail@foo.bar\"      \nnetworks:\n  default:\n    external:\n      name: nginx\n```\nNow, it's better but when I go to https://rtfm.mydomain.com, chrome warns me that the website is not secured. (HTTPS in red). I think that'll work. I'll see once the \"ACME server returned an error: urn:acme:error:rateLimited :: There were too many requests of a given type :: Error creating new registration :: too many registrations for this IP\" message disappear. It seems to be one hour according to the forums.\nThank you very much for your help. Docker stuff is really not easy to debug!. ",
    "amankapoor": "Additionally, this is how docker ps looks,\n```\n/srv/www/vhost.d$ docker ps\nCONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS                             PORTS                                      NAMES\n7039252acf68        ws                                       \"go-wrapper run\"         28 minutes ago      Up 28 minutes                      80/tcp, 443/tcp, 8080/tcp                  ws\n9786bed0572b        jwilder/docker-gen                       \"/usr/local/bin/do...\"   2 hours ago         Restarting (1) About an hour ago                                              nginx-gen\ne957ddb6c52f        jrcs/letsencrypt-nginx-proxy-companion   \"/bin/bash /app/en...\"   2 hours ago         Up 2 hours                                                                    nginx-letsencrypt\ndce85311d0b6        nginx                                    \"nginx -g 'daemon ...\"   2 hours ago         Up 2 hours                         0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   nginx\n```\nws is the simple go web app. And docker-gen remains closed, I don't know why, but it has been like this since the creation of these containers. And it restarted once, probably when ws container was created or doing something related to certificates.. Hey, thank you for your comments. I followed what you wrote above and I was able to generate a certificate for my site. But the problem is that I can't get Cloudflare to work with it when using it as DNS+HTTP Proxy. If I only set it as DNS, then it works fine.\nWhere can I learn more to make it work in sync with Cloudflare? Do we have any settings available to make any changes required for Cloudflare? Or, any trusted GitHub repo of the same? From what I have researched till now, there are ways to make it work with CF when using http-01 and dns-01 as challenges.. Strange observation:\nYou already know I was saying that my site doesn't run when with CF. But now if you see the ssl certificate on my site, you will find that its from Cloudflare. And how I got it working? My observation is, when I first got the LE certificate, Cloudflare DNS+HTTP Proxy (Orange Cloud) was on. As far as I remember, I did not change it and I got a certificate using your methods above. Then I observed that turning the cloud to grey (DNS only), resolved to my IP, showed LE cert and I could see the content. What I did just now, changed the grey cloud back to orange and my site's content is accessible and cert is of Cloudflare (COMODO). The SSL setting which I have is Full (strict) which mean, ssl between my origin (aws) server and cloudflare and between cloudflare and client is fully https, which is true. So, this way I got it working. The steps will be fully clear to me as I will be deploying more sites in the coming days. \nBtw, before closing this issue, I wish to have clarity on two more things:\n\n\nI want certificates for all the subdomains that I will ever create in future, so this time I did LETSENCRYPT_HOST=amankapoor.me only, but should I be doing like this -> LETSENCRYPT_HOST=amankapoor.me, *.amankapoor.me \n\n\nAnd, regarding test certificates, this time I did not add LETSENCRYPT_TEST=true, but only ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory. So which type of certificate do I have now? A test certificate?. \n\n",
    "rene-gomez": "@buchdag Ok.\nThanks for your time. Thanks for the support, only i have one nginx-proxy and one proxy-companion and i have a service for each site, so I need a DNS for this, do you know a project for this?\nThanks in advance\n. Hi, \nThanks for your support, in this tread:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/187\nI remove the space caracteres and works!\nThis is my Docker-compose file for each site:\n```\nversion: '2' \nservices: \n  EW-DB1: \n    image: mariadb:latest \n    volumes: \n      - ./database/:/var/lib/mysql \n    restart: always \n    environment: \n      MYSQL_ROOT_PASSWORD: someone\n      MYSQL_DATABASE: data\n      MYSQL_USER: userex\n      MYSQL_PASSWORD: example0\nEW-WP1: \n    depends_on: \n      - EW-DB1\n    image: wordpress\n    restart: always\n    environment:\n      VIRTUAL_HOST: foo.com, www.foo.com\n      VIRTUAL_PORT: 8002\n      LETSENCRYPT_HOST: bar.com,foo.com,www.foo.com\n      LETSENCRYPT_EMAIL: user@gmail.com\n      WORDPRESS_DB_HOST: EW-DB1:3306 \n      WORDPRESS_DB_NAME: database\n      WORDPRESS_DB_USER: username\n      WORDPRESS_DB_PASSWORD: example\n    volumes: # this is where we tell Docker what to pay attention to\n      - ./html:/var/www/html\n      - ./php.ini:/usr/local/etc/php/conf.d/uploads.ini\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nThanks for your suppor.\n. Hi @buchdag this is my compose file\n```\nproxy-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion:latest\n    restart: always\n    container_name: nginx-letsencrypt\n    volumes:\n      - /var/www/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n      - nginx-proxy\n```\nAnd this is the result\ndocker exec nginx-letsencrypt /app/cert_status\n\nrpc error: code = 2 desc = oci runtime error: exec failed: container_linux.go:247: starting container process caused \"exec: \\\"/app/cert_status\\\": stat /app/cert_status: no such file or directory\"\n. works fine!, tks a lot @buchdag \nclose this issue. Hi @buchdag  thanks a lot for your support.\n\nbest regards. ",
    "creecros": "latest version.\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    --restart=unless-stopped \\\n    -v /path/to/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\ndocker run -d \\\n    --name nginx-letsencrypt \\\n    --restart=unless-stopped \\\n    -v /path/to/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volumes-from nginx-proxy \\\n    jrcs/letsencrypt-nginx-proxy-companion\nI think I may have figured out the solution with -e REUSE_KEY=true, I can't test it until the letsencrypt server ratelimit expires though. I'll try and get more logs once I get it back up and can duplicate the error.\nWithout --restart=unless-stopped, I wouldn't be able to use it, need something that restarts and works if there is say a power outage and I'm not around. Even better.\nDouble checking, -v DEBUG=true not -e DEBUG=true....sorry to ask, i'm still learning here.. emailed you the logs.. also, just noticed....\nbefore i did sudo reboot, i copied the /certs folder to /_certs, so I had /path/to/certs and /path/to/_certs\nI figured I would just copy them over when it came back up to not have to go through the ratelimit BS if things went wrong. That folder also was deleted.. I think that worked, i only have one cert atm, looks like itll be a week until i get the others sorted, too many requests.\ni rebooted and the one cert i had remained, it did not delete and try to create a new one.\nthanks a bunch! . actually just changed the subdomain names and got new certs. 3 reboots, no issues.\nyou, da, man!. Absolutely . ",
    "hamon-e": "Today if i want a certficate for a web serveur running on my host, i need to to install a letsencrypt daemon in my host.\nI was wondering if it's was possible to add subdomain in a configuration file and mount it to this docker.\n(i can't use env variable cause my web server is not in a docker). The point was that i have already have docker-letsencrypt-nginx-proxy-companion running\nso i was wondering if it was possible to use it for that kind of case to. ",
    "Panderine": "I'm on the same path. I have a mix of services running as containers and on-host (undockerized). I use nginx-proxy and nginx-le for my containers, but for all my on-host apps this is pain. It would be great to be able to use all the nginx-* suite with those services too since doc-gen, and nginx-proxy / le make this really easy.. ",
    "benne": "Oh, great - thanks :) Fast answer!\nFor the time being, I put in the new TOS hash manually, and things seems to be working as expected.. ",
    "talolard": "Wow can't believe this was had an open issue and workaround so quickly. \nThanks!. ",
    "pascal-linux": "Hi,\nI am using frontproxy and your great letsencrypt-companion for several docker instances on one host.\nI am having a comparable question / problem:\nHow should I indicate within the docker-compose.yml the main domain if I use several subdomains (in different dockers) based on the same second level domain?\nExample:\nDocker 1 : docker-compose.yml:  \n... \n      - VIRTUAL_HOST=example.de,sub1.example.de,sub2.example.de\n      - LETSENCRYPT_HOST=example.de,sub1.example.de,sub2.example.de\n...\nDocker 2 : docker-compose.yml:  \n... \n      - VIRTUAL_HOST=example.de,sub3.example.de,sub4.example.de\n      - LETSENCRYPT_HOST=example.de,sub3.example.de,sub4.example.de\n((This could even be more complicated if I also want \"example.com\" to point to the same host/docker, i.e.\n      - VIRTUAL_HOST=example.de,example.com,sub3.example.de,sub4.example.de,sub3.example.com,sub4.example.com\n      - LETSENCRYPT_HOST=example.de,example.com,sub3.example.de,sub4.example.de,sub3.example.com,sub4.example.com\nMy problem is that when the SSL is created for the \"application 2\" the SSL-certificates for \"application 1\" gets lost / is no longer valid.\nMaybe it is not OK to set the \"main domain\" (example.de and/or example.com)  as first entries in both docker-compose??\nThanks a lot,\nPascal. Thanks for your answer!\nWould it be a solution to set just the complete domain name (which is - of course - different for all containers) - i.e.\nDocker 1:\n- VIRTUAL_HOST=sub1.example.de,sub2.example.de\n- LETSENCRYPT_HOST=sub1.example.de,sub2.example.de\nDocker 2:\n- VIRTUAL_HOST=sub3.example.de,sub4.example.de\n- LETSENCRYPT_HOST=sub3.example.de,sub4.example.de\nOr is there any other solution using frontproxy/SSL-companiopn?\nThank you for your help!\nPascal\n. Thank you so much for your explanation! I got it now (i hope so at least).\nWould it then be possible to have the whole domain name as VIRTUAL_HOST AND LETSENCRYPT_HOST?\ni.e.\n```\ncontainer1\nVIRTUAL_HOST=sub1.example.com\nLETSENCRYPT_HOST=sub1.example.com\n```\n```\ncontainer2\nVIRTUAL_HOST=sub2.example.com\nLETSENCRYPT_HOST=sub2.example.com\n```\n...\ncontainer-n\nVIRTUAL_HOST=sub-n.example.com\nLETSENCRYPT_HOST=sub-n.example.com\nIf that does the trick, everything is perfect...\nThen there is no need to put the general \"example.com\" at the beginning of each\nVIRTUAL_HOST and LETSENCRYPT_HOST.\nThanks,\nPascal\n. OK, that really helps me..\nTo answer your question: I do not know anymore. Maybe it was because auf your examples\nwhere you set the secondlevel domain always at the beginning (example.com,www.example.com,mail.example.com) ..\n$ docker run -d \\\n    --name example-app \\\n    -e \"VIRTUAL_HOST=example.com,www.example.com,mail.example.com\" \\\n    -e \"LETSENCRYPT_HOST=example.com,www.example.com,mail.example.com\" \\\n    -e \"LETSENCRYPT_EMAIL=foo@bar.com\" \\\n    tutum/apache-php\nBut as this is not needed everything is fine.\nOnce again thanks for your great contribution and your answers!!\n. ",
    "dj-hedgehog": "@buchdag I just deleted a certificate from one of my domains, started again with the latest docker-letsencrypt-nginx-proxy-companion and started nginx-proxy again but it did not renew the certificate.\nI restarted again with my own version from this PR and it renewed the certificate in question.\nSo I still need it :)\nIs there any other information I can provide?. I removed all usages of ONLY_EXPOSED I added and removed -only-exposed from /app/function.sh and /app/start.sh. Oops, I missed those. They are gone now.. ",
    "leMaik": "You just saved my day! :tada: \n\n. ",
    "kowalk": "@JrCs please merge this pull request =). ",
    "wei": "Thanks for the PR!! As someone mentioend in #90, another easy alternative for a temporary fix is adding environment variable -e ACME_TOS_HASH=cc88d8d9517f490191401e7b54e9ffd12a2b9082ec7a1d4cec6101f9f1647e7b which is still a hard coded hash but less work imo.  : D. @xandermar it was a temporary fix from last month. Please try pulling the latest image.. ",
    "JohanBillman": "@xandermar You shouldn\u2019t need need to hardcore the variable. Just use the latest version and it should work. ",
    "TheLux83": "Hey @buchdag \nthis is my shared windows volume where I save the newest nginx.tmpl every day.\nI forogt to mention, that I work with Docker for Windows and the moby.linux VM.\nBut everythin else is using a docker volume, so this shouldn't be a big problem I think (and hope.). Thanks for your fast reply. I've already tried that. Forgot to mention that, too. :-/\nI hope I have listed now everything I have done already. Sorry again.. I've deleted the top-domain in my compose-files, so that I don't try to get a SAN Certificate and now everything works fine.\nI think there is an error trying to get this SAN or I'm doing something wrong. For me this is okay. I don't think that I need that many Certificates that a SAN Certificate is needed :). Hey @buchdag unfortunately not. But everything works fine without it now. . ",
    "DanielFuchs98": "Any updates here? I've got the same problem. I could enclose my problem: The Server-Error-Response from the Lets Encrypt Servers get an invalid Response from my reverse proxy. The Server try to get an Response from http://xxxx/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxx, which was an 403. \nDid I configure something false?. ",
    "ajoergensen": "Does https://github.com/jwilder/nginx-proxy#ssl-backends work? Or am I misunderstanding what you are trying to achieve?. ",
    "cfriedt": "Yes! I believe it probably does. I didn't see that configuration page, so thank you for pointing it out :-)\nEdit: Nope: Now I'm getting the error mentioned here:\nhttps://github.com/root-gg/plik/issues/210. I did get it working after some time. Thanks!. ",
    "gramtech": "Hi, I've been trying to get this to work too.\nIf you set the VIRTUAL_PORT to 443 you get the error as mentioned by @cfriedtpv so in addition to this you also need to do the following (not really a suitable workaround or fix but illustrates its possible and should be simple to fix.\nI found that if you go the volume where the nginx proxy config is located, in my case I have a specified volume in my docker-compose.yml\n./volume_data/conf.d:/etc/nginx/conf.d\nand edit the default.conf file\nsimply changing the line from\nproxy_pass http://example.com;\nto\nproxy_pass https://example.com;\nNote the additions of the 's' to https which then enabled the ssl to work to the backend server (end to end encryption :)\nThe https lets nginx know that its should encrypt the payload again.\nThis is obviously not a suitable work around as the config gets overwritten each time you need to restart your service etc\n. Hi\nSo after some more looking around, there is actually a proper supported solution.\n( I am assuming that you are using the docker container -> jwilder/docker-gen )\nIf so, in addition to adding VIRTUAL_PORT you also need to add VIRTUAL_PROTO=https (or in compose file VIRTUAL_PROTO: https )\ncheck the readme in the link above.\nHope this helps and thanks @cfriedtpv for your question and getting me on the path to a solution.. ",
    "m4teh": "Wow that's surprising. I thought I was overlooking something majorly. Nothing I was trying was working. \nThanks for advising. I'm a little shocked something seemingly so straight forward/common isn't a feature!. ",
    "philipp65": "Hi,\nI think I'm experiencing the same with the result\nCreating/renewal xxx.yyy.zz certificates... (xxx.yyy.zz)\n2017-11-24 11:34:14,210:INFO:simp_le:1538: Retrieving Let's Encrypt latest Terms of Service.\n2017-11-24 11:34:16,281:INFO:simp_le:1356: Generating new account key\nACME server returned an error: urn:acme:error:rateLimited :: There were too many requests of a given type :: Error creating new registration :: too many registrations for this IP\nI'm also having trailing commas in my docker-compose.yml\nI rolled back to jrcs/letsencrypt-nginx-proxy-companion:stable but ofc letsencrypt doesn't allow new registrations for my IP.\nAny suggestions?\nKind regards. I'm working with trailing commas on LETSENCRYPT_HOST since ever, but like this\nxxx.me:\n    build: ./xxx.me\n    container_name: xxx.me\n    restart: always\n    expose:\n      - 80\n      - 443\n    volumes:\n      - /srv/docker/xxx.me/data:/var/www/html\n      - /srv/docker/xxx.me/config/default:/etc/nginx/sites-available/default\n    environment:\n      - VIRTUAL_HOST=xxx.me, www.xxx.me\n      - LETSENCRYPT_HOST=xxx.me, www.xxx.me\n      - LETSENCRYPT_EMAIL=office@xxx.me\nI can survive 3 hours without SSL, since it's just some development stuff like GitLab CE and minor websites.. Oh OK sorry my bad, never tried that. ",
    "richardbrinkman": "Thanks for the very fast fix!. ",
    "pir1981": "Both servers, reverse-proxy-nginx and web-nginx (app server - which is not behind basic auth) are reachable. I can also log into all the alertmanages/cadvisor .... without any issues (using basic auth).\nSo everything is running.\nI just tested the following\nWhen I put in the browser just cadvisormaster.mydomain.com I get a 503.\nWhen I follow imediatly with http://cadvisormaster.mydomain.com/ I get the basic auth challenge, log in and everything works.\nfollowing that, I found that the reverse proxy shows the following\n```\nserver {\n        server_name _; # This is just an invalid value which will never trigger on a real hostname.\n        listen 80;\n        access_log /var/log/nginx/access.log vhost;\n        return 503;\n}\nalertmanager.mydomain.com\nupstream alertmanager.mydomain.com {\n                        server 172.16.0.13:9093;\n}\nserver {\n        server_name alertmanager.mydomain.com;\n        listen 443 ssl http2 ;\n ....\n}\n```\ncan the certificates be delivered only over http(no s)?\nand if that is the case, how did the services get them in the first run??. I was actually just un-commenting exactly that to see if that was the issue. will close, if that resolves it. will know in an hour :). deleting HTTPS_METHOD=nohttp did the trick, thanks. ",
    "zvinger": "There is no phpmyadmin.service.com.crt in /etc/nginx/certs folder. I see only service.com\napi.service.com but in default.conf (nginx config) it tries to use service.com certificate. ```\ndocker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    --network reverse-proxy \\\n    --restart=always \\\n    -v $HOME/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true \\\n    jwilder/nginx-proxy\ndocker run -d \\\n    --name nginx-letsencrypt \\\n    --restart=always \\\n    --volumes-from nginx-proxy \\\n    --network reverse-proxy \\\n    -v $HOME/certs:/etc/nginx/certs:rw \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    jrcs/letsencrypt-nginx-proxy-companion\n```\nThis is how I start nginx containers.\n```\nversion: \"2\"\nservices:\n  docs-production:\n     image: service.com/api-doc\n     networks:\n       - reverse-proxy\n     expose:\n       - 80\n     restart: always\n     environment:\n        - VIRTUAL_HOST=docs.service.com\nnetworks:\n  reverse-proxy:\n    external:\n      name: reverse-proxy\n```\nThis is compose of docs.service.com\n```\nversion: \"2\"\nservices:\n  docs-production:\n     image: service.com/app\n     networks:\n       - reverse-proxy\n     expose:\n       - 80\n     restart: always\n     environment:\n        - VIRTUAL_HOST=service.com\n        - LETSENCRYPT_EMAIL=email@email.email\n        - LETSENCRYPT_HOST=service.com\nnetworks:\n  reverse-proxy:\n    external:\n      name: reverse-proxy\n```\nThis is compose of service.com\nThank you very much!\n. No( I'll try no recreated containers nginx-proxy and nginx-letsencrypt\n. Recreating containers didn't help. Solved by adding \n\nHTTPS_METHOD=nohttp\n\nto all \"nonhttps\" containers.. Everything is OK. . ",
    "saytik": "Hi\nhave the same problem.\nHTTPS_METHOD=nohttp    why do i  need it set all subdomains containers  ? \nI set -e \"LETSENCRYPT_HOST=main-domain.com,www.main-domain.com\" only for one. container with main domain. But nginx-proxy set redirect to https for all containers with subdomains crm.main-domain.com and other. But i don't don't need default redirect to https for all subdomains ....\nfor  example jenkins.prod.main-domain.com, i haven't set https for it.\nBut nginx-proxy set redirect  \n\njenkins.prod.main-domain.com\nupstream jenkins.prod.main-domain.com {\n              ## Can be connected with \"bridge\" network\n          # jenkins\n          server 172.17.0.14:8080;\n              # Cannot connect to network of this container\n              server 127.0.0.1 down;\n}\nserver {\n  server_name jenkins.prod.main-domain.com;\n  listen 80 ;\n  access_log /var/log/nginx/access.log vhost;\n  return 301 https://$host$request_uri;\n}\nserver {\n  server_name jenkins.prod.main-domain.com;\n  listen 443 ssl http2 ;\n  access_log /var/log/nginx/access.log vhost;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS';\n  ssl_prefer_server_ciphers on;\n  ssl_session_timeout 5m;\n  ssl_session_cache shared:SSL:50m;\n  ssl_session_tickets off;\n  ssl_certificate /etc/nginx/certs/main-domain.com.crt;\n  ssl_certificate_key /etc/nginx/certs/main-domain.com.key;\n  ssl_dhparam /etc/nginx/certs/main-domain.com.dhparam.pem;\n  ssl_stapling on;\n  ssl_stapling_verify on;\n  ssl_trusted_certificate /etc/nginx/certs/main-domain.com.chain.pem;\n  add_header Strict-Transport-Security \"max-age=31536000\" always;\n  include /etc/nginx/vhost.d/default;\n  location / {\n      proxy_pass http://jenkins.prod.main-domain.com;\n  }\n}\n\n. yes. ",
    "janus-reith": "Ok, got it working now with the docker-compose configuraton described above:\nI had to manually inspect the docker volumes, and delete the whole certs there.\nAfter restarting the containers, the certs are now generated properly.\nBut I think I'll still leave this open, as I don't consider this the proper solution.\nWhen I add new containers to my docker environment, the lets encrypt companion should realize that certs are missing, instead of just using the ones already generated. . ",
    "Markolie": "I seem to run into the exact same issue bcsjk11 is describing. I'm running a number of different sub-domains with their own certificates, using largely the same setup bcsjk11 is using (except for using a separate nginx-proxy) network. All sub-domains, such as jenkins.domain.com and sonarqube.domain.com, work properly. \nHowever, the base domain (domain.com) appears to try to use the certificate of one of the sub-domains, I believe the most recently generated one.\nFor instance, these two URL's work properly: https://jenkins.carely.info, https://jira.carely.info\nHowever, https://carely.info/ is trying to use the certificate belonging to jenkins.carely.info.\ndocker-compose.yml of one of the subdomains:\n```\nversion: '3'\nservices:\n  jira:\n    image: cptactionhank/atlassian-jira-software\n    container_name: jira\n    expose:\n      - \"8080\"\n    volumes:\n      - /var/atlassian/jira:/var/atlassian/jira\n    environment:\n      - VIRTUAL_HOST=${HOSTNAME}.${DOMAINNAME}\n      - LETSENCRYPT_HOST=${HOSTNAME}.${DOMAINNAME}\n      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}\n    restart: always\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\ndocker-compose.yml of the main domain:\n```\nversion: '3'\nservices:\n  pts4-application:\n    build: .\n    container_name: pts4-application\n    expose:\n      - \"80\"\n    environment:\n      - VIRTUAL_HOST=${DOMAINNAME}\n      - LETSENCRYPT_HOST=${DOMAINNAME}\n      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}\n    restart: always\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n``. The compose files pick the variables from a.envfile in the same directory as the compose files. I've verified that the variables are set properly throughdocker inspect `. Unfortunately enough with hard-coded values it still doesn't seem to work.\nI tried force renewing the certificates through docker exec nginx-letsencrypt /app/force_renew. The certificate for carely.info was generated properly, but then seems to use a different one instead.\nThe default.conf file is set as follows for the carely.info upstream, which seems to be incorrect:\n```\ncarely.info\nupstream carely.info {\n                ## Can be connect with \"nginx-proxy\" network\n            # pts4-application\n            server 172.23.0.2:80;\n}\nserver {\n    server_name carely.info;\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    include /etc/nginx/vhost.d/default;\n    location / {\n        proxy_pass http://carely.info;\n    }\n}\n```\nI can't believe I hadn't checked the LetsEncrypt logs yet. The core issue seems to be in here:\n```\n2018-03-06 11:29:09,735:DEBUG:certbot.main:certbot version: 0.21.1\n2018-03-06 11:29:09,737:DEBUG:certbot.main:Arguments: ['-q']\n2018-03-06 11:29:09,738:DEBUG:certbot.main:Discovered plugins: PluginsRegistry(PluginEntryPoint#manual,PluginEntryPoint#null,PluginEntryPoint#standalone,PluginEntryPoint#webroot)\n2018-03-06 11:29:09,763:DEBUG:certbot.log:Root logging level set at 30\n2018-03-06 11:29:09,764:INFO:certbot.log:Saving debug log to /var/log/letsencrypt/letsencrypt.log\n2018-03-06 11:29:09,772:WARNING:certbot.renewal:expected /etc/letsencrypt/live/carely.info/cert.pem to be a symlink\n2018-03-06 11:29:09,773:WARNING:certbot.renewal:Renewal configuration file /etc/letsencrypt/renewal/carely.info.conf is broken. Skipping.\n2018-03-06 11:29:09,784:DEBUG:certbot.renewal:Traceback was:\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/certbot/renewal.py\", line 60, in _reconstitute\n    renewal_candidate = storage.RenewableCert(full_path, config)\n  File \"/usr/lib/python3/dist-packages/certbot/storage.py\", line 434, in init\n    self._check_symlinks()\n  File \"/usr/lib/python3/dist-packages/certbot/storage.py\", line 493, in _check_symlinks\n    \"expected {0} to be a symlink\".format(link))\ncertbot.errors.CertStorageError: expected /etc/letsencrypt/live/carely.info/cert.pem to be a symlink\n2018-03-06 11:29:09,784:DEBUG:certbot.log:Exiting abnormally:\nTraceback (most recent call last):\n  File \"/usr/bin/certbot\", line 11, in \n    load_entry_point('certbot==0.21.1', 'console_scripts', 'certbot')()\n  File \"/usr/lib/python3/dist-packages/certbot/main.py\", line 1240, in main\n    return config.func(config, plugins)\n  File \"/usr/lib/python3/dist-packages/certbot/main.py\", line 1142, in renew\n    renewal.handle_renewal_request(config)\n  File \"/usr/lib/python3/dist-packages/certbot/renewal.py\", line 443, in handle_renewal_request\n    len(renew_failures), len(parse_failures)))\ncertbot.errors.Error: 0 renew failure(s), 1 parse failure(s)\n```\nAfterwards, I tried to fix the issue through this guide: https://github.com/certbot/certbot/issues/2550#issuecomment-197417732. Not sure if it's worked, as I've seem to hit the LetsEncrypt rate limit :P. Would that be the correct way of resolving this issue?. Where should I be retrieving the logs from in the actual container? I pulled these from /var/logs/letsencrypt from the host (which was strange anyway, because I don't have that folder mounted).\nI did run a previous separate LetsEncrypt installation prior to using Docker which I uninstalled. Could that be causing issues? I don't recall ever using simp_le though.. Okay, looks like python-certbot was still installed on the host. I've completely removed it, but the issue still persists after restarting the containers. The base domain still uses an incorrect certificate.\nWhere would one find the LetsEncrypt logs in the container?. Ah, there we go. Looks like the symlink was indeed the issue, which in turn was caused by my pre-Docker install of the Certbot. Once the ratelimit passes I think the URL will work fine.\nMy sincerest apologies for wasting your time like this!. For some reason, when installing nginx-proxy-companion, I decided to set the certs directory to the existing letsencrypt live directory (/etc/letsencrypt/live), as I had assumed I uninstalled certbot properly and it'd be easy to remember this directory on the host.\nAs it turns out, as I had previously already generated a certificate for the base domain, the carely.info folder already existed. This means that the symlinks could not be created by nginx-proxy-companion as it was pointing to an existing file. \nAs a result, the container failed to create a certificate for carely.info. And that leads to the issue you mentioned in #337: when the certificate generation fails, it uses the wrong certificate.\nDisclaimer: This is still hypothetical, as I haven't been able to verify that removing certbot and the /etc/letsencrypt/live folder and having nginx-proxy-companion actually resolves the issue. This is because the certificate creation still fails due to rate limiting. But this seems like the most likely cause.. ",
    "Egregors": "@buchdag Yes, this bug fixed in 1.17.1. Exactly the same problem. Maybe this JSON will be useful:\n```\n{\n  \"identifier\": {\n    \"type\": \"dns\",\n    \"value\": \"---\"\n  },\n  \"status\": \"invalid\",\n  \"expires\": \"2018-03-20T01:26:20Z\",\n  \"challenges\": [\n    {\n      \"type\": \"dns-01\",\n      \"status\": \"pending\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/Hn_IErKZw1Jy960VkxmY7ZpCCshVkiVuV9Rd3ENHLkk/3796014745\",\n      \"token\": \"-JSClA_ox94NI1bzJkADbxYLK8vkHtSeF6wwb8Abh9o\"\n    },\n    {\n      \"type\": \"tls-sni-01\",\n      \"status\": \"pending\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/Hn_IErKZw1Jy960VkxmY7ZpCCshVkiVuV9Rd3ENHLkk/3796014747\",\n      \"token\": \"Fi6T-2sgHvxOgv2w-RFNPZ5RTfNgAnj0kgGtrcfBMrU\"\n    },\n    {\n      \"type\": \"http-01\",\n      \"status\": \"invalid\",\n      \"error\": {\n        \"type\": \"urn:acme:error:unauthorized\",\n        \"detail\": \"Invalid response from http://---/.well-known/acme-challenge/rwA0TTTwVPNN0rG2Kc2W1HoxfDEgVxPT4t1r1PkGyVQ: \\\"\\u003c!DOCTYPE html\\n\\u003e\\n\\u003chtml\\u003e\\n\\u003chead\\u003e\\n\\u003cmeta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/\\u003e\\n\\u003ctitle\\u003eYouTrack | 404 - \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \\\"\",\n        \"status\": 403\n      },\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/Hn_IErKZw1Jy960VkxmY7ZpCCshVkiVuV9Rd3ENHLkk/3796014748\",\n      \"token\": \"rwA0TTTwVPNN0rG2Kc2W1HoxfDEgVxPT4t1r1PkGyVQ\",\n      \"keyAuthorization\": \"rwA0TTTwVPNN0rG2Kc2W1HoxfDEgVxPT4t1r1PkGyVQ.qA3BJGXhMw7_WGi4eXnslOeZpI0L5za75Nrq_YSyLBQ\",\n      \"validationRecord\": [\n        {\n          \"url\": \"https://---/.well-known/acme-challenge/rwA0TTTwVPNN0rG2Kc2W1HoxfDEgVxPT4t1r1PkGyVQ\",\n          \"hostname\": \"---\",\n          \"port\": \"443\",\n          \"addressesResolved\": [\n            \"-.-.-.-\"\n          ],\n          \"addressUsed\": \"-.-.-.-\"\n        },\n        {\n          \"url\": \"http://---/.well-known/acme-challenge/rwA0TTTwVPNN0rG2Kc2W1HoxfDEgVxPT4t1r1PkGyVQ\",\n          \"hostname\": \"---\",\n          \"port\": \"80\",\n          \"addressesResolved\": [\n            \"-.-.-.-\"\n          ],\n          \"addressUsed\": \"-.-.-.-\"\n        }\n      ]\n    }\n  ],\n  \"combinations\": [\n    [\n      1\n    ],\n    [\n      2\n    ],\n    [\n      0\n    ]\n  ]\n}\n```\nI was replace hostname and IP's (---, -.-.-.-)\nI'm use your container for this project: https://github.com/Egregors/youtrack-docker-compose in compose file. Looks like challenge url is not working. LE get 502 Bad Gateway (on cold start) or 404. . Fixed it in my case by removing all old certs and restart service twice. I'm actually didn't understand, why standard renewal didn't work well. ",
    "ToniSoftware": "@buchdag Well that shouldn't fix the problem, because it's just a problem with the let's encrypt part.. but I'll give it another try^^ I think I already tried it and it didn't fix the problem but.. \nEdit: Okay so that work out for me! thanks a lot!!. @matt-hh well my docker command for nginx-proxy is just above or do you want something different?\nAnd it \"worked\" until now, so it's kind of strange for me it doesn't anymore..\n(Well I couldn't really create certificates or renew the one I somehow got). @buchdag damn it's incredible how stupidly blind I am.. Thanks a lot!. ",
    "alexharrington": "I want it to redirect in normal operation. It's just the acme challenge\nthat should not be redirected to HTTPS.\nOn 8 Dec 2017 20:23, \"Nicolas Duchon\" notifications@github.com wrote:\n\nMaybe with HTTPS_METHOD=noredirect ?\nhttps://github.com/jwilder/nginx-proxy#how-ssl-support-works\nTo serve traffic in both SSL and non-SSL modes without redirecting to SSL,\nyou can include the environment variable HTTPS_METHOD=noredirect (the\ndefault is HTTPS_METHOD=redirect). HTTPS_METHOD must be specified on each\ncontainer for which you want to override the default behavior. If\nHTTPS_METHOD=noredirect is used, Strict Transport Security (HSTS) is\ndisabled to prevent HTTPS users from being redirected by the client. If you\ncannot get to the HTTP site after changing this setting, your browser has\nprobably cached the HSTS policy and is automatically redirecting you back\nto HTTPS. You will need to clear your browser's HSTS cache or use an\nincognito window / different browser.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/299#issuecomment-350362992,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJ92VksqeQRX5aNLo2hgffjC9L_dQGa1ks5s-ZqsgaJpZM4Q7eKT\n.\n. Thank you very much. That appears to work brilliantly. Worth me reporting to the nginx-proxy project? Only I presumed they would say it was an implementation detail of Lets Encrypt and not generally useful.. \n",
    "codekitchen": "Thanks for this, I was just dealing with the same issue. I ended up applying the changes to nginx.tmpl in the form of a patch file so that hopefully tracking nginx-proxy container changes will be a bit easier. But I wonder if nginx-proxy would accept a change to support custom include files in the redirect server {} block, like they currently do for the other server blocks.. ",
    "DurinMusicspear": "I got the same issue as described here and the proposed fix helped me to get this working again. However i got two problems:\n1) ECS_ENABLE_CONTAINER_METADATA is not enabled by default and the proposed change does not warn you about that.\n2) The check for if [[ -n \"${DOCKER_PROVIDER:-}\" ]] && [[ \"${DOCKER_PROVIDER,,}\" == \"aws\" ]]; then did not seem to work and i had to remove that part to get CONTAINER_ID from ECS_CONTAINER_METADATA_FILE\n. ",
    "jschlieber": "Hi, thanks for addressing this issue. When can users expect this to be merged?. ",
    "pbreah": "I tested @myoung34 initial fix, and there is another issue on ECS: when the docker API is called on the script it gets this:\n{\"message\":\"No such exec instance 'null' found in daemon\"}\nthis is part of the docker-compose for the nginx-proxy container\nyaml\nnginx_proxy:\n    image:                      jwilder/nginx-proxy\n    container_name:             nginx_proxy\n    links:\n     - geoserver\n    ports:\n     - 80:80\n     - 443:443\n    labels:\n      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true\nthis also causes this error when trying to reload nginx:\nnginx: [emerg] no servers are inside upstream\non the nginx config file /etc/nginx/conf.d/default.conf (I replaced the real domain with example.com):\n```\nexample.com\nupstream example.com {\n}\n```\n. At the moment this image works on AWS ECS using docker stacks (implementing @myoung34 fix) - manually creating your EC2 instance and going from there. \nAlso there is a mayor confusion on the docs:\n\nif you use -e NGINX_PROXY_CONTAINER=[name] it has hard time finding the nginx-proxy ID, because the function that looks for a container with the label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true is named the same as this environment variable. So by not including this environment variable it works (not getting the {\"message\":\"No such exec instance 'null' found in daemon\"} message in the logs)\n\nHope this helps anyone with the same issue.. ",
    "vfeskov": "@myoung34 it doesn't work for me on elastic beanstalk multi-container docker platform, ECS_CONTAINER_METADATA_FILE env var is not set in containers. @myoung34 elastic beanstalk uses ecs and the companion was working fine before (post)\nthis change: https://github.com/vfeskov/docker-letsencrypt-nginx-proxy-companion/commit/bb85a956f1741a2b892ca68dd95427271d7a651e makes it get container id correctly, but i'm now struggling with \"Connection refused\" error. @myoung34 Can you check if this command works in your setup? It does work on Elastic Beanstalk ECS, and it doesn't require any additional config\nbash\nexport CONTAINER_ID=$(cat /proc/self/cgroup | sed -nE 's/^.+(docker[\\/-]|ecs\\/[a-f0-9\\-]+\\/)([a-f0-9]{64}).*/\\2/p' | head -n 1). looks exactly what i see on elastic beanstalk ecs and the regex extracts container id nicely. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_ecs.html\n\nElastic Beanstalk uses Amazon Elastic Container Service (Amazon ECS) to coordinate container deployments to multicontainer Docker environments\n\nso something like this then? \nbash\ncase \"${DOCKER_PROVIDER}\" in\necs|ECS)\n    # AWS ECS. Enabled in /etc/ecs/ecs.config (http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-metadata.html)\n    if [[ -n \"${ECS_CONTAINER_METADATA_FILE:-}\" ]]; then\n      export CONTAINER_ID=$(grep ContainerID \"${ECS_CONTAINER_METADATA_FILE}\" | sed 's/.*: \"\\(.*\\)\",/\\1/g')\n    else\n      echo \"${DOCKER_PROVIDER} specified as 'ecs' but not available. See: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-metadata.html\"\n      exit 1\n    fi\n    ;;\n*)\n    export CONTAINER_ID=$(cat /proc/self/cgroup | sed -nE 's/^.+(docker[\\/-]|ecs\\/[a-f0-9\\-]+\\/)([a-f0-9]{64}).*/\\2/p' | head -n 1)\n    ;;\nesac. ok i saw another pull request for the same issue. ",
    "alepycom": "Hi, I'm still having the \"Error: can't get my container ID !\" \ni'm following your instructions about \"Separate containers\" on https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion\nI'm trying to mount that on AWS ECS Task Definition with those 3 containers.\nI'm able to do it manually, but the cool thing it's to do it on the console.\nCan anyone tell me if i'm missing some new instruction?\nthanks a lot . ",
    "sunomie": "Getting 'Error: can't get my container ID' with the combined container setup.  Verified ECS_ENABLE_CONTAINER_METADATA is available in the container.  Verified that the function get_self_cid works fine when I run it manually in the container.  Maybe metadata file takes a little bit to establish and this is getting called before before that happens and causing the container blow up?  Not sure what else could be going on.. Concur.  Was also able to fix it on the latest agent by removing the\nDOCKER_PROVIDER environment variable completely.  Thank you.\nOn Tue, Oct 23, 2018 at 5:00 AM Stephen Law notifications@github.com\nwrote:\n\n@sunomie https://github.com/sunomie I also started getting the same\nissue with the latest ECS agent (1.21.0) however previous versions work as\nper the documentation. I was able to fix it on the latest agent by removing\nthe DOCKER_PROVIDER environment variable completely. It looks like the\nprefix in /proc/self/cgroup is now /docker/ and not /ecs/ like in the\nprevious versions.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/300#issuecomment-432160364,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAaK7_6nYJeKMLlfT5diihg-KkqnWRFpks5untqogaJpZM4Q-5rT\n.\n-- \nGreg\n. \n",
    "1awst": "@sunomie I also started getting the same issue when I used the latest AMI with the latest ECS agent (1.21.0) however previous versions work as per the documentation. I was able to fix it on the latest agent by removing the DOCKER_PROVIDER environment variable completely.\nUpdate:\nI initially thought the prefix in /proc/self/cgroup had changed from /ecs/ to /docker/ and that was the reason why things weren't working as expected with the latest AMI/agent. However I'm using jwilder/nginx-proxy and there is a known issue related to the prefix (see here) which I'm working around by setting ECS_ENABLE_TASK_CPU_MEM_LIMIT=false in /etc/ecs/ecs.config. That's the reason the prefix is /docker/ and not because of the most recent AMI or ECS agent. That also explains why I was able to remove the DOCKER_PROVIDER setting from the companion container. \ntl;dr I don't know what changed in the latest AMI and/or ECS agent but removing the DOCKER_PROVIDER setting from the companion container and adding ECS_ENABLE_TASK_CPU_MEM_LIMIT=false to the ECS agent config resolved the 'container ID' error when the companion container attempted to start. My other clusters running older AMIs and agents run without removing the DOCKER_PROVIDER setting.. ",
    "laurenskling": "Hey @buchdag thanks for helping!\nMy setup started working. I think I missed restarting the containers properly. Either I didn't redeployed them, or I didnt use the \"reuse volumes\" properly.\nSo it had more to do with my understanding of Docker Cloud than this awesome plugin :) . ",
    "h0chi": "Works for me, thanks.. ",
    "donicrosby": "@buchdag I'm running both containers on armhf does anyone have a docker repo that works for armhf that uses the most recent version of both containers? . ",
    "tldzyx": "\nhttps://github.com/jwilder/nginx-proxy/issues/1010. \n",
    "hoonoh": "I am having similar problems while doing server migration (just swapping to a bigger EC2 instance in AWS). First I noticed new certificate wasn't being issued for a new domain added with same error message above, so I tried restarting nginx-letsencrypt container with an empty /etc/nginx/certs directory which turned out no new certificates ever got re-issued. I tried this with old and new instance with the same dataset.. @buchdag tested with jrcs/letsencrypt-nginx-proxy-companion:latest with jwilder/docker-gen:latest. ",
    "Admin9705": "http://www.zdnet.com/article/lets-encrypt-disables-tls-sni-01-validation/ is this part of the problem?. ",
    "sabbane": "I also thought the issue is related to the tls-sni latest restriction. Is there a workaround for the issue till it's solved ? . The configuration isn't new and was working well. Just during the last automatic renewel the issue poped up. The only change I did now is update the container image from v1.5 to v1.7 .. No, it failed with v1.5 and I thought it may be a problem with the tls-sni restrictions so I updated to the newest version v1.7 .\nI get it to work now. I get it to work by disabling the firewall completely. Is there any specific ports needed by letsencrypt except the port 80 and 443 ?. So, that's weird for the port. on the server I have only these two ports and port 25 as standard ports. The other ports, such as ssh, are changed to another number.\nThanks Buchdag for the support and for this great project !. ",
    "andre-dierker": "I had similar problems. After some attempts I found out that Letsencrypt's acme-server tries to reach the server via IPv6 if a AAAA record exist.\nDocker starts by default without IPv6 support, so the server cannot be reached.\nPossible solution: Start Docker with IPv6 support and add a CAA record or remove the AAAA record in the DNS.. I had similar problems. After some attempts I found out that Letsencrypt's acme-server tries to reach the server via IPv6 with an existing AAAA record.\nDocker starts by default without IPv6 support, so the server cannot be reached.\nPossible solution: Start Docker with IPv6 support or remove the AAAA record in the DNS.. @buchdag yes, I commented the wrong issue. Sorry for that.. ",
    "jsaalfeld": "I'm having a similar issue. This is the relevant part from the docker-compose.yml from my repo.\nnginx:\n    image: jwilder/nginx-proxy\n    volumes:\n      - \"/var/run/docker.sock:/tmp/docker.sock:ro\"\n      - \"certs:/etc/nginx/certs:ro\"\n      - \"/etc/nginx/vhost.d\"\n      - \"/usr/share/nginx/html\"\n      - \"/etc/nginx/conf.d\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    environment:\n      - ENABLE_IPV6=true\n    labels:\n      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    networks:\n      - front\n      - back\n  letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"certs:/etc/nginx/certs:rw\"\n      - \"/etc/nginx/vhost.d\"\n      - \"/usr/share/nginx/html\"\n      - \"/etc/nginx/conf.d\"\n    depends_on:\n      - nginx\n    environment:\n      NGINX_PROXY_CONTAINER: nginx\n    networks:\n      - back\nWhen I try to open the .well-known/acme-challenge/X from the browser i get redirected to the running application instead. This results in the error from letsencrypt. In the container itself the folder exists, but there is no X present and also while grep -ri .well-known * there is nothing found in the nginx-proxy container. I put a simple test.html-page in the /usr/share/nginx/html/.well-known/acme-challenge/ but I can't access it via my url - I always get redirected to the running application.. Thanks @matt-hh for your comment. Unfortunately the volumes-from command is depricated with docker-compose v3. So I need to work my way around it.\nI just tested a minimal example from the examples in the readme and realized, that it has to be an error on my side. When i figure the stuff out with docker-compose v3 I'll post it here.\nThank You!. It worked in this setup! Thank you!. For development purposes i regulary deleted my images, so it is the latest version available thorugh the docker repository.\nWhat kind of logs do you need? Do you look for something special? From what containers?. In 2 ways:\n1. The logs running through always stated something about certificate creation and i saw in the nginx logs, that the .well-known was reached out to\n2. After a couple of docker-compose down and docker-compose up on a system, the companion stated, that we reached the maximum of certificate requests for that domain in that week\nI should add: If I start everything, except the lets-encrypt service in the setup, I have the valid certificate from the startup before still in place and the SSL-encryption works like a charm; without a new certificate.. As you can see from the linked repo in the start of the thread, there are no additional scripts to prune volumes etc.\nThe interesting thing is: When i let the companion create the certificates in the first start and then scale the companion down to 0 in the next start, nginx will successfully recognize the certificates. So no: I don't think there is something fishy with the volumes.. ",
    "paulusd": "Thank you for your reply\nI have created an issue.\nhttps://github.com/zenhack/simp_le/issues/97. ",
    "fspc": "O.k., I see what is causing the issue, I was viewing the link from a volume mounted on the host system so it appeared broken, but within the nginx-proxy container, an absolute path does properly link.  That being said, it would avoid future portability issues if the certificate location ever changed for some reason  if the link was relative. \nI will submit a PR.. ",
    "mjlongfl": "Thank you for the feedback. I did not realize that simp_le required the key to be named a certain way (I saw the file being passed as an argument to simp_le, therefore, I thought it would be a simple change).\nI guess this issue is related to #275 in a way because the third-party application is not using the nginx proxy to provide the secure connection.\nAt this time, I did (manually) create a soft-link to provide the appropriate key file naming the third-party application expects. However, that soft-link will be destroyed once the certificate is renewed (because this container recreates (removes then creates) the entire directory instead of replacing the files within the directory).\nWithout creating a fork, I saw 3 options:\n1. Ask the third-party application to allow for a custom name for the key file\n2. Ask this project to allow for a custom name for the key file\n3. Ask this project to introduce configurable event hooks (a la CertBot)\nI figured option 2 was the simplest request and would provide benefit to the community (and I now understand why it cannot be done). I believe option 3 would provide the most benefit to the community but I figured that was a more significant request.\nI understand that I could always go the fork route but I thought that there could be benefit to the community with a minor change.\nAgain, thanks for your feedback and thanks again for a great project.. ",
    "FractalMind": "Thank you for your quick answer @buchdag, @cpu \nBut I still have to find a solution to this problem.\n@evertramos provided a solution\nTl;dr: You can add n host into VIRTUAL_HOST=website1.com,website2.com,...website10000.com\nBut as explained, I would like to not use this method. Somewhere in the code you probably have something like.\nredirectToVHost $hostname\nWhere the proxy forwards everything to the \"$hostname container\". \nEx: exemple.com => VIRTUAL_HOST=exemple.com\nCan any of you point me to the script or configuration file where this redirect is made?\nI'll share, of course, my solution once found\nThank you for your time :). ### I think I'm getting close. I've found in /nginx.tmpl\nline 122: I modified\n{{ $host := trim $host }}\n{{ $is_regexp := hasPrefix \"~\" $host }}\n{{ $upstream_name := when $is_regexp (sha1 $host) $host }}\nfor\n{{ $upstream_name := \"thisismysupertest.com\" }}\nline 269: To be used here\nserver {\n    [...]\n    location / {\n        [...]\n        include uwsgi_params;\n        uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};\n    }\n}\nBut I get a: \n2018/01/19 03:15:32 [emerg] 1#1: invalid host in upstream \"http://thisismysupertest.com\" in /etc/nginx/conf.d/default.conf:80\nor\n2018/01/19 03:15:32 [emerg] 1#1: invalid host in upstream \"http://172.18.0.3\" in /etc/nginx/conf.d/default.conf:80\n172.18.0.3 is the ip of thisismysupertest.com container\nAny idea?\n. Oups! Wrong forum haha\nThanks again. Leaving a breadcrumb trail for people with the same requirements\nnginx-proxy. ",
    "alexmbird": "Thanks for responding so quickly.  I'm building for a Scaleway ARM server so in this case it really is arm64.  But I'm sure rpi users will appreciate the image going multi-arch too.\nDue to other reasons I'm retreating to x86 for now, but when support is more common in Docker images I'll give it another go.. ",
    "cdrage": "@buchdag Mind assigning this issue to me? I totally don't mind updating the README / Wiki a little bit :) I've done this on similar projects (see my GitHub).\nThanks and I appreciate the long reply! . ",
    "Raqbit": "Well that's a bummer. As Python-acme is part of certbot I'd guess they will implement v2 soon-ish, and then simple_le will able to support it as well in the future. Anyways, thanks!. Oh, I see. Thanks for helping :). ",
    "Dragnucs": "I am curious. Can't simp_le be replaced with another components that could handle dns-01 challenge? If not, what are our options? Can't we hack the configuration a bit on our end to support it?. @buchdag thank you for your reply.. ",
    "xiaods": "hi team, how long we can support ACME v2 feature?. ",
    "whlsxl": "@buchdag actually traefik use lego as LE lib. ",
    "ejbp": "While wildcard is not implemented, there's any workaround to minor work effort on setting up a wildcard configuration on nginx with all the other benefits of this image? e.g. Can I manually generate a wildcard certificate ant let know \"letsencrypt-nginx-proxy-companion\" to use these custom certificates instead of try to create/renew new ones? \nI tried to have my custom certificates on certificates path but they are still replaced by the single domain certificate that \"letsencrypt-nginx-proxy-companion\" generates. I can in a ugly way limit the permissions to read only for my custom certificates but still, the let's encrypt api will be called if I need to restart the docker which may enter in a out of limit requests to letsencrypt.\nMeanwhile, it would be great if this will be implemented shortly or if I really need to consider other solution :( \nThanks in advance.  . I understand your point and makes sense. Though, I'm not able to have a mixed configuration with domains that are under letsencrypt-nginx-proxy-companion management and domains that are not, having in mind that jwilder/nginx-proxy is the same and using the same certs dir for all domains. What's happening is that letsencrypt-nginx-proxy-companion is removing my custom certificates since it considers that they are unsed.\nlog:\nletsencrypt-nginx-proxy-companion    | Symlinked domains: yyy.com xxx.com\nletsencrypt-nginx-proxy-companion    | Enabled domains: xxx.com\nletsencrypt-nginx-proxy-companion    | Disabled domains: yyy.com\nletsencrypt-nginx-proxy-companion    | Some domains are disabled. Check them to remove unused symlinks.\nletsencrypt-nginx-proxy-companion    | \nletsencrypt-nginx-proxy-companion    | Checking domain yyy.com: \nletsencrypt-nginx-proxy-companion    | Checking yyy.com.crt - removing.\nletsencrypt-nginx-proxy-companion    | Checking yyy.com.key - removing.\nletsencrypt-nginx-proxy-companion    | Checking yyy.com.dhparam.pem\nletsencrypt-nginx-proxy-companion    | Checking yyy.com.chain.pem - removing.\nletsencrypt-nginx-proxy-companion    | Unused domains checking is finished.\ndocker-compose.yml:\nservices:\n  letsencrypt_nginx_proxy_companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt-nginx-proxy-companion\n    volumes_from:\n      - load_balancer\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"${LETSENCRYPT_CERTS_PATH}:/etc/nginx/certs:rw\"\n    environment:\n      - NGINX_DOCKER_GEN_CONTAINER=load_balancer\n  load_balancer:\n    image: jwilder/nginx-proxy\n    container_name: load_balancer\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - ./docker/load-balancer/nginx-proxy-vhost.d:/etc/nginx/vhost.d\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /usr/share/nginx/html\n      - \"${LETSENCRYPT_CERTS_PATH:/etc/nginx/certs:ro\"\n    labels:\n      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    environment:\n      - ENABLE_IPV6=true\n    restart: always\n  website:\n    container_name: website\n    image:  ${IMAGE_WEBSITE}\n    ports:\n      - 5555:80\n    environment:\n      - VIRTUAL_HOST=xxx.com\n      - LETSENCRYPT_HOST=xxx.com\n      - LETSENCRYPT_EMAIL=production@xxx.com\n  custom_certificates_website:\n    container_name: custom-certificates-website\n    image:  ${IMAGE_CUSTOM_CERTIFICATES_WEBSITE}\n    ports:\n      - 5556:80\n    environment:\n      - VIRTUAL_HOST=yyy.com,*.yyy.com\n. I can't think in a better solution. Probably is what you have in mind but that dot file should be inside each directory not in the root (near the sym link) for better user visualization of the root dir.\nThough, in the moment of transition from current version to this one, some symlinks may stay zombies if:\n\nDocker with current version is running\nStop the docker and update it\nRemove an existent companion managed host\nLaunch the docker with the new image\n\nIn my opinion is not a reason to implement a more complex and eventually worst solution so I would advance with this one. \n. @buchdag It looks very nice. I've nothing further to add. Thanks for the update \ud83d\udc4d . ",
    "speshak": "FWIW: I forked this a while back to use acme.sh instead of simp_le explicitly so I could do dns-01 validation via AWS Route53.  I haven't tried using wildcard certs with my fork, but if someone really wanted to they could try: https://github.com/speshak/docker-letsencrypt-nginx-proxy-companion/tree/acme.sh. ",
    "Greek64": "@buchdag \nI was about to make of \"proof of concept\" PR where I swap simp_le for acme.sh, but as I see you are already working on integrating acme.sh.\nI would suggest that the first version only swaps the client and does only ensure backwards compatibility, before adding new features like ECDSA, stapling, wildcard, etc...\nWill the acme client be selectable (e.g. via an environmental variable) or will the project as a whole move to the new client?. Hmm, I understand that (even going by the name) the companion is thought to interact only with the nginx container and (if seperate) the docker-gen container.\nBut the functionality requested is perfect for docker-letsencrypt-nginx-proxy-companion and can be implemented in a few lines. (only adding additional calls to \"docker-kill\" function).\nIf I make a PR, will it be merged?\nI mean I can always fork the repo and do what I want (which is probably what you are going to suggest to me), but I'm unsure how long I will be able to keep it up to date with this one.. Due to some personal issues I have not had the time yet, but I will fork and make a PR in the next 2-3 weeks.. So, PR is live and the fork can be found here.\nDue to the unsure nature of the merging of this PR, I will try to keep the fork updated with this repo for as long as possible.. @bplein \nIf you want a working le-companion that restarts containers NOW, head over to Greek64/docker-letsencrypt-companion, download/pull the master branch, and build the le-companion from the downloaded dockerfile.\nThis will build the latest le-companion release with the requested feature.\nAs said above, I will try to keep that repo updated until this PR gets merged.\nI'm not entirely sure if what you suggest - having the same LETSENCRYPT_HOST on different containers with different VIRTUAL_PORTS - will work.\nWhat I can say though is, that the le-companion only uses the LETSENCRYPT_ environmental variables. The VIRTUAL_ (and by that the key VIRTUAL_PORT) environmental variables are used directly by the nginx.\nIt now comes down to if le-companion can have the same LETSENCRYPT_HOST for multiple containers, where it uses the same certs, but also checks for renewal for all containers (which would be necessary to restart all containers when a renewal happens). My bash-fu is not at a high level, but I guess the \"groupBy\" and \"trim\" commands in letsencrypt_service_data.tmpl would prevent this.\nI would suggest doing something like in Mailu, where the nginx of the front-end (WebGUI) is also responsible for the encryption and forwarding of all relevant ports (IMAP, POP3, etc). This would allow you to only have to \"link\" the mailcow front container with le-companion.. Yeah, don't worry.\nAs said, I will try to keep the fork updated for the guys that want this functionality as long as this isn't merged (which may be never).\nI didn't think of the test unit.\nI will look into that when I have time.. I have integrated the functionality into the existing test units (namely certs_single, certs_san, force_renew).\nI currently have to versions:\n One for the stable (tag v1.9.1)\n One for master (f936be75a3a4a53e89249f9b4e353c31ec497351)\nThe thing is, that the test units on master fail on my system (even without me changing anything), and so I am reluctant to push them on these PR branch, until they run on my system.\nThe stable test units work as expected (but are before you trapped the cleanup routine on exit, i.e. outdated).\nSo I could force push these PR around the v1.9.1 tag if you would like.\nThe other thing is, that the actual functionality for which the environmental variable was added (auto-renewal), is currently not even tested (see #477 ).. Another thing that I noticed in the test units:\nShouldn't the loop in  line 34 in the default_certs test unit contain a break?. > The thing is, that the test units on master fail on my system (even without me changing anything), and so I am reluctant to push them on these PR branch, until they run on my system.\nI found the reason why the test units fail locally. \nSee #482 . I updated the PR to the newest master commit and pushed the new test units.\nNow everything passes.. Added a separate \"container_restart\" test unit, and added temp file to .gitignore.. > If you can cleanup the two remaining whitespace typos and write a line of doc explaining this feature I think we're good to go.\nDone. > LETSENCRYPT_MIN_VALIDITY should be capped a bit lower than 90 days, because capping at 90 days will have the same end result as no capping at all: the container will attempt to renew the certificate on every run of the service loop and will hit LE rate limits pretty fast.\nYeah, originally I wanted to cap it to a lower value for the stated reasons, but then comes the problem of testing.\nHow can the test unit test this feature by \"simulating\" a passing of 48 hours in a reasonable time?\nI could add special exception cases for the test case (not a fan of this), but then who tests this exception code?\n\nConsidering LE rate limiting on this is 5 renewal / week for a given cert\n\nAccording to their site, what you are referring to are the Duplicate Certificate rate limits. But they also have a Renewal Exemption (which applies to Duplicate Certificates).\nI quote:\n\nTo make sure you can always renew your certificates when you need to, we have a Renewal Exemption to the Certificates per Registered Domain limit. Even if you\u2019ve hit the limit for the week, you can still issue new certificates that count as renewals.\n\nI also originally wanted to add also a lower bound, to prevent unwanted downtime due to misconfiguration, since the check is triggered hourly and the user could give a period smaller than 3600 seconds. But I wanted to first discuss this with you.. \n\nSo (from what I understood) each pre-existing discrete certificate (same set of domains) can be renewed up to five times a week. @cpu did I get this right ?\n\nFrom what I understood, the first 5 renewals count as Duplicates and the rest as normal renewals. (In the sense that Duplicate certificates can coexist [new key], but renewed certificates not [same key]).\nElse this example given further down does not really make sense to me:\n\nYou can issue 50 certificates in week 1, 50 more certificates in week 2, and so on, while not interfering with renewals of existing certificates.\n\nNevertheless I would be interested in what @cpu has to say.\n\nRigth, I did not think about this. User adjustable MAX_VALIDITY perhaps ?\n\nWell, the thing is that LE CA always gives certificates with a lifespan of 90 days (not adjustable through simp_le). So even when adjusting MAX_VALIDITY we would have to somehow trick simp_le to think that the period given through --min_valid has been reached.\nNevertheless I was about to suggest user adjustable MAX_VALIDITY for an entirely different reason.\nNamely, as it currently stands, we make the assumption that all ACME compliant CAs issue certificates with a lifespan of 90 days. The --force-renew function is based upon this assumption.\nBut as we allow the user to define an ACME CA other than LE through the ACME_CA_URI environment variable - and we cannot guarantee what lifetimes these CAs will issue - a user may run into unexpected behavior when doing --force-renew on a different CA.\nSo my suggestion would be to have a user adjustable MAX_VALIDITY variable that must be set by the user whenever the ACME_CA_URI is set.. Another idea would be to modify the localtime of the letsencrypt-companion docker container. (e.g. by mounting a custom localtime inside the container, that we can modify from the outside)\nThis would not affect anything on the host system.\nMerry Christmas, btw (Or Happy Holidays). \n\nIf the MAX_VALIDITY is adjustable, it can default to say 88 days and we can manually set it to 90 days for the test so that the rest of the existing test unit will work as is (and we don't have to fiddle with the container localtime).\n\nOh, yes of course. That would work.\nBut that would mean, that we trust the user to give a value that has already taken account the rate limits (e.g. 88 days instead of 90), IF he sets the variable manually and doesn't use the default value.\nEither way it's his fault at this point, as long as we document it.\n\nRegarding the improved support of other ACME CA I was about to answer that I'm not aware of any other CA offering free certificate through ACME v1 protocol with http-01 challenge, but a quick research seems to indicate that there is now at least one candidate.\n\nAnd according to them they give certificates with a lifetime of 180 days.\nSo, what do you say? (I could integrate the check in this PR). Did all the mentioned changes.\nWhat's left now is to discuss the aforementioned lower bound\n\nI also originally wanted to add also a lower bound, to prevent unwanted downtime due to misconfiguration, since the check is triggered hourly and the user could give a period smaller than 3600 seconds.. The absolute minimum would be 3600 + worst case execution time of update_certs.\nSo I think 7200 are more than enough.\n\nI will add the lower bound some time later today in this PR.. Done\n(Just in case you didn't get a push notification). >I'm currently bed ridden due to flu\nI'm sorry to hear that.\nGet well soon. \n\nwe could just change the test boulder config to issue certificates with a 88 days validity\n\nThat seems indeed to be the cleanest way. Didn't even think of touching the Boulder...\nSo, I will redo this PR in the next few days.. Although, now that I think about it again, we still have a problem.\nIf we edit the ca-a.json and ca-b.json the same way we modify the va.json for the ports, the change would be made with sed during the test setup phase. \nThat means that all tests will get certificates with a validity of 88 days.\nAnd that will conflict with the force_renew test, which assumes a 90 day validity in order for it to work.\nIf we want to make it with the boulder change we either have to add an exception code inside letsencrypt-service to use a 88 day validity for the force renew command during a test, or restart the boulder with different settings in between the tests.\n. > This seems to be the same type of confusion as #485 (comment).\nYes indeed. \nDunno what's the problem with me...\nThanks for the clear up.. Done.\nInterestingly some times a wrong certificate is issued during tests and fail, which is fixed by a re-run. (Not related to this PR)\nBecause the first travis run failed, I just force pushed again to re-trigger travis and the checks now pass.. >I've noticed that for some reason your commit messages are prefixed with a star and a space (*)\nThat's just the commit message convention that I use.\n\nI'd prefer that to be removed if possible.\n\nDone\n. Will do. (although until now I had it never fail before... Then again I'm mostly testing with the two container setup...). @buchdag \nAs a quick fix, do you want to try if increasing the sleep time in Line 63 to e.g. sleep 15 increases reliability in your setup?. I ran the certs_validity test 10 consecutive times in a three container setup, and it passed every time.\nIt will be difficult for me to debug this.\nNevertheless I have two possible solutions, although you would have to test them.\nFirst a small Explanation of what the tests does\nThe test unit creates 3 containers of which only one (le3.wtf) has its LETSENCRYPT_MIN_VALIDITY set to something less than the lifetime of the issued certificates (specifically 10 seconds less).\nAfter waiting for the symlinks of the certificates and parsing the current lifetime of the issued certificates, the test unit waits 10 seconds, then retriggers update_certs, reparses the lifetime of the certificates and checks if the certificate for le3.wtf was renewed.\nPossible Solution 1\nSince the LETSENCRYPT_MIN_VALIDITY is set to a value 10 seconds less than the lifetime of the issue certificates, if the \"waiting for symlinks\" and \"parsing lifetimes of issued certificates\" takes less than a second the update_certs script will be triggered too close to the threshold and may not renew the certificate. Thus increasing the sleep timeout (like described above) should fix that.\nPossible Solution 2\nThe certificates are parsed again immediately after the triggering of the update_certs script for their lifetimes, which may be too soon (i.e. before the certificate was actually renewed). Putting a sleep between the two calls should mitigate this (even better would be a wait function that waits for the cert to be renewed). Though if this is the fix, we should probably also update the force_renew test, since it does exactly the same.. Yes, docker-letsencrypt-nginx-proxy-companion should renew all certificates that are about to expire in less than 30 days, independent of the container runtime.\nDo note, that you will get expiry notification mails for ALL created certificates, even those that you are currently not using.\nSince docker-letsencrypt-nginx-proxy-companion removes the certificates if the respectable container (for which the certificates are meant) is not running, and recreates them at container start, you may very well be seeing these mails about certificates that you are not using anymore.\nTo check when your currently used certificates will expire, execute docker exec nginx-letsencrypt /app/cert_status (assuming nginx-letsencrypt is the name of the letsencrypt companion container).\nIf they will expire in less than 30 days, something went wrong with the auto-renewal process. If not, you can safely ignore the mails.. > I don't remember exactly how simp_le handle this internally, but I suspect the email address used is the one supplied when the account creation happens for the first time.\nThat is what I wanted to talk about previously.\nI closely followed the debug log of simp_le along with the official ACME protocol and noticed that the request that simp_le sends for the email is invalid, and the ACME response is silently ignored.\nSo i.e. the LETSENCRYPT_EMAIL never actually worked!\n(As you said, the very first LETSENCRYPT_EMAIL mail is used for all certificates on the same endpoint)\nThe global DEFAULT_EMAIL would be the only working way.\nGenerally I agree with all design decisions, but I will investigate closer at a latter time.\n\nThe only other case I see where folks have a hard time transitioning to a new account key is if they have coordinated with Let's Encrypt for a rate limit adjustment. Those are often done by ACME account ID as well. Do you have a sense of whether your users might be in this position?\n\nIf I remember my digging correctly, simp_le doesn't store the account ID in any way. So the only way for the user to get the ID with letsencrypt-companion would be to dig through the debug logs and find the ACME response.\nSo the average user would be excluded from that.. Probably a side effect of \"automatic indentation\" of my Editor.. Same as above. done. done. ",
    "maximkrusina": "In between, I found this - I hope it will help someone:\nhttps://github.com/adferrand/docker-letsencrypt-dns. ",
    "SmotrovaLilit": "Hi @buchdag\nIn case with three containers nginx_proxy_container is empty because function get_nginx_proxy_cid dosn't run: https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/app/entrypoint.sh#L94. Thanks for reviewing. I\u2019ve squashed commits into one. Fixed. Fixed. Fixed. Of course). Fixed.. Yes, you are right. . ",
    "hvorragend": "Thank you for this detailed and very helpful answer. \nYou helped me a lot and calmed me down. :-)\n\nthe hostname sent by the client does not correspond to a domain that's currently configured on the proxy : nginx answer with a 503 error.\n\nThat one is my problem. \nI'll think a little bit about whether or not to disable the other domains.\nI have three domains (CNAME redirect) pointing to a dynamic IP.. Thank you very much.\nI am using the separate containers-method, so I don't have a nginx-proxy container (official nginx instead). So I added the DEFAULT_HOST to the nginx-gen-container and it seems to work.. ",
    "dmanser92": "I should maybe also say that I needed to define the http_proxy and https_proxy variable and install a proxy certificate in alpine to get curl to work. Maybe simp_le isn't using the cert?. Cool, now I have an error. Do you know what I have to do? (I suppose it's because of the proxy)\n\nSSLError: HTTPSConnectionPool(host='acme-v01.api.letsencrypt.org', port=443): Max retries exceeded with url: /directory (Caused by SSLError(SSLError(\"bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)\",),))\n. hmm me neither, but I will keep trying to resolve this. Maybe there's a way to globally set the verification to false in python or to properly install the certs so that python uses these.\n\nThanks anyway. Did you start Docker with IPv6? I restarted Docker with IPv6 support but still get the same error.\nWould that mean that the whole environment must only use IPv6 from DNS->Firewall->Proxy->Docker for these requests? . We found the problem!\nIn http://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification, we found the info how python handles trusted CA's. Because it isn't specified in the code itself that it should use the ca-certificate-File, we had to do it with an environment variable:\n\nThis list of trusted CAs can also be specified through the REQUESTS_CA_BUNDLE environment variable.\n\nSo we just added this environment Variable to the compose-file with the path to the ca-certificate File. ",
    "nradchenko": "Have the same issue, jrcs/letsencrypt-nginx-proxy-companion:v1.6 works fine.\nhttps://github.com/certbot/certbot/issues/4933. ",
    "negamaxi": "Found a workaround that works fine for me, still have no idea why issue appeared though.. ",
    "leoddias": "@buchdag \nThanks for the answer!\nNow i put the companion container's env DOCKER_PROVIDER = ecs  DEBUG=true AND\nECS_ENABLE_CONTAINER_METADATA=true in /etc/ecs/ecs.config (because it was disabled by default)\nand i maked a reboot.\nNow, when i run \"docker inspect\", i got this new mount option: \n\"Source\": \"/var/lib/ecs/data/metadata/38b3f7e2-5e5a-44c5-8d77-a0e8394d6396/nginx\",\n\"Destination\": \"/opt/ecs/metadata/fc6ae9c0-a092-42db-85b8-a4e441c8e67c\",\nBut it's still returning exit code 1, what do i miss now?. @buchdag i put the env (DEBUG=true) but it didnt make any logs, where can i see them?. So, i want to thank everyone, now i have a working solution, using only jwilder + companion containers.\nSteps:\n1. Set  ECS_ENABLE_CONTAINER_METADATA=true in /etc/ecs/ecs.config;\n2. Set container's env DOCKER_PROVIDER = ecs\nFinal TaskDefinition JSON:\n{\n    \"ipcMode\": null,\n    \"executionRoleArn\": null,\n    \"containerDefinitions\": [\n        {\n            \"dnsSearchDomains\": null,\n            \"logConfiguration\": null,\n            \"entryPoint\": null,\n            \"portMappings\": [\n                {\n                    \"hostPort\": 80,\n                    \"protocol\": \"tcp\",\n                    \"containerPort\": 80\n                },\n                {\n                    \"hostPort\": 443,\n                    \"protocol\": \"tcp\",\n                    \"containerPort\": 443\n                }\n            ],\n            \"command\": null,\n            \"linuxParameters\": null,\n            \"cpu\": 0,\n            \"environment\": [\n                {\n                    \"name\": \"DOCKER_PROVIDER\",\n                    \"value\": \"ECS\"\n                }\n            ],\n            \"ulimits\": null,\n            \"dnsServers\": null,\n            \"mountPoints\": [\n                {\n                    \"readOnly\": true,\n                    \"containerPath\": \"/tmp/docker.sock\",\n                    \"sourceVolume\": \"docker-sock\"\n                },\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/etc/nginx/certs\",\n                    \"sourceVolume\": \"var-certs\"\n                },\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/usr/share/nginx/html\",\n                    \"sourceVolume\": \"var-ngnix-html\"\n                },\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/etc/nginx/vhost.d\",\n                    \"sourceVolume\": \"var-ngnix-vhostd\"\n                }\n            ],\n            \"workingDirectory\": null,\n            \"secrets\": null,\n            \"dockerSecurityOptions\": [],\n            \"memory\": 150,\n            \"memoryReservation\": null,\n            \"volumesFrom\": [],\n            \"image\": \"jwilder/nginx-proxy:0.3.0\",\n            \"disableNetworking\": null,\n            \"interactive\": null,\n            \"healthCheck\": null,\n            \"essential\": true,\n            \"links\": null,\n            \"hostname\": null,\n            \"extraHosts\": null,\n            \"pseudoTerminal\": null,\n            \"user\": null,\n            \"readonlyRootFilesystem\": null,\n            \"dockerLabels\": {\n                \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\": \"\"\n            },\n            \"systemControls\": null,\n            \"privileged\": null,\n            \"name\": \"nginx-proxy\"\n        },\n        {\n            \"dnsSearchDomains\": null,\n            \"logConfiguration\": null,\n            \"entryPoint\": null,\n            \"portMappings\": [\n                {\n                    \"hostPort\": 8080,\n                    \"protocol\": \"tcp\",\n                    \"containerPort\": 8000\n                }\n            ],\n            \"command\": null,\n            \"linuxParameters\": null,\n            \"cpu\": 0,\n            \"environment\": [\n                {\n                    \"name\": \"VIRTUAL_HOST\",\n                    \"value\": \"yourcompany.com\"\n                },\n                {\n                    \"name\": \"LETSENCRYPT_EMAIL\",\n                    \"value\": \"your@mail.com\"\n                },\n                {\n                    \"name\": \"VIRTUAL_PORT\",\n                    \"value\": \"8000\"\n                },\n                {\n                    \"name\": \"LETSENCRYPT_HOST\",\n                    \"value\": \"yourcompany.com\"\n                }\n            ],\n            \"ulimits\": null,\n            \"dnsServers\": null,\n            \"mountPoints\": [],\n            \"workingDirectory\": null,\n            \"secrets\": null,\n            \"dockerSecurityOptions\": null,\n            \"memory\": 128,\n            \"memoryReservation\": null,\n            \"volumesFrom\": [],\n            \"image\": \"jwilder/whoami\",\n            \"disableNetworking\": null,\n            \"interactive\": null,\n            \"healthCheck\": null,\n            \"essential\": true,\n            \"links\": null,\n            \"hostname\": null,\n            \"extraHosts\": null,\n            \"pseudoTerminal\": null,\n            \"user\": null,\n            \"readonlyRootFilesystem\": null,\n            \"dockerLabels\": null,\n            \"systemControls\": null,\n            \"privileged\": null,\n            \"name\": \"whoami\"\n        },\n        {\n            \"dnsSearchDomains\": null,\n            \"logConfiguration\": null,\n            \"entryPoint\": null,\n            \"portMappings\": [],\n            \"command\": null,\n            \"linuxParameters\": null,\n            \"cpu\": 0,\n            \"environment\": [\n                {\n                    \"name\": \"DOCKER_PROVIDER\",\n                    \"value\": \"ECS\"\n                }\n            ],\n            \"ulimits\": null,\n            \"dnsServers\": null,\n            \"mountPoints\": [\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/etc/nginx/certs\",\n                    \"sourceVolume\": \"var-certs\"\n                },\n                {\n                    \"readOnly\": true,\n                    \"containerPath\": \"/var/run/docker.sock\",\n                    \"sourceVolume\": \"docker-sock\"\n                },\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/usr/share/nginx/html\",\n                    \"sourceVolume\": \"var-ngnix-html\"\n                },\n                {\n                    \"readOnly\": null,\n                    \"containerPath\": \"/etc/nginx/vhost.d\",\n                    \"sourceVolume\": \"var-ngnix-vhostd\"\n                }\n            ],\n            \"workingDirectory\": null,\n            \"secrets\": null,\n            \"dockerSecurityOptions\": null,\n            \"memory\": null,\n            \"memoryReservation\": null,\n            \"volumesFrom\": [],\n            \"image\": \"jrcs/letsencrypt-nginx-proxy-companion\",\n            \"disableNetworking\": null,\n            \"interactive\": null,\n            \"healthCheck\": null,\n            \"essential\": false,\n            \"links\": null,\n            \"hostname\": null,\n            \"extraHosts\": null,\n            \"pseudoTerminal\": null,\n            \"user\": null,\n            \"readonlyRootFilesystem\": null,\n            \"dockerLabels\": null,\n            \"systemControls\": null,\n            \"privileged\": null,\n            \"name\": \"jrcs-letsencrypt-nginx-proxy-companion\"\n        }\n    ],\n    \"memory\": \"150\",\n    \"taskRoleArn\": null,\n    \"family\": \"proxy-reverso\",\n    \"pidMode\": null,\n    \"requiresCompatibilities\": [\n        \"EC2\"\n    ],\n    \"networkMode\": null,\n    \"cpu\": null,\n    \"volumes\": [\n        {\n            \"name\": \"docker-sock\",\n            \"host\": {\n                \"sourcePath\": \"/var/run/docker.sock\"\n            },\n            \"dockerVolumeConfiguration\": null\n        },\n        {\n            \"name\": \"var-certs\",\n            \"host\": {\n                \"sourcePath\": \"/var/ngnix/certs/\"\n            },\n            \"dockerVolumeConfiguration\": null\n        },\n        {\n            \"name\": \"var-ngnix-html\",\n            \"host\": {\n                \"sourcePath\": \"/var/ngnix/html\"\n            },\n            \"dockerVolumeConfiguration\": null\n        },\n        {\n            \"name\": \"var-ngnix-vhostd\",\n            \"host\": {\n                \"sourcePath\": \"/var/ngnix/vhost.d\"\n            },\n            \"dockerVolumeConfiguration\": null\n        }\n    ],\n    \"placementConstraints\": []\n}\n. ",
    "flj": "I am having trouble getting this to work as well. I am getting\nDeployment has not completed ...\nfor the following Dockerfile\nversion: '2'\n\nservices:\n  nginx-web:\n    image: nginx\n    labels:\n        com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    ports:\n      - \"0.0.0.0:80:80\"\n      - \"0.0.0.0:443:443\"\n    volumes:\n      - /nginx/data/conf.d:/etc/nginx/conf.d\n      - /nginx/data/vhost.d:/etc/nginx/vhost.d\n      - /nginx/data/html:/usr/share/nginx/html\n      - /nginx/data/certs:/etc/nginx/certs:ro\n      - /nginx/data/htpasswd:/etc/nginx/htpasswd:ro\n    logging:\n      options:\n        max-size: 4m\n        max-file: 10\n\n  nginx-gen:\n    image: jwilder/docker-gen\n    command: -notify-sighup nginx-web -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl \n/etc/nginx/conf.d/default.conf\n    volumes:\n      - /nginx/data/conf.d:/etc/nginx/conf.d\n      - /nginx/data/vhost.d:/etc/nginx/vhost.d\n      - /nginx/data/html:/usr/share/nginx/html\n      - /nginx/data/certs:/etc/nginx/certs:ro\n      - /nginx/data/htpasswd:/etc/nginx/htpasswd:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n    logging:\n      options:\n        max-size: 2m\n        max-file: 10\n\n  nginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - /nginx/data/conf.d:/etc/nginx/conf.d\n      - /nginx/data/vhost.d:/etc/nginx/vhost.d\n      - /nginx/data/html:/usr/share/nginx/html\n      - /nginx/data/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      NGINX_DOCKER_GEN_CONTAINER: nginx-gen\n      NGINX_PROXY_CONTAINER: nginx-web\n      DOCKER_PROVIDER: ecs\n    logging:\n      options:\n       max-size: 2m\n       max-file: 10\n  httpd:\n    image: httpd:alpine\n    environment:\n      VIRTUAL_HOST:  abcd.example.com\n      LETSENCRYPT_HOST: abcd.example.com\n      LETSENCRYPT_EMAIL: me@example.com\n\nCould you put up a working example using the DOCKER_PROVIDER=ecs and say a simple httpd container?\nin particular, it is unclear how to get the right network. When going through Evert Ramos's examples all the docker containers were in a docker network webproxy. When doing this on standard EC2 machine, it works fine with some basic docker containers (e.g. httpd). For ECS I cannot specify the network it seems, so I guess everything just goes into bridge? \nI did not set ecs.config specifically (not sure how to do it from the my machine; and I guess I don't need to ssh in to set it manually), I used the cli to create my cluster\necs-cli configure --cluster clustecs --region eu-central-1 --default-launch-type EC2 --config-name clustecs\nand all it shows in ecs.config is\nECS_CLUSTER=clustecs\nHow can I set the  ECS_ENABLE_CONTAINER_METADATA from the command-line (or from the dashboard if needed)?\n. ",
    "JeraNS": "I was having the same issue. Turned out to be just a few typos.\nHere is my working version:\n```\n{\n  \"family\": \"nginx\",\n  \"taskRoleArn\": \"\",\n  \"executionRoleArn\": \"\",\n  \"networkMode\": \"none\",\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": null,\n      \"portMappings\": [\n        {\n          \"hostPort\": 80,\n          \"protocol\": \"tcp\",\n          \"containerPort\": 80\n        },\n        {\n          \"hostPort\": 443,\n          \"protocol\": \"tcp\",\n          \"containerPort\": 443\n        }\n      ],\n      \"command\": null,\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DOCKER_PROVIDER\",\n          \"value\": \"ecs\"\n        },\n        {\n          \"name\": \"NGINX_DOCKER_GEN_CONTAINER\",\n          \"value\": \"nginx-gen\"\n        },\n        {\n          \"name\": \"NGINX_PROXY_CONTAINER\",\n          \"value\": \"nginx\"\n        }\n      ],\n      \"ulimits\": null,\n      \"dnsServers\": null,\n      \"mountPoints\": [\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/etc/nginx/certs\",\n          \"sourceVolume\": \"certs\"\n        },\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/tmp/docker.sock\",\n          \"sourceVolume\": \"docker\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/usr/share/nginx/html\",\n          \"sourceVolume\": \"usr-share-nginx-html\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/etc/nginx/vhost.d\",\n          \"sourceVolume\": \"usr-share-nginx-vhost\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"dockerSecurityOptions\": null,\n      \"memory\": 128,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"image\": \"jwilder/nginx-proxy\",\n      \"disableNetworking\": null,\n      \"essential\": true,\n      \"links\": null,\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {\n        \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\": \"\"\n      },\n      \"privileged\": null,\n      \"name\": \"nginx\"\n    },\n     {\n      \"dnsSearchDomains\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": null,\n      \"portMappings\": [],\n      \"command\": null,\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DOCKER_PROVIDER\",\n          \"value\": \"ecs\"\n        },\n        {\n          \"name\": \"NGINX_DOCKER_GEN_CONTAINER\",\n          \"value\": \"nginx-gen\"\n        },\n        {\n          \"name\": \"NGINX_PROXY_CONTAINER\",\n          \"value\": \"nginx\"\n        }\n      ],\n      \"ulimits\": null,\n      \"dnsServers\": null,\n      \"mountPoints\": [\n        {\n          \"readOnly\": null,\n          \"containerPath\": \"/etc/nginx/certs\",\n          \"sourceVolume\": \"certs\"\n        },\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"docker\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/usr/share/nginx/html\",\n          \"sourceVolume\": \"usr-share-nginx-html\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/etc/nginx/vhost.d\",\n          \"sourceVolume\": \"usr-share-nginx-vhost\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"dockerSecurityOptions\": null,\n      \"memory\": 128,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"image\": \"jrcs/letsencrypt-nginx-proxy-companion\",\n      \"disableNetworking\": null,\n      \"essential\": false,\n      \"links\": null,\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": null,\n      \"privileged\": null,\n      \"name\": \"jrcs-letsencrypt-nginx-proxy-companion\"\n    }\n  ],\n  \"volumes\": [\n    {\n      \"name\": \"certs\",\n      \"host\": {\n        \"sourcePath\": \"/home/ec2-user/efs/nginx/certs\"\n      }\n    },\n    {\n      \"name\": \"docker\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      }\n    },\n{\n  \"name\": \"usr-share-nginx-vhost\",\n  \"host\": {\n    \"sourcePath\": \"/home/ec2-user/efs/nginx/vhost.d\"\n  }\n},\n{\n  \"name\": \"usr-share-nginx-html\",\n  \"host\": {\n    \"sourcePath\": \"/home/ec2-user/efs/nginx/html\"\n  }\n}\n\n],\n  \"placementConstraints\": [],\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"cpu\": null,\n  \"memory\": null\n}\n```\nJust remember to update the volume locations accordingly\nEdit: pasted the wrong copy. ",
    "Archcry": "\nAnd now comes the letsencrypt part :). I need for some domains to use SSL Certificate.\nDo i have to run a different container each time i need a certificate?\n\nThe whole idea of using docker is to distribute your application as a container, this means that each container has its own webserver. So yes, you'll be deploying every website in a different container. This should not cause a lot of overhead though because they will each use the same base image (nginx).\nThis way your nginx-proxy can pick up each individual website and configure it. Same for letsencrypt-companion.\nEDIT:\nRefer back to https://github.com/jwilder/nginx-proxy/issues/1052, I think you're hassling with how to set things up architecturally. The set up I posted there should work for you.. Same problem here with two new domain names. I also notice that there are no new entries created in /usr/share/nginx/.well-known/acme-challenge.. I found that the files are created (and removed afterwards) and that letsencrypt cannot access my .well_known challenge... I tried creating a file in the directory but I cannot access it... The debugging continues. Thanks for the article.\nEdit: Well, the issues magically disappeared for some reason. I have no idea what I changed.. ",
    "progress44": "Sure :). Actually that's just an example environment variable, all the images (docker-gen, nginx as well) are built here which is this I used it this way to make it possible to build an image once the configuration is final. As you can see for the nginx, it just copies the configuration in the container. blimpair/docker-letsencrypt-nginx-proxy-companion is an exact fork of jrcs/letsencrypt-nginx-proxy-companion. And it's the same for dockergen\n. ",
    "hookenz": "Thanks, I discovered this later that after https cert is issued, it will create the redirect.. Thanks for the update.  You can close it.  It was a misunderstanding of usage.. ",
    "yopbot": "I'm also looking for something similar.\nI need SSL on a container that I usually stop when I don't need it. When the container is up, everything is fine but once it's stopped, its url ends up with a 200 response from the default vhost which is a completely unrelated website...\nUnknown vhost are also served with the default one unlike nginx-proxy which returns a 503. ",
    "fabiansiegel": "I think, this is the relevant bug in nginx-proxy: https://github.com/jwilder/nginx-proxy/issues/105. ",
    "jmarceli": "Hi,\nThanks for your response. I've decided that the best approach to this problem would be writing separate container which will handle certificate files manipulations in response to Docker API events (like nginx container restart). What do you think about such approach?\nCould you please point me in the right direction if I want to listen to selected Docker API events and execute some bash command as a response.\nCurrently I have a script:\nwhile read l; do echo \"OK\"; done < <(curl -GET -s --unix-socket /var/run/docker.sock http:/events --data-urlencode 'filters={\"container\":[\"nginx-mongo\"],\"event\":[\"restart\"]}')\nWhich theoretically should print OK each time the nginx-mongo container restarts (I'll use labels like you do in a final version). Unfortunatelly this code doesn't work as expected.\nWhat is even more strange without events filtering everything works OK:\nwhile read l; do echo \"OK\"; done < <(curl -GET -s --unix-socket /var/run/docker.sock http:/events)\nand a version without echoing things also works:\ncurl -GET -s --unix-socket /var/run/docker.sock http:/events --data-urlencode 'filters={\"container\":[\"nginx-mongo\"],\"event\":[\"restart\"]}'\nAny help would be appreciated.. What do you think about LE_POSTPROCESS env variable where you may add any bash command for files postprocessing? It would be a much more generic solution where MongoDB will be just one of the possible use cases.. I gave up on that one as it is not a critical feature for my project. It's still waiting in the backlog for some spare time.. ",
    "oddsund": "Hello,\nYes, I saw the commit, should have referenced it. The commit references an if statement in the nginx.tmpl, which means one of two cases. Here is how I see the two cases being affected by this commit;\n(For both cases, the function add_location_configuration() in app/functions.sh will prepend the contents of nginx_location.conf to the vhost file)\n\n\nA vhost.d/ file exists for the host\nThe missing ^~ modifier can cause problems, as a secondary regex match(like the example above) will override the location directive inserted by the letsencrypt container. The other problem situation I see is where another prefix location directive exists which has the same prefix as nginx_location.conf(here, I think nginx will complain), or a longer prefix match - both of which implies that someone else is handling acme-challenges for the container, so this container should probably not handle certificates for that container.\n\n\nThe vhost.d/default file exists\nFor the case where there is no default vhost configuration specified, this should not cause any problems, as only requests to /.well-known/acme-challenge/ will be routed differently - the rest hit the 'location /' directive. When there exists a default vhost configuration, the same applies as for alternative 1).\n\n\nI am experiencing a problem with this location directive, and it can be seen in my docker-nginx-nextcloud-grav repository. The fpmcron/nextcloud.example.com file is an example of a vhost.d/ file. It contains a location directive meant to deny access to dot-files and dot-folders, and since it's a regex match, it overrides the /.well-known/acme-challenge/ directive inserted into the top of the file by the letsencrypt companion.. Hello,\nInteresting problem, but to be clear; this doesn't seem to be related to this pull request.\nRunning docker-compose up -d && docker-compose logs -f, I can see the following when starting your setup;\ncompanion    | /etc/nginx/certs/example.com /app\ncompanion    | Reloading nginx docker-gen (using separate container proxy-gen)...\ncompanion    | 2018/02/22 13:41:49 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/update_certs'\ncompanion    | Creating/renewal example.com certificates... (example.com www.example.com)\nThis should look like this;\ncompanion              | Reloading nginx docker-gen (using separate container proxy-gen)...\nproxy-gen                | 2018/02/22 13:44:15 Received signal: hangup\nproxy-gen                | 2018/02/22 13:44:15 Received signal: hangup\ncompanion              | Reloading nginx (using separate container nginx)...\ncompanion              | Creating/renewal example.com certificates... (example.com www.example.com)\nAlas, the docker-gen process never receives the SIGHUP signal!\nThe cause of this seems to be your cmd/entrypoint tuple, which causes two processes inside the container; one bash -c process(the root process), and one /usr/local/bin/docker-gen. The solution is simply to replace the value of entrypoint with the value of command, like this;\nentrypoint: /usr/local/bin/docker-gen -notify-sighup proxy -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\nNow, as to the why, I don't know enough about bash internals to state anything definitive. However, my theory is that the SIGHUP signal sent to the docker-gen container isn't propagated through the bash process to the actual docker-gen process, which leads to no new/updated nginx configurations getting generated.. Also, to add, nginx.tmpl from the Readme seems to work fine when entrypoint is correctly defined.. @streamholder for what setup does changing the entrypoint break your setup? Asking since the setup in the tarball you commented with started working after I swapped out the domains to my domain + changed the entrypoint. Would be interesting to try to debug.\nAlso, what exactly do you mean with \"breaks my setup\"? Container exits with error code 2 and no message, or something else?\n@buchdag No worries buchdag. While this issue might indeed be related to some broader issue that I'm currently not aware of, the change suggested should only stop regex-directives from matching '/.well-known/acme-challenge/'.. Hello,\nNot really. If an authorization fails because of ^~, that would imply that the authorization is dependent on a regex(since step 3 is never checked). That would mean that there is another location block handling acme challenges, which I guess doesn't make sense if one is using this service.. ",
    "vmsh0": "Hello,\nI'm detailing here, as requested by @buchdag (by the way, thank you for the help! :), my findings about the vhost.d/default problem.\nTo quickly reproduce, download and extract the archive, change the [hosts] string with actual hostnames in docker-compose.yml and run:\ndocker network create nginx-proxy-net\ndocker-compose up\ndocker.tar.gz\n(I tried to make it as simple as possible, it should be about the bare minimum needed to reproduce)\nWhen going up, the cert generation will result in the .well-known requests being relayed upstream by the proxy, instead of being served by it. This seems to be because when docker-gen is generating the configuration, the file /etc/nginx/vhost.d/default doesn't yet exist, resulting in the location blocks for /.well-known/acme-challenge/ not being generated at all.\nThe location file I provided in the archive shows this by adding the following debug comment to the server blocks in the default.conf proxy configuration file generated by the docker-gen container:\n# here shall lie the companion's evil device < {{ (printf \"/etc/nginx/vhost.d/%s\" $host) }} > < {{ exists \"/etc/nginx/vhost.d/default\" }} >\nPrinting the generated configuration file shows that during the generation the /etc/nginx/vhost.d/default file indeed doesn't exist:\n```\nroot@hostname:/srv/docker-website-bug# docker exec -ti proxy bash\nroot@b49181cc1556:/# cat /etc/nginx/conf.d/default.conf\n[omissis]\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    listen 80;\n    access_log /var/log/nginx/access.log vhost;\n    return 503;\n}\nupstream [host] {\n   # Container: upstream@nginx-proxy-net\n   server 172.20.0.2:80;\n}\nserver {\n    server_name [host];\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    # here shall lie the companion's evil device < /etc/nginx/vhost.d/[host] > < false > [<-- here!]\n    location / {\n        proxy_pass [host];\n    }\n}\nroot@b49181cc1556:/#\n```\nWhat instead would be expected is:\n```\n[omissis]\nserver {\n    server_name _; # This is just an invalid value which will never trigger on a real hostname.\n    listen 80;\n    access_log /var/log/nginx/access.log vhost;\n    return 503;\n}\nupstream [host] {\n   # Container: upstream@nginx-proxy-net\n   server 172.20.0.2:80;\n}\nserver {\n    server_name [host];\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    # here shall lie the companion's evil device < /etc/nginx/vhost.d/[host] > < true >\n    include /etc/nginx/vhost.d/default;\nlocation / {\n    proxy_pass [host];\n}\n\n}\n```\nIt is worth noting that at some point the /etc/nginx/vhost.d/default file gets created with the right content:\n```\nroot@b49181cc1556:/# cat /etc/nginx/vhost.d/default\nStart of configuration add by letsencrypt container\nlocation /.well-known/acme-challenge/ {\n    auth_basic off;\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\nEnd of configuration add by letsencrypt container\nroot@b49181cc1556:/#\n```\nIndeed, I verified that hardcoding the expected snippet in the template file (i.e. removing the conditional surrounding it or just copy-pasting the contents of /etc/nginx/vhost.d/default in its place) results in the signing process working correctly. (Thank you @buchdag for the suggestion)\nI'm probably forgetting to write something, as it's late and I have a plane to catch tomorrow. You can try to contact me by email if you need clarifications and other information.\n(In a mostly unrelated note, the nginx.tmpl linked in the README.md of this repo does not work natively with this kind of setup, instead it results in empty upstream blocks. It's something you or someone else might want to look into.). Hello,\nI defined the entry point that way for the reason described here: https://github.com/jwilder/docker-gen/issues/201\nDefining the entry point of docker-gen as suggested breaks my setup as well, and it does so consistently (that's the reason I never had a chance to notice the original nginx.tmpl works fine).\nI posted under this particular GitHub issue as requested by Nicolas. I'm sorry if it was not related.\nR.\nIl 22 feb 2018 17:02, Thomas Oddsund notifications@github.com ha scritto:\nAlso, to add, nginx.tmpl from the Readme seems to work fine when entrypoint is correctly defined.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/335#issuecomment-367728406, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AB3WqVlfflj76MOdxKWsGMQGLN25zXCaks5tXY-JgaJpZM4SMnBw.\n. Container exits with code 2 and no message. I haven't tried that with the specific setup I attached, but it did not work with the original setup I derived that one from.\n(I'd really like to provide more details but as I explained I'm not home.)\nR.\nIl 22 feb 2018 18:05, Thomas Oddsund notifications@github.com ha scritto:\n@streamholderhttps://github.com/streamholder for what setup does changing the entrypoint break your setup? Asking since the setup in the tarball you commented with started working after I swapped out the domains to my domain + changed the entrypoint. Would be interesting to try to debug.\nAlso, what exactly do you mean with \"breaks my setup\"? Container exits with error code 2 and no message, or something else?\n@buchdaghttps://github.com/buchdag No worries buchdag. While this issue might indeed be related to some broader issue that I'm currently not aware of, the change suggested should only stop regex-directives from matching '/.well-known/acme-challenge/'.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/335#issuecomment-367749544, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AB3WqYjOoSG6nU4too7dLIHresCrLYReks5tXZ5EgaJpZM4SMnBw.\n. Sorry - I had, but I forgot to detail it in the original message. It looks like nginx replies with status code 500 instead of serving the acme challenge files.. ",
    "hthieu1110": "Yeah, I've got same issue, does nginx-proxy handle /.well-known/acme-challenge/RMtNVtm4fc_mXCK8Tb5b55mzkuJoo11Ps1uZF3rpTCc auto or I have to do something ? I've got this: \n\\\"\\u003ch1\\u003eNot Found\\u003c/h1\\u003e\\u003cp\\u003eThe requested URL /.well-known/acme-challenge/RMtNVtm4fc_mXCK8Tb5b55mzkuJoo11Ps1uZF3rpTCc was not found on \\\"\"\nThanks in avance. . ",
    "javierojeda94": "How do I interpret those url contents, @buchdag ? I'm facing this problem right now but I don't understand the json . I solved my problem the same day I reported it on this thread. \nI had a docker-compose.yml with all the services inside them (including the one for letsencrypt) and the problem was that when letsencrypt tried to reach the pages, they were still starting.\nI separated all the letsencrypt related services (actually all the server related services) into int's own docker-compose.yml and it worked perfectly fine\nFirst I started the let's encrypt and then the other apps.\nHopefully this will help another person . Thanks I didn't know about that restriction from the .local domain. I will try something else to see how it works.\nAlso, what the volumes should look if I'm using a docker-compose.yml file? The links you referred me use the volumes in the command line, is it the same in a compose file? . Yes, it was solved using another sufix and the volumes workes as well, thanks a lot!. ",
    "gentle9": "I having the same issues. I created everything new with the two container setup. The Virtualhost is reachable with http and I can access a test.html file in .well-known/acme-challenge/ folder with the virtualhost domain from the internet.\nI also can see that the files are created in the acme-challenge folder while the letsencrypt script runs. But I am still receiving the error message that letsencrypt can\u00b4t access the file (Code 400: Timeout).\nEDIT: Ok my problem was that letsencrypt tries to connect with ipv6 if it can resolve the hostname. But as my docker isn\u00b4t configured to work with ipv6 it can\u00b4t connect. I have to disable my ipv6 in my dns server to have it working.. ",
    "NicolasDorier": "Getting this problem randomly, rebooting the machine where it happens solve it. (or just the docker-compose)\n@javierojeda94 needing to use two separate docker-compose is a can of worms because now you need to properly start them in the right order and make sure they both run. This is a workaround, but not really applicable in production :(. @buchdag yes will do today or tomorrow. I hope #404 is in latest image.. Using image 037927310b56 from docker. Same issue.\nUPDATE -- doing some test might be my fault this time. Closing for now. My latest error was https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/pull/408 which seems to be a change of behavior of let's encrypt done very recently.\nYour PR #404 seems to have solved my issue. It was however working time to time before, so it might just be luck.\nI close for now, will reopen if it happens again.. > The doc clearly state that the address must be valid and the email has been made entirely optional more than six months ago.\nIt is not optional, you need to set it equals to <no value> to not use a mail, which undocumented and not really user friendly. Omitting the LETSENCRYPT_EMAIL does not work.. Yes I tried it, because it took me ages to find out proper solution.\nHere is my docker-compose.\nAnd the docker let's encrypt. (Those two yml get merged as part of my build process)\nRemoving :-<no value> result in warning from docker-compose because the variable is not set. I tried several other solution I can't remember now, but found out the only solution was what I changed to: No warning, and do not set the mail.. No rush for now as what I did work. That said, I would be happy to know when this get merged so I cleanup my yml. \n. why md5sum and not sha256sum ?. sha256sum is 2 letters longer and actually safe.\nAlso unrelated, if I understand using this new PR means that for 1 deployment there will be 2 certificate requests right? It need to be documented so people don't go over the limits for their domain unexpectedly.. Awesome, I thought the DH parameter was used for the private key generation of the certificate, but it is used only in the diffie hellman.. ",
    "jlegido": "Same issue here.\nUsing, in this example, nginx-proxy + letsencrypt-nginx-proxy-companion + gitlab-ce\nThe letsencrypt-nginx-proxy-companion logs:\njson\n{\n  \"identifier\": {\n    \"type\": \"dns\",\n    \"value\": \"gitlab.example.com\"\n  },\n  \"status\": \"invalid\",\n  \"expires\": \"2018-08-30T15:15:57Z\",\n  \"challenges\": [\n    {\n      \"type\": \"tls-alpn-01\",\n      \"status\": \"invalid\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/OOo2Ito8JVq8PFt_sWExzspjfsLfJ9NnoBK3KXjpAT8/6713322445\",\n      \"token\": \"ViR36uPfzIQF7GRAvsnK6qI-8KA9d-Z5cnNQl_hOCWw\"\n    },\n    {\n      \"type\": \"dns-01\",\n      \"status\": \"invalid\",\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/OOo2Ito8JVq8PFt_sWExzspjfsLfJ9NnoBK3KXjpAT8/6713322446\",\n      \"token\": \"h_NGoeKp187fMDWJ68lmo5Ko3jcEFltquonUjtcZ0p8\"\n    },\n    {\n      \"type\": \"http-01\",\n      \"status\": \"invalid\",\n      \"error\": {\n        \"type\": \"urn:acme:error:unauthorized\",\n        \"detail\": \"Invalid response from http://gitlab.example.com/.well-known/acme-challenge/v3I-q92tgZsClB_VY3pVB-ZgQXanwJ2RCk9GrmA8LdA: \\\"\\u003chtml\\u003e\\r\\n\\u003chead\\u003e\\u003ctitle\\u003e404 Not Found\\u003c/title\\u003e\\u003c/head\\u003e\\r\\n\\u003cbody bgcolor=\\\"white\\\"\\u003e\\r\\n\\u003ccenter\\u003e\\u003ch1\\u003e404 Not Found\\u003c/h1\\u003e\\u003c/center\\u003e\\r\\n\\u003chr\\u003e\\u003ccenter\\u003e\\\"\",\n        \"status\": 403\n      },\n      \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/challenge/OOo2Ito8JVq8PFt_sWExzspjfsLfJ9NnoBK3KXjpAT8/6713322447\",\n      \"token\": \"v3I-q92tgZsClB_VY3pVB-ZgQXanwJ2RCk9GrmA8LdA\",\n      \"keyAuthorization\": \"v3I-q92tgZsClB_VY3pVB-ZgQXanwJ2RCk9GrmA8LdA.nEqKsjmuPqIlq8VAZACuH39-vd57v9ZytMS9UH3TxLI\",\n      \"validationRecord\": [\n        {\n          \"url\": \"http://gitlab.example.com/.well-known/acme-challenge/v3I-q92tgZsClB_VY3pVB-ZgQXanwJ2RCk9GrmA8LdA\",\n          \"hostname\": \"gitlab.example.com\",\n          \"port\": \"80\",\n          \"addressesResolved\": [\n            \"1.2.3.4\"\n          ],\n          \"addressUsed\": \"1.2.3.4\"\n        }\n      ]\n    }\n  ],\n  \"combinations\": [\n    [\n      0\n    ],\n    [\n      2\n    ],\n    [\n      1\n    ]\n  ]\n}\nThe nginx-proxy logs:\nnginx.1    | gitlab.kedu.cat 66.133.109.36 - - [23/Aug/2018:15:15:58 +0000] \"GET /.well-known/acme-challenge/v3I-q92tgZsClB_VY3pVB-ZgQXanwJ2RCk9GrmA8LdA HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\nI can pass more information, but this particular container was working fine. I decided to stop the letsencrypt-nginx-proxy-companion, remove all the certificates, and start it again, in order to troubleshoot exactly the same issue with other containers.\n. Now I see that all certificates were created.\nThe particular one reported in my previous command was created couple of hours before automatically. And again executing exactly the same command that worked fine this morning to create a container and it's certificates is failing with same behavior reported in my previous comment.\nSo looks like there are certain conditions where the certificate is no being created because the \" /.well-known/acme-challenge/whatever\" is not reachable (404).. 1. Nginx proxy container\n/srv/data/computer/docker/nginx-proxy/network_internal.conf\n```\nThese networks are considered \"internal\"\nallow 10.43.3.0/24;\nTraffic from all other networks will be rejected\ndeny all;\n```\ndocker run --name nginx-proxy \\\n  -p 80:80 \\\n  -p 8443:443 \\\n  -v /srv/data/computer/docker/nginx-letsencrypt/certs:/etc/nginx/certs:ro \\\n  -v /srv/data/computer/docker/nginx-proxy/vhost.d:/etc/nginx/vhost.d \\\n  -v /srv/data/computer/docker/nginx-proxy/network_internal.conf:/etc/nginx/network_internal.conf \\\n  -v /usr/share/nginx/html \\\n  -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n  --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n  -d jwilder/nginx-proxy\n\nNginx Let's Encrypt\n\ndocker run --name nginx-letsencrypt \\\n  -v /srv/data/computer/docker/nginx-letsencrypt/certs:/etc/nginx/certs:rw \\\n  --volumes-from nginx-proxy \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -d jrcs/letsencrypt-nginx-proxy-companion\n\nTest server\n\ndocker run --name test \\\n -e \"VIRTUAL_HOST=test.example.com\" \\\n -e \"VIRTUAL_PORT=80\" \\\n -e \"VIRTUAL_PROTO=http\" \\\n -e \"LETSENCRYPT_HOST=test.example.com\" \\\n -e \"LETSENCRYPT_EMAIL=user@example.com\" \\\n -d php:7-apache\nThanks.. Ok, I think I found a workaround: removing the \"test.example.com\" directory under \"certs\":\nsudo rm -fr /srv/data/computer/docker/nginx-letsencrypt/certs/test.example.com\nAfter this currently I'm able to create couple of new certificates without any issue.\nThanks for your time and excellent work.. ",
    "hackel": "Sorry, I should have been more clear.  I'm mounting the html volume as a local directory: ./data/html:/usr/share/nginx/html.  The challenge file is created in the right place, just with very restrictive permissions that prevent nginx from reading it.  I was able to work-around the issue by adding an ACL giving uid 100 access to the acme-challenge directory, so now it's working.\nI just realized that I am using nginx:alpine as opposed to the standard nginx image, and that's where the nginx user uid 100 comes from.  This may be the cause of the issue.\nAlso, I based my docker-compose file on evertramos/docker-compose-letsencrypt-nginx-proxy-companion, so that could be another source of trouble.. ",
    "goldie83": "Hi, having exactly the same problem.\nI have created a test.html with read permission for others in the .well-known/acme-challenge. Could load the site from external network. The owner was not the one with uid100 gid101. After the removal of the read pemission I'm getting of 403.\nThe same happens with verification files - 403, when ACME tries. \nIf I change the challenge_files to a named volume - the problem persists\ncompose:\n```\nversion: '3.2'\nservices:\n  nginx:\n    image: jwilder/nginx-proxy:alpine\n    ports:\n    - 80:80\n    - 443:443\n    volumes:\n    - /var/run/docker.sock:/tmp/docker.sock:ro\n    - certs:/etc/nginx/certs:ro\n    - confd:/etc/nginx/conf.d\n    - vhostd:/etc/nginx/vhost.d:ro\n    - challenge_files:/usr/share/nginx/html:ro\n    labels: \n    - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\"\n  letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    environment:\n    - DEBUG=true\n    # test environment: https://acme-staging.api.letsencrypt.org/directory\n    # production environment: https://acme-v01.api.letsencrypt.org\n    - ACME_CA_URI=${ACME_CA_URI}\n    volumes:\n    - /var/run/docker.sock:/var/run/docker.sock:ro\n    - certs:/etc/nginx/certs\n    - vhostd:/etc/nginx/vhost.d\n    - challenge_files:/usr/share/nginx/html\nvolumes:\n  certs:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /mnt/qnap/docker/nginx/certs\n  confd:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /mnt/qnap/docker/nginx/conf.d\n  vhostd:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /mnt/qnap/docker/nginx/vhost.d\n  challenge_files:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /mnt/qnap/docker/nginx/challenge_files\nnetworks:\n  default:\n    external:\n      name: nginx\n```. ",
    "giampa": "Ok thanks for your response. How can I separate domain name request? Should I add a Nginx (or other web server )container for each domain? What's the best practice for that?. Because I've never seen this behaviour before, but I trust you that's correct, I'm quite new in SSL. You can close and thanks again for your work.. ",
    "r14c": "take a look at nodejs/docker-node#588 for some background. ",
    "rakshazi": "Hello, any update on this?. Don't have env to test it, sorry. We switched to external load balancer with ssl. ",
    "carverhaines": "Shame.. ",
    "Kiina": "319\nNo and seems like it wont happen. ",
    "Hackbard": "Ok i see. \nthat's sad. ",
    "StalkAlex": "@buchdag I'll try tomorrow and let you know.. On second thought, decided to check now and it's working now as expected. Thanks, no unexpected removals.. ",
    "4integration": "Yeah... I just replaced the image to jrcs/docker-letsencrypt-nginx-proxy-companion and now it works.\nThanks @buchdag . ",
    "gcleaves": "OK duchbag, I'll try reading the docs again!. ",
    "sereysethy": "Hi I am sorry but my system worked fine for months until recently I have the same problem. I think it is because of the new update. @gcleaves @buchdag  can you tell me where to look at? I assure you I have read the doc :-) I set up my system since last year. Now all certificates have not renewed. It complains that Error: nginx-proxy container ... isn't running but everything is up and running.. @buchdag Thanks. It solves the problem. But it failed to reload nginx-proxy. \nReloading nginx docker-gen (using separate container nginx-proxy)...\nCan you let me know what to change exactly if I upgrade to use the latest version? Currently everything is running in the same service stack, nginx-proxy, docker-gen, letsencrypt...\n. @buchdag I tried with dev tag here is the error message\n/app/entrypoint.sh: line 57: ACME_CA_URI: unbound variable\nI think I need to provide the value to ACME_CA_URI. Does it have a default value?. @buchdag I run it as a service in a docker swarm environment, only nginx has several instances (but I dont think that is the issue). here is the complete config:\n```\nversion: '3'\nservices:\n  nginx-proxy:\n    image: nginxproxy_nginx-proxy\n    deploy:\n      replicas: 3\n      restart_policy:\n        condition: on-failure\n    networks:\n      - frontend\n    labels:\n      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\n    ports:\n      - 80:80\n      - 443:443\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./data/vhost:/etc/nginx/vhost.d\n      - ./data/html:/usr/share/nginx/html\n      - /opt/nginx-proxy/data/certs/:/etc/nginx/certs:ro\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion:\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure\n    networks:\n      - frontend\n    volumes:\n      - /opt/nginx-proxy/data/certs/:/etc/nginx/certs:rw\n      - ./data/vhost:/etc/nginx/vhost.d\n      - ./data/html:/usr/share/nginx/html\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      NGINX_PROXY_CONTAINER: nginx-proxy\n      NGINX_DOCKER_GEN_CONTAINER: nginx-proxy\nnetworks:\n  frontend:\n```\nI think label is not yet supported ... this configuration were changed slightly when I updated to the newer version of letsencrypt, especially the new environment variables\nNGINX_PROXY_CONTAINER: nginx-proxy\nNGINX_DOCKER_GEN_CONTAINER: nginx-proxy\nBefore the config file is much simpler. Now I have no idea what to add/remove.. Using which tagged version?. I tried with dev, it works fine. Yes it true it does work with several nginx instances. I will try with the different versions and get back to you soon.. it works fine with the latest version v1.8. Thanks. So the problem here was the multiple nginx instances. Thanks.. ",
    "darookee": "Try setting VIRTUAL_PROTO and VIRTUAL_PORT in you gitlab service definition:\n...\nenvironment:\n  ...\n  VIRTUAL_PROTO: https\n  VIRTUAL_PORT: 443\n  ...\n...\nAt least that is what I think I did when I ran into this problem.... ",
    "CaloC-NZ": "This helped me fix it, I just made the changes in the gitlab.rb file\nhttps://gitlab.com/gitlab-org/omnibus-gitlab/issues/1307. ",
    "chroriginal": "I decided to implement it by myself. So it is finally running, but thank you @darookee and @CaloC-NZ for your support, I really appreciate it.. ",
    "mdenissov": "Thank you for fast answer!. ",
    "fkling": "\nthe only challenge method supported is http-01\n\nAre there plans to support other methods?. ",
    "10io": "Yep, I'm working with docker volumes. I tried to destroy and recreate the volume for the certificates but I get the same issue.\nI'll dig this again next week. I'll update this issue if I find anything useful.. Ok so the issue had nothing to do with letsencrypt-nginx-proxy-companion. It's the ftp server that starts and expects to have a key.pem file but letsencrypt-nginx-proxy-companion can still be handling the file generation and it can be missing. \nFor whatever reason, if the key.pem file is missing, the ftp software (pureftp) creates a key.pem folder which then causes letsencrypt-nginx-proxy-companion to fail when it tries to write the key.pem file.\nI workaround that by having all containers started, removing the key.pem folder and forcing letsencrypt-nginx-proxy-companion to do a renewal with docker exec XXX /app/force_renew. A proper fix would be to update the ftp container so that it only starts the ftp server when the key.pem file is present.\nAnyway, thanks for your time.. ",
    "kaipaysen": "Hi, \nI've a very similar problem. The creation just doesn't work and I really don't have a clue on how to solve this.\nThis is the log from docker-compose\n\nletsencrypt-nginx-proxy-companion_1  | Sleep for 3600s\nletsencrypt-nginx-proxy-companion_1  | 2018/05/30 14:10:20 Generated '/app/letsencrypt_service_data' from 4 containers\nletsencrypt-nginx-proxy-companion_1  | 2018/05/30 14:10:20 Running '/app/signal_le_service'\nletsencrypt-nginx-proxy-companion_1  | 2018/05/30 14:10:20 Watching docker events\nletsencrypt-nginx-proxy-companion_1  | 2018/05/30 14:10:20 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nletsencrypt-nginx-proxy-companion_1  | /etc/nginx/certs/ /app\nletsencrypt-nginx-proxy-companion_1  | Reloading nginx proxy (a302670b486cb71dc7bad2416e93909f1770c8f540a2ad04ecf9c8cad22c90d6)...\nletsencrypt-nginx-proxy-companion_1  | Q2018/05/30 14:10:21 Generated '/etc/nginx/conf.d/default.conf' from 4 containers\nletsencrypt-nginx-proxy-companion_1  | ;2018/05/30 14:10:21 [notice] 45#45: signal process started\nletsencrypt-nginx-proxy-companion_1  | Creating/renewal  certificates... ()\nnginx-proxy_1                        | Custom dhparam.pem file found, generation skipped\nnginx-proxy_1                        | forego     | starting dockergen.1 on port 5000\nnginx-proxy_1                        | forego     | starting nginx.1 on port 5100\nnginx-proxy_1                        | dockergen.1 | 2018/05/30 14:10:20 Generated '/etc/nginx/conf.d/default.conf' from 4 containers\nnginx-proxy_1                        | dockergen.1 | 2018/05/30 14:10:20 Running 'nginx -s reload'\nnginx-proxy_1                        | dockergen.1 | 2018/05/30 14:10:20 Watching docker events\nnginx-proxy_1                        | dockergen.1 | 2018/05/30 14:10:20 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification 'nginx -s reload'\nletsencrypt-nginx-proxy-companion_1  | /app/letsencrypt_service: line 136:   156 Killed                  /usr/bin/simp_le -f account_key.json -f key.pem -f chain.pem -f fullchain.pem -f cert.pem $params_d_str --cert_key_size=$cert_keysize --server=$acme_ca_uri --default_root /usr/share/nginx/html/\nletsencrypt-nginx-proxy-companion_1  | /app\nletsencrypt-nginx-proxy-companion_1  | Sleep for 3600s\n\nAny Ideas?\nKai\n. a) Well it's a first time setup for this particular project but has been used in other projects in the exact same way.\nb) latest\nc) Linux, 18.04.0-ce, 1.21.1, build 5a3f1a3\nd) yes: \ndocker-compose-prod.yml.txt\n. Good hint. This particular server had swap disabled. That's why it didn't work here but in other projects with the same setup. Cheers mate!. ",
    "cphamlet": "I would also like to know this. . This docker container makes use of the simp_le client, a lightweight letsencrypt client. https://github.com/zenhack/simp_le\nYou can try running that command on start, and stick it in the auto renew code.. ",
    "curtiszimmerman": "Cool! I have use cases for this, and some of them are weird edge cases. Thanks for the tag! I'll check it out.. ",
    "ipepe": "Yeah, I think You are right. Today I figured out how to setup this correctly, although it would be nice to have this information in readme or somewhere.\nSo basically I change my claim on this issue from \"Bug\" to \"Needs more information in Readme\"\nEDIT: Solution: I mean that after starting all containters for nginx-proxy and companion, I should copy (generated by myself) certificate files default.key and default.crt into /path/to/certs. ",
    "vicary": "I guess my issue #411 is describing the same thing, but I am not sure if we should simply document this and call it a day.\nMaking up some invalid placeholder certs for default doesn't quite make sense in production.\nI see that users of nginx-proxy is very likely to start without a valid default upstream, and may never will.\nHow about disabling access to default server in the default template for nginx-proxy and rely solely on VIRTUAL_HOST? Users do need a default upstream can always override it with a separate docker-gen container.. I'm not super fluent in nginx.conf syntax, can we make it fall back to return 404, return 503 or something similar when we don't have a valid certificate?. Glad that it is fixed your way at least, thanks for the effort.\nDo you think I can make a custom redirection when the requested domain has no cert?. Guess I'll have to do more searching, closing this issue. Thanks again!. ",
    "jwulf": "\nFor development purposes i regulary deleted my images, so it is the latest version available thorugh the docker repository.\n\nIf you also delete your volumes, there will be no cached certificate, so it will request a new one.. I actually ran into this issue, without deleting volumes.\nTo get around it, I created two separate docker-compose files: one for the nginx/lets-encrypt combo, and another one for my webapp. I set my CD system to bring the webapp up and down, and not touch the proxy docker instance.\nThat got around it.. ",
    "belzebalex": "Hello,\nI'm having the same problem, which is kind of problematic as certificate creations create a few minutes of downtime.\nIs there any fix ?. > > Is there any fix ?\n\nNo clear and reproducible issue has been identified, so there is unfortunately nothing to fix at this point.\nUnder normal operation the container does not recreate existing certificate on restart and I haven't observed this behaviour on any of my own servers.\nIf your compose file don't use external volumes, the volume creation / deletion is handled by docker-compose itself and you might be deleting or recreating your volumes without realising it. Please check docker-compose doc, watch your Docker volumes and the docker-compose command output.\nIs docker-compose down deleting your volumes ?\nIs docker-compose up creating new volumes ?\n\nI guess docker-compose isn't deleting / creating volumes. Is there any way to be sure ?\n```\nversion: 2.1\nservices:\n    nginx-proxy:\n        restart: always\n        image: jwilder/nginx-proxy\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n        volumes:\n            - /srv/docker/nginx/certs:/etc/nginx/certs:ro\n            - /etc/nginx/vhost.d\n            - /usr/share/nginx/html\n            - /var/run/docker.sock:/tmp/docker.sock:ro\n            - ./http_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro\nnginx-proxy-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n        - /srv/docker/nginx/certs:/etc/nginx/certs:rw\n        - /var/run/docker.sock:/var/run/docker.sock\n    volumes_from:\n        - nginx-proxy\n\n```\nIs there anything wrong with my docker-compose configuration ?\nNevertheless, each time I'm restarting my server (docker-compose down, then docker-compose up), openssl uses 100% of the CPU during ~2 minutes, locking my whole server. \nThanks in advance for any help.\nAlex. Hello,\nSorry if I was misunderstood. It doesn't lock the system completely, but the website is inaccessible (which is normal).\nAfter a docker-compose down, the files stay the same. \nI'll try with the bind mount, I'll keep you informed.\n. ",
    "narhen": "I had a similar issue. In my case the docker labels for nginx and nginx-gen were misconfigured. I used the same label for both. The correct config is to use \ncom.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy for nginx and com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_gen for nginx-gen. ",
    "Nottt": "https://github.com/certbot/certbot/issues/6492\nHopefully they'll support it in certbot soon, if that's what was preventing you from supporting it. . https://github.com/Neilpang/acme.sh. This seems to support it and be easy to use. \nIs there something I can do on my side to make you serve a ECC certificate? If I generate them outside of the container and replace it, something like that? I'd rather not wait an unknown time if I can do some dirty workaround myself. \nThanks!. > I'm currently pretty much the only regular contributor to this project and I work on this on my free time, which I don't have much of.\nI understand. Thanks for what you do, we really appreciate it :heart_eyes: \nI'm not good with nginx syntax at all, but I have experience with docker and bash so If that helps I can help you implement a better ACME client. Let me know. \n\nChanging the client without breaking anything and maintaining downward compatibility is not a trivial task\n\nMy quick workaround I had in mind was just generating the ECC certificates outside of your container, and then overwriting the files. \nOr maybe editing the nginx proxy itself to use a different certificate with the nginx-proxy. \n. Can I delete default.crt and default.pem safely to disable this behavior? I don't care about non-SNI clients. . I'd like to never display a warning with my URL at all. I don't know what happens when a non SNI client tries to access a SNI server only. I suppose there will be some kind of warning telling them to upgrade or something. That's better than a giant, red screen telling my domain is not secure. \nIf not, the ideal solution would be to display a blank page in https (maybe with a different subdomain... something like error.domain.com) telling them to upgrade their client if they want to visit the website. \nHTTP could work, but all my domains have HSTS so that's not a option. I don't understand why you can't at least have the default certs being a subdomain with a valid cert at all?\nIf someone access my website with a non-SNI client, I don't want to scare them away. Do you think the average user will understand that it's their fault and not my website? \nAlso if that website can see I'm serving invalid cert, search engines can too. Will they find that suspicious? I don't know. Why would a domain be serving a valid & invalid certificate? \n. I understand. I'll try stuff and report back here if you wish. Thanks\n. ",
    "SilverFire": "Thank you for a fast merge \ud83d\udc4d \nWe can handle it with an index file (in any format) containing domains that were handled by LE, but I think it will bring inconsistency rather than reliability. In my experience I have the following case:\n\nI run new container with LETSENCRYPT_HOST=example.com\nCompanion obtains a LE cert for domain\nLater I get asked to set a cert with higher confirmation level for example.com\nSo I disable LE for this container and set my own cert\nAs a result, I will probably have index file with information that example.com was handled by this companion, but the cert in use will be different. And I don't see how this case can be handled correctly.. I wonder why [[ -n \"${file// }\" ]] works as expected. Could you give me a hint how to explain it?. Wow, thank you for the detailed explanation. I rarely code something on bash, but always discover something interesting in syntax.\n\nP.S.  First time meet developer from Nantes on GitHub :) I has a talk last year in Nantes on PHP conference PHP Tour. You have a beautiful city and wonderful Elephant). ",
    "mrg20": "Hi! First of all, thank you for the help.\nNow using the compose config you posted, I get the error:\nnginx-letsencrypt    | Error: can't write to the '/etc/nginx/certs' directory !\nnginx-letsencrypt    | Check that '/etc/nginx/certs' directory is export as a writable volume.\nI am using CentOS 7, docker 1.13.1 and docker-compose 1.21.2.\nEDIT: Okay, upgrade on docker, now having docker-ce 18.05.0. It seems to work, thank you!. ",
    "arkhamknighthell": "As soon as I took off this JrCs/docker-letsencrypt-nginx-proxy-companion the issue went away it looks like there are compatibility issues. Either way I am manually adding the certificates.. ",
    "lukecyca": "It is not working for me. I get the following error:\n/etc/cron.daily/letsencrypt-renew:\nAttempting to renew cert (example.ca) from /etc/letsencrypt/renewal/example.ca.conf produced an unexpected error: Failed authorization procedure. example.ca (tls-sni-01): urn:acme:error:tls :: The server experienced a TLS error during domain verification :: remote error: tls: handshake failure, www.example.ca (tls-sni-01): urn:acme:error:tls :: The server experienced a TLS error during domain verification :: remote error: tls: handshake failure. Skipping.\nAll renewal attempts failed. The following certs could not be renewed:\n /etc/letsencrypt/live/example.ca/fullchain.pem (failure)\n1 renew failure(s), 0 parse failure(s)\nrun-parts: /etc/cron.daily/letsencrypt-renew exited with return code 1\n(I've changed my domain to example.ca in the output above). It turns out I was running an older version of letsencrypt-nginx-proxy-companion.\nI pulled the latest image, and manually renewed using force_renew and all my certificates were successfully renewed even though they are sitting behind cloudflare.. Understandable. I may try to implement this using inotify/docker API as you suggest. Or even just a daily cron job to restart the container iff the cert files on disk are < 24 hours old.. ",
    "wiget": "Thanks @buchdag for upstreaming this idea. I tested this on HypriotOS/aarch64 on Raspberry Pi 3 B+. ",
    "rriemann": "@buchdag , do you maintain a fork we can use until your changes are merged?. @buchdag , oh my bad - that's true.\nAnyway, I still run into a problem when I have the companion as a dependency of Nextcloud on an Scaleway ARM server. I use this docker-compose file: https://github.com/nextcloud/docker/blob/master/.examples/docker-compose/with-nginx-proxy/postgres/fpm/docker-compose.yml\nThe composer log suggests that arm is not supported:\nstandard_init_linux.go:190: exec user process caused \"exec format error\". I just called docker-compose build --push and docker-compose up -d.. ",
    "bldrvnlw": "Forgot to mention - in the Pebble environment I've set PEBBLE_VA_ALWAYS_VALID=1 to avoid the need to set up a challenge response server. So I'd need to place a root cert at /etc/nginx/ssl/?\nBut as you point out that might no work. Is Pebble really ACME v2 only? In that case I suppose I could use Boulder.\n. Thanks for the tip - I'll go that route.. ",
    "techhazard": "I've been able to do a workaround by using the combined nginx+docker-gen image of jwilder/nginx-proxy like so:\n```yml\nversion: '3.6'\nservices:\nnginx-proxy:\n    image: jwilder/nginx-proxy:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - nginx_conf:/etc/nginx/conf.d:rw\n      - nginx_vhost:/etc/nginx/vhost.d:rw\n      - nginx_html:/usr/share/nginx/html:ro\n      - certificates:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    networks:\n      - nginx\n    labels:\n      - \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\"\nnginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - nginx_conf:/etc/nginx/conf.d:rw\n      - nginx_vhost:/etc/nginx/vhost.d:rw\n      - nginx_html:/usr/share/nginx/html:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - certificates:/etc/nginx/certs:rw\n    depends_on:\n      - nginx-proxy\nwhoami:\n    image: jwilder/whoami\n    environment:\n      - VIRTUAL_HOST=whoami.mydomainname.com\n      - LETSENCRYPT_HOST=whoami.mydomainname.com\n      - LETSENCRYPT_TEST=true\n    networks:\n      - nginx\nnetworks:\n  nginx:\nvolumes:\n  nginx_html:\n  nginx_vhost:\n  nginx_conf:\n  certificates:\n``. Maybe, but I'm using the samejrcs/letsencrypt-nginx-proxy-companion` version for both, right? So that shouldn't matter.. Allright, thanks.. Yes, thanks for the help :+1: . ",
    "publicocean0": "ok thanks. ",
    "thomseddon": ":) So I see! Just fixing now.. Done :). ",
    "mastef": "Just came here looking for this \ud83d\udc4d  Would be great, so we wouldn't have to have 100 containers with one customer cert each, but one container that can handle 100 domains that have different certs. ( We have a client-side SPA - every client is being served the same read only html content, just on their own domain ). ",
    "ivolution643": "I have a similar situation as above, where multiple domains point indeed to one container but I would like to get separate certs (or at least only a san for x.com / www.x.com and y.com / www.y.com).\nNote: x.com / y.com are obviously replacements of other domains I'm using for this setup.\nFirst of all, it does work and each domain in the container seems to be served the right certificate. However, something is still going wrong as the nginx-proxy logs will show the following for each of the domains in the standalone certs file:\nnginx-proxy        | 2019/01/05 14:13:10 [warn] 1#1: conflicting server name \"x.com\" on 0.0.0.0:80, ignored\nnginx-proxy        | 2019/01/05 14:13:10 [warn] 1#1: conflicting server name \"www.x.com\" on 0.0.0.0:80, ignored\n(... snip ...)\nContainer in docker-compose.yml with environment variables:\nenvironment:\n  - VIRTUAL_HOST=x.com,www.x.com,y.com,www.y.com\nConfig for the standalone certs:\nLETSENCRYPT_STANDALONE_CERTS=('x' 'y')\nLETSENCRYPT_x_HOST=('x.com' 'www.x.com')\nLETSENCRYPT_x_EMAIL=letsencrypt@x.com\nLETSENCRYPT_y_HOST=('y.com' 'www.y.com')\nLETSENCRYPT_y_EMAIL=letsencrypt@y.com\nNot sure if this is one of the intended purposes of the standalone certificates. However, if it is, this might be something that has to be checked against the virtual hosts before adding to the nginx configuration.. ",
    "Michiel-Idgis": "Is letsencrypt-nginx-proxy-companion able to generate a self singed default certificate if it can't find one?. ",
    "P4sca1": "We need to make sure that nginx can still read the certificates.\nBy default letsencrypt-companion saves the certificates as root, so they won't be readable by nignx if we change permissions. An option to specify under which user the letsencrypt-companion runs would be sufficient, maybe?. Ah, you're right.. I'm using no tag, so it should default to the latest tag. The image got downloaded one day ago.. When I reload nginx manually, it works fine until I re-deploy the stack. Then I need to reload nginx again, manually.. Running docker-stack deploy on a running docker stack (so just updating services) does not cause the issue. The issue only arises when removing the stack (docker-stack rm) before deploying.. Here is the log of the nginx_letsencrypt container, from startup until manually reloading nginx if that helps:\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Info: Custom Diffie-Hellman group found, generation skipped.\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx docker-gen (using separate container 2b17028149624a567a49de7ecbae26f71bb4484579ae795c311a771d94c93eb4)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx (using separate container 768431a7f345e4dc66b1a94ffaf5434b5a598851271bae5a0490b5c2d3fd120d)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Sleep for 3600s\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:51 Generated '/app/letsencrypt_service_data' from 4 containers\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:51 Running '/app/signal_le_service'\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:51 Watching docker events\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:51 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx docker-gen (using separate container 2b17028149624a567a49de7ecbae26f71bb4484579ae795c311a771d94c93eb4)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx (using separate container 768431a7f345e4dc66b1a94ffaf5434b5a598851271bae5a0490b5c2d3fd120d)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Sleep for 3600s\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:52 Received event start for container 12bb621e3d5e\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:27:53 Received event start for container f27dcc2b66fb\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:28:08 Debounce minTimer fired\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:28:09 Generated '/app/letsencrypt_service_data' from 6 containers\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018/08/23 21:28:09 Running '/app/signal_le_service'\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | /etc/nginx/certs/mydomain.de /app\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx docker-gen (using separate container 2b17028149624a567a49de7ecbae26f71bb4484579ae795c311a771d94c93eb4)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx (using separate container 768431a7f345e4dc66b1a94ffaf5434b5a598851271bae5a0490b5c2d3fd120d)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Creating/renewal mydomain.de certificates... (mydomain.de www.mydomain.de myotherdomain.com de. myotherdomain.com.com en.myotherdomain.com.com)\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | 2018-08-23 21:28:09,837:INFO:simp_le:1564: Certificates already exist and renewal is not necessary, exiting with status code 1.\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | /app\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx docker-gen (using separate container 2b17028149624a567a49de7ecbae26f71bb4484579ae795c311a771d94c93eb4)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Reloading nginx (using separate container 768431a7f345e4dc66b1a94ffaf5434b5a598851271bae5a0490b5c2d3fd120d)...\nips_nginx-letsencrypt.1.ve9d773wcj51@ips-vps-1    | Sleep for 3600s. > Could you try removing -wait 5s:30s from the docker-gen command ?\nDoesn't help.. Yep, here is the output:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Debug: a default certificate with subject= /CN=letsencrypt-nginx-proxy-companion is present.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Debug: the self generated default certificate is still valid for more than three months. Skipping default certificate creation.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Info: Custom Diffie-Hellman group found, generation skipped.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx docker-gen (using separate container 9b4b080fd0121d9d194f9f3045554fff17b3a5473e47181098501b79c58d7a77)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx (using separate container 6d9deed5533e7b43511d3cc5bc9fe04315092b536f59f768e8760afa290ce7f0)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:26 Generated '/app/letsencrypt_service_data' from 3 containers\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:26 Running '/app/signal_le_service'\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:26 Watching docker events\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:26 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Symlinked domains: de.myotherdomain.com myotherdomain.com mydomain.de en.myotherdomain.com www.mydomain.de\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Enabled domains:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Disabled domains: de.myotherdomain.com myotherdomain.com mydomain.de en.myotherdomain.com www.mydomain.de\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Some domains are disabled. Check them to remove unused symlinks.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    |\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking domain de.myotherdomain.com:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking de.myotherdomain.com.crt - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking de.myotherdomain.com.key - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking de.myotherdomain.com.dhparam.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking de.myotherdomain.com.chain.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking domain myotherdomain.com:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking myotherdomain.com.crt - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking myotherdomain.com.key - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking myotherdomain.com.dhparam.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking myotherdomain.com.chain.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking domain mydomain.de:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking mydomain.de.crt - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking mydomain.de.key - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking mydomain.de.dhparam.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking mydomain.de.chain.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking domain en.myotherdomain.com:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking en.myotherdomain.com.crt - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking en.myotherdomain.com.key - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking en.myotherdomain.com.dhparam.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking en.myotherdomain.com.chain.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking domain www.mydomain.de:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking www.mydomain.de.crt - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking www.mydomain.de.key - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking www.mydomain.de.dhparam.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Checking www.mydomain.de.chain.pem - removing.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Unused domains checking is finished.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx docker-gen (using separate container 9b4b080fd0121d9d194f9f3045554fff17b3a5473e47181098501b79c58d7a77)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx (using separate container 6d9deed5533e7b43511d3cc5bc9fe04315092b536f59f768e8760afa290ce7f0)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Sleep for 3600s\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:28 Received event start for container 12c177b6f775\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:30 Received event start for container 943210c2644c\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:33 Received event start for container b39b74a4ab59\n``.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:48 Debounce minTimer fired\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:48 Generated '/app/letsencrypt_service_data' from 6 containers\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018/08/23 21:41:48 Running '/app/signal_le_service'\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | /etc/nginx/certs/mydomain.de /app\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx docker-gen (using separate container 9b4b080fd0121d9d194f9f3045554fff17b3a5473e47181098501b79c58d7a77)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx (using separate container 6d9deed5533e7b43511d3cc5bc9fe04315092b536f59f768e8760afa290ce7f0)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Creating/renewal mydomain.de certificates... (mydomain.de www.mydomain.de myotherdomain.com de.myotherdomain.com en.myotherdomain.com)\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,847:DEBUG:simp_le:1546: ('-f', 'account_key.json', '-f', 'key.pem', '-f', 'chain.pem', '-f', 'fullchain.pem', '-f', 'cert.pem', '--email', 'admin@mydomain.de', '-v', '-d', 'mydomain.de', '-d', 'www.mydomain.de', '-d', 'myotherdomain.com', '-d', 'de.myotherdomain.com', '-d', 'en.myotherdomain.com', '--cert_key_size=4096', '--server=https://acme-v01.api.letsencrypt.org/directory', '--default_root', '/usr/share/nginx/html/') parsed as Namespace(account_key_public_exponent=65537, account_key_size=4096, cert_key_size=4096, default_root='/usr/share/nginx/html/', email='admin@mydomain.de', help=False, integration_test=False, ioplugins=['account_key.json', 'key.pem', 'chain.pem', 'fullchain.pem', 'cert.pem'], reuse_key=False, revoke=False, server='https://acme-v01.api.letsencrypt.org/directory', test=False, user_agent='simp_le/0.10.0', valid_min=2592000, verbose=True, version=False, vhosts=[Vhost(name='mydomain.de', root=None), Vhost(name='www.mydomain.de', root=None), Vhost(name='myotherdomain.com', root=None), Vhost(name='de.myotherdomain.com', root=None), Vhost(name='en.myotherdomain.com', root=None)])\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,848:DEBUG:simp_le:336: Loading account_key.json\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,852:DEBUG:simp_le:336: Loading key.pem\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,853:DEBUG:simp_le:336: Loading chain.pem\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,853:DEBUG:simp_le:336: Loading fullchain.pem\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,854:DEBUG:simp_le:336: Loading cert.pem\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,855:DEBUG:simp_le:1374: Existing SANs: [u'de.myotherdomain.com', u'myotherdomain.com', u'mydomain.de', u'en.myotherdomain.com', u'www.mydomain.de'], new: ['mydomain.de', 'www.mydomain.de', 'myotherdomain.com', 'de.myotherdomain.com', 'en.myotherdomain.com']\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,859:DEBUG:simp_le:1238: Certificate expires in 88 days, 17:18:17.144397 on 2018-11-20 15:00:06+00:00 (relative to 2018-08-23 21:41:48.855603+00:00)\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | 2018-08-23 21:41:48,859:INFO:simp_le:1564: Certificates already exist and renewal is not necessary, exiting with status code 1.\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | /app\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Symlinked domains: de.myotherdomain.com myotherdomain.com mydomain.de en.myotherdomain.com www.mydomain.de\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Enabled domains: mydomain.de www.mydomain.de myotherdomain.com de.myotherdomain.com en.myotherdomain.com\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Disabled domains:\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx docker-gen (using separate container 9b4b080fd0121d9d194f9f3045554fff17b3a5473e47181098501b79c58d7a77)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Reloading nginx (using separate container 6d9deed5533e7b43511d3cc5bc9fe04315092b536f59f768e8760afa290ce7f0)...\nips_nginx-letsencrypt.1.6jqqtc04rk5z@ips-vps-1    | Sleep for 3600s\n. Yes. The second log I posted is everything that got generated after running `docker container exec container_id sh -c 'exec nginx -s reload'`.. Maybe it only occurs when using `docker stack deploy`?.\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Generated '/etc/nginx/conf.d/default.conf' from 5 containers\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Sending container 'nginx-proxy' signal '1'\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Error sending signal to container: No such container: nginx-proxy\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Watching docker events\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Generated '/etc/nginx/conf.d/default.conf' from 5 containers\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Sending container 'nginx-proxy' signal '1'\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:48 Error sending signal to container: No such container: nginx-proxy\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:50 Received event start for container 49a1737b1ce1\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:50 Received signal: hangup\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:50 Received signal: hangup\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:50 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:51 Received signal: hangup\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:51 Received signal: hangup\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:51 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:55 Debounce minTimer fired\nips_nginx-gen.1.i05tz3gweqs2@ips-vps-1    | 2018/08/23 22:32:55 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n```. Okay, that makes sense. I thought setting the label is used for dynamic container name reference.\nI will try out the image you send, thank you!\nAlso, could you help me with that?\n\nAlso, is it possible to exclude a host in VIRTUAL_HOST, that is not listed in LETSENCRYPT_HOST (loading.mydomain.de in this case) from https? I would like to have this virtual host only served via http.\n. Using the new docker-gen image does solve the issue, thank you very much!\nMaybe we should add a hint in the Readme file.. Even if not having loading.mydomain.de in theLETSENCRYPT_HOST env var, it is still generated with hsts / https. The certificate does not exist for this domain, however one exists for mydomain.de, does this matter?. Yes, loading.mydomain.de thinks it should use the mydomain.de certificate.. Okay, I opened an issue there: https://github.com/jwilder/nginx-proxy/issues/1164\n\nThank you for your fast responses!. ",
    "Byteflux": "Would it be possible to make the permissions configurable through environment variables or some other mechanism? I share my certs volume with other containers that have processes which don't run as root and need to be able to read the certificates.. Doesn't really matter to me. If I can easily turn it off with something like an environment variable, it is not important to me if the check is enabled by default.. ",
    "lscarneiro": "Adding my 2 cents.\nIt would be awesome to have the configurable option to make private keys use the same permission level as the other pem's.\nIn my case, I'm running some containers with direct port access (bypassing nginx-proxy) but still using letsencrypt certs using this nginx-proxy companion (that's the only option I can think of), so I have to give my container access to the certs, and as the private key is generated with only user level permission, I have to manually run chmod to give permission to it. \nI wonder if I would have to do it again after the renewal...\nMaybe a hook can help me IDK. ",
    "AndreMarthaler": "Hi.\nQuestion:\n1) I use RabbitMQ Server with Webinterface behind nginx proxy with HTTPS Cert generated by Letsencrypt.\n2) I use RabbitMQ AMPS (TCP with SSL) for connecting my application. For that, i use generated letsencrypt cert and private key easily linked into my rabbitmq container.\nNow, RabbitMQ Server can't read private key file, because it's root only owned, nothing group or public read.\nI understand this point of security, but is there any way (configurable or anything like that) to give the possibility to read certs and keys to other user to make it accessible by other applications?\nMight be great, to find a way to make certs and keys sharable to other apps.\n. ",
    "mcnesium": "Looks like it. My experience with nginx is very little, I can only compare it to Apache's 000-default.conf that prevents requests to arbitrary domains/IP-addresses to reach a wrong web service.. ",
    "jeffusan": "I'm having the same issue, and the log from letsencrypt is identical. The connection is always refused with a 400 error.\nHere's an example of my docker-compose:\n```\nversion: '2'\nservices:\nproxy:\n    image: jwilder/nginx-proxy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /opt/srv/certs:/etc/nginx/certs:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    labels:\n      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    volumes:\n      - /opt/srv/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    volumes_from:\n      - proxy\napi:\n    image: image1\n    expose:\n      - 8000\n    environment:\n      - VIRTUAL_HOST=api.domain.com\n      - LETSENCRYPT_HOST=api.domain.com\n      - LETSENCRYPT_EMAIL=google@gmail.com\nstatic:\n    image: image2\n    expose:\n      - 80\n    environment:\n      - VIRTUAL_HOST=static.domain.com,dev.domain.com\n      - LETSENCRYPT_HOST=static.domain.com,dev.domain.com\n      - LETSENCRYPT_EMAIL=google@gmail.com\n```\nI deployed this successfully a little over a month ago.. ",
    "jordangarside": "My issue ended up being that I was hosting from a dorm and 80/443 were blocked externally, but not within the network.\nDefinitely my bad.. ",
    "SFoskett": "I am seeing this same issue with multiple hosts. test1.example.com works fine but test2.example.com never gets a cert so gives Error 500 when using https. Connecting with http://test2.example.com works fine but that pretty much misses the point.. Crazy thing: Mine is working fine now. I didn't change anything that I know of but my subdomains are all getting proper certificates. . ",
    "thomas126": "\nI am seeing this same issue with multiple hosts. test1.example.com works fine but test2.example.com never gets a cert so gives Error 500 when using https. Connecting with http://test2.example.com works fine but that pretty much misses the point.\u201c\n\nHaving the same problem. Looks like certs are not even created. Configurations following soon:\ndocker-compose.yml nginx-proxy:\n`version: '3'\n```yaml\nservices:\n  nginx:\n    image: nginx\n    container_name: nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /opt/nginx-proxy/files/conf.d:/etc/nginx/conf.d\n      - /opt/nginx-proxy/files/vhost.d:/etc/nginx/vhost.d\n      - /opt/nginx-proxy/files/html:/usr/share/nginx/html\n      - /opt/nginx-proxy/files/certs:/etc/nginx/certs:ro\n      - /opt/nginx-proxy/files/htpasswd:/etc/nginx/htpasswd:ro\n    labels:\n      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    restart: always\nnginx-gen:\n    image: jwilder/docker-gen\n    container_name: nginx-gen\n    depends_on:\n      - nginx\n    command: -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes:\n      - /opt/nginx-proxy/files/conf.d:/etc/nginx/conf.d\n      - /opt/nginx-proxy/files/vhost.d:/etc/nginx/vhost.d\n      - /opt/nginx-proxy/files/html:/usr/share/nginx/html\n      - /opt/nginx-proxy/files/certs:/etc/nginx/certs:ro\n      - /opt/nginx-proxy/files/htpasswd:/etc/nginx/htpasswd:ro\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - /opt/nginx-proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro\n    restart: always\nnginx-letsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: nginx-letsencrypt\n    depends_on:\n      - nginx\n      - nginx-gen\n    environment:\n      NGINX_DOCKER_GEN_CONTAINER: \"nginx-gen\"\n      NGINX_PROXY_CONTAINER: \"nginx\"\n    volumes:\n      - /opt/nginx-proxy/files/conf.d:/etc/nginx/conf.d\n      - /opt/nginx-proxy/files/vhost.d:/etc/nginx/vhost.d\n      - /opt/nginx-proxy/files/html:/usr/share/nginx/html\n      - /opt/nginx-proxy/files/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: always\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n```\nThen the Web App:\n```yaml\nversion: '2'\nservices:\n  db-nextcloud:\n    image: mariadb\n    restart: always\n    volumes:\n      - ./db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=*\n      - MYSQL_PASSWORD=***\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\nnextcloud:\n    image: nextcloud\n    environment:\n     VIRTUAL_HOST: cloud.domain.com\n     LETSENCRYPT_HOST: cloud.domain.com\n     LETSENCRYPT_EMAIL: mail@mail.com\n    networks:\n      - nginx-proxy\n    links:\n      - db-nextcloud\n    volumes:\n      - ./nextcloud:/var/www/html\n    restart: always\nnetworks:\n    nginx-proxy:\n      external:\n        name: nginx-proxy\n```\nSo I have another Web app running fine under domain.com. When trying to access cloud.domain.com I can access it via http while trying https I get the following: 500 Internal Server Error\nChecking the certs there weren't created for the subdomain.. So docker compose setup is fine?. Traceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\n    return main_with_exceptions(cli_args)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\n    persist_new_data(args, existing_data)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1457, in persist_new_data\n    client = registered_client(args, existing_data.account_key)\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1395, in registered_client\n    client = acme_client.Client(directory=args.server, key=key, net=net)\n  File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 270, in init\n    net.get(directory).json())\n  File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 1054, in get\n    self._send_request('GET', url, kwargs), content_type=content_type)\n  File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 1003, in _send_request\n    response = self.session.request(method, url, *args, kwargs)\n  File \"/usr/lib/python2.7/site-packages/requests/sessions.py\", line 512, in request\n    resp = self.send(prep, send_kwargs)\n  File \"/usr/lib/python2.7/site-packages/requests/sessions.py\", line 622, in send\n    r = adapter.send(request, kwargs)\n  File \"/usr/lib/python2.7/site-packages/requests/adapters.py\", line 513, in send\n    raise ConnectionError(e, request=request)\nConnectionError: HTTPSConnectionPool(host='acme-v01.api.letsencrypt.org', port=443): Max retries exceeded with url: /directory (Caused by NewConnectionError(': Failed to establish a new connection: [Errno -3] Try again',))\nUnhandled error has happened, traceback is above\n\u2014> okay so i tried curl the url which works fine. Also disabled the firewall. Still the error remains. Any ideas? Also no ip6 DNS set.. any ideas?. I even tried starting fresh completely fresh but the error reoccured.. Any ideas guys? Still the problem remains...\nnginx-letsencrypt    | ConnectionError: HTTPSConnectionPool(host='acme-v01.api.letsencrypt.org', port=443): Max retries exceeded with url: /directory (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f71e5927c90>: Failed to establish a new connection: [Errno -3] Try again',))\nTried to nslookup and curl and works just fine:\nroot@docker:/opt/nginx-proxy# curl https://acme-v01.api.letsencrypt.org/directory\n{\n  \"V4uyi19YJmo\": \"https://community.letsencrypt.org/t/adding-random-entries-to-the-directory/33417\",\n  \"key-change\": \"https://acme-v01.api.letsencrypt.org/acme/key-change\",\n  \"meta\": {\n    \"caaIdentities\": [\n      \"letsencrypt.org\"\n    ],\n    \"terms-of-service\": \"https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf\",\n    \"website\": \"https://letsencrypt.org\"\n  },\n  \"new-authz\": \"https://acme-v01.api.letsencrypt.org/acme/new-authz\",\n  \"new-cert\": \"https://acme-v01.api.letsencrypt.org/acme/new-cert\",\n  \"new-reg\": \"https://acme-v01.api.letsencrypt.org/acme/new-reg\",\n  \"revoke-cert\": \"https://acme-v01.api.letsencrypt.org/acme/revoke-cert\". How can I Test it from inside?. Okay so turns out I cannot:\ncurl https://acme-v01.api.letsencrypt.org/directory\ncurl: (6) Could not resolve host: acme-v01.api.letsencrypt.org\nWhy not? I had it running before and it already signed one certificate a few weeks ago just fine... I disabled ufw. Is it possible that iptables is misconfigured?. Sorry to lift it up again. I still cannot sort out the error. I even set up a completely fresh installation and it is not working. I checked the default.conf in the conf.d folder and I get a weird setup:\n```\nDOMAIN.com\nupstream DOMAIN.com {\n                                ## Can be connected with \"nginx-proxy\" network\n                        # wordpress\n                        server 172.12.0.3:80;\n                                # Cannot connect to network of this container\n                                server 127.0.0.1 down;\n```\nWhat does that mean? Ive set up a network for Nginx proxy and included every web app...\nJust FYI: I have a Nextcloud container running fine with this proxy setup. Weirdly Wordpress and mariadb seem to make trouble.. ",
    "dridri": "Looks like I'm duplicating existing issues, closing\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/416. ",
    "Yogarine": "@buchdag Sorry, I had missed your earlier comment.\n\nHi. I don't see any network configuration statements in your compose files. If you have multiple compose files and zero additional network configuration, there is no way they'll be in the same docker network.\n\nThe networks are attached manually (actually, scripted outside of the docker-compose files). Any services that run on port :80 would work normally, however when I try to proxy something to a different port it will simply not work.\nYou can also see in the nginx config snippet I posted that someproject_default network is accessible from the nginx-proxy container.. Also, I have since switched to Traefik exclusively so unless someone else shows up with the same issue there is no need to reopen the issue. Just thought I'd reply to explain it better.. ",
    "maxpavlov": "Thank you very much @buchdag. . ",
    "simbelcode": "I have the exact same problem.\nI use the setup in separate containers using dockergen and nginx:stable to proxy a few apache containers. This has worked for me so far and I already retrieved several certificates.\nIt's only for a few days now, that I get the same error @schizophrene has, whenever I try to add a new virtual host.\nThis is my compose file:\n````\nversion: '2'\nservices:\n  nginx:\n    image: nginx:stable\n    container_name: nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /etc/nginx/conf.d\n      - /etc/nginx/vhost.d\n      - /usr/share/nginx/html\n      - /srv/docker-staging/certs:/etc/nginx/certs:ro\n      - /srv/docker-staging/htpasswd:/etc/nginx/htpasswd\ndocker-gen:\n    image: jwilder/docker-gen\n    container_name: docker-gen\n    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n    volumes_from:\n      - nginx\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl\n    depends_on:\n      - nginx\nletsencrypt:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    container_name: letsencrypt\n    volumes_from:\n      - nginx\n    volumes:\n      - /srv/docker-staging/certs:/etc/nginx/certs:rw\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      NGINX_PROXY_CONTAINER: nginx\n      NGINX_DOCKER_GEN_CONTAINER: docker-gen\n    depends_on:\n      - docker-gen\nnetworks:\n  default:\n    external:\n      name: proxy\n````\nThe containers are started this way:\nhttpd:\n        image: httpd:${CONTAINER_HTTPD_VERSION}\n        expose:\n            - \"80\"\n        volumes:\n            - \"${PROJECT_ROOT}:/var/www:cached\"\n        environment:\n            VIRTUAL_HOST: ${VIRTUAL_HOST}\n            LETSENCRYPT_HOST: ${VIRTUAL_HOST}\n        networks:\n            - proxy\n            - default\nAny idea whats causing the problem?. For me it was a firewall problem.\nA coworker created a rule to block all http traffic except from our IP.. ",
    "schizophrene": "Hi guys,\nOS = Linux version 4.17.0-0.bpo.1-amd64 (debian-kernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)) #1 SMP Debian 4.17.8-1~bpo9+1 (2018-07-23)\nDocker version = Docker version 18.06.0-ce, build 0ffa825\nCompanion version = appearly the last, a new pull lets me the version of 08/13\nI did 2 troubleshootings steps, possibly related to my problem : \n- CAA answers : OK\n- dummy file : NOK, 503 Service Temporarily Unavailable, 404 with subdomain in URL \nI noticed that I have again an automatic redirection to HTTPS, even for http://domain.tld (where there is nothing, so I think it's caused by nginx-proxy)\nJSON from container logs : I will send you an email with full logs (I don't know what is important in).\nThank you !. I tried, but without more success (but I did it from my phone).\nI will try tomorrow from my computer.. Ok, so... It works with a complete recreation of these 2 containers, based on \"Basic usage\".\nI'm confused to annoying you with, in fact, no problem !\nThank you @buchdag !\nAnd great for you to, @simbelcode . ",
    "aOjRb6W8Y260s66O": "@buchdag thanks,\nHowever, it does work.\nFirst, I removed all the containers and images and the folder \"/path/\".\nSecond, I run the command as follow:\n\n[root@li1709-210 ~]# docker run -d -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    -v /path/to/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\nUnable to find image 'jwilder/nginx-proxy:latest' locally\nTrying to pull repository docker.io/jwilder/nginx-proxy ...\nlatest: Pulling from docker.io/jwilder/nginx-proxy\nf2aa67a397c4: Pull complete\n3c091c23e29d: Pull complete\n4a99993b8636: Pull complete\n75850836e146: Pull complete\n62836acd3c37: Pull complete\n5d70eba6906f: Pull complete\nfe86498801b9: Pull complete\n8ec6361273ec: Pull complete\n4aa76dcb8305: Pull complete\n921c7f44ab5e: Pull complete\nDigest: sha256:4e6bae63dab0c4d3ebf3bbecbf5cd2700ca99db02e155efaa6e28baa14033bc8\nStatus: Downloaded newer image for docker.io/jwilder/nginx-proxy:latest\n42e0ffb29a84ef67cd7f8801948053676ae1deef882cbd1aa15a63a7034dd819\n[root@li1709-210~]# docker run -d \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volumes-from nginx-proxy \\\n    -v /path/to/certs:/etc/nginx/certs:rw \\\n    jrcs/letsencrypt-nginx-proxy-companion\nUnable to find image 'jrcs/letsencrypt-nginx-proxy-companion:latest' locally\nTrying to pull repository docker.io/jrcs/letsencrypt-nginx-proxy-companion ...\nlatest: Pulling from docker.io/jrcs/letsencrypt-nginx-proxy-companion\n8e3ba11ec2a2: Pull complete\n7dcb73d5f119: Pull complete\n1b4976a67702: Pull complete\n32bac96dff28: Pull complete\n8dba44deea8f: Pull complete\nd00b9caf89e7: Pull complete\nDigest: sha256:4a024004451c5a991f3345dbfb3dddd2c73a87f80d93819d3797ad6c9bb8b2dd\nStatus: Downloaded newer image for docker.io/jrcs/letsencrypt-nginx-proxy-companion:latest\ndffde7166403d80dba8ad5c9590066723d6f9b7c60bc6e508df14a89c9ef3458\n[root@li1709-210~]# docker ps -a\nCONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS                      PORTS                                      NAMES\ndffde7166403        jrcs/letsencrypt-nginx-proxy-companion   \"/bin/bash /app/en...\"   17 seconds ago      Exited (1) 14 seconds ago                                              suspicious_davinci\n42e0ffb29a84        jwilder/nginx-proxy                      \"/app/docker-entry...\"   58 seconds ago      Up 57 seconds               0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   nginx-proxy\n[root@li1709-210 ~]#\n\nas you see, the second container Exited again.\nThen, remove containers again, I try to run the first command without \"-d\", as follow:\n\n[root@li1709-210 ~]# docker run -p 80:80 -p 443:443 \\\n    --name nginx-proxy \\\n    -v /path/to/certs:/etc/nginx/certs:ro \\\n    -v /etc/nginx/vhost.d \\\n    -v /usr/share/nginx/html \\\n    -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n    --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n    jwilder/nginx-proxy\nWARNING: /etc/nginx/dhparam/dhparam.pem was not found. A pre-generated dhparam.pem will be used for now while a new one\nis being generated in the background.  Once the new dhparam.pem is in place, nginx will be reloaded.\nforego     | starting dockergen.1 on port 5000\nforego     | starting nginx.1 on port 5100\ndockergen.1 | 2018/08/15 11:54:25 Generated '/etc/nginx/conf.d/default.conf' from 1 containers\ndockergen.1 | 2018/08/15 11:54:25 Watching docker events\ndockergen.1 | 2018/08/15 11:54:25 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification 'nginx -s reload'\n2018/08/15 11:55:26 [notice] 39#39: signal process started\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nThis is going to take a long time\ndhparam generation complete, reloading nginx\n\nIT seems like that the command can't be finished. It may be something wrong with the first container lets the second container exited, is that right?\nIs there anything else I can try? by the way, I once to run these two commands successfully months ago in the same server with the same system.. @buchdag thanks again, it works by following the basic usage, named volume.. ",
    "K-MTG": "Here is my docker-compose - I am also using ports 8282 for HTTP and 30443 for HTTPS (currently using OS X server on 80 and 443):\n```\nversion: '3'\nservices:\n  db:\n    image: mariadb\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    restart: always\n    volumes:\n      - db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=passowrd\n    env_file:\n      - db.env\nredis:\n    image: redis\n    restart: always\napp:\n    build: ./app\n    restart: always\n    volumes:\n      - nextcloud:/var/www/html\n    environment:\n      - VIRTUAL_HOST=nc.example.com\n      - LETSENCRYPT_HOST=nc.example.com\n      - LETSENCRYPT_EMAIL=me@example.com\n      - MYSQL_HOST=db\n    env_file:\n      - db.env\n    depends_on:\n      - db\n      - redis\n    networks:\n      - proxy-tier\n      - default\ncron:\n    build: ./app\n    restart: always\n    volumes:\n      - nextcloud:/var/www/html\n    entrypoint: /cron.sh\n    depends_on:\n      - db\n      - redis\nproxy:\n    build: ./proxy\n    restart: always\n    ports:\n      - 8282:80\n      - 30443:443\n    labels:\n      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: \"true\"\n    volumes:\n      - certs:/etc/nginx/certs:ro\n      - vhost.d:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n    networks:\n      - proxy-tier\nletsencrypt-companion:\n    image: jrcs/letsencrypt-nginx-proxy-companion\n    restart: always\n    volumes:\n      - certs:/etc/nginx/certs\n      - vhost.d:/etc/nginx/vhost.d\n      - html:/usr/share/nginx/html\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    networks:\n      - proxy-tier\n    depends_on:\n      - proxy\nvolumes:\n  db:\n  nextcloud:\n  certs:\n  vhost.d:\n  html:\nnetworks:\n  proxy-tier:\n```\nHere is what I get when I run the compose. \n\n. Hi, is it possible I can modify something or is there another (docker-compose) setup I can use to get this working. I heard about virtual ports...but not sure how to use them or what they do. I am basically using this config with the ports changed: \nhttps://github.com/nextcloud/docker/tree/master/.examples/docker-compose/with-nginx-proxy/mariadb-cron-redis/apache\nThanks. Thanks for the info. Do you know of any clients that will allow me to do this? I am fairly new to docker and nextcloud so I am not sure. \nAre they any major issues of not using SSL? I should be fine as long as I only connect on a secured connection right?\nAlternatively I am using port 80 and 443 since I am running profile manager on OS X server...it also has a web service (apache) built in and I can have the base URL forward to the ports. . ",
    "AlexCloudDev": "Thank you for your help.\nI solved the problem. It was a bad configuration at my domain zonefile. \nBut thx to you i know now that i need all domains in both variables.\nSorry, my fault.. ",
    "Turmer": "No I have not - was hoping to find the image. Managed to find the lmdcrash/i386-certbot and cobble together some autorenewal functionality with cron, but would love to experience the power of docker-letsencrypt-nginx-proxy-companion.\nIf there is no image for i386 architecture, any pointers to a guide/tutorial on building  docker-letsencrypt-nginx-proxy-companion on i386 host would be much appreciated.. Thanks!\nThe last command ends with error:\nSending build context to Docker daemon 44.03 kB\nStep 1/15 : FROM golang:1.10-alpine AS go-builder\nError parsing reference: \"golang:1.10-alpine AS go-builder\" is not a valid repository/tag: invalid reference format\nJust in case, my 32-bit host is Ubuntu 16.04 box with Docker version 17.03.2-ce, build f5ec1e2. Any suggestions how to upgrade my Docker to 17.05? The one I have seems to be the latest version for 32-bit Ubuntu I was able to find.. Thanks much for your help - it built successfully! I am going to play with the image and report back.\nI am stuck with this archaic i386 box for now, but planning to phase it out as soon as circumstances allow.. Happy to report that container based on the locally built image starts and stays up. It will take some time to test the functionality. BTW, could you please recommend some generic test to ensure that docker-letsencrypt-nginx-proxy-companion container works as intended?. Thanks much for your help!\nI did not - this is my next stumbling block. Tried building nginx-proxy locally with docker-gen-linux-i386, which went through successfully, but does not run because it needs i386 forego binary. Do you by any chance know where I can find either the i386 image of nginx-proxy or i386 binary of forego?. Thanks, any help with this is much appreciated.. Thanks a lot! It builds successfully and both nginx-proxy and docker-letsencrypt-nginx-proxy-companion containers are up and running. No more architecture-related error messages. Quick poking through logs indicates that everything seems to be normal with both containers. Will try the basic usage example and the forced renewal as suggested and report the results. . Tested both the basic usage example and the forced renewal script along with certificates status - everything seems to work as intended. Thanks again for your help! \nAlthough it is not directly related to the original topic, now running into elasticsearch for which there is no supported i386 version.  Any recommendation where I can find i386 elasticsearch or whether it is possible to build one locally?. ",
    "ankycooper": "I'm looking for this as well, has anyone done this?. ",
    "bplein": "I am interested in this as well. I am using https://github.com/mailcow/mailcow-dockerized behind my own LE-companion proxy. I am sharing the SSL keys generated with the postfix (MTA) and dovecot (IMAP) containers in mailcow via a docker volume. Basically mailcow has 3 components (a web front end, the MTA and the IMAP containers) that need proxying by the same FQDN but on different ports. Since I'm changing out the keys underneath them, I need to restart them.\nIs it possible for me to put the same LE-companion environment variables on all 3 containers, with different port mappings? i.e. 443 -> web:80, SMTP ports to the postfix container, and IMAP ports to the dovecot container? I assumed LE-companion would not want to see the same virtualhost names from 3 containers.. THanks. \nI prefer to have my own independent proxy in front of mailcow and all other containers. It's a more general approach and allows me to customize the proxy and not be concerned that maybe the application (mailu, mailcow, nextcloud, etc.) is going to make a change to the proxy that might break things. . ",
    "Helmi": "from the companion?\n[\n    {\n        \"Id\": \"fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd\",\n        \"Created\": \"2018-09-11T05:32:47.699375032Z\",\n        \"Path\": \"/bin/bash\",\n        \"Args\": [\n            \"/app/entrypoint.sh\",\n            \"/bin/bash\",\n            \"/app/start.sh\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 14287,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2018-09-11T06:19:52.0457971Z\",\n            \"FinishedAt\": \"2018-09-11T06:19:44.973327116Z\"\n        },\n        \"Image\": \"sha256:6bcbf0ae23e87c70e4bd9aa5d459370924d8ea297cb830eed0a558f20a51fb38\",\n        \"ResolvConfPath\": \"/var/lib/docker/containers/fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd/resolv.conf\",\n        \"HostnamePath\": \"/var/lib/docker/containers/fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd/hostname\",\n        \"HostsPath\": \"/var/lib/docker/containers/fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd/hosts\",\n        \"LogPath\": \"/var/lib/docker/containers/fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd/fb3a7a10b532606dff588a2dd83fe7a034c3e71aaba28832decc93b4e2beeddd-json.log\",\n        \"Name\": \"/nginx-proxy-le-ssl\",\n        \"RestartCount\": 0,\n        \"Driver\": \"overlay2\",\n        \"Platform\": \"linux\",\n        \"MountLabel\": \"\",\n        \"ProcessLabel\": \"\",\n        \"AppArmorProfile\": \"docker-default\",\n        \"ExecIDs\": null,\n        \"HostConfig\": {\n            \"Binds\": [\n                \"/var/run/docker.sock:/var/run/docker.sock:ro\",\n                \"nginx-vhost:/etc/nginx/vhost.d\",\n                \"nginx-html:/usr/share/nginx/html\",\n                \"/root/certs:/etc/nginx/certs\"\n            ],\n            \"ContainerIDFile\": \"\",\n            \"LogConfig\": {\n                \"Type\": \"json-file\",\n                \"Config\": {}\n            },\n            \"NetworkMode\": \"bridge\",\n            \"PortBindings\": {},\n            \"RestartPolicy\": {\n                \"Name\": \"no\",\n                \"MaximumRetryCount\": 0\n            },\n            \"AutoRemove\": false,\n            \"VolumeDriver\": \"\",\n            \"VolumesFrom\": null,\n            \"CapAdd\": null,\n            \"CapDrop\": null,\n            \"Dns\": null,\n            \"DnsOptions\": null,\n            \"DnsSearch\": null,\n            \"ExtraHosts\": [],\n            \"GroupAdd\": null,\n            \"IpcMode\": \"shareable\",\n            \"Cgroup\": \"\",\n            \"Links\": null,\n            \"OomScoreAdj\": 0,\n            \"PidMode\": \"\",\n            \"Privileged\": false,\n            \"PublishAllPorts\": false,\n            \"ReadonlyRootfs\": false,\n            \"SecurityOpt\": null,\n            \"UTSMode\": \"\",\n            \"UsernsMode\": \"\",\n            \"ShmSize\": 67108864,\n            \"Runtime\": \"runc\",\n            \"ConsoleSize\": [\n                0,\n                0\n            ],\n            \"Isolation\": \"\",\n            \"CpuShares\": 0,\n            \"Memory\": 0,\n            \"NanoCpus\": 0,\n            \"CgroupParent\": \"\",\n            \"BlkioWeight\": 0,\n            \"BlkioWeightDevice\": null,\n            \"BlkioDeviceReadBps\": null,\n            \"BlkioDeviceWriteBps\": null,\n            \"BlkioDeviceReadIOps\": null,\n            \"BlkioDeviceWriteIOps\": null,\n            \"CpuPeriod\": 0,\n            \"CpuQuota\": 0,\n            \"CpuRealtimePeriod\": 0,\n            \"CpuRealtimeRuntime\": 0,\n            \"CpusetCpus\": \"\",\n            \"CpusetMems\": \"\",\n            \"Devices\": [],\n            \"DeviceCgroupRules\": null,\n            \"DiskQuota\": 0,\n            \"KernelMemory\": 0,\n            \"MemoryReservation\": 0,\n            \"MemorySwap\": 0,\n            \"MemorySwappiness\": null,\n            \"OomKillDisable\": false,\n            \"PidsLimit\": 0,\n            \"Ulimits\": null,\n            \"CpuCount\": 0,\n            \"CpuPercent\": 0,\n            \"IOMaximumIOps\": 0,\n            \"IOMaximumBandwidth\": 0,\n            \"MaskedPaths\": [\n                \"/proc/acpi\",\n                \"/proc/kcore\",\n                \"/proc/keys\",\n                \"/proc/latency_stats\",\n                \"/proc/timer_list\",\n                \"/proc/timer_stats\",\n                \"/proc/sched_debug\",\n                \"/proc/scsi\",\n                \"/sys/firmware\"\n            ],\n            \"ReadonlyPaths\": [\n                \"/proc/asound\",\n                \"/proc/bus\",\n                \"/proc/fs\",\n                \"/proc/irq\",\n                \"/proc/sys\",\n                \"/proc/sysrq-trigger\"\n            ]\n        },\n        \"GraphDriver\": {\n            \"Data\": {\n                \"LowerDir\": \"/var/lib/docker/overlay2/dd842378adb9a0f5a6d8109d4188050c8cf581cb622f4043618e2fca0ddaf28d-init/diff:/var/lib/docker/overlay2/75ff8dec03928ad8c6f1c9337d9bf80529ad8c773990f8ff4e9fb2f2a8dab463/diff:/var/lib/docker/overlay2/023b88815c8eb0e574640a354decf1e51a1862cad11f1876108541f8530f5a8e/diff:/var/lib/docker/overlay2/dd4f2e9008e57756f894a2cea955ff03d4f30fe8ae5b4574abd19d63d786520f/diff:/var/lib/docker/overlay2/f5fe057e9f6acc33fae42ece5c6519902ba03d15f5ebad4d113cf6325f1b3189/diff:/var/lib/docker/overlay2/80efe31540c2ed4849f34fc257fd43c51da4022c41b5300bca3a63c99deb5159/diff:/var/lib/docker/overlay2/9ef0e2e069fb69e16f7715ecd662e20a7ac1194f8f35ed65357c96f67af7a520/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/dd842378adb9a0f5a6d8109d4188050c8cf581cb622f4043618e2fca0ddaf28d/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/dd842378adb9a0f5a6d8109d4188050c8cf581cb622f4043618e2fca0ddaf28d/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/dd842378adb9a0f5a6d8109d4188050c8cf581cb622f4043618e2fca0ddaf28d/work\"\n            },\n            \"Name\": \"overlay2\"\n        },\n        \"Mounts\": [\n            {\n                \"Type\": \"bind\",\n                \"Source\": \"/var/run/docker.sock\",\n                \"Destination\": \"/var/run/docker.sock\",\n                \"Mode\": \"ro\",\n                \"RW\": false,\n                \"Propagation\": \"rprivate\"\n            },\n            {\n                \"Type\": \"volume\",\n                \"Name\": \"nginx-vhost\",\n                \"Source\": \"/var/lib/docker/volumes/nginx-vhost/_data\",\n                \"Destination\": \"/etc/nginx/vhost.d\",\n                \"Driver\": \"local\",\n                \"Mode\": \"z\",\n                \"RW\": true,\n                \"Propagation\": \"\"\n            },\n            {\n                \"Type\": \"volume\",\n                \"Name\": \"nginx-html\",\n                \"Source\": \"/var/lib/docker/volumes/nginx-html/_data\",\n                \"Destination\": \"/usr/share/nginx/html\",\n                \"Driver\": \"local\",\n                \"Mode\": \"z\",\n                \"RW\": true,\n                \"Propagation\": \"\"\n            },\n            {\n                \"Type\": \"bind\",\n                \"Source\": \"/root/certs\",\n                \"Destination\": \"/etc/nginx/certs\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"rprivate\"\n            }\n        ],\n        \"Config\": {\n            \"Hostname\": \"63abaef21058\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"DEBUG=false\",\n                \"DOCKER_HOST=unix:///var/run/docker.sock\",\n                \"NGINX_PROXY_CONTAINER=nginx-proxy\",\n                \"LETSENCRYPT_EMAIL=redacted\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\",\n                \"/app/start.sh\"\n            ],\n            \"ArgsEscaped\": true,\n            \"Image\": \"jrcs/letsencrypt-nginx-proxy-companion:latest\",\n            \"Volumes\": {\n                \"/etc/nginx/certs\": {},\n                \"/etc/nginx/vhost.d\": {},\n                \"/usr/share/nginx/html\": {},\n                \"/var/run/docker.sock\": {}\n            },\n            \"WorkingDir\": \"/app\",\n            \"Entrypoint\": [\n                \"/bin/bash\",\n                \"/app/entrypoint.sh\"\n            ],\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"maintainer\": \"Yves Blusseau <90z7oey02@sneakemail.com> (@blusseau)\"\n            }\n        },\n        \"NetworkSettings\": {\n            \"Bridge\": \"\",\n            \"SandboxID\": \"2bbaabcd5013cd5dff807299d0a48ad6053d3cd4208b53c51b39fd0754db5c8d\",\n            \"HairpinMode\": false,\n            \"LinkLocalIPv6Address\": \"\",\n            \"LinkLocalIPv6PrefixLen\": 0,\n            \"Ports\": {},\n            \"SandboxKey\": \"/var/run/docker/netns/2bbaabcd5013\",\n            \"SecondaryIPAddresses\": null,\n            \"SecondaryIPv6Addresses\": null,\n            \"EndpointID\": \"4306daf18237214522193f20d189e6ee4a6e34172aa4781581dc1bdfcf18a8ed\",\n            \"Gateway\": \"172.17.0.1\",\n            \"GlobalIPv6Address\": \"\",\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"172.17.0.3\",\n            \"IPPrefixLen\": 16,\n            \"IPv6Gateway\": \"\",\n            \"MacAddress\": \"02:42:ac:11:00:03\",\n            \"Networks\": {\n                \"bridge\": {\n                    \"IPAMConfig\": {},\n                    \"Links\": null,\n                    \"Aliases\": null,\n                    \"NetworkID\": \"d478d520fa2f253bf79eb211f275e4215f3ffd0c889ad32f931ed08dd8f302a0\",\n                    \"EndpointID\": \"4306daf18237214522193f20d189e6ee4a6e34172aa4781581dc1bdfcf18a8ed\",\n                    \"Gateway\": \"172.17.0.1\",\n                    \"IPAddress\": \"172.17.0.3\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n                    \"MacAddress\": \"02:42:ac:11:00:03\",\n                    \"DriverOpts\": null\n                }\n            }\n        }\n    }\n]. I managed to get it setup with --volumes-from and are still seing the problem of the cert not being created. So it may be a different issue. I'm going to change the title of this issue.. it's not that they fail to create, I think the issue is more that the companion doesn't see the config file changing.\nGenerating a 4096 bit RSA private key,\n...................................................................................................................................++,\n........................................................++,\nwriting new private key to '/etc/nginx/certs/default.key.new',\n-----,\nInfo: a default key and certificate have been created at /etc/nginx/certs/default.key and /etc/nginx/certs/default.crt.,\nInfo: Creating Diffie-Hellman group in the background.,\nA pre-generated Diffie-Hellman group will be used for now while the new one,\nis being created.,\nGenerating DH parameters, 2048 bit long safe prime, generator 2,\nReloading nginx proxy (baee6f86cd0c4b8031940789221b2b4769009e5a669673e6d179e18427e69bc9)...,\n2018/09/11 07:31:15 Generated '/etc/nginx/conf.d/default.conf' from 3 containers,\n2018/09/11 07:31:15 [notice] 63#63: signal process started,\n2018/09/11 07:31:15 Generated '/app/letsencrypt_service_data' from 3 containers,\n2018/09/11 07:31:15 Running '/app/signal_le_service',\n2018/09/11 07:31:15 Watching docker events,\n2018/09/11 07:31:15 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\nSleep for 3600s,\nThis is going to take a long time,\nInfo: Diffie-Hellman group creation complete, reloading nginx.,\nReloading nginx proxy (baee6f86cd0c4b8031940789221b2b4769009e5a669673e6d179e18427e69bc9)...,\n2018/09/11 07:31:50 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification '',\n2018/09/11 07:31:50 [notice] 84#84: signal process started,\n2018/09/11 07:35:08 Received event die for container 92c0171739e8,\n2018/09/11 07:35:08 Received event stop for container 92c0171739e8,\n2018/09/11 07:35:23 Debounce minTimer fired,\n2018/09/11 07:35:23 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\n2018/09/11 07:35:46 Received event start for container 3da1dfa3520f,\n2018/09/11 07:36:01 Debounce minTimer fired,\n2018/09/11 07:36:01 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\n2018/09/11 07:38:25 Received signal: terminated,\n2018/09/11 07:38:25 Received signal: terminated,\nInfo: Custom Diffie-Hellman group found, generation skipped.,\nReloading nginx proxy (baee6f86cd0c4b8031940789221b2b4769009e5a669673e6d179e18427e69bc9)...,\n2018/09/11 07:38:26 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification '',\n2018/09/11 07:38:26 [notice] 111#111: signal process started,\n2018/09/11 07:38:26 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\n2018/09/11 07:38:26 Watching docker events,\n2018/09/11 07:38:26 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\nSleep for 3600s,\n2018/09/11 07:38:41 Received event die for container baee6f86cd0c,\n2018/09/11 07:38:41 Received event stop for container baee6f86cd0c,\n2018/09/11 07:38:41 Received event start for container baee6f86cd0c,\n2018/09/11 07:38:56 Debounce minTimer fired,\n2018/09/11 07:38:56 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service',\nI don't see any hints in the log that there are attempts to create a cert. That's what is confusing me. I've not set it up exactly to the directions in the readme including adding the env var for NGINX_PROXY_CONTAINER which isn't in there and all seems to run just fine and with not visible errors in the log. It's just that the cert doesn't get created.\nIt did create the default crt/key and dhparam.pem though so I assume it's also not a problem with the cert directory not beeing accessible which i thought could be a reason.. sure, sorry for the lack of information from my side:\ndocker run -d -p 80:80 -p 443:443 \\\n  --name nginx-proxy \\\n  -v /root/certs:/etc/nginx/certs:ro \\\n  -v /etc/nginx/vhost.d \\\n  -v /usr/share/nginx/html \\\n  -v /var/run/docker.sock:/tmp/docker.sock:ro \\\n  --name nginx-proxy \\\n  --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy \\\n  jwilder/nginx-proxy\ndocker run -d -v /root/certs:/etc/nginx/certs:rw -v /var/run/docker.sock:/var/run/docker.sock:ro -e NGINX_PROXY_CONTAINER=nginx-proxy --volumes-from nginx-proxy --name nginx-proxy-le-ssl jrcs/letsencrypt-nginx-proxy-companion\ndocker run -d -p 9000:9000 -e \"VIRTUAL_HOST=my.domain.com\" -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\nThat should be it. . got it - thanks for pointing that out. Should have dug deeper in the docs and not only use the quick readme.. Yeah. sorry for not doing that proactively.. ",
    "olkhaouni": "Alright, than this is a topic for the nginx-proxy group. Thanks for the quick response!. ",
    "samara8609": "OS:  Ubutnu 18.04\nDocker:  18.03.1-ce\nUsing full docker compose's\nfresh setup in terms of adding letsencrypt\nattached are the composes.\ndocker-compose-apache.txt\ndocker-compose-nginx.txt\n. i no longer see the 500 error, but i still see those not supported lines, any idea \"what\" is not supported?\n. Sorry i got this fixed, i think it may have been partially due to SAN cert issues.. ",
    "tinco": "Hmm, I thought this project generated the SSL configuration, but that doesn't seem to be the case. Never mind :). ",
    "leokun": "Love that ! Thank you !. ",
    "Tockra": "Ok, thank you. I changed my compose file, so I follow these rule.\nBut my certifcate isn't trusted now.\nHere the new one: \n```\n nextcloud:\n         build: ./build/web\n         restart: always\n         volumes:\n             - ./data/nextcloud/files/:/var/www/html:ro\n         environment:\n             VIRTUAL_HOST: nextcloud.oh12.de,homemedia\n             LETSENCRYPT_HOST: nextcloud.oh12.de\n             LETSENCRYPT_EMAIL: email\n         expose:\n             - \"443\"\n             - \"80\"\n         depends_on:\n             - nextcloud-app\n         networks:\n             - proxy-tier\n             - default\n web:\n     build: ./build/proxy\n     labels:\n         com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: true\n     restart: always\n     ports:\n         - 80:80\n         - 443:443\n     volumes:\n         - ./data/proxy/certs/:/etc/nginx/certs\n         - ./data/proxy/vhost.d/:/etc/nginx/vhost.d\n         - ./data/proxy/html/:/usr/share/nginx/html\n         - /var/run/docker.sock:/tmp/docker.sock:ro\n     networks:\n         - proxy-tier\n\nssl-certer:\n         image: jrcs/letsencrypt-nginx-proxy-companion\n         restart: always\n         volumes:\n             - ./data/proxy/certs/:/etc/nginx/certs\n             - ./data/proxy/vhost.d/:/etc/nginx/vhost.d\n             - ./data/proxy/html/:/usr/share/nginx/html\n             - /var/run/docker.sock:/var/run/docker.sock:ro\n         environment:\n             ACME_CA_URI: https://acme-staging.api.letsencrypt.org/directory\n             NGINX_PROXY_CONTAINER: web\n         networks:\n             - proxy-tier\n         depends_on:\n             - web\n```\nNow the logs of the certer are:\n```\ncerter_1\nssl-certer_1          | Info: Custom Diffie-Hellman group found, generation skipped.\nssl-certer_1          | Reloading nginx proxy (6e5ec0214c8df2e8eecb62bafea3be10441071ae66d8099f432414acb14d32d9)...\nssl-certer_1          | 2018/10/01 09:44:08 Generated '/etc/nginx/conf.d/default.conf' from 5 containers\nssl-certer_1          | 2018/10/01 09:44:08 [notice] 87#87: signal process started\nssl-certer_1          | 2018/10/01 09:44:08 Generated '/app/letsencrypt_service_data' from 5 containers\nssl-certer_1          | 2018/10/01 09:44:08 Running '/app/signal_le_service'\nssl-certer_1          | 2018/10/01 09:44:08 Watching docker events\nssl-certer_1          | 2018/10/01 09:44:08 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nssl-certer_1          | /etc/nginx/certs/_test_nextcloud.oh12.de /app\nssl-certer_1          | Reloading nginx proxy (6e5ec0214c8df2e8eecb62bafea3be10441071ae66d8099f432414acb14d32d9)...\nssl-certer_1          | 2018/10/01 09:44:08 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nssl-certer_1          | 2018/10/01 09:44:08 [notice] 115#115: signal process started\nssl-certer_1          | Creating/renewal nextcloud.oh12.de certificates... (nextcloud.oh12.de)\nssl-certer_1          | 2018-10-01 09:44:09,729:INFO:simp_le:1479: Generating new certificate private key\nssl-certer_1          | 2018-10-01 09:44:15,266:INFO:simp_le:360: Saving key.pem\nssl-certer_1          | 2018-10-01 09:44:15,266:INFO:simp_le:360: Saving chain.pem\nssl-certer_1          | 2018-10-01 09:44:15,266:INFO:simp_le:360: Saving fullchain.pem\nssl-certer_1          | 2018-10-01 09:44:15,266:INFO:simp_le:360: Saving cert.pem\nssl-certer_1          | /app\nssl-certer_1          | Reloading nginx proxy (6e5ec0214c8df2e8eecb62bafea3be10441071ae66d8099f432414acb14d32d9)...\nssl-certer_1          | 2018/10/01 09:44:15 Generated '/etc/nginx/conf.d/default.conf' from 5 containers\nssl-certer_1          | 2018/10/01 09:44:15 [notice] 143#143: signal process started\nssl-certer_1          | Sleep for 3600s\n```\nBut the certificate looks not signed.. ehm yes, but this certer should do it right !? Why it doesn't work !?. I think this container should create certifcates and let them signed by letsencrypt !?\n. You are right. That Tutorial I read have wrong information. ",
    "blackandred": "Hi,\nRight after the letsencrypt container is saying that it is sending a kill\nsignal to apply the configuration, then the docker-gen container exits with\ncode 2 and is not getting up properly.\nI had a lot of problems with it because when I set restart policy to\non-failure or unless-stoped then it not worked and I didn't know why. I'm\nnow trying restart policy \"always\" and it seems that it probably works.\nThanks.\nOn Fri, Oct 5, 2018 at 8:22 AM Nicolas Duchon notifications@github.com\nwrote:\n\nThe LE companion isn't stopping any container. The only signal sent are\nSIGHUP to trigger config reload from nginx or docker-gen. Additionaly the\ndocker-gen container being down won't cut any access as it it not\nresponsible for proxying.\nThe CI test setup doesn't use restart at all and works fine.\nIf you have containers that are stopped as a result of being used with the\nLE companion, there is an issue somewhere.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/448#issuecomment-427258827,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVwEhrc-wsBIcwU-JsJTQZHLgFaLuLlTks5uhvq_gaJpZM4XJiud\n.\n. Hi.\n\nSure.\nLet's assume we have a docker-compose and .env file.\nOn dev machine:\nDOMAIN_SUFFIX=.localhost\nOn prod machine:\nDOMAIN_SUFFIX=\nAnd that configuration:\n```yaml\napp_web_mattermost:\n        image: mattermost/mattermost-prod-web\n        depends_on:\n            - app_mattermost\n        environment:\n            - APP_HOST=app_mattermost\n            - APP_PORT=8000\n        # gateway configuration\n        - VIRTUAL_HOST=mattermost.anarchista.net${DOMAIN_SUFFIX}\n        - VIRTUAL_PORT=80\n\n```\nOn local dev machine I can access it with\nhttps://mattermost.anarchista.net.localhost without any DNS configuration,\ntricky - because it's a subdomain of localhost.\nOn prod machine I can access it by normal host :)\nHave a nice day.\nOn Fri, Oct 5, 2018 at 8:11 AM Nicolas Duchon notifications@github.com\nwrote:\n\nHi. Could you provide a more detailed example ?\nI don't really get what you are doing and if that feature migth benefit\nothers or if it's too specific to you own setup.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/449#issuecomment-427256917,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVwEhte6tlt8Fs_4aNXx6brX1VFCpUL_ks5uhvgRgaJpZM4XJi--\n.\n. Sorry, I though I responded already.\n\n\nYes, I have eg. something.mydomain.org.localhost\nThe SSL certificates are self-generated and it's ok, just the console says I got a ban on letsencrypt servers. On my development machine it could be nothing serious, but when I first time deploy on production server and want to just test the services or when I want to deploy second environment for checking the new version on same IP address then I could be blocked. \n",
    "DrMurx": "\n/etc/nginx/vhost.d and the VHOST_DIR variable in function.sh are not where the acme challenge file are created but the location of the nginx vhost configuration files.\n\nThat's what I meant. My bad.\nBut here's the reasoning why it's a good idea to allow customizing the location of the companion vhost snippets: I use my own configuration template for nginx-proxy, and since I have already some custom configuration for specific hosts in my vhost.d directory, I want the companion to use a dedicated directory for its own snippets.\nIt's always good to have a default configuration which makes things work out-of-the-box, but it's also good to give users the possibility to customize via configuration options.\n. ",
    "ampledata": "@Feelthewind I'm in the same boat with the same errors and an almost identical config. Will post more as I continue to debug.. Multi-docker Elastic Beanstalk.\nMy Dockerrun.aws.json\n```\n{\n  \"AWSEBDockerrunVersion\": 2,\n  \"volumes\": [\n    {\n      \"name\": \"nginx-vhostd\",\n      \"host\": { \"sourcePath\": \"/etc/nginx/vhost.d\" }\n    },\n    {\n      \"name\": \"nginx-html\",\n      \"host\": { \"sourcePath\": \"/usr/share/nginx/html\" }\n    },\n    {\n      \"name\": \"nginx-certs\",\n      \"host\": { \"sourcePath\": \"/home/ec2-user/certs\" }\n    },\n    {\n      \"name\": \"docker-sock\",\n      \"host\": { \"sourcePath\": \"/var/run/docker.sock\" }\n    }\n  ],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"nginx\",\n      \"image\": \"jwilder/nginx-proxy\",\n      \"essential\": true,\n      \"memoryReservation\": 128,\n      \"dockerLabels\": {\n        \"com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy\": \"true\"\n      },\n      \"mountPoints\": [\n        {\n          \"containerPath\": \"/etc/nginx/vhost.d\",\n          \"sourceVolume\": \"nginx-vhostd\"\n        },\n        {\n          \"containerPath\": \"/usr/share/nginx/html\",\n          \"sourceVolume\": \"nginx-html\"\n        },\n        {\n          \"containerPath\": \"/etc/nginx/certs\",\n          \"sourceVolume\": \"nginx-certs\",\n          \"readOnly\": true\n        },\n        {\n          \"containerPath\": \"/tmp/docker.sock\",\n          \"sourceVolume\": \"docker-sock\",\n          \"readOnly\": true\n        }\n      ],\n      \"portMappings\": [\n        { \"containerPort\": 80, \"hostPort\": 80 },\n        { \"containerPort\": 443, \"hostPort\": 443 }\n      ]\n    },\n    {\n      \"name\": \"nginx-letsencrypt\",\n      \"image\": \"jrcs/letsencrypt-nginx-proxy-companion\",\n      \"essential\": true,\n      \"memoryReservation\": 64,\n      \"links\": [ \"nginx\" ],\n      \"mountPoints\": [\n        {\n          \"containerPath\": \"/etc/nginx/certs\",\n          \"sourceVolume\": \"nginx-certs\"\n        },\n        {\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"docker-sock\",\n          \"readOnly\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"traccar\",\n      \"image\": \"openjdk:8-jre-alpine\",\n      \"memory\": 256,\n      \"portMappings\": [\n        { \"hostPort\": 8082, \"containerPort\": 8082 },\n        { \"hostPort\": 5055, \"containerPort\": 5055 }\n      ],\n      \"environment\": [\n        { \"name\": \"VIRTUAL_HOST\", \"value\": \"xxx.xxx.com\" },\n        { \"name\": \"VIRTUAL_PORT\", \"value\": \"8082\" },\n        { \"name\": \"LETSENCRYPT_HOST\", \"value\": \"xxx.xxx.com\" },\n        { \"name\": \"LETSENCRYPT_EMAIL\", \"value\": \"xxx@xxx.com\" }\n      ]\n    }\n  ]\n}\n```\neb deploy error:\n```\n2018-10-26 04:36:34    INFO    Environment update is starting.\n2018-10-26 04:36:49    INFO    Deploying new version to instance(s).\n2018-10-26 04:37:17    ERROR   Failed to start ECS task: arn:aws:ecs:us-west-2:966821920696:task/b8ced724-6a08-420e-8e8c-d533865a8f50 is STOPPED.\n2018-10-26 04:37:17    ERROR   ECS task stopped due to: Task failed to start. (nginx-letsencrypt:\nnginx:\ntraccar: )\n2018-10-26 04:37:25    ERROR   ECS task stopped due to: Task failed to start. (nginx:\ntraccar:\nnginx-letsencrypt: )\n2018-10-26 04:37:25    ERROR   Failed to start ECS task: arn:aws:ecs:us-west-2:966821920696:task/ee88ad37-d611-4f25-8d50-69eda81e6b0e is STOPPED.\n2018-10-26 04:37:28    ERROR   Failed to start ECS task after retrying 2 times.\n2018-10-26 04:37:30    ERROR   [Instance: i-0d2477023b6eea177] Command failed on instance. Return code: 1 Output: .' --severity ERROR\n+ exit 1.\nHook /opt/elasticbeanstalk/hooks/appdeploy/enact/03start-task.sh failed. For more detail, check /var/log/eb-activity.log using console or EB CLI.\n2018-10-26 04:37:30    INFO    Command execution completed on all instances. Summary: [Successful: 0, Failed: 1].\n2018-10-26 04:37:30    ERROR   Unsuccessful command execution on instance id(s) 'i-0d2477023b6eea177'. Aborting the operation.\n2018-10-26 04:37:30    ERROR   Failed to deploy application.\nERROR: ServiceError - Failed to deploy application.\nmake: *** [deploy] Error 4\n```\ntail -100 /var/log/eb-activity.log:\n```\n[2018-10-26T04:37:03.600Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook/02update-credentials.sh] : Starting activity...\n[2018-10-26T04:37:03.824Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook/02update-credentials.sh] : Completed activity.\n[2018-10-26T04:37:03.824Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook/03start-task.sh] : Starting activity...\n[2018-10-26T04:37:29.007Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook/03start-task.sh] : Activity execution failed, because: + . /opt/elasticbeanstalk/hooks/common.sh\n  + RETRY=0\n  + initctl start eb-ecs EB_EVENT_FILE=/tmp/eventsfile20181026-20389-13sqqwv\n  initctl: Job failed to start\n  + '[' -f /etc/elasticbeanstalk/.eb-ecs-start-no-retry ']'\n  + warn 'Failed to start ECS task, retrying...'\n  + echo 'Failed to start ECS task, retrying...'\n  Failed to start ECS task, retrying...\n  + eventHelper.py --msg 'Failed to start ECS task, retrying...' --severity WARN\n  + RETRY=1\n  + sleep 3\n  + '[' 1 -gt 1 ']'\n  + initctl start eb-ecs EB_EVENT_FILE=/tmp/eventsfile20181026-20389-13sqqwv\n  initctl: Job failed to start\n  + '[' -f /etc/elasticbeanstalk/.eb-ecs-start-no-retry ']'\n  + warn 'Failed to start ECS task, retrying...'\n  + echo 'Failed to start ECS task, retrying...'\n  Failed to start ECS task, retrying...\n  + eventHelper.py --msg 'Failed to start ECS task, retrying...' --severity WARN\n  + RETRY=2\n  + sleep 3\n  + '[' 2 -gt 1 ']'\n  + error_exit 'Failed to start ECS task after retrying 2 times.' 1\n  + error 'Failed to start ECS task after retrying 2 times.'\n  + echo 'Failed to start ECS task after retrying 2 times.'\n  Failed to start ECS task after retrying 2 times.\n  + eventHelper.py --msg 'Failed to start ECS task after retrying 2 times.' --severity ERROR\n  + exit 1 (ElasticBeanstalk::ExternalInvocationError)\ncaused by: + . /opt/elasticbeanstalk/hooks/common.sh\n  + RETRY=0\n  + initctl start eb-ecs EB_EVENT_FILE=/tmp/eventsfile20181026-20389-13sqqwv\n  initctl: Job failed to start\n  + '[' -f /etc/elasticbeanstalk/.eb-ecs-start-no-retry ']'\n  + warn 'Failed to start ECS task, retrying...'\n  + echo 'Failed to start ECS task, retrying...'\n  Failed to start ECS task, retrying...\n  + eventHelper.py --msg 'Failed to start ECS task, retrying...' --severity WARN\n  + RETRY=1\n  + sleep 3\n  + '[' 1 -gt 1 ']'\n  + initctl start eb-ecs EB_EVENT_FILE=/tmp/eventsfile20181026-20389-13sqqwv\n  initctl: Job failed to start\n  + '[' -f /etc/elasticbeanstalk/.eb-ecs-start-no-retry ']'\n  + warn 'Failed to start ECS task, retrying...'\n  + echo 'Failed to start ECS task, retrying...'\n  Failed to start ECS task, retrying...\n  + eventHelper.py --msg 'Failed to start ECS task, retrying...' --severity WARN\n  + RETRY=2\n  + sleep 3\n  + '[' 2 -gt 1 ']'\n  + error_exit 'Failed to start ECS task after retrying 2 times.' 1\n  + error 'Failed to start ECS task after retrying 2 times.'\n  + echo 'Failed to start ECS task after retrying 2 times.'\n  Failed to start ECS task after retrying 2 times.\n  + eventHelper.py --msg 'Failed to start ECS task after retrying 2 times.' --severity ERROR\n  + exit 1 (Executor::NonZeroExitStatus)\n[2018-10-26T04:37:29.008Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook/03start-task.sh] : Activity failed.\n[2018-10-26T04:37:29.008Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1/AppDeployEnactHook] : Activity failed.\n[2018-10-26T04:37:29.008Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14/AppDeployStage1] : Activity fa\niled.\n[2018-10-26T04:37:29.008Z] INFO  [20389] - [Application update app-ecdd-181025_213432-stage-181025_213432@14] : Completed activity. Result:\n  Application update - Command CMD-AppDeploy failed\n```\ndocker logs:\nWARNING: /etc/nginx/dhparam/dhparam.pem was not found. A pre-generated dhparam.pem will be used for now while a new one\nis being generated in the background.  Once the new dhparam.pem is in place, nginx will be reloaded.\nforego     | starting dockergen.1 on port 5000\nforego     | starting nginx.1 on port 5100\ndockergen.1 | 2018/10/26 04:37:24 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\ndockergen.1 | 2018/10/26 04:37:24 Running 'nginx -s reload'\ndockergen.1 | 2018/10/26 04:37:24 Error running notify command: nginx -s reload, exit status 1\ndockergen.1 | 2018/10/26 04:37:24 Watching docker events. ",
    "fabioespinosa": "If any of you managed to solve the issue, can you please write how?. ",
    "kevin-lot": "I mean certbot.. ",
    "Flugpanda": "Hi there.\nI tried to migrate my via certbot created certs from my old home server to a new machine. Therefore I performed the above mentioned steps, but my attempts always result in the error listed below.\n16:34:29,720:INFO:simp_le:360: Saving account_key.json,\nTraceback (most recent call last):,\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main,\n    return main_with_exceptions(cli_args),\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions,\n    persist_new_data(args, existing_data),\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1489, in persist_new_data,\n    account_key=client.key, key=None, cert=None, chain=None)),\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1195, in persist_data,\n    plugin.save(new_data),\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 493, in save,\n    key = self.dump_key(data.key),\n  File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 436, in dump_key,\n    return OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip(),\nAttributeError: 'NoneType' object has no attribute 'wrapped',\n,\nUnhandled error has happened, traceback is above\nBasicaly I used the examples of Evert Ramos to setup nginx, nginx-gen, nginx-letsencrypt, mariadb and nextcloud. I just changed the .env files and ket the docker.compose.yml's untouched. Afterwords I copied the certs to the volume of nginx-letsencrypt, so that my setup of my certs on the new machine looks something like this.\n```\n[root@rancher]\u2500[/mnt/zfs/nginx-proxy/data/certs/cloud.mydomain.com]\nls -la\ntotal 19\ndrwxr-xr-x    2 rancher  root             6 Jan 23 16:29 .\ndrwxr-xr-x    3 rancher  root             3 Jan 23 16:27 ..\n-rw-r--r--    1 rancher  root          2033 Jan 18 12:08 cert.pem\n-rw-r--r--    1 rancher  root          1647 Jan 18 12:08 chain.pem\n-rw-r--r--    1 rancher  root          3680 Jan 18 12:08 fullchain.pem\n-rw-r--r--    1 rancher  root          1704 Jan 18 12:08 key.pem\n```\nAfter all, I can't get nginx-letsencrypt to work properly.\nSo please let me know if I missed out on something from your explanation.\nKind regards.. ",
    "jpic": "Sure, this is our exact setup as an ansible tasks file\nWe have an instance of sentry behind it, with again ansible task file\nThis setup is from December 2017, and I have:\n\nupdated nginx containers\nremoved certs for my domain\nrestarted the containers\nit re-did the certs and config, but still no luck\n\nFinally, I get this error when trying to open the url to sentry through python, which requires intermediate certificates from what I've read on internet because it doesn't seem able to use server-wide certificates ?. I have news, it works for me on openssl 1.1.1 Sept 2018 but not 1.0.2p Aug 2018:\n```\nbash-4.4# openssl version       \nOpenSSL 1.0.2p  14 Aug 2018       \nbash-4.4# openssl s_client -showcerts -connect sentry.mrs.beta.gouv.fr:443                                                             \nCONNECTED(00000003)             \ndepth=0 CN = letsencrypt-nginx-proxy-companion                    \nverify error:num=18:self signed certificate                       \nverify return:1                 \ndepth=0 CN = letsencrypt-nginx-proxy-companion                    \nverify return:1                   \n\nCertificate chain               \n 0 s:/CN=letsencrypt-nginx-proxy-companion                        \n   i:/CN=letsencrypt-nginx-proxy-companion                        \n-----BEGIN CERTIFICATE-----     \nMIIE1DCCArwCCQDOVMI6jl30cTANBgkqhkiG9w0BAQsFADAsMSowKAYDVQQDDCFs  \nZXRzZW5jcnlwdC1uZ2lueC1wcm94eS1jb21wYW5pb24wHhcNMTgxMDEwMTcyNjM1  \nWhcNMTkxMDEwMTcyNjM1WjAsMSowKAYDVQQDDCFsZXRzZW5jcnlwdC1uZ2lueC1w  \ncm94eS1jb21wYW5pb24wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCr  \nQsJ7FSyNFjPf3XBmCy+TRCzWnVmD6OxwUkOq75dcPBFcQ7/m7kmZbE/oYoX6rOAh  \nWs2qxthCX2kzxtb79HCd7G7VQEglKO8tQT1HQMXSWghc+ZpufnVEfrGEunJt1GbG  \neNMqNVKnHd2sLtHCxzbJsLRl6jQ0FccFn/5Aeuj7t4nsX6bZDe35wML4rngc0Ymb  \nKRPSO8WAKN7RWtisWZvyetl+KerfH5foJxO2DD1qw9DMAkMy/6WCYMqBVsVj3SvG  \nsTPQ7b5K4lI2w5MVGAgUvUTBuWaX+AXU87UY/5WJR/vuB3xQk3czZMmA/GjBRQSq  \nr4bTVB8LTKjDHTzQEuMQRXiDNcvAdi5ztdl0k8ZLmtE8CPu0csGTI1hX9JBOozrD  \nY0woO3E9kV1pRi6g19Z6l/gRK3Z8JWIg3JsA1618U1CKwHNgl4g6to1XdEfjLQKj  \ndv/ckThGuExJumaGZHrSdW8XdPwntmu6b5uLBAbfFmn7j9Zq4OZgQg+WVUKZsvS4  \nsQQBLKTa2Q/IU4mVkB10c/ickKV59j+Utbf4huw/ouW34WYwAiRwnSfLMqDILTKT  \nGHK6Re9nJtqnByetZ5pw1V5bpnp8SqYqaIvTJ1L3p1YEHyVeKJMDi6dGsnfRD260  \nZhEjmg9F6wXBVqgKl416z0hBtLRyqmn+LKACQAlzFwIDAQABMA0GCSqGSIb3DQEB  \nCwUAA4ICAQBbic0GaRF86pGO3EzSKaXxTXG3EjVwCIOpzoDX4tayGlykMkjFkXSJ  \nK/NdVwTK2w7azwWOKeKfO657bjGxi0OqA5e5EpAPHcY3QDSNF3ahENRCC6URmMU6  \nvwH9Fhkb/VldJCDejc8pJ6m9Toh9rrsxpK+/hgXamPnpks/HYK1p/LXIN/ZD8ro4  \nGb2glbEQ96Gp9dDXSJOI3ZQoFtuPMj/OiwQNYcHsp3Mhq+Qv+aD33f/1lOILktC/  \nW4iDZasRwJVXwa9HvjikMPGz+oFQ+JDxXRWpRovdoS70NVhG8504qtv/Rrx5EYZr  \nKPw0GKb4BnlxIWZ486UTh++cCzJq73wExocXTohe9qLOn26OCKB9jlBJC+12ObCt  \n27vU8qw5ZBq/FydheQJFX8e+HttbnYTRu89Kz/6dEFCgL1Hp4lqthf0Uz5pfyiCS  \nHPk13qRNrh3nJ4E6O2T89wwPPpX3V91j7FY6RcgfhR1DiQIGFpKaQphy7imIihAZ  \n9O9KJZRMcU0RtzFgm9TzoiG3kUOHpAM7KKUgNo1JNXTM1JmPbHwuY0Vn6NBslhS9  \nRROCn/6myKdLRdCtCeB1vqMVeXfkIC3nvvAF+85BKkmWg9XlWqy9WK7Tq5rMWqE+  \nzFgC3vyujuTaohtVL2rxjoseHl2OTOP0Q9vWHEXHuOzb1Oo1bQDYhQ==          \n-----END CERTIFICATE-----       \n---                             \nServer certificate              \nsubject=/CN=letsencrypt-nginx-proxy-companion                     \nissuer=/CN=letsencrypt-nginx-proxy-companion                      \n---                             \nNo client certificate CA names sent                               \nPeer signing digest: SHA512     \nServer Temp Key: ECDH, P-256, 256 bits                            \n---                             \nSSL handshake has read 2008 bytes and written 433 bytes           \n---                             \nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384           \nServer public key is 4096 bit   \nSecure Renegotiation IS supported \nCompression: NONE               \nExpansion: NONE                 \nNo ALPN negotiated              \nSSL-Session:                    \n    Protocol  : TLSv1.2         \n    Cipher    : ECDHE-RSA-AES256-GCM-SHA384                       \n    Session-ID: ADD1A0D21962B8BFE7FD467F1C4B230F636B75CB4F09A21C5EDD80E210E9B84C                                                       \n    Session-ID-ctx:             \n    Master-Key: 7277686D0554143FCF78FD748B06980373963F1982E8BE54D6DC3EA73BE2005E8F3E8FF115CF842ED7B67AACD540EB97                       \n    Key-Arg   : None            \n    PSK identity: None          \n    PSK identity hint: None     \n    SRP username: None          \n    Start Time: 1539796452      \n    Timeout   : 300 (sec)       \n    Verify return code: 18 (self signed certificate)              \n---                             \nbash-4.4# getent hosts sentry.mrs.beta.gouv.fr\n188.165.252.150   prod.mrs.beta.gouv.fr  prod.mrs.beta.gouv.fr sentry.mrs.beta.gouv.fr\nnow on openssl 1.1.1\n17/10 2018 19:06:21 jpic@jpic ~/work/betagouv/inventory  (master)\n$ getent hosts sentry.mrs.beta.gouv.fr\n188.165.252.150 prod.mrs.beta.gouv.fr sentry.mrs.beta.gouv.fr\n17/10 2018 19:06:22 jpic@jpic ~/work/betagouv/inventory  (master)\n$ openssl s_client -showcerts -connect sentry.mrs.beta.gouv.fr:443\nCONNECTED(00000005)\ndepth=2 O = Digital Signature Trust Co., CN = DST Root CA X3\nverify return:1\ndepth=1 C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\nverify return:1\ndepth=0 CN = sentry.mrs.beta.gouv.fr\nverify return:1\n\nCertificate chain\n 0 s:CN = sentry.mrs.beta.gouv.fr\n   i:C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\n-----BEGIN CERTIFICATE-----\nMIIHGTCCBgGgAwIBAgISA80FF3TegANLq186oMcpGYfyMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xODEwMTcxNTU1NTBaFw0x\nOTAxMTUxNTU1NTBaMCIxIDAeBgNVBAMTF3NlbnRyeS5tcnMuYmV0YS5nb3V2LmZy\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3mdB5MIaiQsuSFIpUodU\npAUJz+gDUHsc/ZDngOIaH7KVp7PAvLC2NxWezmPSW+Z5RJXzGTkVVaK/YJPIG6vh\nHO32vZSFGtn/te2GOnOMo3kAdqtoPE6Co7lIe/aN69SRJH/COM4W8tBIQSQeTzX3\nDNTCY/6/YHScmqu12Rrt+BPpaQXrN/4ig6ItOCOaY8//+VWAMXzr9P+Q/PD7bl0T\nVIo6kWynGDHZ73K9MtAAxfkM9tm1gFiIHVaUpxI+3Ff5tlrsdIg3ZLz2PecOKto9\npI/RPxfBjqhjigzyueP5rkrVqFLDB3wQLKjblTSuI9O4iGLFBmG914oZEUT1hjJx\nCQF+OX0ENPhYnN/RjM08QDr9zG5VwSv5AIUm1yeDZN3kyXaWEwaql2ZrTWIF4i2o\nXQL3+tFmawhPwePsz7SI96R2vJ4oxQgniF4p3lA9FlMcUyXAgUjYm6wsxRfJJ6lS\nofZSRHvf7x4v/hj17bkUbpD66KyR/7LZ+Om2pEVbmpElUJ8Di6VerPnvJa/3EK5M\ny+oGi2mNJYHO4su2XmGAqQVjl/xTv0Wo0HSEknx2pUzTKVty9uehLeWNUlLAXeYd\nJz2RbGz4LNUPZmlSvWNUGZ9Hf9yoC3IcO63qQ7EO+YxeuYXDfs9Vqu2IQh1PsYIc\nnDHasy0KoB9rLLULDQyV5TECAwEAAaOCAx8wggMbMA4GA1UdDwEB/wQEAwIFoDAd\nBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNV\nHQ4EFgQUSJszKFyqH3bsTjXpomzNgPvwq2swHwYDVR0jBBgwFoAUqEpqYwR93brm\n0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEEYzBhMC4GCCsGAQUFBzABhiJodHRwOi8v\nb2NzcC5pbnQteDMubGV0c2VuY3J5cHQub3JnMC8GCCsGAQUFBzAChiNodHRwOi8v\nY2VydC5pbnQteDMubGV0c2VuY3J5cHQub3JnLzAiBgNVHREEGzAZghdzZW50cnku\nbXJzLmJldGEuZ291di5mcjCB/gYDVR0gBIH2MIHzMAgGBmeBDAECATCB5gYLKwYB\nBAGC3xMBAQEwgdYwJgYIKwYBBQUHAgEWGmh0dHA6Ly9jcHMubGV0c2VuY3J5cHQu\nb3JnMIGrBggrBgEFBQcCAjCBngyBm1RoaXMgQ2VydGlmaWNhdGUgbWF5IG9ubHkg\nYmUgcmVsaWVkIHVwb24gYnkgUmVseWluZyBQYXJ0aWVzIGFuZCBvbmx5IGluIGFj\nY29yZGFuY2Ugd2l0aCB0aGUgQ2VydGlmaWNhdGUgUG9saWN5IGZvdW5kIGF0IGh0\ndHBzOi8vbGV0c2VuY3J5cHQub3JnL3JlcG9zaXRvcnkvMIIBBAYKKwYBBAHWeQIE\nAgSB9QSB8gDwAHcAdH7agzGtMxCRIZzOJU9CcMK//V5CIAjGNzV55hB7zFYAAAFm\ngvR1ygAABAMASDBGAiEA+qAcA9gRL1qDvychkCo/KfFZiN0WDN130GA/9xCzehAC\nIQC6SMdtNu1TysBl6oBRgZP4BWxF+sIQnGUuHuLhZQdNTQB1ACk8UZZUyDlluqpQ\n/FgH1Ldvv1h6KXLcpMMM9OVFR/R4AAABZoL0d8UAAAQDAEYwRAIgIjHcSVVfkNOA\npZsMoLh23sRe4EYSljRb1So5tmxGxx8CIFCju9tUYThK/Z/8FzC2XjQWeQbD7ODU\nXYp+MAa+X10dMA0GCSqGSIb3DQEBCwUAA4IBAQBZZfk3x3WaZljR67JnC14Kcd4L\nic2FabWEOMWB3OP8pmM+W4KT0CSt44zF91es14nbYcaskzRQqdfUHzXx0x1B6zjV\nsqo2nQhdFQHhhfJzI4y/xh8BMN5mUvvQ9L9XorgYQI2ubwGtFd1wHkbO8CCghv88\nwOpRGwk4vPZIpKJ3n/LcLvK2IySXFojmwmmy3yLXLc5X8DN3c63X02mYYCA3U8iX\nqnjlSdSAc+IzTScKBUbFrCTH1T0Pjr7FVBPsdbS3gTyBRyLgCmapmEYwO9iE36xH\nYwI4zeuYNvL5A+xwdzvZO/bSxmgjNk4BQxEMG1FIp7qkXTo00DDaqOv13TeO\n-----END CERTIFICATE-----\n 1 s:C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\n   i:O = Digital Signature Trust Co., CN = DST Root CA X3\n-----BEGIN CERTIFICATE-----\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\nSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\nGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\nq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\nSMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\nZ8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\na6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\n/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\nCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\nbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\nc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\nVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\nARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\nMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\nY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\nAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\nuM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\nwApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\nX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=CN = sentry.mrs.beta.gouv.fr\nissuer=C = US, O = Let's Encrypt, CN = Let's Encrypt Authority X3\n\nNo client certificate CA names sent\nPeer signing digest: SHA512\nPeer signature type: RSA\nServer Temp Key: ECDH, P-256, 256 bits\n\nSSL handshake has read 3765 bytes and written 451 bytes\nVerification: OK\n\nNew, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-AES128-GCM-SHA256\n    Session-ID: 923BABB6C0259D469EB75592941D96C240C5E4F3457121988537AF0E45575A13\n    Session-ID-ctx: \n    Master-Key: FF66151EF9F6FD43378E841C1720B2016374DEA80165ED68191067F0AECBEF759146C33A5EC46B6DC37E1972987BB558\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1539796000\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n    Extended master secret: no\n\nclosed\n$ openssl version\nOpenSSL 1.1.1  11 Sep 2018\n.\n19:30    alanhuang  : is_null: it would appear that sending the Server Name Indication TLS extension has been \n                      the default in openssl since 1.1.1 \nhttps://github.com/openssl/openssl/commit/481afe2ad1325caf4beb0b9dee89cf69e7825e99#diff-62a6896b0a930b81e6b85be1580819f3R164\n19:31    alanhuang  : and if the SNI extension isn't sent, the server replies with the self-signed cert \n                      (nginx's default_server block is used to process the incoming TLS connection)\n19:31    alanhuang  : at least, I'm assuming it's nginx, but that's not strictly relevant\n```. I think this can close because I find no action to take here. We need to be patient until the internet upgrades :joy:\nThanks a heap for your feedback !\nHave a beautiful day. ",
    "BenKoerber": "Hi buchdag, \nthank you for looking into this and sorry for the delay in my response. \nIf you kindly give me a hint how I can debug this from my end I'll gladly do so and come back to you with my findings (if any ...). \nBest\nBen.. ",
    "desimaniac": "It seems that FILES_UID, FILES_GID, FILES_PERMS, and FOLDERS_PERMS environmental variables have no effect. I suppose these options aren't ready yet. \nRef:\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Persistent-data#ownership--permissions-of-private-keys-and-acme-account-keys\n. Just the standard log before all the certs info. \nInfo: Custom Diffie-Hellman group found, generation skipped.\nReloading nginx proxy (735fda5135b676609d52e57749c6e7879449d3263542a6a99f0183e6ddb5f7be)...\n2018/11/23 08:28:32 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2018/11/23 08:28:32 [notice] 91#91: signal process started\n2018/11/23 08:28:36 Generated '/app/letsencrypt_service_data' from 18 containers\n2018/11/23 08:28:36 Running '/app/signal_le_service'\n2018/11/23 08:28:36 Watching docker events\n2018/11/23 08:28:36 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nServer: Ubuntu 16.04 LTS with 4.18.6 kernel. No SELinux or AppArmor enabled.. I dont see any such info. Even with debug env set to true. \nDo still see this: Debugging tips: -v improves output verbosity. Help is available under --help.. . Removed the containers and images and pulled and rebuilt. \ndocker images:\njrcs/letsencrypt-nginx-proxy-companion   latest              56cc2f664c54        10 hours ago        84.8MB\ndocker inspect:\nsha256:56cc2f664c54a2fb587c21969065ab053c4c95aace43ad0d9a6e195b8a036041\ndocker inspect --format='{{json .Config.Env}}' letsencrypt | jq .\n[\n  \"DEBUG=True\",\n  \"FILES_GID=1000\",\n  \"FILES_UID=1000\",\n  \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n  \"DOCKER_HOST=unix:///var/run/docker.sock\"\n]\n. Ok set debug as true... created a new subdomain: strm.domain.com\nDebug: setting /etc/nginx/certs/strm.domain.com/.companion ownership to 1000:1000.\nDebug: setting /etc/nginx/certs/strm.domain.com/cert.pem ownership to 1000:1000.\nDebug: setting /etc/nginx/certs/strm.domain.com/key.pem ownership to 1000:1000.\nDebug: setting /etc/nginx/certs/strm.domain.com/chain.pem ownership to 1000:1000.\nDebug: setting /etc/nginx/certs/strm.domain.com/fullchain.pem ownership to 1000:1000.\nIt does say that it's changing ownership there in the log... and the folder for it (inside where /etc/nginx/certs/ points to) is owned by 1000, but the symlink files are still owned by root. \n\nInside the folder, the files are owned by 1000 (except the symlink for account_key.json).\n. Yes, I believe so. . Using Ubuntu. I am able to rm fine. I guess that was my only issue: rm ing or tarring up / untarring, etc.  . Tested tarring. Not an issue. So i guess everything is working within parameters \ud83d\ude1b .  \nJust need a minor tweak the the dubug variable to accept any case. \nThank You!. Yeah that's true. Any way the permissions on symlinks can also be set - to avoid confusion from others?. Gotcha. Thx. ",
    "bassail": "Well..\nIt works like a charm now !\nThank you very much, kind sir.\n. ",
    "kaishin": "Thanks! I had failing auth and the response above made me realize that the volumes weren't shared properly.. ",
    "aliceinwire": "@Nottt news on this ?. ",
    "sako0938": "Yep this helped me out a lot! I had a misconfigured domain for a bit so was also hitting rate limits, but this ended up being the true issue.\nThanks. ",
    "89ece6d9e021e": "Thanks for this that you showed me my errors - I will fix them.\nI don't think so that on my server should be any configurations which can disturb in that. \nBelow you can find informations about system and docker & docker-compose.\nMy system is Fedora release 28 (Twenty Eight).\ndocker-compose version 1.20.1, build 5d8c71b\n```\ndocker version\nClient:\n Version:         1.13.1\n API version:     1.26\n Package version: docker-1.13.1-61.git9cb56fd.fc28.x86_64\n Go version:      go1.10.3\n Git commit:      1556cce-unsupported\n Built:           Wed Aug  1 17:21:17 2018\n OS/Arch:         linux/amd64\nServer:\n Version:         1.13.1\n API version:     1.26 (minimum version 1.12)\n Package version: docker-1.13.1-61.git9cb56fd.fc28.x86_64\n Go version:      go1.10.3\n Git commit:      1556cce-unsupported\n Built:           Wed Aug  1 17:21:17 2018\n OS/Arch:         linux/amd64\n Experimental:    false\n```\n\nEDIT:\nI found something what can be related to fedora.\nLink\n\nEDIT2:\nThanks a lot for clue! It was problem with SElinux ( I guess mostly Fedora & Red Hat ).\nLink from first edit solve my problem. Hope it will help somebody in future.\nRepos are not the most current unfortunately :/\nAs something interesting I can say that one of the most current repos have Arch Linux, Manjaro etc. . Thank buchdag for your answer :)\n- Ok, maybe I don't understand something. My docker environment have access to Internet and it's almost reachable from \"outside\" but there I get 503.\nI checked .../nginx/html/.well-known/acme-challenge/ and it is empty. I think it shouldn't be. Am I right?\nIf I provide some more logs ( which? ) to make it easier to understand please let me know what I can paste more. \n\nPS: I found somethink about 503 error. . > Please check https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations\nBelow is my nmap for domain\nStarting Nmap 7.60 ( https://nmap.org ) at 2018-12-13 12:01 CET\nHost is up (0.0069s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n80/tcp   open  http\n443/tcp  open  https\nWhat mean I have open this ports on router.\nOn my server I'm using fedora\ncat /etc/os-release \nNAME=Fedora\nVERSION=\"28 (Server Edition)\"\nSo I start checking firewall-cmd. I added 80 and 443. Reloaded firewall again and...\nfirewall-cmd --list-ports\n80/tcp 443/tcp\nNext I tried with docker run -d -p 80:80 nginx:alpine. Answer is correct, nginx is working fine and answer with welcome page.\nI added DEBUG flag also. Below is output of docker logs nginxLE ( jrcs/letsencrypt-nginx-proxy-companion ). Here is pastebin with log. \n\n\nIn case you don't spot it:\nenvironment:\n      - VIRTUAL_HOST=cv.mydomain.com\n      - LETSENCRYPT_HOST=mydomain.com\nYou are requesting a certificate for mydomain.com but only configuring cv.mydomain.com for proxying. nginx-proxy will have zero knowledge of mydomain.com and requests to this domain will fail, including LE challenge validation.\n\nYeah, I changed that. Now I have:\n- VIRTUAL_HOST=mydomain.com\n- LETSENCRYPT_HOST=mydomain.com\n. It's working! We are able to open page :-) Thank you so much :-) \nbut my connection is still on HTTP. It's not signed by cert. \n\nOk, solved! :-) @buchdag thank you very much Nicolas!. Bump?. Update was enough. Now it's working good!\n\nAnd please don't \"bump\" issues after just two days, this is not a paid for support service.\n\nAbout this, I know that it's not a paid support. I think you are doing here a really cool job and I appreciate that. Thank you!. ",
    "techoutlooks": "same issue here. thanks @desimaniac for tracking down the bug.. ",
    "BastienM": "Hi,\nAs I played around the three versions consecutively I may have picked part of the logs where the stable was being used.\nI cleaned everything (containers, images and volumes) on the host and started the compose once again.\nThe line related to the old version of sim_ple is gone, but the python error still is present.\nnginx-proxy-acme_1_51cdecfb96fc | Generating a 4096 bit RSA private key\nnginx-proxy-acme_1_51cdecfb96fc | .........................................................................................................++++\nnginx-proxy-acme_1_51cdecfb96fc | .....................................................................................................................................................................++++\nnginx-proxy-acme_1_51cdecfb96fc | writing new private key to '/etc/nginx/certs/default.key.new'\nnginx-proxy-acme_1_51cdecfb96fc | -----\nnginx-proxy-acme_1_51cdecfb96fc | Info: a default key and certificate have been created at /etc/nginx/certs/default.key and /etc/nginx/certs/default.crt.\nnginx-proxy-acme_1_51cdecfb96fc | Info: Creating Diffie-Hellman group in the background.\nnginx-proxy-acme_1_51cdecfb96fc | A pre-generated Diffie-Hellman group will be used for now while the new one\nnginx-proxy-acme_1_51cdecfb96fc | is being created.\nnginx-proxy-acme_1_51cdecfb96fc | Generating DH parameters, 2048 bit long safe prime, generator 2\nnginx-proxy-acme_1_51cdecfb96fc | Reloading nginx proxy (b8310f84aa5e3deb630037865c359925fbaf69967e482db8533303f40d2d89fc)...\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 [notice] 71#71: signal process started\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 [alert] 71#71: kill(31, 1) failed (1: Operation not permitted)\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 Generated '/app/letsencrypt_service_data' from 3 containers\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 Running '/app/signal_le_service'\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 Watching docker events\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:24 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\nnginx-proxy-acme_1_51cdecfb96fc | /etc/nginx/certs/sub.domain.tld /app\nnginx-proxy-acme_1_51cdecfb96fc | Reloading nginx proxy (b8310f84aa5e3deb630037865c359925fbaf69967e482db8533303f40d2d89fc)...\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:25 Generated '/etc/nginx/conf.d/default.conf' from 3 containers\nnginx-proxy-acme_1_51cdecfb96fc | 2018/11/24 12:56:25 [notice] 93#93: signal process started\nnginx-proxy-acme_1_51cdecfb96fc | Creating/renewal sub.domain.tld certificates... (sub.domain.tld)\nnginx-proxy-acme_1_51cdecfb96fc | 2018-11-24 12:56:27,319:INFO:simp_le:1382: Generating new account key\nnginx-proxy-acme_1_51cdecfb96fc | Traceback (most recent call last):\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\nnginx-proxy-acme_1_51cdecfb96fc |     return main_with_exceptions(cli_args)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\nnginx-proxy-acme_1_51cdecfb96fc |     persist_new_data(args, existing_data)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1457, in persist_new_data\nnginx-proxy-acme_1_51cdecfb96fc |     client = registered_client(args, existing_data.account_key)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1395, in registered_client\nnginx-proxy-acme_1_51cdecfb96fc |     client = acme_client.Client(directory=args.server, key=key, net=net)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 270, in __init__\nnginx-proxy-acme_1_51cdecfb96fc |     net.get(directory).json())\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 1054, in get\nnginx-proxy-acme_1_51cdecfb96fc |     self._send_request('GET', url, **kwargs), content_type=content_type)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/acme/client.py\", line 1003, in _send_request\nnginx-proxy-acme_1_51cdecfb96fc |     response = self.session.request(method, url, *args, **kwargs)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/requests/sessions.py\", line 512, in request\nnginx-proxy-acme_1_51cdecfb96fc |     resp = self.send(prep, **send_kwargs)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/requests/sessions.py\", line 622, in send\nnginx-proxy-acme_1_51cdecfb96fc |     r = adapter.send(request, **kwargs)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/requests/adapters.py\", line 445, in send\nnginx-proxy-acme_1_51cdecfb96fc |     timeout=timeout\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/connectionpool.py\", line 600, in urlopen\nnginx-proxy-acme_1_51cdecfb96fc |     chunked=chunked)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/connectionpool.py\", line 343, in _make_request\nnginx-proxy-acme_1_51cdecfb96fc |     self._validate_conn(conn)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/connectionpool.py\", line 849, in _validate_conn\nnginx-proxy-acme_1_51cdecfb96fc |     conn.connect()\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/connection.py\", line 344, in connect\nnginx-proxy-acme_1_51cdecfb96fc |     cert_reqs=resolve_cert_reqs(self.cert_reqs),\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/util/ssl_.py\", line 297, in create_urllib3_context\nnginx-proxy-acme_1_51cdecfb96fc |     context.verify_mode = cert_reqs\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/urllib3/contrib/pyopenssl.py\", line 403, in verify_mode\nnginx-proxy-acme_1_51cdecfb96fc |     _verify_callback\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/OpenSSL/SSL.py\", line 1108, in set_verify\nnginx-proxy-acme_1_51cdecfb96fc |     self._verify_helper = _VerifyHelper(callback)\nnginx-proxy-acme_1_51cdecfb96fc |   File \"/usr/lib/python2.7/site-packages/OpenSSL/SSL.py\", line 333, in __init__\nnginx-proxy-acme_1_51cdecfb96fc |     \"int (*)(int, X509_STORE_CTX *)\", wrapper)\nnginx-proxy-acme_1_51cdecfb96fc | SystemError: error return without exception set\nnginx-proxy-acme_1_51cdecfb96fc |\nnginx-proxy-acme_1_51cdecfb96fc | Unhandled error has happened, traceback is above\nnginx-proxy-acme_1_51cdecfb96fc |\nnginx-proxy-acme_1_51cdecfb96fc | Debugging tips: -v improves output verbosity. Help is available under --help.\nnginx-proxy-acme_1_51cdecfb96fc | /app\nnginx-proxy-acme_1_51cdecfb96fc | Sleep for 3600s. Thanks for having a loot at it.\nI was not sure whether it was related to the companion or the python modules as removing the LETSENCRYPT_* flags (on the exposed container) does make the error go away.\nWe can close this then.. I didn't thought about that, but that is clearly the case indeed.\nIt is strange though that I am the only one having issues, which are likely alpine related, with the python libraries when the image is based on alpine itself ...\nThe host is running Alpine itself has well, that may be correlated.\nWill try with Debian or CentOS instead, or maybe switch to a non-harden kernel.. Confirmed working correctly with Debian 9.\nWe can close this issue.\n(Will try looking at the why's later). ",
    "cmazzw": "\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki/Invalid-authorizations#your-domain-name-does-not-resolve-to-your-host-ipv4-andor-ipv6\n\nhi ,thank you!\nbut this simp_le:1446 is not sovle.\n1\u3001docker run -d -p 80:80 -p 443:443 --name nginx-proxy -v /path/to/certs:/etc/nginx/certs:ro -v /etc/nginx/vhost.d -v /usr/share/nginx/html -v /var/run/docker.sock:/tmp/docker.sock:ro --label com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy jwilder/nginx-proxy\n2\u3001docker run -d  -v /path/to/certs:/etc/nginx/certs:rw  -v /var/run/docker.sock:/var/run/docker.sock:ro     -e DEBUG=true  --volumes-from nginx-proxy     jrcs/letsencrypt-nginx-proxy-companion\n3\u3001docker run -d -e \"VIRTUAL_HOST=cloud.hljmdc.org\" -e \"LETSENCRYPT_HOST=cloud.hljmdc.org\" -e \"LETSENCRYPT_EMAIL=zzw.0111@qq.com\" wordpress:4.7-apache\nbut logs show below:\n2018-12-01 03:17:51,688:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/QlPY8J0xNELNQfHAZD3XS_ca1ExNnkrwst0H2Gq_n48\n2018-12-01 03:17:51,692:INFO:simp_le:360: Saving account_key.json\n2018-12-01 03:17:51,693:DEBUG:simp_le:1165: Removing validation file at /usr/share/nginx/html/.well-known/acme-challenge/Rs7AbSTB87_iPlAYlUTW8T7p8A5nI0_T2GI0mDd3MtM\nChallenge validation has failed, see error log.\nmy domain DNS is private ,is that allow?. > \u4e0d\uff0c\u8fd9\u4e0d\u9002\u7528\u4e8e\u4f7f\u7528\u7684\u9a8c\u8bc1\u65b9\u6cd5simp_le\u3002\u60a8\u8981\u9881\u53d1\u8bc1\u4e66\u7684\u57df\u5fc5\u987b\u662f\u516c\u5f00\u4e14\u53ef\u8bbf\u95ee\u7684\u3002\nI see!thank you!. ",
    "benjamin-smith": "Apologies for not circling back - yes this was resolved in the fixes as you mentioned. Thank you!. ",
    "h44z": "I get the same error here using the evertramos/docker-compose-letsencrypt-nginx-proxy-companion image.. I solved the issue on my side, the problem was, that the container was not reachable via IPv6, so the validation timed out. It seems that the timeout response does not get parsed correctly, thats why we get this error.. ",
    "offbeatful": "@buchdag is v1.9.1 latest? I tried many couple of versions - still the same issue.\nA side note: changing to staging didn't solve the problem. But when I restarted docker host - everything starts magically work. I assume that there are some connectivity issues and was not properly handled by the lib.. @buchdag Please find my Dockerfile below\n```Dockerfile\nFROM jwilder/docker-gen\nADD nginx.tmpl /etc/docker-gen/templates/nginx.tmpl\n```\nI noticed that I had some intermittent issues with my docker/network setup. That causes me to restart docker quite often. I can confirm all issues disappear after restart. However it is not clear what is the error.. ",
    "dr4y": "I get the same error for Tag latest as well as 1.9.1.\n```\ninfra-nginx-proxy-letsencrypt | Reloading nginx (using separate container 9fa619829a95ccee005b2a1d5125b913ee719ac7cb3948b5ee395f9cee96ec2a)...\ninfra-nginx-proxy-letsencrypt | Creating/renewal XXXX certificates... (XXXX)\ninfra-nginx-proxy-gen | 2019/01/07 01:23:25 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\ninfra-nginx-proxy-letsencrypt | 2019-01-07 01:23:26,046:INFO:simp_le:1382: Generating new account key\ninfra-nginx-proxy-letsencrypt | 2019-01-07 01:23:26,885:INFO:simp_le:1407: By using simp_le, you implicitly agree to the CA's terms of service: https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf\ninfra-nginx-proxy-letsencrypt | 2019-01-07 01:23:27,556:INFO:simp_le:1479: Generating new certificate private key\ninfra-nginx-proxy-letsencrypt | Traceback (most recent call last):\ninfra-nginx-proxy-letsencrypt |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\ninfra-nginx-proxy-letsencrypt |     return main_with_exceptions(cli_args)\ninfra-nginx-proxy-letsencrypt |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\ninfra-nginx-proxy-letsencrypt |     persist_new_data(args, existing_data)\ninfra-nginx-proxy-letsencrypt |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1483, in persist_new_data\ninfra-nginx-proxy-letsencrypt |     certr = get_certr(client, csr, authorizations)\ninfra-nginx-proxy-letsencrypt |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1425, in get_certr\ninfra-nginx-proxy-letsencrypt |     ', '.join(authzr.uri for , authzr in error.exhausted)\ninfra-nginx-proxy-letsencrypt |   File \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1425, in \ninfra-nginx-proxy-letsencrypt |     ', '.join(authzr.uri for , authzr in error.exhausted)\ninfra-nginx-proxy-letsencrypt | ValueError: too many values to unpack\ninfra-nginx-proxy-letsencrypt |\ninfra-nginx-proxy-letsencrypt | Unhandled error has happened, traceback is above\ninfra-nginx-proxy-letsencrypt |\ninfra-nginx-proxy-letsencrypt | Debugging tips: -v improves output verbosity. Help is available under --help.\ninfra-nginx-proxy-letsencrypt | /app\ninfra-nginx-proxy-letsencrypt | Reloading nginx docker-gen (using separate container infra-nginx-proxy-gen)...\ninfra-nginx-proxy-gen | 2019/01/07 01:24:05 Received signal: hangup\ninfra-nginx-proxy-gen | 2019/01/07 01:24:05 Received signal: hangup\ninfra-nginx-proxy-letsencrypt | Reloading nginx (using separate container 9fa619829a95ccee005b2a1d5125b913ee719ac7cb3948b5ee395f9cee96ec2a)...\ninfra-nginx-proxy-letsencrypt | Sleep for 3600s\ninfra-nginx-proxy-gen | 2019/01/07 01:24:05 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\nnginx                | 2019/01/07 01:24:28 [error] 9#9: *1 upstream timed out (110: Connection timed out) while connecting to upstream, client: 172.22.0.1, server: XXXX, request: \"GET /.well-known/acme-challenge/3I12W_ARcnoArfyAVSpnBD8rjh61fGsOG5fqMxJ4NFA HTTP/1.1\", upstream: \"http://172.21.0.2:80/.well-known/acme-challenge/3I12W_ARcnoArfyAVSpnBD8rjh61fGsOG5fqMxJ4NFA\", host: \"XXXX\"\nnginx                | 172.22.0.1 - - [07/Jan/2019:01:24:28 +0000] \"GET /.well-known/acme-challenge/3I12W_ARcnoArfyAVSpnBD8rjh61fGsOG5fqMxJ4NFA HTTP/1.1\" 504 167 \"-\" \"Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)\"\n```. Yes but I do not have any :ro despite of the docker socket similar to @offbeatful up there. \nEdit: If I use the combined image (as techhazard did) works for me but is not what I want to have in a productive environment :(. ",
    "biwerr": "Found the issue, volumes between proxy an companion where not linked. After rebuilding companion everything works. ",
    "skiedude": "Also of note, I'm attempting to setup https://github.com/algolia/sup3rS3cretMes5age which attempts to self congiure nginx-proxy-companion.. ",
    "VincentSaelzler": "No worries on the pingbacks, and thanks for updating.\nI like the new, more organized documentation structure!. ",
    "berkutta": "seems to work fine, so can be merged and issue closed imho, thanks!. ",
    "brandex007": "Hi, yes I have. Everything seems to look good. And like I said I was able\nto get letsencrypt working on the host before, so I believe the problem is\nthe docker container. Any ideas?\nThe above error occurs when I bash into the container and try the renew\nfunction.\nOn Thu, Jan 17, 2019, 7:09 AM Nicolas Duchon <notifications@github.com\nwrote:\n\nHave you follwed the troubleshooting steps in\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Invalid-authorizations.md\n?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/issues/501#issuecomment-455150197,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AXar3qboUnmouU7EFW1ICimQjlJwXxaiks5vEGfugaJpZM4aE61P\n.\n. Hi, \n\nHere is the code (I am bash-ed into the letsencrypt-nginx-proxy-companion container):\n```\n[brandon@bpserver ~]$ docker exec -it 52948f1a5e79 /bin/bash\nbash-4.4# ls\ncert_status      entrypoint.sh  functions.sh     letsencrypt_service_data   nginx_location.conf  start.sh\ndhparam.pem.default  force_renew    letsencrypt_service  letsencrypt_service_data.tmpl  signal_le_service\nbash-4.4# ./letsencrypt_service \n/etc/nginx/certs/bakeitcookbook.com /app\nCreating/renewal bakeitcookbook.com certificates... (bakeitcookbook.com www.bakeitcookbook.com)\n2019-01-17 16:33:48,396:INFO:simp_le:1479: Generating new certificate private key\n2019-01-17 16:33:49,353:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/77g3jvJZpqz7eI0JT-4ypRegedvImNnlEW2a91kIX6U\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\n/app\nSleep for 3600s\n```\nThanks,\nBrandon. DNS seems to be working fine, I get no issue when testing on unboundtest.com:\n```\nQuery results for CAA bakeitcookbook.com\nResponse:\n;; opcode: QUERY, status: NOERROR, id: 61130\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n;; QUESTION SECTION:\n;bakeitcookbook.com.    IN   CAA\n;; ANSWER SECTION:\nbakeitcookbook.com. 3600    IN  CAA 0 issue \"letsencrypt.org\"\n----- Unbound logs -----\nJan 17 18:00:12 unbound[5757:0] notice: init module 0: validator\nJan 17 18:00:12 unbound[5757:0] notice: init module 1: iterator\nJan 17 18:00:12 unbound[5757:0] info: start of service (unbound 1.7.3).\nJan 17 18:00:12 unbound[5757:0] info: resolving . DNSKEY IN\nJan 17 18:00:12 unbound[5757:0] info: priming . IN NS\nJan 17 18:00:12 unbound[5757:0] info: response for . NS IN\nJan 17 18:00:12 unbound[5757:0] info: reply from <.> 2001:500:200::b#53\nJan 17 18:00:12 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:12 unbound[5757:0] info: priming successful for . NS IN\nJan 17 18:00:12 unbound[5757:0] info: response for . DNSKEY IN\nJan 17 18:00:12 unbound[5757:0] info: reply from <.> 192.5.5.241#53\nJan 17 18:00:12 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:12 unbound[5757:0] info: prime trust anchor\nJan 17 18:00:12 unbound[5757:0] info: generate keytag query _ta-4f66. NULL IN\nJan 17 18:00:12 unbound[5757:0] info: resolving . DNSKEY IN\nJan 17 18:00:12 unbound[5757:0] info: validate keys with anchor(DS): sec_status_secure\nJan 17 18:00:12 unbound[5757:0] info: Successfully primed trust anchor . DNSKEY IN\nJan 17 18:00:12 unbound[5757:0] info: resolving _ta-4f66. NULL IN\nJan 17 18:00:12 unbound[5757:0] info: validate(positive): sec_status_secure\nJan 17 18:00:12 unbound[5757:0] info: validation success . DNSKEY IN\nJan 17 18:00:12 unbound[5757:0] info: response for _ta-4f66. NULL IN\nJan 17 18:00:12 unbound[5757:0] info: reply from <.> 2001:503:c27::2:30#53\nJan 17 18:00:12 unbound[5757:0] info: query response was NXDOMAIN ANSWER\nJan 17 18:00:13 unbound[5757:0] info: 127.0.0.1 bakeitcookbook.com. CAA IN\nJan 17 18:00:13 unbound[5757:0] info: resolving bakeitcookbook.com. CAA IN\nJan 17 18:00:13 unbound[5757:0] info: priming . IN NS\nJan 17 18:00:14 unbound[5757:0] info: response for . NS IN\nJan 17 18:00:14 unbound[5757:0] info: reply from <.> 2001:7fd::1#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: priming successful for . NS IN\nJan 17 18:00:14 unbound[5757:0] info: response for bakeitcookbook.com. CAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from <.> 192.203.230.10#53\nJan 17 18:00:14 unbound[5757:0] info: query response was REFERRAL\nJan 17 18:00:14 unbound[5757:0] info: response for bakeitcookbook.com. CAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:500:856e::30#53\nJan 17 18:00:14 unbound[5757:0] info: query response was REFERRAL\nJan 17 18:00:14 unbound[5757:0] info: resolving ns-cloud-c4.googledomains.com. AAAA IN\nJan 17 18:00:14 unbound[5757:0] info: resolving ns-cloud-c4.googledomains.com. A IN\nJan 17 18:00:14 unbound[5757:0] info: response for ns-cloud-c4.googledomains.com. A IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  192.5.6.30#53\nJan 17 18:00:14 unbound[5757:0] info: query response was REFERRAL\nJan 17 18:00:14 unbound[5757:0] info: response for ns-cloud-c4.googledomains.com. A IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:4860:4802:34::a#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: response for ns-cloud-c4.googledomains.com. AAAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  192.35.51.30#53\nJan 17 18:00:14 unbound[5757:0] info: query response was REFERRAL\nJan 17 18:00:14 unbound[5757:0] info: response for bakeitcookbook.com. CAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:4860:4802:32::6c#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: prime trust anchor\nJan 17 18:00:14 unbound[5757:0] info: generate keytag query _ta-4f66. NULL IN\nJan 17 18:00:14 unbound[5757:0] info: resolving . DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: resolving _ta-4f66. NULL IN\nJan 17 18:00:14 unbound[5757:0] info: response for ns-cloud-c4.googledomains.com. AAAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  216.239.38.10#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: response for . DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: reply from <.> 192.33.4.12#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: validate keys with anchor(DS): sec_status_secure\nJan 17 18:00:14 unbound[5757:0] info: Successfully primed trust anchor . DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: validated DS com. DS IN\nJan 17 18:00:14 unbound[5757:0] info: resolving com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: response for ns-cloud-c4.googledomains.com. AAAA IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:4860:4802:34::a#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: response for com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:502:7094::30#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: validated DNSKEY com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: validated DS bakeitcookbook.com. DS IN\nJan 17 18:00:14 unbound[5757:0] info: resolving bakeitcookbook.com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: response for _ta-4f66. NULL IN\nJan 17 18:00:14 unbound[5757:0] info: reply from <.> 192.112.36.4#53\nJan 17 18:00:14 unbound[5757:0] info: query response was NXDOMAIN ANSWER\nJan 17 18:00:14 unbound[5757:0] info: response for bakeitcookbook.com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: reply from  2001:4860:4802:36::6c#53\nJan 17 18:00:14 unbound[5757:0] info: query response was ANSWER\nJan 17 18:00:14 unbound[5757:0] info: validated DNSKEY bakeitcookbook.com. DNSKEY IN\nJan 17 18:00:14 unbound[5757:0] info: validate(positive): sec_status_secure\nJan 17 18:00:14 unbound[5757:0] info: validation success bakeitcookbook.com. CAA IN\n```. Yes you are correct. I was able to fix this by updating my CName record. Sorry for the trouble! Thank you.. ",
    "perler": "ok, I have definitely certificates for running containers, that are running out, here on feb 10\n/etc/nginx/certs/subdomain.domain.com/fullchain.pem: OK\nCertificate was issued by Let's Encrypt Authority X3\nCertificate is valid until Feb 10 08:11:16 2019 GMT\nSubject Name:\n- subdomain.domain.com\nCertificate is used by the following domain(s):\n- subdomain.domain.com\n\n. the container throws errors (see below), here the image inspect:\n```\n[\n    {\n        \"Id\": \"sha256:274e964f3005d5a002a8caa518ae5a34421b112bddd907212d7427a87637de95\",\n        \"RepoTags\": [\n            \"jrcs/letsencrypt-nginx-proxy-companion:latest\"\n        ],\n        \"RepoDigests\": [\n            \"jrcs/letsencrypt-nginx-proxy-companion@sha256:409c4da77ba683bcb1e5b60e30176ab337e158fefcd52aa1197483eb5eb3af38\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2018-12-26T14:01:01.45431757Z\",\n        \"Container\": \"0edc01af38ed9b60bd4d2070a4e3668b4651ea8a6129ef9b4986992d070ffb07\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"0edc01af38ed\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"DEBUG=false\",\n                \"DOCKER_HOST=unix:///var/run/docker.sock\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"#(nop) \",\n                \"CMD [\\\"/bin/bash\\\" \\\"/app/start.sh\\\"]\"\n            ],\n            \"ArgsEscaped\": true,\n            \"Image\": \"sha256:bf9042ca9358c248259c233ded9c8054f00a3521f5e727a5e999e50983095d56\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/app\",\n            \"Entrypoint\": [\n                \"/bin/bash\",\n                \"/app/entrypoint.sh\"\n            ],\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"maintainer\": \"Yves Blusseau 90z7oey02@sneakemail.com (@blusseau)\"\n            }\n        },\n        \"DockerVersion\": \"18.03.1-ee-3\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"DEBUG=false\",\n                \"DOCKER_HOST=unix:///var/run/docker.sock\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\",\n                \"/app/start.sh\"\n            ],\n            \"ArgsEscaped\": true,\n            \"Image\": \"sha256:bf9042ca9358c248259c233ded9c8054f00a3521f5e727a5e999e50983095d56\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/app\",\n            \"Entrypoint\": [\n                \"/bin/bash\",\n                \"/app/entrypoint.sh\"\n            ],\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"maintainer\": \"Yves Blusseau 90z7oey02@sneakemail.com (@blusseau)\"\n            }\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 85525482,\n        \"VirtualSize\": 85525482,\n        \"GraphDriver\": {\n            \"Data\": {\n                \"LowerDir\": \"/var/lib/docker/overlay2/0deb0c8a9be7875f6c1953bdbae30bdeab154307280fb010c5159edd29289494/diff:/var/lib/docker/overlay2/896f9c886fa1a3416c1664a3e2943edd5b63119d82ff894a387f2980b0cd992f/diff:/var/lib/docker/overlay2/9a07e798f54cfefdaaaa326c3ed59eee2f0398f3706792f11e2ab5a7e56feffe/diff:/var/lib/docker/overlay2/5b01f0b4f61dd28cfebee18425aedaa1830b95e428b120d74ab8e5b9a9c00d44/diff:/var/lib/docker/overlay2/b1c720dc759b87b28a9e258546e2bbf5a736dc2744d460d7b910b82a22f519c5/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/9cdb9440ae61084d78ab34c8bd573f1184371162888e2dcbc955fcac07093488/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/9cdb9440ae61084d78ab34c8bd573f1184371162888e2dcbc955fcac07093488/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/9cdb9440ae61084d78ab34c8bd573f1184371162888e2dcbc955fcac07093488/work\"\n            },\n            \"Name\": \"overlay2\"\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:7bff100f35cb359a368537bb07829b055fe8e0b1cb01085a3a628ae9c187c7b8\",\n                \"sha256:99480cd1562eddb7cc21fb7b645eaf09f5287a893993c317c20485ad8dc97209\",\n                \"sha256:c4603763853602d2f27b5c21509912ce4876be1ed18532d59598ff0fc193762e\",\n                \"sha256:88026ec711143b5c455b69512c35b1940bd0b979d0ef7a354257cffafe00cdeb\",\n                \"sha256:f1079a7e4faa430c2eadc959c11bed0be12cef9904bce0b6305af0c34d4b558e\",\n                \"sha256:4b5b5f608d8f85bdac720af287c4d7c79c2f7b8041ff1584e06efeb4bdc04ab0\"\n            ]\n        },\n        \"Metadata\": {\n            \"LastTagTime\": \"0001-01-01T00:00:00Z\"\n        }\n    }\n]\n\n/app\n/etc/nginx/certs/subdomain.domain.com /app\nCreating/renewal subdomain.domain.com certificates... (subdomain.domain.com)\n2019-02-04 14:31:32,480:INFO:simp_le:1479: Generating new certificate private key\n2019-02-04 14:31:39,792:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/vYnvdBWg8n5KPw-7X7m2UVlc3kVzQhtqWyK-EPDjgig\nTraceback (most recent call last):\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1584, in main\nreturn main_with_exceptions(cli_args)\n\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1567, in main_with_exceptions\npersist_new_data(args, existing_data)\n\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1489, in persist_new_data\naccount_key=client.key, key=None, cert=None, chain=None))\n\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 1195, in persist_data\nplugin.save(new_data)\n\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 493, in save\nkey = self.dump_key(data.key)\n\nFile \"/usr/lib/python2.7/site-packages/simp_le.py\", line 436, in dump_key\nreturn OpenSSL.crypto.dump_privatekey(self.typ, data.wrapped).strip()\n\nAttributeError: 'NoneType' object has no attribute 'wrapped'\nUnhandled error has happened, traceback is above\nDebugging tips: -v improves output verbosity. Help is available under --help.\n/app\nSleep for 3600s\n```. ok, thanks. I worked the list down and this seems to have been the issue:\n\nyou are using an outdated version of either letsencrypt-nginx-proxy-companion or the nginx.tmpl file (if running a 3 containers setup)\nPull jrcs/letsencrypt-nginx-proxy-companion:latest again and get the latest latest nginx.tmpl.\n\nI pulled the latest image, but had to remove the container and recreate it before it worked. a simple recreate (from portainer) didn't do the trick.. ",
    "ReneCD": "Actually somehow I got over this problem, even though I'm not sure how.   Now I have most of it working to the point I get the page up, but when I enter /media/usb/share/nextcloud/data as my data folder, it comes back with the error \"Error Can't create or write into the data directory /media/usb/share/nextcloud/data\"\nOwnership and permissions should be correct (www-data.www-data and 755). I have a feeling docker might try to create it under /var/lib/docker in spite of me adding NEXTCLOUD_DATA_DIR=/media/usb/share/netcloud/data.  I want my data store out of docker, how do I do that?\n`version: '2'  \nvolumes:\n  nextcloud:\n  data:\n  db:\nservices:\n  nginx-proxy:\n    image: 'jwilder/nginx-proxy'\n    container_name: nginx-proxy\n    ports:\n      - '443:443'\n    volumes:\n      - '/etc/nginx/vhost.d'\n      - '/usr/share/nginx/html'\n      - '/etc/nginx/certs:/etc/nginx/certs:ro' \n      - '/var/run/docker.sock:/tmp/docker.sock:ro'\n  letsencrypt-nginx-proxy:\n    image: 'jrcs/letsencrypt-nginx-proxy-companion'\n    container_name: letsencrypt-nginx-proxy\n    volumes:\n      - '/etc/nginx/certs:/etc/nginx/certs'\n      - '/var/run/docker.sock:/var/run/docker.sock:ro'\n    volumes_from:\n      - nginx-proxy\nmariadb:\n    image: mariadb\n    container_name: mariadb\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    restart: always\n    volumes:\n      - db:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=$rootpassword\n      - MYSQL_PASSWORD=$mysqlpassword\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\nnextcloud:\n    image: nextcloud\n    container_name: nextcloud \n    ports:\n      - 8080:80\n    links:\n      - mariadb\n    volumes:\n      - nextcloud:/media/usb/share/nextcloud\n      - /data:/media/usb/share/nextcloud/data\n    environment:\n      - VIRTUAL_HOST=$myhost\n      - LETSENCRYPT_HOST=$myhost\n      - LETSENCRYPT_EMAIL=$myemail \n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=$adminpass\n      - NEXTCLOUD_DATA_DIR=/media/usb/share/netcloud/data\n    restart: always\nnetworks:\n  default:\n    external:\n      name: nginx-net\n`. I didnt' close port 80. I really have no idea why it didn't work, suddenly it did work. It seems there is a delay from the container runs until the certificate is ready, maybe that was the reason. Anyway, this part is resolved so I will take the nextcloud question to the nextcloud repo as suggested.. Ah, right, thanks!. ",
    "ribsies": "I have since been led to believe that it is related to permissions. My nginx container seems to not have access to anything.\nNot sure how to fix that.\nI'm using these containers on a QNAP NAS.. Sorry I misspoke.\nWhat I meant was it can't read anything in the html through the sub domain. Meaning I get this error when trying to access the test item in acme-challenge\n2019/02/11 00:59:32 [crit] 38#38: *85 stat() \"/usr/share/nginx/html/.well-known/acme-challenge/hello-world\" failed (13: Permission denied), client: 76.103.132.118, server: sub.mydomain.com, request: \"GET /.well-known/acme-challenge/hello-world HTTP/1.1\", host: \"sub.mydomain.com\"\nAs far as I can tell, all of the volumes are mounting fine.. ",
    "eduzen": "@buchdag I added the volumes and networks. Yes, after docker-compose up works well through http. But when I want to access through https appears 500 internal server error. Thanks!. \n. LETSENCRYPT_CONTAINERS=( '12e5cc6d9856' )\nLETSENCRYPT_12e5cc6d9856_HOST=( '......' )\nLETSENCRYPT_12e5cc6d9856_EMAIL=\"......\"\nLETSENCRYPT_12e5cc6d9856_KEYSIZE=\"<no value>\"\nLETSENCRYPT_12e5cc6d9856_TEST=\"<no value>\"\nLETSENCRYPT_12e5cc6d9856_ACCOUNT_ALIAS=\"<no value>\"\nLETSENCRYPT_12e5cc6d9856_RESTART_CONTAINER=\"<no value>\"\nLETSENCRYPT_12e5cc6d9856_MIN_VALIDITY=\"<no value>\". I changed my /etc/hosts and added my domain there to test locally the project.\nI think that the error is related with the thing that Im running this in a dev enviroment.\nedit : screenshot containing private info removed\n. > What do you mean exactly by running in a dev environment ? It's not publicly reachable ?\nI mean what the way to test this kind of things. First I did some test locally then in a vm with an specific  public domain. But in both scenarios https did not work.. Thank you @buchdag  I will take a deep look to the links that you sent me. And I will open again if its need it. . ",
    "colfin22": "Ok, this is from the logs\n`2019/02/14 20:01:39 [crit] 171#171: connect() to [2a02:26f0:6c00::210:ba61]:80 failed (99: Cannot assign requested address) while requesting certificate status, responder: ocsp.int-x3.letsencrypt.org, peer: [2a02:26f0:6c00::210:ba61]:80, certificate: \"/etc/nginx/certs/radarr4k.mydomainname.com.crt\"\n2019-02-14T20:01:39.507235691Z nginx.1    | 2019/02/14 20:01:39 [error] 171#171: *4018 no live upstreams while connecting to upstream, client: 93.107.xxx.xx, server: radarr4k.mydomainname.com, request: \"GET / HTTP/2.0\", upstream: \"http://radarr4k.mydomainname.com/\", host: \"radarr4k.mydomainname.com\"\n2019-02-14T20:01:39.507257017Z nginx.1    | radarr4k.mydomainname.com 93.107.xxx.xx - - [14/Feb/2019:20:01:39 +0000] \"GET / HTTP/2.0\" 502 575 \"-\" \"Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n2019-02-14T20:01:39.988224299Z nginx.1    | 2019/02/14 20:01:39 [error] 171#171: *4018 no live upstreams while connecting to upstream, client: 93.107.xxx.xx, server: radarr4k.mydomainname.com, request: \"GET /favicon.ico HTTP/2.0\", upstream: \"http://radarr4k.mydomainname.com/favicon.ico\", host: \"radarr4k.mydomainname.com\", referrer: \"https://radarr4k.mydomainname.com/\"`. Ah, I should have opened this issue for nginx-proxy. ",
    "SomeGeek": "Just a suggestion: Move the LetsEncrypt related config file to its own file, like:\n/etc/nginx/vhost.d/letsencrypt\nThat makes it a lot easier to accomplish this.\nI could open a issue at nginx-proxy, but they will probably point out that LetsEncrypt related questions are not their responsibility neither, creating a vicious circle.. ",
    "zer0i3": "I am facing the same error.\nIt looks fine now by converting my docker-compose file version 3 to 2, you can use volumes_from in version 2.. ",
    "h-rasi": "@buchdag Thanks for your message. Basically, xalt/nginx is our nginx image that has been created from jwilder image with some customization in environmental variables.\nAnd you are right the issue was not related to jrcs/letsencrypt-nginx-proxy-companion. This issue has been created a month ago and we realize that the problem was related to something else( backup sidecard container) and Unfortunately I forgot to close this issue.\nThanks again for your time.. ",
    "xiamaz": "Yes, sorry for not including it in the initial bug report.\n/proc/1/cpuset:\nsystem.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n/proc/self/cgroup:\n11:pids:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n10:devices:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n9:blkio:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n8:cpuset:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n7:freezer:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n6:memory:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n5:net_cls,net_prio:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n4:perf_event:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n3:hugetlb:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n2:cpu,cpuacct:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n1:name=systemd:/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\n0::/system.slice/docker-d31df8b9e8ca610dfc1e2be28bbedd7bf47c7691ae70671312cc06253b7ec930.scope\nAre there situations where the docker_api approach might not work correctly? Otherwise that seems to be most reasonable default short of doing a more comprehensive trial and checking.. Sorry for the late reply.\n\n\nAre there situations where the docker_api approach might not work correctly?\n\nYes, because it relies on the fact that the container name and hostname are the same, and indeed you can set different values for those.\n\nOkay, this is a major issue.\n\nThe idea of falling back to the API was also that reading content from a file is faster than an API call (an order of magnitude faster, the API call taking around 0.05s and the file method around 0.005s when measured with time).\nThe problem here is not the system.slice/ prefix itself but the fact that they add docker-and .scope to the container ID (probably because it has something to do with systemd). Maybe we chould check for both the file existence AND the length of the string returned by this method before using it ? That should correctly fall back to the API call in this case.\n\nYes, alternatively we could use a regex to grab a substring of the correct length. This should be robust, as long as the string has the correct length, which we would need to expect anyways.\nThe API based method, seems to be more error prone in the long run, since people might not expect it, when it breaks.. ",
    "Gaibhne": "Thank you, sorry for posting this on the wrong repository.. ",
    "viktorstrate": "@buchdag Yes, this is the very first logs that was generated.\nI have replaced my actual domain with foo.com and the subdomain with sub.foo.com\nIt looks like it finds the subdomain correctly from this:\nCreating/renewal sub.foo.com certificates... (sub.foo.com)\n\nBut it is then followed by this error. Everything works perfectly (without SSL) if I only add the VIRTUAL_HOST environment variable.\nCA marked some of the authorizations as invalid\n\nThe full log can be found below.\n```\nGenerating a RSA private key\n..................................................................................................................................................................++++\n...............................................................................................................................++++\nwriting new private key to '/etc/nginx/certs/default.key.new'\n\nInfo: a default key and certificate have been created at /etc/nginx/certs/default.key and /etc/nginx/certs/default.crt.\nInfo: Creating Diffie-Hellman group in the background.\nA pre-generated Diffie-Hellman group will be used for now while the new one\nis being created.\nGenerating DH parameters, 2048 bit long safe prime, generator 2\nReloading nginx proxy (nginx-proxy)...\n2019/03/10 22:38:30 Generated '/etc/nginx/conf.d/default.conf' from 9 containers\n2019/03/10 22:38:30 [emerg] 74#74: PEM_read_bio_DHparams(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: DH PARAMETERS)\n2019/03/10 22:38:30 Generated '/app/letsencrypt_service_data' from 9 containers\n2019/03/10 22:38:30 Running '/app/signal_le_service'\n2019/03/10 22:38:30 Watching docker events\n2019/03/10 22:38:30 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\n/etc/nginx/certs/sub.foo.com /app\nReloading nginx proxy (nginx-proxy)...\n2019/03/10 22:38:31 Generated '/etc/nginx/conf.d/default.conf' from 9 containers\n2019/03/10 22:38:31 [emerg] 98#98: PEM_read_bio_DHparams(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: DH PARAMETERS)\nCreating/renewal sub.foo.com certificates... (sub.foo.com)\n2019-03-10 22:38:32,319:INFO:simp_le:1382: Generating new account key\n2019-03-10 22:38:35,101:INFO:simp_le:1407: By using simp_le, you implicitly agree to the CA's terms of service: https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf\n2019-03-10 22:38:35,930:INFO:simp_le:1479: Generating new certificate private key\n2019-03-10 22:38:37,937:ERROR:simp_le:1446: CA marked some of the authorizations as invalid, which likely means it could not access http://example.com/.well-known/acme-challenge/X. Did you set correct path in -d example.com:path or --default_root? Are all your domains accessible from the internet? Please check your domains' DNS entries, your host's network/firewall setup and your webserver config. If a domain's DNS entry has both A and AAAA fields set up, some CAs such as Let's Encrypt will perform the challenge validation over IPv6. If your DNS provider does not answer correctly to CAA records request, Let's Encrypt won't issue a certificate for your domain (see https://letsencrypt.org/docs/caa/). Failing authorizations: https://acme-v01.api.letsencrypt.org/acme/authz/zJNOBHWrfqY_IT1SbiL7pK0YJw3jy2Togz1FjXbcCNE\n2019-03-10 22:38:37,944:INFO:simp_le:360: Saving account_key.json\nChallenge validation has failed, see error log.\nDebugging tips: -v improves output verbosity. Help is available under --help.\n/app\nSleep for 3600s\n2019/03/10 22:38:46 Received event die for container fc4c61860ad6\n2019/03/10 22:38:48 Received event start for container fc4c61860ad6\nThis is going to take a long time\nInfo: Diffie-Hellman group creation complete, reloading nginx.\nReloading nginx proxy (nginx-proxy)...\n2019/03/10 22:38:59 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification ''\n2019/03/10 22:38:59 [emerg] 126#126: PEM_read_bio_DHparams(\"/etc/nginx/dhparam/dhparam.pem\") failed (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: DH PARAMETERS)\n2019/03/10 22:39:03 Debounce minTimer fired\n2019/03/10 22:39:03 Contents of /app/letsencrypt_service_data did not change. Skipping notification '/app/signal_le_service'\n2019/03/10 22:39:15 Received event die for container fc4c61860ad6\n2019/03/10 22:39:17 Received event start for container fc4c61860ad6\n2019/03/10 22:39:32 Debounce minTimer fired\n```. It is set to those ports for the proxy container, but the nginx-proxy docker container, is behind a reverse-proxy from the host machine, which is connected to port 80 and 443, so I can setup virtual hosts for non-docker services.\nThe container accessible from the subdomain, on port 80, if only the VIRTUAL_HOST environment variable set in the container and not LETSENCRYPT_HOST.\nI posted the host nginx-config in the original issue description. I use a wildcart to proxy everything that there is no nginx-configuration for already, from the host nginx to the docker nginx-proxy.\nMaybe there is a better way to setup virtual hosts for sites that aren't in a docker container, or that need special configurations?\nEdit: spelling. Okay, thanks for your time anyways.\nI will try to look further into the log files on my own.. ",
    "DominikUrban": "I am aware that Letsencrypt tries it over HTTP but is then forwarded to HTTPS.\nThe problem is rather that the location block for the ACME challenge is added to my vhost configuration. Exactly this location block could also be added to the HTTP server configuration, that case eliminates the redirect for the ACME challenges.\nFor example the current generated configuration:\n```\nkibana.xyz.com\nupstream kibana.xyz.com {\n    # logging_kibana_1\n    server XXX;\n}\nserver {\n    server_name kibana.xyz.com;\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n    return 301 https://$host$request_uri;\n}\nserver {\n    server_name kibana.xyz.com;\n    listen 443 ssl http2 ;\n    access_log /var/log/nginx/access.log vhost;\n    [...]\n    include /etc/nginx/vhost.d/kibana.xyz.com;\n## CONTENT of vhost include ##\n\n## Start of configuration add by letsencrypt container\nlocation ^~ /.well-known/acme-challenge/ {\n    auth_basic off;\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\n## End of configuration add by letsencrypt container\nssl_client_certificate /etc/ssl/certs/ca-chain.cert.pem;\nssl_verify_client on;\n\n## CONTENT of vhost include ##\n\nlocation / {\n    proxy_pass http://kibana.xyz.com;\n}\n\n}\n```\nAnd that's the configuration I'd like to create with the letsencrypt-companion:\n```\nkibana.xyz.com\nupstream kibana.xyz.com {\n    # logging_kibana_1\n    server XXX;\n}\nserver {\n    server_name kibana.xyz.com;\n    listen 80 ;\n    access_log /var/log/nginx/access.log vhost;\n## Start of configuration add by letsencrypt container\nlocation ^~ /.well-known/acme-challenge/ {\n    auth_basic off;\n    allow all;\n    root /usr/share/nginx/html;\n    try_files $uri =404;\n    break;\n}\n## End of configuration add by letsencrypt container\n\nreturn 301 https://$host$request_uri;\n\n}\nserver {\n    server_name kibana.xyz.com;\n    listen 443 ssl http2 ;\n    access_log /var/log/nginx/access.log vhost;\n    [...]\n    include /etc/nginx/vhost.d/kibana.xyz.com;\n## CONTENT of vhost include ##\nssl_client_certificate /etc/ssl/certs/ca-chain.cert.pem;\nssl_verify_client on;\n## CONTENT of vhost include ##\n\nlocation / {\n    proxy_pass http://kibana.xyz.com;\n}\n\n}\n```\nIs that possible?. That's exactly what I needed, seems to work fine. The location configuration for the ACME challenge is still in vhost configuration but is never reached, that's fine.\nI'm a bit surprised that I did not see this issue when I was looking for the problem, maybe I was a bit too tired, sorry.. ",
    "Magi1053": "I believe the issue comes from the file/directory accounts/acme-v01.api.letsencrypt.org/directory/default.json not existing. Even though the container has access to read and write as evident from certificates being created, for some reason the default.json is not being created.. "
}