{
    "mgechev": "Thanks!\n. Fixed in https://github.com/mgechev/ng2lint/commit/c960b5f9b9fd558cafef5c17fd2ee93d3d0ac33c\n. It'll be resolved once we include https://github.com/mgechev/codelyzer/issues/11.\n. It's better to use the official metadata reader https://github.com/mgechev/codelyzer/issues/11.\n. Not relevant at the moment.. There's a major refactoring coming soon and we will concentrate mostly on TypeScript.\nAre you using Angular 2 with ES2016?\n. Without type annotations we won't be able to achieve the same functionality as what we're planning. Most likely non-ts version will not be implemented.\n. If you are referencing _super with _ prefix, you should remove it.\nShould be: super.visitClassDeclaration.call.... Another possible mistake could be if you haven't extended the base class, i.e. class FileNameValidatorWalker extends Lint.RuleWalker\n. I'll take a look today.\n. Although the element is named kebab-case, the selector itself isn't so this is the expected behavior.\nYou can disable the rule by:\n\"component-selector-name\": false\n. @elijahiuu although I think in this case we need to rise a warning, there's still issue in our selector validators that is addressed here.\n. During the last meeting, we decided to use the CssSelector and it's parse method from @angular/compiler. This way we'll be able to have semantical check based on the selector type.\nFor instance, for @Components the check should look like:\nts\nconst selector = CssSelector.parse(component.selector);\nif (selector.element !== null) {\n  // validate if it is a valid kebab-case elector, if not, throw a warning\n} else {\n  // throw a warning that the component doesn\u2019t use element selector\n}\nProblem that needs to be considered if a mixture is used (i.e. component with element and attribute/class selector, etc.). We need to make sure we're aligned with the style guide.\n. Fixed by https://github.com/mgechev/codelyzer/commit/3373dffe7962f5e919161d60bc152f0d82dcb5d2.\n. Hey @tsm91, in theory it is possible - we can turn the JS and TS ASTs to a common format and write our walkers/visitors for their shape. On the other hand, this way we'll loose metadata we get from the type annotations which exists in the TS AST.\nAlthough it is possible, I'd prefer to keep this feature for once we have full feature set for TypeScript development.\n. This could be tricky to implement since some tokens can be injected only using @Inject, for instance:\n``` ts\nconst ANSWER = 42;\nclass AnswerLogger {\n  constructor(@Inject(ANSWER) private _answer: number) {}\n  log() {\n    console.log(this._answer);\n  }\n}\nconst injector = Injector.createAndResolve([\n  AnswerLogger,\n  provide(ANSWER, { useValue: ANSWER })\n]);\n``\n. Go toSettings -> Packages -> Linter Tslint`.\nIn \"Custom rules directory (absolute path)\" add the absolute path pointing to your rules directory (in my case \"/Users/mgechev/Projects/angular2-seed/node_modules/codelyzer\").\n. Today I just changed codelyzer...let me update the readme.\n. Fixed by https://github.com/mgechev/codelyzer/commit/c8217cbeda1e79639f858fe234b57a32cac9202e.\n. It refers to using the @Input property decorator:\nts\n@Component({\n  selector: 'my-app',\n  template: 'Hello {{name}}'\n})\nclass AppComponent {\n  @Input() name;\n}\nMy arguments for this style are:\n\nThe name of the property, or event name associated to @Input or respectively @Output should be modified only on a single place. In case of inputs decorator you need to modify both the inputs in @Component, and the declaration inside of the class's body.\nThe metadata declaration attached to the directive is shorter and thus more readable.\n\nHowever, there are also arguments against the style: definition of all the inputs in a single place is more intuitive/readable.\nProbably this is not the most appropriate place for discussion of the style but I'm interested to hear your opinion. Also, what do you think about the name?\n. Uups, thanks for the catch! It should definitely be use-*-property-decorator. I'll rename it in a sec.\n. LGTM!\n. Thanks for reporting this out! I can take a look right after ng-conf.\n@preslavsh can you take a look at the issue by then?\n. Soon we'll add the evaluator from the metadata collector and such issues will be gone.\n. Will be in master shortly.\n. At the moment we're not planning to implement such feature but we can consider it in future once we catch-up with more critical functionality.\nLets close the issue for now.\n. With gulp-tslint you need to specify the rulesDirectory property inline, in gulpfile.js. Take a look at angular.io's gulpfile for details.\n. Thanks for the PR! :-)\n. Currently codelyzer's implementation is only proof-of-concept (although still kind of  useful). There are much more features that are under design and should land by the end of the year. They, most likely, will be very tightly coupled with the TypeScript AST, and syntax. Also, the lack of static typing in JavaScript will limit the support of advanced features we're planning to introduce.\nFor sure the final design will take in mind possible extensibility for other languages, but it will be quite tricky.\n. Do you want to open a PR with this fix?\n. This is duplication of https://github.com/mgechev/codelyzer/issues/15. Currently we support only basic selectors but this is in the roadmap for sure.\n. Haha, no worries!\n. I dropped it because it's not an Angular related best practice but a code-style preference.\nIt can be enforced by the tslint's rule whitespace.. Seems useful, I'm not sure how Angular specific it is.\nI'll suggest to close it for now and limit the scope of the tool until we reach a point where we can afford to spend effort on similar enhancements.\n. The commands for triggering linting with different tools? I can add this for tslint and the angular-cli, will ease developers a lot!\n. Error reporter is not part of the project. We'll even try to keep it independent from the underlying platform. I guess this is an issue that should be reported to tslint instead.\n. Yes, this is a limitation. We can allow multiple prefixes as part of the configuration:   \"directive-selector-prefix\": [true, \"sg\", \"another-prefix\", \"yet-another\", \"fourth\"].\n@filipesilva, @Brocco do you think this is going to align well with the cli?\n// cc @preslavsh \n. Sounds good. So we'll add context independent prefix checking. It'll be cool to make it context dependent one day.\n. Implemented by @preslavsh here https://github.com/mgechev/codelyzer/pull/71.\n. Seems like a duplication of https://github.com/mgechev/codelyzer/issues/42, so the issue is already fixed. I'll release 0.0.20 today, let me know if you still experience it.\nI also added an extra test case https://github.com/mgechev/codelyzer/commit/80dd6737e3041223384cb849c1deb4f50ae4886d.\n. The error message thrown by the rule is not correct.\nOn the other hand, we don't want to allow element selectors without any dash in their name since this is invalid custom element according to the spec.\nIn the perfect case we should have this PR merged and add one more rule which verifies if element selectors have dash in their names.\n. The first two are doable. The second one should be defined slightly differently since the renderer accepts as argument the nativeElement property of the ElementRef. Something like that should work: do not directly access properties and methods of the nativeElement property of any object of type ElementRef. It won't always rise a warning, for instance:\nts\n...\nclass Dialog {\n  @ViewChild('header') header: ElementRef;\n  ngAfterViewInit() {\n   // we cast this.header to any so we can't verify that it belongs to ElementRef\n    (<any>this.header).nativeElement;\n  }\n}\n...\nThe third one will be very hard/impossible to work in the general case.\n. Yeah, ban seems like a good way to limit the usage of some APIs which directly mutate the DOM.. Awesome! \n. This PR is related to the issue https://github.com/mgechev/codelyzer/pull/50.\n. Lets track the selectors validation progress here https://github.com/mgechev/codelyzer/issues/15.\n. Thanks for the issue! It is fixed in 0.0.23.\n. This is a known issue, already reported here https://github.com/mgechev/codelyzer/issues/15.\n. Thanks for reporting this issue! I'll fix it tomorrow.\n. @farley911 does it work now?\n. It is fixed in master https://github.com/mgechev/codelyzer/blob/master/test/importDestructuringSpacingRule.spec.ts#L90-L93.\n. No problem. Would you try with the latest version on npm?\n. Looks awesome! I added a small comment for the error message.\n. Looks good!\n. @eppsilon would you open an issue for this in the angular.io repository. Here's a template issue https://github.com/angular/angular.io/issues/1301.\n. Closing it for now. @eppsilon let me know if the style guidelines change if I don't notice.\n. I'd prefer to collect some more votes here.. @cementito thanks for the issue! I'll fix it this week.\n. Fixed in 0.0.24.\n. Fixed by https://github.com/mgechev/codelyzer/commit/82121b770ac03b2df361f5b9705cc8bcda2d9412.\n. @Delagen actually tslint doesn't support TypeScript 2.0 yet so codelyzer cannot support it neither.\nAnyway, once tslint supports 2.0 codelyzer will be ready :-).\n. It is still in dev, which means that it won't be installed by default with npm i tslint. \nWould you verify that the rules work with tslint@3.12.0-dev.2? You can use npm i codelyzer@0.0.25.\n. Will be fixed once we merge this.. Yes, ngast support is pushed for 4.0.0. Because of the breaking changes introduced by tslint@5 I had to push a new major release.. We do not support CSS selectors (except element selectors) yet. Most likely we'll switch to something like https://github.com/mdevils/node-css-selector-parser in more advanced version which is in progress.\n. FYI here's an issue to keep an eye on https://github.com/mgechev/codelyzer/issues/15.\n. I've been working on an auto-format functionality here. In the next a couple of weeks I won't be able to release it but I'll try to have something working by this fall.\n. Since it is in the roadmap and in an experimental branch, lets close the issue for now.\n. Yes, it should throw a warning. transaction is not a valid name for a custom Web Component.\n. Since selectors without a dash are not valid I don't think we should consider them.\n. Duplication of https://github.com/mgechev/codelyzer/issues/48.\n. Nice suggestion! I'll work on this style during the weekend.\n. Hey @httpdigest it is kind of risky to use a fix like the one you provided because we're not sure the syntax tokens have the same values. I'll fix this issue in a couple of days.\n. @jppellerin should be working for 2.0.0. Are you using 0.0.26? I'll fix it for >2.0.0 in the next week.\n. Should be fixed in the next a couple of days and released together with the template support.\n. This requires offline compilation and is already in the roadmap.\n. Codelyzer is an addition to tslint (extra, Angular specific rules on top). When (if) we fork tslint we are going to export it as a global executable file.\n. This is useful in the same time not that hard, but in the same time not sure how it is going to work with tslint running the linter over only a single file.\nI'll move it to beta 2 for now.\n. @mnn you can try updating to the latest version of codelyzer, the issue should have been fixed.. We have improvement in this direction. We will change the configuration a bit in near future, for sure, but for now I think the current configuration schema makes a lot of sense.\nClosed by https://github.com/mgechev/codelyzer/commit/3373dffe7962f5e919161d60bc152f0d82dcb5d2.\n. Here's how your settings.json should look like https://gist.github.com/mgechev/3622937a235a80ce2742.\n. This is tslint specific, probably with the guys there we can discuss something like that. The tslint extensibility is something which is great and can be even further improved. Lets close the issue here and move the discussion to the right place.\n. It should be possible to implement such behavior since we know the path of the file.\nLets keep the issue open and include it in the roadmap.\n. The following format makes sense to be used:\nts\n\"selector-prefixes\": {\n    \"./\": [\"app\", \"baz\"], // use \u201capp\u201d or \u201cbaz\u201d by default\n    \"./heroes\": [\"toh\"],  // use \u201ctoh\u201d prefix for all D&C in \u201c./heroes\u201d except\u2026:\n    \"./heroes/bar\": [\"bar\"], // use \u201cbar\u201d for all D&C in \u201c./heroes/bar\u201d\n    \"./humans\": [\"hu\"] // use \u201chu\u201d for all directives & components in \u201c./human\u201d\n }\nThe keys are the directory names, relative to the project root, and the values are list of prefixes.\n@ValeryVS any opinion?\n. Currently you can list a few prefixes in an array. In the next release, most likely we'll include directory specific prefixes.\n. @TomDemulierChevret as mentioned in the previous issue, this is in master. I will be able to publish it as beta4 sometime next week.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @rolandjitsu thanks for digging into this! With the information you provided we should fix it in a day or two.\n. @rolandjitsu I will not publish to npm in the next a couple of days. I'm planning a bigger release which includes template support.\n. Yes, it supports NativeScript. At this point codelyzer is a set of rules for tslint so it is supported by all text editors and IDEs with tslint plugin (that is one of the reason we decided to build on top of tslint instead of developing yet another linter):\n\nAll you need for VSCode is to set tslint.rulesDirectory in your settings.json:\njson\n{\n    \"tslint.rulesDirectory\": \"./node_modules/codelyzer\"\n}\nFrom the setup that you shared seems like you've added this property to tslint.json instead.\nWe're already analyzing Angular templates by processing the AST returned by the TemplateParser. This feature should be available for any Angular-based projects with inline templates (at first) because it is platform agnostic.\n. It makes sense to create a rule ng-no-unused-variable. With what we have in the templates branch I think we're not far from one.\n. @netstart I was thinking that might be a good idea to keep this rule for the next version when we support external templates. Currently it will be only misleading for the users if we mark a variable as unused.\n. Thanks for the comment! We have such rule already.\n. This is even greater motivation to include such rule in codelyzer. Now we support external templates so we can make it happen. I'm afraid that the release will become too big so I'd suggest to move this feature as part of the next one.. We may introduce even more generic rule - mark as public all properties/method used in the templates. Should be straightforward with the updates in the templates branch.\n. @meriturva once https://github.com/mgechev/codelyzer/pull/90 gets merged we'll have this rule up and running!\n. Implemented by https://github.com/mgechev/codelyzer/commit/67d5a07a56163f05e1e3d49e446fa6b0fde15ea2.. Thanks for the suggestion! This is more like a rule which should be considered for tslint, I believe. With a few small exceptions, we are trying to keep this repository focused on Angular.\n. The rule does exactly what the style guide says but the rule name may sound misleading to you. It means: use host property decorator which is:\n@HostListener('click')\nfoo() {}\n. @cexbrayat thanks for pointing this out. This one will be easy to fix. @aitboudad yeah, this is in the roadmap. We will need to use the TypeScript language service in order to resolve the symbol location in such locations.\n. Hey @NightkingCH, thanks for pointing this out! This is a know issue and we'll include a fix in the next release https://github.com/mgechev/codelyzer/issues/15.\n. Thanks for the issue. I'll take a look at it and fix I as soon as I can.\n. Thanks for the comment and the snippet! The issue should be fixed but I haven't published it yet on npm.\n. @preslavsh awesome catch! The issue you found is fixed now. I was overriding something which I wasn't supposed to.\n. Yes, the fix is not on npm yet. You can clone and build the rules manually to verify that the problem doesn't occur anymore.\n. @troyanskiy thanks for the help again! I closed this PR in favor of https://github.com/mgechev/codelyzer/pull/105 which is base on your work.\n. Yes, we'll make a lot of improvements in near future (next release) here are some more details https://github.com/mgechev/codelyzer/issues/15.\n. I can take this one.\n. Yes, the template rules don't work with external templates and support for webpack is not on the roadmap for near future. I'll take a look at the issue and make sure that this syntax doesn't throw an error.\n. Fixed. Will be in master later today.\n. Done.\n. Hey @farshidmk take a look at this section in the readme.\n. Fixed by https://github.com/mgechev/codelyzer/commit/5ee2422d71b7cb1ff25014ec65a0dba1ae59d9dc.\n. I will take this issue, we had it some time in the past for components.\n. @aitboudad in the next a couple of days the fix will be in master and after that we'll push it to npm.\n. Most likely it is misconfiguration. Make sure the directories you are pointing to in VSCode's settings exist. Do you get tslint errors in VSCode by following the instructions for the custom setup?\n. > Do you get tslint errors in VSCode by following the instructions for the custom setup?\nWould you verify that?\n. Oh, sorry I have forgotten to mentioned this as a requirement \ud83d\ude1e .\nYes, in order to make the tool as portable as possible we reuse the error reporting mechanism of tslint. Maybe at some point we'll abstract it to allow ESLint plugin support too but it wasn't necessary at this point.\n. Incorporated in #116 \n. We're working on improving the selector-related rules so [prefixRest].bar and [prefixBar][foo] will work for directives with default settings and prefix being the \"prefix\".\nThe selector of the template directives doesn't have to include element so most likely even after the improvements your selector is going to fail for directive-selector-type.\nBtw, this is an issue which should be moved to angular/angular.io but in general if you believe that your directive should include an element selector you can disable the rule like:\nts\n@Component({\n  /* tslint:disable-next-line:component-selector-prefix component-selector-name */\n  selector: 'fooBar',\n  template: '<h1>{{ hero.name }}</h1>'\n})\nclass HeroDetailsComponent { }\n. If you are using beta.1 this issue should be fine. The changes in 2.1.0 are not critical for codelyzer. Only an problem with the interpolation spans that I had to workaround was fixed.\n. Thanks for the feedback! Yes, it's a known issue and we're working on improving the selector-related rules. For now I'd recommend you to disable the rule for either the entire project or for this specific line with /* tslint:disable-next-line */\n. Fixed https://github.com/mgechev/codelyzer/blob/master/test/directiveSelectorRule.spec.ts#L214-L228.. Good catch! I'll fix this during the weekend and push the update early next week.\n. This might get tricky. I'm not sure the template references are resolvable without collecting metadata/compilation of templates.\n. @abbazabacto this one will be fixed by this PR. Here's the test.\n. @abbazabacto should be fine here. I'm maintaining a symbol table currently containing only variable name.\n. It was fixed in the previous release. Now the template references can also be configured in .condelyzer.js because the tool doesn't analyze the entire component tree.. Closing since the rule will be dropped.. Here is the collector. Not parsing the template/styles for each rule is the next step. First, when we find an Angular component/directive we need to extract the data from it's class decorator and store it into an object. For instance:\nts\n@Component({\n  moduleId: module.id,\n  templateUrl: 'foo.html',\n  encapsulation: core.ViewEncapsulation.None,\n  styles: [`.foo { color: red }`]\n})\n...\nShould become:\nts\n{\n   templateUrl: \"ROOT/foo.html\",\n   styles: ['.foo { color: red }'],\n   encapsulation: 0,\n}\nIt is mostly related to normalizing/extracting the property values. For instance, the template can be defined with:\ntemplate: '\\nfoobar'\nor\ntemplate: '\\n' +\n  'foobar'\nor\ntemplate: `\n  foobar`\nUsing the produced by TypeScript AST we will resolve the template value differently depending on the syntax used by the user. The idea is to keep the logic for normalizing/extracting properties in a single class and reuse the resulted values.\nPS: We won't support:\nts\nconst template = 'foobar';\n@Component({\n  template\n})\n...at first.\n. Yes, correct. I am also thinking of including one more field in the Metadata class which references to the class's AST (i.e. ClassDeclaration). This way it'll be easier to extract other data which doesn't exist in Metadata.\n\n\nOne question about the using of Metadata. You mention that it would get passed into the template/style/expression visitors. Do you mean it would be passed as the 2nd argument to BasicTemplateAstVisitor.visit (and other visitor base classes)? Can you give me a use case when the Metadata would be useful inside these visitors?\n\nNot sure how to approach here. Maybe it'll be better to keep the metadata as property inside these visitors. For instance now some of them have this.context which points to the component's class (or controller, depending on the context).\n. You can take a look at the styles branch for the latest version of what we have.\nI thought about having a separate visitor for Angular and probably it will be cleaner, following the interface segregation principle stricter. What bothers me with this approach is that we will have 5 visitors - 4 ng specific (template, styles, expressions, the directive/component classes) and the previous one, otherwise we have only 4.\nOn the other hand, both options seems similar in sense of how easy it will be to migrate to another linting platform (we use tslint now but why not to be compatible with eslint or something custom).\nIn addition to the Metadata class, probably it should also include fields for the components inputs, outputs, host listeners, etc. For some rules this data wont applicable, because we validate the used syntax now the values themselves but in general it should be helpful.\n. @ValeryVS at the moment I'm working on other parts of codelyzer. Would appreciate a PR!. This can get tricky with inheritance. It also doesn't fit very well with the shallow code analysis we provide which aims enforcement of common style, rather than caching logical errors.. This is already implemented. I'll push to npm tomorrow.\n. This issue is already fixed in the newest version of codelyzer (and the CLI, I suppose https://github.com/angular/angular-cli/pull/2615).\n. @KiT106 as a fix you can install the latest version of codelyzer:\nnpm i codelyzer@1.0.0-beta.3\n. This rule can be made configurable and by default the suffix will be Component. It is going to be part of the next release.. Beta3 doesn't support multiple suffixes. Yes, master is usually stable so you can give it a try.. Yes, master does.. The JSON schema in maintained by third--party. I opened a PR sometimes back, at some point it will go upstream.\nIt'll be great if you open a PR with docs improvement.. http://codelyzer.com/rules/ generated from the source code.. Sounds good, I'm only afraid it could be misleading for components which produce/rely on side-effects.\nI'm not sure there's a good way to predict if a component is suitable for OnPush ChangeDetectionStrategy. Do you have any ideas?\n. Let's close it since it's very hard to guess if a component produces a side-effect &/|| depends on global state or not.\n. Okay, lets reopen the issue.. Okay, lets do that. Maybe as argument of the rule we can provide a regex for matching the components which should have OnPush. By default it can be .*.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @dominique-mueller I agree with you. @mrmeku feel free to take this! If you do, just let me know so I can assign you to the issue.. @mrmeku I'll assign it to myself so that nobody takes it. GitHub does not allow me to attach the issue to you.. Anyone wants to take this issue? I'll be happy to assist if needed.. What's the version of codelyzer that you're using? I believe this issue should be already fixed and here's a test case.\n. @artaommahe are all the peer dependencies satisfied? If not, it's probably an incompatible TypeScript version.. LGTM!\n. @karptonite the issue makes sense. Probably we should move the discussion to https://github.com/angular/angular.io/issues. If you open an issue there, please mention me in order to be able to join the conversation.. Just for completeness: the rules can be disabled by setting:\njs\n\"no-input-rename\": false,\n\"no-output-rename\": false\nin your tslint.json file.. We can take this even further and warn only when:\n- The class is exported.\n- The class has non-primitive arguments of it's constructor.\n. Lets close this issue for now. It'll be great if anyone is willing to open a PR!. Should be possible through Web Analyzer.\n. I'll close the issue for now since it's related to tslint integration in the IDE, doesn't seem codelyzer specific.. Would you share a code snippet? Using TypeScript 2.0.8 all the tests are passing for me.\n. It seems problem related to TypeScript 2.1. Fixed by https://github.com/mgechev/codelyzer/commit/d49cc26bb7d554da55ae71cda8a9fba0ff522d10. Should be on npm by the end of next week.\n. Would you try  npm i -g tslint and tslint \"src/**/*.ts\"?\nRight after that change tslint.json and drop all codelyzer rules. This way we can see if the problem is here.\n. @xtianus79 what's your TypeScript version? Might be related to https://github.com/mgechev/codelyzer/issues/145.\n. @xtianus79 would you try with the latest version? It's 2.0.0-beta.1.. I'm closing it for now, found an issue in the SyntaxKind definition. I'll push the changes in beta.2.\nRef: https://github.com/mgechev/codelyzer/commit/20ce61a64346b9ac17a1d5d5f364889ef90e6d47. I have the following code:\n``` ts\nimport { Component, PipeTransform, Pipe } from '@angular/core';\nimport { Config } from './shared/index';\nimport './operators';\n@Pipe({name: 'orderByActive'})\nexport class OrderByActivePipe implements PipeTransform {\n  transform() {\n    return true;\n  }\n}\n```\nIt works fine for me. Can you reproduce the issue on http://codelyzer.com?\n. @khodev, thanks for pointing this out! Here's the fix https://github.com/mgechev/codelyzer/commit/d49cc26bb7d554da55ae71cda8a9fba0ff522d10.\n. The latest version is beta.4:\nnpm i codelyzer@1.0.0-beta.4\n. Thanks for reporting this! It is a known issue aimed to be resolved by an open PR.\n. Yes there's no support for TypeScript 2.2.0 at this point. We'll add it in the next a couple of days.\n. Thanks for pointing this out! Here's the issue and the fix https://github.com/mgechev/codelyzer/issues/152.\n. Thanks for pointing this out!\n. https://github.com/mgechev/codelyzer/commit/fe3083bd9e106cf8338a743d8bf2c52774e20152\n. Thanks for the detailed explanation of the issue you have! Yes, currently directive-selector and component-selector are in master but not yet published. You can use the configuration explained on npm. Good luck! Let me know if you have any other problems.\n. Incorporated into https://github.com/mgechev/codelyzer/commit/52ba38293a565ed8a901474cd26f7fc65adfaa0f.\n. Thanks for the suggestion! The migration is completed here https://github.com/mgechev/codelyzer/pull/158.\n. Yes, in a few days. It will be part of a big release which introduces support for external templates.. You can now use 2.0.0-beta.1 which works with tslint 4.. Probably by the end of next week. First we have to introduce support for external templates.\n. The release is planned for tomorrow; hopefully I won't have too many \ud83c\udf7b tonight!. They have updated to tslint 4, which support is not released yet by codelyzer. By the end of the week it should be in npm. You can open an issue in angular2-webpack-starter, most likely they have mismatched peerDependencies.. We reuse the error reporting mechanism of tslint. If there's a tslint plugin for emacs, or anything like syntastic/neomake, you should be able to integrate it in your editor.. You can now use 2.0.0-beta.1 which works with tslint 4.. Duplication of https://github.com/mgechev/codelyzer/issues/161 and https://github.com/mgechev/codelyzer/issues/157.. Once we have external template support. Probably by the beginning of the next week.. You can now use 2.0.0-beta.1 which works with tslint 4.. @preslavsh after you run npm test?. It's duplication of https://github.com/mgechev/codelyzer/issues/162.\nBy the end of the week I'll release version which works with tslint 4.0.0. In order to stop getting this error try: rm -rf node_modules/tslint && npm i tslint@^3.0.0.. Sure, let me know if you have any other problems.. You can now use 2.0.0-beta.1 which works with tslint 4.. Hey @michaeljota as part of the next release we'll introduce an option to set a custom suffix for your components & directives which by default will be Component & Directive. This way you'll be able to easily introduce custom naming convention.\nFor further details take a look at this issue https://github.com/mgechev/codelyzer/issues/132.. I'm not sure that this will be with alignment with the style guide. It suggest only a single suffix, also we did an exception for Ionic 2 where we allow Page suffix.. Duplication of https://github.com/mgechev/codelyzer/issues/165. Downgrade to tslint 3.x.x until we release the next version.. You can now use 2.0.0-beta.1 which works with tslint 4.. Doesn't seem necessary since we need to change the list of peerDependencies anyway so we'll introduce a breaking change.. At the moment codelyzer doesn't support TypeScript 2.2.x, although I'm not sure the local version of tslint you're running uses your global tsc. Would you give me the output of:\n./node_modules/.bin/tsc -v\n./node_modules/.bin/tslint -v\nIt will be also great if you can share the content of src/app/app.ts so I can fix the issue and introduce a test case.\nMost likely the tslint plugin for VSCode crashes silently that's why you're not getting any errors.. Great! Thanks for the information; I will see if I can publish a fix as part of the next release.\nUntil then you can disable tslint or just a subset of rules for the files where codelyzer fails.. @crebuh what version of Angular are you using? Did you get any peerDependencies errors? This doesn't seem like an issue in codelyzer, most likely the version of @angular/compiler that you have in your node_modules doesn't export CssSelector.. Yes, this is a violation of the peerDependencies, which require Angular ^2.2.0. You can update the dependencies of your project and it should work.. Yes, you're correct. I'll update the documentation.. Hey @Manduro, thanks for reporting this issue! I'll fix it as part of the next release.. @Manduro the fix is here. I will publish it together with a few other improvements in the next week or two.. Would you share a demo where I can reproduce the problem?. Codelyzer analyzes only the current file which means that it doesn't know if you have template references like ngForm, mdMenu, etc. available in the current position of the component tree. As workaround, there's a configuration property in .codelyzer.js, which allows you to set a list of pre-defined directives, by declaring their selector and exportAs identifier. Take a look at the section \"Advance configuration\" for further details.\nMost likely this will not be required in future, now we're a bit restricted by trying to reuse tslint's error reporting mechanism.. @bradyisom create a file called .codelyzer.js in the root of your project (right where node_modules is) and add the following content:\njs\nmodule.exports = {\n  predefinedDirectives: [\n    {\n      selector: 'md-menu',\n      exportAs: 'mdMenu'\n    }\n  ]\n};. Oh, thanks for pointing this out. I wrote it on-the-fly, just before published the package. I'll fix the file right now.. Yes, you need codelyzer@^2.0.0-beta.1. Here's the latest changelog.. What version are you using? Are you running the linter over command line or you're expecting warnings inline in your text editor/IDE? The later is not going to work for now since I'm reusing the tslint plugin for VSCode/Atom/etc. which lints only ts & tsx files.. You need codelyzer@2.0.0-beta.1.. Thanks for the PR! I'll include it as part of beta.2, which should be released in the next week or two.. I understand there are some cases when using components as attributes are required, another example is a resizable component. For such cases I'd recommend disabling the rule for the specific line. We're still using tslint as error reporting mechanism so you can take advantage of the \"disabled intervals\".. Yes, this seems like an issue. I haven't formed properly the \"symbol table\" that I use for checking for existing in case of references.. @mastertinner the fix will be published in the next beta.. Looks hot, happy to see your suggestion in action! Will take a look at it in the next a couple of days and give you feedback. Thanks!. I left some comments. In general I like the direction that you took! The build is failing:\nsrc/componentClassSuffixRule.ts(15,31): error TS2304: Cannot find name 'suffix'.\nsrc/componentClassSuffixRule.ts(25,32): error TS2334: 'this' cannot be referenced in a static property initializer.\nsrc/componentClassSuffixRule.ts(25,37): error TS2339: Property 'getOptions' does not exist on type 'typeof Rule'.\nsrc/componentClassSuffixRule.ts(25,63): error TS2334: 'this' cannot be referenced in a static property initializer.\nsrc/componentClassSuffixRule.ts(25,68): error TS2339: Property 'getOptions' does not exist on type 'typeof Rule'.\nsrc/componentClassSuffixRule.ts(26,61): error TS2346: Supplied parameters do not match any signature of call target.. Awesome! I just published beta.4, we can introduce this new AST traversal mechanism in beta.5.. The best you can do is to run:\ntslint -c tslint.config path/to/file.ts\nSee which file causes codelyzer to hang and share its content. This way I will be able to debug it and push a fix as soon as possible.. PS: in order to find the file easier you can first locate the directory into which it is located:\ntslint -c tslint.json dir1/**/*.ts\ntslint -c tslint.json dir2/**/*.ts\n.... Yeah, it can analyze stylus files as well but by default it doesn't. Take a look at the advanced configuration. Currently it thinks of the stylus files as CSS and thins seems to break something.. This seems the issue https://github.com/mgechev/codelyzer/issues/186 and should be already fixed. I'll push the new version tonight.. Fixed here https://github.com/mgechev/codelyzer/commit/20ce61a64346b9ac17a1d5d5f364889ef90e6d47. Will be released by the end of the day (hopefully).. This is a known issue and it's fixed in master. Should be out in a couple of days/week. https://github.com/mgechev/codelyzer/pull/177. No worries, hopefully I will be able to release it soon.. @mikhailmelnik your issue is duplication of https://github.com/mgechev/codelyzer/issues/179 and fixed but not yet published.\nI believe I worked on {{t.errorData.errorMessages[0].message}} as well, not sure if it is in beta.1 yet but I'll verify and if it isn't there I'll work on it. What version are you using?\n@guojenman your issues are not related to codelyzer but seems related to tslint. It is weird that you're no longer getting errors with codelyzer. I'll still check and see what's wrong.. @guojenman thanks for this! It's really helpful!. @mikhailmelnik the issue is fixed here https://github.com/mgechev/codelyzer/commit/20ce61a64346b9ac17a1d5d5f364889ef90e6d47.. https://github.com/mgechev/codelyzer/commit/08a0029b716252f23a2797ec703b683eb226d753. What do you mean by \"View-only variable\"? Why is it fine to not have this variable declared?\nYou can disable the rule by using:\n/* tslint:disable:no-access-missing-member*/. This is fixed in codelyzer@3.0.0-beta.1. Once codelyzer@3 gets stable enough I will release it out of beta.. Take a look at the advanced options of codelyzer. It performs analysis per file which means that it's not aware of template references declared in other files. For this purpose they should be declared manually or the rule should be disabled. There's an experimental support for type checking which performs \"deep analysis\" (per project). I need to figure out if the slower linting is worth it.. In 3.0.1 the template linting didn't work in the past a couple of days because of changes in the Angular API.\nTake a look at the advanced configuration of codelyzer, to add template references manually, or disable these rules. Angular Compiler takes care of this anyway, and you can use it with the language service.. Thanks for pointing this out! I'll fix it during the holidays.. After debugging this further, it turns out that the issue is related with the *ngIf directive, not the async pipe itself.. It's caused by lack of metadata for the NgIf directive. This can be workarounded by updating .codelyzer.js/disabling codelyzer for this file.\nAs part of the new release, we'll work on improvements in this direction.. I will take a look at the issue today. Until then, let's reopen it.. Probably this is caused by the incomplete metadata collection. Introducing ngast should fix the issue. Moving to 2.0.2.. Thanks! I will close the issue when I have a chance to verify it's gone.. Yes, it seems async pipe is not causing any issue in the latest release. @victornoel thanks for pointing your observation out!. Codelyzer 3 should has this fixed.. Yes, I haven't published the changes yet because they require a bit more work. I need to migrate to latest version of ngast and align to the changes in the template compiler of Angular.. Since recently Angular didn't support metadata for inheritance so this issue was low priority. Probably I will work on it as part of the next release.. Yes, I said \"didn't\", this is the reason the issue is still open :-). I'll work on this during the weekend. Hopefully, by Monday we'll have these working:\nImported base class\nts\n// base.ts\nclass Base {\n  bar;\n}\n```ts\n// child.ts\nimport { Base } from './base';\n@Component({\n  selector: 'child',\n  template: '{{ bar }}'\n})\nclass Child extends Base {}\n```\nBase class declared in the same file\n```ts\nclass Base {\n  bar;\n}\n@Component({\n  selector: 'child',\n  template: '{{ bar }}'\n})\nclass Child extends Base {}\n```. Excuse me for the delay. There were a lot of things on my plate. I'll try to come up with a fix in the next a couple of days/week.. I've been working on ngast for better metadata extraction.\nTomorrow I'll reuse the TypeChecker with program aware walkers, to find the base classes and all symbols. Setting it as a todo item in Things! \ud83d\udc68\u200d\ud83d\udcbb \nRelated to https://github.com/mgechev/codelyzer/issues/64.. Good news! Just pushed code which introduces support for extended classes. You can find it here.\nI will release 2.0.1 once I make sure everything works properly.. Btw, if you see any test cases which may fail, please comment in the issue.. And here are some bad news https://github.com/Microsoft/vscode-tslint/issues/70.\nSince these rules require type checking, they can be used only via the CLI because the VSCode tslint extension doesn't have support for them. Most likely I'll releases the new features under version 3.0.0-rc.0.. I'd love to hear your opinion: do you prefer to release this fix as 3.0.0-rc.0 and get available now but only through CLI, or you prefer to wait and use it in VSCode?. Alright, it's out in codelyzer@3.0.0-beta.0. I'll work on beta.1 in the next few days, to make the metadata collection smarter.. Yes, the problem exists in 2.1.1, as I mentioned it was scheduled as part of the 3.0.0 release. You can either disable this rule completely or only for this specific file where the lack of inheritance support fails.. Yes, ngast support is pushed for 4.0.0. Because of the breaking changes introduced by tslint@5 I had to push a new major release. You can either set a specific version (i.e. 3.0.0-beta.x) or if it's more convenient for you, I can push 3.0.0-beta.x as 4.0.0-beta.x.. I have to move the 3 release (i.e. the support for inheritance) as codelyzer 4, because in the meantime, while making 3 stable, tslint broke their backwards compatibility and I had to release support for tslint 5 as codelyzer 3.\nWhat I can do is to release the support for inheritance as codelyzer 4.0.0-beta.0, if it's more convenient for you.. Ok, later this week I'll align to the changes introduced by 4.0.2 and push it.. There won't be support for inheritance and it's very likely the no-access-missing-member rule to be removed in version 4. The language service already handles this.. @pgrm there are a few codelyzer rules which provide static analysis for errors that have very tight intersection with ones that are supposed to be caught compile-time by the Angular compiler, and reported by the language service.\ncodelyzer aims to provide linting for style errors which can be found by providing a \"shallow analysis\" (one with no-type checking), only on top of the current file + external template/style.. There's no migration involve - just install the language service and everything works.\nRegarding failures of the build when there's a missing property - just run the Angular's AoT and it will throw an error.. Yes, the error message is not correct. . Probably the rule doesn't validate the selector properly.. Actually, this is against the standard - Web Components must have at least one dash in their name. The error message is not correct. I'll update it to:\nThe selector of the component \"DogComponent\" should be named kebab-case and include dash\nI know it's a bit more restrictive so we can come up with a better solution in future.. @HFTSOL the dash is required for all custom elements. As @lazarljubenovic suggested you can disable the rule with a comment.. Hey @pierre-hilt, we already had a discussion about this. I'm not confident how good idea is it because we're going in a different direction from the official style guide. In the same time we're only expanding the set of features without preventing developers align their codebase to best practices.\nI'd love to get a PR with this functionality.. Great, thanks for the PR!. Fixes https://github.com/mgechev/codelyzer/issues/194.. I'll try to publish the fix somewhen next week. Thanks!. It's intentional to not throw when a style is not transformed successfully but this doesn't eat linting errors.\nIt might be a good idea to log the errors but still some text editors/IDEs tslint plugins (VSCode tslint for instance) crashes when you log something on stderror.. I agree, I will add a bolded warning to the README.md file.. Maybe a better idea is to use tslint@^4.0.0. Would you update the PR?. Thanks for the PR!. With thepredefinedDirectives which you can declare in .codelyzer.js, you can declare that you have: { selector: \"[ngModel]\", exportAs: \"ngModel\" }.\nTake a look at this issue https://github.com/mgechev/codelyzer/issues/173. No problem. I will add all these by default on the next release.. It seems lang is not defined, and codelyzer is correct in this case. I saw a couple of examples of the translate pipe where it uses a missing lang property, which is later passed to a method of a service that as default argument uses the default locale. I didn't find a definition of a local view property through setting a property of the current context.\nDoes your code work with AoT compilation? If it does, what starter do you use?\nLet me know if my findings are missig something.. @emilio-simoes thanks for the insight. I'll work on support for extended classes in the next release.. https://github.com/mgechev/codelyzer/issues/297#issuecomment-296857427\nIf you need type checking (support for inheritance, etc.) you should switch back to the beta version. Another problem here is that the linting gets very slow.\nKeeping the performance in mind, I'm not sure if we should perform a flat or deep analysis of the application.. Thanks for the PR! I'll try to publish new version tomorrow morning.. Beta.4 is out.. Today.. Fixed by https://github.com/mgechev/codelyzer/commit/910fcef6474c9883dbbbccb738ad7a0e49a2bac2.. It does, you need codelyzer 2.0.0-beta.4.. You need tslint@^4.0.0.. Use ./node_modules/.bin/tslint \"components/**/*.ts\" -o linters/tslint.txt -t verbose\nor\nnpm i -g tslint@^4.2.0 and run tslint \"components/**/*.ts\" -o linters/tslint.txt -t verbose.\nMost likely your global tslint is older version.. It's a version mismatch between codelyzer and tslint.\nYou can try the \"Custom setup\" in another directory and verify if everything works together.. Awesome! I am glad it worked in the end.. Thanks for reporting the issue! I will introduce a fix in the next release.. Sounds like a good to have feature. I'll include it into the backlog.\nUntil it's implemented, you can disable the rule for this file/component.. Lets close the issue for now and reopen it if there's more interest.. You can disable the codelyzer rule for a specific component.. Autofixes are in the roadmap. Since I have a few other things on my plate before that, it'll be lovely if anyone is willing to help.\nThe API is user friendly. (Un)Fortunately because of the current format of the TypeScript AST it is mostly an abstraction on top of primitive string manipulations.. We're working incrementally on supporting tslint fixes. We have them for all newly implemented rules.\nClosing this one since it's quite generic.. Hey @Ismaestro! This doesn't seem like an issue related to codelyzer. It's not recommended to bind to private members because the templates are considered consumers of the components' controller instances (take a look here and here).\nAlso, it seems the WebStorm tslint plugin has similar issue to one recently resolved in the VSCode tslint plugin https://github.com/Microsoft/vscode-tslint/issues/153.. You need to declare the template reference in .codelyzer.js. Take a look at the advanced configuration in the readme.. If you have that many template references that you can't list in a file, you can disable this rule/do not use the tool.. I'll prefer to release the support once Angular 4 is out because otherwise I'll have to keep track of all the breaking changes in the private APIs codelyzer uses.. Nice list! We have partial support at the moment by warning when you try to bind to missing or non-public properties or methods.\nI'm not sure to what extent it's worth implementing the above rules in case soon in development we switch to ngc from tsc and get all the errors from there. I will sync with Alex Eagle on that.. I think it'll be better to wait until ngc becomes the default in Angular CLI and we get the compiler errors during the incremental compilation in development mode.\nThis should happen at some point (hopefully soon). However, if anyone is willing to help with the listed rules I'll be happy to assist. Otherwise, there are a few more critical issues to take care of such as missing context for the template parser and incorrect symbol references.. Seems duplicate of https://github.com/mgechev/codelyzer/issues/64.. Implemented by https://github.com/mgechev/codelyzer/commit/de13cebd0f243415fb0fe6cd67e8a8838c4a895f.. I tried to reproduce the issue on http://codelyzer.com/ but I wasn't able to. Would you try the same and let me know if you get an error?. Could be related to TypeScript version mismatch. Can you verify which one are you using in your project?. @scttcper unfortunately this doesn't work at this point. Probably it'll be fixed in future releases when we reuse the language service in our front-end.. @scttcper I meant that codelyzer doesn't know that NgPipe refers to Pipe. The lint rule should not fail.. Hey, this is a known issue https://github.com/mgechev/codelyzer/issues/191. I will work on it soon, I hope. In the mean time, if anyone finds some spare time a PR will be appreciated.. Good catch! I'll include fix in one of the next releases. Since the issue is not very high-priority, the fix might not be introduced as part of beta.5.. In fact, there are two issues here:\n\nThe smile inside ngFor should be reported, since it's not public.\nThe smile declared in the lexical scope of <div/> should not be reported.\n\nPublishing a fix for the second one.. Thanks! Yes, I'm assigning it to you.. Sounds like a reasonable idea. I'll suggest to propose it at angular.io and if it gets approved, we can implement a corresponding rule.\nIf you open an issue there, please add link in the discussion here.\nUntil the proposition gets approved, I'd suggest to close this issue.. Thanks for the PR! I'll review & merge as first thing tomorrow!. Thanks for pointing this out. I'll add it as a low priority enhancement. Before we implement this feature in codelyzer this rule can be selectively disabled.. Awesome! In general each TypeScript file is being parsed, by a couple of parsers, which in the end extract the metadata for the components (this includes the one attached with @Component, or @Directive).\nThere's the so called Ng2Walker class which is responsible for collecting this metadata. If the class is a component the metadata will be an instance of ComponentMetadata, otherwise of DirectiveMetadata. All this happens here.\nEach \"rule\" has a \"rule walker\" which extends the Ng2Walker (in order to reuse logic).  Such walker is InputMetadataWalker which checks if given @Input is being renamed or not. I'd recommend you to override the method visitClassDeclaration in InputMetadataWalker and do something like:\n```ts\nexport class InputMetadataWalker extends Ng2Walker {\n  metadata: DirectiveMetadata;\n// The override, do not forget to invoke the method from the base class.\n  visitClassDeclaration(node: ts.ClassDeclaration) {\n    this.metadata = this._metadataReader.read(declaration);\n    super.visitClassDeclaration(node);\n  }\nvisitNg2Input(property:ts.PropertyDeclaration, input:ts.Decorator, args:string[]) {\n    let className = (property).parent.name.text;\n    let memberName = (property.name).text;\n// check if the selector has the same name as the memberName\n// the selector will be in the form '[selectorName]` so you may need to use\n// compiler from '@angular/compiler', and it's CssSelector.parse export.\n// https://github.com/mgechev/codelyzer/blob/master/src/selectorNameBase.ts#L176\n// After that you'll get \"selectorName\" as value of any of the elements in the \"attrs\" property\n// of the returned element.\n\n// Should be modified.\nif (args.length !== 0 && memberName !== args[0]) {\n  let failureConfig:string[] = [className, memberName, memberName];\n  failureConfig.unshift(Rule.FAILURE_STRING);\n  this.addFailure(\n    this.createFailure(\n      property.getStart(),\n      property.getWidth(),\n      sprintf.apply(this, failureConfig)));\n}\n\n}\n}\n```. Yes, in the above case it should not fail.\nYou can run the tests with npm t. Once you're sure everything works fine, you can run npm run build to make sure the declarations are generated properly. During development, you can run:\n```\nTerminal window 1\n$ npm run tsc:watch\nTerminal window 2\n$ npm run test:watch\n```\nThis way on change the tests are going to run automatically.. Here's the example from above:\n```ts\nexport class InputMetadataWalker extends Ng2Walker {\n  metadata: DirectiveMetadata;\n// The override, do not forget to invoke the method from the base class.\n  visitClassDeclaration(node: ts.ClassDeclaration) {\n    this.metadata = this._metadataReader.read(declaration);\n    super.visitClassDeclaration(node);\n  }\nvisitNg2Input(property:ts.PropertyDeclaration, input:ts.Decorator, args:string[]) {\n    let className = (property).parent.name.text;\n    let memberName = (property.name).text;\n// check if the selector has the same name as the memberName\n// the selector will be in the form '[selectorName]` so you may need to use\n// compiler from '@angular/compiler', and it's CssSelector.parse export.\n// https://github.com/mgechev/codelyzer/blob/master/src/selectorNameBase.ts#L176\n// After that you'll get \"selectorName\" as value of any of the elements in the \"attrs\" property\n// of the returned element.\n\n// Should be modified.\nif (args.length !== 0 && memberName !== args[0]) {\n  let failureConfig:string[] = [className, memberName, memberName];\n  failureConfig.unshift(Rule.FAILURE_STRING);\n  this.addFailure(\n    this.createFailure(\n      property.getStart(),\n      property.getWidth(),\n      sprintf.apply(this, failureConfig)));\n}\n\n}\n}\n```\nThe directive metadata is being extracted by the MetadataReader in visitClassDeclaration. You can save the metadata for use by the visitNg2Input class.. You can get the selector with: this.metadata.selector, here's the declaration of the DirectiveMetadata interface.. Make sure you're parsing the selector with CssSelector.parse because there could be a lot of corner cases of nested selectors.\n\nthank you for your time i managed to pass the test and the only thing its that i need to have the selector like 'label', its not in ['label'] (its not take in it)\nts\n@Directive({\n selector: 'label'\n})\nclass ButtonComponent {\n @Input('labelAttribute') label: string;\n}\n\nWhat behavior are you planning to implement for this case?. @karptonite I'd suggest to keep the rule as it is for now. It can be disabled for a specific line in case an input/output rename is required. The snippet in the style guide is just an example which shows one appropriate case when renaming an input is not a bad idea but it's not exhaustive, and is not related to the name of the selector of the directive.. https://github.com/mgechev/codelyzer/issues/191. @ghsyeung my main motivation to reuse tslint is the tooling built around it. Most text editors/IDEs have already well tested plugins which show the rule failures. On the other hand, non of these plugins lints templates or styles which is an issue in our case.\n@filipesilva if we keep using tslint there won't be any breaking changes in the way codelyzer is being used.. FYI, I'm experimenting with the compiler right here.\nI'll try to expose a synchronous API which allows to:\n\nGet all the static symbols from a file (including pipes, directives, components and modules).\n\nProvide random access to the metadata associated with these symbols.. Also, some random thoughts:\n\n\nLinting with codelyzer can get more efficient if we don't use tslint in the core since we can visit only constructs in symbols which have directive/pipe/component metadata.\n\nBig projects might be quite slow to lint from command-line because of a lot of I/O operations (each component on average will require at least 3 - TypeScript, external template, external style).\nThere need to be reference to the source node of each individual property from the metadata in order to be able to report errors for:\n\n```ts\nimport { selector, template } from './metadata';\n@Component({\n  selector, template\n})\nclass Component {...}\n```\nIn the perfect scenario seems that we should report the error highlighting all the references of selector, or template.. ```ts\nimport { selector, template } from './metadata';\n@Component({\n  selector, template\n})\nclass Component {...}\n```\nThis doesn't really works at the moment since the StaticSymbolResolver messes up the references to selector and template. The current master differs a bit from version 2.4.6 but still doesn't seem to work properly.\n\nPossibly, would angular compiler be able to provide TS AST, template AST and style AST all with a single call?\n\nYes, the compiler can read the entire project. I meant that there are a lot of files which needs to be read. I was thinking of creating proxies for the templates, something like:\nts\ninterface ComponentMetadata {\n  template: FSProxy<TemplateAst>;\n  ...\n}\nOnce the template is required, we can read it from the disk. Same for styles.. From the experiments in ngast it seems that the prototype will most likely work. I think we may be able to introduce the library as part of the next release by using it for collection of the project's metadata. Since there's some pretty heavy static code analysis going on under the hood, some dynamic constructs cannot be resolved at build-time. For instance, the following fail:\n```ts\nconst record = Immutable.record({...});\nclass Record extends record {\n  ...\n}\n```\nAlso:\nts\n@Injectable()\n@Wove()\nclass Bar {...}\nMy idea is to run the metadata resolver in a try...catch and in the worst case fallback to the metadata declared in .codelyzer.js.\nI think that's the smoothest first step for the migration - we'll keep being backwards compatible with previous versions but we'll be able to find the context for given directive much more accurately.\nMost likely, I'll spread the functionality of ProjectSymbols class among a few classes because currently it's quite big and it doesn't even contain half of the features we need.. It'll be awesome if you can take a look at the repo and give me feedback about the API.. @ghsyeung thanks for the feedback! ts.Node -> StaticSymbol sounds like a good idea!\nMaybe it can be introduced as a static method of ProjectSymbols: ProjectSymbol.getStaticSymbolByNode.\n\n...it seems like getAnalyzedModules() caches the first read (but doesn't get cleared in clearCaches())...\n\nI'll take care of that.\n\nOne thing I wonder though, is how much would the performance increase if you use async calls over sync calls? not a big deal as PoC, just something to keep in mind later\n\nI haven't experimented with it because tslint requires the rules to run synchronously.. Writing tests for the current implementation I feel like getAnalyzedModules is too low level. Maybe we should drop it from the public API?. ngast is out for a while, however, I'm planning to change the design a little bit.\nIt'll be best if there are two packages - one which provides context aware parsing primitives (including the collected project metadata), which requires type checking (we already have this by ngast) and another - providing parsing per file.\nI'll work on the latter as soon as I find some spare time. It'll just extract this from the angular directory.. Closing for now.. Is it related to codelyzer or an angular-cli issue?. Yes, I'll include this in the backlog.. @negberts it'll be amazing if you have time to open a PR! The change will not require deep understanding of the project.. This issue is related to https://github.com/mgechev/codelyzer/issues/234. If anyone is willing to add the metadata we can automatically generate the documentation.\nAt the moment I'm working on the metadata collection, support for inheritance and testing improvements. Help will be appreciated!. http://codelyzer.com/rules/. This issue will be fixed when we start gathering metadata with ngast. The timeline is not very clear but probably will happen somewhen next month. Until then, you can update your .codelyzer.js and add the directive declaration manually.. You can create a .codelyzer.js in the root of your project.\n\nNevermind, all you need to do is add / tslint:disable no-access-missing-member / in the corresponding typescript file. :)\n\nThat's correct.. Implemented by https://github.com/mgechev/codelyzer/commit/d10e9809531b6795a6ab403f87b5f68b05c8afb6.\nWill be released as part of 3.0.0-beta.1.. The PR is WIP. I'll fix the build tomorrow.. The build is fixed. There's something which really sucks but there's no other way to support multiple Angular versions...:\nts\nVersionRunner\n  .gte('4.0.0-beta.8', () => {\n    const config = new compiler.CompilerConfig({});\n    tmplParser =\n      new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, ngConsole, []);\n  })\n  .else(() => {\n    tmplParser =\n      new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, ngConsole, []);\n  });\nThis way we:\n\nGive up static typing (otherwise the code won't compile).\nIntroduce additional complexity.... Will implement the conditional execution with https://github.com/mgechev/semver-dsl.. @comfroels awesome job! Thanks! I left only a single comment.. Thanks again! I'll update the list of contributors in the next few days.. Fix by https://github.com/mgechev/codelyzer/commit/2e285e22efb7bdc031ded2721c52cf8e041b9901.. Fixed by https://github.com/mgechev/codelyzer/commit/98639a9fbf4b8b4f39d9260be69b5f5a9e5d387d. That's for the detailed description. localeService doesn't seem to be part of the official Angular i18n API, right?\n\nI'm not sure if we should support third-party solutions since the scope of the project will constantly grow.. At this point I think it's better to not include such rule.\nOnce I move the parsing logic into a separate class, you'll be able to reuse it and write a custom rule for your specific case.. You can use this rule as a base.\nAt some point I'll extract the parsing logic as a separate package.\nFor now, you can just fork the project and if you think it makes sense, open a PR with the rule.. Thanks for the PR! I'll review it during the weekend and give you feedback.\nWhat I meant in the issue was to report unused selectors like here:\ntemplate: `\n  <div class=\"foo\">\n  </div>\n  <div class=\"bar\">\n  </div>\n`,\nstyles: [\n  `\n    .foo,\n    .baz {\n      color: red;\n    }\n  `\n]\nbaz need to be underlined as unused, also the autofix should work and remove: \\n    .baz.. @comfroels it seems this implementation does something else. Do you want to close this PR or you'd want to work here?. @comfroels thanks for the effort! This functionality will require changes only in noUnusedCss.ts and of course noUnusedCss.spec.ts.. Thank you for the PR!. wontfix because this introduces heuristic which is not always correct.. I'll take a look at this issue today. At first, it looks likeversion imported from @angular/core is undefined but looks unlikely.. Thanks for sharing your comment!. What's the value of .Version.full in that older version? I suppose Version is not exported?. Thanks for pointing this out. If you provide a code snippet which allows me to reproduce the problem it'll be even more helpful.. Wasn't able to reproduce. Closing for now.. Yes, index.js is pointed by main. What did you forget?. Here's an example:\n```ts\n@NgModule({\n  export: [CommonModule, ...]\n})\nclass ImportModule {}\n@NgModule({\n  imports: [CommonModule, ImportModule]\n})\nclass AppModule {}\n```\nThe CommonModule import in AppModule is not required, since ImportModule exports it.\nThis seems like an interesting problem to solve. Probably, it'll require linting of all classes decorated with @NgModule and extracting their direct and transitive dependencies using ngast.\nYou can take a look at the 3.0.0-beta.x branches and ngast for further information.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Fixed by https://github.com/mgechev/codelyzer/commit/30e921a48fb98b9d929d46f905aa87d3d7e81d98.. You can try with codelyzer@3.0.0-beta.3.. @rokerkony codelyzer does static code analysis. In @AddValidationHandling you dynamically set the prototype of the target class.\nThere are a lot of dynamic constructs which are not statically analyzable, i.e. not supported by codelyzer. \nDoes this code compilers with Angular's AoT compiler?. Thanks for the docs!. Good point. There should be a clean-up. Few rules which are no longer required are:\n\ntemplates-use-public\nno-access-missing-member\ninvoke-injectable\n\nThe final one is handled by the tsc, first two by ngc.. https://github.com/mgechev/codelyzer/issues/264 . Thanks for the PR! There are some corner cases which we should discuss. The first one (implementing an interface in a base class), is not something which can be solved trivially.. Hey @lazarljubenovic I dropped this rule from version 3 because it's not Angular related style. Also, there's an existing tslint implementation.. @dereklin would you report this to the tslint project?. Here's another related issue https://github.com/mgechev/codelyzer/issues/224.\n\nAllow change to kebab-case\n\nSince the Angular compiler is case sensitive and the recommendation for naming attributes (from directive selectors) is to use camelCase literals, I'm not sure we should go this way.\nMaybe, developers can provide key-value pairs of propertyName: rename as a whitelist. Ones the property name matches the propertyName value and the new name matches the rename, we can ignore the rule. This covers both cases from above with a bit more explicitness.\nWhat do you think?. >Whitelisting renames is pretty much disabling a next line with a source code comment. Otherwise it would require changing the lint configuration a lot during development, which shouldn't be the case. Config should stay more or less the same and not change frequently.\nYep, I agree. Let's keep the rule as it is for now.. What problem do you have with it?. There are also useful in AngularJS applications using ng-metadata. I will not drop them in near future.. I'll close this issue for now. Not sure how it aligns with the future vision of the project.. Great job! Thanks for the PR! I left only one comment for wrong rule name.. What do you think about suffixing the markers with an identifier? Something like:\n@Component({ selector: '[bar]' })\n                        ~~~~~[1]\n@Component({ selector: '[foo]' })\n                        ~~~~~[incorrect suffix 2]\nThis way, we can verify the failure like:\nfailures: {\n  1: '...',\n  'incorrect suffix 2': '...'\n}\nIf we omit the suffix, we can check the failures positionally:\nfailures: {\n  0: '...',\n  1: '...'\n}\nWhich will be equivalent to:\nfailures: [\n  '...',\n  '...'\n]\nThis way we don't need other characters and also don't extend the syntax.. Hey @davidanaya! You must be using codelyzer@3.0.0.beta.x? If so, the problem comes from the deep metadata collection which is performed by ngast. This is required in order to be able to parse component templates in the appropriate context.\nUsually the problem occurs when the basePath and genDir properties are not presented in tsconfig.json. Once codelyzer@3.0.0 is released, most such issues should have be already fixed. By then, you can use codelyzer@2.x.x.\nI'll close this issue since it's related to ngast, not codelyzer.. Also, fixed in https://github.com/mgechev/codelyzer/releases/tag/3.0.0-beta.0.. https://github.com/mgechev/codelyzer/commit/35aa9005c963ef2a302eaef892ee817f0b9101c0. codelyzer@3.0.0-beta.x does not have official integration with the CLI.\nYou can either configure it manually or use 2.x.x which is the stable release.. This is fixed by codelyzer@3.0.0-beta.1.. I will update the corresponding branch. Most of the rules shown as missing exist. This looks like misconfiguration.. Thanks for the catch and for the detailed description. This rule is implemented here. I'll fix it and publish the release after ng-conf.\nIt'll be great if you have time to open a PR with a fix.. Codelyzer 3 is still in beta. Once it gets stable these errors will be gone and we will publish the final release.\nBy then I'd recommend you to use version 2.x.x.. Thanks for reporting the issue. I will sync with the other folks from the Angular CLI team and decide how to proceed with the tslint upgrade.. This is technically not a problem in codelyzer since it has as peer dependency tslint^4.0.0. I'll open another issue for the upcoming upgrade to tslint^5.. You can also use codelyzer@^3.0.1 with tslint@^5.1.0.. Works for me in codelyzer@2.1.1 that just released. Let me know if it helps.. Fixed by https://github.com/mgechev/codelyzer/commit/0d0e81cd501c7aecb59786553e75356d96e03e41.. Thanks for the help! PR sounds good. We should think how to release them. Probably introducing codelyzer@3.0.0 and pushing the features in the current 3.0.0 branches to 4.0.0 sounds reasonable.\nLet me sync with the Angular CLI guys before we go any further.. Since it's a minor release, in case we support 5.0.0 we'll automatically have support for 5.1.0.\nOver the weekend I'll work on the migration to version 5 and open a PR in the CLI once done.. The support for tslint@5 just landed in master. I'll publish a new release over the weekend.. Closing the issue. 3.0.0 should be available tomorrow, followed by PR to the CLI.. Codelyzer 3.0.0 is published https://www.npmjs.com/package/codelyzer.. https://github.com/mgechev/codelyzer/commit/eebf10adc3bd67101a06abfb19d35729a2210d46. It's a known issue in version 2. It'll be fixed in version 3 (it already is).. @mscelina this rule will be removed because the language service and the compiler are responsible for finding & reporting compile-time errors.. @juanmendes you can use the Angular language service for the purpose. Here it is.. Thanks for the PR!. Thanks for the PR! In fact, people are not encouraged to use codelyzer 3 yet. Would you change it to?\nnpm i codelyzer@~2.0.0 tslint@4.0.0 typescript@2.0.9 @angular/core@2.4.0 @angular/compiler@2.4.0 rxjs@5.0.1 zone.js@0.7.2\nThanks!. Thanks!. What's your TypeScript version? Maybe there's mismatched peer dependency.. Doesn't seem problem related to codelyzer itself, most likely it's something in your build. The type declarations of this package should not be a part of it.. Thanks for reporting this out! I'll work on it in the next week or two.. Did you check if you're getting any mismatched peerDependencies? For me the new syntax works.\nHere's a test which codelyzer passes:\nts\nit('should work with \"as\" syntax', () => {\n  let source = `\n    @Component({\n      template: \\`\n        <ng-container *ngIf=\"employee$ | async as emp\">{{ emp }}</ng-container>\n        \\`\n    })\n    class Test {\n      employee$;\n    }`;\n    assertSuccess('no-access-missing-member', source);\n});. It makes sense to be more configurable. I'll try to introduce it as part of 3.0.0.. The schema has different format compared to the example. This seems corrext to me.. Yes, \"either\" might not be the most appropriate. I'll be happy to merge a more detailed description of the configuration options if you want to open a PR.. LGTM! Open the PR so I can merge.. That's a good candidate and should be relatively straightforward to implement. Do you have suggestion for the rule's config?. This way we need to have:\n\npipe-file-name\ncomponent-file-name\nservice-file-name\nmodule-file-name\ncomponent-file-name\nfile name for a custom symbol?\n\nWe should come up with a more generic configuration which will not require declaration of 5 or more individual rules.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Actually, that's a feature great for people who want to contribute to codelyzer! There's no AST traversal required.. https://github.com/mgechev/codelyzer/issues/281. Enforcing pure components sounds like a good idea to me. As discussed previously, it's impossible to support the entire TypeScript syntax and verify for lack of side-effects. Unfortunately, lack of component state doesn't guarantee independence from global state.\nA possible addition could be:\n\nDisallow injected dependencies (they may cause side effects).\nEnforcement of referential transparency for the component's methods, setters and getters.\n\nI like the rule suggestion, it'll be great if anyone is willing to contribute with initial version. The description by @davidbarratt sounds like a good starting point for an implementation.. This seems out of the scope of the current implementation of codelyzer. Closing it for now.. Yes, it's better to switch to 2.1.1 (and 3.0.0 starting from Monday next week).\n3.0.0 right now is in beta so it's not really intended for production usage.. https://github.com/mgechev/codelyzer/commit/b1b36a3218ba16a3926737776893f3b039be932f. 3.0.0 does \"flat analysis\", i.e. it won't consider the entire project (won't collect the entire metadata for your project) which means that it will not be able to discover the mdAutocomplete template reference.\nTake a look at this section for more details. Also, you may consider going back to 3.0.0-beta.x https://github.com/mgechev/codelyzer/issues/191#issuecomment-296697740.. Take a look at https://github.com/mgechev/codelyzer/issues/297. Yes, I don't see it exported but it shouldn't prevent you from using it since tslint will look at the files node_modules/codelyzer/*Rule.js.\nWhat is the error that you get?. Ah, I see. Let me publish 3.0.1.. Fixed by https://github.com/mgechev/codelyzer/commit/c5869e04cdfedb1c58fac9c0f6bef027a745badf. You can try npm i codelyzer@3.0.1.. I can't assign it to you since you're not yet a collaborator. I'll assign it to myself to show that there's someone working on it.. @GregOnNet good job! You can take a look at this function. encapsulation.name.text contains also the position of the node.. @GregOnNet good job! I added a minor comment regarding the warning message. Would you address it before merge?. https://github.com/mgechev/codelyzer/issues/297#issuecomment-296857427. This is an additional syntax which is webpack specific. Angular CLI, for instance, does this inlining as part of the build process. This seems reasonable to me, because you're able to write build system agnostic code and later couple it with the specific bundler.\nI think this should be kept outside codelyzer, I think we should keep it decoupled from the build tool.. The compilation errors should be reported by the Angular compiler. All the linting errors (including style guide related warnings and other non compile-time errors), should be reported by tslint.\nThis issue seems out of the scope of codelyzer.. It's already possible to pass an array with elements [\"element\", \"attribute\"] for both. Another alternative is to disable the rules.. Would you give more details? For instance, steps to reproduce, minimum demo, your environment, etc.. That's matter of how you run the tool. For more details visit tslint's documentation and make sure you invoke the linter with proper configuration and target.. Follow the instructions here.. Would you give me more information for what you mean here?\nI'm not sure I understand the problem.. I see, thanks. Will work on this tomorrow.. Opened PR here https://github.com/SchemaStore/schemastore/pull/306.. I will try, thanks.. Fixed by https://github.com/mgechev/codelyzer/issues/319\nWill release in the next days.. Thanks for the PR!. No, unfortunately I'll miss it. Trying to reduce my traveling recently \ud83d\ude1e .. Closing it since it looks like a responsibility of the compiler & language service.. Hey @QuentinFchx good ideas!\n\n\nensure whitespaces in interpolation {{ value }}\nensure whitespaces around pipe operator {{ value | pipe }}\nensure whitespaces after semicolon in structural dir*ngIf=\"condition; else\"\n\n\nDoable with the TemplateVisitor.\n\n\ncheck banana-box syntax [()] vs ([])\n\n\nSounds like a good fit for the TemplateVisitor as well. It also feels like a good candidate for a compile-time error.\n\n\ncheck for unused template-ref \n\n\nThe current shallow linting doesn't deal well with template references but that's another good candidate.. Started whitespace in interpolation here https://github.com/mgechev/codelyzer/commit/d9d7da425b0e92178914d5bde142ace43cbd95d5. Three of the rules are already implemented. I will open two issues to track the remaining two.. Thanks for reporting the issue. Will fix it as soon as possible and release a fix.. @TomCaserta cannot reproduce the issue https://github.com/mgechev/codelyzer/pull/318. That's not an error coming from codelyzer. Most likely you've forgot to include a component with selector new-component in the NgModule where you're using it.. @connor4312 thanks for the PR, looks great! I will review and merge as soon as possible.\nLooks great, at first!. @connor4312 merged. Great job!. @wKoza implemented the second rule for whitespace. Would you review?. @wKoza fixed. Will merge today.. Haha, I love the error messages. Would be awesome if we're able to introduce this rule as part of the next release as well!. Thanks! Will take a look tomorrow & merge/comment.. Yes. The documentation is being automatically generated with this script, so you will have to change the source code.. I'll be glad to have the newest version of all dependencies in the demo app.\nSince the support of external templates/styles, codelyzer is more coupled to node and it will require more work to bundle it as a browser app.\nThis is something which needs to be done anyway and will require extracting the low-level APIs into a host class (similar to the hosts of the language service of TypeScript).. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. No, template references won't work with the shallow parsing we perform. I suppose we can drop this from the roadmap.. @wKoza we can move this issue to the next milestone?. Ok, moving to the next milestone so we can focus on the remaining two issues.. I will hold the release until we fix them.. I'll try codelyzer tomorrow/Tuesday and will try to push a release before I leave for AngularUP.. Yes, the fix is in master. Once 3.1.0 gets stable we can publish it.. The fix itself https://github.com/mgechev/codelyzer/commit/b60829663383adcaa8b2570f56242ce34e1d94a1. Thanks for the comment!. Hm, there's a spec for this, which passes successfully.. Got it. That's an external template, right?. https://github.com/mgechev/codelyzer/commit/6656b81dfd6466e090776d0bdb9f225169b6b7f0. @Matmo10 I'll try to push it tomorrow.. The source of this issue seems the check-pipe option.. Thanks for reporting the issue. I will take a look during the weekend on AngularUP.. There's another issue related to \"check-pipe\" https://github.com/mgechev/codelyzer/issues/365. Looks the same as the one reported by you.. See https://github.com/mgechev/codelyzer/issues/365. No worries. @supamax, please use the search for details.. Do you see any taking errors at all?. No, it isn't. Thanks for posting the solution you found!. You should remove the rule suffix from the rule name.. @Martin-Wegner the update is in master, haven't updated the docs yet https://github.com/mgechev/codelyzer/pull/355.. @wKoza awesome job man! I left some very minor style-related comments. Will provide further feedback after AngularUP.. I suppose we can generalize that we should not check string literals.. Hey @Martin-Wegner, we generate the docs directory. Would you open a PR updating the rule name in the importDestructuringSpacingRule.ts file?. Thanks!. Take a look at the existing issues. This rule will be removed.. This rule is highly experimental and has a lot of flaws at the moment.\nI'll keep the issue open and fix it at some point, for the stable version of no-unused-css.. Thanks for reporting the issue. There are two issues in this case:\n\nThe warning is reported for code having a valid style.\nThe warning is reported on incorrect location.\n\nI'll push a fix in upcoming releases.. @willgm not a related issue. Please, take a look at the search and also https://github.com/mgechev/codelyzer/issues/264.. You can disable the rule for the entire file by /* tslint:disable:rule1 rule2 rule3... */. In case the warning is in an external template, place the comment in the component file which references it.. You can disable the rule for now until we fix the issue.. Yes, I'll do over the weekend. Will also do some dogfooding to verify that everything is fine.. [hero]=\"hero\" this is not an interpolation syntax. The angular-whitespace rule will not run against the snippet above.\nWould you provide more details about the issue? . LGTM. There is only one minor comment. I will take more detailed look tonight.\nYou are reporting errors only in case of @Injectable to prevent false negatives for base component / directive classes?. @wKoza would you want to keep it in the next release or schedule it for future releases?. Sounds good! I am planning to focus on making existing rules stable (check-pipe, especially) and working on i18n.. Take a look at the issue tracker and in the readme for existing issues related to template references.. This will be handled by ngc and respectively the language service. There's already existing rule which verifies that @Injectable is invoked, however, this rule will be dropped in future releases.. This seems like opportunity for improvement in ngc. Let me sync with the Angular team and come back to you.. @rafaelss95 tsc itself reports the error in case you don't pass argument to the @Inject property decorator.. @wKoza maybe different error messages depending on the value passed to @Input.\nRegarding the style guide, yes, we can make the explanation more complete.. Lets move it to the next milestone.. That's not an Angular specific rule. You can try opening a feature request in the tslint repository.. Yes, that's a rule which I've been considering for a while. It's definitely a good idea.\nI'll add it to the release 4.x.x. ngast is a good candidate but it'll require further design. I'll spend time in August to write a design doc and release it publicly.. Let's close this issue for now. Codelyzer is performing local analysis (i.e. per file).. This should be relatively straightforward. I will add it as part of this issue.. @abierbaum both rules are implemented in https://github.com/mgechev/codelyzer/pull/386. Should be ready to use in codelyzer@3.2.0.. Sounds like a good suggestion. There's issue related to the errors reporting in ngFor. Once this is fixed it'll be relatively easy to implement.. Will move it to the next release in order to not bloat 3.2.0.. That's the expected behavior from the rule template-use-public.. Lets reopen the issue since there are problems in other rules (angular-whitespace has some flaws).. The problem in all rules which involve EmbeddedTemplate is that the syntax is being desugared from:\n<li *ngFor=\"let foo of bar\"></li>\nto:\n<li ngFor let-foo [ngForOf]=\"bar\"></li>\nwhich breaks our mapping. Here's the solution by the language service. It's not straightforward. Most likely I'll reuse it, however, we risk to have frequent breaking changes given the non-stable APIs being used there.. I'm afraid we'll need to keep this. It can be implemented with a strategy, doesn't have to be in a long function but the logic will remain.. Haven't done anything here yet. The way to go is custom expression parser for *-prefixed attributes.. @rolandjitsu thanks for pointing this out! I'll move it to a separate issue. Hopefully we'll be able to soon clean the glitches and open a PR to Angular CLI with the new features.. Take a look at https://github.com/mgechev/codelyzer/issues/264. Not sure if using class selector for components could be considered a best practice.\nAccording to the style guide we worked on, components should be used with elements selectors.\n@cherzog if this rule doesn't align with your internal style guidelines, you can disable it locally with /* tslint:disable:rule-name */.. @wKoza thanks for the review. Addressed your comments.. Take a look at the existing issues.. This looks useful.\nIt could be generalized to: \"Verify that event handlers produce side effect\".\nIn case the expression is something like: (click)=\"foo(bar)\" and foo is a pure function, the handler is pointless. Not sure how trivial this will be.. Cool, lets close the issue for now then.. Because we're not sure if there won't be any breaking changes in the internal APIs that we're using.. Please, take a look at existing issues.. Lets close this issue and keep the discussion in the Angular issue tracker when initiated.. Thanks for the PR!. What do you think about extending the properties of directive-class-suffix to allow an array of suffixes? The drawback is that its not context dependent validation but the rule will be more configurable.\nAn alternative is to use Directive or Validator by default (check the class implements Validator and if it does require Validator suffix) and fallback to other configuration options if provided.. @wKoza, this sounds good.. Will take this one right now.. @RandomShaper thanks for the suggestion! Unfortunately this warning comes from the language service, codelyzer doesn't perform such check.. No worries.. Yes, codelyzer should ignore variables. Thanks for reporting the issue, I'll be on it.. Lets close the issue for now. There are plenty of corner cases which are not handled in this rule. Probably, it's worth introducing a separate tool for this, which performs analysis over the entire project.. There's a note already https://github.com/mgechev/codelyzer#rules-status.. Awesome job! Will take a look as soon as possible.. @wKoza there might be an issue in the testing package implementation.. @intellix, the following spec passes:\nts\nit.only('should work with valid selector', () => {\n  const source = `\n      @Directive({\n        selector: 'button[xcButton]'\n      })\n      class Test {}\n      `;\n  assertSuccess('directive-selector', source, ['attribute', 'xc', 'camelCase']);\n});\nWould you provide a code snippet so we can reproduce the problem?. @wKoza good idea!. We have this in the readme.. Angular 5 has breaking changes for codelyzer. There's no longer JitReflector in @angular/core, it's moved to @angular/platform-browser-dynamic/src/compiler_reflector.\nIn the next a couple of days I'll see how much changes will be required and push an update.. @wKoza, the compiler converts them to unicode chars?. Not sure if there's a way to handle this, except the one I shown above, used by the language service. However, this way, I'm afraid we're getting coupled even further to lower, unstable APIs :-/.. https://github.com/mgechev/codelyzer/issues/460. There are some merge conflicts. Would you resolve them and merge afterwards?. @wKoza travis complains because of linting errors:\nERROR: src/angularWhitespaceRule.ts[167, 7]: missing whitespace\nERROR: src/angularWhitespaceRule.ts[197, 9]: missing whitespace\nERROR: test/angularWhitespaceRule.spec.ts[233, 1]: trailing whitespace\nERROR: test/angularWhitespaceRule.spec.ts[249, 1]: trailing whitespace. Thanks for reporting this! We'll take a look at the issue.. @wKoza maybe we can run conditionally the parser using semver-dsl like we do for other API differences?. Please, use the search to find already existing issues.. Please, take a look at the existing issues.. Please take a look at this issue https://github.com/mgechev/codelyzer/issues/264. @adros thanks for sharing the issue. I'll take a look at it today.. The issue is fixed. The PR should be merged soon https://github.com/mgechev/codelyzer/pull/423.. @wKoza that's for the catch. Should be fine now.. This is a rule which will be dropped. Take a look at the readme for a workaround and the issue tracker for details.. This looks like an issue outside the scope of codelyzer. Thanks for sharing your ideas @rajjaiswalsaumya!. I like this proposal. Lets implement it.. Btw, this is not very trivial to solve in the generic case. We need to check if given object instance implements a lifecycle hook interface and later, it's method is being invoked somewhere.\nHowever, I think a basic check, such as:\n\nFind all method invocations in a class.\nLook for method names reserved by lifecycle hooks.\nReport a warning if find one.\n\nSeems good enough.. There are two options:\n- Comments in the beginning of the file\n- Two tslint config files - one for tests which does not include this rule and another for your app, which includes the rule and extends the original one. If there's no issue for this in the Angular CLI repo, it might be worth opening.. Sounds like a good idea.. @rafaelss95 it won't be safe to make inputs readonly (reasons that @franekp mentioned) but for outputs, this seems to work well.\n\nSo, the question is: What would be the most correct way to do this?\n\nWhat you suggested sounds good. You can store the inputs in a Set to have a check with O(1).. @rafaelss95 since assignment to different values of already initialized readonlyproperties is not allowed, my guess is that it's not a good idea to be used for inputs.. Yes, static analysis is ahead of time check as well. If inputs are mutable (and they are), they should not be readonly.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @lazarljubenovic we should decide if we want to introduce this as style in the style guide.\nYou can open an issue here and we can start the keep the discussion there.\nTo me this looks like an error which should be handled by the TypeScript compiler.. Lets close the issue for now.. @lazarljubenovic sounds like a good idea. The any types in the FormBuilder can be changed, however, keep in mind that this will be considered a breaking change, so probably it won't land in the next major release.. @wKoza some time back I implemented this tslint rule which makes sure we don't use imports with side-effects. Looks like it handles the general case.. @kykint codelyzer doesn't support inheritance chain since it does not perform type checking. I'd recommend you to disable the rule for this file or implement the interface explicitly for the child class as well.. This doesn't seem an issue related to codelyzer. As Angular CLI says, you cannot use new command inside of Angular CLI project.. You can take a look at the Angular CLI repository.. @reduckted thanks for pointing this out. We should definitely fix this. I will be able to re-publish it over the weekend.. Hey @lukiffer thanks for giving codelyzer a try and thanks for the suggestion!\nTypeScript supports /* @internal */ annotation with a comment. Extending the syntax of TypeScript includes extension of the compiler that the language provides as well which is out of the scope of the tool.. That's a good point! I think the proposal addresses only one of the problems and a generic solution might not be suitable for a linting rule without type checking (similar to the codelyzer rules).\nLets keep the issue open for now.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @csvn your suggestion sounds good. Would you open a PR with the update? . Awesome, thanks for the PR! Today I'll issue a new release with exported i18n rules and your change.. @darkbasic removed one task, now you should be able to run npm run release.. Not published yet, will do in this week.. Cool! I'll include it in the 4.0.0 release.. @reduckted thanks for reporting this issue!. Thanks for reporting this! Added it to the next release.. @Manduro the rule with the check-text option will not fail if:\n\nEach element containing text node should have an i18n attribute\n\nIn such case, the first template is invalid, right?\n  . @Manduro would you take a look at the referenced PR and tell me if you think that's the behavior you think the rule should have?\nIn the end, the content of the element with i18n will be replaced by the compiler so the interpolation will be lost, right?\nIf that's the case, I'd suggest to introduce another config option to this rule which warns when an interpolation is used inside of an element with i18n attribute.. Sounds good. Looks like the PR I opened fixes the second, incorrect, behavior. Let me know if you think we can add anything else.. @intellix thanks for reporting this. I'll work on it as part of the next release.. @intellix at first, to me it looks like it's the responsibility of xi18n to throw an error.. Codelyzer does not support AngularJS and introducing such feature is not part of the roadmap.\nSince codelyzer does not perform type checking for decorators, you can use it with ng-metadata which can be included as part of your migration strategy.. We can update the CSS parser that we use. Let's keep that open for now.. @HideDev I'll fix this as part of the next minor release.. https://github.com/mgechev/codelyzer/pull/439. https://github.com/mgechev/codelyzer/pull/440. Will take a look at the problem today and issue a minor release.. Sorry, mistake in the release logs. The rule name is no-output-on-prefix-name.. Hey Martin, would you open a PR with a fix?. @Martin-Wegner sorry for that. Here's the incorporated fix https://github.com/mgechev/codelyzer/commit/3ec8229e52d41f76f87d22c6e529a4e3e238bfb2.. Here are the changes from 4.0.2.. Let's drop the check-pipe as @wKoza suggested https://github.com/mgechev/codelyzer/issues/460.. @reduckted I'll fix this as part of the next release. Will add it to my schedule for next week.. https://github.com/mgechev/codelyzer/issues/460. @wKoza good job! Left only one comment.. @rafaelss95 sounds good. Will be great if you can open a PR with this rule!. @rafaelss95 there's something which makes this rule not trivial to implement. We can easily verify if the value of given property equals new EventEmitter and throw a warning. The problem is that without type checking we cannot easily verify that EventEmitter is actually imported from @angular/core or, let's say, const EventEmitter = require('event-emitter');. @wKoza using type checking is still an option but the rule won't be used by editors like VSCode, for instance.. That's true, the only issue would be that at first the tool which performs deep analysis won't have editor/IDE support.\nAlso, the compiler's API is not stable yet. Our only chance is to use @angular/compiler-cli/ngtools2.. It's used here. Mostly for creating a program. Still needs to be used together with @angular/compiler & @angular/compiler-cli.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @Nexeuz you can hit \ud83d\udc4d on @rafaelss95's comment. +1 will not be reflected in the voting process.. I believe the Angular team is working on making the compiler with a friendlier API, especially for template references.\nI'd suggest to remove it from the README.md file. If we drop it completely (or remove the check-pipe config option), this will be a breaking change so we'll have to release version 5 as well.. We can drop if from master, generate the docs and push it to GitHub Page. We should remember to re-enable it if we push minor/patch versions.. You can disable this rule for the directive itself. Take a look at https://palantir.github.io/tslint/usage/rule-flags/.. :+1:. Yes, you can use the type checker in tslint rules but this has a price:\n- Slower linting\n- VSCode doesn't support type checking in their tslint extension. Yes, correct. @trenneman you can disable this rule for the specific file or the entire project.. He already did https://github.com/mgechev/codelyzer/pull/470 \u2728 . https://github.com/mgechev/codelyzer/issues/472. Here's how you can configure tslint properly:\n{\n  \"rulesDirectory\": [ \"node_modules/codelyzer\" ],\n  \"rules\": {\n    \"banana-in-box\": true\n  }\n}. Btw, you can try the tslint-angular preset for using a configuration similar to the one you posted.. Hey @Tukks this is a compile-time error which makes the feature outside the scope of codelyzer. To get this behavior use the Angular language service.. This will require \"deep analysis\", or type checking, so we will hit these issues https://github.com/mgechev/codelyzer/issues/191. Let's leave this to the compiler, whenever it gets ready.. Introduced a preset today. Thanks for the suggestion! You can install it using:\nnpm i tslint-angular\nYou can read more about the rules there in the readme of the project.. @kevinphelps awesome job! I will take a look later today/tomorrow :-).. Thank you for the extra help!. More details here https://github.com/mgechev/codelyzer/issues/264\n You can use the Angular language service for the purpose.. Good catch. Will add a fix in the next release.. @wKoza good catch...the issue still persists in the parser. Trying to figure out where exactly.. @wKoza I'll push the fix upstream as well.\n  . CssParser is a module which Angular doesn't use internally. It's not part of the compiler bundle. We might be the only ones using it.. @alisd23 thanks for the PR! Left one comment regarding the regexp.. @YiannisH thanks for reporting this. Maybe a breaking API change in Angular 5.1.x.... For now you can disable the codelyzer rules. I will try to publish a fix over the weekend if I am able to reproduce the issue.. Before we merge, let's discuss in #442 if this makes sense.. Fix https://github.com/mgechev/codelyzer/pull/483. Here we have a broken auto fix.. I cannot reproduce this issue https://github.com/mgechev/codelyzer/pull/494\n// cc @splincode. @wKoza I thought it might be OS related but we run tests in Windows as well.. Thanks for looking into it! . Will move this issue to a future release.. Let's collect some feedback.. Let's close this rule. There are a lot of upcoming changes in the Angular compiler.. Looks like you already have a bunch of prefixes in mind. Maybe a generic rule called no-input-prefix, which as argument accepts a list of prefixes would be a better idea.. This could be caused by the rule naming. Did you try using both /* tslint disable:trackBy-function */ and the lower case alternative?. @alan-agius4 yes, you should add this marker in the TypeScript file referencing your HTML template.\nWe should add an entry in the readme for this case. In case you have a minute, a PR with a one-liner saying this will be helpful!. In the root of the project should be fine. Thanks!. @wKoza the build will fail until we merge https://github.com/mgechev/codelyzer/pull/493. @wKoza yes, the tests are failing on Windows.. Let's close for now.. https://github.com/mgechev/codelyzer/commit/6a6b3de0b1943cb5373e12e0fd7d24e7ea29c162. Thanks for reporting the issue. I will add test for your specific examples and fix the issues. The i18n rules were recently added, we are still figuring out the correct behavior in some cases.. I'll update the readme in a sec.. @domkrel, would you test against the branch with the fix?. @scott-ho thanks for pointing this out! Will fix it as part of the next release.. This should fix the issue https://github.com/mgechev/codelyzer/pull/511. Love this feature request. Probably we can apply some version of cyclomatic complexity estimation.. Here's a simple estimation of cyclomatic complexity implemented in go https://github.com/fzipp/gocyclo/blob/master/gocyclo.go. It should be easy to port it to the Angular expression/template ASTs.. I will take a detailed look tomorrow. Would suggest to rename the rule to template-conditional-complexity. In future we may implement a rule which computes a complexity value for the entire template, considering all the operations inside, similarly to cyclomatic complexity that I mentioned previously.. I think it makes sense to have both. The cyclomatic complexity is more restrictive, this will be perfect for more conservative users.. @wKoza awesome job! Would you switch to 2 spaces instead of 4 to be consistent with most of the other rules?. @wKoza left some comments. I'm mostly curious why you prefer to not use the Angular's expression parser.. Thanks for sharing this! I'll talk to the docs team.. https://github.com/angular/angular/issues/22078 will resolve it.. Would you share the source where you found that exporting rulesDirectory is required?. @wKoza based on what algorithm did you implement this rule? In general looks good to me! Left only a single comment for the rationale.. https://github.com/mgechev/codelyzer/pull/512. For support requests I would recommend you to use Stack overflow or our gitter channel. Thanks!. Codelyzer enforces view encapsulation. Allowing None is possible if you disable the rule. Let's keep this outside codelyzer for now.. Hey @olivierscheffler you should be able to do this with a custom tslint reporter. See https://palantir.github.io/tslint/formatters/json/.. You can name your pipes only camel case if you try to use snake-case then your application will not compile. This is a compile-time error, not a linting one. The alternative is to use AoT.\nIf there are a lot of people who want to keep this rule, we can. We haven't had issues with it recently and it doesn't cost us anything to not drop it.. It's still considered a good practice. Prefixing will not be caught by the compiler thought. . Thanks! I will make a new release today.. @AdamKernig your log says codelyzer@2.1.1. The peer dependencies of the current release look fine:\n\"peerDependencies\": {\n  \"@angular/compiler\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/core\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/platform-browser-dynamic\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/platform-browser\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/common\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"tslint\": \"^5.0.0\"\n}\nVerify that codelyzer is not installed as a transitive dependency.. @mariohmol what's the decorator on top of your SelectItemDirective?. https://github.com/mgechev/codelyzer/commit/50fa2d6a2ea64082f2179bf4e3e93777888a9797. https://github.com/mgechev/codelyzer/issues/487. There was an emergency and I had to push a new release yesterday. Will add details in the change log over the weekend.. https://github.com/mgechev/codelyzer/blob/master/CHANGELOG.md. I believe @wKoza worked on this https://github.com/mgechev/codelyzer/pull/506/files. It's a good feature for newcomers.. https://github.com/mgechev/codelyzer/commit/174ed46f11dddd2837559163d6475e00cef8be84. Please do. Thanks for the fix!. Duplicate of https://github.com/mgechev/codelyzer/issues/526.\nWe'll temporarily disable auto fixes in the next release.. Thanks for reporting this issue! It should be fixed by the next release.. Yes, correct. This is a good suggestion. Will add it to the roadmap.. @rafaelss95 it's a good corner case that you caught! My suggestion would be to ignore the rule in case the input is applied to a setter.. @hansl confirmed that the current release works with Angular version 6. We can still publish these changes once v6 is out.. Yes, the rule which detects dead CSS is experimental. The two main limitations it has you already listed - it doesn't consider ViewEncapsulation and shared styles.\nI'll close this issue because we've already marked it as not production ready in the readme.. Sorry, misread the issue. Would you share more details on the functionality you're looking for?. So you're proposing a rule which forbids two components to reuse the same style files?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. I think this rule is already fixed https://github.com/mgechev/codelyzer/issues/545. I can reopen if it turns out it isn't.. No worries!. I've been thinking about this. Not sure if introducing a boolean flag will be very intuitive to developers. I'd always wonder what this true stands for, especially after the other enumerable properties.\nI'm thinking that it's worth it to introduce a separate rule. At first, it looks like an overhead, however, the more I think about it, the better the idea sounds to me. It'll be more flexible and obvious what the purpose is.. @wKoza looks good to me! Will take a further look tomorrow and merge. I think we can release on ngconf.. 2. We should run prettier to format everything properly.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. GitHub does not allow this but since you're taking it I'll drop votes needed.. Sounds good. I can talk to @jelbourn to converge both rules.. @rafaelss95 let's use life-cycle to be consistent with the other rules. At some point (before a major release), we can rename the rules to use lifecycle instead.. @wKoza, we're good here?. Awesome job! I can publish this on Friday. I have a late flight after ngconf.. Thanks for the reminder! I will add this tonight.. no-conflicting-life-cycle-hooks?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Would you also switch to node stable from 5?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @rafaelss95 I guess the big diff. Let's merge your PR which introduces prettier and after that merge this one.. @rafaelss95 would you give examples what the role of transformAnimations would be?. @rafaelss95 I can see some value in the rule. I'm not yet sure we should introduce it though.. Let's see if we'll collect enough votes for this feature before merging.. It seems a bit too early for such change. Let's plan it and roll it out together with Angular version 7 or so.. Sounds good! You can resolve the conflicts and we can merge after that.. https://github.com/mgechev/codelyzer/pull/571. @jscharett makes sense to me. @rafaelss95 would you want to check if the receiver of the method call isn't super?. @kevinphelps thanks for the fix of https://github.com/mgechev/codelyzer/issues/454.\nThere seems to be a failure in Travis.. Would you look into the failing build? Looks prettier related.. @rafaelss95 although I like this PR, I haven't seen many feature requests for such feature.\nIf we decide to go with this rule, my proposal would be to drop no-output-on-prefix and generalize it to the current one, where the default regex is /^on. This will be a breaking change though.\nI'd suggest to open an issue first, collect feedback and consider the rule for 5.0.0 release (please keep the code for this rule so we can reuse it if we decide to go with it).. Yes, makes sense for both rules.. That's a know reported issue. Thanks for the details.. https://github.com/mgechev/codelyzer/issues/412. How is the dev dependency preventing you from using the tool?. I'll take a look at this today.. @mertdeg2 would you try the branch minko/dev-typescript. It should work properly with the latest TypeScript.. @mertdeg2 I added the return type to noTemplateCallExpressionRule. Let me know if the build still fails.. Done.. @rafaelss95 thanks for the cleanup! Would you check why the build is failing?. ERROR: /Users/travis/build/mgechev/codelyzer/src/angular/sourceMappingVisitor.ts[107, 18]: createFailure is deprecated: Prefer `addFailureAt` and its variants.\nERROR: /Users/travis/build/mgechev/codelyzer/src/angular/templates/basicTemplateAstVisitor.ts[186, 53]: addFailure is deprecated: Prefer `addFailureAt` and its variants.\nI guess we should not use deprecated methods.. @rafaelss95 will take a look in a few minutes.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Let's keep it for now until Ivy gets released.. @rafaelss95 love your suggestion btw, I definitely agree. I closed the issue because of the plans for the locality of the compiler.. Would you see how ngtsc handles this? If it still throws, let us deprecate.. @rafaelss95 I like the regex config:\n\"pipe-naming\": [true, \"^ngx?[A-Z]+\"]\nIt'll make more sense to rename the rule. If we have a rule with the same name but different semantics we'll create a lot of confusion.. To me, it sounds fine to disallow on as the name of an output. Let's reopen this if anyone disagrees.. @rafaelss95 yes, it should be a single space.. @rafaelss95 this sounds good to me! @wKoza what are your thoughts?. @Teamop the feature request is to detect properties which are not later read?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Not sure if it's possible to solve this in the general case.\nThe property can be accessed from outside of the component.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. name: null should be a compile-time error. The name is not nullable, no?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @dev054 name is not nullable. With stricter type checking this should not be a semantically valid program.. That's more of a coding practice which should be part of tslint. We tried to stay away from these while working on the style guide but this one sneaked somehow, I suppose.. That's a pretty good suggestion. I guess whether it's valid or not mostly depends on the application's complexity.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. That's a great PR @rafaelss95! Would you see why's Travis complaining?. \ud83d\udc4d. Assigning to @wKoza.. >IMHO, we should remove the \"fix\" option for this rule, since we can't assume what the \"expression\" is trying to do... or maybe leave only the replace for strict equality (== false -> === false).\nYes, we should remove the fix because it's not safe.. I'll look at the story behind it over the weekend.. Yes, here's the motivation. I'm not sure if the value it brings justifies the corner cases you pointed. I'd vote to drop the rule. Let's keep the issue open for a few more days and collect opinions.. Sounds good!. @rafaelss95 since we had this conversation, we reevaluated the pros and cons of this rule and introduced it in Google. Let's keep it as part of codelyzer.. Sure. How do you suggest to update it?. Would you give more details, show an example?. Not sure how we can solve this without false positives. golint solves this by assigning confidence coefficient to the failures, however, tslint does not have such feature.\nWe can just drop this rule, I suppose.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. @rafaelss95 you're a project collaborator. I believe you should have write access as well. Let me know if that's not the case so I can fix it.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. json\n{\n  \"rules\": {\n    \"i18n\": [\n      true,\n      \"check-id\",\n      \"check-text\",\n      {\n        \"blacklist\": [\"mat-icon\"]\n      }\n    ]\n  }\n}\nLooks fine to me.. @rafaelss95 sure!. @rafaelss95 how's this task going?. @rafaelss95 you're correct. Will close it as a feature request.. @rafaelss95 \ud83e\udd18 . @rafaelss95 great job! LGTM, I'll let @wKoza to have a look as well.. @rafaelss95 @wKoza FYI just added an additional line in the README regarding the feature request process.. @rafaelss95 the proposal makes sense. We should coordinate the effort with Angular CLI. It might be a good idea to push the changes before their next major release.. @rafaelss95 yes, feel free! // cc @wKoza . Give yourself a \ud83d\udc4d . In the style guide, we agreed on application level prefixes for directives & component. One of the core motivations for this practice is to make the directives & components developed by your team more apparent when reading the code. I can see why the module level may make sense as well. . Hey @piyukore06, I've thought of externalizing the NgWalker several times. Your proposal makes a lot of sense. To prioritize this feature request, I'll add votes needed label and close it, so that people can vote and we can introduce it as part of the roadmap if the demand is high. Alternatively, if you have some time, we'd love to get a PR from you!. Thanks for the quick PR! My idea was to externalize the content of the angular directory into a separate package. Does this cover your use case completely? Keep in mind that there are more visitor abstractions for traversal of template, style, and expression ASTs.. @piyukore06 would you check why the build is failing?. @piyukore06 if TypeScript won't complain, I'd suggest exporting only the base visitors without any extra internal APIs. This way, we'd be able to make changes in them without introducing issues for consumers of codelyzer.. Thanks! Marking it as a votes needed and closing it. Once we implement it, I'll drop the votes needed label.. Regex to whitelist names makes sense.. LGTM! I'll push a new release in the next few days.. Fixed in 4.4.1.. Fixed in 4.4.1.. @rafaelss95 the process is manual ATM. We can go with github-changelog-generator.. @rafaelss95 looks like I've missed these commits because they weren't part of the 4.4.0 milestone.. Yes, let's be more explicit.. This is fixed by https://github.com/mgechev/codelyzer/commit/adc974af75193a78b1e9f6f4760319143965b6b1. I'll release the change in the next few days.. Actually, it's already out in 4.4.2.. Closing it due to insufficient information.. Yes, @rafaelss95 I agree. I still believe we can merge this now and regenerate the docs as well.. Thanks for the PR!. Hey @pockata-kt, the Angular compiler determines if private members should be accessible within the templates. If it generates code where they can be, then there's no point restricting this behavior.. The rule is experimental and the chances are that we'll remove it at some point, or completely rewrite it.\nI'll close this issue for now and consider it when we decide how we'll proceed.. These rules are no longer part or codelyzer. You can remove them from tslint.json.. You can get the same version of tslint with both ^5.9.0 and ^5.11.0. Try 5.9.0 without ^.. This could be a regression in tslint, vscode-tslint, or codelyzer. I haven't had time to look at it.\nUntil we resolve the problem, I'd recommend you to disable the angular-whitespace rule.. Yep, good point.. There's a bug related to reporting in external templates. This seems like a regression caused by a dependency. You can look at this issue for details https://github.com/mgechev/codelyzer/issues/692.. Thanks for sharing this problem! Are there any HTML entities in the template? Would you share a test case that we can use to debug the issue?. Also, what's your operating system? I remember we had similar issues on Windows.. @michaeljota I believe @JamesHenry was working on prettier support for Angular (inline?) templates.. Thanks for pointing this out! We'd love to get a PR! :-). @marcincichocki thanks for reporting this! I can see that @rafaelss95 already took care of the issue \u26a1\ufe0f. I'll review & merge today.. https://github.com/mgechev/codelyzer/pull/723 incorporated this functionality.. Thanks for the detailed description. We'll take a look at this in the next few days.. No worries.. You should set /* tslint:disable:no-unused-css */ in the corresponding TypeScript file.. @mastermsd we'll need to sync with the Angular CLI team before we release support for Angular version 7.. You can add: // tslint:disable:no-life-cycle-call in the beginning of the file.. You can check https://github.com/mgechev/codelyzer/issues/709. Once we coordinate with the Angular CLI team, we'll release the next version.. No worries.. @etramell-tem thanks for reporting the issue! I'll look at it over the weekend.. I'd recommend you to disable the rule for this specific class. codelyzer does not perform type checking at the moment, and we don't have plans for introducing it in the near future.. Use codelyzer@4.5.0.. No worries. @fbaezap running async code in ngOnInit would not slow down rendering. Maybe I misunderstood the feature request, would you explain why async in ngOnInit could be considered harmful?. Btw, since it's a feature request, I'm closing it and adding votes needed label.. @fbaezap thanks for the detailed explanation. It makes sense to have a warning in such case, which explains that async calls would not block rendering. Would you want to take this feature? I'll be happy to assist if needed.. I'll look at this tomorrow.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Here you can find the issues sorted by the number of votes they have.. Let's release this once we introduce support for 8.0.0.. @rafaelss95 we have the voting only to prioritize feature requests. If someone develops a rule which would be useful for community, we can merge without voting!. Yes, it's possible. All you need is tslint and to point to the codelyzer rules in tslint.json.. @mohammedzamakhan would you fix the merge conflict?. \ud83d\udc4d . Sounds good!. Sounds good!. This will require schematics transform of tslint.json when users execute ng update.\nWe'll have to discuss the change with @alexeagle and @hansl.. The renames you suggest make sense.. @rafaelss95 would you resolve the merge conflict? I think we're ready to merge.. LGTM, the extra checks seem fine.. Oh, I was sure that I responded to these questions but it looks I didn't. Yes, it makes sense to rename the rest of the rules as well.. @rafaelss95 let's rename the other rules as part of another PR:\n\nprefer-on-push-component-change-detection\nno-attribute-decorator\n\nSound good. About the relative prefix, it's still not obvious what's about. Maybe we should be more explicit about it.\n. Let's not updated it for now.. It makes sense to merge this rule with the anchor one, same functionality?. @mohammedzamakhan looks good! Would you fix the failures and we can merge!. Let's merge https://github.com/mgechev/codelyzer/pull/754 first.. This is currently not on the roadmap and I don't see clear benefits of such migration.\nClosing the issue for now, but I'll keep it in the back of my head for Q3-Q4 this year.. @mohammedzamakhan yes, that's a known issue. Unfortunately at the moment we cannot do this because of limitations in the tslint plugin.\nLet's close this issue because it's likely that we don't use tslint in the future and this is a tslint-specific problem.. @mohammedzamakhan would you want to push a fix?. We can catch up on hangouts to discuss what we're going to do with TSLint. I'll ping you over email.. That's probably in the Angular router where we collect the metadata?. @rafaelss95 yes, this makes sense.. Any ideas how to improve the error messages?. @wKoza yes it makes sense. I'd not want to lose information either.. This will take a while to review. It'll be very helpful if you can separate it into multiple PRs or at least multiple commits so I can review them in a sequence?. Wow, that was fast! :). @rafaelss95 thanks for updating the AST traversal from visitors to functions!. @rafaelss95 not sure where this may come from, I haven't hit this issue but sounds like a problem in assertMultipleAnnotated. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Here are renames that we did:\ncontextual-life-cycle => contextual-lifecycle\nno-conflicting-life-cycle-hooks => no-conflicting-lifecycle\nno-life-cycle-call => no-lifecycle-call\nuse-life-cycle-interface => use-lifecycle-interface\ndecorator-not-allowed => contextual-decorator\nenforce-component-selector => use-component-selector\nno-output-named-after-standard-event => no-output-native\nuse-host-property-decorator => no-host-metadata-property\nuse-input-property-decorator => no-inputs-metadata-property\nuse-output-property-decorator => no-outputs-metadata-property\nno-queries-parameter => no-queries-metadata-property\npipe-impure => no-pipe-impure\nuse-view-encapsulation => use-component-view-encapsulation\ni18n => template-i18n\nbanana-in-box => template-banana-in-box\nno-template-call-expression => template-no-call-expression\ntemplates-no-negated-async => template-no-negated-async\ntrackBy-function => template-use-track-by-function\nno-attribute-parameter-decorator => no-attribute-decorator\nmax-inline-declarations => component-max-inline-declarations\nI'll update the changelog.. Why not visitNg2Component and ng2Walker instead?\n. Why not visitNg2Component and ng2Walker instead?\n. Developer might be aware of what she is doing. I'd suggest to form the FAILURE message more like a warning rather than an error.\n. With the following change I get the same error for this test case:\nts\n  it('should ignore empty @Component decorator', () => {\n    let source = `\n      @Component()\n      class Baz {}\n    `;\n    let ruleArgs: tslint.IOptions = {\n      ruleName: 'foo',\n      ruleArguments: ['foo'],\n      disabledIntervals: null\n    };\n    let sf = ts.createSourceFile('foo', source, null);\n    let walker = new Ng2Walker(sf, ruleArgs);\n    (<any>chai).expect(() => {\n      let templateSpy = chaiSpy.on(RecursiveAngularExpressionVisitor.prototype, 'visitPropertyRead');\n      walker.walk(sf);\n      (<any>chai.expect(templateSpy).to.not.have.been).called();\n    }).not.to.throw();\n  });\nIf I change the check to:\nts\n// ...\nif (!(<ts.CallExpression>decorator.expression).arguments.length || \n    !(<ts.ObjectLiteralExpression>(<ts.CallExpression>decorator.expression).arguments[0]).properties) {\n  return;\n}\n// ...\nIt works fine\n. A better name is pipe-naming because we don't have pipe selectors.\n. Same here.\n. To make it clearer, you can filter the properties not only by property name but also by value type (i.e. take only supported value types with isSupportedKind). You can take only the supported types. Right after that you can map to this.extractMainSelector.\n. If it is camelCase the value of the validator is not set.\n. If the value is kebab-case the validator is not set.\n. Same comment as above. This can be simplified by filtering only properties with supported types.\n. Maybe clearer will be:\nts\n!suffixList.some(suffix => Rule.validate(className, suffix));. Looks beautiful!. Maybe we can first apply filter and after that map it, so we can drop the ugly if condition?. Seems like an issue.. Maybe some can do the trick since it returns boolean anyway.. Maybe some can do the trick since it returns boolean anyway.. I'm using some internal APIs of the compiler which often change between minor versions.. Would you surround it in quotes in order to be consistent with other rules?. I think accessing d.expression.expression.text may fail in case the component is not invoked, i.e.\n@Injectable\nclass Foobar {...}\nWould you add a test case for this?. The behavior could be incorrect in case this class is base for a component, i.e.:\n```\nclass A implements OnInit {...}\n@Component(...)\nclass B extends A {...}\n``\n. It'sinvoke-injectable.. Yes, correct.. Another alternative is what tslint does [here](https://github.com/palantir/tslint/blob/master/test/rules/jsdoc-format/jsdoc.js.lint).. Agree. Trying to reduce it to minimum but the constant changes of the Angular's compiler API makes it impossible.. Let's change the warning to:'Using \"ViewEncapsulation.None\" will make your styles global which may have unintended effect'.. Thanks for the catch :). Let's use the constants defined above.. Lets rename it toValidSyntaxOpenor something similar. I'm getting confused readingBoxInABanana*, wondering if that was the valid or invalid syntax.. Newline.. This warning message is fun but lets change it to something like: \"Invalid binding syntax. Use [(expr)] instead\".. Whitespace after=.. Lets use single quotes.. Lets use single quotes and add space after the+.. Whitespace around-.. Whitespace around+.. Whitespace around-..\"to'`.. @rokerkony yes, it's best if we add the checks as part of CI.\nA PR will be good.. Let's disable this, it looks more clear what the target is when there is no space after type casting.. I am usually for white spaces after function keyword in anonymous functions. I don't have any specific reasoning, so if you have an argument against it, I am fine :-). Ok, we can keep it.. Would you change back to spaces. In case of injectable (i.e. service) it's not necessary a controller.. It seems it's spaces already. You can ignore this one.. Just a rename controller -> classDeclaration.. Yes, prettier has added it.. Maybe we can preserve the context (prop) from a parent element visitor?. Isn't this valid for all different templates? * attribute prefix always desugars to <ng-template...></ng-template>.. Can we have the parenthesis surrounded by whitespace?. Yes, the constructor is always in a class.. Would you export this back?. Yes, for now it's dropped only from the readme until we figure it out :-). /trackBy\\s*:/ might be a better regex because of the whitespace which is ignored by default. Let's use hash map here for constant check.. Let's change this to:\n\nCall expressions are not allowed in templates except in output handlers.\n\nThe current one is correct as well, this way we're more consistent with the Angular's terminology.. Same here.. Same here.. We can use a string literal here instead of template strings. There are already existing rules where this should be fixed as well.. /\\*ngFor\\s*=\\s*'|\"(.+)'|\"/ this might be more accurate it will catch*ngFor = 'foobar' as well.. node-sass is fine, we use it only in the tests.. Would you also add a test case with different quotes and whitespace?. It's configurable.. \u2702\ufe0f . \u2702\ufe0f . Curious why you didn't choose to use the expression parser of Angular?. \u2702\ufe0f . \u2702\ufe0f . This will fail to parse if the expression is:\na === '1' || b === '2' && c.d !== e\nright?. If we use custom parser we can hit a problem because of the DSL Angular supports, which has extra syntax on top of JavaScript.\nWe already depend on the expression parser in the NgWalker. I don't think using it will make our analysis dynamic?\nWhat information is missing there?. Beautiful! Will take a final look tomorrow and merge.. Maybe: \"Cyclomatic complexity over some threshold indicates that the logic should be moved outside the template\". In such case, we should rename the rule and allow configuration of both' with an array or an object:\njson\n\"max-inline-declarations\": [true, {  \"template\": 4, \"styles\": 3 }]. Let's add them to a Set<keyof typeof LifecycleHooks>.\nEdit: Set<LifecycleHooksMethods>.. This may still return some false positives if the method is called myOnInit (not that it's a good idea to name a method this way).\nWe can introduce a local LifecycleHooksMethods union type:\nts\ntype LifecycleHooksMethods = 'ngOnInit' | ...;\nand perform the check with === instead of indexOf.. @rafaelss95 I see your point moving the names to constants. I agree with @wKoza that it'll be easier to read if we have the names inline. It's also unlikely we go back and rename the classes and/or decorators.. Sure, you can add tests.. Let's also change this:\n\nExplicit calls to lifecycle hooks could be confusing. Invoke lifecycle hooks is the responsability of Angular.\n\nMy only update is \"is confusing\" to \"could be confusing\".. super.visitNgComponent. Could be a constant.. Propagate the call super.visitNgOutput. Are we sure that property.parent.name is not null?. Then we should fix the rest :-). TypeScript should fail with a compile-time error as well but I respect the completeness.. I'd call it prefer-inline-decorator.. It makes sense to allow rule configuration (i.e.blacklist decorators for example).. Oh!. Let's not use interpolation that aggressively. If we duplicate should twice in a single test case, this is fine. Currently, the code is a bit hard to follow.. Do we need -p? Are we using any rules with type checking?. createFailure is deprecated?. I see that's required because of the deprecation rule?. Let's use less of these assignments. A bit hard to follow :-). @rkirov does it work for you if we disable strictPropertyInitialization?. I don't think we should export the jitReflector as part of the public API.. Better not export referenceCollectorVisitor.. Can we keep only the basicCssAstVisitor exported?. Can we skip the metadataReader?. My guess is that the error comes from the missing newline.. Why not protected?. \u2764\ufe0f . Would you change this to: forces components to be used as either elements, attributes, or both (not recommend).. Would you add specs for attribute selectors?. No worries . https://angular.io/styleguide#style-05-04 should also work. We can use https://angular.io/styleguide#style-05-04 instead.. Do we consider ./../foobar.html correct in this case?. This method can be simplified if you use visitNgComponent.. Excuse me for the misleading comment last time, to me it makes sense to throw a warning on ./../ and succeed on ../. The prefix in the first case seem redundant.. No need to introduce an additional method as part of the public interface of this module.. In what cases would we need the depth option?. What'a the rationale behind the depth option?. I think it's safe to skip the depth check. The changes are that the level of nesting will not have performance implications for the rule.. Walking the entire template is fine, no need to set any restrictions.. This should be updated. Message should be updated. Same. you can drop . (w3c warning). misspelt -> misspelled. Anchor elements should have content to be accessible by screen readers. Incorrect message. Incorrect message. Maybe also innerText?. Alternate text lets screen readers provide more information to end users?. Enforces alternate text for elements which require the alt attribute. You can drop the log. Would you also add the rule to the readme?. \ud83d\udc4d . @mohammedzamakhan there are some merge conflict markers here. You can drop \"some\". click event could be lower case. Same for key events. <%s> -> <%s/>. We use this internally. Need to make sure we update g3.. Good job with this refactoring!. Let's drop the for loop here, we don't really need it, nor LIFECYCLE_INTERFACE_CONFLICT_MAPPER. Same here.. Do we need to export this?. /\\[(.*)\\]/.test('[(ngModel)]') && /\\[(.*)\\]/.test('([ngModel])') which seems incorrect.. We're very confident here. Do we know for sure that name is not going to be null?. I'd prefer to keep the previous specs. This is not very readable, it's hard to keep track what are the interfaces and the methods.. Same here. I see we've merged the template string snippets, but I have no idea what we are testing like this. Would you mind updating? Thanks \ud83d\ude47\ud83c\udffc\u200d\u2642\ufe0f. Yes, previous regex was absolutely wrong, I noticed that. Thanks for the update!. \ud83d\udc4d . This may have some implications in the dead code elimination, but it's fine to exist in our test cases.. @mohammedzamakhan would you address this comment?. ts\n@Component({...})\nexport default class { ... }\nSeems valid to me. In this case name is undefined.. Let's keep it.. How many elements do we have in domElements? This linear check might be too slow. If we keep it as a set, the check would be O(1).. I'd suggest to refactor it to use sets/maps, so we can drop the quadratic check to a linear one.. (<string[]>Array.from(dom.keys())), this should be enough. No need to spread the array into another one. Maybe every would be better in this case. Same with the spread here.. kebabToCamelCase is more semantically correct. We will not be able to camelize an arbitrary string. Would you mind reverting this name change?. LGTM. ",
    "amcdnl": "I'm rolling stage-0 Babel.\n. Thanks for feedback either way; cheers!\n. Whats the status on this? Would love to incorporate this.. ",
    "randyaa": "Thanks, i'm not doing anything with _super that's just the transpiled version of my TS lint rule. Also, I'm definitely extending Lint.RuleWalker.\n. ",
    "preslavsh": "What is your typescript version?\n. #137  Needs reviewing\n. I like the new names of the rules.\n. Yes.\nThis rule has different problems and will be hard to implement.\n. The problems occurs, when class is declared as property.\nstatic SampleTestCase = class extends TestCase {\n    constructor() {\n    }\nIt is fixed here: #29 \n. Thanks for sharing the problem. The issue is fixed. \n. Thank you for mentioning. We will take a look.\n. Thank you for sharing the problem. We will work on it.\n. PR here #44 will fix the problem\n. #65  Fixes it.\n. I will play with it next week. If you can do it make a PR\n. I don't see a good way that can be done now.\n. Can I see a code snippet of the file you are running codelyzer on? \n. I have created PR for that, but it's only a smart guess.\n. #92  Updates that\n. #92  Fixes that\n. Having same issue using branch fix-99\nSnippet:\nimport {Component } from '@angular/core';\n @Component({\n    selector: \"sg-buy-form-component\",\n    template: '\n        <form>\n        <input type=\"submit\" [hidden]=\"hasOrdered\" (click)=\"order(item.en_name);\" class=\"btn-menu\" value=\"\u041f\u043e\u0440\u044a\u0447\u0430\u0439\"/>\n       <button [hidden]=\"!hasOrdered\" class=\"bnt-red\">\u0412\u0435\u0447\u0435 \u0435 \u043f\u043e\u0440\u044a\u0447\u0430\u043d\u043e</button>\n        </form>'\n})\nexport class BuyFormComponent {\n    public hasOrdered:boolean;\n}\nStackTrace:\nTypeError: ast.expression.visit is not a function\n  at SymbolAccessValidator.RecursiveAngularExpressionVisitor.visitPrefixNot (C:\\Users\\Presko\\Desktop\\codelyzer\\codel\n-fix-99\\codelyzer\\dist\\src\\angular\\recursiveAngularExpressionVisitor.js:78:24)\n  at PrefixNot.visit (C:\\Users\\Presko\\Desktop\\codelyzer\\codelyzer-fix-99\\codelyzer\\node_modules\\@angular\\compiler\\bu\ns\\compiler.umd.js:3258:26)\n  at ASTWithSource.visit (C:\\Users\\Presko\\Desktop\\codelyzer\\codelyzer-fix-99\\codelyzer\\node_modules\\@angular\\compile\nndles\\compiler.umd.js:3314:27)\nAt the end turns out that hasOrderder in my case is string and cannot be visited.\n. Having issue commented #99 here\n. The rule is provided in #271 and will be available after merge. This error occurs from lack of metadata.\n. This is fixed with the last merge and soon will be published in npm.\n. I received src/angular/metadataReader.ts(52,36): error TS2305: Module 'ts' has no exported member 'ObjectLiteralElementLike'.. Yes, but I cannot react fast, without seeing code snippets and you can not provide me some, which gives me only this option for now.\nI will invest more time, solving the issue, during the weekend.\n. ",
    "tsm91": "Okay, thanks for the info\n\nAlthough it is possible, I'd prefer to keep this feature for once we have full feature set for TypeScript development.\n\nfair enough\n. ",
    "bluEEil": "I had similiar problem\nI changed it to the following:\n\"rulesDirectory\": [\"node_modules/codelyzer\"]\nafter that I still had problem that it missed the typescript package in my project (I had it in the global node_modules folder and not the project one) so I added the typescript folder to the project node_modules and than it worked\n. Is the path you stated \"node_modules/codelyzer/dist/src\" really exists? for me it was incorrect after installing like the README said (I had not dist folder in there)\n. ",
    "msc117": "Still can't find it. I see the codelyzer folder in node_modules\n. Yep, that fixed it for me. Thanks\n. ",
    "lacolaco": "Thank you!\n. Thanks! \n. ",
    "johnpapa": "is \"use-input-parameter-decorator\": true, referring to using the parameter to the @Component?\n. I agree 100% to using the property decorator for these. I find it much more readable to see the decorator next to the property. Otherwise, when you scan a component class and see a property, we do not know which are input/outputs. \nI'm thinking about the name ...  perhaps go the other way ...  use-input-output-property-decorator ???\nuse-input-parameter-decorator feels confusions as it really is use-component-decorators-input-parameter-decorator\nI'm also thinking it would be bad form to use output one way and input the other. So I'd tie these 2 together in a single setting\nthoughts?\n. should we combine those into 1 rule?\nit would odd to set one to true and the other to false ... like this ....\n\"use-input-parameter-decorator\": true,\n\"use-output-parameter-decorator\": false,\nThat would be odd.\nI'm thinking maybe ... \n\"use-input-output-parameter-decorators\": true,\n. yeah. those 2 would be nice.\n. ",
    "denodaeus": "Awesome, thanks.\n. ",
    "Hotell": "I'm already working on fix ;) PR incoming\n. ",
    "Igonato": "Wait. What if the name is just one word? Like \"person\" or \"toolbar\"?\n. Nevermind. There is #68 with more info\n. @mgechev how about an option that would allow names without a hyphen. Would be happy to make a PR if you are ok with it.\n. ",
    "Foxandxss": "Welp, I swear I looked. \n. Ah, I am blind, sorry.\n. ",
    "samvloeberghs": "@mgechev why is this removed in 3.0.0 beta? I think I missed something here :O. ",
    "colthreepv": "Reading on the documentation I'd agree with you, but having:\n\"whitespace\": [\n      true,\n      \"check-branch\",\n      \"check-decl\",\n      \"check-module\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\ninside my tslint.json (I added check-module to the angular4 starter) does not give the same result. ",
    "guojenman": "@nerumo \nI also wanted this feature today, so I quickly hacked something together.\n```\nimport * as ts from \"typescript\";\nimport * as Lint from \"tslint\";\nexport class Rule extends Lint.Rules.AbstractRule {\n    public static FAILURE_STRING = \"import from \\\"rxjs/Rx\\\" not allowed because it includes ALL operators\";\npublic apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\n    return this.applyWithWalker(new NoAllRxWalker(sourceFile, this.getOptions()));\n}\n\n}\nclass NoAllRxWalker extends Lint.RuleWalker {\n    public visitImportDeclaration(node: ts.ImportDeclaration) {\n        if (/rxjs\\/Rx/.test(node.getText())) {\n            this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING));\n        }\n        super.visitImportDeclaration(node);\n    }\n}\n```\nsee https://palantir.github.io/tslint/develop/custom-rules/ for how to use the code above\nit's my first attempt at a rule and only spent only a few minutes on it, so it's very specific to rxjs/Rx but you could imagine making this configurable. I also agree, which is why the example is a custom rule for tslint and not an addition to codelyzer\nedit: just saw the merge to tslint you linked to. thanks.. @mgechev How about enforcing the existence of changeDetection? At least this way, it's a conscious decision by the developer to say whether it is or not. This would prevent accidental default change detection by an accidental omission.. Thanks @mgechev. Weird indeed. I've created minimum reproducible project, which I should've included with the original bug report, but attached below instead.\nafter npm install,\nif you run \"npm run lint\", it will fail.\nif you run \"npm run lint-no\", which is not using codelyzer in rulesDirectory, then works.\ncodelyzer-lint.zip\nbtw, loving codelyzer.\n. @mgechev @wlngwang as a workaround while this issue is resolved, you can use this['your_prop_name'] in your template. Not ideal, but it gets the warning out of the way for now.\n```\nclass Base {\n  bar;\n}\n@Component({\n  selector: 'child',\n  template: '{{ this[\"bar\"] }}'\n})\nclass Child extends Base {}\n```. @CSchulz Just disable where needed for now by putting the below comment at the top of your file\n// tslint:disable:no-access-missing-member. ",
    "nerumo": "@guojenman thanks for the example. but @mgechev was right, this project only contains angular specific rules. so rules that apply for all kind of ts projects should be added to tslint. and some days ago they merged this feature on tslint: https://github.com/palantir/tslint/pull/1549\n. ",
    "arnaudvalle": "@cladera had the same issue but I realised their documentation example was actually incorrect.\nChange it to \"no-console\": [true, \"log\", \"error\"] and it should work ok.\n. ",
    "cladera": "It worked! \nThanks @arnaudvalle\n. ",
    "TonyCasey": "Having the same trouble and cannot solve it..\njson\n{\n  \"rulesDirectory\": [\n    \"node_modules/codelyzer\"\n  ],\n  \"rules\": {\n    \"callable-types\": true,\n    \"class-name\": true,\n    \"comment-format\": [ false ],\n    \"curly\": true,\n    \"eofline\": true,\n    \"forin\": false,\n    \"import-blacklist\": [true, \"rxjs\"],\n    \"import-spacing\": false,\n    \"indent\": [\n      true,\n      \"spaces\"\n    ],\n    \"label-position\": true,\n    \"max-line-length\": [\n      true,\n      140\n    ],\n    \"member-access\": false,\n    \"member-ordering\": [\n      false,\n      \"static-before-instance\",\n      \"variables-before-functions\"\n    ],\n    \"no-arg\": true,\n    \"no-bitwise\": true,\n    \"no-console\": [true, \"log\", \"error\", \"info\"],\n    \"no-construct\": true,\n    \"no-debugger\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": false,\n    \"no-empty-interface\": true,\n    \"no-eval\": true,\n    \"no-inferrable-types\": [false, \"ignore-params\"],\n    \"no-shadowed-variable\": true,\n    \"no-string-literal\": false,\n    \"no-string-throw\": true,\n    \"no-switch-case-fall-through\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-unused-expression\": false,\n    \"no-unused-variable\": true,\n    \"no-use-before-declare\": true,\n    \"no-var-keyword\": true,\n    \"object-literal-sort-keys\": false,\n    \"one-line\": [\n      true,\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"prefer-const\": true,\n    \"quotemark\": [\n      true,\n      \"single\"\n    ],\n    \"radix\": true,\n    \"semicolon\": [\n      \"always\"\n    ],\n    \"triple-equals\": [\n      true,\n      \"allow-null-check\"\n    ],\n    \"typedef-whitespace\": [\n      true,\n      {\n        \"call-signature\": \"nospace\",\n        \"index-signature\": \"nospace\",\n        \"parameter\": \"nospace\",\n        \"property-declaration\": \"nospace\",\n        \"variable-declaration\": \"nospace\"\n      }\n    ],\n    \"typeof-compare\": true,\n    \"unified-signatures\": true,\n    \"variable-name\": false,\n    \"whitespace\": [\n      true,\n      \"check-decl\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n    \"use-input-property-decorator\": true,\n    \"use-output-property-decorator\": true,\n    \"use-host-property-decorator\": true,\n    \"no-input-rename\": false,\n    \"no-output-rename\": false,\n    \"use-life-cycle-interface\": true,\n    \"use-pipe-transform-interface\": true,\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true,\n    \"no-access-missing-member\": true,\n    \"templates-use-public\": true,\n    \"invoke-injectable\": true\n  }\n}\n. ",
    "cindoum": "Same here...\n. ",
    "filipesilva": "I think multiple prefixes are a good idea. The CLI already allows for multiple individual apps to be present in a project (angular2-material makes use of this) so it's not hard to see that these might need different prefixes.\nIt would also help giving the user flexibility in the recommendation here https://github.com/angular/angular-cli/pull/740#issuecomment-218821516.\n. Well we support overriding the prefix so it stands to reason that prefixes shouldn't be limited via linting as well.\n. I think it makes sense. Can you give an example of how usage would be affected by the split?\nThe separate parser could also be used separately by other projects, which is very cool.. ",
    "Brocco": "The CLI currently supports a single prefix, but there have been discussions surrounding feature-based prefixes. I'm not sure if/when this will be supported by the CLI, but I don't see a reason that the CLI should restrict the analysis of a project. If I have a default prefix of foo and want to change it manually after the fact I think this tool should support it even if the CLI does not.\n. ",
    "huyph": "what are the difficulties in making the checking context dependent? \n. ",
    "pierre-hilt": "Hello,\nMaybe BAN rule from TSLint can answer your need:\nhttps://palantir.github.io/tslint/rules/ban/\n. Thanks @UnwrittenFun for the workaround :+1: . And so that points out that ngif is not check for no-access-missing-member as well. #195 . I see that is not compliant with Angular best practices. But I will need to disable completely the rule in my project without this feature.. ",
    "dweitz43": "you're welcome! and thanks for implementing this here and helping to maintain the rule as well\n. ",
    "spzSource": "Hi\nStill have this issue with 0.0.28\n. ",
    "Kobzol": "I modified the erorr message, and of course I forgot to fix the tests, so there are two new commits, you can squash them if you decide to merge this :-)\n. That's right, this message is a bit too restrictive :-) I changed it, feel free to modify it to your liking, I'm not good with error messages :-)\n. ",
    "poke": "@mgechev Seeing that the styleguide issue is closed, would there be any chance we could make this configurable in some way? By adding some 'allow-constant-values' setting to the rule?. ",
    "hughanderson4": "It's super annoying to have to create a boolean set to true, just to bind a static class to a component.  It's so much cleaner to use the host property for a static string binding.  Really feels like I'm fighting the compiler to do something \"the right way\" and the compiler is forcing me to do it \"the wrong way\".. ",
    "lazarljubenovic": "I disabled this lint rule since there is 0 argument for avoiding host when binding literals. I often bind tabindex or aria-* o role up there. It makes much more sense than polluting the class with public stuff all over the place just to bind to the host. If we could have what the issue suggests, it would be useful again.. Why don't you just the use the comments to disable linting? Whitelisting in a separate file is cumbersome, you have info about the class scattered around.\n```ts\n// why like this?\nwhitelist: [\"FooCmp\"]\nclass FooCmp {}\n```\nts\n// when you can do this!\n// whitelist\nclass FooCmp {}\nThe exact same rationale is in Angular's own styleguide for using inputs: [] vs @Input.\n```ts\n// why like this?\ninputs: ['foo']\npublic foo: string\n```\nts\n// when you can do this!\n@Input()\npublic foo: string\n\nImagine if tslint config had a whitelist for lines you want to disable it in:\n```ts\n// why like this?\n\"max-line-length\": [true, 140, {\"whitelist\": [\"path/to/file#L20\", \"path/to/other/file#L30\"]}]\n// path/to/file\n20 | (super long line)\n// path/to/other/file\n30 | (super long line)\n```\n```ts\n// when you can do this!\n// path/to/file\n19 | // tslint:disable-next-line:max-line-length\n20 | (super long line)\n// path/to/other/file\n29 | // tslint:disable-next-line:max-line-length\n30 | (super long line)\n```\nIt's always better to define things about X near X instead of a config file which references X.. @HFTSOL What about disabling the rule with tslint-aware comments in the special cases?. Do you have an outline about what is considered a \"redundant\" import? I'm interested in working on it.. Personally, I dislike too much lint configuration. If you think you have a valid reason to break the rule a lot, you should just disable it in my opinion.\nWhitelisting renames is pretty much disabling a next line with a source code comment. Otherwise it would require changing the lint configuration a lot during development, which shouldn't be the case. Config should stay more or less the same and not change frequently. \n. I went for a different character because of cases like this. How do we handle it with your proposal?. @shahraship Please use the GitHub's reaction functionality to \"vote\" on issues instead of writing the \"+1\" responses.. How would you know which ones should be extended? I don't see a benefit of extending all component in a project.. Developers expect them to be in sync. Furthermore, they can be overwritten when the parent component sets the inputs to a child. \nBy the way, Vue has a built-in run-time-dev warning for this.. Thanks for the response, guys. @wKoza's suggestion works obviously, but it's too verbose when there are many forms. I'll see to open an issue at Angular repo or check out why there are not stronger types when using FormBuilder.. Why double the work? The ngc already handles it. It's not a linting rule anymore, it's simply a compile-time error. You don't have lint rules for invalid JavaScript syntax since it will fail anyway. You don't have lint rules for types with TypeScript because that's what TypeScript is for. Why would you have this as a lint rule now?. @tatsujb I'm not sure I understand you correctly but if you're getting an error with an output named something like \"onClick\", then that's the point of the rule: it should be just \"click\".. It doesn't: https://angular.io/guide/styleguide#dont-prefix-output-properties\n\nDo name events without the prefix on.. If you want to use the on prefix for some reason, simply turn off this lint rule. This one is specifically for forbidding the on prefix, as the name implies: no output \"on\" prefix.. I don't think this belongs to codelyzer. Check out rxjs-lint-rules.. But Angular users can install the other module which already exists for the similar (same?) purpose. It's not like you're scoped on one linter plugin.. @sam-s4s It's far from terrible. It ensures two things, apart from consistency:\n\n\nnamespacing your components meaning less chances for a clash with another library;\na dash in the selector, even when your component is a single word.. It's difficult to debug or get around it at all, since the selector which Angular uses for components without a selector is ng-component.\n\nSince you don't need it for any dynamic component, including things such as modals, flash messages and routes, you could easily end up with something like the following.\nhtml\n<ng-component>\n  <h1>Title</h1>\n  <nav> ... </nav>\n  <ng-component>\n    <h2>Subtitle</h2>\n    <p> ... </p>\n  </ng-component>\n  <ng-component>\n    Modal\n  </ng-component>\n</ng-component>. I think prevent anything that leads to name.trim() == '' should be handled by Angular. I don't think it's linter's responsibility to ensure that you can use the pipe you've created. It's a direct Angular problem.. Is compiled code exactly like this with ?.? Or does it do an actual != null check?. I wonder if this should be Anguar compile-time error. In what cases does this even make sense?. Can the linter try to change it to private in a dry run of type checking and then check if it broke something? That seems like the easiest way to know if the user is using it somewhere.. It's actually worth checking out what does Angular do in case cases (ha!) are repeated... . Is there an official rationale to prefer the second one? Otherwise we should make it configurable. Developer should choose which one they prefer and the linter should make sure it's consistent.. Funny. I'd love the inverse rule. I prefer the first one. Should be configurabile I guess :smile: . Last time I checked, although these two have the same effect, they produc different code. The first one recognizes if there is a single element inside it, while the second one always uses the upoptimized version.\n(Just observing, not saying this is a bad rule - I'd love to see it as well.). I don't think you'd want to do this globally. Isn't it a too common usecase to use an enum from the component, or a number? . Idea:\n<!--\n// tslint:disable\n-->\n<div>template</div>\n<!--\n// tslint:enable\n-->\nBut indeed, it's ugly. I wonder if the disable/enable commets are configurable in tslint.... This looks like a tslint feature, not codelyzer. Nothing Angular-specific here, right? BTW I've never seen this config in action. How does it differ a node_modules from a relative import? . Just before someone tells how the second snippet is \"wrong\"... People freak out about calling functions in templates (\"because perf\") but then they go ahead and write things like in the first snippet.\nPerf-wise, assuming the function does the same logic like the first snippet, are completely equivalent. It's probably no harm if you functions are lean. Also there's no harm if you cache them. So calling functions in templates by itself is not bad, but doing so irresponsibly is. . It would be better to just split the rules across packages. Have @codelyzer/core for common helper logic, and then have each rule as a @codelyzer/rule-xxx. And then have @codelyzer/all or @codelyzer/common for the ones that are \"official\" -- maybe even name it @codelyzer/styleguide or @codelyzer/official.\nThen people could install whatever they want if they are not happy with what the official package provides.. So if your example was just the first line, it would fail because A is not a component.\nBut becase it's extended, it's fine to have a class which implements OnInit. So as long as it's used somewhere down the inheritence chain, implementing is not a lint error.\nAm I following?. Fixed.. Yup, fixed this one.. Unsure why this happens.. So I couln't find any hook or a way to collect some data and after walking is complete to do something with it. This method is called by applyWalker and it just returns the failures. I can see how to get the failures, but not how to change them after I've added them.. I can try this in a separate PR.\nSomething like: \nassertMultipleAnnotated({ruleName, source,\n  [ { char: '~', msg: 'Failure 1' },\n    { char: '#', msg: 'Failure 2' } ]). @mgechev Can you point me in the right direction? Do we have a rule which does something like this that I can look at? I have a feeling it's super obvious but I'm totally lost :sweat_smile: . caractere -> character. This needs defaults in order to guard the same way the original did. Not sure if intentional. . ",
    "Delagen": "@mgechev you are kidding me? tslint works with typescript@2.0\npalantir/tslint#1355\n. @mgechev already 3.13.0 published to npm\n. Almost week has passed. And it must not install with npm I tslint as it in peerDependencies, but semver range >=1.7.3 does not prevent it to be 2.0\n. So this not usable in production, cause nobody do writing list of this in large project. As for response #361. Close. ",
    "meriturva": "Hi @preslavsh any news here? so thanks!. @mgechev Correct! \n. @mgechev Perfect....i will test it surely!\nSo thanks!\n. ",
    "DethAriel": "Not 100% related, but I'm wondering whether other rules can take inheritance into account, too? Like the The property \"xyz\" that you're trying to access does not exist in the class declaration, although it exists in parent class. This is kinda annoying and the reason why I have to keep this rules disabled.\nBut nevermind - loloks like this particular case is described in https://github.com/mgechev/codelyzer/issues/191. @ghsyeung I would even say that it's a duplicate. Closing the issue. ",
    "pgrm": "upgrading from 3.0.0-beta.4 to 3.0.0 we seem to be getting this issue again. Is it the same or it just looks very similar? - this also happened with https://github.com/mgechev/codelyzer/issues/191#issuecomment-296660455. I have this issue again in 3.1 (up to 3.0.1 it worked fine). This is the html:\n````\n\n\n\n\n\n\n````\nand these are the errors I see:\nERROR: .../file.html[24, 17]: The method \"startDatePicker\" that you're trying to access does not exist in the class declaration.\nERROR: .../file.html[25, 17]: The method \"endDatePicker\" that you're trying to access does not exist in the class declaration.\nERROR: .../file.html[40, 17]: The method \"endDatePicker\" that you're trying to access does not exist in the class declaration.\nERROR: .../file.html[41, 17]: The method \"startDatePicker\" that you're trying to access does not exist in the class declaration.\nI don't think this is an actual issue in the html, is it the same bug in codelyzer again?. definitely no file containing codelyser or codelyzer in my repository, but will try it tomorrow, thx. upgrading from 3.0.0-beta.4 to 3.0.0 we seem to be getting this issue again. Is it the same or it just looks very similar?. To be clear, the issue was resolved for me when I updated to 3.0.0-beta.x the betas were fine, the final release now is bringing it back to me. @mgechev sry, could you please elaborate on what you meant with The language service already handles this. and There won't be support for inheritance... - does it mean that codelyzer won't need to support inheritance because it's only needed for no-access-missing-member and the language service already has support for that?. Well basically, I'd love to use https://www.npmjs.com/package/tslint-immutable - but we're not quite there yet unfortunately, that's why we started just to enforce readonly markings on anything we don't intend to change, which are mostly Observables, just to prevent if somebody unfamiliar with observables might assign a new value to a field, instead of emitting a new value.\nThose issues already happened, and that's just why we're trying to mark fields like that as readonly. . ",
    "paulshelestovich": "Still happening, same error with inheritance . ",
    "Zoomink": "This is still an issue using 4.4.4. @mgechev any suggestions?. ",
    "chapati23": "in case anyone else stumbles over this: http://www.w3.org/TR/custom-elements/#valid-custom-element-name\ncustom element spec requires a hypen to \"force-avoid\" naming conflicts with other custom elements.\n. ",
    "JohannesRudolph": "Cool, thanks a lot for implementing this!\n. I'm seeing another instance of this: The method \"popover\" that you're trying to access does not exist in the class declaration.\n```\n    <div class=\"button-row\" [ngbPopover]=\"network.error\"  popoverTitle=\"Error\"  #popover=\"ngbPopover\" (document:click)=\"popover.close()\">\n      <mst-confirm-delete-button size=\"small\" (confirmedDelete)=\"delete(network, popover)\" [isDeleting]=\"network.deleteOp | subscriptionActive\"><i class=\"fa fa-trash\"></i></mst-confirm-delete-button>\n    </div>\n\n``` \nUsing:\n    \"codelyzer\": \"^2.0.0\",\n    \"tslint\": \"~4.4.2\",. I was able to fix it myself by adding a .codelyzer.js config as documented and adding the [ngForm] selector: \n```\nmodule.exports = {\n// Custom predefined directives in case you get error for\n  // missing property and you are using a template reference\n  predefinedDirectives: [\n    { selector: 'form, [ngForm]', exportAs: 'ngForm' },\n   ...\n  ],\n}\n```\nYou might want to consider adding this to the defaults as its an angular core directive (as opposed to the additional material design selectors that are in there too). . ",
    "httpdigest": "When I fix the source syntaxKind.js and simply add another case like this, it works:\nJavaScript\nelse if (/2\\.1\\..*/.test(ts.version)) {\n    cachedKinds = SyntaxKind_2_0;\n}\n. Is this still being worked on? Using codelyzer with TypeScript 2.1.0-* does not work with the following error message (as mentioned in the first post of this issue):\nError: Unsupported TypeScript version: 2.1.0-dev.20160919\n    at Object.current (D:\\...\\node_modules\\codelyzer\\util\\syntaxKind.js:1796:23)\n    at SelectorNameValidatorWalker.validateSelector (D:\\...\\node_modules\\codelyzer\\selectorNameBase.js:75:37)\n    at SelectorNameValidatorWalker.validateDecorator (D:\\...\\node_modules\\codelyzer\\selectorNameBase.js:70:18)\n    at Array.forEach (native)\n    at SelectorNameValidatorWalker.visitClassDeclaration (D:\\...\\node_modules\\codelyzer\\selectorNameBase.js:58:33)\n    at SelectorNameValidatorWalker.SyntaxWalker.visitNode (D:\\...\\node_modules\\tslint\\lib\\language\\walker\\syntaxWalker.js:264:22)\n    at D:\\...\\node_modules\\tslint\\lib\\language\\walker\\syntaxWalker.js:459:63\n    at visitEachNode (D:\\...\\node_modules\\typescript\\lib\\typescript.js:12465:30)\n    at Object.forEachChild (D:\\...\\node_modules\\typescript\\lib\\typescript.js:12625:24)\n    at SelectorNameValidatorWalker.SyntaxWalker.walkChildren (D:\\...\\node_modules\\tslint\\lib\\language\\walker\\syntaxWalker.js:459:12)\n. ",
    "jppellerin": "Any news on this?  (Same issue with any version >= 2.0.0)\n. @mgechev : Yup... user error on that one.  Apologies.  Not sure why it didn't upgrade with ^0.0.23... but forced it to 0.0.26 and it worked.  Thank you.\n. ",
    "huerlisi": "Wow you're fast! That's an incredible nice experience, thanks a lot!\n. ",
    "arkon": "@mgechev Is there any reason why the peer dependency is specifically version 3.9.0?\n. ",
    "mnn": "Oh my god, just spent half an hour figuring out what is causing build suddenly crashing and it turns out it's missing parentheses :(. What a useless crash message.. ",
    "Doomape": "I am having the same issue, in VS code i thought it's some kind of a bad configuration on my side but when i use  \"extends\": \"tslint:recommended\" i get errors and warnings back so i am not sure what's the issue. \n. ",
    "kputh": "I'd argue that these presets are codelyzer-specific because they build on rules provided by codelyzer.. ",
    "NiKlimenko": "@mgechev any updates about this suggestion?. @wKoza during the run the angular-cli linting: ng lint.\ntslint.json:\n{\n  \"extends\": [\"tslint-angular\", \"tslint-no-unused-expression-chai\"],\n  \"rules\": {\n    \"directive-selector\": [true, \"attribute\", \"app\", \"camelCase\"],\n    \"component-selector\": [true, [\"attribute\", \"element\"], \"app\", [\"kebab-case\", \"camelCase\"]],\n    \"angular-whitespace\": [true, \"check-semicolon\"]\n  }\n}. Just realized that it looks like my code causes these warnings, if so then feel free to close issue.. ",
    "ohrrkan": "I join kputh. Those are codelyzer specific. The goal is to provide some preset like tslint configuration preset : https://palantir.github.io/tslint/usage/configuration/\nlike a \n```\n  \"extends\": [\n    \"tslint:all\",\n    \"codelyzer:all\"\n  ],\n```\nor a\n\"extends\": [\n    \"tslint:all\",\n    \"codelyzer:recommended\"\n  ],\n. ",
    "michaeljota": "@mgechev Have you though about this? I think it will be useful to include the recommended rules to be active, and a great way to have the Codelyzer Verify. . The no-unused-vars rule will be deprecated in tslint 4. See #1481. \n. Still, the no-unused-vars will rise only for private members, and as @dzonatan said, all template binded properties should be public. (There is a rule for that already) . Thanks! Will follow this then. \ud83d\udc4d . @mgechev so this will support an array of suffixes? Thanks you. \ud83d\udc4d . I think README.md should be updated with an example for using both, the single syntax and the array syntax, or at least mention it. :). Do you mind if I do it? . Reviewing this now, and still the docs lacks of examples of how to pass an array. Even the JSON Schema is lacking this options, throwing warnings in the tslint.json file if the array is passed as an option. (This is mostly because it's not an array of strings, but n strings. . I was just doing that, but found the actual documentation. I think that maybe the problem. As is right now it seems like all the docs are in README, cause there is no link to the documentation, nor a mention of it. Maybe less information of usage in README and instead a link to the docs? . I think this should be more like creating a proper TSLint extension for VS IDE, instead of creating a Codelyzer extension.\n. Thanks!\n. @mgechev I see the new option. I would want to suggest to this option to accept an array of suffixes, cause in a project it may get sense to have more than one suffix. . I did not forget about this, I just wanted to give a better example and be clearer about it. Thanks you for the guidance and the assistance. . I don't think this would be a easy configuration model, but still would be so useful to use this. \nMaybe we can use something like\njson\n  \"check-file-name\": [\n    true,\n    {\n      \"type\": \"component\" | \"directive\" | \"pipe\" | \"service\" | \"module\" | \"model\" | \"*\",\n      \"rule\": \"kebab-case\" | \"camelCase\" | \"PascalCase\",\n      \"suffix\": \"*\" // default: same as type\n    }\n  ],\nUnderneath this could have some default configuration that follows the standard guide style, as usual. \njson\n  \"check-file-name\": true,\nBut allow configuration per objects.\njson\n  \"check-file-name\": [\n    true,\n    {\n      \"type\": \"component\",\n      \"rule\": \"PascalCase\",\n      \"suffix\": \"Cmp\"\n    }\n  ],\n\nThis would look for AnyTitleCmp.ts files and ensure there is an AnyTitleCmp class using @Component decorator (If that is something is the scope of this rule).\n\nOr just set the rule or casing that would check that this rule would check\njson\n  \"check-file-name\": [\n    true,\n    \"PascalCase\",\n  ],\n\nThis would look for standards files and ensure they are using PascalCase, and there is a class using the corresponding decorator.\n. Just want to say I hate the feature request process that Lodash has. But, I understand you would like to close some issues if they won't be implemented anytime soon. Thanks for the notice. . @mgechev I second the question. How can this be disabled just for testing? (Aside for the obvious solution of turning it off in a comment) . @mgechev Just for you to notice, that Angular CLI seems to ignore the linterOptions options setting of tslint. I know that this is also an Angular CLI problem, but the solution of having two tslint config files won't work. Thanks any way. . angular/angular-cli#11951. I had this issue with some regular variables, when two or more interpolations were close, and I have to say it seems to reproduce more by using the translation key and pipe used by ngx-translation. Update: This seems like is reproducible when the interpolation are not indented with the expected amount of spaces. \n\nInput:\nhtml\n<div>\n {{ variable }} <!-- Just one space -->\n</div>\nOutput:\nhtml\n<div>\n {{ { variabl }}} <!-- broken -->\n</div>\nI'll try to test more and give you a reproducible template, but seems like it was related to this. . I'm sorry I didn't reply earlier. My OS is Windows 10. I was using the cli with powershell, calling it from a npm script. . @rafaelss95 I'm using latest of each, but Angular I'm using latest from 5.x. I don't sure if I can share the whole file, but it's just extending recommended, and for the rules of codelyzer the same, just copy pasted the recommended. . Also, don't think is important, but using tslint-prettier to disable rules that Prettier can handle. Since Prettier can't handle html yet, this rule is not disabled. . Prettier just release 1.15 with support for Angular templates and fix spaces between the declaration and the interpolation. . ",
    "ValeryVS": "@mgechev \nLooks good.\n\"./heroes/bar\": [\"bar\"] will redeclare prefixes to this drectory, so using toh or app will not be valid.\nIf we want to use some default prefix, we need to add it.\njs\n\"selector-prefixes\": {\n    \"./\": [\"app\", \"baz\", \"demo\"], // \"demo\" is one of default prefixes\n    \"./heroes\": [\"toh\"], // we can't use \"demo\" here\n    \"./heroes/bar\": [\"bar\", \"demo\"], // but here we can\n    \"./humans\": [\"hu\"]\n }\n. ",
    "TomDemulierChevret": "It would be nice to allow the same behaviour for sufixes.\nIn Ionic2 app, most of the time you use the \"Component\" suffix in /components and \"Page\" in /pages.\nIt would reinforce the multi-suffix approach.. Can you confirm that currently (beta3) it's not possible to specify an array of suffixes in tslint.json ?\nSince Ionic 2 use both \"Component\" and \"Page\", we still got an error.\nI saw there was a more recent commit allowing this.\nIs the master version stable enough to use or do we need to wait for beta4 ?\nThanks. ",
    "stocksr": "the tslint extends feature works for this: \nI simply add a tslint.json file in the relevant folder like this \n```\n{\n    \"extends\": \"../../../tslint.json\",\n    \"rules\": {\n        \"directive-selector\": [true, \"attribute\", \"av\", \"camelCase\"],\n        \"component-selector\": [true, \"element\", \"av\", \"kebab-case\"],\n        \"pipe-naming\": [true, \"camelCase\", \"av\"]\n    }\n}. Many thanks - I guess I was looking in the wrong place.. ",
    "rafaelss95": "@mgechev is there anything that hasn't been addressed for this issue yet or we can just remove the votes needed label?. Just want to point that a similar rule has landed recently in tslint: file-name-casing.\nAlso, there's some suggestions to improve this rule: https://github.com/palantir/tslint/issues/4050 (for exclusions) and https://github.com/palantir/tslint/issues/4071 (for pattern matching).. Oh, thanks @wKoza . @mgechev  Thanks!\nI picked this name from docs. @mgechev extending to this... the same happens if you implement/use ngOnInit in a service.. @wKoza do you have plans to extend this rule to other decorators, like @Pipe and others?. Well, as I mentioned in the case of @Input it'll throw that generic error, and devs may get stuck with this simple thing. The same happens for @Output.. Maybe it worth to create a new issue for this, but since the title is a bit generic, let's report it here:\nHaving the following:\n``\n@Component({\n  ...\n  template:\n\n     ...\n    \n  `\n})\nexport class AppComponent {\nconstructor(private authService: AuthService) { }\n}\n```\nResults in:\n\nYou can bind only to public class members. \"authService\" is not a public class member.. @mgechev @wKoza: I'm interested on implementing this, however, I'm really newbie to the linters world.\n\nI thought we could do something like:\n\nStore all @Input names in an Array using visitNgInput;\nLoop over all assignments in the class and check if the variable that is being assigned is present on that Array; (By the way, I tried to use visitPropertyAssignment and I had no success, am I missing something?)\n\nThe problem is since we'll loop over all the assignments, I'm not sure how that would impact performance.\nSo, the question is: What would be the most correct way to do this?\n\nAfter more thinking, I think we could have a rule to enforce @Input and @Output (as proposed in #515) to be readonly.. @franekp @mgechev I'm not sure this breaks AOT compilation. Maybe in past... idk, but I always make my @Inputs readonly and it doesn't break AOT.. Is it still an issue with the latest version?. @mgechev I just noticed that min-lines templates/styles weren't handled on that PR. Does it makes sense to implement this?. What should happen for the following case?\n@Input()\nget text(): string {\n  return 'hey';\n}\nset text(value: string) {\n  this._text = value;\n}\nprivate _text: string;. @mgechev I'd like to implement this (actually I've already started). I think we can use more generic approach, to enforce single line for Output, ContentChild, ViewChild... and so on. What do you think? If so, about the name.. prefer-decorator-inline, prefer-decorator-single-line?. Not related to this PR, but what's the standard in repo: 2 or 4 spaces?. Related to #135. Btw, any news on integrate material2#validateDecoratorsRule here?. @mgechev @wKoza \nCurrently we have the following rules to (dis)allow decorator properties values:\n| List of rules |\n|:-:|\n| no-host-metadata-property                                 |\n| no-inputs-metadata-property                              |\n| no-outputs-metadata-property                            |\n| no-queries-metadata-property                            |\n| no-pipe-impure                                                      |\n| prefer-on-push-component-change-detection  |\n| use-component-selector                                       |\n| use-component-view-encapsulation                    |\n... and this list is growing...\nWhat's your opinion about implement something like material2#validateDecoratorsRule (it was already mentioned in this and other issues like https://github.com/mgechev/codelyzer/issues/135)?\nA default config would be:\nJSON\n{\n  \"rules\": {\n    \"validate-decorators\": [\n      true, {\n        \"Component\": {\n          \"changeDetection\": \"\\\\.OnPush$\",\n          \"!encapsulation\": \"\\\\.None$\",\n          \"!host\": \".*\",\n          \"!inputs\": \".*\",\n          \"!outputs\": \".*\",\n          \"!queries\": \".*\",\n          \"selector\": \".*\"\n        },\n        \"Directive\": {\n          \"selector\": \".*\"\n        },\n        \"Pipe\": {\n          \"!pure\": \".*\"\n        }\n      }\n    ]\n  }\n}\n... and of course we could allow users to customize it according to their project standards, and why not also their decorators.. Thanks, @mgechev.\nSomething that left me in doubt when I was implementing this rule was how to name this. The name of the rules that contain the word lifecycle treated it as two separate words: contextual-life-cycle anduse-life-cycle-interface, however, Angular's docs calls it just \"Lifecycle\".\nSo, what's the correct one? :). Done. @mgechev @wKoza.. @mgechev Do you pretend to publish this in 4.4.0 - Ken Thompson?. Oops, my bad. I just noticed that it was published, just not mentioned in CHANGELOG.. @wKoza Do you have any name in mind for this rule?. I like this name. I'm implementing it right now. Do you think this rule needs to be made in a generic way to provide flexibility or only for DoCheck and OnChanges hooks?. I've addressed your comments, @mgechev @wKoza.. I've fixed it. @wKoza. Do you have any idea in mind to this rule?. Travis is currently failing and I'm not sure what the correct fix would be, but it looks like the lint-staged needs node >= 6 and travis is currently using node 5 and I also noticed that it's using older versions of rxjs/zone.js.. I've switched to the latest LTS and the error is different now:\n\n/Users/travis/.travis/job_stages: line 166: shell_session_update: command not found. @wKoza husky is used to manage git hooks. In this case, it'll run what I've defined in lint-staged (format and lint fixes) and also will prevent commits if the tests aren't passing.\n\nOn other hand, I can remove it since the CI will fail anyway in a PR, for example. Let me know what's your decision.. Yes, since I've installed Prettier in my extensions, it always format when I save a file. Anyway, what is confusing for you?. @mgechev Sorry for the delayed response. To read animations parameter, I've followed what you did for styles and template. The intent of this PR is just to add another option for the existent rule (max-inline-declarations): limit animation lines. We could increase the default lines limit for animation.. bump @mgechev. It's just the wording, not the rules. I did this because in some places we call it life cycle and others lifecycle. Anyway, what about change all to life cycle and when change rule names we revert all back to lifecycle?. IMHO, this rule should prevent this as it does right now because any parent's lifecycle should be called by Angular itself. See https://github.com/angular/angular/issues/23091 and its related issues.. It's a little bit strange because at some point it worked according to this issue.\nHowever, I've to agree with you, it makes sense to explicitly call using super as we does for every parent class.. Check this https://github.com/mgechev/codelyzer#disable-a-rule-that-validates-template-or-styles. I think you should only fix the no-life-cycle-call on this PR and make a separate one for build changes.. @mgechev I did mark this as WIP because I want to know what's your position about this.. Yes, the proposal was initially to replace the currently no-output-on-prefix. It surges on a team I'm working on as we needed to avoid other prefixes than just on.\nTaking the fact that we're talking about prefix, what about accept regex in no-input-prefix?. @mgechev:\nAbout the name: not sure if it's the best, you can suggest another one.\n\nI implemented it for all \"property\" decorators, does it makes sense to add it for \"method\" decorators, as @HostListener, for example?\nIt would fail in this case:\n@HostListener('keydown')\nnewColor() {\n  // something nice here\n}\n... but not for this:\n@HostListener('keydown') newColor() {\n  // something nice here\n}\nIf so, what would be the best way to setup?\n\"prefer-decorator-inline\": true // no difference for methods or properties decorators\nvs \n\"prefer-decorator-inline\": [true, \"properties\", \"methods\"] // you can disable one of them based on your needs\n\nI've tried to verify the case I described in https://github.com/mgechev/codelyzer/issues/549#issuecomment-384494828, however it seems that this case does not trigger either the visitPropertyDecorator method or thevisitNgInput method, so I'm stucked.. @mgechev There are two leftovers that I was not able to change because definitely broke some tests:\n1st.:\nhttps://github.com/mgechev/codelyzer/blob/d4bf62d8134075f0ed1f1fa3d83b5be9f7c1918d/src/angular/templates/basicTemplateAstVisitor.ts#L182-L187\nChanging this:\ntemplateVisitor.getFailures().forEach(f => this.addFailure(f));\nto:\ntemplateVisitor.getFailures().forEach(f => this.addFailureFromStartToEnd(f.getStartPosition().getPosition(), f.getEndPosition().getPosition(), f.getFailure(), f.getFix()));\n... broke 16 tests.\n2nd.:\nhttps://github.com/mgechev/codelyzer/blob/d4bf62d8134075f0ed1f1fa3d83b5be9f7c1918d/src/angular/sourceMappingVisitor.ts#L105-L108\nRemove this deprecate call broke 66 tests.\nCould you give me a hand on that?. @mgechev so... that was what I asked above, if I change in these 2 places I mentioned, the tests break, I really don't know why.. I think you don't understand what I mean. I'm trying to say that if I change these leftovers deprecated calls it break some tests. See https://github.com/mgechev/codelyzer/pull/587#issuecomment-385220278. @mgechev I've pushed the changes for those leftovers. Now you can see the full log error in travis.. @mgechev After many unsuccessful attempts trying to replace the two problematic places, I think the best choice for now is to disable the rule for 2 calls:\n\nsourceMappingVisitor.ts[107, 18]\nbasicTemplateAstVisitor.ts[186, 53]\n\nThat said, this PR is ready for review.. bump @mgechev.. @mgechev I just missed this discussion... now that Ivy is closer, what's your opinion for this rule?. @mgechev @wKoza while I do understand why it's deprecated, I can still see useful things in it such as enforcing prefixes like we do for component and directive.\nCan't we just deprecate the actual configuration?\n\nA new configuration could be like this:\n{\n  \"rules\": {\n    \"pipe-naming\": [true, \"^ngx?[A-Z]+\"]\n    // or less generic, as an array\n    \"pipe-naming\": [true, \"ng\", \"ngx\"]\n  }\n}. Does it makes sense to create another rule now? Or better wait for complete removal of this?. Well, that\u2019s how the rule works actually. It just enforces that you must leave whitespaces inside of the import statements curly braces, but not the quantity.. So, @wKoza @mgechev, should the current behavior be changed to report failures in case of multiple spaces?. Done.\n\nNot related to this PR, but don't you think it's a good idea to add coveralls to this repo? It seems to be a really great tool to ensure that we cover more specifics parts of a rule, for example. Also, it can be integrated with CI.. @intellix Currently, the rule only cares about spaces relative to curly braces.. @mgechev Do you have any idea on how to start the implementation for this rule?. @mgechev Thanks :) It was a minor formatting problem. For some reason, the lint-staged is not running before commits :(. ~I'm not sure why a test case in angularWhitespaceRule is failing on appveyor. All tests are working both on my machine and on travis.~\nEverything is fine now.. @mgechev Just for reference: I was not able to update @types/chai, chai, chai-spies and source-map because this broke some tests.. @mgechev does it really need votes? It's just a docs change to show code examples. TSLint already does this.. I've started to looking at this issue and I found what's the problem:\nhttps://github.com/mgechev/codelyzer/blob/5a84041253dc07ffd6445bef5d6d6733ff43fecd/src/templatesNoNegatedAsyncRule.ts#L28\nFor the first template above the results are:\nendLeftSpan = 28\nstartRightSpan = 33\nthis.codeWithMap.code.slice(endLeftSpan, startRightSpan); returns \"t a o\" (from *ngFor line).\nIt seems that there is a real problem with multiline templates. It's only getting the code from the first line, I really don't know why.\n\nQuestion:\nWhy do we always assume that the expression is being compared to false? What if the user put ! trying to represent a nil check (null/undefined)?\n```\n@Component({\n  selector: 'app-test',\n  template: 'Some content'\n})\nclass TestComponent implements OnInit {\n  data$: Observable;\nngOnInit() {\n    this.data$ = someServiceThatCanReturnUserOrUndefined;\n  }\n}\n```\nIn this case, an user is trying to use ! to check if Observable emits a undefined or even a null value, so the expression could be changed to:\n```\nSome content\n or \nSome content\n```\n... instead, we replace the expression with === false, what brings an unexpected behavior, a completely unsafe replace.\n\nAlso, there are real failures related to the current replacement:\n<div *ngIf=\"!(foo | async)\">Something</div>\n... After running --fix:\n<div *ngIf=\"(foo | async) === false >Something</div>\n<!-- final quote removed and extra whitespace added -->\n\nIMHO, we should remove the \"fix\" option for this rule, since we can't assume what the \"expression\" is trying to do... or maybe leave only the replace for strict equality (== false -> === false).\n@wKoza @mgechev let me know your thoughts.. bump.... @mgechev I'm still trying to find a valid use case for this rule, do you have one?\nHere...\nhttps://github.com/mgechev/codelyzer/blob/5a84041253dc07ffd6445bef5d6d6733ff43fecd/src/templatesNoNegatedAsyncRule.ts#L50\n... we say \"Async pipes can not be negated\". Why not?\nTake a look at this sample:\n@Component({\n  selector: 'app-root',\n  template: `\n    <div *ngIf=\"!(obs$ | async)\">\n      Loading... <!-- this will be displayed until the observable emits a value -->\n    </div>\n  `\n})\nexport class AppComponent  {\n  obs$ = observableOf([1, 2, 3]).pipe(\n    delay(2000) // simulates an http request\n  );\n}\nWhat would be the benefits of an explicit check like this <div *ngIf=\"(obs$ | async) === null\" instead of what I did above?\nSource sample. @mgechev just to complement: unless there's a valid case that this rule could be useful, I'm voting in favor of deprecate this rule.. @mgechev Friendly bump, have you looked?. @mgechev better close this and create a new issue about deprecate this rule or keep the discussion here?. @mgechev Okay, can we just update the following failure message?https://github.com/mgechev/codelyzer/blob/bc5a7ec5fd94e665423c77cb4c08fa98d2e2dfe9/src/templatesNoNegatedAsyncRule.ts#L68. @wKoza can you review?. @Wkoza Hmm, yes, I noticed this problem now. I've pushed the changes you requested.\n\nThinking more about it... should we exclude all empty lines from calculation or only the first and last? And what about comments? I'm asking because someone, for example, requested in https://github.com/palantir/tslint/issues/3672 to max-file-line-count not count comment lines.\nts\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n     something here\n     <!-- a comment here -->\n    </div>\n  `,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {}\n. I do like the idea of always ignore texts containing only numbers and/or symbols without extra config... however we still expect a failure for this case <div>\u00e9\u00e1\u00ed\u00e7</div> (only special chars), right?. Some people, such as Material2 team, doesn't like whitespaces between the interpolations, so it could be another improvement: add some configuration like never, so that would validate it to have no spaces.. Thinking more about it... do we really want to messing with formatting rules in a linter? Well, while I can imagine how this rule could be useful in many cases, I really think it's more appropriated to left this kind of rule to a formatter, like Prettier*, for example.\nIMHO, this project shouldn't mess with spaces and formatting in general. Formatting rules are always a pain and it also never satisfies every people.\n* Sadly, Prettier still doesn't format HTML.. Update: Now you can use Prettier to format HTML :)\n@mgechev Let's remove the votes needed label here?. @mgechev Ah, yes I have :). Are you sure that your config are not being overwritten in <your-project>/src/tslint.json? It's a new file that came in angular-cli v6 and maybe you didn't notice that.. @mgechev @wKoza I'm implementing this rule (actually 95% complete) and some questions came to my mind, can we discuss this?\n1 - Is it good/safe to have a fix for this rule?\n2 - Considering the following cases:\nHTML\n<div class=\"{{myClass}} class1 class2\"></div>\n<source src=\"{{basePath}}{{endpoint}}\" type=\"video/mp4\">\n2.1 - Should we report failures if there are multiple interpolations? Maybe it should be configurable? How would be this configuration?\n  2.2 - If the answer above was yes: How the fix would be done for this? Or for this specific cases the fix wouldn't be applied?\n3 - Considering the following case:\nHTML\n<source bind-src=\"source\" type=\"video/mp4\">\n3.1 - Should we report failures for this case?\n4 - As I'm bad with names, I want some suggestions from you... so far I'm calling it template-prefer-property-binding.\n\nor...\nSince Angular does not indicate or counter-indicate none of the three possible \"forms\" (property binding, interpolation or canonical form), maybe we could leave this configurable (only one of three possible ways could be passed) so that users can choose the best option according to the standard of their projects. This could be like this:\n```JSON\n{\n  \"rules\": {\n    \"template-binding-expression\": [true, \"canonical-form\"]\n// or\n\"template-binding-expression\": [true, \"inteprolation\"]\n\n// or\n\"template-binding-expression\": [true, \"property-binding\"]\n\n}\n}\n```\nIn this case, there's no automatic fix.. I'm extending BasicTemplateAstVisitor and using visitElementProperty to try to distinguish cannonical-form from property-binding, but it seems that it's not possible. Thoughts @mgechev?. Hey @wKoza after having created this issue (almost an year ago), I noticed that Angular does not indicate one of the forms, so I guess we shouldn't also. That's the reason why I've proposed to leave it configurable so that users can choose the best option according to the standard of their projects.\nI think the best definition for this rule is: Let's standarize one form in the project, no matter what. :). Only element properties for now... @wKoza could you review?. @wKoza Ready for another round :rocket:. @wKoza Done. Can you apply the label bug here?. I'm afraid we can't add this option without breaking changes. Thoughts @mgechev?. I was about to open an issue to suggest the same thing.\n@mgechev can I work on it?. @mgechev Sry for the delay, I'm a little busy this week, but I hope I can send a PR tomorrow. :rocket:. @mgechev is it a bug? I thought it was an enhancement. That's why I separated this from #627.. Thanks, @mgechev :). Ping @wKoza.. According to docs:\n\nThe Angular safe navigation operator (?.) is a fluent and convenient way to guard against null and undefined values in property paths.. Hmm, yes. It could be a compile-time-error.... @lazarljubenovic, here is a demo. It just doesn't care about duplicate switch statements, besides, it renders all duplicates, it also allows duplicate *ngSwitchDefault.. > Is there an official rationale to prefer the second one?\n\nAFAIK, no, it's just a sugar syntax... and yes, I totally agree, it could be configurable.. Good catch! When I created this issue I was just wondering about the above use case, forgot totally about what you described. Now I'm unsure about this would be a good rule.. Hey @mgechev :), what about make these changes before Angular 8?. @mgechev Let's remove the votes needed label from issues that have already been finalized? It's a little confusing.... bump :alien:. @dominique-mueller About input attributes, do you have any source that we can find a complete list? For output native, we already a have one now :). Looking at the above lists.. it seems it's kind of weird restricting people from naming their inputs as disabled,value, for example...\n. > We should restrict to the \"Global Attributes\".\nHmm.. let's imagine a component that wraps the input behavior with some predefined styles, etc., like this:\n@Component({\n  selector: 'app-input',\n  template: `\n    <input [type]=\"type\" [id]=\"id\">\n    <!-- more and more code -->\n  `\n})\nexport class InputComponent {\n  @Input() id: string; // See below\n  @Input() type: string;\n}\nSince id is a 'global attribute', we should have a failure there, right? Btw... how should people name it?. Interesting.. while I agree with the specific case mentioned in OP, I'm not sure what can be done.\nIf inputs kebab-cased become allowed, what  will prevent something strange like @Input('my-input') myInput: string;?\nAre any other cases besides the aria-* family? If not, we could create a \"whitelist\" (not sure where we could retrieve all the aria-* attributes) with them and don't report warnings.\n@mgechev thoughts?. Whitelist only for aria-* family then? Btw, I found this reference.. @mohammedzamakhan you're right. When I created this issue I was just thinking in the app's own providers :/. LGTM.. @mgechev can you tell me how is the changelog being generated currently? It seems that it's picking the title of the issue and generate strange things like: [Feature Request] Enforce single line @Input decorator instead of picking the commit message (with the rule name).. Good catch! Could you add a test containing a case like this you mentioned?. LGTM!. @loktionov129 Thanks for your suggestions.\nWe already use lint-staged for running tslint and prettier, however commitlint has another purpose: validate commit messages to generate a good/useful changelog.\nWhile I do like the idea of semantic-release, I don't think it's a good idea to add it here, because not every time we accept a PR, we want to make a release.. Yep, I know, and also when a PR containing a breaking change is accepted. I believe we don't want this behavior here, @mgechev could you give your thoughts?. Codelyzer supports up to the latest version of TS supported by the Angular, which is so far I am writing this comment, 2.7.2.. Can you show the code of the file which throws this error? Also, have you checked if it's still an issue with the latest version (4.4.2)?. I guess the right fix would be generating docs up to date with latest version... @mgechev can you tell me the steps to do this? I noticed that there's a script called buildDocs (which isn't working at the moment) that generates HTML docs, however what about all other files in docs folder?. @michaeljota I tried to reproduce this and I hadn't success. Can you share some more info? Your tslint.json, codelyzer version, tslint version, angular version, etc.. See #719.. It's a nice rule... however I have one question: Doesn't it need to follow the current process of voting before we can merge?. Haha, thanks :) Btw, it's ready for the next round when you have time \ud83d\udca5 . @mgechev Sure! What about my three questions below the table?. @mgechev I was talking about the questions in the PR description (below the table) :). Hey @mgechev I've updated the code and the table in OP with the new proposed names.\n\nI took a look in (almost) all the rules today and found some more rule names that can be improved:\ncomponent-change-detection:\n  - Suggestions:\n    - no-component-default-change-detection\n    - prefer-component-change-detection-on-push\n    - use-component-change-detection-on-push\nrelative-url-prefix:\n  - Suggestions:\n    - prefer-component-relative-url-prefix\n    - use-component-relative-url-prefix\nno-attribute-parameter-decorator:\n  - Suggestions:\n    - no-attribute-decorator\n    - prefer-input-over-attribute-decorator\n\nLet me know your opinion :). >... About the relative prefix, it's still not obvious what's about. Maybe we should be more explicit about it.\n@mgechev Do you have any suggestion?. > Excellent! Would you only add this rule to the readme?\nIsn't it better to add it to README only when we publish a major version?. @wKoza @mgechev @mohammedzamakhan I moved the changes from PR #754 (README.md andCONTRIBUTION.md) to here. That way, there is no risk of messing documentation before we release a version with these new/modified rules.. angular-whitespace is deprecated. See #719.. > @rafaelss95 , I've just seen that @Attribute is a bad practice here\n@wKoza Yep, it's supposed to be, however the rules are independent, right?. I agree that instead of using the non-null assertion operator, we should check all these properties correctly!\nHowever, I disagree on the point of returning class names (not just class names) in failure messages because I don't see much value in returning them since the lint already returns the exact line where failure occurred accompanied by a (descriptive) message.\nI really prefer to return generic/direct messages without polluting the output with class/variable names, as TSLint does, for example.\nOne example is use-pipe-transform-interface:\nCurrent message: The CLASSNAME class has the Pipe decorator, so it should implement the PipeTransform interface\nDirect message: (or something like this): Classes decorated with @Pipe decorator should implement PipeTransform interface.\nI hope you got the idea.. Nice refactor, @wKoza!\nWhat about also removing attribute names from the errors (for the reason I exposed in #778)?\nEx. (noOutputNativeRule):\nCurrent message: \"The output property \"%s\" should not be named or renamed as a native event\"\nProposed message: \"Output properties should not be named or renamed as a native event\" (... or something like this, I think you got the idea). @mgechev @wKoza maybe you misunderstood what I said. I did not say to remove all the names. I tried to say that we could remove redundant attribute names for some messages, as in the example I cited above and copied below.\nSome of them are important. In other words, we must investigate each case separately.\n\nEx. (noOutputNativeRule):\nCurrent message: \"The output property \"%s\" should not be named or renamed as a native event\"\nProposed message: \"Output properties should not be named or renamed as a native event\" (... or something like this, I think you got the idea)\n\nReason: The failure comes with the exact line that fails, where the user has the property name.. @wKoza \nI guess it's unmaintainable add a spec to check if default classes \"break the linter\" for each rule. Can't we add it in a single place?\nBtw, I've wrote some comments/suggestions... can you rebase it, so I can send my review updated? Also... if possible, can you separate into small commits? It's kind hard to review this :/. IMHO we shouldn't close this PR. It's an important change and I think we can get everything done before the next major version. The review could be faster if you can separate into small commits.... Ping @mgechev . Done, @mgechev.. @mgechev @wKoza \nLook at this spec:\nhttps://github.com/mgechev/codelyzer/blob/049be667a6c91940b5d203d7e7e09af4ef50b550/test/preferInlineDecoratorRule.spec.ts#L31-L65\n\nWhen I implemented this rule, I had to use assertFailures because when I tried to use assertMultipleAnnotated, I got no failures. Do you know why?\n... Btw, the same happens with template-no-call-expression: if you test it using non null assert, for example, like this:\n{{ obj!.nested1() }}\n... you'll see the failure being reported (in the rule), but in the spec, the error isn't being caught.\nAny thoughts?. Some left minor comments and LGTM.. Nice catch! \u2705 \nI guess this change also fix the contextual-decorator, right? If so, can we add respective tests to it and rephrase the commit as well?. LGMT!. Good catch! I've fixed it, please take a look.\nBy the way, do you think we should add some success tests to catch false positives, like myOnInit or maybe ngOnInitAnyName?. Hey @wKoza, I agree, could you suggest a better rationale?. Please, do not hesitate to suggest better descriptions :). I've added it. Btw, none of the four occurrences that I found, propagate the call super.visitNgOutput.. In all occurrences that I found, we never check if parent is null.. A rationale? :). Not sure about this default limit.... I think you can only have one FAILURE_STRING (and let's remove the unnecessary :string):\nstatic FAILURE_STRING = 'Avoid explicit calls to lifecycle hooks.';. nit: extra new line.. nit: extra new line.. I didn't mention that it's impossible. I'm suggesting that you remove and keep only one failure. :). I don't mark the if block, but the block between let and const variables.. Nah, it's just a nit. :). nit: break line before it. Also, shouldn't it be ...an input...?. an input?. Instead of casting to any, what about (input.expression as ts.CallExpression)?. To be always sync with the rule's name and also metadata, I'd refactor it to:\n```\nconst { FAILURE_STRING, metadata: { ruleName } } = Rule;\nconst getFailureMessage = (className: string, propertyName: string): string => {\n  sprintf(FAILURE_STRING, className, propertyName);\n};\n``. Done.. Done.. Fun fact:lengHtwas mispelled (2 times in this class) :). Done. I hope it's clear now :). I had to change the failure message to reflect the new behavior. What do you guys think?. Done.. No problem, I'll put it again..true-> It'll report a failure for every decorator if it doesn't fit the rule.\npassing options -> The options are the blacklist decorators. All decorators present on thatlist, won't be reported, in the case above, you won't receive any failure about@HostListener`.\nTo be more clear about the examples, I'd strongly recommend we use the code examples (#606).. No, it isn't. Fixed.. Fixed.. Fixed.. @wKoza With this, we can make sure the rule is disabled if the options length is === 0 or > 3 as it's supposed to be.. I think we should disable this rule also, if either the styles or template are negative values.. Yep, it has been deprecated for over an year. PR https://github.com/palantir/tslint/pull/1952. Yes, deprecation rule requires type information.. @mgechev There are only few some places that forced me to disable this. I can enable this and initialize properties properly or even use a ! to indicate that I want hack that property. Let me know what should I do.. @wKoza Updated.. The property controller always exists according to:\nhttps://github.com/mgechev/codelyzer/blob/da0f553fe7d580f38907f9baa9124cbc55e37c96/src/angular/metadata.ts#L23-L27\n... and it makes sense, because once we instantiate a DirectiveMetadata, we pass all properties:\nhttps://github.com/mgechev/codelyzer/blob/da0f553fe7d580f38907f9baa9124cbc55e37c96/src/angular/metadataReader.ts#L63-L67\n... now I'm curious on why we are using Object.assign instead of a trivial constructor. Thoughts?\n\nAnyway, these \"defaults\" should have been changed in #631, but I really forgot about it. :disappointed:. It was necessary because I've changed the type of context in trackByRule#35 from any to BasicTemplateAstVisitor (https://github.com/mgechev/codelyzer/pull/659/files#diff-26d9296d5e0a25d3fe6a9b174e67da35R35)... it gives an error with protected:\n\nsrc/trackByFunctionRule.ts(44,30): error TS2446: Property 'codeWithMap' is protected and only accessible through an instance of class 'TrackByFunctionTemplateVisitor'.. ts.isStringLiteral(p.initializer)?. ts.isStringLiteral(e)?. Any reason to not use tsutils?. You're right, however it's a tslint dependency. Anyway, can't we add it to codelyzer dependencies?. In this case, it would be better to move this function to util.. nit: I guess these exports are alphabetically ordered, so it would come before preferOutputReadonly.. a -> an. Also, you can put this test in the above describe.. Hi @mgechev I'm really sry for delay... but right now I can't do this because I'm traveling.... as TemplateAccessibilityLabelForVisitor?. You can include here also the check for node children to avoid the long if below:\n\n```\nif (depth > maxDepth || !node.children) {\n  return false;\n}\n...\n```. Since the rule allows user to define label components and label attributes, IMHO we have to let it more generic.. Hmm.. there's an open issue relating problems with this rule: #627.. Not necessarily, however, for some reason, we export the walker's in almost all rules. I'll remove the export here and in other files in this PR.. You're right, however, the previous regex (which one is different only by a question mark) was also wrong, it gave the same result for the tests you wrote above.\n\nAfter investigating why the specs pass even with this wrong regex, I discovered that the ast's name just cuts the parens, so:\nTest 1: <input type=\"text\" name=\"foo\" ([ngModel])=\"foo\">, test with regex returns true (the ast's name is just [ngModel]);\nTest 2: <div (emitter)=\"emitter\"></div> -> test with regex returns false (ast's name is emitter);\nTest 3:  <input type=\"text\" name=\"foo\" [ngModel]=\"foo\"> -> test with regex returns false (ast's name is ngModelChange);\nTest 4: <input type=\"text\" name=\"foo\" [(ngModel)]=\"foo\"> -> never call visitEvent method.\n\nI changed the regex a bit to: /^\\[(?!\\()(.*)(?<!\\))\\]$/.. Done.. Done.. Hmm, to be honest, I really don't know if we can receive a null name here. It was copied from enforceComponentSelector, anyway, I'll add a check for this :). No problem, I'll update ASAP.. No problem, I'll update ASAP.. I really don't know, but I never saw someone using this in real world.. I've never seen a case where this could be null! I did it to jump the ! \ud83d\ude1b\n. I've never seen a case where this could be null! I did it to jump the ! \ud83d\ude1b. @wKoza :point_up_2:. Any reason to not use export const... instead of export default...?. Let's try to avoid these any casts.\nYou can do something like this instead:\n```\nif (!input || !(input.value instanceof ASTWithSource) || !(input.value.ast instanceof LiteralPrimitive)) {\n  return null/undefined;\n}\nreturn input.value.ast.value;\n``. Also, if possible, can we remove theseanycasts?. Could you explain why this is necessary?. Not sure about this message.... No problem. I did it because I saw that TSLint has already a function to camelize strings.. If there's any place in the Angular Style Guide that says it's a bad practice to use@Attributewe should link it here, otherwise better rephrase this (and also therationale). . Shouldn't it be aboolean`?\nBtw, you can omit public modifier here and elsewhere.. suggestion\n    return directiveMetadata || componentMetadata || pipeMetadata || moduleMetadata || injectableMetadata;. suggestion\n      maybeNodeArray(ts.createNodeArray(d.decorators)).map(dec =>. suggestion\n      maybeNodeArray(ts.createNodeArray(d.decorators)).map(dec =>. suggestion\n      maybeNodeArray(ts.createNodeArray(d.decorators)).map(dec =>. You can omit public modifiers.. You can omit public modifiers.. suggestion\n      .bind(expr => expr && getStringInitializerFromProperty('pure', expr.properties)). suggestion\n      .bind(expr => expr && getStringInitializerFromProperty('name', expr.properties)). suggestion\n      .fmap(initializer => initializer && initializer.text);. Any reason to remove the modifier (here and in visitNgPipe)?. suggestion\n    return (ts.isDecorator(node) && getClassName(node.parent)) || (ts.isClassDeclaration(node) && getClassName(node));. suggestion\n  protected visitNgPipe(metadata: PipeMetadata) {}. suggestion\n   private validateDecorator(metadata: PipeMetadata, allowedMethods: ReadonlySet<LifecycleMethodKeys>): void {. suggestion\n    readonly name: string,. nit: extra new line forgotten.. Now, I guess we can just metadata.pure, right? Do you prefer to do this kind of \"refactor\" in a new PR?. nit: extra new line forgotten.. suggestion\n    this.addFailureAtNode(metadata.pure, failure);. Really better \u2705 . suggestion\n    const isBoolean = pureExpression && isBooleanLiteralLike(pureExpression) ? pureExpression.kind : ts.SyntaxKind.TrueKeyword;. Hmm.. I'm unsure about this, if we go for this path, we should change name and selectors to be StringLiteralLike.\nIMHO, we should use boolean.. Actually Angular doesn't allow you to create a @Pipe without a name.... suggestion\n    const pure = pureExpression && isBooleanLiteralLike(pureExpression) ? pureExpression : undefined;\nThis way you don't need to cast below.. suggestion\n    return new PipeMetadata(d, dec, name, pure);. suggestion\n    if (!metadata.pure || metadata.pure.kind !== SyntaxKind.FalseKeyword) return;. ```suggestion\n.suggestion\n    if (!metadata.pure || metadata.pure.kind !== SyntaxKind.FalseKeyword) return;\n```\nYou just missed the non null assertion \ud83d\udc40 . ```suggestion\n```\nWe already have a failure describe block. You can put the NgModule block into it.. ",
    "rolandjitsu": "@preslavsh Unfortunately I run it on probably around 200+ TS files, so I am not sure where it fails. Also, due to an NDA, I am not allowed to disclose any code. And the error does not seem to provide any clue which file that may be.\n. At least I can tell you that the following rules cause that error:\njs\n{\n    \"component-selector-name\": [true, \"kebab-case\"],\n    \"component-selector-type\": [true, \"element\"],\n    \"component-selector-prefix\": [true, \"infarm\"]\n}\n. Ok, so it boils down to this:\njs\nprivate static createComponent(selector: string, template: string): any {\n    @Component({selector, template})\n    class DynamicComponent {}\n    return DynamicComponent;\n}\nI have a service that creates dynamic modules/components.\n. The following does not throw:\njs\n@Component({selector: selector, template: template})\nBut then I get errors for the shorthand rule:\nbash\n(object-literal-shorthand) app/shared/component-builder/type-builder.service.ts[15, 15]: Expected property shorthand in object literal.\n(object-literal-shorthand) app/shared/component-builder/type-builder.service.ts[15, 35]: Expected property shorthand in object literal.\n. @mgechev no worries, @preslavsh pointed me in the right direction.\n. Definitely:\ntext\n/users/rolandjitsu/projects/test/src/app/test.component.html\nERROR: 4:4    angular-whitespace        The pipe operator should be surrounded by one space on each side, i.e. \" | \".. If I remove that, I get no errors \ud83d\ude04 . I'm still seeing some problems with the check-pipe rule for:\nhtml\n<p *ngIf=\"(items | async)?.length as length\" class=\"mat-caption\">\nhtml\n<span *ngIf=\"product.propagationTolerance\" class=\"label\">&plusmn; {{ product.propagationTolerance | number }}</span>\nFor the latter, removing &plusmn; seems to fix it.. @preslavsh would this also not mean that the selectors are not going to be validated anymore?\n. Say I could provide some code, I have 200+ files, how would I know which one is causing this? I cannot just give you access to everything. Maybe you can point me to some things I could look at in the components that could cause this? It might be that is not even related to the actual components but the linter or TS.\n. ",
    "VladimirAmiorkov": "@mgechev Thank you for the detailed explanation it helped a lot and not its runs like a charm.\n. ",
    "dzonatan": "Before implementing it take a look at https://github.com/angular/angular/issues/11422 about accessing private properties when using AoT.\nAlso some key notes from http://stackoverflow.com/a/39000046/2320455:\n\nWith ngc and static template compilation, you'll get errors if you try accessing private members of the component from template.\nIn Dart the template can't reference private variables of the component class, because Dart in contrast to TypeScript effectively prevents access of private members from outside.\n\nI'd think about creating the converse rule: to verify that all properties usages in template are with public access.\n. ",
    "binaryPUNCH": "Any suggestions to get VS Code to work with Angular component fields showing up as unused like WebStorm can? https://stackoverflow.com/questions/43700420/angular2-with-vs-code-intellisense. ",
    "mohammedzamakhan": "@mgechev I do not see it to work in a new angular cli project on external templates! Am I missing something?. Can we reopen this?. You can assign it to me. I think with more and more rules for template in this repo, we definitely will need a way to disable rules.. Some third-party libraries force you to use providers\nhttps://aws-amplify.github.io/docs/js/angular#importing-the-angular-module. Yeah, the rule still makes sense, and I think most of the projects can have this rule enabled, and in such rare case, they will add tslint ignore for just this alone. @mgechev Done \ud83d\udc4d . Done \ud83d\udc4d \n. @mgechev you can find the warning here https://w3c.github.io/html/sec-forms.html#autofocusing-a-form-control-the-autofocus-attribute. @mgechev Done. @mgechev can you merge this?. Either close this issue and reopen https://github.com/mgechev/codelyzer/issues/94 or keep this open. I am using the latest 7.3.2, and yes I do that the rule \"banana-in-box\": true in my tslint. https://github.com/mohammedzamakhan/test-a11y. So it only shows error using ng lint, but does not show errors directly in the VSCode editor when using tslint VSCode Extension?\nI want it to show errors directly in the editor, like it shows for internal templates\n\n. Yes I am currently working on it @mgechev . By default we would support depth of 2, so if someone does \n<label>\n     <span>\n          <div><div><input type=\"text\" /></div></div>\n    </span>\n</label>\nit would fail, because the input is at depth 3, but if they add a depth which could be between 1 and 25, then the above code will pass. We want to make sure that if the user is using the label incorrectly in his project, if he uses label and has a huge dom tree inside it, a lot of times in his project, then we do not want to slow this rule from running, and also to keep it fast we have default of 2, and if the user uses a depth for some styling purpose, then we do not want him to stop using this rule, we want him to be able to bump up the depth a bit for his needs. Sometimes developers tend to have huge template files, but anyways, should I get rid of depth altogether or just as a option, if I were to just remove it as a option, what do you think the depth should be?. Its not just alt attribute @mgechev, check the test cases. @mgechev can you confirm this?. Done. I think its fine, since all the accessibility checkers and linters check for it. Sometimes developers use code generated or from old references.. Done \ud83d\udc4d . Done. 129 elements. @rafaelss95 done\n@mgechev I have two different arrays, I don't think I can escape the quadratic check here. ",
    "stefanaerts": "Ok thx\n. ",
    "aitboudad": "Hi, I get the same issue when the property is defined in the parent class\nts\nexport class TestComponent extends BaseComponent {\n}\n. awesome! thanks ;)\n. @mgechev I think you missed https://github.com/angular/angular/commit/f5c8e09 since 2.3. with the next version of typescript 2.3 I think we can use https://github.com/angelozerr/tslint-language-service to solve that issue. ",
    "vikashkumar29": "Hi  @mgechev,\nI am also using the codelyser beta.0 and facing the same issue with the interpolation. I just checked this pull request #101 and meanwhile integrated the changes in the required file as per the pull request.\nAfter integrating the changes, I was able pass though this issue, however later on I started getting exception on : \ne:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:77\n        ast.expression.visit(this);\n                       ^\nTypeError: ast.expression.visit is not a function\n    at RecursiveAngularExpressionVisitor.visitPrefixNot (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:77:24)\n    at PrefixNot.visit (e:\\GitRepo\\angular2-seed\\node_modules\\@angular\\compiler\\bundles\\compiler.umd.js:3286:26)\n    at ASTWithSource.visit (e:\\GitRepo\\angular2-seed\\node_modules\\@angular\\compiler\\bundles\\compiler.umd.js:3342:27)\n    at RecursiveAngularExpressionVisitor.visit (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:16:13)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateAST (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\ng2Walker.js:125:25)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateBoundElementPropertyAst (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\ng2Walker.js:138:14)\n    at e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\ng2Walker.js:145:60\n    at Array.forEach (native)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateElement (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\ng2Walker.js:145:24)\n    at InputMetadataWalker.Ng2Walker.visitNg2Template (e:\\GitRepo\\angular2-seed\\node_modules\\codelyzer\\angular\\ng2Walker.js:160:25)\nmy respective component look like : \nhome.component.html\n```\n\n  Howdy! Here's a list of awesome computer scientists. Do you know any others? Add to the list yourself.\n\n\n\nAdd\n\n\n{{name}}\n\n```\nhome.component.ts\n```\nimport { Component, OnInit } from '@angular/core';\nimport { NameListService } from '../shared/index';\n/*\n * This class represents the lazy loaded HomeComponent.\n /\n@Component({\n  moduleId: module.id,\n  selector: 'sd-home',\n  templateUrl: 'home.component.html',\n  styleUrls: ['home.component.css'],\n})\nexport class HomeComponent implements OnInit {\nnewName: string = '';\n  errorMessage: string;\n  names: any[] = [];\n  isEnable:boolean = true;\n/\n   * Creates an instance of the HomeComponent with the injected\n   * NameListService.\n   \n   * @param {NameListService} nameListService - The injected NameListService.\n   /\n  constructor(public nameListService: NameListService) {}\n/*\n   * Get the names OnInit\n   /\n  ngOnInit() {\n    this.getNames();\n  }\n/*\n   * Handle the nameListService observable\n   /\n  getNames() {\n    this.nameListService.get()\n      .subscribe(\n        names => this.names = names,\n        error =>  this.errorMessage = error\n      );\n  }\n/*\n   * Pushes a new name onto the names array\n   * @return {boolean} false to prevent default form submit behavior to refresh the page.\n   /\n  addName(): boolean {\n    // TODO: implement nameListService.post\n    this.names.push(this.newName);\n    this.newName = '';\n    return false;\n  }\n}\n```\nmy-button.component.ts\n```\nimport { Component, Input } from '@angular/core';\n@Component({\n    moduleId: module.id,\n    selector: 'my-button',\n    template: <button type=\"submit\" [disabled]=\"!enabled\">Add</button>\n})\nexport class ButtonComponent {\n   @Input() enabled:boolean;\n}\n```\nWith ref of pull request #101 I had modified function visitNg2TemplateBoundElementPropertyAst of class ng2Walker.ts\nprotected visitNg2TemplateBoundElementPropertyAst(prop: BoundElementPropertyAst,\n       context: ts.ClassDeclaration, templateStart: number) {\n        const ast: any = (<e.ASTWithSource>prop.value).ast;\n        ast.expression = (<any>prop.value).source;\n        this.visitNg2TemplateAST(prop.value, context, templateStart + getExpressionDisplacement(prop));\n    }\nto \n```\nprotected visitNg2TemplateBoundElementPropertyAst(prop: BoundElementPropertyAst,\n       context: ts.ClassDeclaration, templateStart: number) {\n        const ast: any = (prop.value).ast;\n        if(!ast.expression) {\n            ast.expression = (prop.value).source;\n        }\n    this.visitNg2TemplateAST(prop.value, context, templateStart + getExpressionDisplacement(prop));\n}\n\n```\nand now this seems to be working for me. Request you to please verify this.\n. ",
    "bonaparte89": "I ran into the error yesterday.. so first updated all deps. That wasn't working either. so cloned your seed-project again. Issue still around?\nC:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:45\n        var parts = ast.expression.split(/\\{\\{|\\}\\}/g).map(function (s) {\n                                  ^\nTypeError: Cannot read property 'split' of undefined\n    at RecursiveAngularExpressionVisitor.visitInterpolation (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:45:35)\n    at Interpolation.visit (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\@angular\\compiler\\bundles\\compiler.umd.js:3232:26)\n    at ASTWithSource.visit (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\@angular\\compiler\\bundles\\compiler.umd.js:3314:27)\n    at RecursiveAngularExpressionVisitor.visit (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\recursiveAngularExpressionVisitor.js:16:13)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateAST (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\ng2Walker.js:125:25)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateBoundElementPropertyAst (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\ng2Walker.js:136:14)\n    at C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\ng2Walker.js:143:60\n    at Array.forEach (native)\n    at InputMetadataWalker.Ng2Walker.visitNg2TemplateElement (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\ng2Walker.js:143:24)\n    at InputMetadataWalker.Ng2Walker.visitNg2Template (C:\\Users\\user\\Documents\\WebProjects\\Archiv\\node_modules\\codelyzer\\angular\\ng2Walker.js:158:25)\n. ",
    "troyanskiy": "@mgechev I'm so sorry that I did not add tests for the case. I did not have time for that. Thanks you for understanding.\n. ",
    "jtomaszewski": "Works like a charm. Thanks! ;)\n. ",
    "devguysin": "Folders exist. When I run the following:\n\nC:\\Angular2-app>node_modules.bin\\tslint -c tslint.json C:\\Angular2-app\\src\\app\\app.component.ts\n\nI get:\n\nC:/Angular2-app/src/app/app.component.ts[8, 14]: The name of the class AppComponen should end with the suffix Component (https://goo.gl/5X1TE7)\n\nTo create this folder I only installed angular-cli and then ran \"ng new Angular2-app\", so if there is a misconfiguration in the folder, it is probably angular-cli bug.\nHere  is a link to the created folder (I removed the nodes packages, since they take +200MB).\nI would really appreciate it if you can help me troubleshoot this problem.\n. I installed tslint  extensions for VSCode. I get green underline with the error above, prefixed with [tslint].\nI ran the following command:\nC:\\Angular2-app>npm i codelyzer tslint typescript @angular/core@2.0.2 @angular/compiler@2.0.2 rxjs@5.0.0-beta.12 zone.js@0.6.21\nThis is the output I got:\n\nangular2-app@0.0.0 C:\\Angular2-app\n+-- @angular/compiler@2.0.2\n+-- @angular/core@2.0.2\n+-- angular-cli@1.0.0-beta.17\n| -- zone.js@0.6.25\n+-- codelyzer@0.0.28\n+-- rxjs@5.0.0-beta.12\n+-- tslint@3.13.0\n+-- typescript@2.0.2-- zone.js@0.6.21  invalid\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\\chokidar\\node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.0.14: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n\nI then ran: \nC:\\Angular2-app>node_modules\\.bin\\tslint -c tslint.json C:\\Angular2-app\\node_modules\\component.ts\nAnd the output was:\n\nC:/Angular2-app/node_modules/component.ts[15, 2]: file should end with a newline\nC:/Angular2-app/node_modules/component.ts[4, 13]: The selector of the component \"Codelyzer\" should have prefix \"app\" (https://goo.gl/cix8BY)\nC:/Angular2-app/node_modules/component.ts[4, 13]: The selector of the component \"Codelyzer\" should be named kebab-case (https://goo.gl/mBg67Z)\nC:/Angular2-app/node_modules/component.ts[3, 1]: Implement lifecycle hook interfaces (https://goo.gl/w1Nwk3)\nC:/Angular2-app/node_modules/component.ts[9, 7]: The name of the class Codelyzer should end with the suffix Component (https://goo.gl/5X1TE7)\n\nBut VSCode still does not mark errors.\n. ok, when I put component.ts in C:\\Angular2-app\\src VSCode did show the errors.\nBut it only works if I have tslint extension installed. Is having this extension installed a requirement?\n. OK, thanks. I suggest documenting that to avoid similar questions from newcomers.\nBTW after I installed tslint, it also works even if I delete the rules configuration from user/workspace setting file, I mean the following line:\n{\n        \"tslint.rulesDirectory\": \"./node_modules/codelyzer\",\n}\n. ",
    "phil123456": "does not work for my directives\n@Directive({\n    /* tslint:disable-next-line:component-selector-prefix component-selector-name */\n    selector: '[erTable]'\n})\nexport class ERTableDirective {. ",
    "timvl": "@phil123456  this should work:\njavascript\n@Directive({\n  /* tslint:disable-next-line:directive-selector */\n  selector: 'card-row'\n}). ",
    "karlhaas": "Problem with current versiona nd Angular 2.1.0:\n/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:8751\n          template.animations.forEach(function (entry) { triggerLookup.add(entry.name); });\n                  ^\nTypeError: Cannot read property 'animations' of undefined\n    at TemplateParseVisitor._validateElementAnimationInputOutputs (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:8751:19)\n    at TemplateParseVisitor.visitElement (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:8734:20)\n    at Element.visit (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:4656:78)\n    at visit (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:4672:39)\n    at /home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:4674:27\n    at Array.forEach (native)\n    at visitAll (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:4673:13)\n    at TemplateParser.tryParseHtml (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:8461:24)\n    at TemplateParser.tryParse (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/@angular/compiler/bundles/compiler.umd.js:8451:23)\n    at Object.exports.parseTemplate (/home/karl/Work/cnc/feedbackr/Frontend/node_modules/codelyzer/angular/templateParser.js:14:23)\nWill this be fixed by this issue or should i create a new issue?\n. @mgechev: thx! were using beta.0\n. ",
    "emilabraham": "@mgechev Any update on this?. ",
    "cyrilletuzi": "Would like to help but not used to that kind of stuff. Can't we just regexp the template to find \"#\" ?\n. ",
    "abbazabacto": "not sure if this is the place, but automated generated references like $event aren't considered as well...\n@Component({\n    template: `<form #loginForm=\"ngForm\" (submit)=\"submitFormMethod($event)\">...</form>`\n})\n. @mgechev sorry just realised the $event as an argument of function isn't checked in the current version at all...\nThe no-access-missing-member error regarding $event I got was when I used it in the template directly f.e.\n@Component({\n    template: `<input (keypress)=\"$event.stopPropagation()\">`\n})\nFor now bypassed it by passing it to a method handling the stopPropagation.\nYour test succeeding might be because it just doesn't check the arguments...\n. ",
    "ghsyeung": "Is \"recompute\" referring to parsing template AST multiple times for each lint rule?\nAnd the reference to metadata collector in AoT, are you referring to this?\nhttps://github.com/angular/angular/blob/76dd026447011823770e23fb5c4168c7d96a494b/modules/%40angular/compiler/src/metadata_resolver.ts#L119\n. Spend a bit of time researching the code. I'll restate the problem here to make sure I have the correct understanding.\nSo basically in Ng2Walker.visitClassDecorator, ShallowMetadataCollector would extract and normalize the ts.ObjectLiteralExpression into something like type Metadata = ComponentMetadata | DirectiveMetadata. \nThen, utils like getDecoratorPropertyInitializer would group under ShallowMetadataCollector.\nOne question about the using of  Metadata. You mention that it would get passed into the template/style/expression visitors. Do you mean it would be passed as the 2nd argument to BasicTemplateAstVisitor.visit (and other visitor base classes)? Can you give me a use case when the Metadata would be useful inside these visitors?\n. How about start with ShallowMetadataCollector first? I think passing as this.context would be a good first step. Once that is cleaned up, it'll be easier to see how some of the rules can be refactored.\nOne thing I notice is Ng2Walker may be exposing too much API. For example, SelectorNameValidatorWalker overrides visitClassDeclaration which in the ideal scenario, if there's ComponentMetadata, then there can be a ComponentWalker that doesn't expose visitClassDeclaration.\n. Had some more thoughts about refactor experience so far.\nCan codelyzer develop against a different TS than the runtime TS? I have a feeling you can, but if not, it harder to write compatible type-friendly code as a lot of useful features like 'control flow based type analysis' and 'dot name type guards' landed only in TS 2.0\nMore refactoring can be done in src/angular/metadataReader.ts, but that likely require adding a 'seam' to urlResolver and fileResolver to make it Maybe friendly.\nAlso there may be a few minor bugs, I'll highlight them below.. Added Walker builder (a builder approach and a functional approach) in attempt to make Rule definition easier.. Nothing new yet, just fixed the above error resulted from merging master.. will take a look tonight\nOn Tue, Jan 24, 2017 at 11:20 AM, Minko Gechev notifications@github.com\nwrote:\n\nAfter the recent refactoring the generation of type definitions stopped\nworking.\n@ghsyeung https://github.com/ghsyeung would you have chance to take a\nlook at it?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/221, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABL4MRLHaNwx4fBYOOB91MjihHT_UjNcks5rVk7_gaJpZM4LsrFQ\n.\n. how can I reproduce? \"npm run release\"?\n\nOn Tue, Jan 24, 2017 at 11:29 AM, Gary Yeung ghsyeung@gmail.com wrote:\n\nwill take a look tonight\nOn Tue, Jan 24, 2017 at 11:20 AM, Minko Gechev notifications@github.com\nwrote:\n\nAfter the recent refactoring the generation of type definitions stopped\nworking.\n@ghsyeung https://github.com/ghsyeung would you have chance to take a\nlook at it?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/221, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABL4MRLHaNwx4fBYOOB91MjihHT_UjNcks5rVk7_gaJpZM4LsrFQ\n.\n\n\n. Took a look last night, still deciding how not to leak implementation types\nat the library level.\nI should have something ready soon.\n\nOn Tue, Jan 24, 2017 at 11:34 AM, Minko Gechev notifications@github.com\nwrote:\n\nThanks! Yes, I'm assigning it to you.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/221#issuecomment-274912495,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABL4MYyglnMwCPricAEyowKSiyiCp35Vks5rVlI4gaJpZM4LsrFQ\n.\n. I understand the premise of the issue, and the split makes a lot of sense.\n\nThe split should decouple metadata gathering and parsing phase of angular specific code. It opens up the Parser API to allow lint rules that requires non-local AST information (i.e. rules that need to know parent class). \nHow can we help?\nI have a tangential question that would like to hear your thoughts on. Is tslint the correct framework for the Rules going forward? From my understanding, the use of visitor pattern in tslint works well on rules that can be specified by its children elements. But it becomes messy once you need external information.\n. Will look into ngast in a bit and report back.\n\nLinting with codelyzer can get more efficient if we don't use tslint in the core since we can visit only constructs in symbols which have directive/pipe/component metadata.\n\nThat should be feasible if ngast pans out. It should work for directive/pipe/component, but what about services?\n\nBig projects might be quite slow to lint from command-line because of a lot of I/O operations (each component on average will require at least 3 - TypeScript, external template, external style).\n\nPossibly, would angular compiler be able to provide TS AST, template AST and style AST all with a single call?\n. still part way through ngast, went through some impl of project-symbols and directive-symbols and went through the API for both.\nproject-symbols and directive-symbols looking pretty good, it feels pretty complete for the use case of \"visiting all\" (i.e. visiting all components, visiting all pipes, etc). Would there be any use case where the user would have a ts.Node and try to look up the StaticSymbol?\nIt seems like after this refactoring, codelyzer rules will be separated into 2 main categories. Ones that visits ts.Node, and ones that visit ngast \"nodes\".\nIf caching is necessary to improve performance after initial API, I think it would be important to define cache semantics for different entities. For example, it seems like getAnalyzedModules() caches the first read (but doesn't get cleared in clearCaches()). I think caching between incremental compilation is reasonable (which allows perf improvement if multiple rules use the same resource), but ngast cache likely needs to invalidate completely when there's a new compilation (Program).\nOne thing I wonder though, is how much would the performance increase if you use async calls over sync calls? not a big deal as PoC, just something to keep in mind later. Agreed. It seems like getModules provides sufficient access without getAnalyzedModules(). \nThe one extra use case would be a lookup of Module/Directive/Pipe by StaticSymbol (like part of ContextSymbol), which likely be useful if you traverse module dependencies without exposing getAnalyzedModules.\nAnother use case would be search by name (which can be provided through a util lib), for exploratory purpose.. I think rules follows mostly 3 categories, \n\nAngular style guide (https://angular.io/styleguide)\nAOT related\nothers\n\nCategory 1 should be just adding a link to the Angular style guide page.\nI am not sure if there's a single source on category 2. \nMaybe we can start a wiki page to organize rules into categories and then evolve from there?. Related to #191 . I believe https://github.com/mgechev/codelyzer/blob/master/src/util/utils.ts#L29 should use kinds.NoSubstitutionTemplateLiteral instead.\nI was using astExplorer and find it odd that it maps to FirstTemplateToken as well.. I think we need to wrap with try/finally or the spy would leak when a test fails.. I notice that decorator is not copied to result. Is that intentional?. ",
    "SebastianM": "thx Minko!\n. ",
    "jSherz": "That was super quick, thank you for your hard work! :+1: \n. ",
    "gingters": "Argh. Sorry, just noticed that I forgot to update the rules when updating...\n. ",
    "KiT106": "@mgechev Thank you.\nI'm using angular-cli to generate project. \nSeem angular-cli isn't update latest codelyzer version yet.\n. ",
    "abierbaum": "I think it would be a great addition to let user's configure an optional regex that is used to test all naming conventions that Codelyzer checks.  Then for your code you could allow either Component or Page.  Some other people may have other conventions they want to allow.  (for example we would like to allow \"Panel\" for some types of components)\n. Would it be possible to also add a rule that looks for elements in component templates that have text content but no i18n attribute?\nOne issue we are having on our team is simply enforcing that people mark all the exposed strings for extraction and translation.. @mgechev Awesome.  Thanks!!!. @mgechev Thanks for adding this!!!. ",
    "plmetz": "Great! Thanks for all your work on this project. ",
    "Maloric": "I realised that this repo is not the right place for this issue.\n. I realised that this repo is not the right place for this pull request.\n. ",
    "ghost": "@mgechev A rule for this is landing soon in material2, would be nice to include this rule in codelyzer. It uses a whitelist to disable it for certain components.\nhttps://github.com/angular/material2/pull/5707. An even more beautiful rule has landed in material2, to lint any property value of any decorator:\nhttps://github.com/angular/material2/blob/master/tools/tslint-rules/validateDecoratorsRule.ts. The error thrown on line styleUrls: ['./login.style.scss'], in the @Component decorator in all of my components. Previously I used the version 4.3.0 and there wasn't error. The error appeared after the upgrade to version 4.4.2.. Details: https://github.com/angular/angular/issues/25241. ",
    "dominique-mueller": "In our case, we're developing an Angular component library in which every component must have set the change detection strategy to OnPush. We also try to build our applications using OnPush everywhere.\nThus, it would be awesome to have linting rule for that!. Assuming there is no relevant difference between defining a whitelist array in the tslint file vs. using tslint:disable comments, I would certainly prefer the comment-based solution.\nIn my opinion, tslint:disable comments are much easier to maintain because the linting exception is closer to the actual source code it affects.. Can't wait either, love this project!. Interestingly enough, this only seems to happen when using content projection / transclusion. In our case, for instance:\nhtml\n<my-button>\n  {{ 'MY-BUTTON.LABEL' | translate }}\n</my-button>\nEverything works find when used within divs (also when using ngIf) or when using this for attribute binding.. Hmpf. Weirdly enough, I can no longer reproduce this issue, seems it has disappeared over the weekend. Perhaps a caching issue or something broken on my machine.\nThanks though for the quick replies :). ",
    "wKoza": "I think that you can do it. If we want to bypass this rule, we can also simply mark our component with tslint:disable:onPushStrategy(with a comment). Did you not have a .codelyser.js config file before like this ?\njavascript\nmodule.exports = {\npredefinedDirectives: [\n  { selector: 'input', exportAs: 'ngbDatepicker' }\n]\n};\n. @Dzivo , Angular CLI isn't necessary. You just should use the Language Service form Angular and disable this rule.. it's component-selector. Because the Angular Language Service already checks that. No, of course. Codelyzer delegates this task to the compiler (with AOT mode) => ng build --prod. Yes, it's a common use case but as I already said,  the Angular Language Service checks that. \nCheck if you have this dependency into your package.json:\n\"@angular/language-service\": \"X.X.X\"\nYou have to see an error in your template if you use a private member.. 1. VSC and Webstorm both implement this feature.\n2. You should also see errors in your error console (with Webstorm, I can see it on my Typescript error tab)\n3. I'm agree, It  takes time but you can delegate this task to your CI for instance. . @mgechev, Codelizer will be able to control this code without launching a false positive ?\n``js\n@Component({\n  selector: 'app-my',\n  template:\n\n`\n})\nexport class MyComponent implements  AfterContentInit {\n@ViewChild('wrapper') el: ElementRef;\nngAfterContentInit() {\n    console.log(' Init : ' + this.el.nativeElement.innerText)\n  }\n. I take it !. Yes, no problem. I had just started.. OK and good falafels !. I saw that last night. The problem seems already to exist with version 3.0.0.. Awesome ! LGTM after some tests.. It's not directly the subject but can we add a assertTrue for the pipe like this :js \n  it('should work when space before and after \"|\"', () => {\n      let source = @Component({\n        selector: 'foo',\n        template: \\\n{{ foo | async }}\n        `\n      })\n      class Bar {\n        foo: any;\n      }\n      `;\n      assertSuccess('angular-whitespace', source);\n    });\n```\nIn a future release, we can manage the chain of pipes like this {{ foo | async |      bar }} ?. check-pipe seems to work only in interpolation.\nlooks like #346  . Fixed by #362 . You can use this at the top of your file : \njs\n/* tslint:disable use-view-encapsulation */\nedit : see this doc for more details. Hi,\nCan you give us an example of code with a Component and a template ?\n. Hi @mgechev, can you reopen this issue ? Indeed, the name of the rule is wrong.. thanks @rokerkony , I will take a look this weekend.. thank for your issue ! We will work on it !. At first, we can focus on decorators like @HostListener, @HostBinding, @Input, @Output, ... But it would be interesting to work on the life cycle in another rule.. @willgm Perharps, you should simply drop rule no-access-missing-member ?.  you should simply drop option check-pipe in your tslint file. Closed and reported to #416. Closed via #401 . Hi, take a look at #213. This rule will be removed in a next release. You should use the language service Angular for catch this. And if you want failures of the build when there's a missing property , you can just run a build with aot and it will throw errors. . In a next release (Probably  with 4.0.0). The language service Angular is THE good candidat for this. Codelyzer aims to provide linting for style errors which can be found by providing a \"shallow analysis\". \"No-access-missing-member\" requires a deep analysis sometime.. This rule verify that each class decorator uses its decorators allowed. For this moment, I'm reporting errors only in case of @Injectable.. Yes @rafaelss95, we can extend this to @Pipe et @NgModule. Do you have another ideas ? . In the next release ! Tonight, It's holiday time ;). This rule seems to be intentional if we peek at the class test : \n\nshould succeed, when a directive input property rename is the same as the name of the property\n\nBecause the Style Guide indicates : \n\nTwo names for the same property (one private, one public) is inherently confusing.\n\nIn your case, it's the same name... \nBut, the style guide indicates also  :\n\nYou should use an alias when the directive name is also an input property, and the directive name doesn't describe the property. \n\nIt's a bit confusing ! Maybe, we can improve the style guide. @wardbell, what do you think about this ?\nI think we can change Codelyzer in this direction. Are you agree  @mgechev ?\n. I keep track of that ;). Thank you for your issue report. For the last point, there are many issues in the tracker related to template references. For the others, we will investigate.. Can you give me an example of log for this item : <div fxLayout=\"column\"> ?\nConcerning the check-pipe, can you remove it form your configuration for this moment because there is an issue opened (issue #365 ).. And if you remove the check-pipe in your lint, what's happening ? \n. Ok nice. You can monitor this issue for resolution. Otherwise, there is indeed a problem with the rule \"banana-in-a-box\". I will take a look at this weekend. . mmhm, i hope this will be okay ... \n. Hi @mgechev, have you progress in this issue ?. ok, I'll look at this If I have time.. In your case, there is an another problem because, the selector should begin by a prefix followed by a dash. \nConcerning the dot, the element must be consistent with the specification for Custom Elements which seems to allow the dot. Indeed, it may be something to do .\ncc @mgechev ?\n. duplicate of #361. Hi,\nWith AOT, we can bind only public class members in a template. This rule is there for that. . The language service already proposes this with this error \"Unexpected callable expression. Expected a method call\" in our templates.  This is not what you are looking for ? . You can suggest this thought here with the prefix docs(aio):.. The rule no-access-missing-member will be dropped in the next release, so I don't think that is worth it.. @csvn , thanks for the PR ! Why not also add form:not([ngNoForm]):not([formGroup])  ?.  it seems to make sense. I'm ok.. I had thought about that, but as you say, its not context dependent.  I prefer the second option even if it's not extensible. \nWe should also manage the case of AsyncValidator. \n. mhm, i'm not in favour of implementing a rule for a ControlValueAccessor. For me, it's just a Component with a specific behaviour. @mgechev , an opinion ?. This rule is highly experimental and has a lot of flaws at the moment.\nCan you add  tslint:disable:no-unused-css in the corresponding typescript file ?. Hi @intellix , it seems legitimate.  We will investigate. Thank you for this issue.. Hi @mspl13,  Take a look at the existing issues. For example #285 .\n. Yes, That's it ! I think it's an a mistake on our part. \n@mgechev , you had create this PR but We would also have to modify this file . \nI went to open a new PR on devkit repo\nThanks \n. Travis gives us ERROR: test/directiveClassSuffix.spec.ts[30, 1]: Exceeds maximum line length of 140. Hi @nicolashenry,\nIt's true. There is a problem in the documentation. An issue is open here. . @mgechev , do you have any idea for manage html entities (we have a problem with the position) ?. yes, @mgechev . BTW, this issue (with html entity) happens  even with check-semicolon :(. duplicate #191. @StefH , 'no-access-missing-member` is are out of date since the Language service Angular make this job. You can remove this rule now.. @dominique-mueller ,\nCan you test this : \nhtml\n<p>{{ 'PERSONAL-DATA.FIRSTNAME.LABEL' | translate }}</p>\n?. We have fixed it on the master branch. A new release will soon be available.\ncc/ @mgechev . After investigation, our system of unit tests doesn't detect any problems. \nBut, indeed, there is a false positive in my IDE (WebStorm).\nIt's not a regression over the last release (v3.1.2).. OSX, @BorntraegerMarc .. Ok, there is a difference between angular compiler 4.3.6 and 4.4.1 that impacts codelyzer ... This is why our travis crashs\nEDIT : After investigation, our problem seems linked to the new feature 'preserveWhitespaces'. . Yes, we can do that !. @BorntraegerMarc, done !. Please, take a look at the existing issues.. @mgechev , travis complains because of linting error :\n\nERROR: test/noAttributeParameterDecoratorRule.spec.ts[17, 12]: Missing semicolon. Hi @lazarljubenovic ,\n\nFor me , if you want more typing, you should use the constructor of FormControl like this : \n```typescript\nthis.personForm = new FormGroup({\n      lastName: new FormControl('',Validators.required,Validators.minLength(3)),  <-- error\n ...\n     });\n```\nWith Codelyzer, it seems to be complicated.\n. humm... excellent !  This rule deserves to be discovered more .... I'm not an i18n Expert, but the Angular documentation says that we can use interpolation with i18n attribute : see https://angular.io/guide/i18n#translate-singular-and-plural. For me, it's not valid if we take a look at this : https://github.com/angular/angular/issues/18302. I'm also implementing this rule and I come to the same conclusion ;) \n@mgechev , have you an idea for testing this code ? \nthis.myService.myEvent.subscribe(() => console.log('x'));. Maybe, is it the time to provide two tools : one for the shallow analysis and an other for a deep analysis. We have some features in this way.. I will take a look at this. Do you already have tested it ?. hmm, friendlier API ? good news ! indeed, it would be a breaking change. it may not be the right moment, yes. But, meanwhile, some people are waiting for an answer to these problems. I think we need to provide a answer to these people. \nBTW, We have remove this option from the README.mdbut It's inconsistent with the tslint doc where we talk about it. It can be confusing.. Hi @stocksr ,\nTslint offers the rule deprecated  currently. \njavascript\n \"deprecation\": {\n      \"severity\": \"warn\"\n    },\nWe can extend this rule to handle the @experimental tag.\nThanks\n. @mgechev , can you take this issue ?. Hi @trenneman ,\nCodelyzer aims to provide linting for style errors which can be found by providing a \"shallow analysis\". Your example requires a deep analysis with Type Checker. This mecanism is very expensive and it is not supported by VSCode.\n@mgechev , you confirm ?. Hi @sagittarius-rev,\nThanks for your analysis ! Do you want open a PR with this change ?. Good refactoring ! this parser needed it ;)\ncan you add a test to check that parsing no longer blocks ?. Duplicate #452 ?. What's your OS @dereklin ?. I took a closer look at this problem.  It's the same sort of problem that #452 . It may be a problem of carriage return. I've never been able to catch it with a TU.. I will test with my PC at work. But, if I remember correctly, This problem is not catchable with a TU currently .. I tested  with Windows. I  reproduce the problem with Webstrom. \n\n\nWhen I change the file encoding to LF instead of CRLF, it's work:\n\nI'll search a fix .... Correct this issue isn't easy. In this case, the problem happens when the corrected string  is injected into the file with Tslint. There is a lag between \\n et \\r\\n. . @agrinko , your error isn't in relation to your OS;  It's the same problem that this issue #579. . Since angular-whitespace is now deprecated, we can close this issue.. Soon, Angular CLI will propose AOT by default for our developments. Angular Team aims at AOT compilation by default. I'm not sure that it is a good reason for adding this rules again.  . Take a look at this issue https://github.com/angular/angular-cli/issues/8259.  Angular CLI does not use AOT (ng serve) by default, only for performance reasons; But it's the target. ng build uses AOT by default.\nAbout this, Hansl says:\n\nYes and no. We have a plan to remake the build system which will allow us to keep using webpack while also splitting your application in smaller pieces. When that's in, you should see shorter rebuild times (assuming you're following our best practices).\n\nIn your case, @sreichi , I can only advise you to find workarounds in your code and to use AOT.. Why do you want to have the rule templates-use-public if you use JIT ?  \nRegarding the rule no-access-missing-member, we have some problems including class inheritance for example (https://github.com/mgechev/codelyzer/issues/191). This is one of the reasons for its deletion.. I understand your problem @sreichi. The rule no-access-missing-member is interresting in your case but  the rule is perfidious currently .... Your remark is  interesting. Currently, we have a recommended configuration for our rules. max-classes-per-file is a tslint rule from palentir. @mgechev proposes a new project https://github.com/mgechev/tslint-angular. It's the good place for this rule.. No, tslint-angular should replace the ts-lint of Angular CLI .. Not necessary but in this case, we could change our rational\n\nHTML attributes are not prefixed. It's considered best not to use 'is', 'should', 'must' prefixes for boolean values Inputs.\n\nBTW, you could change this sentence in any case because prefixes are now configurable. . Hi @mgechev , Where is this PR ? I can not find it on the master.\nOk, you reverted this PR.. Yes @mgechev , and we can also reproduce on Linux for CRLF. There is an issue opened concerning the status of each rule  #408. In the meantime, maybe can we a this status in our Readme.. Yes @Martin-Wegner , you can !. I'm not sure this rule is durable. There are two things:\n- Rxjs explains that the best way to use lettable / pipeable is:\njavascript\nimport { map, filter, mergeMap, tap } from 'rxjs/operators';\nsee : https://github.com/ReactiveX/rxjs/issues/3018#issuecomment-347255928\n\nOur problem seems to be related to Webpack 3. Webpack 4 will improve it.\n\nsee: https://github.com/angular/angular-cli/issues/9069#issuecomment-355353286\nSo, using the deep import is a workaround. I'm not sure that a provisional rule has its place in codelyzer.. Thank you for this issue. We will investigate. . I'm not sure of my fix. Seems to be doing the job.. When have your this error ?\nWhat's your lint configuration (Codelyzer rules) ?. > Love this feature request\nI'm not surprised. If we want to test boolean expression complexity, this implementation seems to be fine: https://github.com/maddingo/checkstyle/blob/master/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java\nIts class test: \nhttps://github.com/maddingo/checkstyle/blob/master/src/tests/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java\nhttps://github.com/maddingo/checkstyle/blob/ecdac6ea25dc164ba22659e388a7b6ed07a866db/src/testinputs/com/puppycrawl/tools/checkstyle/metrics/BooleanExpressionComplexityCheckTestInput.java. I'm agree with you. It's just the first step before the determination of Complexity O. . I found a bug in the analysis of the expression. I'm going to invest before your review. I'll let you know.. @mgechev , it's ok for a review.. @mgechev , it's a mix of gocyclo and checkstyle. \nCyclomatic complexity is computed by adding the nodes (directives). I don't add the complexity of Boolean Expressions (LAND , LOR). . LGTM!. Usually, we use readonly when there is a functional risk that our property is overwritten. What is your fear ?. I don't see the link between immutable and @output. Your problematic seems to be specific. I'm not sure that this proposal has its place in Codelyzer but let's see other opinions.. Your codelyzer's version should be 2.1.1, not 4.1.0. Maybe do you have a npm package that depends on Codelyzer 2.1.1. Check your npm package.. Hi,\nYou should use this command:\ntslint --project tsconfig.json -c tslint.json. Hi,\nThanks for this report. What's your OS ?. /cc @mgechev \nwe should also think about modifying the readme (with the new rules). Hi,\nThat's what I feared . it is going to be difficult to distinguish ng-container declared by developer and generated by Angular.. closed in favour of #552. Hi @AmandaFoster , \ngood catch ! and yes, \n\nthe conditional expression should be moved into the component\nseems to be more understandable. Why do you need to disable the component-selector rule ? This rule enforces a prefix. You can use all suffixes that you want.\n. You have this error because you have defined app as prefix:\n\n\"component-selector\": [true, \"element\", \"app\", \"kebab-case\"]`. I hope we can make the release for the end of week.. Hi,\nWhat do you think when you say \"but it makes the DOM a bit messy.\" ?. Ok. It makes sense :+1:  . Adding this check to component-selector is an option since his rationale:\n\nComponents are easy to identify in the DOM \n\nbut, this rule is embedeed with Angular CLI and we are dealing with a Breaking change... \nSo, we should add an option that active the check like this:\n\"component-selector\": [true, \"element\", \"app\", \"kebab-case\", true]\n. @intellix , can you confirm the supposition of @mgechev ?. I think this fix #548  solves the problem. You can verify if you can.\nI let this issue open.. Hi @ahmedfarag2010 ,\nCan you explain what do you want when you say \"upgrade\".\nCodelyzer 4.2 should work with Angular 6-rc.\n. LGTM. I'm agree, use a 'magic' boolean is never a good idea. Well, I will change that very soon.. @rafaelss95 has to modify the rational and it's good. It makes sense. :+1: . Have you seen my comment https://github.com/mgechev/codelyzer/pull/561#discussion_r181727840 ? Other than that, it's great !. It's an interesting feature @rafaelss95 !. Hi @chengwanxin9825 ,\npipe-naming is now deprecated. You should drop this rule of your tslint file.. @rafaelss95 , why did you add the devDependencies husky ? I don't see it used.. Ok, thanks @rafaelss95. I'm in favor of adding a hook for the lint. BTW, I was afraid of having a hook that launches TUs. (sometimes, We want to push a TU in failure in order to fix it later). . This PR is confused because you are probably used Prettier. Two possibilities: \n- We can wait for your Prettier PR \n- You can revert changes in relation to 'Prettier'    . sure, implement this for method make sense. @HostListener is good candidate.\nConcerning the configuration of the rule, the global approach seems the best way since we want to identify easily the role of an input / method.\n. Just last one comment and It's ok for me.. yes, and we have had lot of problem with inheritance.... @rafaelss95 , we have an another problem with the rule max-inline-declarations in your example. This rule compute all the lines between ' ... '. Your use case, the rule count 5 lines but I think that 3 is the good value. So, we should exclude a first and the last line when it is empty lines.. The main reason for this rule is to increase readabilty of our components. All the HTML source code obscure the component's implementation, so, I think we can compute comments and the other empty lines.. When you say \"before upgrade\", what are you talking about ? Angular, Angular CLI, Codelyzer or the both ?. Are you sure about your tslint.json , maybe have you more than one  component-selector entry in your file. \nCan you push one repro in Github ?. Without further informations, I close this issue for the moment.. I think you confound the type (element or attribute) and the list of prefixes. You have an error because you have set prefixes app and page. You should therefore change your selector name with app-login-main or page-login-main. . see Style guide 05-04 . @rafaelss95 , I like your original idea and your last proposal seems to move in this bad direction. The enemy is the interpolation. After , maybe can we give the choice between property binding and canonical form but I'm not really convinced  of the gain.\nFor the first question, attempting a fix seems dangerous.\nAnd for the name, template-prefer-property-binding seems good.. hmm.. Your rule checks the binding on which attribut ? only HTML attribut  or all properties ?. okay. So, the name is ambiguous. Maybe template-harmonize-html-attribute-binding. And let's the choice to the user in this case.\n. @rafaelss95 ,\nCan you split this issue in order to classifie issues (bugs // features)?. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. https://github.com/angular/angular/blob/f8096d499324cf0961f092944bbaedd05364eea1/packages/language-service/src/html_info.ts\nor https://www.w3schools.com/tags/ref_attributes.asp. We should restrict to the \"Global Attributes\". . angular-whitespace is now deprecated. So, we can close this issue.. Thanks for your report. We're going to figure out the problem.. Since angular-whitespace is now deprecated, we can close this issue.. This rule is now deprecated because Prettier is more adapted for this kind of handling.. Following the feature request process that lodash has, I'm closing the issue and adding votes needed label.\nLater we can prioritize the feature requests by popularity and include them in a future release.. Thanks @mattlewis92 ,\n1- visitMethodCall  seems to be the good place for $any() ; \n2 - No, your are in the good place also.\n3 - You can propose a rule in that\n. LGTM ! Thks!. we can also handle  aria-describedby which is important when we show an error message for instance.. @rafaelss95 , maybe, can you change the Readme of this branch ?. I have added the blocked label in order to don't merge before the good time . If we apply this rule on our code, ouch .... thks @mgol for your link; We are going to think about this problem.. Thks @chaosmonster ,\nI close your issue and re-open #763 . \nDuplicate #763 . Hi @mohammedzamakhan ,\nCodelyzer has to work with external template. You can test that adding this rule \n\"banana-in-box\": true in your tslint file and \nhtml\n<input ([ngModel])=\"title\" name=\"title\">\nin your app.component.html file.\nWhat is your version of Angular CLI ?\n. Can you push me a repo ?. curious, it's work for me.\n```\nERROR: /users/william/webstormprojects/test-a11y/src/app/app.component.html[6, 22]: Invalid binding syntax. Use [(expr)] instead\nLint errors found in the listed files.\nLinting \"test-a11y-e2e\"...\n```\nYou launch ng lint ?. @Attribute can only be used in a constructor. It's maybe the reason (which it's not a valid reason ;) ).\nBut, if we handle @Attribute, what about @Host, @Self, ... ?\nSo, I don't think it's intentional.. @rafaelss95 , I've just seen that @Attribute is a bad practice here. I think we should still keep some consistency but I don't have the whole history of this rule.  . @rafaelss95 , RuleWalker is deprecated ? Tslint will be also deprecated by the end of the year. There is also a big problem with the new compiler Ivy. There are many impacts.\nThat's a lot of change in one year. :stuck_out_tongue_winking_eye:. Each call to visitClassDeclaration is often following by node.name!.text, here or there and without name ... it's the crash\nI'll do a complete check tomorrow. \n. I didn't go much more deeper into the analyse. But, I can say that a class with an Angular decorator and no name should be throw an error.\n@rafaelss95 , your idea is interesting. A generic message allows to make statistic easily.  . yep, I know but we will lost some informations. But, I can do the exercice:\n\nThe name of a component should end with the suffix %s (https://angular.io/styleguide#style-02-03\nThe name of a component should end with the predefined suffix (https://angular.io/styleguide#style-02-03\nThe selector of a component should have prefix \"%s\" (https://angular.io/styleguide#style-02-07)\nThe selector of a component should have the predefined prefix (https://angular.io/styleguide#style-02-07)\nThe selector of a component should have one of the prefixes \"%s\" (https://angular.io/styleguide#style-02-07)\nThe selector of a component should have one of the predefined prefixes (https://angular.io/styleguide#style-02-07)\nThe selector of a component should be named %s (https://angular.io/styleguide#style-05-02)\nThe selector of a component should be named correctly (https://angular.io/styleguide#style-05-02)\nThe selector of a component should be used as %s (https://angular.io/styleguide#style-05-03)\nThe selector of a component should be used as preset (https://angular.io/styleguide#style-05-03)\n'The decorator \"%s\" is not allowed for a class decorated with \"%s\"'\n'This decorator is not allowed for a class decorated like this'\n\n...\nI think that is a pity, The messages become mysterious.. We can definitely change few error messages but I  I think it is a shame to lost some informations. Otherwise, we can add a code as suffix like \n\nCL001: 'The decorator \"%s\" is not allowed for a class decorated with \"%s\n\nif we want to help users who want to make statistics.. I've changed few error messages when it was no pertinent + rebase. When I see the number of conflict, I prefer close this PR. I don't want to block a new release for that.. ping @mgechev :tennis:. Currently, we have the rule component-max-inline-declarations which checks whether the number        of line is above 3. You can configure this rule with the number 0. You'll have an error like this:\nExceeds the maximum allowed inline lines for template. Defined limit: 0 / total lines: 1 (https://angular.io/guide/styleguide#style-05-04). Actually, we kill two birds with one stone. . @mgechev , in the meantime, I'll pin this issue.. Wrong copy / paste ?. Wrong test description. Wrong test description. No problem ;) . Done. Done. Sure. Done. Can we change '{{' and '}}' by InterpolationOpenand InterpolationClose ?. idem. To change by angular-whitespace.. done. done. done. done. done. done. done.. What do you suggest?. fix spelling : should has -> should have. error copy / paste ?. unused import. unused import. unused import. Add also check-text. Add also check-text. The parenthesis is useless. Maybe can you also add the meaning like this : <div i18n=\"meaning|description@@foo\">Text</div>. Can you add a test with only an attribute i18n without value ?. check-text. can you also add a test with <div i18n>{{text}} test</div> which should fail.. Yes, a test on prop.templateName should be enough.. Yes, this is an evil way. After a good night, now, we have our context the parent class sourceMappingVistor. It's better.. Finally, I modified SourceMappingVisitor.getSourcePosition() method, which is more central. So, this fix the position problem in our tests.. t.expression is never null ? if this is the case => if (t.expression.name). yes, we can. The rule doesn't check that.. parent.parent is always defined ?. Why are you drop the check-pipe rule ? In relation with #412 ? . optionsDescription  requires a description.. Can you add an example with optionExamples ?. condered  => considered ?. can you propose something else ?. This rule isn't only for boolean Input ?. Can you add a test with a type string.. Yes, a very early WIP ;). done. No. I added a test with this expression.. I didn't use the parser for three main reasons:\n- I didn't find easily the information I needed. I can't say that this parser is very \"user friendly\".\n- Without the expression parser of Angular, we are bound only on the public API.\n- Our analysis is purely static. Hi @mgechev,\nOk, I've found my holy graal ! thx.. In the previous test, We have set a complexity of 7. . I'm not sure we have need of this package also. . We have an optionnal parameter here. add optionExamples also. can you add the values linesLimit and this.getTemplateLineCount(metadata) in the error message ?. To be in agreement with the style guide, can you also check the css inline ?. template / css: we're fighting the same evil. I would put the both in the same rule. We could have the optionnal value at -1 to disable the css / template part.. No, it's implicit.. I 'm not sure that you can use this flag in spec . Since we offer a check for css and template, we should rename the rule like this: MaxInlineDeclarationsRule (and the file name). To rename as max-inline-declarations. I'm not in favor of removing directive.  The sentence is ambiguous. We can change it by:\n\nDisallows renaming directive or component inputs by providing a string to the decorator.\n\nhowever, a component is a directive.. We should be more specific in saying that it is Angular's responsibility to invoke these methods.. I find this syntax difficult to read again. Can you change this ?. @rafaelss95 , have you seen this comment ?. Just 'Explicit calls to lifecycle hooks is confusing. Invoke lifecycle hooks is the responsability of Angular'. add super.visitNgOutput (I feel responsible :japanese_ogre: ). done. done. done. done. It seems to me too little. Animation is quickly verbose. 15 lines, it is more common for a simple animation.. Should not we throw an error in this case ?. statements' => statement's ?\n. It's a shame to lost the value : template lines. It's a valuable value.. What's happen when we use only true ?\nWould not it be rather: \nts\noptionExamples: [true, OPTION_CHECK_INTERPOLATION],. What's happen when we use only true ?\n. is it really Optional ?. What's happen when we use only true ? Does that make sense ?. If the job isn't too hard, I would prefer to use the default value of strictPropertyInitialization. Could you update this PR in this direction ?. Would not it be interesting to downgrade tslint to \"~5.9.1\" like angular CLI ?. tsutils isn't a dependencies/peerDependencies of Codelyzer. IMO, sometimes, it's safer to duplicate some code lines than to be linked to a third-party  library.. good catch. Using visitNgComponent was my first thought. Unfortunately, I can't access to 'templateUrl' et 'styleUrls'. It seams more efficient with inline template.. The style guide Angular says: \n\nWhy? A component relative URL requires no change when you move the component files, as long as the files stay together.\n\nI understood that like 'in the same folder' (mainly in an Angular CLI environment)  but, indeed, it can lead to different interpretations.\nOur rationale is when you move the component files. So, we should accept all relative paths. \nIn my IDE, if I move a component with a relative url, my IDE fixes the new path automatically. \nI agree that ./../ is unclean but, for me, it's the same thing than ../.\nDo you know what I mean ? I can fix it quickly with this in mind (we accept all relative paths). . Options => `Options` . Maybe 'Run only for Components', For instance, Pipe doesn't have to be checked.. I'm not sure it's necessary to have an option.  We want to have a check on use of OnPush, not of Default. In your implementation, if we use the DEFAULT option, we have to set the property changeDetection: ChangeDetectionStrategy.Default. It's weird for a default property, no ?. exists -> exist. Can you add a test of this ?. I think we can change the status to Stable for this rule;. Be careful when we'll merge this PR with #756. yes @rafaelss95 , this rule used visitEvent, what explains this behavior.. is It possible or it's just for  not ~~don't just after~~ using  '!' ?. is It possible or it's just for  not ~~don't just after~~ using  '!' ?. Question: using namespace is a good practice ?. When I see this link, I'm not sure that we have to test 'blink'.. @mgechev , what do you think about it ?. Heading or Anchor. In the same way, I see that button have a similar need.\nCan we again broaden the rule ?  . hmm, In the Angular world, I'm not sure we can omit a Type.  But, @mgechev , your example is interesting:\nIf we create a simple class  like that:\ntypescript\nexport default class { ... }\nand we launch ng lint, we have a big big crash [here] (https://github.com/mgechev/codelyzer/blob/master/src/propertyDecoratorBase.ts#L41) and many other places ! \n@mgechev , @rafaelss95 , I'm not very fan of the !  Non-Null Assertion. We cannot say that \ntypescript\nconst className = metadata.controller.name!.text\nis the same that\ntypescript\nif (!controller.name) return;\n const className = controllerName.text;\nIf we accept metadata.controller.name!.text, we should not write if (!controller.name) return; \nHence my  question.\nSo, we must keep this test, but we must also use this test everywhere and stop to use the Non-Null Assertion.\nAre you agree ?\n. the title isn't correct. can you add a test with the button. It's the syndrome of the thing that we add at the last moment... ts.BooleanLiteral seems more convenient . refactored. good catch. it comes from the merge of my previous branch... I'm going to fix that also in noOutputRenameRule.. Unfortunately, We should keep ?.  name may be not present in the source. It's done. Yes, of course but it's a static analyse. . Your comment here noPipeImpureRule.spec.ts is possible due to this choice. Maybe, in a second time, can we change all the string. . It's a mistake.\nconst isBoolean = pureExpression && isBooleanLiteralLike(pureExpression);\nshould be enough.. arff. ",
    "buu700": "\nI'm not sure there's a good way to predict if a component is suitable for OnPush ChangeDetectionStrategy. Do you have any ideas?\n\nWhat about validating that every variable referenced in the template is either @Input() or readonly (with the latter intended to cover static values and observables)? (There's also the issue of getters \u2014 that feels hairier to properly address, but maybe just validate that they don't blatantly reference non-read-only class members?)\nThere would probably be some exceptions where users need to disable the rule for certain components, like when relying on manual change detection initiation, but unless I'm forgetting something I think just about any ideal/idiomatic OnPush-compatible code would comply with the above.. ",
    "mrmeku": "+1 vote. If and when you decide to go ahead with this @mgechev I'd be willing to try and implement it. I think detecting whether something should be OnPush is nearly impossible as you've said, but requiring that you add your component to a whitelist of things that are exempt is super easy. That's what I'm voting for. I would too. I used the term white list intentionally ambiguous just in\ncase other people felt differently.\nOn Mon, Jul 23, 2018, 12:22 PM Dominique M\u00fcller notifications@github.com\nwrote:\n\nAssuming there is no relevant difference between defining a whitelist\narray in the tslint file vs. using tslint:disable comments, I would\ncertainly prefer the comment-based solution.\nIn my opinion, tslint:disable comments are much easier to maintain because\nthe linting exception is closer to the actual source code it affects.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/135#issuecomment-407154261,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHteO1rYZCEXx1xGSO8IbYty2ysRv_sUks5uJhR4gaJpZM4KpeID\n.\n. I'll take it! Assign it to me :D. \n",
    "ajantsch": "We're working on optimizing on of our apps right now, and one of the measures we take is to make all the components to use ChangeDetectionStrategy.onPush, while during the transition period we would also like to whitelist some components that haven't been updated yet. So this feature would be very beneficial for us \ud83d\udc4d . ",
    "keradus": "I believe that @ajantsch is supper fine with disabling-by-comment approach,\nhe simply gave background why he is so eager to see the feature ;)\nI wouldn't imagine changing all components at once, also - thus transition period idea he described.\nbtw, I would be also supper happy to see this live ! :+1:\nIt looks like one with most votes also ( https://github.com/mgechev/codelyzer/issues?utf8=%E2%9C%93&q=label%3A%22votes+needed%22+sort%3Areactions-%2B1-desc+ ). ",
    "artaommahe": "@mgechev it crashes at this case\n```ts\nexport function createComponentMock(componentOptions: Component) {\n  if (!componentOptions.template) {\n    componentOptions = { ...componentOptions, template: '' };\n  }\n@Component(componentOptions)\n  class SomeComponent {}\nreturn SomeComponent;\n}\nlast version. @mgechev\n\u2514\u2500 codelyzer@4.5.0\n\u2514\u2500 tslint@5.12.1\n\u2514\u2500 @angular/compiler@7.0.3\n\u2514\u2500 @angular/core@7.0.3\n\u2514\u2500 typescript@3.1.6\n```. ",
    "UnwrittenFun": "Perhaps an option to only warn if the class name ends in Service, not all exported classes we use are services.. Having the exact same problem, something that made the error go away was changing things like this\n(actionBarState$ | async).buttons.length\nto\n(actionBarState$ | async)?.buttons?.length\nThough I think this might just be hiding the problem, or just preventing the rule from checking properly, so not really a long-term or good solution. \ud83d\ude15 Lost a couple hours due to this. No warning whatsoever that your transform or styles are broken is pretty worrying to me. ",
    "fabianluque": "Count me in here if you need any help. I'd love to have this in VS.\n. Yes, I knew about the extension but it's not the same thing:\n- It does not support custom rules like codelyzer\n- It displays the errors in the error list pane instead of inside the editor\nIn that particular screenshot you've shared, it's actually TS compiler that's warning you, not TSLint.\n. Like I said above, it's not supported. The extension was the former WebAnalyzer and now they are bundling it with ASP.NET Core Tooling extension.\nIt also does not support using a different TSLint version, so for example if you switch to TS 2.0, you get a lot of wrong warnings.\nSee here: https://github.com/aspnet/Tooling/issues?utf8=%E2%9C%93&q=is%3Aissue%20tslint%20\n. ",
    "MarkPieszak": "Web Analyzer doesn't work with 2015, but great news! @fabianluque \nThe very latest \"preview\" of .NET Core 1.1.0 automatically has TSLint etc in it, so it works!\n\nAdded PR #143 to note it in the readme for codelyzer @mgechev \n. Oh shoot, let me test. Have you tried the 1.1.0-preview and had no luck?\n. You're right for example:\n\"component-selector-prefix\": [ true, \"app\" ],\nDoesn't get triggered if I remove the prefix app- from a Component's selector.\nHmm what is missing here...\n. @michaeljota Yeah I think that's what we've realized, it's the lack of a good TSLinter in VStudio that's the problem :/\n. templates-use-public is being dropped?\nCouldn't get that one working actually :(. It may of been the project I was working with (it had a boat-load of strange issues (hidden characters driving TSLint crazy I'm guessing), let me double check on a normal one!. ",
    "antonybudianto": "https://github.com/antonybudianto/angular-webpack-starter\n- update the typescript\n- run npm run lint\n. Full error log\n``\nnpm ERR! Darwin 16.1.0\nnpm ERR! argv \"/Users/antony/.nvm/versions/node/v7.0.0/bin/node\" \"/Users/antony/.nvm/versions/node/v7.0.0/bin/npm\" \"run\" \"tslint\" \"src/**/*.ts\"\nnpm ERR! node v7.0.0\nnpm ERR! npm  v3.10.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! angular-webpack-starter@2.0.0-beta.2 tslint:tslint \"src//*.ts\"`\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the angular-webpack-starter@2.0.0-beta.2 tslint script 'tslint \"src//.ts\"'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the angular-webpack-starter package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     tslint \"src//.ts\"\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs angular-webpack-starter\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls angular-webpack-starter\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/antony/Documents/Code/Web/angular-webpack-starter/npm-debug.log\nnpm ERR! Darwin 16.1.0\nnpm ERR! argv \"/Users/antony/.nvm/versions/node/v7.0.0/bin/node\" \"/Users/antony/.nvm/versions/node/v7.0.0/bin/npm\" \"run\" \"lint\"\nnpm ERR! node v7.0.0\nnpm ERR! npm  v3.10.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! angular-webpack-starter@2.0.0-beta.2 lint: npm run tslint \"src/**/*.ts\"\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the angular-webpack-starter@2.0.0-beta.2 lint script 'npm run tslint \"src//*.ts\"'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the angular-webpack-starter package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run tslint \"src//*.ts\"\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs angular-webpack-starter\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls angular-webpack-starter\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/antony/Documents/Code/Web/angular-webpack-starter/npm-debug.log\n```\n. looks like #142 \n. ",
    "xtianus79": "@mgechev Ok... I have figured out that if there is an error and it returns something then the error is thrown... if nothing is wrong then i proceeds to check and return nothing but a new console line. \n. here is my tslint.json\n```\n{\n  \"rulesDirectory\": [\n    \"node_modules/codelyzer\"\n  ],\n  \"rules\": {\n    \"class-name\": true,\n    \"comment-format\": [\n      true,\n      \"check-space\"\n    ],\n    \"curly\": true,\n    \"eofline\": true,\n    \"forin\": true,\n    \"indent\": [\n      true,\n      \"spaces\"\n    ],\n    \"label-position\": true,\n    \"max-line-length\": [\n      true,\n      140\n    ],\n    \"member-access\": false,\n    \"member-ordering\": [\n      true,\n      \"static-before-instance\",\n      \"variables-before-functions\"\n    ],\n    \"no-arg\": true,\n    \"no-bitwise\": true,\n    \"no-console\": [\n      true,\n      \"debug\",\n      \"info\",\n      \"time\",\n      \"timeEnd\",\n      \"trace\"\n    ],\n    \"no-construct\": true,\n    \"no-debugger\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": false,\n    \"no-eval\": true,\n    \"no-inferrable-types\": true,\n    \"no-shadowed-variable\": true,\n    \"no-string-literal\": false,\n    \"no-switch-case-fall-through\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-unused-expression\": true,\n    \"no-unreachable\": true,\n    \"no-use-before-declare\": true,\n    \"no-var-keyword\": true,\n    \"object-literal-sort-keys\": false,\n    \"one-line\": [\n      true,\n      \"check-open-brace\",\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"quotemark\": [\n      true,\n      \"single\"\n    ],\n    \"radix\": true,\n    \"semicolon\": [\n        true,\n      \"always\"\n    ],\n    \"triple-equals\": [\n      true,\n      \"allow-null-check\"\n    ],\n    \"typedef-whitespace\": [\n      true,\n      {\n        \"call-signature\": \"nospace\",\n        \"index-signature\": \"nospace\",\n        \"parameter\": \"nospace\",\n        \"property-declaration\": \"nospace\",\n        \"variable-declaration\": \"nospace\"\n      }\n    ],\n    \"variable-name\": false,\n    \"whitespace\": [\n      true,\n      \"check-branch\",\n      \"check-decl\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n\"directive-selector-name\": [true, \"camelCase\"],\n\"component-selector-name\": [true, \"kebab-case\"],\n\"directive-selector-type\": [true, \"attribute\"],\n\"component-selector-type\": [true, \"element\"],\n\"directive-selector-prefix\": [true, \"sg\"],\n\"component-selector-prefix\": [true, \"sg\"],\n\"use-input-property-decorator\": true,\n\"use-output-property-decorator\": true,\n\"use-host-property-decorator\": true,\n\"no-attribute-parameter-decorator\": true,\n\"no-input-rename\": true,\n\"no-output-rename\": true,\n\"no-forward-ref\": true,\n\"use-life-cycle-interface\": true,\n\"use-pipe-transform-interface\": true,\n\"pipe-naming\": [true, \"camelCase\", \"sg\"],\n\"component-class-suffix\": true,\n\"directive-class-suffix\": true,\n\"import-destructuring-spacing\": true,\n\"templates-use-public\": true,\n\"no-access-missing-member\": true,\n\"invoke-injectable\": true\n\n}\n}\n```\n. @mgechev typescript ^2.1\n. @mgechev i put it in codelyzer and it says no issue... \nhowever the same error is occuring.... \nsrc/app/components/admin/person/order-by-active.pipe.ts[4, 1]: The OrderByActivePipe class has the Pipe decorator, so it should implement the PipeTransform interface\n. @mgechev just to ask what is the latest version?  I don't see releases...\nthanks by the way\n. ",
    "khodev": "npm will install typescript 2.1.x\ncodelyzer/src/util/syntaxKind.ts > SyntaxKind.current().ImplementsKeyword returns 106 where it should be 107 starting from TypeScript version 2.1.0\nThe breaking change is here:\nhttps://github.com/Microsoft/TypeScript/commit/6814c1d883791a1ad976f3146315de30e00dc0b9#diff-9a9b25e2950a3c3c611c9e2e095e2e41\nbefore: ImplementsKeyword = 106\nafter: ImplementsKeyword = 107\n. ",
    "e-cloud": "what should be updated for supporting TS 2.2.0. I may give a hand on this :smile: . ",
    "ocombe": "Ah damn it looks like it's not as simple as updating the dependencies (the tests didn't pass), I'll close this PR and let you do a proper update of the lib then\n. Interesting, thanks @teropa! This explains a lot of the errors that I listed and should be helpful to @mgechev if he decides to do that :). ",
    "gruppjo": "Oh. Wasn't aware of that. Sorry! And thanks for the swift response! :)\n. ",
    "nikolaiwu": "Fixed it! I added codelyzer, tslint and typescript as dev dependencies to the theme, moved the tslint.json to theme dir, and I also added this to my tsconfig.json:\n\"include\": [\n      \"PATH_TO_THEMES/**/*\"\n  ],\n  \"exclude\": [\n      \"PATH_TO_THEMES/**/node_modules\"\n  ]\nBuild passes without any problems and codelyzer works perfectly.\nFeel free to add something, but I consider this issue as closed.\n. ",
    "paralin": "Can you roll a release with this?. Thanks :). ",
    "maxime1992": "Any update about the release ? :). And here we go !!\n\nIt seems you managed your :beers: well ! Thanks @mgechev !! :smile: . @mgechev sooner the better so our lint can pass on CI with that rule\nSo CLI I guess  :smile: . I came here to post that but @mattlewis92 did it 2 days ago :smile:  !\nIndeed, I think it would be a really nice feature! :beers: . ",
    "ammarhaider7": "@mgechev thanks Minko!. ",
    "altschuler": "Roger, got it working. For reference, make sure that tslint is globally installed, then it should work out of the box with flycheck. Thanks!. ",
    "4kochi": "Tslint 4.0 API has changed:\nhttps://github.com/palantir/tslint/pull/1720. ",
    "devoto13": "I think it can be closed as duplicate of #157.. ",
    "SatishMHiremath": "Codelyzer\nA set of tslint rules for static code analysis of Angular TypeScript projects.\nYou can run the static code analyzer over web apps, NativeScript, Ionic, etc.\nAngular CLI has support for codelyzer.Run the below npm command for tslint\nnpm i tslint-angular. Codelyzer\nA set of tslint rules for static code analysis of Angular TypeScript projects.\nYou can run the static code analyzer over web apps, NativeScript, Ionic, etc.\nAngular CLI has support for codelyzer.Run the below npm command for tslint\nnpm i tslint-angular. ",
    "gligoran": "Hey! Any plans on releasing this soon?. ",
    "mlc-mlapis": "Minko, thank you.. Great, I will test it.. ",
    "piq9117": "wow! a personal message from the main contributor. thanks @mgechev! Your project has been helping me tremendously!. ",
    "crebuh": "@mgechev \nthx for the quick response here is the output within the project folder:\nchuber@XIAOMI-MI:~/app$ ./node_modules/.bin/tsc -v\nVersion 2.0.2\nchuber@XIAOMI-MI:~/app$ ./node_modules/.bin/tslint -v\n4.0.2\n\nthe project is still using typescript 2.0.2. here is a copy of my app.ts http://pastebin.com/mk0GK0hN\nI am not sure maybe the project it self is causing problems? Currently I am working on an angular universal (https://github.com/angular/universal) project.. @mgechev \nI'm using angular at version 2.1.0. also the compiler. ",
    "markheron91": "Ok, think I've worked out what the problem might be, and if I'm right then it is more a problem with the changelog documentation. The changelog shows the directive-selector-name and directive-selector-type have been merged into one rule (directive-selector), but from looking at the code it looks like the directive-selector-prefix rule has also been merged to this rule aswell.\nThis was causing me to basically take the two arrays in the rules [true, 'attribute'] and [true, 'camelCase'] and merging them into one giving [true, 'attribute', true, 'camelCase']. The second true was causing the error in the code because join cannot be called on it.\nReally what it should be changed to is [true, 'attribute', 'app', 'camelCase'] in my situation, merging in the prefix rule also. The changelog has the \"sg\" in the third element of the array but it is not clear when reading it that the \"sg\" is actually supposed to come from the directive-selector-prefix rule that is also removed.\nI think the changelog should be updated to clarify the removal of these rules and how to properly combine them.. ",
    "Manduro": "No problem. Thank you for building this awesome tool!. Yes we can use interpolation if I'm correct, but be sure to double check it!\nI'm not sure if the first case I submitted is valid. Maybe it was just my wishful thinking. I'd probably need to split that into two elements with two i18n attributes.. ",
    "bradyisom": "Using 2.0.0-beta.3, I am still getting the second issue reported here. Specifically, referencing a local variable in the template.. Sure. Here is a simple project generated by angular-cli (1.0.0-beta.22-1):\nhttps://github.com/bradyisom/codelyzer-173\nThe only addition is an angular material menu that matches the sample: https://github.com/angular/material2/blob/master/src/lib/menu/README.md\nWith this simple project, I get the following error by running ng lint:\nsrc/app/app.component.html[5, 41]: The property \"menu\" that you're trying to access does not exist in the class declaration.\n. Is that file used by angular-cli? I added that file and tried to add configuration that will fix this problem, but there was no visible effect. It looks like ng lint just executes tslint \"src/**/*.ts. Does that go through the right code path where codelyzer can load this advanced configuration?. Thank you. That is working for me now. I did have the .codelyzer.js in the right place. I got hung up on the example in the \"Advanced Configuration\" section of the documentation. Copying and pasting that example does not work. It did not have an = after module.exports and there was no error in the console. It was also not clear what I was supposed to use for the exportAs parameter. Thank you again for your help in getting this working.. ",
    "surenrao": "i am using latest angular 2.2 and codelyzer 0.0.26. I am using webpack in dev mode under console.. ",
    "sgronblo": "I am trying to get this working in 2018 with codelyzer@4.2.1 and it doesn't seem to be working.. ",
    "mastertinner": "Awesome! Thx, @mgechev!. ",
    "psurrey": "I've had the same issue and took the time to go through the files in order to figure out what caused tslint to hang.\nResult: We use stylus for our css styles and in one of the *.styl files there was the following line:\nposition: relative // relative for .tableConfigs position: absolute\"\nchanging it to (removing the \" at the end of the line fixes it):\nposition: relative // relative for .tableConfigs position: absolute\nDoes codelyzer analyze the styl files as well?. ",
    "nicolashenry": "@mgechev Thanks!. ",
    "spali": "thanks! :+1: \nsearched at least a couple of times for this specific error here and didn't got this Issue in the search results :(. ",
    "mikhailmelnik": "Not sure my issues are the same but I would say it looks like false positive too.\nFor the following template (based on ng-boostrap popover example)\n<template #popContent>Hello</template>\n<a ngbPopover]=\"popContent\">click me</a>\nng lint says The property \"popContent\" that you're trying to access does not exist in the class declaration.\nAnd for the following statement in template \n{{t.errorData.errorMessages[0].message}}\nng lint says The property \"message\" that you're trying to access does not exist in the class declaration. while it is absolutely correct and even intellisense displays message option if I move this code to TS file.. @mgechev it is 2.0.0-beta.1, installed with angular-cli v1.0.0-beta.22. ",
    "almothafar": "I'm using:\n\"codelyzer\": \"~3.0.1\",\n\"tslint\": \"~4.5.1\",\nBut still getting the same issue!. ",
    "jessesanders": "@mgechev - This is still an issue.  If you look closer at his html he is declaring an view only variable, using:\n#d=\"ngbDatepicker\"\nThis is a valid way of creating a view variable which then can be used to call the toggle method on the datePicker component.  This is the syntax provided by the angular/bootstrap team.\nTurning off the rule means I no longer get to enforce the bad missing member variables just to get past this valid syntax. ",
    "digimezzo": "I've just updated codelyzer from version 2.4.0 to 3.0.1 my Angular2 project because I'm experiencing this issue. However I'm still getting this output when using version 3.0.1:\nThe method \"d\" that you're trying to access does not exist in the class declaration.\nDo I need to perform specific steps or configuration to apply this fix?. ",
    "victornoel": "@mgechev Is there another issue open for this bug? I'm experiencing it currently (see angular/angular-cli#4351), and I don't understand from your comment why you closed the present issue\u2026\nThanks :). Thank you for the explanation. @mgechev sorry to bother you again but could you give an example of what you meant by:\n\nThis can be workarounded by updating .codelyzer.js\n\nI really don't get how to make it work\u2026\nAnd by the way, why close this issue if it is not fixed (I just tried latest release)?. @mgechev anything we can do to help fix this issue? or maybe could you share an easy workaround (via .codelyzer.js I guess) to ignore that issue on html files?. @mgechev not exactly sure why, but since @angular/cli 1.0.0-rc0, this problem disappeared.\nI tested with codelyzer 2.0.1 and both @angular/cli 1.0.0-beta.32.3 and 1.0.0-rc.0: the first shows me the error discussed here and the second does not!. @rthewhite last time I checked, it worked with exactly both these settings.\nAre you sure you configured your angular project exactly as it is in a ng new from latest angular cli? Because lots of things changed so it could be linked\u2026. @mgechev same as @maxime1992, the sooner the better, and like this we will be able to report problems sooner too if we find some ;). ",
    "rthewhite": "I'm using codelyzer 2.0.1 and @angular/cli 1.0.0-rc0 and the problem seems to still exist for me? Anyone else still having issues with this?\n. ",
    "connor4312": "I ran into the issue today with codelyzer 2.0.1. Here's an example of a failing usage:\nhtml\n<div *ngIf=\"(groups | async).length > 0\"></div>\nThis issue is also reproducable with 2.0.0. Here's the version of our Angular components:\n```\n$ cat package.json | grep angular\n    \"@angular/common\": \"2.4.7\",\n    \"@angular/compiler\": \"2.4.7\",\n    \"@angular/compiler-cli\": \"2.4.7\",\n    \"@angular/core\": \"2.4.7\",\n    \"@angular/platform-browser\": \"2.4.7\",\n    \"@angular/platform-browser-dynamic\": \"2.4.7\",\n...\n````. Awesome \ud83d\ude04 Not sure if we'll upgrade to a beta release but I'll let you know if we run into this again in 3.x. It looks like the failing build is an issue with node-sass on Travis' 32-bit slaves. Tests pass otherwise here!. Thank you!. ",
    "brian428": "Minko, I'm using 3.0.1. Should this issue be fixed with that version, or was this something you were waiting to tackle in 4.x? I ask because I'm still getting errors related to async pipe, as well as properties in a component superclass not being found:\nERROR: C:/Developer/Projects/app/user.component.html[14, 45]: The method \"toggleSettings\" that you're trying to access does not exist in the class declaration.\nERROR: C:/Developer/Projects/app/user.component.html[10, 32]: The property \"async\" that you're trying to access does not exist in the class declaration.\nERROR: C:/Developer/Projects/app/user.component.html[11, 37]: The property \"async\" that you're trying to access does not exist in the class declaration.\nIf you think this shouldn't be happening, I can try to come up with a repro case.. Ah I think this is now slated for 4.x, correct? https://github.com/mgechev/codelyzer/issues/191#issuecomment-296697740. Does anyone know if there's a way to disable this rule just for the templates that have the problem? I'd like to avoid just turning off the whole rule, since it only seems to fail in some limited situations (async pipe, inherited properties, etc.).. Thanks, I was thinking it needed to go in the actual HTML somehow. I'll try it on the component itself.. ",
    "karlhiramoto": "Is there any workaround to ignore these?. ",
    "robisim74": "@mgechev Thanks!. ",
    "asadsahi": "@mgechev not sure if this has to be part of this issue.  I have disabled tslinting in html for the whole file:\n\nBut still getting this error:\nThe property \"message\" that you're trying to access does not exist in the class declaration.\nNote: message is a base class property of this component.\nSo, shouldn't disabling override any other check?. @saithis Thanks. sorted. :). having same issue still with 3.0.0.. @mgechev \n\nI can push 3.0.0-beta.x as 4.0.0-beta.x\n\nWhat do you mean by that?. Thanks @mgechev \n4.0.0-beta.0 makes sense to me.. ",
    "saithis": "@asadsahi You have to disable the rule/tslint in the component (typescript file), not the template.. ",
    "wlwg": "@mgechev I'm having this issue now. Any progress on this?. @guojenman Thanks. Another workaround could be setting up a proxy property in the child class to return the desired property.. ",
    "Shahor": "I'm doing this (redeclaring the var) but it's quite annoying :(. Having the same exact problem right now. \nQuite annoying :D. Same here :/\nI'm stuck between a bug from typescript requiring me to have the latest version and this, blocking my commits because I lint on pre-commit.\n\ud83d\ude22 . ",
    "mpetkov": "What is the tslint property to disable this check for time being?. ",
    "KhodeN": "\nWhat is the tslint property to disable this check for time being?\n\nno-access-missing-member?. CLI. ",
    "adamgorIBM": "@guojenman your workaround worked for me. Was not just a property but a method.\n```\nclass Base {\n  bar(arg){return 'x'};\n}\n@Component({\n  selector: 'child',\n  template: '{{ this\"bar\" }}'\n})\nclass Child extends Base {}\n```. ",
    "Ancoron84": "Looks promising, I tried the new beta 4 and all the warnings related to this topic are gone :)\nGreat Job. ",
    "leocaseiro": "Temporary, another solution is use on your app.component.ts:\n/* tslint:disable:no-access-missing-member */\nand\n/* tslint:enable:no-access-missing-member */\n. @mgechev sorry If I misunderstood, but I'm still having issues with extended classes.\nIt seems working fine for Classes, but not for templates inline and external .html with these versions:\n@angular/*: 4.3.4\n@angular/cli: 4.3.4\n@angular/language-service: 4.3.4\ncodelyzer: 3.1.2\ntslint-language-service@0.9.6\nI can use the property in the extended class, however, if I try to access in the template, the command:\nng lint --type-check \nReturns the error:\nThe property \"config\" that you're trying to access does not exist in the class declaration.\nEq:\nts\nexport abstract class MyParentClass {\n    public config: string = 'name';\n}\nts\n@Component({\n    selector: 'my-child-component',\n    template: `<h1>{{config}}</h1>` // The property \"config\" that you're trying to access does not exist in the class declaration.\n})\nexport class MyChildComponent extends MyParentClass {\n     method() {\n          this.config = 'new name'; // no complains\n    }\n}\nI wonder how would I run ng-lint with AOT?\nThanks\n. Thanks @CSchulz\nI thought so.\nMy question is: How can I pass my lint, though?. I see, I have to disable on tslint:\njson\n{\n    \"rules\": {\n        \"no-access-missing-member\": false\n    }\n}\n@CSchulz thanks for that!!!!. @StefH, you can keep it in your tslint.json, but add the comments to pages that are extended https://github.com/mgechev/codelyzer/issues/191#issuecomment-295092702. Try on src/app/example/example.component.ts\n. Just to clarify. I was having the same issue and the exclude should be on your angular-cli.json \nEq: \n{\n    lint: [\n        {\n            \"exclude\": \"**/node_modules/**/*\"\n        }\n    ]\n}\nVia: https://github.com/angular/angular-cli/issues/4350#issuecomment-277501678. I'm using codelyzer@3.0.0, and the warning was still happening:\nWarning: The 'no-use-before-declare' rule requires type checking\nTo fix, just run ng lint with typeCheck, and the warning is gone:\nng lint --typeCheck. As a workaround, you can instantiate using the @ViewChild decorator on your @Component, like so:\n@ViewChild('auto') auto: ElementRef;. ",
    "xnnkmd": "@mgechev It seems this problem persist in newer versions as well. I still run into this problem with angular cli 1.0, codelyzer 2.1.1 and ts-lint 4.5.1 (unfortunately, I can't upgrade ts-lint to the newst 5.xx version because of https://github.com/angular/angular-cli/issues/5848).. ",
    "gund": "BTW it also throws when referencing local template variable and reading different value (for ex. directive):\nhtml\n<input ngbDatepicker #d=\"ngbDatepicker\">\n<button (click)=\"d.toggle()\">Toggle date picker</button>\nResults in error:\nERROR: src/em/components/calendar/calendar.component.html[10, 61]:\nThe method \"d\" that you're trying to access does not exist in the class declaration.. ",
    "CSchulz": "I did run into the same issue and would like to try the 4.0.0-beta.\nIs there no release yet?. @mgechev Can we support you with implementation? The branch 4.0.0-beta.4 seems to be not up to date, right?. As far as I know there is no implementation in the language service right? \nWould you provide some support if somebody would try to migrate it?. Ah yeah right! We have already AoT in our build process.\nThanks!. Use Angular's AoT or revert back to 2. There will be no fix: https://github.com/mgechev/codelyzer/issues/191#issuecomment-307876588. @leocaseiro You don't run lint with AoT, you run a seperate AoT build which comes up with such errors.. > There won't be support for inheritance and it's very likely the no-access-missing-member rule to be removed in version 4. The language service already handles this.\nhttps://github.com/mgechev/codelyzer/issues/191#issuecomment-307685909\nYou can disable the rule and rely on the AoT build.. ~Could be a bug with Angular itself. I am running 4.2 and there it is found. You should report this in the angular repository with an example.~\nI had checked it with @angular/cli 1.3.0 / @angular/compiler-cli / 4.3.4 and it is working.\n\nERROR in $$_gendir/app/app.component.ngfactory.ts (26,31): Property 'test' does not exist on type 'AppComponent'.\n. This won't be fixed https://github.com/mgechev/codelyzer/issues/191#issuecomment-307685909\n\nYou can use the AoT build of Angular.. ",
    "thinkingmedia": "I found that adding an interface to the base class that declares the shared properties also squashes this warning.\n```\ninterface IControl {\n      name: string;\n}\n@Component({\n    selector: 'control'\n})\nclass Control implements IControl {\n    @Input()\n    public name: string;\n}\n@Component({\n   selector: 'button',\n   template: '{{name}}'\nclass Button extends Control {\n}\n```\nI'm not sure why, but seems to fix other auto-complete issues in IDEs as well.. ",
    "mwent-cray": "What @thinkingmedia mentioned doesn't seem to work when you import the base class.\nNot even when you create an interface that extends the original one in another file.. ",
    "abalad": "\"codelyzer\": \"~3.0.1\": This arises the same problem.. ",
    "rafiwardak2003": "This problem is back in 3.x.x (3.0.0 and 3.0.1). I had to revert back to 3.0.0-beta.0 to get it to work.. ",
    "emilio-martinez": "@mgechev is there another issue where you're tracking support for inheritance on a stable release? Just wondering since this particular thread is closed.. @mgechev just to double check, you'll be removing no-access-missing-member in the future, correct?. @mgechev is there a replacement for checking that the Pipe names are prefixed accordingly?\n\"pipe-naming\": [true, \"camelCase\", \"app\"]\n                                     ^. ",
    "elwinarens": "Same issue with ^3.1.1. Reverted back to ~2.0.0 to get rid of the errors.. ",
    "schmitch": "Actually I'm on codelyzer 3.1.2 and still getting that error.. ",
    "MaZderMind": "The AOT-Build does not catch usage of inexisting properties in @angular/cli 1.2.6 / @angular/compiler-cli / ^4.3.. ",
    "StefH": "@leocaseiro The problem with disabling the rule is that you lose this exact validation.\nSo is there a codelyzer version (and tslint combination) which solves this issue ? (FYI: I'm using this in a WebpackStarter project, not in a Angular CLI project). @leocaseiro \nThe error message is pointing to a html file.\nExample:\n\nERROR: src/app/example/example.component.html[3, 16]: The property \"myProperty\" that you're trying to access does not exist in the class declaration.\n\nSo where to put the lines ?\n/* tslint:disable:no-access-missing-member */\n/* tslint:enable:no-access-missing-member */. Now both issues are closed? Please re-open one !. Now both issues are closed? Please re-open one !. ",
    "pgrzywaczcic": "I have this issue in my project too:\ncodelyzer: 3.1.2\ntslint: 5.3.2\nangular/cli: 1.4.2\nEDIT: so the solution is to disable no-access-missing-member in tslint config as it shouldn't be used anymore - nvm then\n. ",
    "Dzivo": "@pgrzywaczcic \ndisabling is not a solution for us who are not using angular cli. \n. ",
    "joachimprinzbach": "Is it only the error message? Or shouldn't there be any error at all?. It is not about a standard that differs from their own. \nIt is about THE standard for custom element naming. \nYou can find it here: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n\nThey contain a hyphen, used for namespacing and to ensure forward compatibility (since no elements will be added to HTML, SVG, or MathML with hyphen-containing local names in the future).\nPotentialCustomElementName ::=\n[a-z] (PCENChar) '-' (PCENChar)\n\n. ",
    "HFTSOL": "@mgechev \nCan you make the requirement for the dash configurable?  We want the casing to be validated, but the naming of our components can't require a dash due to several \"special use\" components we have.  That leaves erroneous messages in the log that are just in the way.  We would remove this rule to clean up the log, but need the validation for the other components.. @lazarljubenovic @mgechev \nGiven that the idea of Linting is to analyse and audit the code externally, it seems like a violation of the separation/pattern to make the code \"aware\" of, or dictate to, the auditor.  \nIt would be great if the rules could account for the desired modification of the typical standard.  We still want the name validation on all selectors, but we can't have the requirement for the dash since it is in not required for our custom elements.  I understand if it's industry standard, but you already have a significant number of alterations that allow for bending of those standards to account for custom scenarios.  I don't see that this option would be out of place.\nI hope this isn't asking too much.  We appreciate what you've built so far and would like to be able to fully utilize it in our applications.. It doesn't appear they intend to allow people to use standards that differ from their own.  For this reason, and many others, I just disable tslint entirely on every project since it causes more problems than it solves.. ",
    "jahd2602": "@HFTSOL  That's why you have config files like tsconfig.json right?. ",
    "hisantoo": "what if the app location is replaced by [ ] in component-selector\n. ",
    "mahdi-hajian": "change dog to app-dog\napp-Dog is wrong too\njust app-name by Lower Case. ",
    "johannesjo": "Any chance this will be happening? I don't want to use a prefix, as it doesn't make sense to use one in my application and the linting error is really annoying.. ",
    "cosmenguerrero": "A mi me aparec\u00eda ese error cuando borraba la imagen de Angular en el app.component.html, pero me fui al app.module.ts y lo volv\u00ed a compilar si efectuar ning\u00fan cambio y se desapareci\u00f3 el mensaje. \n. ",
    "whittet": "What is the tslint rule's name for disable?. ",
    "nexus-uw": "updated.. ",
    "alain38": "Thank you very much. I should have read the advanced documentation.\nthis code did the trick in .codelyzer.js for the example above\nmodule.exports = {\n  predefinedDirectives: [\n    {\n      selector: '[ngModel]',\n      exportAs: 'ngModel'\n    },\n    {\n      selector: 'form',\n      exportAs: 'ngForm'\n    }\n  ]\n};. ",
    "emilio-simoes": "Yes, the code is working with AoT compilation. The translations are working fine both with Aot and JIT compilations.\nI don't think is an issue os the lang not being defined since the angular2localization explicitly defines it. See https://github.com/robisim74/angular2localization/blob/master/doc/spec.md#2.\nThe translation won't even work if lang is omitted when using parameters, e.g.:\n<h1>{{ 'toolbar.title' | translate:lang:{version:2} }}</h1>\n. I've been looking into it and it seems that this issues is related with issue #191 \nMy component is extending angular2localization Locale wich defines lang, so langis definitely defined.\n. ",
    "iliketomatoes": "This is still an issue in Codelyzer 3.0.0.. ",
    "magnattic": "Can confirm, please reopen the issue.. ",
    "clydin": "Also, I added a PR (#202) to update the dependencies for angular 2.4.. ",
    "mhoyer": "@mgechev what do you think about my comment https://github.com/mgechev/codelyzer/pull/202#pullrequestreview-13933863. I am wondering if there is concrete intent to have this strict dependency regarding upper version boundary? Cause this will always produce a time frame where codelyzer is hanging after a new ng2 release. \nWouldn't \"<3.0 >=2.2.0\" be better?. I see. So it is. ;-). ",
    "loicsalou": "can't seem to be able to attach zip I'm afraid. So here's my package.json deps part:\n\n\"dependencies\": {\n    \"@angular/common\": \"~2.4\",\n    \"@angular/compiler\": \"~2.4\",\n    \"@angular/core\": \"~2.4\",\n    \"@angular/forms\": \"~2.4\",\n    \"@angular/http\": \"~2.4\",\n    \"@angular/platform-browser\": \"~2.4\",\n    \"@angular/platform-browser-dynamic\": \"~2.4\",\n    \"@angular/router\": \"~3.4\",\n    \"core-js\": \"~2.4.1\",\n    \"lodash\": \"~4\",\n    \"ng2-translate\": \"~5\",\n    \"oblique-ui\": \"1.3.0\",\n    \"rxjs\": \"~5.0\",\n    \"ts-helpers\": \"~1.1\",\n    \"zas-web-components\": \"~0\",\n    \"zone.js\": \"~0.7\"\n  }\n\nQuestion is \"is it a known bug ? maybe tslint / codelyzer don't support angular 2.4 yet ?\"\nThanks !\n. that's the one I'm using...\nAny clue / adivce I can investigate in order to solve this ?\nThanks. using 4.2.0.\nmy command-line: \"tslint \\\"components/*/.ts\\\" -o linters/tslint.txt -t verbose\"\n. exactly the same result (tslint is installed globally and same version locally). As you closed the issue I suppose I have missed something. Still got the issue on 2 projects. Will note here if I can find a solution.. So this is the end. Thanks for helping you are totally right I had a version mismatch with tslint. I ended specifying tslint+codelyzer in the dev dependencies of my projects in order to make sure each of them is using consistent versions in all linters.\nmy current versions are tslint 4.2.0 and codelyzer-2.0.0-beta.4.. ",
    "grahamfowles": "I was seeing this issue with the atom-typescript plugin, every time i typed a key an error message appeared which was more than a little annoying\nYou solution worked for me, thanks. ",
    "shortthirdman": "config.zip\nFacing the same issue with the following configuration in my package.json.\nDeveloping angular application with Gulp Build tool and systemjs config.\n. ",
    "yluijten": "@mgechev do you have any idea when this issue will be picked up?. @mgechev can this one be reopened? Looks like there's enough interest for it.. ",
    "subramaniashiva": "I am facing the same issue. Would be happy if this reopened. ",
    "Bigous": "I'll try to help with this.. ",
    "GregOnNet": "Hi,\nI also tried to provide a tslint fix for a rule (see #300) like described in the docs of tslint: https://palantir.github.io/tslint/develop/custom-rules/\nMy provided fix was recognised by VS Code but unfortunately was not applied when clicking on the tooltip.\nDo you know what is needed to get tslint fixes to work?\nKind regards\nGregor. I would be honored to take this task to get into this topic.\nSo if you like assign this task to me.\nKinds from SF Airport. Nice, thank you.. Hi,\nI did my first steps writing the TSLint rule. :-)\nsee first try\nI need some help concerning NgWalker.\nI want to output the position of ViewEncapsulation.None if it has been set. (see spec)\nUnfortunately I don't know how I can walk through the AST to point to that node.\n@mgechev Could you assist me in that question, please?\nKind Regards\nGregor. I thank you very much. Your hint has helped me a lot.. @mgechev Thanks for your feedback.\nI have updated the warning message as requested.\nIf there is anything else please let me know. :-). Thank you. Please refer to 88e3cd417204b063e1bd2155c29de3bd7a2132fa to see the updated warning.. ",
    "teropa": "See also this documentation gist by @chuckjaz https://gist.github.com/chuckjaz/65dcc2fd5f4f5463e492ed0cb93bca60. ",
    "shamim4063": "dynamic-component-loader will not work but it will not throw any error in compile time. . ",
    "deepu105": "looks like there is a closed issue https://github.com/mgechev/codelyzer/issues/145 for the same.\nI'm on \"codelyzer\": \"2.0.0-beta.4\" , \"typescript\": \"2.1.4\" and \"webpack\": \"2.2.0\"\nhere is my entire package.json\n```\n{\n  \"name\": \"temp\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Description for temp\",\n  \"private\": true,\n  \"cacheDirectories\": [\n    \"node_modules\"\n  ],\n  \"dependencies\": {\n    \"@angular/common\": \"2.4.1\",\n    \"@angular/compiler\": \"2.4.1\",\n    \"@angular/core\": \"2.4.1\",\n    \"@angular/forms\": \"2.4.1\",\n    \"@angular/http\": \"2.4.1\",\n    \"@angular/platform-browser\": \"2.4.1\",\n    \"@angular/platform-browser-dynamic\": \"2.4.1\",\n    \"@angular/router\": \"3.4.2\",\n    \"@angular/upgrade\": \"2.4.1\",\n    \"@ng-bootstrap/ng-bootstrap\": \"1.0.0-alpha.15\",\n    \"bootstrap\": \"4.0.0-alpha.5\",\n    \"font-awesome\": \"4.7.0\",\n    \"angular2-cookie\": \"1.2.6\",\n    \"core-js\": \"2.4.1\",\n    \"jquery\": \"3.1.1\",\n    \"ng-jhipster\": \"0.1.1\",\n    \"ng2-webstorage\": \"1.4.2\",\n    \"reflect-metadata\": \"0.1.9\",\n    \"rxjs\": \"5.0.2\",\n    \"swagger-ui\": \"2.2.8\",\n    \"tether\": \"1.4.0\",\n    \"ui-router-ng2\": \"1.0.0-beta.3\",\n    \"ui-router-visualizer\": \"2.0.11\",\n    \"zone.js\": \"0.7.4\"\n  },\n  \"devDependencies\": {\n    \"@types/angular\": \"1.5.22\",\n    \"@types/angular-animate\": \"1.5.6\",\n    \"@types/angular-mocks\": \"1.5.8\",\n    \"@types/jasmine\": \"2.5.38\",\n    \"@types/node\": \"6.0.45\",\n    \"add-asset-html-webpack-plugin\": \"1.0.2\",\n    \"angular2-infinite-scroll\": \"0.2.8\",\n    \"angular-cli\": \"1.0.0-beta.24\",\n    \"angular2-template-loader\": \"0.6.0\",\n    \"awesome-typescript-loader\": \"3.0.0-beta.17\",\n    \"browser-sync\": \"2.18.5\",\n    \"browser-sync-webpack-plugin\": \"1.1.3\",\n    \"codelyzer\": \"2.0.0-beta.4\",\n    \"copy-webpack-plugin\": \"4.0.1\",\n    \"css-loader\": \"0.26.1\",\n    \"del\": \"2.2.2\",\n    \"event-stream\": \"3.3.4\",\n    \"exports-loader\": \"0.6.3\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.4\",\n    \"file-loader\": \"0.9.0\",\n    \"generator-jhipster\": \"3.12.2\",\n    \"html-webpack-plugin\": \"2.24.1\",\n    \"image-webpack-loader\": \"3.1.0\",\n    \"jasmine-core\": \"2.5.2\",\n    \"karma\": \"1.3.0\",\n    \"karma-chrome-launcher\": \"2.0.0\",\n    \"karma-coverage\": \"1.1.1\",\n    \"karma-jasmine\": \"1.1.0\",\n    \"karma-junit-reporter\": \"1.2.0\",\n    \"karma-phantomjs-launcher\": \"1.0.2\",\n    \"karma-remap-istanbul\": \"0.3.2\",\n    \"karma-sourcemap-loader\": \"0.3.7\",\n    \"karma-webpack\": \"1.8.0\",\n    \"lazypipe\": \"1.0.1\",\n    \"lodash\": \"4.17.3\",\n    \"map-stream\": \"0.0.6\",\n    \"phantomjs-prebuilt\": \"2.1.14\",\n    \"proxy-middleware\": \"0.15.0\",\n    \"raw-loader\": \"0.5.1\",\n    \"run-sequence\": \"1.2.2\",\n    \"sourcemap-istanbul-instrumenter-loader\": \"0.2.0\",\n    \"string-replace-webpack-plugin\": \"0.0.4\",\n    \"style-loader\": \"0.13.1\",\n    \"to-string-loader\": \"1.1.5\",\n    \"tslint\": \"4.2.0\",\n    \"tslint-loader\": \"3.3.0\",\n    \"typescript\": \"2.1.4\",\n    \"webpack\": \"2.2.0\",\n    \"webpack-dev-server\": \"2.2.0-rc.0\",\n    \"webpack-merge\": \"2.0.0\",\n    \"webpack-visualizer-plugin\": \"0.1.9\",\n    \"write-file-webpack-plugin\": \"3.4.2\",\n    \"xml2js\": \"0.4.17\",\n    \"yargs\": \"6.5.0\"\n  },\n  \"engines\": {\n    \"node\": \"^4.3\"\n  },\n  \"scripts\": {\n    \"start\": \"npm run webpack:dev\",\n    \"test\": \"karma start src/test/javascript/karma.conf.js\",\n    \"test:watch\": \"karma start --watch\",\n    \"postinstall\": \"npm run webpack:build\",\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"lint\": \"tslint src/main/webapp/app//*.ts --force\",\n    \"lint:fix\": \"tslint src/main/webapp/app//*.ts --fix --force\",\n    \"webpack:build\": \"webpack --config webpack/webpack.vendor.js && webpack --config webpack/webpack.dev.js\",\n    \"webpack:dev\": \"webpack-dev-server --config webpack/webpack.dev.js  --progress --inline --hot --profile --port=9060\",\n    \"webpack:prod\": \"webpack -p --config webpack/webpack.vendor.js && webpack -p --config webpack/webpack.prod.js\"\n  }\n}\n```. I couldnt reproduce on the site but on the project it gives this warning. we are using this in JHipster. So i think it has something to do with typescript or some other dependency version. ",
    "scttcper": "I'm getting the same bug on atom-tslint and also not able to reproduce on the codelyzer website.\nproject \n\"tslint\": \"^4.4.2\",\n\"codelyzer\": \"~2.0.0-beta.4\",\n\"typescript\": \"~2.1.5\"\natom linter-tslint v0.13.1. this silences it. I think there's an issue with tslint Pipe and the Pipe class name? Atom seems to think Pipe is a keyword like class or number. Maybe its looking for .pipe()? I have no idea what i'm talking about.\ntypescript\nimport { Pipe as NgPipe, PipeTransform } from '@angular/core';\n@NgPipe({ name: 'matchMode' })\nexport class MatchModePipe implements PipeTransform {\n  transform(value: any) {\n    if (!value) {\n      return '';\n    }\n    return getMode(value);\n  }\n}. ",
    "ddancziger": "Hi its my first time and i would love to contribute, understood the issue, can you help me pointing where to start with this?\nthanks. thanks\n2 questions\n1) we  dont want to mark as fails when ['name'] (Directive Name) and the @Input('nameChange') name?\ntest: \nts\nit('should succeed, when a directive input property is the same as the name of the directive selector name', () => {\n      let source = `\n      @Directive({\n        selector: ['label']\n      })\n      class ButtonComponent {\n        @Input('labelAttribute') label: string;\n      }`;\n      assertSuccess('no-input-rename', source);\n    });\n2) how can i test if it works (firs time in this project) with tests (how can i run them)? or there is another way before making a test? so i can debug\nthanks. sorry for many questions but im learning a lot\ni just wondering how to get the Directive decorator selector inside the visitNg2Input i have the metadata declaration and inside the parent.text i have the info.\nhow can i get from there the name of the selector ['name']\nthanks. he thanks for all the help im not beeing able to get done this i write this\n```\nexport class InputMetadataWalker extends Ng2Walker {\n  metadata: DirectiveMetadata;\nvisitClassDeclaration(node: ts.ClassDeclaration) {\n    this.metadata = this._metadataReader.read(node);\n    if (this.metadata instanceof DirectiveMetadata) {\n  // let name = this.metadata.decorator.;\n  // let directiveClassName:string = name;\n\n  console.log('has a directive', this.metadata.decorator);\n}\nsuper.visitClassDeclaration(node);\n\n}\nvisitNg2Input(property:ts.PropertyDeclaration, input:ts.Decorator, args:string[]) {\n    let className = (property).parent.name.text;\n    let memberName = (property.name).text;\nif (args.length !== 0 && memberName !== args[0]) {\n  let failureConfig:string[] = [className, memberName, memberName];\n  failureConfig.unshift(Rule.FAILURE_STRING);\n  this.addFailure(\n    this.createFailure(\n      property.getStart(),\n      property.getWidth(),\n      sprintf.apply(this, failureConfig)));\n}\n\n}\n  private extractMainSelector(i:any) {\n    return compiler.CssSelector.parse(i.text);\n  }\n}\n```\ni dont understand how to get the directive selector i only get the input \ni think its taking me to much time to understand if you think someone else can take it and i will do my next time something more for starter\nsorry \nand thanks\n. thank you for your time i managed to pass the test and the only thing its that i need to have the selector like 'label', its not in ['label'] (its not take in it)\n@Directive({\n        selector: 'label'\n})\nclass ButtonComponent {\n   @Input('labelAttribute') label: string;\n}`;\n. 1) When i use metadata.selector if its like ['label'] says that is undefined so its an issue i cant found the label selector.\n2) the behavior for that case needs to be the name of the input is equal to the selector name you can rename the input.\n3) \n@Directive({\n selector: ['label']\n})\nclass ButtonComponent {\n @Input('labelAttribute') label: string;\n}\nhow to use with the CssSelector.parse. ",
    "RuSTer1241": "Angular CLI!  I tried to install angular CLI.\nOn 3 Feb 2017 9:56 pm, \"Minko Gechev\" notifications@github.com wrote:\n\nIs it related to codelyzer or an angular-cli issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/228#issuecomment-277346316,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGV9161PvjzjleTnQPWumoDV9G4IiZoaks5rY4ZSgaJpZM4L2lNx\n.\n. \n",
    "dylanjmorgan": "I am also unable to install angular cli becasue of this... . ",
    "k1xme": "+1, trying to install Laravel Mix but failed in there. ",
    "Xertz": "Did not happen when I'd install it, but when I tried to create a new project.\nAfter all files were created and started to install packages, it throws this error. The weird thing is that inside package.json there is no node-sass as a dependency whatsoever.`. ",
    "negberts": "Sorry, just had a little baby girl so no spare time left :) But I see somebody else was helpfull! . ",
    "Matmo10": "Is there a way to disable this rule in an external template only, but not for the whole project? I don't have a .codelyzer.js config, I just reference the codelyzer rules from tslint.json.\nEDIT:\nNevermind, all you need to do is add /* tslint:disable no-access-missing-member */ in the corresponding typescript file. :). Just curious, when would 3.1.2 show up on npm?. Just tried it out, I still get the following issues with the autofix:\n<div class=\"item-price\">{{swimLaneItem.Price.Value| currency:swimLaneItem.Price.Currency:true}}</div>\ngets changed to\n<div class=\"item-price\">{{ swimLaneItem.Price.Valu e| currency:swimLaneItem.Price.Currency:true }}</div>\nAlso this\n<div class=\"item-description-content\">\n   {{itemDescriptionToUse| slice:0:500 }}{{ (itemDescriptionToUse && itemDescriptionToUse.length > 500) ? '&hellip;' : '' }}\n</div>\ngets changed to this: \n<div class=\"item-description-content\">\n   {{ itemDescriptionToUs e| slice:0:500 }}{{ (itemDescriptionToUse && itemDescriptionToUse.length > 500) ? '&hellip;' : '' }}\n</div>\nAlso this\n<span [hidden]=\"local.ShippingServiceCost.Value == 0\">{{local.ShippingServiceCost.Value|currency:local.ShippingServiceCost.Currency:true}} {{local.ShippingServiceCost.Currency}}</span>\ngets changed to this:\n```\n{{ local.ShippingServiceCost.Valu e |currency:local.ShippingServiceCost.Currency:true }} {{ local.ShippingServiceCost.Currency }}\n```\nSeems like an off by one issue with the inserted space before the pipe. Is this a separate issue?. ",
    "comfroels": "Yeah not a problem! One of my first OSS contributions.\nBeen wanting to get into contributing, so might as well start somewhere.. I'll close it. I'll take another shot at it later this week. I think I've read the source code a little more and understand it a little more. Sounds good.. ",
    "ndcunningham": "That's true, I just wanted to know if you would support something like this.. ",
    "jdjuan": "@mgechev my bad, when I installed the latest version of Codelyzer I didn't notice the UNMET PEER DEPEDENCY warning of @angular packages (core, compiler, compiler-cli). After updating them as well, I had it working. Thanks for your time @mgechev , sorry for this unnecessary issue. Hope it serves as a reference for others. ",
    "NKjoep": "@mgechev I have this issue when an older version of @angular/core is resolved (or stays unresolved). This happens if you have an old project or your main package.json is outdated.\nI would suggest to add a fallback or throw a friendlier error. ngVersion.js is something like:\njs\n  \"use strict\";\n  var core_1 = require(\"@angular/core\");\n  var semver_dsl_1 = require(\"semver-dsl\");\n  exports.SemVerDSL = semver_dsl_1.SemVerDSL(core_1.VERSION.full);\nand that would be nice to prevent .VERSION.full to fail.\n. Exactly, there's no VERSION at all, unfortunately.. ",
    "jessezhang91": "I ended up logging languageService.getProgram().getSourceFiles() and sourceFile.fileName and saw that sourceFile.fileName was a relative path from root of project while languageService.getProgram().getSourceFiles() contained largely absolute paths with some relative paths.\nI think this might be due to paths aliasing in tsconfig.json . I noticed that the few barrels that did end up exhibiting this warning were imported in some cases with relative path and in some cases with the path aliases. Given that, though, I have not been able to generate any snippets to repro this. I'll keep trying.\nEdit: I rewrote all imports for one of the files that generated that warning to use just relative paths and that one file stopped triggering the warning. I'll try to get a repro snippet.. I managed to repro with:\ntsconfig.json\n```\n{\n  \"compilerOptions\": {\n    \"noEmit\": true,\n\"rootDir\": \"src\",\n\"baseUrl\": \"src\",\n\"paths\": {\n  \"@alias/*\": [\n    \"./*\"\n  ]\n}\n\n},\n  \"includes\": [\n    \"src/*/.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n```\npackage.json\n{\n  \"name\": \"codelyzer-253-repro\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"tslint --config tslint.json --project tsconfig.json --type-check\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@angular/compiler\": \"^2.4.8\",\n    \"@angular/core\": \"^2.4.8\",\n    \"codelyzer\": \"^3.0.0-beta.0\",\n    \"rxjs\": \"^5.2.0\",\n    \"tslint\": \"^4.5.1\",\n    \"typescript\": \"^2.2.1\",\n    \"zone.js\": \"^0.7.7\"\n  }\n}\nsrc/test-0.ts\n```\nexport { Test1 } from \"@alias/test-1\";\nexport class Test0 {\n}\n```\nsrc/test-1.ts\n```\nexport { Test0 } from \"./test-0\";\nexport class Test1 {\n}\n```\nRunning npm run test causes:\nWarning: Cannot read property 'getFullWidth' of undefined. ",
    "hccampos": "Same error here:\n```\n/usr/local/lib/node_modules/tslint/lib/runner.js:117\n            throw error;\n            ^\nTypeError: Cannot read property 'getFullWidth' of undefined\n    at Ng2Walker.RuleWalker [as constructor] (/home/hugo/pix4d/spa/node_modules/tslint/lib/language/walker/ruleWalker.js:38:39)\n    at new Ng2Walker (/home/hugo/pix4d/spa/node_modules/codelyzer/angular/ng2Walker.js:35:28)\n    at Rule.applyWithProgram (/home/hugo/pix4d/spa/node_modules/codelyzer/templatesUsePublicRule.js:94:37)\n    at Linter.applyRule (/usr/local/lib/node_modules/tslint/lib/linter.js:135:33)\n    at Linter.lint (/usr/local/lib/node_modules/tslint/lib/linter.js:104:41)\n    at Runner.processFiles (/usr/local/lib/node_modules/tslint/lib/runner.js:154:20)\n    at Runner.run (/usr/local/lib/node_modules/tslint/lib/runner.js:109:18)\n    at Object. (/usr/local/lib/node_modules/tslint/lib/tslint-cli.js:138:6)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n```. ",
    "rtfpessoa": "@mgechev I think I might have forgotten something. From what I saw seems like some files are removed. Is index.js going to be released to npm? . I was not sure if you were excluding some files from the project at publish time. In the local codelyzer installation folder for older versions I only saw JS files in the root. I was not sure if I needed to add this new file somewhere for it to be included at publish time.. ",
    "listepo-alterpost": "A very useful rule, we are waiting!\n. @wKoza ng lint will output errors? I think not. I think these rules are needed. Hi, any news? . Hi, any news?. @mgechev thanks. @mgechev thanks. I agree with @peterdolenc . ",
    "Owain94": "npm ERR! notarget No compatible version found: ngast@^0.0.4\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget 0.0.0, 0.0.1, 0.0.2, 0.0.3, 0.0.6. Builds are passing with beta 3 again, thanks!. ",
    "rokerkony": "@mgechev Angular CLI with --aot=true does all the magic... at least I tried on as minimal example as possible:\n```ts\nimport {Component} from '@angular/core';\nfunction AddCallMe (): Function {\n  return (target: any): Function => {\n    target.prototype = Object.assign({\n      callMe: function (value: any) {\n        console.log('called with: ', value);\n      }\n    }, target.prototype);\n    return target;\n  };\n}\n@Component({\n  selector: 'app-root',\n  template: see call method in console {{callMe(12)}},\n})\n@AddCallMe()\nexport class AppComponent {}\n```\nany idea if it is achievable by codelyzer as well in the future?\nlooks like it could be related with https://github.com/Microsoft/TypeScript/issues/4881. Other two cases which fail on the check-pipe rule:\n\n{{ (foo) | pipe }} our code example: {{ (totalPrice || price.total) | eur }}\n<div *ngIf=\"items$ | async as items; else loading;\"></div>. @mgechev this issue is closed but the use case n.2 was not fixed... can you take a look on it? . ok, thx :). hey @wKoza, nice job... I found one case which should be still probably taken in account:\n\ntemplate:\n<div *ngIf=\"date | date:'mm;ss'; fails\"></div>\nThe arguments of the pipe should not been checked as it could influence an output of that pipe.\nOther question is if you shouldn't check for whitespace specifically. Now it is possible to have awesome<TAB>|<TAB>pipe. @intellix Let me try this once more in the evening but when I checked on the codebase of https://github.com/erento with source-map-explorer the outcome was different.\nThe advantage is that it has a fixer as well, so it can automatically fix the imports.. @intellix I don't know what you mean with before and after... but from curiosity I run the same example you posted and these are my results:\nimport { tap } from 'rxjs/operators/tap'; -> 24.49 KB\nimport { tap } from 'rxjs/operators'; -> 27.01 KB\nSo I have a bit different number then you in the first line \u2014 it shows it is better to import directly from rxjs/operators/tap.\n@lazarljubenovic I still think it would be valuable for other angular users but I'm not pushing for it hard, so when you agree I should close it I will :). Thank you @wKoza and @lucasvanhalst for great arguments, I will close this PR as it really doesn't make sense when RxJS@6 will not have this problem anymore.... what about adding \n```json\n\"whitespace\": [\n  true,\n  \"check-branch\",\n  \"check-decl\",\n  \"check-module\",\n  \"check-operator\",\n  \"check-preblock\",\n  \"check-separator\",\n  \"check-type\"\n],\n\n```\nto tslint.json and not have a necessity to deal with this in CR? :)\nbtw. tslint is outdated and some rules are already gone. If you want, I can prepare some PR with proposal.. Absolutely agree, removed.\nOnly advantage to have it in place is to force consistency. It would be probably better to make a feature request to tslint and have a possibility to decide about space for each option separately.. I have this rule set to always in my own projects but it would require space before parens also in methods. E.g.: export function assertFailures<SPACE_REQUIRED>(ruleName: string, source: string, fails: IExpectedFailure[], options = null) {\nSpecific reasoning is only to have a consistency. So either I will remove a rule or I will change it to always and apply the rule on all functions .... ",
    "t-ricci-molecle": "wow, I took some time to figure out why ng lint --type-check was giving me errors about missing rules after the update. I couldn't find documentation about these rules until I found this issue and found out they were removed by a codelyzer new version. Nevermind, I figured out I should've gone to read the changelog instead of googleing the rule\nhttps://github.com/mgechev/codelyzer/blob/master/CHANGELOG.md. ",
    "dereklin": "I have this rule\n\"whitespace\": [true, \"check-branch\", \"check-decl\", \"check-operator\",\n        \"check-separator\", \"check-typecast\", \"check-type\",\n        \"check-typecast\", \"check-module\"],\nIt's still not complaining about this:\nimport {BrowserAnimationsModule } from '@angular/platform-browser/animations';. done https://github.com/palantir/tslint/issues/2401. @wKoza It's Windows 10.  I encountered the problem when I was trying out tslint-angular.. ",
    "MickL": "I think it should be configurable, too. Best example is a component having the input class which sets class in html. But variable class is reserved.\nComponent.ts:\n@Input() src: string;\n@Input('class') classes: string;\n@Input() alt = '';\nComponent.html\n<img [src]=\"src\" [class]=\"classes\" [alt]=\"alt\">\nUsage.html\n<app-svg-icon src=\"assets/img/icon/sandwatch.svg\" alt=\"\" class=\"svg-icon icon icon-big\"></app-svg-icon>\nAlso @lazarljubenovic made a good frequent example of converting html's kebab-case to camelCase. ",
    "WiseBird": "These rules are very helpful when moving existing app to AOT compilation.. @mgechev This is issue is still reproducible on 3.0.1. Please check the repo: https://github.com/WiseBird/codelyzer_285\n\nYou can run tslint by npm run tslint\n. ",
    "elvirdolic": "Can we disable these rules until this gets in? . ",
    "Vaelor": "Why are these being dropped? Couldn't find why, especially templates-use-public?. ",
    "massimilianorango": "I really don't understand this choice.\nI use ng serve without the --aot flag because I want my dev environment to be as fast as possible and JIT compilation is made to achieve this purpose.\nDuring development I also want to be informed as soon as possible if I'm writing code that won't work in production, when I will run ng build --prod. I don't want to find it out once I think I'm done but I'm actually not because I have to run ng serve --aot and then refactor the code I thought would work.\nAm I missing something? I think this is a quite common use case.. @wKoza Even though this is a fix to my problem, I do not fully agree with this approach:\n\nThis is a visual extension to commonly used IDEs. It means that some of the editors will not be supported / someone could choose not to install the extension => not scalable.\nThe VSCode plugin is super slow, plus if I use external templates I need to edit the html in order for the extension to detect errors such as templates-use-public (even though the mistake was made in the .ts. file) => not reliable.\nI can't find a way to integrate these errors in my pre-push step, given it's all about the editor and not about the linter. Everything will work fine if I check formatting, linting and run ng test. \nThe build will fail only in the final step when the compilation is done => time consuming.. 1. I know. Luckily for me, I use VSCode. Not everyone does though.\nI don't unless I edit the html file. Unluckily for me, I use VSCode.\nThat's my point. I should not use the CI for this. Everything should fail fast. This is something I want to know as I type, at most before committing/pushing. I don't want to find it out when I already implemented everything, pushed it to master and switched to another task.. \n",
    "skrzepij": "And there is still a problem with data types. \nIf we use in html template some parameter (as object property) which is not valid with assigned object type, then error occurs only when we make production build with AOT. \nFor example: \nTS:\ntypescript\ndata: { name: string, code: number }\nHTML:\nhtml\n<div>{{ data.id }}</div>\nIt's quite confusing. . ",
    "Splaktar": "I agree. I'm seeing some error output in my production build, but I can't be sure what is generating it. If codelyzer gave some indication that it had generated those warnings, it would have saved me a lot of time and confusion.. ",
    "wachri": "I have had the same problem. I could solve it with removing the. \n\"exclude\": [\n    \"node_modules\"\n  ],\nfrom the config. But no idea why this helps.... ",
    "khichar-anil": "The only working solution for me was to add files against all linting files\n.angular-cli.json\n\"lint\": [{\n      \"files\": \"src/**/*.ts\",\n      \"project\": \"src/tsconfig.app.json\"\n    },\n    {\n      \"files\": \"src/**/*.ts\",\n      \"project\": \"src/tsconfig.spec.json\"\n    },\n    {\n      \"files\": \"src/**/*.ts\",\n      \"project\": \"e2e/tsconfig.e2e.json\"\n    }\n  ]. ",
    "samuel1ee": "I've set \"no-access-missing-member\": false, rule to omit that error. ",
    "tipag": "Please reopen!\nCan confirm that it works in 3.0.0-beta.0 but not in 3.0.1.. ",
    "mscelina": "Probably it's the same as #285 . @mgechev This issue should be reopen.\nI see the issue was fixed and merged to master (master at that time): #238 . During the time master start to be out of sync with this commit. 3.0.0-beta.X versions were released with this. Now, these tags are completely out of sync with master and these tags are not at any branch. These changes were never merged with master and released as 3.0.0.\nI didn't looked into the code deeply so I'm not able to say how easy it's to get it back to master.. ",
    "sheridjs": "Thanks! I'll see if I can find some time soon.. Thanks!. ",
    "kensiprell": "I get the same error after updating tslint from 4.5.1 to 5.0.0. Reverting back to 4.5.1 works as expected. I'm using the same versions of typescript and codelyzer as first poster.. ",
    "alexjlockwood": "@kensiprell Thanks, that fixed the issue for me as well.. ",
    "froodley": "I am getting the same error running:\ncodelyzer: 2.1.1 or 3.0.0-beta.4\ntslint: 4.5.1\ntypescript: 2.2.2. I'm using angular 4.0.1 and gulp 4, possibly relevant. ",
    "brunosiqueira": "same error from @froodley . ",
    "SamuelMarks": "Related https://github.com/angular/angular-cli/issues/5848\nAnd yes, same issue here. Looks like everyone is passing the buck :-1: . ",
    "18steps": "Just in case it helps anyone, I was experiencing this issue in WebStorm. I took the advice from the other thread; \"use codelyzer 2.1.1 and tslint 4.5.1 and ng lint works\", and sure enough ng lint worked but WebStorm still gave the error even after closing and opening the file again. When I restarted WebStorm the problem was gone.. ",
    "basst314": "Hi @mgechev, the new release fixed this issue for me.\nThanks!. Hi @mgechev, will this be fixed in a 2.x version aswell?. @trumbitta version 2 and 3 of this repo, codelyzer. ",
    "jskrzypek": "Fwiw, I've started taking a stab at refactoring some of the rules to be compatible with tslint^5\nIt's currently on my branch here: https://github.com/jskrzypek/codelyzer/tree/feat/tslint-5\nLet me know if I should make a PR now or wait till this is more mature. I'll massage the commit based on @ajafff's comments (links below) and make a PR later today\n\nhttps://github.com/jskrzypek/codelyzer/commit/9f7ed9a72dbbd53931d4a9f9da417942f9d37490#commitcomment-21653388\nhttps://github.com/jskrzypek/codelyzer/commit/9f7ed9a72dbbd53931d4a9f9da417942f9d37490#commitcomment-21653410\nhttps://github.com/jskrzypek/codelyzer/commit/9f7ed9a72dbbd53931d4a9f9da417942f9d37490#commitcomment-21653390. \n",
    "jvbianchi": "tslint v5.1.0 was released.\nWill you support this version too?. ",
    "cexbrayat": "@mgechev Thank you for this! \nPR for the CLI pending for review https://github.com/angular/angular-cli/pull/6058. @mgechev I tried 3.1.2 but it still fail for ngFor in a simple use case, with an external template.\nSee #368 for a unit test reproducing the issue.. @mgechev Ha sorry, I thought #365 was unrelated to this one (the title was not really explicit :) ).. @wKoza I think the same is true for template-cyclomatic-complexity. ",
    "trumbitta": "Hi, version 2 and 3 of what?. @basst314 thanks, I should get more sleep. \ud83d\ude38 . ",
    "leosvelperez": "\nIt's a known issue in version 2. It'll be fixed in version 3 (it already is).\n\n@mgechev I'm still getting this warning even when I'm now using v3.0.0. Was the fix actually merged?\nThanks!. Glad to help!. ",
    "maartentibau": "@WiseBird got the same issue as well. ",
    "juanmendes": "@mgechev I wish this check could be done in tslint, because we don't do aot during development and we end up having to fix problems only when we do a production build which takes a lot longer in our case.. ",
    "plantain-00": "it's done now.. ",
    "MohammedSabbah": "@mgechev \nhere are my package.json\n\"dependencies\": {\n    \"@angular/common\": \"^2.4.7\",\n    \"@angular/compiler\": \"^2.4.7\",\n    \"@angular/compiler-cli\": \"^2.4.7\",\n    \"@angular/core\": \"^2.4.7\",\n    \"@angular/forms\": \"^2.4.7\",\n    \"@angular/http\": \"^2.4.7\",\n    \"@angular/platform-browser\": \"^2.4.7\",\n    \"@angular/platform-browser-dynamic\": \"^2.4.7\",\n    \"@angular/router\": \"^3.4.7\",\n    \"@ng-bootstrap/ng-bootstrap\": \"^1.0.0-alpha.20\",\n    \"@types/node\": \"^6.0.63\",\n    \"angular2-universal\": \"^2.1.0-rc.1\",\n    \"body-parser\": \"^1.17.1\",\n    \"codelyzer\": \"^2.0.0\",\n    \"core-js\": \"^2.4.1\",\n    \"express\": \"^4.15.2\",\n    \"jquery\": \"^3.1.1\",\n    \"ng2-bootstrap\": \"^1.3.3\",\n    \"ng2-file-upload\": \"^1.1.4-2\",\n    \"ng2-meta\": \"https://github.com/chocobozzz/ng2-meta#build\",\n    \"ng2-page-transition\": \"^0.2.6\",\n    \"ng2-pagination\": \"^2.0.1\",\n    \"preboot\": \"^4.5.2\",\n    \"rxjs\": \"^5.1.1\",\n    \"ts-helpers\": \"^1.1.1\",\n    \"web-animations-js\": \"^2.2.2\",\n    \"zone.js\": \"^0.7.7\"\n  },\n  \"devDependencies\": {\n    \"@angular/compiler-cli\": \"^2.3.1\",\n    \"@types/jasmine\": \"2.5.38\",\n    \"@types/node\": \"^6.0.42\",\n    \"angular-cli\": \"1.0.0-beta.28.3\",\n    \"codelyzer\": \"~2.0.0-beta.1\",\n    \"jasmine-core\": \"2.5.2\",\n    \"jasmine-spec-reporter\": \"2.5.0\",\n    \"karma\": \"1.2.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-remap-istanbul\": \"^0.2.1\",\n    \"protractor\": \"~4.0.13\",\n    \"ts-node\": \"1.2.1\",\n    \"tslint\": \"^4.3.0\",\n    \"typescript\": \"~2.0.3\",\n    \"html-loader\": \"^0.4.3\"\n  }\n}. ",
    "karol-depka": "Hi. Thanks for taking care of this.\nIs the doc updated?\nhttp://codelyzer.com/rules/component-selector/\nCurrently, the schema there says:\n\n{\n      \"enum\": [\n        \"element\",\n        \"attribute\"\n      ]\n    },\n\n\nWhat is the syntax to allow both attribute selector and element-based selector?\nIs it this, as in changelog?\n\n\"component-selector\": [true, [\"element\", \"attribute\"], \"sg\", \"kebab-case\"],\n\nCan I submit a pull request to the docs?\nThanks!\n. @mgechev Not sure what you mean.\nConsider:\n\n\n\"element\" or \"attribute\" forces components either to be elements or attributes.\n\n\neither\n-- http://codelyzer.com/rules/component-selector/\nIt does not mention the option of allowing both.\nAnother thing is how to use it to allow both: is it:\n\n\"component-selector\": [true, [\"element\", \"attribute\"], \"sg\", \"kebab-case\"],\n\n?\nI guess you understood that I confused/assumed that the schema should look the same as the example :). Which is not the case. I think the schema in the doc should have \"oneOf\" allowing enum or array.\n. https://github.com/mgechev/codelyzer/compare/master...karol-depka:patch-1 - wdyt?. @mgechev Thanks to you! For completeness, the schema there should also be updated most probably: http://codelyzer.com/rules/component-selector/ . But for now I wanted to avoid a rabbit hole :). Btw, do you happen to come to Barcelona Angular Camp, Jul 6-7?. ",
    "AbakumovAlexandr": "@mgechev , can you provide an example of how the rule should look like to set up kebab style for elements and camel case for attributes, please?. ",
    "kylecordes": "How about something like this?\n\"directive-file-name\": [true, \"snake-case\", \"directive\"],\ntrue: means this is on.\nsnake-case: means to look for the-words not theWords.  Alternative values: TitleCase, camelCase.\ndirective: means to look for the-words.directive.ts.\nOf course, similar settings for component, module.\nThis could handle projects that follow the style guide closely:\nsome-name.component.ts\nand also projects that choose another variation:\nsomeName.cmp.ts\n. ",
    "vmasek": "In our team we also use the name.model.ts notation to mane files storing data structure and API Interfaces. ",
    "bhaskerchari": "Hi @mgechev ,\nAny news or update on this? When is this planned to be fixed & released ?\nThanks,\nBhasker. ",
    "damsorian": "thanks @leocaseiro , it works!. ",
    "killzoner": "Thanks, should have seen it in existing issues, sorry. ",
    "sebek64": "The problem is that is is missing in this directory:\n$ ls node_modules/codelyzer/*Rule.js\nnode_modules/codelyzer/componentClassSuffixRule.js\nnode_modules/codelyzer/componentSelectorRule.js\nnode_modules/codelyzer/directiveClassSuffixRule.js\nnode_modules/codelyzer/directiveSelectorRule.js\nnode_modules/codelyzer/importDestructuringSpacingRule.js\nnode_modules/codelyzer/invokeInjectableRule.js\nnode_modules/codelyzer/noAccessMissingMemberRule.js\nnode_modules/codelyzer/noAttributeParameterDecoratorRule.js\nnode_modules/codelyzer/noForwardRefRule.js\nnode_modules/codelyzer/noInputRenameRule.js\nnode_modules/codelyzer/noOutputRenameRule.js\nnode_modules/codelyzer/noUnusedCssRule.js\nnode_modules/codelyzer/pipeImpureRule.js\nnode_modules/codelyzer/pipeNamingRule.js\nnode_modules/codelyzer/templatesUsePublicRule.js\nnode_modules/codelyzer/templateToNgTemplateRule.js\nnode_modules/codelyzer/useHostPropertyDecoratorRule.js\nnode_modules/codelyzer/useInputPropertyDecoratorRule.js\nnode_modules/codelyzer/useLifeCycleInterfaceRule.js\nnode_modules/codelyzer/useOutputPropertyDecoratorRule.js\nnode_modules/codelyzer/usePipeTransformInterfaceRule.js\n. Yes, it works. Thank you for a quick fix.. ",
    "diagramatics": "Ah my bad, thanks for the clarification.. I think you forgot to publish to npm? . ",
    "akrueger": "I have fixed the linter config target and am now receiving:\n```\nCould not find implementations for the following rules specified in the configuration:\n    directive-selector\n    component-selector\n    use-input-property-decorator\n    use-output-property-decorator\n    use-host-property-decorator\n    no-attribute-parameter-decorator\n    no-input-rename\n    no-output-rename\n    no-forward-ref\n    use-life-cycle-interface\n    use-pipe-transform-interface\n    pipe-naming\n    component-class-suffix\n    directive-class-suffix\n    templates-use-public\n    no-access-missing-member\n    invoke-injectable\n    template-to-ng-template\nTry upgrading TSLint and/or ensuring that you have all necessary custom rules installed.\nIf TSLint was recently upgraded, you may have old rules configured which need to be cleaned up.\nNo valid rules have been specified\n```\nI have the following tslint.json:\n{\n  \"extends\": [ \"codelyzer\" ],\n  \"rules\":{\n    \"directive-selector\": [true, \"attribute\", \"sg\", \"camelCase\"],\n    \"component-selector\": [true, \"element\", \"sg\", \"kebab-case\"],\n    \"use-input-property-decorator\": true,\n    \"use-output-property-decorator\": true,\n    \"use-host-property-decorator\": true,\n    \"use-view-encapsulation\": true,\n    \"no-attribute-parameter-decorator\": true,\n    \"no-input-rename\": true,\n    \"no-output-rename\": true,\n    \"no-forward-ref\": true,\n    \"use-life-cycle-interface\": true,\n    \"use-pipe-transform-interface\": true,\n    \"pipe-naming\": [true, \"camelCase\", \"sg\"],\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true,\n    \"templates-use-public\": true,\n    \"no-access-missing-member\": true,\n    \"invoke-injectable\": true,\n    \"template-to-ng-template\": true\n  }\n}\nMy package.json script is:\n\"lint\": \"tslint './src_client/**/*.ts'\",. Yes, I followed these. At the initial step however I installed the latest of the packages rather than the specific ones here:\nnpm i codelyzer@~2.0.0 tslint@4.0.0 typescript@2.0.9 @angular/core@2.4.0 @angular/compiler@2.4.0 rxjs@5.0.1 zone.js@0.7.2\nIt's not clear that those are the required versions as the project itself has 3.0 and 4.0 with no mention of requirements for using older angular or tslint packages.\nI then put the supplied tslint.json in my project per this step: \nA. Using codelyzer package in PATH\nAnd I am using the 2nd option from below:\n```\nTo run TSLint with this setup you can use one of the following alternatives:\n1) Install codelyzer globally npm install -g codelyzer\n2) Run TSLint from a package.json script by adding a script like tslint . to your package.json, similar to:\n\"scripts\": {\n  ...\n  \"lint\": \"tslint .\",\n  ...\n},\n```. ",
    "jensbodal": "Sure thing.\nWhen adding component-class-suffix or directive-class-suffix rules to your tslint.json, the type hinter tells you that a boolean is expected.  This is a fairly low hanging fruit issue, either rule works, but if using the [true, \"Component\"] syntax the type hinter will complain.  Here's an example from Visual Studio Code:\n\nI looked at the source and it appears for other cases there is simply not a validation rule for what is entered when it accepts multiple variable types, so I'm guessing the latter syntax was added at a later time.  That's just a guess and going from what I remember when I looked into this.\n. ",
    "fr0": "For reference, the output of ng --version:\n@angular/cli: 1.0.1\nnode: 6.10.2\nos: darwin x64\n@angular/common: 4.1.3\n@angular/compiler: 4.1.3\n@angular/core: 4.1.3\n@angular/forms: 4.1.3\n@angular/http: 4.1.3\n@angular/platform-browser: 4.1.3\n@angular/platform-browser-dynamic: 4.1.3\n@angular/router: 4.1.3\n@angular/cli: 1.0.1\n@angular/compiler-cli: 4.1.3\n. ",
    "slimlime": "I had an issue with angular-whitespace or one of the fixers that seemed to identify angular moustache templates in my typescript files (no templates) and \n```ts\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormArray\n} from \"@angular/forms\";\nbecamets\nimp; }}t{{ { {  }}{  }} {  }} {  }}\n  }}ormArray,\n  FormBuilder,\n  FormGroup,\n  Validators;\n} from; '@angular/forms';\n```\nI had ridiculously run the tslint --fix autofix while working out how to use tslint and ended up replacing even more }} \ud83e\udd23.\nI'm still trying to track things down.. I had an issue with angular-whitespace or one of the fixers that seemed to identify angular moustache templates in my typescript files (no templates) and \n```ts\nimport {\n  FormControl,\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormArray\n} from \"@angular/forms\";\nbecamets\nimp; }}t{{ { {  }}{  }} {  }} {  }}\n  }}ormArray,\n  FormBuilder,\n  FormGroup,\n  Validators;\n} from; '@angular/forms';\n```\nI had ridiculously run the tslint --fix autofix while working out how to use tslint and ended up replacing even more }} \ud83e\udd23.\nI'm still trying to track things down but it seems to be resolved at the moment after I looked more closely and removed the check-pipe I had thoughtlessly copied here:\nts\n    \"angular-whitespace\": [\n      true,\n      \"check-interpolation\",\n      \"check-pipe\", // << oops remove.\n      \"check-semicolon\"\n    ],. @jaufgang I think I just had an issue when I thoughtlessly copied a config file and somehow managed to replace parts of my ts code with }}{}{}}{}}}{} scratches head \ud83e\udd14 \nI still managed to accidentally copy this from some version of docs(?) with check-pipe and ended up breaking my code\nts\n\"angular-whitespace\": [\n      true,\n      \"check-interpolation\",\n      \"check-pipe\",\n      \"check-semicolon\"\n    ],\nAlso this one is pretty funny:\nts\nexport class TestListVie { { { {{{ ; }}  }} }}t; {\n  @Inpu { {{{ { { o;  }} {  }}ay: str; }}g[];\nFrom one of my view components run through the fixer a couple times.\nI'm just going to rely on the IDE for moustache-y whitespace for now. \ud83e\udd23 \nhttps://github.com/mgechev/codelyzer/issues/335#issuecomment-403333989. ## Clearer example\nts\n@Component({\n  selector   : 'hero-list',\n  templateUrl: 'hero-list.html'  // << this is normal\n})\nexport class HeroListComponent { // << this is normal\nbecame\nts\n@Component({\n  selector   : 'hero-list',\n  templateUrl: 'hero-list.h{{ l', // << oops\n})\n }}port class HeroListComponent {    // << oops\nExample 2\nIn a generated snippet\nts \n  // Angular calls its ngOnChanges() method whenever it detects changes to input properties\n  ngOnChanges(changes: SimpleChanges): void {\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    //Add '${implements OnChanges}' to the class.\n    console.log('address-form::inputngOnChange', changes);\n  }\nbecame\nts\n  // {{ gular }}alls its ngOnChanges() method whenever it detects changes to input properties\n  ngOnChanges(changes: SimpleChanges): void {\n    // Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    // Add '${implements OnChanges}' to the class.\n    console.log('address-form::inputngOnChange', changes);\n  }\nregex?. ",
    "lammers": "if you go with angular-cli 1.3 this should work. check if tslint.json is in the root package of your dependency, because this is the trigger to start linting on that dependency.\nIf it is there add this file to .npmignore, then publish a new version to your npm repository. you are welcome ;-) thanks for codelyzer\n. ",
    "elclanrs": "@lammers any way I can make this work on angular-cli 1.2 until 1.3 is stable? I tried adding it to .npmignore but now the project's tslint.json is analyzing the package and throwing errors.. ",
    "thorstenhirsch": "I could work around this problem by creating a symlink in the nested node_modules directory to the project's node_modules/codelyzer directory:\nnode_modules/ng-socket-io/node_modules/codelyzer -> ../../codelyzer. ",
    "szykov": "I didn't generate project with angular-cli but after updating receive this error:\n\nError: Could not find custom rule directory: ./node_modules/codelyzer. \n",
    "pnahtanoj": "I'm having this problem as well:\n    \"angular/cli\": \"^1.4.5\",\n    \"codelyzer\": \"3.1.2\",\n. ",
    "dennisfleischmann": "yes we also facing this issue\n\"dependencies\": {\n    \"angular-redux/store\": \"^6.5.7\",\n    \"angular/common\": \"^4.0.0\",\n    \"angular/compiler\": \"^4.0.0\",\n    \"angular/core\": \"^4.0.0\",\n    \"angular/forms\": \"^4.0.0\",\n    \"angular/http\": \"^4.0.0\",\n    \"angular/platform-browser\": \"^4.0.0\",\n    \"angular/platform-browser-dynamic\": \"^4.0.0\",\n    \"angular/router\": \"^4.0.0\",\n    \"c3\": \"0.4.17\",\n    \"classlist.js\": \"^1.1.20150312\",\n    \"core-js\": \"^2.4.1\",\n    \"intl\": \"^1.2.5\",\n    \"lodash\": \"^4.17.4\",\n    \"ng2-page-scroll\": \"4.0.0-beta.11\",\n    \"ngx-popper\": \"^1.2.0\",\n    \"redux\": \"^3.7.2\",\n    \"rxjs\": \"^5.1.0\",\n    \"zone.js\": \"^0.8.4\"\n  },\n  \"devDependencies\": {\n    \"angular/cli\": \"^1.2.6\",\n    \"angular/compiler-cli\": \"^4.0.0\",\n    \"types/c3\": \"0.4.44\",\n    \"types/jasmine\": \"2.5.38\",\n    \"types/node\": \"~6.0.60\",\n    \"codelyzer\": \"^3.2.1\",\n    \"jasmine-core\": \"^2.5.2\",\n    \"jasmine-spec-reporter\": \"^3.2.0\",\n    \"karma\": \"^1.4.1\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-coverage-istanbul-reporter\": \"^0.2.0\",\n    \"karma-intl-shim\": \"^1.0.3\",\n    \"karma-jasmine\": \"^1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\n    \"karma-teamcity-reporter\": \"^1.0.1\",\n    \"node-sass\": \"^4.5.3\",\n    \"phantomjs-polyfill\": \"^0.0.2\",\n    \"protractor\": \"~5.1.0\",\n    \"ts-node\": \"^2.0.0\",\n    \"tslint\": \"^4.5.0\",\n    \"typescript\": \"~2.4.0\"\n  }. ",
    "tilowestermann": "You need to exclude the npm_modules directory from linting (see https://stackoverflow.com/a/44777489/184245):\n\"lint\": [\n    {\n      \"project\": \"src/tsconfig.app.json\",\n      \"exclude\": \"**/node_modules/**/*\"\n    },\n    {\n      \"project\": \"src/tsconfig.spec.json\",\n      \"exclude\": \"**/node_modules/**/*\"\n    },\n    {\n      \"project\": \"e2e/tsconfig.e2e.json\",\n      \"exclude\": \"**/node_modules/**/*\"\n    }]. ",
    "Ks89": "I still have the same problem with either angular-cli 1.7.x or angular-cli 6.0.0 rc\nHow can I fix this?. ",
    "nikolay-borzov": "@tilowestermann gave a good hint. If you lint node_modules folder tslint will take tslint.json from package's folder. For example @ngx-translate have one.. ",
    "sanidz": "Making new angular apps with cli will make tslint.ts file inside src folder.\nThat means that the path \"./node_modules\" or just \"node_modules/codelyzer\" to the node modules will be wrong, make sure to target parent folder of src to get to modules folder.\n\"rulesDirectory\": [\n        \"../node_modules/codelyzer\"\n    ],. ",
    "intellix": "Yep, it was in an external template :) thanks so much. Still having issues with this one. I'm running 3.1.1 and I'm still getting:\nWarning: Cannot read property 'expression' of undefined\nOn stuff like:\n<footer class=\"game-footer\" [ngSwitch]=\"isUserLoggedIn | async\"></footer>\nAlso, it seems the reported line/columns are wrong for those. I'm getting much less violations though than I did on 3.1.0. and an ngSwitch at least. Not sure which others are missing, maybe ngIf?. Ahah, now I see my folly :) \ndirective-selector: camelCase\ncomponent-selector: kebab-case\nI'm using a Component with an attribute selector because I wanna have styles and a template. It seems what I'd like to enforce is:\nAttribute based selectors: camelCase\nElement based selectors: kebab-case\nCurrently I have to use kebab-case because it's a component: button[xc-button]. hey @mgechev it seems that the Inputs are AOT compilation errors but Outputs are not: https://github.com/angular/angular/issues/17483#issuecomment-358658842\nShall I open another issue perhaps?. to reinforce the above comment. I've been trying to use the Angular Language Service every couple of months since it came out and end up disabling it same or next day due to how unstable it is. I'm still finding it to be largely unusable.\nWriting in HTML and getting autocomplete for Emmet suggestions just dies and I end up disabling it each time. Dunno when it'll become usable for me really, still waiting. I was under the impression this was ok: import {delay, tap} from 'rxjs/operators'\nAlso, can't you already achieve this with import-blacklist from tslint?. ts\nng new rxjs-test && cd rxjs-test\nnpm i source-map-explorer\nng build -prod -sm -oh=false\n./node_modules/.bin/source-map-explorer dist/main.bundle.js\napp.component.ts:\n```ts\nimport { Component } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { tap } from 'rxjs/operators';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n  timer = timer(100, 100).pipe(tap(console.log));\n}\n```\nBefore using above (20.67kb):\n\nAfter using above (27.01kb):\n\n. ok so it seems more stuff is pulled in. I was thinking it was more a case of importing all vs a single operator. All operators would probably be something like 150kb+. Great, should fix this which was closed https://github.com/mgechev/codelyzer/issues/443. That other components can't re-use the SCSS of another component (because editing account.component.scss affects other components that you don't expect it to)\n```ts\n@Component({\n  selector: 'xc-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss'],\n})\nexport class AccountComponent { ... }\n@Component({\n  selector: 'xc-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['../account.component.scss'],\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n})\nexport class ActivityComponent { ... }\n. I think that's the only thing you could enforce really. If the file name contains something like `shared` then it's a little more obvious that it's used in multiple places but would be harder to enforce. Just out of curiosity since I didn't see a test for it, what would happen with these (multiple spaces in middle):\nimport { A,  B, C } from 'somewhere';\nimport { A, B , C } from 'somewhere';\n```. I guess all of the metadata is a WIP? :) looks copied from bananas in boxes. Isn't this test exactly the same as above? . ",
    "Almar": "I'm experiencing the same problem. I searched for other issues and I think #285 is relevant but I that doesn't bring me closer to a solution.\n@mgechev, could you please explain a little more?. ",
    "jordidiaz": "Hi Minko,\nI'm working with another computer now and the error hightlight is working for the rest of projetcs. It seems that the settings.json configuration is not being able to reach the tsserver. I'm going to check my project differences (folder structure seems to be the problem) with others working and I'll share the results.. Problem solved!\nBeing the app's root folder where .vscode settings folder is located I had my angular-cli app bootstrapped in the 'Client' folder. I just moved all the app to the 'root folder', delete the 'Client' path from the settings and now works like a charm. Is it any known restriction @mgechev?. ",
    "Martin-Wegner": "@mgechev http://codelyzer.com/rules/ links to http://codelyzer.com/rules/no-unused-css which not exists. http://codelyzer.com/rules/no-unused-css-rule exists.... @mgechev OK: https://github.com/mgechev/codelyzer/pull/360. https://github.com/mgechev/codelyzer/issues/264 ?. @mgechev test/noOutputOnPrefixNameRule.spec.ts, docs/src/worker.ts and src/noOutputOnPrefixNameRule.ts still contain the wrong name no-on-prefix-output-name :(. @mgechev https://github.com/mgechev/codelyzer/pull/451. @mgechev invalid directive output property test fails now :(. @mgechev you missed the following rules:\nimport-destructuring-spacing, pipe-naming and no-output-named-after-standard-event.\n@mgechev and the rules page (http://codelyzer.com/rules/) doesn't contain:\ntrackBy-function and no-output-named-after-standard-event\nShould I open a new issue for that?. https://github.com/mgechev/codelyzer/issues/501. @mgechev great job :). @mgechev can you please explain why pipe-naming is deprecated? I can't find any information here.... ",
    "BennieCopeland": "Ran into this also.\n```\nTypeError: Cannot read property 'expression' of undefined\n 27 };\n 28 exports.getDecoratorPropertyInitializer = function (decorator, name) {\n\n29     return decorator.expression.arguments[0]\n 30         .properties.map(function (prop) {\n 31         if (prop.name.text === name) {\nbt\n\n0 exports.getDecoratorPropertyInitializer utils.js:29:21\n1 ViewEncapsulationWalker.visitClassDeclaration useViewEncapsulationRule.js:45:37\n2 SyntaxWalker.visitNode syntaxWalker.js:311:22\n3 syntaxWalker.js:529:63\n4 typescript.js:14785:30\n5 typescript.js:14959:24\n6 SyntaxWalker.walkChildren syntaxWalker.js:529:12\n7 SyntaxWalker.visitSourceFile syntaxWalker.js:225:14\n8 SyntaxWalker.visitNode syntaxWalker.js:476:22\n9 SyntaxWalker.walk syntaxWalker.js:24:14\n```. ",
    "willgm": "Similar error here:\n\nERROR: /home/willgm/proj/jexia-webapp/src/app/project/project-features/project-features.component.html[1, 25]: The property \"async\" that you're trying to access does not exist in the class declaration.\n\nFor this line:\nhtml\n<div *ngIf=\"(currentProject | async).ui.features as features\">. @mgechev, sorry, but I can't see how this error is related to this issue. Can you explain?\nI searched a little more, looks like there are other issues more likely to math the errors above: #190 and angular/angular-cli/issues/6554\nThis issue appeared after I updated from 3.0.1 to 3.1.0 or 3.0.2:\n```\n~/proj/jexia-webapp [work ~2 *] \u00bb npm i -D codelyzer@3.1.0                              willgm@localhost\n+ codelyzer@3.1.0\nupdated 1 package in 4.362s\n\n~/proj/jexia-webapp [work ~2 *] \u00bb npm run lint                                          willgm@localhost\n\nweb-app@0.0.3-alpha lint /home/willgm/proj/jexia-webapp\nng lint --type-check\n\nERROR: /home/willgm/proj/jexia-webapp/src/app/project/project-features/project-features.component.html[1, 2]: The property \"async\" that you're trying to access does not exist in the class declaration.\nERROR: /home/willgm/proj/jexia-webapp/src/app/project/project-features/project-features.component.html[55, 34]: The property \"async\" that you're trying to access does not exist in the class declaration.\nLint errors found in the listed files.\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 2\nnpm ERR! web-app@0.0.3-alpha lint: ng lint --type-check\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the web-app@0.0.3-alpha lint script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/willgm/.npm/_logs/2017-07-05T18_17_21_680Z-debug.log\n\n~/proj/jexia-webapp [work ~2 *] \u00bb npm i -D codelyzer@3.0.1                              willgm@localhost\n+ codelyzer@3.0.1\nupdated 1 package in 4.294s\n\n~/proj/jexia-webapp [work ~2 *] \u00bb npm run lint                                          willgm@localhost\n\nweb-app@0.0.3-alpha lint /home/willgm/proj/jexia-webapp\nng lint --type-check\n\nAll files pass linting.\n```. @wKoza, now I got it, thanks! :tada: . ",
    "BorntraegerMarc": "Same thing in an HTML. This works:\n<paper-item class=\"menu-item mi-new-task komed-menu-item\" (click)=\"addNewTask()\">{{ 'task.addTask' | translate }}</paper-item>\nthis generates an error:\n<paper-item class=\"menu-item mi-new-task komed-menu-item\" (click)=\"addNewTask()\">\n    {{ 'task.addTask' | translate }}\n</paper-item>\nthis is the error: The pipe operator should be surrounded by one space on each side, i.e. \" | \".\ndo you know when you can release a fix for this? My CI is broken because of this.... How do I disable it?. @mgechev could you publish an update with this guy so we can get a clean CI build again? :). @mgechev the issue seems not to be resolved for me:\n```\nD:\\projects\\komed-health-web>ng lint\nERROR: src/app/chat/chat.component.html[22, 43]: The pipe operator should be surrounded by one space on each side, i.e. \" | \".\nD:\\projects\\komed-health-web>ng --version\n@angular/cli: 1.4.2\n```\nthis is the HTML code:\n<paper-item>\n    {{ 'chat.switchToDe' | translate }}\n</paper-item>\nfrom package.json:\n\"codelyzer\": \"3.2.0\",. @wKoza what OS are you using? I could only reproduce it with widows until now. @wKoza could you publish a new release for this? Our CI is failing with angular 4.4.4. ",
    "SteveVanOpstal": "For some reason the error logging indicated the wrong line, made me assume it was referring to the attribute.. ",
    "Orodan": "Well I don't think you should close it for now : there is nothing in the readme advanced configuration example that helps me, and the other solution is to disable the rules.. Thanks for the idea of Angular service language ! I just find it a bit disappointing that the \"no-access-missing-member\" rule is not able to detect correctly template reference variable. \nOne last thing : may I ask why this rule will be removed in the next release ? It's still usefull in most cases.. ",
    "wulfsberg": "I think this also warrants taking another look at https://github.com/mgechev/codelyzer/issues/224.\nThe \"Angular Fundamentals\" specifically recommends aliasing an input variable to the directive selector\n(https://angular.io/guide/attribute-directives#binding-to-an-input-property), so I really think Codelyzer should recognize this special case and not flag it as an error.\n(I am aware that it can be selectively disabled, but it feels wrong to actively have to fight the linter to write idiomatic code).\nETA: The similar selector-name-postfixed-with-Changed for outputs should also be recognized.. ",
    "panuruj": "In general, I would not recommend overriding the auto-generated ID. In a project that have thousands of strings to be translated, it is error prone to rely on the developer to ensure that the ID is unique across the entire application.. ",
    "markwhitfeld": "This would be an amazing feature!\n... and it even looks like @maxime1992 offered some beer to get it fixed \ud83d\ude09 . ",
    "cherzog": "To make it clear, this is the calling template:\n<a class=\"ch-test-list-item\" *ngFor=\"let t of tests\" [test]=\"t\" (click)=\"showTest(t)\"></a>\nThe prefix is \"ch\". ",
    "forivall": "Thanks, I was guessing that protected was also possible with aot. I guessed\nwrong!\n. ",
    "dhalperi": "I guess this is related to #365 . ",
    "whyboris": "Thank you \ud83d\udc4d . ",
    "csvn": "I created a pull request if this seems reasonable to the maintainers. #396. @wKoza Oh, I had no idea. Yeah, might as well close this issue.\nEdit: autocorrect.... @wKoza That might create errors in existing code, but that might be better as it is more correct. I can add it for sure, I just started the PR a bit conservative. . @mgechev Sure, I'm on it!. ",
    "RandomShaper": "Yes, the second option seems the way to go.\nAnd in addition to AsyncValidator, suffix ValueAccesor for the ControlValueAccessor interface.\nI've checked the Angular API for more interesting directive naming cases and I don't see any other naming schema of interest for developers. Either they begin with Ng (which seems to give them permission to skip the naming guidelines) or are too core to think someone will need to do anything similar.\nAnd if someone does, well, after all you are not following the guidelines, so a lint is what you deserve. :). The check would be for directives implementing that interface, allowing/forcing them to have the right suffix in their name.\nThat is, leaving components alone.. Oops. Sorry then! :). ",
    "leonadler": "To clarify: The same code works and does not break codelyzer when rewritten like this:\nTypeScript\nexport function mockPipe(name: string): any {\n    return Pipe({ name })(\n        class MockPipe {\n            transform(input: any): any {\n                return input;\n            }\n        }\n    );\n}\nHowever, knowing that this file is the culprit instead of getting a 'property of undefined' error thrown would be preferrable.\nThis is the method that throws since it is called with a property without an initializer.. ",
    "rysilva": "Could a note that this rule is experimental and buggy be added to the rule's documentation? Happy to submit a PR.. ",
    "KumailHussain": "the issue is not resolved yet? \nAnd disabling the rule also not work in css \n/ tslint:disable:no-unused-css /. ",
    "jakpaw": "@mgechev It would be great to be able to achieve what @intellix said:\n\nIt seems what I'd like to enforce is:\nAttribute based selectors: camelCase\nElement based selectors: kebab-case\n\nIf we configure \"component-selector\" like this:\n\"component-selector\": [true, [\"element\", \"attribute\"], [\"prefix\"], [\"kebab-case\", \"camelCase\"], nothing is really enforced and one can create a component with kebab-case atrribute selector, which I would like to avoid.. ",
    "shahraship": "+1. ",
    "mspl13": "@wKoza Thanks for the quick response and sorry for the duplicate. Just to be clear: the fix for the issue is that the rule will be removed because the functionality is out of scope for this tool?\nIf so, we should report back to the angular-cli team, which seems to include this rule by default (see for example https://github.com/angular/angular-cli/issues/7587).. ",
    "Ritzlgrmft": "I have the same problem, and it doesn't disappear by itself.\nMy code is par example:\nhtml\n<button>\n  {{ \"button.label\" | translate }}\n</button>\nThis is complained by codelyzer.\nHowever, if I add a span, codelyzer is satisfied: \nhtml\n<button>\n  <span>{{ \"button.label\" | translate }}</span>\n</button>\nIt would be great, if you could fix it in an upcoming release, so that it will work also without the span. ",
    "almeidap": "@mgechev Thanks for the clarification. Could you point me to the workaround as I couldn't find it on the project's README.md (neither in master or 4.0.0-beta-4)?. ",
    "rajjaiswalsaumya": "That can be specified part of codelizer conf. ",
    "chaosmonster": "How can I disable this rule for tests? \nI can see the benefit for application code, but within specs I actually do want to call lifecycle hooks to test them.. ",
    "NagRock": "Whats the purpose for this? What is bad with setting input value?. @mgechev, @wKoza inline styles lines limit validation added. Please review.. Shouldn't it be a separate rule? Or this with two parameters but then we got to change name. Which option you think is better?. Done. Done. Done. Looks good . @mgechev One more think. Do we need boolean flag?\n\"max-inline-declarations\": [{\"template\": 4, \"styles\": 3 }] - isn't that enough?\nAnd the defaults will be 3 and 3 like in guidelines.. Ahh ok now I see that this first boolean is added by default.. Do I have to manually take care of this boolean in Rule?. Also in specs? Becasue my rule is running in spec even if I pass false as first option.. Ok I will test it manually.. Oh, thanks for catching this! Fixed. Fixed. ",
    "franekp": "@rafaelss95 the main reason I put this proposal here is that (at the time) making input properties readonly was breaking AoT compilation - the templates (transpiled to TS) were not compiling because they were modifying the input properties.\nThis is related to https://github.com/angular/angular/issues/11978 and the way Angular 2 AoT compilation works.. @rafaelss95 @mgechev I was wrong, I checked and this does not break AOT compilation. Sorry for unnecessary confusion. Also, readonly is only a compile-time thing: https://blog.mariusschulz.com/2016/10/31/typescript-2-0-read-only-properties#readonly-vs-immutability\nTherefore I think that enforcing inputs being readonly is the most clean way to do it.. ",
    "vivekimsit": "@mgechev ok, that was a stupid thing from me. Can you please guide me to doc for setting it up for existing angular-cli project?. ",
    "darkbasic": "```\n\ncodelyzer@3.2.1 build:links /home/niko/WebstormProjects/deps/codelyzer\nts-node build/links.ts --src ./dist\n\nError: Cannot find module '../../style-guide-links/all.json'\n    at Function.Module._resolveFilename (module.js:513:15)\n    at Function.Module._load (module.js:463:25)\n    at Module.require (module.js:556:17)\n    at require (internal/module.js:11:18)\n    at Object. (/home/niko/WebstormProjects/deps/codelyzer/build/links.ts:3:15)\n    at Module._compile (module.js:612:30)\n    at loader (/home/niko/WebstormProjects/deps/codelyzer/node_modules/ts-node/src/index.ts:290:14)\n    at Object.require.extensions.(anonymous function) [as .ts] (/home/niko/WebstormProjects/deps/codelyzer/node_modules/ts-node/src/index.ts:307:14)\n    at Module.load (module.js:531:32)\n    at tryModuleLoad (module.js:494:12)\n```\nI cannot manage to run npm run release from the minko/ng-v5 branch.. [niko@arch-desktop angularcli-graphql]$ git diff package.json \ndiff --git a/package.json b/package.json\nindex 35e31f9..b41c1a6 100644\n--- a/package.json\n+++ b/package.json\n@@ -12,27 +12,27 @@\n   },\n   \"private\": true,\n   \"dependencies\": {\n-    \"@angular/animations\": \"^4.2.4\",\n-    \"@angular/common\": \"^4.2.4\",\n-    \"@angular/compiler\": \"^4.2.4\",\n-    \"@angular/core\": \"^4.2.4\",\n-    \"@angular/forms\": \"^4.2.4\",\n-    \"@angular/http\": \"^4.2.4\",\n-    \"@angular/platform-browser\": \"^4.2.4\",\n-    \"@angular/platform-browser-dynamic\": \"^4.2.4\",\n-    \"@angular/router\": \"^4.2.4\",\n+    \"@angular/animations\": \"^5.0.0-rc.7\",\n+    \"@angular/common\": \"^5.0.0-rc.7\",\n+    \"@angular/compiler\": \"^5.0.0-rc.7\",\n+    \"@angular/core\": \"^5.0.0-rc.7\",\n+    \"@angular/forms\": \"^5.0.0-rc.7\",\n+    \"@angular/http\": \"^5.0.0-rc.7\",\n+    \"@angular/platform-browser\": \"^5.0.0-rc.7\",\n+    \"@angular/platform-browser-dynamic\": \"^5.0.0-rc.7\",\n+    \"@angular/router\": \"^5.0.0-rc.7\",\n     \"core-js\": \"^2.4.1\",\n     \"rxjs\": \"^5.4.2\",\n     \"zone.js\": \"^0.8.14\"\n   },\n   \"devDependencies\": {\n     \"@angular/cli\": \"1.5.0-rc.5\",\n-    \"@angular/compiler-cli\": \"^4.2.4\",\n-    \"@angular/language-service\": \"^4.2.4\",\n+    \"@angular/compiler-cli\": \"^5.0.0-rc.7\",\n+    \"@angular/language-service\": \"^5.0.0-rc.7\",\n     \"@types/jasmine\": \"~2.5.53\",\n     \"@types/jasminewd2\": \"~2.0.2\",\n     \"@types/node\": \"~6.0.60\",\n-    \"codelyzer\": \"~3.2.0\",\n+    \"codelyzer\": \"file:../deps/codelyzer/codelyzer-3.2.1.tgz\",\n     \"jasmine-core\": \"~2.6.2\",\n     \"jasmine-spec-reporter\": \"~4.1.0\",\n     \"karma\": \"~1.7.0\",\n@@ -44,6 +44,6 @@\n     \"protractor\": \"~5.1.2\",\n     \"ts-node\": \"~3.2.0\",\n     \"tslint\": \"~5.7.0\",\n-    \"typescript\": \"~2.3.3\"\n+    \"typescript\": \"~2.4.2\"\n   }\n }\n[niko@arch-desktop angularcli-graphql]$ npm install\nnpm WARN codelyzer@3.2.1 requires a peer of @angular/compiler@^2.3.1 || >=4.0.0-beta <6.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN codelyzer@3.2.1 requires a peer of @angular/core@^2.3.1 || >=4.0.0-beta <6.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN codelyzer@3.2.1 requires a peer of @angular/platform-browser-dynamic@^2.3.1 || >=4.0.0-beta <6.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN codelyzer@3.2.1 requires a peer of @angular/platform-browser@^2.3.1 || >=4.0.0-beta <6.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN codelyzer@3.2.1 requires a peer of @angular/common@^2.3.1 || >=4.0.0-beta <6.0.0 but none is installed. You must install peer dependencies yourself.\nAlso, why do I get the following warnings despite using Angular 5.0.0-rc.7?. Yes please publish the updated version.. Thanks, I'm using // tslint:disable-next-line:no-input-rename. ",
    "eromano": "done. Thanks. ",
    "bthharper": "Okay, my mistake and I've worked out what was wrong with my code ... but it would be good if this was reported rather than causing the tool to hang.\nI'd accidentally put a quote (\") after the 20px;.\n`:host {\n    display:        flex;\n    flex:           1 100%;\n    margin:         20px;\"\n  }`\nThe typescript / angular compilers don't report this, but tslint fails.. ",
    "dhardtke": "Yep, same issue. Even the downloaded zip file from \"Releases\" does not contain a noOnPrefixOutputName.ts inside the src dir :(. ",
    "FabienDehopre": "I have this issue even when using version 3.2.2\nFor me it also happens when not using string:\nhtml\n<div class=\"ui-fluid input-wrapper\">\n      <div [class.required]=\"required\" class=\"ui-g\">\n        <div class=\"ui-g-12 input-wrapper-label\">\n          <label *ngIf=\"label\" [htmlFor]=\"inputId\" class=\"opw-label\">{{ label | translate:lang }}</label>\n        </div>\n        <div class=\"ui-g-12 input-wrapper-control\">\n          <ng-content></ng-content>\n          <div *ngIf=\"hasClientErrors && !hasServerWarningsOrErrors\" class=\"opw-error\">\n            <p *ngIf=\"hasRequiredError\">{{ 'ERROR.REQUIRED' | translate:lang }}</p>\n            <ng-content *ngIf=\"hasOtherErrors\" select=\"p.error\"></ng-content>\n          </div>\n          <div *ngIf=\"hasServerWarnings\" class=\"opw-warning\">\n            <p *ngFor=\"let warn of errors.getWarningItems(path)\">{{ warn.message | translate:lang }}</p>\n          </div>\n          <div *ngIf=\"hasServerErrors\" class=\"opw-error\">\n            <p *ngFor=\"let error of errors.getErrorItems(path)\">{{ error.message | translate:lang }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\nThe tslint report marks all the pipe usage as invalid albeit they are valid. BTW, the error happens randomly with 3.2.2. \nI made a change (removed an empty line) and the error did not happen.. Any news about this issue?\nIt still happens on the latest release (4.0.2). OK. I read the changelog for the 4.0.2. \nMy question was when would this issue (related to the check-pipe) be solved?. ",
    "jeneg": "Got the same issue on 4.0.2. @mgechev Is it going to be fixed?. ",
    "mattlewis92": "Awesome, thanks for your work on this @wKoza! \ud83d\udc4d . @wKoza removed the option, LMK what you think! \ud83d\ude04 . Thanks so much for the quick review! I was debating about having the option as well, I suppose if angular ever offered a 3rd change detection strategy then we could just add an option for that that default it to OnPush so it wasn't breaking. WDYT?. Yeah agreed, that is kind of weird, I'll just remove the option and keep it as OnPush \ud83d\udc4d     . ",
    "Nexeuz": "+1. ",
    "philip-firstorder": "Found the problem, it was because I updated the packages but not my tslint.json.\nChanged in  tslint.json\n\"component-selector\": [true, \"element\", \"kebab-case\"]\nto\n\"component-selector\": [true, \"element\", [\"client\"], \"kebab-case\"]\nand it worked.. ",
    "jaufgang": "Perhaps instead of removing it from the docs, you could document that it has been removed.  That way, developers trying to use the check-pipe who are looking at the docs won't be scratching their heads wondering where it is and need to search around to find this issue in order to figure out what happened to it.. Sure, \n<div>12345</div>\n<span>+</span>\nboth produce an Each element containing text node should have an i18n attribute error.. Oh, please don't drop this rule, it is still very handy.  \nI can see how it would probably be prohibitively complicated to distinguish alphabetic vs non alphabetic symbols for any unicode character in general.  \nPerhaps it would bring the problem down to a more manageable scope to simply allow all strings containing only non-alphabetic printable  characters from the Basic Latin (ASCII)  and Latin-1 Supplement (Extended ASCII) Unicode blocks without the i18n attribute, and to require it on all strings containing characters outside this set.  It may not be perfect, but it would cover a large set of use cases.\nAlso, if there were an equivalent to the //tslint:ignore comments for html, it would allow users to enable this rule while selectively disabling it in some places\neg. something like:\nhtml\n<div><!--tslint-ignore:i18n-->ignored text<!--end-tslint-ignore--></div>\n. Thank you @chojrak11, looks like the perfect solution.  matching on \\p{L} using \nhttps://github.com/slevithan/xregexp\nXRegExp looks really cool. I was unaware that this library  existed until now and did not know of such a simple way to match letter characters across unicode code blocks.   \nSo forget about my suggestion to only test for letters in the Latin code blocks. this would be a much better approach.  . Another example of where whitespace rule could be enforced: \nhtml\n<div [ngClass]=\"{foo:item.isFoo}\"> <!-- should have space after colon -->\n. perhaps a config option could be added to provide a list of elements to ignore (eg: [\"mat-icon\"]).. Thank you @rafaelss95  for fixing this.  \n@mgechev, could you please publish a new release ASAP with this fix merged in?  The bug is actually mangling code, so getting a new release out quickly will help prevent other developers from the ensuing headaches of encountering this bug.  Thanks!. ",
    "cormacrelf": "Do you get type checking in Tslint? It may be more broadly applicable to implement there instead, come to think of it.\n\nOn 29 Nov 2017, at 12:59 pm, Minko Gechev notifications@github.com wrote:\n@cormacrelf TypeScript 1.6 will warn you if you are not reading a private variable, which handles the second case. The first one should be easy to catch by codelyzer, although without type checking it'll be more of a guess rather than a proof.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ok. I\u2019d want this in any Rx project, so I\u2019ll file on tslint and maybe have a go. Thanks for the help!. \n",
    "eriktim": "Too bad. Thanks for the clarification.. ",
    "sagittarius-rev": "For testing spec, rewrite the codes between line 42 and line 68 to:\n``typescript\n      const checkWhiteSpace = (subMatch: string, location: 'start' | 'end', fixTo: string,\n        position: number, absolutePosition: number, lengthFix: number\n      ) => {\n        const { length } = subMatch;\n        if (length === 1) {\n            return;\n        }\n        const errorText = length === 0 ? 'Missing' : 'Extra';\n        context.addFailure(context.createFailure(position, length + lengthFix,${errorText} whitespace in interpolation ${location}; expecting ${InterpolationOpen} expr ${InterpolationClose}`, [\n            new Lint.Replacement(absolutePosition, length + lengthFix, fixTo)\n        ]));\n      };\n  InterpolationWhitespaceRe.lastIndex = 0;\n  let match: RegExpExecArray | null;\n  while (match = InterpolationWhitespaceRe.exec(expr)) {\n    const start = text.sourceSpan.start.offset + match.index;\n    const absolutePosition = context.getSourcePosition(start);\n\n    checkWhiteSpace(match[1], 'start', `${InterpolationOpen} `, start, absolutePosition, InterpolationOpen.length);\n    const positionFix = InterpolationOpen.length + match[1].length + match[2].length;\n    checkWhiteSpace(match[3], 'end', ` ${InterpolationClose}`, start + positionFix, absolutePosition + positionFix,\n      InterpolationClose.length);\n  }\n\n```\nAfter then, update the angularWhitespaceRule.ts code file also.. add two test cases. ",
    "Tukks": "Ok, sorry I opened a issue at angular/angular#21204. ",
    "kevinphelps": "I replaced all template literals with string literals where possible.. @rafaelss95: If I understand correctly, the issue you linked to is a bug where Angular does not call a lifecycle hook that is defined in a TypeScript mixin, not a base class which is what this issue is referring to. \nAngular cannot and should not call a super implementation of a lifecycle hook when it is overridden in a derived class.\nConsider the following:\n```typescript\nclass BaseComponent {\n  ngOnInit() {\n    console.log('base component init');\n  }\n}\n@Component({...})\nclass MyComponent {\n  ngOnInit() {\n    super.ngOnInit();\n    console.log('my component init');\n  }\n}\n```\nThe super.ngOnInit(); line should be allowed by the no-lifecycle-call rule because that is ONLY way BaseComponent#ngOnInit can be called in this case.\nIf you don't provide an implementation of ngOnInit in MyComponent, BaseComponent#ngOnInit would be invoked when Angular invokes MyComponent#ngOnInit simply because of how extends works. But when you override a method, the outside world (i.e Angular) cannot and should not call the super implementation.. If both classes are decorated, it works differently. I'm not sure of the exact behavior when the base component class is decorated, though.. I'm going to remove build change to see if it fixes the Travis build. It's in this PR simply because I needed for local development and I pushed it along with my fixes.. Thanks!. Yeah, I can in a bit. Just need to reformat my changes since the prettier PR was merged first.. @mgechev: See #578.. You can have more than one.. I can remove the type annotation. I kept it because it was already there.. Sorry, I misread. But I wanted to keep the class name when it's available.. I intentionally separated the if block with blank lines for readability.. I can remove if it violates the project's code conventions.. I intentionally separated these variable declarations for readability. Source node info vs. rule logic checks.. I have updated this.. ",
    "pockata-kt": "Could you please bring this rule back?\nAs explained here: https://www.rednxt.com/whats-new-in-angular-6/ in angular 6 this is no longer handled by the compiler but still isn't recommended.\nIt would be very useful because there is currently no way to check this.\nThanks!. ",
    "PRR24": "Please add it back, was one of the most useful rules for me.. I use \"open\" file-watcher/tsc/systemjs solution for development that is provided by IDE.\nFor prod build I use ngc --aot that takes place on separate build server.\nAs a result, development version works perfectly with invalid access rights, but the prod build fails. With the removal of the option developers will find the issue only after code has been commited to VCS and built for release.. ",
    "tatsujb": "I'm currently getting this but with \"on\". ok that's dumb. why can't it be \"on\" when that would allow you to match Angular's naming convention?\nlike the function I'm trying to hit is the original one, the one you call \"click\", no prefix. so I can't call the emitter \"click\" again, vars and functions may only be declared once in JS.\nso naturally \"onClick\" springs up to your mind as the natural name which would allow your own function to follow many if not all of Angular's functions' naming convention.. Oh. my bad. so they bridge the \"name-gap\" html-side : \n<toh-hero (savedTheDay)=\"onSavedTheDay($event)\"></toh-hero>\nyeah that makes more sense, sorry.. ",
    "George35mk": "I get the same warning like you, an easy way to fix this is to not use camelCase try to use something like this.\nyou can set a rule of course http://codelyzer.com/rules/no-output-on-prefix/\nor \nonReset  <--  warning\nonreset  <--  ok\n. ",
    "alisd23": "I also upgraded node-sass on my side because npm install would not work for me with that version as it couldn't find the binding (this is on Windows). I think it doesn't exist for modern versions of node, but I'm not 100% sure of the exact issue. Let me know if you want me to revert that upgrade, and I can just use the CI to see if the tests are passing.\n  . @mgechev Yep, good point. Will add that in. Also did you see my comment above about node-sass?. Ok, added a couple more. Should cover all the cases in the Regex.. ",
    "YiannisH": "Is there a way to fix this? I have been searching all morning and i was unable to find exactly the same issue. There were some similar issues on github that had their issues fixed by using older versions of the involved packages but those solutions refer to different issues. \nJust writing this here as it might help the development team to identify the issue.. Any news on the issue above??. ",
    "agrinko": "I can add another case to this issue.\nAngular-whitespace autofix breaks my component in the following piece of template:\n<span *ngSwitchCase=\"'interval'\">\n    [Period: {{ body.content.period.value.start }} &#8594; {{body.content.period.value.end}}]\n  </span>\nIt replaced it like this:\n<span *ngSwitchCase=\"'interval'\">\n    [Period: {{ body.content.period.value.start }} &#{{ 94; {{body.content.period.val }}.end}}]\n  </span>\nLuckily Angular reported error and I could notice it and fix.\nI'm using Ubuntu, and I don't think it depends on OS. Looks like some flaws in the algorithm or regexp.. ",
    "listepo": "+1 , I think it would be good to have AOT checks as tslint rule for JIT mode(for simple editor or IDE or CI). ",
    "sreichi": "\nSoon, Angular CLI will propose AOT by default for our developments. Angular Team aims at AOT compilation by default. I'm not sure that it is a good reason for adding this rules again. \n\nI dont think this will happen soon since they do not support 100% of the language features JIT is supporting. And if this will be really the case the rule can be removed again. But until then it would be a big help to get this rule back! . > Regarding the rule no-access-missing-member, we have some problems including class inheritance for example (#191). This is one of the reasons for its deletion.\nbut is this really worth for its deletion? The rule set is not the list of \"you must use this rules otherwise your code is shit\" everyone can enable/disable every rule they want. So i really don't understand whats your point against putting it back since a lot of community members really wanna use it. ",
    "peterdolenc": "At the moment JIT is the default (dev) compiler, therefore it makes sense to support template linting for it. Even if weren't default anymore (as indicated by @wKoza), I think it would still make sense to support it. I don't see why you would not support something just because it's not the default option out of the box (and at the moment it even is).\nFurthermore, having these rules supported will not hurt anyone who does not want to use it. Whereas, not having it is a major downfall for all those having to use JIT.. ",
    "ampled": "I'm running a hybrid application with a manual webpack setup with JiT for our dev server and AoT for building using the ngtools/webpack package from angular. Having this rule in place would be great for the dev server as a soft reminder. \nWe are using the Angular Language Service-plugin, but it has proven to be very unstable in our case (frequent crashes and takes forever to update whenever changes are made to the template or component class.) I'd love to use these rules for our JiT dev server so that it pops up as a warning with a webpack ts-lint plugin or something.. ",
    "roychoo": "i agree, thanks for the suggestion, created a PR for this. https://github.com/mgechev/tslint-angular/pull/2\none more thing, then should the default angular-cli generated tslint extends tslint-angular instead?. ",
    "alan-agius4": "@mgechev any feedback pls?. I pushed some changes following the PR review. The only pending are the 2 last comment.\nShould we make this property explicitly for boolean type inputs?. I updated the rational check if makes sense :)\nThanks for the review!\n. I can try again, but when I checked tslint was only looking for these in TS\nfiles and not HTML files, causes it uses TypeScript to find comments and it\ncannot read comments in Html files.\nBut surly I can try the lower case later and give you an update.\nOn Tue, 16 Jan 2018 at 16:24, Minko Gechev notifications@github.com wrote:\n\nThis could be caused by the rule naming. Did you try using both / tslint\ndisable:trackBy-function / and the lower case alternative?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/491#issuecomment-357995339,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wlvf_Do4DIC5c68YnnVDNPmzMnYGks5tLL8YgaJpZM4RfVHE\n.\n. That works fine thanks :) I'll happily do a PR. Maybe you can indicate in\nwhich readme it should go?\n. Actually i found it in some source code of other lint rules libraries\nexample;\n\nhttps://github.com/buzinas/tslint-eslint-rules/blob/master/index.js\nhttps://github.com/ajafff/tslint-consistent-codestyle/blob/master/rules/index.ts\nOn Thu, 08 Feb 2018 at 17:17, Minko Gechev notifications@github.com wrote:\n\nWould you share the source where you found that exporting rulesDirectory\nis required?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/pull/511#issuecomment-364163365,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-Wn9rdKwSahT8jm-Kc0f30qKTizv6ks5tSx4bgaJpZM4R-P25\n.\n. Duplicate: #533. In theory it is for booleans but it can be used on any type.\n\nDo you suggest to restrict this to boolean only?. Inputs names should not be prefixed with the configured disallowed prefixes.\nWhat do you thunk about this?. ",
    "lucasvanhalst": "They will remove the deep imports in rxjs 6, so don't think this rule should become a thing.\nSee here: https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#600-alpha1-2018-01-12\n\noperators: Pipeable operators must now be imported from rxjs like so: import { map, filter, switchMap } from 'rxjs/operators';. No deep imports.. \n",
    "yannickglt": "Thanks for your quick answer!\nGood to learn that there's a compile error now. \nI mainly wanted to know if the practices about prefixing pipes have changed. If it is not a good practice anymore then I guess the rule is not useful anymore.. Great. Thank you!. ",
    "dsmclaughlin": "I'm also seeing this issue.. ",
    "AdamKernig": "You have closed the ticket without problem resolution can you ezplain what\na teansiticie is?\nOn 21 Feb 2018 02:54, \"Minko Gechev\" notifications@github.com wrote:\n\n@AdamKernig https://github.com/adamkernig your log says codelyzer@2.1.1.\nThe peer dependencies of the current release look fine:\n\"peerDependencies\": {\n  \"@angular/compiler\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/core\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/platform-browser-dynamic\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/platform-browser\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"@angular/common\": \"^2.3.1 || >=4.0.0-beta <6.0.0\",\n  \"tslint\": \"^5.0.0\"\n}\nVerify that codelyzer is not installed as a transitive dependency.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mgechev/codelyzer/issues/520#issuecomment-367197480,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AiU-e3WAs6EnZ5DXbBgNErS6Jl6A4NUEks5tW4V8gaJpZM4SMAJX\n.\n. \n",
    "pasame-el-codigo": "@AdamKernig did you have a solution??\n. ",
    "sreeramachandramurthy": "More Info\ntslint.json\n{\n  \"rulesDirectory\": [\n    \"node_modules/codelyzer\"\n  ],\n  \"rules\": {\n    \"class-name\": true,\n    \"comment-format\": [\n      true,\n      \"check-space\"\n    ],\n    \"curly\": true,\n    \"eofline\": true,\n    \"forin\": true,\n    \"indent\": [\n      true,\n      \"spaces\"\n    ],\n    \"label-position\": true,\n    \"max-line-length\": [\n      true,\n      140\n    ],\n    \"member-access\": false,\n    \"member-ordering\": [\n      true,\n      \"static-before-instance\",\n      \"variables-before-functions\"\n    ],\n    \"no-arg\": true,\n    \"no-bitwise\": true,\n    \"no-console\": [\n      true,\n      \"debug\",\n      \"info\",\n      \"time\",\n      \"timeEnd\",\n      \"trace\"\n    ],\n    \"no-construct\": true,\n    \"no-debugger\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": false,\n    \"no-eval\": true,\n    \"no-inferrable-types\": true,\n    \"no-shadowed-variable\": true,\n    \"no-string-literal\": false,\n    \"no-switch-case-fall-through\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-unused-expression\": true,\n    \"no-use-before-declare\": true,\n    \"no-var-keyword\": true,\n    \"object-literal-sort-keys\": false,\n    \"one-line\": [\n      true,\n      \"check-open-brace\",\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"quotemark\": [\n      true,\n      \"single\"\n    ],\n    \"radix\": true,\n    \"semicolon\": [\n      \"always\"\n    ],\n    \"triple-equals\": [\n      true,\n      \"allow-null-check\"\n    ],\n    \"typedef-whitespace\": [\n      true,\n      {\n        \"call-signature\": \"nospace\",\n        \"index-signature\": \"nospace\",\n        \"parameter\": \"nospace\",\n        \"property-declaration\": \"nospace\",\n        \"variable-declaration\": \"nospace\"\n      }\n    ],\n    \"variable-name\": false,\n    \"whitespace\": [\n      true,\n      \"check-branch\",\n      \"check-decl\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n    \"directive-selector\": [true, \"attribute\", \"app\", \"camelCase\"],\n    \"component-selector\": [true, \"element\", \"app\", \"kebab-case\"],\n    \"use-input-property-decorator\": true,\n    \"use-output-property-decorator\": true,\n    \"use-host-property-decorator\": true,\n    \"no-input-rename\": true,\n    \"no-output-rename\": true,\n    \"use-life-cycle-interface\": true,\n    \"use-pipe-transform-interface\": true,\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true,\n    \"no-access-missing-member\": true,\n    \"templates-use-public\": true,\n    \"invoke-injectable\": true\n  }\n}\npackage.json\n{\n  \"name\": \"android\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"angular-cli\": {},\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"lint\": \"tslint \\\"src/**/*.ts\\\"\",\n    \"test\": \"ng test\",\n    \"pree2e\": \"webdriver-manager update --standalone false --gecko false\",\n    \"e2e\": \"protractor\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"5.2.5\",\n    \"@angular/cdk\": \"^5.2.1\",\n    \"@angular/common\": \"5.2.5\",\n    \"@angular/compiler\": \"5.2.5\",\n    \"@angular/core\": \"5.2.5\",\n    \"@angular/forms\": \"5.2.5\",\n    \"@angular/http\": \"5.2.5\",\n    \"@angular/material\": \"^5.2.1\",\n    \"@angular/platform-browser\": \"5.2.5\",\n    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n    \"@angular/router\": \"5.2.5\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"^5.0.1\",\n    \"ts-helpers\": \"^1.1.1\",\n    \"zone.js\": \"0.8.20\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"^1.7.0\",\n    \"@angular/compiler-cli\": \"5.2.5\",\n    \"@types/jasmine\": \"2.8.6\",\n    \"@types/node\": \"9.4.6\",\n    \"codelyzer\": \"4.1.0\",\n    \"jasmine-core\": \"2.99.1\",\n    \"jasmine-spec-reporter\": \"4.2.1\",\n    \"karma\": \"2.0.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-cli\": \"^1.0.1\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-remap-istanbul\": \"0.6.0\",\n    \"protractor\": \"5.3.0\",\n    \"ts-node\": \"4.1.0\",\n    \"tslint\": \"5.9.1\",\n    \"typescript\": \"2.6\"\n  }\n}. Not working!\nTried again on a fresh project starting from scratch\nSteps to Reproduce\n1. Open terminal\n2. ng new trial\nInstalled packages for tooling via npm.\nProject 'trial' successfully created.\n3. cd trial\n4. tslint --project tsconfig.json -c tslint.json\nC:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\runner.js:118\n            throw error;\n            ^\nTypeError: Cannot read property '0' of undefined\n    at Rule.SelectorRule [as constructor] (D:\\trial\\node_modules\\codelyzer\\selectorNameBa\nse.js:23:24)\n    at new Rule (D:\\trial\\node_modules\\codelyzer\\directiveSelectorRule.js:18:47)\n    at Object.loadRules (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\ruleLoader.js:47:36)\n    at Linter.getEnabledRules (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\linter.js:168:44)\n    at Linter.lint (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\linter.js:81:33)\n    at Runner.processFiles (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\runner.js:161:20)\n    at Runner.run (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\runner.js:110:18)\n    at Object.<anonymous> (C:\\Users\\XXXXX\\AppData\\Roaming\\npm\\node_modules\\tslint\\lib\\tslint-cli.js:139:6)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\npackage.json\n{\n  \"name\": \"trial\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build --prod\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^5.2.0\",\n    \"@angular/common\": \"^5.2.0\",\n    \"@angular/compiler\": \"^5.2.0\",\n    \"@angular/core\": \"^5.2.0\",\n    \"@angular/forms\": \"^5.2.0\",\n    \"@angular/http\": \"^5.2.0\",\n    \"@angular/platform-browser\": \"^5.2.0\",\n    \"@angular/platform-browser-dynamic\": \"^5.2.0\",\n    \"@angular/router\": \"^5.2.0\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"^5.5.6\",\n    \"zone.js\": \"^0.8.19\"\n  },\n  \"devDependencies\": {\n    \"@angular/cli\": \"1.6.8\",\n    \"@angular/compiler-cli\": \"^5.2.0\",\n    \"@angular/language-service\": \"^5.2.0\",\n    \"@types/jasmine\": \"~2.8.3\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"@types/node\": \"~6.0.60\",\n    \"codelyzer\": \"^4.0.1\",\n    \"jasmine-core\": \"~2.8.0\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~2.0.0\",\n    \"karma-chrome-launcher\": \"~2.2.0\",\n    \"karma-coverage-istanbul-reporter\": \"^1.2.1\",\n    \"karma-jasmine\": \"~1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"protractor\": \"~5.1.2\",\n    \"ts-node\": \"~4.1.0\",\n    \"tslint\": \"~5.9.1\",\n    \"typescript\": \"~2.5.3\"\n  }\n}. ",
    "mariohmol": "My bad! The decorator was Component! DIdt now that decorator was validated as well! sorry!. ",
    "JJBocanegra": "@wKoza It's Windows 10 Pro 64 bits. ",
    "agnislav": "The same issue\n{{contactInfo.streetName}}&nbsp;{{contactInfo.houseNumber}}<br/>\n{{contactInfo.postalCode}}&nbsp;{{contactInfo.city}}<br/>\nwas transformed to\n{{ contactInfo.streetName }}&{{ sp;{{contactInfo.houseN }}ber}}<br/>\n{{ contactInfo.postalCode }}&{{ sp;{{contactInfo }}ity}}<br/>\nMacOS X 10.13.3, codelyzer 4.2.1, tslint 5.9.1. ",
    "ngiebel": "See the rule no-output-named-after-standard-event. ",
    "sokolovstas": "Thanks!. @ngiebel @mgechev\nShort question: is there are rule to check that event in templates exist in component @Output?\n@Component({\n  selector: 'sg-hero-cmp',\n  template: '<h1>Hello <span [ERROR]->(myEvent)=\"myEv()\"></span></h1>',\n  ]\n})\nclass HeroComponent {\n  private hero: Hero;\n    myEv() {\n    }\n}\nI have found that this check is disabled on angular compiler, and used only when template is included in .ts file. I have try to restore it, but compiler couldn't find standard events like (click)\nelse if (isTemplateElement) {\n            this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, /** @type {?} */ ((element.sourceSpan)));\n} else {\n            this._assertElementExists(matchElement, element);\n            this._assertOnlyOneComponent(directiveAsts, /** @type {?} */ ((element.sourceSpan)));\n}. ",
    "sam-s4s": "-EDIT-\nAh I had it the wrong way around - there is still a problem but it's the reverse of what I was thinking... I'll try to describe it... Also I found a different bug that I'll have to make a separate post about (it complains that you need to use kebab case, even when your selector only has one word...)\nFile: my-test.component.ts\nSelector: my-test\nClass: MyTestComponent\nResult:\n\"The selector of the component \"MyTestComponent\" should have prefix \"app\" (https://angular.io/styleguide#style-02-07)\"\nThis is obviously incorrect... any idea why it's doing this?. Wait... you're saying that it expects me to put the prefix \"app\" in front of every component in my entire app? And that's Angular CLI's default setting? That is terrible lol. Yeah, I guess it's a good idea from that perspective... But it seems a little unrealistic for real-world large-scale usage...\nie. our app has over 160 components already, some with selectors over 40 characters (adding more verbosity would be annoying).\nBack when we started development, that pattern didn't really exist.\nAnyway, I can just disable that rule now I know what's going on.\nThanks!. Wow sorry guys, I must have done a poor job searching for existing issues, my bad!\nLooking forward to the newer version with this fix :)\nThanks!. ",
    "rwlogel": "One other thing to note regarding nested items, elements can't have i18n tags when they are contained within another element with i18n tags.  So this unit test is allowing an invalid syntax to pass:\n182     it('should work with multiple valid elements', () => {\n183       const source = `\n184       @Component({\n185         template: \\`\n186           <div>{{text}}</div>\n187           <div i18n>\n188             Text\n189             <span i18n>foo</span>\n190           </div>\n191         \\`\n192       })\n193       class Bar {}\n194       `;\n195       assertSuccess('i18n', source, ['check-text']);\n196     });\nIf this component was extracted using ng xi18n this would be the result:\nError: Could not mark an element as translatable inside a translatable section (\"\n    <div i18n>\n        Text\n        [ERROR ->]<span i18n>foo</span>\n    </div>\n\"...\nThe check-text directive could easily be updated to alert for this or a new directive could be created to alarm for this instead.  I would be willing to add either solution.. Just to clarify this change won't fix #443 but adding support for that would be pretty straight forward.. @wKoza Do you know when the next release will be?  My team was hoping to use this fix in our project.. @wKoza that would be great.  Thank you.. ",
    "chengwanxin9825": "@wKoza\nthank you very march.. ",
    "scott-ho": "@mgechev could you link to the related issue? I create this issue for not finding out similar issue.. ",
    "mertdeg2": "At Google, its a standard practice to import TS sources for NPM modules. But we can only have one copy of TypeScript NPM module.\nWhen I tried to build codelyzer from its sources, these are the errors I got (because codelyzer is depending on old TS version):\n```\n/node_modules/codelyzer/src/angular/metadataReader.ts(40,7): error TS2349: Cannot invoke an expression whose type lacks a call signature. Type '((callbackfn: (value: Decorator, index: number, array: ReadonlyArray) => U, thisArg...' has no compatible call signatures.\n40       (d.decorators || ([] as ts.Decorator[])).map((dec: ts.Decorator) => {\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 41         return Maybe.lift(dec)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n... \n 44           .fmap(() => this.readComponentMetadata(d, dec));\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 45       })\n    ~~~~~~~~\n/node_modules/codelyzer/src/angular/metadataReader.ts(49,7): error TS2349: Cannot invoke an expression whose type lacks a call signature. Type '((callbackfn: (value: Decorator, index: number, array: ReadonlyArray) => U, thisArg...' has no compatible call signatures.\n49       (d.decorators || ([] as ts.Decorator[])).map((dec: ts.Decorator) =>\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 50         Maybe.lift(dec)\n    ~~~~~~~~~~~~~~~~~~~~~~~\n... \n 53           .fmap(() => this.readDirectiveMetadata(d, dec))\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 54       )\n    ~~~~~~~\n/node_modules/codelyzer/src/angular/metadataReader.ts(57,5): error TS2322: Type '{}' is not assignable to type 'DirectiveMetadata'.\n  Property 'selector' is missing in type '{}'.\n57     return directiveMetadata || componentMetadata || undefined;\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/angular/metadataReader.ts(62,66): error TS2345: Argument of type 'NodeArray' is not assignable to parameter of type 'ObjectLiteralElement[]'.\n  Property 'push' is missing in type 'NodeArray'.\n62       .bind(expr => getStringInitializerFromProperty('selector', expr.properties))\n                                                                    ~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/angular/metadataReader.ts(63,40): error TS2339: Property 'text' does not exist on type '{}'.\n63       .fmap(initializer => initializer.text);\n                                          ~~~~\n/node_modules/codelyzer/src/angular/ngWalker.ts(62,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n62     (declaration.decorators || []).forEach(this.visitClassDecorator.bind(this));\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/angular/ngWalker.ts(62,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n  Property 'push' is missing in type 'NodeArray'.\n62     (declaration.decorators || []).forEach(this.visitClassDecorator.bind(this));\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/angular/ngWalker.ts(67,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n67     (method.decorators || []).forEach(this.visitMethodDecorator.bind(this));\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/angular/ngWalker.ts(72,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n72     (prop.decorators || []).forEach(this.visitPropertyDecorator.bind(this));\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/propertyDecoratorBase.ts(39,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n39     (node.decorators || []).forEach(this.validateDecorator.bind(this, node.name.text));\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/selectorNameBase.ts(106,6): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n106     (node.decorators || []).forEach(this.validateDecorator.bind(this, node.name.text));\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/usePipeDecoratorRule.ts(35,24): error TS2352: Type 'NodeArray' cannot be converted to type 'any[]'.\n35       let decorators = node.decorators || [];\n                          ~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/usePipeDecoratorRule.ts(35,24): error TS2352: Type 'NodeArray' cannot be converted to type 'any[]'.\n  Property 'push' is missing in type 'NodeArray'.\n35       let decorators = node.decorators || [];\n                          ~~~~~~~~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/util/ngQuery.ts(21,53): error TS2345: Argument of type 'NodeArray' is not assignable to parameter of type 'ObjectLiteralElement[]'.\n21     getStringInitializerFromProperty('templateUrl', expr.properties)\n                                                       ~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/util/ngQuery.ts(26,121): error TS2345: Argument of type 'NodeArray' is not assignable to parameter of type 'ObjectLiteralElement[]'.\n26   return decoratorArgument(dec).bind((expr: ts.ObjectLiteralExpression) => getStringInitializerFromProperty('template', expr.properties));\n                                                                                                                           ~~~~~~~~~~~~~~~\n/node_modules/codelyzer/src/util/utils.ts(47,11): error TS2352: Type 'NodeArray' cannot be converted to type 'Decorator[]'.\n47   return (declaration.decorators || [])\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n. I would be happy to upgrade codelyzer to TS 2.7.2, but I might have noob questions.\nFor example: how do I run codelyzer tests?. Sounds good. Thanks Minko! Let me know if i can help.. Cool! Now I am getting only one failure:\n```\n/node_modules/codelyzer/src/noTemplateCallExpressionRule.ts(21,3): error TS4053: Return type of public method from exported class has or is using name 'RuleFailure' from external module \"/node_modules/tslint/v5_7_0/src/language/rule/rule\" but cannot be named.\n        see http://go/typescript/patterns#exported-symbol-cannot-be-named\n21   apply(sourceFile: ts.SourceFile) {\n     ~~~~~\n```\n. Nope, this works. Thanks! :). ",
    "Teamop": "@mgechev yes, just declare but don't use.. ",
    "dev054": "Unfortunately not, it compiles here. The maximum we can get now is a warning from the deprecated pipe-naming rule if the value is undefined (not null or empty):\n\n[tslint] The name of the Pipe decorator of class Test should be named camelCase with prefix fo,mg,sg, however its value is \"undefined\". (pipe-naming)\n\n\nInterestingly, Angular throws an compile-time error for @Directive:\n\nError: Directive Test has no selector, please add it!\n\n... when your selector is equal to null, undefined or empty.. Hmm, yes. While I agree that enable strict makes it more easier to find errors, not all projects use it. Also, it doesn't prevent ''.. I've upgraded everything.\nBefore all @angular related stuff was in 5.2.10 and Codelyzer 4.2.1. After upgrading I'm getting these warnings.. ",
    "chojrak11": "@rafaelss95 \n\nI do like the idea of always ignore texts containing only numbers and/or symbols without extra config... however we still expect a failure for this case \u00e9\u00e1\u00ed\u00e7 (only special chars), right?\n\nThese are not special chars... These are normal printable characters, that can be matched using \\p{L} qualifier in XRegExp. Special character examples are +-$^& or e.g. Unicode punctuation class and more.. These Unicode character classes first appeared in Perl 5 on 1998-07-24. .NET adopted them in 2002, Java also uses them, JavaScript for reasons unknown to me doesn't... There's lot of great additional information here: https://www.regular-expressions.info/unicode.html#category\n. ",
    "janousek": "I believe that this can be solved with possibility to define custom regular expressions for empty elements. This is universal solution, and it is up to developers to define rules that the needs.\nExample:\n{ \n    \"rules\": { \n        \"i18n\": [ \n            true, \n            \"check-id\", \n            \"check-text\", \n            { \n                \"empty\": [\n                    \"^[0-9\\\\s]+$\",\n                    \"^[\\+\\-\\|\\\\s]+$\"\n                ]\n            } \n        ] \n    } \n}. ",
    "SebasG22": "@wKoza The issue should be open, the problem persist.\nTypescript File\n\nTslint config\n\n. @wKoza You are right, but still not working.\n\n. @rafaelss95 thanks you, I realized that the src/tslint.json (Angular Generated) overwritten my global ( tslint.json )custom rules.. ",
    "Linkker": "insert line \n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'vtc-temp',\n. ",
    "jonsamwell": "Any progress on this? Using @mgechev's solution above makes the i18n rule not work at all rather than just ignoring mat-icon elements (using tsling 5.11.0 & codelyzer 4.5.0).. ",
    "Karamuto": "Would appreaciate the blacklist rule. As by the moment this produces unnesscassary i18n attributes.. ",
    "SanderElias": "@wKoza perhaps a clue on how to vote might help the voting process? ;). ",
    "seangwright": "This convention is mentioned in the official style guide\nDo use a custom prefix for a component selector. For example, the prefix toh represents from Tour of Heroes and the prefix admin represents an admin feature area.. ",
    "piyukore06": "Hi @mgechev, Thank you for your input. I only needed NgWalker for my use case, but I think it makes sense to export the angular directory contents, there's so much goodness, everyone could use to build rules.\nJust one question, When you are saying a separate package, do you mean npm module like @codelyzer/angular and @codelyzer/rules something like that?\nor like a secondary entry point codelyzer/angular\n. Yea I am trying but couldn't find anything.. locally the command runs without any problems.. @mgechev thank you for your comments! They lead me to a better understanding of, where to look and what should be exported. . ",
    "klinki": "Sorry, duplicate for https://github.com/mgechev/codelyzer/issues/573. ",
    "FDIM": "yep, nothing angular specific - but it might be easier / faster to include it here than in the tslint itself. I created an issue in tslint: https://github.com/palantir/tslint/issues/3974\nAs for node_modules, it just goes down to order - it tries base directory first and then fallbacks to node_modules or any other folder dictated by compiler options paths property in tsconfig. ",
    "LukasKlement": "I'm experiencing the same issue, downgrading to version 4.3.0 fixes it. I'm using typescript@2.7.2. ",
    "chrisguttandin": "thank you very much. ",
    "LillaEli": "Hi! It seems like these rules are still missing in the docs (http://codelyzer.com/rules/).. ",
    "loktionov129": "@rafaelss95,\nI think this package https://github.com/okonet/lint-staged would be great too for running linters on git staged files.\nAnd it seems to me https://github.com/semantic-release/semantic-release are better than https://github.com/conventional-changelog/standard-version. @rafaelss95 semantic-release makes a release only when adding the commits with feature or fix types, but he doesn't releases the commits with chore/build/ci/docs/perf/refactor/style/test types.. ",
    "borriej": "Note:\nalso tried with downgraded npm modules:\n\"angular-tslint-rules\": \"^1.4.1\",\n    \"codelyzer\": \"^4.1.0\",\n    \"tslint\": \"^5.9.0\"\nsame results. @mgechev thank you. I removed the caret, did npm install... checked the package.json of tslint. It is 5.9.0 now..\nran ng lint ... but still i get several:\n```\nERROR: path/to/my/file/component.ts[66, 31]: Missing whitespace in interpolation end; expecting {{ expr }}\nERROR: path/to/my/file/component.ts[70, 25]: Missing whitespace in interpolation end; expecting {{ expr }}\nERROR: path/to/my/file/component.ts[74, 8]: Missing whitespace in interpolation end; expecting {{ expr }}\n```. I also just tried to fix the npm versions to:\n\"angular-tslint-rules\": \"^1.4.1\",\n    \"codelyzer\": \"4.1.0\",\n    \"tslint\": \"5.9.0\",\nnpm install\ncheck package.json versions inside node modules.. yes, correct versions..\nran ng lint\n```\nCould not find implementations for the following rules specified in the configuration:\n    prefer-while\nTry upgrading TSLint and/or ensuring that you have all necessary custom rules installed.\nIf TSLint was recently upgraded, you may have old rules configured which need to be cleaned up.\nERROR: path/to/my/file/component.ts[66, 31]: Missing whitespace in interpolation end; expecting {{ expr }}\nERROR: path/to/my/file/component.ts[70, 25]: Missing whitespace in interpolation end; expecting {{ expr }}\nERROR: path/to/my/file/component.ts[74, 8]: Missing whitespace in interpolation end; expecting {{ expr }}\n```. @Shinigami92 you're right! \nexamples like this we're causing it:\n{{ model.param || '-'}} \n{{ model?.paramTimestamp ? (model?.paramTimestamp | date: 'short') : '-'}}\nbut the bug remains that the error should point to the correct file\n. ",
    "Shinigami92": "The problem is that it complains about the ts file but the error is in the html file. @wKoza why is it deprecated? What is the new replacement? Maybe I missed something in the changelog? . ",
    "Xample": "Same issue here, present on both 5.9.0 and 5.11.0\nhtml\n<ng-template #empty>\n    {{placeholder}}\n</ng-template>\nFails, while the code below works\nhtml\n<ng-template #empty>\n    {{ placeholder }}\n</ng-template>. @NarHakobyan just add the spaces for now\u2026 afaik it is still not solved. ",
    "YoeriNijs": "Yes, in my case, the message was caused by an error in the related view. I solved it by replacing {{ var}} with {{ var }}. . ",
    "NarHakobyan": "I have the same issue, is there any news about this?. ",
    "joseluisq": "Confirmed the @Xample solution using white spaces solves the issue:\n\ncodelyzer: ^4.4.3\ntslint: ^5.10.0\n\nhtml\n<ng-template #empty>\n  {{ placeholder }}\n</ng-template>\n. ",
    "sneas": "@mgechev thanks for codelyzer and please let me know if anything should be updated and if this PR makes any sense at all.\nI'm not sure about messages correctness. English language is not my strongest side.. I've just discovered some test cases cause this error:\nAssertionError: end char doesn't match: expected { line: 2, character: 25 } to deeply equal { line: 2, character: 24 }\n    at Function.assert.deepEqual (/Users/travis/build/mgechev/codelyzer/node_modules/chai/lib/chai/interface/assert.js:216:32)\n    at assertFailure (/Users/travis/build/mgechev/codelyzer/dist/test/testHelper.js:126:23)\n    at Object.assertAnnotated (/Users/travis/build/mgechev/codelyzer/dist/test/testHelper.js:90:16)\n    at Context.<anonymous> (/Users/travis/build/mgechev/codelyzer/dist/test/pipePrefixRule.spec.js:8:26)\n    at callFn (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runnable.js:383:21)\n    at Test.Runnable.run (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runnable.js:375:7)\n    at Runner.runTest (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:446:10)\n    at /Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:564:12\n    at next (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:360:14)\n    at /Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:370:7\n    at next (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:294:14)\n    at Immediate._onImmediate (/Users/travis/build/mgechev/codelyzer/node_modules/mocha/lib/runner.js:338:5)\n    at runCallback (timers.js:696:18)\n    at tryOnImmediate (timers.js:667:5)\n    at processImmediate (timers.js:649:5)\nFixed with this commit https://github.com/mgechev/codelyzer/pull/693/commits/f388737c1047c28f955e59996a9e3b4ec4323f76. ",
    "JoostK": "Wouldn't this issue have solved itself per the upgrade to Angular 6.1 in a9d74bef3a93818520127676612fc67531dde785? I would expect the TypeScript compiler to inline the const enum values now, much like what happens in this PR as well but then without the additional delegate type.. ",
    "PapsOu": "@mgechev : I've added your suggestion.. ",
    "mayfieldiv": "Glad to see this will be in the next release. I updated my dependencies today to find the linter mangling TS files as others mentioned.. ",
    "JamesHenry": "Not just yet, I originally had it in the same PR as when I added inline style formatting, but the HTML formatting (in general) in Prettier is still a WIP, once that lands it will be straightforward to add inline template formatting for Angular Components.\nYou can subscribe to the general issue here: https://github.com/prettier/prettier/pull/4753. ",
    "gaspardip": "Same thing here. Trying to setup prettier+codelyzer+stylelint. Not that easy so far.\ntslint.json\n{\n  \"rulesDirectory\": [\"node_modules/codelyzer\"],\n  \"extends\": [\"angular-tslint-rules\", \"tslint-consistent-codestyle\", \"tslint-config-prettier\"],\n  \"rules\": {\n    \"array-type\": [true, \"array\"],\n    \"ban\": [\n        true,\n        \"eval\",\n        \"alert\",\n        \"$\",\n        {\n          \"name\": [\"*\", \"forEach\"],\n          \"message\": \"Use a regular for loop instead. Please check .find/.findIndex/.filter/.map/.some/.every if you are performing one of these operations.\"\n        }\n    ],\n    \"no-implicit-dependencies\": false,\n    \"no-inferrable-types\": false,\n    \"no-var-keyword\": true,\n    \"no-var-requires\": true,\n    \"object-literal-sort-keys\": [\n      true,\n      \"match-declaration-order\",\n      \"shorthand-first\"\n    ],\n    \"ordered-imports\": true,\n    \"typedef\": [\n      true,\n      \"call-signature\",\n      \"parameter\",\n      \"member-variable-declaration\"\n    ]\n  }\n}\n\"angular-tslint-rules\": \"^1.5.0\",\n\"codelyzer\": \"^4.4.4\"\n\"tslint: \"^5.11.0\"\n\"tslint-config-prettier\": \"^1.15.0\"\n\"tslint-consistent-codestyle\": \"^1.13.3\"\nInput\n<mat-option *ngFor=\"let av_programa of av_programas\" [(value)]=\"av_programa.Id\" class=\"sizeTitle\">\n                {{av_programa.Name}}\n              </mat-option>\nOutput\n<mat-option *ngFor=\"let av_programa of av_programas\" [(value)]=\"av_programa.Id\" class=\"sizeTitle\">\n               {{ {av_programa.Nam }}}\n              </mat-option>\n. ",
    "marbug": "the root of the issue: the additional marbug-app/src/tslint.json file has been automatically generated, which also has component-selector rule by default, and it redefines component-selector rule from marbug-app/tslint.json by default prefix. Sorry for disturbing. Closing the issue.... ",
    "jpmckearin": "Thanks for the quick response.  Sorry about wasting your time by not searching the closed issues \ud83d\ude04 . ",
    "etramell-tem": "Followup:  I have been trying to figure out a commonality between the events that get visited, vs. those that don't, and I think I have it...\nIn our project, we (very!) often format our HTML like this to avoid long unreadable lines:\n<some-component\n  [input1]=\"true\"\n  [input2]=\"42\"\n  (output1)=\"onOutput1()\"\n  (output2)=\"onOutput2()\">\n</some-component>\ninstead of:\n<some-component [input1]=\"true\" [input2]=\"42\" (output1)=\"onOutput1()\" (output2)=\"onOutput2()\"></some-component>\nIt appears that the only events that get visited are the ones in HTML like the latter.  Events in HTML like the former are not visited.\nGiven that, is this a bug that can be fixed?. ",
    "DanielHabenicht": "I am sorry. I did not see the PR 7 days ago. Thought I had upgraded all my packages but it did not.. ",
    "kevinbosman": "Prettier 1.15 (https://prettier.io/blog/2018/11/07/1.15.0.html) always now adds parentheses when formatting an html file with an *ngFor with async pipe, so check-pipe is now incompatible with prettier.. ",
    "ajafff": "I have written a rule to disallow override a void returning method with a promise returning method: https://github.com/fimbullinter/wotan/blob/master/packages/mimir/docs/async-function-assignability.md\nIf you are using implements OnInit this rule does exactly what you want. It covers a lot more cases and should detect almost all assignments of async functions to void-returning functions.\nHave a look at the documentation of the linter for a quick start guide: https://github.com/fimbullinter/wotan/blob/master/packages/wotan/README.md. ",
    "fbaezap": "@ajafff That's great. Thanks a lot.\n@mgechev The problem is that making async onInit makes it seems that the afterInit will wait until onInit is finished. That clearly doesn't happen and it's okay because it would, as you say, slow down rendering time.\nThe problem is not what it does or doesn't, the problem is what it seems to does. \nFor example:\ntypescript\n@Component({\n  selector: 'app-document-view',\n  templateUrl: './document-view.component.html',\n})\nexport class DocumentViewComponent implements OnInit, AfterViewInit {\n  document: { _id: number, name: string };\n  async ngOnInit() {\n    this.document = await this.getAsyncDocument();\n    if (isNullOrUndefined(this.document)) {\n      this.goToErrorPage()\n    }\n  }\n  ngAfterViewInit() {\n    console.log(this.document.name)\n  }\n}\nFirst: I know it should be done with a resolver.\nSecond: We know i will throw an error, because we know it would trigger ngOnInit and immediately trigger ngAfterInit because ngOnInit expect a void and doesn't wait until promise finish.\nI'm sorry if I didn't get to explain myself well. Yeah. I would like to. Thanks for the willingness. ",
    "fetis": "any progress on it?. ",
    "gregjacobs": "Does anyone actually vote on closed issues?. ",
    "mgol": "Palantir has just announced TSLint will be deprecated in favor of ESLint.. ",
    "cafesanu": "@mgechev would love to create a pull request with these rules if you think they make sense. The angular style guide mentions this as a DO in here https://angular.io/guide/styleguide#style-05-04, so it would be nice to have theme at least optionally.\nIf you think it makes sense and my PR will make it, are there any guidelines to follow or recommendations?. Nice! that is what I needed! Thanks!. ",
    "frederikschubert": "@View is deprecated I think.\n. ",
    "valorkin": "You don't need 'else' if you did return inside of 'if' statement . Using any is like a small step into dark side :). "
}