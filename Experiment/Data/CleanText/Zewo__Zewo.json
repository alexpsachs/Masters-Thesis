{
    "paulofaria": "thanks mate! \n. thanks mate!\n. Yeah. I tried it in my computer from work and got the same thing. The cocoapods instructions seems to be working fine. You can try that while I investigate this issue. I'm thinking it's a carthage problem.\n. I'm gonna keep this open until I figure it out! Thanks, man!\n. @codegefluester Can you check if it works, so I can close the issue? thanks! \n. It is supposed to be fixed now. Did you clean the build leftovers and tried to build again?\n. Yeah, could you please update HTTPMiddleware to Middleware?\n. Yeah that was annoying me for a while haha. I always forgot to fix it. Thanks. (:\n. startInBackground() starts the server in a coroutine. If you don't have any other call that blocks after startInBackground() the server will exit. You should only call startInBackground when you have two servers running in the same applications like in the example. If you have only one server you sould just call start().\n. Yes. We're going through a big refactor that's almost ready. We have the feature implemented. Soon, we'll release it.\n. reference:\nhttps://nodejs.org/api/http.html#http_message_headers\n. Also remove the extra new line\n. you should use version 0.2+ with 2016-02-08 swift dev snapshot.\n. You could simply name it Redis. What do you think? haha\n. Your SPM package is already namespaced to your git repository, so.. I don't see a problem with it being just Redis.\n. I would try Redis if they complain then I'd change to ZRedis or Rediz don't know hahahaha \n. I see a Dart redis library called redis. So I think it's ok.\n. there's a Nim one as well. (never heard of this lang haha). a perl Redis. so.. \n. let me know what you decide! \n. ZRedis it is then?\n. You can rename your repo to Redis all calls to swift-redis will redirect correctly. \n. Thanks a lot! Do we have other broken links?\n. thanks man!\n. The only thing I'm worried is about swiftenv.\n\nYou can skip swiftenv step and some swiftenv instructions below if you already have DEVELOPMENT-SNAPSHOT-2016-02-08-a in your PATH\n\nI think it would be nice if we encourage the use of swiftenv with .swift-version files (local swift version). Also, swiftenv's hombrew installation doesn't work properly. So I would at least add a notice suggesting the git clone installation process.\n. Other than that a squash would be nice as well! (;\n. Did you check brew with the --head? does it really work?\n. I only tried the manual git clone. \n. If it works as expected feel free to merge! (:\n. Done\n. I think the fix would be just a matter of checking if a route with a given path already exists and then append the actions to the existing route.\n. oh and the Zewo equivalent of that node's code is:\nimport HTTPServer\ntry Server({ _ in Response(body: \"hello world\")}).start()\n. yeah! that's the second part of the solution.\nprovide a complete list of possible HTTP errors. This should be in HTTP I think.\n``` swift\nprotocol Error: ErrorProtocol {\n    var status: S4.Status { get }\n}\nenum ClientError: Error {\n    case badRequest\n    case unauthorized\n    case paymentRequired\n    case forbidden\n    ...\nvar status: S4.Status {\n    switch self {\n    case badRequest: return .badRequest\n    case unauthorized: return .unauthorized\n    ...\n   }\n}\n\n}\nenum ServerError: Error {\n    case internalServerError\n    case notImplemented\n    ...\n}\n```\nThen we throw these errors in our modules instead of returning a response, like @Danappelxx said. And as a safety measure. If a user doesn't catch these in a RecoveryMiddleware and the error gets thrown all the way to the server. We catch errors of type HTTP.Error there and convert them to a regular Response(status: error.status).\n. Actually, I'd like HTTPServer to not depend on HTTP so maybe a module called HTTPError would be better.\n. Or we can propose to move this to S4.\n. I think we should strive to only return HTTP errors when we're in that scope. maybe add some more information to HTTP. Error or S4.Error. So we can create a nice looking HTML page for the error. But worst case scenario we catch an anonymous error and convert it to internalServerError.\n. ok I'll create a PR with this in S4. we can continue discussing what properties S4.Error should have so we can create nicer HTML error pages.\n. This is possible now. We should inspect where we can throw the HTTP errors and add a default catcher to our HTTP servers.\n. wont-fix\n. > Replacing the FileStream body with file.read() resolves the issue.\nThat was misleading, haha. so what's left?\n. Why is FileStream still broken? It's not like it was before.\n. Did anybody test?\n. @tomohisa yeah. that's exactly the fix I was going to do. except that the data inside closedStream should be Data(data.prefix(received)).\n. @donut Yeah there is. I forgot to tag it. hahaha.\n. @iamcam any further trouble you can reach us on slack.zewo.io \ud83d\ude0a \n. @drewag Yeah, you're right! That's the expected behaviour. Would be awesome if you sent a PR.\n. Done!\n. done\n. Router.swift\nswift\nlet router = Router { route in\n    route.get(\"/hello\") { _ in\n        return Response(body: \"hello world\")\n    }\n}\nRouter2.swift\nswift\nlet router2 = Router { route in\n    route.get(\"/hello2\") { _ in\n        return Response(body: \"hello world\")\n    }\n}\nmain.swift\n``` swift\nlet app = Router { route in\n    route.compose(router: router)\n    router.compose(router: router2)\n}\ntry Server(app).start()\n. Any other questions you can ask in [slack.zewo.io](http://slack.zewo.io) \ud83d\ude04 \n. done\n.\nfatal error: Error raised at top level: Address already in use: file /Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/stdlib/public/core/ErrorType.swift, line 59\nCurrent stack trace:\n0   libswiftCore.dylib                  0x000000010d4e16a1 swift_reportError + 145\n1   libswiftCore.dylib                  0x000000010d4fea17 _swift_stdlib_reportFatalErrorInFile + 103\n2   libswiftCore.dylib                  0x000000010d4b4193 partial apply forwarder for Swift.(_assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt, flags : Swift.UInt32) -> ()).(closure #1).(closure #1).(closure #1) + 99\n3   libswiftCore.dylib                  0x000000010d4b41ef partial apply forwarder for reabstraction thunk helper from @callee_owned (@unowned Swift.UnsafeBufferPointer) -> () to @callee_owned (@unowned Swift.UnsafeBufferPointer) -> (@out ()).291 + 63\n4   libswiftCore.dylib                  0x000000010d36a9bd generic specialization  of Swift.StaticString.withUTF8Buffer  (invoke : (Swift.UnsafeBufferPointer) -> A) -> A + 349\n5   libswiftCore.dylib                  0x000000010d47977c function signature specialization  of Swift.(_assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt, flags : Swift.UInt32) -> ()).(closure #1) + 204\n6   libswiftCore.dylib                  0x000000010d48c80f partial apply forwarder for Swift.(_assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt, flags : Swift.UInt32) -> ()).(closure #1) + 143\n7   libswiftCore.dylib                  0x000000010d457b9a function signature specialization  of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt, flags : Swift.UInt32) -> () + 218\n8   libswiftCore.dylib                  0x000000010d380cff swift_errorInMain + 719\n9   Todo                                0x000000010d0c31e9 main + 857\n10  libdyld.dylib                       0x00007fff883b55ad start + 1\n11  ???                                 0x0000000000000001 0x0 + 1\n[1]    71601 illegal hardware instruction  .build/debug/Todo\n``\n. This is the error whenAddress already in use. Oh man.. that error message reaaallly sucks haha. Swift should do something about that. But yeah.. you're right we can fix this in a better way actually. I just remembered #98. With that we'll be able to catch any errorsServer` might throw and print a nice message. (:\n. wont-fix\n. done\n. \n. FileResponderTest 2.zip\n. done\n. @0xpablo I think you can sign all headers using a middleware. Something like this.\n``` swift\nstruct SignMiddleware : Middleware {\n    func respond(to request: Request, chainingTo next: Responder) throws -> Response {\n        var request = request\n        // sign the headers using request.headers\n        return try next.respond(to: request)\n    }\n}\nlet client = try Client(url: \"api.com\")\nlet sign = SignMiddleware()\nlet request = try Request(...)\nlet response = try client.request(request, middleware: [sign])\n```\nAre you working on an AWS client? That's on our roadmap. \ud83d\ude0a\n. We're using YAJL now!\n. let's have this merged for 0.15.0 (:\n. @dreymonde can we finally merge this? haha it's done right? just need a rebase?\n. I'll close this PR since when using Squash and merge (which we usually use) the one who created the PR is the one who becomes the author of the commit. Since most of the work will be done by @robertjpayne, he should be the one to create the PR. The branch will be kept. Which Robert should use to create the PR.\n. The issue is probably the throws overhead and the fact that we have work on three different modules now.. TCP, IP, and POSIX.\n. I'm not at home now, so I'll review it properly when I get home. But regarding the POSIXRegex module. I think it's better to add Regex to the existing POSIX module instead of reviving POSIXRegex from the graveyard.\n. @JGiola could you please raise a bug at bug.swift.org? I think the formatting itself is secondary in regards to correctness. Timezones should be respected above all. If this means different formatting, I'm fine with that. \n. as soon as ci passes I'll merge\n. @joernroeder IIRC this used to work before. We can change the signature for the body version from:\nswift\npublic func get<\n    T: MapInitializable\n    >(\n    _ path: String = \"\",\n    middleware: [Middleware] = [],\n    content: T.Type = T.self,\n    respond: @escaping (Request, T) throws -> Response\n) {\n    add(method: .get, path: path, middleware: middleware, respond: respond)\n}\nto\nswift\npublic func get<\n    T: MapInitializable\n    >(\n    _ path: String = \"\",\n    middleware: [Middleware] = [],\n    content: T.Type,\n    respond: @escaping (Request, T) throws -> Response\n) {\n    add(method: .get, path: path, middleware: middleware, respond: respond)\n}\nBasically remove the default parameter from content. This way we can do stuff like this:\nswift\nroute.get(\"/foo/:bar\") { (request, bar: Int) in \u2026 }\nroute.post(\"/foo\", content: Bar.self) { (request, bar) in \u2026 }\nroute.post(\"/foo/:bar\", content: Baz.self) { (request, bar: Int, baz) in \u2026 }\nWhat do you guys think?\n. @Danappelxx any updates?\n. @Danappelxx this is nice! I think we should maybe create a default formatter later that translates the errors into html error pages. But this is good for now!\n. can you please add a test case?\n. Thanks!. LGTM! Waiting for travis to merge. (:. Hm we have some inconsistencies on Linux. grrr \ud83d\ude21\nI'll take a look at it later if you don't beat me to it.. @emarashliev it's still active. Slowly but still active.. this has to happen after the cd hello\n. maybe we can optimize this? not very important now.. but we could add // TODO: so we don't forget\n. we could do:\nswift\nguard !chunk.isEmpty else { ... }\nSwiftlint always nags about this haha.\n. if the buffer is split this would require a merge wouldn't it?\n. this could be Buffer.empty right? Maybe find + replace Buffer() -> Buffer.empty.\n. oh we can delete that! haha it's not needed anymore.\n. libmill didn't check hahaha. But sure.. I'll make that a throwing func and check\n. what's the capacity? 1?\n. do I need to deinitialize too?\n. done\n. cool! that's one thing I'd have to implement differently for Darwin and Linux.\n. I think we can go without from.\n. cut what? haha\n. this what? try advance()?\n. it wasn't MediaTypeRepresentable it was MediaTypeRepresentor. Yeah I couldn't find a good name. We need a name that can reflect the capability of providing a parser and a serializer. I agree Convertible is used consistently with another meaning, but Representable is also used consistently with another meaning.\n. no.. when we read the same amount that's in the buffer.. the buffer should be emptied (the else case)\n. I'll try it! (:\n. I'll try it too. (:\n. Changed to:\nswift\nif read < buffer.count {\n  buffer = buffer.subdata(in: read..<buffer.count)\n} else {\n  buffer = Buffer.empty\n}\n. Yeah, I didn't like its length. What do you mean a Middleware namespace? A new module?\n. If I make it lazy I have to make the functions that use mutating, and that's not nice. Instead I just made it a regular constant and assigned it at init.\n. Because people should take a conscious decision about the deadline. Maybe some places we could add the default, but I don't know. The reason sometimes the tests were hanging is that some operation fails but never returns because the deadline was set to .never. Deadlines are important so we shouldn't make it easy for people to just ignore them. However if we do add defaults again they shouldn't be .never they should be sensible defaults for that particular use case.\n. Of course we will add doc comments to all APIs explaining that deadlines are absolute, and because of that they need the fromNow(). The reason they're absolute is (quoting libmill):\n\nOne thing to note is that libmill uses deadlines rather than more conventional timeouts. In other words, you specify the time instant when you want the operation to finish rather than maximum time it should take to run.\nThe advantage of deadlines over timeouts is that a single deadline can be reused in many subsequent function calls without having to worry about readjusting its value to account for time already elapsed since the deadline was created.\n\nAnother important thing to notice is that deadlines are most of the times timeout parameters in which you create a deadline and then reuse that deadline across all the sub-operations. So the call site most of the times doesn't even use 1.second.fromNow() that's mostly used in tests. Actually the tests are being stupid not to reuse the same deadline. I'll fix that.\n. actually the stdlib recommends we use String(describing: body.count). I think string interpolation is slower and I'd think body.count.description should be a bit faster than String(describing: body.count) since we're calling the property directly but that might be pure conjecture haha.\n. swift\n    /// A textual representation of this instance.\n    ///\n    /// Instead of accessing this property directly, convert an instance of any\n    /// type to a string by using the `String(describing:)` initializer. For\n    /// example:\n    ///\n    ///     struct Point: CustomStringConvertible {\n    ///         let x: Int, y: Int\n    ///\n    ///         var description: String {\n    ///             return \"(\\(x), \\(y))\"\n    ///         }\n    ///     }\n    ///\n    ///     let p = Point(x: 21, y: 30)\n    ///     let s = String(describing: p)\n    ///     print(s)\n    ///     // Prints \"(21, 30)\"\n    ///\n    /// The conversion of `p` to a string in the assignment to `s` uses the\n    /// `Point` type's `description` property.\n    public var description: String { get }\n. As much as I love filter, map, reduce and friends @Danappelxx mentioned that they aren't as performant as simple for in loops \ud83d\ude1e.\n. maybe we should expose this as a configuration? could be done later. maybe add a // Todo:?\n. Actually we bufferSize already here.\n. not very fond of this force cast, but we can live with it. generics would ruin perf.\n. can't we just call bytes.makeIterator()?\n. Is this initializer is required by RandomAccessCollection? no, right? why do we need this if we have the same initializer without labels above?\n. Maybe append would be a tiny bit faster? I think += calls append under the covers.\n. append here too?\n. append?\n. append?\n. why not return a slice here? sometimes you don't need a copy. maybe its better to leave the decision to the calling site.\n. Slice?\n. Don't think we need this as mentioned above.\n. maybe use suffix() here?\n. That's totally random. Should be bufferSize with 4k like Server\n. I think this whole code could be:\n``` swift\n        do {\n            // TODO: Add deadline to serializer\n            try serializer.serialize(request)\n        while !connection.closed {\n            let chunk = try connection.read(upTo: 16384, deadline: requestDeadline)\n            try parser.parse(chunk) { message in\n                let response = message as! Response\n\n                if let upgrade = request.upgradeConnection {\n                    try upgrade(response, connection)\n                }\n\n                if response.isError || !keepAlive {\n                    self.connection = nil\n                }\n\n                return response\n            }\n        }\n    } catch let error as StreamError {\n        self.connection = nil\n        throw error\n    }\n\n``\n. I think it can besuffix(). this could be done withprefix().append(contentsOf:)?\n. I think I preferMessageParserErrorinstead ofMessageParser.Error` to keep consistency with everything else. It would be just changing from:\nswift\nclass MessageParser {\n    typealias Error = http_errno\n}\nto:\nswift\ntypealias MessageParserError = http_errno\nTo clarify, the reason we prefer to put the errors outside of the type is because generic types don't allow nested types. So for consistency we always declare the error outside the type.\n. Also a style nit. Let's always add a whitespace before the colon to follow the standard library style.\nswift\nextension MessageParserError : Error { ... }\n                             ^\n. Style nit. Let's always add a whitespace before the colon on type conformances to follow the standard library style.\nswift\npublic class MessageParse : Parser { ... }\n                          ^\n. We should probably have a linter to automatically fix style. But unfortunately Swiftlint is not powerful enough. :( \n. I think these should be added to Buffer. We should probably wait for #162 before merging this one and then move these or some of these there.\n. style nit CloseCode : Equatable\n. use suffix()\n. use suffix()\n. using suffix() and prefix()\n. I would rename idx to index.\n. use Bytes instead of [UInt8].\n. let's find a better name for tmpMessage?\n. Why do we need foundation? base 64? We can just import the struct or class we need instead of all Foundation. Actually this wouldn't matter much since we're not using @_exported.\n. style nit.\nswift\nWebSocketError : Error { ... }\n. make 4096 a constant called bufferSize.\n. nit WebSocketTests : XCTestCase\n. add a convenience init that takes a String.\n. enum ClientError : Error\n. remove whispace before the coma.\nswift\nguard let scheme = url.scheme, scheme == \"ws\" || scheme == \"wss\" else { .. }\n. WebSocketClientTests : XCTestCase\n. remove this\n. I don't think we should do any hacks until SwifPM is fixed. \n. also make it final.\n. I think this one be String(cString: buffer).\n. The signature could be:\nswift\nstatic func error(from result: Int32, preg: inout regex_t) -> RegexError\nand then that copy:\nswift\nvar preg = preg\nwouldn't be needed anymore.\n. I think we can rename RegexOptions to just Options.\n. These have to start with lowercase letters:\nswift\nfirstCharacterNotAtBeginningOfLine\nlastCharacterNotAtEndOfLine\n. this is better expressed with a guard\nswift\nguard result == 0 else {\n    throw RegexError.error(from: result, preg: preg)\n}\n. If you change the signature of error(from:preg:) it will be:\nswift\nguard result == 0 else {\n    throw RegexError.error(from: result, preg: &preg)\n}\n. swift\nguard result == 0 else {\n    return false\n}\n. swift\nguard result == 0 else {\n    break\n}\n. swift\nguard regexMatches[0].rm_eo != regexMatches[0].rm_so else {\n    break\n}\n. ``` swift\nguard !remainderString.isEmpty else {\n    break\n}\nstring = remainderString\n``\n. guard\n. guard\n. It's usually more performant to useString(cString:)see if you can use it.\n.matchesit's used as verb here like \"a matches b\". So theinlabel makesmatcheslook like a noun like \"the regex matches found in the string\", and that's not what we mean. So we can remove thein` label. \n. hahahahaha awesome! Paulo loves \ud83c\udf7b!\n. let's move around the parameters so it reads better.\nswift\npublic func replace(with template: String, in string: String, options: MatchOptions = []) -> String\n. can you show me usage of this? \ud83d\ude0a \n. Is this meant to be used in other places inside POSIX? If not, marking it private could help the optimizer.\n. hahahah awesome!\n. String(describing:) will call the description property in CustomStringConvertible. I think you can just remove the describing: label and use the cast style initializer String(thing). This happens in other places too.\n. It sucks that literals can't throw maybe we can add this but put a giant warning on the docs?\n. Was this the place you were using Foundation? I can't find it anymore, but the Foundation import is still up there.\n. You mentioned unsafe bit cast in the other review. If it's between Int8 and UInt8 there's no problem. But if you have a pointer you can just use withMemoryRebound or assuminMemoryBound depending on what kind of pointer you have. This way you can use the faster String(cString:). Having said that I think we can leave optimizations for another PR as long as we have correctness in this one. \ud83d\ude0a \n. I think we can remove the pattern label. It's pretty obvious the String is the pattern.\n. Just had an idea. What do you think about taking the public methods out of the Regex type and move them to a String extension receiving the Regex type as a parameter? This way the call site would become like this:\nswift\nlet regex = try Regex(\"hello\")\n\"hello\".matches(regex) // true\nswift\nlet regex = try Regex(\"(hello) (world)\")\n\"hello world\".groupsMatching(regex) // [\"hello\", \"world\"]\nswift\nlet regex = try Regex(\"world\")\n\"hello world\".replace(regex, with: \"zewo\") // \"hello zewo\"\n. nice catch!\n. use something like this?\nhttps://github.com/Zewo/Zewo/blob/master/Modules/POSIX/Sources/POSIX/Environment.swift#L54\n. this could be final, couldn't it?. ",
    "davidask": "Alright, great. I can confirm that the CocoaPods way works well. Thanks!\n. Adding SQL to the Zewo repo, or the org?\n. ",
    "Danappelxx": "Thanks!\n. This is happening because you're using an outdated toolchain. Unfortunately due to some bugs and Swift backwards incompatibility you have to use exactly the February 8 development snapshot, which you can download (direct link) here.\nLet me know if this issue if/when this issue is resolved.\n. Yes, this is because in Swift 3, the typealias keyword for associated types in protocols was replaced with the associatedType keyword. Since we want to support the latest version, we chose to use associatedType instead. Unfortunately this does mean that you have to update your snapshot to at least February 8 (link was given in my previous comment), which is a good idea anyway since you want to take advantage of all the new features and bug fixes that updating your version brings :).\n. Done in 772df45912b36024af29b855f6ee0891bb1a8d95 :)\n. LGTM (though I would squash the commits). @paulofaria\n. Thanks!\n. Turns out this was actually not a bug... The code I was using to trigger it had its own issues. I wrote a test in Zewo/Router just in case so this issue can be closed now.\n. While this is obviously not going to fix the memory leak, I would still like to note that the Client should be initialized outside of the every, and only .get should be called inside it.\n. Correct me if I'm wrong, but wasn't this confirmed to be the coroutine stack increasing its size (and not an actual memory leak)?\n. I think RecoveryMiddleware would be fine if we made all of our modules throw errors instead of simply returning a response with a bad status.\nHowever, considering how vital error handling is, I think that RecoveryMiddleware should add an extension to RouterBuilder so that one can call the method route.error as I proposed in this comment.\n. Issue has not been resolved yet.\n. Well, FileStream is still broken (and hence HTTPFile), so that needs to be fixed. The workaround that I suggested to @donut was to recreate HTTPFile but use File instead of FileStream, which is not a good overall solution.\n. Sorry, I meant that we haven't fixed it yet (hence why this issue should remain open).\n. Hello! Which version of Zewo are you trying to use? 0.5 uses the 04-12 snapshot, while 0.3 uses the 02-08 snapshot. 0.5 just came out recently so we haven't updated our docs yet (but that's happening soon!).\n. Better now I think?\n. Will be fixed once this pr is merged (tested with 500kb).\n. Good now I hope?\n. Should be fixed now (thanks to you)\n. For now the search path workaround is fine, though it relies on the c libraries being built under .build/debug already. I added a note about this to the readme, hopefully this gets resolved one way or another on the SPM side.\nThanks @mtso for bringing this back up :)\n. I think this was resolved with https://github.com/VeniceX/Venice/commit/a3794f9d159a982d991e389145568fe8f6bfac17\n. Any specific examples? I think its better for the server to throw than to silently fail in the logs.\n. That happens because the error is not handled at the top level. If you do something like\nswift\ndo {\n    try Server(app).start()\n} catch {\n    print(error)\n}\nThen output becomes Address already in use, which is what I assume you are expecting.\nWe shouldn't change this behavior. Error are errors and when they are thrown at the top level, the program exits with a non-zero return code. I think that is correct.\n. Great idea! Once we resolve the swiftenv issue we'll work on that :)\n. @Lidbetter There are a number of issues with the previews. We're probably going to adopt the next development snapshot that comes out (after 06/20), though right now we're busy with Quark :)\n. @czechboy0 could you check off the repositories which you updated? Thanks!\n. This is not the workflow we're going to use. Instead, we're going to work with a monolith at zewo/flux and update from there.\n. Clone of #101\n. Ok, this is no longer necessary for 05-09 - the current instructions in the README should be correct. We accidentally pushed a tag that works on the latest snapshot but not on 05-09, but its now been shifted to the next minor. Sorry for the trouble!\n. Thanks!\n. Great!\n. Looks like it's back...\n. Could you resubmit your pr's on Zewo/Zewo please? The idea is that you do all the development in one place and push out the changes to the other repositories. For more information see here.\n. Done :)\n. Just adding it as a subrepo on zewo/zewo. \n. Looks good from afar! Could you add some tests and doc comments (just method-level stuff, like here) to make it easier to understand how this works? What's ContextualMapper for?\n. Circle will work if you update Scripts/Travis/install.sh from master :)\n. Circle is failing because there's an outdated swift install script on your\nbranch. Master has an updated one, so if you replace yours with it the\nbuild should pass.\nOn Mon, Sep 26, 2016 at 8:21 AM Oleg Dreyman notifications@github.com\nwrote:\n\n@Danappelxx https://github.com/Danappelxx sorry, I don't understand\nwhat you mean :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Zewo/Zewo/pull/140#issuecomment-249602017, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADI4c3-hMYDl-72ro-zfwlCo840uwsQBks5qt-LegaJpZM4J_7JW\n.\n\nDan Appel\n. #157 \n. Hahaha, I've done this sort of thing a few times now so the little typos really jump out at me \ud83d\ude03 \n. Excellent!\n. Nice catch - let me look into why travis is failing.\n. Failures are definitely unrelated! Thanks for the pr :)\n. Of course! Thanks for the pull request :)\n. Excellent! I'll review this asap \ud83d\udc4d \n. I'll fix the issues I noted. Thanks for the pr :)\n. Thanks for the review! Once CI passes I'll merge.\n. A few minor things - overall looks great!\n. Pretty straightforward and tests pass. Merging\n. Btw CI doesn't pass because \n- sql and postgresql don't have their dependencies set in package.swift\n- clibpq is not a dependency\n- swift build is not invoked with extra include arguments\n. Awesome! Just one more thing - could you write a unit test that ensures the formatter spits out the right string? I believe what you say about the unnecessary separators but I'm worried that it might be different on Linux for whatever reason, etc.\n. If you use @testable import you should be able to access the fileprivate property. If this does not work, maybe make the formatter public? That could provide other benefits (user customization) anyway. \n\nI agree that you should use several constant dates with locales and just plug them into the formatter.\n. Interesting... so what you're saying is that removing the z will fix it? Can you try committing that change? If it fixes CI, we can happily merge :)\n. Oh, so removing Z removes the time zone? That's a shame... @paulofaria @robertjpayne what do you think is the right thing to do here?\n. Yes, please do submit a pull request! Looks like we broke it during the update to Swift 3.\n. Just noticed the PR you submitted - awesome! Could you submit it to this repository on the websocket branch? That's how we do our development.\n. Test failures unrelated. Merging, pushing, and tagging!\n. Can you fix tests? Looks like a foundation import is missing.\n. Tests don't seem to pass on linux\n. Added\n. Related to #195.\nThanks for the bug report. We're already tracking this and hope to resolve it soon. For now, you can implement init(map:) manually.\n. Oh, this is in a non-venice environment, I didn't see that initially. This changes things @bradhilton\n. Hmm thats logically ambiguous too, actually. Is bar supposed to be from the path parameters or from the request body? We need some way to distinguish this.\ncc @paulofaria \n. Thanks for reporting it! I found the cause of the issue but unfortunately I haven't come up with a clean fix yet. Basically, sqlParameters need to be correctly ordered which means that valuesByField and predicate parameters all need to have indices. Currently searching for a better solution, will keep you updated.\n@formbound if you have some time, would appreciate some help here :)\n. Solution, as usual, turned out to be hard to find but easy to apply. Fix has been pushed and tagged 0.14.3. Hopefully everything works after running swift build --clean=dist and rebuilding!\nI'll keep this open until you can confirm that its been fixed. I'm a little worried that there may be more to this since it came out of nowhere for you.\n. Reproduced, looking into it now. Thanks for the thorough bug report!\n. Fixed in https://github.com/Zewo/PostgreSQL/commit/c009b1848c1a7e796d10e5be32e88031861f043d, tagged 0.14.1. Try swift build --clean=dist and running the project again!\n. Reminder for self - need to add a check using PQgetisnull\n. Okay, really fixed this time. https://github.com/Zewo/PostgreSQL/commit/a3dbab5f63e834d111fa0ec5f6a33b5797abcfa8 @0.14.3\n. The one thing I'm not quite happy with is that the optional subscripts mean that you either have to use ? or .map to use the other getters. This is fine for optional getters .int, but is less nice for throwing getters as their convenience is exactly that they are not optional. Perhaps we could move as<Type> onto MapFallibleRepresentable?\n. Also, @dreymonde how would Mapper fit into all of this? I commented it out for now because there were conflicts with asArray(). Perhaps Mapper's requirement of asArray could throw instead of returning nil? Or maybe make it a computed property array? That way we don't have to add any conflicting methods to conform to it.\n. I really want to avoid type ambiguity as much as possible. Consider the following example\nswift\nroute.post { request in\n    let username = try request.content[\"username\"].asString()\n    let username = try request.content[\"username\"].get() as String\n    // ...\n}\nNotice how you're repeating type information either way. Furthermore, the first example is much more obvious to a beginner. \nReally, the only time when you don't need to hint the type is when you're working in an initializer. In those cases, you can use asInferred(), or better yet Mapper which is exactly meant for that sort of stuff.\n\nAnd my point is that there should be no generic methods at all \u2014 asInferred is tricky and way too subtle, as for me.\n\nCould you expand on this? I lowered it to one generic method, which we need either way to support MapInitializable. What is tricky and/or subtle about it (except for the perhaps inaccurate naming)?\n. I just pushed a commit which changes\nswift\ntry map[\"string\"].map.asString()\nto\nswift\nmap[\"string\"].asString()\nthe following is still legal, though it's only there because optionals are built into the language\nswift\nmap[\"string\"]?.asString()\nmap[\"string\"]?.string\n@dreymonde:\n\nI\u2019m not saying that it\u2019s very important, it\u2019s just my opinion that asInt/asString/etc. naming pattern is a bit unswifty, and \u00abtype-hidden\u00bb thing is more consistent with new API design guidelines.\n\nI agree with this, and when the type is known you should use a type inference method. asInferred is a bad name, I'm completely open to better ones. However, I would prefer the names to be consistent. Any ideas? get, getString?\n\nAs I understand, asInferred works with MapInitializable. That\u2019s why it\u2019s tricky. Swift insists that this type of conversion should be done via initializers.\n\nAh, this is a good point. I'm not really sure what to do about it, because I would argue it's expected behavior for nested maps. Using the initializer is still possible - both of these are currently legal:\nswift\nfunc headers(from map: Map) throws -> Headers {\n    return try map[\"headers\"].asInferred()\n}\nfunc headers(from map: Map) throws -> Headers {\n    return try Headers(map: map[\"headers\"].map)\n}\nActually, that example shows another spot that we're missing with the optional subscripts.... There are a few reasons why abandoning libmill in favor of Safe is not 1 for 1 trade and as such not a great idea. I'll explain more as soon as possible, but don't have the time right now.\n. Hi! As shown in the PostgreSQL readme, you need to add some flags swift build -Xcc -I/usr/local/include -Xlinker -L/usr/local/lib/. We're working on fixing this for the next release :). Maybe we could make this 2016-present?\n. you can use .byteSwapped instead of _OSSwapInt16\n. Maybe use something like rawAddress rather than veniceAddress?\n. maybe this should be named address instead of ip? let address = IP.address(port:) makes more sense than let address = IP.ip(port:).\n. should probably be checking rc \ud83d\ude1b \n. use ipv6.deallocate(capacity:) instead of free\n. (this applies to the rest of the free calls here)\n. capacity is 1 in this case (you would have more than one if you have a list).\nDeinitialize just sets the memory to zeros iirc, so no you don't need to.\n. well maybe we shouldn't check either then. people behind libmill know what they're doing haha\n. There are two copies going on here (one for the array initializer, one for the buffer initializer) - not ideal.\nMaybe use something like this?\nself = string.utf8CString.withUnsafeBufferPointer { buffer in\n    return buffer.baseAddress!.withMemoryRebound(to: UInt8.self, capacity: buffer.count) { ptr in\n        return Buffer(bytes: UnsafeBufferPointer(start: ptr, count: buffer.count))\n    }\n}\n. should we do bound checks here? \n. still need optimization? how so?\n. I'm not sure if this renaming is necessary, but I'm not against it\n. reminder to self: run codebase through a whitespace fixer\n. You missed a few spots here \n. style: this may be better written inline (requests.append(Request(...)))\n. I think it may be better to keep this unlabeled (write(_:) instead of write(from:)\n. got some strange indentation here\n. cut\n. cut trailing whitespace\n. is this here on purpose? (if so, could you add a comment explaining what its for)\n. What's the reasoning behind this? MediaTypeRepresentable seems to best reflect the meaning here given that we established convertible to mean initializable + representable.\n. This wouldn't throw an error if the stream was closed manually before it reached the end of the buffer. Shouldn't this just be guard !closed else { throw StreamError.closedStream }? \n. Maybe replace this with a guard let targetBase = targetBuffer.baseAddress else { return 0 }? That way you avoid the force-unwrap on L35.\n. >=?\n. I prefer buffer.startIndex + read over buffer.startIndex.advanced(by: read) but thats just style.\n. Won't buffer.startIndex always be 0? I'm not sure but then this could be better written as just read..<buffer.endIndex\n. I think this test case could really use a few helper functions to clean up all the cruft.\n. Should probably do this before PR is merged\n. This name is ridiculously long. Any ideas on how to shorten it? Maybe make a Middleware namespace?\n. this should be a lazy property since types is constant\n. for type in types where type.mediaType.matches(other: mediaType)\n. actually, just\nswift\nreturn types\n    .filter { $0.mediaType.matches(other: mediaType) }\n    .map { ($0.mediaType, type.parser) }\n. Is this function necessary? Might be best to inline it into a one-liner at the call site (L65)\n. Same thing here (make it lazy)\n. swift\nlazy var mediaTypes: [MediaType] = self.types.map { $0.mediaType }\n. Why the fromNow all over the place? Can't it be injected at the landing site? I'm sure that a lot of people will misuse these APIs (especially since its not documented anywhere).\n. Why the removal of the default .never deadline from all the methods?\n. The import - we already have a public typealias Buffer = DispatchData which acts like an export.\n. yes... it wasn't there before\n. Makes more sense now that I read more closely. Convertible is a little confusing but fine overall.\n. Gotcha\n. A new module would make sense to me. Thoughts?\n. could you use the one that SPM generates? https://github.com/Zewo/Zewo/blob/master/.gitignore\n. Could you replace this with the updated version such as here? A few minor differences\n. Could you update this to 2016?\n. Hmm, we should find a better way to handle this at some point. @paulofaria \n. minor: 13\n. Also Zewo/UDP :)\n. I would just use try instead of try - makes this cleaner and more understandable.\n. zewo-0.13\n. Zewo/UDP\n. I'm more worried about the quadratic complexity of that reduce \ud83d\ude2c \n. cut the filter\n. Lets move this to the readme\n. Response? (we're not guaranteed to parse one)\n. Where did this magical 16384 come from?\n. message as? Response might be better, since its already optional.\n. trailing whitespace\n. style - the <UInt8> there is unnecessary\n. Can we call it MessageParser? There could be a lot of conflicts otherwise.\n. trailing whitespace\n. trailing whitespace\n. I think this could just be read..<inputBuffer.endIndex\n. indentation is all over the place in some files\n. keep the label\n. remove header\n. remove header\n. indentation\n. optimize\n. indentation\n. optimize\n. I believe this appends maskedData count amount of times, which is not what we want\n. we really want append(contentsOf:)\n. optimize this section\n. style\n. optimize\n. nice :)\n. optimize\n. style\n. nice job on this one, by the way\n. Sure, I'll do that in a separate pr though\n. I believe we don't want to export the libc api - just import it locally.\n. Could we also include the day/month/year and locale here? I think that would be useful. Ideal date IMO: 10/06/16 12:42:10.123 GMT-8.\nNote - I'm not sure if DateFormatter supports figuring out whether the month should go before or in-between the day and year (in the US, we have the day in the middle).\nI also think we should use the 24-hour system regardless of the locale, so the code you have now (HH) is good.\n. Can we uncomment this?\n. I think its slightly better style to use for scalar in source.unicodeScalars here instead\n. Cut this?\n. It would we nice if we could avoid this code duplication. Is this extension necessary, since we can just do UnicodeScalars.whitespaceAndNewline.utf8()?\n. These should be let, not var\n. I like to use first(where: {...}) (with the label and parenthesis) since it adds more clarity.\n. Is this implementation taken from the standard library? Can we get a couple unit tests for this method?\n. It's a static property - it will be called once at the beginning of the program and then held constant.\n. We used to have that but changed it for consistency. It's not always possible to have nested errors (protocols, generics) and it also improves discoverability of the error (StringError can be discovered in Xcode via autocomplete with just error). \n. Nice! Did not know about this feature - will add it.\n. ",
    "codegefluester": "+1, running into the same issue on Ubuntu 14.04 with the latest snapshot of Swift (December 18th)\n. @BenchR267 Thanks for that, did you run into the same error after switching to a \"local\" directory in the VM?\n/home/vagrant/projects/epoch-test/Packages/HTTP-0.1.2/Sources/Response+File.swift:25:8: error: missing required module 'CURIParser'\nimport Core\n. Just tried again in a fresh folder which is not a shared VM folder, Package.swift is the same basic one as in the readme. Maybe I am just doing something wrong or its another bug in the newest Swift snapshot from Friday. Thanks for the help!\n```\nimport PackageDescription\nlet package = Package(\n    dependencies: [\n        .Package(url: \"https://github.com/Zewo/Epoch.git\", majorVersion: 0, minor: 1)\n    ]\n)\n```\n. For me it worked after going back to the Swift snapshot of the 10th of December, the current one did not work for me.\n. ",
    "BenchR267": "I had the same problem. It's an error the current version of SPM has, there is a bug ticket here: https://bugs.swift.org/browse/SR-166 . Please comment there that you have the same problem so that the priority can be increased. Also a fix: your project directory might be over $HOME so move it there or in a subdirectory of it.\n. @codegefluester no, in my case everything is working fine. Could you please delete your Packages/ and .build/ directory to make a completely clean build? If that is not working, please show me your Package.swift\n. You are right, it was/is a bug in SPM. @paulofaria fixed it. In my example it is working in an ubuntu vagrant with the newest swift snapshot. Could you please try it?\nrm -rf Packages/\nrm -rf .build/\nswift build\nIt should work now as expected. The problem is that every package that uses the C-library needs to link it as a dependency.\n. Every contribution is a great contribution I learned :D\n. ",
    "ReadmeCritic": "Can you fix this as well\nhttps://github.com/Zewo/HTTPMiddleware redirects to \nhttps://github.com/Zewo/Middleware \n. ",
    "kiokumicu": "Thanks!\n. I'm using Debian jessie and swift-2.2-SNAPSHOT-2016-01-06-a-ubuntu15.10\nWith previous version (Epoch Server) work fine.\n. Thanks!\n. I solve problem, it was error in init code\nThat's correct code\n```\nstruct ResponseDescription: Mappable {\n  let message: String\n  init(mapper: Mapper) throws {\n    message = try mapper.map(from: \"message\")\n  }\n}\nstruct SlidResponse: Mappable {\n  let state: Double\n  let description: ResponseDescription\n  init(mapper: Mapper) throws {\n    state = try mapper.map(from: \"state\")\n    description = try mapper.map(from: \"desc\")\n  }\n}\n```\n. ",
    "lexrus": "You can kill these processes with:\n``` bash\nkill $(lsof -t -i:8080)\nIf you're using fish-shell\nkill (lsof -t -i:8080)\n```\n. ",
    "FreeMasen": "file created via template\n. Submitted pull requests for:\nBase64\nCLibq\nCLibpq-OSX\nCLibXML2\nCOpenSSL\nCOpenSSL-OSX\nCZeroMQ\ngenerator-zewo\nHTTPJSON\nOpenSSL\nPostgreSQL\nREADMEGenerator\nSideburns\nSwift-Command-Line-Application-Template\n. ",
    "rabc": "Yeah, I thought about it too. Most of the Redis clients ( http://redis.io/clients ) use something else, not just Redis name, so I wanted to keep this \"pattern\" and put something else in the name.\n. No, I've changed it to Redis: https://github.com/rabc/swift-redis/\nI'm waiting for Redis people change in their clients.json, but we can close this PR and I'll send another.\n. ",
    "Togira": "https://github.com/Zewo/Zewo/blob/master/CODEOFDONDUCT.md gives me a 404 error.\n. ",
    "antonmes": "done.\n. @FreeMasen awesome, thank you! merged :metal:\n. @tomaspinho \nHi! Nice to see someone interested in zewo performance!\nWhich version did you use? we have some performance issues with 0.4, trying to figure out it cause.\nIf you interested, i did some benchmarks as well. It's not very usefull for comparing swift frameworks,\nbecause libdispatch is not fully implemented/supported on linux yet, but we can compare to rust/coreclr/node.js\nIt should be mentioned that this benchmark (yours and mine) measuring mostly Swift-VeniceX (libmill) bridge, not server-side swift in general, and result would be very different with AnnecyX (libdispatch)\nLast but not least,\nwe moved from pre-fork model to port reusing, so for precise measuring we need to write:\ntry Server(reusePort: true, responder: router).start()\nand run 4 processes for your 4 vCPUs configuration, because even if node is single threaded by default, rust and .net will eat all available cpu resources.\n. note: don't forget that libmill wasn't updated to work with pipes and FIFO files\n. and doesn't have filesize function\n. ",
    "scottbyrns": "Progress towards completion:\nhttps://github.com/scottbyrns/ConnectionPool\n. @donut I spent a couple hours trying to track down the memory leak and found that its caused by the coroutine cache. As this executes it creates more coroutines that are cached. It will stop growing in memory consumption once it hits 64 cached coroutines. I ran your example in a while true loop without the coroutines and never saw an increase in memory consumption.\n. ",
    "donut": "No, that was for JSONParse().parse(). Maybe it applies to this, but in the case of JSONParse it was a much smaller memory increase every time around. Also, I've let it run for hours and seen the memory usage get into the hundreds of megs, approaching 1GB. According to the issue, the coroutine cache hits a limit at 64 caches. This definitely increases beyond that many times.\n. Looks like this may have been fixed with https://github.com/Zewo/OpenSSL/pull/15\n. That pull request did fix a large portion of the leak, but I'm still seeing a continuous increase in memory. I updated the test project to work with 05-03-a and 0.7.X version of Venice and HTTPSClient and let it run for about 3.5 hours. It started with 3.3 MB usage and gradually increased to 9.9 MB usage.\n``` swift\nimport HTTPSClient\nimport Venice\nlet YouTubeAPIKey = \"\"\nlet id = \"FLTNU6m2Mk\"\nlet path = \"/youtube/v3/videos?part=snippet,statistics\"\n         + \"&id=(id)&key=(YouTubeAPIKey)\"\nevery(10.seconds) { _ in\n  var response: Response\n  do {\n    let client = try Client(uri: \"https://www.googleapis.com:443\")\n    response = try client.get(path)\n    print(\"Whoo hoo\")\n  } catch {\n    print(\"Failed retreiving stats from YouTube API: (error)\")\n  }\n}\nlet infiniteCaffeine = Channel()\ninfiniteCaffeine.receive()\n``\n. So, letting this run for longer it seems that it's not that bad. I left it running for around 10 minutes and it only went up to 2.9 MB usage (Activity Monitor). Probably should still be looked into by someone more knowledgeable about these things than me.\n. This all sounds good to me. As @Danappelxx said,RecoverMiddlewarewith hisroute.error{}suggestion sounds great. Will this limit the errors that can be returned by modules likeHTTPFile? Does it make sense that it would only return errors that fit into HTTP status codes? Should there be flexibility to give more information? I'm saying this, but I'm having trouble coming up with examples of when that might be necessary.\n. This seems to happen as file size increases.\n. @Danappelxx was able to help me out. It looks like the issue lies within the response being aFileStream. Replacing theFileStreambody withfile.read()` resolves the issue.\nConversation on slack\n. Still getting this with HTTPSClient 0.5.2. Originally found the issue with 0.5.0.\n. Tried this with @tomohisa's fork which apparently fixes some issues but it failed in the same way.\n. That is the expected result when key is invalid. Also, the id values are likely invalid. \n. That worked both with and without a valid key.\n. @paulofaria Is there a reason you're holding off tagging VeniceX/TCP after the merge?\n. After the merge, everything is working as expected. Marking this as closed.\n. It's been unclear to me on what target that needs to be added. Do I need to go through each dependency that depends on a  C library and add this or does it work to add it to the main project target?\n. So, while adding this to the project seems to work for most cases, I ended up having to add it directly to my TCP sub-dependency target as well.\nPackage.swift:\n``` swift\nimport PackageDescription\nlet package = Package(\n    name: \"Example\",\n    dependencies: [\n        .Package(url: \"https://github.com/VeniceX/File.git\",\n                 majorVersion: 0, minor: 7),\n        .Package(url: \"https://github.com/VeniceX/HTTPSClient.git\",\n                 majorVersion: 0, minor: 7),\n        .Package(url: \"https://github.com/Zewo/Base64.git\",\n                 majorVersion: 0, minor: 8),\n        .Package(url: \"https://github.com/Zewo/JSON.git\",\n                 majorVersion: 0, minor: 9),\n        .Package(url: \"https://github.com/Zewo/Log.git\",\n                 majorVersion: 0, minor: 8),\n        .Package(url: \"https://github.com/Zewo/Mapper.git\",\n                 majorVersion: 0, minor: 7),\n        .Package(url: \"https://github.com/Zewo/OpenSSL.git\",\n                 majorVersion: 0, minor: 7)\n    ]\n)\n```\n. This pull request has been seeing regular updates, at least.. ",
    "tomaspinho": "@antonmes \nwow, those are some whopping benchmark numbers!\nI used the stable version directly from the deb repo: Version: 0.2.3\n. ",
    "tanner0101": "If you want to make some S4 compatible Middleware or Router, etc. You'd have to throw a common error or else something like Error.badRequest would end up going to a catch all in the receiving application and probably cause a 500.\n. ",
    "tomohisa": "@donut looks like its different issue, I see many issues happened in openssl. I'm gonna try to debug it little bit\n. https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=1,2&key=REDACTED\nurl replies in my safari.\n{\n \"error\": {\n  \"errors\": [\n   {\n    \"domain\": \"usageLimits\",\n    \"reason\": \"keyInvalid\",\n    \"message\": \"Bad Request\"\n   }\n  ],\n  \"code\": 400,\n  \"message\": \"Bad Request\"\n }\n}\nIs this what you want to get?\nlooks like c library libmill reply this I still not found why it return Connection reset by peer error\n. I see. I don't have keys so I can't test fully but yeah, still crash before I get that result\n. Hey I have progress.  I put print everywhere it goes and after \nswift\ndecriptedData += try ssl.read()\nprint(\"\\(#file)(\\(#line)):\\(#function) decriptedData:\\(decriptedData)\")\nit print following.\nSince its already return bad request, it should close connection, but eventually it doesn't. And trying to receive more and it  returns connection reset by peer. so we need to write down code to close and return request.\n`````` .build/debug/HTTPClient_issue\n0.5.0/Sources/OpenSSL/ClientStream.swift(94):receive(upTo:timingOut:) decriptedData:HTTP/1.1 400 Bad Request\nVary: X-Origin\nContent-Type: application/json; charset=UTF-8\nDate: Wed, 27 Apr 2016 16:57:32 GMT\nExpires: Wed, 27 Apr 2016 16:57:32 GMT\nCache-Control: private, max-age=0\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block\nServer: GSE\nAlternate-Protocol: 443:quic\nAlt-Svc: quic=\":443\"; ma=2592000; v=\"32,31,30,29,28,27,26,25\"\nAccept-Ranges: none\nVary: Origin,Accept-Encoding\nConnection: close\n{\n \"error\": {\n  \"errors\": [\n   {\n    \"domain\": \"usageLimits\",\n    \"reason\": \"keyInvalid\",\n    \"message\": \"Bad Request\"\n   }\n  ],\n  \"code\": 400,\n  \"message\": \"Bad Request\"\n }\n}``\n``````\n. This is workaround project. It just works with my forks (but only really changed TCP)\n(HTTPSClient and TCPSSL changed only for reaching dependency to TCP)\nhttps://www.dropbox.com/s/xeom1s4a0vgffnv/HTTPSClient_issue_fixed.zip?dl=0\n@donut this is temporary workaround.make build run` on folder \nMaybe you can put your key and id and test it.\nReason\nTCP return reset after finishing SSL request\nhttp://stackoverflow.com/questions/2974021/what-does-econnreset-mean-in-the-context-of-an-af-local-socket\nWorkaround\ndo {\n            try ensureLastOperationSucceeded()\n          } catch SystemError.connectionResetByPeer {\n            throw StreamError.closedStream(data:Data())\n          }\nhttps://github.com/tomohisa/TCP/blob/46a45992c60f7a8c5b264a9dcabe7ddbef918934/Source/TCPConnection.swift#L92\n@paulofaria I just assumed if server return connection reset, it means closed connection. It helps to read whole data without exception above. Do you think this workaround is good as framework? or we need more condition to determine if it is really closed (which I think it might be difficult)\n. Cool let me try with what you said\n. Merged fix. for now OpenSSL does not specify cipher_list\n. ",
    "iamcam": "Thanks for the quick response! Ah, that would make sense. It looks like I was still using 0.3. Updating to 0.5 and following the listed swiftenv versions works great.\n. ",
    "czechboy0": "Fixed by https://github.com/VeniceX/HTTPSClient/pull/10\n. Ok, I created a self-contained (no external installation required) gzip library: https://github.com/czechboy0/gzip, which can work with either NSData or C7.Data, so let's integrate it into HTTP(S)Client and Server (but Client is probably more important, as Server can run behind a proxy which takes care of gzipping everything).\n. Another update: Now gzip has a GzipStream, which can be plugged into the S4.Body, meaning you can read/uncompress the body stream seamlessly. https://github.com/Zewo/gzip#usage\nAll that's left to do is find the right place in the stack to add this. (HTTPSClient/HTTPClient/...) or create a HTTPMiddleware repo where we can add this step so that it doesn't need to be duplicated in all 4 projects. @paulofaria thoughts?\n. Looking at that list, I'm sure we could script most of the work described above. Maybe automatically: 1. switch to master, 2. pull, 3. make sure clean git status, 4. create and switch to branch 3.0-preview-1, 5. switch .swift-version, 6. swift build --clean=dist, 7. swift build, 8. swift test, then human will check no warnings, errors, test failures and finish each repo up? There needs to be a better way going forward then doing all these manually one by one :) \n. @Danappelxx Done, I also checked off the ones that didn't need any update to work with 07-25 (so no new release was made).\nI didn't change the badges, but I think the readme changes should be made in bulk with a script, it's easy to forget one (badge and dependency line for Package.swift).\n. ",
    "drewag": "If I am using something incorrectly, please let me know. If not, I would be happy to submit a pull request to fix this problem.\n. ",
    "vovasty": "I have crash on linux [probably] due to outdated sources\nhttps://github.com/sustrik/libmill/issues/143\n. JSON skips nil, and this is wrong.\n```swift\n    func testEncodeObject() throws {\n        let user = User(string: \"test\", int: 1, bool: true, double: 0.1, null: nil)\n    let json = try JSON(from: user)\n\n    XCTAssert(json.isObject)\n    XCTAssertEqual(try json.decodeIfPresent(String.self, forKey: \"string\"), \"test\")\n    XCTAssertEqual(try json.decodeIfPresent(Int.self, forKey: \"int\"), 1)\n    XCTAssertEqual(try json.decodeIfPresent(Bool.self, forKey: \"bool\"), true)\n    XCTAssertEqual(try json.decodeIfPresent(Bool.self, forKey: \"null\"), nil)\n}\n\n```. duplicate to #251. ",
    "frogcjn": "@paulofaria Thanks!\n. ",
    "JohnCoates": "Looking further into the issue, I believe the error stems from the modulemap.\nCurrently it's:\nmodule CURIParser {\n    header \"uri_parser.h\"\n    link \"CURIParser\"\n    export *\n}\nI believe that link \"CURIParser\" is not supposed to be there. As I understand it, that's for linking against installed libraries, and here I believe it's intended to be used self-referentially. Removing it solves this issue.\nI'll be submitting a pull request\n. Expanding on this further, I neglected to test an executable module with this. The URI module built fine, but when linking against an executable there's an error when using swift build.\nI've been trying to make a modulemap that satisfies both swift build and Xcode through swift build -X but have been un-successful. Seems Xcode really doesn't like that directive, and any tutorials or documentation on modulemaps I've looked up consistently lack it.\nI'm seeing that the swift-package-manager project itself uses the link directive. \nIt looks like soon a modulemap will not be needed for Xcode, and currently when omitted one is synthesized automatically when using swift build.  https://bugs.swift.org/browse/SR-1450\nEdit:\nFound others with the same issue: https://github.com/IBM-Swift/Kitura/issues/463\nAdding ${SRCROOT}/.build/debug to Library Search Paths gets it to compile. Good enough workaround until Xcode projects generate correctly.\n. ",
    "mtso": "I followed the \"Getting Started\" instructions that build off of only HTTPServer, Router as dependencies. I then proceeded to run swift package generate-xcodeproj because swift build -X did not work for me in generating an Xcode project with Swift's \"DEVELOPMENT-SNAPSHOT-2016-05-09-a\".\n~~The resulting generated Xcode project did not build correctly until I manually removed the self-referential link in the modulemaps for: CURIParser, CHTTPParser, and CLibvenice.~~\nEdit: Oops, following @JohnCoates edit of adding ${SRCROOT}/.build/debug did the trick.\n. ",
    "Lidbetter": "On July 5th, 2016 preview 2 was released, is that now the intended goal?\n. The screenshot has the main project selected. I will make it clear in text too.\n. ",
    "vi4m": "We can close it now, already fixed.\n. https://github.com/Zewo/HTTP/pull/25\n. yeah, sure.\n. @robertjpayne if you come with better solution, i'm open to replace it with the better. This bug is roadblock to me, because one of the production systems i'm consuming, doesn't set this Headers, and i can't change it. Speaking about HTTP compliance - we should handle it, just well as others (for example python requests library, curl etc). So I really appreciate fixing this bug using this, or alternate solution.\n. I updated the code with your hints @robertjpayne \n. Yeah, I confirm this issue too. . ",
    "bosr": "Work in progress at https://github.com/Zewo/Zewo/pull/168\n. will reopen soon\n. Let's reopen this, as the build on my branch succeeded again (echo just after report bash script) \n. I removed my 'echo' hack as it does not always solve the Travis hanging problem :/\n. rebased\n. That's some serious proofreading, I'm impressed. I'll fix this very soon.  \nThanks\nOn September 26, 2016 at 8:05:27 AM, Dan Appel (notifications@github.com(mailto:notifications@github.com)) wrote:\n\n@Danappelxx requested changes on this pull request.\nJust a few things! None of them are code related - that stuff looks good :)\nIn Modules/UDP/.gitignore(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n@@ -0,0 +1,31 @@ +# Created by https://www.gitignore.io/api/xcode  \n\ncould you use the one that SPM generates? https://github.com/Zewo/Zewo/blob/master/.gitignore\nIn Modules/UDP/.travis.yml(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n@@ -0,0 +1,16 @@ +notifications:  \n\nCould you replace this with the updated version such as here(https://github.com/Zewo/Zewo/blob/master/Modules/Core/.travis.yml)? A few minor differences\nIn Modules/UDP/LICENSE(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n@@ -0,0 +1,21 @@ +The MIT License (MIT) + +Copyright (c) 2015 Zewo  \n\nCould you update this to 2016?\nIn Modules/UDP/Package.swift(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n@@ -0,0 +1,13 @@ +import PackageDescription + +let package = Package( + name: \"UDP\", + dependencies: [ + .Package(url: \"https://github.com/Zewo/POSIX.git\", majorVersion: 0, minor: 13), + .Package(url: \"https://github.com/Zewo/IP.git\", majorVersion: 0, minor: 13), + + + // test-only dependencies (not yet available in swiftpm: SE-0019) + .Package(url: \"https://github.com/Zewo/Venice.git\", majorVersion: 0, minor: 13),  \n\nHmm, we should find a better way to handle this at some point. @paulofaria(https://github.com/paulofaria)\nIn Modules/UDP/README.md(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n\n+[![Swift][swift-badge]][swift-url] +[![Zewo][zewo-badge]][zewo-url] +[![Platform][platform-badge]][platform-url] +[![License][mit-badge]][mit-url] +[![Slack][slack-badge]][slack-url] +[![Travis][travis-badge]][travis-url] + +## Installation + +```swift +import PackageDescription + +let package = Package( + dependencies: [ + .Package(url: \"https://github.com/VeniceX/UDP.git\", majorVersion: 0, minor: 5)  \n\n\nminor: 13\nIn Modules/UDP/README.md(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n\n+[![Swift][swift-badge]][swift-url] +[![Zewo][zewo-badge]][zewo-url] +[![Platform][platform-badge]][platform-url] +[![License][mit-badge]][mit-url] +[![Slack][slack-badge]][slack-url] +[![Travis][travis-badge]][travis-url] + +## Installation + +```swift +import PackageDescription + +let package = Package( + dependencies: [ + .Package(url: \"https://github.com/VeniceX/UDP.git\", majorVersion: 0, minor: 5)  \n\n\nAlso Zewo/UDP :)\nIn Modules/UDP/README.md(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n\ndependencies: [ + .Package(url: \"https://github.com/VeniceX/UDP.git\", majorVersion: 0, minor: 5) + ] +) ++ +## Basic usage + +### Send messages + +Send a message containing \"Hello world\" fromlocalhost:5050tolocalhost:5051+ +swift +import UDP + +let udpSocket = try? UDPSocket(ip: IP(port: 5050))  \n\n\nI would just use try instead of try - makes this cleaner and more understandable.\nIn Modules/UDP/README.md(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n\n+If you need any help you can join our Slack and go to the #help channel. Or you can create a Github issue in our main repository. When stating your issue be sure to add enough details, specify what module is causing the problem and reproduction steps. + +## Community + +[![Slack][slack-image]][slack-url] + +The entire Zewo code base is licensed under MIT. By contributing to Zewo you are contributing to an open and engaged community of brilliant Swift programmers. Join us on Slack to get to know us! + +## License + +This project is released under the MIT license. See LICENSE for details. + +[swift-badge]: https://img.shields.io/badge/Swift-3.0-orange.svg?style=flat +[swift-url]: https://swift.org +[zewo-badge]: https://img.shields.io/badge/Zewo-0.5-FF7565.svg?style=flat  \n\n\nzewo-0.13\nIn Modules/UDP/README.md(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067):\n\n\n+This project is released under the MIT license. See LICENSE for details. + +[swift-badge]: https://img.shields.io/badge/Swift-3.0-orange.svg?style=flat +[swift-url]: https://swift.org +[zewo-badge]: https://img.shields.io/badge/Zewo-0.5-FF7565.svg?style=flat +[zewo-url]: http://zewo.io +[platform-badge]: https://img.shields.io/badge/Platforms-OS%20X%20--%20Linux-lightgray.svg?style=flat +[platform-url]: https://swift.org +[mit-badge]: https://img.shields.io/badge/License-MIT-blue.svg?style=flat +[mit-url]: https://tldrlegal.com/license/mit-license +[slack-image]: http://s13.postimg.org/ybwy92ktf/Slack.png +[slack-badge]: https://zewo-slackin.herokuapp.com/badge.svg +[slack-url]: http://slack.zewo.io +[travis-badge]: https://travis-ci.org/VeniceX/UDP.svg?branch=master +[travis-url]: https://travis-ci.org/VeniceX/UDP  \n\n\nZewo/UDP\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub(https://github.com/Zewo/Zewo/pull/145#pullrequestreview-1478067), or mute the thread(https://github.com/notifications/unsubscribe-auth/AB2NvBELozb6pbc38aUbWAoWgDTWrBdZks5qt2CngaJpZM4KBCwt).\n. All done. \n\nThe tests fail partly because of a time tolerance on Ticker Tests that is too strict. See https://github.com/Zewo/Zewo/pull/160\n. rebased :)\n. I know the tests may fail on Travis for Linux because of TCPTests testSendClosedSocket (maybe we should use another port than 8080 for that test).\n. @Danappelxx , do you think we can merge this? Rebasing on it will help the tests not fail for that silly reason :)\n. rebased on master\n. Ok, i'll begin working on that.\n. @paulofaria I'm ready for the API change you suggest!\n(others are welcome too :))\n. There is a strange thing with xcpretty (https://github.com/supermarin/xcpretty/issues/241) that does not help seeing the tests results for the XCode build part (the swiftpm part passes).\n. @supermarin no worries, thanks for the update!\n. @paulofaria: updated and rebased\nCheers!\n. I will update soon, thanks for the review \ud83d\udc4d \n. Hi, I updated according to the review requests (sorry I could not come back to you any sooner).\nI'll try tonight to see if rebasing does not break it :)\nCheers\n. Just rebased\n. We should probably increase the period (curr 20ms) and time tolerance (curr 10ms) because 20 +/- 10 ms make the macOS tests fail on Travis. I guess the VM is too loaded to respect such short deadlines. We should be good with a 2.5x factor. I'll PR\n. This is the reason why Foundation is used. Should I try to find an alternative?\n. ahah, incredible I missed all those guard statements, especially as I love them.\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. I could easily use String(bytes:encoding:) but not String(cString:) because it needs a CChar and I'd rather avoid an unsafeBitCast. Do you agree?\n. I added a second test regarding your comment on RegexTests :)\n. yep, good idea\n. indeed\n. Yeah, thanks. I thought about this, but I first went for operators (discoverability a bit low anyway in both extensions and operators).\nI'll do it soon\n. Sure!\n. Yep, it's just syntactic sugar for map or closure:\nFor the operators, I intend to adopt the ruby operator syntax =~\ntry (\"hello world\" =~ \"(hello) (world)\") { match in \n    return match.contains(\"wo\") ? match.uppercased() : match  // Result = String\n}\nor \ntry (\"hello world\" =~ \"(hello) world\") { match in\n    print(match)  // Result inferred to be Void\n}\nbut I now think that adding .map does not hurt :)\nBTW, I tried to have this working without the parens but I could not find a good precedence group : the expressions above, when removing the parens, are understood as \"the closure is applied to the 2nd string\", which fails miserably :)\n. oops, thanks\n. Hi, we cannot remove the describing: label, XCode insists that we should use it.\nRegarding the use of Foundation, it is needed by \nguard let replacedString = String(bytes: replacedStringArray, encoding: .utf8) else {\n    break\n}\nI do agree that these optimizations could be postponed to another PR :)\n. ",
    "0xpablo": "Thanks for the suggestion! I completely ignored the Middleware API \ud83d\ude05, I will try it out.\nAbout the AWS client, I'm trying to use some actions of the SNS service, so I'm not planning to write a full client. Still, hit me up if I can be of any help when you start with the client.\n. ",
    "codecov-io": "Current coverage is 80.07% (diff: 48.27%)\n\nMerging #140 into master will decrease coverage by 2.96%\n\ndiff\n@@             master       #140   diff @@\n==========================================\n  Files           182        194     +12   \n  Lines         13602      14878   +1276   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11295      11913    +618   \n- Misses         2307       2965    +658   \n  Partials          0          0\n\nPowered by Codecov. Last update 967b665...bc92d7f\n. ## Current coverage is 70.60% (diff: 66.15%)\nMerging #145 into master will decrease coverage by 0.04%\n\ndiff\n@@             master       #145   diff @@\n==========================================\n  Files           134        136     +2   \n  Lines          7005       7070    +65   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4949       4992    +43   \n- Misses         2056       2078    +22   \n  Partials          0          0\n\nPowered by Codecov. Last update 50c1a13...55e713d\n. ## Current coverage is 70.93% (diff: 100%)\nMerging #146 into master will not change coverage\n\ndiff\n@@             master       #146   diff @@\n==========================================\n  Files           130        130          \n  Lines          6650       6650          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4717       4717          \n  Misses         1933       1933          \n  Partials          0          0\n\nPowered by Codecov. Last update 1c9941d...188565a\n. ## Current coverage is 71.42% (diff: 100%)\nMerging #147 into master will increase coverage by 0.05%\n\ndiff\n@@             master       #147   diff @@\n==========================================\n  Files           131        131          \n  Lines          6720       6720          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4796       4800     +4   \n+ Misses         1924       1920     -4   \n  Partials          0          0\n\nPowered by Codecov. Last update 3b3b1f3...2db359b\n. ## Current coverage is 71.16% (diff: 53.04%)\nNo coverage report found for master at 861b41c.\nPowered by Codecov. Last update 861b41c...4e31f89\n. ## Current coverage is 71.31% (diff: 70.00%)\n\n\n\nNo coverage report found for master at 9d60bd0.\nPowered by Codecov. Last update 9d60bd0...8455971\n. ## Current coverage is 71.16% (diff: 0.00%)\nMerging #156 into master will not change coverage\n\n\ndiff\n@@             master       #156   diff @@\n==========================================\n  Files           134        134          \n  Lines          6954       6954          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4949       4949          \n  Misses         2005       2005          \n  Partials          0          0\n\nPowered by Codecov. Last update 9d60bd0...dc6add3\n. ## Current coverage is 80.62% (diff: 77.69%)\nMerging #159 into master will increase coverage by 10.45%\n\ndiff\n@@             master       #159   diff @@\n==========================================\n  Files           134        178     +44   \n  Lines          7045      13019   +5974   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits           4943      10496   +5553   \n- Misses         2102       2523    +421   \n  Partials          0          0\n\nPowered by Codecov. Last update 27ffcbe...117be0a\n. ## Current coverage is 70.64% (diff: 100%)\nNo coverage report found for master at 089ab18.\nPowered by Codecov. Last update 089ab18...3a90f76\n. ## Current coverage is 75.77% (diff: 8.88%)\nNo coverage report found for websocket at 6f29ae4.\nPowered by Codecov. Last update 6f29ae4...91c388b\n. ## Current coverage is 70.16% (diff: 88.79%)\nMerging #162 into master will decrease coverage by 0.44%\n\ndiff\n@@             master       #162   diff @@\n==========================================\n  Files           136        134     -2   \n  Lines          7070       7045    -25   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           4992       4943    -49   \n- Misses         2078       2102    +24   \n  Partials          0          0\n\nPowered by Codecov. Last update 9a3567b...68a06d7\n. ## Current coverage is 82.99% (diff: 86.64%)\nMerging #168 into master will increase coverage by 0.08%\n\ndiff\n@@             master       #168   diff @@\n==========================================\n  Files           179        181     +2   \n  Lines         13260      13552   +292   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          10995      11248   +253   \n- Misses         2265       2304    +39   \n  Partials          0          0\n\nPowered by Codecov. Last update 97b989b...9de9b9d\n. ## Current coverage is 80.51% (diff: 28.12%)\nMerging #169 into master will decrease coverage by 0.10%\n\n\ndiff\n@@             master       #169   diff @@\n==========================================\n  Files           178        178          \n  Lines         13019      13045    +26   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          10496      10503     +7   \n- Misses         2523       2542    +19   \n  Partials          0          0\n\nPowered by Codecov. Last update 764de8c...381088b\n. ## Current coverage is 80.73% (diff: 63.10%)\nMerging #172 into master will increase coverage by 0.11%\n\ndiff\n@@             master       #172   diff @@\n==========================================\n  Files           178        176     -2   \n  Lines         13019      13013     -6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          10496      10506    +10   \n+ Misses         2523       2507    -16   \n  Partials          0          0\n\nPowered by Codecov. Last update 764de8c...c45888b\n. ## Current coverage is 80.51% (diff: 0.00%)\nMerging #173 into master will decrease coverage by 0.03%\n\ndiff\n@@             master       #173   diff @@\n==========================================\n  Files           176        176          \n  Lines         13059      13064     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          10518      10518          \n- Misses         2541       2546     +5   \n  Partials          0          0\n\nPowered by Codecov. Last update aca83a2...45f7d7f\n. ## Current coverage is 82.92% (diff: 0.00%)\nMerging #174 into master will decrease coverage by 0.11%\n\ndiff\n@@             master       #174   diff @@\n==========================================\n  Files           179        179          \n  Lines         13239      13257    +18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          10994      10994          \n- Misses         2245       2263    +18   \n  Partials          0          0\n\nPowered by Codecov. Last update 4267da8...51b1ae8\n. ## Current coverage is 83.04% (diff: 93.69%)\nMerging #175 into master will increase coverage by 2.53%\n\ndiff\n@@             master       #175   diff @@\n==========================================\n  Files           176        179     +3   \n  Lines         13064      13239   +175   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          10518      10994   +476   \n+ Misses         2546       2245   -301   \n  Partials          0          0\n\nPowered by Codecov. Last update 2bc5629...2df837a\n. ## Current coverage is 82.92% (diff: 100%)\nMerging #176 into master will not change coverage\n\ndiff\n@@             master       #176   diff @@\n==========================================\n  Files           179        179          \n  Lines         13257      13257          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          10994      10994          \n  Misses         2263       2263          \n  Partials          0          0\n\nPowered by Codecov. Last update c0eff4d...b6c32b4\n. ## Current coverage is 82.92% (diff: 33.33%)\nMerging #177 into master will not change coverage\n\ndiff\n@@             master       #177   diff @@\n==========================================\n  Files           179        179          \n  Lines         13257      13257          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          10994      10994          \n  Misses         2263       2263          \n  Partials          0          0\n\nPowered by Codecov. Last update 09f6877...1558397\n. ## Current coverage is 82.91% (diff: 57.77%)\nMerging #178 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #178   diff @@\n==========================================\n  Files           179        179          \n  Lines         13257      13260     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          10994      10995     +1   \n- Misses         2263       2265     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update c5425a9...f5714d2\n. ## Current coverage is 82.82% (diff: 0.00%)\nNo coverage report found for master at 4cdb607.\nPowered by Codecov. Last update 4cdb607...451c4ea\n. ## Current coverage is 82.56% (diff: 75.36%)\nMerging #180 into master will decrease coverage by 0.36%\n\ndiff\n@@             master       #180   diff @@\n==========================================\n  Files           179        181     +2   \n  Lines         13257      13255     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits          10994      10944    -50   \n- Misses         2263       2311    +48   \n  Partials          0          0\n\nPowered by Codecov. Last update d0f4294...64c122c\n. ## Current coverage is 80.06% (diff: 25.55%)\nNo coverage report found for master at 39da5ba.\nPowered by Codecov. Last update 39da5ba...6be5fd6\n. ## Current coverage is 83.01% (diff: 96.00%)\nNo coverage report found for master at 2b8296f.\nPowered by Codecov. Last update 2b8296f...1f189ae\n. ## Current coverage is 80.04% (diff: 83.33%)\nMerging #187 into websocket will increase coverage by 0.87%\n\ndiff\n@@           websocket       #187   diff @@\n===========================================\n  Files            192        193     +1   \n  Lines          13956      13971    +15   \n  Methods            0          0          \n  Messages           0          0          \n  Branches           0          0          \n===========================================\n+ Hits           11049      11183   +134   \n+ Misses          2907       2788   -119   \n  Partials           0          0\n\nPowered by Codecov. Last update 623f608...13a2273\n. ## Current coverage is 83.01% (diff: 88.23%)\nNo coverage report found for master at 7284131.\nPowered by Codecov. Last update 7284131...c93e936\n. ## Current coverage is 83.05% (diff: 88.46%)\nMerging #193 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #193   diff @@\n==========================================\n  Files           181        181          \n  Lines         13546      13571    +25   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11249      11272    +23   \n- Misses         2297       2299     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 4183532...4891120\n. ## Current coverage is 82.88% (diff: 89.20%)\nNo coverage report found for master at a5b6930.\nPowered by Codecov. Last update a5b6930...0925732\n. ## Current coverage is 83.04% (diff: 100%)\nNo coverage report found for master at 64edce5.\nPowered by Codecov. Last update 64edce5...0d8b9b7\n. ## Current coverage is 80.05% (diff: 42.10%)\nNo coverage report found for master at 36c7443.\nPowered by Codecov. Last update 36c7443...0507b25\n. ## Current coverage is 83.05% (diff: 100%)\nMerging #201 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #201   diff @@\n==========================================\n  Files           182        182          \n  Lines         13602      13602          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11295      11297     +2   \n+ Misses         2307       2305     -2   \n  Partials          0          0\n\nPowered by Codecov. Last update 967b665...0e7ed84\n. ## Current coverage is 80.07% (diff: 100%)\nMerging #205 into master will not change coverage\n\ndiff\n@@             master       #205   diff @@\n==========================================\n  Files           194        194          \n  Lines         14878      14878          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11913      11913          \n  Misses         2965       2965          \n  Partials          0          0\n\nPowered by Codecov. Last update 79ba8f0...7b48407\n. ## Current coverage is 80.13% (diff: 50.00%)\nMerging #206 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #206   diff @@\n==========================================\n  Files           194        194          \n  Lines         14893      14899     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11937      11939     +2   \n- Misses         2956       2960     +4   \n  Partials          0          0\n\nPowered by Codecov. Last update a03c901...343ad1d\n. ## Current coverage is 80.02% (diff: 38.63%)\nNo coverage report found for master at 85166f8.\nPowered by Codecov. Last update 85166f8...088212f\n. ## Current coverage is 80.12% (diff: 0.00%)\nNo coverage report found for master at 534a6e1.\nPowered by Codecov. Last update 534a6e1...73f1ad9\n. ## Current coverage is 80.14% (diff: 100%)\nMerging #212 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #212   diff @@\n==========================================\n  Files           194        194          \n  Lines         14899      14907     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11939      11947     +8   \n  Misses         2960       2960          \n  Partials          0          0\n\nPowered by Codecov. Last update 26f4157...7a0352d\n. ## Current coverage is 77.24% (diff: 72.72%)\nMerging #218 into master will decrease coverage by 0.02%\n\ndiff\n@@             master       #218   diff @@\n==========================================\n  Files           216        216          \n  Lines         15784      15778     -6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits          12196      12188     -8   \n- Misses         3588       3590     +2   \n  Partials          0          0\n\nPowered by Codecov. Last update 6b33c9c...a169031\n. ## Current coverage is 77.46% (diff: 93.53%)\nMerging #220 into master will increase coverage by 0.19%\n\ndiff\n@@             master       #220   diff @@\n==========================================\n  Files           216        223     +7   \n  Lines         15784      15790     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          12196      12231    +35   \n+ Misses         3588       3559    -29   \n  Partials          0          0\n\nPowered by Codecov. Last update 6b33c9c...bf44584. ## Current coverage is 77.26% (diff: 17.24%)\nMerging #225 into master will decrease coverage by <.01%\n\ndiff\n@@             master       #225   diff @@\n==========================================\n  Files           216        216          \n  Lines         15784      15783     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits          12196      12195     -1   \n  Misses         3588       3588          \n  Partials          0          0\n\nPowered by Codecov. Last update 3cb11d2...f30d0d1. ## Current coverage is 77.26% (diff: 83.33%)\nMerging #226 into master will decrease coverage by <.01%\n\ndiff\n@@             master       #226   diff @@\n==========================================\n  Files           216        216          \n  Lines         15784      15814    +30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          12196      12219    +23   \n- Misses         3588       3595     +7   \n  Partials          0          0\n\nPowered by Codecov. Last update 3cb11d2...d4408a0. ## Current coverage is 77.39% (diff: 71.42%)\nMerging #231 into master will increase coverage by 0.11%\n\ndiff\n@@             master       #231   diff @@\n==========================================\n  Files           216        217     +1   \n  Lines         15814      15835    +21   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          12221      12255    +34   \n+ Misses         3593       3580    -13   \n  Partials          0          0\n\nPowered by Codecov. Last update 27f6c1f...c1a4b53. ## Current coverage is 77.34% (diff: 77.77%)\nMerging #232 into master will increase coverage by 0.07%\n\ndiff\n@@             master       #232   diff @@\n==========================================\n  Files           216        217     +1   \n  Lines         15814      15841    +27   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          12221      12253    +32   \n+ Misses         3593       3588     -5   \n  Partials          0          0\n\nPowered by Codecov. Last update 27f6c1f...0071649. ## Current coverage is 77.28% (diff: 100%)\nMerging #233 into master will increase coverage by <.01%\n\ndiff\n@@             master       #233   diff @@\n==========================================\n  Files           216        216          \n  Lines         15814      15813     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          12221      12221          \n+ Misses         3593       3592     -1   \n  Partials          0          0\n\nPowered by Codecov. Last update 27f6c1f...efd0f3e. # Codecov Report\nMerging #234 into master will increase coverage by 0.92%.\nThe diff coverage is 83.52%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #234      +/-\n==========================================\n+ Coverage   24.38%   25.31%   +0.92%   \n==========================================\n  Files          57       59       +2   \n  Lines       11095    11271     +176   \n==========================================\n+ Hits         2706     2853     +147   \n- Misses       8389     8418      +29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/CPOSIX/sigaction.c | 75% <75%> (\u00f8) | |\n| Tests/POSIXTests/POSIXTests.swift | 76.15% <77.66%> (+5.78%) | :arrow_up: |\n| Sources/POSIX/Sigaction.swift | 98.11% <98.11%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 718842f...9d0441e. Read the comment docs.\n. \n",
    "dreymonde": "@Danappelxx yes, sure, I'll add some tests and docs. You can check out Mapper PR at Quark, it's thoroughly tested, I will just migrate them from there)\n. @Danappelxx sorry, I don't understand what you mean :)\n. @Danappelxx now I get it, thanks \ud83d\udc4d \n. @paulofaria yes, I think it's ready :) Maybe just rename Keys to MappingKeys, what do you think? I'm afraid of name conflicts.\n. Nice job, thanks! However, I think it is more appropriate to set date format like this:\nswift\nformatter.dateFormat = DateFormatter.dateFormat(fromTemplate: \"HH:mm:ss.SSS\", options: 0, locale: .current)\nThis way, the user's locale will be respected. For example, for me it prints time like this:\n\n13:52:19,075\n\n(with comma after 19, not the dot), which is appropriate in my region (Ukraine).\n. My opinion on naming:\nI don\u2019t like the asInt/int style which (as I remember) came from SwiftyJSON, because it simply repeats type information which is already there. By using these kind of names, we omit several really powerful features of Swift. So I prefer replacing asInt(), asString(), asBool() and so on with get() throws -> Int, get() throws -> String, get() throws -> Bool and so on (get is not the best name, I agree, but that\u2019s not the main point here). So not generic, but overloading. And that won\u2019t lose in usability/convenience too \u2014 you can always write:\nswift\nlet number = try map[\"key\"].map.get() as Int\nAnd, of course, there are a dozens of situations where type information is already available, so you don\u2019t even have to write that as Int, but with asInt/int style you still have to.\nAnd my point is that there should be no generic methods at all \u2014 asInferred is tricky and way too subtle, as for me.\n. Maybe it sounds too radical, but we should at least consider this approach.\n. 1. There is no type repeating in your example. As type repeating, I consider this:\nswift\nfunc statusCode(from map: Map) -> Int? {\n    return try? map[\"statusCode\"].map.get()\n    // vs\n    return try? map[\"statusCode\"].map.asInt()\n}\nI\u2019m not saying that it\u2019s very important, it\u2019s just my opinion that asInt/asString/etc. naming pattern is a bit unswifty, and \u00abtype-hidden\u00bb thing is more consistent with new API design guidelines.\n1. As I understand, asInferred works with MapInitializable. That\u2019s why it\u2019s tricky. Swift insists that this type of conversion should be done via initializers. So, in my opinion, it\u2019s much better to do:\nswift\nlet headers = try Headers(from: map)\nthan\nswift\nlet headers = try map.asInferred() as Headers\nEven though the second example can look nicer in some places.\nAnd the whole concept of some asInferred looks strange and alien, and will be difficult for beginners to understand. I think it\u2019s better to avoid usage of word \u00abinferred\u00bb in an API.\n. @Danappelxx if we take your path, I propose choosing asString, asInt and so on and no generic/inferred method. MapInitializable should really use initializer for that.. ",
    "robertjpayne": "@paulofaria I think this is a bad idea, easy way for someone to destroy the server with a malicious Content-Length. New request parser is much more efficient anyways.\n. This is done!\n. @paulofaria I've merged this up with master but a few performance tests shows a 3k req/s regression on my machine.\nIt's hard to profile properly but my guess is we're just doing too much in our polling loops.\n. @Danappelxx @paulofaria this also includes some critical performance tweaks now.\n. @paulofaria @Danappelxx changes made, last scan?\n. As bad as this looks it actually works really well. I tested heavily tonight serialising JSON on a background thread and was shocked I didn't crash anything.\nWe should discourage workers over multi-process setups but it may help us when trying to integrate non-Zewo compatible API's (e.g. URLSession that supports all of libcurl.)\n. This is addressed in #169 \n. \ud83d\udc4d looks good to me\n. @vi4m awesome! @Danappelxx can you review this as a second set of eyes? I helped vi4m patch this together and it does seem to solve our EOF error with HTTPClient!\n. Yea this is mostly for tests but it could definitely be optimised.\n. @paulofaria nope subdata is how you slice w/o doing memcpy on DisatchData\n. @paulofaria Buffer() is a init that just sets to Buffer.empty.\n. I don't think we should -- it's convenience over the start/end index which is going to throw fatal errors anyways.\n. I've done this now just needed to remove the TODO comment\n. Xcode was using stupid tabs, should be fixed up now\n. This has been implemented now!\n. I think it makes sense, we're using buffers not data.\n. Not sure what happened, think this is gone now anyways\n. Hm true @paulofaria what's your ideal on this? I quite like the from label but it could make sense either way\n. Needed the base64 methods :(\n. This could be defensive\nguard ipv4 != nil else {\n}\n. This could also be defensive with a guard if ipv6 != nil\n. This should be defensive\nguard flags != -1 and throw the error in the else statement\n. Does this make more sense as a switch?\n. make this defensive guard result == 0 else { throw }\n. make this defensive guard result == 0 else { throw }\n. It's a tiny bit of a hit, but it's only one typecast per fully parsed request. I don't think it's going to make any difference.\n. Ooo I'll reuse that, we should probably default to 4kb or something though 2kb is kinda low?\n. one-off per request, not worth it? We were using a bunch of filters before in the old old parser!\n. I'm just worried about how fragile description is.\n. It really makes little difference, this is once per request fully parsed\n. @paulofaria good point\n. @Danappelxx I didn't write this, I simply updated it to work with new parser\n. Missed that we had a bufferSize ivar!\n. The client needs a bunch of work anyways, lets do that as a separate PR.\n. Fixed\n. Fixed\n. Yea good idea! Fixed up\n. Fixed\n. Fixed\n. It's in a test, not worth potentially breaking change?\n. @paulofaria Append only works on single values not another array\n. Because we'd have to use ArraySlice for Buffer rather than [UInt8] which would complicate things. We can't return the bytes array.\nMaybe we can explore that down the road.\n. Got rid of this\n. What is the point in having this on UnsafeBufferPointer as you can never actually write to the pointer?\n. Add a bounds check on capacity == 0 if it is zero we should first allocate a UnsafeMutablePointer with count zero but set it's memory to nil this actually ensures that baseAddress is not nil but is a valid NULL pointer to send to C API's.\n. Interesting implementation that returns a UnsafeBufferPointer rather than a count. I actually like this as it is necessary on nearly all call sites\n. Maybe it's just me but this looks like it could possible cause memory access issues. You pass a pointer into the read function which returns a sub pointer.\nThe pointer from [UInt8] is only valid for the scope of the closure so unless you're allocating a new buffer inside the read and doing a memcpy this could break.\n. Connections are very inexpensive to us, should be 45-90s as a default.\n. @Danappelxx I'd say here we should actually set result = .null and return result otherwise we end up with a parser that acts as if it is completed (returns a non-nil value) but actually can continue to parse bytes.\n. if !started {\n            started = true\n            guard !final else {\n                result = .null\n                return result\n            }\n        }\n. ",
    "supermarin": "@bosr sorry about that - it went in on accident in one of the recent PRs. Fix is incoming in 0.2.4 \n. ",
    "JGiola": "Oh, ok, I've done that at first but then I've gone to do a fixed format.\nThe dateFormatter property is outside Logger for having it shared across all Logger instances and not create a new one every time a Logger object is created.\nI will push the changes when I will be back home.\n. While I'm at it, you think I have to change the HH part of the template with jj to adapt dinamically to 12/24 hour clock?\nOr at least is what I can understand from this documentation even if I don't know if you have to add the a to add AM/PM...\n. No problem, for the mont and day I'm sure it can do if you use the enum specifiers, I don't know if it will do the same with the localised template...\n. Done, I've even removed the separator from the template because they aren't needed, foundation is figuring out everything by itself.\nAnd yes, the order of year, month and day are based on the locale \ud83d\udc4d\ud83c\udffb\n. The tests are no problem, but it possible to cheat a bit? \ud83d\ude01\nBecause the actual lotTimeFormatter is a fileprivate property I can't access directly inside the tests and in addition to that I have to set a fixed sets of locale and time zone to know how the strings would come out and so reset the dateFormat to it.\nMy idea is to tests on a brand new DateFormatter with a couple of different locale and time zone and two or three different dates to see if the format string without any separator is always equals to something we will know.\nIs it ok for you?\n. @testable importallow only internal properties to be accessible. I've moved the logTimeFormatter property to be public so people can changes all the properties as they like.\nThe tests will check against the en_US and it_IT locales, I have to add another one?\n. I'm start to thinking that on Linux the unicode library is parsing the date skeleton template in a totally different way than on macOS.\nIt seems to completely ignore the forced 24 hour marker and for the Italian locale the two platform don't agree on the coma separator between date and hour...\n. Ok, I've spin up an ubuntu 12.04 server and I've found a super weird bug. On Linux if you add anyone of the time zone specifier to the skeleton format will disable the forced 24h format, as soon as you change the skeleton from yyMMdd HHmmssSSSz to yyMMdd HHmmssSSS the printed hours will revert correctly to the force 24h format.\n. Yeah, I've filed it when I've been able to check what was going on on a Ubuntu server.\nIf you want to join in and write it down better is here https://bugs.swift.org/browse/SR-2906\n. In regard of the pull request what you want me to do? Going back on adding the time zone to the skeleton format and comment out the tests for now? Or leave things as they are now?\n. ",
    "JimiSmith": "Sure. No problem :)\n. Done. Thanks for the help @Danappelxx \n. ",
    "bradhilton": "Awesome @tomohisa, I'll take a look at this.\n. Looks like it's actually an issue with C strings, not Venice. It's been resolved with a new Reflection release, 0.14.1. @tomohisa If you update your dependencies your project should run without a EXC_BAD_ACCESS error.\n. @hikelee Can you try running it again using Reflection 0.14.1? I just issued a fix to #195, which may also fix this issue since that turned out to be an problem with C strings which may apply to your example as well.\n. Thanks @hikelee, I'll have to try debugging it in linux then.\n. ",
    "hikelee": "there are some special characters printed out,please resolve it together,tks\n. Got a different error message running in arch linux :\n Hello: /tmp/yaourt-tmp-hike/aur-swift/src/swift/include/swift/Runtime/../../../stdlib/public/SwiftShims/RefCount.h:252: bool StrongRefCount::doDecrementShouldDeallocate() [ClearPinnedFlag = false]: Assertion `newval + quantum >= RC_ONE && \"releasing reference with a refcount of zero\"' failed.\nPerson(firstName: Aborted (core dumped)\n. @bradhilton ,thanks for tracking, but the bug still exists. Below is my test result:\nArch Linux test\n$swift build\n    Cloning https://github.com/Zewo/Reflection.git\n    HEAD is now at e75ca32 Remove @testable from PublicTests\n    Resolved version: 0.14.1\n    Compile Swift Module 'Reflection' (24 sources)\n    Compile Swift Module 'Main' (1 sources)\n    Linking ./.build/debug/Main\n$ .build/debug/Main\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    ------\n    Person(firstName: \"James\")\n    Main: /tmp/yaourt-tmp-hike/aur-swift/src/swift/include/swift/Runtime/../../../stdlib/public/SwiftShims/RefCount.h:252: bool StrongRefCount::doDecrementShouldDeallocate() [ClearPinnedFlag = false]: Assertion `newval + quantum >= RC_ONE && \"releasing reference with a refcount of zero\"' failed.\n    Person(firstName: Aborted (core dumped)\nUbuntu 16.04 test:\n$swift build\n    Cloning https://github.com/Zewo/Reflection.git\n    HEAD is now at e75ca32 Remove @testable from PublicTests\n    Resolved version: 0.14.1\n    Compile Swift Module 'Reflection' (24 sources)\n    Compile Swift Module 'Main' (1 sources)\n    Linking ./.build/debug/Main\n$ .build/debug/Main\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    Person(firstName: \"James\")\n    ------\n    Person(firstName: \"James\")\n    Person(firstName: \"p\u00e2\u00dc\\u{01}\\0\\0\\0\\0a\")\n    Person(firstName: \"\\u{10}\\u{10}\\0a\")\n    Segmentation fault\n. There is no error in macOS, seems it's only appears in linux environments\n. ",
    "joernroeder": "@Danappelxx just a reminder too. We've discussed this on slack today\u2026\n. you're welcome. I'm wondering why this bug is coming up now cause i'm using the code since the swift 3.0 release and everything went well back then. I've also scanned the commit history but couldn't find a change that looked related to the problem root of the problem.\nThanks for looking into this \ud83d\udc4d \n. 1270?\n. ",
    "muhammadnasr": "?. ",
    "Cyfirr": "Verified for the case:\nlet original = Asset(id: \"bc_id\", name: \"Test\", frontCover: nil, data: nil, type: nil)\nHowever, if I will change the inserted entity to \nlet original = Asset(id: \"bc_id\", name: \"Test\", frontCover: \"\", data: \"\", type: \"\")\nThen test will fail. DB should have an empty string in my opinion and empty string should be returned by the ORM.\n/home/anatoli/workspace/StorageService/Tests/StorageLayerTests/PostgreSQLEBooksStore/PostgreSQLEBooksStoreTests.swift:45: error: PostgreSQLEBooksStoreTests.testAssetInsertion : XCTAssertEqual failed: (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: nil, data: nil, type: nil)\") is not equal to (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: Optional(\"\"), data: Optional(\"\"), type: Optional(\"\"))\") - \n/home/anatoli/workspace/StorageService/Tests/StorageLayerTests/PostgreSQLEBooksStore/PostgreSQLEBooksStoreTests.swift:47: error: PostgreSQLEBooksStoreTests.testAssetInsertion : XCTAssertEqual failed: (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: nil, data: nil, type: nil)\") is not equal to (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: Optional(\"\"), data: Optional(\"\"), type: Optional(\"\"))\") - \n/home/anatoli/workspace/StorageService/Tests/StorageLayerTests/PostgreSQLEBooksStore/PostgreSQLEBooksStoreTests.swift:50: error: PostgreSQLEBooksStoreTests.testAssetInsertion : XCTAssertEqual failed: (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: nil, data: nil, type: nil)\") is not equal to (\"Asset(id: \"bc_id\", name: \"Test\", frontCover: Optional(\"\"), data: Optional(\"\"), type: Optional(\"\"))\") \nSo, probably a bit better distinguish is required between NULL and \"\"...\n. ",
    "apocolipse": "Update:\nThere appears to be problems reading from bytea as well.\nPer the above example:\nswift\ntry row.value(.info) as Data\nThe following succeeds, however the Data read is actually a hex string, rather than byte data.\nConfirmed this by checking size in psql (44 bytes for my test case), and size of data read, 90 bytes (its prefixed with \\x)\nFor my specific use case I've worked around both of these issues by:\nWhen writing: base64 encode data before writing\nWhen reading: Read as String -> create Data from hex string -> create Data from base64 encoded data\n. ",
    "wiwiwa": "The Safe library is not a coroutine library. It provides an elegant way to start and use a new thread.\nAm I right?. ",
    "tidwall": "@wiwiwa You're right. Safe does not have coroutines. Just a simple dispatch call that wraps around a thread. . ",
    "sundeepgupta": "Thanks for pointing it out. My apologies for not seeing that in the docs. I totally skipped it.\nCheers,\nSundeep\nSent from my phone\nOn Dec 17, 2016, 3:35 PM -0500, Dan Appel notifications@github.com, wrote:\n\nHi! As shown in the PostgreSQL readme (https://github.com/Zewo/PostgreSQL/blob/master/README.md#installation), you need to add some flags swift build -Xcc -I/usr/local/include -Xlinker -L/usr/local/lib/. We're working on fixing this for the next release :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub (https://github.com/Zewo/Zewo/issues/227#issuecomment-267785210), or mute the thread (https://github.com/notifications/unsubscribe-auth/ACQWbb7cFzQNwHd2fc19cBgV-cn24Qi3ks5rJEeagaJpZM4LPvbV).\n\n. The codecov/patch check failed - but the lack of that code being executed is intended. . ",
    "micheltlutz": "Solve for me my postgresql installation with brew \nCreate File\nsudo vim /usr/local/lib/pkgconfig/libpq.pc\nWith content... \npath=/usr/local/Cellar/postgresql@9.6/9.6.6/\nCflags: -I${path}/include\nLibs: -L${path}/lib -lpq\nPath found with command \n$ locate libpq-fe.h\n/Library/PostgreSQL/9.6/include/libpq-fe.h\n/usr/local/Cellar/postgresql@9.6/9.6.6/include/libpq-fe.h\nAfter I Running vapor build --verbose\nand .. Building Project [Done]\n. ",
    "vzsg": "Also steadily reproduced here.\nWith some Xcode debugging, I found that the following line is leaking malloc blocks: https://github.com/Zewo/TCP/blob/master/Sources/TCP/TCPStream.swift#L23\nAnd it seems that every call to get creates two TCP connections, of which only one is cleaned up. Checking the process with lsof also confirms this, TCP connections are left open like no tomorrow.. ",
    "ronflima": "Please, don't integrate it yet. As talking to @robertjpayne, I realize that I need some research to do. Possibly, Foundation's Process class may actually integrate signal behavior to a process in order to get it well integrated to unix/linux startup environments.. Closing this pull request. POSIX module no longer exists on Zewo.. ",
    "crspybits": "This does not appear specific to Xcode, but rather with Swift 3.1. On Ubuntu, when I use swift-3.1-RELEASE-ubuntu16.04, I get similar results. . ",
    "codecov[bot]": "Codecov Report\n\nMerging #239 into master will decrease coverage by 52.55%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster     #239       +/-\n===========================================\n- Coverage   77.28%   24.72%   -52.56%   \n===========================================\n  Files         216       58      -158   \n  Lines       15813    11202     -4611   \n===========================================\n- Hits        12221     2770     -9451   \n- Misses       3592     8432     +4840\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lection/Sources/Reflection/ValueWitnessTable.swift | | |\n| Modules/TCP/Sources/TCP/TCPHost.swift | | |\n| Modules/TCP/Sources/TCP/TCPTLSHost.swift | | |\n| ...s/Reflection/Sources/Reflection/MetadataType.swift | | |\n| ...eflection/Sources/Reflection/RelativePointer.swift | | |\n| Modules/UDP/Sources/UDP/UDPSocket.swift | | |\n| ...Venice/Sources/Venice/Channel/SendingChannel.swift | | |\n| ...Reflection/Tests/ReflectionTests/PublicTests.swift | | |\n| ...bSocketServer/Sources/WebSocketServer/Server.swift | | |\n| ...ests/VeniceTests/Venice/FallibleChannelTests.swift | | |\n| ... and 105 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 66fdd3a...4c6cd81. Read the comment docs.\n. # Codecov Report\nMerging #239 into master will decrease coverage by 52.55%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster     #239       +/-\n===========================================\n- Coverage   77.28%   24.72%   -52.56%   \n===========================================\n  Files         216       58      -158   \n  Lines       15813    11202     -4611   \n===========================================\n- Hits        12221     2770     -9451   \n- Misses       3592     8432     +4840\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...Reflection/Sources/Reflection/Metadata+Tuple.swift | | |\n| Modules/TCP/Sources/TCP/TCPHost.swift | | |\n| ...ction/Tests/ReflectionTests/PerformanceTests.swift | | |\n| Modules/TCP/Sources/TCP/TCPTLSStream.swift | | |\n| ...s/Venice/Tests/VeniceTests/Venice/TimerTests.swift | | |\n| ...ebSocket/Tests/WebSocketTests/WebSocketTests.swift | | |\n| ...s/Reflection/Sources/Reflection/MetadataType.swift | | |\n| ...odules/Reflection/Sources/Reflection/Storage.swift | | |\n| ...es/WebSocket/Tests/WebSocketTests/FrameTests.swift | | |\n| ...les/WebSocket/Sources/WebSocket/EventEmitter.swift | | |\n| ... and 105 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 66fdd3a...4c6cd81. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@9ee03f0). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #242   +/-\n========================================\n  Coverage          ?   7.58%         \n========================================\n  Files             ?      53         \n  Lines             ?    5654         \n  Branches          ?       0         \n========================================\n  Hits              ?     429         \n  Misses            ?    5225         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/HTTP/Response/ResponseRepresentable.swift | 0% <\u00f8> (\u00f8) | |\n| Sources/HTTP/Request/Request.swift | 0% <\u00f8> (\u00f8) | |\n| Sources/HTTP/Response/Response.swift | 0% <0%> (\u00f8) | |\n| Sources/Core/Content/ContentType.swift | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9ee03f0...7bfa150. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@6734abd). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #243   +/-\n========================================\n  Coverage          ?   7.39%         \n========================================\n  Files             ?      54         \n  Lines             ?    5801         \n  Branches          ?       0         \n========================================\n  Hits              ?     429         \n  Misses            ?    5372         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/HTTP/Parameters/Parameters.swift | 0% <\u00f8> (\u00f8) | |\n| Sources/HTTP/URI/URI.swift | 0% <0%> (\u00f8) | |\n| Sources/Core/Content/ContentConvertible.swift | 0% <0%> (\u00f8) | |\n| Sources/HTTP/Request/Request.swift | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6734abd...9c4f8a1. Read the comment docs.\n. # Codecov Report\nMerging #244 into master will increase coverage by 0.58%.\nThe diff coverage is 25.48%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #244      +/-\n==========================================\n+ Coverage    28.8%   29.38%   +0.58%   \n==========================================\n  Files          85       87       +2   \n  Lines        8638     9223     +585   \n==========================================\n+ Hits         2488     2710     +222   \n- Misses       6150     6513     +363\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Content/JSON/JSONParser.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sources/Content/JSON/JSONSchema.swift | 27.75% <23.54%> (\u00f8) | |\n| Sources/Content/JSON/JSONConvertible.swift | 34.06% <68.42%> (+34.06%) | :arrow_up: |\n| Tests/ContentTests/JSONTests.swift | 78.94% <78.94%> (\u00f8) | |\n| Sources/Content/JSON/JSON.swift | 16.66% <8.1%> (+16.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a63a245...f51c87b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@61e2f9e). Click here to learn what that means.\nThe diff coverage is 36.84%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #245   +/-\n========================================\n  Coverage          ?   28.8%         \n========================================\n  Files             ?      85         \n  Lines             ?    8638         \n  Branches          ?       0         \n========================================\n  Hits              ?    2488         \n  Misses            ?    6150         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/IO/IP.swift | 76.27% <\u00f8> (\u00f8) | |\n| Sources/Content/XML/XMLParser.swift | 0% <\u00f8> (\u00f8) | |\n| Sources/Crypto/Crypto.swift | 17.5% <\u00f8> (\u00f8) | |\n| Sources/Core/Stream/ReadableBuffer.swift | 35.71% <0%> (\u00f8) | |\n| Sources/HTTP/Message/Body.swift | 4% <0%> (\u00f8) | |\n| Sources/Core/Stream/BufferStream.swift | 0% <0%> (\u00f8) | |\n| Sources/Core/Environment/Environment.swift | 0% <0%> (\u00f8) | |\n| Sources/IO/TLSStream.swift | 75.6% <100%> (\u00f8) | |\n| Tests/HTTPTests/ClientTests.swift | 69.23% <100%> (\u00f8) | |\n| Sources/IO/TLSHost.swift | 65.47% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 61e2f9e...89fc77c. Read the comment docs.\n. # Codecov Report\nMerging #247 into master will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #247      +/-\n==========================================\n+ Coverage   29.81%   29.88%   +0.07%   \n==========================================\n  Files          87       52      -35   \n  Lines        9223     4333    -4890   \n==========================================\n- Hits         2750     1295    -1455   \n+ Misses       6473     3038    -3435\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Crypto/Crypto.swift | 17.5% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/HTTP/Response/Status.swift | 6.85% <0%> (-7.23%) | :arrow_down: |\n| Sources/HTTP/Message/Message.swift | 19.71% <0%> (-2.82%) | :arrow_down: |\n| Sources/CHTTPParser/include/http_parser.h | | |\n| Tests/CryptoTests/CryptoTests.swift | | |\n| Tests/IOTests/TLSTests.swift | | |\n| Tests/IOTests/IPTests.swift | | |\n| Sources/CArgon2/run.c | | |\n| Sources/CArgon2/include/argon2.h | | |\n| Sources/CYAJL/yajl_alloc.c | | |\n| ... and 28 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ecbc083...ee2bd96. Read the comment docs.\n. # Codecov Report\nMerging #248 into master will increase coverage by 2.07%.\nThe diff coverage is 24.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #248      +/-\n==========================================\n+ Coverage   30.68%   32.75%   +2.07%   \n==========================================\n  Files          49       60      +11   \n  Lines        4093     6881    +2788   \n  Branches        0      438     +438   \n==========================================\n+ Hits         1256     2254     +998   \n- Misses       2837     4619    +1782   \n- Partials        0        8       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Core/Writable/WritableBuffer.swift | 0% <\u00f8> (\u00f8) | |\n| Sources/Core/Environment/Environment.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/HTTP/Client/Client.swift | 63.91% <\u00f8> (+1.47%) | :arrow_up: |\n| Sources/HTTP/Message/Version.swift | 53.84% <\u00f8> (-1.71%) | :arrow_down: |\n| Sources/Media/MediaType/MediaType.swift | 43.8% <\u00f8> (\u00f8) | |\n| Sources/Core/Readable/ReadableBuffer.swift | 28% <0%> (\u00f8) | |\n| Sources/Media/Media/MediaCodable.swift | 0% <0%> (\u00f8) | |\n| ...diaEncoder/MediaSingleValueEncodingContainer.swift | 0% <0%> (\u00f8) | |\n| Sources/Media/Media/MediaEncodable.swift | 0% <0%> (\u00f8) | |\n| Sources/HTTP/Response/Response.swift | 6.52% <0%> (+0.34%) | :arrow_up: |\n| ... and 92 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e46591...16885e5. Read the comment docs.\n. # Codecov Report\nMerging #249 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #249   +/-\n=======================================\n  Coverage   30.68%   30.68%         \n=======================================\n  Files          49       49         \n  Lines        4093     4093         \n=======================================\n  Hits         1256     1256         \n  Misses       2837     2837\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2c90c28...a6bb0fb. Read the comment docs.\n. # Codecov Report\nMerging #250 into swift-4 will increase coverage by 5.5%.\nThe diff coverage is 22.97%.\n\n\n```diff\n@@            Coverage Diff             @@\nswift-4     #250     +/-\n==========================================\n+ Coverage    27.36%   32.86%   +5.5%   \n==========================================\n  Files           49       60     +11   \n  Lines         6933     6852     -81   \n  Branches       414      437     +23   \n==========================================\n+ Hits          1897     2252    +355   \n+ Misses        5029     4592    -437   \n- Partials         7        8      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Core/Environment/Environment.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Sources/HTTP/Request/Request.swift | 25% <0%> (-2.97%) | :arrow_down: |\n| Sources/Media/Media/MediaEncodable.swift | 0% <0%> (\u00f8) | |\n| Sources/Media/Media/MediaCodable.swift | 0% <0%> (\u00f8) | |\n| Sources/Media/XML/XMLParser.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sources/Media/JSON/JSONSerializer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...diaEncoder/MediaSingleValueEncodingContainer.swift | 0% <0%> (\u00f8) | |\n| Sources/HTTP/Response/Response.swift | 6.52% <0%> (-0.38%) | :arrow_down: |\n| Sources/Media/Media/DecodingMedia.swift | 10.09% <10.09%> (\u00f8) | |\n| Sources/Media/JSON/JSON.swift | 59.41% <100%> (+40.08%) | :arrow_up: |\n| ... and 41 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 818fdeb...8b837e7. Read the comment docs.\n. # Codecov Report\nMerging #251 into swift-4 will increase coverage by 1.35%.\nThe diff coverage is 15.49%.\n\n\n```diff\n@@             Coverage Diff             @@\nswift-4     #251      +/-\n===========================================\n+ Coverage    32.75%   34.11%   +1.35%   \n===========================================\n  Files           60       60            \n  Lines         6881     7291     +410   \n  Branches       438      459      +21   \n===========================================\n+ Hits          2254     2487     +233   \n- Misses        4619     4795     +176   \n- Partials         8        9       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Media/Media/Stack.swift | 86.66% <\u00f8> (-5.65%) | :arrow_down: |\n| Sources/Core/String/String.swift | 74.46% <\u00f8> (+16.05%) | :arrow_up: |\n| Sources/HTTP/Parser/RequestParser.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sources/Media/JSON/JSON.swift | 33.52% <0%> (-25.89%) | :arrow_down: |\n| Sources/Core/Environment/Environment.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sources/Media/JSON/JSONSchema.swift | 39.84% <0%> (\u00f8) | :arrow_up: |\n| Sources/HTTP/Server/Server.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...a/MediaDecoder/MediaUnkeyedDecodingContainer.swift | 8.6% <0.59%> (-5.93%) | :arrow_down: |\n| ...dia/MediaEncoder/MediaKeyedEncodingContainer.swift | 10.63% <10.58%> (-0.41%) | :arrow_down: |\n| ...a/Media/MediaEncoder/MediaReferencingEncoder.swift | 88.88% <100%> (\u00f8) | :arrow_up: |\n| ... and 22 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cdca05f...2d4044f. Read the comment docs.\n. \n",
    "ratranqu": "Closer scrutiny to test results (XMLTest) point to unfinished business. Fixing.... ok.\n. you mean in the main readme?\n. ",
    "unnamedd": "As far as I know, @paulofaria didn't create Zewo and related projects to be used in iOS, they are more focused on a server side, but if you want to try, the way to create is this used in screenshot. \n\nand after create the .xcodeproj, you will need to import it into your project. I don't know if it will work, but you can try.\n. ",
    "courteouselk": "Ok\n. Sure.  I put it there to just keep it in line with other parts of the code.  Actually, I wanted to discuss that Errors are better readable and managed if they are nested in their parent types.  E.g. \nswift\nextension String {\n    public enum Error: Swift.Error {\n        case invalidUTF8\n        case invalidPercentEncoding\n    }\n}\n// ...\nguard let hexH = reader.next(), let hexL = reader.next() else { throw String.Error.invalidPercentEncoding }\nWhat do you think?  I can submit another PR.\n. I was thinking about this.  Problem with UnicodeScalars.whitespaceAndNewline.utf8() is that it will be generating Set<UTF8.CodeUnit> every time it's called, which makes little sense as the thing is static anyway.  But I think I found an in-between solution.  Will submit with an update.\n. Agree.  No idea why I put var..\n. UnicodeScalars.whitespaceAndNewline is a static property indeed, but .utf8() is an instance method on this property which creates an empty Set, iterates over the set with scalars, encodes each, and inserts the result into the result set.\nUPD\nI think I know now where the confusion comes from.  Initially utf8 was a computed property, which was obscuring the fact that it is using O(N) expensive calculation under the hood.\n. Ok, I will revert to StringError and suchlike then\n. Reason why I commented this test method out is because it tests this (also commented out):\nswift\n//    public func percentEncoded(allowing allowed: Characters) -> String {\n//        var string = \"\"\n//        let allowed = allowed.utf8()\n//\n//        for codeUnit in self.utf8 {\n//            if allowed.contains(codeUnit) {\n//                string.append(String(UnicodeScalar(codeUnit)))\n//            } else {\n//                string.append(\"%\")\n//                string.append(codeUnit.hexadecimal())\n//            }\n//        }\n//\n//        return string\n//    }\n.. because it's using Charaters thing which I am trying to get away from in this PR.\nActually, this reminds me, the whole type Characters is redundant now.  Should I maybe just slash them all out (delete, that is)?\n. No, this is something I came up with that would employ the power of default protocol implementations and still fit the initial API that was there for CharacterView.\nSure, I will create some UT.\n. You got it.\n. "
}