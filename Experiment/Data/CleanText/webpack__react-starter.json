{
    "sokra": "fixed\n. Thanks\n. I don't think this library is intended for in-browser usage...\n. Ok than it should ignore net and tls in the browser field in the package.json. You propably want to submit a PR to request adding this field.\njs\n{\n  \"browser\": {\n    \"net\": false,\n    \"tls\": false\n  }\n}\nOr you can do it globally in the webpack configuration with: \njs\n{\n  node: {\n    net: \"empty\",\n    tls: \"empty\"\n  }\n}\n. Thanks\n. Thansk\n. fibers is a native module, which is not supported...\n. Thanks\n. Thanks\n. The change is possible, but that's not how it was intended. I fixed the query string issue in webpack, so this shouldn't be neccessary.\nThanks\n. You can exclude the webpack-dev-server client file with the exclude option.\nYou can add it here: https://github.com/webpack/react-starter/blob/master/config/loadersByExtension.js#L19-L23\ni. e. exclude: /node_modules.socket\\.io/\n. fixed\n. added some comments\n. Started something here:\nhttps://github.com/webpack/react-starter/wiki/How-does-it-work\n. Thanks\n. Thanks\n. react has a lot for debug code which is garded with if(process.env.NODE_ENV !== \"production\"). The DefnePlugin + uglify removes this code in the production build.\n. Thanks\n. There is an example here: https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L10 uncommend this and add secondRoutes.js secondStores.js and secondStoreDescriptions.js.\nBut you also need to change the server to serve the other entry on some condition, i. e. on /second/*.\n. It's available in the module in __resourceQuery.\n. Thanks\n. Thanks\n. https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L33\nLooks like I bound it to the wrong extension...\n. Looks like the style-loader is used in prerender. By default the stylesheets are loaded by the null-loader for prerendering (https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L104).\n. The  --inline flag does the magic. It adds the webpack-dev-server/client and in hot mode also the webpack/hot/dev-server entry point.\n... It used to be in the documentation, but somebody removed it... :cry: \n. Thanks\n. Thanks\n. Don't use libraries that depend on window in your components.\nor\nOnly use these libraries in componentDidMount and exclude them for prerendering (make sure your component don't render different in prerendering or it doesn't work).\n. Thanks\n. Thanks\n. Images shouldn't be in the /public folder... Just put them into the app folder side-by-side with your scripts. Than require them... They are configured to be copied to the output directory and the url is exported.\n. https://github.com/webpack/react-starter#legacy-static-assets\n. Only stuff that doesn't work with webpack or are not ported over yet. They are served from /.\nThe public path for the webpack served assets is accessable with __webpack_public_path__.\n. We should propably concat it with the loaders... Want to send a PR?\n. fixed\n. Thanks\n. > PS. What is the argument for applying the __html key early on.. security, or keeping render() brief?\nI think it intended to mark html strings with {__html: \"...\"} when passing them around. So you could find bugs when dangerouslySetInnerHTML is used with a normal string.\n``` js\nvar a = {__html: \"...\"};\nvar b = getSomething(...);\n\n```\n\nNot obvious whether `getSomething` returns something html safe. By using the `{__html}` marker it'll tell use if it was just a string (which shouldn't be used because of security issues).\n. Sure\n. Thanks for the PR\n. Propably... You could disable prerendering and use a static html page. react-router need to be switched to hash based mode.\n\nYou would loose some benefits like prerendering and pretty urls, but I think it is possible.\n. Thanks\n. :+1:\n. You need to change these lines:\n- https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L14\n- https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L16-L19\n\nSomeone like to do a PR?\n. As next step we can change the module style to ES6 modules.\n. Should also work.\nBut you can specify `exluce` and `include` in `loadersByExtension`. See https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L16-L19\n. #60 \n. > I'd like to put the \"update data\" button that triggers Application.update() on the TodoList page, but i dont know how to correctly refer to the Application instance.\n\nFor the `update()` use an Action, which triggers the update and is bound in `mainStores` like the other actions.\n. Normally components shouldn't access the stores except for reading in `getState()`. Everything else should be done with actions. (I've done it wrong in the `update()` method)\n. I didn't want to write a new module. I actually tried using Reflux.js, but couldn't find a good workflow for prerendering, optimistic updates and merging of multiple writes. You could do it manually but that is something I would expect from a flux implementation. items-store is a very simple store base class that coordinate this behavior (the repo actually also contains a simple helper for actions and a react mixin, but these are theoretically independant and you don't have to use them with the store).\n\nitems-store allows to serialize and deserialize the store data to inject the data after prerendering. It manages optimistic updates and merges multiple writes. But items-store only offers a simple key-value store API and forces you to map more complex operations (via store-helpers) to this model. It's just a caching layer with events to the remote API (which need to be provided in the constructor).\n\nitems-store basically provides a \"raw data\" store, while other implementions give you the ablility to write higher level stores. In items-store you need to put this higher-level behavior in store-helpers. The advantage is that this way basic functionality is already provided by items-store.\n\n---\n\nNow there is an alternative to items-store, which could provide \"prerendering\" part too: http://fluxible.io/ they use dehyrade and rehyrade to (de)serialize to data from the stores and provide it to the client stores.\n. Thanks\n. :+1: \n. Thanks\n. There is no DOM while prerendering.\nWrite your components without using the DOM, or\nrequire DOM specific stuff in `componentDidMount`.\n. `if(typeof document !== \"undefined\")`\n. Thanks...\nNo experience with Vagrant, so I hope this is fine.\n. > @sokra does react-proxy-loader support react v0.13.1 ?\n\nI hope so... but haven't tested so far...\n. Why closing?\n. ok... I take a look myself.\n. fixed\n. https://github.com/webpack/webpack/commit/9a800d5979e55b321883441736459e891d06bd8a\n. see https://github.com/webpack/react-starter/pull/60\n. see #60\n. Thanks \n. Check the latest version of react-starter which uses ES6 classes and no mixins.\n. Send a PR when you find a solution. I don't use Vagrant, so I cannot fix it.\n. You are right... I didn't consider this.\n. yup... working on that..\n. The syntax changed a bit to make more sense and to support `less` `sass` `stylus` etc:\n\n``` css\n.local[className] {\n  background: red;\n}\n```\n\n``` js\nimport style from \"./style.css\";\n\n// i. e. react.js\nreturn Text;\n```\n\nhttps://github.com/webpack/css-loader#local-scope\n. merged\n. Thanks\n. yep, thanks\n. yup... changed this.\n. Doesn't it work that way?\n\n``` js\nreactLogo = require('../images/react-logo.png');\n\nexport default class Header extends React.Component {  \n\n  render() {\n    return (\n        \n\n\n```\n. https://github.com/webpack/react-starter/commit/307594cc8df815ad7d2adcd6a3b5c78a32388084\n. `this.state` isn't used. `null` is the default value. Why is this an issue?\n. ``` js\nconstructor(props) {\n  super(props);\n  this.state = { foo: \"bar\" };\n}\n```\n. Please send a PR.\n\nTake care that you should still be able to provide a port number as string (`PORT=80 ...`). Removing the `+` is not enough.\n. Thanks\n. Thanks\n. pretty cool...\n\n`gh-pages-deploy.sh` is propably platform dependend. I think there is some module on npm that does the same. Could you use this instead?\n. You could also look into https://github.com/markdalgleish/static-site-generator-webpack-plugin.\n\nDoes it apply here?\n. report it to the sass-loader.\n. Merged the other PR fixing this issue..\n. Thanks\n. Thanks\n. Could you change it to this?\n\n``` js\n        var readme = { __html: require(\"./../../README.md\") };\n        return ;\n```\n. I think it's `backgroundColor`.\n. Try to no use `react-proxy` here. This shouldn't be loaded on demand. (On demand loaded stuff cannot be prerendered.)\n. Why removing the `{id}`?\n. Ah sorry. you added it... That's fine.\n. use tabs...\n. You should tell about the fact that the application is compiled with webpack for prerendering using `node` target. This way JSX can be used and there is no trouble when requiring stylesheets and other static assets.\n. Ok. Feel free to ask.\n. `webpack.config.js` is not unused. It is used when you just invoke the `webpack` command. It is there to make custom builds from command line. I. e. when you want to experiment with something...\n. remove this line...\n\nWe want to use whitelisting with `include` instead of blacklisting with `exclude`\n. > How is it triggered to refresh everything from the server,\n\n`config/app.jsx` invalidates store data when you change the page. When the pages read the data again it is invalid and will be refetched.\n\n> how does it propagate changes when the user edits items, and\n\nThe component fires an action (from `app/actions.jsx`) on edit. The action is handled in `app/mainStores.jsx` and writes some items on stores. The stores update their internal cache (which is displayed on the page as optimistic update) and do server requests (through their registered handlers in `app/mainStores.jsx`.\n\n> how do values travel before ending up in some components render() ?\n\ncomponent requests values from store in `getState()` -> `app/mainStores.jsx` read (unavailable or invalidated) data from server -> internal items-store cache for the store -> `getState()` -> components `this.state` -> `render()`\n\n> how does the queue combine multiple requests? I cant imagine subsequent add/remove/edits would result in just one rest call.. do they?\n\nitems-store store a single `update` per entry. Any subsequent `updateItem()` call causes both updates to be merged (`mergeUpdates` from items-store). Requests from stores to the server are queued (`queueRequest` in `app/mainStores.jsx`). Here only a single ongoing request is allowed. All writes that happen in the meantime are merged into a single write.\n. please add shelljs to the package.json\n. could you split it into two tasks. `build-static` and `deploy-static`. Maybe someone want to test the static page before deploying... `deplay-static` should call `npm run build-static`\n.",
    "pltod": "Yes originally the library is not intended to work in the browser but now it works. I am using it inside React components to make HTTP calls to node.js server. As far as I know both request and superagent (https://github.com/visionmedia/superagent) can be used as alternatives to jQuery AJAX \nI guess most people that are using React are not interested of using jQuery so they need something to communicate with the server. The theory for isomorphic apps :) - http://www.slideshare.net/spikebrehm/2014-0313fluent -  says that we have environment agnostic libs (this is the case with request) and shimmed per environment (this is the case for superagent - it has browser property inside package.json to denote browser script that must be included during the build)\nI just tried to use superagent instead of request....the webpack build now does not have errors but have warnings.\nI am really curious what is the best approach of using one of these in the browser with webpack...\n. It works with 'node' parameter in webpack configuration. Thanks for the fast answer.\n. ",
    "lai32290": "This is help for me! Thanks for you\n. ",
    "nrempel": "@sokra \n{\n  \"browser\": {\n    \"net\": false,\n    \"tls\": false\n  }\n}\nDoes not seem to be a part of the package.json spec. I can't see any documentation here https://docs.npmjs.com/files/package.json.\nIs this is a convention that webpack uses?\nThanks.\n**Edit:\nIs it related to this spec? https://github.com/defunctzombie/package-browser-field-spec\n. ",
    "thg303": "any practical solution for this issue? or I have to push the 'eject' and leave the starter?. ",
    "localnerve": "Reviewing the error in a little more detail, I see that html-loader is just missing. This solves the issue. I added it as dependency npm install html-loader --save.\n. ",
    "trekforever": "the issue is the generated filenames are in the form of [name].js?[chunkhash] which is not getting matched by uglify's regexp: https://github.com/webpack/webpack/blob/bd02534a588b4ddc2893b5d222836f7c8df8447e/lib/optimize/UglifyJsPlugin.js#L37\ni submitted a PR that change the naming convention to [name].[chunkhash].js which is working\nhttps://github.com/webpack/react-starter/pull/10\n. ",
    "mhussa": "@trekforever Thankyou for identifying the problem and fixing it.\n@sokra Thankyou for adding the fix into webpack.\n. ",
    "DinoJay": "Sorry, I solved it, I added the corresponding loader into the webpack config file\n. ",
    "andrewdavey": "Thanks. Adding the exclude into the other if-branch seemed to work.\n. ",
    "jnak": "Awesome! Thx a lot!\n. ",
    "martintietz": "It is still not working for me. I just checked out the current master branch and the site is not loading using the production server.\n. ",
    "jenbennings": "+1\n. ",
    "FoxxMD": "+1 Could still use a better explanation of everything! This kit looks incredibly powerful but I'm not sure how to utilize everything you've done. \n. The Features section in the readme is fairly comprehensive. I'd use that as a starting point and just expand under each point. @sokra if you'd like help I'd be happy to start filling in the more obvious sections.\n. Awesome thank you! :+1:\nIs there anything we can help with? \n. Thanks @barrystaes! Great work on the guide. It's short and to the point, exactly what I think we need.\nI'd like to see some detail on how pre-rendering works in general terms. I am not using that feature yet but it seems extremely powerful and being able to implement my own system (using marty.js rather than item-store) in the future is an option I would love to have.\nI have tried to follow the code for pre-rendering but having a section in \"HowStuffWorks\" for it would be super useful :)\nAlso a short guide on entry points and how they are useful would be killer!\n. Yeah external documentation would be more useful if prerendering using webpack/this method is common.\nBy entry point I mean the entry point in webpack and using pre-rendering with it. Maybe a use case so we can see why it's useful?\nUsing item-store is fine, what I meant is that there are many areas related to pre-rendering that are not documented (comments) or explained anywhere. Some of the code is specific to how item-store works, other parts are applicable to any isomorphic application. If I was just beginning to use react and webpack (and I am) I would be seriously lost trying to make a distinction between what areas I can re-implement using my own flux flavor and what areas need to stay static (or implemented a specific way).\nI'm not asking you to write a how-to for creating an isomorphic app but comments in code with a more thorough explanation of what's going on or a \"general\" overview of the process taking place would be extremely helpful.\n. You're trying to start the server on a port that is already in use. Try changing the default port in lib\\server-development.js to something other than 8080.\n. thanks! I will give that a try. Also I figured out that this only happens when using the prerender build option so it's not critical as I'm not using that for production.\n. :+1: \n. @Rockfordal how did you switch? I've added babel to additional loaders in webpack and concatenated these to the final loaders but it doesn't seem to be working.\nI get a module parsing failure on app.jsx in config :/\n. @sokra Doesn't using loadersByExtension preclude the possibility of writing your own tests and excludes for any loaders? If I wanted to write my files as normal .js and use babel-loader I wouldn't be able to exclude node_modules, or am I overlooking some functionality in loadersByExtension that allows this?\nAlso, If I am using additionalLoaders and concat them why would they not be be working? I have commented out the extension loader for jsx and my additionalLoaders look like this:\nvar additionalLoaders = [\n        { test: /\\.js$/, exclude: /node_modules/, loader: \"babel-loader\" }//,\n        { test: /\\.jsx$/, exclude: /node_modules/, loader: options.hotComponents ? [\"react-hot-loader\", \"babel-loader\"] : \"babel-loader\" }\n    ];\n. That worked! So what is loadersByExtension doing that concatenating additionalLoaders is not?\nAlso I'll make a PR tomorrow\n. Does anyone have an opinion on using the .jsx file extension? An alternative to the current method would be to get rid of .jsx altogether and just have babel test against all .js files in the app folder. Thoughts?\n. I think my only reservation is that if you aren't using es6 features in regular JS files than running them through babel-loader is a waste of cpu cycles and time -- especially for hot dev. If we stick to specifying that .jsx files are es6 (or have actual JSX in them) than it reduces the work babel has to do. Less files to process -> faster hot module replacement -> faster dev cycle.\nOn the other hand though running .js through babel ensures any modules you may use that also include es6 features or jsx will work correctly.\n. Fair enough.\n. ",
    "geekyme": "I agree that it is really powerful but I am finding it difficult to understand and customize it to my needs. Would probably do best with a wiki or MD file that explains the design choices of the entire setup if anyone is going to adopt this boilerplate seriously. \n. ",
    "barrystaes": "This readme page example might be of interest: https://github.com/webpack/react-starter/pull/45\nIt might be of use to document it in markdown.\n. As OP says, it is not immediately obvious where to start looking, what the design is, finding the root execution point so to say. I would like to add /README.md is of great quality as-is, it got me up and running in notime.\nBut for grasping the overall design i just wrote HowStuffWorks.md with some nudges in the right direction. No details by intention. \nFeedback is very welcome!\nI'm still sorting out how the stores work.\n. OK i added a prerender paragraph to production mode.\nPerhaps it should link to respective websites with more documentation? I rather avoid deeplinks, these just tend to get out of date.\nWhat do you mean with entry points?\nI'm still a learner myself, thanks for mentioning marty.js. Should i avoid using the stores as from react-router? I'd like to have a conversation on this, somewhere. I cant afford to investigate every option regarding stores (and Flux).\n. Does this HowStuffWorks.md file help?\nhttps://github.com/webpack/react-starter/pull/51\nI agree the config files are a beast. But i also consider this the ultimate webpack example, by the webpack author actually. I'd rather learn from it than have it \"dumbed down\". There are plenty of simple webpack examples.\n. It looks like you are using window somewhere (for jQuery ?) and this variable sometimes (notably serverside) sometimes does not exist.\nTry this fix i did in my ReactPlayground: https://github.com/barrystaes/ReactPlayground/commit/111503b23daaecc944ca0ce8f6ffa6430cd4b509\n. Thanks @sokra, fixed both.\nPS. What is the argument for applying the __html key early on.. security, or keeping render() brief?\n. OK i see; this way searching for __html surfaces dangerous html usage at the source.\n. PS. In my inexperience i did this in my master branch, which of course is not practical for my development. If you could reject or accept this PR soon it would be much appreciated. :)\n. I'd like to put the \"update data\" button that triggers Application.update() on the TodoList page, but i dont know how to correctly refer to the Application instance.\n. Thanks @sokra for the insights!\nI'll look into the update action, its new to me..\n. I looked at actions, but dont grasp how to implement what you're suggesting. Could you lead the way?\nI get Flux, but haven't looked at implementations much. Just found out react-starter uses items-store. On a related Flux note, @sokra how do you feel about using Marty.js (or Reflux.js) with react-starter? The argument for using items store would be welcome in my HowStuffWorks writeup.\n. Many thanks for explaining why the items-store choice!\nI now wrote an initial How the stores work in PR https://github.com/webpack/react-starter/pull/51 but this still needs some work.\n. @sokra lets merge this and look at PR #49 ?\nThere i changed the todolist route path so its not matching everything in root (e.g. /foobar).\nThis also fixes the home page route: it was only reachable via the DefaultRoute because its a few lines below the (apparently greedy matching) todolist route.\n. FYI i wont be able to respond/work on this for a week or so.\n. :information_source: Note: current document state is interim / not fit for merge. Comments welcome though.\n. At this stage, i dont see how i can improve this document except for adding (to much) paragraphs to explain details on parts that are way better explained in their respective documentation.\nI think its best to have this writeup merged and have it evolve from there:\n- A few parts (marked with :question:) may need insights that i dont have.\n- A quick writeup on the How the webpack configuration works would be nice to complement the How the build works section.\n- The Q&A Why interim section should be removed. Some insights may be salvageable.\n- Remember to make sure that any section title is an actual question that developers ask themselves when taking a first look at this project. So \"How does X work\" and not \"You can Y\".\n. > Answer from https://github.com/webpack/react-starter/pull/51#discussion_r26384384 by sokra:\n\nwebpack.config.js is not unused. It is used when you just invoke the webpack command. It is there to make custom builds from command line. I. e. when you want to experiment with something...\n\nSo if the file is intentional, this PR request can be dropped.\n. Other packages may have a update available too, such as extract-text-webpack-plugin.\n@sokra does react-proxy-loader support react v0.13.1 ?\n. I may have found a regression but had no time to look into that yet. \n(bug might not exist, or not be related to this PR at all: sometimes item / list pages wont load)\n. :+1: ..it gets even better!\n. For posterity - if anyone is getting \"Unexpected token\" on their action implementation using async (such as the Getting Started example createMessage), this should fix it.\n. Sorry, i forgot to set state in this example. (i updated my demo branch)\nThis works:\ncomponentDidMount() {\n  this.setState({foo: \"works\"});\n}\nMy issue is that setting initial state \"the normal way\" no longer works: \ngetInitialState() {\n  return {demo: \"Hello #77\"}\n}\nDid this change in React 0.13 perhaps? I could not find anything on that in API or specs docs.\n(note: React.renderToString() does not call getInitialState() but i am not using prerender)\n. :hushed: ah now i get this console warning.. (seems i missed this somehow)\nWarning: getInitialState was defined on SomePage, a plain JavaScript class. This is only \nsupported for classes created using React.createClass. Did you mean to define a stat \nproperty instead?\nAnd indeed, i am not using React.createClass but \nexport default class SomePage extends React.Component {\nAnd i was thinking this did the same thing, but apparently not.. insights welcome.\n. Am i supposed to do this?\nconstructor(props) {\n  this.setState({foo: \"bar\"});\n}\n. Thanks @sokra !\nSeems there are more differences with regard to React.Component (React 0.13) than i realized.\nIf this is documented somewhere, i'd be happy to learn where. The only thing i found that mentioned such a thing was a coffeescript example.\n. Good one thanks. Added a \"How the build works\" section with webpack train-of-thought.\nPS. it seems the file /webpack.config.js is not used anywhere..\n. I was not aware my comment was already visible.\n. Ok that should be added to HowStuffWords.md build section then.\n. @sokra i feel that you'll probably have some remarks on my initial How the stores work section above. You grasp that way better than me;\n- How is it triggered to refresh everything from the server,\n- how does it optimize this diff when loading from server - if at all,\n- how does it propagate changes when the user edits items, and\n- how do values travel before ending up in some components render() ?\n- how does the queue combine multiple requests? I cant imagine subsequent add/remove/edits would result in just one rest call.. do they?\nAmongst other paths that the store data travels that you may know of that i dont..\n. ",
    "jgebhardt": "Just realized that #18 already has this covered.\n. ",
    "fengzhou0x": "Thanks a lot, I thought if(process.env.NODE_ENV !== \"production\") was for nodejs server. It all makes sense now.\n. ",
    "maletor": "I'm in agreement. I'm more in favor of removing the dynamic features from these configs. There should be one default config and each derivation directly overrides the configuration options. \nIt just takes forever to read and understand what's going on.\n. What is the ? doing? It loads './config/app.jsx?main'. I couldn't find anything in the documentation about passing a query parameter to an entry.\n. Possible, but a crying shame.\n. ",
    "ivan-kleshnin": ":+1: Code duplication in config files is absolutely normal. Much more better than imperative instructions. Configs are meant to be compared with diff tools to inspect the difference. Here we have basically 3 presets: prod, dev and prerender squashed in one imperative obscure chunk of code. Funny thing, when I replaced all imperative statements with declarative \"duplication\" the overall size didn't extended too much, but transparency raised in a factor of 10. There is definitely much to learn but I bet everyone here started to learn by refactoring :laughing: \n. @pikeas sure, here is raw a version https://github.com/Paqmind/starter. \nJust correct retranslation of imperative syntax to declarative. \nA newer variation of it is used here https://github.com/Paqmind/react-ultimate \nIt do not have isomorphic rendering working and some other things are disabled because of 3-rd party limitations and bugs but it should be good as a starting point anyway.\n. ",
    "pikeas": "@ivan-kleshnin Care to share your refactor?\n. @FoxxMD https://github.com/webpack/react-starter/issues/42\n. ",
    "sebas5384": "hey @sokra thanks for this awesome starter kit.\n. ",
    "pbombo": "Any progress with this?\n. ",
    "davidascher": "And I mean sendStatus(), not the deprecated send()\n. wow, totally misread the code. ignore this.\n. ",
    "mewben": "Oh sorry. Found it in lib/server-development.js. Closing this now.\n. ",
    "sslash": "I am having a different issue with this. It works when the browser is rendering, but when I prerender I get this: \n/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:2783\n            return /msie 9\\b/.test(window.navigator.userAgent.toLowerCase());\n                                   ^\nReferenceError: window is not defined\n    at /Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:2783:27\n    at /Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:2778:48\n    at module.exports (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:2799:69)\n    at Object.<anonymous> (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:1845:38)\n    at __webpack_require__ (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:21:30)\n    at Object.<anonymous> (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:246:2)\n    at __webpack_require__ (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:21:30)\n    at Object.<anonymous> (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:94:36)\n    at __webpack_require__ (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:21:30)\n    at Object.<anonymous> (/Users/micgunnu/code/Finntech/employerify/build/prerender/main.js:52:15)```\n. ",
    "kaiomagalhaes": "When I change a file from css to sass i get an error showing tht the sass-loader is not installed, after I do it it starts to throw the following error:\nERROR in ./~/css-loader?module&localIdentName=[path][name]---[local]---[hash:base64:5]!./~/sass-loader!./app/containers/Application.sass\nModule build failed: \nbody \n^\n      Invalid CSS after \"\": expected 1 selector or at-rule, was \"body \"\n      in /media/WORK/workspace/react-starter/app/containers/Application.sass (line 1, column 1)\n @ ./app/containers/Application.sass 4:14-191\nand my applicatipn.sass\n```\nbody \n  background: red\n.this \n  opacity: 1\n.this.loading \n  opacity: 0.2\n  transition: opacity 600ms\n.this .loadingElement \n  display: none\n.this.loading .loadingElement \n  display: inherit\n.loadingElement \n  float: right\n```\nAny idea?\n. @caedes Sorry bro, no. In the end I decided to use the scss.\n. ",
    "caedes": "@kaiomagalhaes I met the same issue as you yesterday night. Did you managed to solve it?\n. ",
    "HunSpeedi": "I had the same problem like @jonaswindey.\nIt solved after I installed the style-loader and the css-loader.\nhttps://github.com/webpack/style-loader\nhttps://github.com/webpack/css-loader\nSo the install process: \nnpm install sass-loader node-sass webpack --save-dev\nnpm install style-loader --save-dev\nnpm install css-loader --save-dev\nModify webpack.config.js like this\nmodule: {\n        loaders: [           \n            { test: /\\.scss$/, loaders: [\"style\", \"css\", \"sass\"] }\n        ]\n    }\nAnd the .js file like this require(\"./style.scss\");\n. ",
    "ssolanki": "After trying many solutions finally, I am able to make it work.\nThanks @HunSpeedi \n. ",
    "Hello-Zeze": "@HunSpeedi, how did you get it to work on your side?\n. ",
    "csidro": "@Hello-Zeze I wrote down above the full process! If you follow the instructions, that must be solve it i think.. ",
    "scottdevito": "@HunSpeedi 's solution solved the issue for me. I installed the packages and previously had:\n      {\n        test: /.scss$/,\n        include: paths.appSrc,\n        loaders: [\"style\", \"css\", \"sass\"]\n      },\nand it still didn't work. Once I deleted the line: \"include: paths.appSrc,\", everything complied nicely. Hope that helps.. ",
    "bsr203": "thanks. I saw it here https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L105\nbut not sure how it escaped a search in the repo.\nthanks a ton for webpack, as I am just exploring, and amazing the productivity it brings ... cheers.\n. Hi, I may close it after your confirmation.\nDo you think options allowed though the command line as in the cli,  could also be allowed through the lib? \n. nevermind. It may better I just start it from terminal without gulp. If I ever needed, I may alter config as you do in the cli binary. thanks.\n. ",
    "masudshrabon": "Yes, I have also faced the same problem while command :\n.     \nThanks to @FoxxMD .\nIts a problem on the port, nothing else.\nI have other program that works on port 8080.\nwebpack-dev-server also wants to use that port by default.\nSo I have just change the port number from 8080 to 8081 (can be anything valid other) in the _ProjectFolder \\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js_ file.\nAnothe solution is that you can stop that program working on port 8080.\nThank you :)\n. ",
    "viviannow": "I met the same proble and thaks to @masudshrabon ,his comment is so useful.\n. ",
    "bluehenry": "Same issue and resolved it by changing port number in  ProjectFolder \\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js file.   @masudshrabon Thanks!\n. ",
    "honeyjie": "very help ,change the port then it will be good. ",
    "aniruddhashevle": "This is due to port 8080 is in used already. So you can change your development server port which is not in used at the same time.\nTo change it using CLI,\nwebpack-dev-server --hot --port=8081\nOr add 'port': '8081' in your webpack JS file as follows,\n'devServer': {\n  ...\n  'port': '8081',\n  ...\n}. ",
    "saikirankv": "can you guys change the error message, like try another port... ",
    "laushinka": "@saikirankv The line \"Error: listen EADDRINUSE\" actually says exactly that. EADDRINUSE means that the port number is already in use.. ",
    "samayo": "same error, but I have no server running. ",
    "Frikki": "@sokra How do you exclude a library from prerendering?\nUpdate\nI figured I shouldn\u2019t import the library outside the class definition, but instead require it in the componentDidMount method or a called method thereof.\nSo, instead of:\n...\nimport MyWindowDependentLibrary from 'path/to/library';\n...\nexport default class MyClass extends React.Component {\n    ...\n    componentDidMount() { MyWindowDependentLibrary.doWork(); }\n    ...\n}\nI did:\n// removed import\n...\nexport default class MyClass extends React.Component {\n    ...\n    componentDidMount() {\n        const MyWindowDependentLibrary = require( 'path/to/library' );\n        MyWindowDependentLibrary.doWork();\n    }\n    ...\n}\n. Great! I must have missed that update. It works painlessly, and the architecture is becoming much clearer.\n. ",
    "juancabrera": "@Frikki thank you! had the same issue and this fix it. :+1: \n. ",
    "troutowicz": "@Frikki Dependency declarations should be kept at the top of files. A better solution for your case would be to do a conditional require at the top of your component.\njs\nconst isBrowser = typeof window !== 'undefined';\nconst MyWindowDependentLibrary = isBrowser ? require( 'path/to/library') : undefined;\n. ",
    "miss61008596": "because server can not find window, you can use this\ngetInitialState() {\n        return {windowWidth: (typeof window !== 'undefined')? window.innerWidth:undefined};\n    },\n. ",
    "derekdreery": "You can't use conditional requires in ES6 module syntax. For this I tend to write no-op implementations of anything that is client-specific (alternatively they could throw on the server, to point out that their use is an error).\n. ",
    "Andriy-Kulak": "Also, another trick you can use below! :-) I ran into the same error and saw some universal/isomorphic react/node boilerplates use this \nif (process.env.BROWSER) {\n      devToolsExtension = window.devToolsExtension();\n    }. ",
    "rihannarickeminem": "@troutowicz  thank you!. ",
    "calepsol": "Hy all \nI have this problem for server rendering. . ",
    "jonaswindey": "Great, that's awesome. So what is the general use of the /public folder?\n. Yes I saw, but what type of content should be served from there? And how do I get the public url for each environment?\n. Thanks.\n. It's linked to react-router. I have tried downgrading to \"0.12.0\" and then it's working again. \"^0.12.0\" will install \"0.12.2\" which breaks the functionality. \nI have added a pull request which fixes this.\n. ",
    "ZucchiniZe": "This is also happening to me. When I looked into the react source with the chrome extension, inside the RouteHandler component it is rendering a noscript tag.\n. ",
    "stream7": "if you are using nginx you can use something like this to keep your pretty urls and push state router\nlocation / {\n    try_files $uri /index.html;\n}\n. ",
    "josephfinlayson": "https://github.com/webpack/react-starter/pull/82 gives this capability, you'd have to make react router hash based in the code though\n. @chrismcv - could you test this?\nhttps://github.com/webpack/react-starter/pull/82\n. Got it! https://github.com/webpack/react-starter/blob/master/app/route-handlers/async.js\n. Cheers, I will look into this\n. It wouldn't help make this platform independent, I think something like this https://github.com/douglasduteil/node-git-deployor would help here. I'll test it when I get some time.\nWhat's cool about this is it gives you the simplest path to deploy react-starter, which means it spans from something that's almost production ready, so something than can be placed on the internet in ten minutes, without even splinning up a server\n. It's now cross platform\n. if (window) should do it\n. ",
    "relacsua": "@gaearon You can enable ES6 support with jsx-loader by appending ?harmony and you can see that in the config file.\n. ",
    "gaearon": "I can, but it supports a lot less ES6 than Babel. See http://kangax.github.io/compat-table/es6/\n. I think it's sane to make both JS and JSX files go through Babel.\n. > if you aren't using es6 features in regular JS files than running them through babel-loader is a waste of cpu cycles and time\nI think it can be pretty frustrating in the real project. Consider extracting functions from a component to a side module or a mixin, which are already written in ES6. Some of your non-JSX your modules would then get JSX extension.\nIf you want to use ES6 import/export syntax (and IMO you should eventually), you'd need Babel in each file anyway.\n. Personally I'd also add ?experimental&optional=runtime and add babel-runtime dependency. This would make things like Object.assign work via core-js transforms.\nBut maybe that's too edgy.\n. ",
    "Rockfordal": "babel works great for me, i excluded node_modules.\n(im using reflux, material-ui, socket.io). tnx for a superb starter!\n. ",
    "sebastienbarre": "@FoxxMD my 2 cents, I use the .react.js file extension for React components. I recall seeing it being used in Facebook's Flux examples (here and here) and kinda liked it. Granted, it's a bit long.\n. ",
    "haf": "It does, but npm build isn't the right command to run; run npm run build instead and it'll work.\n. ",
    "ShuoShen": "Great! That works. Thanks for your help.\n. ",
    "smashraid": "How can i debug with vscode\n\n. ",
    "filmackay": "What was the fix? Can't see what could fix it in the relevant wip commit?\n. ",
    "hew": "I'm having a similar issue. I just want to load an .mp4. \nWebpack creates the vid, but it's not playable. Any help appreciated. \n. Not really. But there are workarounds. You can just straight-up copy the file to wherever with the webpack copy plugin. See the bottom of this webpack config: \nhttps://github.com/hew/hew.github.io/blob/dev/webpack.config.js\n. ",
    "alex-cory": "Did any of you ever figure this out? I posted a question about this on StackOverflow.\n. ",
    "withinboredom": "Researching this issue myself, and found a lead here... I haven't been able to figure out how to bind to 0.0.0.0 instead of localhost though...\n. I'm pretty confident this is the issue, I added a host entry using the vagrant box's ip and didn't get a response but was able to get a response from inside the machine.\n. ",
    "zackify": "happening for me too... annoying. \n. ",
    "cshenoy": "I just followed the advice in this answer to get it working: http://stackoverflow.com/a/29812368/518002\nJust change 127.0.0.1 localhost to 0.0.0.0 localhost in the VMs /etc/hosts\n. ",
    "oliwerhelsen": "Gr8 work man! Thanks!\n. ",
    "Coobaha": "i think good way to handle this is to have something like css-loader?placeholders-only option\n. :+1: \n. @sokra but.. there is still an issue\nthey are not shared\n(client) <div class=\"z53edca59e642b4b85028\n(server) <div class=\u201czacbbe33f8c1d8ad03f79\n. ",
    "broberson": "npm run dev-server seems to work now, in as far as it emits a bunch of webpack output. The next step, npm run start-dev fails on line 19 in lib/server.js, trying to make a new instance of Renderer, which was supposed to be loaded from a file in the build directory which is empty except for a stats.json file.\nMaybe the instructions in README are outdated? I'm kind of puzzled.\nI've gotten it to work in production mode, so that's something.\n. ",
    "mattybow": "I think it's because SimpleRenderer.js needs module.exports = SimpleRenderer;  works when I edit that.\n. ",
    "darul75": "Well I guess I use it the wrong way. \nRendering is made by an express server side instance which render a react component and enhances an html template.\nThis html template links a bundle.js packed by webpack, in this bundle image src is fine because generated by webpack process.\nBut on server side src is missing.\n. Test is made this way\njavascript\nif (process.env.BROWSER) {\n  reactLogo = require('./images/react-logo.png');    \n  // css require then, but are fine as React do not care about it.\n}\nbut for express server I do not figure out how to match rendering image in component\n. Thanks for adding an example, I was not bundling my server side with webpack which caused problem. It looks solve on my side too. What a crazy solution then webpack. Very impressive\n. You need to apply your webpack to both client and server code files at the same time. It will use same hashes, otherwise will be different and react won't be happy\n. ",
    "AlastairTaft": "Instead of doing it in the constructor this seems to work for me\nclass MyComponent extends Component {\n  state = {\n    foo: \"bar\"\n  }\n...\n. ",
    "EugeneZ": "@AlastairTaft That only works if you are using the proposed ECMAScript class fields syntax. For example by installing the relevant Babel plugin.\n. ",
    "ibrahima": "@barrystaes thanks for that link, wish that was documented more prominently somewhere. I think it's a reasonable change but I wasn't expecting it from reading the tutorials that mention ES6 class syntax.\n. ",
    "twilsonpierce": "Make sure getInitialState is spelled correctly which was causing me to have that error. -__-  Just take your time coding.\n. ",
    "sojelee": "@twilsonpierce awsome was getting same error, I mispelled getInitialState. ",
    "Cellule": "I just tested and listen seems to take care of that. I tried changing the defaultPort to \"8080\" and it still work perfectly. Apparently, there is no need for the port to be a number.\n. ",
    "iwano": "^ would be awesome, are there any updates on this?\n. ",
    "cesarandreu": "When you generate a production build you should be using webpack.DefinePlugin, and passing it { 'process.env.NODE_ENV': '\"production\"' }. That'll cause the conditional process.env.NODE_ENV !== \"production\" to becomes \"production\" !== \"production\", so uglifyjs will do dead code elimination and remove all the prop checks and warnings.\n. ",
    "jedwards1211": "Oh, okay, cool!  I had tried running webpack with the env command, but the output bundle was no smaller than before.  Or maybe I don't have UglifyJS configured.  But I wasn't aware of the DefinePlugin, that's good to know.  Thanks!\n. ",
    "wmertens": "I have a solution and will make a PR when I have time. Basically, I create two sets of loaders, one including node_modules and the other excluding it.\n. ",
    "raptoria": "ah thanks for the hint..the problem was with how I was importing and using canUseDom.\nThis fixed it:\nimport ExecutionEnvironment from \"react/lib/ExecutionEnvironment\";\nif (ExecutionEnvironment.canUseDOM)\n. ",
    "ShuaiYuan87": "I tried to put the meta tag in render() function, but it doesn't compile. Any idea where to put these? Thanks.\n. I guess my question is essentially where to put the  tag? I don't see the .html file nor putting it in render() function works. This should be a general question, anyone has any idea?\n. ",
    "thenewguy": "So I found an article on the internet that indicated the issue might be pathname lengths imposed by the Windows host.  Ref http://perrymitchell.net/article/npm-symlinks-through-vagrant-windows/\nI have gotten a little farther using a symlink to a directory on the box filesystem.  Now everything installed.  Just can't get it to run yet.  For some reason npm run dev-server can't find express even though it is installed and visible under /vagrant/node_modules/express. /vagrant/node_modules/ is symlinked to /var/opt/node_modules/vagrant\n. Oddly enough:\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$ ls $(npm root)\nasync                        file-loader         react-router\nbabel-core                   html-loader         stats-webpack-plugin\nbabel-eslint                 items-store         style-loader\nbabel-loader                 less                superagent\nbody-parser                  less-loader         url-loader\ncss-loader                   markdown-loader     uuid\neslint                       null-loader         webpack\neslint-plugin-react          react               webpack-dev-server\nexpress                      react-hot-loader\nextract-text-webpack-plugin  react-proxy-loader\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$\nBut no joy:\n```\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$ sudo npm run dev-server\n\nreact-starter@0.0.0 dev-server /vagrant\nwebpack-dev-server --config webpack-dev-server.config.js --progress --colors -\n-port 2992 --inline\n\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'express'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.Module._load (module.js:286:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object. (/var/opt/node_modules/vagrant/webpack-dev-server/lib/\nServer.js:4:15)\n    at Module._compile (module.js:430:26)\n    at Object.Module._extensions..js (module.js:448:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\nnpm ERR! Linux 3.13.0-63-generic\nnpm ERR! argv \"/usr/bin/iojs\" \"/usr/bin/npm\" \"run\" \"dev-server\"\nnpm ERR! node v2.5.0\nnpm ERR! npm  v2.13.2\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-starter@0.0.0 dev-server: webpack-dev-server --config webpack-de\nv-server.config.js --progress --colors --port 2992 --inline\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the react-starter@0.0.0 dev-server script 'webpack-dev-server\n --config webpack-dev-server.config.js --progress --colors --port 2992 --inline'\n.\nnpm ERR! This is most likely a problem with the react-starter package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     webpack-dev-server --config webpack-dev-server.config.js --progress\n --colors --port 2992 --inline\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls react-starter\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Linux 3.13.0-63-generic\nnpm ERR! argv \"/usr/bin/iojs\" \"/usr/bin/npm\" \"run\" \"dev-server\"\nnpm ERR! node v2.5.0\nnpm ERR! npm  v2.13.2\nnpm ERR! path npm-debug.log.c52d3a8b9fc3c997429a67e0c8a75067\nnpm ERR! code ETXTBSY\nnpm ERR! errno -26\nnpm ERR! syscall rename\nnpm ERR! ETXTBSY: text file is busy, rename 'npm-debug.log.c52d3a8b9fc3c997429a6\n7e0c8a75067' -> 'npm-debug.log'\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /vagrant/npm-debug.log\nvagrant@vagrant-ubuntu-trusty-64:/vagrant$\n```\n. I updated my previous comment.  I had copied the wrong command to generate the error output for the comment\n. For reference, I demonstrate the environment works when copied off of the shared folder so that symlinked node_modules isn't required https://github.com/npm/npm/issues/7308#issuecomment-139841335\n. I've worked out the issues.  I am going to follow up with a pull request to make windows usage seamless out of the box\n. ",
    "bencripps": "+1\n. ",
    "HosseinAgha": "same problem here \nI'm using react 0.14.8 with webpack-dev-server 1.14.1\n. ",
    "shaimr": "If you rm -rf node_modules and run npm install it will work.\nBut I don't understand why it happened.\n. ",
    "imtmh": "I did rm -rf node_modules and run npm install, still not working for me :(. ",
    "AlexSwensen": "I would try running this to see what happens.\nnpm cache clear --force\nrm -rf node_modules\nnpm install\nI ran into this recently in a CI env. Clearing everything and installing from scratch (with the above steps) fixed it for me.\nTested in NPM 5.1.0\nAssuming you have webpack installed correctly with its dependencies, this should work fine.. @Walt-D-Cat Yeah, it has something to do with the npm cache getting in a strange state in 5.1.0. (NPM stores a separate cache in addition to node_moduels)\nI usually recommend just checking the latest version of npm with npm install -g npm@latest (you may need sudo if your permissions aren't set up correctly)\nNPM 5 has some great (but new) changes. It's going to take some time for the rest of the Node ecosystem to catch up. I'm sure when Node 8 goes LTS with NPM 5 included it will help a lot. That is still a few months out though.\nBest of luck!. ",
    "Walt-D-Cat": "@AlexSwensen thanks, that three step process cleared the error.  Which is funny (funny euw?, not funny haha) 'cause this is a new project and all the pieces were just installed ... . ",
    "thodges314": "Helped me also, thanks!. ",
    "jefflueck": "I did this and now it says that the express module is missing.  The app crashes on server.js command.. ",
    "chungwong": "There are some major breaking changes in react router V1.0.0\nhttps://github.com/rackt/react-router/blob/master/CHANGES.md\n. ",
    "montogeek": "The status is: Dont use it at all :)\n. http://andrewhfarmer.com/starter-project/\n. ",
    "erkie": "Why? What to use instead?\n. "
}