{
    "pose": "Thanks @clkao!\n. Thanks!\n. Hi @andywaite, thanks I'll be taking a look at this and getting back to you. Thanks!\n. Verified. Thanks!\n. Thanks!\n. Hi @toto42,\nYes, we will add. Currently, that's being discussed here: https://github.com/auth0/auth0-angular/pull/7. You can play with that branch until we finally merge it to master. Anyway, I'll let you know here when that happens.\nThanks in advance,\n. Hi @toto42,\nI've just merged this feature. Please take a look at this example for more information: https://github.com/auth0/auth0-angular/tree/master/examples/delegation-token\nThanks in advance,\n. Hi @toto42,\nThere seems to be other issues apart from the delegation token one. Specially, the second issue that you are having should not work like that at all. Can you give me more details on how to reproduce that error? \nPlease, let me know if you can send us an email at support@auth0.com or if you can contact us at chat.auth0.com so we can see those errors in detail.\nThanks in advance,\n. I've made a couple of changes and added expiration logic. Also, I've added some unit tests for this. Please, check https://github.com/auth0/auth0-angular/tree/master/examples/delegation-token in order to see an example of how to use the newly added getToken method. \nThanks in advance, \n. Hi @toto42, @turkingj did you manage to make getToken method work for your use cases? Please, let me know how can I help you. Thanks in advance.\n. @toto42 You are welcome!\n. Good catch, thanks!\n. Hi @jawgardner,\nHow are you? Yes, you can remove $route dependency from here and that's it: https://github.com/auth0/auth0-angular/blob/master/auth0-angular.js#L260\nOr, if you are not planning to use redirect authentication strategy, you can include auth0-auth module alone without modifying any file. In that case, you will need to use popup strategy as the redirect callback is not going to be handled.\nHope that helps!\n. Hi @jawgardner,\nWe have just removed all dependencies to ngRoute from our code. I recommend that you take a look at the changelog for more information.\nThanks in advance,\n. An small detail to check: Make sure that you have cleared your cookies from previous sessions.\nWe have added a changelog with all the new changes.\n. Hi @stefanhenze,\nHow are you? You should not have to add any parameter for the intended behavior. Anyway, the correct way to parametrize it should be:\njs\nauth.signin({popup: true, connection: 'linkedin', scope: 'openid'});\nWe aren't able to reproduce it. Would you mind sharing your example so we can analyze what else could be going wrong? \nThanks in advance,\n. Hi @stefanhenze,\nFirst of all, thank you very much. We have just published auth0-angular version 0.1.1 that solves this issue. The profile is stored in memory and fetched each time the page reloads. Please, take a look at the examples (they may have changed a bit).\nPlease, let me know if this solves the issue and if there is anything else we can help you with.\nThanks in advance,\n. Hi @stefanhenze,\nHow are you? We have found that this issue is related with some behavior change in Angular 1.2.16. It's currently fixed in the latest version of auth0-angular. Please, let me know if you are still having this issue.\nThanks in advance,\n. Please, notify: https://github.com/ewelton/auth0-angular-require-example/pull/1 when solved.\n. Fixed on 0.2 release. Added RequireJS example.\n. This has been solved in the 0.2.0 version\n. No longer valid. Moved issue to Auth0.js https://github.com/auth0/auth0.js/issues/29\n. Hi @steve21124,\nHow are you? Yes, as this is this is Auth0 SDK for Angular. If you have read the blogpost about Tokens and Angular this is the repository you are looking for: https://github.com/auth0/angular-token-auth\nThanks in advance,\n. Fixed on 0.3.0\n. Hi @mintbridge,\nHow are you? Have you checked the following example: https://github.com/auth0/ionic-auth0/ ? Let me know if that works for you or if you were looking for something else.\nThanks in advance,\n. Hi @mintbridge,\nHow are you? I think you are right it should be https://\nSorry, the example is not quite right and it will only work locally. The right way will be using the following plugin: https://github.com/auth0/phonegap-auth0-sample/tree/master/plugins/com.auth0.sdk . I'll let you know when we update the example.\nThanks in advance,\n. Hi @mikeAtCH / @edson-,\nThis has been solved in the 1.1 version. For a full fledged example, you may check: https://github.com/auth0/ionic-auth0\nThanks in advance! \n. Except for those two comments I'm ok, solve them and merge!\n. Hi @jawgardner,\nHow are you? Just add \"auth0-angular\": \"0.3.3\" to your bower.json. I've tried executing the following command and it did work (should be the same):\nsh\nbower install auth0-angular\nThanks in advance,\n. Already added last version to npm too: https://www.npmjs.org/package/auth0-angular\nThanks in advance, \n. Added to bower.json and included in README.md\n. @levicc00123 Great, thanks!\n. Can you show me how are you calling new Auth0 and the signin method?\nThanks!\n. @mgonto I'm not able to reproduce this issue: Neither on Widget nor in Auth0 Angular. Are you sure that you are using latest and greatest widget js (4.0.8)? \n. Yes, I've already tried that and works for me\n. What else could be going wrong? I've checked with both angular 1.2 and 1.3 too.\n. I've asked @cristiandouce to reproduce it in order to check what I could've missed and he wasn't able either :(\n. Yes, we all agree that remote is currently happening. But is this happening locally? Thanks in advance.\n. No problem. I would've never imagine it was bower cache related.\nThanks!\n. This is already reported here: https://github.com/auth0/auth0-angular/issues/13\n. Hi @ericthelast,\nHow are you? Can you show me how are you configuring auth0-angular? Could it be possible that you are including both auth0-redirect and auth0 redirect modules? Take into account this two modules should not be used together.\nThanks in advance,\n. Hi @ericthelast,\nHow are you? We have simplified the examples and in the new versions of auth0-angular you need to do even less. For instance, the defer.resolve in the app.run block is no longer needed. You can check: https://github.com/auth0/auth0-angular/tree/master/examples/widget-redirect in order to take a look at how your code should look like.\nAlso, you need to change your module name from auth0 to auth0-redirect.\nLet me know if that works or if you are still facing issues after making the changes.\nThanks in advance,\n. Awesome, thanks to you!\n. :+1: \n. @mgonto Done\n. Hi @skoczen, \nHow are you? It should be pointing to: build/auth0-angular.js in case we change it to multiple files. But I'll do it for you, don't worry.\nThanks in advance,\n. Done, check version 0.4.2 and let me know if it works.\nThanks in advance,\n. @skoczen Thanks to you!\n. Let @turkingj when fixed\n. Hi @turkingj,\nHow are you? This have been fixed in the 0.4.5 version.\nThanks in advance,\n. Thanks @turkingj, I think this will ok for now.\n. Hi @mikeAtCH,\nHow are you? I'm sorry. Yes, you are right. We are aware of that and we have an already existing issue: https://github.com/auth0/auth0-angular/issues/20. We are working on bringing support to Phonegap to Auth0 Angular, in the meantime you can check https://github.com/auth0/phonegap-auth0 but, unfortunately, is not integrated with Angular. May I contact you know when we have this feature ready?\nThanks in advance,\n. Duplicated of #20 \n. \n. @mgonto Yes, thanks! We need to frame this inside the https://github.com/auth0/auth0-angular/issues/18 issue.\n. Hi @syamanaka, How are you? Currently, that's the only way we support but thanks for reporting, we will think about making this easier.\n. I've check it lightly and I agree to most of the changes. I want to do some extra tests. I'll get back to you when I'm done.\n. Hi @mgonto,\nHow are you? Thanks again for the PR and sorry for the delay.\nI've found some issues running grunt scenario. Can you make sure it works? You can find the instructions to set the environment up here: https://github.com/auth0/auth0-angular/blob/master/docs/testing.md\nOne thing about getToken, I know that you have removed the delegation token storage but there was a reason for that: If a user wants to authenticate with two apps at the same time he needs to keep track of the tokens he has requested and fire the logic if the token has expired. In the previous version, he will use getToken and obtain always a valid token. Now he needs to the check on their side. If we decide to go with that, we should provide an example for our existing customers to migrate.\nAlso, I've noticed that you have erased the signup, delegation token and redirect examples. I don't mind erasing redirect but take into account that some users have found signup and delegation token examples really useful. Specially, the delegation token examples showed how to authenticate with two apps and provided an implementation of a custom interceptor for that case (also we need to update or remove the README.md file in the examples folder that is outdated and update the docs).\nLet me know what you think.\nThanks in advance,\n. @mgonto Good job on the integration tests, I really liked that you removed $scope.$parent and used the css binding to find the element.\n. Seems ok to me. Integration tests run on my machine. What do you think @mgonto? \nOne thing: I would move promisify helper inside Utils and then move Utils as a value inside a module named as auth0.utils. So we can unit test promisify. @gdi2290 can you add a very basic unit test of the helper? Thanks!\n. Thanks!\n. @gdi2290 I think is ok, but let's wait for @mgonto's opinion.\n. Thanks!\n. :+1: \n. :+1: \n. Can you show me an snippet of how you use that method? I would like to understand if overriding id_token is the right call here or if we should create an extra field to save the delegation token. Also, I would need that so I can document this new feature :) Thanks!\n. Please, remove this, thanks!\n. I agree this looks better but for simplicity we are showing the explicit URL and not using a constant. Can you revert this? Thanks!\n. I'm ok if we want to show that the JWT can be used server side but I would like to see it implemented in Java and .Net too to be consistent.\n. :+1: \n. I have checked Java example and it's being done that way. We need to check if the .net example does the same.\n. Ok, then I guess it's ok.\n. Ok, let's do the following. I'm going to merge this and change (in the README and the js file):\njs\n  var API_ENDPOINT = 'http://172.16.210.131/api/protected';\nto be:\njs\nangular.module('myApp').contant('apiPrefix', 'http://172.16.210.131/');\nI think that's a good trade off and follows the Angular practice for constants. I will be doing that change after merging, what do you think?\n. ",
    "jayzeng": "Basically changed auth0.signout(); to auth0.signout(); \n. ",
    "xmaIIoc": "Thanks guys!\n. Hi,\nI tried to implement your code in my application but I ran into some problems.\n(I simply copy/paste to add your getDelegationToken to auth0-angularLib)\nThe first one is when i try to use use your code, the call to getDelegetionToken to the auth0Lib : \nthat.auth0Lib.getDelegationToken(targetClientId, id_token, options, function (err, delegationResult) {...})\nresponds me that is doesn't exist : \nTypeError: Object #<EventEmitter> has no method 'getDelegationToken'\nEven though I include the auth0-widget lib, where this function exists, and the other functions work. I tried to include :\nhttps://cdn.auth0.com/w2/auth0-widget-2.6.1(.min).js and I tried to include it in my local project directory but nothing seems to work :(\nMy second problem is when i tried to use your getDelegationToken method with your snippet I wanted to see when the \"then\" is really called, and i noticed that it was called when the popup appeared : \nauth.signin({\n      popup: true,\n      connection: 'domain.com',\n      scope: 'openid'\n    }).then(alert(\"this appears when the auth0-widget is popping\"));\nIs this what it is supposed to do? Shouldn't it be called after the signin is fully completed (i.e. when the user is authenticated to auth0? or after it failed?).\nSince i'm fairly new to javascript, there is a big chance I'm just misusing your code, if so could you explain to me how did you implemented it and how it is supposed to work please? \nThanks in advance!\n. Hi, yeah sorry I put that in pending I had to do something else, but yes I ended up by doing what I wanted to do, thanks to your example!\nThanks for you work! It helped me very much :)\n. ",
    "turkingj": "Using the auth0-angular api-authentication code as an example, i am thinking it would be best to scope the front end app to talk to the api backend during the signin process ?\n``` js\n  $scope.doOffice365AuthWithPopup = function () {\n    auth.signin({\n      popup: true,\n      connection: 'domain.com',\n      scope: 'openid'\n    })\n    .then(function() {\n  var targetClientId = 'kjhasdhadlDFkfk...';\n  // auth.idToken generated from auth.signin\n  var options = { scope: 'openid' };\n\n  auth.getDelegationToken(targetClientId, auth.idToken, options)\n  .then(function(token) {\n\n    // output token?, check expires_in?\n    // token = { \"token_type\": \"Bearer\", \"expires_in\": 3600, \"id_token\": \"eydfjdjdj\" }\n\n    // redirect to main page, api communication good to go!\n    $location.path('/');\n\n  }, function(err) {\n\n    window.alert(err.error || err.message || err.error_description);\n\n  });\n\n}, function(err) {\n  window.alert(err.error || err.message || err.error_description);\n});\n\n};\n```\nIn relation to \"I would like to understand if overriding id_token is the right call here or if we should create an extra field to save the delegation token\". \nIs there a need to keep the original token?, if so what for?, the new api token can be used to call another api on behalf of the user?\nAnyway thats my thoughts soo far....\n. Hi Alberto\nI'm doing well\nThanks for the heads up...\nOn Friday, 27 June 2014, Alberto Pose notifications@github.com wrote:\n\nHi @turkingj https://github.com/turkingj,\nHow are you? This have been fixed in the 0.4.5 version.\nThanks in advance,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/35#issuecomment-47398331.\n. \n",
    "jawgardner": "OK, l'll try it! Thanks.\n. Oh, that worked! Thankyou!\nOn May 6, 2014, at 6:32 PM, Alberto Pose notifications@github.com wrote:\n\nHi @jawgardner,\nHow are you? Just add \"auth0-angular\": \"0.3.3\" to your bower.json. I've tried executing the following command and it did work (should be the same):\nbower install auth0-angular\nThanks in advance,\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "jfromaniello": "Hi @stefanhenze this should be fixed in recent versions, more specifically since we change the scope in this dependency, changeset:\nhttps://github.com/auth0/auth0.js/commit/edba82f1c3c1e4cee8e599879cfb3b9a27d83fa9\nCan you check with latest version?\nThanks\n. The problem is here:\nhttps://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L79\neven using scope: openid (without profile), auth0-angular retrieves the entire profile and store it in a cookie. @pose we should store the id_token but not the profile, always fetch the profile using auth0.getProfile(idtoken, cb)\n. You need events not promise because it is not clear what is the completion condition of that promise.\nI've seen other users asking to reject the promise when the widget is closed, or when the popup is closed, or when the password is wrong, etc.\n. ",
    "stefanhenze": "Ok, .... I'm trying to ... didn't get that far yet. I also updated auth0-angular, just to discover that apparently promises are gone???? And replaced by global events? I hope I'm missing something fundamental!?\n. Unfortunately, the update to auth0.js didn't solve the problem. The profile is still too long and _deserialize breaks after reloading with a long profile - the cookie value is undefined which causes a JSON parse exception.\nSince I don't need the profile, I changed the _deserialize method to this for now. Not sure if that's good enough for a pull request, but it serves my needs:\n```\n  Auth0Wrapper.prototype._deserialize = function () {\n    if (!this.$cookies.idToken) {\n      this.isAuthenticated = false;\n      this.profile = undefined;\n      this.idToken = undefined;\n      this.accessToken = undefined;\n      return;\n    }\ntry {\n  this.profile = JSON.parse(this.$cookies.profile);\n} catch (e) {\n  this.profile = undefined;\n}\nthis.idToken = this.$cookies.idToken;\nthis.accessToken = this.$cookies.accessToken;\nthis.isAuthenticated = !!this.idToken;\n\n};\n```\n. Hm, is there some documentation about the scope parameter and how to use it with the angular module? I'm not really generating query strings there. I tried these options, but they all keep returning the profile value:\nauth.signin({popup: true, connection: 'linkedin', options: {scope: 'openid'}});\nauth.signin({popup: true, connection: 'linkedin', scope: 'openid'});\nand\nauthProvider.init({\n        ...\n        options: {\n            scope: \"openid\"\n        }\n    });\nRegardless though, I don't think the cookie saving should throw an exception and not keep the user logged in, even if the developer tries to fetch the profile - that just happens to be too long because the user has a long bio in his LinkedIn profile.\n. I can try to create a minimal example that shows the effect. Do you have a plunkr or something else with a bare bone Angular + auth0 app?\nDid you try logging in with LinkedIn with a user with a long bio? When I try my personal account, the JSON.stringified profile is 3591 chars long, the bio is 680 characters. Maybe try with a user with a very long bio in LinkedIn. Also, I'm not sure why the browser claims that the cookie is more than 5000 characters long, but maybe that's due to some encoding.\n. The fix works. However, when logging out, Angular now saves the string \"undefined\" as the cookie values, which makes auth0.js crash when deserializing (see https://github.com/auth0/auth0.js/issues/11).\n. You guys are great! Sounds very much like a bug in Angular. Thanks for working around it. I will check it out on Monday\n. ",
    "woloski": "Stefan, can you show us how you are calling the singnin method? the way the protocol works is that when you send the scope=openid querystring parameter, you get back a small token containing only the user id, audience and expiration.\nWhen you use \"scope=openid profile\" you get back the full profile.\u00a0\nBy default auth0js will use scope=openid unless you pass {scope: \"openid\"} to the signin method.\nOn Thu, Apr 3, 2014 at 9:21 PM, Stefan Henze notifications@github.com\nwrote:\n\nUnfortunately, the update to auth0.js didn't solve the problem. The profile is still too long and _deserialize breaks after reloading with a long profile - the cookie value is undefined which causes a JSON parse exception.\nSince I don't need the profile, I changed the _deserialize method to this for now. Not sure if that's good enough for a pull request, but it serves my needs:\nAuth0Wrapper.prototype._deserialize = function () {\n    if (!this.$cookies.idToken) {\n      this.isAuthenticated = false;\n      this.profile = undefined;\n      this.idToken = undefined;\n      this.accessToken = undefined;\n      return;\n    }\n    try {\n      this.profile = JSON.parse(this.$cookies.profile);\n    } catch (e) {\n      this.profile = undefined;\n    }\n    this.idToken = this.$cookies.idToken;\n    this.accessToken = this.$cookies.accessToken;\n    this.isAuthenticated = !!this.idToken;\n  };\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/auth0/auth0-angular/issues/11#issuecomment-39520594\n. it happened to me as well (online)\n. why? this is actually a nice thing to show\n. Ok, let's start with this and add issues for the rest :dart: \n. I think this is because the PHP example needs apache and you typically run it on a VM. Right @hrajchert?\n. \n",
    "mgonto": "This has been added.\nNow, we have a new module called auth0.storage: https://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L49\nYou just gotta reimplement a service called authStorage which should have the following methods:\n- store(idToken, accessToken, state): This should save this 3 parameters somewhere for later recovering them. By default, it uses client cookies.\n- get(): This returns an object with idToken, accessToken and state fields filled from where they were saved.\n- remove(): This removes all 3 fields from the storage.\nIf you implement this, you'll be able to use the storage you want.\nThanks!\n. This has been added.\n. It has been fixed.\nNow you can do:\n``` js\n// ui router\nauthProvider.init({\n  domain: '...',\n  callbackURL: '...',\n  clientId: '...',\n  loginState: 'login' // the name of the state that shows the login\n})\n$stateProvider.state('login', {\n...\n})\n.state('userInfo', {\n  templateUrl: '...',\n  controller: '...',\n  url: '/info',\n  data: {\n    requiresLogin: true // This makes it so that if the user tries to go to /info and he's not authenticated\n    // he will be redirected to the login page\n  }\n});\n// ngRoute\nauthProvider.init({\n  domain: '...',\n  callbackURL: '...',\n  clientId: '...',\n  loginUrl: '/login' // the url that shows the login\n})\n$routeProvider.when('/login', {\n...\n})\n.when('/info', {\n  templateUrl: '...',\n  controller: '...',\n requiresLogin: true // This makes it so that if the user tries to go to /info and he's not authenticated\n    // he will be redirected to the login page\n});\n```\n. Hey,\u00a0\nWe should also add it to npm for people using Browserify I think. What do you think ?\u00a0\nCheers\n\u2014\nSent from Mailbox\nOn Tue, May 6, 2014 at 10:32 PM, Alberto Pose notifications@github.com\nwrote:\n\nHi @jawgardner,\nHow are you? Just add \"auth0-angular\": \"0.3.3\" to your bower.json. I've tried executing the following command and it did work (should be the same):\nsh\nbower install auth0-angular\nThanks in advance,\nReply to this email directly or view it on GitHub:\nhttps://github.com/auth0/auth0-angular/issues/23#issuecomment-42379932\n. Auth: https://github.com/auth0/auth0-quiz/blob/gh-pages/src/app/login/login.js#L14-L18\n\nLogin: https://github.com/auth0/auth0-quiz/blob/gh-pages/src/app/login/login.js#L35-L43\n. Yes I'm using 4.0.8.\nJust clone https://github.com/auth0/auth0-quiz and:\n1. Run grunt watch in the main folder\n2. Run serve on the build folder and try to login from http://localhost:3000 \nYou should be able to easily reproduce it locally that way.\nCheers!\n. You can't reproduce it remotely in http://auth0.github.io/auth0-quiz/compile/#!/login either? Eugenio just tried and he was able to\n. It worked now. I had a wrong version cached on bower and that's why after git clone again it still didn't work. After cleaning bower cache it did work.\nThanks for helping out!\n. This has been fixed in the latest refactor in 1.0.1. \nCan you please check it out?\nThanks!\n. This has been finished.\n. This was fixed in the refactor. @pose can you notify Espen?\n. Thanks!\n. This has been fixed.\nInterceptor used is from angular-jwt now\n. Fixed.\nNow you can do:\njs\nauth.config.auth0lib ==> Widget or Auth0.js\nauth.config.auth0js ==> Always Auth0.js\n. Fixed. Added the auth.refreshToken() method\n. Fixed\n. @edson- auth0-angular now works correctly with Phonegap if you update to the latest version of both.\n. Fixed.\n. Fixed\n. Fixed.\n. @flynnwt you're right about that. Promises don't get called more than once. How would you implement the promise with the Login then in this case?\nThanks!\n. > I think there has to be a way to track the popup state. The popup could close, and the reject code could do another signin. Or, the popup stays active, and the promise isn't resolved or rejected. Otherwise, only the events can be used to track login status. But maybe the events (or auth object) are what really need to be watched since loginSuccess can occur on page reload.\nI think we may implement a promise that gets called more than once after fullfilled and that would work. I don't see any other option.\n\nUnrelated - I also noticed that when loginSuccess is fired, auth.profile is undefined. Is this intended? It seems like this should at least be a promise. But this works...\n\nYou're right, profile isn't still got. However you can inject profile there which will be the promise of the profile that is being already fetched. Does that work out?\nThanks!\n. > OK, thanks. I'll have to look at that. I was expecting auth.profile to be valid (either as the value or a promise).\nThe problem is that I cannot make it so that profile is something once and then something else. Well, I can but it's confusing. And as a lot of people don't completely get promises, I decided to just use profile there so that people can $watch it. For advanced users (like you :D), you can still inject the profile promise.\nI hope this makes sense!\n. @jfromaniello \n. Solves: #47 #44 #43 #41 #40 #39 #33 #18 #14 #13 (It's separated but people need to implement the different serializers and deserializers for now since they're few).\n. Now finished updating all documentation :)\n. > I've check it lightly and I agree to most of the changes. I want to do some extra tests. I'll get back to you when I'm done.\nThanks :D\n. Hey,\nThanks for the review :).\n\nI've found some issues running grunt scenario. Can you make sure it works? You can find the instructions to set the environment up here: https://github.com/auth0/auth0-angular/blob/master/docs/testing.md\n\nI have not been able to run it, that's why it doesn't work. I'll try to run it if I can\n\nOne thing about getToken, I know that you have removed the delegation token storage but there was a reason for that: If a user wants to authenticate with two apps at the same time he needs to keep track of the tokens he has requested and fire the logic if the token has expired. In the previous version, he will use getToken and obtain always a valid token. Now he needs to the check on their side. If we decide to go with that, we should provide an example for our existing customers to migrate.\n\nI have removed Token Storage because that should be part of Auth0.js not of AngularJS, so if we want to implement this, we should add it there. For the user, there shouldn't be a change since the call to getToken receives a promise like before, the only difference is that it takes longer now, but for the interface purporse, it's 100% the same.\n\nAlso, I've noticed that you have erased the signup, delegation token and redirect examples. I don't mind erasing redirect but take into account that some users have found signup and delegation token examples really useful. Specially, the delegation token examples showed how to authenticate with two apps and provided an implementation of a custom interceptor for that case (also we need to update or remove the README.md file in the examples folder that is outdated and update the docs).\n\nI'll create new examples for Delegation and Signup then. No problem :).\nCheers\n. Just fixed Protractor tests. Will continue the rest later on\n. Added examples back :).\n. Merging now!\n. As @pose says it should indeed be on Utils. However, we can't transform Utils into a value since I use it on the provider and providers can't inject values, just constants\n. @gdi2290 so I'd do the following:\n1. Leave everything in Utils object. Don't worry about that, besides that, if we wanted to do that, that should be part of another PR, not this one.\n2. Add to the Utils object the safeApply and applied functions.\n3. Make the safeApply and applied functions receive the scope as a parameter so that you can define them in Utils object and not later on.\n4. Assume in promisify that every callback should be applied, so simply call applied always. Every callback should be applied since we want Angular to know about this new turn\n5. This would mean promisify now receives the scope as a parameter as well, and I think that's ok.\nWhat do you think? \nThanks!\n. Just so that you know, I think that auth0utils isn't working right now because we're always adding methods to an existing object which we shouldn't anyway.\nIf we were to use it as a service, we should create a provider and add methods that don't need the scope as provider methods, then methods that do need the scope, as service methods, and then expose the provider methods as service methods as well. That's probably what I'll be doing after merging this PR, but let's do them separately, no need to do all together.\nThanks!\n. Do you think you can do this? \nThanks!\n. Sure, I\u2019ll continue it, no problem.\nThanks Patrick :)  \n\nMartin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina\nTwitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto\nOn Thursday, 10 de July de 2014 at 15:43, PatrickJS wrote:\n\nHey @mgonto (https://github.com/mgonto) do you think I can hand this PR off to you. I don't have much free time after work atm. Although, I don't think you need promisify to include $scope unless you are running $digest rather than $apply\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/pull/50#issuecomment-48646515).\n. Just used part of your code and added promisify :).\n\nThanks!\n. Awesome, I'll merge it in a bit.\nThanks!\n. Can you rebase? After that I'll merge. Sorry!\n. That parameter no longer exists.\nClosing!\n. Thanks for the report. \nFrom what I'm seeing, some of this errors like the one below don't make sense. module is defined by Angular, so why is this error being thrown? Hmm\n\nJSC_POSSIBLE_INEXISTENT_PROPERTY: Property module never defined on angular at line 27 character 2\nangular.module('auth0', [\n. Hey,\n\nWe're running the file through Grunt. That should be working. Have you tried our already minified file? You can check the config we're using. It's important to use ngAnnotate.\nCheers!\n. @pmq thanks for the feedback. @cristiandouce, can you check this out?\n. This is a bug, I'll work on this right now.\nThanks for the report!\n. This is now handled.\nIf your token is expired, the following will happen:\n- If you have set either the loginUrl or the loginState, the app will be redirected to that page\n- Otherwise, the handler for forbidden will be called so that you can do whatever you need in that case.\n. Released as 1.1.3\n. Hey,\nSo we actually support both ui-router and ngRoute.\nYou can read more about this here and https://github.com/auth0/auth0-angular/blob/master/docs/routing.md.\nAlso, in the code, please check this which handles the $stateChangeStarted which is from ui-router.\nThanks!\n. No problem.\nThanks for creating the issue :).\nAre you using this lib?\nThanks!\n. That's awesome!\nThanks for the kind words :). If you have any other doubt, just shoot.\nThanks!\n. Thanks for the report. I'll take a look at it.\n@jfromaniello can I ask for your feedback here? Does the SSO request return another field for the name if DB connection is used? What about enterprise\n. @jfromaniello any news here?\n. Sorry for taking so long!\nJust fixed it by stating the name :).\nThanks for the report!\n. Hey,\nThanks for the report. It's probably that the AWS delegation works differently from the rest.\n@siacomuzzi can you give me a hand here? The AWS delegation token doesn't return the token in the id_token field? Where does it return it? So that I can change the SDK and fix this.\nThanks!\n. Hey,\nIt should be working now.\nYou should ask it like:\njs\nauth.getToken({api: 'aws'}).then(function(token) {});\nPlease confirm me if this works :).\n. I'm thinking towars callbacks as well.\nI agree that Observables are awesome @gdi2290 but as you say, as not so many people know them, I think it might be a difficult interface for most people.\nI think I'll go with Callbacks and Events, so that people can choose.\n. I just released version 2.0 :) with these changes.\n. Hey @syamanaka \nThanks for the bug report!\nYou're right that unfortunately that cannot be done by $cookies. What I'd suggest in that case, is to write a very straight forward authStorage that works with localStorage instead of $cookies. It should be pretty straight forward.\nWe'll add other ways of saving it by default in the future. Check this page to see what needs to be implemented\n. Just changed the default way of saving information to localStorage if available, otherwise, it still uses $cookieStore.\nThis issue is now resolved. \n. Depends on https://github.com/auth0/auth0.js/issues/37\n. Implemented :) \n. Hey guys,\nyou're both right.\nJust submited a new version (2.0.6) with the new dependencies set on the bower.json \nLet me know if that works our for you now!\n. And if you're not using bower, please update either to auth0.js 4.0 or auth0-widget.js 5.1.8\n. No problem :). Thanks for the report and letting us know!\nGlad to help!\n. Thanks for the report.\nThat makes sense. I'll implement this.\nI have to first check what's answered if auto_login: false is sent so that I can send that to the callback.\nThanks!\n. @gdi2290 are you using CDN or NPM or bower for the auth0-widget dependency?\n. Just saw it. Somebody released it today with old dependencies. 5.2.5 was working. Let me release 5.2.7.\n. Tell @cristiandouce he owes you a beer :P hahahaha\n. Just pushed 5.2.7.\nLet me know if this works ok for you :) \n. Hi @iotaweb \nWe're certainly going to update auth0-angular to Auth0 Lock. We're still in the test phase of Auth0 Lock that's why we haven't updated the tutorials nor anything related. We're having some people (and us) beta test it. Once we feel it's 100% ready, we'll then migrate auth0-angular to lock.\nDoes this make sense?\nThanks!\n. Thanks for the PR :).\nThis is a major change. We need to fix the documentation as well as the examples if we change this. Are you up to that?\nThanks!\n. Nope, it's a bug what you're fixing.\nOtherwise I can work on the documentation or examples next week probably.\nI'd recommend you use the modified version of auth0-angular locally for now\n. I'll work on this next week and add tests and change documentation.\nThanks!\n. Hey there,\njust pushed the fix for this :).\nI'll be releasing it in a new Major version today :).\n. @pmq I'm glad :). It was released as 2.0 though due to a breaking change.\nCheers!\n. Hey,\nIf given the options.clientId validation you throw an error, it'll never be there for the || options.clientId you set in the upcoming line.\nJust delete the check and the throws and leave the this.clientID = options.clientID || options.clientId;\n. Makes sense?\nThanks for the contribution :) \n. Now merging :).\nThanks!\n. Hey,\nThat's a problem with how the router in Angular works :(. We're sending the result in a hash since that's what the spec says and it's more secure since those values aren't sent to the server (whereas Request Paramters are).\nAngular router should be parsing #/ for routes instead of just #.\nAnyway, your fix would work. However, what I'd recommend for the fix is setting the hashPrefix to ! so that if only # is found, it's not parsed.\nCheck the example I created https://github.com/auth0/auth0-angular/tree/master/examples/html5mode and particularly: https://github.com/auth0/auth0-angular/blob/master/examples/html5mode/public/app.js#L29-L31\nHope it helps :).\nThanks!\n. It should be working.\nHave you tried the sample I pointed out? \n. You're right :).\nThe Logout isn't working because the information is in the Hash and parsed again after successful signout. You have to clean the hash in the loginSuccess callback from the Example. \nI've just fixed the example and added the Logout button so that you can try it out!\nThanks!\n. It does work for me in the example now.\n. Hey @iotaweb what problem are you having?\n. Hey,\nSo if you're using auth0-angular you don't have to use Auth0Widget separately.\nTry:\n``` html\n<!DOCTYPE html>\n\n\n\n \n \n  \n\n\n \n    angular\n        .module('myApp', ['auth0'])\n        .config(function (authProvider, $httpProvider) {\n            authProvider.init({\n                domain: 'iota.auth0.com',\n                clientID: 'o0VITiP0NC2zEjYYqE8AqoFPbi4qEllF',\n                callbackURL: location.href,\n                loginUrl: '/login'\n            });\n            authProvider.on('loginSuccess', function($location) {\n                $location.path('/');\n            });\n            authProvider.on('loginFailure', function($location, error) {\n                $location.path('/error');\n            });          <br />\n            $httpProvider.interceptors.push('authInterceptor');\n        })\n        .run(function(auth){       <br />\n            auth.hookEvents();  <br />\n        })\n        .controller('myController', function($scope, auth){\n            $scope.auth = auth;            <br />\n            auth.signin({ container: 'root', chrome: true, scope: 'openid profile' });                </p>\n<pre><code>        $scope.logout = function() {            \n            auth.signout();                \n        };\n    });\n&lt;/script&gt;\n&lt;title&gt;Sample Angular App with Auth0&lt;/title&gt;\n</code></pre>\n<p></head>\n<body ng-app=\"myApp\" ng-controller=\"myController\">\n    <h1>Welcome {{auth.profile.nickname}}</h1>\n    <button ng-click=\"logout()\">Logout</button>\n    <div id=\"root\" style=\"width: 320px; margin: 40px auto; padding: 10px; border-style: dashed; border-width: 1px;\">\n        embedded area\n    </div>\n</body>\n</html>\n```</p>\n<p>Let me know if that helps!\n. It looks like this to me with that snippet</p>\n<p><img alt=\"Login embed\" src=\"https://cloudup.com/cAUQjsP0bqH+\" />\n. Good catch! Thanks!!</p>\n<p>Merging!\n. Hey,</p>\n<p>We're calling <code>loginSuccess</code> on every refresh because as we have his information we know he's logged in. </p>\n<p>I'll add a separate event for page refresh instead of <code>loginSuccess</code>.</p>\n<p>I don't completely understand the second problem. The <code>loginUrl</code> is called if there's no information from login stored in <code>localStorage</code>. If you're coming from another site where he's authorized, you could use <code>soo: true</code> option.</p>\n<p>Does this help?\n. I should be a guesser then :D hahaha.</p>\n<p>Awesome that it\u2019s working for you :).</p>\n<p>Also, thanks for the kind words :). I\u2019m working right now on creating Restangular 2.0 so stay tuned for awesome new features there as well ;).</p>\n<p>Cheers!  </p>\n<hr />\n<p>Martin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina</p>\n<p>Twitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto</p>\n<p>On Thursday, 18 de September de 2014 at 16:52, Rob Anderson wrote:</p>\n<blockquote>\n<p>Thank you so much - your fix solves all the problems I was experiencing!<br />\nI was mistaken about loginUrl being called on refresh. I actually had a redirect on loginSuccess, which was being triggered on callback from the off-site authorization. This is not happening now and the extra event you added gives me all the flexibility I need, so thanks for interpreting (guessing) my requirements so well :)\nP.S. I've only just twigged that you're the genius behind Restangular. You're contributions to the Angular community are legendary!</p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/74#issuecomment-56092650).\n. True that.</p>\n</blockquote>\n<p>Merging!</p>\n<p>Thanks!\n. Thanks for the doc update :).</p>\n<p>Merging!\n. Hey thanks for the feature!!</p>\n<p>Change the config to <code>sendJWT</code> please if possible and do the correction I mentioned.</p>\n<p>Thanks!\n. I agree <code>sendJWT</code> isn't the best name. I don't like <code>ignoreAuthorization</code> either.</p>\n<p>hmmmm maybe:\n- <code>skipAuthorization</code>\n- <code>skipJWT</code></p>\n<p>Cheers!\n. I like it :). </p>\n<p>Go for it with the prefix and header configurable as well :).</p>\n<p>Cheers!\n. @gdi2290 looks awesome :).</p>\n<p>Did you test it out?</p>\n<p>Send me your address info to gonto@auth0.com and we'll send you some swag (TShirt + Stickers) for all your help :).</p>\n<p>Cheers!\n. Hey,</p>\n<p>Does this work?. If you just inject <code>auth0-angular</code> and don't add anything in the run, would this be called anyway? I need to test it out :).</p>\n<p>If it does, it's an awesome solution :D. </p>\n<p>Thanks!\n. Thanks for submitting the bug!</p>\n<p>Can you please send a PR for this?</p>\n<p>Thanks!\n. Just saw you submited a PR already. Thanks for that :).</p>\n<p>Closing this after merge. I'll release soon.\n. Thanks for the submission!</p>\n<p>Why are you sending the user in the URL from AngularJS? You shouldn't be calling the API from the FrontEnd since for that you'd need to expose the clientSecret. Does this make sense?</p>\n<p>Thanks!\n. Hey,</p>\n<p>In order to add custom fields to a signup, for the time being, you <strong>must</strong> do this on a server. It can be either a NodeJS or any other server.</p>\n<p>In the future, we're planning on creating \"single use and scoped API calls\" similar to what Amazon does so that you will be able to do this from the client.</p>\n<p>Does this make sense?</p>\n<p>Thanks!\n. The secret is used to create the Tokens. If you share that in the client code, anyone will be able to create Tokens and therefore your app won't be secured anymore.</p>\n<p>Hope this helps!\n. Hey,</p>\n<p>We\u2019re already working on adding this in our api v2 :)  </p>\n<hr />\n<p>Martin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina</p>\n<p>Twitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto</p>\n<p>On Monday, 6 de October de 2014 at 20:47, RickyRoller wrote:</p>\n<blockquote>\n<p>Alright, thanks.\nYou do have the auth.signup function with the login widget. You should think about allowing custom fields with that since you already have that functioning. Even if it wasn't user input and it could just be a parameter passed into the auth.signup function that'd be great.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/80#issuecomment-58117603).\n. Hey,</p>\n</blockquote>\n<p>Thanks as usual for the contributions :).</p>\n<p>The only problem with this is that <code>onSigninOk</code> gets called not only in popup mode but also redirect and I need it to call the handlers inmediately for Redirect as otherwise you'll see first one page and then immediately redirect to another one. I'd not change this one.</p>\n<p>Thoughts?</p>\n<p>Cheers\n. Hey,</p>\n<p>This part will actually dissapear in the next version, so don\u2019t worry :)   </p>\n<hr />\n<p>Martin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina</p>\n<p>Twitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto</p>\n<p>On Wednesday, 8 de October de 2014 at 16:08, PatrickJS wrote:</p>\n<blockquote>\n<p>ah okay, well in that case I think renaming { promise: profilePromise } to { profilePromise: profilePromise } would make it more clear</p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/pull/81#issuecomment-58410327).\n. Thanks for the fix for IE8 :). Merging!\n. Hey,</p>\n</blockquote>\n<p>I have not tried it with Google Closure. Do other modules work? What errors are you getting in the console?</p>\n<p>ADVANCED_OPTIMIZATIONS removes unused code I think, right? Maybe Google Closure is confused about the unused code?</p>\n<p>Thanks!\n. Great thanks!\n. &gt; I noticed that auth.hookEvents(); doesn't actually do anything?</p>\n<p>It's expected. The <code>auth0-angular</code> module hooks to <code>$locationChangeStart</code> event and others. In order to be hooked to event, I need the <code>auth</code> service to be instantiated. AngularJS instantiates services on first use, so by just injecting it in the run, that just works. However, as explaining all this is complicated and weird for some people, I made them call a method that does nothing but explains why you're injecting it :). Makes sense?</p>\n<blockquote>\n<p>The interceptor works - it sends the token along with every request, but if the token is missing it doesn't fire any events that I can see.</p>\n</blockquote>\n<p>Right now, if the token is missing, it just isn't sent. The <code>forbidden</code> event should be triggered. Take a look at <a href=\"https://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L374-L376\">this code</a> which gets that event and calls the needed handler. To do something no the event, just call <code>auth.on('forbidden', function() {...})</code></p>\n<blockquote>\n<p>EDIT: Seems that this works just fine, but seems like it should be wrapped into the angular module a bit better.</p>\n<p>auth.getProfile(localStorage.getItem('idToken'));</p>\n</blockquote>\n<p>You shouldn't have to do this, it should just work. The profile should be available under the <code>auth.profile</code>. I've just tried it out and it's working for me. Does the <a href=\"https://github.com/auth0/auth0-angular/tree/master/examples/widget-with-api\">sample</a> work for you?</p>\n<p>Hope this all helps :)\n. &gt; Right, I see that you're using the loginSuccess events in the config, but what if I want to set $scope.user when the app is reloaded? If I set up $scope.user = auth.profile it's always undefined, and never gets filled.</p>\n<p>Got it.</p>\n<p><code>js\nauth.profilePromise.then(function(profile) {\n  $scope.user = profile;\n});</code></p>\n<p>Does that work?\n. Go to http://chat.auth0.com/ and ask for me (@gonto) \n. Closing and openning https://github.com/auth0/auth0-angular/issues/85\n. Hey,</p>\n<p>Just implemented the events. You can now do the following:</p>\n<p><code>js\n$rootScope.$on('auth0.authenticated', function(e) {\n  // Store user or do something\n});</code></p>\n<p>Cheers!\n. Hey,</p>\n<p>Those methods should be in <code>auth0.js</code> and not in <code>auth0-widget</code> as you're saying. If you check out the <a href=\"https://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L491\">line in the code</a> you'll see that it's actually calling the function from <code>auth0js</code> </p>\n<p>What version of widget are you using?</p>\n<p>Thanks!\n. That's awesome :).</p>\n<p>Thanks for letting me know!\n. Won't fix\n. Won't fix\n. It's fixed now.</p>\n<p>Let me know if it works for you.</p>\n<p>Cheers!\n. Hey @jensoleg </p>\n<p>I tried it with Auth0.js and was working ok, but I'm guessing it's not working with Lock.</p>\n<p>I'll give it a try and fix it.</p>\n<p>Thanks!\n. Hey again,</p>\n<p>So we found a little issue with <code>Lock</code>. I've updated the docs here and in <code>Lock</code>. This is how you should ask for refresh token.:</p>\n<p><code>js\nauth.signin({\n    authParams: {\n      scope: 'openid offline_access',\n      // The following is optional\n      device: 'Chrome browser'\n    }\n});</code></p>\n<p>You can see the updated documentation <a href=\"https://github.com/auth0/auth0-angular/blob/master/docs/refresh-token.md\">here</a> and the updated sample <a href=\"https://github.com/auth0/auth0-angular/tree/master/examples/refresh-token\">here</a></p>\n<p>Let me knwo if this works.</p>\n<p>Thanks!\n. Awesome :)\n. Hey @jensoleg,</p>\n<p>I'm working on making the Ionic example now :).</p>\n<p>I'll get back to you soon.\n. Hey,</p>\n<p>I've just finished the example. You can now see the example <a href=\"https://github.com/auth0/auth0-ionic/tree/master/examples/refresh-token-sample/\">here</a> or read the updated tutorial <a href=\"https://docs.auth0.com/native-platforms/ionic\">here</a></p>\n<p>Regarding your particular error, you don't have to put anything in the <code>callbackURL</code>.  You usually see that error when the InAppBrowser is not installed/configured correctly: https://docs.auth0.com/native-platforms/ionic#5</p>\n<p>Let me know if this helps.</p>\n<p>Cheers!\n. I'm glad it's working :) @jensoleg. Is the typo you mention in the tutorial?</p>\n<p>So the problem was the <code>bower update</code> of what specifically? Of Ionic?</p>\n<p>Cheers!\n. Awesome :).</p>\n<p>Glad it worked!\n. Hey,</p>\n<p>Thanks for sharing and helping others and sorry it took you so many hours :(! Thanks for being the first to test the new version :). Do you like it more or less in general?</p>\n<p>Regarding your problem, something I'm thinking on is that if you inject something in the <code>tokenGetter</code> function it needs to be annotated, otherwise minification won't work.</p>\n<p>So, if you just do the following, it should work.</p>\n<p><code>js\njwtInterceptorProvider.tokenGetter = ['auth', 'store' , function(auth, store) {}];</code></p>\n<p>Let me know if that works out!</p>\n<p>Cheers\n. @cristiandouce can you check this last item?</p>\n<p>Thanks!\n. Hi @johnstontrav @jensoleg,</p>\n<p>We're working on tackling this issue now.</p>\n<p>Could you please provide us with a sample project where the error is happening to make it easier to debug?</p>\n<p>Thanks!\n. Please read the response from https://github.com/auth0/lock/issues/94#issuecomment-68895137.</p>\n<p>We're working on a solution\n. it has been fixed with version <code>4.0.1</code> of <code>auth0-angular</code> :).\n. You're right I forgot :).</p>\n<p>Thanks for the PR :D. </p>\n<p>What kind of app are you using this for?\n. That's cool :).</p>\n<p>Thanks again for the contribution!\n. Already fixed in code.\n. Hey,</p>\n<p>You're absolutely right :).</p>\n<p>I've just updated the example to handle this case for both when you <a href=\"https://github.com/auth0/auth0-angular/blob/master/docs/storing-information.md#3-authenticating-the-user-on-page-refresh\">don't have a refresh token</a> and <a href=\"https://github.com/auth0/auth0-angular/blob/master/docs/refresh-token.md#4-using-the-refresh-token-on-page-refresh-is-jwt-is-expired\">when you do have</a>\n. Hey,</p>\n<p><code>auth0-angular</code> depends on either Lock or Auth0.js as you're saying :). Thanks @msandt3 for jumping on this!</p>\n<p>In which particular documentation you didn't see this updated? Could you just tell me the things you choose instead of the link (That link is only accessible through your app).</p>\n<p>Thanks for reporting the issue!</p>\n<p>Cheers\n. @msandt3 got it. Just added it :).</p>\n<p>Thanks!!!!\n. Hey @ahaid,</p>\n<p>Thanks for the report. Right now this is not possible with the <code>refreshToken</code> call. I've created <a href=\"https://github.com/auth0/auth0.js/issues/49\">an issue</a> to handle this. </p>\n<p>In the meantime, I suggest doing the following:</p>\n<p><code>js\nauth.getToken({\n  refresh_token: refreshToken,\n  scope: 'openid profile', // put the same as in the signin,\n  api: 'auth0'\n})</code></p>\n<p>Let me know if this works\n. I'm glad :).</p>\n<p>Let's leave this open though until we fix the <code>auth0.js</code> one :).</p>\n<p>Thanks!\n. Hey @msandt3, </p>\n<p>The code looks right.</p>\n<p>Could you provide a gist, jsfiddle, plunkr or github project with a reproduceable sample? That way it's easier to debug it?</p>\n<p>Thanks!\n. Hey @jimwheaton ,</p>\n<p>Thanks for the report!</p>\n<p>Any chance you can provide a gist, jsfiddle plunkr or something to reproduce the error?</p>\n<p>Thanks!\n. I'll close this one and leave the other one open for debugging and fixing. Thanks to both!\n. Thanks @james-world any recommendation on how to do this?\n. Hey,</p>\n<p>We're actually in the works of Unifying the APIs :). However, while it's not finished, we have this \"hack\".</p>\n<p>I might do that change. I'll see what I can come up to.</p>\n<p>Thanks for the opinions and your time!\n. Let me know if this works :).\n. @christofmuc hmm that's weird. Want to send a PR for that? I'll merge it :).</p>\n<p>Thanks!\n. Hey,</p>\n<p>Have you included Auth0 Lock or Auth0.js before auth0-angular?  </p>\n<hr />\n<p>Martin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina</p>\n<p>Twitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto</p>\n<p>On Wednesday, 29 de October de 2014 at 13:17, Dave Ackerman wrote:</p>\n<blockquote>\n<p>Running into this error here:\n// Redirect mode $rootScope.$on('$locationChangeStart', function () { var hashResult = config.auth0lib.parseHash($window.location.hash);<br />\nUsing angular 1.3.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/104).\n. Hey,</p>\n</blockquote>\n<p>I've just tried this out (And pushed an example for this case) and it's working for me.</p>\n<p>Could you create a sample with this not working and attach it here?</p>\n<p>We're planning to add version number to the built file</p>\n<p>Thanks!\n. The latest one. Can you join http://chat.auth0.com/ and chat there? It's faster!\n. :)\n. You're right, that should work.</p>\n<p>Can you please open another issue for that?</p>\n<p>Thanks!\n. Do you have a plunkr or jsfiddle to reproduce?</p>\n<p>+CC @cristiandouce I don't think this is angular\n. Hey @james-world thanks for the note and for the awesome feedback.</p>\n<p>I agree this is something to keep an eye on for corporate customers using IE.</p>\n<p>I'll close this issue but pass on the info to the rest of the Auth0 team.</p>\n<p>Thanks for helping so much with debugging this problems!\n. Got you :). Debugging with IE is indeed a pain!\n. Just fixed this and made Auth0 configurable through <code>auth.init</code> as well \"free of charge\" ;)\n. I've moved this issue to Lock repository. Please continue <a href=\"https://github.com/auth0/lock/issues/94\">there</a>.</p>\n<p>We'll take a look\n. Linked to https://github.com/auth0/auth0-angular/pull/66\n. Renaming it is a breaking change, as well as this change.</p>\n<p>So if we change this, I'm up to it, but we should change the name to <code>getDelegationToken</code>. Then, we need to change the original documentation as well as the samples using that in the <code>examples</code> folder and the needed docs on <code>docs</code>.</p>\n<p>Please do check that out before merging.</p>\n<p>Thanks!\n. Sounds good. Let's deprecate getToken (Remove from Docs), and just change its code to what I pointed above.</p>\n<p>Sounds good!\n. This has been fixed on 4.0.0.\n. Thanks for this.</p>\n<p>You're absolutely right.</p>\n<p>I forgot the return :D.</p>\n<p>Merging!</p>\n<p>BTW, do you like more the new less magic version of auth0-angular or the one before?</p>\n<p>Thanks!\n. &gt; personally I believe you can support both versions in one lib (component version and easy mode). For people who need more control etc this is great. For everyone else who are being MVPs/hackathons probably not so much unless you have seed repos with the $locationChangeStart best practice and examples in the readme. The angular community prefers easy mode but it doesn't really scale. I really like how the Angular team is trying to push the community in the right direction (component repos) but it's at the cost of new users who aren't use to the concept. It takes a bit more effort to support both but then again you're supporting legacy (old IE support issue all over again).</p>\n<p>As you say, I like what the Angular team is doing in decoupling everything. That's what we tried to do with  these refactor.</p>\n<p>We've added examples with the best practices as well as some documentation for it :).  Right now, we're not in the plan on supporting both options because it's a lot more work and I don't know if it'll add more value.</p>\n<p>That being said, thanks for offering to help and for always sending new PRs :).</p>\n<p>Thanks!!!\n. Hey,</p>\n<p>I\u2019ll take a look at this tomorrow.</p>\n<p>Thanks for letting me know!  </p>\n<p>\u2014\nvar signature = {<br />\nname: \"Martin Gontovnikas\",<br />\ntitle: \"Software Engineer\",<br />\ntwitter: \"twitter/mgonto (https://twitter.com/mgonto)\",\ngithub: \"github/mgonto (https://github.com/mgonto)\",\nlinkedin: \"linkedin/mgonto (http://www.linkedin.com/in/mgonto)\"\n};</p>\n<p>On Saturday, 6 de December de 2014 at 22:07, Kelly Andrews wrote:</p>\n<blockquote>\n<p>I'm on Angular 1.3.5 and it's blowing through requiresLogin: true completely using UI-Router. The example is currently on 1.2.16.\nIs there a requirement what version of angular we can use?  </p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/112#issuecomment-65922005).\n. After debugging this problem, it was an error with angular-router and <code>$location</code> URL change introduced in AngularJS 1.3 but then fixed later on with &gt;= 1.3.3</p>\n</blockquote>\n<p>Check https://github.com/angular/angular.js/issues/9607 for more information on the problem.\n. Thanks for the PR :).</p>\n<p>Merging!\n. Hey @whyvez you have 2 options to work with DI in minified mode:</p>\n<p>1) Using <a href=\"https://github.com/olov/ng-annotate\">ngAnnotate</a> and setting <a href=\"https://github.com/olov/ng-annotate#explicit-annotations\">explicit annotations</a> for these methods</p>\n<p>2) Using </p>\n<p><code>js\nauthProvider.on('logout', ['store', function(store) {\n// ...\n}]);</code></p>\n<p>Does this help?</p>\n<p>Thanks!\n. Unfortunately, there's no way for us to fix that. </p>\n<p>We use the <code>$injector</code> so that your method can get Dependency Injection of whatever service you want in that method. Then, if you minify your code, you need to tell Angular the name of the services that you need injecting in your app which of course will vary from those from some other person (In your case it may be <code>store</code>, in other case it may be <code>$http</code>). As that's the case, you need to specify in your code, when you're creating this injectable functions the <code>ngAnnotate</code> explicit annotation to let that tool know that that function is going to be injected by Angular.</p>\n<p>The default methods with <code>ngAnnotate</code> just work, because it knows that all Controller functions will need injecting. In these case, without you letting it know, it won't work.</p>\n<p>The only solution we could provide is to fork <code>ngAnnotate</code> and mark our methods as default functions that need inserting but that's not a scalable solution I think.</p>\n<p>Does this make sense?\n. No problem :). I wish we could do something else :( \n. You're right. It doesn't make sense to do the postInstall to call bower.</p>\n<p>Just removed it :).\n. Let Justin Zaun JZaun@teampraxis.com know\n. Hey,</p>\n<p>Thanks for the report!</p>\n<p>Does this happen with the latest version of auth0-angular?</p>\n<p>Thanks!  </p>\n<p>\u2014\nvar signature = {<br />\nname: \"Martin Gontovnikas\",<br />\ntitle: \"Software Engineer\",<br />\ntwitter: \"twitter/mgonto (https://twitter.com/mgonto)\",\ngithub: \"github/mgonto (https://github.com/mgonto)\",\nlinkedin: \"linkedin/mgonto (http://www.linkedin.com/in/mgonto)\"\n};</p>\n<p>On Monday, 15 de December de 2014 at 20:01, Roarke Gaskill wrote:</p>\n<blockquote>\n<p>When authentication fails when trying to signin with the folowing code. The loginFailure event is never fired.\nauth.signin({ connection: 'Username-Password-Authentication', username: usernameEmail, password: password, authParams: { scope: 'openid email' } });</p>\n<p>but if I add callbacks (as below) the loginFailure event fires fine.\nauth.signin({ connection: 'Username-Password-Authentication', username: usernameEmail, password: password, authParams: { scope: 'openid email' } }, null, angular.noop);</p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/118).\n. I\u2019ll check it out on Wednesday :).</p>\n</blockquote>\n<p>\u2014\nvar signature = {<br />\nname: \"Martin Gontovnikas\",<br />\ntitle: \"Software Engineer\",<br />\ntwitter: \"twitter/mgonto (https://twitter.com/mgonto)\",\ngithub: \"github/mgonto (https://github.com/mgonto)\",\nlinkedin: \"linkedin/mgonto (http://www.linkedin.com/in/mgonto)\"\n};</p>\n<p>On Monday, 15 de December de 2014 at 20:43, Roarke Gaskill wrote:</p>\n<blockquote>\n<p>Yes... I am using the latest I believe\nauth0.js: \"~4.3\",\nauth0-angular: \"3.0.6\",  </p>\n<p>\u2014\nReply to this email directly or view it on GitHub (https://github.com/auth0/auth0-angular/issues/118#issuecomment-67088153).\n. I've just tested this out and you're right.</p>\n</blockquote>\n<p>This only happens for Database connections (Not for social ones). When there's an error, the error is returned in the callback and not with a redirect which brings some inconsistencies.</p>\n<p>I've reported this bug on Auth0.js (You can see it above) which is the library being used by <code>auth0-angular</code> for these. If you want, you can watch that issue, and once it gets solved, it will work here as well :).</p>\n<p>Sorry for any inconveniences and thanks for the bug report!\n. Hey @joaom182,</p>\n<p>Thanks for the report!</p>\n<p>I've tried it and I'm not getting that error. Is there any chance you could provide a jsfiddle or plunkr link with an example of this happening?</p>\n<p>Thanks!\n. @christian I don't think using library internals to fix this issue is a good solution. Reopening. \n. Hey @iotaweb,</p>\n<p>How are you?</p>\n<p>They work difference because the <code>loginSuccess</code> function is called via <code>$injector.inject</code> and the other one is just a regular callback.</p>\n<p>When you call a function using <code>$injector.inject</code>, all the parameters are injected by name. That means that I can do the following and they both work:</p>\n<p>``` js\nfunction injected(myService, myToken) {\n  myService.send(myToken);\n}</p>\n<p>// Option 2. Parameter order change\nfunction injected(myToken, myService) {\n  myService.send(myToken);\n}\n```</p>\n<p>That means in your case that you can put <code>refreshToken</code> wherever you want with that name and it'll be injected correctly. We're doing this because you're using the <code>loginSuccess</code> function on the <code>config</code> method. By default, that means that you can only inject providers. However, this way, you can also inject services to that function like <code>store</code> which you're doing in your example :).</p>\n<p>When using the callback in the signin method, we're using a regular function. That means that parameter order matters. I've just updated the README to show the order of the parameters in the success callback, but it looks like this: <code>function(profile, idToken, accessToken, state, refreshToken)</code>. If you use that signature, once you save <code>refreshToken</code>, you'll be saving the correct one!</p>\n<p>Does this help?</p>\n<p>Cheers!\n. This is related to Lock's bug. </p>\n<p>Just linked the issues.</p>\n<p>Thanks for the report.\n. Please read the response from https://github.com/auth0/lock/issues/94#issuecomment-68895137</p>\n<p>We're working on a solution\n. it has been fixed with version <code>4.0.1</code> of <code>auth0-angular</code> :).\n. Hey there,</p>\n<p>Could you send us the full response you're getting and maybe a sample so that we can test it out? Maybe doing 3 refresh calls per second with a setTimeout.</p>\n<p>Thanks!\n. Also another thing you can try is to actually save the promise that the <code>refreshToken</code> returns. That way, if you get a call to the <code>jwtInterceptor</code> before the <code>refreshToken</code> promise finishes, you just return the same promise again. I think that might make it work.</p>\n<p>Could you try that?\n. The code would look something like:</p>\n<p>``` js\nvar refreshing = null;</p>\n<p>refresh: function() {\n  var refreshToken = auth.refreshToken || store.get('refreshToken');\n  var _this = this;</p>\n<p>if (refreshing == null) {\n    refreshing = auth.refreshIdToken(refreshToken)\n    .then(function(idToken) {\n      // Change this for the store variable you use for the id_token\n      store.set('idToken', idToken);\n      return auth.authenticate(store.get('profile'), idToken, null, null, refreshToken);\n    })\n    .then(function() {\n      _this.save();\n      return store.get('idToken');\n    }, function(error) {\n      console.log(error);\n      _this.logout();\n    })\n    .finally(function() {\n      refreshing = null;\n    });\n  }\n  return refreshing;</p>\n<p>},\n<code>``\n. Awesome I'm glad @chelzwa :)\n. @drub0y hey, we don't have a Typescript file yet for</code>auth0-angular<code>. If you end up creating one, please do let us know and we'll point to the file on the</code>DefinetlyTyped` repo from here saying thanks to you :).</p>\n<p>I know there's a TypeScript definition for Lock already.</p>\n<p>Thanks\n. @drub0y we'll try to work on this. I've taken a note but I can't promise any timeframe yet :( sorry!\n. hahahah sounds good :). We can support it once you get it started and we'll get other contributions as well as you're saying :). We've been getting a lot of them :). Of course, we'll add you as a contributor and maybe some swag ;) ahahaha\n. Hey @adriatic,</p>\n<p>You're right, the SSO readme isn't entirely clear. I've just updated it to make it clear how you can test it out and how it works :).</p>\n<p>https://github.com/auth0/auth0-angular/blob/master/examples/sso/README.md</p>\n<p>Let me know if you think it's clearer now.</p>\n<p>Thanks!\n. &gt; That is a completely different story and it makes all the sense in the world. Thanks Martin for such speedy reaction.</p>\n<p>Thanks :D. We try to do this as much as we can.</p>\n<blockquote>\n<p>If all my wishes could be made real, I would really like to see one additional branch in the documentation for this whole set of examples that show how run them on IIS/ASP.NET hosted angular apps. I might be able to provide that information if it becomes viewed as important for Auth0</p>\n</blockquote>\n<p>It shouldn't be that different to host this with IIS or ASP.Net. AngularJS as you know is just serving some static files, so you could easily serve them from the public directory from your ASP .Net app or from any public directory from IIS. Do you mean that or what exactly do you mean?</p>\n<p>Thanks for the feeback :)\n. &gt; It is not something I have difficulty doing (and am already doing it) \u2013 I was more looking at making your documentation a bit less node.js \u201cheavy\u201d. Use the example at https://auth0.com/docs/rules where I found</p>\n<blockquote>\n<p>Create authorization rules based on complex logic (anything that can be written with node.js).</p>\n<p>Does this imply that the rules are possible only when the app is nodejs hosted? I hope not, but I would like to see that states specifically with an angular sample \u2013 in your collection, in other words</p>\n</blockquote>\n<p>Thanks for the feedback. I now understand what you mean. It's true a lot of our docs is NodeJS centric and that it should be platform agnostic. I'll add an issue to our docs and discuss it internally to make our docs even better :). </p>\n<p>Thanks again!\n. Hey there,</p>\n<p><a href=\"https://github.com/auth0/auth0-angular/tree/master/examples/requirejs\">This is an example</a> that uses <code>auth0-angular</code> 4.0.1 with <code>auth0.js</code> and <code>requirejs</code>.</p>\n<p>Let me know if that helps you find out the problem.</p>\n<p>Thanks!\n. Hey,</p>\n<p>Yes, that's intentional. You just need to get the property <code>id_token</code> from the object returned.</p>\n<p>It's in the Releases Notes for v4.0.0 (This was the breaking change to do a major version)</p>\n<p><img alt=\"Releases notes\" src=\"http://d.pr/i/1lhRe+\" />\n. No problem :).\u00a0</p>\n<p>Cheers!\u00a0</p>\n<p>\u2014\u00a0Mobile mail. Excuse for brevity and typos.</p>\n<p>On Mon, Jan 19, 2015 at 2:16 AM, kpgarrod notifications@github.com\nwrote:</p>\n<blockquote>\n<p>Thanks. Sorry I missed that!\nOn 16 January 2015 at 15:55, Martin Gontovnikas notifications@github.com\nwrote:</p>\n<blockquote>\n<p>Closed #130 https://github.com/auth0/auth0-angular/issues/130.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/130#event-220077572.</p>\n<h2></h2>\n<p>Keith Garrod\nTel: +27-83-3000-988</p>\n<h2>Fax: +27-86-5757781</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/auth0/auth0-angular/issues/130#issuecomment-70447392\n. @calvinfroedge :) awesome :). I'm glad you fixed it by yourself.\n. Sounds good. Merging!\n. Thanks for the PR and sorry for taking so much time to respond\n. Hey @calvinfroedge,</p>\n</blockquote>\n</blockquote>\n<p>Thanks for the contribution!</p>\n<p>Actually, the sso property of the <code>login</code> method call is true on by default.</p>\n<p>Then, the <code>sso</code> property of the <code>authProvider</code> makes it so that the user is automatically logged in by <code>auth0-angular</code> if possible.</p>\n<p>Check out <a href=\"https://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L292-L300\">this code</a></p>\n<p>Makes sense?</p>\n<p>Thanks!\n. Hey there,</p>\n<p>Unfortunately I can't. That's done by <code>Lock</code>, the library that this SDK wraps and which doesn't know about <code>$log</code>.</p>\n<p>Sorry about the problems :(.</p>\n<p>Cheers!\n. Hey there,</p>\n<p>With the <a href=\"https://github.com/auth0/auth0-angular/blob/master/src/auth0-angular.js#L158-L188\">new code</a> we've implemented a couple days back, that problem should have been solved.</p>\n<p>Are you still having the problem with the latest version of <code>auth0-angular</code> as well?</p>\n<p>Thanks!\n. Hey,</p>\n<p>So you're sending a Constructor to the <code>auth0Angular</code> init method?</p>\n<p>Thanks!\n. I'll try it out and see if we can fix it without the option. Otherwise, I'll add the option!</p>\n<p>Thanks for the bug report!\n. Hey @ntotten will check abs follow up :).\n\u2014gonto\n. Agreed.\n. Fixed all docs on this.</p>\n<p>Thanks for letting us know :).\n. I'll take a look at it probably next week.</p>\n<p>Thanks for the report\n. Bear in mind that if you access those other events, <code>$scope.$apply</code> is not called for you.</p>\n<p>Will be implemented :).\n. Just call the <code>authenticate</code> method with some mock data :): https://github.com/auth0/auth0-angular/blob/master/docs/storing-information.md#3-authenticating-the-user-on-page-refresh</p>\n<p>Cheers!\n. Hey,</p>\n<p>I've just updated the plugin to <code>auth0-6</code> and it's working perfectly for me https://github.com/auth0/auth0-angular/blob/master/examples/custom-login/index.html#L6.</p>\n<p>That's all the change I had to do to get it working.</p>\n<p>Could you try getting it again?</p>\n<p>Thanks!\n. Hey,</p>\n<p>Could you check what version of anuglar, auth0.js and auth0-angular are installed?</p>\n<p>Or could you upload a plunkr or jsfiddle with the bug?</p>\n<p>Thanks!</p>\n<p>\u2014\nvar signature = {\u00a0\n  name: \"Martin Gontovnikas\",<br />\n  title: \"Software Engineer\",<br />\n  twitter:\u00a0\"twitter/mgonto\",\n  github:\u00a0\"github/mgonto\",\n  linkedin:\u00a0\"linkedin/mgonto\"\n};</p>\n<p>On 5 de mayo de 2015 at 13:04:31, RYFN (notifications@github.com) wrote:</p>\n<p>Hey, if you bower install auth0-angular into an empty folder, and copy the contents of the bower_components/auth0-angular/examples/custom-login to the root of you project, you can replace your dependancies with bower dependancies -</p>\n<script src=\"/bower_components/angular/angular.js\" type=\"text/javascript\">\n\n\n \n \n \n \n \nThis is where I'm seeing the issue - the auth0 lock window pops up briefly while I try and authenticate, then closes itself again. Unfortunately it closes too quickly for me to grab a screenshot of!\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the PR :).\nPlease check the comment on the code. I want to see why the safeApply doesn't work now.\nThanks!\n. Hey,\nLet me see if I can find somebody to help you out :).\n@rolodato @cristiandouce can you guys help him out?\nThanks!\n. Looks good :).\nMerging! Thanks!\n. Nice, thanks @twistedstream :).\nThe structure with this root state that we have here (and in other examples) are not really good to be honest. I've actually improved the routes and structure on the example that's downloaded by the Seed Project. You can check it out here.\nIf we were to update this and the other examples, I'd do it in a way that's similar to the Seed project, but this is OK for this example.\nRegarding signup and reset, it's just a callback that you need to send to handle success or error. Did you debug the code and see if the callback was received?\nThanks!\n. > @mgonto yes I did see those callbacks and they do work. However they activate after, for example, the reset password form completes, but then that form transitions to a login form after they fire (so the user can log in with the new password). I found no easy way to hook into the success event of that logon form, which seemed like a natural place to refresh the main view with user profile data.\nGot it. That's how Lock works. In order to handle Forgot Password and Signup, you have to subscribe to Lock events. If you were using Auth0.js you'd be able to actually handle Reset and Signup separately. /cc @cristiandouce \n. Thanks for sending this!\n@cristiandouce Thoughts?\n. Exactly, no need for a library anymore, now it's an example using angular-jwt2 which we also built. Hope that's enough!\n. We can add those methods to the example as well /cc @chenkie \n. The applied shouldn't be called by itself. The idea is that it receives as a parameter the function to do the apply on something, otherwise it's like calling $scope.$apply() which shouldn't be done. You should always send a function as a parameter there. So, if the $apply is called by itself with this promisify we don't even need this anymore, otherwise wrap the function with that. And for what I see, it's indeed called. Have you tried calling it without the applied?\n. What is this spread?\n. I agree with that. promisify should always call apply since we always want the callback to be applied to let Angular know of this new \"turn\".\n. Do add any version for angular and angular-cookies, but not for autho.js and auth0-widget.js please. I'll merge after that.\nThanks!\n. this is actually targetClientId still. We need to change it on Auth0.js. https://github.com/auth0/auth0.js/issues/43 Issue created but until that's done don't change the docs here.\nThe rest looks good :).\n. This should be an || otherwise I don't think it'd work as $injector will always have auth \n. this would be:\njs\nauth.getToken = function(options) {\n  return auth.getDelegationToken(function(result) {\n      return result.id_token;\n  };\n}\nSounds good? \nPut it in more than one line :D\n. If it's sync, $apply isn't called. If it's async, $apply should be called.\nI don't think changing to $timeout would solve this. Why doesn't the apply work?\n. ",
    "mintbridge": "Thanks, not sure how I missed that repo. I think https://github.com/auth0/ionic-auth0/blob/master/www/index.html#L25 should start with https:// otherwise it goes relative to file:// with cordova.\nWhats the recommended callback url for cordova apps? \n. No problem, yeah I could get auth0 + phonegap working with the above plugin, and auth0 + ionic-auth0 in a browser, but not auth0 + ionic + phonegap :) I think the phonegap plugin just needs tweaking a little bit and it should all work happily together.\n. ",
    "christiannwamba": "There are few comments that could guide you for now. We will be adding ngDoc soon. Thanks\n. Work in progress. Thank you.\n. I believe this issue is now taken care of by setting \nauth.config.auth0lib.$container to null. I will close this now but feel free to re-open if more clarification is needed.\n. Yeah just checked it out. Thanks @homesar and apologies for the delay\n. Thanks @adriatic \n. Lock is instantiated inside of the SDK so you don't have to worry about that. You can just configure with authProvider and use the API methods in your app.\n. Hi!\nWhere you able to resolve this issue so I can close?\n. Hi @adrianchia \nAny updates on this issue? Are you still experiencing the redirects with the latest version of the SDK?\n. Hi\nAs there is no feedback on this issue, I will close it out but please re-open if need be. Thanks\n. @tobysteward can you please rebase this before PR can be merged\n. @jmls \ud83d\udc4d Thanks a lot. Got that. Will fix now\n. Yeah. It should be good on npm and bower now. CDN will be available soon (v4.2.1)\n. Hi @krokhale I am working to get this resolved and that is why the issue is still open. Apologies for the inconveniences \n. @krokhale could you let me know the versions of the library you are using especially that of  auth0-angular. From the three modules you stated, auth0-angular is not included. If possible, your bower.json will be of great help.\n. Hi @krokhale \nI just tested with \"auth0-angular\": \"~4.2.1\" and after minifying, everything works fine using generator-angular-fullstack. When exactly in the application do you experience an error and what error do get?\nThank you\n. @krokhale I just tested with your repo and it works fine. Can you annotate the config as you are minifying:\n``` js\n.config(['$routeProvider', '$locationProvider', 'authProvider', function($routeProvider, $locationProvider, authProvider) {\n    $routeProvider\n      .otherwise({\n        redirectTo: '/'\n      });\nauthProvider.init({\n  domain: 'DOMAIN.auth0.com',\n  clientID: \"CID\",\n  loginUrl: '/'\n});\n\n$locationProvider.html5Mode(true);\n\n}])\n```\nYou can clone https://github.com/christiannwamba/issue-143 and try it. It works. \n. Still works on my end. Kindly clone my own repo and retry let's see how that goes. The loginSuccess is added to it.\n. Could you create a support ticket here: https://auth0.com/support\nI will assist you from there as this is more of implementation rather than an issue with the SDK\n. Annotation is just for the given app. The SDK exposes API and doesn't know how what is exposed is used. Generally for all servicer/providers not just this SDK, you have to annotate manually or use something like ngAnnontate to automate it. Thanks\n. Hi! The rememberLastLogin works with SSO turned on. Are you using SSO?\n. Oh ok. Thanks for the quick feedback.\n. Hi,\nThe service wraps Lock and Auth0.js therefore can only work with APIs provided by the libraries. Auth0.js which Auth0-Angular relies on to perform refresh token does not give room to pass in scope when making a refresh token request.\nA better option is what you are already doing in option 2 which is to request for token using the getToken() method.\nThank you.\n. Yeah the events are called even with pop up mode enabled but it will still throw if you miss the callback in pop up mode\n. You can do custom login with both provided:\njavascript\n$scope.login = function () {\n      auth.signin({\n        popup:true\n      }, function(profile, token, accessToken, state, refreshToken) {\n        // Success callback\n        console.log(profile);\n      }, function(error) {\n        console.log(\"There was an error logging in\", error);\n      }, 'Auth0'); //Supply the 4th argument to choose a preferred library\n    };\nThanks\n. You are making a reference to $routeProvider in your app. Use $stateProvider rather for ui-state\n. Added https://github.com/auth0/auth0-angular/pull/265/commits/343a379c0748d6fa142a26328715c761db0f847f\n. Hi @chriskeyser \nThe package.json was already updated few weeks back. Thanks\n. npm ERR! Refusing to install auth0-angular as a dependency of itself occurs when you are installing to a projects whose package.json name is auth0-angular\n. Hi @bechampion \nDid you provide a callback URL from your application dashboard? Is this specific to Twitter or all other providers including Email & Password?\n. Hi @schwer \nAny update on this issue. Did the update fix it for you?\n. @lwallent Please resolve conflict before your PR can be meged\n. Hi! Where you able to find your way around this issue? Just some important note:\n- Callbacks work only when popup is set to true\n- When using redirect mode, you can listen to the loginSucess or loginFailure event to serve as callbacks.\n- SSO works with only redirect\nI will be closing this but if not satisfied, feel free to re-open\n. Hi. I will be closing this issue as it can't be reproduced. Please feel free to re-open if you have more information on this issue. Thank you\n. Hi!\nIs this an IE specific issue? Does the event work in other browsers for you?\n. Hi! I am unable to reproduce this issue and will be closing. Feel free to re-open if necessary\n. Hi! What the SDK basically does if there is an SSO data is to re-authenticate with details gotten from SSO data. \nSo if you have a token or a profile, what could make sense to do is authenticate the user on $locationChangeStart event which sets the auth.isAuthentcated to true and there by skips the SSO flow. Thanks.\n. Hi\nKindly use loginState rather than loginUrl\n. Hi\nWhich guide are you speaking of? Make sure you have the Authorization header in the request you are sending to the server.\n. Hey\nThis is tagged invalid as it is not entirely related to this SDK but I think you might need to bundle your app before testing. Have you tried that?\n. @homesar please resolve conflicts by rebasing as @ntotten suggested\n. This provider does not provide localStorage implementation internally but has a support service angular-storage. What you can do is listen to logout event and clear the token from the storage.\n. Just like loginSuccess and loginFailure, there is a logout event which is called when auth.signout is called. You can handle all your logout logic in that event handler.\n. Hi! Will be closing this issue but feel free to re-open if you need more help\n. Hi\nI am unable to reproduce this issue. If you are still having the issue, kindly re-open and we will work on it together. Thanks\n. Cool. Thanks for the feedback.\n. Hi\nYou cannot pass arbitrary data according to the doc. access_token, scope, protocol, device, request_id, connection_scopes, nonce and state are the supported params.\n. Has been resolved and will be available in the next release as @yangmillstheory mentioned\n. Hi @rajibahmed \nCould you provide more details on this issue so I can help you?\n. Hi @vincentdieltiens !\nHave you tried using requiresLogin with component router to know if you can?\n. Hi\nThis issue might not be related to Auth0 Angular SDK\n. Hi @westy92 \nKindly resolve conflict\n. I guess this more of implementation concern. I believe it's not a bug as the expected behavior is to not call sign method on page load unless you listen to the client loaded event.\nThanks for the feedback. I will close this now but feel free to re-open if you need to.\n. Hey @viniciusmelquiades \nAuth0 really appreciate the feedback. I will reproduce the problem and fix them following your detailed guideline. Thanks again\n. Hey @uded \nThis is more a heads up. We are working on this issue already and hope to push ASAP\n. Fixed and available in next release. Thanks @viniciusmelquiades \n. The SDK will not be relying on third party libraries for annotation in the future. Thanks for the feedback\n. Hi @justinbwarner \nOnce https://github.com/auth0/auth0-angular/pull/270 is reviewed and merged, you will be good to go. Thanks\n. Good job @Amialc \nI just reviewed and it is awesome. Was wondering if it is possible to stub the callbacks rather than calling them directly. What do you think?\n. I will go ahead and merge this and then we work on improvement if there is room for that\n. Hi! Are you using CDN?\n. 4.1.0 is not the latest version of the SDK. Can you use 4.2.1?\n. Oh sorry. Was fixed here: https://github.com/auth0/auth0-angular/pull/270/commits/591f8bb9751e6d45028e3c522b11d451d3580a78\nWill be available in the next release.\n. Ok Thanks @sakopov I will have a look at it early next week\n. This issue is a breaking change caused by Auth0.js 7. Will update very soon. Thanks\n. Fixed https://github.com/auth0/auth0-angular/commit/8e3271a6247e3e15e48ef5004b7731146523acf0 . Let me know if any other issue\n. Fixed https://cdn.auth0.com/w2/auth0-angular-4.min.js\n. Nothing actually went wrong. The build missed to include the min version. Thanks\n. Hi! Thanks for this. Apologies for the delay to rebuild. v4.2.3 has been rebuilt to contain the missing updates: https://github.com/auth0/auth0-angular/commit/7fcfbd590de73da9236c27d4a23b1bae65963888\n. Hi. Thank you for the feedback. It was a problem of not running the build script before pushing but it is fine now.\n. Thanks. Duplicate #274 \n. Hi! This might be Lock related but I tried replicating the issue and got a reasonable error with a log in the console.\n\n. Ok that make sense. Feel free to re-open if you get another issue. Thanks\n. Hi @boly38. I strongly think this should be a problem with Lock itself not the Auth0-Angular so I will create an issue in Lock and reference this. Hope you are fine with that?\nYou should also try Lock 10, it might fix the issue.\n. Ok cool. Please keep me posted on your findings.\n. Hi @boly38 \nYou can make use of the QuickStarts: https://github.com/auth0-samples/auth0-angularjs-sample\n. Was wondering if it is possible to stub the callbacks rather than calling them directly.\n. Yeah something like that. I am not really good with testing but something like that is what I mean\n. ",
    "langfors": "+1\n. ",
    "ericthelast": "@pose Thanks for the help!\nHere are my app.js & auth.js scripts: https://gist.github.com/ericthelast/d2b95c7b17aac23f2448\nLoginCtrl is defined in auth.js.\nThanks again!\n. Also, I just added the index.html (partial) for reference as well\n. That worked! Thanks so much for your help.\nOn Mon, Jun 2, 2014 at 6:30 PM, Alberto Pose notifications@github.com\nwrote:\n\nHi @ericthelast https://github.com/ericthelast,\nHow are you? We have simplified the examples and in the new versions of\nauth0-angular you need to do even less. For instance, the defer.resolve\nin the app.run block is no longer needed. You can check:\nhttps://github.com/auth0/auth0-angular/tree/master/examples/widget-redirect\nin order to take a look at how your code should look like.\nAlso, you need to change your module name from auth0 to auth0-redirect.\nLet me know if that works or if you are still facing issues after making\nthe changes.\nThanks in advance,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/31#issuecomment-44903745.\n. \n",
    "skoczen": "I was curious about that - good to know! Testing now.\n. Works beautifully.  Many thanks!\n. ",
    "edson-": "Thanks for your quick response - please let me know!\n. ",
    "flynnwt": "Similarly, a bad login leaves the dialog active and fires loginFailure, but the promise is rejected.  A subsequent successful login fires loginSuccess, but the resolved-promise code won't be executed because the promise was already rejected.\nAn option to disable the close button on popup would be useful too.\n. I think there has to be a way to track the popup state.  The popup could close, and the reject code could do another signin.  Or, the popup stays active, and the promise isn't resolved or rejected.  Otherwise, only the events can be used to track login status.  But maybe the events (or auth object) are what really need to be watched since loginSuccess can occur on page reload.\nUnrelated - I also noticed that when loginSuccess is fired, auth.profile is undefined.  Is this intended?  It seems like this should at least be a promise.  But this works...\nauthProvider.on('loginSuccess', function($rootScope, $state, auth) {\n  auth.getProfile(auth.id).then(function() {\n     $rootScope.user = auth.profile;\n  });\n});\n. OK, thanks.  I'll have to look at that.  I was expecting auth.profile to be valid (either as the value or a promise).\n. ",
    "PatrickJS": "kool, yeah I'll see if I can add tests later tonight after work\n. I created a auth0.utils module with a authUtils factory but the tests doesn't seem to like this refactor since I'm getting timeouts errors and build fail. I was hoping I could use the same Utils Object in the authUtils with lexical scope abuse\n``` javascript\n  var Utils = {\n      capitalize: function (string) {\n        return string ? string.charAt(0).toUpperCase() + string.substring(1).toLowerCase() : null;\n      },\n      urlBase64Decode: function (str) {\n        var output = str.replace('-', '+').replace('_', '/');\n        switch (output.length % 4) {\n        case 0: {\n            break;\n          }\n        case 2: {\n            output += '==';\n            break;\n          }\n        case 3: {\n            output += '=';\n            break;\n          }\n        default: {\n            throw 'Illegal base64url string!';\n          }\n        }\n        return window.atob(output);  //polifyll https://github.com/davidchambers/Base64.js\n      }\n    };\n  angular.module('auth0', [\n    'auth0.storage',\n    'auth0.service',\n    'auth0.interceptor',\n    'auth0.utils'\n  ]);\nangular.module('auth0.utils', []).factory('authUtils', [\n    '$rootScope',\n    '$q',\n    function ($rootScope, $q) {\n      // Utils from Closure\n      Utils.safeApply = function (fn) {\n        var phase = $rootScope.$root.$$phase;\n        if (phase === '$apply' || phase === '$digest') {\n          if (fn && angular.isFunction(fn)) {\n            fn();\n          }\n        } else {\n          $rootScope.$apply(fn);\n        }\n      };\n      Utils.applied = function (fn) {\n        // Adding arguments just due to a bug in Auth0.js.\n        return function (err, response) {\n          // jshint unused:false\n          Utils.safeApply(function () {\n            fn.apply(null, arguments);\n          });\n        };\n      };\n      Utils.promisify = function (nodeback, wrapper) {\n        if (angular.isFunction(nodeback)) {\n          return function (args) {\n            args = Array.prototype.slice.call(arguments);\n            var dfd = $q.defer();\n            var callback = function (err, response, etc) {\n              if (err) {\n                dfd.reject(err);\n              }\n              // if more arguments then turn into an array for .spread()\n              etc = Array.prototype.slice.call(arguments, 1);\n              dfd.resolve(etc.length > 1 ? etc : response);\n            };\n            // if wrapper is provided then wrap callback\n            args.push(angular.isFunction(wrapper) ? wrapper(callback) : callback);\n            nodeback.apply(null, args);\n            // spread polyfill only for promisify\n            dfd.promise.spread = dfd.promise.spread || function (fulfilled, rejected) {\n              return dfd.promise.then(function (array) {\n                return Array.isArray(array) ? fulfilled.apply(null, array) : fulfilled(array);\n              }, rejected);\n            };\n            return dfd.promise;\n          };\n        }\n      };\n      return Utils;\n    }\n  ]);\n```\n\n. Hey @mgonto do you think I can hand this PR off to you. I don't have much free time after work atm. Although, I don't think you need promisify to include $scope unless you are running $digest rather than $apply\n. @mgonto alright it's updated for \njavascript\n\"auth0.js\": \"^3.1.0\",\n\"auth0-widget.js\": \"^5.0.8\"\n. Observable would be awesome but not that many people use them so defaulting to callbacks are fine. Converting the callback to an Observable is easy enough for the ones who do\n. auth0-widget doesn't seem to be updated since it doesn't have renewIdToken\n. using Bower \"auth0-widget.js\": \"~5.2.6\", which is using Auth0.version = \"3.2.3\"; in the built script\n. do you think we can have a build with widget without underscore and auth0 dependency\n. alright thanks\n. it's working now thanks\n. @mgonto alright I removed the throw, fixed the more typos in the readme, and built the repo \n. alright fixed\n. @mgonto alright, should be fixed now but I would prefer the word  ignoreAuthorization similar to https://github.com/chieffancypants/angular-loading-bar#ignoring-particular-xhr-requests\njavascript\n$http.post(url, data, { sendJWT: true }) // this makes it seem like you want the jwt to be sent rather than trying to ignore it for this one call only\n. I prefer skipAuthorization since the header is called { Authorization: jwt } \nlol I can convert this into a provider to allow anyone to change the name\n``` javascript\n  angular.module('auth0.interceptor', [])\n  .provider('authInterceptor', function() {\n    var skipJWT = 'skipAuthorization';\n    this.setSkipJWT = function(name) {\n      skipJWT = name || skipJWT;\n    };\nthis.$get = function ($rootScope, $q, $injector) {\n  var auth;\n  return {\n    request: function (config) {\n      // When using auth dependency is never loading, we need to do this manually\n      // This issue should be related with: https://github.com/angular/angular.js/issues/2367\n      if (config[skipJWT] || !$injector.has('auth')) {\n        return config;\n      }\n      auth = auth || $injector.get('auth');\n      config.headers = config.headers || {};\n      if (auth.idToken && !config.headers.Authorization) {\n        config.headers.Authorization = 'Bearer '+ auth.idToken;\n      }\n      return config;\n    },\n    responseError: function (response) {\n      // handle the case where the user is not authenticated\n      if (response.status === 401) {\n        $rootScope.$broadcast('auth0.forbidden', response);\n      }\n      return $q.reject(response);\n    }\n  };\n};\n\n});\n```\nexample\n``` javascript\n.config(function($httpProvider, authProvider, authInterceptorProvider, auth0Api) {\nauthProvider.init({\n    domain:      auth0Api.domain,\n    clientID:    auth0Api.clientID,\n    callbackURL: auth0Api.callbackURL\n  });\n  authInterceptorProvider.setSkipJWT('ignoreAuthorization');\n  $httpProvider.interceptors.push('authInterceptor');\n})\n.run(function($http) {\n$http.post('/api/with/cors/issue', { data: 'base'}, { ignoreAuthorization: true})\n  .then(function(res) {\n    console.log('yolo', res);\n  })\n})\n```\nif you like this we may as well allow the user to set their JWT header and prefix \njavascript\n/// Defaults\nauthPrefix = 'Bearer ';\nauthHeader = 'Authorization';\n// ...\nif (auth.idToken && !config.headers[authHeader]) {\n  config.headers[authHeader] = authPrefix + auth.idToken;\n}\n. alright, updated and build the PR with configs\n``` javascript\nangular.module('auth0.interceptor', [])\n  .provider('authInterceptor', function() {\n    var skipJWT    = 'skipAuthorization';\n    var authHeader = 'Authorization';\n    var authPrefix = 'Bearer ';\nthis.setSkipJWT = function(name) {\n  skipJWT    = name || skipJWT;\n};\nthis.setAuthHeader = function(name) {\n  authHeader = name || authHeader;\n};\nthis.setAuthPrefix = function(name) {\n  authPrefix = name || authPrefix;\n};\n\nthis.$get = function ($rootScope, $q, $injector) {\n  var auth;\n  return {\n    request: function (config) {\n      // When using auth dependency is never loading, we need to do this manually\n      // This issue should be related with: https://github.com/angular/angular.js/issues/2367\n      if (config[skipJWT] || !$injector.has('auth')) {\n        return config;\n      }\n      auth = auth || $injector.get('auth');\n      config.headers = config.headers || {};\n      if (auth.idToken && !config.headers[authHeader]) {\n        config.headers[authHeader] = authPrefix + auth.idToken;\n      }\n      return config;\n    },\n    responseError: function (response) {\n      // handle the case where the user is not authenticated\n      if (response.status === 401) {\n        $rootScope.$broadcast('auth0.forbidden', response);\n      }\n      return $q.reject(response);\n    }\n  };\n};\n\n});\n```\n. thanks, I sent you an email and yup it works for me \n. it should work since this version of Angular only has one $injector. I used this for a few of my modules awhile back, but I could be wrong.\n. ah okay, well in that case I think renaming { promise: profilePromise } to  { profilePromise: profilePromise } would make it more clear\n. kool\n. I have this fix in my pull request #81\n. personally I believe you can support both versions in one lib (component version and easy mode). For people who need more control etc this is great. For everyone else who are being MVPs/hackathons probably not so much unless you have seed repos with the $locationChangeStart best practice and examples in the readme. The angular community prefers easy mode but it doesn't really scale. I really like how the Angular team is trying to push the community in the right direction (component repos) but it's at the cost of new users who aren't use to the concept. It takes a bit more effort to support both but then again you're supporting legacy (old IE support issue all over again). \nWith all that said, for this repo I would suggest supporting both in the build process. If you're into this I can help you out on it\n. .spread() is Promise syntactic sugar that Angular purposely left out and is very common in promise libraries. The idea is that you should only resolve a promise with one argument. To get around multiple arguments you return an array and this is also what q.all returns so the people normally spread after q.all.  At the moment I'm polyfilling the method on the inside the promisify helper function. Since promisify attaches .spread and not decorating $q itself I don't see anything wrong with it \nq .spread()\nhttps://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected\nbluebird .spread()\nhttps://github.com/petkaantonov/bluebird/blob/master/API.md#spreadfunction-fulfilledhandler--function-rejectedhandler----promise\n. the default case without applied() is probably broken since I didn't really spend much time accounting for the noop case. The idea was that I was adding a helper function that was flexible enough so you don't have to use applied() if you didn't feel using $apply was relevant. In all the cases where promisify() is used we are using applied() so we could very well just assume promisify() will always call $apply and remove applied\n. ",
    "bobbydazzler": "In response the following error in the OP above (hard to spot admittedly):\n\">JSC_POSSIBLE_INEXISTENT_PROPERTY: Property parseHash never defined on config.auth0lib at line 191 character 27\nvar hashResult = config.auth0lib.parseHash($window.location.hash);\"\nI'm seeing the same error, but coming from the TypeScript+Angular perspective instead. The error is reported by Jasmine (PhantomJS browser) while running tests that passed before I started adding the auth0 module, and the error is also reported in the Chrome console log when running manually: \nTypeError: 'undefined' is not an object (evaluating 'config.auth0lib.parseHash')\n            at [snipped]Scripts/auth0/auth0-angular-2.js:321\nI'm using the following auth0 files:\n<script src=\"Scripts/auth0/auth0-widget-5.2.js\"></script>\n<script src=\"Scripts/auth0/auth0-angular-2.js\"> </script>\nAs described in the quickstart tutorial. So far, this is preventing me from evaluating the service.\nThanks,\nD\n. ",
    "jensoleg": "I am having similar problems when my project is run through Grunt minimization. I have to put auth0 js files out of the minimzation together with files using auth0 providers. Seems there is a problem with detecting auth0 modules/providers.\n. Using ngAnnotate to. I am not using auth0,js . I have Removed auth0.js from package.json in auth0-angular Bower install. \nHaving problems with both WIDGET and now LOCK. Problem is solved by excluding widget/lock from grunt/build and using minimized version. Problem is solved but for first time users it can be a nightmare to find the problem and fix it. Tried to dig into the problem times ago but I only vaguely remember it had something to do with dep injection. Maybee ...\n. Hey there\nThats exactly how I am doing it. Thanks for updating the documentation ! \n. Hey again \nYep followed the tutorial but without success on a real mobile device. Ok in browser and device simulator.\nBut on real device i still get 'Origin file:// is not allowed' in the auth0 log. The inAppBrowser should be installed and configured.\nWondering if the \"https:/// mobile callback is ever set when looking at this  code in auth0-lock ?? \nAuth0.prototype.login = Auth0.prototype.signin = function (options, callback) {\nif (typeof options.username !== 'undefined' ||\n      typeof options.email !== 'undefined') {\n    return this.loginWithUsernamePassword(options, callback);\n  }\nif (!!window.cordova) {\n    return this.loginPhonegap(options, callback);\n  }\n. Just to let you know that I installed the auth0/Ionic seed and made it run after some bower updates and it runs with no problems on a real device. Although I still get som 'Origin file://' error in the logs. But I guess the problem isn't connected to this. I will investigate further on my setup. \n. Running smooth on Ios device now with auth0-storage-jwt-angular 3.0, new  auth0 Lock and Ionic. \nFollowed the running Ionic seed and found a typo in one of my js parameter list so I never got a refresh token\nThanks for helping me and your efforts ! \n. No it was my own typo - the tutorial helped me to find it ;-)\nDon't remeber the problem with first time run of the tutorial example but i updated bower.json with newest beta 13 version of Ionic and change auth0-angular to newest - and then it run out of the box.\n{\n  \"name\": \"Ionic + Auth0 sample with RefreshTokens\",\n  \"dependencies\" : {\n      \"auth0-angular\": \"~3.0.2\",\n    \"a0-angular-storage\": \">= 0.0.6\",\n    \"angular-jwt\": \">= 0.0.4\"\n  },\n  \"devDependencies\": {\n    \"ionic\": \"driftyco/ionic-bower#1.0.0-beta.13\"\n  }\n}\n. Thanks for your prompt reply ! Yes this solves the problem.\nOnly thing left I guess is a  auth0-lock minification problem. In the log I recieve this error when auth0- lock is minified:\nClientID required as first parameter.\nThrown in line 848 of auth0-lock\nNo big problem as I can leave auth0-lock out of minification and use the minified version and everything works smooth. However it would be nice if this also would run out of the box.\nWondered if it might be an idea to bower install auth0 and auth0-lock as separate components  instead of bundling it with  auth0-angular. As for now both are installed but I am only using auth0-lock.\n. ",
    "pmq": "@jensoleg @mgonto same thing for us - we ended up excluding it also, and using the already minified file (in our case with the patch from #57). We use ngAnnotate. It seems the problem comes from the auth0-widget.js/widget/pf/utils.js because require is undefined, but in all honesty I didn't dig.\n. Still doesn't work. @mgonto first, I think your code sample should probably look like:\n``` js\nvar getTokenPromise = auth.getToken({ api: 'aws', role: role, principal: principal });\ngetTokenPromise.then(function(value) {\n    // handle success\n    console.log('delegation: ' + value);\n}, function(reason) {\n    // handle failure\n    console.log('failed: ' + reason);\n  });\n```\n... as for AWS you'll need to pass a role and principal. Then when snooping the HTTP response, you can check everything works, but as @jpsantosbh wrote, the wrapper auth.getToken code fails to return the correct value.\n. Debugging this a bit more, the AWS credentials are in delegationResult.Credentials.\n. OK, I'll see what I can do.  In the meantime, do you see another way or workaround to use auth0-angular with AWS?\n. Ok, that's what we do as we needed to ship quickly. I'll let you know if I get enough time to do a decent job with the examples and doc this week.\n. Thanks @mgonto ! We plan on upgrading to Angular 1.3, Lock, etc in the coming weeks.\n. ",
    "rolodato": "This issue is likely not relevant anymore, closing for now.\n. https://github.com/auth0/lock/issues/94 was closed, so closing this issue too.\n. This method could be renamed to getDelegationToken to be consistent with auth0.js, but it might be confusing with the existing getToken. Thoughts?\n. In that case we should deprecate getToken, otherwise it's prone to confusion. I'll update the code, docs and examples soon.\n. Sample apps in delegation-token example were broken, possibly deleted. Changed IDs and secret to working apps.\n. One way of doing this is manually building the URL for the profile picture from the Facebook user ID (taken from here: http://stackoverflow.com/questions/8574759/getting-full-size-profile-picture)\njs\nvar url = 'https://graph.facebook.com/' + profile.identities[0].user_id + '/picture?width=9999'\nFor example, this redirects to my profile picture: https://graph.facebook.com/10152523927426961/picture?width=9999\nWould you mind creating this same question at https://ask.auth0.com? That way it's easier to find for others who might run into the same issue. Thanks!\n. @Zertz's answer is correct, you can change the token's expiration date locally but that will fail on any API call since the signature will become invalid.\n. ",
    "FrancisPlaza": "Of course, @mgonto, I just realized right now looking at the code. Haha, sorry about that! Thanks for the quick response.\n. Yes, along with ruby-auth0. Getting to learn the ins and outs of your framework. Neat stuff!\n. ",
    "adam8810": "Although I do like promises I think callbacks are a good answer for this particular problem.\n. ",
    "programbo": "I like events, and callbacks are really simple. I don't think you can go wrong with those two.\n. ",
    "chrisfosterelli": "I'm also seeing this issue, I think. It seems I can't request any delegation tokens after upgrading, instead I get TypeError: Cannot set property 'id_token' of undefined\n. Verified it works like a charm now @mgonto!\nThanks :)\n. ",
    "cristiandouce": "My bad! Sorry :(\n. Could you also tell IE version and Auth0Lock version as well?\n. @james-world thanks!\nI was able to test it in windows 7 + IE11 and it worked fine!\nI was able to log in with a twitter provider without any issues.\nI may have the chance to test it on windows 8 later today. We can leave this open till that.\nAnyway you could play with the callback and cors settings on your application setup at Auth0's dashboard?\n. Yes, you are right. It's really odd then. Maybe the windows 8 difference, some sort of security patch or something.\nLet me try later on Win8 if possible and I'll get back to you with a response.\nSo far it worked perfectly on windows 7 + ie11 \n. Also, just in case, would you mind trying your example with these sources instead?\nhtml\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdn.auth0.com/js/lock-6.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdn.auth0.com/w2/auth0-angular-3.min.js\"></script>\nSo we can confirm it is not an issue with the bower build (which should be the same though).\n. As noticed here: auth0/lock/blob/093f8cd30b8877e9edecee33227ffa57b6c00671/index.js#L63\nThat error only throws when missing the clientid or providing a wrong type.\nThe minification task might be messing up with function parameters or something. It may be worth cheching with another minifcation tool.\nOr maybe a variable remains undefined in scope when concatenating stripts.\n. I was able to reproduce the issue of this application in concern: https://github.com/avalanche-canada/ac-web.\nI was able to reproduce it by removing from the index.html the bower_dependencies of auth0-js, auth0/angular-store, auth0-angular and auth0-lock.\nThen remove the ignore from this line https://github.com/avalanche-canada/ac-web/blob/dev/Gruntfile.js#L222\nForcing there to include the libs via bowerInstall task.\nRun grunt serve.\nAnd when the browser opens the error should pop in the developer tools console.\n@whyvez Correct me if I'm wrong. Thanks!\n. @Zertz what do you mean by partially?\nI read this from #129 \nif (null != Auth0Widget) {\n  throw new Error('Auth0Widget is not supported with this version of auth0-angular' + 'anymore. Please try with an older one');\n}\nthe Auto0widget is undefined\nBut the truth table for null is the following:\njs\nnull == undefined // true\nnull == null // true\nnull != undefined // false\nnull != null // false\nTherefore, if Auth0Lock is actually undefined, that line should never trigger.\nI belive the issue here is that Auth0Lock is undefined and not that null check there.\nCould you tell how this PR is a fix of that issue?\nalso, when we build our bundle we use this file as entrypoint:\nhttps://github.com/auth0/lock/blob/621333319910bdb7ea8a744002e4e99f1d7b8c64/standalone.js\nwhich, as you might see does expose to the global object the Auth0Lock function, which then ends up in the window object by hand of our browserify bundler.\nThe problem I think could be that require or either define do exist in the window/global objects at the moment this is run, and then avoids to define it globally-\nWhat I mean is this:\nhtml\n<script src=\"/my/bundle/app-with-require.js\"></script>\n<script src=\"https://cdn.auth0.com/js/lock-7.js\"></script>\nThis way the lock may wrongly attempt to define itself in the require/define function from your app.\nI'm not sure this is the actual issue, but either I see how this check change could fix it.\nPlease let me know your thoughts!\n. how does this resolve different?\nIt's the same truth table AFAIK\n. ",
    "iotaweb": "@mgonto That's awesome - thanks for the update.\n. Thanks for coming back so quickly. I actually had this line in my config:\n$locationProvider.hashPrefix('!');\nand was still seeing this behaviour. Does this fix not work any more?\n. Yes, I've tried the example (much appreciated by the way :)\nWhen logged into the example I still see the full access token and id-token displayed in the URL, i.e. \nhttp://localhost:3000/info#access_token=[access_token]&id_token=e[id_token]&token_type=bearer\nIf I add a logout button and logout method to the Info page and controller, I do actually get logged out, but no redirect to the main page occurs, e.g.\n```\n//  app.js\n...\n.controller('InfoCtrl', function($scope, auth) {\n  $scope.auth = auth;\n$scope.logout = function() {\n    auth.signout();\n    $location.path('/');\n  }  \n});\n//  info.html\n...\n  \nNickname\n{{auth.profile.nickname}}\n\nSignOut\n...\n```\nSo my original comment about not being able to log out is incorrect - though I have redirect issues I can't quite solve (still learning angular...). \nThe problem remains though that the example hash fix $locationProvider.hashPrefix('!'); doesn't seem to work (though I might misunderstand what it's supposed to do).\n. Nice - that clears the hash. Still not getting a redirect to home when I click the logout button - does it work for you?\n. OK, got the latest (bower must be a bit behind) - so yes, the example now works for me. Thanks again for your help!\n. Basically, I just end up seeing the an empty embedded box, but no widget. There are no js errors in the console - it just doesn't render. \nThis works\n```\n<!DOCTYPE html>\n\n\n\nEmbedded Widget\n\n\n\n\n    embeded area\n    \n\n    var widget = new Auth0Widget({\n        domain:         'iota.auth0.com',\n        clientID:       'o0VITiP0NC2zEjYYqE8AqoFPbi4qEllF',\n        callbackURL:    location.href\n    });\n    widget.signin({ container: 'root', chrome: true, scope: 'openid profile' });\n    \n\n\n```\nThis doesn't work - somewhat contrived example...\n<!DOCTYPE html>\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    <script src=\"//code.angularjs.org/1.2.16/angular.min.js\" type=\"text/javascript\"> </script>\n    <script src=\"//code.angularjs.org/1.2.16/angular-route.min.js\" type=\"text/javascript\"> </script>\n    <script src=\"//code.angularjs.org/1.2.16/angular-cookies.min.js\" type=\"text/javascript\"> </script>    \n    <script src=\"//cdn.auth0.com/w2/auth0-widget-5.2.min.js\"></script>\n    <script src=\"//cdn.auth0.com/w2/auth0-angular-1.js\"></script>\n    <script> \n    angular\n        .module('myApp', ['auth0'])\n        .config(function (authProvider, $httpProvider) {\n            authProvider.init({\n                domain: 'iota.auth0.com',\n                clientID: 'o0VITiP0NC2zEjYYqE8AqoFPbi4qEllF',\n                callbackURL: location.href,\n                loginUrl: '/login'\n            });\n            authProvider.on('loginSuccess', function($location) {\n                $location.path('/');\n            });\n            authProvider.on('loginFailure', function($location, error) {\n                $location.path('/error');\n            });            \n            $httpProvider.interceptors.push('authInterceptor');\n        })\n        .run(function(auth){         \n            auth.hookEvents();    \n        })\n        .controller('myController', function($scope, auth){\n            $scope.auth = auth;              \n            $scope.login = function() {            \n                auth.signin();                \n            };\n            $scope.logout = function() {            \n                auth.signout();                \n            };\n        });\n    </script>\n    <title>Sample Angular App with Auth0</title>\n</head>\n<body ng-app=\"myApp\" ng-controller=\"myController\">\n    <h1>Welcome {{auth.profile.nickname}}</h1>\n    <button ng-click=\"login()\">Login</button> \n    <button ng-click=\"logout()\">Logout</button>\n    <div id=\"root\" style=\"width: 320px; margin: 40px auto; padding: 10px; border-style: dashed; border-width: 1px;\">\n        embedded area\n    </div>\n    <script>\n        var widget = new Auth0Widget({\n            domain:         'iota.auth0.com',\n            clientID:       'o0VITiP0NC2zEjYYqE8AqoFPbi4qEllF',\n            callbackURL:    location.href\n        });\n        widget.signin({ container: 'root', chrome: true, scope: 'openid profile' });\n    </script>\n</body>\n</html>\nIf I don't initialise the authProvider, the embedded login widget appears, but then I get interceptor errors. I appreciate you'd normally go with either the standard auth.widget as opposed to embedding a login, but I may want to do this so curious if it can be done.\nHope this makes a bit more sense - sorry about the scant details before!\n. Thanks for that - it works for me too!\nI really appreciate your help :)\n. Associated with this is the fact that the login redirect as specified by loginUrl in the authProvider settings is triggered on callback from an off-site authorization :(\n. Thank you so much - your fix solves all the problems I was experiencing! \nI was mistaken about loginUrl being called on refresh. I actually had a redirect on loginSuccess, which was being triggered on callback from the off-site authorization. This is not happening now and the extra event you added gives me all the flexibility I need, so thanks for interpreting (guessing) my requirements so well :)\nP.S. I've only just twigged that you're the genius behind Restangular. You're contributions to the Angular community are legendary!\n. Hi Martin,\nThanks so much for your answer and explanation - it helps a lot! I appreciate your updating the documentation :)\nCheers, Rob!\n. ",
    "chrisronline": "+1 for this. Owned me earlier today\n. ",
    "payalcsureja": "To fix this, as per \nAs per https://github.com/angular/angular.js/commit/f078762d48d0d5d9796dcdf2cb0241198677582c\nshould change \n$http.get('/foo').finally(doSomething);\nTo \n$http.get('/foo')'finally';\n(for IE8 compatible code)\nCan you please make this quick change to fix issues with IE8.\n. ",
    "RickyRoller": "The overall goal was to create a user with custom fields. In the example you have you use node to access the api and then angular just calls the node api. I can't use node on the server i'm on so they only way i've been able to get it to work is to call it all in angular. I also need to be able to delete the user from my application, which is the reason for making the call to auth0 with the user_id\nI'd like to do it in a secure manner, i'm just not sure how else to approach the creating of users with custom fields and deleting users from my app.\n. Alright, thanks.\nYou do have the auth.signup function with the login widget. You should think about allowing custom fields with that since you already have that functioning. Even if it wasn't user input and it could just be a parameter passed into the auth.signup function that'd be great.\n. Awesome! Thanks Martin\nOn Mon, Oct 6, 2014 at 5:59 PM, Martin Gontovnikas <notifications@github.com\n\nwrote:\nHey,\nWe\u2019re already working on adding this in our api v2 :)\n\nMartin Gontovnikas\nSoftware Engineer\nBuenos Aires, Argentina\nTwitter: @mgonto (https://twitter.com/mgonto)\nLinkedin: http://www.linkedin.com/in/mgonto\nGithub: https://github.com/mgonto\nOn Monday, 6 de October de 2014 at 20:47, RickyRoller wrote:\n\nAlright, thanks.\nYou do have the auth.signup function with the login widget. You should\nthink about allowing custom fields with that since you already have that\nfunctioning. Even if it wasn't user input and it could just be a parameter\npassed into the auth.signup function that'd be great.\n\u2014\nReply to this email directly or view it on GitHub (\nhttps://github.com/auth0/auth0-angular/issues/80#issuecomment-58117603).\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/80#issuecomment-58118538.\n\n\nRicky Roller\n801-574-4416\n. ",
    "zacr": "I will remove auth0, confirm everything else works with ADVANCED_OP and then if that is the case send you some more detailed info!\n. Meh, Advanced Optimizations aren't worth it for me right now. Simple Optimizations work just fine.\nhttp://webreflection.blogspot.com/2013/01/5-reasons-to-avoid-closure-compiler-in.html\nSorry to bother you!\n. ",
    "dmackerman": "Right, I see that you're using the loginSuccess events in the config, but what if I want to set $scope.user when the app is reloaded? If I set up $scope.user = auth.profile it's always undefined, and never gets filled. \n. ``` js\nTypeError: Cannot read property 'then' of undefined\nauth.profilePromise.then(function(profile) {\n  $scope.user = profile;\n});\n\n```\n. Yeah.\nvendor/auth0.js/build/auth0.js\nvendor/auth0-angular/build/auth0-angular.js',\nHard to tell which versions I'm running because there's no versioning in the files. :)\n. Ok. Which version of the auth0-angular library are you using? \n. Yeah. My issue was that I wasn't calling auth.init() properly. We have some code in our app that lets us skip authentication.\n. ",
    "trevan": "5.0.13.  I thought I had downloaded the two at the same time but I've now upgraded to the latest of both auth0-widget and auth0-angular and it is working.  I also see that auth0-angular has auto renew built in now as well which is nice.\n. ",
    "ashishtilara": "another question I had was, is there a way to avoid using \nauth.profilePromise.then(function() {\n    $scope.$parent.profile = auth.profile.name;\n});\nin every controller that has route associated with it. The reason is, when user is on any particular route\neg if I have following routes\n1. /\n2. /myprofile\n3. /items\n4. /categories\nthen I end up using the above mentioned code in all controllers, just so if user refreshes page from any url, it still sets profile to parent scope from that point forward. Is there a way to move that code to move to somewhere common place?\nI tried to put that in app.run() but that didn't work as it gets executed before the module sets .profile and .profilepromise.\nhope someone can help me fix this.\ncheers\nAshish\n. I am using it for a product I am working on using php+mysql as backend apis.\n. @kim0z the only way I can think of doing it is logout request goes to <account>.auth0.com/v2/logout as well as send to server which then adds the token in blacklist, and on login, and other requests, you first check the blacklist and if it exist in there deny access. does it make sense?\nAnother way is on login/request to server, you verify the token with Auth0 which will add up in response times.\n. ",
    "johnstontrav": "I am having the same issue: \n\"Error: ClientID required as first parameter.\"\ngulp serve:dist\nhttps://github.com/Swiip/generator-gulp-angular\n. @sergiy-talashko No.  we are using auth0 without the \"rememberLastLogin\" config.\n. ",
    "kaiquewdev": "That error appears when i follow the tutorial instructions to setup auth0.\nUsing the quickstart instructions:\nhttps://app.auth0.com/#/applications/7BRkuST1vtwOr1zlGQQarBbxRKZll02F/quickstart\nSomeone could help me, solve this?\n. Gratitude, to each one.\n. ",
    "msandt3": "I too got this issue when attempting to integrate with the ionic framework. The documentation doesn't actually say this but it seems you need to include the auth0.js library in your index html as well. The auth0 angular plugin seems to be dependent on some of the global variables from it. \nhtml\n<script src=\"bower_components/auth0.js/dist/auth0.js\"></script>\n<script type=\"text/javascript\" src=\"bower_components/auth0-angular/build/auth0-angular.js\"></script>\n<script type=\"text/javascript\" src=\"bower_components/a0-angular-storage/dist/angular-storage.js\"></script>\n<script type=\"text/javascript\" src=\"bower_components/angular-jwt/dist/angular-jwt.js\"></script>\nI haven't tested it as far as functionality goes, but this seems to get you past the initial bootstrapping step. Perhaps we can have a dev comment on if this is the root of the issue. If so, I'd recommend changing the documentation for the ionic quickstart.\n. @mgonto the documentation where I ran into this issue was when doing the quickstart guide for the ionic/angular app. When listing the dependencies it only gives you auth0-angular.js, angular-storage.js, and angular-jwt.js as deps. \n. Hey @mgonto I'm getting a similar issue, even after bumping the version of auth0-angular to 4.0 (my auth0.js version shows 6.0.6). When I refresh my idToken and append it with the requests it responds with \"User not found or no profile included with JWT . . . did you forget profile in your scope?\". \nI've included my jwtInterceptor code below\n``` js\n    var refreshingToken = null;\njwtInterceptorProvider.tokenGetter = function(store, $http, auth, jwtHelper) {\nvar token = store.get('token');\nvar refreshToken = store.get('refreshToken');\nif (token) {\n  if (!jwtHelper.isTokenExpired(token)) {\n    return store.get('token');\n  } else {\n    if (refreshingToken === null) {\n      refreshingToken =  auth.refreshIdToken(refreshToken).then(function(idToken) {\n        store.set('token', idToken);\n        return idToken;\n      }).finally(function() {\n          refreshingToken = null;\n      });\n    }\n    return refreshingToken;\n  }\n}\n\n}\n```\nas well as my location change algorithm\njs\n    var refreshingToken = null;\n  $rootScope.$on('$locationChangeStart', function() {\n    if (!auth.isAuthenticated) {\n      var token = store.get('token');\n      var refreshToken = store.get('refreshToken');\n      if (token) {\n        if (!jwtHelper.isTokenExpired(token)) {\n          auth.authenticate(store.get('profile'), token);\n        } else {\n          if (refreshToken) {\n            if (refreshingToken === null) {\n                refreshingToken =  auth.refreshIdToken(refreshToken).then(function(idToken) {\n                  store.set('token', idToken);\n                  auth.authenticate(store.get('profile'), idToken);\n                }).finally(function() {\n                    refreshingToken = null;\n                });\n            }\n            return refreshingToken;\n          } else {\n            $location.path('/login');\n          }\n        }\n      }\n    }\n  });\nI've even gone so far as to force the refresh of the idToken on every time the jwtInterceptor is run, and it returns the same result. I pulled most of this from the guides here. Any guidance you could give me would be greatly appreciated. \n. Hey @mgonto I'll create a github project you can clone today. It's from a largely proprietary codebase so I'm going to abstract a lot of the business logic before I share. Stay tuned. \n. @mgonto  the workaround @jimwheaton provided using the delegation endpoint ends up working. So I integrated that into my codebase. You can close this if you like. \n. ",
    "ahaid": "This works perfectly. Thanks so much.\n. ",
    "jimwheaton": "I'm having a similar issue. Requesting scope: profile for the initial token, but auth.refreshIdToken(refreshToken) returns a JWT without the profile info in it. I created an issue #147 before finding this post.\n. Example of issue:\n1. Obtain initial id_token and refreshToken with specific scope:\n   auth.signin({\n                 popup: true,\n                 standalone: true,\n                 closable: false,\n                 authParams: {\n                     scope: 'openid profile offline_access'\n                 }\n             }, loginSuccess, loginError);\n2. After token expires, attempt to use refresh token to get another id_token (this is in a $http interceptor):\n   if (jwtHelper.isTokenExpired(idToken)) {\n               return auth.refreshIdToken(refreshToken).then(function (idToken) {\n                   store.set('token', idToken);\n                   return idToken;\n               });\n           }\nThere is no where to specify the scope parameters and the resultant id_token does not have the scope of the original id_token (specifically the 'profile' scope param)\nTwo workarounds:\n1. call the /delegation endpoint directly and pass scope params in the POST body\n2. use this code instead of the above:\nif (jwtHelper.isTokenExpired(idToken)) {\n                return auth.getToken({\n                    refresh_token: refreshToken,\n                    scope: 'openid profile offline_access'\n                    api: 'auth0'\n                }).then(function (resultIdToken) {\n                    store.set('token', resultIdToken);\n                    return resultIdToken;\n                    });\n            }\n. ",
    "james-world": "Been debugging this. It seems auth0-angular.js is using a non-standard feature (an ECMAScript 6 draft) to identity the name of the Auth0Constructor in the init method. This is not supported in IE - see here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\nThe breaking commit is https://github.com/auth0/auth0-angular/commit/f821b77ee62a866a69b588d98be2c0023f5b4fa5\nSpecifically the calls to Constructor.name to discover the function names aren't going to work in any version of IE to date.\n. To solve the immediate problem, you could use this:\nfunction functionName(fun) {\n  var ret = fun.toString();\n  ret = ret.substr('function '.length);\n  ret = ret.substr(0, ret.indexOf('('));\n  return ret;\n}\nUsage:\nvar myFunction = function Foo() { };\n/* returns \"Foo\" on all browsers */\nconsole.log(functionName(myFunction));\nIt's not pretty but it works.\nIt would be better to avoid having to rely on the function name at all and it smells like there's a deeper architectural issue.\nI can see that the code is trying to abstract away the various underlying Auth0 libraries - but it feels like quite a brittle approach. \nHaving not spent a lot of time yet working with Auth0, I don't feel qualified to comment on the best way forward, but my temptation would be to examine the underlying libraries differences and work towards unifying their APIs.\nNote that with this fix in place, I now have the issue that when using a third party IP the pop-up window does not close in IE. I've not had a chance to analyze that yet.\n. Yes, I can successfully call init in IE now - thanks!\n. btw - I noticed a while back that you get this error if you declare a module dependency on the Auth0 module and then don't call init.\n. Sorry for not coming back sooner - been a busy couple of days here. Versions are:\nOS: Windows 8.1 all patches applied\nIE: 11.0.9600.17351, Update Versions: 11.0.13 (KB2987107) - as far as I can tell this is the latest\nAuth0Lock: 6.3.6 (also tried 6.3.5) as deployed from bower\nAuth0Angular: 3.0.4\nAll relevant bower packages used:\n\"dependencies\": {\n  \"bootstrap\": \"~3.2.0\",\n  \"angular\": \"~1.3.0\",\n  \"auth0-angular\": \"~3.0.4\",\n  \"angular-ui-router\": \"~0.2.11\",\n  \"a0-angular-storage\": \"~0.0.6\",\n  \"angular-jwt\": \"~0.0.4\",\n  \"angular-resource\": \"~1.3.0\",\n  \"auth0-lock\": \"~6.3.6\"\n}\nI will work on a minimal repro asap and post back here.\n. Minimal repro here: https://gist.github.com/james-world/22b727cbe67da361854b\nYou'll need to supply auth0 settings and set callback url etc.\n. Hmmm - remember it's working with Chrome - can you think of a reason why the dashboard settings would make a difference? CORS is open and the callback URL shows the relevant error if I don't set it up correctly. I'll see if I can repro it on another machine.\n. I'm seeing the same behaviour with those sources - but good news is I think I've found the problem!\nIt's to do with IE's \"Protected Mode\". This is enabled per zone [Internet/Local intranet/Trusted Sites/RestrictedSites] via a check box on the Security Tab of Internet Options.\nThe default settings have the Internet Zone - Protected Mode Enabled and Intranet Zone - Protected Mode Disabled.\nI think this difference is the issue as I was hosting the main site locally on my dev box i.e. in the Intranet Zone in a protected mode window, but the ***.auth0.com popup is displaying a site in the Internet Zone  and is therefore a non-protected mode window. The sandboxing here seems to create problems accessing the popup parent from the popup.\nHappily, if I switch the settings so that both zones have matching protected mode settings - either both protected or both non-protected - then everything works! Obviously, the likely scenario for most use cases is that both windows would be hosting sites in the internet zone.\nHowever, it's worth keeping an eye on this, because this could potentially bite customers using Auth0 to protect corporate sites - they would probably need to either add their *.auth0.com domain to the intranet zone or their relying party site to the internet zone if there is no way of fixing this in the javascript.\nPersonally though, I am satisfied that my devs can ensure they have compatible settings configured.\n. Hey no problem. It's a nightmare to debug the javascript in the pop-window using F12 tools on the page from *.auth0.com returning the token - because the full URL is unique IE always sees it as a new page - so it's hard to get a breakpoint in before the js has executed! Anyone think of an easy way?\nI did think maybe I can use Fiddler to modify the script in the callback to call the debugger - but that's quite a bit of faff with the SSL to deal with as well so to be honest I figured it would be easier for you guys to do that in your test environment where you could easily alter the script at the source!\nBottom line is I'm guessing a bit here, but the circumstantial evidence is compelling! :)\n. ",
    "christofmuc": "Funnily, in my IE11 the solution didn't work until I modifed the last line of the fnName function to \njavascript\n    return ret.trim();\nas the name calculated was 'Auth0Lock ' with a trailing space. Anybody else has this problem?\n. Ok, did create a PR.\n. ",
    "3plusalpha": "Did you find a solution for this problem? I am facing the same issue atm.\n. Here is the issue: https://github.com/auth0/auth0-angular/issues/106\n. ",
    "drewhawken": "Had the same issue on IE 11.0.9600.17416 Win 8.1.\n. ",
    "drub0y": "Bit by same thing. Had *.google.com in Trusted Sites, but site that was trying to auth was an internet site and the window closed detection logic simply falls on its face in this situation because w.closed == false immediately:\nJavascript\nvar closeInterval = setInterval(function() {\n          if (w && w.closed) {\n            cleanup();\n            if (cb) {\n              cb('User closed the popup window');\n              cb = null;\n            }\n          }\n        }, 500);\nSo, not really Auth0 code, but rather the WinChan dependency.\nHTH!\n. Yes, we found the Auth0-lock definition, but doesn't help auth0-angular. Bummer. :(\nWe'll take the time to do it ourselves I guess...\n. I understand. We'll probably need it before you can get to it, so we'll get started and you can hopefully take it from there. We likely won't end up exposing the whole API surface, but at least we can get something out there and it'll grow from there if OSS works the way it should, right? ;)\n. ",
    "whyvez": "I'm getting this issue in Chrome 38. Works fine in dev but blows chunks in prod. Difference being dev uses your build straight out while prod concats and minifies. Using auth0-angular 3.0.5 and Lock 6.4.0. \n. Worked on this a bit today. Tried many things but the one change which seemed to have worked is re-building lock.js with only the english i18n module. Seems like some characters in other languages is throwing something off. It would also be nice to be able to load these i18n dics separately than the main module somehow. Aside from the possibly breaking the some app build processes it adds extra data for those who don't really need it. Although I'm pretty sure this was the general root cause I'm not sure the finite details of what part of the fix was blowing chunks. For now I'm going to take lock.js out of my build process and serve as is. Might be worth moving this issue back to lock.js since auth0-angular seems fine in my case anyways.\n. @mgonto I am using ngAnnotate but for my app only. Unless there is something I am missing seems like its your implementation which needs to change. An app using you lib should not break if its been through a minification/uglify process. I am using your libs from the cdn provided in the docs and those are not being pushed through the build process. Like I said I might be way off here and if I am please let me know.\n. Sounds good. Thanks for talking the time to explain.\n. ",
    "kevinob11": "Any news on this? I'm seeing the same thing when I minify and uglify using gulp.\n. ",
    "kellyjandrews": "I'm on Angular 1.3.5 and it's blowing through requiresLogin: true completely using UI-Router. The example is currently on 1.2.16.\nIs there a requirement what version of angular we can use?\n. Ok - so I did some more digging and finally got it to work with 1.3.5 with no issues - sorry for that. I was using the code sample for UI-Router and missed a couple of small items that were tripping me up. I also set up the same example with the 1.3.0.beta.17 and the UI Router example also worked there as well. \nEverything looks good on my end now - thanks!\n. ",
    "rgaskill": "Yes... I am using the latest I believe\nauth0.js: \"4.3.0\",\nauth0-angular:  \"3.0.6\",\n. ",
    "benatportland": "We are seeing this issue too with;\n- auth0-angular v4.0.5\n- auth0 v6.5.0\nWe use an Auth0 db connection for the majority of our users and want to avoid having popups as many corporate users have popup blockers.\nI've tried providing just an error callback to auth.signin (e.g. auth.signin({...}, undefined, errCallback)), however, it appears the presence of either callbacks causes auth0-angular to use popup mode.\nAny suggestions on a workaround or alternative approach would be appreciated.\n. Disabling sso in signin options resulted in a ro call and no popup.  Callbacks can also be provided to the signin.\nauth.signin({\n   username: ...\n   password: ...\n   connection: ...\n   sso: false,\n   ...\n}, \nonSuccess,\nonFailure);\n. ",
    "erlendr": "I am also seeing this issue. Versions:\n- auth0-angular v4.0.5\n- auth0-lock: 7.9.3\nAny update on this?\n. ",
    "dscaramellino": "I am having the same issue for both social and database connections. In redirect mode, the loginFailure event only fires if I add an error callback to the auth.signin() function.  But, that essentially makes it run in popup mode, which is not what I want.  Is there an update on this or a workaround I can implement in the meantime?\nauthProvider.on('loginFailure', function($location, error) {\n   console.log('error', error);\n});\n```\n//loginFailure event fires with this code\nauth.signin(config, null, function(){});\n//but not with this code\nauth.signin(config);\n```\n. ",
    "sjkp": "You can comment out these lines from the, auth0.js file, then you can use callbacks, and won't recieve the popup. \n// TODO We should deprecate this, really hacky and confuses people.\n  if (options.popup  && !this._getCallbackOnLocationHash(options)) {\n    popup = this._buildPopupWindow(options);\n  }\n// When a callback with more than one argument is specified and sso: true then\n  // we open a popup and do authentication there.\n  if (callback && callback.length > 1 && options.sso ) {\n    return this.loginWithUsernamePasswordAndSSO(options, callback);\n  }\nFrom the Auth0.prototype.loginWithUsernamePassword function. \nTbh, looking at this javascript, it looks messy. Trying to do too much in one library seems to confuse even their own devs. \n. ",
    "ineedmny": "I am using:\n- auth0-6.8.0.min.js\n- auth0-angular-4.js\nand having the same issues. Is there a workaround for this, so that i can use the 'loginFailure' event?\n. Hi,\ni already answered. I think this was another Ticket. In my first request i only wrote \"hey\". This was accidentally.\nI tried to set SSO to false and now it works.\nThank you for your reply.\nBest regards,\nSebastian Ortmann\n\nAm 12.03.2016 um 02:14 schrieb Alex notifications@github.com:\n+1\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "arcseldon": "Update on progress please?\n. ",
    "chrisgreeff": "+1\n. ",
    "cyxou": "+1\n. +1 \nI'm implementing custom login form and auth0 in redirect mode. The loginFailure event does not fire on wrong email/password error.\n. I think the problem is in this chunk of code from the v4.2.3:\n``` javascript\nvar errorFn = !errorCallback ? null : function(err) {\n  callHandler('loginFailure', { error: err });\n  if (errorCallback) {\n    errorCallback(err);\n  }\n};\nvar signinCall = authUtils.callbackify(signinMethod, successFn, errorFn , innerAuth0libraryConfiguration[libName || config.lib].library());\n```\nIn redirect mode we don't supply success and error callbacks thus the errorFn is null and the loginFailure event never fires. If we supply the noop function() {} for success and error callbacks, than the loginFailure event will fire, but Auth0 will operate in popup mode which is not desired in my case.\nThe callHandler('loginFailure', { error: err } should be called whether the errorCallback is passed or not.\n. I've created a pr #279 hoping to fix this issue.\n. +1 it took me a hole lot of pain to figure out this myself until I found this issue. I was wondering why the plunker works but my app does not. In plunker I used this http://cdn.auth0.com/w2/auth0-angular-4.js js file  and finally found an issue.\n. Sorry for being bully, the fix is wrong because with it authorization goes in popup mode no matter whether callbacks are provided or not. There should be a better way to fix this.\n. ",
    "JasonTheProgrammer": "I've just stumbled upon this issue, replicated with:\n- auth0-lock 9.2.2\n- auth0-angular 4.2.3\nAs far as I can tell, this means the quick start documentation for AngularJS has included this (known) bug for at least 20 months.\nhttps://auth0.com/docs/quickstart/spa/angularjs\nThat just... seems like a long time?\nAm I correct that there are two workarounds?\n1. Switch to popup mode (downside being, there's a popup).\n2. Switch to \"popup\" mode but disable SSO so the popup doesn't show (downside being, no SSO mode).\nAre there any workarounds with neither of these compromises? The best I can think of is to hook the Angular $locationChangeStart event, look for a '/error=' path and process the error that way.\n. Lock v10 isn't compatible with Auth0 Angular.\nhttps://auth0.com/forum/t/is-lock-10-incompatible-with-angular/3297\nThere's also now a header on the Auth0 Angular quick start page declaring \"The AngularJS SDK currently supports Lock versions up to 9.2.2. Support for Lock 10 is coming soon.\"\nhttps://auth0.com/docs/quickstart/spa/angularjs\n. ",
    "gibsonsyd": "The problem I found was that it depended on where my redirect url was set to by default (when none is supplied in the Auth0Lock constructor. Sometimes it would redirect after login to / instead of /{login} . My route / was not set to allow unauthenticated access. this caused issues. The moment I set the redirectUrl (to a url that allows unauthenticated users) and responseType to 'token' in the auth config it worked for me.\n...,\nauth: {\n        redirectUrl: 'http://x.x.x.x/login',\n        responseType: 'token'\n      }\nThe problem was caused by an Authentication Guard on url / . When the url is hit and the user is not authenticated the login process is initiated before the 'authenticated' event can be fired (The user is redirected to /{login} before the hash can be read from the / url.) \n. ",
    "joaom182": "I'll try to reproduce on a fiddle, thanks.\n. Is there something that checks whether there is already a HTMLElement assigned in auth.config.auth0lib.$container\nAt the first time the property auth.config.auth0lib.$container is null and the Lock Component is initialized normaly. But when you return to the login screen, the property auth.config.auth0lib.$container has an HTMLElement, so the Lock Component not is initialized.\nTry to set the property auth.config.auth0lib.$container as null\n@mgonto Sorry for no reproduce the problem in a Fiddle. Lately I'm out of time.\n. ",
    "mcantrell": "@joaom182 did you ever find a workaround for this? I'm seeing the same behavior (I think). It will render the first time but if the user clicks another link and then comes back to login, it will no longer render.\nI think the lock library caches a reference to the element to avoid the extra overhead of rendering the dialog again. The element is no longer in dom (removed when the user navigated away) so it is never rendered again.\nIf I get a chance, I'll see if I can get a working fiddle to demo.\n. Thanks @joaom182. That works for me!\n. ",
    "dberringer": "Having the same issue.  Here is a fiddle illustrating the issue written by bert_h.\nhttps://ask.auth0.com/t/lock-widget-in-div-not-rendering-after-angular-navigation/543\nI'm trying to embed the lock widget in a div on the log in page of my angular SPA. It works fine the first time I load the login template, but when I navigate to another view and then back to the login view, the div is not repopulated with the lock widget.\nI have created a simple plunker that demonstrates this problem: http://plnkr.co/edit/co0V7BtL7AaihqmgjPx7?p=preview9\nSteps to reproduce:\n1. Run plunker (login view is shown, widget is loaded)\n2. Click on the info link (other view is loaded)\n3. Click the login link (login view is shown, widget it not loaded)\nNote that this does work if I use the widget in popup mode.\nAny suggestions on how to fix this?\n. @joaom182's suggestion fixed the issue for me as well.\n. I was mistaken.  I didn't see auth.profilePromise.  That seems to work fine for determining when the user profile is available.\n. ",
    "NetEvolutions": "I had same issue, indeed @joaom182's suggestion fixed the issue for me as well.\nJust set auth.config.auth0lib.$container=null before calling the auth.signin function\n. ",
    "slyedoc": "Worked for me as well\n. ",
    "cluda": "'auth.config.auth0lib.$container=null' fixed the issue for me too :) \nI spent a lot of time trying to figure out what I was doing wrong. So I  think you should add this to a troubleshoot section in the GitHub readme or something until it's fixed. Not hidden on the second page of the issue tracker.\n. ",
    "trevorhalvorson": "I had the same issue using react and documented a solution in an SO post here: https://stackoverflow.com/a/44527806/2888763. ",
    "theopak": "Just to follow up since this is the top (and only) google result for that exact Auth0 error message: There are other things that could be going wrong if what Martin specified didn't fix your problem. \nWhen I got the error specified refresh_token does not exist, the problem was that the refresh_token in my request was for a different client_id than the one that was being targeted.\n. ",
    "chelzwa": "That seems to have fixed the problem; we'll let you know if it happens again. Thank you so much for all your help.\n. ",
    "homesar": "I've submitted PR DefinitelyTyped/DefinitelyTyped#7870 for this!\n. The PR was approved so you can close this issue now\n. ",
    "adriatic": "That is a completely different story and it makes all the sense in the world. Thanks Martin for such speedy reaction. \nIf all my wishes could be made real, I would really like to see one additional branch in the documentation for this whole set of examples that show how run them on IIS/ASP.NET hosted angular apps. I might be able to provide that information if it becomes viewed as important for Auth0\n. It is not something I have difficulty doing (and am already doing it) \u2013 I was more looking at making your documentation a bit less node.js \u201cheavy\u201d. Use the example at https://auth0.com/docs/rules where I found\nCreate authorization rules based on complex logic (anything that can be written with node.js).\nDoes this imply that the rules are possible only when the app is nodejs hosted? I hope not, but I would like to see that states specifically with an angular sample \u2013 in your collection, in other words\nFrom: Martin Gontovnikas [mailto:notifications@github.com] \nSent: Friday, January 9, 2015 2:32 PM\nTo: auth0/auth0-angular\nCc: Nikolaj Ivancic\nSubject: Re: [auth0-angular] readme.md needs more detailed explanations (#124)\nThat is a completely different story and it makes all the sense in the world. Thanks Martin for such speedy reaction.\nThanks :D. We try to do this as much as we can.\nIf all my wishes could be made real, I would really like to see one additional branch in the documentation for this whole set of examples that show how run them on IIS/ASP.NET hosted angular apps. I might be able to provide that information if it becomes viewed as important for Auth0\nIt shouldn't be that different to host this with IIS or ASP.Net. AngularJS as you know is just serving some static files, so you could easily serve them from the public directory from your ASP .Net app or from any public directory from IIS. Do you mean that or what exactly do you mean?\nThanks for the feeback :)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/auth0/auth0-angular/issues/124#issuecomment-69385911 .\n. Final comment: I invited Martin to my LinkedIn page to share my resume, which should confirm that my claim of having proper experience to help a lot in sharing ideas about Auth0 docs improvement has merit :)\n. On a second thought: while one might say that the readme files provide only instructions on how to run each specific sample, it would then be also true that these instructions are also redundant as they are nearly identical across all samples. So, I still think that some specific \"key-points\" should be explained in each readme file - with the reference to a more detailed description elsewhere.\n. The overall readme file issues:\n1. The sample pointed to by link https://github.com/auth0/auth0-angular/blob/master/examples/api-authentication does not exist.\n2. There are several samples that are not described in this readme file (13 samples versus 9 descriptions) .\n3. If I was in charge of this readme document I would augment the description of each sample and include references to all other information sources relevant for each specific sample. \nMy general issue with Auth0 documentation can be described as lack of balance. On one end of the spectrum the Quickstarts section is way above anyone's expectation using the world class implementation of the idea of \"prebuilding\" everything needed to start as a function of user's profile. On the other end I constantly feel the need of a similar implementation at a lot higher level, where the Auth0 customer selects the attributes needed to automatically build the \"Hitchhiker's guide through Auth0\" - and voila: the \"how to\" document describing the use of Auth0 components in that specific use case is built.\nExample: I would like to use Auth0 where my client app is Angular.js based and backend is OWIN hosted on Windows Server. I would like to use all social sites as additional authentication providers, while maintaining the same set of user claims across all of them (which is where rules would come in nicely), I would like to use Auth0 as the authentication and authorization provider alone, once the initial handshake with social sites was completed, with minimal need to maintain the \"account data federation\" in my own code.\n. This issue was open for 17 months - since then I even forgot what Angular is :-)\n. ",
    "IvanRave": "API Explorer | Authentication API\nhttps://auth0.com/docs/auth-api\n. ",
    "Annyv2": "This was fixed \n. Hi! have you tried connection_scope? You can find more information about it here\n. Hi! \nI was able to login successfully with twitter using Angular's seed project. Can you provide the steps you are following? Did you configure your Twitter consumer key and secret in your Auth0 Dashboard? \n. Hi! Do you still receive this issue using Lock 9? \n. Hi! if you use sso:false then there's no popup. You can find more infomation about it here.  This is the code I used \n```\n//Init in app.js\n  authProvider.init({\n    domain: AUTH0_DOMAIN, \n    clientID: AUTH0_CLIENT_ID, \n    loginUrl: '/login'\n  });\n//Login controller\n  $scope.login = function() {\n    auth.signin({\n    sso:false,\n    username: user.email,\n    password: user.password,\n    connection: 'Username-Password-Authentication'}, function(profile, idToken, accessToken, state, refreshToken) {\nstore.set('profile', profile)\nstore.set('token', idToken);\n\n}, function(err) {\n    console.log(\"Error :(\", err);\n  })\n  }\n```\n. @mitiaptest Hi, Mit\nOn your auth.signin or lock.show function you can use this, would this work for you? (example uses auth.signin mode) \nfunction ($scope, $http, auth, store, $location) {\n  $scope.login = function () {\n    auth.signin({\n    rememberLastLogin: false\n    }, function (profile, token) {\n          ...\n. Hi! Does it work for you if you use  loginState: 'index.login' instead of loginUrl: 'index.login'? loginUrl is for ngRoute, while loginState is for ui-router\n. Hi! \nYou can obtain twitter's email by making a rule in Auth0.com. On your Auth0 Dashboard go to Rules - Get email address from Twitter, and there configure your twitter consumer key and secret by adding those values to the configuration global object in the settings section. Notice that your application needs to be whitelisted previously so you can access emails. After you do that, on your Angular application you can access {{auth.profile.email}}\n\n. Hi! Are you using loginState in your authProvider.init? loginUrl is for ngRoute, while loginState is for ui-router\n. ",
    "sidthesloth": "Hi \nI have got the same problem and i have looked at the example @mgonto has shared but still cannot get a resolution, his is where it fails\nif (null != Auth0Widget) {\n          throw new Error('Auth0Widget is not supported with this version of auth0-angular' + 'anymore. Please try with an older one');\n        }\nthe Auto0widget is undefined\nAnd the documentation for says that \nauth0-angular depends on either auth0.js or auth0-lock.js.\nIf you want to use Auth0's beautiful Lock UI, you need to include auth0-lock.js. This lets you configure Title and Icons, but the UI is taken care for you. For all the customization properties, please check out this link\nOtherwise, if you'll use a custom UI, you need to include auth0.js.\nWhich means that if I use custom UI all I need is auth0.js, which I have but still no success.\nthanks\nsidthesloth\n. ",
    "Zertz": "Seems like auth0-lock is broken with module loaders in general.\nI fixed that issue with Auth0Widget and now I'm investigating why it's not finding Auth0Lock.\n. @sidthesloth I have a hacky solution for now, see PR #165 \n. @ethanlmovio JWT's are signed with a secret key so if you change the payload server-side verification will fail. Here's a good explanation: https://scotch.io/tutorials/the-anatomy-of-a-json-web-token\n. In order to \"fix\" the issue where Auth0Lock is not found, I have replaced module.exports = Auth0Lock; by window.Auth0Lock = Auth0Lock; at https://github.com/auth0/lock/blob/621333319910bdb7ea8a744002e4e99f1d7b8c64/index.js#L44\nI'm sure this breaks other things so the Auth0 folks really need to implement the actual fix for that! (Using bower is only a workaround, not any better than my hacky solution IMO)\n. Just to be clear, the PR fixes Auth0Widget is not defined and properly throws Error('Auth0Widget is not supported with this version of auth0-angular anymore. Please try with an older one') or Error('Cannot initialize Auth0Angular. Auth0Lock or Auth0 must be available') instead.\nI realize that null == undefined, but if you try to run an Angular app without including auth0-lock you'll see that JavaScript chokes on null != Auth0Widget. Checking for typeof Auth0Widget !== 'undefined' fixes that issue.\nSo this PR isn't about fixing Auth0Lock with browserify and other loaders, but rather to allow the intended and useful error message to be shown.\n\nAs for Auth0Lock, your theory sounds right and we actually ended up with the exact same solution:\nhtml\n<script src=\"vendor.bundle.js\"></script>\n<script src=\"../../bower_components/auth0-lock/build/auth0-lock.js\"></script>\n<script src=\"../../bower_components/a0-angular-storage/dist/angular-storage.min.js\"></script>\n<script src=\"../../bower_components/auth0-angular/build/auth0-angular.js\"></script>\nThis is annoying though as it means I have to maintain bower just for Auth0 stuff. Yes, I'm lazy ;)\n. I can't give you the technical explanation, but no matter what the truth table says, the code in its current state is broken and that PR fixes it. Just try it.\n. @cristiandouce Keep in mind that null !== undefined and Auth0Widget has never been defined in that context and thus it cannot simply be compared with null. Additionally, you should always use strict equality in JavaScript.\nUp to you guys of course, but for the sake of your users this change should be merged!\n. ",
    "cyrixmorten": "I had a similar issue and was unable to use node + browserify to compile. Thought I would share my progress.\n1) Prepare in package.json I added:\n\"dependencies\": {\n    \"auth0-lock\": \"4.0.4\",\n    \"auth0-lock\": \"^7.12.3\"\n},\n\"devDependencies\": {\n    \"brfs\": \"0.0.8\",\n    \"ejsify\": \"0.1.0\",\n    \"packageify\": \"^0.2.0\"\n }\nas mentioned in the documentation.\n2) Browserify now I added the following script:\n\"build:auth\": \"browserify ./node_modules/auth0-lock/standalone.js -o ../target/client/js/deps.auth.js\"\n3) ERROR \nError: Line 1: Unexpected token < (<path>/client/node_modules/auth0-lock/lib/html/main.ejs) while parsing file: <path>/client/node_modules/auth0-lock/lib/html/main.ejs\n    at Stream.end (<path>/client/node_modules/brfs/index.js:39:32)\n    at _end (<path>/client/node_modules/brfs/node_modules/through/index.js:61:9)\n    at Stream.stream.end (<path>/client/node_modules/brfs/node_modules/through/index.js:70:5)\n    at DestroyableTransform.onend (<path>/client/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js:537:10)\n    at DestroyableTransform.g (events.js:260:16)\n    at emitNone (events.js:72:20)\n    at DestroyableTransform.emit (events.js:166:7)\n    at <path>/client/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js:934:16\n    at doNTCallback0 (node.js:428:9)\n    at process._tickCallback (node.js:357:13)\n4) FIX after some trial and error I found that modifying the order of which the browserify transformations are applied would allow the compiling to proceed:\n<path>/node_modules/auth0-lock/package.json\n- Before: \n\"browserify\": {\n       \"transform\": [\n        \"brfs\",\n        \"ejsify\",\n        \"packageify\"\n       ]\n   },\n- After: \n\"browserify\": {\n       \"transform\": [\n        \"ejsify\",\n        \"brfs\",\n        \"packageify\"\n       ]\n   },\n5) Add to index now adding deps.auth.js as dependency works for me and even more importantly, I can yet again run my unit tests .\n. Ok thanks, seems to make sense :-)\nWill try it out Monday. Did work around it using cdn links instead but kind\nof complicated my junit tests being unable to inject auth.\nOn 26 Feb 2016 19:16, \"Jack Lewis\" notifications@github.com wrote:\n\nIf you are using Browserify/Webpack, you have to manually do one of the\nfollowing:\nwindow.Auth0 = require('auth0-js')\nwindow.Auth0Lock = require('auth0-lock')\nFor some reason, I was getting an Angular injector error when it did the\ncheck for Auth0Widget being defined, which was pretty confusing. Then I\nrealized that Auth0.js/Auth0Lock don't attach themselves to window which\nwas causing the error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/129#issuecomment-189407444\n.\n. \n",
    "rhinoceraptor": "If you are using Browserify/Webpack, you have to manually do one of the following:\nwindow.Auth0 = require('auth0-js')\nwindow.Auth0Lock = require('auth0-lock')\nFor some reason, I was getting an Angular injector error when it did the check for Auth0Widget being defined, which was pretty confusing. Then I realized that Auth0.js/Auth0Lock don't attach themselves to window which was causing the error.\n. ",
    "TSteele27": "I ran into this issue today, and @rhinoceraptor's fix worked for me.\n. ",
    "yadue": "Could I ask for fix? It's pretty important when building script from npm via CI, just reorder them please.\n. ",
    "kpgarrod": "Thanks. Sorry I missed that!\nOn 16 January 2015 at 15:55, Martin Gontovnikas notifications@github.com\nwrote:\n\nClosed #130 https://github.com/auth0/auth0-angular/issues/130.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/130#event-220077572.\n\n\nKeith Garrod\nTel: +27-83-3000-988\nFax: +27-86-5757781\n. ",
    "calvinfroedge": "In case anyone else runs into this issue, while it gave a 401 and made me believe the username and password were not valid, it was actually a CORS issue. You can go into the app settings for your Auth0 app and add the URL you are testing from as a valid callback and CORS url.\n. Apparently I did not RTFM. I just noticed this in the documentation:\nauth.reset(options[, successCallback, errorCallback])\nThis will perform the \"Forgot your password\" flow. If you're using auth0.js it will send the email to confirm the password change. See the documentation here If you're using auth0-lock.js, it will open the widget in the reset password mode. It can receive in that case the same parameters as the signin method.\nThis method receives 2 extra parameters to handle the success and failure callbacks similar to signin.\nhttps://github.com/auth0/auth0-angular/blob/master/README.md\nSo, it appears as if the intent is to have the user enter email and password, and requires confirmation.\n. ",
    "broyeztony": "Hello,\nI have a more specific question. Feel free to move this post to the \nappropriate thread if needed.\nMy question is: Can we (and how) customize the change-password-widget-container component in the Hosted Pages > Password Reset template. ?\nThanks,\n. ",
    "saurabhgangarde": "Any answer or updates on questions above ?. ",
    "adrianchia": "This happens when Auth0-Lock is used instead of Auth0.js.\n. ",
    "tehfedaykin": "I'm having this issue as well not using Auth0-Lock.\n. ",
    "iannyanes": "Dup of #172 I suggest this ticket to be closed @ntotten \n. Dup of https://github.com/auth0/auth0-angular/issues/136  and it is fixed. I suggest this ticket to be closed  @ntotten \n. ",
    "whitneyit": "I'm having an issue with the success callback here.\nWhen auth.config.auth0js._callbackOnLocationHash = true and the Auth0 libName are provided, the success and error callbacks do not get invoked. However, when they are omitted everything works fine except I am still presented with the Lock screen for the User to then select the connection.\nI am using the following setup.\njs\n/**\n * Link a social profile to the users account\n * @param {String} type The identity connection name\n */\n$scope.link = function (type) {\n    auth.config.auth0js._callbackOnLocationHash = true;\n    auth.signin({\n        connection: type,\n        authParams: {\n            access_token: auth.accessToken\n        }\n    }, function (profile, token) {\n        console.log('linked');\n        store.set('profile', profile);\n        store.set('token', token);\n        $location.path(\"/\");\n    }, function () {\n        console.log('error');\n    }, 'Auth0');\n};\n. ",
    "ntotten": "Please rebase\n. I want to investigate this a little more to see if there is anything we can do to improve this.\n. Please rebase\n. Do you mean using Auth0-Angular and Auth0 connected to IdentityServer or are you wanting to connect auth0-angular directly to IdentityServer?\n. The sample is designed to work with Auth0.\n. Dup of https://github.com/auth0/auth0-angular/pull/193\n. Can you rebase?\n. Please rebase\n. @mehreencs87 seems this only updates to 8.2, should be 9\n. Please rebase.\n. @xinbenlv: We currently support angular 2, but this repo is specifically for angular 1. Checkout our quickstarts here: https://auth0.com/docs/quickstart/spa/angular2. We just updated everything to use Angular 2 RC4.\n. ",
    "aarondandy": "We are using auth0-angular 4.0.1 and are falling into the first condition:\nhttps://github.com/auth0/auth0-angular/blob/432573a224fdf151e6063b6a7d4bb202762e5ed4/src/auth0-angular.js#L161\nThe name of the function definition for Auth0 was being mangled which caused issues later during execution. We worked around this by excluding the Auth0 identifiers from any mangling process.\n. Yeah, we are sending the Auth0 function/constructor in as we bring it into scope using require.js .\n. ",
    "jmls": "I've just hit this problem as well - however it doesn't seem to be minimization that is causing the problem\n\nas you can see, the loaded src is not minified - \n\n. aaaarrrgggghhhhhhh\njust got this again\nauth0-angular.js:685 Uncaught ReferenceError: t is not defined\nthis is the order of my scripts\n<script src=\"../bower_components/auth0-lock/build/auth0-lock.js\"></script>\n <script src=\"../bower_components/auth0.js/build/auth0.js\"></script>\n <script src=\"../bower_components/auth0-angular/build/auth0-angular.js\"></script>\n <script src=\"../bower_components/angular-jwt/dist/angular-jwt.js\"></script>\n <script src=\"../bower_components/a0-angular-storage/dist/angular-storage.js\"></script>\nauth0.js@7.0.2\nauth0-lock@9.2.1\nauth0-angular@4.2.0\nplease please could someone get a resolution for this - it's driving me nuts\nedit\nJust browsing the source in auth0-angular.js and low & behold, line 685 ..\n\nSee the \"t\" ? ;)\n. good news - I assume that you will be making a new release so that we can pull this fix ? It's borking in all my qa systems atm :(\n. thanks\n. I am getting an error (https://github.com/auth0/auth0-angular/issues/191) in the library - perhaps this is breaking your state ?\n. sorry to bump this, but I am trying to get the auth system working for a demo that I have in a few hours - I'm kinda stuck. I;ve tried looking at the code, but the proliferation of \"this\" throws me ;)\n. anyone ?\n. what do I need to do in order for someone to throw some light on this error ? Do a chicken-dance ? ;)\n. ",
    "peterholcomb": "+1 to what jmls is seeing.  We also just started seeing this.\n. @mgonto Any chance you are getting other reports of this happening?  This just started happening to an app of ours.\n. ",
    "phamtuananh791994": "\nI have the same issues. Can you please fix it immediately. Thanks you \n. ",
    "mpaul31": "i too am having problems. if i do not minify auth0.js all is good\n. i do not see you redirecting anywhere (within your current app) after the user logs out. are you doing this elsewhere (ssoLogout event) ?\n. @bwinchester that is actually what i do. my custom directive simply calls auth.signout() and i have an event listener that handles the logout event and performs session clean-up and redirects. i was just confused because this is all the angular auth0 code does on signout and your code does not show any state changes:\nauth.signout = function () {\n                    auth.isAuthenticated = false;\n                    auth.profile = null;\n                    auth.profilePromise = null;\n                    auth.idToken = null;\n                    auth.state = null;\n                    auth.accessToken = null;\n                    auth.tokenPayload = null;\n                    callHandler('logout');\n                };\n. it seems we may need to check and see if an error is returned in the redirect back from auth0 and break out of the above function\ni just added the following to the verifyRoute\nvar hashResult = config.auth0lib.parseHash();\n                        if (hashResult && hashResult.error) {\n                            return;\n                        }\n. ",
    "GregaVrbancic": "Hi guys! Is there any update regarding this issue?\n. ",
    "soenneker": "I'm also running into this problem after minification of the JavaScript library 'auth0-lock' version 9.0.1 and 9.0.4.\n. Just so you're aware, this is happening in the non-angular version of Auth0 too.\n. ",
    "krokhale": "Breaking on minifying continues to be an issue for me and is forcing me to switch to Firebase web ui now. \nTo recreate the issue:\nGenerate a vanilla app using: https://github.com/angular-fullstack/generator-angular-fullstack and add auth0-angular and create a build which minifies assets.\nThese are the three modules i include in the angular app:\n'auth0',\n'angular-storage',\n'angular-jwt'\n. Thanks! Here it is:\n\"a0-angular-storage\": \"^0.0.15\",\n\"angular-jwt\": \"^0.0.9\",\n\"auth0-angular\": \"^4.1.0\"\n. \n- I have pushed in a test app to: https://github.com/krokhale/auth0-test\n- I was wondering if jwt or storage modules were not minifying as expected. But it ends up that after i minify it without those, there is still errors in the config block.\n- Check out line 27 in client/app/app.js  If you uncomment out authProvider callback and minify it, it breaks down again. I am guessing it has something to do with 'authProvider' in your code that breaks things.\n- To minify locally and see if it works run: grunt serve:dist --force\n- Let me know if any questions.\n. Just annotated and few changes for callbacks on authProvider.\n-  It works, IF there are no callbacks (loginSuccess and loginFailure) on authProvider. Check out line 28-42 in app.js\n- You should be able to pull in the changes and run this to replicate it : grunt serve:dist --force\n. Thanks, this is all set. The annotation works. Though i am not sure why we would need to annotate explicitly, should't the SDK handle all that already? \n. - The generator by default does annotate. And i have not had an instance of using a module and having to annotate manually except in this case. This is present in the Gruntfile in your repo as well:\n\n- Though this resolves my issue for now, but i think there is something funky going on with the SDK which does not play well with ngAnnotate. Since if we remove the manual annotations, it does not minify well.\n. ",
    "schwer": "I see this issue manifested when the user enters their email/password into my login form. Instead of using the popup method as specified through the signin api, the callback method is used, which ultimately yields an error. The error goes away when I supply\njavascript\ncompress: {\n  keep_fargs: true\n}\nto the uglify-js module that minifies the auth0-angular codebase.\n. I haven't upgraded lock to that version. I'll give it a try.\n. I used the following workaround to solve the issue:\nauth.config.auth0lib.once('client loaded', function(ignored) {\n  auth.signin({\n    gravatar: false,\n    dict: dict,\n    icon: loginLogoutServiceConfig.icon,\n    closable: false,\n    rememberLastLogin: false,\n    ...\n});\n. To add more color- I'm calling the auth.signin function from an angular service immediately after angular loads- I don't load any directives or other resources prior to making the call. My guess is that the race condition does not manifest itself in those cases because there's time for the DOM to get updated.\n. ",
    "chuckmah": "i ran into the same issue, was able to make it work by adding 'Auth0' to my signin call.\nauth.signin({\n        connection: 'Username-Password-Authentication',\n        username: user,\n        password: pass,\n        authParams: {\n          scope: 'openid name email',\n        },\n      }, (profile, idToken, accessToken, state, refreshToken) => {\n        store.set('profile', profile);\n        store.set('id_token', idToken);\n        onLoginSuccess();\n      }, (error) => {\n        onLoginFailed();\n      },\n      'Auth0')\ni was using Uglyfy with webpack \nnew webpack.optimize.UglifyJsPlugin({\n          sourceMap: true,\n        })\n. ",
    "idanb11": "Hi,\nI have the same error too:\nUncaught TypeError: Cannot read property 'parseOptions' of undefined\nI'm using the following scripts:\njs\n<script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.3.20/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"//cdn.auth0.com/js/lock-9.2.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"//cdn.auth0.com/w2/auth0-angular-4.min.js\"></script>\nNo minification is used...\n. nobody???  :-)\n. ",
    "msheanimate": "Has this been resolved still running into the same issue.  Cant say that i have had a good experience using your tool\n. You have too many issues with your tool, cant say that impressed at all by commnets and going through the posts here. ",
    "sergiy-talashko": "I think problem in minification, because my code is also not working in minify style:\nauth.signin({\n      authParams: {\n        scope: 'openid user'\n      }\n    }, function(profile, token) {\n      store.set('profile', profile);\n      store.set('token', token);\n      window.location.href = '/';\n    }, function(error) {\n      console.log(\"There was an error logging in\", error);\n    });\n. @johnstontrav Did you resolve your problem?\n. @christiannwamba Sorry, I do not work anymore on project, where are I used it.\n. ",
    "lewma": "I agree, this is why my $locationChangeStart looks like:\n```\n    var token = store.get('token');\n    if( token )\n    {\n        if( !jwtHelper.isTokenExpired( token ) )\n        {\n            if( !auth.isAuthenticated )\n            {\n                auth.authenticate( store.get( 'profile' ), token ).then( function( data )\n                {\n                    console.log( 'authentication passed' );\n            }, function( err )\n            {\n                console.log( 'authentication failed' );\n                $state.go( 'login' );\n            } );\n        }\n        else\n        {\n            console.log('already authenticated');\n        }\n    }\n    else\n    {\n        console.log('Token has expired');\n        $state.go('login');\n    }\n}\nelse\n{\n    console.log('Could not find token');\n    $state.go('login');\n}\n\n```\n. ",
    "lbweb": "I agree - however I used this code below for the run function:\nPoints:\n1. If there is a route that is private - auth.hookEvents will take care of redirecting the user to a login page. \n2. Therefore, on each route change do two things: a. check the token for expiry and if it has expired, log the user out. b. if the user has a token that is not expired, re-authenticate them back in. \n```\n.run(function($rootScope, auth, store, jwtHelper, $location) {\nauth.hookEvents(); //Check User is Authenticated before letting them thorugh to secure routes \n// This events gets triggered on refresh or URL change\n  $rootScope.$on('$locationChangeStart', function() {\nvar token = store.get('token');  //get token\n\nif(token){ //if token exists and is expired\n    if (jwtHelper.isTokenExpired(token)) {\n\n            //sign the user out \n             auth.signout();\n              store.remove('profile');\n              store.remove('token');\n              $location.path('/login');\n    }\n    else { //if token exists but is not expired - sign the user back in. \n        auth.authenticate(store.get('profile'), token);\n    }\n}\n\n});\n\n});\n```\n. ",
    "motin": "Thanks for this thread. Together with https://ask.auth0.com/t/auth0-angular-lock-widget-ionic-cordova-close-widget/344 this helped me hook into the \"hidden\" event in angular:\nvar lock = auth.config.auth0lib;\nlock.once('hidden', function() {\n    console.log('app.run: hidden');\n});\n. Related: http://docs.auth0mockapi.apiary.io/ (Source code: https://github.com/neam/auth0-mock-api)\n. Haven't checked auth0's source code yet, but something like this maybe? https://github.com/userapp-io/userapp-angular/blob/9edac02f05ed96620efba68f3b3fb755b67b00a7/angularjs.userapp.js#L60-L67\n. ",
    "RYFN": "Hey, if you bower install auth0-angular into an empty folder, and copy the contents of the bower_components/auth0-angular/examples/custom-login to the root of you project, you can replace your dependancies with bower dependancies -\n```\n\n\n\n \n \n \n \n \n```\nThis is where I'm seeing the issue - the auth0 lock window pops up briefly while I try and authenticate, then closes itself again. Unfortunately it closes too quickly for me to grab a screenshot of!\n. This has pulled down the following -\nangular 1.2.28\nauth0 6.3.1 (although in the bower.json it says \"experimental bower support\")\nauth0-angular 4.0.4\nplunkered here - http://plnkr.co/edit/nYtj7W5C7BIwDQKOLKSO?p=preview \nI copied in the locally installed angular, auth0 and auth0-angular into the example. It seems to be behaving the same way, in both chrome and safari.\n. If the example custom login could be updated with this parameter, that'd be helpful too.\n. ",
    "kasunkv": "Connecting auth0-angular directly to IdentityServer v3. I have identityServer v3 running on my development PC and from what i figured the currently auth0-angular connects to the Auth0 Identity Infrastructure. Can i configure it to connect to my development Identity Server v3 for authentication?\n. ",
    "dixso": "Hi,\nI think you're right.\nCould you check the login demo page with Angular Material and add the action to the button ?\nhttps://material.angularjs.org/#/demo/material.components.button\nReference:\nhttp://stackoverflow.com/questions/12729122/prevent-error-digest-already-in-progress-when-calling-scope-apply/17958847#17958847\n. ",
    "twistedstream": "@mgonto yes I did see those callbacks and they do work. However they activate after, for example, the reset password form completes, but then that form transitions to a login form after they fire (so the user can log in with the new password). I found no easy way to hook into the success event of that logon form, which seemed like a natural place to refresh the main view with user profile data.\n. ",
    "ghost": "Correct. The user is able to stay in the UI, but the data will not be returned from the backend. Thanks you guys.\n. Hey thanks, \nThis was the problem https://ask.auth0.com/t/angularjs-rails-authenticate-401-unauthorized-in-1ms/2244/7 being due to the latest ruby-jwt update affecting the \nconfig.token_secret_signature_key\nline in the config at the time. \nThis now works for me. \n. ",
    "nolazybits": "just updated my bower and had to look in my browser history to find the fix again... I wished this pr would be accepted already\n. ",
    "TrevorBasinger": "I'd also like for this to be merged. Is there a reason why it's not yet?\n. ",
    "lobo": "I've been asked by a client to make this merged. Any reason for it not to be merged? Thanks in advance.\n. ",
    "daviddk": "Same issue here, a merge would be nice indeed. \nHowever this fix won't really fix the problem I'm encountering, it just makes sure the right error is thrown:\nError('Auth0Widget is not supported with this version of auth0-angular anymore. Please try with an older one') or Error('Cannot initialize Auth0Angular. Auth0Lock or Auth0 must be available')\nThis happens when I include the auth0-lock package I downloaded from NPM, If I include this package the 'dirty' way (CDN in my index file), everything works fine. \n. ",
    "bechampion": "did i post this in the wrong place?\n. ",
    "andreisaac": "same here...\n. ",
    "ChristianHaro": "Yes I am having the same issue is not working at this time I have downloaded the same exact code(modified credentials) and tried but the same issue arise\n. i am not including both i am only including the standard \n//cdn.auth0.com/w2/auth0-6.7.js\n. ",
    "stodolos": "I had the same issue, and then I realized I was including the lock JavaScript file, when you want the lock script OR the standard auth0 script, not both.  Hopefully that's it.\n. ",
    "mitiaptest": "I have resolved with passing parameter through url @Annyv2 Thank you for your time.\n. ",
    "maxlapides": "I too am having this issue!\n. After further investigation, I discovered that the reason why this wasn't working for me was I was attempting to execute auth.authenticate() before authProvider.init() was executed. Whoops!\n. ",
    "dazaria": "This issue is actually causing us a few headaches as well...\n. ",
    "ddbaron": "+1 \n@mgonto Hi, the bower dependency is ancient. What happens if we try to use auth0-angular with the latest lock and auth0.js??\njavascript\n\"dependencies\": {\n    \"angular\": \"*\",\n    \"auth0.js\": \">= 5.2.2\",\n    \"auth0-lock\": \">= 6.3.0\"\n  },\n. ",
    "davideweaver": "@bbonnet do you have auth0-angular working in production? I have it working using the webpack dev server but can't get it working out of the dist folder because of some unkown providers. \n. I am using the UglifyJSPlugin, and that is the cause of my dist issues. It's renaming my injected arguments. I am using $inject to prevent that from happening, but missed it for my loginSuccess function. The following is how it should work.\nfunction loginSuccess($state, profilePromise, idToken, store) {\n    profilePromise.then(function(profile) {\n        store.set(\"profile\", profile);\n        store.set(\"token\", idToken);\n        $state.go(\"home\");\n    });\n}\nloginSuccess.$inject = [\"$state\", \"profilePromise\", \"idToken\", \"store\"];\nused later with\nauthProvider.on(\"loginSuccess\", loginSuccess);\nWith that change, it started working. My issue, not an Auth0 issue.\n. ",
    "bbonnet": "@davideweaver I do have a similar issue building to a dist folder when using the Webpack UglifyJSPlugin.  If I disable this plugin then it build properly.  Are using this plugin also?\n. ",
    "contra": "Links were dead on some pages but I dug around more and found this: https://auth0.com/docs/libraries/lock/sending-authentication-parameters#supported-parameters\nWould be nice if this was documented\n. ",
    "Phobos98": "Same problem here :(\n. ",
    "jheuing": "Sees not to be a local issue, as a friend of mine can reproduce the same thing - and also has no clue.\n. Thanks Gabriel, works great! :-)\n. ",
    "gnandretta": "Adding the following dependencies to bower.json before auth0-angular should fix the issue:\n\"auth0-lock\": \"^8.2.1\",\n\"auth0.js\": \"~6.4.1\",\n. ",
    "set321go": "Looks like they have another one on the go in a separate repo https://github.com/auth0/auth0-angular2 I was looking for the same thing, no idea what state it is.\n. ",
    "imatefx": "i don't think it is a library , it is just an example repo which focus mainly on angular-jwt2.\nIt will be useful to get refreshToken and updateUserMetadata functions as a library for angular 2\n. ",
    "mehreencs87": "@ntotten Done , check the second commit.\n. ",
    "RobbertWolfs": "I found why ua was 'undefined', ua was the variable for navigator.useragent and I used jsdom for my mocha tests.. Jsdom is a virtual DOM so it doesn't have a useragent...\nNo I have updated my gulp command to the following: \nI updated the line of the compilers..\ngulp.task('test', Object.assign(() => {\n    return gulp\n        .src([\n            './test/spec.helper.mocha.js',\n            'app/**/*.spec.js',\n            'server/**/*.spec.js',\n            'test/samples/*.spec.js',\n        ], { read: false })\n        .pipe(mocha({\n            reporter: 'mocha-circleci-reporter',      // spec, nyan, ...\n            env: { BABEL_ENV: 'node' },               // to ignore scss imports\n            compilers: 'js:babel-core/register,js:packageify,,ejs:ejsify',\n        }));\n}, {\n    description: 'Running unit tests with mocha',\n}));\nBut now I get the following error :\n```\nulp test\n[16:13:53] Requiring external module babel-register\n[16:13:55] Using gulpfile ~/git/pelckmans/pakket-p/gulpfile.babel.js\n[16:13:55] Starting 'test'...\nmodule.js:328\n    throw err;\n    ^\nError: Cannot find module 'package.version'\n    at Function.Module._resolveFilename (module.js:326:15)\n    at Function.Module._load (module.js:277:25)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/auth0-lock/index.js:114:21)\n    at Module._compile (module.js:398:26)\n    at Module._extensions..js (module.js:405:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (/Users/robbertwolfs/git/pelckmans/pakket-p/app/index.js:31:18)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/babel-register/lib/node.js:128:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/babel-register/lib/node.js:138:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (spec.helper.mocha.js:22:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/babel-register/lib/node.js:128:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/babel-register/lib/node.js:138:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at /Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/mocha/lib/mocha.js:219:27\n    at Array.forEach (native)\n    at Mocha.loadFiles (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/mocha/lib/mocha.js:216:14)\n    at Mocha.run (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/mocha/lib/mocha.js:468:10)\n    at Object. (/Users/robbertwolfs/git/pelckmans/pakket-p/node_modules/mocha/bin/_mocha:403:18)\n    at Module._compile (module.js:398:26)\n    at Object.Module._extensions..js (module.js:405:10)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Function.Module.runMain (module.js:430:10)\n    at startup (node.js:141:18)\n    at node.js:1003:3\n[16:13:56] 'test' errored after 1.62 s\n[16:13:56] Error in plugin 'gulp-spawn-mocha'\nMocha exited with code 1\n```\nI also need to add packageify to the compilers for .js but I don't now how..\nSame issue as https://github.com/auth0/lock/issues/314\nAnyone a solution?\n. ",
    "cbouvier15": "Thanks! This works great! \n. ",
    "DESHU44": "I have configured like below codes but still not able to get email id from facebook. Please guide me.\nlock = new Auth0Lock(myConfig.clientID, myConfig.domain, {\n    authParams: { scope: 'openid email'}\n  });\nand \nlock = new Auth0Lock(myConfig.clientID, myConfig.domain, {\n    auth: {\n          redirectUrl: 'http://localhost:3000/',\n          responseType: 'id_token',\n          params: {\n            scope: 'openid email' // Learn about scopes: https://auth0.com/docs/scopes\n          }\n        }\n  });\n. ",
    "rjsmith25": "nevermind i figured out i had setup something wrong\n. ",
    "bwinchester": "Here is a hidden iframe implementation of their suggestion of opening a window and visiting the logout url in the user's browser. It combines your url about their logout suggestion and the default logout example they provide. It avoids needing to redirect to logout url and also avoids a new tab or blank window. Replace [appName] with your auth0 app name. I tried to AJAX the logout url, but it wasn't deleting the cookies because my app is obviously not the same domain as auth0. That's why this is an iframe. This logout method ensures if they click logout, they don't come back in the same browser and have the ability to pickup an unexpired token and login without authenticating again. \nfunction logout() {\n      var logoutIframe = window.document.createElement(\"iframe\");\n      logoutIframe.setAttribute('style','display:none;')\n      logoutIframe.setAttribute('src','https://[appName].auth0.com/v2/logout');\n      window.document.body.appendChild(logoutIframe);\n      store.remove('profile');\n      store.remove('token');\n      resetProfileNull();\n      auth.signout();\n};\n. @mpaul31, you can add a redirect functionality after the logout function. I don't have a redirect on logout because auth0-angular adds some functionality to angular's router. I predefine which routes need authentication to view, and when you logout, it goes to a default route. \n. Yeah, The router event listeners for auth0 handle that and redirect to a default page.\n. I was just trying to comment and let people know that the Auth0 Angular examples are out-dated and to remove the locationchangestart listener from the example if their authRequired pages are redirecting to login/default pages, even when valid token is stored in browser. \n. ",
    "kim0z": "@ashishtilara Hi, I have the same issue, the signout works in local, but I don't see the signout window, and the auth0 service doesn't updated in the history that I was logged out, did you find a solution? \n. connections: ['facebook'],\n. ",
    "divinentd": "I am also running into the problem where logging out via mydomain.auth0.com/v2/logout does not log you out from auth0.com, so that if someone gets ahold of the token it may still be valid.\nI like the proposed blacklist solution, but the company has a desire to keep all of the authentication work within Auth0.\nAnother solution that has been proposed is to shorten the life of the JWT, and use a Refresh Token to renew it in the background. The advantage being that Refresh Tokens can be revoked when the user logs out.\nWhat do you think?. ",
    "boneskull": "actually it should be port 3000, so I'll see why it isn't doing that.\n. (my bad; I had defined a bash function that did roughly the same thing)\n. ",
    "frontweb": "I'm having the same issue. The token stored in local storage is validated through an AJAX call to mysubdomain.auth0.com. How are you delaying the redirection to the login page until this AJAX call completes?\n. ",
    "allenan": "I was having the same issue (page refresh redirected to the login page). I was able to solve this by removing the $rootScope.$on('$locationChangeStart' recommended by the docs and just putting the rest of the contents in the run method like this:\njavascript\n.run(['$rootScope', 'auth', 'store', 'jwtHelper', '$''location', function($rootScope, auth, store, jwtHelper, $location) {\n  //remove this listener\n  //$rootScope.$on('$locationChangeStart', function() {\n    var token = store.get('token');\n    if (token) {\n      if (!jwtHelper.isTokenExpired(token)) {\n        if (!auth.isAuthenticated) {\n          auth.authenticate(store.get('profile'), token);\n        }\n      } else {\n        auth.refreshIdToken(token);\n      }\n    }\n  //});\n}])\n. ",
    "yangmillstheory": "Looks like this will be resolved in the next release by 0abb0bb63a2a97c8232987f2a1afe10469d467fe.\n. @markcosta do you know what part of auth.authenticate makes it asynchronous? I'm curious as to this change too.\nIn my own use case, I just listen to $stateChangeError, check !store.get('profile') || !store.get('token') and !jwtHelper.isTokenExpired(store.get('token')) to check authentication (even on page refresh), and stopped checking auth.isAuthenticated entirely, since that flag is not set when the page is refreshed even if a valid token exists in local storage.\nI didn't see the point of calling auth.authenticate at all, since it seemed to just update auth.isAuthenticated. I didn't see the need to check this extra source of truth (especially when I have to update it myself), since I was already doing the above, which works just fine.\n. ",
    "aguerere": "Also the README file is incomplete. To make it work, two entries should be added to the hosts file, not just one.\n. ",
    "rajibahmed": "This is solved, It was a problem in my code. \n. This is not properly fixed for when you are not using refreshToken.\n. ",
    "lstone": "I ran into this issue too. Thanks for the workaround!\n. Same thing happening to me w/ beta1 and auth0-angular 4.2.3.\n. ",
    "sibiraj-s": "Now in recent update(angular-ui-router 1.0.3), few things changed $transition takes only one parameter\n$transitions.onStart({}, function(trans) {\n        if (trans.$to().data && trans.$to().data.requiresLogin) {\n            if (!auth.isAuthenticated) {\n                $state.go(auth.config.loginState);\n             }\n        }\n    });. ",
    "yvonnewilson": "For the record - agreed that this issue doesn't apply to this SDK.\n. ",
    "steve-baer": "Just had to fork and lock the version. Surprised that the bower dependency definitions are so optimistic.\n. ",
    "abanctelchevrel": "A temporary workaround is to explicitly require auth0.js in your angular app bower.json (add the second line in code below): \n\"auth0-angular\": \"^4.1.0\",\n    \"auth0.js\": \">= 6.8.3 < 7.0\",\nThis will resolve auth0.js to v6.8.3\n. ",
    "westy92": "Conflicts resolved! \n. Are you aware my changes were undone in https://github.com/auth0/auth0-angular/commit/d7536734b37bbc9f9cb554f1b191b17a2fba7bec?\n. ",
    "uded": "Any movement on this? This is breaking change in that auth.js v7.x have introduced. That should be fixed or more restrictive dependency (v6.8.x) should be included rather than allowing automatic update to new one...\n. ",
    "sakopov": "Bump. Any updates on this?\n. Not using a CDN. I'm pulling auth0.js from bower and auth0-angular.js by pulling from master since 4.1.0 on bower is known not to work with the latest auth0.js.\n. Sorry if i made it unclear. This error occurs in 4.2.1 in conjunction with 7.0.2.\n. I'm not sure if this is a fix for this problem. The problem starts here in auth0.service.js on this line which passes the state from the URL hash to onSigninOk but not the profile object. onSigninOk always expects the state to be passed in, either directly or via the profile object. In this case it was never returned in Auth0 response because it was never passed to auth0 during the signin call. So it's not available at all.\n. As a quick workaround either passing an empty profile object from $locationChangeStart handler...\nonSigninOk(\n    hashResult.idToken || hashResult.id_token, \n    hashResult.accessToken || hashResult.access_token, \n    hashResult.state, \n    hashResult.refreshToken || hashResult.refresh_token, \n    {});\nor checking that profile object is available before trying to use it in onSigninOk seem to resolve the issue:\n```\nvar onSigninOk = function (idToken, accessToken, state, refreshToken, profile, isRefresh) {\n    idToken = idToken || (profile ? profile.idToken : null);\n    accessToken = accessToken || (profile ? profile.accessToken : null);\n    state = state || (profile ? profile.state : null);\n    refreshToken = refreshToken || (profile ? profile.refreshToken : null);\n...\n}\n```\n. ",
    "SomaYarlagadda": "I agree with @uded When would you have the fix for breaking changes. The automatic update to v7.x has caused lot of issues. Please update us on the status. Thank you.\n. ",
    "DigitallyBorn": "This has actually disabled the login to our website (we're using the auth0 CDN). Is there a workaround we can deploy to address this issue?\n4.2.0 doesn't seem to exist on the CDN and asking for 4.2 gives us 4.2.1. Am I misunderstanding the naming convention?\n. ",
    "patlux": "Please upload 4.2.3 with this change to npm. Currently @4.2.2.\n. ",
    "Bekt": "+1\nWe've made a hotfix to link to https://cdn.auth0.com/w2/auth0-angular-4.js\n. Do you have information on what had happened?\nI imagine this affected large number of users.\n. Okay, please do consider the affects you may have when you offer something via a CDN (or any service for that matter) next time you release a new version. I think this particular could have been avoided if somebody verified the files exist after the build (or put a simple curl test as part of the build process).\nThis caused our entire front-end app to crash affecting a lot of users. Can't afford this from auth0 as a paying customer \ud83d\udc4d\n. This release caused a breaking change for us in production. Pointing to v4.2.3 fixed it.\n. @chenkie, I wish I had more info but we didn't spend any time investigating as it was urgent. \nOne thing may or may not be related is that our auth0.js version is behind at v5, instead of being on v7. The call that was breaking was auth.signin with success/failure callbacks.\n. ",
    "bojank": "this commit https://github.com/auth0/auth0-angular/commit/8e3271a6247e3e15e48ef5004b7731146523acf0 was not included in the build for some reason. just go to your bower_components/auth0-angular/build folder and modify the file to include those changes manually until they make a new release with them\n. this commit 8e3271a was not included in the build for some reason. just go to your bower_components/auth0-angular/build folder and modify the file to include those changes manually until they make a new release with them\n. ",
    "adrogon": "Hello,\nWould it be possible to rebuild/bump the 4.2.3 version?\nThe current master branch and 4.2.3 (latest) tag both contain the erroneous build/auth0-angular.js file from 4.2.2.\n4.2.3 did not fix this, even though the commit is tagged 4.2.3.\nThank you.\n. ",
    "louisnk": "+1\n. lock v7 has some serious vulnerabilities (able to reset anyones password, if I recall correctly).\nUsing the versions from the linked PR is a better choice.\n. ",
    "ainestal": "After modifying the file in lines 360 and 614 with the code from the commit looks like it works again, thank you !\nI hope this commit is included soon. Currently I'm developing using 2 different computers and I'm not committing bower_components. That means I have to do this change manually in both computers and avoid touching the module at all afterwards\n. ",
    "mamluka": "+1\n. ",
    "kukicado": "Try this: https://github.com/auth0/angular2-jwt :) \n. ",
    "xinbenlv": "thank you, but I am using Auth0Lock, how do I use it with angular2-jwt to get api token for firebase?\n. Thanks!\nZainan Victor Zhou \u5468\u8f7d\u5357\nSoftware Engineer at Google\nEmail: zzn@zzn.im\nPhone: (650) 336-5691\n\u5fae\u4fe1\u53f7\uff08WeChat ID\uff09 xinbenlv\nAlumni of Tsinghua, Hopkins, Microsoft Research Asia\nLinkedin www.linkedin.com/in/zainanvictorzhou\nOn Thu, Jul 7, 2016 at 1:17 PM, Nathan Totten notifications@github.com\nwrote:\n\n@xinbenlv https://github.com/xinbenlv: We currently support angular 2,\nbut this repo is specifically for angular 1. Checkout our quickstarts here:\nhttps://auth0.com/docs/quickstart/spa/angular2. We just updated\neverything to use Angular 2 RC4.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/auth0/auth0-angular/issues/277#issuecomment-231194403,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAnFRRqL5pYHAmNPKtKyJALTosVY8amzks5qTV7DgaJpZM4I5PqD\n.\n. \n",
    "boly38": "Hi, thanks for trying to reproduce @christiannwamba !\nIn same time I fix another issue where I loaded twice my LoginController. So I will try to reproduce without this controller issue to see if I get the same result as you.\n. Hey @christiannwamba please re-open (seems I cant ?)\nEven with fix on controller I was able to reproduce.\nHere is a way I use to reproduce under. \nif you comment the first line; all is fine, auth0 lock is showed.\nelse the first line add a carriage return to auth0 client id: auth0 lock widget is partially created (and not visible).\naCid = aCid + String.fromCharCode(13);\nauthProvider.init({\n      domain: aDomain,\n      clientID: aCid,\n      loginUrl: '/login'\n    });\nIf I'm alone to produce this result, I have maybe another things in my context that have some side effect..\n. I agree @christiannwamba Thanks!\n-- Edit about Lock10:\nOkay I will ASAP and upgrade this thread after.\n. I was unable to find working sample auth0-angular + Lock10.\n. out of my project context, I clone your samples\n- I copy \"01-Login\" onto webserver\n- I update app.js (around line 24)\n//Configure Auth0\n    var aCid = AUTH0_CLIENT_ID;\n    aCid = aCid + String.fromCharCode(13);\n    authProvider.init({\n      domain: AUTH0_DOMAIN,\n      clientID: aCid,\n      loginUrl: '/login'\n    });\nWithout modification, your sample works well and show lock widget (after javascript \"shown\" alert).\nWith additional character 13 at the end of client id string, the lock widget became visible (after javascript \"shown\" alert) and stay in \"loading\" state indefinitively:\n(nothing special in developer's view: network or JS console..)\n\n. ",
    "cassiusclayd": "This is pretty annoying, but if you store any data you need in rootscope, then use auth.authenticate as a promise, you can handle your own check after.  \nauth.authenticate(profile, token)\n.then(function(profile){\n   //Your stuff\n});. ",
    "adstep": "I'm also seeing this issue!\n. ",
    "satish0585": "Done\n. ",
    "saulfrance": "I got this error as well when I installed using bower. I managed to get it working using CDN with these versions:\n<script type=\"text/javascript\" src=\"https://cdn.auth0.com/js/lock-7.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdn.auth0.com/w2/auth0-angular-4.js\"></script>\n. This pull request also does the job:\nhttps://github.com/auth0/auth0-angular/pull/308/commits/5f0b87951139d82ee01dbfbe8b099b1f6cae5249\n. ",
    "jeremy-seipelt": "I got this issue, too. Seems like authProvider has no auth0lib property with a getClient method or my dev Tools doesnt show me that property....\nIf i get it right authProvider is referenced by 'this' in the init function and should have the this.auth0lib.getClient() else it would throw the error.\nSwitching back to lock 9 fixed it for me\n. ",
    "jgangemi": "v10 doesn't work w/ angular at the moment, so you have to use v9.\nhttps://auth0.com/docs/libraries/lock/v9/customization\njust add the options you want to set to the signin method.\n. lock 10 doesn't work with angular yet.\n. bueller?!?!\nthis issue is delaying an integration i am trying to roll out, thanks!!\n. i will also note that when using lock i get an error stating it can't reach the backend server (which may be a red herring). chrome and safari work without issue here as well.\n. grr - this ultimately was caused by privacy badger, nothing to see here after all.\n. were you using version 10 of lock? if yes, it's not compatible w/ the 4.x series of the angular libs.\n. ",
    "drewsymo": "Any update on when Lock 10 will be supported?\n. ",
    "masterkitano": "Finally I found the way looking at the Auth0-angular.js source. Apparently you have to pass the Lock options you want to setup on the authProvider.init method when adding the provider to your main app. I was doing it on the Auth.signin method :(.\nAlthough, I think this should be documented somewhere since it's a very useful feature.\nExample of usage:\njavascript\nangular.module('app', ['auth0',\n                           'angular-storage',\n                           'angular-jwt'])\n    .config( ['authProvider', function appConfig (authProvider) {\n        //authProvider init configuration\n        authProvider.init({\n            domain: 'ignus.auth0.com',\n            clientID: 'IlrzSD7IOPlEaNZPo3HjPtWECKwoSqiH',\n            container: 'lock-container-id' //your lock container div's id\n        });\n    }]);\n. I found something interesting that I don't see anywhere in the docs:\nIt seems that the current Auth0-angular implementation only works with Lock v9.0, and I struggled a while trying to make this work. In case anyone is facing the same, I found that:\nfor Lock v10, you pass the Lock options on the init, but for Lock v9, the options must be passed on the show method, so in this case, to make Lock v9 to be shown inside your own container instead of a modal with this current version of auth0-angular, you must do the following when you use the auth signin method:\njavascript\nvar lockOptions = {container: \"login-lock-container\", \n                              dict: 'es',\n                 rememberLastLogin: false};\nauth.signin(lockOptions);\nagain, this is for Lock v9.0 and auth0-angular v4.2.2\n. ",
    "MaxHorstmann": "Looks like the problem is here in auth0.service.js:\nvar getDelegationTokenAsync = authUtils.promisify(config.auth0js.getDelegationToken, config.auth0js);\n^^ config.auth0js seems to be undefined \n. ",
    "baerrach": "Google found this page for me, and it was definitely a privacy badger issue. Thanks.. ",
    "runes83": "Trying to find it also, but no luck so far.\n. That worked, but as a side note why does not these (custom connections) show up as the other connections? Much easier if everything could be administered from the portal (Auth0) instead of adding custom code.\n. ",
    "ashishdasnurkar": "Please try this\nauthProvider.auth0lib.on('signin ready', function() {\n     var link = angular.element('<a class=\"a0-zocial a0-sharepoint\" href=\"#\"><span>Login with Steam</span></a>');\n     var iconList = angular.element(document.querySelector('.a0-iconlist'));\n     iconList.append(link);\n     link.on('click', function() {\n         authProvider.auth0lib.getClient().login({connection: 'Steam'});\n     });\n  });\n. Glad to hear it worked. And you make great suggestion. Could you post a enhancement request on auth0-lock repo?\n. ",
    "zeus3rd": "Correction, rolling back auth0-lock to 9.2.1 fixes this issue\n. ",
    "danww": "FYI, the workaround, specifically:\nbower uninstall auth0-lock\nbower install auth0-lock#9.2.2\n. ",
    "chenkie": "@Bekt what is it that broke?\n. Thanks!. ",
    "Walraz": "I have the same problem, the auth0-lock popup is showing when enter wrong password or just press my custom login button. the onLoginFailed Callback is never called :/\n. ",
    "Naxus28": "Are you guys passing sso: false in auth.signin? That should prevent the popup. \n. ",
    "gpicazo": "Anyone?\n. Closing this issue. The problem was that I was including an npm package called \"auth0\" instead of \"auth0-js\".\n. ",
    "Zeychiel": "Hi,\nSame error since a new npm i, after working fine for a year.\nI am using it with browserify and AngularJS\n. I solved it by downgrading auth0-lock to a <10.0.0 version (9.2.2).\nauth0-lock ^10.0.0 is not supported yet by Angular #313 \nYou say you don't use lock...but this may be a place to start searching.\n. ",
    "Amialc": "As you can see here there is angular-lock package that support lock v10.\n. fixes https://github.com/auth0/auth0-angular/issues/337\n. Do you mean sinon.stub() without any parameters?\n. ",
    "AzRu": "Any chance this will be added soon so I don't have to use locally modified src files? \n. ",
    "cmddavid": "Having a similar problem here, config.auth0js also undefined:\njQuery.Deferred exception: config.auth0js is undefined this.$get</auth.refreshIdToken@http://localhost:9000/bower_components/auth0-angular/src/services/auth0.service.js:395:25. @razlani, how did you fix this problem?. ",
    "razlani": "@cmddavid I used angular-auth0 v 2 and the renew auth method to silently authenticate.\nGood luck dude!. ",
    "hrajchert": "Yes, this is needed in order to configure the backend to be on a different webserver than the client\n. Well, I need to point to a different server, so either I create this \"configuration file\" (checkout config.js) or I say in the laravel/README.md: modify scripts/controller.js on line X to point to http:///api/protected.\nI thought this was simpler and more readable\n. sure, you know Angular best practices more than me, as long as its easy for the user to change\n. ",
    "dschenkelman": "should we just say \"after which they can link 'Account B' (e.g.: Facebook) to their original account\"? Note that I also propose changing his to their, he to they.\n. I see that other documents here use 'you' instead of 'we' for the instructions (although not all are consistent). Should we leave this as is or change it?\n. I like the update. They (and derived forms such as their, etc.) are accepted forms of referring to gender neutral he/she (and derived forms). http://en.wikipedia.org/wiki/Singular_they\nThis is pretty useful for gender neutral docs and avoiding he/she, he or she, etc.\n. ",
    "sandrinodimattia": "Makes sense, better change it to 'you' then.\n. What about:\n\nTo use the account linking feature a user needs to be logged in with 'Account A' (eg: Google, the primary account) after which he can link 'Account B' (eg: Facebook) to the primary account.\n\n(Not sure if using \"their\" would be correct here, as this is the plural form)\n. Ah nice, did not know about that.\n. ",
    "charlierudolph": "Running in the browser console\n```\n\nnull != Auth0Widget\nUncaught ReferenceError: Auth0Widget is not defined(\u2026)(\ntypeof Auth0Widget !== 'undefined'\nfalse\n```\n. \n",
    "glena": "@mgonto not sure how to send the next state (route) in the authentication state parameter when using ui router\n. "
}