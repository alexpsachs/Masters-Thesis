{
    "jariz": "Woops! Thanks for bringing that to my attention.\n. Thanks, I took the 'quality' stuff from ColorThief which stated that if you'd run it on 0 you'd get the highest quality. I'll correct it.\nThis issue still isn't solved by this though.\n. Thanks man! Much appreciated.\n. Hey, maybe I'm not smart enough, but I'm not entirely sure what you mean, can you file a pull request?\n. @akfish wow that's pretty cool. especially because it's actually compatible with node while me moving this project to some universal format would still leave the 'it only works on browsers' problem \nSo, thanks. I'll add your project to the readme!\n. Wouldn't it be easier to just use modernizr if you have to support legacy browsers? Vibrant wasn't made for legacy browsers, and I have no plans to do so.\n. Sadly because of it using canvas, it requires the image to be on the same server, so you'll either have to proxy it or make sure the server passes the Access-Control-Allow-Origin header with your hostname.\n. Yes, just tested this and it does work. It can't be added to vibrant however, because vibrant expects the image to be loaded already. So simply add the attribute to the image (either programmatically or through html), add the 'load' event listener like normal and you're good to go.\nI'll add this to the docs as a suggestion.\n. Uhh, this is 101 javascript, but something like\nhtml\n<img src=\"http://example.org/test.jpg\" crossOrigin=\"anonymous\">\njavascript\ndocument.querySelector(\"img\").addEventListener(\"load\", function() { \n     // do your vibrant stuff here.\n});\nshould do the trick. @yarnball No. You will have to ask the webmaster to enable CORS on the images, or rehost them yourself, there's sadly no other solution.. Errr...?\n. This is because Vibrant (just like it's Palette android equivalent) will try to generate colors (to be specific, either VibrantSwatch or DarkVibrantSwatch) when they don't exist.\nVibrant was mostly made for photographs aka things with a lot of different colors in them. You can't really blame it for not picking up a single color. I suggest looking into ColorThief (on which vibrant was based) to get a palette / the most used color.\nTL;DR: It's a feature, not a bug.\n. Vibrant isn't an exact copy of Palette. I'm satisfied with it's results, and I don't really see it as an issue.\nBut if somebody wants to improve it to be more matching with the 'real thing' then they can go ahead and send a PR.\nFor 1:1 results check out the sweet Material Palette Generator by @marijnvdwerf.\n\n. I think it just grabs a random color from the material color scheme for the secondary color. (maybe using the image as seed or something to make sure the generated colors stay the same)\nOr it's just hardcoded :stuck_out_tongue: \n. Why?\nEnlighten me as to why I should bring large, breaking change to my library.\n. @watdafox Elaborate?\n. Thanks for sharing.\nYea, there's many ways to do this async, there's a lot of promises libraries.\nAnd to be honest, it's not that intensive of a calculation to begin with (takes a milisecond at max), so I don't really see the point of adding it to vibrant itself or something.\nAnswer to the initial question: use Q, or ES6 promises\nOfftopic: @sv244 told me you guys were using vibrant, I think it's really cool, popcorn time is my favorite way to waste time!\nIf you have any questions, feel free to ask any time. (here or on twitter @jarizwarts)\n. Hey, Cool project! Glad you worked it out.\n. Cool!\n. @michaltaberski Keep in mind that color thief gets the most used colors, not the most vibrant ones.\n. Don't run vibrant on B&W images.\nwontfix.. Have you tried using the npm version?\n. Would be cool if somebody submitted a PR\nOn Oct 24, 2015 22:26, \"Kevin Amiranoff\" notifications@github.com wrote:\n\nThanks. I reproduced the same bug. it works with your fix for me now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jariz/vibrant.js/issues/20#issuecomment-150847828.\n. Thanks!\n. Have you asked @olivierlesnicki why they haven't published yet?\nWould prefer to keep using the official version.\n. Yes, license.md is a copy of the MIT license.\nI'm not sure what's the problem here.\n. Cool \ud83d\udc4d\n. See my response on #30. Having a quick read through their docs, it seems lke they added the 'data-src' property to prevent all images being loaded in at once.\nSo yea, they do switch the data-src back to the src attr at some point.\nIt seems like there are a couple events you can hook (with CHANGE_START looking like what you need).\nIf you hook vibrant to the next slide at that event, it should probably work.\n\nHope I've helped you, I don't really see this as an issue with Vibrant itself, so I'll close this now.\n. Duplicate: #6. It works with most images, but like any algorithm, you're gonna have a few cases where it misses out. I don't really think this is a issue (with a clear solution, at least).\nSo I'm gonna close this.. Mind describing what it is you want me to merge here?. Fail. How did I miss that. \nCan you run gulp and commit again so the compiled files get updated too?. #43 fixes the close compiler problem and this bug. Ty!. Although cool, I'm not sure if this is in scope with the idea of the library. It's supposed to give you a list of colors, not generate images.. ah, #34 went under my radar. thanks, approved that one.. You need to wait for the image to load before passing it onto Vibrant...\nSee the example code at https://jariz.github.io/vibrant.js/. Yes, just use an image and add display: none . Well in that case the answer is no.. #6. https://www.npmjs.com/package/quantize. Duplicate #39 . #43 already handles this. Thanks, this is sweet.\nYou deleted bower.json however, does it still work with bower?\nI know bower is really deprecated at this point, but that's the only market this library still has to cater to (because node-vibrant is kind of better in every single way.). 1. If the canvas doesn't get cleaned up, it's likely because vibrant crashed.\n2. You're ignoring the error in your code example.. ",
    "akfish": "My past encounter with canvas seems to suggest that processing every pixels wouldn't be that bad, as long as you don't allocate tons of memories in the process.\nI just created a benchmark for node-vibrant. You can run gulp benchmark and test for yourself. Here's my result:\n[12:53:51] Requiring external module coffee-script/register\n[12:53:52] Using gulpfile F:\\dev\\js\\node-vibrant\\gulpfile.coffee\n[12:53:52] Starting 'benchmark'...\nSrc: ./test/**/*.benchmark.coffee\n[12:53:52] Running suite node-vibrant colorCount benchmark (quality = 5) [F:\\dev\\js\\node-vibrant\\test\\vibrant.color-coun\nt.benchmark.coffee]...\n[12:53:58]    Color count: 2 x 9.83 ops/sec \u00b12.67% (52 runs sampled)\n[12:54:04]    Color count: 4 x 9.52 ops/sec \u00b11.02% (50 runs sampled)\n[12:54:10]    Color count: 8 x 9.01 ops/sec \u00b11.39% (47 runs sampled)\n[12:54:16]    Color count: 16 x 8.29 ops/sec \u00b10.95% (44 runs sampled)\n[12:54:22]    Color count: 32 x 7.95 ops/sec \u00b10.85% (43 runs sampled)\n[12:54:28]    Color count: 64 x 7.23 ops/sec \u00b12.17% (39 runs sampled)\n[12:54:33]    Color count: 128 x 7.42 ops/sec \u00b11.00% (40 runs sampled)\n[12:54:39]    Color count: 256 x 6.36 ops/sec \u00b12.54% (35 runs sampled)\n[12:54:39] Fastest test is Color count: 2 at 1.03x faster than Color count: 4\n[12:54:39] Running suite node-vibrant quality benchmark (colorCount = 64) [F:\\dev\\js\\node-vibrant\\test\\vibrant.quality.b\nenchmark.coffee]...\n[12:54:46]    Quality: 1 x 3.11 ops/sec \u00b15.63% (20 runs sampled)\n[12:54:53]    Quality: 2 x 3.53 ops/sec \u00b13.11% (22 runs sampled)\n[12:54:59]    Quality: 3 x 3.95 ops/sec \u00b11.98% (24 runs sampled)\n[12:55:05]    Quality: 4 x 4.29 ops/sec \u00b11.24% (26 runs sampled)\n[12:55:12]    Quality: 5 x 4.44 ops/sec \u00b10.97% (26 runs sampled)\n[12:55:18]    Quality: 6 x 4.55 ops/sec \u00b11.14% (27 runs sampled)\n[12:55:24]    Quality: 7 x 4.60 ops/sec \u00b10.77% (27 runs sampled)\n[12:55:30]    Quality: 8 x 4.59 ops/sec \u00b11.41% (27 runs sampled)\n[12:55:30] Fastest tests are Quality: 7,Quality: 8 at 1.00x faster than Quality: 8\n[12:55:30] Finished 'benchmark' after 1.63 min\nThe gist is that quality 8 is only 1.48x faster than quality 1 (btw, quality = 0 will cause an infinite loop, which is in the document and should be corrected). That's hardly a significant dent in performance.\nNote that node-vibrant uses jimp to read pixels, which is a pure JS implementation. Modern browsers' canvas are backed by native code and should be even faster. \n. I see.\nThis line of code should be responsible for quality = 0 issue: https://github.com/jariz/vibrant.js/blob/master/src/Vibrant.coffee#L105\nWhat I was trying to say is that you could just process the image at its original size and get consistent result right away and see if it's really worth the trouble of downsampling and stuff in browser environment. There're tons of canvas applications that process whole images without running into significant performance trouble.\nAfter all the application for this is usually one time deal per image. No one expects to do it in real-time repeatedly like 60FPS or something.\nAnd if it's really that slow, there's web worker too. \n. Fixed in node-vibrant. If anyone is looking for a node.js port, here's my implementation: node-vibrant.\nIt's modified from this project and works on server-side.\n. A little update. \nnode-vibrant now supports browser & browserify with identical API for all platforms. I thought this might be what this issue is originally about. Just so you know. :)\n. Fixed in node-vibrant. vibrant.js is deprecated. Please try node-vibrant instead and see if this issue persists. You are welcome to submit an issue there if that's the case.. Fixed in node-vibrant. vibrant.js is deprecated. Please use node-vibrant instead. This issue should not exist in node-vibrant due to different implementation.. Hi, developer of node-vibrant here.\nI'm back actively maintaining node-vibrant again. @jariz and I decided to deprecate vibrant.js.\nThis issue is fixed in node-vibrant. Please try it out. :)\n. ",
    "btholt": "Also, though I understand this isn't your target, this doesn't seem to work out of the box with deamdify / debowerify.\nJust so you know. :smiley: \n. I'm happy to take a shot at it. It'll just make it so every time you publish to Bower you'll have to remember to publish to npm too.\n. It is. Awesome. Thank you.\n. ",
    "sh-a-v": "+1\n@jariz, create and publish package to npm, please\n. ",
    "matthieuh": "+1\n. For CORS img.setAttribute('crossOrigin', 'anonymous') does the trick !\n. ",
    "nickcolley": "That requires the user of vibrant.js to know what features are used that they'd need to detect.\nMaybe if there was just a bit in the README of what's used then they could use modernizr on their own I guess?\n. ",
    "Benny-Afriat": "@jariz can you confirm that?\nwill this work?\n. ",
    "evecute": "@jariz please give the example code of adding load event listener. I integrated with instagram photo.\n. thanks!\n. ",
    "yarnball": "This is a great repo! But I to am having this issue. \nI cannot send the crossOrigin=\"anonymous\" on my <img attribute as gets rejected by some servers. So I tried the setAtrribute but that didnt work either.\nIt seems to add the attribute, but I still get the error (line 10)\nAny suggestions?\nRunning code:\nhttps://codesandbox.io/s/1jwL9vvEZ\n. @jariz thanks for that. just quickly, how do I choose which color to use as the response? Your example logs a varying number (eg Vibrant, Muted etc). How do I say specifically only return vibrant for example?\nDoing the below code always gets the last hex in the swatch:\nmatchCols = () => {\n    const img = document.getElementById(\"favicon\");\n    var vibrant = new window.Vibrant(img);\n    var swatches = vibrant.swatches();\n    for (var swatch in swatches)\n      if (swatches.hasOwnProperty(swatch) && swatches[swatch])\n    this.setState({\n      color: (swatch, swatches[swatch].getHex())\n    });\n        // console.log(swatch, swatches[swatch].getHex());\n  };. ",
    "marijnvdwerf": "I think the colours used in sample imagery is not really generated by Pallete. Those bright blue and red don't even appear in the artwork in the \"screenshot\", let alone being able to survive Pallette's algorithm.\n. Also, if you're able to use PHP, I recommend https://github.com/marijnvdwerf/material-palette-php. I'm way better in PHP than in JS, and I was able to port this fairly easily. It's based on the latest version of the Android library, and should (technically) offer closer results.\n. ",
    "Pupix": "@marijnvdwerf They do not appear directly indeed, but the artwork has shades of red/blue in it. That's why I think there's some kind of post processing going on, trying to match the raw colors to the palette (500 for red and A700 for blue)\n@jariz It was just a question, not an issue. GitHub doesn't allow users to tag their issues (at least I haven't been able to find out how).\n. ",
    "kkirsche": "Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n. ",
    "watdafox": "we use Q for that\n. Well, on our project, we use Q to make the entire process a promise.\n1) Call a custom function where vibrantjs does its magic (behind a Q.defer).\n2) Wait for the promise to be completed before continuing with vibrantjs data.\n\nIn application: https://git.popcorntime.io/popcorntime/desktop/blob/feature/materialDesign/src/app/lib/views/browser/item.js#L528\nLine 528: getColor: function () { //let vibrantjs do stuff in a promise }; uses vibrantjs and Q.defer and it does w/e it wants.\nLine 130, 203, 508: We call that 'getColor' function from elsewhere like this: this.getColor(true).then(function (color) { //do stuff when ready }); so we're sure to have the data when it's ready and not before.\n\nQ is available here: https://github.com/kriskowal/q\n\nA tool for creating and composing asynchronous promises in JavaScript\n. \n",
    "cheshire137": "Never mind! I found the instructions on https://www.npmjs.com/package/node-vibrant and they work. I made https://github.com/moneypenny/instavibrant -- thanks!\n. ",
    "fredericksilva": "CDN Availability ok \nhttps://github.com/cdnjs/cdnjs/commit/3d6d83180a5878c29c679960ab625af56d4b69e1\n. :facepunch: \n. ",
    "m-roll": "Did you ever resolve this? I am actually trying to do the same thing and am running into all kinds of problems.\n. ",
    "generaltso": "If you're asking me that question, then yes I resolved it by not doing that and instead re-inventing the wheel.\n. ",
    "michaltaberski": "Yes, I have the same problem. Did you figure it out @rayshan ?\n. Thanks for replay. I end up with: https://github.com/lokesh/color-thief works well with B&W images.\n. ",
    "rayshan": "No. Basically vibrant algorithm doesn't support this. I switched to node-vibrant and had a discussion with the author there:\nhttps://github.com/akfish/node-vibrant/issues/16\nI'm using a workaround by manually detecting grayscale images:\nhttps://github.com/rayshan/cartier/blob/b7b8720171eec81494dd9db0d974c536455b4d4c/tasks/metadata.js#L35\n. ",
    "pugson": "Has anybody managed to solve this issue in a fork?. ",
    "jdwillemse": "Yes. I dont get the error, but when I dump swatches the output is always undefined:\nDarkMuted: undefined\nDarkVibrant: undefined\nLightMuted: undefined\nLightVibrant: undefined\nMuted: undefined\nVibrant: undefined\n. ",
    "kamiranoff": "Thanks. I reproduced the same bug. it works with your fix for me now.\n. ",
    "jonathanzong": "Realized it's actually a bug in the quantize dependency, not vibrant.js.\n. Good point. Opened an issue. https://github.com/olivierlesnicki/quantize/issues/5\n. should be updated to use npm's version now!\n. ",
    "randohinn": "And also doesn't work with Chrome, but that gives an error like #37.. ",
    "mcgraphix": "Chome on Mac Sierra gives this error when dropping an image on the demo at http://jariz.github.io/vibrant.js/:\nUncaught TypeError: Cannot read property 'map' of undefined\n    at new Vibrant (http://cdn.rawgit.com/jariz/vibrant.js/master/dist/Vibrant.js:43:35)\n    at FileReader.progress (coffeescript:24:19). ",
    "kjellouli": "Same error here.. Do you have any news about this issue ?. ",
    "skitterm": "No problem, just wasn't sure if it was MIT or a different one.\n. ",
    "rjmoss": "Thanks for the quick response! I'm having an issue running gulp, I followed the instructions on your page and got:\nError: Command failed: java -jar -XX:+TieredCompilation bower_components/closure-compiler/lib/vendor/compiler.jar --flagfile=\"/var/folders/gb/0pbsww4147776g9l7s6qqr4r0000gn/T/621cedf3-e84a-4d96-9c82-bdb7e0e8a5ab\" --js_output_file=\"Vibrant.min.js\"\nUnable to access jarfile bower_components/closure-compiler/lib/vendor/compiler.jar\n``\nIt seems that bower installed closure-compiler#~0.2.6 successfully but the foldervendor/` doesn't exist.. ",
    "pvtmert": "looks like #34 already points this out. ",
    "poshest": "I get the same error in Chrome Version 59.0.3071.115 (Official Build) (32-bit) on Win7.  And since Chrome just updated itself when I opened Help>About, it also doesn't work in Version 60.0.3112.90 (Official Build) (32-bit). ",
    "gilbertolenzi": "I have the same problem \u2013 bump.. ",
    "TCB13": "@jariz that doesn't really answer my question. I already did that.. ",
    "kis": "Error\nUnhandled rejection SecurityError: Failed to execute 'getImageData' on 'CanvasRenderingContext2D': \nThe canvas has been tainted by cross-origin data at Vibrant.getPalette. ",
    "stopdropandrew": "To be totally honest, I'm not sure. We aren't loading through bower. I rebased, added it back, and removed the devDependency.. ",
    "donb1991": "I have tested it out. Still works with bower.. ",
    "LekoArts": "@amirping\nI also got this issue. Did you resolve it? :/. @jariz Any idea?\nWhen I switch pages the canvas doesn't get removed. Actually I found the solution I think:\nhttps://github.com/akfish/node-vibrant/pull/46\nSadly he/she isn't maintaining the package anymore and therefore this PR won't be merged anytime soon.. "
}