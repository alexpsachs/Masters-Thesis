{
    "aderuwe": "echo $(git rev-parse --show-toplevel) prints the path to the folder containing .git from anywhere within the repository.\nProbably should use something like that.\n. It also means that the bin dir might be set to the default incorrectly.\n. :+1: I wonder if this also happens to fix the deleted/renamed issue by chance.\n. Cool!\n. That's kinda my use-case: a project where most other developers will run maybe one task while I will run a lot more - not easy to get people to adopt something that is essentially pretty invasive. ;)\n. Can you update the php version requirement in composer.json so that travis can do its thing?\nThe PR looks good otherwise on first glance, but I'll look more later.\n@veewee I think bumping the php version to 5.3.6 should be ok if we decide to accept this PR?\n. Shouldn't we plan to support this option in grumphp.yml?\n. Yup, perfect and what I expected, thanks!\n. :+1: \n. :+1: \n. I actually like this change - I think it will make GrumPHP more accessible.\n@veewee what's your take?\n@mikechernev in any case, if this is to be merged, you'll need to update the specs accordingly.\n. @igormukhingmailcom I'll take a look at this later today, just got back from vacation ;)\n. @igormukhingmailcom if you could take a look at those two remarks, I think this PR is good to go otherwise.\n. @igormukhingmailcom I think we can handle this one with a patch number increase.\nIt's released as v0.3.3.\n. @igormukhingmailcom I spoke to @veewee about this for a couple minutes this morning.\nHow about we introduce a grumphp:ci (or something similar) command that runs all the tasks on all of the files, while we make it so that \"normal\" GrumPHP usage is based off of the changed files only? (For independent tasks, as you call them, that would mean we trigger the entire suit, but only if there's changed files.)\nWhat do you think?\n. @igormukhingmailcom +1 on both counts!\n. @igormukhingmailcom thanks for the pull request, just a few things to clean up if you would. :)\n. Thank you @igormukhingmailcom!\n. Thanks!\n. I'm +1 on the feature, your use-case seems valid.\n. I'm not too familiar with the code in question - that said, it looks ok to me.\nPing @veewee.\nI'll merge and tag if @veewee doesn't make it back here today. :)\n. Released as https://github.com/phpro/grumphp/releases/tag/v0.3.5\n. I'm :+1:\n. +1\n. I like how adding ProcessArgumentsCollection simplifies both the tasks and all the related specs. Big :+1: from me.\n. Yes, I agree. The only common part seems to be the name of the method. :)\n. :+1: \n@veewee and myself were discussing some potential refactoring regarding the configuration stuff touched upon here, but I think you're good for squashing the commits, we can always apply that later.\n. @adam-paterson I have just registered #grumphp on Freenode. I'll do some more setup on the channel later tonight, but let's use that; I'm usually on Freenode when working, and will try to hang out there in the evenings a bit too.\n. @adam-paterson Any update here? We'd love to have the feature. :)\n. @adam-paterson Awesome! Good luck with the new job.\n. We should probably also add codeception to the \"suggest\" section of composer.json.\n. :+1: feel free to squash the commits.\n. Thanks!\n. @anvanza Any update here? Is it still failing on your setup?\n. Thanks!\n. Thanks!\n. :+1: Cool stuff!\n. This needs a rebase, it looks like, after #73 was merged.\n. @toonjanssens Given that we might want to extract more stuff from the README to its own files, could you please move the tasks into doc/tasks?\nOther than that, big :+1: from me.\n. Cool!\n. @veewee Some problems there with the low deps, seems that addAllowedTypes()'s signature changed at some point\n. :+1: \n. I didn't realize those actually matched composer's validate options ... strange naming. But in any case, feel free to ignore my comments.\n:+1: \n. :+1:\n. @veewee I guess we should include this change in the release process. ;)\nThanks!\n. I'm gonna close this. At this point it starts making much more sense for other CI tools to just call grumphp. There's a number of advantages to that anyway.\n. :+1: Simplifications in LintError are cool, and having the AbstractLinterTask do the (abstracted) linting is, too.\n(2 test fixtures also lack an ending newline, but I suppose it really doesn't matter there.)\n. Looks great, thanks!\n. I agree on both points, this is a much nicer way of doing the same thing, but should probably only run on  commits containing composer.* changes.\n(Removing the roave/security-advisories dependency is kind of a BC break (in case users don't opt-in on the task) but it should be ok in 0.x releases.)\n. in the case of stash and pop, we should probably either document it well or make it opt-in - if grumphp tasks take a long time to complete, this actually changes what users see in their working dir for some time?\n. Yup, I prefer the stash solution over the task, too.\n. :+1: \n. @keradus Feel free to contribute a fix. More info here https://github.com/phpro/grumphp/blob/master/CONTRIBUTING.md.\n. :+1: Very elegant solution!\n. The code looks good, as usual. ;)\nOne issue I have with this, is that this way (if I understand things correctly) it's not possible to specify specific keywords to blacklist per extension. (It might be fine to have the word 'console.log' in PHP but probably not in Javascript; that's a contrived example though I guess...)\n. Righto, I must have missed that. Color me agreeing.\n. It depends on the configured tasks - if you have securitychecker enabled then you need sensiolabs/security-checker. Note that it's opt-in.\nThe core tasks in GrumPHP mostly wrap well-established tools, no more no less. None of them send code or configuration anywhere and neither does GrumPHP itself as you can easily verify in the code.\n. I'm not sure this really contributes anything?\n. Good idea!\n. I haven't really been involved much lately. But FWIW, explicit > implicit - I believe running composer (or any other similar tool) should be a conscious developer action. That way the developer stays connected to the system under development much more closely, which will also help with quality. A co-worker might have added a dependency you don't agree with; you might miss this if you let GrumPHP handle composer for you.\n. Actually I'm back to doing PHP every day!. You could typehint a Gitonomy\\Git\\Diff\\File variable in the spec method to avoid the boilerplate.\n. The new array syntax breaks Travis on 5.3.\n. it_throws_exception_if_the_process_is_successful\n(Edit: remove 'un' from the successful)\n. Please use the // style of commenting which we've used in other places.\n. No need to keep this example.\n. Please add a newline before the return.\n. Can you invert the single/double quote usage here? We tend to use single quotes for strings in other parts of the codebase. Also, any chance this fits on one line?\n. You can remove the entire it_is_initializable() example, it's not very useful. :)\n. There's an extra empty line here.\n. There's an extra empty line here.\n. This comment is probably a leftover from something else? It seems that we don't run if no files are changed, looking at the next few lines.\n. This comment is probably a leftover from something else? It seems that we don't run if no files are changed, looking at the next few lines.\n. This comment is probably a leftover from something else? It seems that we don't run if no files are changed, looking at the next few lines.\n. A bit of a nit-pick, but we've been removing these comments from the tasks, they're pretty much a copy/paste relic from the past... :)\n. Again, a nit-pick, but could you make sure this file ends in a new line?\n. Actually, I think this change is wrong and is causing the Travis build to fail - GrumPHP doesn't have any codeception tests, we do however want to be PSR2 compliant and run our specs. :)\n. Typo: probably\n. Shouldn't we keep the ending newline here?\n. I'm not sure that these two comments are useful.\n. How about skip_constraint and corresponding command option?\n. skip_lock?\n. skip_publish?\n. Nitpicking, but maybe add an ending newline here?\n. {@inheritdoc} is fine here, and in some other places below which implement TaskInterface.\n. Please don't do this, fluent interfaces make sense only in some cases.\n. ",
    "veewee": "The git commands are only available in GitElephant when the repository is already created.\nThat is why we need to know to location of the root folder before running the CLI.\nAnyway, it might be a good idea to implement the rev-parse in a future version!\nI guess this issue is due to a bad config path in the git hook with the folder structure mentioned above.\nThis might be solved by adding a post-install script that will ask the installer about the project structure if no grumphp.yml file could be found at the same location as the composer.json file.\n@woutercleymans Can you try to set the correct config path?\n. The correct configuration for the git_dir is '..' in your context.\nPlease check v0.1.3, this issue should be fixed!\nIn #4 we will try to automate the configuration generation. In this part of the code we can start guessing the git folder, but make it still overwritable by the implementator;\n. The warning is fixed in master. The paths are still an issue. \n. First part of the issue is fixed, the other part will be solved by #4.\n. Please check v0.1.3, this issue should be fixed!\n. Fixed in v0.1.3\n. The GitElephant package does not support windows by default and has some issues:\n- It uses the process builder incorrectly\n- It can only find git executable on windows\n- The status command does not recognice deleted and moved files\nTo make GrumPHP windows compatible, it might be better to use another git package.\nAt first sight, we might use: https://github.com/gitonomy/gitlib\nIt works with the process builder and has windows support. \n. Fixed in #8 \n. Yes it does fix the deleted/renamed issue. git diff is now being used instead of git status.\n. Not sure I like this approach:\nIn my opinion, this will result in grumphp.yml files with permanent 'enabled: false' configuration.\nSo why not just remove the task? It doesn't make sense to configure something that is never being executed.\nMaybe some ideas about a better solution:\n- Replace the enabled flag with a non-blocking flag. The task will always be executed. When it fails you won't receive the green success message, but a yellow warnings message. However: The commit will be executed. The user will still have a visual message that shows that there are issues with the commit, but those issues are non-blocking. e.g.: you can commit a failing unit test, but receive a warning.\n- Add a threshold flag per task. If e.g. 10% of the unit tests are failing, you can't commit. If only 5% is failing, you will be able to commit, but with warnings.\nMaybe we should open a RFC about these kind of implementations before opening PRs?\n. Those people will not adopt the tools if the tasks aren't executed: they will not notice there is something wrong with the code they are trying to commit.\nMaybe by 'notifying' those people, they will start to care more?\n. As discussed earlier, this feature will be replaced with:\nhttps://github.com/phpro/grumphp/issues/17\n. Whats the status of this PR? Can it be merged or are you thinking of other changes in the README file?\n. I merged it anyways. If you want to add additional \"prettifications\", feel free to create a new PR.\n. Hello @klipach,\nI agree we should use the LTS version as the minimum version for Symfony.\nSymfony ^2.3 seems the way to go for GrumPHP.\nThe solution requires some extra testing on all platforms to make sure everything is still working!\n. The composer.json is changed on the master branch so that you can use Symfony 2.3.\nCommit: https://github.com/phpro/grumphp/commit/d12b1d6c5f0d5a80a0b71a1e1c4ad7f2dd8c607f\nThe package we use for git actions, requires symfony process 2.4. \nThis results in an unresolvable error: \nYour requirements could not be resolved to an installable set of packages.\nI created a ticket on the official repository:\nhttps://github.com/gitonomy/gitlib/issues/85\nWhen this ticket is resolved, I will be testing with Symfony 2.3 on Linux and Windows.\n. This means that the lowest we can currently go without modifying the code is Symfony 2.4.\nI will still need to test with version 2.4 to make sure all features will work.\n. LTS is probably not possible. But we will aim to make the Symfony version as low as possible.\nV2.4 might work. I will keep this ticket open until we tested with some projects.\n. It seems to work with Symfony 2.4. So that will be our minimum dependency.\n. Hello @klipach \nThanks for adding the php-cs-fixer task!\nI do have some additional questions/remarks:\nIt sounds 'scary' to alter files during a commit. You won't have control about those files anymore. It's a good thing to make the auto_fix configurable and set it to false by default. Maybe an extra note could be added to the README file to use that option with care. Also note that the changed files won't be committed. You will need an additional git add to commit the changed files during the pre-commit hook.\nCould you also add a configurable --config-file option? We tend to use the .php_cs file to determine the fixers, files, ... for the project. Or does this make the fixer run for all files?\nThese are some general remarks about the future structure of GrumPHP. These might not be fixed in this issue, but I would like to have some input on this:\nAnother remark I have concerning this auto_fix variable is the priority of the tasks. By changing the files you might break some existing tasks. Maybe it's a good idea to add a task priority per task configuration? For example: run the php-cs-fixer task first, next all other tests. \nAt the moment the Task::run command is rather bug. We might introduce a 'Formatter' interface to display success / warning / error messages. Not sure how it will look for the moment, but it will remove the formatting stuff from the Task::run command. It seems like a good idea to me.\nAnother thing that ennoys me in the Task::run commands is this part: \nphp\nif ($config['whatever']) { \n    $processBuilder->add(); \n}\nMaybe it's a good idea to create a wrapper around the Symfony ProcessBuilder with following additional methods:\nphp\n// Add an optional configuration option. This will not add anything if the config is empty\n$wrapper->addOptionalAttribute('--config=%s', $config['config']); \n// Add a required configuration options. Throws exception when the config is empty\n$wrapper->addRequiredAttribute('--config=%s', $config['config']);\n// Clone the processbuilder wrapper\n$wrapper->clone()\n. Hi @klipach,\nMe and @aderuwe discussed this issue. It seems like a good idea to drop the auto_fix field. \nIt seems like a better idea to let the task fail and show the suggestion to fix it manually.\nOtherwise the user won't have any control about what he/she is commiting.\nThe --config-file option might still be usefull.\nAll other remarks are placed in new issues: #16, #18 and #19.\nLooking forward to hear your feedback.\n. Fixed in #92\n. @aderuwe: I changed the description based on one of the previous commits.\n. Fixed in #142\n. This one is implemented. The threshold doesn't seem to be important at the moment.\nAlso tasks specific output is not available for the moment, but it can be added later.\n. Hello @klipach,\nThanks again for contributing! This sure looks like a handy feature.\nA little sidenode: We are planning to create a mascot for GrumPHP. Afterwords the current success and error message will be replaced by this mascot. We are trying to keep GrumPHP neutral yet fun to work with :)\nCan you please add a spec for the Configuration method and fix CS.\nI will try to make some time during the weekend to merge, test and release a new version.\n. Hi @klipach ,\nI fixed the code and added some tests.\nAlso the default configuration is made explicit. This way the services.yml file is the only source of truth.\nNow it is also possible to rename the ASCII files without changing the code.\nThanks!\n. No problem! :)\n. Hello @klipach,\nThe actions you describe should not be executed.\nThis package contains a composer plugin, which hooks into the composer eventsystem.\nWhen GrumPHP is installed / updated the git:init and configure  are automatically triggered.\nWhen a grumphp.yml is already available, the configure command will do nothing. \nSo when you commit the grumphp.yml file in git and ad grumphp to the composer dev-dependencies it should work for every person who installs it.\nAfter composer finishes it's installation, you will see the message:\nGrumPHP is sniffing your commits!\nIs this feature not working for you? Because if that's so, you found a bug :)\n. Hello @tombevers,\nI tested this issue with following set of commands:\nsh\nmkdir grumtest\ncd grumtest\ncomposer init\ncomposer require --dev phpro/grumphp\ncomposer remove phpro/grumphp\nThe command outputs: GrumPHP stopped sniffing your commits! Too bad ...\nThe git hook is removed.\nNext I tried by manually remove the phpro/grumphp entry from composer.json, followed by a composer update. The same result.\nCan you tell me how to reproduce this issue?\nMaybe you don't have write access to the git hook, for example in a vagrant box?\nMaybe you deleted the folder from the vendor?\nThanks for reporting!\n. Good idea. Thanks!\n. The documentation is updated and this improvement is tagged as v0.3.1\n. Looks good to me! This is indeed the way GrumPHP should work.\nI played around with the git diff commands and I guess this commit will  also fix this issue:\nhttps://github.com/phpro/grumphp#grumphp-does-not-work-on-first-commit\n@mikechernev Can you fix the build please?\nThanks for contributing!\n. That is exactly the way it should be done. Congratulations, you just received the Phpspec Ninja badge! ;)\n. This commit is tagged as: https://github.com/phpro/grumphp/releases/tag/v0.3.2\n. Hello @igormukhingmailcom,\nJust tried following commands in a clean folder:\ngit init\n composer require phpro/grumphp\n mkdir -p vendor/linkorb/convensions-checker/config/app/\n mv grumphp.yml vendor/linkorb/convensions-checker/config/app/grumphp.yml\n php ./vendor/bin/grumphp git:init --config=vendor/linkorb/convensions-checker/config/app/grumphp.yml\n cat .git/hooks/pre-commit\nThe results look like: \n(cd \"./\" && exec 'vendor/bin/grumphp' 'git:pre-commit' '--config=vendor/linkorb/convensions-checker/config/app/grumphp.yml')\nWhich is exactly what I would suspect it should be.\nCan you give me some additional information about the problem?\n. Fixed by #34 \n. Hi @igormukhingmailcom,\nThanks for this great feature! \nI have added one question in the sourcecode.\nCan you also provide some specs for this command?\nTomorrow I am taking a 2 weeks break. I won't be having access to the internet.\nMaybe @aderuwe can tag a new release for this feature.\nThanks!\n. Maybe we should also think about which keywords should be blacklisted by default.\nI am thinking of leaving the default list empty so that the end-user explicitly has to determine which keywords should be blocked.\n. When there are no blacklisted keywords, the test should not fail I guess. There is nothing wrong, but it would be better to disable the test in configuration when you don't want to use it.\n. You want GrumPHP to validate the full codebase? Currently we only run tasks when files  have changed.\nI am thinking of some continious integration commands that can run all configured tasks on the codebase.  More info at #20 \n. If no PHP file has changed during pre-commit, why should these tasks be ran?\nNormally the tests and code should be in the previous committed state and shouldn't contain any errors.\nFor example: a front-end designer wants to add a CSS file, and all of a sudden he gets an exceptions on the unit tests which he does not know anything about. This doesn't seem to make much sense to me.\nWhat is your opinion @aderuwe ?\n. sounds good! This will require some context in which the tasks needs to run.\nAlso: some tasks will not be able to run, like the blacklist task, since this only checks files that are being committed. So the tasks need to know in which context they can run. \nDuring commit, only the changed files should be added.\nDuring run, all files should be added. (Note: wouldn't this be slow on big codebases?)\nThis feature will require some thinking about the architecture of the project and propably BC breaks.\n. The run command is implemented. This issue can be closed.\nThe ability to skip tests is not implemented but is added as a new issue in #50.\n. Hello @igormukhingmailcom,\nThanks for this feature!\nIt is tagged as 0.3.4: https://github.com/phpro/grumphp/releases/tag/v0.3.4\n. Hi @igormukhingmailcom,\nCan't we use the --config=x parameter of the command for this?\nIf you want to create configuration on a specified location, you should use:\ngrumphp configure --config=path/to/config.yml\nThis way we don't need the commands to know the location of the composer file, config file, ... on the machine.\n. It looks fine to me too!\nMaybe we might change it in the future to locate the composer file in a subdirectory of the git folder etc.\nBut it will do for now.\n. Hello @TheRatG,\nThe vendor folder is mostly in your .gitignore file. This means that these files won't be available in GIT and the pre-commit hook will not trigger for these files.\nAt the moment this is the only solution I can think about:\nYou could add GrumPHP to the composer.json of the vendor package you are commiting to. Next, run another composer install --dev in the vendor package.\nThis will initialize the git hook and set the grumphp executable to the the vendor package.\nNow, the git hook is initialized and when you commit in that specific vendor package, GrumPHP will run its tasks.\nA downside however is that your IDE will find some classes at multiple locations.\n. Hello @igormukhingmailcom,\nSince the project is not stable enough, I will be tagging stuff as 0.(major structural changes).(patch or small feature).\nThe PR is tagged as 0.4.0.\nThere are still some things I want to change in the codebase before tagging a stable major release.\n. Hello @Orasik,\nGrumPHP does not cache anything. It runs the task commands directly from the list of changed files in GIT.\nIt might be possible you need to git add the file first, but that doesn't seem te be te problem.\nAre you running the command directly on your filesystem or in a virtualbox with a shared folder or something?\nCan you tell me which operating system you are using?\n. Hi @Orasik,\nI am also working on Mac. Here are the commands I ran to test:\n``` sh\nmkdir tmp\ncd tmp\ngit init\ncomposer require phpro/grumphp\nCopy your grumphp file to the clipboard\npbpaste > grumphp.yml\ncomposer require squizlabs/php_codesniffer --dev\ncomposer require --dev leaphub/phpcs-symfony2-standard\nCopy the PHP file to your clipboard\npbpaste > MyTestClass.php\necho \"vendor\" > .gitignore\ngit add -A\ngit commit -m\"Test\"\n```\nAt this point I get following errors:\n```\nFILE: tmp/MyTestClass.php\n\nFOUND 1 ERROR AFFECTING 1 LINE\n7 | ERROR | Missing class doc comment\nTime: 22ms; Memory: 3Mb\nThe executable for \"php-cs-fixer\" could not be found.\nYou have blacklisted keywords in your commit:\nMyTestClass.php:17:        die();\nMyTestClass.php:18:        exit;\nMyTestClass.php:30:        var_dump(null);\n```\nNow I run\n``` sh\nvi MyTestClass.php\nAdd docblock the line above class: /* docblock /\nRemove the die(); line\nSave the file (esc :wq)\ngit commit -am\"Test\"\n```\nNow I see these errors:\nThe executable for \"php-cs-fixer\" could not be found.\nYou have blacklisted keywords in your commit:\nMyTestClass.php:15:        exit;\nMyTestClass.php:27:        var_dump(null);\nThis seems normal to me.\nCan you try to reproduce with above commands?\nThanks!\n. Hello @Orasik,\n1)\nI found the problem: The blacklist command uses the cached git changes:\ngit grep --cached -n -e \"blacklisted\"\nSo the blacklist command will only run on the changes that are actually being committed.\nSince you are not using the -a option, you are not adding the changes to the file to the commit.\nThis is why this task runs with the cached version.\nIt doesn't seem like a problem te me, since the pre-commit command is designed to run at git commit. \nIn a next version however, it will be possible to run the tasks from the command line.\nMore info at #33, #40 .\n2)\nThe -a option is used to stage all modified / deleted files. This will mark the files as cached and the blacklist will run on the correct version of the file.\n3)\nThis also works here.\nI did the following:\ncomposer remove squizlabs/php_codesniffer\ncomposer global require squizlabs/php_codesniffer\nIn my include path I have:\nexport PATH=\"$HOME/.composer/vendor/bin:$PATH\"\nBut this would be exactly the same if you symlink the file to for example /usr/local/bin.\nHow did you installed the package on your machine?\nMaybe it's still better to add phpcs as dev dependency. This way GrumPHP will work for people on your team who don't have phpcs globally installed.\n. Since these tasks work as expected, I will close this issue.\nFeel free to open a new one when you encounter another issue.\n. That would indeed be a nice feature. Now it is possible to use composer global require, but you would have to change the path of the git hook manually.\n. Maybe it's a better idea to use composer for this?\nsh\ncomposer global require phpro/grumphp\nThis way, GrumPHP will be installed globally in the ~/.composer/vendor/bin.\nUpdate is as easy as:\nsh\ncomposer global update phpro/grmphp\nLooks easier then creating phar + self-update stuff, since everybody is using composer these days.\nIn the git hooks we will need to add something like:\n``` sh\nPATH=$PATH:/full/path/to/project/vendor/bin\nNote: I need to check if this works on windows ...\n```\nThis way we can change the command to just grumphp. It will first search all your system include paths (in which the global composer vendor/bin directory is added). When no script is found, it will use the one from the project vendor/bin directory.\nWhat are your thoughts on this solution? A phar looks one step too far for me, since it can easliy be done with composer.\n. This one is implemented as mentioned above.\nMore information:\nhttps://github.com/phpro/grumphp#global-installation\n. Thanks!\n. Thanks fo the PR. Can you take a look at the comment?\n. Maybe it's a better idea not to use the output of all posible tasks, but use a custom progress indicator for GrumPHP?\nFor example: you configured 5 tasks but don't want to display all the output for all these tasks. \nYou just want to know which task is running and how many tasks are left.\nIt might be a better solution to use the progressbar helper to display the progress of the tasks.\nhttp://symfony.com/doc/current/components/console/helpers/progressbar.html\nEvery time a task ran, an event is triggered and the progressbar gets updated.\nDoes that solution works for you?\n. Hello @ecentinela,\nYou can remove the commit with git rebase.\nMore information can be found at: \nhttp://www.clock.co.uk/blog/deleting-a-git-commit\nAbout the progress-bar. Maybe it's better to discuss this one in a new issue.\nI created a small description at https://github.com/phpro/grumphp/issues/46\n. Thanks!\n. I removed the newlines. However php-cs is not complaining and there are still other classes with extra newlines. Maybe the PHP-cs standard should be adjusted?\n. Agree! I was thinking the same this weekend.\nFeel free to split the documentation.\n. It seems like a better idea to specify task suites in the grumphp configuration.\nThis way, it is possible a different CI test suite then the pre-commit test-suite.\nI was thinking about the following logic:\n- git:pre-commit uses the git-pre-commit suite if it exists. If it does not exist it used all specified tasks.\n- git:commit-msg uses the git-commit-essage suite if it exists. If it does not exist it used all specified tasks.\n- run uses all specified tasks. When a --testsuite=[suite] is specified, the suite is used or an exception is thrown when it does not exist.\nWhen this is implemented, it would be possible to:\n- Run fast tasks during commit only\n- Run slower tasks during CI\n- Run GrumPHP for functional / acceptance tests\n- Run parts of the tests manually by specifying a testsuite.\nAny thoughts? \n/cc @aderuwe \n. Hi @natenolting,\nThanks for trying GrumPHP and reporting this issue!\nIt might be possible that the composer autoload file was included twice.\nI fixed this in this commit: https://github.com/phpro/grumphp/commit/8c7a0cd0266e023d9f5e1f6bdc5d5882f7552e48 .\nThis fix is available at version 0.5.1.\nCan you verify if this fixes your problem?\nIf this solution doesn't fix your problem, can you try running following command?\ngit diff -r -p -m -M --full-index --staged\nMy best guess is that the vendor folder is included in this diff. \nJust out of curiosity: can you tell me which webinar you attended?\n. Hello @nilopc,\nThanks for mentioning!\nYou are absolutely correct: the blacklist task should be smarter.\nYour package looks great but it can only be used for forbidden functions in PHP context.\nThe blacklist task should also work on other files then PHP and on other things then functions. For example: you want to check docblocks, comments, ...\n. or maybe just php_blacklist to use the same term for the tasks that check for forbidden stuff?\nWhat do you mean with 'how it could handle a new parser'?\n. Hello @lasselehtinen,\nThere is a possible fix  that isn't released yet.\nCan you try installing the master branch?\n\ufeff\ufeffcomposer global require phpro/grumphp:dev-master\n. Do you have guzzle installed globally as well?\nGrumPHP will try to load both the project autoloading as the system autoloading file.\nGuzzle added this to the autoloader: \"files\": [\"src/functions_include.php\"]\nThis means that the functions are loaded twice and this triggers the fatal exception.\nI don't think this is something we can do something about. If it's possible you can remove the globally installed guzzle?\n. Yes, that seems to be the problem.\nAs Seldeak mentioned: The functions could be wrapped with function_exists() in guzzle. But this will require a change in guzzle. At the moment composer can't handle this.\n. This fix is tagged ad 0.5.2: https://github.com/phpro/grumphp/releases/tag/v0.5.2\n. I haven't used Git Bash on windows yet. Will try to install it in the weekend.\nIs it possible that the C folder symlinks to C: ?\nDo you get the same results when you run following commands:\n$ cd /C:\n$ mkdir test\n$ cd test\n$ git init\n$ grumphp git:init\n. Hi @lasselehtinen ,\nI tested git bash and it seems to work here:\n```\nI started gi bash with: sh.exe --login\n$ cd /C\n$ mkdir test\n$ cd test\n$ git init\n$ grumphp configure\n$ grumphp git:init\n```\nThe result I retrieve is:\n```\n$ cat .git/hooks/pre-commit\n!/bin/sh\n...\n(cd \"./\" && exec \"c:\\Users\\Verweto-Win\\AppData\\Roaming\\Composer\\vendor\\bin/grump\nhp\" \"git:pre-commit\" \"--config=grumphp.yml\" '--skip-success-output')\n....\n```\nDoes it work when you manuallt create the .git/hooks folder?\nBut even when I remove this folder and try it again it is working:\n$ rm -rf .git/hooks\n$ grumphp git:init\nCreated git hooks folder at: ./.git/hooks/\nWatch out! GrumPHP is sniffing your commits!\nMaybe you can try upgrading git bash?\n.  Much better this way! Thanks!\n. Thanks! I will try to keep the version number in sync.\n. Hello @dstollie,\nThe blacklist task only scans the committed lines for blacklisted strings. The commit message won't be checked.\nFor validating to the commit message, you can use the git_commit_message task as described here: https://github.com/phpro/grumphp#git-commit-message-git_commit_message\n. Additional optional attributes in interfaces are valid in PHP too.\nMaybe we should just get rid off the LoctorInterface. It doesn't make much sense since every locator is working in a different way and is returning different data.\nWhat do you think about this?\n. We discussed the phar file in issue #42.\nIt seems easier to use composer to install GrumPHP in your project or globally.\nAt the time, we didn't find any usefull reason to create a phar file. \nWe would love to hear your arguments on why we should add a phar file.\nThanks!\n. @ihsanudin Just discussed the topic with @aderuwe: That is indeed a valid point. \nWe are currently working on some other improvements which we think will make it easier for developers to extend the application. This means we won't put our time in this phar feature at this moment.\nIf you want to speed up this feature, feel free to create a PR. Maybe @igormukhingmailcom has the time to help out?\n. We should also keep security in mind:\nhttps://mwop.net/blog/2015-12-14-secure-phar-automation.html\n. Hi @kmelia,\nWe did also bump into the same issues as you trying to create a phar. I don't thinkt his will be easy and we'll need to rewrite some code for this feature. We already support many use-cases: local, global, CI, ... and need to make sure that all these cases still work.\nAnother problem is that GrumPHP is actually a composer plugin, which makes it a bit strange to create a standalone phar.\nOne last problem is that the dependencies could be local, global or in a bin folder. This makes it hard to make sure that everybody is running e.g. the tests against the same version of phpunit. \nI'm starting to think that this feature will cause a lot of work / possible bugs for little gain.. No. There are some issues with the different type of paths which need to be solved before we can create a phar file. The idea is to make every path relative to the config file. This is hard to get right since we are supporting a lot of different installation types, project structures, OS, ... already. Currently I don't have the time to rework that part of the application, so unless somebody else picks it up, I don't think phar support will be launched any time soon.. As @aderuwe mentioned, the PR is ok.\nSome feedback about the discussion. (But this doesn't have much to do with your PR)\nWe feel that the GrumPHP configuration class is being abused for the moment.\n2 solutions come to mind:\n1) \nCreate a TaskConfigurationResolver which contains the logic for parsing task data. It wel look like:\n``` php\n<?php\ninterface TaskConfigurationResolver\n{\n/**\n * Returns the list off all configured tasks.\n * \n * @return array\n */\npublic function getConfiguredTasks();\n\n/**\n * Returns a list of all possible tasks.\n * \n * @return array\n */\npublic function getAllTasks();\n\n/**\n * Get the configuration from one specific task\n * \n * @param string $task\n *\n * @return array\n */\npublic function getTaskConfiguration($task);\n\n\n/**\n * This method will return some metadata about the task which can be configured in the tags of the service. \n * For example: config key, order of execution, isBlocking flag, ...\n * \n * @return TaskMetadata\n */\npublic function getTaskMetadata();\n\n}\n```\n2) Create a new compiler to parse all the data we want as described above and place the data in the \nparameters of the service containers.\nThe GrumPHP configuration class will then have shortcut functions to the resolver or the container parameters. (based on the coice we make)\nThe general idea is to simplify the creation of new tasks. For the moment an external task has allready 4 dependencies and a base class. This should become easier in the future.\nAnother thing that bothers me is that the configuration is not very transparant at the moment. Besides the documentation, you need to search the code to find out what configuration you need. It might be a good idea to use the Symfony Definition TreeBuilder to configure tasks in the future.\n. First of all I haven't used Rocketeer before, so I don't know exactly what you are trying to accomplish.\nNext to that, it is allready possible to configure your own Tasks / Listeners to GrumPHP by adding services to the grumphp.yml file:\nhttps://github.com/phpro/grumphp#custom-tasks\nhttps://github.com/phpro/grumphp#events\nI can imagine that this part is not the easiest extension point for developers.\nAnother option that comes to mind is to create extensions like phpspec / behat does:\nhttp://phpspec.readthedocs.org/en/latest/cookbook/extensions.html\nhttps://github.com/phpspec/phpspec/blob/master/src/PhpSpec/Extension/ExtensionInterface.php\nThe idea is that a package can contain an extension to GrumPHP. The application will be able to hook in to the service container. The extension needs to be configured in the grumphp.yml file. During the creation of the service container, the extension will be loaded and it wil hook in it's custom tasks / listeners / custom console commands / ....\nThis will make it possible to reuse company specific tasks or create tasks per project.\nIt is also a possibility to create a new task that will run a php callback in the future.\nHowever, The main idea is that the core package contains as much general tasks as possible.\nAbout the git hooks:\nCurrently there are 2 git hooks configured: pre-commit, commit-message.\nFollowing tasks need to be done to register a new hook:\n- create a new hook in resources/hooks\n- create a new console command for this hook\n- create a new context to run the tasks in\n- register the hook in the git:init command.\nMaybe we can simplify this flow in the future.\nSome questions:\nWhat is your definition of this plugin based system? \nDoes this result in a grumphp-pre-commit plugin or plugins with specific tasks (e.g: grumpgp-frontend--tasks-plugin)?\nHow do you see the integration?\nYou say you started a similar project. Can you give me a link. Maybe we can use some of your ideas?\n. Hi @adam-paterson,\nCurrently the behat tests are not in the pipeline. Feel free to add some tests for the existing commands.\nThat would be great!\nAbout the commit:\nThis is a great feature. One small remarks:\nMaybe the question part can be moved to an IO object like in composer?\nI haven't tested this yet, but this command is triggered during composer update / install. By default the hook will be overwritten, because this command does not run in interactive mode. When running the composer hook in windows, the command needs to be in interactive mode for some odd reason.\nSo by default, the hook will always be overwritten I guess.\n. Not sure if skip is better than overwrite: when the package upgrades, it is also possible that a git hook changed. So the git hook should be updated automatically.\nOn the other hand: when using GrumPHP, the hooks need to be the grumPHP hooks. Maybe it's better to create a copy to a backup file ?\n. I am closing this for now since a lot has changed in the past year. If you want this feature in the current codebase, please provide a new PR. Thanks!. It sure is possible to add a Codeception task. I haven't used it before so I don't know the CLI of codeception. Feel free to create a PR or give some additional information about how it shoud be implemented / configured.\nThanks!\n. Merged #69.\n. Thanks!\n. Not sure if that is possible. We will need to do some extra investigation on this issue.\n. I've discussed the issue with @aderuwe. We also don't think it is possible.\nAs you mention, tools like php-cs-fixer require the file on the file-system, so it won't be able to run these tools on an in-memory version of the file.\nThe idea is: \n- Check the stage to know which files should be tested\n- Validate the file in the current working dir. (because that's the actual file at that moment)\n. Thanks! \n. Hi @adam-paterson,\nThanks for the codeception task!\nCan you change the task to use the new ProcessArgumentsCollection:\nhttps://github.com/phpro/grumphp/blob/master/src/GrumPHP/Collection/ProcessArgumentsCollection.php\n. Hello @anvanza,\nI just checked this issue on my machine and it is  just working.\nCan you verify that you are using the latest versions of:\n- phpspec\n- grumphp\n- sourcetree\nIf that doesn't work, can you try the master version of grumphp?\n. @aderuwe \nI added the symfony 3 compatibility to this issue, since a lot of code has changed.\nThe regex stuff is extracted in a new util class. This makes it a bit easier to reuse this functionallity.\nFeel free to merge if you don't have any remarks.\n. Some small remarks:\nThe docs/phpcs_framework_presets.md should be a chapter underneath php-cs.\nThe 'task' main title doesn't seem usefull.\nThanks!\n. Can you also add a link to the new Grunt task?\nThis one is already in doc/tasks. You might want to rebase against master.\n. Thanks! We will work on improving the documentation in the next few weeks.\n. The logo can be disabled already by following configuration:\nyaml\nparameters:\n  ascii:\n    failed: ~\n    succeeded: ~\nThe skip-success-output is added to the pre-commit so that the commit-msg can still fail. It might be a good idea to add this option to the commit-msg command as well.\nIf you don't want the command to output anything, you might want to add the --quiet option to the hook. Don't think this is very usefull, but it is an option.\n. I bumped the version of the optionsresolver to >2.6.\nIn 3.0 the old way of configuring does not work anymore. I'd rather be compatible with 3.0 as with 2.3.\n. Just made some additional small changes.\nReady to ship now!\n. Rebased + fixed comments.\n. Yes, I tend to forget that one from time to time... \nMaybe we could automate the tagging procedure.\n. Hello @aaa2000,\nThanks for reporting the issue.\nI just tested this with following commands:\nsh\ncomposer global require phpro/grumphp\nmkdir test && cd test\ngit init\ncomposer require symfony/console:2.1\ngrumphp configure # Here I added PHPCS as task\ngrumphp run\nI do not retrieve the exception. Can you tell us how to reproduce the described issue?\nThe global packages are always prepended to the autloader, and should be used before the project packages. Maybe one of the paths is wrong on your system?\nThanks!\n. Cool, did not know about that one.\nBut indeed: that can result in some strange behaviour.\nI don't think that we can do something about that: the file gets loaded and next de project file is prepended to the autoloading queue. So the project autoload will win.\n. Fixed in #92\n. Thanks!\n. The break was removed because both the autoloader from the project as the global autoloader should be loaded. When using normal classes, this isn't be a big problem. But because the assert library is registering functions, this is an issue. The only thing that can be done is adding function_exists() checks before defining the function. This needs to be done in the 3rd party package.\nMaybe in your case it is better to install GrumPHP globally? Than it would use the autoloader of the current package + the global autoloader.\n. @lykciv Does the answer solve your issue? I don't think there is anything we can do about this.\n. That won't resolve the actual issue:\nWhen you install assert both on the project and global, you will still receive the error.\nThere isn't anything we can really do about this issue.\nOne other option could be to add an environment variable like GRUNT_USE_AUTOLOADER to make it possible to specify one or more autoloader files.\n. Currently there is no progress on this issue. . There is nothing wrong with duplicate autoloading. It is perfectly possible that you want to load both the globally installed packages + the framework specific packages. For classes this isn't a big issue since composer is smart enough to autoload them. Howerver, it is possible that 2 complete different versions of the same dependency are installed, which might cause errors.\nThe problem is with functions. Normally the package should check if the function already exists instead of just autoloading the functions. A good example on how to do this: https://github.com/symfony/polyfill-php71/blob/master/bootstrap.php\nI would always recommend running grumphp in project mode and remove the globally installed version. It doesn't really add much value when it's installed globally in my opninion.. Hi Vicky,\nThanks for the PR. It looks really good!\nI added one little nitpick in the comments of the code.\nStill 2 questions left:\nShould it run on every commit? Maybe its better to run the task during the commit of composer.json or composer.lock? During CI it will still be tested. You can take a look at the composer task for reference.\nCurrently we are forcing the use of roave/security-advisories. This tool checks during composer install/update if the security advisories are being checked. It uses the same database ad the tool in this task. Should we use it together or is it better to remove the roave/security-advisories so that we do not push some tool to all the users of GrumPHP. In my opinition this is a better replacement for the roave package because the user can opt-in on this one. What is your opinion on this? (CC @aderuwe )\n. Just took another look at the roave security advisories. Currently they are only suggested. As @lykciv mentioned, it's better to use the cli tool, because it's always up to date even when you don't update composer. We keep the roave package in the suggestions. This way the user has the choice: run during composer update or run on every commit.\nStill, I would like to have a configurable option for triggering the security advisories cli tool. The roave package breaks during composer update, but in this task we want to break during a git commit. So that are 2 different places where the security validation is being done. Maybe something like run_always which defaults to false? (Any better option name is also good :) )\nThe reason why I would set is to false is that most projects are also running some kind of CI tool. When CI triggers to run command, the composer.json file is always in git and will always check the security advisories database. This way your commit will pass, because there is nothing wrong with the commit. CI will fail because of security issues. This can be handled in a next commit / on another branch. Does that sounds good to you?\n. Looks great! Thanks!\n. @lykciv \nThis new feature is released under 0.7.2 (https://github.com/phpro/grumphp/releases/tag/v0.7.2)\n. Thanks!\n. I read the discussion at: https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/1719\nOne thing we could do is read the .php_cs configuration file and use the configured finder to filter the files in our resultset. Not sure if this is possible and how it should be done, but I think this is the best option which will also speed up the phpcsfixer task in GrumPHP. (Currently the phpcsfixer is pretty slow because the tool runs for every committed file. It was on my checklist to take a look on how to improve this speed.)\nWould this possible solution solve your issue?\n. @keradus,\nI just took a look at the commit and it will probably solve @tifabien's problem.\nYesterday I started on a similar approach, but in GrumPHP: https://github.com/veewee/grumphp/commit/77bfdf4d9f0b54bc5febebfbff879e37c649f334\nAs you can see, the phpcsfixer configuration is being loaded and an intersection between the finder in phpcsfixer and the commited files in GrumPHP is being made. This was mostly done for starting less phpcsfixer commands, but would also fix this problem.\nJust out of curiousity: might it also be an option to add multiple directories / files to the CLI arguments?\nCurrently we have to start phpcsfixer for every file that is being changed during a commit. This is a pretty slow task.\n. Okay, that would be great! So I guess there is nothing we can do in our project. I don't think this cross version support is soemthing we want to add to GrumPHP.\nWe will have to wait until this is fixed in php-cs-fixer and for the multiple files until this is implemented.\n. Not sure yet. I haven't looked at phpcsfixer v2 yet.\nIf the CLI is more or less the same, it might be possible to support both.\nIf that is not possible, we will probably force the usage of v2 at some point.\nIt's a development tool, so I guess that won't be a big problem to upgrade.\n. Looks great! Thanks!\n. @keradus: It seems like the 2 issues in php-cs-fixer you mentioned got merged. Is this issue resolved?\n. Ok, Thanks!\n. Fixed in #112 \n. @spekulatius: Good catch, thanks!\n. Hello @michaelgerdemann,\nThanks for your contribution. There are some issues with this PR:\n- We like to use snakecase for the configurable options. This means additional_modifiers instead of additionalModifiers.\n- Spec tests for this option is missing + failing tests\n- Documentation for this option is missing.\nJust out of curiousity: which modifier would you like to add? \nI added the case_insensitive for glob-style matching and a bit later the multiline was added.\nMaybe it's better to just add the modifiers to the configured matcherin the configuration, so that we don't have to add all the modifiers. The only useful option for glob-style matchers is case_insensitive.\nSample configuration would look like:\nyaml\nparameters:\n    tasks:\n        git_commit_message:\n            matchers:\n                - /someregex/i\n                - /someotherregex/ix\nThis is allready possible with the current code.\n(/cc @aderuwe: What is your view on this?)\n. I sure can help you with that.\nFor this commit, I don't think there should change a lot:\nit_should_have_configurable_options() should check for additional_modifiers.\nNext all tasks should pass.\nYou could also add an additional test-case like:\n``` php\nfunction it_runs_with_additional_modifiers(GrumPHP $grumPHP, GitCommitMsgContext $context)\n{\n    $grumPHP->getTaskConfiguration('git_commit_message')->willReturn([\n        'matchers' => ['\u00fcmlaut'],\n        'additional_identifiers' => 'u',\n    ]);\n$context->getCommitMessage()->willReturn('message containing \u00fcmlaut');\n\n$this->run($context);\n\n}\n```\nNote that I did not test the regex.\n. Thanks for this new feature!\n. @michaelgerdemann \nThis new feature is released under 0.7.2 (https://github.com/phpro/grumphp/releases/tag/v0.7.2)\n. Hello @keradus,\nGlad you enjoy our tool!\nAbout your problem: this has been reported before.\nPlease take a look at issue: https://github.com/phpro/grumphp/issues/67\nThis is not something that can be fixed, since phpcsfixer is running on the actual file. At the point of the last commit, the file has no CS issues and therefor you are able to commit.\n. The first hint is a bit strange. Both the staged as unstaged changes can succeed or fail. \nThe second one will be pretty hard. php-cs-fixer supports stdin, but other tools don't.\nMaybe it's a better option to create a new task that can be enabled that checks files that are both in staged as non staged status. This way you can tell GrumPHP that an error can be triggered.\nIf you want it to just notify when a file exists in both statuses, you can disable the future blocking flag.\n(see: https://github.com/phpro/grumphp/issues/17)\nWhat do you think of this solution?\n(any other ideas @aderuwe ?)\n. Yes, the behaviour applies to most tasks.\nThe stash idea is actually pretty nice. \nI expect that the changes only have to be stashed during pre-commit and not at commit-msg level.\nNot sure if stash works as expected during pre-commit. I will have to investigate this a bit further.\nIf it works, it's pretty easy to implement in the actual git-hook. \n(However, this means that the grumphp git:pre-commit cli tool will pass in your case...)\nThanks for the hint :)\n. yes, that is indeed another consideration we'll have to make. Good point!\nI think it's best to first find out if this stash idea will work. If it works we can add a well documented flag like ignore_unstaged_changes. This means that the logic has to be added to the git:pre-commit command.\nIf the stash idea doesn't work, an additional task as described above would be a solution.\nSounds pretty good for now right?\n. Great, I just started creating an event subscriber for this functionality. Stay tuned :)\n. Question: should this feature be enabled by default ?\nIt comes with some risks ... When PHP crashes in one of the tasks e.g., the changes are stored in git stash but the user might think that they are lost ...\nMaybe it's best to disable it by default?\n. I created a first version. All remarks more then welcome!\n. I understand that this is strange behaviour. But when we just start to stash changes and something goes wrong, the user might think that his code is gone. That's not something that we want to happen.\nNot all tasks run in a separated process. For example: the linters run in the actual GrumPHP process. So if for example you try to validate an XML of  X MB, it might be possible that you run into a fatal error because of a memory limit or something.\nIt might be an idea to register a shutdown function in the listener to make sure that the popStash() method will be called. Not a big fan of those shutdown methods, but in this case it might be the solution?\n. Fixed in #103.\nThanks @keradus for providing the git stash solution! \n. That would indeed be a great enhancement. \nI feel that we need to rethink the blacklist task.\nAnother idea was to improve it as described in this feature: https://github.com/phpro/grumphp/issues/53\nMaybe it's a good idea to define blacklisted words per extension or set of extensions. This way you are able to specify Javascript and PHP specific blacklisted words.\n. +1 For separating the functionality.\nThe blacklist extensions could be made configurable like in the grunt task:\n``` yaml\ngrumphp.yml\nparameters:\n    tasks:\n        git_blacklist:\n            triggered_by: [php, js, ....]\n```\nThis way the task has sensible defaults but could easily be customized.\n@llaville Defenitly +1 for the PHP_Parser blacklist idea. Can you work something out in a separate issue? Thanks!\n. Great, I am Looking forward to see your code!\nThe name is OK for me. I was thinking about something like invalid_php_tokens, but that one is just too long :) Can we continue discussing this feature in #53 to make sure that @kgust's question is also handled in a correct way? \n. +1\nWe really need a release script for this :)\n. I added a tag script so that I won't forget to change the version!\n. @ravinderk \nThis is fixed in 0.8.0 and won't happen again.\nhttps://github.com/phpro/grumphp/releases/tag/v0.8.0\n. I've added some additional error handling like uncaught exceptions and internal PHP errors. Normally the stash will always be popped, even when something goes terribly wrong.\nNow the only downside is that the changes are stashed as long as the task runs.\n. @keradus , @aderuwe \nI made sure that the stash only runs when there are unstashed (pending) changes.\nFor me, this feature is complete. Do you have any additional remarks before merging?\n. Can you explain why we need a grumphp.yml.dist file?\nThe idea is to add the same git hooks for every user so that the same rules are applied for every user.\n. Well I am not fully convinced: As I mentioned, GrumPHP is used for assuring the same coding standards, code quality, ... When you depend on a tool for this, you don't want all users to possibly have their own config. By allowing user specific config's, you will get situations where you expect that a certain tool has run, but it hasn't because the user has overwritten the configuration. \nThe idea is to let GrumPHP handle the rules you've decided as a project / team. If somebody wants to contribute to that project, he should play it by the rules that were globally set.\nI agree that it isn't a lot of work to implement, but I am looking for a valid use-case that is in the line of the ideology of the tool.\nOn the other hand: there are already a lot of ways to trick the system (commit -n, custom config files for the tool it runs, ...)\n. that might be a valid option. We don't want people come in and complain about GrumPHP is eating their code when they enabled the stash option ...\n. Good point. The only concern I have is that people will add / remove tasks so that the checks that should run aren't running during a commit. But I don't think that is something we can enforce anyway.\n. I am working on the dist support:\nhttps://github.com/veewee/grumphp/commit/95834138e5c4c14e4de5d79de5077b1361ff56c6\nCan you verify the locator to make sure that this is how it should work?\nI will finish this PR when I find some more time :)\n. The dist file is added in PR #135. I also changed the default value of the ignore_unstaged_changes option to false. More info about the issue in #123.\n. The error is saying that a include file could not be found / read.\nLook at the lines:\nhttps://github.com/timcharper/git_osx_installer/blob/master/assets/etc/gitconfig.default#L47-L48\nCan you verify if this file exists, is readable and does not contain an error?\nI guess this is a problem with your git configuration. \n. Can't you just remove the lines of the gitconfig.default?\nMaybe it's also easier to just brew install git ?\n. So it is a GIT configuration issue?\nCan you tell me how you first installed GIT? Maybe a bug report should be added to another project.\n. Since this is a GIT issue, I will close this ticket for now. Additional information is always welcome!\n. The problem is due to git running as a user without a home directory.\nYou can fix the issue with this command:\nsh\nsed -i.bak '\\#~/#d' /usr/local/git/etc/gitconfig\nIt will remove the lines that require the home directory from the global git config file.\nYou could also hardocde the absolute path to the files in this config file.\nAs far as I can see, there is no open ticket in brew at the moment.\n. This one is fixed in https://github.com/phpro/grumphp/commit/bc97896157eec56c4ae219942150c76d76331964\n. Fixed in #112.\nI also added Windows CI to make sure we detect this kind of issues earlier.\n. Thanks for the PR. I will take a deeper look at it as soon as possible!\nIn the meantime: is it possible to add specs / unit tests (for the parser stuff)?\nThere is also a problem when using the lower dependencies. Check Travis for more information.\nMaybe you could also update the documentation? This way we know how to use the task.\n. Hi @llaville,\nIt looks pretty nice already, but I think there are some things we can improve\nI took the time to browse through the code and made a list of small / larger remarks.\nHere is a list per file:\nGrumPHP\\Task\\ParseErrorsCollection\n- Maybe it's best to introduce a ParseError object. Somewhat similar to the LintError` object.This makes it easier to transfer the error data in a non formatted way. In a later fase of the project we are planning to introduce formatter classes, which will make it easy to display the messages the way you want!\nGrumPHP\\Task\\Php\\Blacklist\n- The triggered_by logic could be moved to the abstract task. It will always be the same for every parser.\n- The triggered_by option should be empty in the abstract task but specified for this blacklist task.\n- Not sure if we need to put the PhpBlacklist in a separate namespace. Most tasks are for PHP currently.\n- You got a unused use statement.\nGrumPHP\\Task\\AbstractParserTask\n- I would just transfer the SplFileObject to the parser. No need to build a path there. It is best to keep objects for as long as possible.\nGrumPHP\\Parser\\ParserInterface\n- Make sure to add the ParseErrorCollection to the use statements and use the short name in the docblocks. This gives a better idea of the class/interface dependencies.\nGrumPHP\\Parser\\Php\\NodeVisitor\n- I was thinking in splitting this visitor up into 3 different visitors. Not sure this is possible since I did not use the PhpParser package yet. \n- It would be very cool if the visitors were registered as a service and there was an option 'visitors' added to the task. This way, a user could easily create their own visitors for the task or just use 1 or 2 of the provided methods. This one is probably not that easy, but would be very cool :)\n- Information about how the keywords are parsed is a must! Otherwise people won't know how to use these.\nGrumPHP\\Parser\\Php\\PhpParser\n- In the PhpParser library I saw they were using a factory for creating the parser. In this factory it was possible to say if it's PHP 5 or PHP 7 or a combination. This seems like a new option for the parser task to me.\nTODO: Testing + documentation.\nYou really did a great job on this PR already, really appreciate it! Thanks!\n. No problem! Take your time :)\n. Well I was thinking about splitting the visitors up into separate visitors:\n- FunctionCallVisitor\n- StaticCallVisitor\n- MethodCallVisitor\n- ConstantVisitor\nThose visitors can be added as services in the container. Something like:\n``` yml\nservices:\n    grumphp.parser.php.visitor.function_call:\n        class: GrumPHP\\Parser\\Php\\Visitor\\FunctionCallVisitor\n        tags: {name: php_parser.visitor}\n                public: false\nparameters:\n    php_blacklist:\n        keywords:\n          - \"::var_export(\"\n          - \"var_dump(\"\n          - \"->print_r(\"\n          - \"error_log(\"\n          - \"BAR\"\n        visitors:\n          - '@grumphp.parser.php.visitor.function_call' \n```\nThis would require an additional collection class which contains a full list of all visitors on which it is possible to filter based on the configured visitors.\nBy default all your visitors can be enabled, but this will make it possible to easily create your own specific visitor for validating whatever you want.\n. Hello @llaville,\nWe don't need an extension for this.\nTake a look at: http://symfony.com/doc/current/components/dependency_injection/tags.html\nYou can register your own compiler pass in the ContainerFactory that adds the visitors to a VisitorCollection in the Parser object. \nNext you can filter by the configured filters.\nSo basically you can add a visitor service and tag is as a php.parser.visitor or something like that. The CompilerPass will load all the tagged visitors and append them to the php parser. When running the parser, the registered visitors are filtered by the configured parser options.\nI am leaving on vacation today, but will be back in one week if you need additional help. Maybe someone else can help out in the meantime. (/cc @aderuwe? )\n. Thanks for the work! I will try to take the time to review your code at the end of the week. \n. Hi @llaville,\nSorry it took me so long, but I didn't find the time this weekend.\nAs promised I took a look at the code and got som remarks:\n- I am starting to think that blacklist isn't the best name for the task. Since it is possible to validate whatever you want with the visitors. Maybe we could just name it php_parser with a configurable option blacklist? this way it is possible to add other configurable checks in the future, but keep the parser as is. What do you think about this?\n- I really don't want the PathsHelper in any Context object. Other commands don't need another path then the one that is available. Is this really needed? Maybe we could move some of the helper logic to a separate Filesystem Util class and inject this Filesystem in the parser itself? Also it shouldn't be the contexts responsibility to make files relative.\n- In the visitors you are using if's in if's. Maybe it's better to inverse the if statement and return early. You can find some more information on the subject at: www.slideshare.net/rdohms/bettercode-phpbenelux212alternate (Don't mind the title ;-) )\n- The visitors could be renamed to for example ConcreteMethodBlacklistVisitor. This way you can add multiple concrete method visitors with other functionality. I was also thinking into make the configuration a bit different to skip the init() step. Maybe something like this:\nphp_parser:\n    visitors:\n        {visitor: '@grumphp.parser.php.visitor.blacklist_function_call', options: {blacklist: [\"var_dump\", \"error_log\"]}}\n        {visitor: '@grumphp.parser.php.visitor.blacklist_concrete_method_call', options: {blacklist: [\"print_r\", \"run\"]}}\n        {visitor: '@grumphp.parser.php.visitor.blacklist_static_method_call', options: {blacklist: [\"var_export\"]}}\nWhat do you think about this way of configuring? Do you think it's possible? This will enable people to create their own kick-ass visitors. Looks pretty cool to me.\n- Currently the ParserInterface has visitors, but this is propably only used with the PHP parser? So it doesn't make much since to me. Also the AbstractParser should not contain visitors IMO.\n- The compiler pass might want to add the node visitors directly to the php parser instead of the blacklist task? Next the configuration will tell which one is enabled and which configuration it should use as described in the YAML above.\n- Currently also tests are missing.\n. Hi @llaville,\nIt's been a while since your last worked on this PR. We are assembling features for our next 0.9.0 relase and I was wondering if you needed some additional help with this PR?\n. This PR is being continued in #138.\n. Hi @nr404,\nCurrently gitlib, the git library we are using, does not support git submodules. \nMore info van be found at: https://github.com/phpro/grumphp/blob/master/doc/issues/grumphp-is-not-working-with-submodules.md\nAs long as this is not supported, it will be hacking around this issue. \n. Hi @tacone,\nThanks for propising this feature.\nPersonally I am not a big fan of manipulating code automatically right before a commit.\nThis way you don't have control about what you commit. Imagine that the command goes wrong and your files are totally messed up.\nI also have 2 other concerns: \n- You will have to add the file again after the manipulations, but what about files with both staged and unstaged changes? This may result in unexpected behaviour.\n- What about the priority of the task? If this task runs and changes files, this means that the tests that ran previously to the fix command could succeed, but after the automatic fix could fail. \nWhat are your views on the topics above?\n. Hi @tacone, \nI don't have a problem with the automatic fixing, but with the automatic git add $file of the code that is changed during validation. \nMaybe the files could be marked as changed in a central service. When all tasks ran, the question could be asked to the user: The phpcsfixer changed 6 files. Do you want to add them to the commit?\nMaybe with an option to view the diff of the unstaged files at that point.\nAt that point the phpcsfixer task should not throw any exceptions, but it is recommended that the ouput of the task is shown in a non-blocking way. (See #17)\nNot sure that when you ask a question in GUI tools, they will also prompt the question the the user. So this is something we will need to take a look at.\n. As mentioned above: there are multiple problems with auto fixing the code. \nIn the latest release, additional problems were added: It is possible that the vagrant folder does not contain the git directory so automated git adds could not be possible on all systems.\nFor me, the big problem remains that you are committing code that you don't control. I want to avoid issues like \"GrumPHP eats my code\" when there is actually an issue in cs-fixer. \nThe way I see it, this feature is more a PITA then a feature somebody would want to use.\nAnyway: I am open for discussions on the topic. If somebody knows how to solve all these problems while keeping the code easy and clean, it might be implemented one day :)\n. Maybe it's easier to specify 1 logger in the configuration.\nInstead of adding the interface to the locators, the setLogger() method is directly called on the Repository object in the commands.\nIf the command is not verbose, you just set a NullHandler as Log handler.\nThe repository is also used in some tasks / listeners, so the logger is not only attached to the locator.\nPretty nice feature though :)\n. @llaville,\nI created a new PR for the logger in #114.\nThis one creates a bit less overhead and makes it easy to configure the logger for external tasks.\n. What is the state on this PR? \n. @tombevers Are you planning to finish this PR any time soon? Thanks!\n. Closed in favour of #195.\n. This happens in the console application:\nhttps://github.com/phpro/grumphp/pull/114/files#diff-b7ec71ee28477693b4fe918ab314d297R191\nThe null loger is still available but a stream logger is added to the list of handlers in verbose mode.\n. Yes, that is exactly the idea.\nYou create the handler you want and register it to the grumphp.logger. By default is will use the nullhandler which won't log anything. If you want to write to a file or some other pllace, you can specify your own handler.\nWhen running the CLI command in verbose mode, the output is also added to the stdout of your terminal, so that the information is displayed in the terminal screen.\n. As mentioned in the #101 a specialized blacklist for languages like PHP will be made. Currently there is some work that needs to be done for the php parser (#108).\nThe idea of this blacklist is to have a general blacklist method that works for all files you want to check.\nFor PHP specific stuff, the source code needs to be tokenized. Otherwise you don't know the difference between die() and $person->die(). See the full discussion at #53.\n. Looks like a useful feature, +1 for me!\nMaybe a filesystem abstraction should be used for file_get_contents and validation + some better error output like which local paths are included or the name of the repositories.\n. Can you try this again with the current dev-master?\nIt seems like this is an issue with staged / unstaged changes.\nYou can find more information on this issue in the tickets: #100, #103 \n. @Yerlix \nThis has been released in https://github.com/phpro/grumphp/releases/tag/v0.8.0\nCan you verify this works for you?\n. Hello @llaville,\nI am wondering if this project needs the security advisories.\nThis is something you might want to add to your own application to make sure that no insecure library is being used.\nFor this package, a broad range of library versions are supported. So the security advisories don't make much sense in this context.\nWe still suggest the package to the applications that are using GrumPHP. What do you think?\n. This one is fixed by: https://github.com/phpro/grumphp/commit/ba1b582f262b47cc0794831f1e8ffc86fb949fad\nWe've chosen not to include any security checks in the code of grumphp. We are supporting a broad range of packages, so it's the responsibility of the implementing application to enable the security advisories.\n. @llaville,\nIt looks good! I added some minor optimizations in the comments of the code.\nCan you also add spec tests + documentation?\nThanks!\n. @llaville : The issue #118 is fixed.\n. FYI: I am adding a composer configuration layer to the applciation. This way you won't have to parse the configuration yourself.\nThe code can be found in: https://github.com/phpro/grumphp/pull/135\n. @llaville Are you planning to finish this PR any time soon? Thanks!\n. Maybe something like this?\nphp ./vendor/bin/grumphp run  >> /path/to/report.txt 2>&1\nIn our next version, it will be possible to specify your own loggers. This one might require some more work. For more information, take a look at: https://github.com/phpro/grumphp/pull/114\n. Thanks!\n. This feature has recently been developed, but hasn't been tagged yet.\nCan you try this again with the current dev-master?\nYou can find more information on this issue in the tickets: #100, #103\n. @Miljar \nThis has been released in https://github.com/phpro/grumphp/releases/tag/v0.8.0\nCan you verify this works for you?\n. We didn't really test git addin patch mode.\nAfter some investigation it turns out that this one will always fail.\nLooks like an issue in git:\nFor example:\n``` sh\ncreate the file:\necho \"<?php\" > test.php\ngit add test.php\necho 'echo \"stage me\";' >> test.php\necho 'echo \"unstage me\";' >> test.php\nRun patch add:\ngit add -p test.php\nedit the hunk and delete the unstage me line\nYou can check what is staged and what is not:\ngit status\ngit diff --cached\ngit diff\nCreate stash:\ngit stash save --keep-index\ngit diff --cached\ngit stash pop\n```\nResult:\n```\nAuto-merging test.php\nCONFLICT (add/add): Merge conflict in test.php\nphp\necho \"stage me\";\n<<<<<<< Updated upstream\n=======\necho \"unstage me\";\n>>>>>> Stashed changes\n```\n\nAs you can see, this will always result in an error in GIT.\nMaybe this is something that needs to be reported in GIT instead of fixed in GrumPHP?\nWhat do you think abou this @aderuwe ?\n. No, only the staged files are being validated. This could also be fixed with the stash --all flag, but isn't necesarry at the moment.\nA copy is another option, but there is much more that can go wrong inside of GrumPHP.\nIn very big projects the copy might also be slow.\n. Did some additional research last night and found the following discussion:\nhttp://git.661346.n2.nabble.com/stash-refuses-to-pop-td7453780.html\nSo basically the patched stash can only be applied again when the staged changes are committed.\n. @Miljar \nThat was also our concern while developing this feature. In the end we decided to turn it on by default, but maybe it was a better idea to turn it off.\nThis feature is configurable. You can turn it of with the ignore_unstaged_changes parameter.\nMore information: https://github.com/phpro/grumphp/blob/master/doc/parameters.md\nAbout the copy: we will certainly have to look into that one. My biggest concern is how GrumPHP will handle these files / tasks when they run in a separate folder. So mostly about: autoloading, relative paths, location of the tools, location of the vendor libraries, .... But then again: this needs to be investigated first.\n. We changed the default value of ignore_unstaged_changes to false in PR #135. This way the stash functionallity isn't triggered by default. You can enable it in a local grumphp.yml file and use it with care. Currently there is no other solution for the problem we found above, so I will close this one until we find a better solution.\n. Can you give me some additional information about the issue?\nI did following steps:\nActions\n```\nmkdir tmp\ncd tmp\ngit init\ncomposer require --dev phpro/grumphp\necho \"vendor\" > .gitignore\necho \"<?php var_dump('ok');\" > test.php\nCopy the lines to grumphp.yml file\nvim grumphp.yml \ngit add -A && git commit -m\"Test\"\n```\nResult:\nYou have blacklisted keywords in your commit:\ntest.php:1:<?php var_dump('ok');\nSo this tasks seems to work to me.\nCan you tell me how to reproduce your error?\n. It seems like there is something wrong with the internal git command that is being used:\n```\nSometimes this works, sometimes it doesn't:\ngit grep --cached -n '-e var_dump(' test.php\nThis seems to always work:\ngit grep --cached -n -e 'var_dump(' test.php\n```\nI will try to get this one fixed later this week.\nThanks for reporting!\n. @ibrambe \nA fix is underway in PR #126\n. Thanks!\n. @tifabien,\nA gherkin linter sure looks like a great addition! \nWe would like to avoid automatic file changes, but the check can be used for the task.\n. Hello @tifabien,\nCan you take a look and test the PR I created for this issue?\nhttps://github.com/phpro/grumphp/pull/131\nCurrently I don't have any projects with feature files anymore. Feel free to make or suggest improvements to the task.\n. Maybe it's indeed a bit to early. Support for Symfony 3 is no must, but I would really appreciate it.\nPlease keep me posted on the kawaii issue.\nThanks!\n. @tifabien \nEven though the tool isn't stable yet, I added the task to master. \nEarly adapting for the win!\n. I haven't been using custom rulesets but as far as I can read in the documentation, the way of specifying rulesets is by setting the standard option:\nhttps://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php\nThis may seem counter-intuitive, but we tend to follow the CLI usage of the tools we are running.\nCan you verify if this is the way to set the custom ruleset file?\n. I dove a bit deaper in the documentation of phpcs:\n\nSource: https://pear.php.net/manual/en/package.php.php-codesniffer.usage.php\nThe --standard command line argument is optional, even if you have more than one coding standard installed. If no coding standard is specified, PHP_CodeSniffer will default to checking against the PEAR coding standard, or the standard you have set as the default. The default can be set by setting the default_standard option.\n\nI can't find documentation about a custom standard being used without specifying the standard option.\nSo as far as I can tell, the standard that is being used depends on the user configuration. In GrumPHP we would like it to run on the project specified configuration. So we would rather have a hardcoded standard by default which you can explicitily overwrite in the configuration file.\nCurrently that is  the PSR-2 php-fig standard.\n. @Anahkiasen Is this still an issue for you or is the answer above clear?\n. Sounds good. I will try to change logic in the upcoming version.\n. The code got merged in #136. Thanks for the remark!\n. It looks pretty great! Thanks!\nSome small questions / remarks:\n- The TaskResults class should be written like the other classes in the GrumPHP\\Collection namespace, just to be consequent.\n- Maybe the TaskEvents  should also get the TaskResults collection instead of only the messages.\n- Why did you choose codes 0 and 99. Maybe we can make them just 1,2, ...\n- Maybe there should be a taskresult code for failed but non blocking. This way a possible event listener could validate the results without checking the task metadata.\nI don't mind the BC break since we are still on the 0.x version.\nWhat do you think @aderuwe ?\n. About the events. I guess following API's would be ok:\nphp\nRunnerEvent::__construct(TasksCollection $tasks, ContextInterface $context, TaskResultCollection $taskResults)\nThis means that both the all runner event actions will get a taskresults object. During the 'tasks.run' event, the statuscode could be NO_TASKS as in:\nhttps://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Tester/Result/TestResults.php\nAbout the status codes. In Behat the tasks are returning TaskResults. Maybe that is something we can implement in a next phase. It seems better then current idea of just throwing exceptions when a task fails and return nothing when a tasks passes. This way we can also think about a WARNINGS status code or something.\nAbout the constant name you proposed. I haven't come up with something better, so I guess one of FAILED_NONBLOKCING or NONBLOCKING_FAILED is ok.\n. Wow, this PR is starting to look pretty great!\nIndeed I meant the grumphp.runner.run event. Currently the TaskResultCollection will pass if no task ran. By adding the NO_TASKS code, you can say that it passed but no task ran yet. Similar to the Behat class I mentioned earlier.\nI think it's best that the non blocking tasks should not cause GrumPHP to fail during stop_on_failure. The messages are just warnings, so GrumPHP should continue running the next tasks.\nWhen this one is merged, I will try to make some time to let the tasks return a TaskResult. We are breaking BC anyways :)\n. It looks great. I will try to test it out somewhere this week. Thanks for the effort!\n. I just took a deeper look at the code and noticed that the TaskRunnerHelper is displaying the first error it encounters and then stops displaying the errors. In previous versions all errors are displayed.\nI was thinking about making the helper a bit easier by adding 2 new functions to the TaskResultCollection:\nphp\npublic function filterByStatusCode() : TaskResultCollection;\npublic function getAllMessages() : array|string[];\nThis way you can make the TaskRunnerHelper a lot easier. I was thinking about something like this:\n``` php\n    public function run(OutputInterface $output, ContextInterface $context, $skipSuccessOutput = false)\n    {\n        // Make sure to add some default event listeners before running.\n        $this->registerEventListeners($output, $context);\n    $taskResults = $this->taskRunner->run($context);\n    $warnings = $taskResults->filterByStatusCode(TaskResult::NONBLOCKING_FAILED);\n\n    if (!$taskResults->isPassed()) {\n        $failed = $taskResults->filterByStatusCode(TaskResult::FAILED);\n        return $this->returnErrorMessage($output, $failed->getAllMessages(), , $warnings->getMessages());\n    }\n\n    if ($skipSuccessOutput) {\n        $this->returnWarningMessages($output, $warnings->getAllMessages());\n        return self::CODE_SUCCESS;\n    }\n\n    return $this->returnSuccessMessage($output, $warnings->getMessages());\n}\n\n```\nMaybe the filterByStatusCode could also be replaced by some other method. E.g blocking(), nonBlocking(), ...\nIt also seems better to have to ascii art on top for both success / error messages.\nThe warnings should go under the errors.\nWhat do you think about this solution?\n. That is also ok for me!\n. I think it's best to only trigger the failed event when a task has really failed. So a non-blocking task will always pass. This way it follows the same logic as the taskrunner: a task can only fail when it is blocking. \n. @aaa2000: For me this one can be merged. Is their something you would like to change before merging?\n@aderuwe: Can you take an extra look at this PR? It's a rather big one.\n. I allready started with returning TaskResult objects in a task. This is still WIP but gives you an idea:\nhttps://github.com/veewee/grumphp/commit/d4a872ad1629764b415e633ade473a85ca81d0fd\n. For me it doesn't need to get squashed. I will be adding the named constructors again in a later version, since it improves readability.\nThanks for your work!\n. Thanks again for your work @aaa2000 !\n. Please use the PSR0 or PSR4 fixer from php-cs-fixer for this!\n. HI @llaville,\nThe PR is starting to look pretty good. I made some remarks about the code.\nWe will continuing discussing the feature in this PR, so I will close the other one.\nI think there is something struturally wrong with how the visitors are added, initialized and configured.\nI was thinking about using Symfony service configurators as described here:\nhttp://symfony.com/doc/current/components/dependency_injection/configurators.html\nMaybe this could be the solution to the problems we are facing?\nIt will also make it possible to configure the visitors as described in the previous threat. I think the current implemented visitor_options will make the configuration confusing.\nOne other thing I don't like about current visitors implementation is the constructor and init() method. It looks like both the runtime configuration, the file and the errorlist should be added through the constructor. So maybe the visitors aren't really services, but factory services that can create a vistor during runtime?\nCan you give me your feedback on these remarks so that we can get the architecture of the parser right?\nThanks!\n. Dus you also solve the php_parser can't run on your system error? You probably have to add the parser to the dev dependences in composer.\n. @llaville Are you planning to finish this PR any time soon? Thanks!\n. @llaville \nFor your info: I've started a little branch myself:\nhttps://github.com/veewee/grumphp/commit/e5de05c5ff7a43d820f599e2956da139d9104bd9\nMaybe the task has to be configured through services in a first version. I'll try to work on it again when I find some spare time again :)\nFeel free to add your remarks.\n. We'll continue integrating this task in #218.\nThanks for your work, I managed to reuse quite a lot of it.\n. Hello @tifabien,\nThis is more a php-cs-fixer issue then a grumphp issue. We discussed it already in a previous issue: https://github.com/phpro/grumphp/issues/95\nCurrently we are only validating the changed files during a commit. If we change it to the full configuration a lot of additional files will be validated again. This wil not only slow the application down but also might throw exceptions on code that you are not commiting.\nThis is why we decided to mark the issue as a won't fix.  One thing that might be possible is to add a new task property ignore_patterns and change the task to ignore patterns. The downside of this approach is that you'll have to configure it twice.\nWhen version 2 gets released we will propably have to write a new grumphp task for php-cs-fixer.\n. Sounds good. Only when the configfile is set And the run command is triggered? Or Always during the run command?\n. @tifabien, When no configuration file is added, you will get something like:\n\n[LogicException]\n You must call one of in() or append() methods before iterating over a Finder.\n\nSo as you mentioned above I implemented it this way:\nWhen nog config file is added to the configuration, all files will be checked like before!\nCan you validate if this works for you?\n. Fixed in #142\n. I was also bothered by this in the past.\nSince it is possible to install grumphp globally, it is hard to determine where the external commands are located.\nThe ExternalCommand locator was added to make it possible to use both locally installed packages and globally installed packages. It also handles compatibility with windows, where the command could be named phpunit.bat for example. So you could say this is intended behaviour.\nPersonally I just try to keep all my globally installed packages up to date. This is how I prevent the problem you are facing. I can see that this could be a problem in the scenario you are describing.\nThere is not really a clean solution for this other than writing our own ExecutableFinder or overwriting both environment variables and open_basedirs.\nDo you have any suggestions on how we could improve this?\n. This one is fixed in #148.\n. This sure is an issue. I also encountered this one in the past.\nCurrently all the tasks just use the STDOUT output which works fine in most cases.\nMaybe it's a better idea to fall back to the error message if no stdout message is set? \nThis logic could be placed in a separate location so that it is the same for every task. \nA while ago, I was thinking about creating some Formatters (#11), like in this case a RawProcessOutputFormatter. The interface could be different or maybe you find a better solution.\nFeel free to create a proposal or a PR!\n. Fixed in #142\n. Thanks for your PR. It looks good! I've added one little remark in the code.\nBesides of the remark, I am thinking about 2 small improvements:\n- Maybe it's possible to split up the current hooks folder into multiple folders with presets like: local, vagrant, ... This way the users have a way to easily configure grumphp to run in vagrant without writing their own hook templates; This might require some additional parameters in the template file.\n- It is possible to forget the trailing slash in the configurable option. Maybe it's better to make both possible? For example: config/hooks and 'config/hooks/'?\nThanks!\n. You can add the vagrant hooks in this PR and add a this in the documentation so that the users are aware that the vagrant hooks exist.\n. Indeed, the location should be somehow configurable.\nIf it is to hard or you need vagrant specific configuration for that, it is also possible to create a grumphp-vagrant extension or something like that.\n. Looks good! I'll add some additional documentation.\n. Hello @kvdnberg,\nThe problem with git commit -a is that the files aren't staged before the pre-commit hook ran.\nWe are fetching the changes with the command:\ngit diff -r -p -m -M --full-index --staged\nThis results in a list of all changed files that are staged in GIT. But since the changed file isn't staged yet, GrumPHP won't detect the file.\nI've looked around in the git-diff documentation and in some other projects, but I currently haven't found any good solution for this problem. Maybe you've got an idea ?\nAlso note that it is always possible to commit with the -n flag which will skip all commit hooks. The user can also disable or remove the git hook. So there is always a workaround for someone who doesn't want GrumPHP to validate the commit. This tool can be very handy, when used right. You will have to inform your team that it is not done to bypass the tests.\nIf you ALWAYS want to enforce the validation of the commit, it is also possible to run GrumPHP on a continious integration platform like Travis or Jenkins. This is the only way to make sure that no commit breaks the rules you defined as a team.\n. The difference is that the diff runs in PHP.\nI just tried the hook and opened another terminal screen where I entered git status. The changes are still not staged in the second terminal. So my best guess is that git is adding the changes in the cache of the process that is running at that moment.\nIn the git hook a PHP command is triggered which will create a separate process through the Symfony ProcessBuilder. This means that the command acts like it runs in the second terminal screen.\nIt sure is strange thing! :)\n. I'm starting to think that passing the diff is the only solution for this problem. Instead of passing the content of the diff as an argument, it is possible to pipe it to the command like this:\n```\nShort version:\ngit diff -r -p -m -M --full-index --staged | php test.php\nMore readable version:\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\necho $DIFF | php test.php\n```\nIn the command we could write something like this:\nphp\nif (ftell(STDIN) === 0) {\n    $diff = '';\n    while (!feof(STDIN)) {\n        $diff .= fread(STDIN, 1024);\n    }\n}\n(This logic could also be placed in the ConsoleIO)\nNext we'll have to change the logic of the  PreCommitCommand::getCommittedFiles() so that the diff from the user input is being used when it's present. When no diff is present in the STDIN, it will fall back to the logic that is allready present in the library.\n(This logic could also be placed in the ChangedFiles locator or in a separate ChangedFilesFromInputDiff locator)\nI think this is the most elegant solution we can implement. What do you think about this?\n. The bin/grumphp command is the correct one. When exactly did you get the /vagrant in your git hook?\nI'm not fond of adding new parameters to the grumphp.yml specific for the vagrant hook.\nIt should be universal so that new hook presets can be added without altering the code. This is to keep the code as general as possible and independent of the file system or used tools.\nThat is why we decided that the line in .basrc is sufficient. You could add this file to the vagrant provision so that every user has the same .bashrc file. We put it in our boxes by default, so that's not a big problem. \nSo in my oppinion the PR is not a valid fix. The issue that needs to be fixed is the hook with the /vagrant path and maybe a more clear section in the documentation.\n. Strange .. I'll have to dive deeper in the issue.\nThanks for reporting!\n. I've started debugging the git:init command during both composer install and when the command runs stand-alone.\nAfter some digging, I found out that composer is adding the absolute path to the bin dir in the PATH environemnt variable during the dispatching of events:\nhttps://github.com/composer/composer/blob/1.1/src/Composer/EventDispatcher/EventDispatcher.php#L147-L160\nSince we are using the Symfony ExecutableFinder:\nhttps://github.com/symfony/process/blob/master/ExecutableFinder.php, the absolute path to the executable is found before it reaches our relative $extraDir bin-dir.\nMaybe we should create a custom ExecutableFinder that falls back on the paths in the PATH environment variable. The problem is that the ExecutableFinder is pretty neat and works on most OS, so it would be 99% copy-paste. Another option is to place the relative path before any other paths, but that feels a bit hacky. Both solutions  would also fix the issue #140.\n. This one is fixed in #148\n. As mentioned in the issue #145: I am not fond of adding vagrant specific configuration in the grumphp.yml file. The code should remain as general as possible and independent of the choosen git hooks preset.\n. Thanks for reporting!\nBy default the Symfony process component uses a timeout of 60s.\nIt can be incremented or set to null to make sure the process isn't terminated.\nCurrently this is not configurable in grumphp. I'll make an additional parameter for this.\n. This one is fixed in #151.\n. That is indeed a problem! Maybe it's better to write an own Filesystem class like phpspec, composer, .,. do. Another alternative is using something like flysystem, but maybe that's just a little overkill.\nFor now you can choose to create a file during the let() method in phpspec and remove it during the letgo() method. Another possibility is to place a fixture file in the tests folder.\n. @WyriHaximus Are you planning to finish this PR any time soon? Thanks!\n. Thanks for your effort! 29 commits, that seems sufficient :)\nLet's merge this!\n. Crazy is just a lack of imagination :)\nThe idea sounds good, but I think a hard limit is perfectly OK since you are setting a hard goal for your co-worker. In a perfect project, the code coverage should always be 100%.\nOn the other hand: I do think this variable limit is pretty nice since you are continuously improving the code coverage this way. \n. Hello @jverdeyen,\nA docker preset sure sounds look a nice addition!\nIn your gist: how does the docker container get access to the commit message file? I don't think this will work but haven't tried it.\nWith the vagrant preset files, we tried to avoid setting additional parameters in the yaml file. We did this to make sure that the configuration was preset independent. The disadvantage of this approuch is that a home directory needs to be set in the vagrant box.\nMaybe it's a better idea to provide something like a git_hooks_variables parameter which can be used to fill replacements. For example:\nyaml\nparameters:\n    git_hook_variables:\n         DOCKER_CONTAINER: php\n         DOCKER_HOME_DIRECTORY: /app/something\nWith this approach the git:init command can replace the variables in the git hooks. Maybe it's best to make the replacements bash variables: ${DOCKER_CONTAINER} to make sure that code inspection doens't flip.\nFeel free to implement. It sure looks like a great next step! \n. @schrapel \nIt depends what tasks you want to run. For regular tasks like phpunit and phpcs a custom container is possible. If you want to run e.g. selenium stuff, you may want to run the tests in the environment you are working in. \nAs mentioned above, I think it's best to make the container configurable like this:\nparameters:\n    git_hook_variables:\n         DOCKER_CONTAINER: php\nExtra info:\nI did manage to run the grumphp run command in a docker container during CI on pipelines and described it here:\nhttp://veewee.github.io/blog/grumphp-approves-bitbucket-pipelines/\n. As mentioned in #232: We won't maintain a Dockerfile ourselves. \nHowever, we would accept configurable git hooks for Docker as mentioned above.. @ceesvanegmond, Thanks for the suggestion. I am not sure what the resulting hook file looks like. Can you add an example?\nCurrently it is possible to use your custom hook templates, so that is also an option.. Yesterday we had a similar request for additional git hook parameters in the YAML file.\n(see https://github.com/phpro/grumphp/issues/152 for more information).\nWith the vagrant preset files, we tried to avoid setting additional parameters in the yaml file. We did this to make sure that the configuration was preset independent. The disadvantage of this approuch is that a home directory, ... needs to be set in the vagrant box.\nMaybe it's a better idea to provide something like a git_hooks_variables parameter which can be used to fill replacements. For example:\nyaml\nparameters:\n    git_hook_variables:\n         VAGRANT_LOCAL_PATH: ./\n         VAGRANT_REMOTE_PATH: /vagrant\nWith this approach the git:init command can replace the variables in the git hooks. Maybe it's best to make the replacements bash variables: ${VAGRANT_LOCAL_PATH} to make sure that code inspection doens't flip.\nI'm not sure if @jverdeyen is going to work on this part as mentioned in ticket #152. If not: feel free to implement! :)\n. Hi @johnhout,\nThanks for the PR. \nCan you add a comma to the end of the line so that the tests pass?\n. There is also a reference in the suggest block:\n\"fabpot/php-cs-fixer\": \"Lets GrumPHP automatically fix your codestyle.\",\n. Thanks!\n. Hi @jhuet,\nI am not familiar with atoum so I am not sure how the cli configuration works exactly. \nI've added some small remarks to the code. \nThanks for the new task!\n. Hi @jhuet,\nThat way of adding arguments is pretty common.\nMaybe you can just add 2 new methods to the ProcessArgumentsCollection?\nI was thinking about something like:\naddOptionalSeparatedArgument()\nThis method will look like addOptionalArgument but will add 2 arguments instead of a sprintf if the value is available.\naddSeparatedArgumentArray()\nThis method will look like addArgumentArray but will set the key once and multiple value arguments. Note that when the array is empty, the key of the argument should not be set.\nThis way you can make the task more readable and improve the types of the configurable options.\n. @jhuet Are you planning to finish this PR any time soon? Thanks!\n. Have a great vacation! ;)\n. Thanks for your work!\n. Hi @tifabien,\nThanks for your work. Let me know when 2.0 gets released so that I can rerun the CI checks.\nBesides that, I notice that you only added properties. Does this mean that it works with both 2.0 and 1.0?\nI think we should support both versions for a pretty long period.\nAre ther eattributes in 1.0 that don't work in 2.0 anymore?\nMaybe we should add the version of php-cs-fixer in the configuration part of the task documentation file?\nIt might also be an option to specify a php-cs-fixer version in the task configuration and validate the configuration input with the OptionsResolver through callback functions in setDefault() or setNormalizer()?\n. This PR is closed in favour of #163.\n. Thanks!\n. Hi @mgeoffray,\nCurrently the ignore_patterns configuration is mapped to the --ignore option of the CLI. \nAll committed files are added to the command as a whitlist.\nIt is possible to add a whitelist parameter, but the whitlist will happen insode of the GrumPHP task. It's also important to know that int this case, the whitelist is applied before the ignore list.\n. I tested this and I do not think it is possible with the --ignore parameter of phpcs. What I was trying to say, is that it is possible to alter the phpcs GrumPHP task and filter the files with a whitelist before the files are being sent to the phpcs command.\nThis is something that needs to be added to the task in order to work.\n. It looks like \"\\c\" is the 'End of Text' control character; it informs the Shell that the end of text has been reached. Echo will stop at this character and return the text up to the \\c character.\nSince echo works different in sh, bash, and in multiple OS, it is recommended to use:\nprintf \"%s\" \"${DIFF}'\nThis one should work on all shells / OS.\nCan you validate if this works for you?\n. Did you also try this one?\n```\nRun GrumPHP\n(cd \"./\" && printf \"%s\" \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\n```\nI think this should work.\n. It looks like the printf command is stripping the trailing character of the DIFF.\nExample:\nsh\necho 'test\\\\ctest' >> test.txt\necho \"test\" >> test.txt\necho \"\" >> test.txt\nIN=$(cat test.txt)\nprintf \"%s\" \"$IN\"\nWhatever I place in the test file, the trailing \\n is always getting stripped.\nI guess it's ok to do something like this to make it work cross platform:\nsh\nprintf \"%s\\n\" \"${DIFF}\"\nI've tested this on ubuntu and on mac with both sh and bash and it works the same on both platforms.\nCan you verify if this fixes the problem for you?\nWe'll propably also have to do something similar for the vagrant scripts.\n. Great, I'll try to patch it next week!\n. Can you guys verify if this commit works for you so that I can merge it in?\nhttps://github.com/phpro/grumphp/pull/168\nThanks!\n. It requires composer/composer which isn't in the master branch of my personal github account since it's outdated. \nYouo'll have to change dev-master to the actual branch:\ndev-feature-escape-special-chars-in-diff\n. @mougrim : I'm currenntly taking a holiday break. I'll release the new version in september so that I can respond quickly to possible issues.\n. Thanks for the PR. Could you add some tests for this feature?\n. It looks good. Alternatives are include_patterns, whitelist_pattern, ...\nMaybe it should also work like the ignore patterns so that you can provide multiple paths that are whitelisted?\n. It looks pretty good but I would still like to get rid of the escapePatternDirectorySeparator() method. \nI also think its better to run the extensions() filter separate from the paths() filter. This way the extension filter won't break when someone enters a bad regex.\nCan you also resolve the conflicts and fix the Continious Integration?\n. @mgeoffray Are you planning to finish this PR any time soon? Thanks!\n. No problem! Thanks :)\n. @jeremy-bruns, @mgeoffray is taking care of this. Currently he is busy so this new feature is on a hold. Feel free to contact him, maybe you can take care of this for him.\n. It looks good, thanks!\nI'll merge it in somewhere next week when the nightly build is fixed. This has nothing to do with this code, so you don't have to do any additional work on this PR.\n. Thanks for the PR. It looks good!\nCan you update the task spec file?\n. Thanks!\n. Looks good. Thanks!\n. @Big-Shark: \nThanks for the PR! Did you also take a look at #156? \nThis PR needs some documentation and an updated composer.json file. \nWe are also enforcing snake case on the task options. This means that e.g. allow-risky becomes allow_risky.\nI am also thinking about removing the inheritance of the php-cs-fixer 1 task.\nThis way, we are not blocked by the first task if the second version gets an update.\nMaybe the shared code can be placed in another class. \n@tifabien: \ncan you also take a look at this task? Maybe it's better to make 2 separate tasks, one for php-cs-fixer 1 and one for php-cs-fixer 2. What is your oppinion on this?\n. I think a second task is indeed a better solution. Let's work on this PR in favour of #156.\n. Currently: Yes really :) \nWe should drop support for 5.3, 5.4 and even 5.5 but there are still some legacy apps that run on vagrant boxes with php 5.3, so I would like it to be as BC as possible with old PHP versions.\nBesides to that, I really don't like traits. \nIt seems better to create a class like PhpCsFixerRunner which has it's own dependencies (formatter, processbuilder, ...) and inject this service into the php-cs-fixer tasks. \nThis way, the code is easy testable and it's context is fixed.\n. @Big-Shark Are you planning to finish this PR any time soon? Thanks!\n. Thanks for your feedback! I'll try to make some time for this.\n. @tifabien, @Big-Shark \nI've merged a first version of the phpcsfixer 2 task.\nIt's open for improvements.\n. I've tried the steps you've described but I am able to commit.\nCan you paste your git diff in this issue?\ngit diff -r -p -m -M --full-index --staged | cat\nDid you overwrite the basic git diff command or added a custom diff pager? (For example diff-so-fancy)\n. I also use diff-so-fancy,  but only with the command:\nsh\ngit dsf\nIf you overwrite default diff behaviour, your diff can't probably be parsed correctly which results in this error.\nTake a look at the message:\nNo match for regexp /diff --git (a\\/.*) (b\\/.*)\\n/ Upcoming: diff --git c/composer.json i/c\nYour diffs looks like:\ndiff --git c/composer.json i/composer.json\nindex 2d1cef9d4a4dec5d3f18c7f87eb89eb2559202b2..7814c002ac39b65249575ef200225e65dc44f7b1 100644\n--- c/composer.json\n+++ i/composer.json\nIt should look like \ndiff --git a/file.json b/file.json\nInstead it looks like this:\ndiff --git c/composer.json i/composer.json\nThis means that gitlib can't parse the diff. I would expect that diff-so-fancy is the cause of this problem.\n. I've looked into diff-so-fancy and it doesn't seem to transform those a/ b/ things to i/ c/.\nCan you tell me which version of git you've installed. Maybe this is a BC break in git or something?\n. I've just took a look at the git source code and it looks like it is expecting it to be a/ and b/:\nhttps://github.com/git/git/blob/master/t/t4000-diff-format.sh#L38\nNot sure what is going wrong in your installation. Maybe you can try to reinstall git?\n. It looks like a great addition. Can it also take changed files as input parameter?\nFeel free to implement.\n. Added in PR #182 .\n. Great idea! Feel free to implement.\n. Thanks for the PR @Kanti!\nI've added some small remarks. Can you take a look at them?\nAlso the spec file for the phpunit test should be altered before I can merge this change.\n. Nope, that's all. Can you also update the default values in the documentation?\n. Thanks!\n. Currently that is not possible.\nThe process builder is translating this to:\nsh\n'sh' './bin/console translation:check-catalogue --env=dev'\nAs you can see, there are single quotes around all the input. This means that it is handled as one argument.\nThe code of the Shell task could be improved to make sure that multiple arguments.\n. No, the order is made this way because it is also possible to run GrumPHP as a global executable. \nWhen we place the __DIR__ entries first, the global packages will be used instead of the local packages.\nZF2 indeed changes the current working dir in it's public/index.php. GrumPHP is totally unaware of this change since it does not use this index.php file. In your package it should also be unaware of the working directory, since it is determined in the application.\nMaybe a possible solution would be to use a path repository: https://getcomposer.org/doc/05-repositories.md#path\nYou set the code in a separate folder and work in that folder. Your package has to work in a closed scope, independent off the application you are working on.\nNext the package can be symlinked in your real application.\n. Hi @sc0rp10,\nThanks for reporting the bug.\nI've checked out your repo and tested the case as specified above.\nIt seems to work just fine here. Maybe I am not understanding the flow, but I've tried:\n``` sh\ngit add -A\ngit commit -m\"Test\"\nAnd\ngit commit -am\"Test\"\n```\nAfter changing the files. Always the same result: with protected properties I see a pass which is normal, with private properties I get a fail.\nMaybe you can validate the command that is running?\nHere it looks like this:\n'git' 'grep' '--cached' '-n' '-e' 'die(' '-e' 'var_dump(' '-e' 'exit;' '-e' 'private \\$' '-e' 'private static \\$' '-e' 'private function' '-e' 'private static function' 'src/index.php'\nAlso know that we are planning to include a php parser to make it easier to blacklist PHP specific stuff in the future (see #138)\n. Owkay, I see now ...\nIt is related to #144:\nIf you use git commit -a, the files are only staged in the current running process.\nFor validating the blacklist, the git grep --cached command runs in a separate process\nThis means that git grep --cached will not see the changes.\nIn current implementation, there isn't really anything we can do about this.\nWhen the php parser task is finished, it should be possible to validate that no private properties can be committed.\nYour issue should not occur, if you commit with the commands:\ngit add .\ngit commit -m\"Not ok!\"\n. No problem! :)\n. Thanks for the PR!\n. Thanks for the PR. It looks like there is an issue on Windows: https://ci.appveyor.com/project/veewee/grumphp/build/1.0.174\nCan you take a look at it? \nWindows is using double quotes instead of single quotes for wrapping it's arguments.\n. Currently I am on vacation. I'll take a deeper look in the code when I am on my computer. The new  release will be somewhere in the beginning of September.\n. It looks pretty good. I've added some small remarks.\n. It's clear what the formatter is doing, but I think the spec for the formatter is not advanced enough:\n- In the task you retrieve both the full report and the json report. This should also be very well tested in the specs.\n- You also check if the json can be parsed. The result is empty, but you never tested if the file suggested files are valid.\n- There is also no check if the phpcbf command is what you expect ut to be.\nCan you take a look at this?\n. I meant that there was no test that checks that this returned what you expected:\n$this->formatter->formatErrorMessage($arguments, $this->processBuilder);\nCan you make the spec more understandable by using real data instead of something?\nIt's not clear how it should behave by just adding 'something'.\nSorry for the nitpicks, but I want to make sure that this code works exactly as it should :)\n. @Kanti: almost there, it's starting to look great! :)\nI've added 2 comments in the spec file in which we can see what is the expected result of the suggestion part of the formatter. (Now it is just empty)\nThere is also still the comment on the unused Typo3 DebuggerUtility which is use'd in the task but never used.\n. Thanks for you work, it's a nice addition!\n. Thanks for the PR! \nThere is still a little work that needs to be done before we can merge this code:\nIt looks like there is still a little styling issue of which the CI is complaining.\nThe composer file will need an extra entry which suggests the installation of the phpmd tool.\nCan you also add some documentation on how to configure this command in the doc folder?\nFiles that need to be altered/created:\n- doc/tasks/phpmd.md: A file on how to use the command, formatted as the other task documentations.\n- doc/tasks.md: A link to the task configuration and an entry in the example tasks code.\n- readme.md: An entry in the example tasks code and the composer suggestion.\n. Thanks for your work!\n. I like the idea a lot! It will also result in less \"Fixed merge conflicts\" commits.\nDon't know how we could make it better at the moment, but we can launch this one and improve it when we've got new ideas about the task.\nThanks for the PR!\n. Thanks!\n. You've configured the stop_on_failure property which will stop running tasks once one of the tasks fail. So in this case, Phpcs will fail and the state will be aborted. Normally you should see the output of the phpcs task underneeth the aborted step.\nYou can also run php with the -vvv option. This one will show you some more output. \nOnce the tasks start running, there isn't a lot of additional output for the moment.\n. It sure is welcome. I think it's easiest to add the IOInterface as a dependency to the ProcessBuilder class.\nIn the buildProcess() you can check if the isVeryVerbose() flag is set and write() the getCommandLine(). \nThis verbose mode is triggered by adding the -vvv option to the run command. There is no need for an additional parameter like debug since this very verbose flag is already available.\n. I'm closing this issue for now. Feel free to improve the logging.\n. Thanks!\n. I am not sure I am in favour of this feature request. It sure looks pretty handy, but we are trying to us GrumPHP as a quality tool. Not just some git hook task runner.\nMaybe if there are enough people in favour of this issue, it can be added.\nLet's keep this open some time and see if it gets some upvotes :)\n. It looks like this one can be closed. \nThanks for the suggestion, but we will not implement this feature.. Thanks for your PR. It looks pretty good, but I've added some remarks.\nWe also need some phpspec tests for this new task to make sure it works exactly as it should.\n. Hi, the phpspec task looks good. Thanks for your fast response!\nI've added some small improvements to the code in the task.\n. I've made some small changes:\n- The  -e  option is removed since the extensions filter will do this. I've also added the default extension filters to the triggered_by option.\n- I've changed the name of the task class to make it universal over the tasks.\n- I've added a addOptionalArgumentWithSeparatedValue() so that we can get rid of the if statement.\nNow it looks good to me. Can you verify one last time before I merge?\nThanks for your effort!\n. @MetalArend, Thanks for pointing me to that repository.\nI've added a PR. Let's hope it gets merged :)\nhttps://github.com/sebastianbergmann/phpqatools.org/pull/7\n. Woops, my bad :)\n. Thanks for the PR @Kanti! At first sight, it looks like a great formatter.\nThis formatter requires ANSI escape codes but there are users on e.g. who use terminals which don't support those colors. Can you check IOInterface::isDecorated() to enable / disable colored output?\nI'll try to dive in the code somewhere this week.\n. That indeed is something strange. I'll have to dive into that one. \n. Hi @Kanti,\nCan you tell me if this is still an issue if you mark the task as a lazy service?\nyml\nservices:\n    formatter.git_blacklist:\n        class: GrumPHP\\Formatter\\GitBlacklistFormatter\n        lazy: true\n        arguments:\n            - '@grumphp.io'\nCurrently it is possible that the TaskRunner is initialized before the configureIO method is being called. This is indeed a problem which we need to fix. In the meantime, the lazy option can be a quick fix.\n. Hi @Kanti,\nI'll try to pick it up somewhere this week. Sorry for the latency :)\n. Hi @Kanti,\nI've added late input / output binding to the console IO.\nCan you verify if this works for you? It seems to work here.\n. Thanks!\n. We are currently doing SemVer but we are still in 0.X version:\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n\nThere are still some thing I want to implement which will probably break BC. Therefor I would like to keep it as under development for now.\nWhen working on 0.X the semver document is rather loose in my opinion. So currently we are working as followed:\n- MAJOR version is still 0.\n- MINOR version is upgraded when we are releasing some BC breaks.\n- PATCH version is upgraded when new functionality is added or bugs are fixed\nAs the document states:\n\nIf your software is being used in production, it should probably already be 1.0.0. If you have a stable API on which users have come to depend, you should be 1.0.0. If you\u2019re worrying a lot about backwards compatibility, you should probably already be 1.0.0.\n\nIt's a development tool, so it's not being used in production. I currently want to keep on evolving without worrying about BC untill the features which might break BC are developed. From that point on, we will tag 1.0.0 and follow the semver document.\nI do hope to get at the 1.0.0 version soon, but I currently struggle to find the time to implement these features.\nYour feedback on the matter is more then welcome!\n. Hi @jyggen,\nThanks for noticing!\nCan you fix the CI error and add a spec test for this new function?\n. Thanks!\n. The phpmd task is a rather new task.\nA fix for this issue was already created and is available on master. I'll try to create a new version somewhere next week. More info:\nhttps://github.com/phpro/grumphp/pull/189\nSince it is a new task, not all options are available in GrumPHP yet.\nFeel free to create a PR which adds more configurable options to the task.\n. @DannyvdSluijs: I did not know that is was no longer maintained. Let's close this one since it doesn't look up-to-date anymore. Do you know of a tool that does similar stuff?\n. @pamil, I haven't used HumBug myself yet. Somebody suggested a HumBug task long ago.\nAs far as I can tell, the json log file can be used to get the metrics in the summery part.\nJust as in the clover coverage task, it is possible to add a minimum level for one of the metrics covered_code, combined_score or mutation_coverage. \nExample log:\njson\n{\n    \"summary\": {\n        \"total\": 416,\n        \"kills\": 24,\n        \"escapes\": 8,\n        \"errors\": 0,\n        \"timeouts\": 0,\n        \"notests\": 384,\n        \"covered_score\": 75,\n        \"combined_score\": 6,\n        \"mutation_coverage\": 8\n    },\n    \"uncovered\": []\n}\nI do agree that the results itself should be interpreted by a human to make sure that it aren't false positives. But the calculated metrics could be used to determine how well the tests are being written. \n. Thanks for reporting @exussum12.\nClosing this issue since infection is already implemented:\nhttps://github.com/phpro/grumphp/blob/master/doc/tasks/infection.md. Hello @bizmate,\nI tried repeating your steps, but it seems to work just fine here.\nCan you check what this command is returning on your system:\n```\nvendor/bin/kawaii gherkin:check --align=left features\nYou can also check the error code with following command\necho $?\n```\nResult:\n```\nFinding files on features\n Everything is OK!\n\nOutput code: 0\n```\nMy feature file looks fine and I am able to run both grumphp run and kawaii gherkin:check.\nAdditional remarks:\nIs it only failing during the run commando or also during the git hooks?\nDo you get it working if your git folder is the same as the local folder?\n. @bizmate \nI think this is a problem in the kawaii executable.\nAs you can see, you don't get en OK or error message.\nI think the executable finishes unexpectedly. \nMaybe this has to do with some strange text / characters in your feature files?\nThe echo $? does not return anything?\n. Owkay, I'll close the issue for now.\n. Hi @jyggen,\nIt looks pretty good! Can you also add the exclude option?\nNormally we wouldn't like to run this tools on spec or test files etc.\nThanks!\n. Does the tool only detect copy-pasted code between the files you add as a parameter to the command? So for example: If I commit class1.php which contains duplicate code from class2.php, it won't detect the duplicate code since it is only checking class1.php?\nMaybe it's better to let the tool run on the complete codebase instead of only on the committed files?\n. Maybe it's best to let the tool run in the current working directory by specifying the source . or getcwd()?\nThis way, the tool will run on the full codebase and you can specify which directories / files you want to exclude for the phpcpd task.\nAnother option is to run it in the $this->grumPHP->getGitDir(); folder, but this might be overkill in projects with a nested structure.\n. Hi @jyggen,\nNow that I see the code, I was thinking in making it configurable.\nInstead of using the getcwd() method, we could read it from $config['directory'] or something like that. By default the value is set to . which means it will load the current directory.\nThis way it is easy to configure it to scan e.g. the src folder, but exclude specific folders like e.g. src/Resources. What do you think about this feature?\n. Super! :) I've merged it.\n. Thanks for noticing! :)\n. Thanks, it's looking good!\nI've added a small remark.\n. I've changed it. Thanks for the PR!\n. @jyggen, the way it was, is how other tasks are solving the problem as well.\nImagine you commit only an XML file, then you don't want the phpcpd task to run since it is irrelevant to the commited context.\nIn my opinion there is no need for using the --names option if the filtering is done with the extensions() filter. Since it is running on git commands, it's probably faster then the filesystem.\nIf you have another opinion on the matter, feel free to enlighten me :)\n. +1 Let's re-add the extensions() check and leave the --names option as is!\n. Great, thanks!\n. @jyggen,\nYou get more feedback about the exception when you run:\n./vendor/bin/phpspec run -v\nYou should see some deprecation warnings like:\n\nDeprecated: The Twig_TokenParserBroker class is deprecated since version 1.12 and will be removed in 2.0. in /..../grumphp/vendor/twig/twig/lib/Twig/TokenParserBroker.php on line 36\n\nBesides that, I get 2 fatal exceptions:\n\nGrumPHP\\Exception\\RuntimeException: The stashed changes could not be applied. Please run git stash pop manually!More info: Exception in /.../vendor/phpspec/prophecy/src/Prophecy/Promise/ThrowPromise.php:79\n\nAnd \n\nPHP Fatal error:  Uncaught Exception in /.../vendor/phpspec/prophecy/src/Prophecy/Promise/ThrowPromise.php:79\n\nI'll take a deeper look in the code somewhere this week.\n. @jyggen,\nAbout the 3 options:\n1) This seems like the prefered option for me. I don't like to reinvent te wheel and would love to use a 3rd party for this. Maybe there are still other packages that perform twig linting or some options inside twig itself?\n2)  This is also possible, but that would be something we'll need to maintain ourselves.\n3) Rather not: If you are using e.g. 3rd party Symfony Bundles, you don't really know which extensions are added by these bundles. Another idea would be to create a file that loads the environment from e.g. symfony, but that seems like an overkill to me at this point. The good thing about this would be that the linter is exactly the same as during runtime.\n. Alright, keep me posted on the issue :)\n. It doesn't look like the package is very active at the moment.\n. We've moved from PSR-0 to PSR-4. Can you rebase your changes against current master?\nIt looks like the maintainer of the twig lint is waiting for a PR to fix the open issue. Is this something you are willing to create or do we keep on waiting until somebody else does?. @welcoMattic, We cannot use this task if https://github.com/asm89/twig-lint/issues/31 isn't implemented first.. Thanks for noticing!\n. Thanks!\nWe were thinking about adding some behat or codeception CLI tests to the project for testing if every task works. These tasks will probably get pretty slow because we'll have to create a file strucutre for every task etc. This means we'll also have to implement #50 to make sure the tests only run on CI. We'll also have to put a lot of time in creating all the happy and sad paths for every task. In other words: it is possible but it will consume a lot of time to get the testing right which I don't have at the moment :)\nFeel free to help out where you can.\n. Thanks!\n. Hi @jyggen,\nThis PR looks great! One remark: can you rename the task to doctrine_orm, doctrine_orm_schema or something like that?\nOther Doctrine modules like ODM also have a schema validation command.\nThanks!\n. Thanks!\n. Hi @poteirard,\nThis issue has been fixed in #201.\nIt is fixed on master and will be released in 0.9.6 hopefully this week.\n. Thanks for your work, I'll take a look at the code later this week.\n. @poteirard: No problem! \nI've fixed the remarks because I want to get the new version out in a few minutes.\n. Thanks for the PR!\n. Thanks!\n. @Asuza,\nIt should be configurable like the grunt task.\nIt looks like @Kanti picket it up already :)\n. Great idea!\nCan you move the logic of the chunked process runner into a separate service named ParallelProcessRunner or something like that?\nThis way we can reuse the logic in other tasks when we need to.\nLets also try to keep 1 level of indentation in the classes. \nCurrently the processes are running in chunks of 10 which means that it waits untill every task is finished before it starts it's next chunk. It would be really  nice if it would start a new task once an old task finished with a maximum of 10 tasks. Would that be possible?\n. Thanks for your work!\n. Thanks @Kanti! The code looks good.\n2 small questions:\n- Maybe it's better to set the defaults for the triggered_by option since it mostly is triggered by js / css changes? These are the defaults for Grunt: [js, jsx, coffee, ts, less, sass, scss]\n- Is it possible to specify the location of the package.json file for people with an exotic file structure? Can't find how to do it in the documentation, but it could also be done by specifying a working directory on the process.\n. Thanks!\n. Also thanks for this PR!\nI've got the same comments as on the npm script task:\n- Can you set default triggered_by extensions for the composer script? I was thinking about php, phtml\n- Can you specify an alternative composer.json location just like in the composer task?\n. Thanks!\n. Thanks for noticing!\n. Why do you want to make this a secondary header? It's at the top of the file, so it looks like a primary header to me.\n. This PR isn't making the documentation better. I've closed it for now.\n. Thanks for noticing the missing dot. I've added to the readme directly since this PR is messing up some code samples.\n. The build failure is not related to the code, but apperently the Windows cmd.exe can't handle more then 8191 characters. We'll need to find a workaround for that one since the CI is failing now. The current size of the command is 9764 characters long.\nMore info:\nhttp://superuser.com/questions/1070272/why-does-windows-have-a-limit-on-environment-variables-at-all\nhttps://support.microsoft.com/nl-nl/kb/830473\nhttp://stackoverflow.com/questions/3205027/maximum-length-of-command-line-string\n. HI @xero88,\nCan you copy your composer.json file and the output from the command composer show in this ticket?\nIf you don't see the package ocramius/proxy-manager in the list, you will need to require it.\nHowever, it should be required by default.\nThanks\n. Thanks for the PR!\n. Hi @phptek,\nIn a very early version of GrumPHP, we used the SplFileObject::fread() method instead of file_get_contents(). This one is available from PHP  >= 5.5.11. The problem with the file_get_contents() method is that it is hard to test code that is using this method. You can either create a (temporary) file or overwrite this method in the namespace of the task.\nThis is why I wanted to use the SplFileObject::fread() method again after dropping the support for 5.5. Since it is fully OO, it is easy to use a php://memory stream and put some content in it. After some playing around with this method, it seemed to cause some other issues. That is why we ended up implementing it this way:\nhttps://github.com/phpro/grumphp/blob/v0.11.0/src/GrumPHP/Util/Filesystem.php#L19\nIt doesn't have to do anything with deprecation since it is a perfectly useable method. It just makes it easier to test the code.\n. Thanks for the PR. I'll take a look at it later this week.\n. @newLoki, \nThis issue has been reported and fixed before in: https://github.com/phpro/grumphp/pull/148 .\nIf this isn't working for you, can you take a look what is going wrong there? If you aren't able to fix the actual issue, you can always describe me how to reproduce the error.\nThe reason why we choose not to write logic like the one you committed, is because it is not OS safe. The ExecutableFinder from Symfony creates OS safe-paths and adds extensions like .bat, .exe, ... \nTherefor we choose to change the path variable instead during the initialization of the command helpers.\n. Implemented in #336.. PHP 7.1 is also available now. It's supported untill 1 Dec 2019:\nhttp://php.net/supported-versions.php . Hi @mgeoffray,\nIt depends on how you run grumphp:\n\nDuring pre-commit, only the staged files will be available.\nDuring the run command, all foles are available.\n\nIf you only want the tests on staged files, you could manually run:\ngrumphp git:pre-commit. Hi @pecavalheiro,\nThanks for your PR. \nThis PR currently only contains a Dockerfile to run grumphp in global mode.\nWe'll also need some presets to run the pre-commit and comit-msg command in the container.\nYou can take a look at the vagrant version here:\n\nhttps://github.com/phpro/grumphp/blob/master/resources/hooks/vagrant/pre-commit\nhttps://github.com/phpro/grumphp/blob/master/resources/hooks/vagrant/commit-msg\nhttps://github.com/phpro/grumphp/blob/master/doc/parameters.md  At the parameter: hooks_preset\n\nBesides that, it should be possible to configure environment variables for the git hooks with sensible defaults:\nparameters:\n    git_hook_variables:\n         DOCKER_CONTAINER: php\n         DOCKER_CONTAINER_VERSION: 7\n         DOCKER_VOLUME_DIRECTORY: /app/something\nThis way, the users are free to use any container in any version they like. \nMaybe we could also implement these variables in a later stage, since we also want to use them for vagrant.\nSince not everybody knows how to use or extend the container, we'll also need a documentation page about the container.\nCurrently we don't have a list of needed extensions and/or packages.\n. That doesn't sound like something I would like to maintain in this repository :)\nThe way I thought about it, was that users could specify the docker container they want to use and the grumphp command runs inside that container. Based on the environment variables they filled in, they could specify what they want to run in any container they would like to run it in.\nBut maybe we could start out with a simple version and work further on that one once it is finished?\n. @pecavalheiro: That sounds good. We do need a starting point, so I have no problem adding a basic Docker file to this package as a starting point.. @Bilge, I Agree: this is not something I would like to maintain. \nI do think that we should provide some basic git hook presets to work with docker.\nWe could also add some Dockerfiles in the documentation or host it in a separate repository.\nI am running grumphp on bitbucket pipelines which are docker based. Non of the projects has the same container which makes it difficult to provide a sensible preset.\n. I am closing this for now since we won't be maintaining a Dockerfile in this repository. If you want to add configurable git hooks for Dokcer, feel free to create a PR.. Thanks for noticing! I'll tag this bug in a minute.. Fixed in https://github.com/phpro/grumphp/releases/tag/v0.10.1. Hi @mattgaviota,\nIs it possible that the task class can't be autoloaded?\nYou'll have to add the namespace to the autoload section of your composer.json file so that PHP knows where to find your class.\nNormally the configuration from the documentation page should be sufficient to get the task up:\nhttps://github.com/phpro/grumphp/blob/master/doc/tasks.md#creating-a-custom-task. No problem! :). That looks great! Thanks for your work!. @Grafikart That is indeed a bug that sneeked in with the 0.10.0 release. I've created a patch which will be included in next release. Thanks for noticing!\nI'll close this issue for now, but feel free to create a PR for adding an ASCII string as value of the ascii paths. One option is to create an in-memory fileobject:\nphp\n$file = new SplFileInfo('php://memory');\n$content = $file->openFile('r+');\n$content->fwrite('put ascii content here');\n$content->rewind();\nAnother thing you could do is just use the string; The hard part will be detecting if the config contains strings or paths. Maybe we could use multiple parameters: one if you want to set the ascii path and another when you want to use an ascii string.\nPersonally I prefer using a file, but I can image that some people want this in the configuration file.. It looks good, thanks!. Hello @sn0opr,\nIt looks like the ocramius/proxy-manager package is not loaded in your project.\nGrumPHP requires the symfony/proxy-manager-brige, which should load the proxy-manager.\nCan you give me some additional details about your project or your composer.json file?\nSince this question has been asked before in e.g. https://github.com/phpro/grumphp/issues/219, it might be something that we want to alter in our package. Normally the proxy manager should be loaded during a composer install.\n. That is strange... Can you tell me if you also installed GrumPHP globally?\n. Hello @sn0opr,\nI just tried with Symfony 2.8 by entering following commands:\ncomposer create-project symfony/framework-standard-edition test \"2.8.*\"\ncd test\ngit init\ncomposer require --dev phpro/grumphp\nAt that point I retrieved following error during the installation:\n```\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\nPHP Fatal error:  Class 'ProxyManager\\Configuration' not found in /Users/verweto/Projects/tmp/test/vendor/symfony/symfony/src/Symfony/Bridge/ProxyManager/LazyProxy/Instantiator/RuntimeInstantiator.php on line 36\nPHP Stack trace:\nPHP   1. {main}() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/bin/grumphp:0\nPHP   2. GrumPHP\\Console\\Application->__construct() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/bin/grumphp:30\nPHP   3. GrumPHP\\Console\\Application->getContainer() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Console/Application.php:57\nPHP   4. GrumPHP\\Configuration\\ContainerFactory::buildFromConfiguration() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Console/Application.php:157\nPHP   5. Symfony\\Bridge\\ProxyManager\\LazyProxy\\Instantiator\\RuntimeInstantiator->__construct() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Configuration/ContainerFactory.php:28\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\nPHP Fatal error:  Class 'ProxyManager\\Configuration' not found in /Users/verweto/Projects/tmp/test/vendor/symfony/symfony/src/Symfony/Bridge/ProxyManager/LazyProxy/Instantiator/RuntimeInstantiator.php on line 36\nPHP Stack trace:\nPHP   1. {main}() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/bin/grumphp:0\nPHP   2. GrumPHP\\Console\\Application->__construct() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/bin/grumphp:30\nPHP   3. GrumPHP\\Console\\Application->getContainer() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Console/Application.php:57\nPHP   4. GrumPHP\\Configuration\\ContainerFactory::buildFromConfiguration() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Console/Application.php:157\nPHP   5. Symfony\\Bridge\\ProxyManager\\LazyProxy\\Instantiator\\RuntimeInstantiator->__construct() /Users/verweto/Projects/tmp/test/vendor/phpro/grumphp/src/GrumPHP/Configuration/ContainerFactory.php:28\n```\nAfter running composer show, I noticed that following package is included:\nsymfony/symfony                      v2.8.14 The Symfony PHP framework\nThis package replaces the proxy-manager bridge, but does not require the ocramius/proxy-manager package:\n```\n$ composer show symfony/symfony\nname     : symfony/symfony\ndescrip. : The Symfony PHP framework\nkeywords : framework\nversions : * v2.8.14\ntype     : library\nlicense  : MIT License (MIT) (OSI approved) https://spdx.org/licenses/MIT.html#licenseText\nsource   : [git] https://github.com/symfony/symfony.git 6ceca5b4154c80839270c38aa65373de76127df7\ndist     : [zip] https://api.github.com/repos/symfony/symfony/zipball/6ceca5b4154c80839270c38aa65373de76127df7 6ceca5b4154c80839270c38aa65373de76127df7\nrequires\ndoctrine/common ~2.4\nphp >=5.3.9\npsr/log ~1.0\nsymfony/polyfill-apcu ~1.1\nsymfony/polyfill-intl-icu ~1.0\nsymfony/polyfill-mbstring ~1.0\nsymfony/polyfill-php54 ~1.0\nsymfony/polyfill-php55 ~1.0\nsymfony/polyfill-php56 ~1.0\nsymfony/polyfill-php70 ~1.0\nsymfony/polyfill-util ~1.0\nsymfony/security-acl ~2.7|~3.0.0\ntwig/twig ~1.28|~2.0\nreplaces\n...\nsymfony/proxy-manager-bridge self.version\n...\n```\nI'll fix this bug to make sure that it works with the full Symfony framework.. @sn0opr,\nThanks for reporting. This issue is fixed in #240 and will be released in 0.10.2.. Hi @Henk8,\nCan you give me some advanced steps to reproduce this error?\nWhich version of PHP, GIT and GrumPHP are you using?\nCan you run grumphp with -vvv option and paste the result here? \nI've tried following steps:\nmkdir tmp && cd tmp\ngit init\ncomposer require --dev phpro/grumphp\npbpaste > grumphp.yml\necho \"vendor\" > .gitignore\ngit add -A && git commit -m\"initial commit\"\necho \"<?php\" > somefile.php\ngit add somefile.php\ngit commit -m\"somefile\" somefile.php\nrm somefile.php\ngit add -A && git commit -m\"Remove file\"\nThis works as expected.. Ok, now I can reproduce the error.\nAfter running:\n\nvi new_file.php\nadded <?php echo \"Test\"; and write the changes\ngit add .\ngit commit -a\n\nThe new_file.php is still not added to git. When I run git status after the commit, I get:\n```\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\nnew file:   new_file.php\n\n```\nAfter removing the file, I get this status:\n```\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\nnew file:   new_file.php\n\nChanges not staged for commit:\n  (use \"git add/rm ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\ndeleted:    new_file.php\n\n```\nAs you can see, there is both a new file and a deleted file. This is probably what goes wrong.\nDuring the commit, you can see following diff:\n```\n[2016-12-12 14:51:44] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2016-12-12 14:51:44] GrumPHP.DEBUG: last command (diff) duration: 6.58ms [] []\n[2016-12-12 14:51:44] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2016-12-12 14:51:44] GrumPHP.DEBUG: last command (diff) output: diff --git a/new_file.php b/new_file.php new file mode 100644 index 0000000000000000000000000000000000000000..4700ee3dfb6368aa0ee725c81511dba876cb0cfb --- /dev/null +++ b/new_file.php @@ -0,0 +1 @@ +<?php echo \"Test\"  [] []\nCommand: '/Users/verweto/.composer/vendor/bin/phpcs' '--standard=PSR2' '--report-full' '--report-json' 'new_file.php'\nResult:\nERROR: The file \"new_file.php\" does not exist.\n```\nWe could do an additional check to see if the file exists before passing it to the tasks. \nThis way we won't get this error again.\nIn the meantime, you can just run the git add -A command before committing.\n. No problem, thanks for reporting! I'll keep this issue open to make sure it gets solved in the next version.. This issue got fixed in PR #247 and will be released with next version.. Hello @brunoauger,\nIn the php parser, these nodes are called exit nodes.\nWe've added a separate visitor no_exit_statements to handle these exit nodes. More info can be found here: https://github.com/phpro/grumphp/blob/master/doc/tasks/phpparser.md#no_exit_statements\nFYI:\nI've added an additional note to the documentation of the forbidden_function_calls visitor: https://github.com/phpro/grumphp/commit/36d53d49e2535b07b8bdd582fbc1d3b827ea2f6e\n. No problem!\nYou might want to take a look at the documentation of the hooks_preset parameter:\nhttps://github.com/phpro/grumphp/blob/master/doc/parameters.md\nThis way you can run the specified actions inside your vagrant box instead of on your windows machine.. Thanks @Anahkiasen for reporting this issue.\nThe script parameter is indeed handled as one argument.\nPossible solutions would be:\n\nCreate an additional is_custom or is_run_task parameter which will add the run before the script parameter in the CLI.\nCreate an additional arguments parameter in which you can specify custom cli arguments.\n... ?\n\nCan you tell me which you like best?\n. That is also a possibility. However, I prefer to keep the configuration explicit. This way, the parameters can't be abused and won't contain any unpredictable logic. Maybe the boolean option is the best choice. As stated in the NPM docs, it is also possible to add custom attributes to a custom command. We could use an arguments parameter for that case.. This issue is fixed in #251. Can you check if this is working for you? . Thanks for the PR. I've added one small remark.. Thanks @bvanderstee !. Great idea!. It looks like you are starting out well. :). Hi @nicolasleborgne,\nThanks for the PR! \nWe will not merge this one in since it is changing files before a commit.\nThis doesn't seem like something you would want to do since you don't have any control about what you are committing. We had a similar discussion in this issue: https://github.com/phpro/grumphp/issues/110\nLuckily, your code doesn't have to go to waste. You can create your own GrumPHP extension or try to add it to an existing extension library like: https://github.com/wearejust/grumphp-extra-tasks\nOne way we could get this task in, is by checking if there are non committed files in the phpdoc directory. When there are changed and non-staged files, it just fails with a message like: 'It looks like your docs are not up-to-date'.\nAs you mentioned: we do not want else or elseif statements in our code. You can find more information about this here: https://github.com/phpro/grumphp/blob/master/doc/tasks/phpparser.md#never_use_else\nFeel free to ask any questions about this decision!\n. Hi @nicolasleborgne,\nIdeal, there would be a dry-run modus for the phpdoc command which results in a list of doc files that will be altered. I am not too familiar with phpdoc, but I dont think that one exists.\nMost of current tasks are simple proxies to the commandline tools. Logic like the one you described in previous post is possible, but I would like to keep the tasks as straight forward as possible.\n. Ok. Thanks for the PR anyways! Good luck on getting it merged in at the extra-tasks.\nI'll close this one for now.. Hello @cacahouete78,\nThanks for reporting! I can't reproduce this on my mac, so I'll need to investigate it on a Windows machine.\nIn the meantime, can you try to add the '-vvv' parameter to the grumphp command in the .git/hooks/pre-commit file and try again?\nThis will give us some more information about what is going wrong.\nThanks!. Isn't this behaviour normal?\nIf you don't stage your changes to git and commit, you'll have an empty staged area.\nThe changes wont be send to the server. You first need to tell git what changes you want to stage.\nFor example:\n- You can change a file and add the changes to git.\n- Next you can make some additional change but don't add it to git.\n- If you commit, only the first changes will be committed. The second changes are still available but or not in the staged area. You'll have to add them before you can commit them.\nWhat do you get if you run git status and git diff before and after the commit in phpstorm?. Great feedback, Thanks! :)\nThis seems related to #144. Normally the git hook is in charge of running the diff so that you can commit with the options -p, -a, -i, filenames, ...\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\nOnly when the diff is empty, GrumPHP will run a git diff. You can see that it is doing that based on:\n[2017-01-03 13:55:19] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) duration: 203.87ms [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) output:  [] []\nThis means that something goes wrong with the DIFF in the git hook.\nCan you change your git hook:\n```\nFetch the GIT diff and format it as command input:\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\necho $DIFF;\nexit 1;\n````\nThis will just output the DIFF and stop your commit.\nI guess that your DIFF is empty. The  $DIFF on my machine looks like this:\ngit -c core.quotepath=false commit --only -m \"up\" src/test.php\ndiff --git a/src/test.php b/src/test.php index 372bf10b74013301cfb4bf0e8007d208bb813363..d95f50da4a02d3d203bda1f3cb94e29d4f0ef481 100644 --- a/src/test.php +++ b/src/test.php @@ -2,3 +2,4 @@ 'something'; +'ok';\n. Great feedback! It looks like the diff from the hook does get parsed correctly.\nI've found an error while reading from the CLI input in GrumPHP.\nCan you validate if #255 Fixes your problem?\nBTW: I also like your ASCII art :). @cacahouete78: This one got merged in. Thanks for reporting!. Thanks for noticing @Bilge!. Hello @Bilge,\nCurrently there is no task for matching file contents against regexes. If you e.g. want to check class docblocks for copyright information, you could use the phpparser task, but you would have to create your own visitor.\nAnother option is to create a task that matches file content against a regular expression.. Yes, you'll need to create your own task for that.. @Mte90,\nThanks for looking into it!\nYou are right: It's working but codeception is executed also on commit, and I have no idea how to avoid that.\nI think it should run on both pre-commit and pre-flush. If you want to disable one of those, you'll have to create custom testsuites in the grumphp.yml file so that the codecept does not run during pre-commit. I don't think there is an easier way to do this at the moment.\nNote that there is also a vagrant git hook preset.\nFeel free to ask additiontal questions. I will do my best to help you on the right track :). Not only one commit: all the files (in possibly multiple commits) that are being pushed.\nA possibile solution is indeed to create a new metadata option like priority, which is available for every task. Depending on that new option, it will only run in one context.\nAbout the testsuites: the documentation can be found here: https://github.com/phpro/grumphp/blob/master/doc/testsuites.md#overriding-git-hook-test-suites\nBy explicitly specifying the tasks that will run in a specific context, it is possible to only make it run during pre_commit or during pre_push.. Hi @Mte90,\nI'll try to make some time somewhere next week to review the code you've written.\nCan you fix the CI tools in the meantime?\n. I've taken a look at the pre-push examples from git. It seems like you can access the committed files from STDIN:\n```sh\n!/bin/sh\nAn example hook script to verify what is about to be pushed.  Called by \"git\npush\" after it has checked the remote status, but before anything has been\npushed.  If this script exits with a non-zero status nothing will be pushed.\n\nThis hook is called with the following parameters:\n\n$1 -- Name of the remote to which the push is being done\n$2 -- URL to which the push is being done\n\nIf pushing without using a named remote those arguments will be equal.\n\nInformation about the commits which are being pushed is supplied as lines to\nthe standard input in the form:\n\n   \n\nThis sample shows how to prevent push of commits where the log message starts\nwith \"WIP\" (work in progress).\nremote=\"$1\"\nurl=\"$2\"\nz40=0000000000000000000000000000000000000000\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n    if [ \"$local_sha\" = $z40 ]\n    then\n        # Handle delete\n        :\n    else\n        if [ \"$remote_sha\" = $z40 ]\n        then\n            # New branch, examine all commits\n            range=\"$local_sha\"\n        else\n            # Update to existing branch, examine new commits\n            range=\"$remote_sha..$local_sha\"\n        fi\n    # Check for WIP commit\n    commit=`git rev-list -n 1 --grep '^WIP' \"$range\"`\n    if [ -n \"$commit\" ]\n    then\n        echo >&2 \"Found WIP commit in $local_ref, not pushing\"\n        exit 1\n    fi\nfi\n\ndone\nexit 0\n```\nSo there are 2 things we can do:\n\nfind out how git sends these to STDIN during a push and use those commands in the locator.\nuse this STDIN to parse the diff and send it to the grumphp STDIN. If we do this one, we don't have to add an additional locator in the codebase, but we won't be able to run the git:pre-push command manually without the diff as STDIN.\n\n. As you can see in the script, it can handle new remotes and deleted branches.\nWe surely need to pass the remote and url to the script so that we can handle other remote names then origin etc.\nIt is possible to show the tip of remote branches, but it is rather slow: git ls-remote [REMOTENAMEORURL]\nI am also not sure what happens if the remote is ahead of the local branch.\n. I know it's not possible to push if the remote is ahead, but I was wondering if the pre-push hook will be executed before that check.\nNot all remotes are named origin + it might be possible that you are pusing to another remote like e.g. upstream. \nAlso: the local branch name can be different from the local branch name.\nSo at this point, these are the questions that should be solved at the end of the PR:\n\nWhat happens if no remote exists? \nWhat happens if the remote is not named origin?\nWhat happens if the remote branch has a different name?\nWhat happens if the remote is not named at all (url mode)\nWhat happens if the remote does not exist?\nWhat happens if the remote is ahead? (Will the hook be executed)\nIs it possible to run the grumphp command manually?\nIs it possible to run the grumphp command with a diff of all the commited files in STDIN?\n...\n\nFeel free to add additional questions to the list.\nI'm sure we'll come to a good solution, but we'll need it to be bullet-proof :)\n. . We've moved from PSR-0 to PSR-4. Can you rebase your changes against current master?\nIs there something else you would like to know to get this issue going?. Hi @Mte90, Sorry for the late response...\nYou can just use git rebase. However, since you changed a lot of tasks, you might get a lot of conflicts.. Hi @Mte90,\nAs mentioned above: there are some edge cases which need to be covered first. Some parts of this PR need a rewrite as well. So in the current state, I am afraid I can't merge this one in.\n . the feedback on this issue will be added to the documentation. In the meantime, I created #265 to keep track on this change. I'll close this issue for now.. Indeed:\n- run: Checks all files committed in git\n- pre-commit + commit-msg: Checks only the changed files\nMost taks work directly with these files, but there are some commands like git_blacklist that are able to check only the commited lines. It's up to the task to determine what exactly is being used.\nIn a future version it will also be possible to hook in on the pre-puss hook. This will check a list of transfered files (hopefully :) ).\nthe feedback on this issue will be added to the documentation. In the meantime, I created #265 to keep track on this change. I'll close this issue for now.. As @jyggen mentioned, you can bypass GrumPHP by using the -n flag in git.\nAnother option is to remove the git hooks. There is also the command git:deinit.\nthe feedback on this issue will be added to the documentation. In the meantime, I created #265 to keep track on this change. I'll close this issue for now.. @Bilge. I've tested this and it seems to work.  Thanks!\nIn the future, I would love to have some tests to check the complete integration with git and grumphp. Currently this is something on my wish-list :). @Bilge,\nYou are correct. I've added some basic information in the issue #268.. @Bilge, Thanks for the PR! It looks good :). Thanks for the PR @Bilge. This makes more sense :). Thanks @tombevers  and @bvanderstee  for your work on the documentation!. Hello @KevinAlberca,\nThanks for reporting!\nI'll have to dive into this problem to find out what is going on. So first I'll need to recreate the error.\nCan you give me some additional information about your system and a log of composer install with the -vvv argument?\nDo you have some global composer plugins installed?\n. That does not look like the correct solution.\nI've tried the commands above in a Debian vagrant box with PHP7 and don't get the error.\nAlso on my computer it seems to work so I guess it has something to do with the vagrant box.\nCan you share the Vagrantfile or is it a private box?\nNote that you say you want to install Symfony 3 but gave the commands for Symfony 2.8. I've tried both.. I ran the commands on the provided vagrant box and it works fine. On my machine, I skipped the synced folders and ran the scripts in the vagrant home folder.\nSince your Vagrantfile syncs to your local machine which syncs to dropbox, this might cause a strange race condition. Can you try to run the scripts in the /tmp folder of your vagrant box and check if that works for you?. OK. That means it has something to do with the shared folders / dropbox sync.\nThis issue is vagrant specific. There isn't anything we can change about that in this project.\nOne possible solution is activating NFS shares in your Vagrantfile or \"pause\" the dropbox plugin?\nYou might be interested in running Grumphp with the vagrant preset on your host system?\nSee https://github.com/phpro/grumphp/blob/master/doc/parameters.md > hooks_preset for more information about the topic.\n. Since this is a Vagrant issue, I'll close this one for now.\n. It does make opinionated assumptions about the autoload location. I haven't found a better way to do this and still support both local and global installation. Feel free to propose something in a PR.. Thanks for the PR! It's always nice to see the repository cleaner!. Thanks for the PR! I agree that it is unmaintainable technical debt. Let's get rid of it :). Thanks for the PR!. Thanks for the PR!. Thanks for the PR!. Thanks for your work this weekend, I really appreciate it!\nI did not know they deprecated it.\nCan you rebase your changes to get this one merged in?. Thanks! I'll keep this one open for a while until the open PRs are finished. This way it won't be blocking other peoples code.. Point taken :). Hi @Bilge,\nNo worries, this will be the next merged PR. I am quite busy this week, so this will be something for next week. I'll also try to provide some basic commands for rebasing the open PRs against the code in this one with some additional tips to make it as non-blocking as possible for the other contributors.. Finally merged ... Thanks again!. Currently, that is intended behaviour. You can find additional information here:\nhttps://github.com/phpro/grumphp/blob/master/src/GrumPHP/Util/Platform.php#L19\nhttps://support.microsoft.com/en-us/kb/830473\nThe problem is that the CLI input string on cmd.exe is limited to 8191 characters. Tasks like phplint and phpcs contain the paths to the files that are being checked. During a run command, the list of files wil exceed this amount which results in some strange errors on windows.\nThat is why I've choosen to display the error message and mark the test as skipped.\nI would accept a PR which contains a better solution.\n. That's a possible solution but it would require code changes in multiple tasks: Most of the tasks run only one process. Maybe the processes part could be abstracted into a new layer so that it doesn't matter if one or multiple tasks are started. The problem is only on Windows, so for other OS a split-up is not really necessary.. I don't think I am going to hit the unix limit anytime soon, but I do agree that it is an issue.\nIf you are committing 2MB of filenames at once, it might be easier to just run the executables on all the files.\nThe same goes for Windows: if the limit is hit, it might be easier to just run the executables without the file list. What do you think?\n. Thanks for the PR!. Fixed in 337.. Thanks for the PR @jhuet,\nThe --json option was added for the custom \\GrumPHP\\Formatter\\PhpCsFixerFormatter and can't be removed. Does it still work when the --diff option is added?\nCan you add a test for this in the formatter?\nAlso: you are missing a test for the new option.\nWe've moved from PSR-0 to PSR-4. Can you rebase your changes against current master?. The new option should also be tested in \\spec\\GrumPHP\\Task\\PhpCsFixerV2Spec::it_should_have_configurable_options(). \nCan you show me an example of what the formatter looks like with and without the diff option?. That's a valid point. But on the other hand: the diff option is disabled by default.\nSo I don't think the length of the message is really an issue.\nFor me it's good to go once you rebase against master.. Thanks for the PR!. Thanks for reporting @j3rrey,\nGrumPHP is using the Symfony service container. This means that you'll have to escape the @ sign with a double @@ sign.\n\nhttp://symfony.com/doc/current/service_container.html#service-parameters\nIf you want to use a string that starts with an @ sign as a parameter value (e.g. a very safe mailer password) in a YAML file, you need to escape it by adding another @ sign (this only applies to the YAML format)\n\nCan you validate if this solution is working for you? \nIs this a common notation for the php-cs-fixer rules? We might add this to the documentation of that parameter.\n. Thanks for the PR!. Thanks for reporting! Some of the paths are translated with realpath() before they are converted to relative paths. This might cause the error, but won't be easy to fix. \nAlso: The committed files are directly transfered to the subcommands. So is this an issue with GrumPHP or an issue in all the tasks?. Indeed... I am not sure why it was added, but it surely was for some reason. \nIf we want to support phar (#61), we will need to fix this anyway.. It could be an option to add the triggered_by option (like e.g. phpmd) to the phpcsfixer2 task.\nI would accept a PR for that.\n. No problem! I'll try to release somewhere next week. . Thanks for the PR!. I was thinking: maybe we should hide the tip by default. But then again, nobody would probably enable it. Maybe we should just remove the tip? It doesn't provide any additional value to the project.. Strange: it should just register the git hook during installation. It might have something to do with #275. I am not using Windows myself, so I'll have to dive into that one.\n. For us, the git hooks are a first line of defense against uwanted code. Since everybody can bypass it, we always set GrumPHP up in combination with CI tools. That way, we know if we can merge a specific branch in or not. It is always possible that somebody wants to push some code at the end of the day which isn't fully formatted or tested; That is OK, as long as it is fixed by the time it has to be merged in.\nThat is why we leave the option at the end of the error message. Even though the error message will discourage some people, it gives that people more flexibility on how to use the tool. As you mentioned before: you also wanted to know how to bypass it.\nSo maybe we'll just leave it as is and close this one for now? . Hi @Bilge,\nI took the liberty of changing some parts of the code. Since this is just a simple configuration flag, I did not want to litter e.g. the TaskRunnerContext. By directly injecting the config object into the helper we create as little overhead as possible.. @Bilge, I've just left the old naming for now. Sure print sounds better, but it was added to make the run a bit more compact. I agree that it could be optimized. Feel free to PR.. @Bilge, I've just tested this and I do not get any property-specific code completion in Phpstorm. It only recognizes the interface. What IDE are you using?. Strange. I've got the plugin installed like forever and I am also using the same PhpStorm version. I do not get the autocompletion for the implementation specific API.\nCan you verify that e.g. in the YamlLinter you get auto completion for setExceptionOnInvalidType()?. That was the sureness I was looking for :)\nI would love to get this autocomletion working on my machine before merging it in.. All of a sudden, it works! Thanks for the PR.\nIt looks like Insights is complaining about this one:\nhttps://insight.sensiolabs.com/projects/9a345021-c8a1-4f48-948a-d15de51d9909/analyses/379\nWe'll probably need FQN instead of the short version and drop the use statement.. Thanks for the PR!. Hi @Bilge,\nIn other tasks we are currently not validating all these different possible options.\nThere is also no easy way to validate if the code is working since the logic is located in a bigger public function.\nThis is the easiest I could get in phpspec for the normal rules:\n```php\n    function it_handles_a_list_of_rules(\n        GrumPHP $grumPHP,\n        ProcessBuilder $processBuilder,\n        Process $process,\n        RunContext $context,\n        PhpCsFixerFormatter $formatter\n    )\n    {\n        $formatter->resetCounter()->shouldBeCalled();\n        $grumPHP->getTaskConfiguration('phpcsfixer2')->willReturn([\n            'config' => '.php_cs',\n            'rules' => ['rule1', 'rule2']\n        ]);\n        $context->getFiles()->willReturn(new FilesCollection([new SplFileInfo('file2.php', '.', 'file2.php')]));\n    $processBuilder->createArgumentsForCommand('php-cs-fixer')->willReturn(new ProcessArgumentsCollection());\n    $processBuilder->buildProcess(Argument::that(function (ProcessArgumentsCollection $args) {\n        return $args->contains('--rules=rule1,rule2');\n    }))->willReturn($process);\n\n    $process->run()->shouldBeCalled();\n    $process->isSuccessful()->willReturn(true);\n\n    $this->run($context)->isPassed()->shouldBe(true);\n}\n\n```\nYou'll also want to add a similar test for the json encoded data.. Great! Thanks for the work!. I would suggest using a custom visitor in combination with the phpparser task for this kind of checks.\nThe blacklist is made for easy matches. If you want to check more advanced patterns, the phpparser is the way to go.\nNevertheless, we should fix the output of the blacklist task.. Fixed in #375. The config parameter was added for projects with strange folder structures. It is not ok to remove this entirely. I thinnk the solution is to keep the path relatively.. We really should take a look at all the paths that are being used. They currently solve a lot of problems: local installation, global installation, vagrant installations, .... It is not a good idea to just remove theses lines of code because it most likely solves another issue. Normally relative paths should work just fine, but then again: they are based on realpaths which might cause other issues.. Nice catch. I've had this package installed from day one. Therefor I always had a working git hook locally.\nWe should add some composer hook that automatically registers the git hook to your system.\nAt the moment, you can create a symbolic link to the vendor/bin folder manually:\nsh\nln -s ../../bin/grumphp vendor/bin/grumphp\n./vendor/bin/grumphp git:init\n. @Bilge: You don't want to set the bin_dir to bin because you won't be able to detect the other executables in the vendor/bin directory. Like e.g. phpspec, phpcs, ...\nIt will fall back to your global installed executables if they exist, but won't be able to detect the application specific executables.\nThe way I see it, grumphp should be configured during the installation of composer withouth any manual actions.. @Bilge: Indeed. I've added a composer script that registers during install / update of the root package. This will ensure that all people developing on this package also have a working git hook. For now a hard copy looks more then sufficient.\nI see that the executable finder PR has been merged. I am closing this issue for now.. Thanks for reporting @lucalbert,\nWe'll have to dig into this one.. Thanks for reporting @cdekok,\nThat is indeed a missing option. I'dd accept a PR for that.. You are right. Thanks!. As I mentioned before: this is not the solution to the problem you are facing.\nI'll try to take a look at all paths in general somewhere next week (probably on friday).. Hi @Bilge,\nI am working om some fixes regarding the installation on exotic paths. Hopefully more information in some hours ;). @Bilge, I am having some serious difficulties in getting this ticket right.\n.\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 grumphp.yml\n\u251c\u2500\u2500 somefile\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 composer.json\n    \u251c\u2500\u2500 composer.lock\n    \u2514\u2500\u2500 vendor\nCurrently this is the hardest 'exotic' structure to take care of. The problem is getting al paths relative and get the command working in both the root as the src folder + getting the hooks right.\nI'll have to investige how I can get all the cases right. But dropping realpath isn't an option for the moment.\nToday I did not manage to finish this issue. I started to hack on something in https://github.com/veewee/grumphp/tree/improve-exotic-installation. The idea is that we won't need the bin_dir and git_dir anymore in the future. That way we can just load them from the git command or the composer file and try to avoid most of the relative paths. It's still an expirimental WIP, which is broken for the moment :). Indeed, that looks related to the PSR4.\nIt can be fixed by replacing the COMMAND_NAME constants with its values in the GrumPHPPlugin, but that is something I would like to avoid.\nThe error only occurs once. After that it keeps on working.\nUntil it is fixed, you might want to remove the old version before installing the new one:\nsh\ncomposer remove phpro/grumphp\ncomposer require phpro/grumphp 0.11.2\n. @jyggen: I've tried fixing the errors by hardcoding the strings, but then the installation fails on other positions. I'll add the remark to the release notes and close this issue for now. It just isn't worth fixing :). The formatting for skipped tasks doesn't seem right:\nhttps://ci.appveyor.com/project/veewee/grumphp/build/job/9dmtvi4m2blh9rdd\nCan every cli environment handle these special characters?.  It was way to early on a friday to do review :). Thanks for the PR! Yes, I've also noticed it. I'll try to take a look at it at the end of the week. The code looks good, one small remark: why not use testsuite as property name? This way it has the same naming as in phpunit.. Thanks for your PR @lucasmichot.\nI won't merge this one in since it is intentionally done this way.\nYou can get some additional information in this post:\nhttps://github.com/phpspec/phpspec/pull/590#issuecomment-67995169\nFeel free to contact me if you got any additional questions on the matter.\n. @jyggen, Thanks for the PR!\nIf I understand it correctly, there is no way of passing which files should be analyzed? Therefor you added a custom filter to the output? \nDo you have any idea in which timeframe the formatter will be added to phpstan?\nIdeally, we should just be able to pass the changed files to the tool. That way we do not need any filtering. If they are planning to add support for both a list of files and a formatter in short term, I think it is better to wait for those changes in the main package. As the current project version states, it is still a work in process.\nIf they are not planning to support is, it might be better to move the formatting code to a custom formatter. That way you can add some edge test-cases.\nCan you give me some additional information on the subject? Thanks!\nAlso: You might want to rebase against master to get appveyor working. There are also some new Insights violations.. Hi @jyggen,\nIf i understand the discussion correctly, the filterResult part can be dropped and the files should be passed as arguments during pre-commit context?. Looks good! Thanks!. You might just want to use the git_conflict task and rebase your local changes against the upstream branch before a commit.\nWhen you are actually merging branches, you do want to know what is going wrong and fix it.\nIf somebody else caused the error,  you can still tell hem/her to go fix it.\nFor me that is more then enough.\n. Even though it is a merge commit, GrumPHP should still return green. If it doesn't, there is something wrong with your codebase.\nIn my opinion, it is not a good idea to commit broken code on a shared branch. You might want to review your git flow so that this is not possible.\nI really don't think this is a good addition to this project: it's adding complexity without any reasonable added value. . I am not in favour of this option since it is making the configuration part very difficult. Currently it is very easy to get the project up and running with some basic configuration. If you want this kind of advanced solutions, you might just want to create a spefic task for your use case?\nFeel free to add some thoughts on how you see the configuration part. Maybe it is not clear to me at the moment.. Feel free to suggest a PR :) in the meantime, this documentation is the best we can do.. Hi @cshalenborgh,\nYou can just point to the phpcs.xml file in the standard option as described in the documentation: https://github.com/phpro/grumphp/blob/master/doc/tasks/phpcs.md. This package only supports the parameters that are available on the commandline tool itself: https://pear.php.net/manual/en/package.php.php-codesniffer.usage.php\nThere is no way to specify multiple standards, so as @jyggen mentions, you should extend the PSR2 standard in your XML file.. Related issue: http://help.appveyor.com/discussions/problems/5616-not-able-to-build-due-to-problem-in-chocolateyinstallps1. Thanks for noticing :). Thanks!. Thanks for noticing!. Thanks for the PR. I'll try to digg into the new tasks this week.. Hi @jyggen, I did not have the time to look at the PR in depth yet.\nThere is one thing on my mind regarding all these tasks:\nMaybe it's a better idea to add these checks as some kind of defaults / presets to the Git\\CommitMessage? Most of the code is similar and it might make the configuration easier.\nSomething like this:\n```yml\ngrumphp.yml\nparameters:\n    tasks:\n        git_commit_message:\n            matchers:\n                - /JIRA-([0-9]*)/\n            options:          \n                capitalized_subject: true\n                allow_empty_message: false\n                allow_single_line_subject: false\n                allow_subject_trailing_period: false\n                max_text_width_body: 72\n                max_text_width_subject: 60\n        # Maybe it's better to get rid of these and force people to add the modifiers to the matcher itself?\n        case_insensitive: true\n        multiline: true\n        additional_modifiers: ''\n\n```\nWhat is your opinion on this statement?. Fixed in #369 . Indeed, that looks better. Thanks!. I also asked myself that question ... In fact, I asked 100 peoples opinion. Here is their reaction:\n. Can you tell me in which context the git:commit-msg was hanging? That never happened to me before... It's not because you don't use the files during the hook, that nobody has created a custom task that does use the files during that hook. I can imagine applying some rules like: if you changed composer dependencies, add x to your commit message.\n. I am not convinced that the files should be removed. We should pinpoint the exception instead, but at the moment I was not able to reproduce the error. Feel free to add some information about how I can reproduce it.. Closing this one for now. Feel free to file another issue explaining the exception so that we can handle it.. What about existing implementations? They will display:\nRule not matched: \"0\" /something/\"\nIn that case it might be better not to display the ruleName?. Thanks!. Closing this issue since it is implemented in php-cs-fixer.. Hi @luemic,\nCurrently this is not possible with the default git hooks. You can define your own preset files for this structure untill it is possible to add configurable options to the hooks.\nMore info:\nhttps://github.com/phpro/grumphp/issues/153\n. It was added in V1 to run the task in parallel and just copied for V2. I did not know it had support for multiple files in V2. Feel free to improve the task at any time.. Fixed in #395. \ud83d\udc4d That would be a nice addition. Feel free to implement.. Implemented in #329.. Thanks for your work!. Since we are using the Symfony container, I think it should be possible with following syntax:\nyml\nimports:\n    - { resource: some/other/grumphp.yml }\nparameters:\n    youcustomconfig: here\nMore info: http://symfony.com/doc/current/service_container/import.html\nCan you verify if this is working for you?\n. How do you see that exactly?\nI think the current implementation of the config file is pretty extendable.\nMaybe it's another solution to use parameters in the convention grumphp.yml file which you can customize in the project specific file?\nFor example:\n```yml\nProject grumphp.yml\nimports:\n    - { resource: convention/grumphp.yml }\nparameters:\n    convention.git_commit_message_matchers: ['/^JIRA-\\d+: [A-Z].+./']\n```\n```yml\nConvention grumphp.yml\nparameters:\n  convention.git_commit_message_matchers: ['/.*/']\n  tasks:\n    git_commit_message:\n      matchers: \"%convention.git_commit_message_matchers%\"\n      case_insensitive: false\n      multiline: false\n```\nThis way you can set defaults in the convetion grumphp.yml file and overwrite them in your project grumphp.yml file.\n(Note: since you are placing the convention grumphp.yml somewhere globally, it is also possible to create a grumphp extension at that location. This way you have full control over the contrainer and you can create custom configuration parsers and custom compiler passes. This way you have full control about the container and configuration.). Added some documenation about convention files.. Currently the formatter contians following implementation:\nhttps://github.com/phpro/grumphp/blob/master/src/Formatter/PhpCsFixerFormatter.php#L30-L33\nThis means there is no success nor error message coming from phpcsfixer. It is possible to add some exit code checks when the error output is empty, but I would rather get a message from the tool.\nCan you add a failing use case here? Maybe the JSON is invalid or cannot be parsed by the formatter?. @tgiordmaina,\nThanks for the PR. \nI do think you misconfugred something, because the global process_timeout just works on the shell task.\nFor example:\nUse following setup:\nsh\nmkdir tmp && cd tmp\ngit init\ncomposer require phpro/grumphp\necho \"sleep $1\" > sleep.sh\nUse following config:\n```yaml\ngrumphp.yml\nparameters:\n    git_dir: .\n    bin_dir: vendor/bin\n    process_timeout: 5\n    tasks:\n        shell:\n            scripts:\n              - [sleep.sh, 10]\n            triggered_by: [sh]\n```\nResult:\n```sh\ngit add -A\n./vendor/bin/grumphp run\nGrumPHP is sniffing your code!\nRunning task 1/1: Shell...\n[Symfony\\Component\\Process\\Exception\\ProcessTimedOutException]\n  The process \"'/bin/sh' 'sleep.sh' '10'\" exceeded the timeout of 5 seconds.\n```\nAs you can see, the process timeout has been set to 5 seconds.\n. I've added information about the exception to the parameters file: https://github.com/phpro/grumphp/blob/master/doc/parameters.md\nIt is not possible to display success messages from a task. This is by design to keep the output clean.. Thanks for the PR!. Thanks!. Thanks for your work!. Hi @hoffmannjonas,\nThanks for reporting this issue.\nCan you tell me which preset you are using?\nAs far as I can see, there is only one exec in the template:\nhttps://github.com/phpro/grumphp/blob/v0.11.3/resources/hooks/local/pre-commit. This is a Symfony Process related issue:\nIt looks like this additional exec is added by the Symfony Process component here in this PR: symfony/symfony#21474\nThis issue mentions the break: symfony/symfony#22476\nAnd a PR is on it's way: symfony/symfony#22476\nSince the fix is not merged yet, you can solve this issue in your own project by copying the adjusted git hook templates from #352 and use the hooks_dir parameter (https://github.com/phpro/grumphp/blob/master/doc/parameters.md) .. It looks like the internal task config is invalid. It should look something like this:\n```yml\nservices:\n    task.git.conflict:\n        class: GrumPHP\\Task\\Git\\Conflict\n        arguments:\n            - '@config'\n            - '@process_builder'\n            - '@formatter.raw_process'\n        tags:\n            - {name: grumphp.task, config: git_conflict}\n````\nCan you validate if this works for you?. Merged in #341.. It seems like there is another logic error in the task (https://github.com/phpro/grumphp/blob/master/src/Task/Git/Conflict.php#L60-L66). I've fixed it locally but was wondering why this task exitst: Git does this out of the box:\n```\nerror: commit is not possible because you have unmerged files.\nhint: Fix them up in the work tree, and then use 'git add/rm '\nhint: as appropriate to mark resolution and make a commit.\nfatal: Exiting because of an unresolved conflict.\nAND\nfatal: cannot do a partial commit during a merge.\n```\nGrumPHP is never triggered. Maybe it's better to drop the task completely. It looks like it never worked.\nMaybe I am doing something wrong. All opinions are welcome :)\n. Since the git_conflict task does not add any value, I've removed it.. Hi @ceesvanegmond,\nThe task never worked since the task configuration was not added to the project and an error in the if statement.\nI haven't used SourceTree myself, but it is using the git cli internally I assume it also cannot commit these files.\nGit 2.X is available since June 2014. It might be time to upgrade your git if you haven't done this aleady :)\nSince it never worked and since GIT does this be default, we removed this task. If you can show me a valid use case with a working task, it might be adding value to the project again. But in the meantime, I decided to remove it.\n. Lets continue the TypeError: Argument 6 passed to dicussion in #414. It's a completely different issue.. Thanks for the PR!. Thanks for the PR!. Thanks for the PR!. Thanks for the PR!. Thanks for the PR!. Hi @cafferata,\nIt is not really a common rule, more like a copy-paste convetion.\nThanks for your work on the documentation!. Thanks for the PR!. Thanks!. Hi @patkar, \nThanks for noticing. I've created a BC break label and will try to review these kind of BC breaks as well. \nLet's hope that this is sufficient to avoid BC breaks as much as possible. Do note that we are in the 0.x phase, so there might be some additional breaks in the future.\n. Thanks for reporting @edbizarro!\nIt looks like this is the same issue as #340. Can you verify if removing the git_conflict task works for you? The issue has been solved, but we are thinking about removing the task since it never gets triggered. Feel free to add your feedback to ticket #340.. Thanks for the PR!\nI would rather deal with the source of the issue instead of removing the exec from the hook template since it is there for a reason.\nCan you give me some additional information about systems that are adding those second \"exec\" statement? (OS, PHP version, composer show, ...) I was not able to reproduce.\nIt looks like this additional exec is added by the Symfony Process component here in this PR: https://github.com/symfony/symfony/pull/21474\nThis issue mentions the break: https://github.com/symfony/symfony/issues/22476\nAnd a PR is on it's way: https://github.com/symfony/symfony/issues/22476\nSo I am not sure this is something that needs to be fixed in this repo.\n. Alright, I'll close this one.\nYou could also copy the adjusted hook templates to your project and use the hooks_dir parameter (https://github.com/phpro/grumphp/blob/master/doc/parameters.md) . This way you don't have to maintain your own patch.. Thanks for the PR!. Thanks for the PR! If this minor version allows us to support Magento 2.1, then why not! :). Thanks for the PR! If this minor version allows us to support Magento 2.1, then why not! :). Thanks @jyggen! The PR looks good, I've added one little question.. Great. Thanks for the additional task!. Thanks for the PR @notFloran !. Hello @benbor,\nSadly, I do not understand your question. Can you try to rephrase your question? Thanks!. Indeed, that is not possible: Since we are using external CLI tools, it mostly is only possible to run on file base.\nFor some tasks this is possible, but they are already implemented this way.. @benbor,\nIt is possible to write your own formatter for almost every task. This way you can fetch the process result message and do whatever you want with it. It isn't documented at the moment, but there are some examples available: https://github.com/phpro/grumphp/tree/master/src/Formatter\n. Hi @poteirard,\nI would suggest your team to run GrumPHP the same way on every machine. Besides that advise, it is possible to override this choice per installation. This can be done by providing a grumphp.yml.dist file and add the grumphp.yml file to the .gitignore file. This way, everybody in the team can personalize the hooks_preset the way they want.\nDoes this answer your question?\n. Hi @poteirard,\nIt sure isn't a bad idea. You can add any preset you want to use to your project. I just want to keep the presets in this project as simple as possible: Vagrant = vagrant, local = local\nIf we start adding these validation rules, people will get confused.. Hi @poteirard,\nYou don't need both tasks. v2 is just the latest version of php-cs-fixer which is not fully compatible with v1. I would suggest you to use v1.\nAs I saw in your config file in another issue: you don't need both the auto fixer and the fixer.\nThis package will never try to autofix before a commit. That functionality is provided by the auto fixer.\nI hope this answers your question?. I also dropped HHVM support in this ticket since I retrieve following Travis error:\nHHVM is no longer supported on Ubuntu Precise. Please consider using Trusty with `dist: trusty`.\nSupport for HHVM is also dropped by other package like Symfony and Doctrine because of compatibility issues with PHP 7. It looks like a good idea to drop support for HHVM in this package as well. More information: https://symfony.com/blog/symfony-4-end-of-hhvm-support. This is not something we can easily solve since the external tools run on the current state of the filesystem.\nYou could set the ignore_unstaged_changes to true, but that parameter should be considered risky.\nAdditional info: https://github.com/phpro/grumphp/blob/master/doc/parameters.md\nAdditional info:\n- https://github.com/phpro/grumphp/issues/100\n- https://github.com/phpro/grumphp/issues/123\n. Documented: https://github.com/phpro/grumphp/blob/master/doc/faq.md#why-is-the-unstaged-file-state-being-used. @Nek-, Thanks for reporting!\nYou can solve this issue by adding:\ncomposer require ocramius/proxy-manager\nStrange issue: it is required by GrumPHP but doesn't get installed by composer. \nWill have to dive into the composer logs to see why it doesn't get installed.\n. @Nek-,\nI've investigated this further en the issue is the hardcoded php version in the symfony-demo composer file:\nhttps://github.com/symfony/symfony-demo/blob/master/composer.json#L62\n\"config\": {\n        \"platform\": {\n            \"php\": \"5.5.9\"\n        }\n},\nThis is forcing grumphp to install version 0.9.6:\n$ composer require --dev phpro/grumphp\n...\nUsing version ^0.9.6 for phpro/grumphp\n...\nWhen I try to install latest:\nsh\n$ composer require --dev phpro/grumphp:v0.11.6\n  Problem 1\n    - Installation request for phpro/grumphp v0.11.6 -> satisfiable by phpro/grumphp[v0.11.6].\n    - phpro/grumphp v0.11.6 requires php >=5.6.0 -> your PHP version (5.6.29) overridden by \"config.platform.php\" version (5.5.9) does not satisfy that requirement.\nYou can probably install it with the --ignore-platform-reqs option or by removing the php version from the platform config.\nAs of version 0.10.0 we've dropped PHP 5.5 support:\nhttps://github.com/phpro/grumphp/releases/tag/v0.10.0\nIn version 0.10.2 we've resolved the issue of the proxy-manager not being installed during symfony/symfony:\nhttps://github.com/phpro/grumphp/releases/tag/v0.10.2\nhttps://github.com/phpro/grumphp/issues/240\nAs you can see, we cannot resolve this issue on our side. Since the demo is loading Symfony 3.3, it might be a good idea to bump that platform PHP version in the symfony-demo package.\nI hope this fixes your issue.. @Nek-: Sure, if it gets fixed in an acceptable way :). Hi @richardhughes,\nI got these deprecation warnings after installing the 3.3.0 versions of these packages.\nNote that the ProcessBuilder will be removed in Symfony 4.0 - se we need to move away from that class.\nMore info:\n\nhttps://symfony.com/doc/current/components/console/events.html#the-consoleevents-exception-event\nhttps://github.com/symfony/symfony/blob/master/UPGRADE-3.4.md#process: The Symfony\\Component\\Process\\ProcessBuilder class has been deprecated, use the Symfony\\Component\\Process\\Process class directly instead. . Hello @amcsi,\n\nThanks for reporting!\nCan you change the git hook .git/hooks/pre-commit so that the -vvv option is added to the grumphp command and show the php-cs-fixer command that is being executed? I think that the changed file is not being validated by php-cs-fixer. Can you also paste your grumphp.yml config file and additional information about your setup?\nDoes the error only occur on Windows?. Hi @amcsi,\nThe content of the pre-commit file doesn't seem right. You've pased the content of the GrumPHP executable instead. Normally if you add the -vvv you get additional debug output which tells you the actual php-cs-fixer command that is being executed. \nIf the content of the git pre-commit hook is the one you've pased, you might want to remove those hooks and run: ./vendor/bin/grumphp git:init.. Can you just run \"vendor/bin/grumphp\" \"git:pre-commit\" \"-vvv\" from the commandline? This should result in some debugging information on which command has run. Don't forget to git add a PHP file with errors :). No problem! Thanks for posting the source of the problem.. Hi @jyggen,\nThanks for you work on this PR. I am currently a bit busy, but try to review this one by the end of the month. Sorry for the late review :). Thanks for your work @jyggen, the PR looks really good! Also a big +1 for the edge case tests!. Hi @Landerstraeten,\nThanks for your PR! \nI've tested the PR and found out that during grumphp run no files were validated in php-cs-fixer2. I think that this is due that no files were added to the input, so the intersection is empty.\nOn the other hand, it does solve the issue of ignored files being validated during grumphp git:pre-commit.\nI think it's best to fix this issue by removing the ability to configure the path modus and hardcode it:\n\nDuring grumphp run: no path mode specified\nDuring grumphp git:pre-commit: intersection path mode \n\nIn the last case, it's also an option to implement this issue:\nhttps://github.com/phpro/grumphp/issues/327\n@keradus : Can you confirm that running intersection path mode with empty path arguments is causing an empty set to validate? . It is indeed a BC break, I've changed the description and the milestone.\nThe code looks good at first sight. I'll do a more in-depth review this friday.. Fixed in #395. Hi @Tjitse-E,\nWe've dropped 2.6 support in version 0.10 because the package isn't supported anymore since mid 2015:\n\nSince Symfony is not supporting this package anymore, I think we also shouldn't support it anymore.\nDuring development we also noticed that Magento has many outdated packages. This makes it hard to write up-to-date tools that can also be used outside a Magento context.\nWe are currently fixing this by using something like this in the root composer.json file of the Magento project:\njson\n\"symfony/console\": \"v2.8.20 as v2.6.13\",\nMight this be a proper solution for you?. No problem!. Thanks for the PR!. Since we are using SplFileObjects internally, you can easily create a new task and check the SplFileObject::getSize() method for every file against a configurable maximum allowed filesize.. We already discussed a lot of Docker stuff in #152. The idea is to make it possible to configure environment variables in the grumphp.yml file which will be available in the git hooks. This way it is possible to configure e.g. the docker container name.\nDid you take a look at that issue yet?. Hi @jflaflamme,\nI doubt that it is OSX exec related. It looks like the  autoload_real.php file is loaded twice.\n\nCan you follow the autoload links in https://github.com/phpro/grumphp/blob/master/bin/grumphp#L6-L11 and make sure that no file is loaded twice?\nCan you give me some additional information about your setup?\nDid you install grumphp both in the project and globally? (You might want to remove the global one in that case.)\nWhat does your failing git hook look like?\nWhat PHP version are you on?\n\nThanks!. There's nothing strange on your setup. I am also working on mac and never had the issue you described. We will need a way to reproduce this in order to fix the issue. The exec command was added a long time ago to be compatible with some Windows systems IIRC, so it's not something we could let out of the hook. \nA small workaround for your local config would be to overwrite the hooks_dir parameter as described in https://github.com/phpro/grumphp/blob/master/doc/parameters.md. Those are options for version 0.12.0 which isn't tagged yet.\nhttps://github.com/phpro/grumphp/milestone/18?closed=1\nhttps://github.com/phpro/grumphp/pull/369. @Landerstraeten,\nThanks for the PR! Looks good but I've added some small comments / questions.. Thanks for the PR @Landerstraeten !. Thanks for the PR. Hello @nWidart,\nI've tries this myself with the latest version and it works like expected.\nCan you give me some steps on how to reproduce the issue?\nYou can manually remove the hooks from the .git/hooks directory (pre-commit and commit-msg). Can you run ./vendor/bin/grumphp git:deinit -vvv manually and show me that output?\nAs you can see, this command is failing in your installation.. During the deinstallation there is as you can see in the logs:\n```\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\n\nRemoving phpro/grumphp (v0.9.6)\n```\n\nSo it first runs the hook and next removes grumphp.\nCan you reinstall Grumphp and try to run that command to see why it is failing? \n. No, that is the command that is being executed during the removal of the package.\nIt seems to work now. Just as in #26 the problem disappeared. Indeed strange. Thanks for the fast feedback! Feel free to log an additional issue if you have more information.. Hi @Landerstraeten , @keradus,\nThis is an attempt to fix the issues in #371 and #327.\nCan you give it a review to make sure this works as expected?\nThanks!\n. Thanks for your feedback @keradus!\nI've changed the logic a bit:\n\nRun context with can_intersect=true will never receive the files since the finder in the php-cs-fixer2 config can be used. (Works better on windows since they have a limited CLI input charakters)\nRun context with can_intersect=false will always retrieve the files since there is no finder in configuration\nPreCommit context with can_intersect=true will always retrieve the files and will run in intersection path mode. When there is no finder in the config file, the exectuable will fail.\nPreCommit context with can_intersect=false will always retrieve the files and will run in override path mode\n\nI assume this will cover all cases at the moment, but will test this thoroughly.\n. > Then, what is the purpose of passing files in grumphp integration together with can_intersect=true ?\n\nyou are trying to use some extra logic on top of integration changing decision of user.\nif user passed files, let use it.\nif user configure mode=intersection, let use it.\nthat's it\n\nI disagree: \nIn run context, all files are being checked. That means that the task contains ALL files known to git. It is a bit overkill to paste them all the the CLI when there is a finder config in PHP CS Fixer. Besides that: Windows can't handle too many input characters.\nSo as long as there is a finder in configuration (can_intersect=true), we shouldn't pass the files in run context in my opninion.\nThe PreCommit context only contains the changed files. In this context, the intersection path-mode is the best option. If this is not possible (can_intersect=false), the override path-mode will be used.\nDoes this makes sense to you or would you still drop that logic? \n. I don't really understand your question. Can you give me some additional context?. @keradus, I see what you are trying to say. Probably I explained incorrect:\ncan_intersect can't be different for run or pre-commit context, it is always the same since it is in configration. Maybe a better name would be config_contains_finder or something like that.\nSo lets asume can_intersect will be renamed to config_contains_finder. In that case you have this if:\nphp\n    if ($context instanceof GitPreCommitContext || !$config['config_contains_finder']) {\n        $arguments->addFiles($files);\n    }\nLet's focus on RunContext:\nphp\n    if (!$config['config_contains_finder']) {\n        $arguments->addFiles($files);\n    }\nAs you can see: the files are being added when there is no finder configuration. If we don't do this, PHP CS Fixer will crash since it isn't validating any files.\nWhen there is a finder in configuration, this one can be used instead of adding all files. This is because it should run on all files configured in the finder anyway.\nOff course: for PreComit context, we'll always pass the files since we only want to check a limited subset.\n. Fixed in #395. @oojacoboo,\nThat seems like a rather complex setup which we probably won't support since we do need the .git directory.\nYou can always skip code execution during installation with the --no-plugins flag:\nsh\ncomposer require phpro/grumphp --no-plugins\nI hope this fixes your issue?\nNote that the git_dir is initially guessed by running the rev-parse command in the grumphp configure command.. Hi @oojacoboo,\nIt is a known fact that 'exotic' structures cause problems. This is something we do need to tackle before version 1.0, but it is a lot of breaking work.\nI haven't found the time to look at it yet, even though the issue is open for a long time. The idea is to make all paths relative from the grumphp.yml file.\nCurrently, most paths are relative to the working directory. That is why adding the grumphp.yml file in the root of the project is the easiest.\nBesides that, you can get the executed commands by adding the very verbose flag: -vvv. During pre-commit, only the changed files will be validated.\n. Sad to hear ... Hopefully we'll see you again soon! . Thanks!. Thanks!. Hello @phptek,\nThere must be something wrong in the configuration. As you can see here, we do check for all patterns:\nhttps://github.com/phpro/grumphp/blob/master/src/Task/Git/CommitMessage.php#L136-L142\nSince v0.12, we also have some extra options to validate the message length etc.\nYou can probably solve your configuration by using one of the new configuration options.\nMore information can be found here:\nhttps://github.com/phpro/grumphp/blob/master/doc/tasks/git_commit_message.md\n. Hi @phptek , Since this question hasn't had an update for more then a half year, I am closing this issue. Feel free to provide any additional feedback!. @wagnerferreirasp,\nThanks for reporting. Currently this is indeed not possible.\nSince the phpstan task is rather new, I created a ticket to improve the phpstan task (#400).\nWe'll continue the discussion from there.\n. Sounds like a good but rather complex idea. Thanks for adding it to the feature list :). @UrGuardian4ngel : in the pre-commit task, we allready support this. We do need a git diff at this moment though. (See ChangedFiles locator for more details). Thanks for helping out with this one!. This is not something we can easily solve since the external tools run on the current state of the filesystem.\nYou could set the ignore_unstaged_changes to true, but that parameter should be considered risky.\nAdditional info: https://github.com/phpro/grumphp/blob/master/doc/parameters.md\nAdditional info:\n\n\n100\n\n\n123\n\n\n365. GrumPHP will never make descisions on what to add to git - we want you to have full control about your code. This means that adding the files to git is the developers responsibility.\nDisplaying a warning when there are still unstaged changes is possible by adding an event listener but it is just a non-blocking message which doesn't really add any value.\n\nAs mentioned above, you could use ignore_unstaged_changes to stash unstaged changes. This means grumphp will run on the actual commited files. Do note that this is a risky option when you want to use partial commits etc.. Thats a possibility. You'll have to give the shell task a high priority as described in https://github.com/phpro/grumphp/blob/master/doc/tasks.md#metadata. Probably the only way to do this is by using the excludes_analyse in the phpstan configuration:\nhttps://github.com/phpstan/phpstan#exclude-files-from-analysis\nAnother option is to add an additional parameter to the grumphp task, but that isn't possible at this moment.\n. @aloupfor,\nThanks for reporting. Currently this is indeed not possible.\nSince the phpstan task is rather new, I created a ticket to improve the phpstan task (#400).\nWe'll continue the discussion from there.\n. Thanks for noticing!. Hi @jyggen,\nDo you agree with the comments above?. Thanks for reporting! I am not using that tool myself, but based on the command (InputOption::VALUE_IS_ARRAY), I assume this is correct.. Glad you found the issue! Feel free to provide some additional information for people that struggle with a similar issue.. Hello @Daniel15,\nThanks for reporting! The page was added because people that didn't have those tools in their path were reporting bugs. I do agree that those tools are rather standard and that it also applies to all other operating systems. But windows and CLI still isn't what it should be .... Feel free to improve the documentation.. Fixed in #407. Thanks for the PR @Landerstraeten . Thanks @afurculita !. Hi @jhhazelaar,\nYou probably have the package Illuminate/Foundation installed both globally and locally?\nThen this is related to #91.\nIn that case, the problem is that the package does not have proper autoloading for functions. (More specific: a function_exists around the function declaration)\n. Hi @jhhazelaar,\nI am not using Laravel nor Valet myself so you'll have to dig into this one a bit deeper yourself.\nCan you check following paths to find out which and how many composer files are being loaded:\nhttps://github.com/phpro/grumphp/blob/master/bin/grumphp#L6-L11\nThere probably is a second composer file which is causing this error as mentioned above.\nAlso note that the package you are using is abandoned so a fix is probably not going to get merged.\nhttps://packagist.org/packages/illuminate/foundation\n. Hi @jhhazelaar, Since this question hasn't had an update for about a half year, I am closing this issue. Feel free to provide any additional feedback!. @jyggen, I've restarted the apveyor build : all good. Can you apply the requested changes from @Landerstraeten  so that we can merge this one in? Thanks!. Thanks!. Hi @1ed,\nThanks for the suggestion.  I'd accept a PR for that.. Can you provide a composer show of your project? Thanks!. What is your PHP version? Is there any additional package enforcing types or something like that?\nThe parameter seems to have a valid type (null|array):\nhttps://github.com/symfony/process/blob/v3.3.10/Process.php#L146\nTested it here: https://3v4l.org/Rsusv\nThe $options parameter and ProcessBuilder will be removed in symfony 4.0. We'll have to refactor the code to make sure it keeps on working.. Can you try to reduce this to a bare minimum by creating a easy script like this inside the laravel 5.5 codebase:\n```php\nrequire DIR . '/vendor/autoload.php';\n// Process test\n$process = new Process('ls -lsa');\n$process->run();\n// Builder test:\n$builder = new ProcessBuilder(array('ls', '-lsa'));\n$builder->getProcess()->run();\n```\nIf any of those fail, you might want to log this issue in https://github.com/symfony/process instead.. I also don't think this is related to grumphp but to laravel 5.5.\nMore info:\nhttps://github.com/laravel/framework/issues/20995#issuecomment-327647935\nAs you can see, @nerones was able to trigger the error from a different composer script as well.\nYou could start debugging from that point on to detect the error. For me, this is out of scope for this project.. Thanks!. Hi @wommel,\nThat is indeed the way it is currently implemented. Feel free to provide a backup mechanism.. I think its a bit overkill to keep backups since the hooks are replaced every time grumphp updates.\nMaybe its best to check if the hook file exists. \n\nIf it exists and if it contains the keyword \"grumphp\": no backup is needed\nIf it exists and does not contain the keyword \"grumphp\": Create a backup of the git hook\n\nIt would be very cool if the existing hook could be automatically added to the grumphp shell tasks. (We probably only want to add pre-commit hooks). @sanmai : did you know that grumphp has a built-in shell task which does exactly what you've pasted here? You only need to configure which shell scripts to run.\nThe way I see it, there is no need for such feature since you allready have a lot of options to choose from:\n\nDon't want grumphp to overwrite your hook? Fine: run composer install with --no-plugins or --no-scripts\nWant grumphp to install git hook? Fine: run composer install\nWant to keep your existing hook AND grumphp: Fine: add your existing git hook to git and configure the Shell task to run that existing hook as well.\nDont want to share your existing hook AND use grumphp: Fine: keep the shell file inside your .git/hooks directory and use the grumphp.yml.dist file and a local grumphp.yml file instead. In your local file you can configure the shell task to run the existing hook.\n\nI think the backup logic is a bit of overkill which just causes maintenance overhead.. Since git hooks arent stored in git, you should always have a backup somewhere. If you don't, you will be screwed at some point. I am open for discussion on the topic, but lets keep it strictly objective.. The idea of this package is to create one easy to configure git hook for everybody contributing to the project. From that point of view it doesn't make sense to have a custom git hook locally. Can you explain to me why you still want to use your own git hook? What is in there that can't be added to grumphp instead?. Thanks for the PR!. Thanks for the PR!. Hi @lasselehtinen,\nThis is not something grumphp related. Check #414 for additional information.. No problem. It seems to fail on PHP 5.6 (with prefer lowest). Can you take a look at it?\nhttps://travis-ci.org/phpro/grumphp/jobs/303537284. Hi @indapublic,\nYou need to specify a version of proxy-manager that works for your PHP version (7.1). You probably want one of the 2.1 range.. Hi @indapublic, \nSad to hear that your local configuration caused an uninstall of GrumPHP.\nIf it's any help: I've seen this issue before.\nYou are probably using a git UI like sourcetree, which doesn't import your local $PATH variable before running the scripts. This causes a lot of issues like a different PHP version than the one installed locally or exectuables that can't be found.\nYou can fix this by adding following line to the top of the git hooks:\nsh\nexport PATH=/usr/local/bin:$PATH\nRelated resources:\n- https://community.atlassian.com/t5/Bitbucket-questions/SourceTree-Hook-failing-because-paths-don-t-seem-to-be-set/qaq-p/274792\nFeel free to try this out and give us additional feedback on this issue. \n. No problem. I'm reopening the issue so that we don't forget to add this to the faq page.. What are your opinions on supporting Symfony 2.8? it is a LTS maintained until 11/2018 but as you can see a lot has changed since that version, forcing us to write BC scenarios.. @UrGuardian4ngel, @keradus \nLets keep Symfony 2.X support for now. This package is also used by a lot of Magento installations, which still requires symfony 2.X dependencies. (https://github.com/magento/magento2/blob/2.2.2/composer.json#L49-L51)\nCan you change travis to validate against symfony 2, 3 and 4 ?\n. Hi @UrGuardian4ngel,\nIt's not about refactoring the travis file, its about making sure everything works in all supported Symfony versions. Currently we test both 2 (--prefer-lowest) and 3. Your changes will only test 2 and 4.\nThis means that the travis config needs to be changed to make sure all supported versions still work.\nYou could take a look at this PR mentioned above in which this has been done:\nhttps://github.com/pdepend/pdepend/pull/340/files\n. Okay, let's leave the travis config AS-IS for now.\nI just saw that Travis is displaying a warning on --prefer-lowest\nPHP Warning:  call_user_func_array() expects parameter 1 to be a valid callback, class 'Symfony\\Component\\EventDispatcher\\EventDispatcher' does not have a method 'addSubscriberService' in /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php on line 1159\nPHP Stack trace:\nPHP   1. {main}() /home/travis/build/phpro/grumphp/bin/grumphp:0\nPHP   2. GrumPHP\\Console\\Application->__construct() /home/travis/build/phpro/grumphp/bin/grumphp:30\nPHP   3. Symfony\\Component\\DependencyInjection\\ContainerBuilder->get() /home/travis/build/phpro/grumphp/src/Console/Application.php:52\nPHP   4. Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:490\nPHP   5. Symfony\\Component\\DependencyInjection\\ContainerBuilder->callMethod() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:975\nPHP   6. call_user_func_array:{/home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:1159}() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:1159\nWarning: call_user_func_array() expects parameter 1 to be a valid callback, class 'Symfony\\Component\\EventDispatcher\\EventDispatcher' does not have a method 'addSubscriberService' in /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php on line 1159\nCall Stack:\n    0.0001     366672   1. {main}() /home/travis/build/phpro/grumphp/bin/grumphp:0\n    0.0039     928760   2. GrumPHP\\Console\\Application->__construct() /home/travis/build/phpro/grumphp/bin/grumphp:30\n    0.2207    5732016   3. Symfony\\Component\\DependencyInjection\\ContainerBuilder->get() /home/travis/build/phpro/grumphp/src/Console/Application.php:52\n    0.2207    5732336   4. Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:490\n    0.2212    5764424   5. Symfony\\Component\\DependencyInjection\\ContainerBuilder->callMethod() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:975\n    0.2213    5765232   6. call_user_func_array:{/home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:1159}() /home/travis/build/phpro/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php:1159. It looks like you also missed the file \\GrumPHP\\Composer\\DevelopmentIntegrator which still contains a Symfony ProcessBuilder.. Feel free to skip a  step in the composer plugin / scripts. Still didn't found a good way to get the container in there.... @janvernieuwe : Indeed - we still need gitlab to merge the Symfony 4 PR (https://github.com/gitonomy/gitlib/pull/122) before we can test it with Symfony 4.. Looks good, Thanks!. Looks great! Thanks for the addition.. Hi @TomasVotruba,\nI know it's frustrating when you put a lot of work into a PR and you don't receive any feedback on it.\nWe do want to upgrade to PHP 7.0 and even 7.1 since 7.0 is on 'Security Support' only.\nThe problem is that this PR is rather big and requires a deeper look at all the changes, which takes some time. Last month was filled with a lot of other stuff\nIf it's okay for you, I would like to re-open this PR. I'll try to take an initial look at it today.\n. Would it be hard to fix CS of the declare statement as described in https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md#3-declare-statements-namespace-and-import-statements\n```php\n<?php\ndeclare(strict_types=1);\nnamespace ...\n```. Fair enough. Let's keep this one open untill I find the time to fix the comments. It will surely happen at some point :). @keradus: Feel free to pick it up. \nHow would you like to split it up exactly?. Indeed, that is what worries me with these kind of PRs.\nFeel free to do it your way. Maybe we could create a \"project\" for this so that we can track what is done and what still needs to be done?. Closing this PR for now. Feel free to suggest gradual upgrades.. Hi @Landerstraeten,\nCan you fetch the latest master branch and rebase your branch against master?. @EugeneZub,\nLander told me there are still some minor issues with this PR when using low dependencies. We would like to get this one in for 0.14. Like most open-source projects, we don't set ourselves deadlines and won't be able to answer to your forecast question at this point.. This is also fixed in #428. . Hi @UrGuardian4ngel, @daaru00,\nAs mentioned above: this is fixed in the symfony 4 branch.\nI am currently running it om some projects to see if it works. Will probably merge it in a couple of days.\nI'll close this one for now.. Thanks!. Hi @keradus,\nIndeed: there are some tasks that have some internal code.\nHere is a short list:\n\nphpparser\nxmllint\njsonlint\nyamllint\n\nThey were all created because there weren't tools available at the time that I wrote those.\nFeel free to extract the logic out of this repository inside a new tool.\nI would love to get the code merged out at some point :)\n. Thanks for the work on gitlib and grumphp ! :). Thanks @keradus \n. Thanks for noticing!. Thanks @vrielsa !. Hello @Kanti,\nI am not sure how you would like to structure the data in the junit file since it doesn't matches what GrumPHP does. E.g.: A failure element requires a className, but we are just running external tools so we mostly don't know that info.\nYou could create reports by adding event listeners to your configuration:\nhttps://github.com/phpro/grumphp/blob/master/doc/events.md\n. Hi @arnaud-large,\nThanks for noticing. This one will be fixed in #443.. Can you confirm that #463 fixes the issue?. Thanks for checking @Snaver ! Fixed in #463. Hi @sunilit42,\nSadly I don't fully understand your question. Can you rephrase?\n. The run command checks all files in git.\nThe git:pre-commit command checks staged files.. Hi @sunilit42,\nCurrently the phpcs task does not support the cli arguments --severity, --error-severity and --warning-severity. I would accept a PR for that.. Fixed in #452. Hi @dzschille,\nThanks for contributing!\nCan you also update the spec tests?\nDuring pre-commit, the files are located through the ChangedFiles Locator. This one should also be updated.. Hi @dzschille,\nSorry for the late feedback.\nMaybe there are some tasks in which you DO want to check something on symlinks.\nIsn't it better to add a ignoreSymlinks() filter on the FilesCollection and call that method in the file_size task to make sure no symlinks are checked for filesize?\n. For example: https://github.com/pre-commit/pre-commit-hooks/blob/master/pre_commit_hooks/check_symlinks.py. Hi @jplou-onestic,\nThanks for your work.\nI am not sure what you are trying to achieve with this: the idea is that grumphp is added as a dev  dependency to a project. There is no way we can make sure that an ascii image is available in the home folder of every user who works on the project.\nI would suggest to move the ascii's to the project you are working on or add it to a grumphp extension instead of pointing it to a home folder. If you are working by yourself, you could just hardcode the absolute path instead.\nAny feedback on the topic is highly appreciated.. I don't see any additional value in this PR, so I will close this one. \nAt this page, you can find the recommended way of sharing configuration + ascii files: https://github.com/phpro/grumphp/blob/master/doc/conventions.md instead.\nThanks for your work anyways!\n. Looks like the tests are failing. Hi @SerkanYildiz, \nCan you fetch the latest master branch and rebase your branch against master?\n. Thanks! (Know that you can also rebase without squashing or changing the commit message - but good enough for me :) ). Thanks for investigating!\nThis is indeed not the way to fix the problem.\nCan you tell me what your git hook looks like? Normally, the hook command should be escaped since it is being returned from the symfony/process component.. Can you tell me which version of symfony/process you are using? (composer show)\nInternally, we use this component to generate the command. See: \\GrumPHP\\Console\\Command\\Git\\InitCommand::generateHookCommand()\nNormally that component should add quotes around the cli arguments - which does not happen.\n. We've added a compatibility layer for symfony/process to make it compatible with Symfony 2, 3 and 4.\nProbably that is where it goes wrong. Currently I am not owning a windows computer anymore, so there is no easy way for me to find out what goes wrong exactly.\nMy best guess is that the issue is located at one of these positions:\n\n\\GrumPHP\\Process\\ProcessFactory::fromArguments()\n\\GrumPHP\\Process\\ProcessUtils::escapeArgument()\n\nCan you validate the $commandline string that is being built in the ProcessFactory method?. Closing this one. Lets continue fixing it in #463\n. Hi @pascal-hofmann,\nThanks for the PR!\nDidn't know people actually used custom git paths. The configuration option was mostly introduced for installations in which the source code is not in the git base folder but one or more directories underneath. That is why the naming is a bit confusing.\nI'll have to play around with this PR to make sure everything works. This will take me some time.\n. Looks good to me. The documentation is clear to me. I would also avoid the version detection.. Hi @pascal-hofmann,\nThanks for the PR.\nCan you give me steps to reproduce this issue?\nThe git hook is passing the commit message file directly to grumphp, so this shouldn't be an issue.\nSee:\nhttps://github.com/phpro/grumphp/blob/master/resources/hooks/local/commit-msg#L10\n. Closing this one. Lets continue fixing it in #463. @jyrkidn, The suggested solution seems OK. However, I would prefer to create a new method \\GrumPHP\\Collection\\ProcessArgumentsCollection::addOptionalIntegerArgument() which performs the null check and adds the argument if it is not null.\nFeel free to create a PR.. Erasing your PHP history eey? :p. Great job!. Looks good. Thanks for contributing!. Thanks for the PR @vyshkant!. Hi @vyshkant,\nThanks for the PR! Can you rebase against master?\nAs @jyggen mentions: It seems best to keep the naming of the tool (regexps_exclude). Can you change the parameter?\nOnce the issue in phpcpd is fixed, we can still rename the property here.. Hi @DevMDamien,\nThanks for the PR! I haven't used that tool myself so I am not sure it works exactly the same as the regular phpunit. Maybe it makes more sense to create a separate task for the simple-phpunit tool?\nYou can also add the phpunit bridge package to the suggest section of composer.json.. @DevMDamien : I think it is a safer option to move it to a separate task. I can't tell if the cli tool accepts and will always accept the same arguments as phpunit. Feel free to create a separate task.. Hi @thomscode,\nThanks for reporting. We are using the default Syfmony container  as a configuration tool for this project. This is just how the Symfony container merges config. There isn't really anything we can do about this.\nYou might want to create a grumphp extension instead which gives you full control over the container. \nMore info about extensions: https://github.com/phpro/grumphp/blob/master/doc/extensions.md\nThe format as described in the conventions document is assuming that you do not add new tasks in sub projects but in the convention file instead.. Lets start with adopting the new 7.0 options.  ;). @Landerstraeten Any updates on this? Does the grumpy-seventies branch works for you?. Hi @richardhughes,\nThe gurmpy-seventies branch is existing for a while now. You can use that one and create pull requests against that branch if you find any issues. I am planning to do a test session with @Landerstraeten at the end of the month and merge it in once it works good enough.. Thanks!. Can you rebase?. Since we are allready importing symfony/finder, it might be an option just to check with that component:\nhttps://symfony.com/doc/current/components/finder.html#file-contents\nNot sure this one is as fast as grep though.. By default, grumphp adds all the files which are registered in git to the task.\nThis could be fixed by not adding the files in RunContext.\nHowever, this will result in a broken whitelist configuration parameter since this is not an option on the actual cli tool.. Hi @lasselehtinen,\nThanks for the PR!\nThe code looks good. Can you add some spec tests for the newly introduced ProcessArgumentsCollection::addOptionalIntegerArgument() method?. Hi @sivajik34,\nThis issue not grumphp related. Finding the right set of dependencies for your project is up to you.. Still works here with the new instructions on PHP 7.2.2.\nMaybe PHP version or composer cache related?\n. I was running composer 1.3.1 locally. When I update to the latest version, I also get that error.\nIt's probably related to a change in composer. To be investigated.... Actually: it is related to doctrine/collections dev-master:\nThis works:\ncomposer require --dev phpro/grumphp  doctrine/collections:^1.5\nThis doesn't: \ncomposer require --dev phpro/grumphp  doctrine/collections:dev-master\nProbably related to this change:\nhttps://github.com/doctrine/collections/commit/c6af089eabf100d1e21a730eaefef053258b83e1\nhttps://github.com/doctrine/collections/compare/v1.5.0...master. Indeed, I was thinking the same after posting that comment.\nI wrote a little script to check from which version of composer it breaks:\nhttps://gist.github.com/veewee/d2b0e2a1327e41458daf4453f8ae61b1\nVersion 1.4.3 works and 1.5.0 Breaks.\nSo somewhere in this change:\nhttps://github.com/composer/composer/compare/1.4.3...1.5.0\nAs you can see in the changelog, they changed something to the autoloading in plugins:\n+  * Changed the package install order to ensure that plugins are always installed as soon as possible\nI don't know the internals of composer that well, but we should definitely log an issue in their project.. Hi @regniblod,\nThanks for logging the issue. \nIt looks like a great addition to this project. Feel free to open a PR.\n. You are probably looking for the conventions documentation?\nhttps://github.com/phpro/grumphp/blob/master/doc/conventions.md\nThere are some limitations to this approach, like e.g. adding tasks. This could be handled with an extension instead:\nhttps://github.com/phpro/grumphp/blob/master/doc/extensions.md\nTip: use variables everywhere. This way you can easily overwrite the configuration per project.. Hi @keradus,\nSorry for the late response.\nI can point you to following locations:\nhttps://github.com/phpro/grumphp/blob/master/doc/tasks.md#creating-a-custom-task\nThis information is on how the tasks are configured / registered in the service container. \nYou can see that the task service contains a config key. This one is linked through a compiler pass.\nhttps://github.com/phpro/grumphp/blob/master/src/Configuration/Compiler/TaskCompilerPass.php\nThis is the compiler pass that is responsible for registering the task in the Taskrunner, normalizing the configuration and storing it into new variables inside the service container. Those variables can be accessed by the GrumPHP configuration object at: https://github.com/phpro/grumphp/blob/master/src/Configuration/GrumPHP.php\nhttps://github.com/phpro/grumphp/blob/master/src/Task/TaskInterface.php#L14\nFinally, there is the getName() method inside the task which is being used in the TaskRunner to filter, report, fetch additional configutation, ...\nCurrently, I do not have a direction proposition on the issue. Since the name is used in 3 locations, I think a first phase would be to make it easier to configure and register tasks internally. \nAnother thing I am thinking of, is to make it possible to create an aliases system in the configuration. However: since the Task::getName() is being used inside the reporting, this might require a BC break inside the TaskInterface - which I would like to avoid at the moment.\nI hope this gives you a better understanding on the issue. Feel free to ask additional information or to propose a plan of action.\n. Hi @cmodijk,\nInteresting composer plugin!\nAbout the autoloading: it is written this way to make it possible to install grumphp globally, but still use the project specific autoloading. It's not ideal, but works in most cases. Except the one you are trying to implement off course :)\nI've stated before that in my opinion, there is no need to have a phar or a globally installed version of grumphp. However, people are actually using it this way. If we make changes to this part of the code, we need to make sure that it won't break. The code in this PR will break that functionality.. Hi @cmodijk,\nSorry for the late reply. That is indeed one of the biggest recurring problems we are facing with global installation. Can you take a look at #519 and provide some feedback on this? Thanks!\n. Sounds reasonable. Thanks for the feedback!. Hi @vyshkant, \nIt is simple to add, I'd accept a PR that adds this. Be sure to add tests and updated docs.. Hello @fridzema,\nCan you add a composer show to this ticket? Looks like the symfony/console QuestionHelper isn't returning an array in your specific version.. Hi @fridzema,\nThis bug is introduced in Symfony/console 4.1.1. I've created a patch for this in the symfony project: https://github.com/symfony/symfony/pull/27772\nNext up: writing a workaround for GrumPHP. @exussum12, Thanks for the PR!\nThe method getCommitMessageLinesWithoutComments() which is being used for providing the $lines should strip all comments. Since that method is being used in other checks as well, it is better to fix it in that method instead.. Hello @khadgarmage,\nI am not using that task myself. You can run ./vendor/bin/grumphp git:pre-commit -vvv to get some debug information. Can you verify if the phan command that is being executed by GrumPHP is correct?. Not sure about that. Since it is a static code analyzer, it mostly also requires some context of non committed classes. Therefor it might need to run on all the files instead.\nYou can speficy on which directories it should run in the phan config file under the key directory_list.\nSince I don't know the tool myself, I prefer to keep the config as-is untill somebody with more knowledge about the topic helps us decide on how to configure phan.\n. Hi @mgeoffray,\nThat one hasn't been suggested yet. Currently, we do need an actual file on the filesystem.\nA possible workaround is described at: https://github.com/phpro/grumphp/blob/master/doc/conventions.md\n. No problem! :). Hi @StephanMeijer,\nThanks for the PR. Could you also change the reference in the composer suggestions?\nhttps://github.com/phpro/grumphp/blob/master/composer.json#L42\n. Hi @ctrl-f5,\nIt should output the error message. Can you run the same command by adding the options -vvv to the cli. That way you can debug what command is executed for phpcs and why it does not output error messages.. Hi @ctrl-f5,\nInternally, it uses a formatter to parse the json to a text format:\nhttps://github.com/phpro/grumphp/blob/master/src/Formatter/PhpcsFormatter.php\nThe format might have changed in a newer version of phpcs. Can you share me the version of phpcs?. Hi @ctrl-f5,\nIt seems like you are hitting the maximum CLI input length. \nWe could avoid adding all files to the cli command during run context, but then the whitelist logic would be broken.. Hi @ctrl-f5,\nThanks for the PR.\nSince this problem occurs on multiple tasks, I would prefer to merge in a more generic approach. Something like:\n\nConfigure a flag in the grumphp.yml file to enable the suggested tmp file execution, optionally with a max-cli-chars amount. (We can try to detect the default setting from the OS)\nWhen  the input is too long and the flag is configured: run the process through a tmp file\nWhen the input is short enough: run the process directly.\n\nWould that be something you'dd be interested in adding to this project?\n. Hi @gsomoza,\nThe code in this PR writes the complete CLI command to a tmp file and executes it by running sh /tmp/file. It does  not need to know how the tool works internally.\n. Hi @ctrl-f5,\nI've tested this and doesn't seem to work the way we expect it to work.\nMore information can be found in this repo:\nhttps://github.com/veewee/long-cli-command/\nClosing this one for now. Feel free to contact me if you have additional questions.\n. Thanks for the PR! Looks good. Hi @q0rban \nIt is simple to add, I'd accept a PR that adds this. Be sure to add tests and updated docs.. Hi @Sanguigui,\nAs you can see in the -vvv log, no files are shown in the output of the git diff command:\n[2018-08-21 09:15:37] GrumPHP.DEBUG: Repository created (git dir: \"/var/www/auraengine.io/.git\", working dir: \"/var/www/auraengine.io\") [] []\n[2018-08-21 09:15:37] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2018-08-21 09:15:37] GrumPHP.DEBUG: last command (diff) duration: 47.46ms [] []\n[2018-08-21 09:15:37] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2018-08-21 09:15:37] GrumPHP.DEBUG: last command (diff) output:  [] []\nThis means that the files you are trying to validate are not properly staged while running the command.\nThe first line displays that .git is created in the repository. Is it possible that you are running those commands on a virtualized environment in which the .git files are not being synced?\n. Hi @Sanguigui,\nSince this issue is related to your setup, fixing the issue is up to you.\nGrumPHP requires the git repository to list the files and the changes. Those git commands are being used to run the tasks on.\nThere are 2 options:\n\nsync the .git folder to your vagrant box\nuse the vagrant git hooks and commit locally (check the hooks_preset = vagrant parameter)\n\n. Hi @DidYoun,\nWe released that version today: https://github.com/phpro/grumphp/releases/tag/v0.14.2. Hi @poppabear8883,\nIt is simple to add, I'd accept a PR that adds this. Be sure to add tests and updated docs.\n. Thanks!. Thanks for your work @poppabear8883 !. Looks good, thanks!. Hi @bastos71,\nThanks for the PR.\nWe are trying to keep the configuration as platform independent as possible. For example:\nyaml\nparameters:\n    git_hook_variables:\n         VAGRANT_HOST_DIR: .\n         VAGRANT_PROJECT_DIR: /var/www\nThis way, we can reuse the same logic in other presets like e.g. a docker preset.\nMore information: https://github.com/phpro/grumphp/issues/152#issuecomment-224327327\nThose preset variables could then be documented per preset. The preset bash files should contain sensible defaults when a variable does not exist.\nWould you like to upgrade your code to this solution?\n. Hi @bastos71,\nYou need to rebase your branch against the master branch of this project and resolve the conflicts.\nAs long as there are conflicts, CI won't run and we won't be able to automerge the PR.. @bastos71  : looks great!\nThanks for your work.. Thanks for the PR @leigh-ols !. Hi @diego-sorribas,\nAs you can see, this is a mismatch between dependencies and not a GrumPHP issue. Managing the dependencies is up to you.\nYou could try to use the --update-with-all-dependencies flag in your composer require statement, or manually fix the dependencies by reading the output and deciding which versions you need.. Thanks!. Thanks for reporting @Sanguigui!\nAs @jyggen mentioned, this is intended behaviour.. @SerkanYildiz : This is reported / fixed in : https://github.com/phpro/grumphp/pull/548. @Landerstraeten \nFeedback from our magento team:\nMagento 2.2:\n\"symfony/console\": \"~2.3, !=2.7.0\",\n\"symfony/event-dispatcher\": \"~2.1\",\n\"symfony/process\": \"~2.1\",\nMagento 2.3 (which will be released this year):\n\"symfony/console\": \"~4.1.0\",\n\"symfony/event-dispatcher\": \"~4.1.0\",\n\"symfony/process\": \"~4.1.0\",\nThere are 2 options:\n- We wait until the new magento is out / or until support for symfony 2.8 is dropped (november 2019)\n- We upgrade the packages and let older projects use an older version of Grumphp. Hi @Landerstraeten ,\nI agree with option 2. You can go ahead and merge it in once the conflict is resolved.. HI @Landerstraeten,\nThis won't do:\n\ncomposer-plugin-api: This one is required for the composer plugin to work. More information can be found here: https://getcomposer.org/doc/articles/plugins.md#creating-a-plugin\ncomposer/composer is used during runtime. See:\nConfigure command\n\\GrumPHP\\Util\\Composer\n\\GrumPHP\\Console\\Helper\\ComposerHelper\n\nIt is possible to remove the composer/composer dependency if we rewrite the 3 items mentioned above. It can be done by just manually parsing the root composer.json file of the project instead of relying on the composer loader / factory.. Hello @RaphTbm,\nThanks for your work!\nThere are some things I would like to avoid in current PR:\n- usage of traits\n- dynamic names being set in the TaskRunner (it's not the job of the taskRunner to set a name). It should be set before the task is injected in the runnen.\n(That is why we won't be merging this PR.)\nGood ideas:\n\nusage of parent services make it easier to inject dependencies.\n\nThere are some good points in the comments above as well.\nAlthough I would avoid generating a custom configuration file, but there are some things we could do by using a compiler pass instead.\nProbably the biggest problem at this moment is that the task loads it's configuration through the Grumphp configuration object. It would possibly be easier if we injected the actual configuration in the task instead.\nI'll discuss this internally with @Landerstraeten and we'll see what we can do about this issue.. Hi @RaphTbm,\nThanks for the PR.\nA better place for this label would be in the metadata section, which is created for such things.\nMore information could be found here: https://github.com/phpro/grumphp/blob/master/doc/tasks.md#metadata\nThat way, we don't have to alter any configuration / tasks. You could just load the metadata in the ProgressSubscriber.\nCan you also take a look at the failing tests?. Hello @RaphTbm,\nThanks for the PR!\nI am not sure we should allow all these different ways of passing files. Maybe it is better to provide a list of files through STDIN instead of cli arguments? Otherwise we will probably have to deal with the max line input issue as well.\nCan you also take a look at the failing tests?. Thanks for the PR!. Thanks for the PR!. Hello @Jamesking56,\nCan you give me an extended example on what you are trying to achieve?\nI don't fully understand your question.. Hi @paslandau,\nLooks like a great addition. I'dd accept a PR for that.\nNote that the last 2 use cases can be covered by specifying testsuites (see https://github.com/phpro/grumphp/blob/master/doc/testsuites.md)\n. Hi @paslandau,\nThe branch looks OK but it's easier to review in a PR. You can change this PR or create a new one.. Thanks! Continuing in #587.. Fixed in #585. I'dd prefer to add this tool once #596 is merged. Otherwise a next PR might break the styling again.\n(FYI: we are working on a php 7.1 version which can be tested in branch https://github.com/phpro/grumphp/tree/line-nazareth-gent-oostakker. . Will be handled in the PR. Hello @guifelix ,\nCan you also update the documentation?\nhttps://github.com/phpro/grumphp/blob/master/doc/parameters.md\n-> ascii\nThanks!\n. Thanks for the PRs!. Hello @iGerchak,\nThanks for the PR.\nWe won't accept it since we want to avoid injecting $_SERVER variables in every possible place.\nI suggest changing the location to the newly introduced git_hook_variables parameters.\nThat way you can specify whichever path you want to include inside the grumphp.yaml file.\nIt would look something like:\nyaml\nparameters:\n    git_hook_variables:\n        PATH: '~/.composer/vendor/bin:$PATH'\n       ## Default: PATH: '$PATH'\nIn the git hook template, you could set the path like this:\nPATH=${PATH}\nI assume this could work as well and will also solve issues like this one:\nhttps://github.com/phpro/grumphp/blob/master/doc/faq.md#how-can-i-fix-the-sourcetree-path-problem\nAre you up for adding this change?\n. @malc0mn. Thanks for the PR.\nIf you change files in the project root directory, the paths won't be correct either.\nThis little hack in the git hooks is probably not enough. It also won't fix the run command.\nI know some directory structures are hard to handle ATM. We are looking into adding e2e tests to cover as many paths as possible. We won't make any path changes in the meantime to make sure we don't break working structures.\nThe Travis error is probably releated to a new version of symfony/console\n. The run command uses \\GrumPHP\\Locator\\RegisteredFiles which uses the git ls-files.\nWe are using the full diff since the diff inside the hook was added later. We wanted to reuse the logic inside \\GrumPHP\\Locator\\ConfigurationFile for parsing the diff information. That locator uses the diff functionallity from Gitonomy, which uses the full diff. \nWe could switch the git command, but then again: we need e2e tests to make sure we don't break anything.. Ah yes I see, but then there is a mismatch in how pre-commit and run works: pre-commit passes all files in lower folders, but run does only pass those in the cwd.\nAlso when running the ./vendor/bin/grumphp git:pre-commit directly without std-in, the diff will be loaded inside \\GrumPHP\\Locator\\ChangedFiles, which doesn't contain the prefix logic.\nSo maybe it's better to introduce a new grumphp parameter, something like: grumphp_operates_in_this_folder.\nNext we can change the locators to make sure only files which grumphp operates on are being located.\nIn that step we can also make the files relative to that newly introduced path.\nThat way, we can avoid using the prefixes and change how locating works inside the PHP code.\nWhat do you think about that approach?\n. The case with multiple project directories is quite hard since the hook files we provide in this package only expect one grumphp file. There will be a lot of edge cases like: what to do when files in multiple microservices change etc.\nThanks for your feedback on the issue!. Inception!\n. Can you provide a spec for this method?\n. git is already specified at the getCommandLocation() method. I don't think this should be here?\n. This is because the setArguments() overwrites all arguments. The command is set as an attribute internally, so it will be overwritten. You could use the add() method instead.\n. This still needs to return the absolute path for windows compatibility. Maybe change the name to getDefaultConfigPath() to use the same name as the extra key?\n. Shouldn't there also be an equal sign between the option and the value? Like this: --config-flle=path\n. This one can be changed to a shorter version:\n$arguments->addOptionalArgument('%s', $lockfile);\n. Currently the tests fail because when the additional modifiers are empty, str_split is returning an array with a empty string. You will have to add array_filter around the str_split method or an is-empty check around the array_map method.\n. It is not a name but a comment. Did not find a way to pop it with a name yet.\n. I am also thinking about setting the default value to true. \nThe only downside is that changes are not available during the commit (when tests run for a long time e.g.) Maybe I should add some additional output like 'Detected unstaged changes - temporarily stash them'. This way it's clear for the user what happens.\n. There are some issues with this function:\n- no docblocks\n- protected instead of private\n- no explicit argument types.\n- Use sprintf for the RuntimeException.\n- Better error message: which local reposities are available in the composer file?\n. Maybe this method could be moved to the configuration class? \n. What exactly is the difference between blacklist and whitelist. Aren't whitelist items allowed by default?\nIn the code I see that whitelist returns a notice. But the notice will still make the task fail?\nI am not sure what this should do :)\n. Maybe you could describe what options you can configure per visitor?\n. I don't really want the paths available in any context.\nSince it is a console helper I also don't want them in the tasks.\nIs there another way?\n. Maybe the parser initialisation should be done by a factory in the service container? This will make it easier to test.\n. Aren't the visitors also something PHP specific?\n. As mentioned above the paths helper should not be used here\n. Currently there is nog check for which visitor is enabled. All configured visitors will run?\n. I also would like to add some non-keywords related visitors in the futre, so maybe it's better to give another error mesage.\n. We changed the run() method It now ALWAYS has to return a TaskResultInterface:\nhttps://github.com/phpro/grumphp/blob/master/src/GrumPHP/Task/TaskInterface.php\nWe aren't relying on exceptions anymore. There are 3 statuses available: passed, failed, skipped\n. Maybe something like 'Some errors occured while parsing your PHP files:'\n. Woops, overlooked that one :)\nIt's fixed on master: https://github.com/phpro/grumphp/commit/bd8413ec6a9baf219f5625ff9b9c0dd5986b4136\n. Can you use $this->filesystem->exists here?\n. You probably need DIRECTORY_SEPARATOR for Windows compatibility.\n. Maybe CloverCoverage is a better name for the task? The suffix Task is dropped in all the tasks, so no need for that one. Can you also add class docblocks?\n. This one should also be something like clover_coverage.\n. If clover file is required and doesn't have a default value, you can mark this property as required and remove the default value. (Since this value is null and the allowed types are expecting a string.)\n. Try to avoid the file_ methods for testability. You can use the Symfony filesystem component which is registered as @filesystem in the container.\n. Please try to return a Failed TaskResult instead of throwing the exception.\n. Shouldn't the filters be arrays instead of strings? In that case, you could set an empty array as default value instead.\n. For this kind of if structures, there is an addOptionalArgument() method on the ProcessArgumentsCollection class.\n. If the tags section is an array in the configuration, you can reomove these ifs and directly run the addArgumentArrayWithSeparatedValue() method.\n. Shouldn't both the whitelist as the extensions filter be applied?\nThis can be done in 2 methods instead of adding the extensions with the getWhitelistPathPattern method.\n. You can use the Regex util for this, it should also automatically escape strange characters.\n. That's strange.  Did you also try with single quotes?\nIt is also possible that you also need to add the delimiters to the yaml file to make sure the glob filter is not applied or you could just use the glob filter instead with: src/*\n. Isn't it better to set the default value to an empty array and only allow array types? \nAlso in the documentation this should be altered.\n. You can use the $arguments->addOptionalCommaSeparatedArgument() method for this so that you don't have to add the count and implode.\n. The else statement is not necesarry\n. This part looks a bit strange. Why couldn't the formatter just format the message?\n. This part is assuming that the suggestedFiles property is set. Isn't it better to run the getSuggestedFilesFromJson() method here?\n. This dependency is not part of GrumPHP and is not used. Can it be removed?\n. Here you can return a sample commandline which you can check in the shouldBe() of the formatErrorMessage() method  on the next line.\n. See comment at line 75.\n. It looks like you've added too many spaces.\n. Can you also add this task in README.md?\n. In the other tasks, the default config is pasted here. You can clearify that it is loading the whole project in the text below.\n. In the other tasks we are using []\u00a0to specify that an array is used.\n. Maybe it's better to run the task on the context files and filter on extensions (php, phtml, ...).\nThis way you won't need to exclude all the folders you specified in the .gitignore file.\nWhen you only change 1 file, you won't have to validate ALL the files in the project.\nSo I guess it's better to drop the to_check parameter and use the context files instead. You can exclude some patterns by filtering the context files.\n. Can you also add a phpspec test for this class?\n. You are not setting the amount of jobs with this command. The command should be something like -j %s.\n. As mentioned above, lets use $context->getFiles() instead of the to_check argument.\n. You don't have to use the array_map method here., just set\n$files = $context->getFiles()->extensions(array('php'))\nYou could add an additional option triggered_by which defaults to ['php'] so that it can be configurable.\n. You can use:\n$args->addFiles($files);\nThis will add the pathname as an argument so that you wont have to use the array_map() method.\n. Is there a reason why you did remove the $args->addOptionalArgument() method?\nIt could look like this as far as I can tell from the documentation of the lint programm:\n$args->addOptionalArgument('-j %s', $config['jobs'])\n. This method was already implemented in the addOptionalArgumentWithSeparatedValue method:\nhttps://github.com/jhuet/grumphp/blob/8ff4bb0ff833d00ad0ea010cc164961832173df7/src/GrumPHP/Collection/ProcessArgumentsCollection.php#L42\nCan you remove the addOptionalSeparatedArgument method and use the one above instead??\n. Can you add phpspec tests for this method?\n. I haven't worked with atoum myself. Is it possible to add the $files parameter to the process or will it always run all of its tests?\n. In other documentation files we use [] instead of array(). Can you update the documentation so it looks the same like the other tasks?\n. That's what I thought. Great! :)\n. This sample configuration always shows the default config in the other task files. Can you change the values?\n. The mixin does not point to the correct class.\n. Can you also add a spec to check the configured options?\n. Can you add a spec for this?\nMaybe it's better to inject the Filesystem class directly in the task?\n. Missing class docblocks.\n. Missing method docblocks.\n. Maybe these colors should be class constants.\n. Missing method docblocks.\n. It's more readable if you invert the if statement and add an early return at this point.\nYou might want to split the logic in this if into a new private method.\n. There are a lot of while iterations going on in here. Can you add some comments above these iterations about what those iterations are doing? Are there infinite loops possible?\n. Missing docblocks\n. Can you also change this option to the default value false?\n. It's best to filter on the .twig extension or make the extension configurable.\n. Does this linter handle environment specific errors like e.g. undefined functions etc?\n. Can you use array_map() instead of array_reduce()? \n. Shouldn't the --exclude option be optional as well?\n. The default value is []\n. This one will be quoted as one argument:\n'phpmd' '--exclude file1,file2'\nShouldn't this be:\n'phpmd' '--exclude' 'file1,file2'\n. Small question: Why is this sync skipping enabled by default? I prefer to use the defaults of the actual commandline tool.\n. Why did you add PHP_EOL? The last parameter of the method is already adding a newline.\n. The default level is ~ since the value is null. Can you change this line to use the default value?\n. The vendor folder shouldn't be add as a default exclude parameter.\nSince you are adding the changed files to the command, the vendor folder won't be checked.\n(At least if you add the vendor folder to the .gitignore file in your project)\nYou can also change the default configuration in the documentation file.\n. The run-script command actually has a working dir option.\nMaybe it's better to use that one if the working_directory is set and default it to null?\n-d, --working-dir=WORKING-DIR  If specified, use the given directory as working directory.\n. Will this use the correct directory if you add relative directories? Maybe we should make it relative to the getcwd() ?\n. Maybe this setting could also be configurable?\n. why are you using the max() method on booleans? This is just a regular or isn't it?\n. Try to avoid else / elseif's.\nJust invert the if and return early.\nWe're trying to folow the object calisthenics rules.\n. Can you add some spec tests to make sure this class works as expected?\n. Can't the logic for $shouldRunAgain be simplified in count($this->processes) !== 0\n. Can you ass a spec for this method?\n. Can you ass a spec for this method?\n. Maybe you can set this value to 0 to make sure the tests aren't slowed down by the usleep() call?\n. Maybe it's a good idea to test the async process limit part as well?\n. The tasks are sorted alphabetically.\n. The tasks are sorted alphabetically.\n. The tasks are sorted alphabetically.\n. You can take a look at other tasks how to set configurable options. This should be done by returning an OptionsResolver in the getConfigurableOptions() method. The getConfiguration() method used this OptionsResolver to validate the configured options.\n. By setting this to true, it will run twice during a commit: once for the pre-commit and once for the commit-msg.\n. This code isn't testable.\nMaybe it's better to move it to a separate class and test all the different cases in that class?\nWill it work for people who are using nightly builds and pre-releases?\n. Maybe you could add more information about which date the support ended or a link to the supported versions page?\n. Two questions:\n- Should we add old versions for a complete overview?\n- Should we use the active support or security support as an end-date? Security support is still support ... :)\n. Can you rephrase this description? I didn't get it at first.\n. This code is almost the same as the regular path() method. Can you let the path() method use the paths() method instead of duplicating the code?\nThere should also be a spec test for this new feature.\nNote that we are moving away from the old array() syntax and are using the new short array syntax instead. Can you replace that one?\n. Indeed, the configurable options spec from the task should also contain the new option. The last commit is good.\nI was talking about the GrumPHP/Collection/FilesCollectionSpec that should contain a new test for the new paths method. Can you add this one?\n. Can you add the project option to the spec?\n. You want to use the PhpVersion here instead of the PhpVersionSpen\n. There is no isInstalled() method on the version class. Also: there is a type mismatch between the let() method and this method, so this means this function isn't working as expected.\n. Can you also add a failing test and a test for the project setting?\n. maybe the util property isn't a good name?\n. There is no need for array_key_exists here. The OptionsResolver will make sure it exists since you default it to null.\n. You could return it early here which will make the code a bit shorter and easier to follow.\nMaybe you can also use $now <= $eol so that you can set the end date to the correct date with hours 00:00:00?\n. Is there a reason why u added a phpunit test instead of a phpspec test?\nThis logic is perfectly testable with phpspec. I only want to use phpunit for more advanced integrations between multiple components. Otherwise it isn't clear when to use phpspec or phpunit.\n. Please use the PhpVersion:class syntax here.\n. Please use the OptionsResolver:class syntax here.\n. Please use the TaskResultInterface:class syntax here.\n. Please import the DateInterval class here.\n. Shouldn't we force the latest 7 version in the container?. Can you also add the PreCommitContext? This way it is checked both during commit and in run modus.. Maybe you could use an alias so that you don't need the FQCN here?. In other tasks we use the underscore instead so that we do not need quotes.. You are not using the configured values at the moment.. This ff option is duplicated.. Can you add more information about the options in this document? \nIn the other tasks, we describe every possible option.\nWe would like to keep the documentation in the same format as the other tasks.. Currently you'll have to use addOptionalArgument for every option.\nHowever, you could create an additional method for this on the arguments collection.. This line contains \"custom gulp file\" which is a copy/paste from the gulp task?. The default configured task is 'build'.. The default configured task is 'build'.. Maybe the task option should be required? Otherwise if the task is empty, the path will be added at the position of the task name which will result in an error.. The brunch_file section is removed from the task. \nIs there a reason why it is removed or can it be re-added?\nIf no, then this section in the documentation should be removed.. This will result in the escaped CLI argument '--env production', shouldn't this be 2 separate arguments like this: '--env' 'production'?\nIf so, you could use the $arguments->addOptionalArgumentWithSeparatedValue() method.. Then I guess you should use addOptionalArgumentWithSeparatedValue() instead.. This will result in 'npm run' on the CLI instead of 'npm' 'run'. Can you use $arguments->addOptionalArgument() instead?. @bvanderstee \nThe addOptionalArgument() method is created to decrease the amount of if statements in the tasks. A better use-case in which you don't need the if-statement looks like this:\n`\n$arguments->addOptionalArgument('run',  $config['is_run_task']);\n```. This will mostly result in an empty set of files since on push the staged changes are mostly empty of should not be checked since those aren't the files that you're committing. We'll need to find a way to check which files are transfered to the remote.. Also here we'll need the files that are being pushed to the remote instead of the staged files.. Here it's best to create a separate context.. What if the remote branch does not exist yet?. Maybe it's better to compare against a remote commit hash instead of a name?. The exit checks can be removed. The shell script will return the exit code of the last command executed.. Can you also add a hook for the vagrant preset?. You could make a new 'locator.pushed_files' locator?. You won't need this option here. It was added since pre-commit runs before commit-msg. \nThis means that you could see 2 ascii images during 1 commit.. Here you want to load the pushed files.. You could change the name togetPushedFiles(). Ad mentioned above, you should create a new pushed files locator. Try to avoid shell_exec. This is untestable code.\nYou can use the gitonomy library to run git commands through the ProcessBuilder:\\Gitonomy\\Git\\Repository::run()`. As mentioned above: what if the remote branch does not exist? Maybe it's better to use a commit hash instead of the parsed branch name.. Does this code also skips deleted files?. You can remove this type of class docblocks.. The script can end with the grumphp command. There is no need for the $RC check.. You will want to return the Grumphp exit code. 0 = always push. This will run grumphp multiple times on multiple commits in a push. \nYou want to create ONE diff from ALL the changed commits and run grumphp only once with this diff.\nYou could also pass the parameters that you receive in this hook as parameters to the cli.\nThis way it is possible to add them to the context and use them in the tests. For example: You can create a task that does not allow you to push upstream.. Mostly you aren't pushing to master. Most of my repositories dont even have a remote named origin :)\nAs you mentioned: this is something we can ask to the user. But maybe it's better to detect the defaults in the command?. This line is inside a while which is executed for every line in the STDIN.\nMore info:\n\nThe pre-push hook runs during git push, after the remote refs have been updated but before any objects have been transferred. It receives the name and location of the remote as parameters, and a list of to-be-updated refs through stdin. You can use it to validate a set of ref updates before a push occurs (a non-zero exit code will abort the push).\n\nwhile read local_ref local_sha remote_ref remote_sha\nEvery input line is a commit which is pushed to the remote. So when there are many commits in one push, the grumphp executable is executed multiple times.. I've found following page with some handy commands:\nhttp://stackoverflow.com/questions/171550/find-out-which-remote-branch-a-local-branch-is-tracking\nIf your branch is tracking a remote, you can use following commands:\nLOCAL_BRANCH=`git name-rev --name-only HEAD`\nTRACKING_BRANCH=`git config branch.$LOCAL_BRANCH.merge`\nTRACKING_REMOTE=`git config branch.$LOCAL_BRANCH.remote`\nREMOTE_URL=`git config remote.$TRACKING_REMOTE.url`\nIf your branch is not tracking a remote, it is not possible to detect remote info.\nIn the git hook, you get these as parameters from git.\nSo a possible solution would be: if the branch is not tracking and you don't get the info from the git hook, the user gets an exception telling them to manually add the parameters to the grumphp command.. Doh! Yes indeed. I've looked over that one :). If there is one registered remote, we might just use that one? On multiple, we won't know the remote. This PR is getting a bit complex :). If there is one registered remote, we might just use that one? On multiple, we won't know the remote. This PR is getting a bit complex :). There should be 2 new lines before the option.. There should be a newline at the end of the file.. Can you also add this option to the spec test?. Is this additional dependency really necessary?. Does this mean that it won't work for 2.0?. rules is always an array as enforced by the options resolver.\nCan you show me some example on how to configure the rules parameter?. I think the easiest thing to do is something like this:\nphp\n        if (count($rules)) {\n            $arguments->add(sprintf(\n                '--rules=%s', \n                array_values($rules) === $rules ? implode(',', $rules) : json_encode($rules)\n            ));\n        }\nThe current implementation of the json part will always add an empty array. Even though there are no rules configured. Since this is a pretty custom argument, it is OK not to use the ProcessArgumentsCollection.\n. It's all about the mental map of the code. In one look, you can tell that if you got rules, you want to add them as an argument. Independently of the value, you know that you want to add an additional parameter. There is one single path, one single responsibility of the if statement.\nAgree: for the actual value, you'll need the ternary statement. But that is just one line of logic.\nHowever, If you use the else statement. You'll have to check 2 paths for wath the code is doing + you must find out what the 2 argument functions are doing exactly. In your case, you'll also have to add an additional if or ternary statement to check if the array is empty sinct the json function will always create the string '[]';. Just to get some closure on the subject: this is how I see it: Adding the implode() method is not duplicating code.\nThe actual problem you want to solve is: When there are rules configured, I want to add them to the phpcsfixer cli tool.\nA sub problem arises: I want to format the value in a different way based on the type: map or vector.\nYou want to solve the actual problem by solving the sub-problem in which you can use 2 different methods that are already existing.\nSince there is no method available on the arguments collection that formats the string as a comma separated value for maps and json ecoded for vectors, you'll have to call 2 different methods on the arguments collection. This means that there are 2 possible paths in the task.\nIf you look at the problem from the \"actual problem\" point of view, you only want one path: When there are rules, I want to add an argument to the collection.\nSince there is no method that can format based on map or vector, you'll have to write a new argument formatting implementation. This implementation is so custom, that there is no need for an extra method in the arguments collection. So you are not duplicating code, but you are writing a new implementation for the formatting problem. Sure, internally it uses a duplication of implode(), but that is only one part of the new formatting implementation.\n. You can drop the default value, it will always be an array here.. Can you add a real configuration example for both underneath?. Why is this one added? I think it's more clear to just keep the color like the other tasks do.. What does KaWaii even mean?! Maybe you could give the heredoc a more generic name?\nNormally this kind of formatting is added to a formatter. That way you can change it to whatever formatting you like. However, the current formatters implementation is based on the processes. Maybe a ContextFormatterInterface should also be added for cases like this.. The overuse of random colors also becomes hard to read. That is why the messages have specific colors. Green = ok, Red = not ok, Yellow = warning.\nI think it's best to keep it consequent for now. If you do want the colors, you could still it to a custom formatter for your project to make it 100% Kawaii.. Other tasks have a \\GrumPHP\\Formatter\\ProcessFormatterInterface as dependency in their constructor. Since this task does not run as a proccess, we might need to add a new interface or just a formatter without an interface that can be added to the constructor of the task. This formatter can then be used to style the exceptions. It is interchangeable in the configuration so that you can add your own formatter if you like. Feel free to ask any additiontal questions if the information above is not sufficient.. This list should be ordered alfabetical.. This list should be ordered alfabetical.. It's better to inject the repository directly in the task constructor instead of using the configuration as additional service container. Can you remove this method?. Currently I don't think this abstract class is the way to go. There are some people working on the git_commit_message task in e.g. #319. This will surely break the implementation and doesn't add much value since it only contains the configurable options. I think it's better to drop this class and create a separate implementation. . I don't know if the case_insensitive and addition_modifiers are the way to go. Maybe it's better to enforce strict modifiers in the pattern. This was also mentioned in #319.. You can mark this one as private. You can mark this one as private. I am not sure this will work in all cases. A commit can be in multiple branches. How does this code handle these?\nMaybe it's better to execute the git symbolic-ref --short HEAD command through the Repository::run() command?. Can you revert this class to the old version?. Shouldn't this also run in pre-commit context? Now it will not be triggered during a git commit.. The additional modifiers will always be a string since it is enforce by the OptionsResolver.. Great, can you add a test for this as well?. When the current revision is a non symbolic reference, the command will throw an exception like: \n\nError code: 128\nMessage: fatal: ref HEAD is not a symbolic ref\n\nThis can happen in detached head or if you checked out a specific commit.\nThis will throw a Gitonomy\\Git\\Exception\\ProcessException.\nHow would you like to handle this issue on the task? Should it be configurable to allow non symbolic references or not? We might want to fetch the error message and display a user-friendly error message instead?\nMore info: https://git-scm.com/docs/git-symbolic-ref. Maybe it's best to make this configurable through an extra configuration flag?\nSome people might want to allow it, others may have something against it.\nRules:\n- If you are allowed to commit on non symbolic references: task passes\n- If you are not allowed to commit on non symbolic references: task fails with a decent error message.. You are trying to search the branch name based on the symbolic reference 'HEAD'. Since in detached mode there is no symbolic reference HEAD, you retrieve the error. So I don't think the naming is correct here.\nMaybe something like allow_detached_head is easier to understand?. If the command fails and the detached head is allowed, you'll have to return a success result. Otherwise the matchers will fail.\nIf the detached head is not allowed, you can return the error message. Maybe it should be a bit more clear for less experienced users?. Looks good. I've added some remarks.\nCan you add documentation and tests for this new flag?. This buildProcess() method here makes sure the timeout is being set to the process builder:\n```php\n    public function buildProcess(ProcessArgumentsCollection $arguments)\n    {\n        $builder = SymfonyProcessBuilder::create($arguments->getValues());\n        $builder->setTimeout($this->config->getProcessTimeout());\n        $process = $builder->getProcess();\n    $this->logProcessInVerboseMode($process);\n    $this->guardWindowsCmdMaxInputStringLimitation($process);\n\n    return $process;\n}\n\n``. Shouldn't this be a boolean as well?. How can I specify a depfile?. Can't deptrac also be installed through composer?\nSince it has a composer.json file in it's repository, I guess it should be possible.. Since this package is not running han by default, it is ok to remove this file?. Can you use one of the stable versions instead?. This one can be removed when you remove the config file that isn't used.. The config_file setting is missing. There are 2 spec files in this PR. Can you use the PSR-4 version?. Can you use the long argument names? That makes debugging a bit easier in the future :). This list is alphabetically. Can you change the order?. Can you use the correct default values here?. The documentation states that the long parameters are double dashed. This probably won't work with single dashes.. Maybe it's a better idea to create a new issue in which we can discuss what the pre-push should look like before we implement it. That way we can try to create a good architecture that fits every use-case before implementing 15 different versions?\nThis PR contains a lot of great findings and was good to determine the scope of the pre-push, but has become a bit messy due to the new issues we've detected during the development of this feature.\nWhat do you think about this idea?. The default is set to 5 in the task. Which one is correct?. Ok. Let keep it this way for now.. Won't this also run on ignored folders like vendor by default? Maybe that is something that can be added to exclude_path by default if there is no way to pass files to the command?. How would you suggest to solve it?. We could execute the config file, but this won't be able if php-cs-fixer is ran in PHAR modus. In that case, thePhpCsFixer\\Config` won't be available. \nI do understand why it crashes, but isn't it more logical if it runs in intersect modus without a finder, it runs on the specified files only? However, this would require a change in php-cs-fixer2.. @keradus,\nIf people installed php-cs-fixer globally, then that executable could be used in grumphp. This means that we cannot autoload the php-cs-fixer configuration class / interface at that point and we won't be able to check if the config contains a finder.\nMaybe another path-mode could be added that only uses the files added to the cli command?. Can you add a testcase for this fix?. Hi @keradus,\nThe problem with override is that ignored files are being checked by php-cs-fixer which results in errors.\nWe cannot use the Runner for the same reason as mentioned above: some people are using the global installled php-cs-fixer, so we can't autoload the php-cs-fixer classes.\nThis is the problem we are trying to fix in this ticket, but there doesn't seem to be one fitting solution. As you mentioned, currently the best option is to handle errors with intersection and an empty finder.\nFeel free to suggest any other solution if you think of something we didn't look at yet.. Hi @keradus ,\nIt's not that I refuse to know it classes, it's about some configurations using the globally installed php-cs-fixer. For locally installed fixers it wouldn't be a problem. \nInstead of running the cli tool twice, it is also possible to make the path mode configurable again, but this time with a boolean that looks like intersect_on_commit with a default value of true. That would probably also fix this problem.. @keradus, \nThe only way we could know these classes is by adding php-cs-fixer to the dependencies, even for projects who don't want to use that tool. So this is something I would like to avoid. Or are you talking about some other way?\nTo be sure we are talking about the same thing: I was talking about a configuration inside grumphp named intersect_on_commit which will use the intersect path mode during a commit inside GrumPHP. There is no need for any changes in php-cs-fixer for that.\n. Can you add a tests for the failing task?. It is also possible to just add a number in bytes without a suffix. (see \\Symfony\\Component\\Finder\\Comparator\\NumberComparator)\nSo maybe it should also be possible to allow ints?. Is there a specific reason you've choosen 10M here? . Maybe it's a good idea to add a whitelist or blacklist  like e.g. triggered_by which whitelists extensions. This way you can still allow for example PDFs, ... to be committed. What do you think about this?. A test that checks the failed return when a file is bigger than the configured max_size.. Let's keep it at 10M for now.. We currently don't have a system to do e2e tests with 3rd party tools. I looked over that one during commit and will test these changes thoroughly before merging.. Sure, I'll try to keep that in mind.. Shouldn't this be fixed here instead?\nhttps://github.com/phpro/grumphp/blob/master/src/Console/Helper/TaskRunnerHelper.php#L96. Shouldn't we do some intersection here to make sure the files aren't added twice?. It's also possible that the comment is above the message (e.g. if you rebase)\nThis might result in a subject line being a comment.\nMaybe the comments should always be dropped before doing any of these commit message cehcks instead of only during the max length check?. You cannot have an empty commit message right? Or are there some dark ways I don't know about ... ?. I also think this removal should not be done inside the enforceTextWidth() method. It might also break other checks like e.g. subjectHasTrailingPeriod(). It's probably best to move this normalisation to a separate method and run that method here:\nhttps://github.com/Landerstraeten/grumphp/blob/89ca2b71fe6073346ca00fec09109a1727795b7e/src/Task/Git/CommitMessage.php#L101\n. Should we suggest to load infection/infection trough composer locally / globally ?\nIn other task documentation, this is added to the top + in the composer.json file under suggestions.\nSince the documentation of infection is suggesting global installation, we might only add it in the task documentation?. Since it's a bool, doesn't it make more sense to set the default to false and only support bool?. An array might be better here to make the configuration easier to read.\nWe can always implode the array to a comma separated string. This option is not documented: https://infection.github.io/guide/command-line-options.html\nDoes it work?. Can you change notPath() to use this method (similar to path() and paths()) ?. Can we move these lines that are forcing the files to be available to the FilesCollection?\nThis way we can do something like:\n$files->ensureFiles($context->getFiles()->paths($config['force_patterns])). Can you add tests for both ignore_patterns and force_patterns to make sure the tasks behaves as it should with those 2 additional parameters?. Can you add the composer require command to the documentation as well? e.g. https://github.com/phpro/grumphp/blob/master/doc/tasks/phpunit.md. I would prefer to add the visibility to the config file explicitly instead of marking all services as true.. I would prefer to use the \\GrumPHP\\Process\\ProcessBuilder::buildProcess() method for creating a Process object. This way we have one consequent way of executing CLI tools.. Maybe it's better to add a generateCliCommand(): string or createProcess(): Process method to the ProcessArgumentsCollection so that it is reusable?. Isn't it better to always return a string and escape the arguments manually?\nAll Symfony versions can handle escaped strings, so this would make the API easier.. Wouldn't it be better to use the new implementation in Symfony 4 and move that logic to this util class?\nSee : https://github.com/symfony/process/blob/4.0/Process.php#L1515-L1535. It's better to move these 3 different test scenario's to 3 different tests and skip the once that do not apply instead.. It's better to move these 3 different test scenario's to 3 different tests and skip the once that do not apply instead.. Can you also add some test cases for the escapeArgument method to make sure it works?. Can you add some test cases for this method?. Not sure why the ContainerAwareEventDispatcher was used instead of the regular one. Will this break anything?. This won't work since the output / input wont be configured meaning the verbosity level is not available on the output in the service grumphp.io.console (which is still marked as lazy). The grumphp.io is required before the configureIO() method was called.\nYou can validate this by running the code with the verbose flag -v: You won't see the additional information.\n. What about adding a factory class that returns the valid eventdispatcher for the installed symfony version? More info at https://symfony.com/doc/current/service_container/factories.html. 'nightly' should still be on the list to test against future versions.\nYou might also want to change the PHP versions checker configuration of grumphp.util.phpversion in resources/config/util.yml of 7.2 to 30 Nov 2020.. Why is package-versions added manually? We do not use it in this package.\nFYI: We are also planning to drop the proxy-manager since it causes some installation issues.. If we drop php-cs-fixer v1, the task should also be removed. . This return can also be dropped.. This return can also be dropped.. Where did you get the list of supported types? It can accept any type that can be converted to string.. Type of $argument is string.. $value can currently be any type that can be converted to string.. This could be ?TestSuiteInterface. $path has type string. $command is string. $configuration is array. This return can be removed. Avoid FQCN. $question is of type string. $default is of type mixed|null. $path is of type string. This method always returns int. This docblock can be removed. This docblock can be removed. This docblock can be removed. $hook is string. It will always return int. Type should be ?Config. Not sure why array was added, but it should never be just array. Return is always string, never null.. $resource is ?string. $command = string\n$forceUnix = bool. This docblock can be removed. This docblock can be removed. This docblock can be removed. output should always be string. . Output is always string. Format should always return string. This should always be bool. This should always be bool. This docblock can be removed. This should always return LintErrorsCollection, never mixed. This docblock can be removed. Return type could be ?DOMDocument. Return could be ?string. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. $defaultPath is string. $defaultPath is string. This docblock can be removed. This docblock can be removed. This docblock can be removed. Avoid FQCN. This docblock can be removed. This docblock can be removed. This return statement can be removed. This param is also not adding a lot of additional information. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed\n(Note: This is on every task - I wont copy paste that remark again :) ). This docblock can be removed. This docblock can be removed. This docblock can be removed. This docblock can be removed. A formatter should always return string.. This docblock can be removed. Avoid FQCN here. Avoid FQCN here. Return is always string. This always returns bool. You could also create an internal ProcessFactory that takes the ProcessArgumentsCollection as input? That way the logic is moved outside the class and can be changed to the array constructor in a later version? . Default should be null. Default should be null. Default should be null. Default values should be null (meaning : use the phpcs defaults). This won't work since you now configure the input and output from the container and not the ones that are available in the commands. This means the arguments and options won't work in the commands. As you can see, the configureIO() does not return anything and should just configure the arguments that are being passed to the method.\n. Why did you move this one outside the constructor? It seems better to set a dispatcher then to overwrite thet set method.. Why did you add these getters? They are not being used at the moment, so I would not make them available at this point.. To me, it's more readable as it is right now. Can't you use notPaths() instead? Maybe you'll need to add a count() check in that method to make sure it works with an empty array as well.. We try to avoid these if statements inside the tasks. Can you move this nullable argument to a new $arguments->add* method?. Please use the FilesCollection->filter() method internally. These methods should be immutable instead of manipulating the internal array.. Beter to run the ignoreSymlinks() method before checking the size. That was the actual problem right?. Beter to run notPaths() before size.. Can you also add a case for value 0?. Valid argument. The -coption takes the next argument as input string.\nYou'll need to configure it as 2 parameters\nExample: sh -c \"ls -al\". Shouldn't we propose a released version instead?. Isn't it better to set this value to null so that the defaults from the cli tool are being used?. Maybe better not to specify files during run context?. Still a todo left. Lets avoid using the Argument::type(...) in a will statement.\nThis only works because there is a \\Prophecy\\Argument\\Token\\TypeToken::__toString() method.\nIf you want to use a diferent type like integer, you'll get:\nArgument::type('integer')\n notice: Object of class Prophecy\\Argument\\Token\\TypeToken could not be converted to int\nI prefer to just return a string instead. (This one is being used all over the newly introduces spec changes). These specs should be working. Still a todo left. Todos. Question: shouldnt value always be a bool?. There is no mixed type.. Isn't this always a string?. I am not sure why this is changed?. Removing the docblocks from properties is a bridge too far for the moment. Lets just keep them untill property types are introduced in the language.. This won't work. The callback takes 2 params: function (Options $options, $value). Avoid FQCN. Avoid FQCN. Keep the information in the docblocks. Keep information in docblocks. Fix todo. Maybe it is better to set this to null and let psalm decide what it uses by default?. The threads options is not described in the documentation. During run, the file list might get very big. Would it make sense to only add the files during pre-commit context and run on all files during run context?. We do not require this dev dependency. Phpunit bridge. A link to this file should also be added to docs/tasks.yml, the key should also be added to the global readme file.\n. This task is not registered in the service config file located at resources/config/tasks.yml. Could you avoid the usage of this private property for temporary state inside the run context?\n. Invalid indentation. Probably best to use the getCommitMessageLinesWithoutComments() method to fetch the subject. It fixes some issues when the commit message contains comments. Maybe even better to add a private method getSubjectLine(), since that functionality is being duplicated in the task.. Could you rename this method to: containsOneOf()?\nCan you add strict parameter types + return type.\nI prefer to enforce the needles to be an array of strings - which makes more sense given the new name. . Thanks for adding all those tests. Really awesome! :). This syntax is a bit confusing. Could you just use an if instead?. No, I'dd rather keep it as a value object to feed the tasks. Allowing the context to be changed in between the tasks might cause a lot of issues.\nI would avoid the local state since the run method can theoretically be called multiple times which causes an issue and we don't really need this state internally.\nA try/catch over the if statement will solve the issue you are addressing as well.\n. I am sorry, the comment should be one line below on how the subject is subtracted from the message.\nThe first line can e.g. contain a comment. Since that logic for fetching the subject is repeated, that might go in a new private method. Feel free to refactor where it makes sense.. Correct. Resetting the variable is also possible, but I prefer not to have it at all :). Invalid indentation. No need for those vagrant_* params directly on the container anymore. No need for this method anymore right?. Values should be escaped since paths can contain some special characters.\nI guess you could use \\GrumPHP\\Process\\ProcessUtils::escapeArgument() for this.. return Str::containsOneOf($subjectLine, ['.', '!', '?', ',']);. A bit shorter:\n```php\n$conventionsKeys = array_keys($config['type_scope_conventions']);\nreturn in_array('types', $conventionsKeys) || in_array('scopes', $conventionsKeys);\n. I would prefer to use a string function here to avoid confusion.. I would prefer [0-9] here since it is easier to folow then the \\d alternative.. Can you allow both array and string and cast a string to an array? That way, old configuration doesnt break.. Shouldn't you check and return following param?\n`$extra['grumphp']['config-default-path'];`. No it is not always available. probably better to detect composer.json from current directory and from all parents until one is found?. No need for this dependency anymore right?. If we are not using any composer class outside the plugin / event listeners, there is no need for this one.. No need to iterate through the list when the tasks are empty. You can put the empty check above the filter function and return a new collection through `return new TasksCollection($this->toArray());`\nSee `\\GrumPHP\\Collection\\TasksCollection::filterByTestSuite()`. Can you rename this one to `filterByTaskNames`?. You can set the third argument to true here..suggestion\n        $tasks = array_map('trim', explode(',', $input->getOption('tasks', '')));\n```\nThe de-duplicating logic is a bit confusing and is not required since the filter method on the taskcollection is smart enough. I would prefer to drop it for the single line suggested above. (optionally you could add array_filter to drop the empty items, but that is also covered by the filter method). Can you make $tasks a required array?\nI would prefer to always pass in a list of tasks.\n(This is a BC break, but I don't think it will cause too much damage since it is an internal DTO.). This test can be dropped if you change the input option logic as suggested above.. Hi @paslandau,\nIn a normal situation, those tests would work fine.\nHowever, the behaviour of the grumphp commands are different based on which configuration file you supply. This means we would have a lot of e2e tests to cover all possible situations.\nI was looking in to this with @Landerstraeten a while ago, but didn't find a good solution yet.\nFeel free to suggest something in this PR.. yes. It is better to move this method to the \\GrumPHP\\Util\\Str class.\nMaybe something like:\npublic static function explodeWithCleanup(string $delimiter, string $string): array\nThis way the logic can be tested in a normal way and it is reusable if we want to add more comma separated options?. Maybe a bit more readable if shorter:\nphp\nreturn $this->locateConfigFileWithDistSupport($composerDefaultPath ?: $defaultPath);. In the old codebase, there was a catch which returns an empty composer info.\nMaybe it's best to catch the error from ComposerFile line 21 and also return an empty Composer instance?\nThat way, the code keeps on working if there is no composer.json in the cwd (which probably will happen more then once... ;) ). Maybe also safer to force a relative path as in the old codebase? Not sure too what folder the old code is making the path relative. Would be nice, but indeed out of scope here.. Can you set the default to null to make sure it uses the phpstan defaults?. can be string or null. default : null to fall back on defaults inside phpstan. The injected formatter only has a format method.\nSee: \\GrumPHP\\Formatter\\RawProcessFormatter::format. php\n$this->addOptionalArgument('--no-update-lock', !$config['update_lock']);. php\n$this->addOptionalArgument('-q', !$config['verbose']);. I'dd prefer to stick with the options the package provides. That makes it easier for people who are using the tool already.. indent_* parameters could be nullable according to the package.. The default in the normallize command is that the indent_* options are null.\nWe prefer to stick with the cli defaults of the tool and make them customizable in the parameters.\n. Defaults are null.\n(Also below in the details). remove the ! here. Otherwise it will be added when the parameter is set to true.. createFailed takes a string $message, you are passing an array.. ",
    "cwouter": "It works when I change the value of git_dir in the grumphp.yml file.\nbefore: git_dir: \"./..\"\nafter: git_dir: \"./\"\n@aderuwe good solution, but what if you're using git submodules like vagrant?\n. ",
    "klipach": "Yesterday i checked the same solution locally, i had a problem with dependency injection https://github.com/phpro/grumphp/blob/master/resources/config/services.yml#L42 there is no support for expression engine for DI 2.3 https://github.com/symfony/DependencyInjection/blob/2.3/composer.json\n. it is no so easy to downgrade to fit Symfony LTS version. I think you can close this ticket.\n. Please, check, i updated PHP version and fixed codestyle errors.\n. Thank you for comments, i agree that auto_fix is no cool feature, so i removed it.\n. Great! Sorry was off for several days was not able to fix comments.\n. Thank you for explanation, will check it again.\n. I think it is better to continue script execution even if there is no ascii image\n. ",
    "tombevers": "I tried it again and it works as supposed to ... I can't reproduce it anymore.\n. Didn't had time to pick it up again but I was working on excluding the spec and test dir by default.\n. I've started working on this feature. The badges seem correct in the README file. ",
    "mikechernev": "Hey guys,\nI am glad you like the change :)\nI updated the specs, but since I don't have any previous experience with PhpSpec I am not sure I did it in the best possible way.\nPlease let me know if you know a better way to achieve this ;)\nCheers,\nMike\n. Awesome :)\n. ",
    "igormukhingmailcom": "Thank you very much for fast reply.\nI've found problem. \nWhen grumphp can't find config at path from --config (this is another story why that file wasn't there) - it use default config without any warnings. So, it write path to default config, placed at project root directory. \nThat would be great if grumphp will write some warning if file from --config doesn't exists.\nThanks a lot.\n. @veewee Wow, so fast. Thank you. \nCan you please also make release?\n. @veewee Actually code throws exception when keywords list are empty.\nBut I can rewrite if you want. Let me know, please.\n. @aderuwe @veewee \nDone. \nCan you please merge and make release?\n. @aderuwe ping :)\n. @aderuwe Done. Check please :)\n. @aderuwe Can you please also make release? It supposed to be 0.4 i think...\n. Thank you. Have a nice day.\n. Tasks like phunit/behat/phpspec not executed on separate files. \nIts executed as is and any file list not passed to it as argument.\nSo i think that independent types of tasks need to run even if no file changed.\n. @aderuwe I thing that its a great idea.\nI propose to name this command something like grumphp run (similar as php-cs-fixer run or phpspec run) or grumphp check, because this command will be used not only with CI.\n. Also option --skip=task will be helpful I think... \nFor example:\n-  grumphp run --skip=phpunit to skip phpunit tests\n-  grumphp run --skip=phpunit,behat to skip phpunit and behat tests\nWDYT?\n. Why this will be helpful for me and others?\nA lot of companies have its own conventions and need to have code-style checker on pre-commit hook.\nYour tool is best choice for this.\nBut as far as tool automatically installs grumphp.yml at project root path and make git:init with that path - its hard to override this behaviour and each user need to do next things again and again: https://github.com/linkorb/conventions-checker#installaion\n. @veewee Thank you too. Very good tool :)\n. You're right.\nI've totally reworked this.\nNow default config path getting right when --config option defining. So we don't need any code changes in another commands.\n```\n$ vendor/bin/grumphp \nGrumPHP version 0.1.0\nUsage:\n  command [options] [arguments]\nOptions:\n  -h, --help             Display this help message\n  -q, --quiet            Do not output any message\n  -V, --version          Display this application version\n      --ansi             Force ANSI output\n      --no-ansi          Disable ANSI output\n  -n, --no-interaction   Do not ask any interactive question\n  -c, --config[=CONFIG]  . [default: \"config/lib/grumphp.yml\"] # <-------------- Default value given from composer.json's extra\n  -v|vv|vvv, --verbose   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\nAvailable commands:\n  configure     \n  help            Displays help for a command\n  list            Lists commands\n git\n  git:deinit    \n  git:init      \n  git:pre-commit\n``\n. Guys, any chance to merge/tag this today? \nI need this very hard :)\n. Thanks. Will waiting :)\n. Thanks guys. \nThanks to you we have cool [conventions-checker](https://github.com/linkorb/conventions-checker) now.\n. @TheRatG Please, don't commit your vendors. You will have a lot of headache in future.\n. @veewee Looks very cool. I like :)\n. Can you please tag it as 2.0.0 (now or in future when it will be stable) as it has BC break as you said.\n. I can help with this. Have some experience with tasks like that :)\n. This is awesome :) Love this.\n. Yep, I thought also the same.\nBut if I removegitfrom$this->processBuilder->setArguments- it will run justgrep`. Don't know why because i'm new with Process Component. So I've left this as is...\n. Sorry, don't understand what you mean.\n. It seems like this value will be converted automatically to absolute when it will be used with commands: https://github.com/phpro/grumphp/blob/master/src/GrumPHP/Console/Application.php#L121\nRight or I missed something? (I'm not sure)\nIn the other hand, relative path in command output (when you run just grumphp or grumphp list) is more readable.\nFunction name getConfigDefaultPath even better than getDefaultConfigPath (exact as extra key named).\nWDYT?\n. Looks like you're right. I will redo this.\n. ",
    "joostfaassen": ":+1: \n. ",
    "TheRatG": "@veewee thanks I will try\n. https://github.com/box-project/box2 - create .phar\nhttps://github.com/box-project/amend - self-update command\nhttps://github.com/cpliakas/manifest-publisher - also for self-update command\n. Done. I was inattentive.\nThanks for your application, it is very useful.\n. I've just fix it by readme.doc :smile: \n. ",
    "orasik": "Thanks @veewee for your fast response!\n- I am running files on local machine.\n- OS is Mac OS\n- Running from PHPStorm\n  I've tried the same with a colleague who's using Windows and we had the same issue.\n. I have ran that, now from different machine but again mac. I noticed the following:\n1) If I do only git commit -m \"test message\" it will cache the previous result. So even if I deleted exit and die() lines, it will still show the error:\nYou have blacklisted keywords in your commit:\nsrc/MyTestClass.php:17:        die();\nsrc/MyTestClass.php:18:        exit;\nsrc/MyTestClass.php:30:        var_dump(null);\nbut if I do git commit -am \"test message\" this will work fine!\n2) Running the command:\nbash\nphp vendor/bin/grumphp git:pre-commit\nwill show the cached message as I mentioned above, so I guess this command is not considering option -a in this command? \n3) Because I have phpcs configured in this machine to run in /usr/bin/phpcs it will always show the error:\n```\nWarning: include_once(PHP/CodeSniffer/CLI.php): failed to open stream: No such file or directory in /usr/bin/phpcs on line 31\nWarning: include_once(): Failed opening 'PHP/CodeSniffer/CLI.php' for inclusion (include_path='.:') in /usr/bin/phpcs on line 31\nFatal error: Class 'PHP_CodeSniffer_CLI' not found in /usr/bin/phpcs on line 34\n```\nThanks! \nOras\n. ",
    "ad3n": "I think is better use phar as optional. Like others php tool (php-cs-fixer, deployer, and many more) has own phar file for simplifying the task.\nI think many people more familiar with phar instead of global package in composer.\n. https://github.com/vinkla/climb/pull/28\n. The reason why you need phar file instead of global composer\n. https://github.com/vinkla/climb/pull/28\nMay be, that is the reason why you need to create a phar file instead of global composer package\n. ",
    "ecentinela": "I know, but when you have a big test suite, is annoying not to see any progress. It seems the process is hanged. What do you think if I create an option \"show_progress\" in grumphp.yml to enable it / disable it at least?\n. It's ok for me.\nDo you know how can I remove the commit from my PR?\nI will create a new PR with the progress bar feature. Maybe you can give more information about where to start developing it?\nThank you.\n. Commit reverted. Feel free to merge this PR.\n. ",
    "natenolting": "Looks like that did the trick just by doing a composer update, thanks!\n. ",
    "matthisstenius": "Can confirm that i get this exact error on version 0.5.2. Sometimes a composer update does the trick but other times i have to do a complete uninstall and then install it again.\n. ",
    "nilportugues": "Got you covered for PHP Docblocks and Comments in files https://github.com/nilportugues/php_todo_finder ... just change the listed expressions for whatever.\nFor other than PHP... well, you will have to tokenize the files in order to effectively detect docblocks, comments and unwanted expressions etc etc.\nFor CSS: https://github.com/symfony/css-selector could be helpful.\nFor JS: https://github.com/kbjr/UglifyJS.php/blob/master/javascript-tokenizer.php \n. ",
    "llaville": "@veewee  as asked in https://github.com/phpro/grumphp/issues/101#issuecomment-179659390, why not named my new task \"php_forbidden\". This will avoid confusion with default Parser implemented (PHP_Parser).\nBefore to push my code I want to test more conditions and why not see how it could handle a new parser.\n. :+1: for name php_backlist\n\nWhat do you mean with 'how it could handle a new parser'?\n\nI've implemented a solution based like linter to allow to use PHP_Parser but any other one we may add after \n. @veewee  I've just pushed code for review ! See PR 108\n. :+1:  for this enhancement, but rather than used the token_get_all solution like in #53, consider to implement the famous PHP_Parser of Nikita. See project home page at https://github.com/nikic/PHP-Parser. \nI could be able to propose a such implement if you want ! \n. You right, original GitBlackList task is only a string key ident feature (only grep).\nPHP_Parser is able to scan only PHP scripts syntax, not Javascripts !\nWe could have to solve this issue a fix to allow BlackList task to allow other files than just  .php\nAnd a new task that will support PHP_Parser to detect syntax like ... here are some ideas\nyaml\n        git_blacklist:\n            keywords:\n                - \"var_export(\"\n                - \"->var_dump(\"\n                - \"::print_r(\"\nSearching for php function var_export, no static method ->var_dump(, static method ::print_r(\nAST produces by PHP_Parser is able to do it easily !\n. @veewee Yes, it's possible, especially because I need something at my office. So I'll begin it right soon and propose it in next days now \nAn idea about the new task name ?\n. Just finished to code my first version of new task, I've called phpparser following syntax I've previously declared in https://github.com/phpro/grumphp/issues/101#issuecomment-179433497\nGo to sleep now, but I should be able to propose a PR tomorrow !\n. ok will start comment in #53 \n. See logger helper proposed by PR https://github.com/phpro/grumphp/pull/111\n. Exemple with YAML config\nyaml\nparameters:\n  bin_dir: \"./vendor/bin\"\n  git_dir: \"/var/grumphp/examples\"\n  tasks:\n      php_blacklist:\n        keywords:\n          - \"::var_export(\"\n          - \"var_dump(\"\n          - \"->print_r(\"\n          - \"error_log(\"\nSearching for var_dump, error_log functions, static method call  named var_export, concrete method call named print_r \n. I know the problem with Travis job and I've check in. Issue come from PHP_CodeSniffer (version used 2.3.0).\nSee details on issue https://github.com/squizlabs/PHP_CodeSniffer/issues/883 I've opened few minutes ago\nOk for other task todo (unit tests, ...) but I can do it only this week end now\n. Hi @veewee,\nI really appreciate your deeply code review :) \nI'll try to fix all points, but it should be propably for monday or tuesday now !\nThanks.\n. I've already fixed some point, but I'm still working on other improvements. Especially the node visitors option registered as services.\n. @veewee About your comment \n\nt would be very cool if the visitors were registered as a service and there was an option 'visitors' added to the task. This way, a user could easily create their own visitors for the task or just use 1 or 2 of the provided methods. This one is probably not that easy, but would be very cool :)\n\nI've just implemented a solution, but I'm not sure it is that you've in mind\nCurrent config will be:\nphp_blacklist:\n        keywords:\n          - \"::var_export(\"\n          - \"var_dump(\"\n          - \"->print_r(\"\n          - \"error_log(\"\n          - \"BAR\"\n        visitors:\n          - 'GrumPHP\\Parser\\Php\\MyNodeVisitor'\nIf option visitors is not specified, the default GrumPHP\\Parser\\Php\\NodeVisitor' (that checks for methods, functions) is added\nI've create a new node visitor (e.g) to check class constant\n. ok thanks for feedback. I'll review my code copy !\n. I must admit, I've some difficulties to retrieve list of services corresponding to node visitors.\nI've checked on ContainerFactory and two compilers examples, but no way to add a new one (an idea ?).\nSo how to get list of node visitors services ? Help would be greatly appreciated. Thanks in advance.\n. Probably via a new extension  that is the only way we can configure it ? \n. Ok finally it was as I've expected first. BTW, and in parallel I've worked on a copy that used visitors as class name strings. \nI'll push the code right away, but I'll continue to fix it following your feedback (about compiler pass).\n. With such config \nyaml\n      php_blacklist:\n        keywords:\n          - \"::var_export(\"\n          - \"var_dump(\"\n          - \"->print_r(\"\n          - \"->run(\"\n          - \"error_log(\"\n          - \"BAR\"\n        visitors:\n          - 'GrumPHP\\Parser\\Php\\Visitor\\FunctionCallVisitor'\n          - 'GrumPHP\\Parser\\Php\\Visitor\\ConcreteMethodCallVisitor'\n          - 'GrumPHP\\Parser\\Php\\Visitor\\StaticMethodCallVisitor'\nVisitors are registered as string class names (not yet services: WIP), I've results expected.\nFor example:\nYou have blacklisted keywords in your commit:\n[WARNING] C:\\var\\grumphp\\examples\\task\\Phpparser.php: Found \"var_dump\" function call on line 61\n[WARNING] C:\\var\\grumphp\\examples\\task\\sample2.php: Found \"var_export\" static method call on line 21\n[ERROR] C:\\var\\grumphp\\examples\\task\\syntax_error.php: Syntax error, unexpected T_PUBLIC, expecting ',' or ';' on line 10\nLast line is produced by PHP_Parser that act as a php -l lint command.\n. Just added visitors as services implementation. See commit https://github.com/phpro/grumphp/commit/7e6936fdc8f7eea775f3fcf97d43b4ab14fe88a0\nConfig is now \nphp_blacklist:\n        keywords:\n          - \"::var_export(\"\n          - \"var_dump(\"\n          - \"->print_r(\"\n          - \"->run(\"\n          - \"error_log(\"\n          - \"BAR\"\n        visitors:\n          - '@grumphp.parser.php.visitor.function_call'\n          - '@grumphp.parser.php.visitor.concrete_method_call'\n          - '@grumphp.parser.php.visitor.static_method_call'\n. Ok waiting for your feedback that have a great importance for me !\nI've really appreciated your deeply code review in past \n. @veewee Sorry I've been busy at Office, and have not enough free time to work on this subject. \nBut I'll have a look this week-end to make it advance. I've to learn phpspec to build unit tests too ! \nA little challenge, but nothing I can't do \n. @veewee I've just pushed new PR https://github.com/phpro/grumphp/pull/138 related to code changes\n- renamed task to php_parser rather than php_blacklist\n- spec tests are only available on my local host (not yet fully operational)\n- visitors configuration, as you suggested is impossible for me. I propose a new way \nyaml\nparameters:\n    tasks:\n        php_parser:\n            visitors_options:\n              function_call_visitor:\n                blacklist: [\"var_dump\", \"error_log\"]\n                whitelist: [\"count\", \"get_class\"]\n              concrete_method_call_visitor:\n                blacklist: [\"print_r\", \"run\"]\n              static_method_call_visitor:\n                blacklist: [\"var_export\"]\n            visitors:\n              - {visitor: '@grumphp.parser.php.visitor.function_call'}\n              - {visitor: '@grumphp.parser.php.visitor.concrete_method_call'}\n              - {visitor: '@grumphp.parser.php.visitor.static_method_call'}\n            triggered_by: [php]\n            ignore_patterns: []\n. @veewee Will have a investigate deeply in code in few hours. But look nice in first look :)\n. @veewee Just one question ! How did you change the logger ? From null to, e.g a file stream \n. I see that. I just want to know if there is a solution via yaml config file to change the logger behavior.\nE.g: replace null logger by another handler. Currently all goes to the console output. when verbose mode is active \n. I've tried to add in my grumphp.yml config file these lines  \n```\nservices:    \n  grumphp.logger:\n    class: Monolog\\Logger\n    arguments:\n      - 'GrumPHP'\n      - ['@grumphp.logger.handler.streamhandler']\ngrumphp.logger.handler.streamhandler:\n    class: Monolog\\Handler\\StreamHandler\n    public: false\n    arguments: [ \"/tmp/grump.2.log\" ]\n```\nIt works fine. But is it the best pratice ?\n. Thanks for this answer !\n. Thanks for feedback. I'll to think it and propose a full solution later.\n. Hello Toon,\nI agree with you, in CI context, adding the security advisories don't make sense. It's probably better to remove it from grumphp.yml on Travis and AppVeyor platforms rather than modify the composer requirment, as I've previously suggested.\nLaurent\n. I should be able to do it this week !\n. Need more spec tests. Will add them later.\n@veewee Could you fix the #118 issue, to make Travis and AppVeyor job results really usefull. Thanks in advance !\n. @veewee Thanks a lot :)\n. @veewee Thanks for notification. I'll try to fix it this week-end too !\n. Hi @veewee \nThanks again for all your remarks and code review. I appreciate a lot !\nI'll reply to you ASAP.\n. Hello @veewee \nI need your help about phpspec usage.\nI've wrote some spec files but I can't solve an issue. Perharps you could help me. Here are the ouput I got on my windows platform with PHP 5.6.19\n```\nGrumPHP\\Collection\\FilesCollection\n 101  - it should filter by date\n      warning: strtotime(): It is not safe to rely on the system's timezone settings. You are required to use the\n      date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are\n      still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone 'UTC' for now,\n      but please set date.timezone to select your timezone. in\n      C:\\home\\github\\grumphp\\spec\\GrumPHP\\Collection\\FilesCollectionSpec.php line 107\nGrumPHP\\Task\\PhpParser\n  23  - it should have a name\n      exception [exc:GrumPHP\\Exception\\RuntimeException(\"The php_parser can't run on your system. Please install\nall dependencies.\")] has been thrown.\nGrumPHP\\Task\\PhpParser\n  28  - it should have configurable options\n      exception [exc:GrumPHP\\Exception\\RuntimeException(\"The php_parser can't run on your system. Please install\nall dependencies.\")] has been thrown.\nGrumPHP\\Task\\PhpParser\n  38  - it should run in git pre commit context\n      exception [exc:GrumPHP\\Exception\\RuntimeException(\"The php_parser can't run on your system. Please install\nall dependencies.\")] has been thrown.\nGrumPHP\\Task\\PhpParser\n  43  - it should run in run context\n      exception [exc:GrumPHP\\Exception\\RuntimeException(\"The php_parser can't run on your system. Please install\nall dependencies.\")] has been thrown.\nGrumPHP\\Task\\PhpParser\n  20  - it should handle ignore patterns\n      exception [exc:GrumPHP\\Exception\\RuntimeException(\"The php_parser can't run on your system. Please install\nall dependencies.\")] has been thrown.\n                                  98%                                        397\n\n61 specs\n397 examples (391 passed, 6 broken)\n13046ms\n```\nI've tried to set timezone to UTC, but I got same result (with or without)\n. @veewee Forget my previous help request about spec files. I've solved the first broken spec about timezone settings. \nI got another PHP in my path that was used but timezone was not defined in UTC on php.ini !\n. I'll push the code updated this evening, when I'll be back from Office \n. whitelist was a try to distinct two groups but, you're right the task fail anyway, so it's not a nice try !\n. Each class visitor as it's own configuration:\nWhen class named Namespace\\To\\ClassFooVisitor the option entry should underscore named as base class name. In this example it will be class_foo_visitor\n. I forgot to remove it. Good catch !\n. Ok will have a look \n. Yes, option should be transfered to concrete PhpParser task\n. Good catch again !\n. I'll deephtly have a look on it\n. A suggestion ?\n. Sorry I don't see the new !\n. ",
    "kgust": ":+1: for @nilportugues comment about tokenizing javascript and using css selectors. The Javascript task could be very similar to the php_blacklist.\nI'm not sure how the CSS task would work.\n. You guys are talking about vastly different features.\n1. Blacklist is currently, as I understand it, a simple string identification feature. I still believe there is a place for this. I was arguing that you need to open this up to other file types (especially Javascript).\n2. What is being argued in the opposite direction, ala #53, is an introspection tool that can parse PHP and not allow certain constructs, syntax, etc. For this the PHP_Parser or something similar could be helpful.\nWhy not both?  A PHP parser isn't going to be very helpful in detecting a javascript debugger; statement.\n. Having had a chance to think about this more, I'd give a :+1: to @nilportugues comment on #53. At least in regard to intelligently parsing CSS and Javascript.\nSimple regex blacklists have their uses, but as #53 points out, they are imprecise.\n. ",
    "lasselehtinen": "Now I get the following error if I run grumphp on a project where guzzle is already required in composer.json. Works fine on those without though.\n```\ngrumphp\nPHP Fatal error:  Cannot redeclare GuzzleHttp\\uri_template() (previously declared in C:\\path\\to\\folder\\vendor\\guzzlehttp\\guzzle\\src\\functions.php:18) in C:\\Users\\lasleh\\AppData\\Roaming\\Composer\\vendor\\guzzlehttp\\guzzle\\src\\functions.php on line 265\nFatal error: Cannot redeclare GuzzleHttp\\uri_template() (previously declared in C:\\path\\to\\folder\\vendor\\guzzlehttp\\guzzle\\src\\functions.php:18) in C:\\Users\\lasleh\\AppData\\Roaming\\Composer\\vendor\\guzzlehttp\\guzzle\\src\\functions.php on line 265\n```\n. I had couple global packages that had guzzle as required. Namely:\nhttps://github.com/laravel/installer\nhttps://github.com/laravel/lumen-installer\nhttps://github.com/vinkla/climb (require knplabs/packagist-api which in turn requires guzzle)\nI removed those and now it seems to work. Downside is of course that I cannot have these packages installed at the same time. So is this more of a bug in Guzzle / Composer? I found this but I am not smart enough to figure it out.\nhttps://github.com/guzzle/guzzle/issues/676\n. Unfortunately that does not work, because Git Bash maps each Windows drive Letter /letter. So for example C:\\test becomes /c/Test. \nlasleh@CPB2265 /c/test (master)\n$ php -r \"var_dump(getcwd());\"\nstring(7) \"c:\\test\"\nAnd both of these work:\ncd /c/test\ncd c:\\test\nSo I assume there is something funny going on when you try to determine the absolute path when a relative one is given.\n. That seemed to be the case. I was using old 1.9.3 version of Git Bash whereas updating to 2.6.3 made the problem go away.\n. Excellent, thanks.\n. Having the same issue. I would ignore the phpcs warnings in the older versions with \"show_warnings: false\" and I was scratching my head why \"warning_severity: 0\" is still reporting warnings. . Pull request created, hope it is done correctly.. ",
    "dstollie": "Thanks! I was somewhat confused.\n. ",
    "adam-paterson": "I've been looking into this one this morning, we need to clean up a couple of bits before we can use Box to generate a phar for us.\nFound Issues:\n- Autoload redeclare error due to autoload loop in bin/grumphp\n- File \"phar:///Users/adampaterson/Code/grumphp/bin/grumphp.phar/src/GrumPHP/Console/Helper/../../../../\" doesn't exists.\n. it also achieves this\n\n. If this is approved I'll squash the two silly mistakes above.\n. I'd love to know what the outcome of those discussions was.\nI'll squash them shortly.\nSent from my iPhone\n\nOn 17 Nov 2015, at 17:10, Alexander Deruwe notifications@github.com wrote:\n@veewee and myself were discussing some potential refactoring regarding the configuration stuff touched upon here, but I think you're good for squashing the commits, we can always apply that later.\n\u2014\nReply to this email directly or view it on GitHub.\n. @veewee @aderuwe Commits squashed.\n\nExcellent news, having a task builder is a good idea. It'll make it easier for other people to get involved in the project.\n. @veewee Good point, however as a user I'd be irritated if a tool overwrote something I'd put into place without warning. I'll change the default to skip rather than overwrite.\nOn a side note, do you have a IM room somewhere I can join, got quite a few ideas for this project and wanted to run them by you.\n. Yeah, I'll creak backups and prompt the user to create a GrumPHP compatible task for whatever the hook did before.\n\nOn 19 Nov 2015, at 13:53, Toon Verwerft notifications@github.com wrote:\nNot sure if skip is better than overwrite: when the package upgrades, it is also possible that a git hook changed. So the git hook should be updated automatically.\nOn the other hand: when using GrumPHP, the hooks need to be the grumPHP hooks. Maybe it's better to create a copy to a backup file ?\n\u2014\nReply to this email directly or view it on GitHub.\n. @aderuwe Sorry, I've been slow on OSS projects recently. Started a new job and have been focussing on getting up to speed. I'll continue with this soon though.\n. @Anahkiasen get back to rocketeer! I'm happy to add the Codeception task\n. #69 added!\n. I'm pretty sure this won't be possible. The git index itself doesn't contain the file changes. It is a binary file containing a sorted list of path names, each with permissions and the SHA1 of a blob object.\n\nWe will only ever be able to check the working directory files. \n. @veewee didn't notice that, amended. I'll squash if approved/\n. @aderuwe Done!\n. ",
    "kmelia": "Hi,\nA Phar file is a must have for your project! Think about composer, we use it because it's simple to get it everywhere.\nWith the current project, I failed trying to create a Phar file, because of the many hardcoded absolute/relative paths.. ",
    "gnovaro": "Basic Tutorial\nhttps://www.sitepoint.com/packaging-your-apps-with-phar/. ",
    "m1guelpf": "Updates?. ",
    "paslandau": "In depth tutorial by @theofidry https://medium.com/@tfidry/create-and-deploy-secure-phars-c5572f10b4dd. Are there any plans to move forward with this request? I second that it would be very helpful to decouple grumphp run from the git diff. We're using a subset of the provided tools anyway and use them e.g. for code review. Having the ability to pass folders/files thus is a requirement for us and grumphp would let us have a one consistent place for qa configuration.. > Note that the last 2 use cases can be covered by specifying testsuites (see https://github.com/phpro/grumphp/blob/master/doc/testsuites.md)\nHa. Totally missed that.. the PR anyway :). Hey @veewee \nwould you like to review https://github.com/paslandau/grumphp/commit/6b1662836fe373c900650d9da3b459948bfade65 before  I make a PR against seventies?. Hey @veewee \ndone: https://github.com/phpro/grumphp/pull/587\nI also created a POC for parallel execution (see https://github.com/phpro/grumphp/issues/581) that would be a successor of this PR but contains substantially more changes.. I'dont feel quite comfortable having \"nothing\" that actually checks the behavior - which kinda was the initial thought on adding a test in the first place.\nE.g. consider the inlined\nphp\n $tasks = array_map('trim', explode(',', $input->getOption('tasks', '')));\nIf somebody were to switch \",\" by \";\" there would be \"nothing\" to catch that bug. Mutation testing tools like https://github.com/infection/infection usually \"make those changes\" to verify if everything is tested \"correctly\".\n\nAre you open to introducing some sort of end2end/integration test that \"acutally\" calls the run command and verifies the output (see https://symfony.com/doc/4.1/console.html#testing-commands )?\nIt's something that we do quite frequently because it's a very good high level indicator for \"some things don't work as they are supposed to\" (though it comes with an increased maintenance overhead due to duplication).\nSomething along the lines of\n```php\n    public function test_command()\n    {\n        $application = new Application();\n    /**\n     * @var RunCommand $command\n     */\n    $command = $application->find('run');\n\n    $commandTester = new CommandTester($command);\n    $commandTester->execute(array(\n        'command'  => $command->getName(),\n        '--tasks' => 'foo',\n    ));\n\n    $output = $commandTester->getDisplay();\n    $this->assertContains('...', $output);\n}\n\n``. This will retain empty input values, i.e. if--tasksis empty or omitted,$taskswill be an array containing one empty element. So we would either put it in an if OR add andarray_filter` --- both makes the result less readable, imho.\nI'm fine with removing deduplication, though.\nThoughts?\nfyi - failing tests after change:\n```\n/codebase/grumphp/vendor/phpunit/phpunit/phpunit --configuration /codebase/grumphp/phpunit.xml.dist GrumPHPTest\\Console\\Command\\RunCommandTest /codebase/grumphp/test/Console/Command/RunCommandTest.php\n[...]\n4) GrumPHPTest\\Console\\Command\\RunCommandTest::parses_comma_separated_options with data set \"null\" (null, array())\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n+    0 => ''\n )\n/codebase/grumphp/test/Console/Command/RunCommandTest.php:36\n5) GrumPHPTest\\Console\\Command\\RunCommandTest::parses_comma_separated_options with data set \"empty\" ('', array())\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n+    0 => ''\n )\n/codebase/grumphp/test/Console/Command/RunCommandTest.php:36\n6) GrumPHPTest\\Console\\Command\\RunCommandTest::parses_comma_separated_options with data set \"empty after trim\" (' ', array())\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n+    0 => ''\n )\n```. Like this?\nphp\n    /**\n     * TaskRunnerContext constructor.\n     *\n     * @param ContextInterface $taskContext\n     * @param string[] $tasks\n     * @param TestSuiteInterface $testSuite\n     */\n    public function __construct(ContextInterface $taskContext, array $tasks, TestSuiteInterface $testSuite = null). I'll give it some thought but I'm not to deep into symfony (more of a laravel guy) plus since those sort of tests are usually tightly coupled to the application I guess I'd need more time digging some grumphp internals.\nSo I would keep it separate from this PR + keep the current test for now.. ",
    "marabesi": "would it be a good idea to release a phar that supports only one os and then rolling out updates with more os's?. ",
    "alexgt9": "Thanks you for this tool :smile: \n. I have been investigating and I think that is not possible, for example,  we are calling to the php-cs-fixer and we need to pass to it the path to the file but we can only get the content of the files in the index using git show :file.path\nI don't know if there is another approach...\n. ",
    "ctrl-f5": "yes, disabling the ascii images is exactly what I was looking for, thanks\n. ok.\nI tried running with vvv already, and got the commands it runs, for phpcs, this is pretty huge since it adds all files in the project.\ncopying this and executing it manually does show the output, alltough it outputs ASCII AND json, maybe that's the issue?\ncommand is './include/vendor/bin/phpcs' '--standard=./dev/phpcs/phpcs.xml' '--report-full' '--report-json' [FILES]. $ composer info squizlabs/php_codesniffer\nname     : squizlabs/php_codesniffer\ndescrip. : PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\nkeywords : phpcs, standards\nversions : * 3.2.3\nIll run it through the debugger and check PhpcsFormatter. \nIt isn't getting any output from the process, I'll debug it further. seems to be due to the sheer number of files or size of the output, when I restrict phpcs to just the config folder, it works as expected:\nphpcs:\n      standard: \"./dev/phpcs/phpcs.xml\"\n      whitelist_patterns:\n        - /^config\\/(.*)/\nWhen doing a run of the complete codebase, it's appending more than 10K files to the command (command length is 650K chars)\nAlso, when I incrementally add to the list, the moment is becomes too big, the command exits immediately.. max cli is still a bit higher though, maybe it's different for the symfony process component...\n$ getconf ARG_MAX \n2097152\nanother solution could be writing the command to a temp file and then doing an sh tmp-command-file?. ",
    "aaa2000": "I get this error at step grumphp configure. \n```\n grumphp configure -v  \n[InvalidArgumentException]           \n  The helper \"question\" is not defined.  \nException trace:\n () at /home/user/grumphp-bug-83/vendor/symfony/console/Symfony/Component/Console/Helper/HelperSet.php:79\n Symfony\\Component\\Console\\Helper\\HelperSet->get() at /home/user/grumphp-bug-83/vendor/symfony/console/Symfony/Component/Console/Command/Command.php:541\n Symfony\\Component\\Console\\Command\\Command->getHelper() at /home/user/.composer/vendor/phpro/grumphp/src/GrumPHP/Console/Command/ConfigureCommand.php:119\n GrumPHP\\Console\\Command\\ConfigureCommand->buildConfiguration() at /home/user/.composer/vendor/phpro/grumphp/src/GrumPHP/Console/Command/ConfigureCommand.php:89\n GrumPHP\\Console\\Command\\ConfigureCommand->execute() at /home/user/grumphp-bug-83/vendor/symfony/console/Symfony/Component/Console/Command/Command.php:239\n Symfony\\Component\\Console\\Command\\Command->run() at /home/user/grumphp-bug-83/vendor/symfony/console/Symfony/Component/Console/Application.php:193\n Symfony\\Component\\Console\\Application->doRun() at /home/user/grumphp-bug-83/vendor/symfony/console/Symfony/Component/Console/Application.php:106\n Symfony\\Component\\Console\\Application->run() at /home/user/.composer/vendor/phpro/grumphp/bin/grumphp:32\nconfigure\n```\nMy global package  composer global show -i. \n...\nphpro/grumphp                     v0.7.0 A composer plugin that enables source code quality checks.\nsymfony/console                   v3.0.0 Symfony Console Component\n...\nI will try tomorrow the steps on a VM or another computer, and I will try another version of grumphp.\n. I can't reproduce the bug on the VM.\nYou are right, I certainly have one of the paths wrong on my system. Sorry for the inconvenience.\nThanks.\n. I had the problem because I\u00a0have an auto_prepend_file with the global composer autoload file in order to use var_dumper.  https://symfony.com/doc/current/components/var_dumper/introduction.html\nsudo sh -c \"echo 'auto_prepend_file = \\\"/home/vagrant/.composer/vendor/autoload.php\\\"' > /etc/php5/cli/conf.d/30-global_composer.ini\"\n. - I will move TaskResults in the GrumPHP\\Collection namespace, rename TaskResults to TaskResultCollection and extends ArrayCollection\n- I will replace existing parameters of RunnerFailedEvent by the TaskResultCollectionbut not modify others events TaskFailedEvent, RunnerEvent...\n- I was inspired to https://github.com/Behat/Behat/blob/master/src/Behat/Testwork/Tester/Result/TestResult.php, I prefer keep a high code for failed task\n- I\u00a0will create a new taskresult code for failed but non blocking. Have you an idea about the name of the constant? NONBLOCKING_FAILED?\nAre you okay?\n. PR updated. \nBut, it miss this\n\nDuring the 'tasks.run' event, the statuscode could be NO_TASKS\n\nWould you rather say During the 'grumphp.runner.run' event ?\nAnd what should be the behaviour of stop_on_failure with a non blocking task ? I stop only if it is a blocking task, I have to add a test on this behaviour.\nIndeed, it would be better that the tasks return TaskResults.\n. PR updated. \n. Indeed, I had not seen the regression. The solution seems to me well. \nI prefer the warnings above the errors because I first correct errors and then maybe the warnings. I don't want to scroll the terminal to see the errors.\nAnd If the warnings is always display and the warnings are above errors. why not ?\n```\npublic function run(OutputInterface $output, ContextInterface $context, $skipSuccessOutput = false)\n{\n        $this->registerEventListeners($output, $context);\n        $taskResults = $this->taskRunner->run($context);\n        $warnings = $taskResults->filterByStatusCode(TaskResult::NONBLOCKING_FAILED);\n        $this->returnWarningMessages($output, $warnings->getAllMessages());\n    if (!$taskResults->isPassed()) {\n        $failed = $taskResults->filterByStatusCode(TaskResult::FAILED);\n        return $this->returnErrorMessage($output, $failed->getAllMessages());\n    }\n\n    if ($skipSuccessOutput) {\n        return self::CODE_SUCCESS;\n    }\n\n    return $this->returnSuccessMessage($output);\n\n}\n``\n. Fix done but I have replaced!$taskResults->isPassed()by$taskResults->isFailed(). I didn't want change the isPassed method in order to it return true when there areTaskResult::NONBLOCKING_FAILED`. \n. When the grumphp.runner.failed should be trigger ? Only if a blocking task has failed ? Or a non blocking task too ?\n. For me too, it can be merged. Do you want that I squash the commits ?\nI look veewee@d4a872a and I note that you use the named constructors TaskResult::createFailed and TaskResult::createPassed that I have reverted in commit 617606ef04e25e704929b61596c9888e401121d5 \n. Yes, It improves readability and I hesitated to remove its. But adding a new status code involve always to add a new method in the class and I prefered use a ternary operator in https://github.com/phpro/grumphp/pull/132/files#diff-2ad714d600b1981df304b68889ab9aefR94\nThank you for the review and for the tool !\n. Done\n. ",
    "lykciv": "Thank you for your feedback. I've installed grumphp globally, but unfortunately it doesn't solve my problem. The project autoloader is still used.\n$autoloadLocations = array(\n    getcwd() . '/vendor/autoload.php', // package autoloader\n    getcwd() . '/../../autoload.php',  // project autoloader\n    __DIR__ . '/../vendor/autoload.php', // does not exist\n    __DIR__ . '/../../../autoload.php', // global autoloader\n);\nA possible solution would be to process the local and global autoloaders separately and do something like this:\n```\n$autoloadLocations = array(\n    getcwd() . '/vendor/autoload.php',\n    getcwd() . '/../../autoload.php',\n);\n$globalAutoloadLocations = array(\n    DIR . '/../vendor/autoload.php',\n    DIR . '/../../../autoload.php',\n);\n$loaded = false;\nforeach ($autoloadLocations as $autoload) {\n    if (is_file($autoload)) {\n        require_once($autoload);\n        $loaded = true;\n        break;\n    }\n}\nforeach ($globalAutoloadLocations as $autoload) {\n    if (is_file($autoload)) {\n        require_once($autoload);\n        $loaded = true;\n    }\n}\n```\n. I think it could be valuable if the task runs on every commit. Especially in projects which are in maintenance mode. Usually composer doesn't get updated often enough on these projects or developers forget to do so when they do have to work on it. So, when this task runs on every commit, at least developers are alerted of any security issues in their dependencies.\nOn the other hand, if a project is in active development, this would probably be overkill.\nSo, maybe this should be a configurable option? Give users the choice to run this task on every commit or only when the composer files are changed.\nYou could use the security checker and roave/security-advisories side by side, but this allows you to remove it as a dependency and just keep it as a suggestion. Some users might prefer to be alerted of any security issues when they require or update a dependency, so I would definitely keep the suggestion.\nBut I think the security checker is a better tool because it runs against a web service and always has the most recent information. The roave/security-advisories tool only runs against the version you have in your project and if you don't update composer, this won't help you.\n. Sounds good to me. I've updated the code to include the run_always option. I've also updated tests and documentation accordingly. \n. Ok, sounds good. I'll look into it and will try to put together a pull request :)\n. Hi @sivajik34 \nWe've been using grumphp 0.12.1 with Magento 2.2.2. Can you try to require that specific version? . I have added the depfile option. Updated this option so it allows boolean configuration. In deptrac itself this option is an integer though.. The project itself recommends installing the phar file. \nAlso, the package does not come with a bin file. I guess this should also work when you run php deptrac.php in the package, but I didn't look further into that option.. I'm not sure a whitelist has an added value in this case. Big files will cause problems in git regardless of file type. If you would whitelist PDF files, someone could still commit a 500MB PDF. \nIf you have multiple bigger files in your repository, you can always set the max_size higher. And if you find that you have to set the max_size too high, that's probably a sign that you should review whether git is the right solution for storing your bigger files.. ",
    "jenssegers": "Someone from our team had this issue as well, any news on this?. ",
    "syslogic": "the check should be for ! class_exists(),  wrapped around the require_once() ... which would prevent duplicate require instructions, which subsequently result in duplicate auto-loading.. it might depend on the case, if the 2 files are identical whether or not - because if both are the same version, one can already skip on file access. most granular might be an option to prefer global / local classes, if such a use case should exist.. ",
    "tifabien": "Your solution seems interesting and I think it should solve this issue :) \n. That's what I was thinking of. With the check command we could do the same thing as the phpcsfixer task :)\n. Hi @veewee \nFor sure! I'll have a look at it tomorrow and let you know if all runs well !\n. I started playing with my gherkin features and seems that kawaii is lost with them. \nI don't know if it is related to the fact that i'm running command in Windows.\nAlso I tried to install kawai in my symfony3 project and it failed as 3.0 version of symfony components is not added in the composer.json.\nMaybe to early to add this task in the master branch...\n. I created issue on kawai project. let's see if the issue is only my side\n. @veewee No problem for me as the project now support SF3 components and fixed issue on Widows platform so that's a good news!!\n. :+1: all seems great regarding your code.\n. Hi @veewee \nI agree for the git hooks command which must only check modified files and not all files in the project.\nMy question regards the grumphp run command used for CI servers commonly. Think we should not execute one php-cs-fixer command for each file in the project but only one single command for checking codestyle of the whole project.\nThis could improve performance of the task execution.\nWe could effectively improve php-cs-fixer task when v2 will be release but this could be also integrated with the V1.\n. I Think we could do this always the run command is executed.\n. @veewee Thanks for the work! i'll test it asap and will let you know if I found issues!\n. Hi @veewee \nYou can have a look at the UPGRADE.md guide in order to see what changed and how to migrate. Some options has been removed, other renamed,.. So if we want to support both versions this PR needs to be adapted. I'll have a look.\n. @veewee ,\nI just had a quick look at this PR. I'm ok with your comments regarding snake case on task options, docs addition, composer.json updates... \nIf you want to make 2 separated tasks for phpcsfixer I'm also OK. \nBtw your suggestion in the PR #156 seems also interesting. This configuration check depending the version config value is in my opinion a good idea. This PR is a more straightforward solution.\nNow it's up to you to decide whether you want one specific class per version or one Class with multiple version support :)\n. @veewee ,\nI'll try the new v0.9.2 + Cs fixer 2.0 and let you know if I find something :)\n. Class name is GrumPHP\\Task\\Gherkin\n. correct config param is 'config_file'\n. That's now OK on the master branch. My CI server is now all green :)\nThanks!\n. Think due to a task copy paste :)\n. ",
    "keradus": "Please play with https://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/1742\n. I started mine yesterday as well ;)\nYour solution would be problematic when one want to run GrumPHP with PHP CS Fixer v2@dev, as you start using the PHP CS Fixer classes.\nThat is exactly my goal, but first I will need to deal with https://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/1744 and probably https://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/1666\n. > So I guess there is nothing we can do in our project.\nYou can do it on your end but not sure is it needed to be implemented twice.\n\nI don't think this cross version support is soemthing we want to add to GrumPHP.\n\nThat could be tricky indeed.\nOne question about it - when there will be PHP CS Fixer 2.0, you will only support 1.x or 2.x ?\n. Guide for CLI usage upgrade: https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/master/UPGRADE.md\nMay be useful.\n. Hi @veewee ,\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/1742 is merged indeed, but it's merged into 2.x@dev line (not 1.x@stable).\nAnyway, I think this is more an issue of PHP CS Fixer, and as such there is no need for having the issue opened here, as grumphp may be considered as tool-runner.\n. 2 (alternative) hints then:\n- fail PHP CS Fixer task for file if file is in both stage and unstage status\n- pass content of staged version to stdin (PHP CS Fixer could work on stdin, no need to work on drive)\n. Does this behaviour occur on every task that run on files, like phpmd, composer etc?\n\nNotify is not enough for me, and new task could do the trick, but wouldn't be the prettiest solution.\n. Oh, and then... what about:\n- git stash\n- run tasks\n- git stash pop\n?\n. Yeah, I have no idea would it work on commit hooks, but it would be extra cool ;)\nIf not then indeed the stage/unstage task will help as last solution.\nThank you for your support ;)\n. works in pre-commit hook\nbash\ngit stash -q --keep-index\ncall-tools\ngit stash pop -q\n. For me having it disabled by default is risky - tool say everything is fine, and push the changes, and then see that i have sth not staged. But its to late, the damages were done.\nyou just run separated process for external tool CLI, if it will blow out you will know it from process informations\n. Great to hear @veewee ! Thank you for all the work ;)\nI will update my grumphp and work on new version from now, so I will report any issues, if they occur ;)\n. If one team decided to store configuration file on repository it's cool.\nBut then sb will want to have a bit different configuration, and he can't.\n.dist file is file to be distributed with repository, non-dist file is private one.\nReal-user-cases:\n- team decide to use tasks A+B, but sb want to run C as well.\n- configuring things like stashing depending on individual needs\n. That's exactly the plan. Exactly the same usage like let say phpunit.xml and phpunit.xml.dist.\nBut, following phpunit example, when you have .xml file phpunit will use it by default, and if not then phpunit will try to find .xml.dist file without the need of manually providing the configuration file.\nSame thing would be awesome for grumphp, to use grumphp.yml if exists, and if not try to use grumphp.yml.dist.\n. What about the stashing thing?\n. Actually the same thing for verbose. One like small, one like big. Even when running same ruleset.\n. ping \n. thanks @veewee \n. I would suggest to either:\n- pass multiple files to fix command (regardless current or suggested solution, modified file could be excluded in PHP CS Fixer config (eg .php_cs.dist), so it would be nice to respect that running command with path and intersection mode)\n- don't execute CLI at all, just run Runner of PHP CS Fixer programmatically.. I can confirm. intersection is basically operation of sets. when one take common part of anything and empty set, it's always empty set. @veewee , hardcoded path mode would actually follow reasoning why we introduced intersection.\nfor regular run - always normal mode, for precommit/CI - always intersection. > BC breaks?  no\ndisagree, public argument was removed. > - Run context with can_intersect=true will never receive the files since the finder in the php-cs-fixer2 config can be used. (Works better on windows since they have a limited CLI input charakters)\n\n\nRun context with can_intersect=false will always retrieve the files since there is no finder in configuration\n\n\nThen, what is the purpose of passing files in grumphp integration together with can_intersect=true ?\nyou are trying to use some extra logic on top of integration changing decision of user.\nif user passed files, let use it.\nif user configure mode=intersection, let use it.\nthat's it. > So as long as there is a finder in configuration (can_intersect=true), we shouldn't pass the files in run context in my opninion.\nso, why this scenario is allowed by code ?. php\n    if ($context instanceof GitPreCommitContext || !$config['can_intersect']) {\n        $arguments->addFiles($files);\n    }\nlet discuss not-precommit context, thus we have:\nphp\n    if (!$config['can_intersect']) {\n        $arguments->addFiles($files);\n    }\nvs\n\nIn run context, all files are being checked.\n\nNo, looking at code, in run-context, the paths are sometimes passed, sometimes not. could can_intersect be different for run-context and precommit-context?. cleaner to me, yet I do still not clear enough.\n\nRunContext:\nAs you can see: the files are being added when there is no finder configuration. If we don't do this, PHP CS Fixer will crash since it isn't validating any files.\n\ngreat, I do agree that if there is no finder, we shall pass the files.\nthen, you have execution scenario:\n- context: RunContext\n- config_contains_finder: true\nwhat is gonna happen with current implementation?\nyou gonna configure --path-mode=intersection yet no files for it, and intersecting finder with empty set is... empty set. no files gonna be fixed\n. thanks for contribution ;). ha, on my commit it was passing :D. fixed.. because most of devs like having the visibility.\nand even if visibility keyword is forgot, php still adds public under the hood.\nI would say no more than was said in thread - psr2 or not.\nIf one wants to have language agnostic spec - go in language agnostic spec framework, like in behat scenarios are language agnostic. if we go with PHP, would be nice to follow good practices.\nIf you don't want to have them - cool, just close the PR ;) no bad feelings ;). please make a decision, either close or ask me to rebase ;). sad for me, but totally understandable :+1:. no way to reproduce was provided, no reference to repo, how grumphp was installed\ngoogle to the rescue:\nhttps://github.com/Ocramius/ProxyManager/issues/328#issuecomment-304170899 (and previous messages to know how to track the issue)\nyou are executing grumphp under php5. that's the issue.. > As you can read, I'm using Symfony project so grumphp installed via composer.\nhuh? fact you are using some Sf project doesn't inticate the way of installing the tools like grumphp or others.\n\nI know it's environment issue.\nmy main php is 7.1 (using in nginx and cli version).\n\nyet, you refuse to share any details allowing to reproduce your local environment that is causing issues to you ;) \nif you prefer to stay with \"I'm using 7.1, yet it's crashing on PHP 5\" without saying anything more, nobody will be able to help.\n\nSo you not need my repo.\n\nrepo could have post-install hooks, for example if it would post-install grumphp under docker, then we would know what is causing the issue.\n\nSo your answer is not useful.\n\nwithout details, it's unlikely you will get help. So, let me repeat the post you claim is not useful, yet you still didn't answer to any request from it.\nno way to reproduce was provided, no reference to repo, how grumphp was installed\nbtw,\nbash\n`which php` --version. btw, IMO a CI configuration to enforce that at least one build is executed with v2, v3 and v4 is must have.. as PHP 5.6 is already required, drop of Sf 2.8 is fine, as 3.0 supports 5.5.9. Sf 2.8+ - PHP 5.3+\nSf 3.0+ - PHP 5.5+\nSf 4.0+ - PHP 7.1+\n@veewee on your currently existing matrix, 5.6 --prefer-lowest will test Sf 2.8, 5.6 will test Sf 3, 7.1 will test Sf 4. (BTW, there is no much gain for --prefer-lowest flag for non-lowest PHP, it's enough to have it only for 5.6, no need for 7.0 and 7.1)\n\nYour changes will only test 2 and 4.\n\nSo this statement is wrong.\nAlso, proposed solution, even if not needed in our case, is ugly, as you need to list all sf/* deps to update them one after another. symfony/lts is nice solution\n. > Only a bit weird to have v2, v3, 4.x@dev-master.\n@UrGuardian4ngel \nit will be better one day when https://github.com/symfony/symfony/issues/25210 would be released. yes, we do want.\nwe also need to bump gitlib here, as current gitlib crashes on 7.1+. great work @UrGuardian4ngel !. @veewee , @TomasVotruba , if you guys wish, I could continue the subject.\nYet, I think it is impossible to properly review and check 254 files modified in different ways , so I would prefer splitting it to smaller, single purpose PRs. By applying the changes in atomic way - one type of change per PR, probably getting same or very similar outcome.\nFor example - one PR that bumps PHP and deps, one PR to add declare_strict only, one PR to start using primitives in typehinting, one PR to drop phpunit that duplicates prototype. \nIn total, outcome gonna be the same.\nIf you don't feel it makes sense for you - sure, I won't do it ;)\nMy approach with atomic changes is to ease with review, as if you ask me, I would not be able to review everything at once, too big, easy to overlook sth.\n  . this step would be do you like to freeze PHP 5 development or not.\nif not, please create dedicated branch to which we could send more atomic PRs. Then, for a while master would be in need to be continuously merged into given php-7 related branch. let us catch up on private channel then ;)\n. thanks @veewee :+1:. Hi ;)\nLooks nice ;)\nYet, please also update\n- spec/Formatter/PhpCsFixerFormatterSpec.php\n- spec/Process/ProcessBuilderSpec.php. Ah, as non-shell guy, I wasn't aware of that param, Thanks for help !\nMaybe it would be nice to add it to docs? (I was there before raising a question, but simply -c wasn't there ;) ). love that ;). > Since we currently match the name based on the task name\n@veewee , can you point place of code when this is happening, and maybe propose direction how it could be changed ?. indeed, looks like a bigger thing indeed \nthanks for detailed description !!\nI'm not feeling able to do it myself right now, but let us have this FR open please ;) it's not first time it's requested, and now we have more info than single-line comment in src why one has to create custom task.. wow ;). save with stash name but pop without the name\n. OK, it's not a comment by msg ;P Yep, no one-command way to do it.\n. Continuing https://github.com/phpro/grumphp/issues/100#issuecomment-179442140\nSince you implement great safety guard with calling stash-pop on register_shutdown_function when needed, shouldn't this be true by default?\nThe only problem for setting this as default was making the changes disappear if sth goes wrong - but now it won't happen.\n. :+1:\n. it will crash with Cannot create intersection with not-fully defined Finder in configuration file. exception if there is no finder configured in .php_cs(.dist)? file.. you cannot know it without executing config file.. sorry, not sure what are modus\n\nWe could execute the config file, but this won't be able if php-cs-fixer is ran in PHAR modus. \n\nnot true. this is not related do you execute code under phar or not.\n\nisn't it more logical if it runs in intersect modus without a finder\n\nno, it intersect you need to have at least two collections. here, it's cli args + finder from config.. then it's a matter how you execute php-cs-fixer from grumphp.\nthat's --path-mode=override, take everything passed to cli command and ignore finder from config file. yet, it will ignore whole finder, including exclusions. you cannot partially honour finder and partially not. . poor, quick and dirty solution would be to execute command with intersection mode, if it crashes on not fully defined finder, run it with override mode...\nor, as suggested somewhere, execute Runner programatically instead of calling CLI command.. > As you mentioned, currently the best option is to handle errors with intersection and an empty finder.\nand that means you need to load config from file and change it, it finder is not fully configured.\nbut that, again, would require grumphp to understand the code it's executing (know the classes etc), which, as other solutions I suggested, you refused.\nyou want to be aware of configuration but refuse to know it classes. not much you can do with that restriction (except run cli up to 2 times approach). you could know the classes and still execute phar from cli.\nthat new mode is a hacky way of doing this which abuse package that is external for you, putting special mode only for one user is no-go.\nand that option is not intersect_on_commit, it's more like intersect_wich_finder_from_config_but_ignore_if_there_is_no_finder_in_config... hacky. > I was talking about a configuration inside grumphp named intersect_on_commit which will use the intersect path mode during a commit inside GrumPHP. There is no need for any changes in php-cs-fixer for that.\nCool it's gonna be internal setting.\nyet, when intersect_on_commit would be set up, then you will end up with current issue as well, key is configured, intersection is tried to be used, yet no local config finder is provided.\n\nOr are you talking about some other way?\n\nif you don't want to have that as dependency and treat it as a blackbox, then:\n\npoor, quick and dirty solution would be to execute command with intersection mode, if it crashes on not fully defined finder, run it with override mode.... why dropping the test instead of replacing it with test of new feature ?. when there is no finder in configuration, setting path-mode=intersection will crash the execution. did you try this out? please add tests to cover this change, as it is not working.\ndiff\n-intersect\n+intersection. btw, could there be consistency with naming? sometimes you use PHP-CS-Fixer, sometimes you use php-cs-fixer after binary file, while official name is PHP Coding Standards Fixer or PHP CS Fixer when one used shorter version.. damn, trailing whitespaces :(. why not only v4 ?. why ?. if bumping phpunit helps, do it.\nthere was an issue with diff package (premature release of it, rollback, conflicts between it and main package), maybe that's the reason. please don't call methods by name. it's super hard to perform SCA on code if you hide method name under strings. could we mark this class as @internal please ?. @requires OSFAMILY perhaps ?. does it has to be exposed as public interface which interface is under SEMVER control?\nif so, please at least make it final to not open it too widely\nif not, please mark with @internal. please add a TODO that describes when and how get rid of this, as it's only for compatibility reasons. ah, it's phpspec? please ignore my comment then, sorry ;). Put that knowledge into comment with @todo annotation so one will know it out of the box without searching for reasoning and solution when to drop it.\n\nProcessArgumentsCollection::generateCliCommand() class is public, if in best code approach (without working with legacy verion) we don't need this method, don't expose it to end user. so @internal it is (or even out of this class, as I would say it's weird to expose public classes with internal public methods, it's better to have public class and internal class).\n@deprecated would be bad here, as deprecated code shall not be used even by the repo (except of testing those deprecations), and you call it obviously ;). do not test against version, test against features.what if feature would be backported? what if feature would be removed in 5.0 ? when pinning to version, you need to observe and maintain it. when pinning to features (which you are already observing), you don't care in which version they exist or not. I bet it is temporary as well, when we would drop some old Sf, we could drop this class as well.\ncould you please add a TODO to do it after bumping requirement to symfony/X: ^y.z ?. could we please convert this comment into TODO ?. looks like a great candidate to add @todo drop me after ... as well ;). indeed, it shall.. i would still leave non -c call\nquestion: [\"-c\", \"foo\", \"arg1\"] or [\"-c\", \"foo arg1\"] ?. ",
    "gerdemann": "Hello @veewee,\ni need the modifier \"u\" for umlauts in commit messages.\nI have no idea how to write spec tests, could you help me there?\n. ",
    "ravinderk": "@veewee This will work from next version, means after version 0.7.2 updates, right?\n. @veewee thank you\n\n. ",
    "lukaszwit": "I think that \"grumphp.yml.dist\" is not grumphp concern. If you want it you can add it to your project and commit to your repo and smiply add grumphp.yml to .gitignore\n. @keradus I get you point and it seems easy implement\nPersonally I would love to see similar mechanism that symfony has with their parameters.yml and parameters.yml.dist (parameters.yml is generated or updated after composer install/update command)\n. The file ~/.gitcinclude was not existed so (now) I've created it with empty content but still the same error.\nIt has same permissions as ~/.gitconfig -> -rw-r--r--\nMy guess that empty file is not enough and should have some parsable content?\n. ",
    "mharbers": "I've got the same issue on OS X 10.11.3 and Git 1.7.9.5. \nRemoving the lines causes an other error:\n[Gitonomy\\Git\\Exception\\ProcessException]                                                                                                                  \n  Error while running git command:                                                                                                                           \n  'git' '--git-dir' '/Volumes/data/sandbox/grumphp/.git' '--work-tree' '/Volumes/data/sandbox/grumphp' 'diff' '-r' '-p' '-m' '-M' '--full-index' '--staged'  \n  fatal: failed to expand user dir in: '~/.gitignore'\nbrew install git didn't solve it\n. Found a workaround by changing the following in 'gitconfig':\nUnder core change:\n'excludesfile = ~/.gitignore'\ninto:\n'excludesfile = /Users/my-username/.gitignore'\nUnder include change:\n'path = ~/.gitcinclude'\ninto:\n'path = /Users/my-username/.gitcinclude'\nI created the ~/.gitcinclude-folder manually. Seems to work for now.\n. Yeah, you\u2019re right. Appears I run grumphp in docker-container with PHP 7.0, which was installed with composer on PHP 7.1. Sorry for the PR.. ",
    "bizmate": "If anyone has found a definitive solution to this problem or opened a ticket on brew to fix this could you please share it here?\n. @veewee thanks for the swift reply. Running the kawaii command directly returns\n```\nvagrant@vagrant-ubuntu-trusty-64:/project/v3$ vendor/bin/kawaii gherkin:check --align=left features\nFinding files on features                                                                          \nvagrant@vagrant-ubuntu-trusty-64:/project/v3$ echo $? \n1                                         \n```\nAlso if i -vvv from grump i i see the features folder/files where they are supposed to be\n```\nvagrant@vagrant-ubuntu-trusty-64:/project/v3$ vendor/bin/grumphp run -vvv\n[2016-09-30 09:56:53] GrumPHP.INFO: run command: ls-files \"\"  [] []\n[2016-09-30 09:56:53] GrumPHP.DEBUG: last command (ls-files) duration: 24.65ms [] []\n[2016-09-30 09:56:53] GrumPHP.DEBUG: last command (ls-files) return code: 0 [] []\n[2016-09-30 09:56:53] GrumPHP.DEBUG: last command (ls-files) output: .env.behat .env.example .gitignore .npmrc .... bootstrap/cache/.gitignore composer.json composer.lock config/app.php config/auth.php config/broadcasting.php config/cache.php config/compile.php config/database.php config/filesystems.php config/js-localization.php config/mail.php config/queue.php config/services.php config/session.php config/view.php database/.gitignore database/factories/ModelFactory.php database/migrations/.gitkeep database/migrations/2014_10_12_000000_create_users_table.php database/migrations/2014_10_12_100000_create_password_resets_table.php database/seeds/.gitkeep database/seeds/DatabaseSeeder.php features/acceptance/authentitcation.feature features/acceptance/jslocalization.feature features/acceptance/localization.feature features/assets/16_bits_ok.wav features/assets/8_bits_wrong.wav features/assets/goodCoverArt.jpg features/assets/wrongCoverArt.jpg features/bootstrap/BaseContext.php features/bootstrap/FeatureContext.php features/bootstrap/HomePageContext.php features/bootstrap/LanguageContext.php features/bootstrap/Page/AttachmentBehaviour.php features/bootstrap/Page/CheckElementsBehaviour.php features/bootstrap/Page/ClientSelector.php features/bootstrap/Page/Element/AccountBalances.php features/bootstrap/Page/Element/ActionCentre.php features/bootstrap/Page/Element/ActivityFeed.php features/bootstrap/Page/Element/ArtistInformation.php features/bootstrap/Page/Element/CatalogueSearch.php features/bootstrap/Page/Element/CoverArt.php features/bootstrap/Page/Element/FinancialSummary.php features/bootstrap/Page/Element/Header.php features/bootstrap/Page/Element/InProgressProducts.php features/bootstrap/Page/Element/ProductInformation.php features/bootstrap/Page/Element/ProductUploader.php features/bootstrap/Page/Element/SaleStart.php features/bootstrap/Page/Element/SalesOverview.php features/bootstrap/Page/Element/TrackDetails.php features/bootstrap/Page/Element/Tracks.php features/bootstrap/Page/Element/YoutubeIncome.php features/bootstrap/Page/HeaderMenuNavigator.php features/bootstrap/Page/Home.php features/bootstrap/Page/JavascriptBehaviour.php features/bootstrap/Page/LanguageTest.php features/bootstrap/Page/Login.php features/bootstrap/Page/Reporting/DST.php features/bootstrap/Page/Uploader.php features/bootstrap/Page/UploaderProgress.php features/bootstrap/Page/WaitBehaviour.php features/bootstrap/ReportingContext.php features/bootstrap/UploaderContext.php features/smoke/homepage.feature features/smoke/reporting/DST.feature features/smoke/uploader.feature grumphp.yml npm-shrinkwrap.json package.json pdepend.xml phpunit.xml ...... [] []\nGrumPHP is sniffing your code!\nRunning task 1/3: Gherkin\nAborted ...\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n         \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2584\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n       \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n  \u2584\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588                       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2580\u2580\u2580\u2580\u2580\u2584      \u2584\u2580\u2580\u2580\u2580\u2580     \u2588\u2588\u2588\u2588\u2588 \u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2590\u2588\u2588        \u2590\u2588\u2588        \u2588\u2588\u2588\u2588\u258c\n      \u2588\u2588\u2588\u2588\u258c                            \u2588\u2588\u2588\n       \u258c\u2588\u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588\n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588\n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580     \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580\n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580\n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588\n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u258c\n                        \u2588\u2588\u2580   \u2590\u2580\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n   \u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2580\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2584\u2584\u2584\u2584\u2584\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2584\u2588\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nFinding files on features\nTo skip commit checks, add -n or --no-verify flag to commit command\n```\nIt is weird but i managed to reproduce on another colleagues' machine. Maybe a list of the composer dev dependencies i have might help\n\"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~4.0\",\n        \"symfony/css-selector\": \"2.8.*|3.0.*\",\n        \"symfony/dom-crawler\": \"2.8.*|3.0.*\",\n        \"behat/behat\": \"^3.1\",\n        \"behat/mink\": \"^1.7\",\n        \"behat/mink-extension\": \"^2.2\",\n        \"laracasts/behat-laravel-extension\": \"^1.0\",\n        \"behat/mink-goutte-driver\": \"^1.2\",\n        \"behat/mink-browserkit-driver\": \"^1.3\",\n        \"behat/mink-selenium2-driver\": \"*\",\n        \"emuse/behat-html-formatter\": \"^0.1.0\",\n        \"squizlabs/php_codesniffer\": \"2.*\",\n        \"barryvdh/laravel-ide-helper\": \"^2.1\",\n        \"phpro/grumphp\": \"^0.9.4\",\n        \"malukenho/kawaii-gherkin\": \"^0.1.3\",\n        \"sensiolabs/security-checker\": \"^3.0\",\n        \"friendsofphp/php-cs-fixer\": \"^1.11\",\n        \"sensiolabs/behat-page-object-extension\": \"^2.0\",\n        \"behat/debug-extension\": \"^1.0\",\n        \"pdepend/pdepend\": \"^2.2\",\n        \"phpmd/phpmd\": \"^2.4\",\n        \"sebastian/phpcpd\": \"^2.0\",\n        \"phpmetrics/phpmetrics\": \"^1.10\"\n    },\n. the echo actually returns 1, i missed it while copying and pasting. I will open a ticket on the kawaii repo\n. ",
    "DragSociety": "I seem to have a similar issue. Whenever i try to create a Git branch, this is what it tells me:\nfatal: failed to expand user dir in: '~.gitignore_global'\nDoes anyone know what i have to do to undo this?\n. ",
    "jaroslavtyc": "In my case it was caused by running git pull under Apache, therefore user www-data.\nI am still not sure why www-data under Apache does not have set $HOME dir (on my Linux Mint), though the user itself has the home dir set, but the simplest workaround for me was to set the home dir before git pull:\nexport HOME=/var/www && git pull. ",
    "tacone": "Hello @veewee, thank you for the thoughtful reply. You are right in what you say, and I agree with you that the dry run is a sensible choice and should be kept as default.\nRegarding the concerns, it is possible even if unlikely that php-cs-fixer would mess up something. It is very unlikely that will change the actual behavior of the code or the result of the other tests.\nMy take on the whole matter is very simple: if GrumPHP will not let you commit without fixing, then you are going to fix anyways, automatically or not.\nI agree with you that manually fixing gives you more control.\n. Yes, I understood that.\nThe issues you raise are worth considering. I guess that the best short term solution to adjust for my workflow is just creating a custom task and live with it.\nThank you for now :)\n. ",
    "ceesvanegmond": "@veewee Why not make it optional to run the cs fixer? By default it doesn't fix the issues, but in the YAML file you can enable this. \n. For people who really want to use this feature; we created an seperate repository with this task. Check it out. https://github.com/wearejust/grumphp-extra-tasks\n. @veewee Maybe it's better to implement an 'custom' hook. Here you can just specify a specific command you want to execute. Allot of people are using docker, or maybe docker_compose (as we do). I head even some people even use bash scripts for this.\nI suggest creating a new custom hook_preset, and expand the parameters.yml with something like this:\n```yaml\ngit_hook:\n    custom:\n        shell: 'docker-compose -f docker-compose.dev.yml'\n\n```\nor\n```yaml\ngit_hook:\n    custom:\n        shell: '/bin/bash scripts.sh'\n\n```\nWe can basically copy the existing pre-commit and commit-msg files and update the command with the one you set in the above YAML file.\nWhat do you think?. Maybe it's because of upgrade to GIT 2.x? This task had worked here, it's in several projects and is working fine. Sure GIT does this 'merge notification' out of the box, but not when using an UI like SourceTree for example. I need to dive in the specific cause of this,  @veewee is this something you still would like to have in the GrumPHP repository? Or maybe because of GIT 2.x it isn't needed anymore?. Hi @veewee,\nDid some research, and you're 100% right. There wan't any config for that specific task, so it never dit anything, which is kinda weird...\n@cafferata  do you still have an specific use case for this problem?. @tifabien Fixed!\n. ",
    "Yerlix": "This still does not work after updating. \nA new file with dpm('test') triggers an error on phpcs, while an existing file does not\n. Turns out that GrumPHP only checks .php files while I need it to check .module and .inc files.\n. ",
    "flyke": "@Yerlix add .module and .inc files in your grumphp.yml file:\n\n tasks:\n    phpcs:\n        standard: vendor/drupal/coder/coder_sniffer/Drupal/\n        ignore_patterns:\n          - cfg/\n          - libraries/\n        triggered_by:\n          - php\n          - module\n          - inc.\n\n",
    "DnD-Merlin": "Yes I think this might be the right solution !\nOK great I will take a look at this loggers.\nThank you !\n. ",
    "spekulatius": "Its just a little clean up - nothing really important indeed. I (and probably some others) prefer clean and structured code (and configurations).\n. ",
    "Miljar": "This does not solve the problem actually, but at least code that is not yet staged would not be checked, as it is not part of the staged version of the given file.\n. I have updated to v0.8.0 but I receive errors when I try to test this:\nshell\nReapplying unstaged changes from stash.\nThe stashed changes could not be applied. Please run `git stash pop` manually!More info: exception 'Gitonomy\\Git\\Exception\\ProcessException' with message 'Error while running git command:\n'git' '--git-dir' '/path/to/my/project/.git' '--work-tree' '/path/to/my/project' 'stash' 'pop' '--quiet'\nIn my source code, I then get git markers for merge conflicts:\n``` php\n<<<<<<< Updated upstream\n=======\n    }\npublic function tralala()\n{\n\n\n\n\n\n\n\n\nStashed changes\n```\n\n\n\n\n\n\n\nThis is how I tested:\n- Added file in git (add & commit)\n- updated file: wrote method which is supposed to pass PHPCS and one which should not pass it\n- git add -p and only add the hunks for the passing method\n- git commit -m \"Test commit\"\n. Why mess with my workspace? When stashing, the checks will still happen on new unstaged files, since these are not stashed.\nAnother solution would be to checkout the changes in another folder and perform the checks on those files, like in the script from my original post:\n``` shell\nthis is the magic:\nretrieve all files in staging area that are added, modified or renamed\nbut no deletions etc\nFILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )\n```\nThen loop over those files and check those files against the checkers.\n. @veewee I have thought about it, and I don't think that the current solution is good enough. At the very least, there should be an option to turn it off, because I don't like it when tools mess with my workspace by stash popping & pushing. If something goes wrong, who knows what I have to do to restore the situation.\nYou worry that in big projects the copying of the files will be slow. I can only see that as a problem when you try to commit a lot of big blobs. Like a folder with a database dump or a folder with images. I have not really tested this situation so I cannot confirm nor deny this. However, you could make this smart by allowing to add a global ignore pattern for GrumPHP where you could add *.jpg, *.sql, *.json, *.bson and such. Only files not matching the patterns should be checked.\n. It's a tough one :)\nFor stuff like linters and phpcs, phpmd, the copy approach should work fairly well, without many problems.\nBut things like phpunit/behat/phpspec would indeed be more difficult because of the autoloading and dependencies on vendors.\n. ",
    "ibrambe": "This seems to work indeed:\n<?php var_dump('ok');\nbut in my testfile, there were some new lines between the opening tag and the var_dump function and that seems to be the problem:\n```\n<?php\nvar_dump('ok')\n```\n. @veewee Thanks!\n. ",
    "Anahkiasen": "Currently doing this but it's a bit counter-intuitive:\nyaml\nphpcs:\n    standard: \"phpcs.xml\"\n. It is, what I meant is it requires extra configuration whereas when I run the tool I just do $ phpcs. But this issue was more on the subject of whether it would be beneficial to add a way to remove default arguments set on the tools, like standard: null or something like that?\n. Had missed your message. PHPCS does default to the PEAR standard if no standard is passed but it also defaults to reading the phpcs.xml file if present, in which you can specify which standard to use, is what I meant. Thus forcing the user to pass a standard might be counterintuitive as if in your phpcs.xml you specify standard A but Grumphp specifies PSR2 behind your back, you'll get errors you might have disabled, etc\n. Could Grumphp recognize if the custom script starts with \"run \"? It's always either going to or not going to anyway no?. Seems like it does yeah. ",
    "countless-integers": "This would explain why I'm getting only ascii art in my output and empty lines where the actual errors are supposed to be...\n. ",
    "WyriHaximus": "I've fixed the file_exists and trailing slash remarks. The preset folders, do you want that in this PR, or do you want me to file another? Personally doing it in this makes the most sense, I'll add the ones from my blog post.\n. Made the changes. About the vagrant hooks, I copied the ones over we use now. But would it be more desirable to use this instead? (Need to test them first though.)\n``` bash\n!/bin/sh\nvagrant ssh --command \"(cd \"${HOOK_EXEC_PATH}\" && exec $(HOOK_COMMAND) '--skip-success-output')\"\n``\n. As long as you configuregrumphp.ymlcorrectly it shouldn't matter and work for the 80%. If users need anything special they can copy them and write their own using thehooks_dirparameter\n. Reverted the path change and added a bit of docs for when using vagrant. Not sure if it is sufficient though\n. Awesome, thanks :+1: \n. Working on the spec, but the Symfony Filesystem component only does basic operations and no file reading. Any suggestions to make that testable? Or is injecting a absolute path the a xml file to test against the way to go?\n. Yeah I''ll dive into it again soon :+1: \n. A bit later then intended I've updated the PR\n. Awesome, you're welcome :D!\n. This changes makes this method wrong by default. But it is the easiest way to test changing to absolute paths without doing a full refactor right away\n. Noticed that when looking into theclover.xmlfiles. There is a rootmetrics` summing everything up/\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. Injecting the filesystem directly into the task now. Should I leave this method here and make a spec for it or remove it?\n. \ud83d\udc4d\n. ",
    "kvdnberg": "Thanks @veewee for your feedback.\nI know that using -n will circumvent grumphp, and that would be a way for a dev to get around it, but with git commit -a the circumvention is not intentional, particularly because GrumPHP will show the \"All good\" message, the dev will assume the commit is checked. \nI will see if I can figure out a way to select the files properly on a -a commit.\n. Hi @veewee,\nThere is something strange about the way GrumPHP executes the git diff it would seem. If I run the exact same diff command in the pre-commit hook script itself, the changes are there on a git commit -a. Any ideas why this might be? \n./.git/hooks/pre-commit:\ngit diff -r -p -m -M --full-index --staged\n. I have been searching a lot for a way to at least identify that we are dealing with a git commit -a instead of a git commit inside the pre-commit hook but it haven't been able to find anything yet. I figured this would be the easiest way to let GrumPHP know that in this case the unstaged files needs to be taken into account. An alternative would be passing the diff from the pre-commit hook script but this would be quite messy I guess. I still want to try and figure something out to fix this but at the moment I am letting it rest while working on other things, so if anyone has insights, ideas, ..... \n. Thanks for your reply.\nThe /vagrant ends up in the hook when installing or updating grumphp using composer (inside vagrant). I believe it runs git:init as a post install cmd? Somehow that ends up having the wrong dir. This happened in a previous version (without the hooks_preset) as well. \nI understand your objection to the fix.\n- Edit * never mind, our bashrc apparently killed before it got to the line at the end of the file in case of --command, adding it to the top fixed the problem. \n. Updated the ticket to reflect the /vagrant bug during composer install/update\n. ",
    "jyggen": "Cool! Will definitely use this! :)\nMy colleague and I have actually been discussing a similar task for a while, but instead of having the minimum coverage as a \"hard limit\" it would somehow remember the percentage between runs (on a per file basis) and fail when your coverage decreases for one or more files. Hopefully I get some time over to experiment with something like that soon, or does it sound crazy?\n. @veewee: Done :+1:\n. I've started on a PR for this, will hopefully submit it later today :+1:\n. I tried adding that option at first but the problem I faced with both --exclude and --names-exclude is that they only seem to work on sub-directories and files within the analyzed location, and since GrumPHP gives phpcpd a list of exact file locations those options seems to be simply ignored. \nRunning it on a specific file:\n``` shell\n$ ./vendor/bin/phpcpd --exclude=spec --exclude=vendor spec/GrumPHP/Task/PhpCsFixerSpec.php\nphpcpd 2.0.4 by Sebastian Bergmann.\nFound 1 exact clones with 20 duplicated lines in 1 files:\n\n/path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:87-107\n    /path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:113-133\n\n12.90% duplicated lines out of 155 total lines of code.\nTime: 30 ms, Memory: 4.00MB\n```\nRunning it on the root folder:\n``` shell\n$ ./vendor/bin/phpcpd --exclude=spec --exclude=vendor .\nphpcpd 2.0.4 by Sebastian Bergmann.\n0.00% duplicated lines out of 8668 total lines of code.\nTime: 79 ms, Memory: 8.00MB\n```\nHowever; I've pushed an implementation of an exclude option using FilesCollection (with some minor optimizations) instead of what's built into phpcpd. Does it seem like a good alternative or should I simply leave out an exclude option for now?\n. Correct. It only detects copy-pasted code between files added as parameters, so it's probably better to let the tool run on the complete codebase. Any pointers on how to make it do that?\n``` shell\n$ ./vendor/bin/phpcpd spec/GrumPHP/Task/PhpCsFixerSpec.php\nphpcpd 2.0.4 by Sebastian Bergmann.\nFound 1 exact clones with 20 duplicated lines in 1 files:\n\n/path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:87-107\n    /path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:113-133\n\n12.90% duplicated lines out of 155 total lines of code.\nTime: 31 ms, Memory: 4.00MB\n```\n``` shell\n$ ./vendor/bin/phpcpd spec/GrumPHP/Task/\nphpcpd 2.0.4 by Sebastian Bergmann.\nFound 3 exact clones with 120 duplicated lines in 2 files:\n\n\n/path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:87-107\n    /path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:113-133\n\n\n/path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:55-87\n    /path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerV2Spec.php:57-89\n\n\n/path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerSpec.php:86-154\n    /path/to/grumphp/spec/GrumPHP/Task/PhpCsFixerV2Spec.php:88-156\n\n\n3.61% duplicated lines out of 3327 total lines of code.\nTime: 80 ms, Memory: 6.00MB\n``\n. @veewee: Done.  I addedvendor` as the default exclude since I doubt anyone will ever want to find copy-pasted code in there. \n. @veewee: Sounds good to me. Implemented :)\n. That's fair, and I agree that it probably should be kept to avoid running it when no relevant files have been changed.\nI do believe --names is still necessary though for cases where people want to detect duplicated code in things that aren't .php files (like Drupal's .inc and .module), and since $files isn't used by the task (since we changed to scanning the entire source tree based on $config['directory']) it needs to be provided to the task in some other way, hence why --names is used.\n. @veewee: Fixed!\n. I changed the approach a bit to use GrumPHP's linter system instead (CI builds fail for some weird reason though, and the error output isn't really helping so not sure what's going on).\nAs for custom/undefined filters/functions/tags I don't think that's supported by the linter since those are registered by the user somewhere in their code. I'll check whether or not the linter crashes on those though. Maybe one option if we want to support this would be to make it configurable, but that requires the user to manually keep a list of filters/functions/tags in grumphp.yml up-to-date.\n. I updated the implementation to use Twig directly as well as adding some PHPUnit tests for the linter itself.\nSomething that's missing now though, which the linter package took care of, is handling undefined functions or tests. I guess there are three roads we can go down;\n1) Get the package maintainer to use less deprecated code and go back to that.\n2) Implement something similar ourselves.\n3) Force the user to define all custom things in their grumphp.yml.\n. Yeah, I agree with you. I'll open a issue over at asm89/twig-lint about the deprecated notices.\n. Will do! Here's the issue for reference: https://github.com/asm89/twig-lint/issues/31\n. Not really, no :(\n. Yeah, I saw that. I'll try to send a PR in the near future :). @veewee: Absolutely. Done! :+1:\n. I've pushed a refactor that uses a new AsyncProcessRunner. Let me know what you think.\n. Refactored it a bit and added some tests :+1:\n. Done and done!\n. It depends on what you want to match the regexps against really. File names? File contents? Commit messages?. When running ./vendor/bin/grumphp run all files in the repository are checked and during the pre-commit hook iIt depends on the task. Most tasks (afaik) only check changed files but some tasks (phpcpd for example) will scan the whole project since it wouldn't be that useful otherwise.. Use the --no-verify (-n) flag when you commit which bypasses the pre-commit and commit-msg hooks.. See #281.. The issue seems to be due to php7cc always returning exit code 0.. Not sure I can fix the current build error without making the passing environments fail instead. Catch 22 :)\n```\nFILE: /home/travis/build/phpro/grumphp/src/Task/PhpStan.php\n\nFOUND 1 ERROR AFFECTING 1 LINE\n116 | ERROR | [x] Expected 0 spaces before opening parenthesis; 1\n     |       |     found\n\nPHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY\n`` . Took the liberty of bumpingsquizlabs/php_codesnifferto~2.4`. . Yes, you can give PHPStan specific files as well.\nI thought sending in specific files to PHPStan would prevent it from blooming into its full potential since, without analysing the files with classes and whatnot that your changed file depends on, it won't be able to detect some issues (and might complain that the class it depends on isn't even defined). However, this behaviour does not affect 3rd-party dependencies available through Composer's autoloader since PHPStan automatically analyses them - which makes me wonder if maybe PHPStan actually can autoload your referenced application classes as well. I need to verify this, because if that's the case it would solve a lot.\nThe reason why I think we need to send all files to PHPStan is because it's possible to get the behaviour we want (parse everything but only analyse some) by using a configuration file which have more advanced options than what's available as CLI arguments and options.\nI'll look into this further during the weekend :)\n. @Fuco1 Great, thanks! :). Yep! I'll try to finish up this PR later today.. @veewee Should be ready to go now! :+1:. The better option is probably to just inherit PSR-2 in your custom ruleset, like so:\nxml\n<?xml version=\"1.0\"?>\n<ruleset name=\"Custom Standard\">\n    <rule ref=\"PSR2\"/>\n    <!-- Add custom rules or tweak PSR-2 here -->\n</ruleset>. @veewee Yeah, that could work. I'll give it a try later this week :). Note that you can already configure the global timeout with process_timeout.. See #340.. I'm not sure what this is trying to fix because PHP 7.0 is still supported even if 2.1.x requires PHP 7.1+. If you include GrumPHP in a PHP 7.0 project Composer is smart enough to install 2.0.x while in a PHP 7.1 project it'll install 2.1.x (assuming that no other dependencies prevents this). This PR will prevent PHP 7.1+ projects from getting 2.1.x.. Fixed recently in https://github.com/phpro/grumphp/pull/356 :). As far as I understand he wants GrumPHP to fail only if it's due to one of the changed lines, so just because the file you edit have some CodeSniffer errors you'll still be able to commit your unrelated, CodeSniffer-approved change in that file.\nPersonally I think it's near impossible to do something like that, especially for all external tasks. Some tools do report the failing line, so it could be possible to filter on that, but I can imagine the line number not always being exact for multi-line definitions, function calls, arrays etc.. You need to install jakub-onderka/php-parallel-lint in order to use that task, as documented here.. @aloupfor The reason GrumPHP can't do it is because there's no option in PHPStan to exclude files directly from the command line. PHPStan currently only supports exclusion of files through the phpstan.neon file, and GrumPHP don't fiddle with other tools' config files (for good reason).. Sorry for my inactivity here, but hopefully the PR looks better now!\nWhether it's better to output everything to stdout instead of stderr is something worth discussing indeed, but the point of this PR is simply to normalize the usage. I've seen build systems where stdout and stderr are sent to different places/files, and it looks really weird when the task names end up in one place and \u2714 and \u2718 in another :). Not entirely sure why AppVeyor fails.. @veewee Done!. @veewee Done!. Any particular reason why it's not simply called regexps_exclude? Having the options named the same in GrumPHP as in the tool itself seems more user friendly/less confusing to me.. What does not work exactly? I've been running GrumPHP on PHP 7 and above for ages.. #482 is about dropping 5.6 support and using PHP 7.0 features in the codebase, but running GrumPHP on PHP 7.0 is already supported (as seen on Travis). So saying \"but does not currently support PHP 7\" isn't true.. show_warnings was removed in GrumPHP 0.14.0, use warning_severity instead.. What if you run ./vendor/bin/grumphp run instead? ./vendor/bin/grumphp git:pre-commit only check files reported as changed by git.. The pre-commit command, on most tasks, only checks the staged files that are about to be commited.. So what does git diff -r -p -m -M --full-index --staged output? Because, by the looks of it, the pre-commit command isn't even executing PHPCS due to no PHP files being staged (otherwise it would output the command being executed, as you can see in the run command output).. This is far from the only task that checks only changed files during the pre-commit command, and it's intended. There's no point in checking unchanged files since they've already gone through and passed the pre-commit command in the past. If you want to check all files in the project (during CI or if you change your PHPCS rules for example) run ./vendor/bin/grumphp run instead.. > \n\n@veewee how do I commit a new file in this same PR? I've never done that\n\nCommit the changes you want to make to the branch patch-2 on your fork.. Done!\n. You're absolutely right. Fixed! :)\n. Yep. Fixed :+1:\n. Fixed! Not my day today :P \n. Changed it, having the defaults of the CLI tool makes sense. As I wrote in the PR it's just a personal preference of mine, don't really care if the DB is in sync when I commit and on CI the DB is always migrated anyway :)\n.  Installing phptype/array (and through that scriptfusion/static-class) for one line of code seems a bit overkill to me. Using array_values($rules) !== $rules directly is way easier :). Ah, my bad. 0 is correct. Should be fixed now.. Nice catch! I looked into it and it turns out that PHPMND automatically adds vendor to the exclude list (as seen here), so it should be fine as-is.. Maybe use array_filter()?\nphp\n$lines = array_filter($lines, function ($line) {\n    return strpos($line, '#') !== 0;\n});. This line will throw a notice if index 0 is filtered away above.. ",
    "jverdeyen": "Hi @veewee !\nThe container also has git installed, but the cli doesn't support auto-complete etc.. The git commands also take ages since the repo is synced over nfs (filesystem os x -> vagrant (nfs) -> docker container).\nI currently haven't used the message checker to verify it really works.\nThe git_hooks_variables seems like a good idea!\nThe main concern is the re-usability of this feature, we are using a very specific way of developing in docker with docker-compose (http://tech.yappa.be/docker-php-development).\nI'm reviewing this with our dev team. For now we create commit hooks in our home folder and symlink them into projects.\nThanks for your input! I'll do some testing :)\n\ud83d\udc4d big up for grumPHP!\n. ",
    "schrapel": "docker exec doesn't make much sense here. We should create a docker container by building upon the official php cli image and do a docker run command against the build.\n. Personally I think tests should be run in a separate container for testing so it cannot be affected by your dev environment. Obviously the two environments would need to be the same but the test would likely have more dependencies\nI actually found that blog post yesterday, so thanks for that\n. ",
    "bircher": "as a workaround I added a shim to my system...\nphp on my host system is now: \n```bash\n!/bin/sh\ndocker exec -it $(docker-compose ps -q php) php \"$@\"\n```\nBut I would not be against grumphp being configurable to run in my container.. ",
    "peterjaap": "Ping @JeroenBoersma. Argh my search foo abandoned me.. Googlers, this is the latest version you can use with Magento 2.2.3 or older due to version restraints on some symfony package set by Magento;\ncomposer require --dev phpro/grumphp:0.14.2 phpstan/phpstan:0.8.5. ",
    "JeroenBoersma": "I've installed git inside my docker containers, so if I use git commit I make sure this happens from inside the project php container, this way the GrumPHP will also run in the correct environment.\nAt first, I had some trouble with passing variables for author(first- lastname) to the php container, what basically happens is that first- and lastname become 2 parameters for the GrumPHP command.\nBy running git commit inside the docker container this is all resolved.\nStil looking to fix the parameter breakdown inside the shell scripts.\n. ",
    "lephleg": "Any progress on this? I'd really like to avoid installing GrumPHP dependencies on my host.... ",
    "johnhout": "Sorry, Should have double checked ;)\n. Someone has info about this?. ",
    "jhuet": "Alright @veewee, i'll find some time to add these methods. For some reason i didn't realize this class was part of grumphp, i thought it was symfony's :)\n. @veewee, sorry i've been busy and i'm now on vacations. I'll try to finish this during the week-end of the 17th of september.\n. Hey @veewee, i finally pushed an updated version of this task using the 2 new methods addOptionalSeparatedArgument() and addSeparatedArgumentArray() that i added in ProcessArgumentsCollection.\nI also rebased all of this from the master branch.\n. Alright, i didn't realize there was a formatter involved to handle the json.\nAlso, I couldn't find the test i was missing for the new option, which one are you thinking of ?\nAs for the move to PSR-4 i'll do it last, Composer wouldn't easily let me reconfigure the autoload so i couldn't bother doing it right now :). Here's an example with just 1 diff, the output might be really huge if many diffs are found : \nRunning task 1/1: PhpCsFixerV2\n1) /var/www/project/src/Project.php (elseif)\n\n--- Original\n+++ New\n@@ @@\n                     $values[$serviceName] = $serviceConfig;\n-                } else if (isset($serviceConfig['factoryClassName'])) {\n+                } elseif (isset($serviceConfig['factoryClassName'])) {\n\nYou can fix all errors by running following commands:\n'/var/www/project/vendor/bin/php-cs-fixer' '--allow-risky=no' '--using-cache=yes' '--verbose' '--diff' 'fix' 'src/Project.php'\n\n. You're welcome :). The thing is that the actual parameter syntax for atoum is this one : atoum --bootstrap-file tests/units/bootstrap.php but if i use addOptionalArgument('--bootstrap-file %s', $config['bootstrap_file']), the Process will escape the whole argument making it be like : 'atoum' '--bootstrap-file tests/units/bootstrap.php' instead of 'atoum' '--bootstrap-file' 'tests/units/bootstrap.php'. I'm not sure how to do this without using addArgumentArrayWithSeparatedValue() which is why i kinda tricked around using it.\n. I have a similar problem here. For multiple arguments, the syntax is : atoum --directories dir1 dir2. If i use addOptionalArgument or like now addArgumentArrayWithSeparatedValue by \"faking\" a string, all directories are escaped in 1 parameter : 'atoum' '--directories' 'dir1 dir2'. If i use addArgumentArrayWithSeparatedValue with an actual array, escaping is ok but the parameter name is duplicated : 'atoum' '--directories' 'dir1' '--directories' 'dir2'. If you have any advice on how to do this, it'd be very much welcome :)\n. See my comments below.\n. Yes, Atoum allows to run tests for specific files but $files would have to be the test files. AFAIK, if a file that is unit tested is given to Atoum command line, it won't know which tests to execute. So i'm not sure it would be very usefull to use.\n. @veewee this test ?. ",
    "mgeoffray": "Hi @veewee,\nthank you for your quick answer !\nSo if I understand the best thing I have to do in my case to check only the /src/ directory is to use ignore_patterns to tell \"ignore everything that is not /src/\" ? \n. OK yes I see ! \nI will try to do this and make a pull request if that is working well.\nThank you !\n. Hi @veewee,\nno problem I will take a look this weekend.\nIs the option name whitelist_path_pattern is fine for you? I was not very inspired at the moment.\nThank you for your feedback.\n. I change parameter name to whitelist_patterns and make it usable as a regex array\n. Hi @veewee sorry for the late answer, I will take a look this week at your return.\nThanks\n. @veewee Yes sorry too much work beside, I prioritized it to correct your return quickly ;)\n. @jeremy-bruns Hi, yes I plan to watch it from the beginning of next week on Monday or Tuesday maximum. I will keep you in touch!\n. I worked on it this week I think I can deliver the fix this weekend ;)\n. Hi @veewee,\nsomeone is looking for your return today so I will keep you in touch quickly.\nAgain sorry for processing delay\n. Hi @veewee,\nwe have just finished to process your return let me know if that is all good for you ! ;)\n. @veewee OK great ! Thanks :)\n. Hi @veewee,\noh yes my bad, I did not aware of that difference so I test only with the run command !\nThank you for your quick answer, I close the issue ;). Hi @veewee ,\nYes that's right I agree on that. \nI will make these changes as soon as I can in this PR.\nThanks!. Hi @veewee ,\nperfect, using a third composer library may made the trick for us.\nthank you for your very quick answer! \nI am closing that issue. I think I can not use the Regex util because Symfony component remove the backslashes.\nIn the class \\GrumPHP\\Configuration\\Compiler\\TaskCompilerPass::process at line $configuration = $container->getParameter('tasks'); for the current configuration    \nyml\nwhitelist_pattern: \"^src\\/(.*)\"\nThe parsed configuration return \nphp\n\"whitelist_pattern\" => \"^src/(.*)\"\nSo the regex syntaxe is wrong and I have to manually escape\n. @veewee Yes you are right I refactor the path() function to call paths()\nI forgot this one array, I have changed it.\nWhat do you mean spec test, a new function testing it or just add the new line in \\spec\\GrumPHP\\Task\\PhpcsSpec::it_should_have_configurable_options ?\n. Hi @veewee,\nI have just added the function for paths() Spec test\n. ",
    "j3rrey": "+1 for whitelisting\n. Is anyone taking care of this ?\n. Hey @veewee,\nyes this works, thx!\nIt's new in the cs fixer v2 they changed parameters and rules now you use --rule=@PSR2 so on and to make it work with Grumphp you need to escape it as you said with another @ e.g. @@PSR2\nMy updated grumphp.yml:\n```\nparameters:\n    bin_dir: \"./vendor/bin\"\n    git_dir: \".\"\n    hooks_dir: ~\n    hooks_preset: local\n    stop_on_failure: false\n    ignore_unstaged_changes: false\n    process_async_limit: 10\n    process_async_wait: 1000\n    process_timeout: 60\n    ascii:\n        failed: grumphp-grumpy.txt\n        succeeded: grumphp-happy.txt\n    tasks:\n        git_blacklist:\n            keywords:\n                - \"die(\"\n                - \"var_dump(\"\n                - \"print_f(\"\n                - \"dump(\"\n                - \"dd(\"\n                - \"exit;\"\n            triggered_by: [\"php\"]\n        git_commit_message:\n            matchers:\n                - /SER-([0-9]*)/\n            case_insensitive: true\n            multiline: true\n            additional_modifiers: ''\n        git_conflict: ~\n        phpcsfixer2:\n            allow_risky: false\n            cache_file: ~\n            config: ~\n            rules: ['@@Symfony']\n            using_cache: false\n            path_mode: ~\n            verbose: true\n        phpmd:\n            exclude: []\n            ruleset: ['cleancode', 'codesize', 'naming']\n            triggered_by: [\"php\"]\n        phpparser:\n            ignore_patterns: []\n            kind: php7\n            triggered_by: [\"php\"]\n            visitors: {}\n        phpunit: ~\n        phpversion:\n            project: \"7.0\"\n        shell: ~\ntestsuites: []\nextensions: []\n\n```. Thanks for merging, being so active and helpful, when will you do the release ? . ",
    "mougrim": "@veewee you are right:\n``` sh\n$ ls -lah /bin/sh\nlrwxrwxrwx 1 root root 4 May 11  2014 /bin/sh -> dash\n$ apt-cache policy dash\ndash:\n  Installed: 0.5.7-4ubuntu1\n  Candidate: 0.5.7-4ubuntu1\n  Version table:\n *** 0.5.7-4ubuntu1 0\n        500 http://ru.archive.ubuntu.com/ubuntu/ trusty/main amd64 Packages\n        100 /var/lib/dpkg/status\n$ cat .git/hooks/pre-commit\n!/bin/sh\n\nRun the hook command.\nNote: this will be replaced by the real command during copy.\n\nFetch the GIT diff and format it as command input:\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\nprintf \"%s\" \"${DIFF}\"\nRun GrumPHP\n(cd \"./\" && echo \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\nValidate exit code of above command\nRC=$?\nif [ \"$RC\" != 0 ]; then\n  exit $RC;\nfi\nClean exit:\nexit 0;\n$ .git/hooks/pre-commit\ndiff --git a/demo/config/processor.php b/demo/config/processor.php\nindex 9c2398bc43d2d5b39e31a4bb6c759848ccbb02ac..1765b55520535db818babec86c5dc98e07d89ce6 100644\n--- a/demo/config/processor.php\n+++ b/demo/config/processor.php\n@@ -5,7 +5,7 @@ namespace MailRu\\QueueProcessor\\Demo\\config;\n return [\n     'testPool' => [\n         'servers' => [\n-            'mougrim-1215N',\n+            php_uname('n'), // the network node hostname for this pool\n         ],\n         'maxWorkersQty' => 2,\n         'queues' => [\ndiff --git a/demo/shared/logs/.gitignore b/demo/shared/logs/.gitignore\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..72e8ffc0db8aad71a934dd11e5968bd5109e54b4\n--- /dev/null\n+++ b/demo/shared/logs/.gitignore\n@@ -0,0 +1 @@\n+*\n[Gitonomy\\Git\\Exception\\RuntimeException]\n  Unable to find \"                         \n  \"                                          \ngit:pre-commit [--skip-success-output] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-c|--config [CONFIG]] [--] \n```\nbut it works for /bin/bash\n. @veewee, no, it doesn't work:\n``` sh\n$ DIFF=$(git diff -r -p -m -M --full-index --staged | cat)\n$ printf \"%s\" \"${DIFF}\"\ndiff --git a/demo/config/processor.php b/demo/config/processor.php\nindex 9c2398bc43d2d5b39e31a4bb6c759848ccbb02ac..1765b55520535db818babec86c5dc98e07d89ce6 100644\n--- a/demo/config/processor.php\n+++ b/demo/config/processor.php\n@@ -5,7 +5,7 @@ namespace MailRu\\QueueProcessor\\Demo\\config;\n return [\n     'testPool' => [\n         'servers' => [\n-            'mougrim-1215N',\n+            php_uname('n'), // the network node hostname for this pool\n         ],\n         'maxWorkersQty' => 2,\n         'queues' => [\ndiff --git a/demo/shared/logs/.gitignore b/demo/shared/logs/.gitignore\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..72e8ffc0db8aad71a934dd11e5968bd5109e54b4\n--- /dev/null\n+++ b/demo/shared/logs/.gitignore\n@@ -0,0 +1 @@\n+*\n$ (cd \"./\" && printf \"%s\" \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\n[Gitonomy\\Git\\Exception\\RuntimeException]\n  Unable to find \"                         \n  \"                                          \ngit:pre-commit [--skip-success-output] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-c|--config [CONFIG]] [--] \n```\nBut it works:\nsh\n$ (cd \"./\" && (git diff -r -p -m -M --full-index --staged | cat) | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/1: PhpCsFixer\n. @veewee, yes, it's working:\n``` sh\n$ DIFF=$(git diff -r -p -m -M --full-index --staged | cat)\n$ (cd \"./\" && printf \"%s\" \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\n[Gitonomy\\Git\\Exception\\RuntimeException]\n  Unable to find \"                         \n  \"                                          \ngit:pre-commit [--skip-success-output] [-h|--help] [-q|--quiet] [-v|vv|vvv|--verbose] [-V|--version] [--ansi] [--no-ansi] [-n|--no-interaction] [-c|--config [CONFIG]] [--] \n$ (cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:pre-commit' '--skip-success-output')\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/1: PhpCsFixer\n```\nThanks!\n. @veewee \nI can't install your commit.\nI made next changes in composer.json:\n-\"phpro/grumphp\": \"^0.9.1\",\n+\"phpro/grumphp\": \"dev-master#7e36e2c0eaaf8bf3045bedaf2a0aff5b8714ffeb\",\n...\n+    \"repositories\": [\n+        {\n+            \"type\": \"vcs\",\n+            \"url\": \"https://github.com/veewee/grumphp.git\"\n+        }\n``` sh\n$ php7.0 ~/bin/composer.phar update --verbose\n....\n  - Removing phpro/grumphp (v0.9.1)\n  - Installing phpro/grumphp (dev-master 7e36e2c)\n    Cloning 7e36e2c0eaaf8bf3045bedaf2a0aff5b8714ffeb\nWriting lock file\nGenerating autoload files\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\nPHP Fatal error:  Class 'Composer\\Factory' not found in /home/mougrim/Private/development/mougrim/queue-processor/vendor/phpro/grumphp/src/GrumPHP/Util/Composer.php on line 51\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\nPHP Fatal error:  Class 'Composer\\Factory' not found in /home/mougrim/Private/development/mougrim/queue-processor/vendor/phpro/grumphp/src/GrumPHP/Util/Composer.php on line 51\n```\n. @veewee thanks, it's working for local hooks\n. @veewee \nexcuse me, what about merge?\n. @veewee \nOh, no problems, sorry, have a nice holiday!\n. thanks!\n. ",
    "JTubex": "I have the same problem.\nReplacing echo \"${DIFF}\" with printf \"%s\" \"${DIFF}\" in .git/hooks/pre-commit also worked for me.\n. ",
    "whyte624": "\ud83d\udc4d \n. ",
    "Big-Shark": "tasks:\n        phpcsfixer2:\n            allow_risky: ~\n            cache_file: ~\n            config: ~\n            rules: ~\n            using_cache: ~\n            path_mode: ~\n            verbose: true\n. @veewee Hi, please check this, and write your decision.\n. @veewee Updated code style, and created a trait, check please.\n. @veewee 5.3? Really?\n. @veewee Recently, I have little time, and I would be happy if you could refactor this PR. Thanks.\n. @veewee thx\n. ",
    "Kanti": "Maybe your git color.ui config is set to always? \nUse color.ui true and it should work.\n. this is more a gitonomy/gitlib problem.\nhttps://github.com/gitonomy/gitlib/issues\nMaybe they over there could help out.\n. Do I need to change more in the PhpunitSpec.php file?\n. I will look at it.\n. I have fixed it. When will you (merge) release the 0.9.2?\n. I have changed some stuff and hope it is now clearer.\n. I have added some Checks.\nBut I don't understand how we would check,\nif the phpcbf command is what we expect it to be.\nWhat exactly do you mean by this?\n. > Sorry for the nitpicks, but I want to make sure that this code works exactly as it should :)\nThis is totally ok \n. I have found something strange. \nI have added This:\nphp\nvar_dump(get_class($container->get('grumphp.io')));\nin this line https://github.com/phpro/grumphp/blob/master/src/GrumPHP/Console/Application.php#L178\nI expect string(20) \"GrumPHP\\IO\\ConsoleIO\",\nbut I get string(17) \"GrumPHP\\IO\\NullIO\" printed.\nIs this a Bug? Could you fix it?\nedit*: The bug only occurs if grumphp is used in another Project.\nedit*2: And only if I use the new GitBlacklistFormatter.\nThe problem seams to be, \\Symfony\\Component\\DependencyInjection\\ContainerBuilder::get(\"grumphp.io\" ) is called before L178 is called.\nAnd than NullIO is used instead of the right ConsoleIO.\nThe first time get(\"grumphp.io\") is called the Stacktrace looks like this:\n```\n0 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(905): Symfony\\Component\\DependencyInjection\\ContainerBuilder->get('grumphp.io', 1)\n1 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(902): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Object(Symfony\\Component\\DependencyInjection\\Reference))\n2 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(827): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Array)\n3 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(419): Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService(Object(Symfony\\Component\\DependencyInjection\\Definition), 'formatter.git_b...')\n4 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(905): Symfony\\Component\\DependencyInjection\\ContainerBuilder->get('formatter.git_b...', 1)\n5 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(902): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Object(Symfony\\Component\\DependencyInjection\\Reference))\n6 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(827): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Array)\n7 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(419): Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService(Object(Symfony\\Component\\DependencyInjection\\Definition), 'task.git.blackl...')\n8 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(905): Symfony\\Component\\DependencyInjection\\ContainerBuilder->get('task.git.blackl...', 1)\n9 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(902): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Object(Symfony\\Component\\DependencyInjection\\Reference))\n10 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(1030): Symfony\\Component\\DependencyInjection\\ContainerBuilder->resolveServices(Array)\n11 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(861): Symfony\\Component\\DependencyInjection\\ContainerBuilder->callMethod(Object(GrumPHP\\Runner\\TaskRunner), Array)\n12 /var/www/grumphp/vendor/symfony/dependency-injection/ContainerBuilder.php(419): Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService(Object(Symfony\\Component\\DependencyInjection\\Definition), 'task_runner')\n13 /var/www/grumphp/src/GrumPHP/Console/Application.php(135): Symfony\\Component\\DependencyInjection\\ContainerBuilder->get('task_runner')\n14 /var/www/grumphp/vendor/symfony/console/Application.php(81): GrumPHP\\Console\\Application->getDefaultHelperSet()\n15 /var/www/grumphp/src/GrumPHP/Console/Application.php(60): Symfony\\Component\\Console\\Application->__construct('GrumPHP', '0.9.2')\n16 /var/www/grumphp/bin/grumphp(30): GrumPHP\\Console\\Application->__construct()\n17 {main}\n`\n. Hi @veewee can you look into the bug in the next days?\n. all good from my side. \ud83d\ude03 \n. We use GrumPHP within Jenkins for our production systems. But I get your point. I hope that you can take the time to implement these features. And than get version 1.0.0 out there soon.\n. Please Review! \ud83d\ude05 \n. added changes Please Review \ud83d\ude05\n. I will pick this one.\n. Please Review! \ud83d\ude05 \n. added changes Please Review \ud83d\ude05 \n. now composer_script uses the -d option from composer.\n. GrumPHP dose not autofix things for you.\nmore Information for this decision: #110\n. GrumPHP should only skip merge commits if there was no conflict. . Does the error recur if you runcomposer update`` again?\nSee #300. see here https://github.com/phpro/grumphp/blob/master/doc/tasks/phpcsfixer2.md \ud83d\ude04 . @veewee Could you plases release this bugfix. The bug is very disturbing\nThanks a lot!. Thank you @Snaver.\nThis is not what I meant.\nIt would be nice if the results of all the tasks run by grumphp are saved into a test-reports/grumphp-junit.xml file.\nNot the result of the unit tests. . Hmm ok I will look into the event listeners. Thanks a lot!. @Landerstraeten  I have changed it. At this point we cannot call getSuggestedFilesFromJson() because we don't have the Json.\n. Are there infinite loops possible?\n=> no, $lastPos will get bigger on every iteration.\n. ignore_patterns is duplicated here.. ",
    "nWidart": "I have/had this in my gitconfig file:\n[color]\n     ui = true\n. The output is the following:\n```\ndiff --git c/composer.json i/composer.json\nindex 2d1cef9d4a4dec5d3f18c7f87eb89eb2559202b2..7814c002ac39b65249575ef200225e65dc44f7b1 100644\n--- c/composer.json\n+++ i/composer.json\n@@ -29,7 +29,9 @@\n     \"mockery/mockery\": \"~0.9\",\n     \"orchestra/testbench\": \"^3.1|^3.2\",\n     \"satooshi/php-coveralls\": \"~1.0\",\n-    \"phpunit/phpcov\": \"2.\"\n+    \"phpunit/phpcov\": \"2.\",\n+    \"phpro/grumphp\": \"^0.9.1\",\n+    \"friendsofphp/php-cs-fixer\": \"^1.11\"\n   },\n   \"autoload\": {\n     \"psr-4\": {\ndiff --git c/grumphp.yml i/grumphp.yml\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..a68a3a9d8c2b4612420bee3a8d382a3bf16f9536\n--- /dev/null\n+++ i/grumphp.yml\n@@ -0,0 +1,6 @@\n+parameters:\n+    git_dir: .\n+    bin_dir: vendor/bin\n+    tasks:\n+      phpcsfixer:\n+        config_file: .php_cs\n```\nI do indeed have diff-so-fancy installed, could that be reason ?\n. In my .gitconfig file I commented out the pager option :\n[core]\n   autocrlf = input\n   editor = vim\n   excludesfile = ~/.yadr/git/gitignore\n   # pager = diff-so-fancy | less --tabs=4 -RFX\nBut it's still showing the same error.\n. Hm I see, that makes sense indeed.\nHow could I disable diff-so-fancy though, since I've already commented out the pager option.\nWhen I try to source the .gitconfig file, I'm getting the following error\n/Users/nicolaswidart/.gitconfig:3: no matches found: [color]\nWhich is odd since there I have:\n[color]\n   ui = true\nThanks!\n. I also removed diff-so-fancy that was installed with brew, using brew uninstall diff-so-fancy, but the error remains.\n. Hello,\nI'm using git version 2.9.0.\nThanks,\n. Hello,\nThanks to the help of @armababy it was a matter of setting the following:\ngit config --global diff.mnemonicprefix false\nWith this, it works..\n. Oh thanks, it does indeed not recur on second composer update.\nThanks for your response, & sorry for the duplicate issue.. Thanks again, that fixed it as well! . Hmm strange. There aren't many ways to remove a package, since I used composer remove.\nThis was the output:\n```\n ~/Sites/Asguard/Extra-Modules/blog-block-app-20/Modules/Blog \u2b80 2.0\u25cf\u25cf \u2b80 9m \u2b80 composer remove phpro/grumphp                                                                \u2b82\nphpro/grumphp could not be found in require but it is present in require-dev\nDo you want to remove it from require-dev [yes]? yes\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 8 updates, 19 removals\n  - Removing symfony/dependency-injection (v3.3.2)\n  - Removing psr/container (1.0.0)\n  - Removing symfony/config (v3.3.2)\nGrumPHP can not sniff your commits. Did you specify the correct git-dir?\n\nRemoving phpro/grumphp (v0.9.6)\nRemoving composer/composer (1.4.2)\nRemoving composer/ca-bundle (1.0.7)\nRemoving composer/semver (1.4.2)\nRemoving composer/spdx-licenses (1.1.6)\nRemoving justinrainbow/json-schema (5.2.1)\nRemoving seld/cli-prompt (1.0.3)\nRemoving seld/phar-utils (1.0.1)\nRemoving gitonomy/gitlib (v1.0.2)\nRemoving seld/jsonlint (1.6.0)\nRemoving symfony/options-resolver (v3.3.2)\nRemoving symfony/proxy-manager-bridge (v3.3.2)\nRemoving ocramius/proxy-manager (2.0.4)\nRemoving zendframework/zend-code (3.1.0)\nRemoving zendframework/zend-eventmanager (3.1.0)\nRemoving ocramius/package-versions (1.1.2)\nUpdating symfony/yaml (v3.3.2 => v3.3.5) Loading from cache\nUpdating monolog/monolog (1.22.1 => 1.23.0) Loading from cache\nUpdating symfony/debug (v3.3.2 => v3.3.5) Loading from cache\nUpdating symfony/console (v3.3.2 => v3.3.5) Loading from cache\nUpdating symfony/finder (v3.3.2 => v3.3.5) Loading from cache\nUpdating symfony/process (v3.3.2 => v3.3.5) Loading from cache\nUpdating symfony/event-dispatcher (v3.3.2 => v3.3.5) Loading from cache\nUpdating symfony/filesystem (v3.3.2 => v3.3.5) Loading from cache\nWriting lock file\nGenerating autoload files\n\n```\nAnd the error in the first message was right after this output. Trying to commit something, after removal.. well there is no grumphp binary anymore since the grumphp package was removed, hence the error. To me it looks like the removal process just didn't remove the 2 hooks you pointed out.. I've re-added grumphp and ran your command. This is the output:\nGrumPHP stopped sniffing your commits! Too bad ...\nDoes this mean that this should be called manually before removing the package?\nThanks,. Well it worked because I called it manually. not because it did it automatically on composer remove. Also it re-installed a newer version, I was on 0.9 before.. I just tested again with v0.11.6, it did remove the hooks on composer remove.\nI then installed version 0.9 specifically, removed it, and this time it did remove the hooks... So I'm confused as to why it didn't the first time around.\nAnyway, it's strange but works, I guess.\nThanks for your help! \ud83d\ude04 . ",
    "sc0rp10": "```\nsc0rp10 @ work:/tmp $ ./vendor/bin/parallel-lint foo.php bar.php\nPHP 7.0.9 | 10 parallel jobs\n.                                                            2/2 (100 %)\nChecked 2 files in 0 seconds\nNo syntax error found\n```\nYes, It is.\n. Hi, @veewee!\nIf it can help to you, I've recorded short screencast with this bug: https://cdn.weblab.pro/kc21n.mp4\n. And I simplified grumphp.yml only for one keyword, please pull, if you interested\n. oww, how strange! but thanks for help, you're really helped me!\n. Hi, guys!\nIn our company is there a standard (based on popular \"git flow\" model): commit message should start with the current branch name.\neg for branch FEAT-1234 commit messages should look like FEAT-1234 do some work.\nHow do you think, is there a case for an additional option for CommitMessage task?. ",
    "bvanderstee": "I'll be working on this issue. I've made the changes and added them to this PR.. Thanks for the tip and PR is updated.. Thanks for the tip, default value has been removed.. Added configuration examples for all possible configurations.. Yes I can.. ",
    "cdekok": "Ah yes forgot that it can be installed globally too, will have a look at the path settings didn't know about the before.\n. it looks like appveyor is failing on something called Chocolatey seems to be their problem.. You are right there was not really a reason only i liked it better with group ;) but better to keep the same name convention as the phpunit parameters. Oh it seems this is a documentation issue, it works on paths if i use MCPClientScripts in patterns it does work.. ",
    "Devolicious": "@veewee: done :)\n. Thanks for the quick response! :)\n. ",
    "jtgrimes": "Thanks for a kind answer to a dumb question.\nIf I could add a --debug flag which would echo $process->getCommandLine() in the task classes, would that be a welcome PR, or unnecessary?\n. The spec should run correctly now - I develop on Windows and forgot that the command line arguments are escaped differently on Linux. The test should be platform independent now.\n. The last arguments adds a newline at the end of the line, but the symfony ProgressBar class does't add a newline at the end of the task, so without it, we end up with ugly output like in the attached image.\n\nAnother option would be to add the newline to the $progressFormat property of Event\\Subscirber\\ProgressSubscriber - in that case, we'd have a blank line between every task, which wasn't something I wanted to do.\n. ",
    "bertptrs": "I think that covers all your suggestions. Note that this is the first time I've used phpspec I'm not 100% sure of what I did. I mostly copied the tests from PHPMD as they are rather similar.\n. Those should be implemented as well.\n. Looks fine to me. Go ahead.\n. The addOptionalArgument creates one argument, effectively sending the argument as \"-j 10\" rather than 2 arguments. The program requires it to be two seperate arguments.\n. ",
    "DannyvdSluijs": "@veewee phpdcd is no longer maintained. Are you sure on adding it ? \n. ",
    "pamil": "Does it make sense to use Humbug? Its results should be interpreted by a human as there are no computable metrics to tell whether they are good or bad.\n. ",
    "exussum12": "As a note. Humbug is deprecated now. This should be updated to infector . Updated and changed a test . Closing, I made changes locally to fix this but was running an outdated version. This version already works. I used the web editor so didnt notice it was already fixed :(. If the line is empty, [0] does not exist and will throw a warning. It would function the same, the first check was to avoid a warning. ",
    "kix": "Needs one more update, it says config_file not clover_file\n. @veewee, cool, thanks :)\n. Whoops, just found the specs, will fix those.\n. I've flipped the default, now it defaults always_execute to false, and the specs have been updated accordingly.\n. Sure, will update ASAP\n. ",
    "welcoMattic": "Any update on this PR? ;) . ",
    "poteirard": "I will try to fix the missing changes tonight. \nI'm a bit busy during the week, sorry for the inconveniences.\nEdit: oh, you've sent all the fix already. \ud83d\ude05 \n. Thank you for the help, the fix and the project. Keep on rocking \ud83e\udd18\n. Yes. Thank you @veewee .\nHowever I still think that we could add a conditional runner in this code to suit both possibilities, is this a bad idea?:\n```DIFF=$(git diff -r -p -m -M --full-index --staged | cat)\nRun GrumPHP\nIf vagrant isn't available run local run ????\nvagrant ssh --command '$(which sh)' << COMMANDS\n# Transfer the DIFF\n  DIFF=\\$(cat <<- 'GRUMPHP_DIFF_HEREDOC'\n    ${DIFF}\n    GRUMPHP_DIFF_HEREDOC\n  )\nprintf \"%s\\n\" \"\\${DIFF}\" | exec $(HOOK_COMMAND) '--ansi' '--skip-success-output'\nCOMMANDS```. I understand. Thank you again. And keep it rocking \ud83d\ude0e. Yes very well explained \ud83d\udc4d Thank you @veewee !. ",
    "Asuza": "What script is supposed to be run via npm?\n. ",
    "xero88": "Hi, \nThank you for your answer, the package ocramius/proxy-manager was missing\nIt's resolved.\nThank you !\nCheers\n. ",
    "phptek": "@veewee You say 5.5 isn't supported anymore, but what does removing file_get_contents() have to do with that? It's not deprecated in 5 or 7.. @veewee Thanks for the detailed explanation. All good :-). ",
    "newLoki": "@veewee Sorry for missing to respond.\nIMO than it must be an issue with our project structure I have to find.\nBut thanks for your support and the clarification.\nI will just close the pull request.. ",
    "pecavalheiro": "Hi @veewee,\nOk, I'll take a look at those hooks, see what I can do :smile: \nAbout the custom parameters\nparameters:\n    git_hook_variables:\n         DOCKER_CONTAINER: php\n         DOCKER_CONTAINER_VERSION: 7\n         DOCKER_VOLUME_DIRECTORY: /app/something\nI think that the only way to allow the user to set his own container/php version is to dynamically generate a Dockerfile, which then should be built in the user's environment. This works, but does not sounds right for me, because you can't predict incompatibilities between containers and package versions. You solve a problem, but create another one. \nMaybe a better ideia is having a set of default containers, for each needed setup/version with a specifig tag, like most repos in DockerHub (PHP DockerHub). What do you think?\n. I agree that having Dockerfiles in this repository is hard to maintain. It is possible to allow the user to define his own container, where grumphp will run, but then he (the user) will be 100% responsible for building a working container (this means installing php, all necessary extensions, installing grumphp and defining all paths), so we can just call it from an external hook. To make this easiar, we can provide a base Dockerfile, like this PR, so the user can change it according to its needs. How about that?. ",
    "Bilge": "I do not think this belongs to this repository. If you want to maintain a Docker container for a specific library, create a new repository, don't push it to the library's repository because it is outside the scope of that library to support external systems or usage scenarios.. File contents.\nOn 9 Jan 2017 23:24, \"Jonas Stendahl\" notifications@github.com wrote:\n\nIt depends on what you want to match the regexps against really. File\nnames? File contents? Commit messages?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpro/grumphp/issues/257#issuecomment-271440089, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAcuYgtaFChtepwREuZsw8H5fXX9iEApks5rQsGegaJpZM4Lexlb\n.\n. Do I understand the correct way to implement this is to write a custom task?. @Kanti Thank you. I suggest information gleaned from my recent round of questions be added to the documentation to make key decisions like this clear to all users.. Every parameter is supposed to be quoted. You don't have to \"clean\" anything. Also your comment has nothing to do with this (closed) issue so kindly refrain from further comment.. @veewee Shouldn't your wish list be present in the list of issues instead of just in your head?. Please note the YAML linter is broken and I have had to work around that issue for the build to pass. I have created a Symfony ticket to track the issue.. Yes it makes me feel like I'm a really valuable contributor and totally not just stats padding.. I will redo this PR later this evening. I think there are too many\nconflicts to rebase.\n\nOn 16 Jan 2017 14:56, \"Kanti\" notifications@github.com wrote:\n\n@Kanti approved this pull request.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpro/grumphp/pull/274#pullrequestreview-16822275,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAcuYjXHoTwPicvdxzTfBIcJFpqmvtvtks5rS4UhgaJpZM4Lj33d\n.\n. @veewee All done.. @veewee That's not a good idea. This will conflict with their PRs but the reverse\nis also true. It makes sense to merge whichever PR is ready whether it is\nmine or theirs because nothing is gained by waiting; if that was the case\ngit would be poorly designed, but it is not.\n\nAs it turns out, all I had to do was rebase after all; git figured out the\nrest, therefore that is all they will have to do. Hence you should merge\nwhichever PR is ready instead of waiting on unrelated PRs that haven't been\nupdated in months as you run the risk that I may be unavailable to update\nthis PR by that time.. Look, there's conflicting files again already.. So now what do we do? This is most perplexing, isn't it.. @veewee I rebased again in the hopes that you will merge this PR nextish.. If you're already committed to merging this next what is gained by waiting?\nThe command is git rebase upstream/master. It's that simple.. Why don't you just break it down into multiple invocations?\nOn 16 Jan 2017 07:50, \"Toon Verwerft\" notifications@github.com wrote:\n\nCurrently, that is intended behaviour. You can find additional information\nhere:\nhttps://github.com/phpro/grumphp/blob/master/src/\nGrumPHP/Util/Platform.php#L19\nhttps://support.microsoft.com/en-us/kb/830473\nThe problem is that the CLI input string on cmd.exe is limited to 8191\ncharacters. Tasks like phplint and phpcs contain the paths to the files\nthat are being checked. During a run command, the list of files wil exceed\nthis amount which results in some strange errors on windows.\nThat is why I've choosen to display the error message and mark the test as\nskipped.\nI would accept a PR which contains a better solution.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpro/grumphp/issues/275#issuecomment-272793881, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAcuYjNlR0Zn3IlfjKjAGkviIufMzozwks5rSyEngaJpZM4Lj4T_\n.\n. >The problem is only on Windows, so for other OS a split-up is not really necessary.\n\nI'm not sure that's true. That's what the xargs command was created for, and as it shows us, the typical Linux limit is very generous.\n\n$ xargs --show-limits\nPOSIX upper limit on argument length (this system): 2607529\nPOSIX smallest allowable upper limit on argument length (all systems): 4096\nMaximum length of command we could actually use: 2595666\nSize of command buffer we are actually using: 131072\n\nIt is quite possible you just haven't hit the 2MB command line limit in any of your projects or tests but this remains a dormant problem waiting to happen.. > it might be easier to just run the executables on all the files\nAbsolutely not, for the following reasons.\n\nA user should only have to fix issues in files they modified, not in files they did not. \nIn a very large project, such a scan could take a disproportionate amount of time to complete.. >There is no fix for this yet?\n\nWhy do you ask that like it could have just magically fixed itself? If you're not going to put the work in, nothing's going to happen.. >is this an issue with GrumPHP or an issue in all the tasks?\nI believe it's an issue with GrumPHP, since as demonstrated, the git:init command fails in the same way.\nConventional wisdom suggests realpath() should be avoided, if only because it does not work in PHARs. It is probable you will never ship GrumPHP as a PHAR since it is a Composer plugin, but avoiding realpath() might also help alleviate this issue.. OK but this issue should still remain open until the fix is tagged because I can't get it yet :cry: . Oh wait, there was no code change :rofl: . Thanks @jyggen :+1: . Closing because #292 is merged.. @veewee I think it does provide value to the project because I asked the very same question (#261) when I was starting out. However, I would not have gotten as far as a failing run because I wanted to know this before I start using it, therefore it should be in the documentation.\nHowever, even if it were clearly present in the documentation I do not think that necessarily precludes it from being printed at the end of a failed test run. This is still useful for those who miss it in the documentation or forget about it until they have a failure. For me, personally, I want to disable this notification to discourage my team for bypassing the checks, but that is my specific use-case, so I think an option is appropriate. \nNevertheless, if it is your decision to drop the line entirely I would find that satisfactory, too.. >So maybe we'll just leave it as is and close this one for now?\nWhy would that ever be a good solution? As mentioned, I'm agreeable to either removing the tip completely or adding an option to hide it (as in this PR). I am certainly not agreeable to leaving it in without any options to hide it!. I use PhpStorm 2016.3.2 (latest). Perhaps it is because I also have the PHP Annotations plugin installed. I recommend you install this plugin anyway.. Precisely how sure do you need me to be, exactly?\n\n. I would love to help but it's difficult to diagnose why it is not working for you, remotely. According to this post the feature has been available natively since 2011.. Tests are passing and docs are written. Only thing left is to add some new tests for this new feature.. @veewee You can commit directly to my branch, but I guess since you pasted the code you don't mind if I commit it myself? I will see if I can base a JSON test on your sample.. > I thinnk the solution is to keep the path relatively.\n@veewee That solution doesn't make sense because the relative path is causing the problem. If you think we need to keep the config parameter in the git hook, either the path needs to be absolute or the relative path resolution needs to be fixed.\nHowever, I think it's strictly incorrect to have the config parameter specified in the git hook because any project that needs a custom config location, no matter how \"exotic\", can simply specify it in the Composer config. Why does it need to be duplicate in the git hook? Furthermore, why does the relative path resolution specified on the command line use a different (broken?) resolver to the one specified in the Composer \"extra\" config?. @veewee Unfortunately I do not understand your reply at all. Did you mean to leave this on a different ticket? The second issue isn't really a GrumPHP issue; it's a Symfony/Process issue as specified in the related tickets section.\nRegarding the first issue, symlinking isn't necessary because we can just copy the grumphp.yml.dist to grumphp.yml and set bin_dir: bin. This tends to be a better solution because we probably want to customize other settings anyway and symlinking tends to be hard on Windows.. Ah, I think I understand now!\n\nThe way I see it, grumphp should be configured during the installation of composer withouth any manual actions.\n\nAre you thinking in terms of a Composer script event, such as post-install-cmd?. It certainly is a solution to the problem. Empirically, I have verified it works and cannot find any problems. If this does not work, what exactly doesn't work? Certainly we know that whatever it is, tests are no more aware of it than I am.. @veewee I have forked GrumPHP for my organization, but once this is merged, we can switch back to mainline GrumPHP. I'm sure you hadn't forgotten, but just in case, please don't forget about this one!. Thanks for the update. This is the only outstanding issue preventing us from switching back to the original GrumPHP distribution.. >Can every cli environment handle these special characters?\nIf that wasn't an issue when you decided to paste a grumpy old man into people's consoles I don't see why it would be an issue now.. @veewee It seems you will need to manually restart the AppVeyor builds because windows.php.net was down over the weekend.. @Kanti Why? A merge commit brings in other people's work for which you are not responsible.. My company frowns upon rebases because it rewrites history. If there are already comments and/or reviews on the PR they become invalidated by the rebase. In such cases a merge is preferred, and in such cases, we do not want GrumPHP to validate the merge commit.\nHowever, it seems such a feature is divisive so it is clear that if we are going to implement it, it should be optional.. Presently I haven't put any thought into how the configuration should look, I just wanted to open the discussion on whether this is something we want to support.. This would have been better if it could be specified with configuration only, without having to write redundant classes in PHP.. Some of those peoples seem to be the same peoples so I'd like to conjecture that, in fact, the total number of peoples surveyed may be less than the purported 100 you so claim.. >Can you tell me in which context the git:commit-msg was hanging?\nRunning it from the command line, e.g. bin/grumphp git:commit-msg myfile, as shown in #324.. There was no exception, it just hangs.\nOn 30 Jun 2017 06:26, \"Toon Verwerft\" notifications@github.com wrote:\n\nClosed #322 https://github.com/phpro/grumphp/pull/322.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/phpro/grumphp/pull/322#event-1145395632, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAcuYnvzwGjwlu7OTDuFhMVG9BwEZyIGks5sJIcJgaJpZM4MSyKN\n.\n. I think it is fine as is. That message means rule index zero was matched, which is correct. If the user does not like this they should set a more appropriate description, which should be encouraged because regex patterns in an error message are of limited use without an accompanying description.. What do you want from me?. GrumPHP's job is to check changed files on commit. If you want to check all files you just provided the command to do this. The point being, you either need to check all files manually, or automatically but using some trigger other than the commit hook (e.g. your CI process). Recommend closing as invalid.. I wanted to write this as an else statement, but the PhpParser task wouldn't let me!. I added this guard to maintain the same logic, but reading it does not make sense to me. Surely the shouldSkipSuccessOutput flag should only control whether or not we printSuccessMessage. Why does it also determine whether we print warnings?. Ah, this is an error. At first I thought I would not be able to support the old list-style rule configuration, but then I wrote the array helper library (phptype/array) to specifically support backwards-compatibility, so this change can be reverted! Nice spot :+1: . Yes. I wrote it specifically for this PR! It provides the ArrayType::isMap used later in this PR.. Perhaps we can remove the array check in that case.\n\nSince this is a cutting-edge feature, they have not provided any documentation yet, so the best I can do is link the PR that introduced the change, which I also linked from the issue requesting this feature (#288).. The trade-off is loss of clarity and single-responsibility. However, if it is preferred, I can make the change you suggest and substitute that code directly in lieu of this dependency. @veewee Is that what you want?. Object callisthenics, or whateverthefuck, complains about this. I am not used to being forbidden from writing else statements. How \"else\" should I write this?. Why is a ternary statement better than an else statement?. I can't say I'm in complete agreement. As a consequence of \"calisthenics\" we've duplicated the comma-delimiting code. I'd take the mental depression of having to comprehend an else statement over outright code duplication in any of my projects, but this is your project, and I respect your decision.. Do you really think this is a better name? This method does not return error messages, it returns an error code. I believe printErrorMessages is still the correct name for this method.. I think it is a better design to let the caller manage the return code since this method's return value is invariant otherwise. What do you think?. This makes the commit message visually distinguishable from the error output since it is not really part of the error. Furthermore, the overuse of red becomes hard to read at some point.. I'm not sure what you mean or how to do this.. ",
    "mattgaviota": "Thanks for your fast answer. I already made it work.. ",
    "Grafikart": "Fixed everything ,). I'm not sure on this syntax still. Is there a way to add option automatically or do I have to use \"addOptionalArgument\" for every option ?. Fixed. I don't know why this review stays visible I fixed the problem :(. ",
    "ptondereau": "@veewee thank you for your feedback, I'll fix all of this plus add some more advanced parameters this weekend.. @veewee good to me. @veewee another check please. brunch_file doesn't exist anymore since 2.0, i'll remove it.. It should result to $ brunch build --env production --> --env 'production'. ",
    "sn0opr": "Hi @veewee I did the same thing #219 , I required the ocramius/proxy-manager package and it worked. But it's strange, it's already required by grumphp\nAdditional thing, before I require proxy-manager, I required grumphp globally, and it worked without any problem. @veewee When I installed it globally it worked as expected. @veewee best thing is to try with a symfony 2.8 project. @veewee thank you for the great tool . ",
    "Henk8": "PHP 5.6.29, git 2.11.0.0 and the latest build of grumphp.\nI've tried performed the following steps:\n\nvi new_file.php\nadded <?php echo \"Test\"; and write the changes\ngit add .\ngit commit -a\nAdded the comment \"Test\"\nrm new_file.php\ngit commit -a\n\nThen I got the error\n. Thanks for looking in to it. ",
    "cedricdo": "My bad, i found the origin of the issue. It has nothing to do with grumphp.\nAs i'm using vagrant, i got my depencies in linux in vagrant so composer didn't generate the vendor/bin/.bat. But since my IDE is running on windows, it was looking for these .bat files.\nThanks for this nice project!. Thanks, i'll take a look at this.. ",
    "Mte90": "I can try to work on this one, any suggestions where to start to hack?\nI guess that require an installation part to inject the hooks in the git folder.\n. started to experiment with #258. that the pr is waiting the last final approval.\nAs I see now the unit tests got an errore but I have no time anymore to continue to work on that so if someone can do a fix and do a pr on pr I think that everything is done.. Ok so:\n\nI need to find a commit to find the list of file before a push\nI was thinking that the best way to execute a task only on an hook is to use commit_msg and put in that the task like in my example or add a new parameter in every task to specify when run the task\nWhat is the custom testsuite syntax? maybe an example so I can try it\n\nFor the other feedback I will look it on next because actually is working and I don't know all the code of grumphp.\n. Ok so for the testsuits it's like in the example of my first comment so the idea is to have something like this:\nparameters:\n    git_dir: .\n    bin_dir: vendor/bin\n    ignore_unstaged_changes: false\n    tasks: \n        codeception:\n            config_file: ~\n            fail_fast: false\n            suite: ~\n            test: ~\n        grunt: ~\n    testsuites:\n        git_pre_commit:\n            tasks:\n                - grunt\n        git_pre_push:\n            tasks: \n                - codeception\nIn that way in tasks we define the task and in the hook specify when execute them.. Uhm as I can see codeception it is not executed on pre-push the run method is not executed when is pre-push, but now there is also the new prepushcontext in all the tasks.. Ok the problem is that the content don't have the files , I think that the problem is the other issue mentioned above. Gitlib don't have a method to get the list of file waiting for a push, so I used git, the problem is how to get the context on ChangeFiles.php for locateFromGitRepository so in that way the code can executed only in that run.\nNow grumphp it's working on push :-D. I fixed few errors, but few of them are based of my no-complete code on ChangedFiles.php, because I not found the way to get the context in that method.. In any case that script use a remote for a comparison so we need to accept that is not possible to do a check without a remote. I didn't find a way to detect if the remote is empty or exist.. If remote is ahead it's not possible to do the push because there are difference between repos so the developer need to fix them before to push so for me it's not an our problem.\nWith origin\\<branch name> we have an alias to the remote one so it's not a problem to find the remote and do a diff.\nSo we accept that is not possible to do it without a remote we can use the actual code of this pr else we need to improve the code and check if a remote exist if not get a list of all the file in the commits (that is not difficult). So in any case we can execute the hook and grumphp without any troubles.. All interesting question and I think that the easiest approach probably will be:\n\ndetect from the command itself of the push git push origin master that can help for the 1, 2, 3 and 5 points\nfor 4 and 7 need investigation\nfor 6 I already use the command for testing and actually work\n\nSo I will start work on how to get in the hook, the remote of the push with the branch in that way we can do our checks and see for the next points.. Ok I find it a way for git in the hook to get the remote and branch and do a check with that.\nThe new hook code execute next grumphp with the files changed.\nIf the branch not exist locally the hook is not executed and I have to check if the branch exist locally and not remotely what happen.\nNow the problem is the grumphp pre-push command, without specify what is the remote and the branch I think we can use the origin/master. Actually the php code miss the part to check if the user added that parameter (origin master) in the command.\nAn user can have different branch not pushed so the easiest way is to ask to the user to specify if run the command directly without use the git hook.. I can move to psr-4 but I have no idea how to check if the code where needs checks.\nThe only things that is missing right now is https://github.com/phpro/grumphp/pull/258#discussion_r96579032 to complete the pr.. The pr is complete, remain only tests (that I have already done for the hook and for the git:pre-push command).\nAnd finally fix to PSR-4.. any suggestions for psr-4? there is a tool for that?. rebase done without errors on git :-). Any chance for this feature?. Very sad for it but I understand the problem but it is possible to give it more priority on this?. Unlucky I have no time anymore to work on this feature but I need it a lot.\nActually I am using a bash script that execute what I need manually.. The copy and paste of the command is very uncomfortable because eveyr parameter and command is wrapped inside '  so I have to clean manually. \nMaybe a command like -fix  can be helpful if run the phpcbf automatically.. Why is not possible to do a git add with the list of files? GrumPHP already get a list of files of this commit so execute it before the grumphp doesn't be so much difficult to implement.\nThe tools run of course with filesystem so this behaviour should be the right one because we want to commit the files in the actual status.\nMaybe add an alert that the files are changed and not committed can be another solution.\nActually grumphp is pretty annoying for this behaviour of re-add manually the files instead do it automatically, maybe with a flag this behaviour can be fixed.. Good point, so if I want to add in any case that feature?\nI can use https://github.com/phpro/grumphp/blob/master/doc/tasks/shell.md?\nThis is executed before the others? I can do it a bash script that add the new code on git so I will avoid this behaviour issues.. I discovered the command (https://stacktoheap.com/blog/2016/01/02/git-add-only-files-already-staged/):\ngit update-index --again \nThis do the magic that auto add the file in staging before the commit, now I am working to adding as a shell script.. shell:\n            metadata:\n                priority: 10\n            scripts: \n                - [\"'git update-index --again'\"]\n            triggered_by: ['php','json','yml']\nSeems doesn't work because the shell is expecting a shell script to parse and not a unix command. Ok I created a bash script with this command in /usr/local/bin and added the absolute path to the script in grumphp and I resolved :-D\nI nice Grumphp trick, maybe is perfect to the wiki because I was not the first one asking for this feature. I was thinking (the usual idea that become when you are doing something boring) the grumphp has the -n flag to execute the commit without grumphp, an idea can another command that execute the command that I mentioned and will be git to do the magic with avoiding of many issue and less code.. I can confirm the issue on my projects https://github.com/WPBP/WordPress-Plugin-Boilerplate-Powered/issues/132 from different users and is happening also locally for me.\nPrefer stable in composer fix the issue.. git diff --name-only origin/master..HEAD this show all the file changed in the commit not yet pushed. The problem is that require to specify the branch.. Ok I found the right one GIT_CURRENT_BRANCH=$(git name-rev --name-only HEAD) && git diff --name-only origin/$GIT_CURRENT_BRANCH..HEAD --oneline in that way get the actual branch. for this one I have no idea what to do XD. I was thinking to committed the file but seems not, okay I will do asap.. so line 9?. good point, the problem that we need a point for to the difference.\nprobably it's better to find another command. ok this one is blocking, after find a better way i will fix that, the vagrant one and also the code inside the changedfiles.php. ok with git rev-parse HEAD it's possible to get the latest commit in queue but I don't find a way to get the latest commit pushed.\nThe problem is that all the command require to have a remote reference so in any case that hook will not work without a first commit online.. created.. done.. the diff contain all the files for the push so is not executed multiple times. yep this code require improvements :-). right. you are right -.-', I will fix it :-). there is a way to get the parameters in the cli? \nbecause I was thinking that when someone do grumphp pre-push we need the other two parameter, the remote and the branch.. any suggestions for that? . for us is not enough because we need to know what is the remote branch, a repo can have different remote so I think that we needto ask to them only if use grumphp pre-push because on hook we already know that info.. ok, when someone execute the command I will autodetect :-). Grumphp internally base everything on the git diff that parse to find all the files involved in the commit/push so I dont' think that actually is the best choice.\nMy hope is to have that pr integrated and start to work on this edge-cases that during my development doesn't happened.. ok so how suggest to change the script for the hook? The output is the same like actually?. Uhm means a rewrite of the local pr and I have no time for it, but I am open for a pr on mine to speed the integration of this feature.. Maybe create a new branch of grumphp where work on this feature can be an idea with a roadmap, starting from a refactoring of this pr.. ",
    "tworzenieweb": "First of all thanks for introducing this feature. What is the current state of work?. ",
    "nicolasleborgne": "Hi, sorry for starting submitting this PR with some defects ... \nNow the code is working good, but CI tells to not use elseif or else statement, is this forbidden ? Does that mean I have to use only simple if statement ?. Hi @veewee, thanks for your reply, I understand your position.\nI think I will try to add this version to the grumphp-extra-tasks repo you have mentioned.\nI am also interested by your thought. I like the idea to tell the developer that docs are not up-to-date and fails the commit. But if we implement this, the developer will check the non-staged changes, staged the doc, and retry his commit. But as the first time, the commit will trigger the phpdoc generation, and we will have some new non-staged changes in the phpdoc folder, and commit will fail again, so the developer will be blocked.\nMaybe we can manage that by triggering phpdoc only if we have in the commit :\n some php file in relation with the directory or filename phpdoc parameters\n no files from the phpdoc target_folder\nWhat do you think about that ?. Hi @veewee,\nYes, it would be nice. For now, this mode does not exist in phpdoc.\nI completely understand that. Currently I keep this task as custom task in my projects and maybe I will try to add it to https://github.com/wearejust/grumphp-extra-tasks.\nAnyway, thanks for your help :) . As far as i know there is no grumphp task to do this. This task will just generate phpdocs. If that interests you anyway, you can find it on grumphp-extra-tasks.. ",
    "vyshkant": "AFAIU, this is not about \"check for missing phpdoc-comments\"? Is there a task to check if all methods and properties have a phpdoc comment?. The only reason is that the path don't have to be a regexp. So it's also confusing to set raw string to the \"regexps_exclude\" field.\nIn addition, I've opened an issue on phpcpd repository in which I suggested renaming this option (https://github.com/sebastianbergmann/phpcpd/issues/159). Moreover: symfony/maker-bundle v1.5.0 requires nikic/php-parser ^4.0.\nsymfony/maker-bundle is provided by default with Symfony 4.0.\nIn other words, phpparser task is incompatible with Symfony 4, so https://github.com/phpro/grumphp/issues/423 need to be reopened.\n. @Landerstraeten can you please release this fix?. > For what reason can't you use the metadata tag?\nYes I can use the metadata tag. But for now the default order (when not using the metadata tag) is completely arbitrary from the user's point of view (the user does know anything about this order). And if tasks declaration order is taken into account, then the resulting order will be clear to the user.. > We try to avoid these if statements inside the tasks. Can you move this nullable argument to a new $arguments->add* method?\n@veewee Done!. @Landerstraeten sure! Don't go anywhere, I'll fix it right now :). ",
    "cacahouwete": "sh\n$ git -c core.quotepath=false commit --only -m \"up\" -- src/AppBundle/AppBundle.php\nI have the following output :\n[2017-01-03 11:29:37] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2017-01-03 11:29:37] GrumPHP.DEBUG: last command (diff) duration: 203.02ms [] []\n[2017-01-03 11:29:37] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2017-01-03 11:29:37] GrumPHP.DEBUG: last command (diff) output:  [] []\nIf I git add before I have the following output\n[2017-01-03 11:31:37] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2017-01-03 11:31:37] GrumPHP.DEBUG: last command (diff) duration: 202.49ms [] []\n[2017-01-03 11:31:37] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2017-01-03 11:31:37] GrumPHP.DEBUG: last command (diff) output: diff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php index 3e15bc56c939fe70070d8e108e980b78087fa0c7..250422a03ea62d8a0f95daaf92372e0ac8844e3c 100644 --- a/src/AppBundle/AppBundle.php +++ b/src/AppBundle/AppBundle.php @@ -13,6 +13,8 @@ class AppBundle extends Bundle       +     +        [] []. First test without git add\n====\nIn the file I add some return lines to raise an error with phpcs\n1) Bofore commit:\n```sh\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n    modified:   src/AppBundle/AppBundle.php\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nsh\n$ git diff\ndiff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php\nindex 129cbf3..b18869d 100644\n--- a/src/AppBundle/AppBundle.php\n+++ b/src/AppBundle/AppBundle.php\n@@ -10,4 +10,7 @@ use Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\nclass AppBundle extends Bundle\n {\n+\n+\n+\n }\n```\n2) Run commit :\nsh\n$ git -c core.quotepath=false commit --only -m \"up\" -- src/AppBundle/AppBundle.php\n[2017-01-03 13:55:19] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) duration: 203.87ms [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2017-01-03 13:55:20] GrumPHP.DEBUG: last command (diff) output:  [] []\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/7: Composer\nRunning task 2/7: Blacklist\nRunning task 3/7: Phpcs\nRunning task 4/7: PhpMd\nRunning task 5/7: PhpParser\nRunning task 6/7: Phpunit\nRunning task 7/7: SecurityChecker\nGrumPHP detected a commit-msg command.\nGrumPHP is sniffing your code!\n                \\\\\\ ,\n                 \\ `|\n                  ) (   .-\"\"-.\n                  | |  /_  {  '.\n                  | | (/ `\\   } )\n                  | |  ^/ ^`}   {\n                  \\  \\ \\=  ( {   )\n                   \\  \\ '-, {   {{\n                    \\  \\_.'  ) }  )\n                     \\.-'   (     (\n                     /'-.'_. ) (  }\n                     \\_(    {   _/\\\n                      ) '--' `-;\\  \\\n                  _.-'       /  / /\n           <\\/>_.'         .'  / /\n       <\\/></\\>/.  '      /<\\// /\n       </\\>  _ |\\`- _ . -/|<// (\n    <\\/>    - _- `  _.-'`_/- |  \\\n    </\\>        -  - -  -     \\\\\\\n     }`<\\/>                <\\/>`{\n     { </\\>-<\\/>_<\\/>_<\\/>-</\\> }\n     }      </\\> </\\> </\\>      {\n  <\\/>.                         <\\/>\n  </\\>                          </\\>\n   {`<\\/>                     <\\/>`}\n   } </\\>-<\\/>_<\\/>_<\\/>_<\\/>-</\\> {\n   {      </\\> </\\> </\\> </\\>      }\n   }                               }\n   {            N I C E            {\n<\\/>            W O R K            <\\/>\n</\\>                               </\\>\n  `<\\/>                          <\\/>'\n   </\\>-<\\/>_<\\/>_<\\/>_<\\/>_<\\/>-</\\>\n        </\\> </\\> </\\> </\\> </\\>\n[master 5474ebf] up\n 1 file changed, 3 insertions(+)\nAfter commit:\nsh\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n```sh\n$ git diff\n```\n(command display nothing)\nSecond test with git add\nI git push first.\nIn the same file I add some other return lines to have git change and to raise an error with phpcs\n```sh\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n    modified:   src/AppBundle/AppBundle.php\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n```sh\n$ git diff\ndiff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php\nindex b18869d..514883d 100644\n--- a/src/AppBundle/AppBundle.php\n+++ b/src/AppBundle/AppBundle.php\n@@ -12,5 +12,8 @@ class AppBundle extends Bundle\n {\n+\n+\n+\n }\n```\n```sh\n$ git add src/AppBundle/AppBundle.php\n```\n(command display nothing)\n```sh\n$ git -c core.quotepath=false commit --only -m \"up\" -- src/AppBundle/AppBundle.php\n[2017-01-03 14:21:36] GrumPHP.INFO: run command: diff \"-r -p -m -M --full-index --staged\"  [] []\n[2017-01-03 14:21:36] GrumPHP.DEBUG: last command (diff) duration: 202.46ms [] []\n[2017-01-03 14:21:36] GrumPHP.DEBUG: last command (diff) return code: 0 [] []\n[2017-01-03 14:21:36] GrumPHP.DEBUG: last command (diff) output: diff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php index b18869dde3042c4293a6f9567f977fb97a52e50e..514883db0389046e047ce1bd1c8b8f5c561e1c26 100644 --- a/src/AppBundle/AppBundle.php +++ b/src/AppBundle/AppBundle.php @@ -12,5 +12,8 @@ class AppBundle extends Bundle  {     + +       +  }  [] []\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/7: Composer\nRunning task 2/7: Blacklist\nRunning task 3/7: Phpcs\nCommand: \"C:\\Scripts\\bin\\phpcs.BAT\" \"--standard=vendor/endouble/symfony3-custom-coding-standard/Symfony3Custom/\" \"--report-full\" \"--report-json\" \"src/AppBundle/AppBundle.php\"\nCommand: \"bin\\phpcbf.BAT\" \"--standard=vendor/endouble/symfony3-custom-coding-standard/Symfony3Custom/\" \"D:\\Projects\\website\\src\\AppBundle\\AppBundle.php\"\nRunning task 4/7: PhpMd\nCommand: \"bin\\phpmd.BAT\" \"src/AppBundle/AppBundle.php\" \"text\" \"phpmd.xml\" \"--exclude\" \"Tests,tests\"\nRunning task 5/7: PhpParser\nRunning task 6/7: Phpunit\nCommand: \"bin\\phpunit.BAT\" \"--configuration=grumphp-phpunit.xml\"\nRunning task 7/7: SecurityChecker\n                                       .....'',;;::cccllllllllllllcccc:::;;,,,''...'',,'..\n                            ..';cldkO00KXNNNNXXXKK000OOkkkkkxxxxxddoooddddddxxxxkkkkOO0XXKx:.\n                      .':ok0KXXXNXK0kxolc:;;,,,,,,,,,,,;;,,,''''''',,''..              .'lOXKd'\n                 .,lx00Oxl:,'............''''''...................    ...,;;'.             .oKXd.\n              .ckKKkc'...'',:::;,'.........'',;;::::;,'..........'',;;;,'.. .';;'.           'kNKc.\n           .:kXXk:.    ..       ..................          .............,:c:'...;:'.         .dNNx.\n          :0NKd,          .....''',,,,''..               ',...........',,,'',,::,...,,.        .dNNx.\n         .xXd.         .:;'..         ..,'             .;,.               ...,,'';;'. ...       .oNNo\n         .0K.         .;.              ;'              ';                      .'...'.           .oXX:\n        .oNO.         .                 ,.              .     ..',::ccc:;,..     ..                lXX:\n       .dNX:               ......       ;.                'cxOKK0OXWWWWWWWNX0kc.                    :KXd.\n     .l0N0;             ;d0KKKKKXK0ko:...              .l0X0xc,...lXWWWWWWWWKO0Kx'                   ,ONKo.\n   .lKNKl...'......'. .dXWN0kkk0NWWWWWN0o.            :KN0;.  .,cokXWWNNNNWNKkxONK: .,:c:.      .';;;;:lk0XXx;\n  :KN0l';ll:'.         .,:lodxxkO00KXNWWWX000k.       oXNx;:okKX0kdl:::;'',;coxkkd, ...'. ...'''.......',:lxKO:.\n oNNk,;c,'',.                      ...;xNNOc,.         ,d0X0xc,.     .dOd,           ..;dOKXK00000Ox:.   ..''dKO,\n'KW0,:,.,:..,oxkkkdl;'.                'KK'              ..           .dXX0o:'....,:oOXNN0d;.'. ..,lOKd.   .. ;KXl.\n;XNd,;  ;. l00kxoooxKXKx:..ld:         ;KK'                             .:dkO000000Okxl;.   c0;      :KK;   .  ;XXc\n'XXdc.  :. ..    '' 'kNNNKKKk,      .,dKNO.                                   ....       .'c0NO'      :X0.  ,.  xN0.\n.kNOc'  ,.      .00. ..''...      .l0X0d;.             'dOkxo;...                    .;okKXK0KNXx;.   .0X:  ,.  lNX'\n ,KKdl  .c,    .dNK,            .;xXWKc.                .;:coOXO,,'.......       .,lx0XXOo;...oNWNXKk:.'KX;  '   dNX.\n  :XXkc'....  .dNWXl        .';l0NXNKl.          ,lxkkkxo' .cK0.          ..;lx0XNX0xc.     ,0Nx'.','.kXo  .,  ,KNx.\n   cXXd,,;:, .oXWNNKo'    .'..  .'.'dKk;        .cooollox;.xXXl     ..,cdOKXXX00NXc.      'oKWK'     ;k:  .l. ,0Nk.\n    cXNx.  . ,KWX0NNNXOl'.           .o0Ooldk;            .:c;.':lxOKKK0xo:,.. ;XX:   .,lOXWWXd.      . .':,.lKXd.\n     lXNo    cXWWWXooNWNXKko;'..       .lk0x;       ...,:ldk0KXNNOo:,..       ,OWNOxO0KXXNWNO,        ....'l0Xk,\n     .dNK.   oNWWNo.cXK;;oOXNNXK0kxdolllllooooddxk00KKKK0kdoc:c0No        .'ckXWWWNXkc,;kNKl.          .,kXXk,\n      'KXc  .dNWWX;.xNk.  .kNO::lodxkOXWN0OkxdlcxNKl,..        oN0'..,:ox0XNWWNNWXo.  ,ONO'           .o0Xk;\n      .ONo    oNWWN0xXWK, .oNKc       .ONx.      ;X0.          .:XNKKNNWWWWNKkl;kNk. .cKXo.           .ON0;\n      .xNd   cNWWWWWWWWKOkKNXxl:,'...;0Xo'.....'lXK;...',:lxk0KNWWWWNNKOd:..   lXKclON0:            .xNk.\n      .dXd   ;XWWWWWWWWWWWWWWWWWWNNNNNWWNNNNNNNNNWWNNNNNNWWWWWNXKNNk;..        .dNWWXd.             cXO.\n      .xXo   .ONWNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWNNK0ko:'..OXo          'l0NXx,              :KK,\n      .OXc    :XNk0NWXKNWWWWWWWWWWWWWWWWWWWWWNNNX00NNx:'..       lXKc.     'lONN0l.              .oXK:\n      .KX;    .dNKoON0;lXNkcld0NXo::cd0NNO:;,,'.. .0Xc            lXXo..'l0NNKd,.              .c0Nk,\n      :XK.     .xNX0NKc.cXXl  ;KXl    .dN0.       .0No            .xNXOKNXOo,.               .l0Xk;.\n     .dXk.      .lKWN0d::OWK;  lXXc    .OX:       .ONx.     . .,cdk0XNXOd;.   .'''....;c:'..;xKXx,\n     .0No         .:dOKNNNWNKOxkXWXo:,,;ONk;,,,,,;c0NXOxxkO0XXNXKOdc,.  ..;::,...;lol;..:xKXOl.\n     ,XX:             ..';cldxkOO0KKKXXXXXXXXXXKKKKK00Okxdol:;'..   .';::,..':llc,..'lkKXkc.\n     :NX'    .     ''            ..................             .,;:;,',;ccc;'..'lkKX0d;.\n     lNK.   .;      ,lc,.         ................        ..,,;;;;;;:::,....,lkKX0d:.\n    .oN0.    .'.      .;ccc;,'....              ....'',;;;;;;;;;;'..   .;oOXX0d:.\n    .dN0.      .;;,..       ....                ..''''''''....     .:dOKKko;.\n     lNK'         ..,;::;;,'.........................           .;d0X0kc'.\n     .xXO'                                                 .;oOK0x:.\n      .cKKo.                                    .,:oxkkkxk0K0xc'.\n        .oKKkc,.                         .';cok0XNNNX0Oxoc,.\n          .;d0XX0kdlc:;,,,',,,;;:clodkO0KK0Okdl:,'..\n              .,coxO0KXXXXXXXKK0OOxdoc:,..\n                        ...\n            \\    \\   |    |     /    /\n         \\ _  _   _  \n          |   \\| | \\ | |/ _| /\n          | |_) | | | |  \\| | |  \n          |  _  /  | | | . | | |_ |     /\n          | | \\ \\ _| |_| |\\  | |__| |\n          |_|  \\_\\_____|_| \\_|\\_____|       /\n        \\\n                  _____  _____ _   _  _____\n           \\     |  __ \\|_   _| \\ | |/ ____|  /\n          \\      | |__) | | | |  \\| | |  __\n                 |  _  /  | | | . | | | |   /\n            \\    | | \\ \\ | |_| |\\  | || |\n            /    |_|  ___|| _|_| \\\n               _____  _____ _   _  _____   /\n        /     |  __ \\|_   _| \\ | |/ ____|  /\n       \\      | |__) | | | |  \\| | |  __\n              |  _  /  | | | . ` | | |_ |\n         \\    | | \\ \\ _| |_| |\\  | |__| |  \\\n          /   |_|  \\_\\_____|_| \\_|\\_____| \\\n            /      /     |    |     \\     \\\n\nFILE: ...\\website\\src\\AppBundle\\AppBundle.php\nFOUND 1 ERROR AND 1 WARNING AFFECTING 1 LINE\n17 | WARNING | [ ] Please trim any trailing whitespace\n 17 | ERROR   | [x] Whitespace found at end of line\n\nPHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY\nTime: 101ms; Memory: 4Mb\nYou can fix some errors by running following command:\n\"bin\\phpcbf.BAT\" \"--standard=vendor/endouble/symfony3-custom-coding-standard/Symfony3Custom/\" \"D:\\Projects\\website\\src\\AppBundle\\AppBundle.php\"\nTo skip commit checks, add -n or --no-verify flag to commit command\n```\n. so , next round :D\n.git/hooks/pre-commit with echo exit added:\n```sh\n!/bin/sh\n\nRun the hook command.\nNote: this will be replaced by the real command during copy.\n\nFetch the GIT diff and format it as command input:\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\necho $DIFF;\nexit 1;\nRun GrumPHP\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | exec \"bin/grumphp\" \"-vvv\" \"git:pre-commit\" '--skip-success-output')\nValidate exit code of above command\nRC=$?\nif [ \"$RC\" != 0 ]; then\n  exit $RC;\nfi\nClean exit:\nexit 0;\nsh\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n    modified:   src/AppBundle/AppBundle.php\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nsh\n$ git -c core.quotepath=false commit --only -m \"up\" -- src/AppBundle/AppBundle.php\ndiff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php index 129cbf32df238bcf0a9938e166ee76c3078099ba..70e7539597e2d1f3cc3094061a474b2767e41f17 100644 --- a/src/AppBundle/AppBundle.php +++ b/src/AppBundle/AppBundle.php @@ -10,4 +10,6 @@ use Symfony\\Component\\HttpKernel\\Bundle\\Bundle; class AppBundle extends Bundle { + + }\n```\nwhen I run\nsh\ncd \"./\" && printf \"%s\\n\" \"diff --git a/src/AppBundle/AppBundle.php b/src/AppBundle/AppBundle.php index 129cbf32df238bcf0a9938e166ee76c3078099ba..70e7539597e2d1f3cc3094061a474b2767e41f17 100644 --- a/src/AppBundle/AppBundle.php +++ b/src/AppBundle/AppBundle.php @@ -10,4 +10,6 @@ use Symfony\\Component\\HttpKernel\\Bundle\\Bundle; class AppBundle extends Bundle { + + }\" | exec \"bin/grumphp\" \"-vvv\" \"git:pre-commit\" '--skip-success-output'\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/7: Composer\nRunning task 2/7: Blacklist\nRunning task 3/7: Phpcs\nRunning task 4/7: PhpMd\nRunning task 5/7: PhpParser\nRunning task 6/7: Phpunit\nRunning task 7/7: SecurityChecker\nI have no task runing :s\n(I tried on GitBash for Windows and on the new Bash for Windows who run an Ubuntu Xenial on Windows). I just tried with my colleague's computer (on Ubuntu Xenial) , and there are the same issue. there are no check when we directly commit and push without add.. ",
    "pfrenssen": "If you need this urgently and have the time for it you can have a look at implementing the missing functionality that I outlined in my analysis that I posted above in my comment from April 3.. This was fixed, but it came back in Composer 1.7.0. It is now fixed again in 1.7.1.\nRef. https://github.com/composer/composer/issues/7516. This is a fix for #532.. I have not looked at the full PR and comments, but I have some experience with pre-push commands and I have a few suggestions.\nI think it will be better to pass the 4 variables local_ref, local_sha, remote_ref and remote_sha to PHP instead of doing a diff and passing this data. Let's handle the logic on the PHP side. Passing the diff makes it impossible to retrieve basic information about the current state of the branch on the PHP end which is possibly needed for certain tasks to run on pre-push. Some examples:\n\nIf local_ref contains the string (delete) we are currently deleting the current branch. This will mean there is still a diff but we don't need to do any coding standards checks because the branch is being deleted.\nIf local_sha contains the SHA 0000000000000000000000000000000000000000 then we do not have a local branch, meaning we are in a detached HEAD state.\nIf remote_sha is 0000000000000000000000000000000000000000 then this is a brand new branch. There will not be a diff. We can use this information to perform a full coding standards check.\n\nAlso, this git diff command is not bullet proof, it assumes that the developer is pushing their currently checked out branch, but this is not necessarily the case. For example, if you have switched to a new branch and realized you have not yet pushed your previous branch, you can do this command:\n$ git push my-previous-branch:my-previous-branch\nIn this case the diff will be made between the HEAD of the current branch and the remote of the previous branch, this has not the intended result. A better version would be:\n$ git diff-tree --no-commit-id --name-only -r '$local_sha' '$remote_sha'. I believe up to now Grumphp works on pre-commit only? In that case the diff is fine, since you won't be deleting branches, and the status of the local and remote branches are not important.\nBut when you do a pre-push then this becomes important and acting solely on a diff is not going to be enough.. We need the information about the remote and local branches and this needs to be passed to the tasks as well, so I would suggest to:\n\nInstead of piping the list of files into the command, pass in the 4 parameters to the GitPrePushCommand as options.\nStore the 4 parameters in the GitPrePushContext and provide getters for them so that this information is available to tasks: getLocalSHA1(), getLocalRef(), getRemoteSHA1(), getRemoteSHA1().\nInside GitPrePushContext::execute() there are 3 different possibilities for generating the file list:\nIf the remote_sha1 is empty (it equals 0000000000000000000000000000000000000000) then this means we are pushing a brand new branch. We have no comparison point since we don't know which of the ancestor commits have already been checked. In this case we need to check all files.\nIf the local_sha1 is empty or if local_ref matches the string (delete) then this means that the push is intended to delete the remote branch. In this case we should not populate the file list at all, since it is pointless to do any checks on a branch that is about to be deleted.\nWhen both local_sha1 and remote_sha1 are not empty, and local_ref does not match (delete) we are doing a push that updates an already existing remote branch with new code. In this case we can generate a list of files that have changed between the local_sha1 and remote_sha1 and can pass it to the context.\n\nTo generate the diffs on the PHP side, you can inject the Repository dependency into the PrePushCommand and then get the file list by calling $this->repository->run('diff-tree', ['--no-commit-id, ...]).\nIt would also be nice to have some helper methods on the context such as isNewBranch(), hasRemoteBranch(), isDeletingRemote().\n. Probably not necessary to run it twice here.. ",
    "KevinAlberca": "Hello @veewee ,\nI've no composer plugin, and I never installed something in global\nHere is the composer install -vvv.\n```vagrant@awh-lemp:~/S/Nearbio$ composer clear-cache\nClearing cache (cache-dir): /home/vagrant/.composer/cache\nClearing cache (cache-files-dir): /home/vagrant/.composer/cache/files\nClearing cache (cache-repo-dir): /home/vagrant/.composer/cache/repo\nCache directory does not exist (cache-vcs-dir):\nAll caches cleared.\nvagrant@awh-lemp:~/S/Nearbio$ composer install -vvv\nReading ./composer.json\nLoading config file ./composer.json\nChecked CA file /etc/ssl/certs/ca-certificates.crt: valid\nExecuting command (/home/vagrant/S/Nearbio): git branch --no-color --no-abbrev -v\nFailed to initialize global composer: Composer could not find the config file: /home/vagrant/.composer/composer.json\nTo initialize a project, please create a composer.json file as described in the https://getcomposer.org/ \"Getting Started\" section\nReading /home/vagrant/S/Nearbio/vendor/composer/installed.json\nLoading plugin PackageVersions\\Installer\nRunning 1.3.0 (2016-12-24 00:47:03) with PHP 7.0.14-1~dotdeb+8.1 on Linux / 3.16.0-4-amd64\nReading ./composer.lock\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nReading ./composer.lock\nResolving dependencies through SAT\nDependency resolution completed in 0.000 seconds\nAnalyzed 108 packages to resolve dependencies\nAnalyzed 238 rules to resolve dependencies\nPackage operations: 44 installs, 0 updates, 0 removals\nInstalls: twig/twig:v2.1.0, symfony/polyfill-util:v1.3.0, paragonie/random_compat:v2.0.4, symfony/polyfill-php70:v1.3.0, symfony/polyfill-php56:v1.3.0, symfony/symfony:v3.1.9, symfony/polyfill-intl-icu:v1.3.0, psr/log:1.0.2, psr/cache:1.0.1, doctrine/inflector:v1.1.0, doctrine/collections:v1.3.0, doctrine/cache:v1.6.1, doctrine/common:v2.7.1, doctrine/doctrine-cache-bundle:1.3.0, doctrine/instantiator:1.0.5, doctrine/dbal:v2.5.6, doctrine/orm:v2.5.6, incenteev/composer-parameter-handler:v2.1.2, jdorn/sql-formatter:v1.2.17, sensiolabs/security-checker:v4.0.0, sensio/distribution-bundle:v5.0.18, sensio/framework-extra-bundle:v3.0.19, monolog/monolog:1.22.0, symfony/monolog-bundle:v2.12.1, swiftmailer/swiftmailer:v5.4.5, symfony/swiftmailer-bundle:v2.4.2, composer/ca-bundle:1.0.6, composer/semver:1.4.2, composer/spdx-licenses:1.1.5, doctrine/doctrine-bundle:1.6.6, doctrine/data-fixtures:v1.2.2, doctrine/doctrine-fixtures-bundle:dev-master fb060e2, justinrainbow/json-schema:4.1.0, seld/jsonlint:1.5.0, zendframework/zend-eventmanager:3.1.0, zendframework/zend-code:3.1.0, ocramius/proxy-manager:2.0.4, gitonomy/gitlib:v1.0.2, seld/phar-utils:1.0.1, seld/cli-prompt:1.0.2, composer/composer:1.3.1, phpro/grumphp:v0.11.1, sensio/generator-bundle:v3.1.2, symfony/phpunit-bridge:v2.8.16\n  - Installing twig/twig (v2.1.0)Downloading https://api.github.com/repos/twigphp/Twig/zipball/9062992538bc5855a683c6737257bfa18d25a4b8\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/twig/twig/de6e33bed1851b6a447872fd0eb914821cb99e49.zip into cache from /home/vagrant/S/Nearbio/vendor/twig/twig/c019fa38a0ada6dae0802e32fed9fcca\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/twig/twig/c019fa38a0ada6dae0802e32fed9fcca' -d '/home/vagrant/S/Nearbio/vendor/composer/a12d2112' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/a12d2112'\nREASON: Required by the root package: Install command rule (install twig/twig v2.1.0)\n\n\n\nInstalling symfony/polyfill-util (v1.3.0)Downloading https://api.github.com/repos/symfony/polyfill-util/zipball/746bce0fca664ac0a575e465f65c6643faddf7fb\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/polyfill-util/98e78e58ecac70cdc7ad4035f7fe96ffe829b522.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/polyfill-util/c8a359e6eedbb317d3db575c6fe741ab\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/polyfill-util/c8a359e6eedbb317d3db575c6fe741ab' -d '/home/vagrant/S/Nearbio/vendor/composer/09c8ac4e' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/09c8ac4e'\nREASON: Required by the root package: Install command rule (install symfony/polyfill-util v1.3.0)\n\n\nInstalling paragonie/random_compat (v2.0.4)Downloading https://api.github.com/repos/paragonie/random_compat/zipball/a9b97968bcde1c4de2a5ec6cbd06a0f6c919b46e\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/paragonie/random_compat/e4fd50380d722cc79155857f2fa0f4a203906975.zip into cache from /home/vagrant/S/Nearbio/vendor/paragonie/random_compat/5027d747555e80df04e5bcdc8e039df8\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/paragonie/random_compat/5027d747555e80df04e5bcdc8e039df8' -d '/home/vagrant/S/Nearbio/vendor/composer/937a9de6' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/937a9de6'\nREASON: Required by the root package: Install command rule (install paragonie/random_compat v2.0.4)\n\n\nInstalling symfony/polyfill-php70 (v1.3.0)Downloading https://api.github.com/repos/symfony/polyfill-php70/zipball/13ce343935f0f91ca89605a2f6ca6f5c2f3faac2\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/polyfill-php70/b4edc8e3351c6bd9941edf5c76a78c04283dcbe9.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/polyfill-php70/90b1e79e3b5e5e87819869e94522f4bd\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/polyfill-php70/90b1e79e3b5e5e87819869e94522f4bd' -d '/home/vagrant/S/Nearbio/vendor/composer/e6087896' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/e6087896'\nREASON: Required by the root package: Install command rule (install symfony/polyfill-php70 v1.3.0)\n\n\nInstalling symfony/polyfill-php56 (v1.3.0)Downloading https://api.github.com/repos/symfony/polyfill-php56/zipball/1dd42b9b89556f18092f3d1ada22cb05ac85383c\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/polyfill-php56/fdcf2b83b808011fa9160ae0975d5032e0bf2f13.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/polyfill-php56/f4e508706abaab267291b2bb505326a6\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/polyfill-php56/f4e508706abaab267291b2bb505326a6' -d '/home/vagrant/S/Nearbio/vendor/composer/ffac3957' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/ffac3957'\nREASON: Required by the root package: Install command rule (install symfony/polyfill-php56 v1.3.0)\n\n\nInstalling symfony/symfony (v3.1.9)Downloading https://api.github.com/repos/symfony/symfony/zipball/8d80e330acaad0780028ecb93fa8e902eb1e9abb\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/symfony/8991b2e147329d4fd0fb946bb9dc51cc279f4ab3.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/symfony/0a9b8276d504f17f8e92bc5f3c24414a\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/symfony/0a9b8276d504f17f8e92bc5f3c24414a' -d '/home/vagrant/S/Nearbio/vendor/composer/c0560113' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/c0560113'\nREASON: Required by the root package: Install command rule (install symfony/symfony v3.1.9)\n\n\nInstalling symfony/polyfill-intl-icu (v1.3.0)Downloading https://api.github.com/repos/symfony/polyfill-intl-icu/zipball/2d6e2b20d457603eefb6e614286c22efca30fdb4\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/polyfill-intl-icu/9c8c7dcc7eb59b7d70c853b48ef02d7926f6a8fc.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/polyfill-intl-icu/bf08e467fd7a6af2623f8d2a422cffd9\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/polyfill-intl-icu/bf08e467fd7a6af2623f8d2a422cffd9' -d '/home/vagrant/S/Nearbio/vendor/composer/1d436e63' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/1d436e63'\nREASON: Required by the root package: Install command rule (install symfony/polyfill-intl-icu v1.3.0)\n\n\nInstalling psr/log (1.0.2)Downloading https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/psr/log/216fe71da49480fa51edd2c2fe0f7f93d5e2714a.zip into cache from /home/vagrant/S/Nearbio/vendor/psr/log/b4a292d03708b12d7f146ce4289c4bcc\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/psr/log/b4a292d03708b12d7f146ce4289c4bcc' -d '/home/vagrant/S/Nearbio/vendor/composer/339db3c5' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/339db3c5'\nREASON: Required by the root package: Install command rule (install psr/log 1.0.2)\n\n\nInstalling psr/cache (1.0.1)Downloading https://api.github.com/repos/php-fig/cache/zipball/d11b50ad223250cf17b86e38383413f5a6764bf8\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/psr/cache/db0acef2d2023a676945c844eded3b911c3089c2.zip into cache from /home/vagrant/S/Nearbio/vendor/psr/cache/c56a05eccb1f377842e632c53798db55\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/psr/cache/c56a05eccb1f377842e632c53798db55' -d '/home/vagrant/S/Nearbio/vendor/composer/eb2e98d7' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/eb2e98d7'\nREASON: Required by the root package: Install command rule (install psr/cache 1.0.1)\n\n\nInstalling doctrine/inflector (v1.1.0)Downloading https://api.github.com/repos/doctrine/inflector/zipball/90b2128806bfde671b6952ab8bea493942c1fdae\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/inflector/db32704481aa3a74907c33fcdb2123a8ea1cbb35.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/inflector/881a6ddc91f85f9ff6461e4359820720\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/inflector/881a6ddc91f85f9ff6461e4359820720' -d '/home/vagrant/S/Nearbio/vendor/composer/ac809465' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/ac809465'\nREASON: Required by the root package: Install command rule (install doctrine/inflector v1.1.0)\n\n\nInstalling doctrine/collections (v1.3.0)Downloading https://api.github.com/repos/doctrine/collections/zipball/6c1e4eef75f310ea1b3e30945e9f06e652128b8a\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/collections/3a2cf050b759ce9a081a7448c81749206de61ced.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/collections/38b8f41567b62bb34ff9807d147ebbff\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/collections/38b8f41567b62bb34ff9807d147ebbff' -d '/home/vagrant/S/Nearbio/vendor/composer/8149527d' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/8149527d'\nREASON: Required by the root package: Install command rule (install doctrine/collections v1.3.0)\n\n\nInstalling doctrine/cache (v1.6.1)Downloading https://api.github.com/repos/doctrine/cache/zipball/b6f544a20f4807e81f7044d31e679ccbb1866dc3\n Downloading: 90%\n    Download failed, retrying...\nDownloading https://api.github.com/repos/doctrine/cache/zipball/b6f544a20f4807e81f7044d31e679ccbb1866dc3\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/cache/fdafe27e01e4d21f8a278e981f410c7db3bd84cc.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/cache/09a1ffbd5dda718fc663f8f142e61ede\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/cache/09a1ffbd5dda718fc663f8f142e61ede' -d '/home/vagrant/S/Nearbio/vendor/composer/75f214b0' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/75f214b0'\nREASON: Required by the root package: Install command rule (install doctrine/cache v1.6.1)\n\n\nInstalling doctrine/common (v2.7.1)Downloading https://api.github.com/repos/doctrine/common/zipball/5954c297e9d93ff84554906c2fbbc2a133c43941\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/common/3f8defcf4ad936c56fd668b25df13448169e88f1.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/common/19c4e2704d34e5645e77ede64aec370a\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/common/19c4e2704d34e5645e77ede64aec370a' -d '/home/vagrant/S/Nearbio/vendor/composer/d2b68bd6' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/d2b68bd6'\nREASON: Required by the root package: Install command rule (install doctrine/common v2.7.1)\n\n\nInstalling doctrine/doctrine-cache-bundle (1.3.0)Downloading https://api.github.com/repos/doctrine/DoctrineCacheBundle/zipball/18c600a9b82f6454d2e81ca4957cdd56a1cf3504\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/doctrine-cache-bundle/e7890551a1879290b12121f01c08bf55425a62af.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/doctrine-cache-bundle/953d579aa881981ac804f6969ab4018f\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-cache-bundle/953d579aa881981ac804f6969ab4018f' -d '/home/vagrant/S/Nearbio/vendor/composer/d24a1c9b' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/d24a1c9b'\nREASON: Required by the root package: Install command rule (install doctrine/doctrine-cache-bundle 1.3.0)\n\n\nInstalling doctrine/instantiator (1.0.5)Downloading https://api.github.com/repos/doctrine/instantiator/zipball/8e884e78f9f0eb1329e445619e04456e64d8051d\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/instantiator/5a9f1d3bceb2a0d9cec46038ba4d17116a431241.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/instantiator/53b31189c9b876478da474012ae01ce8\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/instantiator/53b31189c9b876478da474012ae01ce8' -d '/home/vagrant/S/Nearbio/vendor/composer/f404ba74' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/f404ba74'\nREASON: Required by the root package: Install command rule (install doctrine/instantiator 1.0.5)\n\n\nInstalling doctrine/dbal (v2.5.6)Downloading https://api.github.com/repos/doctrine/dbal/zipball/a526d0df58daa8ab6802244bf3227f532e0deb45\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/dbal/8242d36770ad4cffd7d5071b8fed69b8e1e690bb.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/dbal/5608d63f1be1c17842bbbf73d8803d31\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/dbal/5608d63f1be1c17842bbbf73d8803d31' -d '/home/vagrant/S/Nearbio/vendor/composer/085693bc' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/085693bc'\nREASON: Required by the root package: Install command rule (install doctrine/dbal v2.5.6)\n\n\nInstalling doctrine/orm (v2.5.6)Downloading https://api.github.com/repos/doctrine/doctrine2/zipball/e6c434196c8ef058239aaa0724b4aadb0107940b\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/orm/8586a6dbc98b755d599cda496445ba72b1eb5ed2.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/orm/d1e4f545716b79a757cc8c45afb97f91\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/orm/d1e4f545716b79a757cc8c45afb97f91' -d '/home/vagrant/S/Nearbio/vendor/composer/8ef3a4d0' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/8ef3a4d0'\nREASON: Required by the root package: Install command rule (install doctrine/orm v2.5.6)\n\n\nInstalling incenteev/composer-parameter-handler (v2.1.2)Downloading https://api.github.com/repos/Incenteev/ParameterHandler/zipball/d7ce7f06136109e81d1cb9d57066c4d4a99cf1cc\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/incenteev/composer-parameter-handler/7748e0a1b0c7e3a1a51faa4cacc4d83c89ef66fe.zip into cache from /home/vagrant/S/Nearbio/vendor/incenteev/composer-parameter-handler/8c2503be898d0d0a4f8fa845af50429c\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/incenteev/composer-parameter-handler/8c2503be898d0d0a4f8fa845af50429c' -d '/home/vagrant/S/Nearbio/vendor/composer/4a835f1e' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/4a835f1e'\nREASON: Required by the root package: Install command rule (install incenteev/composer-parameter-handler v2.1.2)\n\n\nInstalling jdorn/sql-formatter (v1.2.17)Downloading https://api.github.com/repos/jdorn/sql-formatter/zipball/64990d96e0959dff8e059dfcdc1af130728d92bc\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/jdorn/sql-formatter/c58d407cfd5a9f38b19854087d4ff221aad35113.zip into cache from /home/vagrant/S/Nearbio/vendor/jdorn/sql-formatter/664bbe2e7f1ed9361a65ff41500044ee\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/jdorn/sql-formatter/664bbe2e7f1ed9361a65ff41500044ee' -d '/home/vagrant/S/Nearbio/vendor/composer/7dac66e3' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/7dac66e3'\nREASON: Required by the root package: Install command rule (install jdorn/sql-formatter v1.2.17)\n\n\nInstalling sensiolabs/security-checker (v4.0.0)Downloading https://api.github.com/repos/sensiolabs/security-checker/zipball/116027b57b568ed61b7b1c80eeb4f6ee9e8c599c\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/sensiolabs/security-checker/1eb5abcec5f1b459f5be3a6d92a9d6475f9cdfe4.zip into cache from /home/vagrant/S/Nearbio/vendor/sensiolabs/security-checker/6b4d61585d92174cf6b828dade28a154\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/sensiolabs/security-checker/6b4d61585d92174cf6b828dade28a154' -d '/home/vagrant/S/Nearbio/vendor/composer/45dd15ad' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/45dd15ad'\nREASON: Required by the root package: Install command rule (install sensiolabs/security-checker v4.0.0)\n\n\nInstalling sensio/distribution-bundle (v5.0.18)Downloading https://api.github.com/repos/sensiolabs/SensioDistributionBundle/zipball/17846680901003d26d823c2e3ac9228702837916\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/sensio/distribution-bundle/198a889a76448b728ffeea6bef6f60daa95aef04.zip into cache from /home/vagrant/S/Nearbio/vendor/sensio/distribution-bundle/5a6564bf91500f749a85244f92f249f8\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/sensio/distribution-bundle/5a6564bf91500f749a85244f92f249f8' -d '/home/vagrant/S/Nearbio/vendor/composer/340378b7' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/340378b7'\nREASON: Required by the root package: Install command rule (install sensio/distribution-bundle v5.0.18)\n\n\nInstalling sensio/framework-extra-bundle (v3.0.19)Downloading https://api.github.com/repos/sensiolabs/SensioFrameworkExtraBundle/zipball/d57c2f297d17ee82baf8cae0b16dae34a9378784\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/sensio/framework-extra-bundle/a70134d289b44c9098887a22fafab944cc91384e.zip into cache from /home/vagrant/S/Nearbio/vendor/sensio/framework-extra-bundle/443da91c2b2278b4142831d7c283569e\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/sensio/framework-extra-bundle/443da91c2b2278b4142831d7c283569e' -d '/home/vagrant/S/Nearbio/vendor/composer/f59d9250' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/f59d9250'\nREASON: Required by the root package: Install command rule (install sensio/framework-extra-bundle v3.0.19)\n\n\nInstalling monolog/monolog (1.22.0)Downloading https://api.github.com/repos/Seldaek/monolog/zipball/bad29cb8d18ab0315e6c477751418a82c850d558\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/monolog/monolog/89c268dc0e3abb068c613a62b566184a9ada9ce7.zip into cache from /home/vagrant/S/Nearbio/vendor/monolog/monolog/09b1ac870dace8fb67f79edc3ef0ccd5\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/monolog/monolog/09b1ac870dace8fb67f79edc3ef0ccd5' -d '/home/vagrant/S/Nearbio/vendor/composer/400d6733' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/400d6733'\nREASON: Required by the root package: Install command rule (install monolog/monolog 1.22.0)\n\n\nInstalling symfony/monolog-bundle (v2.12.1)Downloading https://api.github.com/repos/symfony/monolog-bundle/zipball/b0146bdca7ba2a65f3bbe7010423c7393b29ec3f\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/monolog-bundle/ba69b27fef7cd012e8ca53dbf71c03a53a107d85.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/monolog-bundle/1ee318d239138753b6e8aa8f328696e5\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/monolog-bundle/1ee318d239138753b6e8aa8f328696e5' -d '/home/vagrant/S/Nearbio/vendor/composer/9dfca7a4' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/9dfca7a4'\nREASON: Required by the root package: Install command rule (install symfony/monolog-bundle v2.12.1)\n\n\nInstalling swiftmailer/swiftmailer (v5.4.5)Downloading https://api.github.com/repos/swiftmailer/swiftmailer/zipball/cd142238a339459b10da3d8234220963f392540c\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/swiftmailer/swiftmailer/7cc6c3df4d779219bc90fe35ea05d8a836a3014c.zip into cache from /home/vagrant/S/Nearbio/vendor/swiftmailer/swiftmailer/992095be5edc29b25db5ff0463bfc6b6\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/swiftmailer/swiftmailer/992095be5edc29b25db5ff0463bfc6b6' -d '/home/vagrant/S/Nearbio/vendor/composer/d989722d' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/d989722d'\nREASON: Required by the root package: Install command rule (install swiftmailer/swiftmailer v5.4.5)\n\n\nInstalling symfony/swiftmailer-bundle (v2.4.2)Downloading https://api.github.com/repos/symfony/swiftmailer-bundle/zipball/ad751095576ce0c12a284e30e3fff80c91f27225\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/swiftmailer-bundle/eed9cefd9dccaf9e2407c55d0f15ad1507da4754.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/swiftmailer-bundle/e08cbed9c6aadb02ecb5f30792e2634c\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/swiftmailer-bundle/e08cbed9c6aadb02ecb5f30792e2634c' -d '/home/vagrant/S/Nearbio/vendor/composer/6eb24b1d' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/6eb24b1d'\nREASON: Required by the root package: Install command rule (install symfony/swiftmailer-bundle v2.4.2)\n\n\nInstalling composer/ca-bundle (1.0.6)Downloading https://api.github.com/repos/composer/ca-bundle/zipball/a795611394b3c05164fd0eb291b492b39339cba4\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/composer/ca-bundle/c00edf05c23bac6a0d1c79d192321bbea0d26bf9.zip into cache from /home/vagrant/S/Nearbio/vendor/composer/ca-bundle/ca3630d3d5a95bd119c343eb29f3cb21\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/composer/ca-bundle/ca3630d3d5a95bd119c343eb29f3cb21' -d '/home/vagrant/S/Nearbio/vendor/composer/a499c9be' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/a499c9be'\nREASON: Required by the root package: Install command rule (install composer/ca-bundle 1.0.6)\n\n\nInstalling composer/semver (1.4.2)Downloading https://api.github.com/repos/composer/semver/zipball/c7cb9a2095a074d131b65a8a0cd294479d785573\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/composer/semver/5d487551fbabb57043e277a23ce029d2980866aa.zip into cache from /home/vagrant/S/Nearbio/vendor/composer/semver/7565c5adca961f43f9bc414fc1357e30\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/composer/semver/7565c5adca961f43f9bc414fc1357e30' -d '/home/vagrant/S/Nearbio/vendor/composer/6050b620' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/6050b620'\nREASON: Required by the root package: Install command rule (install composer/semver 1.4.2)\n\n\nInstalling composer/spdx-licenses (1.1.5)Downloading https://api.github.com/repos/composer/spdx-licenses/zipball/96c6a07b05b716e89a44529d060bc7f5c263cb13\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/composer/spdx-licenses/378dc0258a5acaf4a9eb2ca52acc9432159804a5.zip into cache from /home/vagrant/S/Nearbio/vendor/composer/spdx-licenses/dc5ffbc412a069090e5705d730744118\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/composer/spdx-licenses/dc5ffbc412a069090e5705d730744118' -d '/home/vagrant/S/Nearbio/vendor/composer/8f40f856' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/8f40f856'\nREASON: Required by the root package: Install command rule (install composer/spdx-licenses 1.1.5)\n\n\nInstalling doctrine/doctrine-bundle (1.6.6)Downloading https://api.github.com/repos/doctrine/DoctrineBundle/zipball/0f0c4df366bd1d36d38a27e2f5ff128e118ac969\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/doctrine-bundle/f775eb27c1d95b4a9e896b1d565ef854c13286b5.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/doctrine-bundle/3a1158496f0bda6fe20848f18e4f8daf\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-bundle/3a1158496f0bda6fe20848f18e4f8daf' -d '/home/vagrant/S/Nearbio/vendor/composer/ea2bb9c9' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/ea2bb9c9'\nREASON: Required by the root package: Install command rule (install doctrine/doctrine-bundle 1.6.6)\n\n\nInstalling doctrine/data-fixtures (v1.2.2)Downloading https://api.github.com/repos/doctrine/data-fixtures/zipball/17fa5bfe6ff52e35cb3d9ec37c934a2f4bd1fa2e\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/doctrine/data-fixtures/ee8912ec4d57788b7cf22698cb1e781c6300f0c4.zip into cache from /home/vagrant/S/Nearbio/vendor/doctrine/data-fixtures/1db6aad7cec27ab725f4dc280982f8eb\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/doctrine/data-fixtures/1db6aad7cec27ab725f4dc280982f8eb' -d '/home/vagrant/S/Nearbio/vendor/composer/d37ef0bf' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/d37ef0bf'\nREASON: Required by the root package: Install command rule (install doctrine/data-fixtures v1.2.2)\n\n\nInstalling doctrine/doctrine-fixtures-bundle (dev-master fb060e2)Executing command (CWD): git --version\n Cloning fb060e289a2996e21869c261a983c0f8450132f6\nExecuting command (CWD): git clone --no-checkout 'https://github.com/doctrine/DoctrineFixturesBundle.git' '/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle' && cd '/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle' && git remote add composer 'https://github.com/doctrine/DoctrineFixturesBundle.git' && git fetch composer\nExecuting command (/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle): git remote set-url --push origin 'git@github.com:doctrine/DoctrineFixturesBundle.git'\nExecuting command (/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle): git branch -r\nExecuting command (/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle): git checkout 'master' --\nExecuting command (/home/vagrant/S/Nearbio/vendor/doctrine/doctrine-fixtures-bundle): git reset --hard 'fb060e289a2996e21869c261a983c0f8450132f6' --\n    REASON: Required by the root package: Install command rule (install doctrine/doctrine-fixtures-bundle dev-master)\n\n\nMarking doctrine/doctrine-fixtures-bundle (2.2.x-dev fb060e2) as installed, alias of doctrine/doctrine-fixtures-bundle (dev-master fb060e2)\n\n\nInstalling justinrainbow/json-schema (4.1.0)Downloading https://api.github.com/repos/justinrainbow/json-schema/zipball/d39c56a46b3ebe1f3696479966cd2b9f50aaa24f\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/justinrainbow/json-schema/35b2ab1b4468a8dd585c1a522591c476af5d3d87.zip into cache from /home/vagrant/S/Nearbio/vendor/justinrainbow/json-schema/7cd8cc508e1df9e1375a6fd7975bfe6b\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/justinrainbow/json-schema/7cd8cc508e1df9e1375a6fd7975bfe6b' -d '/home/vagrant/S/Nearbio/vendor/composer/03764d74' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/03764d74'\nREASON: Required by the root package: Install command rule (install justinrainbow/json-schema 4.1.0)\n\n\nInstalling seld/jsonlint (1.5.0)Downloading https://api.github.com/repos/Seldaek/jsonlint/zipball/19495c181d6d53a0a13414154e52817e3b504189\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/seld/jsonlint/cbaecfb8617e6221864c7403ec557803992321f6.zip into cache from /home/vagrant/S/Nearbio/vendor/seld/jsonlint/1a76919b282123136dcb1ebf76be77c0\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/seld/jsonlint/1a76919b282123136dcb1ebf76be77c0' -d '/home/vagrant/S/Nearbio/vendor/composer/98d1e3b3' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/98d1e3b3'\nREASON: Required by the root package: Install command rule (install seld/jsonlint 1.5.0)\n\n\nInstalling zendframework/zend-eventmanager (3.1.0)Downloading https://api.github.com/repos/zendframework/zend-eventmanager/zipball/c3bce7b7d47c54040b9ae51bc55491c72513b75d\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/zendframework/zend-eventmanager/2c66be54a79aaaec0648d7306ed23cf788d4923c.zip into cache from /home/vagrant/S/Nearbio/vendor/zendframework/zend-eventmanager/42c4a33c674a9cb2e24e3d9573d955b4\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/zendframework/zend-eventmanager/42c4a33c674a9cb2e24e3d9573d955b4' -d '/home/vagrant/S/Nearbio/vendor/composer/eff478e2' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/eff478e2'\nREASON: Required by the root package: Install command rule (install zendframework/zend-eventmanager 3.1.0)\n\n\nInstalling zendframework/zend-code (3.1.0)Downloading https://api.github.com/repos/zendframework/zend-code/zipball/2899c17f83a7207f2d7f53ec2f421204d3beea27\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/zendframework/zend-code/950dc54da5d1564c6fc4330da400aca9a45cc022.zip into cache from /home/vagrant/S/Nearbio/vendor/zendframework/zend-code/b95301f93af2d047e6923a7534f05497\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/zendframework/zend-code/b95301f93af2d047e6923a7534f05497' -d '/home/vagrant/S/Nearbio/vendor/composer/d9819aab' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/d9819aab'\nREASON: Required by the root package: Install command rule (install zendframework/zend-code 3.1.0)\n\n\nInstalling ocramius/proxy-manager (2.0.4)Downloading https://api.github.com/repos/Ocramius/ProxyManager/zipball/a55d08229f4f614bf335759ed0cf63378feeb2e6\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/ocramius/proxy-manager/43ab272ebb2abcb122b54a34ea324b6d82376ab2.zip into cache from /home/vagrant/S/Nearbio/vendor/ocramius/proxy-manager/0f3e543f3956aaff6955b555f6edcb42\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/ocramius/proxy-manager/0f3e543f3956aaff6955b555f6edcb42' -d '/home/vagrant/S/Nearbio/vendor/composer/75c92bb9' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/75c92bb9'\nREASON: Required by the root package: Install command rule (install ocramius/proxy-manager 2.0.4)\n\n\nInstalling gitonomy/gitlib (v1.0.2)Downloading https://api.github.com/repos/gitonomy/gitlib/zipball/b4b916423a2e2da631cf3b3787beb9386a7b253c\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/gitonomy/gitlib/f263a07a2be1a5ad59cde78b1f074d5c01fb6d59.zip into cache from /home/vagrant/S/Nearbio/vendor/gitonomy/gitlib/8ab67224313067ea1ecb29b1ef1adf7b\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/gitonomy/gitlib/8ab67224313067ea1ecb29b1ef1adf7b' -d '/home/vagrant/S/Nearbio/vendor/composer/2c242c41' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/2c242c41'\nREASON: Required by the root package: Install command rule (install gitonomy/gitlib v1.0.2)\n\n\nInstalling seld/phar-utils (1.0.1)Downloading https://api.github.com/repos/Seldaek/phar-utils/zipball/7009b5139491975ef6486545a39f3e6dad5ac30a\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/seld/phar-utils/0930b263364ee9a78cd628fb1e223e413e613674.zip into cache from /home/vagrant/S/Nearbio/vendor/seld/phar-utils/c69cacc608e0a571dbfb31594915a843\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/seld/phar-utils/c69cacc608e0a571dbfb31594915a843' -d '/home/vagrant/S/Nearbio/vendor/composer/1ef7964f' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/1ef7964f'\nREASON: Required by the root package: Install command rule (install seld/phar-utils 1.0.1)\n\n\nInstalling seld/cli-prompt (1.0.2)Downloading https://api.github.com/repos/Seldaek/cli-prompt/zipball/8cbe10923cae5bcd7c5a713f6703fc4727c8c1b4\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/seld/cli-prompt/67877b592d69d9f333261a00aac49bb039adb8bc.zip into cache from /home/vagrant/S/Nearbio/vendor/seld/cli-prompt/7e940233e667a0a47a0f3cc9b9ebe339\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/seld/cli-prompt/7e940233e667a0a47a0f3cc9b9ebe339' -d '/home/vagrant/S/Nearbio/vendor/composer/c9465d0c' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/c9465d0c'\nREASON: Required by the root package: Install command rule (install seld/cli-prompt 1.0.2)\n\n\nInstalling composer/composer (1.3.1)Downloading https://api.github.com/repos/composer/composer/zipball/91dbca556764dcece45e1ba3aab14de2deaa9fec\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/composer/composer/336c193b074903360b499c7b5936708eb6df1851.zip into cache from /home/vagrant/S/Nearbio/vendor/composer/composer/502e2d316668832f486633be49c60b15\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/composer/composer/502e2d316668832f486633be49c60b15' -d '/home/vagrant/S/Nearbio/vendor/composer/9e16a608' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/9e16a608'\nREASON: Required by the root package: Install command rule (install composer/composer 1.3.1)\n\n\nInstalling phpro/grumphp (v0.11.1)Downloading https://api.github.com/repos/phpro/grumphp/zipball/90b71cac989381341582a51d7e2657293fab7899\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/phpro/grumphp/ea217cbb867c876ad543d2c63847f4adf7c45816.zip into cache from /home/vagrant/S/Nearbio/vendor/phpro/grumphp/fc0c444cee45ac2a1cdf89dc0557d730\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/phpro/grumphp/fc0c444cee45ac2a1cdf89dc0557d730' -d '/home/vagrant/S/Nearbio/vendor/composer/3a776e17' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/3a776e17'\n\n\nLoading plugin GrumPHP\\Composer\\GrumPHPPlugin\n    REASON: Required by the root package: Install command rule (install phpro/grumphp v0.11.1)\n\n\nInstalling sensio/generator-bundle (v3.1.2)Downloading https://api.github.com/repos/sensiolabs/SensioGeneratorBundle/zipball/ec278c0bd530edf155c4a00900577b5cb80f559e\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/sensio/generator-bundle/6d1b8ea5970dcc5976c1c3e57571b3693b3b6c4e.zip into cache from /home/vagrant/S/Nearbio/vendor/sensio/generator-bundle/2cd0002b38a4a6814811d2d2770b3b36\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/sensio/generator-bundle/2cd0002b38a4a6814811d2d2770b3b36' -d '/home/vagrant/S/Nearbio/vendor/composer/1a27fade' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/1a27fade'\nREASON: Required by the root package: Install command rule (install sensio/generator-bundle v3.1.2)\n\n\nInstalling symfony/phpunit-bridge (v2.8.16)Downloading https://api.github.com/repos/symfony/phpunit-bridge/zipball/1e76e80da601c6969336309678a0af4018abcae7\n Downloading: 100%Writing /home/vagrant/.composer/cache/files/symfony/phpunit-bridge/e33d85d549bd92933a09de41b596c6281f0fee3a.zip into cache from /home/vagrant/S/Nearbio/vendor/symfony/phpunit-bridge/fc23554ffe0cb130990ab006331a1c0b\n Extracting archiveExecuting command (CWD): unzip -qq '/home/vagrant/S/Nearbio/vendor/symfony/phpunit-bridge/fc23554ffe0cb130990ab006331a1c0b' -d '/home/vagrant/S/Nearbio/vendor/composer/7f92e0de' && chmod -R u+w '/home/vagrant/S/Nearbio/vendor/composer/7f92e0de'\nREASON: Required by the root package: Install command rule (install symfony/phpunit-bridge v2.8.16)\n\n\nparagonie/random_compat suggests installing ext-libsodium (Provides a modern crypto API that can be used to generate random bytes.)\nsymfony/polyfill-intl-icu suggests installing ext-intl (For best performance)\ndoctrine/doctrine-cache-bundle suggests installing symfony/security-acl (For using this bundle to cache ACLs)\nsensio/framework-extra-bundle suggests installing symfony/psr-http-message-bridge (To use the PSR-7 converters)\nmonolog/monolog suggests installing aws/aws-sdk-php (Allow sending log messages to AWS services like DynamoDB)\nmonolog/monolog suggests installing doctrine/couchdb (Allow sending log messages to a CouchDB server)\nmonolog/monolog suggests installing ext-amqp (Allow sending log messages to an AMQP server (1.0+ required))\nmonolog/monolog suggests installing ext-mongo (Allow sending log messages to a MongoDB server)\nmonolog/monolog suggests installing graylog2/gelf-php (Allow sending log messages to a GrayLog2 server)\nmonolog/monolog suggests installing mongodb/mongodb (Allow sending log messages to a MongoDB server via PHP Driver)\nmonolog/monolog suggests installing php-amqplib/php-amqplib (Allow sending log messages to an AMQP server using php-amqplib)\nmonolog/monolog suggests installing php-console/php-console (Allow sending log messages to Google Chrome)\nmonolog/monolog suggests installing rollbar/rollbar (Allow sending log messages to Rollbar)\nmonolog/monolog suggests installing ruflin/elastica (Allow sending log messages to an Elastic Search server)\nmonolog/monolog suggests installing sentry/sentry (Allow sending log messages to a Sentry server)\ndoctrine/data-fixtures suggests installing doctrine/mongodb-odm (For loading MongoDB ODM fixtures)\ndoctrine/data-fixtures suggests installing doctrine/phpcr-odm (For loading PHPCR ODM fixtures)\nzendframework/zend-eventmanager suggests installing container-interop/container-interop (^1.1.0, to use the lazy listeners feature)\nzendframework/zend-eventmanager suggests installing zendframework/zend-stdlib (^2.7.3 || ^3.0, to use the FilterChain feature)\nzendframework/zend-code suggests installing zendframework/zend-stdlib (Zend\\Stdlib component)\nocramius/proxy-manager suggests installing ocramius/generated-hydrator (To have very fast object to array to object conversion for ghost objects)\nocramius/proxy-manager suggests installing zendframework/zend-json (To have the JsonRpc adapter (Remote Object feature))\nocramius/proxy-manager suggests installing zendframework/zend-soap (To have the Soap adapter (Remote Object feature))\nocramius/proxy-manager suggests installing zendframework/zend-xmlrpc (To have the XmlRpc adapter (Remote Object feature))\ncomposer/composer suggests installing ext-zip (Enabling the zip extension allows you to unzip archives)\nphpro/grumphp suggests installing atoum/atoum (Lets GrumPHP run your unit tests.)\nphpro/grumphp suggests installing behat/behat (Lets GrumPHP validate your project features.)\nphpro/grumphp suggests installing codeception/codeception (Lets GrumPHP run your project's full stack tests)\nphpro/grumphp suggests installing codegyre/robo (Lets GrumPHP run your automated PHP tasks.)\nphpro/grumphp suggests installing friendsofphp/php-cs-fixer (Lets GrumPHP automatically fix your codestyle.)\nphpro/grumphp suggests installing jakub-onderka/php-parallel-lint (Lets GrumPHP quickly lint your entire code base.)\nphpro/grumphp suggests installing malukenho/kawaii-gherkin (Lets GrumPHP lint your Gherkin files.)\nphpro/grumphp suggests installing nikic/php-parser (Lets GrumPHP run static analyses through your PHP files.)\nphpro/grumphp suggests installing phing/phing (Lets GrumPHP run your automated PHP tasks.)\nphpro/grumphp suggests installing phpmd/phpmd (Lets GrumPHP sort out the mess in your code)\nphpro/grumphp suggests installing phpspec/phpspec (Lets GrumPHP spec your code.)\nphpro/grumphp suggests installing phpunit/phpunit (Lets GrumPHP run your unit tests.)\nphpro/grumphp suggests installing roave/security-advisories (Lets GrumPHP be sure that there are no known security issues.)\nphpro/grumphp suggests installing sebastian/phpcpd (Lets GrumPHP find duplicated code.)\nphpro/grumphp suggests installing squizlabs/php_codesniffer (Lets GrumPHP sniff on your code.)\nphpro/grumphp suggests installing sstalle/php7cc (Lets GrumPHP check PHP 5.3 - 5.6 code compatibility with PHP 7.)\nGenerating autoload files\nocramius/package-versions:  Generating version class...\nocramius/package-versions: ...done generating version class\n[GrumPHP\\Exception\\RuntimeException]\n  The executable for \"grumphp\" could not be found.\nException trace:\n () at /home/vagrant/S/Nearbio/vendor/phpro/grumphp/src/GrumPHP/Locator/ExternalCommand.php:50\n GrumPHP\\Locator\\ExternalCommand->locate() at /home/vagrant/S/Nearbio/vendor/phpro/grumphp/src/GrumPHP/Composer/GrumPHPPlugin.php:185\n GrumPHP\\Composer\\GrumPHPPlugin->runGrumPhpCommand() at /home/vagrant/S/Nearbio/vendor/phpro/grumphp/src/GrumPHP/Composer/GrumPHPPlugin.php:143\n GrumPHP\\Composer\\GrumPHPPlugin->runScheduledTasks() at n/a:n/a\n call_user_func() at phar:///home/vagrant/composer.phar/src/Composer/EventDispatcher/EventDispatcher.php:171\n Composer\\EventDispatcher\\EventDispatcher->doDispatch() at phar:///home/vagrant/composer.phar/src/Composer/EventDispatcher/EventDispatcher.php:96\n Composer\\EventDispatcher\\EventDispatcher->dispatchScript() at phar:///home/vagrant/composer.phar/src/Composer/Installer.php:307\n Composer\\Installer->run() at phar:///home/vagrant/composer.phar/src/Composer/Command/InstallCommand.php:119\n Composer\\Command\\InstallCommand->execute() at phar:///home/vagrant/composer.phar/vendor/symfony/console/Command/Command.php:257\n Symfony\\Component\\Console\\Command\\Command->run() at phar:///home/vagrant/composer.phar/vendor/symfony/console/Application.php:849\n Symfony\\Component\\Console\\Application->doRunCommand() at phar:///home/vagrant/composer.phar/vendor/symfony/console/Application.php:193\n Symfony\\Component\\Console\\Application->doRun() at phar:///home/vagrant/composer.phar/src/Composer/Console/Application.php:227\n Composer\\Console\\Application->doRun() at phar:///home/vagrant/composer.phar/vendor/symfony/console/Application.php:124\n Symfony\\Component\\Console\\Application->run() at phar:///home/vagrant/composer.phar/src/Composer/Console/Application.php:100\n Composer\\Console\\Application->run() at phar:///home/vagrant/composer.phar/bin/composer:52\n require() at /home/vagrant/composer.phar:24\ninstall [--prefer-source] [--prefer-dist] [--dry-run] [--dev] [--no-dev] [--no-custom-installers] [--no-autoloader] [--no-scripts] [--no-progress] [--no-suggest] [-v|vv|vvv|--verbose] [-o|--optimize-autoloader] [-a|--classmap-authoritative] [--apcu-autoloader] [--ignore-platform-reqs] [--] []...\n```\nThanks for your help . To make it running, I've to install it in global. I tried with this Symfony installation : \n- 2.8\n- 3.0\n- 3.1\nHere is my Vagrantfile : https://github.com/KevinAlberca/MyVagrant/blob/master/LEMP-PHP7/Vagrantfile\nI've once plugin installed, it's vagrant-vbguest. In my /tmp folder, it's work, without issue. ",
    "oojacoboo": "Same issue on localhost here. the bin script makes some pretty opinionated assumptions about the location of the autoload.php file.  Although, that doesn't seem to be the issue.  It's probably related to paths inside the script.  I've stopped digging and will just add the githook manually.. Actually, it seems the autoload wasn't the issue, but assuming paths inside the run() function.  I'm just including the git hooks in our shared repo dependency and copying them into position now.  This works and actually provides us another benefit in being able to maintain unified git hooks across projects.\nThanks.. Thanks @veewee.  Does a subsequent update not trigger checks on the \"plugins\"?  I'm assuming not.\nI've hacked my way around all of this with a custom repo for our coding standards that implements grumphp and other deps.  It's probably one of the nastier hacks I've done recently.  Most of the issue is surrounded by strict path requirements without options to set these dynamically.\nSidebar: I think the PHP/composer community needs to step away from the assumption that repositories will be built with only PHP code and consequently have only PHP dependencies.. Running grumphp run --config=/path/to/grumphp.yml if the path is incorrect, I do not get an error.  This should be throwing an error.  I'm also not convinced, even if the path is correct, that it's actually using the config path as it doesn't output any information about the tasks being included.\nI was able to get it to work by moving the config to the repo root.\nIt seems there are a lot of hard coded path assumptions being made :/. Thanks @veewee.  After all of this, we're going to just custom roll our static code analysis tools with git hooks.  Thanks for the help.  I'll check back on this project after 1.0.  I agree that making paths relative to the grumphp.yml file would solve a lot of the issues.. ",
    "EmiiKhaos": "Especially the composer/composer dependency is a little bit harmful. We have export PATH=./vendor/bin:$PATH on our systems to ease the use of composer installed devtools like phpspec and co. The developer can simply execute phpspec instead of vendor/bin/phpspec. Now the installed composer dependency writes a vendor/bin/composer and this \"overwrites\" the usage of the global composer. So a composer install/update now executes your required composer package in vendor.. We ran in this issue too. We have two phpcsfixer config files. One .php_cs file for all files except some special TYPO3 files. And a .typo3.php_cs with the same settings as the previous one except declare_strict_types. So we need to run phpcsfixer two times with the different config files. Sadly the special TYPO3 files are requiring this.\nI could imagine the following enhancement as example to the config:\nyaml\nparameters:\n    git_dir: .\n    bin_dir: vendor/bin\n    tasks:\n        phpcsfixer2:\n            allow_risky: true\n            path_mode: intersection\n            triggered_by: ['php']\n        phpcsfixer2_typo3:\n            task: phpcsfixer2\n            allow_risky: true\n            config: .typo3.php_cs\n            path_mode: intersection\n            triggered_by: ['php']\nAs you can see, if there is a task parameter in the config, the key of the config will be ignored and the value of the task parameter will be used instead. No BC break and the easy of configuration stays. But special snowflakes ( :trollface: ) like me and others in need can use the extended syntax :grimacing:\nIf you are ok with this suggestions, I try to provide a PR for this.. Since we build a convention checker repository based on GrumPHP, it was easy to find a workaround which doesn't need to be copied in every repo we have. Similar to their example https://github.com/linkorb/conventions-checker\nIn our common/grumphp.yml:\nyaml\nservices:\n    task.phpcsfixer2_typo3:\n        class: Acme\\Typo3\\ConventionsChecker\\Task\\PhpCsFixerV2Typo3\n        arguments:\n            - '@config'\n            - '@process_builder'\n            - '@async_process_runner'\n            - '@formatter.phpcsfixer'\n        tags:\n            - {name: grumphp.task, config: phpcsfixer2_typo3}\nYou need this extra class, because every tasks gets it configuration via $this->grumPHP->getTaskConfiguration($this->getName());, where getName() returns the config key in the parameters.tasks array. The config key in the service definition tag is only used in the compiler pass to not instantiate tasks which are not configured. After this getName() is asked to get the task config from the container. Which can lead to minor inconsistencies in some cases. And thus we need to extend the original fixer:\n```php\n<?php\nnamespace Acme\\Typo3\\ConventionsChecker\\Task;\nuse GrumPHP\\Task\\PhpCsFixerV2;\nclass PhpCsFixerV2Typo3 extends PhpCsFixerV2\n{\n    public function getName(): string\n    {\n        return 'phpcsfixer2_typo3';\n    }\n}\n```\nNow you can add both tasks to your config:\nyaml\nparameters:\n    tasks:\n        phpcsfixer2:\n            allow_risky: true\n            path_mode: intersection\n        phpcsfixer2_typo3:\n            allow_risky: true\n            config: .typo3.php_cs\n            path_mode: intersection\nEDIT 2017-05-02: Fixed config for v0.11.5. Exists as native_function_invocation rule in PHP-CS-Fixer too. Aaaaaaaaaaaand it's a BC break if you redefine php-cs-fixer tasks to have multiple ones :sob:, see https://github.com/phpro/grumphp/issues/309#issuecomment-295249909. Of course it's 0.x so I'm aware of bigger changes. And also this is a subtile one, because is this an extension point or not.. \nAnd it was easy enough and fastly fixed in our conventions checker. Gladfully we did that in a central repo and not every project created this config on their own. I only wanted to point that out for further considerations/issues/PRs ;). To less parameters here, as it extends AbstractExternalTask.\n```PHP Fatal error:  Uncaught ArgumentCountError: Too few arguments to function GrumPHP\\Task\\AbstractExternalTask::__construct(), 1 passed and exactly 3 expected in ./vendor/phpro/grumphp/src/Task/AbstractExternalTask.php:31\nStack trace:\n0 [internal function]: GrumPHP\\Task\\AbstractExternalTask->__construct(Object(GrumPHP\\Configuration\\GrumPHP))\n1 ./vendor/symfony/dependency-injection/ContainerBuilder.php(900): ReflectionClass->newInstanceArgs(Array)\n2 ./vendor/symfony/dependency-injection/ContainerBuilder.php(451): Symfony\\Component\\DependencyInjection\\ContainerBuilder->createService(Object(Symfony\\Component\\DependencyInjection\\Definition), 'task.git.confli...')\n3 ./vendor/symfony/dependency-injection/ContainerBuilder.php(957): Symfony\\Component\\DependencyInjection\\ContainerBuilder->get('task.git.confli...', 1)\n4 . in ./vendor/phpro/grumphp/src/Task/AbstractExternalTask.php on line 31\n```. ",
    "stof": "Installing composer itself looks indeed quite weird. What is the reason to have it as a dependency ?\nFor composer plugins, the code runs inside a composer process anyway, and so already has access to the composer classes (and installing composer a second time could even do weird things). If it is only for testing the composer plugin, it should be a dev requirement.. ",
    "burzum": "I'm also running into this issue. There is no fix for this yet?\nUpdate: When running tortoise git grumphp works. But it doesn't and brings the limit error when I run it manually using the Windows Powershell.. ",
    "Fuco1": "@jyggen Actually, PHPStan will load all files that are required for analysis and it makes no difference for that one particular file if you specify all the rest or not.  So you can safely just pass it one file.\nIf you use standard autoloading (e.g. via composer) there's nothing to do, otherwise you can add a bootstrap script to phpstan.neon which will set up your own custom autoloaders.\nAlso, this PR https://github.com/phpstan/phpstan/pull/132 was resolved so you can do whatever you planned to do with it :). ",
    "szinya": "I could use this too. We have separate phpmd configs for the project files and the tests. With the changes proposed by @patkar our grumphp.yml would look something like this:\nyaml\nparameters:\n    tasks:\n        phpmd:\n            exclude: [tests]\n            ruleset: [phpmd.xml.dist]\n        phpmd_tests:\n            task: phpmd\n            exclude: [src]\n            ruleset: [phpmd_tests.xml.dist]\nHowever, since the current implementation is built around unique registered tasks I understand that this simple change would require significant work to do. Still, I think it would greatly improve the versatility of GrumPHP.. ",
    "cschalenborgh": "Thanks veewee, I didn't realise it also accepted paths. It's working now! \nIs it also possible to submit multiple rulesets, and let the latter ones overrule the others (if duplicate). I currently solved it by downloading the PSR2 ruleset, and changing some rules to fit our project requirements.\nphpcs:\n            standard: ['PSR2', 'phpcs_custom_ruleset.xml']. Works, thanks!. I can't fix it with what @veewee's suggesting, but disabling the git_conflict task does work for me.. ",
    "SerkanYildiz": "What kind of solution do we want here? We can pass the value of the project dir to the fix parameter that will scan all files in 1 time. Or we can check the changed files/files to commit and find common directories and scan dirs instead of files. I would be happy to fix this.. We could catch the exit code that the command returns and generate an error message according the exit code the process returned. I found a documentation on\nhttp://cs.sensiolabs.org/.\n0 OK.\n1 General error (or PHP/HHVM minimal requirement not matched).\n4 Some files have invalid syntax (only in dry-run mode).\n8 Some files need fixing (only in dry-run mode).\n16 Configuration error of the application.\n32 Configuration error of a Fixer.\n64 Exception raised within the application.. Any updates on this @Bilge?. The steps we can reproduce this error.. Hi, what kind of solution do we want here, running multiple git hooks or back up the old one, and insert grumphp git hooks? I am currently working on this, the solution I have now is:\n1) Save the grumphp hooks for ex: $HOOKNAME.d/$HOOKNAME.grumphp.sh\n2) append to .git/hooks/$HOOKNAME : sh $HOOKNAME.d/$HOOKNAME.grumphp.sh\nWhich one do you prefer @veewee \n/ping @Landerstraeten . Okay, I'm fine with it. Indeed we should asap drop support for php 5.6. Fails only on nightly , don't get why. Could you point me into the right direction?. Hi @jyggen thanks for noticing, I updated the PR.. @veewee How can we trigger the check of Travis on this PR?. @veewee done, I hope I did it right. PS: your git email is not correctly configured in your working dir, git didn't recognize your authorship (see cat avatar on your commit). Build fails because of windows command line length limit..\nMaybe it's an good idea to group all changed files per directory and wildcard them?. Thanks, I will look into this.. You can run grumphp run to check all files. Maybe it is possible to add a shell task to run this?. +1. @veewee Indeed! Didn't see it however I am not sure about the submitted solution. Instead of removing the return type it could be made nullable.\nedit: nullable return types are supported from 7.1 okay. It is needed.. IMO the first check isn't needed because the second one decides to continue or not to continue with foreach. ",
    "drupol": "\ud83d\udc4d . :+1:. I pushed the tests but they are currently failing, I will try to find some time during the weekend to fix them.. @localheinz Could you review it before I move it to \"Ready for review\" ?. I did this for a better understanding, configuration properties shouldn't be negated, it's easier for everyone I think.. Fixed.. Fixed.. Fixed.. I guess we can leave it like this for now.. Fixed.. The default value will always fill those properties anyway.. @localheinz Are you ok with this or you really want to change it ?. Could you please describe a bit more what is doing this option you're trying to introduce ?. Ok. fixed.. Fixed.. Fixed.. Fair enough. Fixed.. ",
    "netlooker": "\ud83d\udc4d . :+1: Massive feature :D . +1 - small and neat way of solving this annoying issue.. ",
    "ademarco": "Ok PR is ready for review!. Here a first draft, still need to provide tests.\nI'm not sure how to answer to these:\nIs the run() method readable?\n Is the run() method using the configuration correctly?. @veewee does the PR look OK or should I polish it a little more?. Thanks for merging @veewee !. Ok that worked! :D Thank you!. Actually, after running some more tests, it looks like you can only replace parameters properties and not merge them, which is totally acceptable, only do we want to provide merging at all? Or the default Symfony configuration import is enough?. Right that would work well I guess, meaning that the parent grumphp.yml will \"parametize\" all values that can be extended, so that child grumphp.yml will just override them as you propose above and, if they really want to override all the task, then they can always rewrite it entirely.\nI think this is the cleanest solution, we just need to add documentation and we are done. Thanks!. Actually we don't even need to parametize them, they are already parameters, so it's enough doing:\nyaml\nimports:\n    - { resource: global/grumphp.yml }\nparameters:\n  tasks.git_commit_message.matchers: ['/^JIRA-\\d+: [A-Z].+\\./']\nAnd this will only override the commit message regular exp. for instance. :) \n. Ok, back to square one! \nIt turns out we need to parametize them in order for them to be overridable, so the working solution is the one you suggested at https://github.com/phpro/grumphp/issues/330#issuecomment-287352771\n```yaml\nProject grumphp.yml\nimports:\n    - { resource: convention/grumphp.yml }\nparameters:\n    convention.git_commit_message_matchers: ['/^JIRA-\\d+: [A-Z].+./']\n```\n```yaml\nConvention grumphp.yml\nparameters:\n  convention.git_commit_message_matchers: ['/.*/']\n  tasks:\n    git_commit_message:\n      matchers: \"%convention.git_commit_message_matchers%\"\n      case_insensitive: false\n      multiline: false\n``\n. Done, also task link below in the same file.. Done. Yep, sorry! Removed, I'm using dependency injection now.. Reverted.. Ok, removed in favour of already existingadditional_modifiersoption. Done.. Yep, removed that in favour of::run()method. Reverted. Ok done, I've added the pre commit context too.. Ok, done!. Maybe we should not check for branch naming convention when you are on a detached head or you checkout a specific commit? We could just catch the exception and skip the step by returning aTaskResult::createSkipped(), does that make sense?. Ok shall we call the boolean optionallow_symbolic_references? Should it default totrue`?. something like https://github.com/phpro/grumphp/pull/329/commits/4f95d276414a0a6aa50cec6fda5fe524d8be0820 ?. Ok I'll go for that one.. Done.. ",
    "jfhovinne": ":+1: . ",
    "tgiordmaina": "Yes good advice, but not in the Shell case.\nI tried with this paramater process_timeout but it had no effect on the Symfony process runner which trigger an Exception of type ProcessTimedOutException (after 60 seconds by default). I'm really sorry for the mistake, I tried yesterday (may be with my patch) and this parameter had no effect.\nIndeed without my patch the build process set the timeout correctly.\nThanks for your time and your answer @veewee \nThanks to @jyggen too, finaly you had right..\nI have an additionnal question before purpose another patch :yum: :\nA parameter already exists to display the output of shell (while the process is executed ?) for example :\nbash\nGrumPHP is sniffing your code!\nRunning task 1/3: PhpLint\nRunning task 2/3: SecurityChecker\nRunning task 3/3: Shell\n+ My awesome output 1\n+ My awesome output 2...\nPS: this PR may will be useful for users which search a solution for the Exception 'ProcessTimedOutException' because I found nothing on google by typing 'grumphp error [Symfony\\Component\\Process\\Exception\\ProcessTimedOutException]'.\nYour project is amazing and full of stuff, thanks you again for you quickly answer !\nRegards\n. ",
    "phux": "Please check PR 352.. You're right, it's due to my symfony/process version which is the mentioned 3.3 :)\nAnd you're right, it's not the responsibility of this repo to fix it.\nI am fine with closing this PR. I will just use my fork until process is fixed.. @veewee even better. Thanks for mentioning it!. ",
    "cafferata": "I had the same feelings when I was going trough the documentation and found this task. I was also trying to figure out how this task could help us. Without success! Maybe my old @ceesvanegmond colleague/friend (builder of this task) can help us out?\n\nGit does this out of the box\n\nFor others who like to reproduce this, here is an sample (copied from stackoverflow by Mu):\n```\nNote: commands below in format CUURENT_WORKING_DIRECTORY $ command params\nDesktop $ cd test\n```\nFirst, let us create the repository structure\ntest $ mkdir repo && cd repo && git init && touch file && git add file && git commit -m \"msg\"\nrepo $ cd .. && git clone repo repo_clone && cd repo_clone\nrepo_clone $ echo \"text2\" >> file && git add file && git commit -m \"msg\" && cd ../repo\nrepo $ echo \"text1\" >> file && git add file && git commit -m \"msg\" && cd ../repo_clone\nNow we are in repo_clone, and if you do a git pull, it will throw up conflicts\nrepo_clone $ git pull origin master\nremote: Counting objects: 5, done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom /home/anshulgoyal/Desktop/test/test/repo\n * branch            master     -> FETCH_HEAD\n   24d5b2e..1a1aa70  master     -> origin/master\nAuto-merging file\nCONFLICT (content): Merge conflict in file\nAutomatic merge failed; fix conflicts and then commit the result.\nIf we ignore the conflicts in the clone, and make more commits in the original repo now,\nrepo_clone $ cd ../repo\nrepo $ echo \"text1\" >> file && git add file && git commit -m \"msg\" && cd ../repo_clone\nAnd then we do a git pull, we get\nrepo_clone $ git pull\nU   file\nPull is not possible because you have unmerged files.\nPlease, fix them up in the work tree, and then use 'git add/rm <file>'\nas appropriate to mark resolution, or use 'git commit -a'.\nNote that the file now is in an unmerged state and if we do a git status, we can clearly see the same:\n```\nrepo_clone $ git status\nOn branch master\nYour branch and 'origin/master' have diverged,\nand have 1 and 1 different commit each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\nUnmerged paths:\n  (use \"git add ...\" to mark resolution)\n    both modified:      file\n\n```\nSo, to resolve this, we first need to resolve the merge conflict we ignored earlier\nrepo_clone $ vi file\nand set its contents to\ntext2\ntext1\ntext1\nand then add it and commit the changes\nrepo_clone $ git add file && git commit -m \"resolved merge conflicts\"\n[master 39c3ba1] resolved merge conflicts. For me there is no reason to bringing back the old git_conflict tasks. Thanks for asking @ceesvanegmond!. Hi @veewee,\nThanks for merging and notes! There is one commit waiting on me. Hope to finish the ideas this Easter weekend.. Thanks @patkar for pointing this out.. See also the online Github rich diff:\n\ndoc/tasks/composer_require_checker.md\ndoc/tasks/phpstan.md\ndoc/tasks/psalm.md. >Did you check all the .md files?\n\nYep, with an regex find/replace by PHPStorm.. Is it not an better idea to add this file to the GrumPHP git repository, and to the .gitattributes? Now you have created an (unnecessary) external dependency in my opinion. . Sure! I will do this tomorrow. . Done! See here the second PR against the grumpy-seventies branch: https://github.com/phpro/grumphp/pull/572. @Landerstraeten, is there a view on a new release date?. ",
    "cerw": "I am still getting these but only in Linux (not Mac) \n```\nPHP Fatal error:  Uncaught TypeError: Argument 6 passed to Symfony\\Component\\Process\\Process::__construct() must be of the type array, null given, called in /builds/sls/Community/vendor/symfony/process/ProcessBuilder.php on line 274 and defined in phar:///usr/local/bin/composer/vendor/symfony/process/Process.php:141\nStack trace:\n0 /builds/sls/Community/vendor/symfony/process/ProcessBuilder.php(274): Symfony\\Component\\Process\\Process->__construct(Array, NULL, Array, NULL, 60, NULL)\n1 /builds/sls/Community/vendor/phpro/grumphp/src/Composer/GrumPHPPlugin.php(182): Symfony\\Component\\Process\\ProcessBuilder->getProcess()\n2 /builds/sls/Community/vendor/phpro/grumphp/src/Composer/GrumPHPPlugin.php(137): GrumPHP\\Composer\\GrumPHPPlugin->runGrumPhpCommand('configure')\n3 [internal function]: GrumPHP\\Composer\\GrumPHPPlugin->runScheduledTasks(Object(Composer\\Script\\Event))\n4 phar:///usr/local/bin/composer/src/Composer/EventDispatcher/EventDispatcher.php(171): call_user_func(Array, Object(Composer\\Script\\Event))\n5 phar:///usr/local/bin in phar:///usr/local/bin/composer/vendor/symfony/process/Process.php on line 141\nFatal error: Uncaught TypeError: Argument 6 passed to Symfony\\Component\\Process\\Process::__construct() must be of the type array, null given, called in /builds/sls/Community/vendor/symfony/process/ProcessBuilder.php on line 274 and defined in phar:///usr/local/bin/composer/vendor/symfony/process/Process.php:141\nStack trace:\n0 /builds/sls/Community/vendor/symfony/process/ProcessBuilder.php(274): Symfony\\Component\\Process\\Process->__construct(Array, NULL, Array, NULL, 60, NULL)\n1 /builds/sls/Community/vendor/phpro/grumphp/src/Composer/GrumPHPPlugin.php(182): Symfony\\Component\\Process\\ProcessBuilder->getProcess()\n2 /builds/sls/Community/vendor/phpro/grumphp/src/Composer/GrumPHPPlugin.php(137): GrumPHP\\Composer\\GrumPHPPlugin->runGrumPhpCommand('configure')\n3 [internal function]: GrumPHP\\Composer\\GrumPHPPlugin->runScheduledTasks(Object(Composer\\Script\\Event))\n4 phar:///usr/local/bin/composer/src/Composer/EventDispatcher/EventDispatcher.php(171): call_user_func(Array, Object(Composer\\Script\\Event))\n5 phar:///usr/local/bin in phar:///usr/local/bin/composer/vendor/symfony/process/Process.php on line 141\nERROR: Job failed: exit code 1\n```\nHere is my grumphp.yml\n```\nparameters:\n    git_dir: .\n    bin_dir: \"./vendor/bin\"\n    stop_on_failure: true\n    process_timeout: 180\n    tasks:\n      phpcs:\n          standard: PSR2\n          show_warnings: false\n          ignore_patterns: [./tests, ./resources/*, ./database, ./bootstrap, ./public, ./config/]\n      # phpunit:\n      # git_commit_message:\n      # git_conflict:\n      # gulp:\n      jsonlint:\n      phplint:\n      git_blacklist:\n                  keywords:\n                      - \"die(\"\n                      - \" dd(\"\n                      - \"var_dump(\"\n                      - \"exit;\"\n                  triggered_by: [php]\n      composer:\n        file: ./composer.json\n```. @TFarla in my Docker testing image i am removing grumphp before runnign tests that;s the only thing that fixed it. . ",
    "TFarla": "Did you solve the TypeError: Argument 6 passed to issue? The same error occurs on my ubuntu xenial php 7.0 machine. Guess I will do the same and remove the dependency during CI. Thanks for the suggestion.. ",
    "voidtek": "I applied this patch on two machines, the first one have this issue and the second one works perfectly without this patch.\nAfter applying this patch, these two machines work now perfectly, the issue mentioned doesn't occur and we have not regression bugs. \nThanks for your job. . ",
    "tdgroot": "@veewee Thank you :). In 2.2 dependencies will be better, but we have to be patient haha. Thanks for your talk last week by the way! . ",
    "benbor": "@jyggen Yes, i meant it. \nAnd yes, you're right again, the line number not always being exact for multi-line definitions. But for some projects (very awful legacy projects) with huge files it will be silver bullet.\n@veewee From my point of view, we can do it.\nIf external CLI tool return line numbers of fails ( for example CodeSniffer) we can parse output and after that found intersections. Of course it's will work for external CLI only which return needed data. . ",
    "Nek-": "@veewee oh! Thank you. And sorry for the wrong issue.. @veewee do you accept a contribution to fix it?. Mybad, duplicated :o !. ",
    "richardhughes": "Hey @veewee, I'm happy to take a look at this, if you need the help. If so, would you be able to send the command over that you used to generate those errors?\nCheers. Hey @veewee, How is this progressing? If you need a hand, I'll be happy to help. Do you need to update your version of composer? composer self-update?. Yeah that seems fine, do you have a copy of your composer.json file?. ",
    "UrGuardian4ngel": "Fixing these deprecations (in a backward compatible way) would also kinda be tackled in #428... :). Or maybe you could read the file list from STDIN when a certain flag is defined, like e.g. -i|--from-stdin?\n```bash\nfrom e.g. a static file list\n$ cat file-list.txt | grumphp run --from-stdin\nextracted from a git diff\n$ git diff HEAD~3... --name-only | grumphp run --from-stdin\nor generated by any other tool (in this case, silver searcher)\n$ ag -l --php -- src/AppBundle/SomeComponent | grumphp run --from-stdin\n``. Oh yes. But I was assuming he was talking about thegrumphp run` command, as per the issue title:\n\nProvide mechanism to run GrumPHP without Git for a list of specified files\n\nwhich is using RegisteredFiles ($ git ls-files), and depends on a Git\\Repository.\n\u2013 P.S.: Didn't see the grumphp git:pre-commit internals yet \n\nIMO this \"non-git command\" (grumphp run) would not necessarily require a git repo to work. If you were e.g. manually able to pass a file list in (via pipe, variadic argument, ...). It could still default to $ git ls-files though, if no file list is otherwise present.\nBasically applying the same trick as your Git\\PreCommitCommand \u2013 with the difference that grumphp run would accept a file list, and not a raw git diff output (as grumphp git:pre-commit does).\nGranted, all other functionalities in the \"git\" command namespace (grumphp git:*) are obviously coupled to git functionalities, so there's also that... :)\nTL;DR: Maybe we could apply a similar trick to the grumphp run command?. Thanks, captain obvious ;)\nI'm still looking into the why of it. But it they were passing locally under PHP 7.1 + under PHP 5.6 with different versions of the dependencies :). > What are your opinions on supporting Symfony 2.8? it is a LTS maintained until 11/2018 but as you can see a lot has changed since that version, forcing us to write BC scenarios.\nTrue. \ud83d\ude04  But I did not really know about your \"versioning management\" and \"branch promotion strategy\" / rippling & backporting ... in this project. \ud83d\ude15 \nBut, if you could still introduce \"new features\" & bugfixes in a lower version, and drop Symfony 2.8 support in a newer version. Don't think there should be any issues with that?\nHowever, if a major release of GrumPHP would mean that previous versions no longer can receive new features \u2013 as e.g. new supported tasks, not sure if that would be beneficial to a lot of your users? But you guys probably have more insights into the usages (versions, user base, ...) for this tool ^^. > Lets keep Symfony 2.X support for now.\n@veewee Sure, I won't touch the 2.x part.\nIt was just a \"thinking path\" to get rid of the composer issues. But we got around it by simply bumping the phpunit/phpunit dev dependency \u2013 for now.\n\n\nCan you change travis to validate against symfony 2, 3 and 4 ?\n\nDisclaimer: I have no experience with Travis, at all.\nSo if somebody could chime in on this to at least point me in the right direction, that would very much be appreciated... :)\n\n\nTo support such wide component range, would all of those be covered by the composer update --prefer-lowest method, like this.\nBecause that is potentially one of the reasons that we had to bump phpunit/phpunit (to get around that composer conflict on PHP 5.6) \u2013 as per some issues & articles I read yesterday.\n\n\nAnother way I noticed yesterday that is common, is requiring the whole symfony/symfony:x.0.*, which does not seem to be a clean way either (as this would pull in all of their components). But maybe that approach is better suited for bundles, as mentioned here?\n\n\n\nAlso, IMO this PR is not the place to \"refactor\" the way that .travis.yml works.\nMaybe create another issue / PR that does this, that then could be merged / rebased upon, to extend \"include v4\" when necessary?. Don't have the time today to pick up the requested changes.\nBut I will try to take them up later this week... ;). > symfony/lts is nice solution\nHmm, I also had thought of this? \ud83d\udc4d\nOnly a bit weird to have v2, v3, 4.x@dev-master.\nOn the other hand, I think we probably just should not include that last one (yet)? Until they launch v5...\n. > It looks like you also missed the file \\GrumPHP\\Composer\\DevelopmentIntegrator which still contains a Symfony ProcessBuilder.\nYeah. FML :( ;)\nAnd same for the GrumPHPPlugin, apparently? Good catch, @veewee!\nLooks like it's all statics, no container. Would you mind if I just skip a step:\n```diff\nNo new GrumPHP\\Process\\ProcessBuilder() here, due to too many constructor dependencies? :-/\n\n$commandlineArgs = ProcessArgumentsCollection::forExecutable($composerExecutable);\n$commandlineArgs->add('git:init');\n+\n$process = ProcessBuilder::create([$composerExecutable, 'git:init'])->getProcess();\n$process = new \\Symfony\\Component\\Process\\Process($commandlineArgs->generateCliCommand());\n```\n\n\non a side note, looks like there's a typo there\ndiff\n- noramlizePath()\n+ normalizePath()\nCreate another PR for that? Or not really worth it?. Correct. That \"array notation\" is indeed internally escaping all arguments...\nBut the component accepts only arrays from a specific version (3.3+), so it will break in all versions before that. And we're still supporting the \"legacy\" Symfony components (version ~2.7 -> 2.8.x) for now.\nThese deprecations in Symfony 3.3 API (w/ breaking changes in 4.0), have already been made in #428 (in a backward-compatible way) so they should work for all Symfony versions this project supports. And not only for symfony/process, but also for all other affected Symfony components...\nI think that's the reason why this PR has a duplicate tag, @veewee? Maintainers will probably be able to give us a bit more information about what's going to happen next? And maybe even a \"timeline\"? But not sure about that...\n\nIn the meantime, for more information, please check:\n\nsrc/Process/ProcessFactory, which you can use to construct a Process (in a backward compatible way where necessary) from GrumPHP's ProcessArgumentsCollection.\nHere, all arguments are currently 'manually' escaped w/ Symfony 4.0's escape \"helper\" implementation. This implementation can be simplified to pass in a simple array (as you saw) from the moment support for versions lower than symfony/process: ^3.3 get dropped.\nsrc/Process/ProcessBuilder removes the now-deprecated Symfony ProcessBuilder, in favor of immediately creating processes. But we'll probably keep around GrumPHP's ProcessBuilder utility for now?\n\nAnd maybe you can give that symfony-4 branch a spin, to see if it solves your problems? ;). that will be a lot of \"changes\" then. I was not quite sure I was allowed to make them.\nWill look into it this weekend, when I find some time. Currently a bit slammed at work \ud83d\ude03 . Personally I'd prefer generateCliCommand(): string approach (in order to not couple the collection too much to Symfony). On the other hand, it will contain this \"backwards compatibility layer\" anyway, and I feel it might be a bit easier to just have a createProcess(): Process.\nMaybe generateCliCommand(): string|array, which conforms with what Symfony Process's constructor expects (per version)?\nOr add a \"fallback\" within your ProcessArgumentsCollection, to your own (copy) of the implementation \u2013 as done in composer/composer#6788?. Maybe explicit service locators might be a good fit, too? That way, we don't have to inject the whole container (which is considered a bad practice), and we also don't have to declare all of these 'private' services as public, just to please the 4.0 container?. Good point. \ud83d\ude09 Didn't really look into its dependency chain.\nAnd also turns out this is only for dev-dependencies, too. So yeah.... The dev dependency on phpunit/phpunit is making this crash on PHP 5.6.\n```\n$ travis_retry composer update --no-progress --profile --no-scripts --no-suggest $DEPENDENCIES\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - phpunit/phpunit 6.5.5 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.5.4 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.5.3 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.5.2 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.5.1 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.5.0 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 6.4.4 requires php ^7.0 -> your PHP version (5.6.32) does not satisfy that requirement.\n    - phpunit/phpunit 5.7.25 requires sebastian/diff ^1.4.3 -> satisfiable by sebastian/diff[1.4.3].\n    - phpunit/phpunit 5.7.26 requires sebastian/diff ^1.4.3 -> satisfiable by sebastian/diff[1.4.3].\n    - Conclusion: don't install sebastian/diff 1.4.3\n    - Installation request for phpunit/phpunit ^5.7.25|^6.4.4 -> satisfiable by phpunit/phpunit[5.7.25, 5.7.26, 6.4.4, 6.5.0, 6.5.1, 6.5.2, 6.5.3, 6.5.4, 6.5.5].\n```\nNot that much alternative solutions I can find at the moment, next to:\n- composer/composer#6207\n- composer/composer#6856\n(as mentioned in the commit message)\nOther alternative solutions to look into:\n- maybe just using \"phars\" for these test dependencies, so we can lose the dependency\n- ~~restrain the components (drop Symfony 2.7/2.8 support) \u2013 but not tested~~\n- .... Weird... Alternative solution, instead of the .travis.yml file changes:\ndiff\ndiff --git a/composer.json b/composer.json\nindex 0fd1ed8..4a93f83 100644\n--- a/composer.json\n+++ b/composer.json\n@@ -29,7 +29,7 @@\n         \"nikic/php-parser\": \"~2.1\",\n         \"phpspec/phpspec\": \"^3.2.2\",\n         \"phpspec/prophecy\": \"^1.6.2\",\n-        \"phpunit/phpunit\": \"^5.7.25|^6.4.4\",\n+        \"phpunit/phpunit\": \"^5.7.26|^6.4.4\",\n         \"sebastian/comparator\": \"^1.2.4\",\n         \"sensiolabs/security-checker\": \"^4.0\",\n         \"squizlabs/php_codesniffer\": \"~2.4\"\nFor some reason, that also gets rid of that \"conflict\"...? What do you think, @keradus?\nShould I go with bumping phpunit/phpunit a little bit, instead?. Could be the underlying issue, indeed. I don't quit understand why else it would start happening otherwise, out of the blue?\nBut, I went with simply bumping phpunit/phpunit instead. Fixes the errors, too. And is indeed a lot cleaner... ;-). Okay, I will change this.\nStyling wise, do you guys prefer array_map with a callback:\n```\n$commandlineArgs = array_map(function ($argument) {\n    return ProcessUtils::escapeArgument($argument);\n}, $this->getValues());\n$commandline = implode(' ', $commandlineArgs);\n```\nor rather a simple foreach loop (for readability):\n```\n$commandlineArgs = [];\nforeach ($this->getValues() as $argument) {\n    $commandlineArgs[] = ProcessUtils::escapeArgument($argument);\n}\n$commandline = implode(' ', $commandlineArgs);\n``. Not as far as I remember? At least not in _this_ project?  \n[It sure is deprecated / dropped from Symfony v3.4 / v4, in favor of regularEventDispatcher` with closure factories](https://symfony.com/doc/current/components/event_dispatcher/container_aware_dispatcher.html).\nMostly it looked like simple EventDispatcher stuff.\nBut I'll double-check this later on, just to be on the safe side.... Will update these, later on.. Been lookin' into this one. Looks like the Travis array-related message is coming from over here... :(\nThis change was related to the deprecation of ContainerAwareEventDispatcher, as it's gone from v4. But the thing is, it is still needed for the RegisterListenersPass (which is doing some magic, and eventually can call the container-aware's additional addSubscriberService method).\nP.S.: It's subscriber.stash_unstaged_changes, btw...\nI was thinking about the fix below, which falls back on the container-aware implementation (v2.8, v3.4) as long as it's available, but uses the newer version when it does not anymore.\nIt fixes the issue without having to duplicate Symfony core code. But however, I'm not able to commit this because of Object Calisthenics violations:\n- phpmd's \"no else\"\n- phpparser's never_use_else\nYou'd think an early return alternative (without else) would work then. Doesn't like that either, as it starts complaining about side effects.\nI can silence phpmd (hence the @codingStandardsIgnoreFile), but can't find a way to do the same to phpparser.\n\n```diff\ndiff --git a/resources/config/services.yml b/resources/config/services.yml\nindex ab6eab9..43184d0 100644\n--- a/resources/config/services.yml\n+++ b/resources/config/services.yml\n@@ -11,7 +11,9 @@ services:\n         public: true\n event_dispatcher:\n\n\nclass: Symfony\\Component\\EventDispatcher\\EventDispatcher\nclass: GrumPHP\\Event\\EventDispatcher\narguments:\n\n\n'@service_container'\n         public: true\n\nfilesystem:\ndiff --git a/src/Event/EventDispatcher.php b/src/Event/EventDispatcher.php\nnew file mode 100644\nindex 0000000..60bee3c\n--- /dev/null\n+++ b/src/Event/EventDispatcher.php\n@@ -0,0 +1,20 @@\n+<?php\n+\n+namespace GrumPHP\\Event;\n+\n+use Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher;\n+use Symfony\\Component\\EventDispatcher\\EventDispatcher as SymfonyEventDispatcher;\n+\n+// Backward compatible layer for Symfony < 4.0.\n+// The container aware variant has been deprecated (3.4) and removed (4.0),\n+// but is still required to keep the RegisterListenersPass happy.\n+// @codingStandardsIgnoreFile\n+if (class_exists(ContainerAwareEventDispatcher::class)) {\n+    class EventDispatcher extends ContainerAwareEventDispatcher\n+    {\n+    }\n+} else {\n+    class EventDispatcher extends SymfonyEventDispatcher\n+    {\n+    }\n+}\n``. Another alternative could be:\n- restore the original service definition (ContainerAwareEventDispatcher)\n- using a compiler pass, swap it out with the regular one (plainEventDispatcher`) if class no longer exists.\n\n\nOr, the other way around:\n- use v4's EventDispatcher by default\n- swap it out with ContainerAwareEventDispatcher when available\n\nBut, as you didn't like my previous attempt to a compiler pass (visibility), I went with the above extension instead.\nWhich direction do you suggest, @veewee? Or do you have other alternatives?\nI'd like to avoid duplicating the whole code (and tests) duplication for a  ContainerAwareEventDispatcher copy (which is deprecated). Or a RegisterListenersPass copy... \ud83d\udc4e . Ah, ofcourse. That should work too... \ud83d\udc4d\nWill look into that, instead. Thanks.\nThe break from work-holiday obviously doesn't do me much good \u2013 for coding xD. Does that even work in phpspec? \ud83e\udd14 \nI thought that was a phpunit directive... :-/. Yeah, this one is a spec test.\nThe \"splitted YAML linter\"-stuff is phpunit, though ;). ... which show me, that I actually messed up big time in my naming for commit message, helper method names & comments over there.\nOfc it's the symfony/yaml component. A linter does not exist \u2013 by my knowledge. Dang it. Will fix & rebase that later tonight / this week.... It does not. So I'll mark it both as final and @internal.. It can be removed from the moment that Symfony's Process can accept an array of parameters (and thus, escape them itself again) (which seems to be 3.3).\nLittle bit tricky answer, as that means from that moment on, we could / should then also remove the newly introduced-and-then-abstracted ProcessArgumentsCollection::generateCliCommand() method, too?\nShould I mark that method additionally as \"internal\" and/or \"deprecated\", as of Symfony 3.3+?. This public method kinda has been suggested by @veewee.\nMaybe I should go with his second approach instead?\n\nMaybe it's better to add a (...) createProcess(): Process method to the ProcessArgumentsCollection so that it is reusable?\n\nBut I initially went with the first, because the second was kinda hard-coupling the GrumPHP's ProcessArgumentsCollection to Symfony's Process component.. Not sure. Guess the supportsFlags method above should receive the same treatment, then?. ",
    "amcsi": "@veewee Unfortunately even if I use -vvv the output is the same:\n``\nGrumPHP detected a commit-msg command.\nGrumPHP is sniffing your code!\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n         \u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n  \u2584\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                         \u2588\u2588\u2588\u2588\u2588\u2588\u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2588\u2588\u258c          \u2588\u2588       \u2588\u2588\u2588\u2588\u258c\n        \u2590\u2588\u258c                            \u2588\u2588\u2588\n         \u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588\n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588\n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2590\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580\n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580\n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588\n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2590\u2588\u258c\n                        \u2588\u2588\u2580   \u2590\u2580\n       _    _ _                         _ _\n      / \\  | | |   __ _  ___   ___   __| | |\n     / _ \\ | | |  / _ |/ _ \\ / _ \\ / ` | |\n    /  \\| | | | (| | () | () | (| ||\n   //   __||  __, |_/ ___/ _,()\n                  |___/\nAborting commit due to empty commit message.\nC:\\Users\\attila\\Vagrant\\wa\\wa-api>\n```\nThe pre-commit contents is the following:\n```sh\n!/bin/sh\n\nRun the hook command.\nNote: this will be replaced by the real command during copy.\n\nFetch the GIT diff and format it as command input:\nDIFF=$(git diff -r -p -m -M --full-index --staged | cat)\nRun GrumPHP\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | exec \"vendor/bin/grumphp\" \"git:pre-commit\" \"-vvv\" '--skip-success-output')\n```\nThis only happens on Windows. All my colleagues using mostly Mac, some Linux and actually even for some Windows users there's no problem; only for me using Windows I get this.\nMy grumphp.yml file is this:\n```yaml\nparameters:\n  tasks:\n    composer:\nphpparser:\n  visitors:\n    no_exit_statements: ~\n\nphpcsfixer2:\n  allow_risky: true\n  rules:\n    '@Symfony': true\n\n    array_syntax:\n      syntax: short\n    blank_line_after_opening_tag: false\n    blank_line_before_return: false\n    cast_spaces: false\n    class_definition:\n      singleLine: false\n    combine_consecutive_unsets: true\n    concat_space:\n      spacing: one\n    declare_strict_types: true\n    dir_constant: true\n    ereg_to_preg: true\n    heredoc_to_nowdoc: true\n    linebreak_after_opening_tag: true\n    modernize_types_casting: true\n    new_with_braces: false\n    no_extra_consecutive_blank_lines:\n      - continue\n      - curly_brace_block\n      - extra\n      - parenthesis_brace_block\n      - square_brace_block\n      - throw\n      - use\n      - useTrait\n    no_multiline_whitespace_around_double_arrow: false\n    no_php4_constructor: true\n    no_unreachable_default_argument_value: true\n    no_useless_else: true\n    ordered_class_elements:\n      - use_trait\n      - constant\n      - property\n      - construct\n      - destruct\n      - magic\n      - phpunit\n      - method\n    ordered_imports: true\n    protected_to_private: true\n    psr0: true\n    psr4: true\n    single_blank_line_before_namespace: false\n    strict_comparison: true\n    strict_param: true\n    ternary_to_null_coalescing: true\n\n    # PHPUnit\n    php_unit_strict: true\n\n    # PHPDoc\n    phpdoc_add_missing_param_annotation:\n      only_untyped: false\n    phpdoc_align: false\n    phpdoc_annotation_without_dot: false\n    phpdoc_no_empty_return: false\n    phpdoc_separation: false\n    phpdoc_summary: false\n\n``. @veewee Sorry, my mistake; I pasted the wrong file's contents.\nPlease check my edited post again.. Neither\"vendor/bin/grumphp\" \"git:pre-commit\" \"-vvv\"norvendor/bin/grumphp\" \"git:pre-commit\" \"-vvv\"` work on windows.\nIf I do php vendor\\bin\\grumphp git:pre-commit -vvv, then it just gets stuck forever with no output.. I solved this issue, apologies for wasting your time.\nThe issue was a bit complicated, but basically it had to do with grumphp.yml not being in the standard location (project path), the relative path defined in composer, and composer being installed from within the virtual machine with a shared FS, but Git and GrumPHP run from within the host machine.. I think that the non-quoting of the script file could be caused by symfony/process :/\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/Process.php#L1558-L1560. And it appears that the --dry-run bit is not removed for the same reason that Symfony doesn't quote each CLI argument (besides the command itself) whereas it should.\nHere is the code that would remove the --dry-run bit: https://github.com/phpro/grumphp/blob/master/src/Formatter/PhpCsFixerFormatter.php#L51\nAs you can see in the code, --dry-run is quoted and then str_replace-removed. The problem is that since Symfony doesn't quote the argument, the quoted '--dry-run' search substring does not match the unquoted --dry-run found in the subject, thus str_replace() does not remove it and leaves it in.. Unfortunately I checked and it seems like there's more to it than just symfony/process not quoting the parameters.\nBy changing https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/Process.php#L1558-L1560 to always be true, seemingly the file name does get quoted with a single quote, and so do the other arguments, however '--dry-run' still doesn't get removed. It seems like it's expecting it to be quoted in double quotes.. ",
    "Tjitse-E": "Yes, this seems to work. Thanks a lot @veewee! . ",
    "sivajik34": "Cannot create cache directory /home/dcwlp24014/.composer/cache/repo/https---repo.magento.com/, or directory is not writable. Proceeding without cache\nCannot create cache directory /home/dcwlp24014/.composer/cache/repo/https---packagist.org/, or directory is not writable. Proceeding without cache\nCannot create cache directory /home/dcwlp24014/.composer/cache/files/, or directory is not writable. Proceeding without cache\nUsing version ^0.14.0 for phpro/grumphp\n./composer.json has been updated\nCannot create cache directory /home/dcwlp24014/.composer/cache/repo/https---repo.magento.com/, or directory is not writable. Proceeding without cache\nCannot create cache directory /home/dcwlp24014/.composer/cache/repo/https---packagist.org/, or directory is not writable. Proceeding without cache\nCannot create cache directory /home/dcwlp24014/.composer/cache/files/, or directory is not writable. Proceeding without cache\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Conclusion: remove symfony/console v2.8.34\n    - Conclusion: don't install symfony/console v2.8.34\n    - symfony/yaml v3.4.0 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.1 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.2 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.3 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.4 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.5 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.6 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v3.4.7 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.0 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.1 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.2 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.3 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.4 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.5 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.6 conflicts with symfony/console[v2.8.34].\n    - symfony/yaml v4.0.7 conflicts with symfony/console[v2.8.34].\n    - Installation request for symfony/console (locked at v2.8.34) -> satisfiable by symfony/console[v2.8.34].\n    - Installation request for phpro/grumphp ^0.14.0 -> satisfiable by phpro/grumphp[v0.14.0].\n    - Conclusion: don't install symfony/dependency-injection v3.4.4|install symfony/yaml v3.4.0|install symfony/yaml v3.4.1|install symfony/yaml v3.4.2|install symfony/yaml v3.4.3|install symfony/yaml v3.4.4|install symfony/yaml v3.4.5|install symfony/yaml v3.4.6|install symfony/yaml v3.4.7|install symfony/yaml v4.0.0|install symfony/yaml v4.0.1|install symfony/yaml v4.0.2|install symfony/yaml v4.0.3|install symfony/yaml v4.0.4|install symfony/yaml v4.0.5|install symfony/yaml v4.0.6|install symfony/yaml v4.0.7\n    - Conclusion: remove symfony/dependency-injection v3.4.4|install symfony/yaml v3.4.0|install symfony/yaml v3.4.1|install symfony/yaml v3.4.2|install symfony/yaml v3.4.3|install symfony/yaml v3.4.4|install symfony/yaml v3.4.5|install symfony/yaml v3.4.6|install symfony/yaml v3.4.7|install symfony/yaml v4.0.0|install symfony/yaml v4.0.1|install symfony/yaml v4.0.2|install symfony/yaml v4.0.3|install symfony/yaml v4.0.4|install symfony/yaml v4.0.5|install symfony/yaml v4.0.6|install symfony/yaml v4.0.7\n    - phpro/grumphp v0.14.0 requires symfony/yaml ~2.7|~3.0|~4.0 -> satisfiable by symfony/yaml[v2.7.0, v2.7.1, v2.7.10, v2.7.11, v2.7.12, v2.7.13, v2.7.14, v2.7.15, v2.7.16, v2.7.17, v2.7.18, v2.7.19, v2.7.2, v2.7.20, v2.7.21, v2.7.22, v2.7.23, v2.7.24, v2.7.25, v2.7.26, v2.7.27, v2.7.28, v2.7.29, v2.7.3, v2.7.30, v2.7.31, v2.7.32, v2.7.33, v2.7.34, v2.7.35, v2.7.36, v2.7.37, v2.7.38, v2.7.39, v2.7.4, v2.7.40, v2.7.41, v2.7.42, v2.7.43, v2.7.44, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.1, v2.8.10, v2.8.11, v2.8.12, v2.8.13, v2.8.14, v2.8.15, v2.8.16, v2.8.17, v2.8.18, v2.8.19, v2.8.2, v2.8.20, v2.8.21, v2.8.22, v2.8.23, v2.8.24, v2.8.25, v2.8.26, v2.8.27, v2.8.28, v2.8.29, v2.8.3, v2.8.30, v2.8.31, v2.8.32, v2.8.33, v2.8.34, v2.8.35, v2.8.36, v2.8.37, v2.8.4, v2.8.5, v2.8.6, v2.8.7, v2.8.8, v2.8.9, v3.0.0, v3.0.1, v3.0.2, v3.0.3, v3.0.4, v3.0.5, v3.0.6, v3.0.7, v3.0.8, v3.0.9, v3.1.0, v3.1.1, v3.1.10, v3.1.2, v3.1.3, v3.1.4, v3.1.5, v3.1.6, v3.1.7, v3.1.8, v3.1.9, v3.2.0, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.15, v3.3.16, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.1, v3.4.2, v3.4.3, v3.4.4, v3.4.5, v3.4.6, v3.4.7, v4.0.0, v4.0.1, v4.0.2, v4.0.3, v4.0.4, v4.0.5, v4.0.6, v4.0.7].\n    - symfony/yaml v2.7.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.10 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.11 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.12 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.13 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.14 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.15 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.16 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.17 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.18 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.19 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.20 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.21 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.22 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.23 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.24 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.25 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.26 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.27 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.28 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.29 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.30 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.31 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.32 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.33 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.34 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.35 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.36 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.37 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.38 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.39 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.40 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.41 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.42 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.43 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.44 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.7.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.10 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.11 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.12 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.13 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.14 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.15 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.16 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.17 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.18 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.19 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.20 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.21 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.22 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.23 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.24 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.25 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.26 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.27 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.28 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.29 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.30 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.31 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.32 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.33 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.34 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.35 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.36 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.37 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v2.8.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.0.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.10 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.1.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.10 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.11 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.12 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.13 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.14 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.2.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.0 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.1 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.10 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.11 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.12 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.13 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.14 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.15 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.16 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.2 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.3 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.4 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.5 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.6 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.7 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.8 conflicts with symfony/dependency-injection[v3.4.4].\n    - symfony/yaml v3.3.9 conflicts with symfony/dependency-injection[v3.4.4].\n    - Installation request for symfony/dependency-injection (locked at v3.4.4) -> satisfiable by symfony/dependency-injection[v3.4.4].\nInstallation failed, reverting ./composer.json to its original content.\n. Team,\nAny update on this?\ncan you help me ?. @lykciv thank you for your response.\nStill i'm facing same issue.composer require --dev phpro/grumphp:0.12.1\nand my magento version :2.2.3\nI have to change anything in composer.json file ?. {\n    \"name\": \"magento/project-community-edition\",\n    \"description\": \"eCommerce Platform for Growth (Community Edition)\",\n    \"type\": \"project\",\n    \"version\": \"2.2.3\",\n    \"license\": [\n        \"OSL-3.0\",\n        \"AFL-3.0\"\n    ],\n    \"require\": {\n        \"magento/product-community-edition\": \"2.2.3\",\n        \"composer/composer\": \"@alpha\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~6.2.0\",\n        \"squizlabs/php_codesniffer\": \"3.2.2\",\n        \"phpmd/phpmd\": \"@stable\",\n        \"pdepend/pdepend\": \"2.5.2\",\n        \"friendsofphp/php-cs-fixer\": \"~2.2.0\",\n        \"lusitanian/oauth\": \"~0.8.10\",\n        \"sebastian/phpcpd\": \"2.0.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Magento\\\\Framework\\\\\": \"lib/internal/Magento/Framework/\",\n            \"Magento\\\\Setup\\\\\": \"setup/src/Magento/Setup/\",\n            \"Magento\\\\\": \"app/code/Magento/\"\n        },\n        \"psr-0\": {\n            \"\": [\n                \"app/code/\"\n            ]\n        },\n        \"files\": [\n            \"app/etc/NonComposerComponentRegistration.php\"\n        ],\n        \"exclude-from-classmap\": [\n            \"**/dev/**\",\n            \"**/update/**\",\n            \"**/Test/**\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Magento\\\\Sniffs\\\\\": \"dev/tests/static/framework/Magento/Sniffs/\",\n            \"Magento\\\\Tools\\\\\": \"dev/tools/Magento/Tools/\",\n            \"Magento\\\\Tools\\\\Sanity\\\\\": \"dev/build/publication/sanity/Magento/Tools/Sanity/\",\n            \"Magento\\\\TestFramework\\\\Inspection\\\\\": \"dev/tests/static/framework/Magento/TestFramework/Inspection/\",\n            \"Magento\\\\TestFramework\\\\Utility\\\\\": \"dev/tests/static/framework/Magento/TestFramework/Utility/\"\n        }\n    },\n    \"minimum-stability\": \"stable\",\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://repo.magento.com/\"\n        }\n    ],\n    \"extra\": {\n        \"magento-force\": \"override\"\n    }\n}. any update on this, please!. @veewee Yes,understood.In FAQ i  find magento2 related symfony/console issue.\nIn the same way is there any workaround for magento 2.2.3 version ?. I found following the documentation. but show_warnings not working.\nMagento\nIf you want to use Phpcs for your Magento projects, you can require the magento-ecg repo.\ncomposer require --dev magento-ecg/coding-standard\nFollowing this, you can add the path to your phpcs task.\ngrumphp.yml\nparameters:\n    tasks:\n        phpcs:\n            standard: \"vendor/magento-ecg/coding-standard/Ecg/\"\n            show_warnings: false. thank you.. ",
    "torhoehn": "@veewee Where in composer.json should this be added?\n\"symfony/console\": \"v2.8.20 as v2.6.13\". ",
    "janvernieuwe": "Not a magento expert, but probably in require-dev, since grumphp is usually only required in dev.. I just tried this in a symfony 4 project of mine and i got a conflict on symfony process/console.\n```bash\n$ composer update phpro/grumphp\nLoading composer repositories with package information                                                                                            Updating dependencies (including require-dev)         Your requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Conclusion: remove symfony/console v4.0.1\n    - Conclusion: don't install symfony/console v4.0.1\n    - symfony/process 2.3.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 2.4.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 2.5.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 2.6.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 2.7.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 2.8.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 3.0.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 3.1.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process 3.2.x-dev conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.13 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.14 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.15 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.16 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.17 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.18 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.19 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.20 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.21 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.22 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.23 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.24 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.25 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.26 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.27 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.28 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.29 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.30 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.31 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.32 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.33 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.34 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.35 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.36 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.37 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.38 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.39 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.40 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.41 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.42 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.3.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.0-BETA2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.0-RC1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.4.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.0-BETA2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.0-RC1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.5.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.0-BETA2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.13 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.6.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.0-BETA2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.13 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.14 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.15 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.16 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.17 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.18 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.19 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.20 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.21 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.22 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.23 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.24 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.25 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.26 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.27 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.28 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.29 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.30 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.31 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.32 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.33 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.34 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.35 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.36 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.37 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.38 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.39 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.40 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.7.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.13 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.14 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.15 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.16 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.17 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.18 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.19 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.20 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.21 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.22 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.23 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.24 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.25 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.26 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.27 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.28 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.29 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.30 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.31 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.32 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.33 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v2.8.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.0.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.0-RC1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.1.9 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.0 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.0-BETA1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.0-RC1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.0-RC2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.1 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.10 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.11 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.12 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.13 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.14 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.2 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.3 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.4 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.5 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.6 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.7 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.8 conflicts with symfony/console[v4.0.1].\n    - symfony/process v3.2.9 conflicts with symfony/console[v4.0.1].\n    - Installation request for symfony/console (locked at v4.0.1) -> satisfiable by symfony/console[v4.0.1].\n    - Installation request for phpro/grumphp dev-symfony-4@dev -> satisfiable by phpro/grumphp[dev-symfony-4].\n    - Conclusion: don't install symfony/process v4.0.1|install symfony/process 2.3.x-dev|install symfony/process 2.4.x-dev|install symfony/process 2.5.x-dev|install symfony/process 2.6.x-dev|install symfony/process 2.7.x-dev|install symfony/process 2.8.x-dev|install symfony/process 3.0.x-dev|install symfony/process 3.1.x-dev|install symfony/process 3.2.x-dev|install symfony/process v2.3.0|install symfony/process v2.3.1|install symfony/process v2.3.10|install symfony/process v2.3.11|install symfony/process v2.3.12|install symfony/process v2.3.13|install symfony/process v2.3.14|install symfony/process v2.3.15|install symfony/process v2.3.16|install symfony/process v2.3.17|install symfony/process v2.3.18|install symfony/process v2.3.19|install symfony/process v2.3.2|install symfony/process v2.3.20|install symfony/process v2.3.21|install symfony/process v2.3.22|install symfony/process v2.3.23|install symfony/process v2.3.24|install symfony/process v2.3.25|install symfony/process v2.3.26|install symfony/process v2.3.27|install symfony/process v2.3.28|install symfony/process v2.3.29|install symfony/process v2.3.3|install symfony/process v2.3.30|install symfony/process v2.3.31|install symfony/process v2.3.32|install symfony/process v2.3.33|install symfony/process v2.3.34|install symfony/process v2.3.35|install symfony/process v2.3.36|install symfony/process v2.3.37|install symfony/process v2.3.38|install symfony/process v2.3.39|install symfony/process v2.3.4|install symfony/process v2.3.40|install symfony/process v2.3.41|install symfony/process v2.3.42|install symfony/process v2.3.5|install symfony/process v2.3.6|install symfony/process v2.3.7|install symfony/process v2.3.8|install symfony/process v2.3.9|install symfony/process v2.4.0|install symfony/process v2.4.0-BETA1|install symfony/process v2.4.0-BETA2|install symfony/process v2.4.0-RC1|install symfony/process v2.4.1|install symfony/process v2.4.10|install symfony/process v2.4.2|install symfony/process v2.4.3|install symfony/process v2.4.4|install symfony/process v2.4.5|install symfony/process v2.4.6|install symfony/process v2.4.7|install symfony/process v2.4.8|install symfony/process v2.4.9|install symfony/process v2.5.0|install symfony/process v2.5.0-BETA1|install symfony/process v2.5.0-BETA2|install symfony/process v2.5.0-RC1|install symfony/process v2.5.1|install symfony/process v2.5.10|install symfony/process v2.5.11|install symfony/process v2.5.12|install symfony/process v2.5.2|install symfony/process v2.5.3|install symfony/process v2.5.4|install symfony/process v2.5.5|install symfony/process v2.5.6|install symfony/process v2.5.7|install symfony/process v2.5.8|install symfony/process v2.5.9|install symfony/process v2.6.0|install symfony/process v2.6.0-BETA1|install symfony/process v2.6.0-BETA2|install symfony/process v2.6.1|install symfony/process v2.6.10|install symfony/process v2.6.11|install symfony/process v2.6.12|install symfony/process v2.6.13|install symfony/process v2.6.2|install symfony/process v2.6.3|install symfony/process v2.6.4|install symfony/process v2.6.5|install symfony/process v2.6.6|install symfony/process v2.6.7|install symfony/process v2.6.8|install symfony/process v2.6.9|install symfony/process v2.7.0|install symfony/process v2.7.0-BETA1|install symfony/process v2.7.0-BETA2|install symfony/process v2.7.1|install symfony/process v2.7.10|install symfony/process v2.7.11|install symfony/process v2.7.12|install symfony/process v2.7.13|install symfony/process v2.7.14|install symfony/process v2.7.15|install symfony/process v2.7.16|install symfony/process v2.7.17|install symfony/process v2.7.18|install symfony/process v2.7.19|install symfony/process v2.7.2|install symfony/process v2.7.20|install symfony/process v2.7.21|install symfony/process v2.7.22|install symfony/process v2.7.23|install symfony/process v2.7.24|install symfony/process v2.7.25|install symfony/process v2.7.26|install symfony/process v2.7.27|install symfony/process v2.7.28|install symfony/process v2.7.29|install symfony/process v2.7.3|install symfony/process v2.7.30|install symfony/process v2.7.31|install symfony/process v2.7.32|install symfony/process v2.7.33|install symfony/process v2.7.34|install symfony/process v2.7.35|install symfony/process v2.7.36|install symfony/process v2.7.37|install symfony/process v2.7.38|install symfony/process v2.7.39|install symfony/process v2.7.4|install symfony/process v2.7.40|install symfony/process v2.7.5|install symfony/process v2.7.6|install symfony/process v2.7.7|install symfony/process v2.7.8|install symfony/process v2.7.9|install symfony/process v2.8.0|install symfony/process v2.8.0-BETA1|install symfony/process v2.8.1|install symfony/process v2.8.10|install symfony/process v2.8.11|install symfony/process v2.8.12|install symfony/process v2.8.13|install symfony/process v2.8.14|install symfony/process v2.8.15|install symfony/process v2.8.16|install symfony/process v2.8.17|install symfony/process v2.8.18|install symfony/process v2.8.19|install symfony/process v2.8.2|install symfony/process v2.8.20|install symfony/process v2.8.21|install symfony/process v2.8.22|install symfony/process v2.8.23|install symfony/process v2.8.24|install symfony/process v2.8.25|install symfony/process v2.8.26|install symfony/process v2.8.27|install symfony/process v2.8.28|install symfony/process v2.8.29|install symfony/process v2.8.3|install symfony/process v2.8.30|install symfony/process v2.8.31|install symfony/process v2.8.32|install symfony/process v2.8.33|install symfony/process v2.8.4|install symfony/process v2.8.5|install symfony/process v2.8.6|install symfony/process v2.8.7|install symfony/process v2.8.8|install symfony/process v2.8.9|install symfony/process v3.0.0|install symfony/process v3.0.0-BETA1|install symfony/process v3.0.1|install symfony/process v3.0.2|install symfony/process v3.0.3|install symfony/process v3.0.4|install symfony/process v3.0.5|install symfony/process v3.0.6|install symfony/process v3.0.7|install symfony/process v3.0.8|install symfony/process v3.0.9|install symfony/process v3.1.0|install symfony/process v3.1.0-BETA1|install symfony/process v3.1.0-RC1|install symfony/process v3.1.1|install symfony/process v3.1.10|install symfony/process v3.1.2|install symfony/process v3.1.3|install symfony/process v3.1.4|install symfony/process v3.1.5|install symfony/process v3.1.6|install symfony/process v3.1.7|install symfony/process v3.1.8|install symfony/process v3.1.9|install symfony/process v3.2.0|install symfony/process v3.2.0-BETA1|install symfony/process v3.2.0-RC1|install symfony/process v3.2.0-RC2|install symfony/process v3.2.1|install symfony/process v3.2.10|install symfony/process v3.2.11|install symfony/process v3.2.12|install symfony/process v3.2.13|install symfony/process v3.2.14|install symfony/process v3.2.2|install symfony/process v3.2.3|install symfony/process v3.2.4|install symfony/process v3.2.5|install symfony/process v3.2.6|install symfony/process v3.2.7|install symfony/process v3.2.8|install symfony/process v3.2.9\n    - Conclusion: remove symfony/process v4.0.1|install symfony/process 2.3.x-dev|install symfony/process 2.4.x-dev|install symfony/process 2.5.x-dev|install symfony/process 2.6.x-dev|install symfony/process 2.7.x-dev|install symfony/process 2.8.x-dev|install symfony/process 3.0.x-dev|install symfony/process 3.1.x-dev|install symfony/process 3.2.x-dev|install symfony/process v2.3.0|install symfony/process v2.3.1|install symfony/process v2.3.10|install symfony/process v2.3.11|install symfony/process v2.3.12|install symfony/process v2.3.13|install symfony/process v2.3.14|install symfony/process v2.3.15|install symfony/process v2.3.16|install symfony/process v2.3.17|install symfony/process v2.3.18|install symfony/process v2.3.19|install symfony/process v2.3.2|install symfony/process v2.3.20|install symfony/process v2.3.21|install symfony/process v2.3.22|install symfony/process v2.3.23|install symfony/process v2.3.24|install symfony/process v2.3.25|install symfony/process v2.3.26|install symfony/process v2.3.27|install symfony/process v2.3.28|install symfony/process v2.3.29|install symfony/process v2.3.3|install symfony/process v2.3.30|install symfony/process v2.3.31|install symfony/process v2.3.32|install symfony/process v2.3.33|install symfony/process v2.3.34|install symfony/process v2.3.35|install symfony/process v2.3.36|install symfony/process v2.3.37|install symfony/process v2.3.38|install symfony/process v2.3.39|install symfony/process v2.3.4|install symfony/process v2.3.40|install symfony/process v2.3.41|install symfony/process v2.3.42|install symfony/process v2.3.5|install symfony/process v2.3.6|install symfony/process v2.3.7|install symfony/process v2.3.8|install symfony/process v2.3.9|install symfony/process v2.4.0|install symfony/process v2.4.0-BETA1|install symfony/process v2.4.0-BETA2|install symfony/process v2.4.0-RC1|install symfony/process v2.4.1|install symfony/process v2.4.10|install symfony/process v2.4.2|install symfony/process v2.4.3|install symfony/process v2.4.4|install symfony/process v2.4.5|install symfony/process v2.4.6|install symfony/process v2.4.7|install symfony/process v2.4.8|install symfony/process v2.4.9|install symfony/process v2.5.0|install symfony/process v2.5.0-BETA1|install symfony/process v2.5.0-BETA2|install symfony/process v2.5.0-RC1|install symfony/process v2.5.1|install symfony/process v2.5.10|install symfony/process v2.5.11|install symfony/process v2.5.12|install symfony/process v2.5.2|install symfony/process v2.5.3|install symfony/process v2.5.4|install symfony/process v2.5.5|install symfony/process v2.5.6|install symfony/process v2.5.7|install symfony/process v2.5.8|install symfony/process v2.5.9|install symfony/process v2.6.0|install symfony/process v2.6.0-BETA1|install symfony/process v2.6.0-BETA2|install symfony/process v2.6.1|install symfony/process v2.6.10|install symfony/process v2.6.11|install symfony/process v2.6.12|install symfony/process v2.6.13|install symfony/process v2.6.2|install symfony/process v2.6.3|install symfony/process v2.6.4|install symfony/process v2.6.5|install symfony/process v2.6.6|install symfony/process v2.6.7|install symfony/process v2.6.8|install symfony/process v2.6.9|install symfony/process v2.7.0|install symfony/process v2.7.0-BETA1|install symfony/process v2.7.0-BETA2|install symfony/process v2.7.1|install symfony/process v2.7.10|install symfony/process v2.7.11|install symfony/process v2.7.12|install symfony/process v2.7.13|install symfony/process v2.7.14|install symfony/process v2.7.15|install symfony/process v2.7.16|install symfony/process v2.7.17|install symfony/process v2.7.18|install symfony/process v2.7.19|install symfony/process v2.7.2|install symfony/process v2.7.20|install symfony/process v2.7.21|install symfony/process v2.7.22|install symfony/process v2.7.23|install symfony/process v2.7.24|install symfony/process v2.7.25|install symfony/process v2.7.26|install symfony/process v2.7.27|install symfony/process v2.7.28|install symfony/process v2.7.29|install symfony/process v2.7.3|install symfony/process v2.7.30|install symfony/process v2.7.31|install symfony/process v2.7.32|install symfony/process v2.7.33|install symfony/process v2.7.34|install symfony/process v2.7.35|install symfony/process v2.7.36|install symfony/process v2.7.37|install symfony/process v2.7.38|install symfony/process v2.7.39|install symfony/process v2.7.4|install symfony/process v2.7.40|install symfony/process v2.7.5|install symfony/process v2.7.6|install symfony/process v2.7.7|install symfony/process v2.7.8|install symfony/process v2.7.9|install symfony/process v2.8.0|install symfony/process v2.8.0-BETA1|install symfony/process v2.8.1|install symfony/process v2.8.10|install symfony/process v2.8.11|install symfony/process v2.8.12|install symfony/process v2.8.13|install symfony/process v2.8.14|install symfony/process v2.8.15|install symfony/process v2.8.16|install symfony/process v2.8.17|install symfony/process v2.8.18|install symfony/process v2.8.19|install symfony/process v2.8.2|install symfony/process v2.8.20|install symfony/process v2.8.21|install symfony/process v2.8.22|install symfony/process v2.8.23|install symfony/process v2.8.24|install symfony/process v2.8.25|install symfony/process v2.8.26|install symfony/process v2.8.27|install symfony/process v2.8.28|install symfony/process v2.8.29|install symfony/process v2.8.3|install symfony/process v2.8.30|install symfony/process v2.8.31|install symfony/process v2.8.32|install symfony/process v2.8.33|install symfony/process v2.8.4|install symfony/process v2.8.5|install symfony/process v2.8.6|install symfony/process v2.8.7|install symfony/process v2.8.8|install symfony/process v2.8.9|install symfony/process v3.0.0|install symfony/process v3.0.0-BETA1|install symfony/process v3.0.1|install symfony/process v3.0.2|install symfony/process v3.0.3|install symfony/process v3.0.4|install symfony/process v3.0.5|install symfony/process v3.0.6|install symfony/process v3.0.7|install symfony/process v3.0.8|install symfony/process v3.0.9|install symfony/process v3.1.0|install symfony/process v3.1.0-BETA1|install symfony/process v3.1.0-RC1|install symfony/process v3.1.1|install symfony/process v3.1.10|install symfony/process v3.1.2|install symfony/process v3.1.3|install symfony/process v3.1.4|install symfony/process v3.1.5|install symfony/process v3.1.6|install symfony/process v3.1.7|install symfony/process v3.1.8|install symfony/process v3.1.9|install symfony/process v3.2.0|install symfony/process v3.2.0-BETA1|install symfony/process v3.2.0-RC1|install symfony/process v3.2.0-RC2|install symfony/process v3.2.1|install symfony/process v3.2.10|install symfony/process v3.2.11|install symfony/process v3.2.12|install symfony/process v3.2.13|install symfony/process v3.2.14|install symfony/process v3.2.2|install symfony/process v3.2.3|install symfony/process v3.2.4|install symfony/process v3.2.5|install symfony/process v3.2.6|install symfony/process v3.2.7|install symfony/process v3.2.8|install symfony/process v3.2.9\n    - phpro/grumphp dev-symfony-4 requires gitonomy/gitlib ~1.0 -> satisfiable by gitonomy/gitlib[1.0.x-dev, v1.0.0, v1.0.1, v1.0.2].\n    - gitonomy/gitlib v1.0.2 requires symfony/process ^2.3|^3.0 -> satisfiable by symfony/process[2.3.x-dev, 2.4.x-dev, 2.5.x-dev, 2.6.x-dev, 2.7.x-dev, 2.8.x-dev, 3.0.x-dev, 3.1.x-dev, 3.2.x-dev, 3.3.x-dev, 3.4.x-dev, v2.3.0, v2.3.1, v2.3.10, v2.3.11, v2.3.12, v2.3.13, v2.3.14, v2.3.15, v2.3.16, v2.3.17, v2.3.18, v2.3.19, v2.3.2, v2.3.20, v2.3.21, v2.3.22, v2.3.23, v2.3.24, v2.3.25, v2.3.26, v2.3.27, v2.3.28, v2.3.29, v2.3.3, v2.3.30, v2.3.31, v2.3.32, v2.3.33, v2.3.34, v2.3.35, v2.3.36, v2.3.37, v2.3.38, v2.3.39, v2.3.4, v2.3.40, v2.3.41, v2.3.42, v2.3.5, v2.3.6, v2.3.7, v2.3.8, v2.3.9, v2.4.0, v2.4.0-BETA1, v2.4.0-BETA2, v2.4.0-RC1, v2.4.1, v2.4.10, v2.4.2, v2.4.3, v2.4.4, v2.4.5, v2.4.6, v2.4.7, v2.4.8, v2.4.9, v2.5.0, v2.5.0-BETA1, v2.5.0-BETA2, v2.5.0-RC1, v2.5.1, v2.5.10, v2.5.11, v2.5.12, v2.5.2, v2.5.3, v2.5.4, v2.5.5, v2.5.6, v2.5.7, v2.5.8, v2.5.9, v2.6.0, v2.6.0-BETA1, v2.6.0-BETA2, v2.6.1, v2.6.10, v2.6.11, v2.6.12, v2.6.13, v2.6.2, v2.6.3, v2.6.4, v2.6.5, v2.6.6, v2.6.7, v2.6.8, v2.6.9, v2.7.0, v2.7.0-BETA1, v2.7.0-BETA2, v2.7.1, v2.7.10, v2.7.11, v2.7.12, v2.7.13, v2.7.14, v2.7.15, v2.7.16, v2.7.17, v2.7.18, v2.7.19, v2.7.2, v2.7.20, v2.7.21, v2.7.22, v2.7.23, v2.7.24, v2.7.25, v2.7.26, v2.7.27, v2.7.28, v2.7.29, v2.7.3, v2.7.30, v2.7.31, v2.7.32, v2.7.33, v2.7.34, v2.7.35, v2.7.36, v2.7.37, v2.7.38, v2.7.39, v2.7.4, v2.7.40, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.0-BETA1, v2.8.1, v2.8.10, v2.8.11, v2.8.12, v2.8.13, v2.8.14, v2.8.15, v2.8.16, v2.8.17, v2.8.18, v2.8.19, v2.8.2, v2.8.20, v2.8.21, v2.8.22, v2.8.23, v2.8.24, v2.8.25, v2.8.26, v2.8.27, v2.8.28, v2.8.29, v2.8.3, v2.8.30, v2.8.31, v2.8.32, v2.8.33, v2.8.4, v2.8.5, v2.8.6, v2.8.7, v2.8.8, v2.8.9, v3.0.0, v3.0.0-BETA1, v3.0.1, v3.0.2, v3.0.3, v3.0.4, v3.0.5, v3.0.6, v3.0.7, v3.0.8, v3.0.9, v3.1.0, v3.1.0-BETA1, v3.1.0-RC1, v3.1.1, v3.1.10, v3.1.2, v3.1.3, v3.1.4, v3.1.5, v3.1.6, v3.1.7, v3.1.8, v3.1.9, v3.2.0, v3.2.0-BETA1, v3.2.0-RC1, v3.2.0-RC2, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.0-BETA1, v3.3.0-RC1, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.15, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.0-BETA1, v3.4.0-BETA2, v3.4.0-BETA3, v3.4.0-BETA4, v3.4.0-RC1, v3.4.0-RC2, v3.4.1, v3.4.2, v3.4.3].\n    - gitonomy/gitlib v1.0.1 requires symfony/process ^2.3|^3.0 -> satisfiable by symfony/process[2.3.x-dev, 2.4.x-dev, 2.5.x-dev, 2.6.x-dev, 2.7.x-dev, 2.8.x-dev, 3.0.x-dev, 3.1.x-dev, 3.2.x-dev, 3.3.x-dev, 3.4.x-dev, v2.3.0, v2.3.1, v2.3.10, v2.3.11, v2.3.12, v2.3.13, v2.3.14, v2.3.15, v2.3.16, v2.3.17, v2.3.18, v2.3.19, v2.3.2, v2.3.20, v2.3.21, v2.3.22, v2.3.23, v2.3.24, v2.3.25, v2.3.26, v2.3.27, v2.3.28, v2.3.29, v2.3.3, v2.3.30, v2.3.31, v2.3.32, v2.3.33, v2.3.34, v2.3.35, v2.3.36, v2.3.37, v2.3.38, v2.3.39, v2.3.4, v2.3.40, v2.3.41, v2.3.42, v2.3.5, v2.3.6, v2.3.7, v2.3.8, v2.3.9, v2.4.0, v2.4.0-BETA1, v2.4.0-BETA2, v2.4.0-RC1, v2.4.1, v2.4.10, v2.4.2, v2.4.3, v2.4.4, v2.4.5, v2.4.6, v2.4.7, v2.4.8, v2.4.9, v2.5.0, v2.5.0-BETA1, v2.5.0-BETA2, v2.5.0-RC1, v2.5.1, v2.5.10, v2.5.11, v2.5.12, v2.5.2, v2.5.3, v2.5.4, v2.5.5, v2.5.6, v2.5.7, v2.5.8, v2.5.9, v2.6.0, v2.6.0-BETA1, v2.6.0-BETA2, v2.6.1, v2.6.10, v2.6.11, v2.6.12, v2.6.13, v2.6.2, v2.6.3, v2.6.4, v2.6.5, v2.6.6, v2.6.7, v2.6.8, v2.6.9, v2.7.0, v2.7.0-BETA1, v2.7.0-BETA2, v2.7.1, v2.7.10, v2.7.11, v2.7.12, v2.7.13, v2.7.14, v2.7.15, v2.7.16, v2.7.17, v2.7.18, v2.7.19, v2.7.2, v2.7.20, v2.7.21, v2.7.22, v2.7.23, v2.7.24, v2.7.25, v2.7.26, v2.7.27, v2.7.28, v2.7.29, v2.7.3, v2.7.30, v2.7.31, v2.7.32, v2.7.33, v2.7.34, v2.7.35, v2.7.36, v2.7.37, v2.7.38, v2.7.39, v2.7.4, v2.7.40, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.0-BETA1, v2.8.1, v2.8.10, v2.8.11, v2.8.12, v2.8.13, v2.8.14, v2.8.15, v2.8.16, v2.8.17, v2.8.18, v2.8.19, v2.8.2, v2.8.20, v2.8.21, v2.8.22, v2.8.23, v2.8.24, v2.8.25, v2.8.26, v2.8.27, v2.8.28, v2.8.29, v2.8.3, v2.8.30, v2.8.31, v2.8.32, v2.8.33, v2.8.4, v2.8.5, v2.8.6, v2.8.7, v2.8.8, v2.8.9, v3.0.0, v3.0.0-BETA1, v3.0.1, v3.0.2, v3.0.3, v3.0.4, v3.0.5, v3.0.6, v3.0.7, v3.0.8, v3.0.9, v3.1.0, v3.1.0-BETA1, v3.1.0-RC1, v3.1.1, v3.1.10, v3.1.2, v3.1.3, v3.1.4, v3.1.5, v3.1.6, v3.1.7, v3.1.8, v3.1.9, v3.2.0, v3.2.0-BETA1, v3.2.0-RC1, v3.2.0-RC2, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.0-BETA1, v3.3.0-RC1, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.15, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.0-BETA1, v3.4.0-BETA2, v3.4.0-BETA3, v3.4.0-BETA4, v3.4.0-RC1, v3.4.0-RC2, v3.4.1, v3.4.2, v3.4.3].\n    - gitonomy/gitlib v1.0.0 requires symfony/process ^2.3|^3.0 -> satisfiable by symfony/process[2.3.x-dev, 2.4.x-dev, 2.5.x-dev, 2.6.x-dev, 2.7.x-dev, 2.8.x-dev, 3.0.x-dev, 3.1.x-dev, 3.2.x-dev, 3.3.x-dev, 3.4.x-dev, v2.3.0, v2.3.1, v2.3.10, v2.3.11, v2.3.12, v2.3.13, v2.3.14, v2.3.15, v2.3.16, v2.3.17, v2.3.18, v2.3.19, v2.3.2, v2.3.20, v2.3.21, v2.3.22, v2.3.23, v2.3.24, v2.3.25, v2.3.26, v2.3.27, v2.3.28, v2.3.29, v2.3.3, v2.3.30, v2.3.31, v2.3.32, v2.3.33, v2.3.34, v2.3.35, v2.3.36, v2.3.37, v2.3.38, v2.3.39, v2.3.4, v2.3.40, v2.3.41, v2.3.42, v2.3.5, v2.3.6, v2.3.7, v2.3.8, v2.3.9, v2.4.0, v2.4.0-BETA1, v2.4.0-BETA2, v2.4.0-RC1, v2.4.1, v2.4.10, v2.4.2, v2.4.3, v2.4.4, v2.4.5, v2.4.6, v2.4.7, v2.4.8, v2.4.9, v2.5.0, v2.5.0-BETA1, v2.5.0-BETA2, v2.5.0-RC1, v2.5.1, v2.5.10, v2.5.11, v2.5.12, v2.5.2, v2.5.3, v2.5.4, v2.5.5, v2.5.6, v2.5.7, v2.5.8, v2.5.9, v2.6.0, v2.6.0-BETA1, v2.6.0-BETA2, v2.6.1, v2.6.10, v2.6.11, v2.6.12, v2.6.13, v2.6.2, v2.6.3, v2.6.4, v2.6.5, v2.6.6, v2.6.7, v2.6.8, v2.6.9, v2.7.0, v2.7.0-BETA1, v2.7.0-BETA2, v2.7.1, v2.7.10, v2.7.11, v2.7.12, v2.7.13, v2.7.14, v2.7.15, v2.7.16, v2.7.17, v2.7.18, v2.7.19, v2.7.2, v2.7.20, v2.7.21, v2.7.22, v2.7.23, v2.7.24, v2.7.25, v2.7.26, v2.7.27, v2.7.28, v2.7.29, v2.7.3, v2.7.30, v2.7.31, v2.7.32, v2.7.33, v2.7.34, v2.7.35, v2.7.36, v2.7.37, v2.7.38, v2.7.39, v2.7.4, v2.7.40, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.0-BETA1, v2.8.1, v2.8.10, v2.8.11, v2.8.12, v2.8.13, v2.8.14, v2.8.15, v2.8.16, v2.8.17, v2.8.18, v2.8.19, v2.8.2, v2.8.20, v2.8.21, v2.8.22, v2.8.23, v2.8.24, v2.8.25, v2.8.26, v2.8.27, v2.8.28, v2.8.29, v2.8.3, v2.8.30, v2.8.31, v2.8.32, v2.8.33, v2.8.4, v2.8.5, v2.8.6, v2.8.7, v2.8.8, v2.8.9, v3.0.0, v3.0.0-BETA1, v3.0.1, v3.0.2, v3.0.3, v3.0.4, v3.0.5, v3.0.6, v3.0.7, v3.0.8, v3.0.9, v3.1.0, v3.1.0-BETA1, v3.1.0-RC1, v3.1.1, v3.1.10, v3.1.2, v3.1.3, v3.1.4, v3.1.5, v3.1.6, v3.1.7, v3.1.8, v3.1.9, v3.2.0, v3.2.0-BETA1, v3.2.0-RC1, v3.2.0-RC2, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.0-BETA1, v3.3.0-RC1, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.15, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.0-BETA1, v3.4.0-BETA2, v3.4.0-BETA3, v3.4.0-BETA4, v3.4.0-RC1, v3.4.0-RC2, v3.4.1, v3.4.2, v3.4.3].\n    - gitonomy/gitlib 1.0.x-dev requires symfony/process ^2.3|^3.0 -> satisfiable by symfony/process[2.3.x-dev, 2.4.x-dev, 2.5.x-dev, 2.6.x-dev, 2.7.x-dev, 2.8.x-dev, 3.0.x-dev, 3.1.x-dev, 3.2.x-dev, 3.3.x-dev, 3.4.x-dev, v2.3.0, v2.3.1, v2.3.10, v2.3.11, v2.3.12, v2.3.13, v2.3.14, v2.3.15, v2.3.16, v2.3.17, v2.3.18, v2.3.19, v2.3.2, v2.3.20, v2.3.21, v2.3.22, v2.3.23, v2.3.24, v2.3.25, v2.3.26, v2.3.27, v2.3.28, v2.3.29, v2.3.3, v2.3.30, v2.3.31, v2.3.32, v2.3.33, v2.3.34, v2.3.35, v2.3.36, v2.3.37, v2.3.38, v2.3.39, v2.3.4, v2.3.40, v2.3.41, v2.3.42, v2.3.5, v2.3.6, v2.3.7, v2.3.8, v2.3.9, v2.4.0, v2.4.0-BETA1, v2.4.0-BETA2, v2.4.0-RC1, v2.4.1, v2.4.10, v2.4.2, v2.4.3, v2.4.4, v2.4.5, v2.4.6, v2.4.7, v2.4.8, v2.4.9, v2.5.0, v2.5.0-BETA1, v2.5.0-BETA2, v2.5.0-RC1, v2.5.1, v2.5.10, v2.5.11, v2.5.12, v2.5.2, v2.5.3, v2.5.4, v2.5.5, v2.5.6, v2.5.7, v2.5.8, v2.5.9, v2.6.0, v2.6.0-BETA1, v2.6.0-BETA2, v2.6.1, v2.6.10, v2.6.11, v2.6.12, v2.6.13, v2.6.2, v2.6.3, v2.6.4, v2.6.5, v2.6.6, v2.6.7, v2.6.8, v2.6.9, v2.7.0, v2.7.0-BETA1, v2.7.0-BETA2, v2.7.1, v2.7.10, v2.7.11, v2.7.12, v2.7.13, v2.7.14, v2.7.15, v2.7.16, v2.7.17, v2.7.18, v2.7.19, v2.7.2, v2.7.20, v2.7.21, v2.7.22, v2.7.23, v2.7.24, v2.7.25, v2.7.26, v2.7.27, v2.7.28, v2.7.29, v2.7.3, v2.7.30, v2.7.31, v2.7.32, v2.7.33, v2.7.34, v2.7.35, v2.7.36, v2.7.37, v2.7.38, v2.7.39, v2.7.4, v2.7.40, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.0-BETA1, v2.8.1, v2.8.10, v2.8.11, v2.8.12, v2.8.13, v2.8.14, v2.8.15, v2.8.16, v2.8.17, v2.8.18, v2.8.19, v2.8.2, v2.8.20, v2.8.21, v2.8.22, v2.8.23, v2.8.24, v2.8.25, v2.8.26, v2.8.27, v2.8.28, v2.8.29, v2.8.3, v2.8.30, v2.8.31, v2.8.32, v2.8.33, v2.8.4, v2.8.5, v2.8.6, v2.8.7, v2.8.8, v2.8.9, v3.0.0, v3.0.0-BETA1, v3.0.1, v3.0.2, v3.0.3, v3.0.4, v3.0.5, v3.0.6, v3.0.7, v3.0.8, v3.0.9, v3.1.0, v3.1.0-BETA1, v3.1.0-RC1, v3.1.1, v3.1.10, v3.1.2, v3.1.3, v3.1.4, v3.1.5, v3.1.6, v3.1.7, v3.1.8, v3.1.9, v3.2.0, v3.2.0-BETA1, v3.2.0-RC1, v3.2.0-RC2, v3.2.1, v3.2.10, v3.2.11, v3.2.12, v3.2.13, v3.2.14, v3.2.2, v3.2.3, v3.2.4, v3.2.5, v3.2.6, v3.2.7, v3.2.8, v3.2.9, v3.3.0, v3.3.0-BETA1, v3.3.0-RC1, v3.3.1, v3.3.10, v3.3.11, v3.3.12, v3.3.13, v3.3.14, v3.3.15, v3.3.2, v3.3.3, v3.3.4, v3.3.5, v3.3.6, v3.3.7, v3.3.8, v3.3.9, v3.4.0, v3.4.0-BETA1, v3.4.0-BETA2, v3.4.0-BETA3, v3.4.0-BETA4, v3.4.0-RC1, v3.4.0-RC2, v3.4.1, v3.4.2, v3.4.3].\n    - Can only install one of: symfony/process[3.3.x-dev, v4.0.1].\n    - Can only install one of: symfony/process[3.4.x-dev, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.0, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.0-BETA1, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.0-RC1, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.1, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.10, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.11, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.12, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.13, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.14, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.15, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.2, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.3, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.4, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.5, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.6, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.7, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.8, v4.0.1].\n    - Can only install one of: symfony/process[v3.3.9, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-BETA1, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-BETA2, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-BETA3, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-BETA4, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-RC1, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.0-RC2, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.1, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.2, v4.0.1].\n    - Can only install one of: symfony/process[v3.4.3, v4.0.1].\n    - Installation request for symfony/process (locked at v4.0.1) -> satisfiable by symfony/process[v4.0.1].\n``` \nedit:\nI see you already created a PR on gitlib ( https://github.com/gitonomy/gitlib/pull/122 ).\nThanks for all your work @UrGuardian4ngel , now just need to get that merged :). Tested it again now that the PR has been merged in gitlib.\nSeems to work flawlessly in my use case.\nProbably want to wait on a release of gitlib though.. I tested this on my Symfony4 project and this fix works.. I undid the auto-formatting changes. Finder is probably the better solution for cross-platform compatibility too. WiP https://github.com/janvernieuwe/grumphp/tree/blacklist. I know this extension is out there: https://github.com/weemen/GrumPHPPsalm\nHave not tried it myself but the maintainer is also open for PR's in case you need something as far as i know.. We didn't decide this, weemen just created the extension.\nWe would ofcourse be glad to merge a PR to add this functionality to the core of GrumPHP itself!. Thanks for adding the docs, we'll merge it in with the next milestone release!. Please also see https://github.com/phpro/grumphp/issues/519. Hi @exussum12 !\nThank you for your PR\nA few small remarks:\nCan you use $line !== '' instead of isset and use === check for the hash symbol compare?\nAlso please add a test that verifies this functionality.. Hi @poppabear8883,\nCan't this be achieved with event subscriber(s) https://github.com/phpro/grumphp/blob/master/doc/events.md?. Tiny remark, but LGTM :+1: . Is this already fixed?\nOtherwise can I have some quick steps to reproduce this?\n~/Projects/grumphp$ /usr/bin/php7.3 vendor/bin/grumphp run\nGrumPHP is sniffing your code!\nRunning task 1/7: PhpParser... \u2714\nRunning task 2/7: Phpcs... \u2714\nRunning task 3/7: Phpspec... \u2714\nRunning task 4/7: Phpunit... \u2714\nRunning task 5/7: Composer... \u2714\nRunning task 6/7: PhpLint... \u2714\nRunning task 7/7: YamlLint... \u2714\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c           \n         \u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n  \u2584\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                         \u2588\u2588\u2588\u2588\u2588\u2588\u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2588\u2588\u258c          \u2588\u2588       \u2588\u2588\u2588\u2588\u258c      \n        \u2590\u2588\u258c                            \u2588\u2588\u2588        \n         \u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588        \n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588         \n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2590         \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          \n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580           \n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580            \n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588                \n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2590\u2588\u258c                 \n                        \u2588\u2588\u2580   \u2590\u2580                  \n       _    _ _                         _ _\n      / \\  | | |   __ _  ___   ___   __| | |\n     / _ \\ | | |  / _` |/ _ \\ / _ \\ / _` | |\n    / ___ \\| | | | (_| | (_) | (_) | (_| |_|\n   /_/   \\_\\_|_|  \\__, |\\___/ \\___/ \\__,_(_)\n                  |___/\nNvm, now able to reproduce this.. What do you mean precisely, i tried to reproduce it, but when i have bad indentation, phpcs will complain.\nFor example\n/**\n     * @param SoapClient      $soapClient\n     * @param EventDispatcherInterface $dispatcher\n     */\n    public function __construct(SoapClient $soapClient, EventDispatcherInterface $dispatcher)\n    {\n    $this->soapClient = $soapClient;\n    $this->dispatcher = $dispatcher;\n    }\nwill result in:\n```\nFILE: ...anvernieuwe/Projects/soap-client/src/Phpro/SoapClient/Client.php\n\nFOUND 2 ERRORS AFFECTING 2 LINES\n40 | ERROR | [x] Line indented incorrectly; expected at least 8\n    |       |     spaces, found 4\n 41 | ERROR | [x] Line indented incorrectly; expected at least 8\n    |       |     spaces, found 4\n\nPHPCBF CAN FIX THE 2 MARKED SNIFF VIOLATIONS AUTOMATICALLY\n```\n. Hi @ChrisButterworth ,\nSorry it took so long, I made a test case in this repo https://github.com/janvernieuwe/grumphp-issue590\nIt seems to be working for me, can you edit this repo to reproduce it?. - I don't think we should add old versions, this would also just increase the amount of loops in the check.\n- Security support is what i wil check, I'll make sure to reflect this in the documentation, and verify the dates\n. You can just do a return of the reset here right away.. Please use null === $this->... . The docblock says null or string, shouldn't it be : ?string ?. I think it would be better to nest the options that are only used by enforce_type_scope_conventions to be nested under it. So that it is clear that they can only be used in conjunction with the enforce_type_scope_conventions option.. Ok, if the users aren't using this interface, this should be fine.. Is this path always guaranteed correct?\nif it can't find the composer.json file, grumphp will crash on file_get_contents. Best explain that ALL whitelist patterns have to match.. And NONE of the blacklist patterns.. Maybe test with multiple blacklisted items, to see if one match results in a failure?. Either one big try-catch, or just put the error in the array?. ",
    "Landerstraeten": "@veewee, you can assign this issue to me. Thank you @jyggen!. Hi @Rastusik,\nYou need to create a config file for PHP CS Fixer.\nInside that config file, you should create a Finder where you can exclude() folders or use  notPath() for specific files.\nphp\n$finder = PhpCsFixer\\Finder::create()\n    ->exclude('somedir')\n    ->notPath('src/Symfony/Component/Translation/Tests/fixtures/resources.php')\n    ->in(__DIR__);\nMore info on https://github.com/FriendsOfPHP/PHP-CS-Fixer just above the   caching title and on http://symfony.com/doc/current/components/finder.html. Which (exact) version of grumphp and php-cs-fixer are you using?\nCan you also post your grumphp.yml and .php_cs configuration?. Thank you @jdecoster . Thank you @keradus!. @keradus, why would you add public visibility (explicit) to the tests?\nSee https://github.com/phpspec/phpspec/pull/590#issuecomment-67995169. Thanks for the PR @keradus! But I don't see the added value of the public visibility for tests. Hi @indapublic,\nI also think you are using a GUI like sourcetree. Am I correct? If not, we still can try something else to let grumphp work for you.. Thank you @keradus!. Build is failing. Thank you @SerkanYildiz!. Hi @sunilit42,\nDo you mean checking staged files?. Thank you @dzschille for reporting this issue!\nIn the meantime, I fixed it myself on a different way.. @EugeneZub, Thank you. Thank you @pascal-hofmann!. @SerkanYildiz. We will close this PR. There is a note in the README that your existing git hooks will be overwritten. Thanks for the effort!. @veewee, thumbs up \ud83d\udc4d . Thank you @pascal-hofmann!. Thanks @aderuwe! Welcome back \ud83d\ude42. Thank you @Kanti!. @vyshkant thank you!. Can you also update the spec tests?. Closed for #558 . 7.0 or 7.1 ?. @Rastusik, works fine for me. Thanks!. Done. Thanks!. Thanks!. Any update on this one?. Fixed. I don't understand your problem.\nFor what reason can't you use the metadata tag?\nExample:\nyaml\nparameters:\n  bin_dir: \"./vendor/bin\"\n  git_dir: \".\"\n  process_timeout: 120\n  tasks:\n      phpcs:\n        standard: PSR2\n        ignore_patterns:\n          - \"spec/*Spec.php\"\n          - \"test/*.php\"\n        metadata:\n          priority: 300\n      phpspec:\n        format: progress\n        verbose: true\n        metadata:\n          priority: 200\n      phpunit:\n        metadata:\n          priority: 100\n      composer:\n        no_check_lock: true\n      yamllint:\n        ignore_patterns:\n          - \"#test/(.*).yml#\"\n      phplint: ~\n      phpparser:\n        visitors:\n          no_exit_statements: ~\n          never_use_else: ~\n          forbidden_function_calls:\n            blacklist: [var_dump]\n        metadata:\n          priority: 100000\nResult:\nRunning task 1/7: PhpParser\nRunning task 2/7: Phpcs\nRunning task 3/7: Phpspec\nRunning task 4/7: Phpunit\nRunning task 5/7: Composer\nRunning task 6/7: PhpLint\nRunning task 7/7: YamlLint. Hi Michael.\nIt's possible to run grumphp on changed files only. As described on https://github.com/phpro/grumphp/blob/master/doc/commands.md#git-hooks you can run $ grumphp git:pre-commit. @StephanMeijer Thanks!. Any update on this one?. See https://github.com/phpro/grumphp/blob/master/doc/tasks/phpmd.md. Hi @DidYoun, Thanks for the PR! The changes look good.. Hi @gsomoza. Thanks for your PR. Can you take a look a the build? There is a problem with the lowest dependencies.. @bastos71 should we take this one over?. @bastos71 Thanks for the update. It will be merged soon!. Hi @richardhughes. Thanks for the PR. We will test this intensively with older projects to make sure this doesn't break anything. Took over this orphan PR in #575. Thanks @cafferata!. Thanks @laurieplo!. Hi @laurieplo, Thanks again for your PR!. Hi @laurieplo, Thanks for your effort. Can you fix the failing tests/build?. Build (will be) fixed in #560 . Thanks @janvernieuwe . Hi @Vesquen,\nThanks for your PR. Can you also create one to grumpy-seventies?. Tested an ok. @q0rban Thanks. I have based this on SourceTree which gives a warning for files over 10M.\nGithub gives a warning for files over 50M and restricts files over 100M.\nWhat do you suggest?. What do you mean with the failing task? What test do I need to write exactly?. I think you forgot to change the example on line 25. You deleted the argument from another task. Delete line 244 instead.. This is clear \ud83d\udc4d. I also agree with @veewee . Wups. Will fix the typo. Documentation updated. I would suggest to load it locally. I already updated the documentation.. What about?\n``` php\n$xmlFilePath = $xmlFile->getPath();\n$schemePath = empty($xmlFilePath) ? $scheme : rtrim($xmlFilePath, '/') . DIRECTORY_SEPARATOR . $scheme;\n$schemeFile = new SplFileInfo($schemePath);\n. I don't think grumphp is responsible to check that. If you don't have xdebug or phpdbg enabled, your tests will not run anyway.. I would leave it as it is. I would also leave it as it is, since we still use PHP5.\n_This actually counts for every removed docblock in your PR._. Why would you remove the variable? It's used in the next line.. I recommend [yoda](https://en.wikipedia.org/wiki/Yoda_conditions). `$arguments->shouldHaveKeyWithValue(0, '/usr/bin/grumphp');`. I think this should be on line 45 (swap the newline). \ud83d\udc4d. I don't think this is compatible with PHP5 \ud83d\ude01. I would keep this code block as it is. But thats me \ud83d\ude42. Not sure if an enter is required above '@return'. If not, just ignore this. I would leave this as it is and change line 22.\n`$configuration = $container->getParameter('tasks') ?: [];`. I would make three separate tests. Now you need to take the previous result into account.. FQDN (Multiple places). default is null, we can omit it, no?. @veewee I need help on this one.php\n$whitelistPatterns = $config['whitelist_patterns'];\n```\nisset check is done in getConfigurableOptions(). In most tasks, this variable is named $extensions (for consistency). It's now string in the implementing TaskResult class. suggestion\n*Default: null*. suggestion\n*Default: null*. suggestion\n*Default: null*. suggestion\n*Default: null*. suggestion\n*Default: null*. suggestion\n*Default: null*. Can you change this to if (\\count($errors) {}. Can you change this to if (\\count($whitelistPatterns)) {}. Can you change this to if (\\count($whitelistPatterns)) {}. Can you change this to if (\\count($whitelistPatterns)) {}. Ow yes. Clearly something I forgot todo.. Not sure. I checked this in Symfony Flex. There, they do it too.. There is a check in ComposerFile.php on line 21. - [x] Add missing test. - [x] Validate folder exists. I would make this an optional argument. Remove docblock and add return type array. ",
    "jflaflamme": "Hello @veewee \nOnly one is in the autoload links and I use only in a project mode with php 7.0.19.\nAgain, I can run it without exec, with the same setup and php.\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | vendor/phpro/grumphp/bin/grumphp git:pre-commit --skip-success-output) \nThis works fine!  But if I put back with the exec as shipped, I got the error mentioned. \nI simply figured this out because running vendor/phpro/grumphp/bin/grumphp git:pre-commit --skip-success-output works fine, only the git hook wasn't.\ndoesn't work (cannot redeclare error with composer require)\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | exec 'vendor/phpro/grumphp/bin/grumphp' 'git:commit-msg' \"--git-user=$GIT_USER\" \"--git-email=$GIT_EMAIL\" \"$COMMIT_MSG_FILE\")\nwork\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | vendor/phpro/grumphp/bin/grumphp git:commit-msg \"--git-user=$GIT_USER\" \"--git-email=$GIT_EMAIL\" \"$COMMIT_MSG_FILE\")\nHope this helps.. I understand, but right now I have no issues since I modified in .git/hooks/\nThat is not something that will be committed or changed unless I issue a re-init of grumphp\nWhat would be the advantage of modifying the parameters ? I am not sure to follow. ",
    "wagnerferreirasp": "Maybe I was wrong and the issue could be about a new feature. It makes sense that GrumPHP checks changed files only and this apply to many tasks, like copy-paste detector, git_blacklist, phpcs. However, for phpstan, a change in a committed file may affect others and cause a bug we don't want to commit.\nThe phpstan task inside GrumPHP let me do a lot of things that I do via phpstan's command line, but \"run for all files\" is not one of them.  \nI already managed to get it work with GrumPHP, using a composer script that runs phpstan for all files. Now, any change that causes the code to fail at phpstan, GrumPHP won't let me commit and that is great.\nWould be nice to have on the phpstan task configuration the list of directories to run, or let me choose for the default (run for changed files).\nThanks anyway!. ",
    "thomscode": "Theoretically it's not too complicated. If GrumPHP had a way to accept a list of files from the command line grumphp run <space separated file/folder list> then the burden of providing that listing would be on the user. If the user wants the list to be fed from a list of files in a diff, then that user could write a diff parser to pull the file listing.\nSlightly more complicated is to allow plugins that could parse input and provide a list of files. In this way users can write plugins themselves that fit their needs. If you pursue this way, then the file list is simply another parser that explodes the space separated list into an array.\nAnyway, just a couple of ideas.. ",
    "aloupfor": "@veewee Thank you for the answer.\n\nAnother option is to add an additional parameter to the grumphp task, but that isn't possible at this moment.\n\nCan you tell me why that isn't possible at this moment?\nIs it because nobody is available to work on this or that it isn't in the current planning or is it for another reason.. Thanks for the PR.\nI opened an issue regarding phpstan configuration so I am happy to see that this was done.. ",
    "fzuellich": "Hey @naknode,\nI created a file with a very long array and I could not reproduce this bug on Linux. When I try to commit an grumphp error is shown. Maybe you could attach the file you tested with? Or maybe I misunderstood how to reproduce the bug? Please have a look at my attached file (test.txt).\nI tried reproducing it with a simple file and a Laravel project as you reported.. ",
    "naknode": "Apologies for late response.\nI was able @fzuellich to get this working. I had an overwriting conflict. Removed it and it worked.. ",
    "pierredup": "Mutation testing can be a very time consuming and resource intensive task, especially if it runs the entire test suite on every commit. Ideally I think this should filter to only mutate files that have changed (using the filter option) and test-framework-options needs to be set with the respective values for the test framework to only run test files that have changed.. Infection requires xdebug or phpdbg to be installed, so I think this task should be skipped if at least one of those extensions is not installed. Interaction should be disabled (with the -n flag). ",
    "Rastusik": "Hi @Landerstraeten,\nare you sure about this? I already tried that and it didn't work. The point is that the files that need to be checked are being fetched from GitPreCommitContext (https://github.com/phpro/grumphp/blob/master/src/Task/PhpCsFixerV2.php#L69) and then this code gets triggered: https://github.com/phpro/grumphp/blob/master/src/Task/AbstractPhpCsFixerTask.php#L118 which will create a separate process for each file added to git index. I think the FileFinder is skipped in this process.\nOr did I do something wrong? Maybe somebody could test this as well, to confirm?. oh, I wasn't on the 0.12 version of grumphp, I was on 0.11.6 ... thanks for help. @Landerstraeten I'm sorry I forgot one step in the reproduction instructions. Could you please try one more time to see the problem? Thank you. @veewee well, I removed the composer cache and tried one more time and I still get the error:\n```\nrasta@Rasta ~/tmp \u2022 git clone https://github.com/better-serializer/better-serializer.git                                                                                                                                                                                                                                                             21:16  rasta@Rasta\nCloning into 'better-serializer'...\nremote: Counting objects: 4897, done.\nremote: Compressing objects: 100% (33/33), done.\nremote: Total 4897 (delta 8), reused 27 (delta 7), pack-reused 4854\nReceiving objects: 100% (4897/4897), 900.67 KiB | 1.25 MiB/s, done.\nResolving deltas: 100% (3178/3178), done.\n~/tmp/better-serializer \u2022 git checkout faster_than_reflection                                                                                                                                                                                                                                                                                      \nBranch 'faster_than_reflection' set up to track remote branch 'faster_than_reflection' from 'origin'.\nSwitched to a new branch 'faster_than_reflection'\n~/tmp/better-serializer \u2022 composer install -o --no-interaction\nLoading composer repositories with package information\nInstalling dependencies (including require-dev) from lock file\nPackage operations: 94 installs, 0 updates, 0 removals\n  - Installing psr/container (dev-master 2cc4a01): Cloning 2cc4a01788 from cache\n...\nsymfony/var-dumper suggests installing ext-intl (To show region name in time zone dump)\nsymfony/var-dumper suggests installing ext-symfony_debug ()\nPackage guzzle/guzzle is abandoned, you should avoid using it. Use guzzlehttp/guzzle instead.\nGenerating optimized autoload files\nFatal error: Class 'Doctrine\\Common\\Collections\\ArrayCollection' not found in /Users/rasta/tmp/better-serializer/vendor/phpro/grumphp/src/Collection/ProcessArgumentsCollection.php on line 8\n```\nI also got the same error in this TravisCI build yesterday: https://travis-ci.org/better-serializer/better-serializer/builds/363539243. @veewee I'm sorry for asking such a stupid question, but are you sure you did everything according to the instructions? I think it has to be reproducible. but the change looks ok IMO, only the PSR-X autoload type changed, which should work both ways identically, when set properly... isn't there a chance for this to be related to some change  in Composer, since your old Composer worked well?. ",
    "jhhazelaar": "Hi @veewee,\nThanks for the quick response. I've looked at the composer global installed packages with composer global show -i the Illuminate/Foundation isn't installed.\nOke, WTF! If was trying somethings and stop valet. Run grumphp -v and it works. Started valet and grumphp still works. No more error!\nSo you can close the issue :-D . Sorry... still got it. So in a project folder with a repository where Laravel is installed I get the error.. ",
    "Snaver": "It may use the same method, but I saw this Composer plugin the other day which I thought was really cool, May solve this issue too?\nhttps://github.com/bamarni/composer-bin-plugin. Confirmed fixes direct ProcessBuilder error \ud83d\udc4d. Hey @Kanti \nI believe this is already possible! I managed to get this up and running with bitbucket pipelines this week actually.\nIt's possible to setup without any direct changes to grumphp. What I did was add some additional configuration options to phpunit.xml:\n<logging>\n    <log type=\"junit\" target=\"./test-reports/junit.xml\" />\n</logging>\n. Just pulled in the fix-force-unix-hooks branch, seemed to fix the issue for me \ud83d\udc4d  @veewee . ",
    "systemovich": "Seems to be fixed in master branch: https://github.com/phpro/grumphp/commit/2844ed06f8d1b78ba888e15a2adcb21b11118176. ",
    "glamorous": "@systemovich Did you test it too? Doesn't seems that it was mentioned to fix this problem too. The bug described from me has to do with no blank line between subject and (potential) comments. ",
    "alexgiuvara": "``\ncomposer/ca-bundle                    1.0.8   Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.\ncomposer/composer                     1.5.2   Composer helps you declare, manage and install dependencies of PHP projects, ensuring you have the right stack everywhere.\ncomposer/semver                       1.4.2   Semver library that offers utilities, version constraint parsing and validation.\ncomposer/spdx-licenses                1.1.6   SPDX licenses list and validation library.\ndnoegel/php-xdg-base-dir              0.1     implementation of xdg base directory specification for php\ndoctrine/annotations                  v1.5.0  Docblock Annotations Parser\ndoctrine/collections                  v1.5.0  Collections Abstraction library\ndoctrine/inflector                    v1.2.0  Common String Manipulations with regard to casing and singular/plural rules.\ndoctrine/instantiator                 1.1.0   A small, lightweight utility to instantiate objects in PHP without invoking their constructors\ndoctrine/lexer                        v1.0.1  Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.\negulias/email-validator               2.1.2   A library for validating emails against several RFCs\nerusev/parsedown                      1.6.3   Parser for Markdown.\nfideloper/proxy                       3.3.4   Set trusted proxies for Laravel\nfilp/whoops                           2.1.10  php error handling for cool kids\nfriendsofphp/php-cs-fixer             v2.7.1  A tool to automatically fix PHP code style\nfzaninotto/faker                      v1.7.1  Faker is a PHP library that generates fake data for you.\ngecko-packages/gecko-php-unit         v2.2    Additional PHPUnit asserts and constraints.\ngitonomy/gitlib                       v1.0.2  Library for accessing git\nhamcrest/hamcrest-php                 v1.2.2  This is the PHP port of Hamcrest Matchers\njakub-onderka/php-console-color       0.1\njakub-onderka/php-console-highlighter v0.3.2\njakub-onderka/php-parallel-lint       v0.9.2  This tool check syntax of PHP files about 20x faster than serial check.\njustinrainbow/json-schema             5.2.6   A library to validate a json schema.\nlaravel/framework                     v5.5.14 The Laravel Framework.\nlaravel/tinker                        v1.0.2  Powerful REPL for the Laravel framework.\nleague/flysystem                      1.0.41  Filesystem abstraction: Many filesystems, one API.\nmockery/mockery                       0.9.9   Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other test...\nmonolog/monolog                       1.23.0  Sends your logs to files, sockets, inboxes, databases and various web services\nmtdowling/cron-expression             v1.2.0  CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\nmyclabs/deep-copy                     1.6.1   Create deep copies (clones) of your objects\nnesbot/carbon                         1.22.1  A simple API extension for DateTime.\nnikic/php-parser                      v3.1.1  A PHP parser written in PHP\nocramius/package-versions             1.1.3   Composer plugin that provides efficient querying for installed package versions (no runtime IO)\nocramius/proxy-manager                2.1.1   A library providing utilities to generate, instantiate and generally operate with Object Proxies\nparagonie/random_compat               v2.0.11 PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\npdepend/pdepend                       2.5.0   Official version of pdepend to be handled with Composer\nphar-io/manifest                      1.0.1   Component for reading phar.io manifest information from a PHP Archive (PHAR)\nphar-io/version                       1.0.1   Library for handling version information and constraints\nphp-cs-fixer/diff                     v1.2.0  sebastian/diff v2 backport support for PHP5.6\nphpdocumentor/reflection-common       1.0.1   Common reflection classes used by phpdocumentor to reflect the code structure\nphpdocumentor/reflection-docblock     4.1.1   With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is...\nphpdocumentor/type-resolver           0.4.0\nphpmd/phpmd                           2.6.0   PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD.\nphpro/grumphp                         v0.12.0 A composer plugin that enables source code quality checks.\nphpspec/php-diff                      v1.1.0  A comprehensive library for generating differences between two hashable objects (strings or arrays).\nphpspec/phpspec                       4.0.3   Specification-oriented BDD framework for PHP 5.6+\nphpspec/prophecy                      v1.7.2  Highly opinionated mocking framework for PHP 5.3+\nphpunit/php-code-coverage             5.2.2   Library that provides collection, processing, and rendering functionality for PHP code coverage information.\nphpunit/php-file-iterator             1.4.2   FilterIterator implementation that filters files based on a list of suffixes.\nphpunit/php-text-template             1.2.1   Simple template engine.\nphpunit/php-timer                     1.0.9   Utility class for timing\nphpunit/php-token-stream              2.0.1   Wrapper around PHP's tokenizer extension.\nphpunit/phpunit                       6.2.4   The PHP Unit Testing framework.\nphpunit/phpunit-mock-objects          4.0.4   Mock Object library for PHPUnit\npsr/container                         1.0.0   Common Container Interface (PHP FIG PSR-11)\npsr/log                               1.0.2   Common interface for logging libraries\npsr/simple-cache                      1.0.0   Common interfaces for simple caching\npsy/psysh                             v0.8.11 An interactive shell for modern PHP.\nramsey/uuid                           3.7.1   Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (U...\nsebastian/code-unit-reverse-lookup    1.0.1   Looks up which function or method a line of code belongs to\nsebastian/comparator                  2.0.0   Provides the functionality to compare PHP values for equality\nsebastian/diff                        1.4.3   Diff implementation\nsebastian/environment                 3.1.0   Provides functionality to handle HHVM/PHP environments\nsebastian/exporter                    3.1.0   Provides the functionality to export PHP variables for visualization\nsebastian/global-state                2.0.0   Snapshotting of global state\nsebastian/object-enumerator           3.0.3   Traverses array structures and object graphs to enumerate all referenced objects\nsebastian/object-reflector            1.1.1   Allows reflection of object attributes, including inherited and non-public ones\nsebastian/recursion-context           3.0.0   Provides functionality to recursively process PHP variables\nsebastian/resource-operations         1.0.0   Provides a list of PHP built-in functions that operate on resources\nsebastian/version                     2.0.1   Library that helps with managing the version number of Git-hosted PHP projects\nseld/cli-prompt                       1.0.3   Allows you to prompt for user input on the command line, and optionally hide the characters they type\nseld/jsonlint                         1.6.1   JSON Linter\nseld/phar-utils                       1.0.1   PHAR file format utilities, for when PHP phars you up\nsquizlabs/php_codesniffer             2.9.1   PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\nswiftmailer/swiftmailer               v6.0.2  Swiftmailer, free feature-rich PHP mailer\nsymfony/config                        v3.3.10 Symfony Config Component\nsymfony/console                       v3.3.10 Symfony Console Component\nsymfony/css-selector                  v3.3.10 Symfony CssSelector Component\nsymfony/debug                         v3.3.10 Symfony Debug Component\nsymfony/dependency-injection          v3.3.10 Symfony DependencyInjection Component\nsymfony/event-dispatcher              v3.3.10 Symfony EventDispatcher Component\nsymfony/filesystem                    v3.3.10 Symfony Filesystem Component\nsymfony/finder                        v3.3.10 Symfony Finder Component\nsymfony/http-foundation               v3.3.10 Symfony HttpFoundation Component\nsymfony/http-kernel                   v3.3.10 Symfony HttpKernel Component\nsymfony/options-resolver              v3.3.10 Symfony OptionsResolver Component\nsymfony/polyfill-mbstring             v1.6.0  Symfony polyfill for the Mbstring extension\nsymfony/polyfill-php70                v1.6.0  Symfony polyfill backporting some PHP 7.0+ features to lower PHP versions\nsymfony/polyfill-php72                v1.6.0  Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions\nsymfony/process                       v3.3.10 Symfony Process Component\nsymfony/proxy-manager-bridge          v3.3.10 Symfony ProxyManager Bridge\nsymfony/routing                       v3.3.10 Symfony Routing Component\nsymfony/stopwatch                     v3.3.10 Symfony Stopwatch Component\nsymfony/translation                   v3.3.10 Symfony Translation Component\nsymfony/var-dumper                    v3.3.10 Symfony mechanism for exploring and dumping PHP variables\nsymfony/yaml                          v3.3.10 Symfony Yaml Component\ntheseer/tokenizer                     1.1.0   A small library for converting tokenized PHP source code into XML and potentially other formats\ntijsverkoyen/css-to-inline-styles     2.2.0   CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This i...\nvlucas/phpdotenv                      v2.4.0  Loads environment variables from.envtogetenv(),$_ENVand$_SERVER` automagically.\nwebmozart/assert                      1.2.0   Assertions to validate method input/output with nice error messages.\nzendframework/zend-code               3.3.0   provides facilities to generate arbitrary code using an object oriented interface\nzendframework/zend-eventmanager       3.2.0   Trigger and listen to events within a PHP application\n.\nPHP 7.1.8-2+ubuntu16.04.1+deb.sury.org+4 (cli) (built: Aug  4 2017 13:04:12) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.1.8-2+ubuntu16.04.1+deb.sury.org+4, Copyright (c) 1999-2017, by Zend Technologies\n    with blackfire v1.17.3~linux-x64-non_zts71, https://blackfire.io, by SensioLabs\n```\nI work on Laravel's homestead VM( 3.1 and 4.0). On the same machine, Laravel 5.4, Lumen 5.5.1 & GrumPHP work just fine. \nOne of Laravel's 5.5.* dependency is messing around with Grumpy. both are successful 0 === $this->getExitCode(), exit code 0 . The problem seems to be on Laravel 5.5 part. @simesy in grumphp.yml:\nyaml\nphpmd:\n  exclude:\n  - tests/\n  - helpers.php\n  ruleset: ['/phpmd/custom.xml']\n  triggered_by: ['php']\nwhere /phpmd is a directory on project's root\nCustom.xml:\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n    Inspired by https://github.com/phpmd/phpmd/issues/137\n    using http://phpmd.org/documentation/creating-a-ruleset.html\n  \n The rulesets are imported, in this case all. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n beware the fa\u00e7ades \n\n\n\n\n\n importing naming and excluding ShortVariable to be adjusted after \n\n\n\n\n\n3\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n. ",
    "sanmai": "Best way as I see it would be:\n\nUser-installed hooks must be kept installed side by side with grum's. It should never delete anything it does not own. Not only because that's the rule, but also because Git hooks are usually not under version control, which means if they're gone, they're gone. Okay, there are backups, but that's a major hassle all the same. Not everyone does them.\n\nImagine someone doing deploys from CI in some peculiar fashion. Deploys from CI are usually done from a hook, and if GrumPHP removes that hook, it can be a major disaster.\n\nHooks installed by GrumPHP must be the very bare-bones. And they must stay same as long as possible. This way GrumPHP will be able always tell if that's its own hook, or that's a user-installed hook. Right now GrumPHP's hooks are fairly elaborate.\n\nOne way to accomplish this is to introduce a hook-manager concept.\n```bash\n!/bin/bash\nRuns all executable hookname-* hooks and exits after,\nif any of them was not successful.\n\nBased on\nhttp://osdir.com/ml/git/2009-01/msg00308.html\ndata=$(cat)\nexitcodes=()\nhookname=$(basename $0)\nRun each hook, passing through STDIN and storing the exit code.\nWe don't want to bail at the first failure, as the user might\nthen bypass the hooks without knowing about additional issues.\nfor hook in $GIT_DIR/hooks/$hookname-*; do\n    echo \"$hook\"\n  test -x \"$hook\" || continue\n  echo \"$data\" | \"$hook\"\n  exitcodes+=($?)\ndone\nIf any exit code isn't 0, bail.\nfor i in \"${exitcodes[@]}\"; do\n  [ \"$i\" == 0 ] || exit $i\ndone\n```\nThis file is fairly long, but it isn't going to change between versions. That, unless Git changes a lot in a new version, but that's going to break all hooks all the same, and not like that's going to happen.\nWith this \"githook manager\" in place, GrumPHP's will rename original hooks into *-stock, and install own as *-grumphp. Everybody's happy!. Yeah, right. This is irresponsible and and reckless. I do make backups, but what if someone does not? And you just want to ruin all their hooks with one composer install? Do you think that's cool, that they're be a lot happier from this? Please reconsider. At very least grumphp should ask about existing hooks, and keep backups.\nThis discussion just caused me to \nbash\nchmod a-w .git/hooks/*\nAnd I'm looking if I can block my composer from ever installing grumphp anywhere. . The problem is that GrumPHP is supposed to be used by all folks who can't be \"following the best practices you've determined as a team\" from the start. If they can't code right guess if the do backups. No, they don't.\n. I see no problem in using shell task or what GrumPHP can use to run a script. \nThe problem is that GrumPHP won't make backups of user-installed hooks.\nImagine someone who didn't know this package existed, and they had own hooks to do this and that. That, for example, which won't let one to commit on the master. Or that doing some project-specific testing. Or doing post-CI deploys. Hooks can have many uses.\nAnd then you do composer require --dev phpro/grumphp and, boom, all your precious hooks are gone. And then you push your project to a CI server, and, boom, hooks are gone there too. And then you sit scratching your head because your project does not deploy. Because you can't do CI without developer dependencies. Or it wasn't you who did composer require --dev phpro/grumphp but your careless colleague. See what am I talking about?. This is good, but it does not fix #416. With this PR or without grumphp will still corrupt my hooks.. ",
    "jdecoster": "@Landerstraeten can you merge this? I want to make another adjustment to the documentation \ud83d\ude07 . ",
    "indapublic": "@veewee Thanks for reply. I have correct version.\n\n\"ocramius/proxy-manager\": \"^2.1\"\n\nAnd we can see it on this warning: \n\nUnsupported declare 'strict_types' in \n\nBut seems like checks running using not php 7.1.\n\nphp-fpm -v\nPHP 7.1.11 (fpm-fcgi) (built: Oct 27 2017 11:00:47)\nphp -v\nPHP 7.1.11 (cli) (built: Oct 27 2017 11:00:43) ( NTS ). As you can read, I'm using Symfony project so grumphp installed via composer.\nI know it's environment issue. So you not need my repo.\nyou are executing grumphp under php5. that's the issue.\n\nI know about it. Because topic name is \"How to choose php version\".\nBut, as you can see, my main php is 7.1 (using in nginx and cli version).\nSo your answer is not useful.\n. > which php --version\n\nPHP 7.1.11 (cli) (built: Oct 27 2017 11:00:43) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.1.11, Copyright (c) 1999-2017, by Zend Technologies. Ok. Removed grumphp from project. Thanks for any help.. @veewee @Landerstraeten You are my heroes! Seems that this is exactly what I need. Thank you very much.. \n",
    "surikman": "@UrGuardian4ngel pls, make \ngrumphp.parser.php.visitor.forbidden_static_method_calls\ngrumphp.parser.php.visitor.forbidden_class_method_calls\ngrumphp.parser.php.visitor.declare_strict_types \nas public too, because all visitors are loaded from container. thx. I added pdepend/pdepend#340 for enabling phpmd in grumphp. @UrGuardian4ngel \ngrumphp.io.console has to be public too. ",
    "TomasVotruba": "Closing for no response. Hi @veewee,\nthanks for response. I though the repo is dead, so I'm glad it isn't :) \nThis PR is only for PHP 7 support, nothing more.\nAfter this gets merged, I usually send PR to clean docblocks: https://www.tomasvotruba.cz/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/\nI use these tools:\n\nhttps://github.com/Symplify/EasyCodingStandard\nhttps://github.com/Symplify/CodingStandard\n\nI don't want to put any time into this, I'm affraid it would not be merged and I'd have to close it again in 3 months. Feel free to merge it though and ping me after it.\nI'll send PR with removing useless docblock, as refered in the post :+1: . :+1: . ",
    "EugeneZub": "Hi @Landerstraeten,\nCould you give me some forecasts about date when the new version will be released (0.14.0)?\nBecause we are waiting for this new version with our team and in another case we will have to refuse using of this vendor((. Hi @veewee,\nThanx for your explanations, we'll be watching for changes because this vendor is really good!) . It's my pleasure @Landerstraeten . ",
    "daaru00": "Happy to hear that :+1: . @UrGuardian4ngel I understood what your are saying, this was a quick-and-dirty fix. \nReading Symfony Process Component documentation I noticed is possible to pass an array instead of a single string, maybe using this approach the arguments will be escaping. \nReplacing this:\nphp\n$process = new Process($executable.' '.$command.' --no-interaction');\nto this:\nphp\n$process = new Process([$executable, $command, '--no-interaction']);. ",
    "pedro-p": "Same issue for me.\nAdding double quotation marks to pre-commit seems to fix this on windows: https://github.com/phpro/grumphp/pull/458/commits/c774186c4d47e9c44df75484d30c65d3d7a64894. Probably this is not the right way to fix #447 as it may break Linux where the command is already surrounded by single quotes :(. Yes, on Windows it it looks like this for me:\n(cd \"./\" && printf \"%s\\n\" \"${DIFF}\" | exec C:\\Users\\Dell\\www\\myproject\\vendor\\bin\\grumphp git:pre-commit '--skip-success-output')\nBut under Linux the grumphp command gets generated properly, enclosed by single quotes.. symfony/process v2.8.33\nPHP 7.0.22. ",
    "Ainaras": "Same issue for me too. I can't start using this in my org, until this is fixed. \nPatch from pedro-p does the thing. Can't wait until this patch is merged.. ",
    "sunilit42": "yes , currently it is checking all files, that is already commited . ",
    "jigneshthummar": "@veewee  thanks grumphp run command helped..\nis it possible to specify specific directory to check?? we basically wants to check it in our custom modules, and wants to exclude 3rd party modules..\n. Also we are using following ignore_patterns but it seems like its not taking effect like other rules where same pattern (uncommented one) works\nThe Phpcs task will sniff your code for bad coding standards.\n    phpcs:\n        standard: \"~/.composer/vendor/magento-ecg/coding-standard/EcgM2/ruleset.xml\"\n        #show_warnings: true\n        tab_width: 4\n        whitelist_patterns: ['.']\n        encoding: ~\n        #ignore_patterns: [\"*/dev/*\",\"*/vendor/*\",\"*/generated/*\",\"*/var/*\",\"*/lib/*\",\"*/update/*\",\"*/bin/*\",\"*/pub/*\",\"*/setup/*\",\"*/app/code/*\"]\n        ignore_patterns: ['dev','vendor','generated','var','lib','update','bin','pub','setup']\n        sniffs: []\n        triggered_by: [php,phtml]\n        metadata:\n            #priority: 870.\n",
    "dzschille": "Hi @veewee , i already thought about how to test this but i have no idea yet. We are not testing with real files in the spec tests and i don't know how i can mock a file so that RegisteredFiles->locate() will have the mock object for SplFileInfo(). Or does it make sense to use vfsStream here?\nI am willing to learn. :). Hi @veewee ,\ni have no idea for a scenario where i need to test symlinked files. I see the two possibilities:\n\nMy symlinks link to files in my project. The original files will already be tested so no need to test also the symlinks.\nMy symlinks link to files outside of my project. So i don't want to check them.\n\nDo you have an idea about a scenario where you like to check also the symlinks?. @veewee , yeah, i see that it makes sense not to ignore the symlinks when you want to check them, so your idea with a ignoreSymlinks() filter makes totally sense. I will try to make the filter when i have some time.. @Landerstraeten that's great!. ",
    "j-plou": "As I'm start using grumphp in a light way, I don't know if there's a native way to set this paths :). Hello @veewee!\nThe point is, as I am working with other developers in almost the same kind of projects with the same kind of validation, we want to unify all configuration files for checking code in one repository (grumphp.yml and ascii files for start with).\nIn this case, grumphp will be installed globally and initiated in the \"exotic way\" with grumphp.yml in config repository (located in a ~ subfolder). If we need to add more validation tasks just will update grumphp.yml file in that repo.\nAnyway, I'm gonna try composing grumphp with our config repo in our projects.\nPlease, close PR if you consider it.\nThanks for your time! :). ",
    "abiienko": "+1\nWe have the same issue\n. ",
    "golddragon007": "The problem is with C:\\Users\\Dell\\www\\myproject\\vendor\\bin\\grumphp is the \"\\\" symbol which meaning in linux and in windows the escape the next character. Also the same error exist in the commit-msg file.\nAlso in windows you need to use \"\" if your path contains space character.\nYou can use \\\\ instead of \\ and \"\" but, than it will break if the user has a path which contains space.. ",
    "pascal-hofmann": "@SerkanYildiz Thanks for pointing that out. Fixed.. Can be reproduced like this (tested using git version 2.15.1):\nmkdir -p issue459/sub\ncd issue459/sub\ncomposer require --dev phpro/grumphp\nls -l\ngit init\ngit add composer.json composer.lock grumphp.yml\ngit commit -m 'Added grumphp'\ncd ../\nmkdir main\ncd main/\ngit init\ngit submodule add ../sub/\ncd sub/\ncat .git\ncomposer install. This PR has now been open for 4 weeks. How can I help to get this merged?. Yep, but the path may be relative and directory is changed, so the relative path is incorrect afterwards. Will post steps/versions required to reproduce.. Steps / versions to reproduce:\nphpro/grumphp (v0.13.1)\ngit version 2.15.1\nmkdir issue461/\ncd issue461/\ngit init\nmkdir app\ncd app\necho -e \"parameters:\\n    git_dir: ..\" >grumphp.yml\ncomposer require --dev phpro/grumphp\ngit add composer.json composer.lock grumphp.yml\ngit commit -m 'Added grumphp'\nResult for me is this error message on red background:\n\nSplFileInfo::openFile(.git/COMMIT_EDITMSG): failed to open stream: No such\n file or directory\n\nThis happens, because the path passed to the hook is .git/COMMIT_EDITMSG. The current working directory is issue461/app so grumphp wants to open issue461/app/.git/COMMIT_EDITMSG instead of issue461/.git/COMMIT_EDITMSG.\nMy PR fixes this.. This PR has now been open for nearly 4 weeks. How can I help to get this merged?. ",
    "ddebasilio": "This is happening to me too. Could this get merged?. This is happening to me too, can this get merged ?. ",
    "pascalhofmann": "Thanks for merging! \ud83d\udc4d. Thanks for merging! \ud83d\udc4d. ",
    "jyrkidn": "I have the same issue.\nI now changed the following in the PHPCS task:\nphp\nif ($config['warning_severity'] !== null) {\n    $arguments->add(sprintf('--warning-severity=%s', $config['warning_severity']));\n}\nI can make a pull request if this is a good solution.. ",
    "DevMDamien": "The only difference is that the script installs the phpunit version according to your current php version and then start the phpunit tests.\nIt is written here that simple-phpunit wraps the original phpunit binary. If you think that create a new task is better, so I will do this :) . ",
    "hmonglee": "@veewee Hello, is this PR OK for merge ? We need it. Thank you. ",
    "Wesdesignz": "@peterjaap do you know which version is best compatible with Magento 2.2.5 or 2.2.7?\nI've been trying to get this working, but I'm getting version constraints on any version I try.. :-(. ",
    "induxxExternalPartners": "We are currently using grumphp version 0.14.2 in combination with Magento 2.2.7.\nTo get this to work, we did remove two packages from the require-dev: phpmd/phpmd and pdepend/pdepend. That fixed the conflicts we were having. If you want to use those packages, you might have to look for a version that is compatible with grumphp.\nThe require-dev list that we're using currently looks like this.\n\"require-dev\": {\n    \"phpunit/phpunit\": \"~6.2.0\",\n    \"squizlabs/php_codesniffer\": \"^2.9\",\n    \"friendsofphp/php-cs-fixer\": \"~2.2.1\",\n    \"lusitanian/oauth\": \"~0.8.10\",\n    \"sebastian/phpcpd\": \"2.0.4\",\n    \"phpro/grumphp\": \"^0.14.2\",\n    \"magento/marketplace-eqp\": \"^1.0\"\n  },\n. ",
    "nullwriter": "Having this same error. ",
    "dxvargas": "I've tested and adding option \"prefer-stable\": true to composer.json avoided this error.\n. ",
    "javorszky": "I'm running composer 1.7.1, and on a clean install, I'm still getting the class not found error.\nFor the record, \"prefer-stable\": true makes the error go away. But without that, composer 1.7.3 still has the issue.\nupdated on 29th november 2018. ",
    "mattheo-geoffray": "Hi @veewee @Landerstraeten ,\ndo you know when the next release is planned?\nThank you!. @Landerstraeten Thank you!. Hi @veewee ,\nperfect this is exactly what I am looking for!\nThank you for your quick answer!. Little information we use that structure because it is a dockerized application so we can not have the Composer at the project root. ",
    "regniblod": "Hey @janvernieuwe thanks for the link! I didn't know there was already an extension for PSALM.\nBTW how it's decided if a new task should be an extension or added to GrumPHP core? I guess if it's something specific for my project or for a small number of projects it should be an extension, but what about things like PSALM, that everyone could take advantage of using?. ",
    "muglug": "Just saw this, happy to help out (I made Psalm). ",
    "Mavlyan": "@keradus \nThere is an option -c for /bin/sh to run commands.\nExample how to run doctrine command from symfony console grumphp.yml:\nshell:\n        scripts:\n              - [\"-c\", \"bin/console doctrine:schema:validate\"]\nIn your case: \nshell:\n            scripts:\n                - [\"-c\", \"composer diagnose\"]\nShell task doc. @keradus Sure! I've made pull request #502 \nWaiting for review and reposne. ",
    "RaphTbm": "Hi there,\nNot sure if it's really possible without a BC break.\nHere a first step / my proposal (it's working on my environment):\nIn grumphp.yml\n````yml\nparameters:\n  tasks:\n    shell:\n      scripts:\n        - scripts/ci/basic.sh\n      triggered_by: [php]\n      extra:\n        label: 'Just Shell'\n    shell.sass:\n      scripts:\n        - scripts/ci/sass-lint.sh\n      triggered_by: [scss]\n      extra:\n        label: 'Shell Sass'\nservices:\n  task.shell.sass:\n    parent: task.shell\n    tags:\n      - {name: grumphp.task, config: shell.sass}\n````\nIn TaskCompilerPass\nphp\n$definition->addMethodCall('addTask', [new Reference($id), $configKey]);\nIn TaskRunner\nphp\n/**\n * @param TaskInterface $task\n * @param string $configKey\n */\npublic function addTask(TaskInterface $task, $configKey)\n{\n    if ($this->tasks->contains($task)) {\n        return;\n    }\n    $task->setName($configKey);\n    $this->tasks->add($task);\n}\nBut it means, we need to remove getName from all the current tasks and implements something like that in the necessary abstractClass, example in AbstractExternalTask:\n````php\n/*\n * @return string\n /\npublic function getName()\n{\n    return $this->name;\n}\npublic function setName($name) {\n    $this->name = $name;\n}\n````\nAnd all the tasks extending directly the interface should extend one of the abstract class existing instead (as FileSize.php, ...).\n\nThe extra key, is an extra suggestion related to this issue, we should allow the possibility to use some custom label for more speaking task detail during the runs. \nDirty example to illustrate my idea:\nIn AbstracExternalTask\n````php\n/*\n * @return string\n /\npublic function getExtraOption($key)\n{\n    if (!$this->extraOptions && $this->extraOptions !== FALSE) {\n        $this->extraOptions = FALSE;\n        $configured = $this->grumPHP->getTaskConfiguration($this->getName());\n        if (isset($configured['extra'])) {\n            $this->extraOptions = $configured['extra'];\n        }\n    }\nreturn $this->extraOptions && isset($this->extraOptions[$key]) ? $this->extraOptions[$key] : NULL;\n\n}\n````\nIn ProgressSubscriber\n````php\n/*\n * @param TaskEvent $event\n /\npublic function advanceProgress(TaskEvent $event)\n{\n    $task = $event->getTask();\n    if (!$taskName = $task->getExtraOption('label')) {\n        $taskReflection = new ReflectionClass($task);\n        $taskName = $taskReflection->getShortName();\n    }\n$this->progressBar->setFormat($this->progressFormat);\n$this->progressBar->setMessage($taskName);\n$this->progressBar->advance();\n\n}\n```\n. If somebody have a clue of where to look to succeed the tests, i'm taking it!\nIt seems thatsetName` have to be initiated somewhere.. Seems I was on the \"right\" (not still sure about that) way! :D. Hey RoSk0, I like the idea!\nSo, keep the possibility to define new task services as currently, but if you only need to use the existing task services, don't bother to define them but generate the extra services automatically (based on the defined task configuration). But the current system seems to rely on the symphony services as hell and i'm absolutely not a symphony services expert.\nMy simple idea, to stay as much as possible in the current system, would be to replace the current provided task service file by a new one generated automatically (merging tasks configuration + tasks services logical).\nSo for something like this:\nFile grumphp.yml\nyml\nparameters:\n  tasks:\n    shell:\n      scripts:\n        - my_script\n    shell.CHILD_TASK:\n      scripts:\n        - my_script_2\n    shell.CHILD_TASK_2:\n      scripts:\n        - my_script_3\nExisting resources/config/tasks.yml\nyml\nservices:\n    task.shell:\n        class: GrumPHP\\Task\\Shell\n        arguments:\n            - '@config'\n            - '@process_builder'\n            - '@formatter.raw_process'\n        tags:\n            - {name: grumphp.task, config: shell}\nIt would give:\nA new file resources/generated/tasks.yml (provided to the symphony system in replacement of the existing resources/config/tasks.yml):\nyml\nservices:\n    task.shell:\n        class: GrumPHP\\Task\\Shell\n        arguments:\n            - '@config'\n            - '@process_builder'\n            - '@formatter.raw_process'\n        tags:\n            - {name: grumphp.task, config: shell}\n    task.shell.CHILD_TASK:\n        parent: task.shell\n        tags:\n            - {name: grumphp.task, config: shell.CHILD_TASK}\n    task.shell.CHILD_TASK_2:\n        parent: task.shell\n        tags:\n            - {name: grumphp.task, config: shell.CHILD_TASK_2}\nWhere shell.CHILD_TASK_X is the config key and so on the service key. \nIt would'nt break the existing possibilities supposedly.\nBut going that way, could probably lead to a BC-break situation (I'm not sure).\nCheers.\n. After having take a look to ContainerFactory.php, my previous comment is still valid, but better than replacing the tasks.yml file, just add a new loaded file (dynamically generated with the help of grumphp.yml and tasks.yml).\nSomething like that:\n````php\n// Load basic service file + custom user configuration\n...\n$loader->load('tasks.yml');\n...\n// Load grumphp.yml file:\n$filesystem = new Filesystem();\nif ($filesystem->exists($path)) {\n    $loader->load($path);\n}\n// !! NEW - Load generated service file.\n$generated_tasks = 'generated/tasks.yml';\n// @TODO use $path (grumphp.yml) to create $generated_tasks file \n...\nif ($filesystem->exists($generated_tasks)) {\n  $loader->load($generated_tasks);\n}\n...\n````\n. ",
    "nicrodgers": "See https://github.com/phpro/grumphp/issues/482. Ah, right - my bad then. We recently switched a project that was using grumphp from php 5.6 to php 7, and we were unable to git commit since switching, because grumphp was failing. I checked the issue queue and saw #482, and took that to mean PHP 7 isn't yet supported.\nSo, i'll close this PR and investigate the bug further, then create an issue for that as necessary.. ",
    "cmodijk": "Hi @veewee,\nThat is a interesting case but it has the same problems i have right now. If i install GrumpPHP in global of composer it installs Symfony 4.0 and my project uses Symfony 3.0. \nBut now gitonomy/gitlib uses class_exists('Symfony\\Component\\Process\\ProcessBuilder') to check which version it should use but in the end the Symfony\\Component\\Process\\Process class is loaded from Symfony 4 and the Symfony\\Component\\Process\\ProcessBuilder is loaded from symfony 3 and this goed into a conflict. \n* https://github.com/gitonomy/gitlib/blob/master/src/Gitonomy/Git/Repository.php#L650-L666\nYou wil find the same problem with a phar file.\n. ",
    "ivan-atanasov": "I have the same issue. GrumPHP always returns green. Has anyone found a solution for it?. ",
    "fridzema": "Hello @veewee \nHere it is:\nahuggins/open-on-make                 0.0.16   Automatically open files in editor when Artisan make:* is executed\nakaunting/money                       1.0.2    Currency formatting and conversion package for Laravel.\nappstract/laravel-opcache             2.0.1    OPcache helper for Laravel.\nappstract/lush-http                   0.5.4    Smart Http Client for PHP.\nbarryvdh/laravel-debugbar             v3.1.5   PHP Debugbar integration for Laravel\nbarryvdh/laravel-ide-helper           v2.4.3   Laravel IDE Helper, generates correct PHPDocs for all Facade classes, to improve auto-completion.\nbarryvdh/laravel-snappy               v0.4.1   Snappy PDF/Image for Laravel 4\nbarryvdh/reflection-docblock          v2.0.4  \ncakephp/chronos                       1.2.1    A simple API extension for DateTime.\nchumper/zipper                        v1.0.2   This is a little neat helper for the ZipArchive methods with handy functions\ncomposer/ca-bundle                    1.1.1    Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.\ncomposer/composer                     1.6.5    Composer helps you declare, manage and install dependencies of PHP projects, ensuring you have the right stack everywhere.\ncomposer/semver                       1.4.2    Semver library that offers utilities, version constraint parsing and validation.\ncomposer/spdx-licenses                1.4.0    SPDX licenses list and validation library.\ndnoegel/php-xdg-base-dir              0.1      implementation of xdg base directory specification for php\ndoctrine/annotations                  v1.6.0   Docblock Annotations Parser\ndoctrine/cache                        v1.7.1   Caching library offering an object-oriented API for many cache backends\ndoctrine/collections                  v1.5.0   Collections Abstraction library\ndoctrine/common                       v2.8.1   Common Library for Doctrine projects\ndoctrine/dbal                         v2.7.1   Database Abstraction Layer\ndoctrine/inflector                    v1.3.0   Common String Manipulations with regard to casing and singular/plural rules.\ndoctrine/instantiator                 1.1.0    A small, lightweight utility to instantiate objects in PHP without invoking their constructors\ndoctrine/lexer                        v1.0.1   Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.\ndragonmantank/cron-expression         v2.2.0   CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\negulias/email-validator               2.1.4    A library for validating emails against several RFCs\nenshrined/svg-sanitize                0.8.2    An SVG sanitizer for PHP\nerusev/parsedown                      1.7.1    Parser for Markdown.\nfacebook/webdriver                    1.6.0    A PHP client for Selenium WebDriver\nfedeisas/laravel-mail-css-inliner     2.2      Inline the CSS of your HTML emails using Laravel\nfilp/whoops                           2.2.0    php error handling for cool kids\nfzaninotto/faker                      v1.7.1   Faker is a PHP library that generates fake data for you.\ngitonomy/gitlib                       v1.0.4   Library for accessing git\ngpressutto5/laravel-slack             1.0.1    Slack notification for Laravel as it should be.\nguzzlehttp/guzzle                     6.3.3    Guzzle is a PHP HTTP client library\nguzzlehttp/promises                   v1.3.1   Guzzle promises library\nguzzlehttp/psr7                       1.4.2    PSR-7 message implementation that also provides common utility methods\nh4cc/wkhtmltoimage-amd64              0.12.4   Convert html to image using webkit (qtwebkit). Static linked linux binary for amd64 systems.\nh4cc/wkhtmltopdf-amd64                0.12.4   Convert html to pdf using webkit (qtwebkit). Static linked linux binary for amd64 systems.\nhamcrest/hamcrest-php                 v2.0.0   This is the PHP port of Hamcrest Matchers\nhtmlmin/htmlmin                       v5.6.0   HTMLMin Is A Simple HTML Minifier For Laravel 5\nintervention/image                    2.4.2    Image handling and manipulation library with support for Laravel integration\nircmaxell/password-compat             v1.0.4   A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\njacobbennett/laravel-http2serverpush  v2.0.5   A HTTP2 Server Push Middleware for Laravel 5\njakub-onderka/php-console-color       0.1     \njakub-onderka/php-console-highlighter v0.3.2  \njean85/pretty-package-versions        1.2      A wrapper for ocramius/package-versions to get pretty versions strings\njustinrainbow/json-schema             5.2.7    A library to validate a json schema.\nknplabs/knp-snappy                    v1.0.4   PHP5 library allowing thumbnail, snapshot or PDF generation from a url or a html page. Wrapper for wkhtmltopdf/wkhtmltoimage.\nlab404/laravel-impersonate            1.2.2    Laravel Impersonate is a plugin that allows to you to authenticate as your users.\nlaracasts/flash                       3.0.2    Easy flash notifications\nlaravel/dusk                          v3.0.9   Laravel Dusk provides simple end-to-end testing and browser automation.\nlaravel/framework                     v5.6.26  The Laravel Framework.\nlaravel/horizon                       v1.3.1   Dashboard and code-driven configuration for Laravel queues.\nlaravel/tinker                        v1.0.7   Powerful REPL for the Laravel framework.\nleague/csv                            6.3.0    Csv data manipulation made easy in PHP\nleague/flysystem                      1.0.45   Filesystem abstraction: Many filesystems, one API.\nleague/flysystem-cached-adapter       1.0.7    An adapter decorator to enable meta-data caching.\nleague/flysystem-sftp                 1.0.15   Flysystem adapter for SFTP\nleague/glide                          1.3.0    Wonderfully easy on-demand image manipulation library with an HTTP based API.\nmaddhatter/laravel-fullcalendar       v1.3.0   Laravel helper for FullCalendar.io\nmaennchen/zipstream-php               v0.5.2   ZipStream is a library for dynamically streaming dynamic zip files from PHP without writing to the disk at all on the server.\nmaximebf/debugbar                     v1.15.0  Debug bar in the browser for php application\nmockery/mockery                       1.1.0    Mockery is a simple yet flexible PHP mock object framework\nmonolog/monolog                       1.23.0   Sends your logs to files, sockets, inboxes, databases and various web services\nmrclay/minify                         2.3.3    Minify is a PHP5 app that helps you follow several rules for client-side performance. It combines multiple CSS or Javascript files, removes unnecessary whitespace and comments, and s...\nmustangostang/spyc                    0.5.1    A simple YAML loader/dumper class for PHP\nmyclabs/deep-copy                     1.8.1    Create deep copies (clones) of your objects\nnesbot/carbon                         1.25.0   A simple API extension for DateTime.\nnette/bootstrap                       v2.4.6   \ud83c\udd71 Nette Bootstrap: the simple way to configure and bootstrap your Nette application.\nnette/di                              v2.4.12  \ud83d\udc8e Nette Dependency Injection Container: Flexible, compiled and full-featured DIC with perfectly usable autowiring and support for all new PHP 7.1 features.\nnette/finder                          v2.4.1   Nette Finder: Files Searching\nnette/neon                            v2.4.2   Nette NEON: parser & generator for Nette Object Notation\nnette/php-generator                   v3.0.4   \ud83d\udc18 Nette PHP Generator: generates neat PHP code for you. Supports new PHP 7.2 features.\nnette/robot-loader                    v3.0.3   \ud83c\udf40 Nette RobotLoader: high performance and comfortable autoloader that will search and autoload classes within your application.\nnette/utils                           v2.5.2   \ud83d\udee0 Nette Utils: lightweight utilities for string & array manipulation, image handling, safe JSON encoding/decoding, validation, slug or strong password generating etc.\nnicmart/tree                          v0.2.7   A basic but flexible php tree data structure and a fluent tree builder implementation.\nnikic/php-parser                      v3.1.5   A PHP parser written in PHP\nnunomaduro/collision                  v2.0.3   Cli error handling for console/command-line PHP applications.\nocramius/package-versions             1.3.0    Composer plugin that provides efficient querying for installed package versions (no runtime IO)\nparagonie/random_compat               v2.99.99 PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\nphar-io/manifest                      1.0.1    Component for reading phar.io manifest information from a PHP Archive (PHAR)\nphar-io/version                       1.0.1    Library for handling version information and constraints\nphpdocumentor/reflection-common       1.0.1    Common reflection classes used by phpdocumentor to reflect the code structure\nphpdocumentor/reflection-docblock     4.3.0    With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.\nphpdocumentor/type-resolver           0.4.0   \nphpro/grumphp                         v0.14.1  A composer plugin that enables source code quality checks.\nphpseclib/phpseclib                   2.0.11   PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.\nphpspec/prophecy                      1.7.6    Highly opinionated mocking framework for PHP 5.3+\nphpstan/phpdoc-parser                 0.2      PHPDoc parser with support for nullable, intersection and generic types\nphpstan/phpstan                       0.9.2    PHPStan - PHP Static Analysis Tool\nphpunit/php-code-coverage             6.0.7    Library that provides collection, processing, and rendering functionality for PHP code coverage information.\nphpunit/php-file-iterator             2.0.1    FilterIterator implementation that filters files based on a list of suffixes.\nphpunit/php-text-template             1.2.1    Simple template engine.\nphpunit/php-timer                     2.0.0    Utility class for timing\nphpunit/php-token-stream              3.0.0    Wrapper around PHP's tokenizer extension.\nphpunit/phpunit                       7.2.6    The PHP Unit Testing framework.\npredis/predis                         v1.1.1   Flexible and feature-complete Redis client for PHP and HHVM\npsr/cache                             1.0.1    Common interface for caching libraries\npsr/container                         1.0.0    Common Container Interface (PHP FIG PSR-11)\npsr/http-message                      1.0.1    Common interface for HTTP messages\npsr/log                               1.0.2    Common interface for logging libraries\npsr/simple-cache                      1.0.1    Common interfaces for simple caching\npsy/psysh                             v0.9.6   An interactive shell for modern PHP.\nramsey/uuid                           3.7.3    Formerly rhumsaa/uuid. A PHP 5.4+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID).\nsebastian/code-unit-reverse-lookup    1.0.1    Looks up which function or method a line of code belongs to\nsebastian/comparator                  3.0.1    Provides the functionality to compare PHP values for equality\nsebastian/diff                        3.0.1    Diff implementation\nsebastian/environment                 3.1.0    Provides functionality to handle HHVM/PHP environments\nsebastian/exporter                    3.1.0    Provides the functionality to export PHP variables for visualization\nsebastian/global-state                2.0.0    Snapshotting of global state\nsebastian/object-enumerator           3.0.3    Traverses array structures and object graphs to enumerate all referenced objects\nsebastian/object-reflector            1.1.1    Allows reflection of object attributes, including inherited and non-public ones\nsebastian/recursion-context           3.0.0    Provides functionality to recursively process PHP variables\nsebastian/resource-operations         1.0.0    Provides a list of PHP built-in functions that operate on resources\nsebastian/version                     2.0.1    Library that helps with managing the version number of Git-hosted PHP projects\nseld/cli-prompt                       1.0.3    Allows you to prompt for user input on the command line, and optionally hide the characters they type\nseld/jsonlint                         1.7.1    JSON Linter\nseld/phar-utils                       1.0.1    PHAR file format utilities, for when PHP phars you up\nsentry/sentry                         1.9.1    A PHP client for Sentry (http://getsentry.com)\nsentry/sentry-laravel                 0.8.0    Laravel integration for Sentry (https://sentry.io)\nsoapbox/laravel-formatter             2.0      A formatting library that converts data output between XML, CSV, JSON, TXT, YAML and a few others.\nspatie/browsershot                    3.22.1   Convert a webpage to an image or pdf using headless Chrome\nspatie/crawler                        4.1.6    Crawl all internal links found on a website\nspatie/db-dumper                      2.10.0   Dump databases\nspatie/image                          1.5.2    Manipulate images with an expressive API\nspatie/image-optimizer                1.1.0    Easily optimize images using PHP\nspatie/laravel-backup                 5.9.1    A Laravel 5 package to backup your application\nspatie/laravel-blade-javascript       2.2.0    A Blade directive to export variables to JavaScript\nspatie/laravel-failed-job-monitor     3.0.1    Get notified when a queued job fails\nspatie/laravel-image-optimizer        1.3.1    Optimize images in your Laravel app\nspatie/laravel-link-checker           4.1.0    Check all links in a Laravel app\nspatie/laravel-medialibrary           7.3.8    Associate files with Eloquent models\nspatie/pdf-to-image                   1.8.0    Convert a pdf to an image\nspatie/robots-txt                     1.0.1    Determine if a page may be crawled from robots.txt and robots meta tags\nspatie/temporary-directory            1.1.4    Easily create, use and destroy temporary directories\nspiritix/lada-cache                   v2.1.2   A Redis based, automated and scalable database caching layer for Laravel 5.1+\nsquizlabs/php_codesniffer             3.3.0    PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\nsven/artisan-view                     v3.0.0   Manage your views in Laravel projects through artisan\nswiftmailer/swiftmailer               v6.0.2   Swiftmailer, free feature-rich PHP mailer\nsymfony/class-loader                  v3.4.12  Symfony ClassLoader Component\nsymfony/config                        v4.1.1   Symfony Config Component\nsymfony/console                       v4.1.1   Symfony Console Component\nsymfony/css-selector                  v4.1.1   Symfony CssSelector Component\nsymfony/debug                         v4.1.1   Symfony Debug Component\nsymfony/dependency-injection          v4.1.1   Symfony DependencyInjection Component\nsymfony/dom-crawler                   v4.1.1   Symfony DomCrawler Component\nsymfony/event-dispatcher              v4.1.1   Symfony EventDispatcher Component\nsymfony/filesystem                    v4.1.1   Symfony Filesystem Component\nsymfony/finder                        v4.1.1   Symfony Finder Component\nsymfony/http-foundation               v4.1.1   Symfony HttpFoundation Component\nsymfony/http-kernel                   v4.1.1   Symfony HttpKernel Component\nsymfony/intl                          v4.1.1   A PHP replacement layer for the C intl extension that includes additional data from the ICU library.\nsymfony/options-resolver              v4.1.1   Symfony OptionsResolver Component\nsymfony/polyfill                      v1.7.0   Symfony polyfills backporting features to lower PHP versions\nsymfony/polyfill-ctype                v1.8.0   Symfony polyfill for ctype functions\nsymfony/process                       v4.1.1   Symfony Process Component\nsymfony/routing                       v4.1.1   Symfony Routing Component\nsymfony/translation                   v4.1.1   Symfony Translation Component\nsymfony/var-dumper                    v4.1.1   Symfony mechanism for exploring and dumping PHP variables\nsymfony/yaml                          v4.1.1   Symfony Yaml Component\nterdelyi/laravel-localedate           v1.0.1   Simple date localization for Laravel.\ntheseer/tokenizer                     1.1.0    A small library for converting tokenized PHP source code into XML and potentially other formats\ntightenco/collect                     v5.6.25  Collect - Illuminate Collections as a separate package.\ntightenco/ziggy                       0.6.6    Generates a Blade directive exporting all of your named Laravel routes. Also provides a nice route() helper function in JavaScript.\ntijsverkoyen/css-to-inline-styles     2.2.1    CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.\nventurecraft/revisionable             1.28.0   Keep a revision history for your models without thinking, created as a package for use with Laravel\nvlucas/phpdotenv                      v2.4.0   Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\nvoku/html-min                         3.0.3    HTML Compressor and Minifier\nvoku/simple_html_dom                  4.1.5    Simple HTML DOM package.\nwebmozart/assert                      1.3.0    Assertions to validate method input/output with nice error messages.\nweebly/phpstan-laravel                v1.1.1   Laravel plugins for PHPStan. ",
    "khadgarmage": "@tombevers @veewee Can you help me? Thanks. Hi @veewee \nThe result of \"./vendor/bin/grumphp git:pre-commit -vvv\":\nRunning task 1/3: Phan...\nCommand: '/Users/funplus/Work/ffs/code/vendor/bin/phan' '--config-file' '.phan/config.php' '--output-mode' 'text'\n\u2714\nRunning task 2/3: PhpStan...\nCommand: '/Users/funplus/Work/ffs/code/vendor/bin/phpstan' 'analyse' '--autoload-file=./public/classload.php' '--level=0' '--no-ansi' '--no-interaction' '--no-progress' 'application/models/mongopetteam.php'\nI think the plugin of phan has a bug, it's not specify the commit file('application/models/mongopetteam.php') as a paramater.. ",
    "AdamMarton": "I guess, I have the same issue.\nRunning Phan in CLI returns two issues (therefore it exits with 1), but GrumPHP reports it as \u2714.\nUnfortunately, couldn't get more details, since .\\vendor\\bin\\grumphp git:pre-commit -vvv hangs.. The same goes for phpmnd. Maybe GrumPHP doesn't trigger them properly, or they don't care about CLI arguments.. ",
    "StephanMeijer": "Nice catch! will do!. Fixed @veewee . ",
    "gsomoza": "@veewee I don't think that a generic approach is going to work, because each external process will receive large input in different ways. For example:\n\nphpcs does support a --file-list argument that you can use to provide the list via a temporary file.\nbut while phplint doesn't have that type of option, it can receive files via STDIN \u2013 the --stdin argument has to be use for that to work.. Right, but that's also the reason why it only works in UNIX, right? \n\nWouldn't we have a cross-platform solution if we update each task to receive input using the mass-input options that each external programs already supports? You could then accept PRs for that in a task-by-task basis because under this context it would be justified.\nThe one I'd like to have this feature for is PHPLint: if the task always uses STDIN to pass the file list to the program, then you wouldn't even need to add an option to grumphp.yaml because it would work even for short file lists.\nIt's totally possible I'm missing on lots of details though, I'm not familiar at all with the mechanics behind GrumPHP. Sorry if that's the case :) just my two cents. > I don't think there is a general solution for the problem.\n\nPassing files through stdin is only possible if the tools support this + it might require additional input arguments.\n\nThe bottom line is that each tool implements input in a different way. There's no easy, cross-platform way of standardising that I know of, so I think the only reasonable solution is to implement mass-input options specifically for each plugin. If by doing that you find a pattern, it would always be possible to extract that pattern out into a more generic solution that only applies to the tools that support it \u2013 but I think the specific implementations come first.. Fixed it by bumping the minimum required version for symfony/process to 3.2, which is where they introduced the InputStream class. I tried to find an approach where the dependency is injected and typed as an interface, but there's just no appropriate interface for InputStream so that idea is probably a dead end \u2013 unless we introduce our own interface and wrap InputStream, but I don't think there's enough value in doing that because the current approach is still not a BC break anyway:\nAccording to semver.org you should still be able to release this as a non-BC break change because the public API didn't really change (see this comment). \nIn practice, (very old) clients that have a hard dependency on an older version of symfony/process will not be able to upgrade this minor bump because Composer will not let them.\nSo with the above in mind I'd recommend bumping minor version in this case (but of course that's up to you).. \ud83c\udf89. ",
    "simesy": "That document only describes how to define the rulesets you want.\nruleset: ['cleancode', 'codesize', 'naming']\nI want to pass parameters into the naming ruleset.. Oh great thanks!. ",
    "DidYoun": "Hi,\nRequested changes have been done. Could you check the pull request again ? Thanks \ud83d\ude03 . Hi, thanks for the reply.\nI've deleted the isset check on $whitelistPatterns. The variable name has been changed : $extensionPattern -> $extensions. ",
    "q0rban": "@veewee PR in #538! \ud83d\ude00 . This is my first time with PHPSpec so let me know if I did the test correctly.. To test that this is broken on master:\n```\n$ git checkout master\n$ git pull\n$ composer update\n$ vendor/bin/security-checker security:check ./composer.lock\nAn error occurred: Could not resolve host: security.sensiolabs.org.\n```\n. If that's preferred, I'm happy to make the change. Personally, I find nested early returns to lead to bugs, hence the decision to keep the return in one place. Sometimes optimizing for microseconds doesn't always optimize for humans. ;). I suppose there's already a precedent for an early return in this function, so \ud83d\udc4d .. ",
    "redthor": "Part of my issues appears to be due to git_dir parameter being the folder where the .git folder is found as opposed to the actual .git folder. Removing .git helped a bit.\nIn the future it'd be good if git_dir meant the \"git directory\" :). ",
    "Sanguigui": "Nervermind, I was in the case of an \"exotic config\" and I forgot to add the command:\nsh\nphp ./vendor/bin/grumphp git:init --config=path/to/grumphp.yml\nI've got another issue now but phpcs sniffs my commits again, thanks for the work !. Yes, I staged a file with obvious errors that you can see listed when I ran ./vendor/bin/grumphp run first.\nThe diff is given to the pre-commit command but the phpcs command isn't run in this case.. git diff -r -p -m -M --full-index --staged outputs:\n```sh\ndiff --git a/auraengine/app/ServiceHelpers/Exports/ClusterExport.php b/auraengine/app/ServiceHelpers/Exports/ClusterExport.php\nindex e29fff66f4d7b798dc5b4e9107989da2648e95b6..9fcc5ee37a0921b49208ed8537fc735727a7aaf2 100755\n--- a/auraengine/app/ServiceHelpers/Exports/ClusterExport.php\n+++ b/auraengine/app/ServiceHelpers/Exports/ClusterExport.php\n@@ -46,5 +46,6 @@ class ClusterExport extends Base\n                 }\n             }\n         )->download('xlsx');\n+        echo 'sth';;;\n     }\n }\n```\nAnd when I commit these changes I get:\n``sh\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/2: Phpcs... \u2714\nRunning task 2/2: PhpMd... \u2714\nGrumPHP detected a commit-msg command.\nGrumPHP is sniffing your code!\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c           \n         \u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n  \u2584\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                         \u2588\u2588\u2588\u2588\u2588\u2588\u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2588\u2588\u258c          \u2588\u2588       \u2588\u2588\u2588\u2588\u258c      \n        \u2590\u2588\u258c                            \u2588\u2588\u2588        \n         \u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588        \n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588         \n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2590         \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          \n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580           \n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580            \n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588                \n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2590\u2588\u258c                 \n                        \u2588\u2588\u2580   \u2590\u2580                  \n       _    _ _                         _ _\n      / \\  | | |   __ _  ___   ___   __| | |\n     / _ \\ | | |  / _ |/ _ \\ / _ \\ / ` | |\n    /  \\| | | | (| | () | () | (| ||\n   //   __||  __, |_/ ___/ _,()\n                  |___/\n```\n. Hi @veewee ,\nYes I run grumPHP in a Vagrant box and my .git files are not in my synced folder. Is there a fix related to this type of configuration?\nAnd what's happening when I run grumPHP in this type of configuration compared to a local project ?. Hi @veewee ,\nAfter double checking with the team here's the configuration:\n\nEverything inside the /var/www folder on the Vagrant box is synced with aura-develop folder locally.\nThis synchronized aura-develop folder is here to allow developers to code locally without sftp to the VM each changes\nCommits are made inside the Vagrant box, this means it should be as the grumphp  \"local configuration\"\n\nHere's the pre-commit git hook:\n```sh\n!/bin/sh\n\nRun the hook command.\nNote: this will be replaced by the real command during copy.\n\nFetch the GIT diff and format it as command input:\nDIFF=$(git -c diff.mnemonicprefix=false --no-pager diff -r -p -m -M --full-index --no-color --staged | cat)\nOutput the DIFF\necho ${DIFF};\nRun GrumPHP\n(cd \"auraengine/\" && printf \"%s\\n\" \"${DIFF}\" | exec '/var/www/auraengine.io/auraengine/vendor/bin/grumphp' 'git:pre-commit' '--skip-success-output' '-vvv')\n```\nI added an echo and a -vvv to see what happens and as you can see below, the diff is given to grumphp when commiting inside the Vagrant box:\n``sh\ngit add -A && git commit -m \"test\"\ndiff --git a/auraengine/app/Http/Controllers/Auth/test.php b/auraengine/app/Http/Controllers/Auth/test.php index 72e7dc2dd6c0bf8540e32ecc694c5a1e0a55624a..449c3893984f68fd97698fc2e9210cf3b16f7cbb 100644 --- a/auraengine/app/Http/Controllers/Auth/test.php +++ b/auraengine/app/Http/Controllers/Auth/test.php @@ -1,3 +1,3 @@ <?php -echo 'truc';;; \\ No newline at end of file +echo 'truc';; \\ No newline at end of file\n[2018-09-04 06:00:09] GrumPHP.DEBUG: Repository created (git dir: \"/var/www/auraengine.io/.git\", working dir: \"/var/www/auraengine.io\") [] []\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/1: Phpcs... \u2714\nGrumPHP detected a commit-msg command.\nGrumPHP is sniffing your code!\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c           \n         \u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n  \u2584\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                         \u2588\u2588\u2588\u2588\u2588\u2588\u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2588\u2588\u258c          \u2588\u2588       \u2588\u2588\u2588\u2588\u258c      \n        \u2590\u2588\u258c                            \u2588\u2588\u2588        \n         \u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588        \n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588         \n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2590         \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          \n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580           \n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580            \n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588                \n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2590\u2588\u258c                 \n                        \u2588\u2588\u2580   \u2590\u2580                  \n       _    _ _                         _ _\n      / \\  | | |   __ _  ___   ___   __| | |\n     / _ \\ | | |  / _ |/ _ \\ / _ \\ / ` | |\n    /  \\| | | | (| | () | () | (| ||\n   //   __||  __, |_/ ___/ _,()\n                  |___/\n[feature/static-analysis-linting a89bab7a] test\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\nSo it looks like the diff is given ?. ",
    "poppabear8883": "@janvernieuwe yes it appears so ... with more effort on the users side. \nI'm sure a lot of the integrated \"features/parameters\" could be achieved through the event subscribers like the ascii option for example. Its fairly convenient for us however to just add the parameter with the required value(s).\nI think its worth a merge for the simplicity and under the notion that more users will take advantage of this feature now that they don't have to create a class to display a string ...\nWith that said, its only a proposed feature, and if you/they decide not to merge it, I appreciate the consideration nonetheless.. @janvernieuwe \nI have the new proposal prepared. I did force-push to keep the commits clean. Let me know your thoughts. \nThanks in advance. I thought about this as well, i will fix this up and will push it up. Stand by .... I'm a bit confused here, These should had be removed after the force push. I need to investigate this.. Nevermind, it was just overlooked when force pushing the new proposal. A fix will be pushed soon.. Would you like to see the RunContext act as a service ? In other words, I can add a getter to the RunContext (just like you have the getFiles), However we would still need to be able to push to that array which means i would have to add a method like addException($exception) ... IMO, if we was to go this route, it might justify a class dedicated to handling this logic that could be injected in as a dependency where needed ?\nPlease advise\nThanks. I was simply trying to be consistent with the way the rest of the code was written ...\n```php\nprivate function enforceTextWidth(ContextInterface $context)\n    {\n        $commitMessage = $context->getCommitMessage();\n        $config = $this->getConfiguration();\n    if (trim($commitMessage) === '') {\n        return TaskResult::createPassed($this, $context);\n    }\n\n    $errors = [];\n    $lines = $this->getCommitMessageLinesWithoutComments($commitMessage);\n\n...\n``\nAbove is only1 of many` that uses the exact method I used here ?\nOr\nAre you proposing that this be refactored due to the observation of what I am stating above ? I can certainly refactor the whole task to make use of a new private method.\nPlease advise\nThanks. So if i am understanding correctly, that the task could run multiple times using a single instance which could persist the state of the $exceptions which would yield undesired behavior?\nIf this is accurate, couldn't we just reset exceptions back to an empty array in the run() method ?. This should resolve this conversation https://github.com/phpro/grumphp/pull/541/commits/aa6d1ee5ab70d8408b731d2b645f76291f6687ce. These should resolve this conversation\nhttps://github.com/phpro/grumphp/pull/541/commits/3217efd75d9a477b8f820553add23d6ed8f3a45d\nhttps://github.com/phpro/grumphp/pull/541/commits/b3182857cabc6ef3d075d5c41dbdaf75a05c0483. One concern with the method name .. Not only can needles be an array of strings, but it can also be just a single string ...\nSo for me it would read weird in this use case:\nphp\nStr::containsOneOf('This string contains this word', 'word');. This should resolve this conversation https://github.com/phpro/grumphp/pull/539/commits/d31d927dafc46cf194ac5f12cf81af4a39605b9a. I re-read what you typed and i think you are suggesting to only allow needles to be an array of strings which then would accommodate the new method name ...\nI will make these changes and push shortly.. This should resolve this conversation https://github.com/phpro/grumphp/pull/541/commits/2de742761c1857f9e3a8a79363f215b75bfb428b. This should resolve this conversation https://github.com/phpro/grumphp/pull/541/commits/0056460816fd622c9986c5eb1dd8de82e29a467c. Good catch!. Agreed, this looks much better thank you .... This should resolve this conversation https://github.com/phpro/grumphp/pull/541/commits/8ee9e9895f1886a6397d44cdc7902fb8d1d8f00c. This should resolve this conversation https://github.com/phpro/grumphp/pull/541/commits/e2e2393936e52cc061480c8e436d54f362f8913c. ",
    "bastos71": "Hi @veewee,\nThanks for your review, I'll take a look at it !. @veewee here is the update\nNote : sorry for extra commits .... Hi @Landerstraeten, sorry it's just that I do not have so much time to do it those times.\nI will try to give a look next week !. Sorry @Landerstraeten I did not take time to work on it, if you wanna help, you're welcome :). Hello guys, sorry for the long waiting, i'm going to make the asked changes. @veewee I commited but I don't know why \"appveyor\" is throwing me a failure :/ \nCould you help ? . @veewee Okay thx I'm going to do it then. I think by resolving the merge conflicts while I waited for your answer the checks are now pending\nI'll wait for their results . @veewee seems all good to me if I'm not wrong :). @Landerstraeten @veewee is this ok ? . you're welcome, thx. Okay. ",
    "diego-sorribas": "```\n$ composer -v\n\n/ _/ _  _   _ _\n / /   /  \\/  ` \\/  \\/  \\/ / _ \\/ /\n/ // // / / / / / / // / // (  )  __/ /\n_/_// // // ./_/_/_//\n                    //\nComposer version 1.7.2 2018-08-16 16:57:12\n```\nThat is ok?. ```\n{\n  \"name\": \"zfcampus/zf-apigility-skeleton\",\n  \"description\": \"Skeleton Application for Apigility\",\n  \"type\": \"project\",\n  \"license\": \"BSD-3-Clause\",\n  \"keywords\": [\n    \"api\",\n    \"apigility\",\n    \"framework\",\n    \"zf2\"\n  ],\n  \"homepage\": \"http://apigility.org/\",\n  \"support\": {\n    \"issues\": \"https://github.com/zfcampus/zf-apigility-skeleton/issues\",\n    \"source\": \"https://github.com/zfcampus/zf-apigility-skeleton\",\n    \"rss\": \"https://github.com/zfcampus/zf-apigility-skeleton/releases.atom\",\n    \"slack\": \"https://zendframework-slack.herokuapp.com\",\n    \"forum\": \"https://discourse.zendframework.com/c/questions/apigility\"\n  },\n  \"config\": {\n    \"process-timeout\": 5000\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"1.4-dev\",\n      \"dev-develop\": \"1.5-dev\"\n    }\n  },\n  \"repositories\": [\n    {\n      \"type\": \"vcs\",\n      \"url\": \"https://github.com/solcre-org/phinx.git\"\n    }\n  ],\n  \"require\": {\n    \"php\": \"^7.2\",\n    \"zendframework/zend-component-installer\": \"^1.1.1 || ^2.1.1\",\n    \"zfcampus/zf-apigility\": \"^1.3\",\n    \"zfcampus/zf-apigility-documentation\": \"^1.2.3\",\n    \"zfcampus/zf-development-mode\": \"^3.1\",\n    \"doctrine/doctrine-orm-module\": \"^2.1\",\n    \"enlitepro/enlite-monolog\": \"^2.4\",\n    \"bushbaby/flysystem\": \"^4.0\",\n    \"neitanod/forceutf8\": \"^2.0\",\n    \"robmorgan/phinx\": \"dev-master\",\n    \"phpmailer/phpmailer\": \"^6.0\",\n    \"twig/twig\": \"^2.4\",\n    \"zfr/zfr-cors\": \"^1.5\",\n    \"gedmo/doctrine-extensions\": \"^2.4\",\n    \"phpoffice/phpspreadsheet\": \"^1.3\",\n    \"pusher/pusher-php-server\": \"^3.1\"\n  },\n  \"require-dev\": {\n    \"zendframework/zend-developer-tools\": \"^1.1.1\",\n    \"zfcampus/zf-apigility-admin\": \"^1.5.13\",\n    \"zfcampus/zf-asset-manager\": \"^1.2\",\n    \"zfcampus/zf-composer-autoloading\": \"^1.1.1 || ^2.0\",\n    \"zfcampus/zf-deploy\": \"^1.2\",\n    \"phpunit/phpunit\": \"^7.1\",\n    \"phpstan/phpstan\": \"^0.9.2\",\n    \"phpstan/phpstan-doctrine\": \"^0.9.1\",\n    \"squizlabs/php_codesniffer\": \"^3.2\",\n    \"phpstan/phpstan-strict-rules\": \"^0.9.0\"\n  },\n  \"suggest\": {\n    \"zfcampus/zf-apigility-doctrine\": \"zfcampus/zf-apigility-doctrine ^2.1 to create Doctrine-Connected REST services\",\n    \"zfcampus/zf-http-cache\": \"zfcampus/zf-http-cache ^1.3 to add HTTP caching to your API\",\n    \"zfr/zfr-cors\": \"zfr/zfr-cors ^1.2 to add CORS support to your API\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Application\\\": \"module/Application/src/\",\n      \"MegaPharma\\\": \"module/MegaPharma/src/\",\n      \"MegaPharma\\V1\\Domain\\User\\\": \"module/MegaPharma/src/V1/Domain/User/src/\",\n      \"MegaPharma\\V1\\Domain\\MegaPharma\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/src/\",\n      \"MegaPharma\\V1\\Domain\\MegaPharma\\Structure\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/Structure/src/\",\n      \"MegaPharma\\V1\\Domain\\MegaPharma\\Indicators\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/Indicators/src/\",\n      \"MegaPharma\\V1\\Domain\\Common\\\": \"module/MegaPharma/src/V1/Domain/Common/src/\",\n      \"Solcre\\SolcreFramework2\\\": \"./vendor/solcre/solcre-framework-2/src\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"ApplicationTest\\\": \"module/Application/test/\",\n      \"MegaPharmaCommonTest\\\": \"module/MegaPharma/src/V1/Domain/Common/tests/\",\n      \"MegaPharmaStructureTest\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/Structure/tests/\",\n      \"MegaPharmaIndicatorsTest\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/Indicators/tests/\",\n      \"MegaPharmaUserTest\\\": \"module/MegaPharma/src/V1/Domain/User/tests/\",\n      \"MegaPharmaMegaPharmaTest\\\": \"module/MegaPharma/src/V1/Domain/MegaPharma/tests/\",\n      \"SolcreFrameworkTest\\\": \"./vendor/solcre/solcre-framework-2/tests/\"\n    },\n    \"files\": [\n      \"src/Apigility/constants.php\"\n    ]\n  },\n  \"scripts\": {\n    \"cs-check\": \"phpcs\",\n    \"cs-fix\": \"phpcbf\",\n    \"development-disable\": \"zf-development-mode disable\",\n    \"development-enable\": \"zf-development-mode enable\",\n    \"development-status\": \"zf-development-mode status\",\n    \"post-create-project-cmd\": [\n      \"@development-enable\"\n    ],\n    \"serve\": \"php -S 0.0.0.0:8080 -t public/\",\n    \"test\": \"phpunit\"\n  }\n}\n```. ",
    "b-connect": "It seems phpcs only check changed files. . Would be nice to have an option like check_all_files. Yupp you are right.. ",
    "laurieplo": "\nHi @laurieplo, Thanks for your effort. Can you fix the failing tests/build?\n\nYes, sorry @Landerstraeten ! It is fixed.. Done. Done. Done. Done. Done. Done. ",
    "RoSk0": "Looking at the services section in Good idea, I was thinking about it myself but never had time to implement. Looking at the services section in the grumphp.yml I think we can take it a step forward and improved developer experience even more by removing the need of declaring services here and instead declare them in the backend. For example if we will introduce documented naming conversion, for example, \"{EXISTING_TASK}.{CHILD_TASK}\" where EXISTING_TASK would be \"shell\" and CHILD_TASK \"myspecifictask1\" from example above we will be able to say - \"right, we have a new 'shell' task with another set of parameters\" and define required service.. Yeah, that was my first attempt at this, but it wasn't working as validation would fail .. I will try to make it work tomorrow... Hi @veewee,\nTurns out it actually possible - so the configuration is now backward compatible! Win. \nThanks for bringing it up!\nI've done a forced push so you may want to review it again.. ",
    "Th3Mouk": "The first thing that come to mind is just add an option and an if to don't execute this line:\nhttps://github.com/phpro/grumphp/blob/ef7af590f27a1a3144651da239c2338e2d5834d2/src/Task/PhpStan.php#L87. ",
    "Jamesking56": "I'm running a custom tool thats not open source by using the Shell task in GrumPHP. In the output I get:\nRunning task x/x: Shell...\nIt would be great if I could set the label, so that the output was:\nRunning task x/x: MyTool.... ",
    "ChrisButterworth": "So I have a _dev folder that contains my vendor directory with grumphp running in the parent but it doesn't catch anything that isn't in my index.php or any text indentation issues. . ",
    "starred-arthur": "\ud83d\udc4d . ",
    "malc0mn": "I'm having the exact same issue. This project structure is not at all exotic, just a clean way to separate, for example, source from documentation and preventing your git repo to become a mess :smile: \nWhenever I make a change, it seems as though GrumPHP is doing it's thing, running all tasks, but you can make whatever coding error you want without any of the tasks detecting it.\nI have also traced the problem and have an idea for a solution as well:\n\nWhen we look at the git hooks being installed, the pre-commit hook looks like this:\n```bash\n\n!/bin/sh\n\nRun the hook command.\nNote: this will be replaced by the real command during copy.\n\nFetch the GIT diff and format it as command input:\nDIFF=$(git -c diff.mnemonicprefix=false --no-pager diff -r -p -m -M --full-index --no-color --staged | cat)\nRun GrumPHP\n(cd \"${HOOK_EXEC_PATH}\" && printf \"%s\\n\" \"${DIFF}\" | exec $(HOOK_COMMAND) '--skip-success-output')\n2. You see that a subfolder is handled perfectly because of the `cd \"${HOOK_EXEC_PATH}\"` in the very last line.\n3. The problem, however, is the git diff that is being generated, which will look like this:diff\ndiff --git a/project/src/path/to/my/BaseController.php b/project/src/path/to/my/BaseController.php\nindex c9bdffd945057f1202a27c150dc8512139eab3a0..ec20fbe03e4a01d40445716892f6162562a8dd73 100644\n--- a/project/src/path/to/my/BaseController.php\n+++ b/project/src/path/to/my/BaseController.php\n@@ -33,7 +33,7 @@ abstract class BaseController extends Controller\n             if ($log) {\n                 $this->log($log, 'error');\n             }\n-            throw $this->createAccessDeniedException($message);\n+throw $this->createAccessDeniedException($message);\n         }\n     }\n```\nThe problem should be obvious instantly when looking at the paths: they start from the very root of the git repository.\nPossible solutions:\n1. Given the fact that you know the HOOK_EXEC_PATH, you can easily strip this path from the git diff that you receive\n\n\nI'm not at all sure why you need the full diff? I did not dig in to the code deep enough, but there is such a thing as git status -s which can be executed inside the HOOK_EXEC_PATH (so the CD needs to come first) and it will give you a list of changed files relative to the dir you are in:\nM src/path/to/my/BaseController.php\nR  src/path/to/my/StatusController.php -> src/path/to/my/StatusController2.php\n?? ../test.php\n?? test.log\nBut that might not be enough for what GrumPHP does with that output? It will not only show staged stuff and uses colour coding to differentiate between staged and not staged so that's probably a no go\n\n\nFind a way to make git diff display relative paths. A way to do this would be to simply adjust the existing command you currently use to this: git -c diff.mnemonicprefix=false --no-pager diff -r -p -m -M --full-index --no-color --staged --src-prefix=a/../ --dst-prefix=b/../. Note the addition of the --src-prefix and --dst-prefix which would result in:\n```diff\ndiff --git a/../project/src/path/to/my/file.php b/../project/src/path/to/my/file.php\nindex c9bdffd945057f1202a27c150dc8512139eab3a0..ec20fbe03e4a01d40445716892f6162562a8dd73 100644\n--- a/../project/src/path/to/my/BaseController.php\n+++ b/../project/src/path/to/my/BaseController.php\n@@ -33,7 +33,7 @@ abstract class BaseController extends Controller\n             if ($log) {\n                 $this->log($log, 'error');\n             }\n\nthrow $this->createAccessDeniedException($message);\n+throw $this->createAccessDeniedException($message);\n         }\n     }\nI think option 3 would be quite easy to implement, especially since you already **have** this prefix in the `grumphp.yml` file:yml\nparameters:\n    git_dir: ..\n    bin_dir: vendor/bin\n``\nHandling the trailing slash is a breeze ($prefix = rtrim($gitDir, '/') . '/';`).. Whoa, not at all sure what those failures are about in travis :/. I get the same errors on master without any change.... Right indeed, I knew it wouldn't cover all bases instantly but couldn't think of a good example right away.\nEdit: What do you mean with \"it also won't fix the run command\"?\n\nWhy are you using the full git diff? Should the filenames of the files that were changed not be enough?. Been thinking about your example of changing files in the root dir and with this PR, that still will not be a problem given that the paths will now always be 'relative' (note the quotes) to the grumphp.yml file.\nChanging (adding in this example) a file in the root dir will give you this:\ndiff\ndiff --git a/../hello.php b/../hello.php\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..7bf38ca41723f753057d7712a6c0d5f1161fbd17\n--- /dev/null\n+++ b/../hello.php\n@@ -0,0 +1,3 @@\n+<?php\n+\n+echo \"hello\"\nSo that will still work fine as GrumPHP will show:\n```\n$ git commit\nGrumPHP detected a pre-commit command.\nGrumPHP is sniffing your code!\nRunning task 1/4: Composer... \u2714\nRunning task 2/4: PhpCsFixerV2... \u2714\nRunning task 3/4: PhpStan... \u2718\nRunning task 4/4: Phpunit... \u2714\n             \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\n           \u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n         \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2584\n        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n       \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n  \u2584\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n \u2590\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n   \u2580\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\n     \u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588                       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2580\u2580\u2580\u2580\u2580\u2584      \u2584\u2580\u2580\u2580\u2580\u2580     \u2588\u2588\u2588\u2588\u2588 \u2580\n      \u2590\u2588\u2588\u2588\u2588      \u2590\u2588\u2588        \u2590\u2588\u2588        \u2588\u2588\u2588\u2588\u258c\n      \u2588\u2588\u2588\u2588\u258c                            \u2588\u2588\u2588\n       \u258c\u2588\u2588\u258c           \u2584\u2584 \u2584\u2584           \u2590\u2588\u2588\u2588\n        \u2588\u2588\u2588       \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584       \u2590\u2588\u2588\u2588\n         \u2588\u2588\u2584 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n        \u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580     \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n         \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n           \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2580\n            \u2580 \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2580\n                \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2590\u2588\u2588\u2588\n                 \u2580\u2588\u258c  \u2590\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u258c\n                        \u2588\u2588\u2580   \u2590\u2580\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n   \u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2580\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2584\u2584\u2584\u2584\u2584\u2588\n   \u2588\u2591\u2591\u2590\u2588\u258c\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\n   \u2588\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2584\u2588\n   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\nLine   hello.php                                              \n\n4      Syntax error, unexpected EOF, expecting ';' on line 4  \n\n[ERROR] Found 1 error\nTo skip commit checks, add -n or --no-verify flag to commit command\n```\n. > The run command uses \\GrumPHP\\Locator\\RegisteredFiles which uses the git ls-files.\nGiven that you do a CD to the folder where grumphp.yml resides, I assume that git ls-files is run from that location as well. git ls-files always generates relative paths to where it is executed, so there is no issue with that particular command.. So just to clarify by going back to the example in #592:\n/.git\n/project\n    |- src\n        |- Namespace\n            |- Vendor\n    |- composer.json\n    |- composer.lock\n    |- grumphp.yml\nThis would mean that grumphp would only operate on files inside the /project folder, right?\nThat would indeed seem like the correct approach; it is also the logical approach since you could go wild and do this:\n/.git\n/micro-service-one\n    |- src\n        |- Namespace\n            |- Vendor\n    |- composer.json\n    |- composer.lock\n    |- grumphp.yml\n/micro-service-two\n    |- src\n        |- Namespace\n            |- Vendor\n    |- composer.json\n    |- composer.lock\n    |- grumphp.yml\nwhich is IMHO very wrong, but still GrumPHP could purr along merrily if we leave the contents of the hook scripts aside (that would be another matter entirely).\nTL;DR\nYes, that seems like the correct approach!. Believe me, I wouldn't even think of supporting it since as I said it is IMHO very wrong to do such a thing.\nBut with the approach you propose here, it would be possible.\nSo what do we do with this PR? Close it?. I'm really not sure if this file needs to be updated as well. I did just to be sure, but have no way of testing it.. I'm really not sure if this file needs to be updated as well. I did just to be sure, but have no way of testing it.. ",
    "Pazns": "I agree with this.\nUnexpected behaviour.\nIf it's not a bug, it should be documented clearly, in which case it seems weird, but I'm fine with it.\nI lost time wondering why my GrumPHP task was not blocking things the command-line was...\nAlso, but it may be a bug not related to this, the value \"max\" is not accepted by GrumPHP, yet it is a legal value for a PHPStan level.. ",
    "guifelix": "@veewee how do I commit a new file in this same PR? I've never done that. ",
    "Thomasvc1": "Made file objects created from a git diff rely on the absolute path of the file:\n(rename to .patch for easy apply)\ngrumphp.txt\n. ",
    "Ocramius": "Note: you can probably reduce this to two xpath expressions ( no need for looping )\n. ",
    "eric-therond": "Defaults values from the tool are also used when the configuration file specified in the cli doesn't exist so if someone doesn't have a file .progpilot/configuration.yml the defaults values from the tool will be used and if someone has a file .progpilot/configuration.yml but has forgotten to define it in the parameters of the task the values of .progpilot/configuration.yml will be used.. If I comment the line 67 the commited files are not analyzed by the tool. Unfortunately, progpilot relies on ircmaxell/php-cfg which doesn't currently have a stable version. ",
    "Vesquen": "That does make sense, will fix!. ",
    "localheinz": "What do you think about using the same name as in localheinz/composer-normalize, that is, no_update_lock instead of update_lock?\nFor reference, see Localheinz\\Composer\\Normalize\\Command\\NormalizeCommand#L97.. Probably out of scope of this PR (since the list of options is not sorted already), but what do you think about keeping the list of options sorted by name (also applies to other occurrences in this PR)?. Should this be true?\nSee GrumPHP\\Task\\ComposerNormalize::getConfigurableOptions().. The specification appears to be indented with 2 spaces, should it be indented with 4 spaces instead?\nFor reference, see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#1-overview.\n. Looks like this import is not used, can we remove it?. Note that when indent_style is specified, indent_size needs to be specified as well (and vice versa).\nNot sure if this should be handled here already.. Indentation appears to be off by 2 here (and in a few other places).\nPerhaps run\n$ composer require friendsofphp/php-cs-fixer\nfollowed by\n$  php-cs-fixer fix --rules=@PSR2 src/Task/ComposerNormalize.php\nand while we are it, also \n$  php-cs-fixer fix --rules=@PSR2 spec/Task/ComposerNormalizeSpec.php\n?\n. "
}