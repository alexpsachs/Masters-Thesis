{
    "mysticatea": "I apologize for too late (I had missed the notification, and found by #2's).\nThank you for the writing.\nI agree, we want to specify tasks by pattern matching.\nI will consider glob-like notations: \"build:*\", \"build:**:*\", ...\nMaybe, the implementation will become one such as that names are replaced : to / and are matched by minimatch.\n. I implemented!\n. I welcome your PR!\nI will look to it that don't miss notifications...\n. I merged #3 \nThis was my first experience of the merge operation on GitHub.\nThank you very much!\n. Thanks a lot!\nI am thankful to you for corrections of README's English also. I'm not used to English...\nNo problem that the dependency to the previous npm-run-all has been removed temporally.\nI will restore it on the next patch after this release.\n. Wow! \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059!\n. I mistook....\n. Thank you for the report.\nI will check it this evening (JST).\n. I reproduced this issue. \nYou are right, when one of tasks clashed, npm-run-all --parallel should kill all tasks.\nBut I wonder, I thought child processes are killed by OS when the parent process exited....\n. I tried to send SIGTERM to remained tasks, but.... https://github.com/npm/npm/issues/4603 :(\n. ~~Next, I will try to emulate npm run behavior without using npm tomorrow.~~\n. I published v1.2.6.\nOn this version, when npm-run-all runs tasks in parallel, if one of tasks exited with an error, npm-run-all kills other tasks.\nnpm does not forward signals to child process, so npm-run-all tries to find child processes of npm, and send a SIGTERM signal to them.\nIts test is here: https://github.com/mysticatea/npm-run-all/blob/v1.2.6/test/parallel.js#L36-58\nPlease try it!\n. Thank you for the report.\nProbably the test tool stops coloring in some use ways.\nIf you use mocha, please try the --colors option, likely this.\n. Thank you for the report!\nPlease see also #7.\n. I guess choke is detecting whether or not stdout is cli, and stdout is piped this tool...\n. Could you try eslint --color and jscs --colors options?\n. Oh...\n. I will try to fix this.\nPlease give me time to investigate.\n. I apologize for my late response.\nI released v1.2.8, using inherit option: https://github.com/mysticatea/npm-run-all/commit/736dee0023630f8b9ce7b72e6ec79af49b35821d\nThanks @jedmao!\n. Thank you for the report!\nI will dig this this evening (JST).\n. Sorry for my delay.\nI published fixed version!\n. Wow, really interesting.\nI am grateful for your proposal.\nI'd like to cooperate to make helpful tool for developers!\n@spion I feel npm run is slow too. So I have been thinking that directly-spawn content of npm tasks. But it's very hard....\n. I like the idea of run-all and npm-run-all.\nThe collection of small programs is definitely good, but package.json#scripts field has small area, so I'd like to keep compact notation of this tool.\n\ncoffee-script - or anything else without curly brackets .. I hate them, mainly because of the german keyboard layout\n\nI was surprised by the location of brace's keys!\nBut this tool has many asynchronous loops, so I'd like to use async/await (an ES stage 3 proposal).\nBTY, I think we should be looking at https://github.com/npm/npm/pull/9970 .\nI'm thinking maybe we should change the separator of Glob-like patterns of npm-run-all.\n\nThough I will add collaborators of this repository, may I add all people who is joining this conversation?\nAnd there are requests about making changes.\n- Doesn't commit changes to the master branch directly.\n- Creates a PR then other members review it.\n. Thank you for reporting!\nI had not noticed built-in tasks.\nAre there other built-in tasks?\n. restart and env seem to be built-in.\nI supported those in v1.2.12, please try!\n. Thank you for reporting.\nnpm-run-all is removing duplication for when glob-like patterns are overlapped.\nBut I think it should not remove duplication of non glob-like patterns.\nI will fix it.\nBy the way, npm-run-all can use arguments, so that can be written:\njson\n{\n    \"development-web-server-delayed\": \"npm-run-all 'delay 9000' development-web-server\",\n    \"delay\": \"node ./code/delay\"\n}\n. Thank you for reporting and providing the test case!\nI will investigate it today (JST).\n. OK, I had not noticed this feature.\nI will add support this.\nPlease wait for a few days to release... (I don't have enough time in weekdays)\n. I released v1.3.0 now.\nI added supporting --:= options. Tests are here.\nPlease try it!\n. I'm sorry.\nI fixed the problem, and republished as v1.3.2.\nI hope you can use the overwriting feature...\n. I believe this feature is working now.\nPlease feel free to reopen if problems have remained.\n. I think that's expected behavior because npm run-script is the same behavior.\ndiff\ndiff --git a/package.json b/package.json\nindex 05d2bd0..bf58b4b 100644\n--- a/package.json\n+++ b/package.json\n@@ -8,8 +8,8 @@\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"npm-run-all test:*\",\n-    \"test-2\": \"npm-run-all test:t\",\n-    \"test:t\": \"mocha --reporter  ${npm_package_config_reporter}\"\n+    \"test-2\": \"npm run test:t\",\n+    \"test:t\": \"mocha --reporter  %npm_package_config_reporter%\"\n   },\n   \"keywords\": [],\n   \"author\": \"\",\n```\nC:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all-bug [master +0 ~1 -0]> npm run-script test-2 --npm-run-all-bug:reporter=nyan\n\nnpm-run-all-bug@1.0.0 test-2 C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all-bug\nnpm run test:t\nnpm-run-all-bug@1.0.0 test:t C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all-bug\nmocha --reporter  %npm_package_config_reporter%\n\nArray\n    #indexOf()\n      \u221a should return -1 when the value is not present\n1 passing (9ms)\n``\n. Hmm, but the purpose is different betweennpm run-scriptandnpm-run-all, so to forward the overwritten state might make sense.\n. Now,npm-run-allcame to transfer overwritten config values to nested calls.\nPlease try it.\n. Oh my God, I apologize for it.\nFor a first aid, I reverted tov1.2.13and published asv1.3.1`.\nMy bad, I had not been having tests for stdin/stdout, so these were not tested in Travis CI.\n. @janl Thank you for investigating.\nHmm, I seem to need changing my strategy that I use process group id to kill child processes.\n. Hmm, I'm trying to add tests for this bug, but it works in Travis CI...\nThis might be related with nodejs/node#3596\n. Yes, you are right.\nDocument is lacking now.\nI will write it this evening (JST).\n. Wow, it's near! (I'm in Shizuoka)\nThank you very much!\n. Thank you very much!\n. Oh, thank you for the issue.\nI'm wondering why my Travis CI is green.\nI will fix this.\n. Hmm, I'd like to use babel-runtime and babel-plugin-transform-runtime because I want to keep clean global scope, but I'm encountering with https://phabricator.babeljs.io/T6644\n. For now, I added import \"babel-polyfill\"; to bin/npm-run-all.js, and I confirmed it works on Node.js v0.10.41.\nI published it as v1.3.4.\nPlease try it.\nI'm sorry for this regression.\n. Thank you for this issue.\nI confirmed npm run --silent foo hides lines which start with npm ERR!.\nIt's really nice!\nI will add the option to npm-run-all.\nEDIT(2016/01/10): I failed to get enough time on this weekend... I will do the next weekend.\n. I added it!\nhttps://github.com/mysticatea/npm-run-all/releases/tag/v1.5.0\n. Thank you for this issue.\nHmm, I'm not sure whether or not npm has the default script of start command.\nnpm said \"missing script: start\".\n```\n$ npm run start\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\Users\\t-nagashima.AD\\nodist\\v-x64\\nodev4.2.3\\node.exe\" \"C:\\Users\\t-nagashima.AD\\nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"start\"\nnpm ERR! node v4.2.3\nnpm ERR! npm  v3.5.0\nnpm ERR! missing script: start\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\eslint\\npm-debug.log\n$ npm start\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"C:\\Users\\t-nagashima.AD\\nodist\\v-x64\\nodev4.2.3\\node.exe\" \"C:\\Users\\t-nagashima.AD\\nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js\" \"start\"\nnpm ERR! node v4.2.3\nnpm ERR! npm  v3.5.0\nnpm ERR! missing script: start\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     https://github.com/npm/npm/issues\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\eslint\\npm-debug.log\n```\nOn the other hand, npm has the default behavior of restart.\n$ npm run restart\n$ npm restart\n$\n. Yeah, npm-run-all should report the error, but not. I will fix it.\n. Or you can use the glob star: dev:**\n. I'd like to recommend a use of watcher in each tool.\ne.g.\n- babel -w option\n- mocha -w option\n- watchify\n- cpx -w option\nAnd npm-run-all can execute those in parallel.\n. Could you explain what is it?\n. Thank you.\nHmm, what is the result of CLI tool?\nIt sounds like pipe: npm run a | npm run b | npm run c\nBut I'm not sure it's possible.\n. OK, I will challenge to add --waterfall option.\n. I'm sorry, I'm busy now.\nI will do this by early next month, but if someone can make a PR, please don't wait for me.\n. This has not implemented yet :sweat_smile:\nI have not gotten enough time for this issue for long time...\n. > npm-run-all -w \\\"get-json-async\\\" \\\"jq 'json selector'\\\" \\\"write-to-file\\\"\n\nand \nnpm-run-all get-json-async | jq 'json selector' | write-to-file\n\nYes, it's the plan.\nnpm-run-all executes npm-scripts from right to left in --waterfall, then connects those by pipe.\n. @clonq Oops, I'm sorry, I missed your comment.\nHm, I think people may be confused by the numbers since the numbers' candidate exists 3 kinds.\n- the index in command line arguments.\n- the index in matched tasks of command line arguments. (we can use pattern matching)\n- the index in the definition in package.json.\n. Thank you for this issue.\nHmm, I have never seen hanging problems caused by nested npm-run-all command.\nCould you share a repo to reproduce it?\nI'd like to investigate this.\n. Thank you!\nHmm, but I cannot reproduce it on my PC.\nCould you tell me your environment?\nThis is mine:\n- Windows 7 64bit\n- Node v4.3.0\n- npm v3.7.5\n- npm-run-all v1.5.1\n- copyfiles v0.2.1\n\n. Okey, I can reproduce it on MINGW64!\n. Hmmm, it's very strange.\njs\n// ...\nconsole.log(\"main 1\")\nlet stdin;\ntry { stdin = process.stdin; } finally { console.log(\"main 1.5\") }\nconsole.log(\"main 2\")\n// ...\nprocess.stdin getter stops the program.\nconsole wrote \"main 1\" then stops.\nI never see \"main 1.5\" and \"main 2\".\n. I typed Enter key once while the program is stopping, then it continues.... :confused: \n. Ah, sorry, I talked about this line.\nWhen npm-run-all hangs, process.stdin seems to never return (then, it will return after I typed Enter key).\nI'm still investigating...\n. This is a small repro code.\nI execute the following command on Git Bash for Windows, then the program will stop at process.stdin of \"child\".\n$ cmd /C=\"node test.js\"\n``` js\n// test.js\n\"use strict\";\nconst name = process.argv[2] || \"parent\";\nconsole.log(\"before stdin:\", name);\nprocess.stdin;\nconsole.log(\"after stdin:\", name);\nif (process.argv[2] !== \"child\") {\n    require(\"child_process\").spawn(\n        process.argv[0],\n        [process.argv[1], \"child\"],\n        {stdio: \"inherit\"}\n    );\n}\n```\n. I reported an issue: https://github.com/nodejs/node/issues/5620\nAlso, I got the idea of a workaround.\nI'm writing it....\n. Done.\n@lostm1nd Thank you for your help!\n. Thank you for this issue, and I'm sorry for the inconvenience.\nI have using some commands of watching (e.g. watchify, mocha -w, cpx -w, ...) and they are working fine.\nI'll investigate this.\n. I confirmed this issue on only MINGW64.\nMmm...\n. OK, this issue caused by the same reason as #24.\nprocess.stdin has never returned in tasks.\n. Thank you for this issue!\nActually, I'm a Windows user and I'm testing npm-run-all on my PC for Windows.\nBut I have never installed Node.js to a path which includes a space, so I had not noticed this problem.\n- Adding AppVeyor CI is nice to me.\n- Is this issue meaning child_process.spawn(command) does not support a command which includes a space?\n. Thank you very much!\nHmmm, but this PR is not working on my PC.\nI'll investigate.\nError: spawn \"C:\\Users\\t-nagashima.AD\\nodist\\bin\\npm.CMD\" ENOENT\n      at exports._errnoException (util.js:856:11)\n      at Process.ChildProcess._handle.onexit (internal/child_process.js:178:32)\n      at onErrorNT (internal/child_process.js:344:16)\n. I'm trying to make a test case for this.\nAnd I guess maybe we can use just npm (without which) if we use {shell: true}\n. Good idea.\n... I'm confusing now....\nThe current master is passing the test for a path which includes a space.\n```\n  [common] npm-run-all\n    should run tasks even if npm exists at a path which includes a space:\nnpm: C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced bin\\npm.CMD\n      \u221a lib version (1727ms)\n      \u221a command version (1705ms)\n2 passing (3s)\n```\n``` js\n    describe(\"should run tasks even if npm exists at a path which includes a space:\", () => {\n        const originalPath = process.env.PATH;\n    before(() => {\n        process.env.PATH = Path.resolve(__dirname, \"../test-workspace/spaced bin/\") + \";\" + process.env.PATH; // eslint-disable-line\n    });\n    after(() => {\n        process.env.PATH = originalPath;\n    });\n\n    it(\"lib version\", () =>\n        runAll([\"test-task:append a\"], {parallel: false})\n            .then(() => {\n                assert(result() === \"aa\");\n            })\n    );\n\n    it(\"command version\", () =>\n        command([\"test-task:append a\"])\n            .then(() => {\n                assert(result() === \"aa\");\n            })\n    );\n});\n\n```\n. Thank you, I pushed it: https://github.com/mysticatea/npm-run-all/tree/fix-for-space\nI tried 4.3.2 and 5.7.1\n. Sorry, I pushed again.\n. I confirmed to reproduce it on webpack-validator.\n```\nC:\\Users\\t-nagashima.AD\\Documents\\GitHub\\webpack-validator [master]> npm run validate\n\nwebpack-validator@1.0.0-beta.6 validate C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\webpack-validator\nnpm-run-all --parallel lint cover build test:configs --sequential check-coverage\n\nnpm: C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced bin\\npm.CMD\n'C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced' is not recognized as an internal or external command,\noperable program or batch file.\n'C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced' is not recognized as an internal or external command,\noperable program or batch file.\n'C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced' is not recognized as an internal or external command,\noperable program or batch file.\n'C:\\Users\\t-nagashima.AD\\Documents\\GitHub\\npm-run-all\\test-workspace\\spaced' is not recognized as an internal or external command,\noperable program or batch file.\nERROR: lint: None-Zero Exit(1);\n``\n. OK, I confirmed to resolve this issue with usingcross-spawn-async.\nThough I'm still not sure why the test works, I will makenpm-run-allusingcross-spawn-async` and release it.\n. @BarryThePenguin I really appreciate your works and suggestions!\n. Thank you for the proposal.\nI appreciate the PR.\nSince I'm not familiar with English, I hadn't noticed that word...\n. Thank you for this issue.\nBut I cannot reproduce this.\nCould you share more info? (node version, npm version, git bash version, ...)\n\n. Thank you for this issue.\nMmm, I don't have WebStorm...\n. Sorry, I had used the trial version before, so I cannot use it now.\n. Oh, thank you for the information!\n. Thank you. \nI got the WebStorm Free Open Source License for npm-run-all.\n1. I tried the npm start of react-slingshot in WebStorm's terminal.\n   Fortunately (or unfortunately), it worked fine.\n   \n2. I checked out a commit of March. But it failed to compile some native modules... :cry:\n@coryhouse Could you reproduce this issue currently?\n. I'm using:\n- Windows 7 (Japanese)\n- WebStorm 2016.1.3\n- Node 6.2.0\n- npm 3.9.0\n. Weird \ud83d\ude13.\nI will continue to investigate...\n. Thank you for this issue.\nCurrently, npm-run-all doesn't have the option to continue on an error.\nI will add it.\n. Thank you for this request.\nSounds good to me.\nI thought --silent-except-task-name similarly with --silent but this is so long. Do you have any idea?\n. Hmm, OK.\nI thought it's good to stick it to silent option since npm prints script names by default, but --print-name seems to be better.\nI will make it within a few days.\n. Thank you for this issue.\nnpm-run-all executes npm-scripts as inheriting stdio. If not so, some libraries to color CLI and tools that are using it would stop coloring CLI (refs #8). So this tool does not touch the outputs of npm-scripts, then npm-scripts send outputs to the shell directly.\n. I'm sorry for late.\nNow, npm-run-all has print-label option which edits the outputs of npm-scripts.\nSo I think we can add the option to aggregate the outputs of npm-scripts and print later.\n. @kentor I'm under consideration now. I'm afraid that there are too many options.\n@rstacruz Maybe it's default behavior of npm-run-all. By default, npm-run-all would abort all tasks when one of them exited with an error.\n. I have a plan to release v2.0.0 with some breaking changes in next week.\n- I will make --continue-on-error option not ignoring errors. It just continues running, then npm-run-all itself exits with a non-zero code if one or more tasks threw error(s).\n- Some options (--print-name, --print-label, --continue-on-error) apply the effect to only the current group of tasks, currently. I will make those options applying the effect to all groups.\nAlso, @anddoutoi 's idea is nice.\nI will do it.\n. I'm sorry for my late.\nI released it.\n. Thank you for this issue.\nYeah, this is a known limitation.\nchalk will stop coloring when stdout is not TTY. npm-run-all cannot keep stdout of child processes as TTY if it adds labels to each line (stdout of child processes becomes pipe).\nI will add this to documents.\nAlso, you can give --color option to tools (e.g. eslint) which are using chalk to revive coloring.\n. I added: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md#known-limitations\n. Thank you for this issue!\nI will replace cross-spawn-async by cross-spawn today (JST).\n. Thank you for this issue.\nHmm, you cannot pass it, now.\nnpm run serve -- --port=4567 is evaluated as npm-run-all --parallel css mm --port=4567 by npm. But we need npm-run-all --parallel css \"mm -- --port=4567\" in order to give the argument to mm.\n. Yeah, I made npm-run-all passing --keegan:port=5000-like arguments to each script in #13.\nYou can use cross-conf-env to use $npm_package_config_ variables on cross platform.\n\nTo go forward this feature, there are some problems:\n- npm-run-all cannot distinguish where did an argument come from. process.argv does not tell me that.\n- If npm-run-all handles unknown options (such --port) as an argument that it pass to scripts, I loose the ability to add new CLI option without a breaking change.\n. Wow, great idea!\nIt's understandable, and it can control destinations of arguments.\nHmm, but it has a problem of compatibility with Windows.\n$1 is a valid environment variable, so it needs to be enclosed in single quotes or be escaped by \\, but I guess it causes a problem on cmd.exe. npm run command is using cmd.exe on Windows.\n- cmd.exe doesn't handle ' as enclosing characters, so run-p 'task1 -- $2 $1' is parsed to [\"node\", \"run-p\", \"'task1\", \"--\", \"$2\", \"$1'\"].\n- cmd.exe doesn't remove \\ since it just a path separator, so run-p \"a -- \\$1\" is parsed to [\"node\", \"run-p\", \"a -- \\$1\"].\nAlternative:\n- !1 - needs to be escape.\n- #1 - needs to be escape.\n- %1 %2 - seems an environment variable %1 % on cmd.exe.\n- &1 - needs to be escape.\n- ^1 - needs to be escape on cmd.exe.\nmaybe ~1 or @1 or /1?\n. Thank you.\nThe idea sounds good to me. :smile: \n. @robario That's about process.argv.\nnode test.js \\$1 is parsed to:\n- On sh, [\"node\", \"test.js\", \"$1\"]\n- On cmd.exe, [\"node\", \"test.js\", \"\\$1\"]\nThere is a difference.\nBecause \\ is not an escape character on cmd.exe. It's just a path separator. But on sh, it's an escape sequence.\n. @robario Make sense, I like this spec and this implement. :heart: \n\n\nHow to escape when a user really want to pass {3} to npm run-script?\n  ...\n\n\nOK as there is a way to avoid.\n\nI recommend to use 1-origin and special index {@} and {*} like shell-script.\nIt can keep npm-run-all's code simple.\n\nI agree.\nGood sense :wink: \n\nPerhaps there are quote problems on Windows.\nI think it should use another library which can interpret metacharactors of cmd.exe and sh instead of shell-quote.\n\nThere seems to be no issue for Windows on shell-quote repo.\nOr, I guess that the same way as npm is no problem hopefully.\nIt's simple: https://github.com/npm/npm/blob/9dd4848bbcbae1c1d8778dc51cd88c8b5d771c71/lib/run-script.js#L174\n\nMy recommendation is the second.\n\nI agree.\nnpm run-script encloses each argument by double quotes.\n\nAnd, upon request, provide a special syntax like ...{1} or {1,raw|noquote} to be able to control it.\n\nThis notation is extensible. :smile: \nAnyway, I think the current implementation is the very good start.\n. > BTW, It\u2019s hard for me to say this but could you please add tests and documentation?\nHaha, OK, I will do. :smile: \nI appreciate your idea and implementation.\n. Thank you for this issue.\nInteresting.\nMaybe --race option solves this.\nWhen one script finished, npm-run-all/run-p kills other scripts.\n. Yup, I will add the option if it solves your problem :)\n. Thank you for this issue.\nHmm, sorry, I don't want to add the feature to wait for specified message.\nI think it's too complex for CLI option.\nThere are some workarounds.\n1. Does the first build before watching.\njson\n   {\n       \"build\": \"tsc ...\",\n       \"watch\": \"npm-run-all build -p watch:*\",\n       \"watch:tsc\": \"tsc -w ...\",\n       \"watch:nodemon\": \"nodemon ...\"\n   }\n2. Wait for built files in nodemon command.\n   https://stackoverflow.com/questions/37466757/how-do-i-run-postmans-newman-in-ci-environment\n   wait-on command can wait for local files.\n. Closing as I don't want to add this feature.\nThank you for making request.\n. On Windows, ' is not an enclosing character. It's the specification of cmd.exe.\nYou need to use double quotes on Windows.\n. run-s 'foo bar' has 2 arguments ('foo and bar') on Windows.\n. Yes. npm run-script is using child_process.exec, then child_process.exec of Node.js is using cmd.exe on Windows...\n. Thank you for this issue.\nCould you tell me your environment? (OS, kind of shell, versions of node, npm, ...)\n. Thanks.\nI tried to measure time and compare in Ubuntu/bash.\nTarget is this 'build:babel'\n```\n$ time npm run build:babel\n...\n...\nreal  0m5.338s\nuser  0m1.755s\nsys   0m1.032s\n$ time npm-run-all build:babel\n...\n...\nreal  0m5.430s\nuser  0m1.859s\nsys   0m1.074s\n```\nI did not confirm that npm-run-all is slow especially.\nnpm-run-all is using npm run. So the overhead of npm-run-all is about 0.1s\n. Ah, sorry, I misunderstood this issue.\n. I'm sorry.\nIs this the request to add the feature to measure time of tasks?\nIndeed, it's interesting.\n. Ops, thank you!\n. Thank you for this PR.\nMmm, I'm not sure that the use case of negative index and range is general enough.\nNpm-scripts is an automation tool similar to Make or Gulp. I think we don't use arguments on those in most cases, so simple pass-arguments feature is enough.\nThough I don't understand that tool completely, in that case, I'd like to suggest to make tasks such release, release:ios, release:android.\n. Thank you for your work.\nI thought \"that is similar to Shell Parameters\" is understandable.\nI close this, for now, let's revisit if more requests come.\n. Thank you for this PR.\nI'm sorry for late response. I was busy for past several days.\nImplement looks good to me.\nIt had backward compatibility if it keeps placeholders when arguments are nothing. So I could release it as a minor version.\nBut this is a breaking change, so it needs a major version.\n. If it removed placeholders when arguments are nothing, it was a breaking change because the behavior of npm-run-all \"foo {0}\" will be changed even if it's before the release of current placeholders feature.\nI'll merge this PR within a few days.\nIndeed, if placeholders remain, it's bad.\n. I'm sorry, just I have been busy.\nMy plan is:\n1. now I'm working on #53. \n2. after I finish it, I will merge this and work on #54.\n3. then I will release 3.0.0.\n. This PR is a breaking change.\nBecause {1} had not been removed before placeholders feature is added.\n. Thank you for this issue!\nSounds reasonable.\nI need to check the direction of standard cancelable promise proposal in order to think proper API.\nhttps://github.com/tc39/proposals#readme\n. Sadly, the standard of cancelable promises has been withdrawn :cry: .\nI will consider my own spec.\nhttps://github.com/tc39/proposals/commit/37e3c5a157e7b3a8211e2e0bb85c9f612b0f04fc. I don't think that the promise.cancel method is the right direction.\nBrowsers use AbortController to abort asynchronous operations. This has been standardized already. ECMAScript is following that, cancellation API is discussing (yes, resumed it!) in https://github.com/tc39/proposal-cancellation. It will be similar to AbortController but not depend on DOM API.. I'm considering to change the path of npm that npm-run-all is using to run tasks.\nCurrently, npm-run-all is using the result of which npm command (via cross-spawn module).\nThe new behavior is that npm-run-all uses npm that NPM_EXECPATH environment variable specified. This environment variable is set by npm automatically in npm run. This implies that npm-run-all uses npm which runs itself. As a side-effect, if it run npm-run-all in yarn run command, npm-run-all will run tasks with yarn.\nIf the NPM_EXECPATH environment variable did not find, npm-run-all keeps the current behavior.\nOne concern, someone has a local-installed npm then npm-run-all is using it to run tasks. In this case, probably this change affects negatively.. I dropped supports for Node 0.x: https://github.com/mysticatea/npm-run-all/releases/tag/v4.0.0. :heart:\n. Thank you for this issue.\nExamples:\njson\n{\n    \"scripts\": {\n        \"watch\": \"run-p watch:*\",\n        \"watch:mocha\": \"mocha \\\"src/**/*.text.js\\\" --watch\",\n        \"watch:tsc\": \"tsc . --watch\"\n    }\n}\njson\n{\n    \"scripts\": {\n        \"test\": \"mocha \\\"src/**/*.text.js\\\"\",\n        \"build\": \"tsc .\",\n        \"watch\": \"run-p watch:*\",\n        \"watch:mocha\": \"npm run test -- --watch\",\n        \"watch:tsc\": \"npm run build -- --watch\",\n    }\n}\njson\n{\n    \"scripts\": {\n        \"test\": \"mocha \\\"src/**/*.text.js\\\"\",\n        \"build\": \"tsc .\",\n        \"watch\": \"run-p \\\"{build,test} -- --watch\\\"\"\n    }\n}\n. Thank you!\n. Thank you for this issue.\nThough I might not understand this issue, I think there are some solutions:\nnpm-run-all -s lint -p build:*\nnpm run lint && run-p build:*\n\"prebuild\": \"npm run lint\",\n\"build\": \"run-p build:*\"\n. Thank you for this issue.\nInteresting.\nI searched cross-platform kill package in npm, tree-kill seems it.\nIf it add the method to the returned value (ChildProcess instance) of spawn, maybe we can offer it to cross-spawn package.... as killTree() or something like.\nIf the offer is rejected, I'm happy to make the package with you!\n. Yes, I agree, https://github.com/IndigoUnited/node-cross-spawn/issues/40 is best.\n\nIf the offer is rejected, I'm happy to make the package with you!\n\nI'm sorry, I had misunderstood this English sentence ( (or would you be ok with me doing it) ).\nJust I thought I might need 2nd plan to make a pakcage like cross-spawn-with-kill.\n. Awesome!\n. Thank you for this issue.\nI have not been aware of that feature of npm. (though npm-run-all supports $npm_package_config_xxx variables since #13).\nI will do.\n. Just now, I released v3.1.0 :smile: \nPlease tell me if there are problems.\nThank you!\n. Thank you for this issue!\nnpm-run-all has the capability of passing arguments. More info...\nYou can enclose script name and arguments by double quotes.\nnpm-run-all -p \"compile:ts:* -- -w\" is meant npm run compile:ts:* -- -w-like.\n. Because I don't have nra package in npm. (I have run-p and run-s)\nI thought a use of conflict-able bin names is not good manners.\n. I'm sorry, closing.. Sorry, it's out of scope for this project.\ncross-env is the tool to define environment variables in cross-platform.\nI really hope that npm improves about the feature of environment variables.\n. Thank you very much!\n. Thank you for this PR.\nOK, I have no objection.\n. Thank you for this issue.\nThe check is used for tests.\nIt's the official way to distinguish the entry file: https://nodejs.org/api/modules.html#modules_accessing_the_main_module\n. That check was needed in order to measure coverage.\nI'm using nyc now, so I might be possible to remove the check.\n. Thank you for this issue. And I'm sorry for my slow response.\nyarn is fast and convenient, yes.\nI'm hoping https://github.com/yarnpkg/yarn/issues/941 to be implemented.\nI'm not sure that this feature is in the scope of npm-run-all.\nBut if I add it, it may be --exe-path=yarn to replace npm by the argument.\n. @arxpoetica Oh, thank you for the report. Granted it's confusing, but I don't have the control of that package. I'm considering whether npm-run-all's README should mention it or not.\n@odinho Hmm, can I know what tool is executing npm-run-all? If yes, npm-run-all can use the tool which is executing itself to execute scripts. (I'm not an expert of shell...)\n. I'm considering to use NPM_EXECPATH environment variable: https://github.com/mysticatea/npm-run-all/issues/52#issuecomment-264068108\nyarn sets the path of yarn to the environment variable.. Now npm-run-all uses NPM_EXECPATH: https://github.com/mysticatea/npm-run-all/releases/tag/v4.0.0. NPM_EXECPATH=$npm_execpath is unnecessary since v4.0.1 (#84).. Thank you for this issue.\nIt should be possible. You can use argument placeholders.\nFor example:\njson\n{\n  \"scripts\": {\n    \"from-cover\": \"run-s \\\"cover -- {@}\\\" \\\"archive -- {@}\\\" --\",\n    \"cover\": \"node . cover\",\n    \"archive\": \"node . archive\"\n  }\nrun-s \"cover -- {@}\" \"archive -- {@}\" is evaluated to npm run cover -- {@} and npm run archive -- {@}, then the {@} will be replaced by arguments preceded by --.\n. I added this: https://github.com/mysticatea/npm-run-all/releases/tag/v4.0.0. Thank you for this issue.\nMaybe:\n$ npm-run-all -p A B -s C\nOr:\n$ run-p A B && npm run C\n. @junejie Yes. Above examples run C after both A and B are finished. Services don't finish.\nI guess you can use wait-on CLI command.\njson\n{\n    \"scripts\": {\n        \"test\":        \"run-p --race test:*\",\n        \"test:server\": \"node lib/server.js\",\n        \"test:mocha\":  \"wait-on http://localhost:3000/ && mocha \\\"test/*.js\\\"\"\n    },\n    \"devDependencies\": {\n        \"mocha\":       \"^3.2.0\",\n        \"npm-run-all\": \"^4.0.0\",\n        \"wait-on\":     \"^2.0.1\"\n    }\n}\nThe wait-on command waits http://localhost/ to be prepared, then it finishes.. Yes, thank you.. Thank you for this issue, and I'm sorry that I delayed.\nnpm-run-all is not handling SIGINT signals on the application layer.\nThe signals are supposed to send to child processes directly as well.\nSo some processes which are handling SIGINT signals might be in your npm-scripts.\n(I don't have macOS, so I cannot confirm the behavior). At least, on Windows, cmd.exe needs ctrl+c twice to kill it.. Wow, thank you for contributing!\nLooks good to me.\nI will merge it within a few day.. Thank you for contributing.\nHowever, unfortunately, this is out of scope for npm-run-all.\n\nA CLI tool to run multiple npm-scripts in parallel or sequential.\n\nnpm-run-all handles npm-scripts (a.k.a. npm run-script command).\nBoth npm run-script env and npm run-script restart exist always, so npm-run-all has the exceptions of those.. > Also why restart and env are exception when stop or start are not?\nnpm-run-all is a tool to execute npm run-script command.\nBoth npm run-script env and npm run-script restart work always.\nBut other tasks require the scripts field of package.json.. Yes, tests are really slow. This CI has spent 2.5 hours.\nThe cause is 3.\n\nthat tests create many processes; for example, npm run a is executed by sh then #!/usr/bin/env node executes env then it executes node with npm/bin/cli.js then it executes sh with the script a then the script would use node.\nTests are using timer to verify the order of tasks and the cancel of tasks.\n\nAlso many processes import babel which is heavy.. There is the plan to improve this.\n\n\nUsing NPM_EXECPATH environment variable would reduce intermediate processes of npm run a.\n  I will use it on npm-run-all@4.0.0.\n\nnpm-run-all@4.0.0 will drop supports of Node.js 0.10/0.12, so it would be able to stop using babel.. https://travis-ci.org/mysticatea/npm-run-all/builds\nI dropped supports for Node 0.x and I stopped using babel to transpile. Then it made faster tests.\nSo I'm closing this issue.\n\nThank you!. Yes, this repository does not include the build result. If you want to use it without npm install npm-run-all, you need to run npm run build.\nI'm closing this issue since I intent that this module is used via npm install npm-run-all.. Sorry, those new versions don't support Node 0.x, so I had not upgraded those.\nI'm working on #52, then I upgraded those in https://github.com/mysticatea/npm-run-all/compare/2ec9889658793362de4d21c043c8a5010d17a95d...58f9d4c9585c396e44e48ef88b63db37386b5073\n. Thank you for contributing.\nCould you rebase to resolve conflictions?. Thank you!. Thank you very much!. Thank you for contributing!\nI had not known it.\nThank you very much!. Note: it needs to work in cmd.exe as fallback to basic colors.. @Chalarangelo Thank you very much! Yes, I'm worried how the colors display in cmd.exe. The npm run-script command uses cmd.exe internally on Windows.. Thank you for this issue.\nHowever, I don't want to add any option for this for the following reasons:\n\nin-publish is very small CLI, so it's more proper than npm-run-all to be included in dependencies. (npm-run-all is large module relatively.)\nThat option is going to be a short life because the problem of prepublish script is going to resolve on npm@4.. Thank you for this report.\n\nIt's a bug, I will fix it.\n\nI was wondering if maybe a new version can be released that adds support for https://www.npmjs.com/package/subarg which might make it easier to group stuff.\n\nPersonally, I'm unfamiliar with the brackets in CLI parameters. I prefer below or something like for now.\n$ run-s a b && run-p --race c d\n\nOf course, I'm not oppose to support for the brackets if it does not cause a breaking change, but I would not work for it actively.. Thank you for this issue.\nGranted, variables would be useful since environment variable's notation are different between platforms.\nHowever, I don't think good if we write the scripts that npm run-script command cannot execute to the scripts field of package.json.\nI recommend to use the official config field of package.json (and cross-conf-env module for cross-platform).. Thank you for this request and implementation!\nHmm, but the option looks cryptic to me.\nI think nested options make less readability since CLI arguments does not have flexible structure, it's just linear.\nI'd like to separate the --mute option.\n$ npm-run-all --serial a b c --mute b\n\nThis will mute the task \"b\".\nAlso isn't implementation enough if it set null (\"ignore\") to the stdout and stderr of spawn's option?. Thank you for the question.\nAt first, npm-run-all script-one script-two and script-one & script-two is pretty different. The npm-run-all script-one script-two is equivalence to npm run script-one && npm run script-two. In short, npm-run-all is a tool to run multiple npm-scripts. In addition;\n\nYou can use glob-like pattern matching. E.g. npm-run-all build:**. This allow you to simplify npm-scripts.\nYou can run multiple npm-scripts in parallel on cross platform. E.g. npm-run-all -p watch:js watch:css. This is almost equivalence to npm run watch:js & npm run watch:css, but works on Windows which doesn't support the & operator, as well.\nMaybe --race option is useful for tests. E.g. npm-run-all -p -r test-server test runs the test server and test in parallel, then it will kill the test-server automatically after the test completed.\n\nDocuments is here: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md. Thank for this issue.\nThis is npm matter.\nThere are 2 installation style, local and global, on npm.\nIn the global installation case, npm-run-all will be installed into the place which PATH environment variable includes. You can use npm-run-all everywhere, but you cannot use different versions for each project and it's relatively difficult that your team use the same version of npm-run-all.\nIn the local installation case which you did, npm-run-all will be installed into the your project's node_modules directory. PATH environment variable does not include there, so you have to use ./node_modules/.bin/npm-run-all (or $(npm bin)/npm-run-all) to run npm-run-all. But you can use different versions of npm-run-all for each project and your team can use the same version of npm-run-all easily via package.json. And you can use npm-run-all command in npm-scripts even if it's local installed because npm adds ./node_modules/.bin to PATH before npm run-script command.\nSee also: https://docs.npmjs.com/. Thank you for this issue.\nHowever, I'm using Windows 7 Pro and I could not reproduce it.\nCould you tell me the repro steps?\n\npackage.json:\njson\n{\n  \"name\": \"sandbox\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"test\": \"run-s a\",\n    \"a\": \"node -p \\\"process.env.npm_execpath\\\"\"\n  },\n  \"author\": \"Toru Nagashima (https://github.com/mysticatea)\",\n  \"license\": \"MIT\"\n}\nCommand:\nconsole\n~\\Documents\\GitHub\\sandbox> yarn run test\nyarn run v0.24.4\n$ run-s a\nyarn run v0.24.4\n$ node -p \"process.env.npm_execpath\"\nC:\\Users\\t-nagashima.AD\\nodist\\bin\\node_modules\\yarn\\bin\\yarn.js\nDone in 0.38s.\nDone in 1.23s.\n~\\Documents\\GitHub\\sandbox>. Thank you. I'll check it.\n.... yarn@0.24.5 does not seem to be published to npm.\n```console\n\nnpm show yarn dist-tags\n{ latest: '0.24.4', rc: '0.25.2' }\n``. Hmm, I could not reproduce it withyarn@0.24.5` on PowerShell and cmd.exe on Windows 7.\nI'll check on Windows 10 later.. Thank you for the information.\n\nYeah, Git Bash of Windows is super problematic about stdin/stdout.\nI'm guessing related to https://github.com/nodejs/node/issues/5620.\nPlease try defining the following alias. (This is similar to https://github.com/nodejs/node/issues/5620#issuecomment-262887207)\nconsole\n$ alias -p yarn=\"winpty yarn.cmd\". Thank you.\nActually this is a bug of Node.js or MinGW.\nThe process.stdin getter of Node.js hungs up on specific cases if you are using MinGW.\nwinpty is the workaround of MinGW side.\nI'm not sure whether I can do something in npm-run-all.. I apology that I have overlooked the notification of this issue.\nThank you for the report.\nInteresting. I have not been aware of the limitation about this issue. The error message \"Error: EAGAIN: resource temporarily unavailable, write\\n\u2716 Processing stdin\" indicates there is the problem around the piping in the script`. I need to investigate more.. Thank you for this issue.\nHowever, probably this is the problem of yarn of the docker container.\nnpm-run-all uses the program that npm_execpath specified, so if npm_execpath says a false location then npm-run-all cannot work properly. The npm_execpath is set by yarn itself in such yarn run command. In your case, yarn sets /bin/yarn.js to the npm_execpath but it does not exist.\nAn workaround, you can overwrite the location of yarn:\n$ npm-run-all -p start:* --npm-path /usr/local/bin/yarn\n\n. Yeah, I believe yarn run/yarn start command will overwrite the environment variable.. Thank you very much!. You are doing that it runs 4 shell commands npm-run-all sass and werun and --parallel nodemon ./bin/www and watch:sass in parallel.. Thank you for the contribution!\nI'm sorry that I overlooked this notification.\n. Thank you for contributing!\nI'm sorry for my late response. I'll take a look later.. Thank you for your patience.\nThe implementation looks great to me.\nCould you add the document about this feature? There are .md files there: https://github.com/mysticatea/npm-run-all/tree/master/docs\nI'm interested in parallelizing tests. But I think that it should be separated from this PR.. Thank you very much!. Thank you for the report. I'm sorry for I have overlooked the notification.\nI confirmed it.\nI will fix it.. The cause of those warnings was the piping to process.stdout and process.stderr from child processes of tasks. Those listeners are going to be removed eventually, but there are many listeners while running in parallel mode.\nDefinitely, CLI commands should ignore those warnings.\nHowever, I don't think Node.js API should change process.stdout's maxListeners property since it's a global state. I'll document it.. Thank you for this issue.\nThis is working as expected. npm-run-all is using glob-like pattern matching, but uses : as the delimiter instead of /. You can use global star ** to run all sub-sub tasks.\nSee: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md#glob-like-pattern-matching-for-script-names. This is not reproduced on my Windows machine. :thinking: . Thank you!\nI will try to add the test for this.\nThat Appveyor's failing is #107.. Thank you for this issue.\nAre you talking about --print-label option?\nhttps://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md. Thank you for this PR.\nHowever, because of npm has a ton of commands, I don't think that npm-run-all should handle only npm install as special.\nI think that this is out of scope because npm-run-all is a tool to do npm run command with multiple tasks, but I can accept if there is a proper way to specify commands except run. The way should be that users can distinguish between npm run and other commands easily.. I apology that I'm late to respond.\nAbout the command:install looks, I'm afraid because it runs npm run command:install currently. npm-run-all recommends to use : as separators (Glob-like pattern matching for script names).\nThe --command install looks nice to me, but it's long a bit.\nHmm, how about :install? It's still a breaking change, but it's shorter and distinguishable. I can image absolute path to specify outside of run command from the :install syntax.. Thank you for this issue.\n--aggregated-output depends on a number of outputs and the memory of your machine since it accumulates all outputs then prints those after all tasks have done.\nIf the memory-streams package is using superfluous memory, I should check it and replace it.. I apology that I'm late to check this PR.\nI will do within a few days.. Thank you for the report.\nHmm, I could not reproduce it.\n```bash\n~\\dev\\sandbox> npm run a\n\ntalk@ a C:\\Users\\t-nagashima.MSS\\dev\\sandbox\nnpm-run-all a:*\ntalk@ a:a C:\\Users\\t-nagashima.MSS\\dev\\sandbox\necho a\n\na\n\ntalk@ a:b C:\\Users\\t-nagashima.MSS\\dev\\sandbox\necho b\n\nb\n~\\dev\\sandbox> yarn a\nyarn a v0.24.5\n$ npm-run-all a:*\nyarn run v0.24.5\n$ echo a\na\nDone in 0.08s.\nyarn run v0.24.5\n$ echo b\nb\nDone in 0.08s.\nDone in 1.22s.\n``. Oh, I can reproduce it with the latestyarn. I will investigate more..Yarnseems to handle--fooas a task name inyarn run --foo a. This behavior is different to npm.. I have publishednpm-run-all@4.1.2`. It should fix this problem.. Oh, I'm sorry. I have overlooked this issue.\nnpm-run-all is a tool to execute multiple npm run-script. Every npm run-script is executed in each child process. So cd in a script does not affect other scripts.\nYou have to do cd in the parent process: cd ./foo && run-s a b c.. Oh sorry. this PR LGTM but I'm busy now. Please wait more a few days.... Thank you for the question.\nIt executes tasks in definition order in package.json.\n. Thank you for this issue.\nYou seemed to fail to install. Please try to:\n\nRe-install npm-run-all.\nIf it's still failing, remove npm's cache and re-install npm-run-all.\nIf you are using a directory which is synchronized to cloud storage (e.g. Dropbox), disable the sync and re-install npm-run-all. As far as I know, Dropbox sync breaks node_modules directory.. Anyway, this looks a problem in npm.\nIf you could not solve the problem, I recommend opening an issue on https://github.com/npm/npm.\n\nThank you.. I disagree. \n\nI'm using this package on Linux while a long time. As you know, many CI services (e.g. Travis CI) are using Linux.\nYour suggestion is not related to path resolving. require(...)() is just a function call of the imported function. It's the same as var f = require(...); f();.\n\nThis package never depends on graceful-fs v1.2.3. See package.json. Also, the package is not related to Node.js path resolving.. Could you try node node_modules/npm-run-all/bin/npm-run-all lint:*? If it works, this is a problem of npm because to create .bin/npm-run-all correctly is the responsibility of npm. If it does not work, I guess some files are lacking for some reason. It also is an installation problem.. I guess your intention is:\n\n\nenclose the text by double quotes:\n\"install-msg:globals\": \"echo \\\"\\n\\n==============================================\\n\\n Installing Global NPM packages... \\n\\n==============================================\\n\\n\\\"\",\n\n\n\nOr use multiple echo commands\n\"install-msg:globals\": \"echo \\necho \\necho ==============================================\\necho \\necho  Installing Global NPM packages... \\necho \\necho ==============================================\\necho \\n\",\n\n\n\nNpm scripts are executed with sh, so line breaks mean the end of command.. Hmm. echo command doesn't seem cross-platform safe.\nI guess you can use \"node -e \\\"console.log('hello')\\\"\" instead if you want to use the script on cross-platform.. > But node -e console.log('\\n\\n==============================================\\n\\n Installing Local NPM packages... \\n\\n==============================================\\n\\n') failed with\nIt's like break problem as well :)\nYou have to use \\\\n to give \\n to Node.js.\n\nAlso, do you think this package makes it safer to use echo?\necho-cli\n\nThis package does not touch how to run the script. This just calls npm run foo. So if you want to improve npm-scripts, please open issues on npm/npm repository.\nEDIT: echo-cli looks nice to me.. Thank you!. Thank you for this issue. Apology for the slow response.\nThe concurrently-like option seems nicer. Because npm-run-all allows glob-like patterns to specify task names (e.g. build:\\\"build:* -- --watch\\\"), the label can apply to multiple tasks.. Thank you for this issue.\nI know that npm-run-all is slow. However, I'm not active to clone the npm run-scripts behavior because it's pretty complex -- pre/post scripts, some embedded scripts (env/restart,...), ton of environment variables that npm set, and multi-platform.. Thank you for this issue.\nTo run a server then run tests, I recommend a use of wait-on command. \nThis example may help you: https://github.com/mysticatea/npm-run-all/issues/72#issuecomment-272430044. Thank you for the PR!\nI re-run the CI builds and confirmed success. npm-run-all tests have a problem that those are whimsy.\nI will check this PR within the weekend (sorry I'm pretty busy now).. About tests, it's timing problem between parent and child processes. Especially, Node.js doesn't seem to wait for the actually dead of child processes after kill (Or the change of a file appeared for other processes after child process is dead).. Uga, I apologize that I have lost this in my busy. I will do.. Thank you for this issue.\nHowever, I could not reproduce it.\n```\n~\\dev\\sandbox> npm run build -- --foo bar\n\nsandbox@1.0.0 build C:\\Users\\t-nagashima.MSS\\dev\\sandbox\nnpm-run-all \"build:a -- {@}\" -- \"--foo\" \"bar\"\nsandbox@1.0.0 build:a C:\\Users\\t-nagashima.MSS\\dev\\sandbox\nnode index.js \"--foo\" \"bar\"\n\n[ '--foo', 'bar' ]\n```\nWould you provide your environment and the actual output of npm?. I agree that it's confusing behavior of npm run-script. But I guess it may be for backward compatibility.. Thank you for this issue.\nHowever, I couldn't reproduce it.\nPlease open issue on the yarn's repo since it looks a yarn's problem.. Looks like a npm's problem.\nnpm-run-all doesn't depend on hoek both directly and indirectly, but the error message is about hoek package.. Thank you for this PR, and I'm sorry for overlooking.\nWell, we cannot remove 4.x tests without major version bump. I don't think I make a major version up soonly.. I updated CI settings on 5017a8879af4afead7a87d378ac0cca5393e7e43. Thank you for the suggestion!. Wow, thank you for the pointing.. I have removed ps-tree in this dependency and published 4.1.4. (But 4.1.4 can be buggy because it does not kill descendant processes). The fkill's tree option looks supported only on Windows. I'm considering.. I will try pidtree package and publish fixed version ASAP.. I have published 4.1.5. Thank you!. Thank you for the report.\nBut I have already published v4.1.5 to address it.. Thank you for the report.\nHowever, this is a duplicate of #149 and #150.\nI have already published v4.1.5 to address it in the last week.. Thank you for the report.\nHowever, this is a duplicate of #149, #150, #152, and #153.\nI have already published v4.1.5 to address it in the last week.. Thank you for this proposal.\nHowever, I don't accept this proposal because npm-run package which has npm-run CLI command has existed already. Users cannot control the confliction of CLI commands, except uninstalling either package. About run-s and run-p, we can use those because both packages are mine.. Thank you for the report.\nBut this package is to run npm-scripts, it doesn't guarantee to work fine on other tools.\n\nThis used to work in previous versions.\n\nWhat do you mean? This behavior has not been changed since v1.5.0 (Jan 2016).\n. npm-run-all finds the command which runs npm-scripts by the environment variable NPM_EXECPATH. The problem sounds that lerna sets NPM_EXECPATH but doesn't compatible with npm run command. Would you confirm that?. OK, so I recommend to open an issue on lerna repo. I'm closing as not problem in this repo.. The problem is that lerna sets a command which is not compatible with npm to NPM_EXECPATH.\n\nThis behavior was changed in npm-run-all and it is not clear why.\n\nSee the release note: https://github.com/mysticatea/npm-run-all/releases/tag/v4.0.0. > the release notes does not explain why you add --silent explicitly.\nBecause that behavior has not been changed since v1.5.0.\n\nWhy does npm-run-all decide this justifies a flag in the command line?\n\nThere are two steps:\n\ncollect options from CLI and environment variables then merge those into an object. (to be sure, it doesn't read .npmrc. Probably lerna reads .npmrc and set it to environment variables.) This happens in CLI command implementation.\nto give the child process the options object, some options are passed as environment variables, some options are passed as CLI options. This happens in Node.js API implementation that the CLI uses. At this time, the Node.js API doesn't know where options.silent value came from.. Thank you for this issue.\n\nI have not tried such a many tasks. In general, npm-run-all spawns npm run-script xxx process and the spawned npm run-script xxx process spawns a sh process with the script body of xxx. That means there are 3 processes at least for each task. I don't think if that has good performance.. Thank you for this issue.\nHowever, this is working correctly. The log you saw is the log of npm run ts:silent rather than run-s --silent typecheck which is silent. . No. It cannot affect how the parent process works.. Would you try \\\"ng -- build --prod\\\"?. run-s \"ng build --prod\" is equivalent to npm run ng build --prod and npm run command doesn't have --prod option. You have to use npm run ng -- build --prod to pass the argument to the script.. This file can be used as Node.js library also.\nSo I think that just importing a Promise object is better than writing to global scope.\nBut es6-promise.Promise seems to be the polyfill object even if the native object exists.\nUmm...\n. Should is this position >= 1?\n. Sounds good, thank you!\n. Thank you for contribution.\nThe idea sounds good to me.\nCould you use Map instead of the empty object? I guess that some task names such as toString don't work on this implementation.. ",
    "k88hudson": "Thanks, I will try it out :+1: \n. I'm happy to submit a PR, just wanted to hear your thoughts about this first\n. \u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f :star: \n. Haha sorry, I am learning Japanese but I'm not very good at it yet :P\n. Hey everyone, awesome to see this coming together :+1: npm scripts for the win!\nPersonally I see two separate but related goals here;\n1. To run tasks in parallel in a way that works on all platforms\n2. To provide a better syntax for organizing and running npm scripts or groups of npm scripts\nObviously Windows compatibility is a goal for both 1 and 2, so some code/ideas could be shared, but I would prefer to see them remain separately focused on their respective goals.\nIf anyone is interested, I know some people on npm/who work on the cli and I would be happy to reach out if they have suggestions, or if any of you want to provide some feedback.\nThanks so much @keithamus for opening this issue and for linking to everyone's projects, you are all awesome :dancer: I'm giving another talk on npm scripts at View Source conf in November, and I can tell you more and more people are getting excited about doing front end automation this way thanks to your work and blog posts :smile: \n. In fact, I will definitely bring this up with the folks at npm. Thanks also @mysticatea for writing this :)\n. ",
    "JamesMessinger": "FYI - concurrently does this via a --kill-others argument\n. Yeah, I'm confused by that as well.  I thought the child tasks would automatically get killed, but they don't.  \nIt might be worth looking at the source code for concurrently, since I've noticed that when I force-quit concurrently (via Ctrl+C), it does kill the child processes.  Maybe it has something to do with how the processes are launched?\n. It sucks that npm has that issue.  I wonder how soon they plan to fix it?\nThanks for looking into this.  I appreciate it!\n. Awesome!  Testing it right now....\n. Seems to work pretty well.  It's not 100% perfect, but that's to be expected, given the hoops you're having to jump through. \nThanks!!!\n. ",
    "catamphetamine": "@mysticatea  Wow, really, that helped mocha, and webpack too. Thanks.\n. My workaround for those who google - duplicating tasks\nhttps://github.com/remy/nodemon/issues/709#issuecomment-153893668\n. @mysticatea oh, the arguments feature is good, i'll use it in my code instead, thanks\n. @mysticatea thx for the fix. It works now with duplicates.\nThe initial suggestion didn't work\n{\n    \"development-web-server-delayed\": \"npm-run-all 'delay 9000' development-web-server\",\n    \"delay\": \"node ./code/delay\"\n}\n(the delay script didn't even run)\nbut it doesn't matter since duplicates are working now\n. ",
    "jedmao": "Doesn't fix non-mocha commands though. For example, I'm running istanbul check-coverage and the colors are lost.\n. Same problem here >_<\n. @mysticatea passing { stdio: 'inherit' } to the spawn command options gives you colors.\n. ",
    "MylesBorins": "repo in question\n--> https://github.com/TheAlphaNerd/engine-seed/tree/update-bin\n. jscs has no --color or --colors options\nit only has an option to turn colors off -n\n. ",
    "trevordmiller": "@mysticatea Awesome. Thank you!\n. ",
    "luv2code": "I'm okay with unifying into this project.\n. ",
    "paulpflug": ":+1:\n. How about we make 2 packages. the first focusing on sequential and parallel shell execution (name maybe 'parallelshell') and the second focusing on launching npm tasks (grep from project.json or similar)) while depending on the first for execution (name maybe 'npm-run')\nI think that would be super transparent for the users and limits the necessary flag count.\n. I thought about it a while, here is what I want:\n- one project - three cli's \n- the commands should be short and make no flags necessary in default mode\n- run-seq / run-para for running whatever in parallel or sequential\n  (mainly for use in package.json, e.g.: {\"scripts\":\"{\"first\":\"run-seq 'echo 1' 'echo 2'\"})\n- run-npm as a drop-in replacement for npm run with wildcards as a main feature. On console: run-npm watch:* would call all scripts starting with watch: in parallel. Calling run-npm watch should act as a shorthand for npm-run watch:* (yes I really want to save that line \"watch\":\"Call all other watches\" in package.json)\n  Sadly npm-run is already taken.\n- advanced scripts featuring placeholders (example for package.json: {\"adv-scripts\":\"first\":\"ENV=%1 echo %2\"}, would be called this way npm-run first VAR1 'hello world')\n  This will make it possible to create meta package.json, which holds scripts for several other projects: {\"adv-scripts\":\"git:push\":\"cd %1 && git push\"}\n- coffee-script - or anything else without curly brackets .. I hate them, mainly because of the german keyboard layout ;)\nIn my eyes a unsolved problem of all project-processing methods is to handle several projects. The worst case: Say I researched recently and found a new postprocessing tool far better than the other tool I used in 5 of my projects and now I want to migrate...\nBut even simple tasks like \"bump the version of 4 projects and push them to github\" is difficult.\nMaybe we could collect what all others want and start putting a feature list together - so the development can start :smile: \n. hey,\nBecause I needed more functionality, I created a tool yesterday. Now it is finished with unit tests but without much documentation yet.\nHaven't run the tests on windows, though.\nSo here is the spawn wrapper better-spawn with all the things I learned from parallelshell.\nAnd here the script-runner\nUsage\n```\nusage: run [ [cmd..]..]\noptions:\n-h, --help         output usage information\n-v, --verbose      verbose logging (not implemented yet)\n--silent       suppress output of children\n\n-t, --test         no runing only show process structure\n-s, --sequential   following cmds will be run in sequenz\n-p, --parallel     following cmds will be run in parallel\n-i, --ignore       the following cmd will be ignored for --first, --wait and errors\n-f, --first        only in parallel block: close all sibling processes after first exits (succes/error)\n-w, --wait         only in parallel block: will not close sibling processes on error\n-m, --master       only in parallel block: close all sibling processes when the following cmd exits. exitCode will only depend on master\n-f, --first        close all sibling processes after first exits (succes/error)\nrun also looks in node_modules/.bin for cmds\nrun-para is a shorthand for run --parallel\nrun-seq is a longhand for run\nrun-npm will match cmd with npm script and replace them, usage of globs is allowed\n```\nrun-npm currently uses minimatch, but I'm not fully statisfied\nI thought about templating of scripts:\nSay we have a script \"test\":\"mocha :'1'\"\nnpm run test # would run mocha\nnpm-run test # would run mocha\nnpm-run test(--watch) # would run mocha --watch\nIt would be not to hard to implement, but I can't think of a use case currently\n. I think we can agree this is a difficult topic.. we only have 1 line, no syntax highlighting and ' as an indicator for nesting.\nWith npm run we can get hold on the 1 line and nesting problem. But with the syntax we have a clear tradeoff between verbosity and clarity. I think the best way is to offer both possibilities..\nI'm strongly for ordered parameters as &&, || and all other also have a significant order and everything else would be confusing.\nSo for you example, I think a desireable syntax would be:\nrun-npm clean initEmail buildAndEmail minify --any emailDev emailMgrs --on-error pkgErr emailDev\nwith all nested commands hidden behind own npm scripts.\n. ",
    "spion": "Yeah, I just figured out https://github.com/mysticatea/npm-run-all/issues/6 :(\nI was thinking of writing an alternate implementation that uses the data from package.json but doesn't rely on npm run at all - especially given that npm run seems to be so slow (or is it just slow for me?)\nIn any case, I agree it would be best if the effort was concentrated, but personally I'm not sure what the direction should be...\n. ",
    "royriojas": ":+1: happy to merge, help or document :), I guess #6 is an issue that most of us have faced at some point, probably the most important thing a library that runs several things in parallel should have.\n. ",
    "keithamus": "I would definitely say spawning from the package.json, rather than npm run is a good idea. parallelshell has been working on solving the problem of properly killing subshells and the processes running in them, and we have https://github.com/keithamus/parallelshell/pull/30 which is going pretty well thanks to @paulpflug. I think we could take this and turn it into a PR for npm-run-all. \nNot depending on npm run as an executable also opens us up to the ability to have npm-run-all run arbitrary scripts, not just npm ones - perhaps with a -e flag (e.g. npm-run-all build:* --sequential -e 'echo \"done!\"').\nAlso I think it'd be a good idea to see how npm run itself works. Here's the run-script command which mostly builds up which scripts to run (e.g. pre and post prefixes) - L159-167 build up the commands to run, and L166 is what each command runs (i.e. it calls the lifecycle command with the package json, command, working directory and true). lifecycle.js is basically all of the execution magic, including making all of the env vars, building the shell string and actually running the command. When it all comes down to it, all npm run is essentially doing export ${lots_of_env_vars}; sh -c ${npm_script_string}.\nI would be interested in @othiym23 and @isaacs opinions about possibly modularising some of this - so we can all re-use the same piece of code for execution logic. They may well also have some insight for us as they wrote most of npm's lifecycle.js :smile: (although most of that code is 5 years old and so I'd understand if they've forgotten).\n. I agree, that sounds like a good idea.\n. Hey @k88hudson! Thanks for the kind words. I definitely think feedback from the peeps at npm would help here.\nAside; @k88hudson I watched your (absolutely excellent) npm talk at Nordic.js which led me to npm-run-all and prompted this issue. Small world :earth_asia:!\n. > - one project - three cli's\n\n\nthe commands should be short and make no flags necessary in default mode\nrun-seq / run-para for running whatever in parallel or sequential (mainly for use in package.json, e.g.: {\"scripts\":\"{\"first\":\"run-seq 'echo 1' 'echo 2'\"})\n\n\nOn the surface this idea seems good; because having a mix of flags is a bit of a pain, and a bit hard to disambiguate. However when you consider the power of npm-run-all chaining multiple commands, you can see that npm-run-all currently does a better job:\n``` sh\n$ npm-run-all --sequential a b c --parallel d e f --sequential g h i\nTo do this with three commands:\n$ run-series a b c && run-parallel d e f && run-series g h i\nOr\n$ run-series 'run-sequential a b c' 'run-parallel d e f' 'run-sequential g h i'\n```\nI have some tasks in a project right now which are mix of sequential and parallel (build all the things, then watch the output with several tools and serve html all at once). npm-run-all facilitates this in - what I think - the easiest way possible.\nHaving said that I think it could end up being pretty hairy having command line, npm, sequential and parallel all wrapped in one lib. How about the following instead:\n- One project, two clis\n- The two commands are run-all and npm-run-all\n- run-all takes a set of strings, which are shell commands, and --series and --parallel commands which behave much like npm-run-all does now.\nsh\n  $ run-all 'echo hello' 'echo world'\n  hello world\n  $ run-all 'sleep 1 && echo hello' 'echo world'\n  hello world\n  $ run-all --parallel 'sleep 1; echo hello' 'echo world'\n  world hello\n  $ run-all 'echo 1' --parallel 'sleep 2; echo 2' 'sleep 1; echo 3' 'echo 4'\n  1 4 3 2\n- npm-run-all works pretty much as it always did; it matches the behaviour of run-all except it calls aliases for npm-scripts:\nsh\n  $ npm-run-all test:* build:* --parallel watch:*\n\n\nrun-npm as a drop-in replacement for npm run with wildcards as a main feature. On console: run-npm watch:* would call all scripts starting with watch: in parallel. Calling run-npm watch should act as a shorthand for npm-run watch:* (yes I really want to save that line \"watch\":\"Call all other watches\" in package.json) Sadly npm-run is already taken.\n\n\nI like the idea of npm-run watch defaulting to an alias for npm-run watch:* but we should make sure it is overridable. I imagine the logic to be a bit like this:\nif packageJson.watch\n  run packageJson.watch\nelseif !packageJson.watch && packageJson.watch:*\n  run --series packageJson.watch:*\n\n\nadvanced scripts featuring placeholders (example for package.json: {\"adv-scripts\":\"first\":\"ENV=%1 echo %2\"}, would be called this way npm-run first VAR1 'hello world') This will make it possible to create meta package.json, which holds scripts for several other projects: {\"adv-scripts\":\"git:push\":\"cd %1 && git push\"}\n\n\nI'm going to disagree with this on a few points:\n- I think package.json#config is sufficient for metadata (although the environment variable is a little on the verbose side for my liking: $npm_package_config_<thing>).\n- If a package is so complex that it requires many config vars, it should probably be a script.\n- I think we need to be careful about exactly what we're implementing here. To me - the core feature set is \"run commands in parallel in a cross compatible way\" and \"use that as a basis to quickly orchestrate a set of npm scripts\". IMO anything else is scope-creep.\n\n\ncoffee-script - or anything else without curly brackets .. I hate them, mainly because of the german keyboard layout ;)\n\n\nEw no! Babel or bust!\n\nIn my eyes a unsolved problem of all project-processing methods is to handle several projects. The worst case: Say I researched recently and found a new postprocessing tool far better than the other tool I used in 5 of my projects and now I want to migrate...\nBut even simple tasks like \"bump the version of 4 projects and push them to github\" is difficult.\n\nI agree, this is a problem (well, for my work its managing hundreds of components and keeping everything up to date and standardised across the board). I think this is an orthogonal problem though - mostly one of provisioning and less about orchestrating tasks.\n. I think we have enough to get a prototype going. I'm going to make some time this weekend to get a first draft done and we can all see where to go from there.\n. Thanks for the kind words @corysimmons.\nI know I said I'd get a draft done a couple of months ago - things got a bit in the way, but rest assured it is on my todo list (item number 3 :wink:) so I'll be pushing some code soon.\n. Yes I would say so. Sadly I didn't get any time to work on it \ud83d\ude0a but I'd say it's now the tool I wanted parallelshell to be.. ",
    "kimmobrunfeldt": "I too think that merging these projects makes sense. One comment about the naming though. I chose a general name because concurrently is not tied to npm run scripts, you can also use the tool for any shell command.\n. I like @paulpflug's idea of having separate CLI commands for parallel and sequential run. \nIn @keithamus' example:\n```\n$ npm-run-all --sequential a b c --parallel d e f --sequential g h i\nTo do this with three commands:\n$ run-series a b c && run-parallel d e f && run-series g h i\nOr\n$ run-series 'run-sequential a b c' 'run-parallel d e f' 'run-sequential g h i'\n```\nI like 2nd(this is not an option because lack of windows support) and 3rd more because they explicitly state which steps are run sequentially and which are run parallel. The 1st command has implicit hidden information: all those substeps are run sequentially.\n. > I'm confused as to your Windows comment. Using && works the same for me in Windows as it does in Unix/Linux--it runs the commands in series if the previous command succeeded. Maybe it changed with recent versions of Windows...\nOk thanks for clarifying, I wasn't sure as I haven't used a windows shell for a while.\n. ",
    "reggi": "Thanks @keithamus for putting this together. I love this idea. I too think that this should have a more general name and not be npm specific. Just to play devils advicate, I'd love this all to be within one project with special flags for npm specific functionality (e.x. --npm-run or --pkg-glob) , just a thought. I embrace a clean / clear UNIX based design, but keeping in mind that we're all node.js developers and that whatever this thing ends up being is going to be very tied to that ecosystem is important. However two commands as @paulpflug describes also makes sense. :+1:. With all that said I'm looking forward to seeing this through and would love to help in any capacity.\n. Just found these projects that touch on this stuff.\n- https://github.com/benoror/better-npm-run\n- https://github.com/bahmutov/with-package\n. From @pygy https://github.com/pygy/gosub\n\nWhat does it have over npm-run-all? It passes parameters to subtasks. That's all. It doesn't take any options and can't run tasks in parallel unlike npm-run-all. \u203b\n. @mysticatea Is --race an option? I'm getting ERROR: Invalid Option: --race. Is it implemented yet?\n\n\"scripts\": {\n    \"echo-hi\": \"echo 'hi'\",\n    \"sleep-15\": \"sleep 15\",\n    \"sleep-10\": \"sleep 10\",\n    \"sleep-100\": \"sleep 100\",\n    \"sleep-1\": \"sleep 1\",\n    \"start\": \"run-p sleep-1 sleep-100 --race\"\n  },\nI'm expecting this to exit after 1 ms.\n. ",
    "twhitbeck": "This sounds really good. Has there been any development on this? I'm currently using npm-run-all because it seems like it is going to be the destination project for all these similar efforts. The \"one cross-platform, parallel script runner to rule them all\". Any way I can help?\n. I'm referring to this:\nhttps://docs.npmjs.com/cli/start\nIt says if there is no \"start\" defined in \"scripts\" that it runs node server.js\n. Wait I think I'm beginning to understand. That's not a default script as much as the default behavior of a different command npm start. I was under the wrong impression that npm start was simply shorthand for npm run start, but it's more like npm start will execute npm run start if there is astart script\n. Whoops, bumped the close issue button.\nTo finish my thought: npm start just runs node server.js for you if there is no startscript. Then my only remaining question is: does npm-run-all report any error if you specify a script which does not exist? I did not see any error when executing npm-run-all start without a \"start\" script defined.\n. ",
    "corysimmons": "@keithamus Good on you for opening this Issue and burying your lib in exchange for working together for an even better one. GitHub needs more developers like you. :+1: \nAlso, thank you for your article on switching to npm. I just made the switch because of it and it's beautiful over here.\nNow if you'll excuse me, I have to go build yet another grid system to pollute the sea of grids with... :(\n@mysticatea Oh and good job on this. Works like a charm!\n. Oh, nevermind, I can by using more asterisks.\nnpm run dev:*:* works.\nMight still be neat to remove the need for the extra colon/asterisk, but it's no biggie.\n. haha, yeah I just read that in docs and was coming to comment that I'm an idiot. Sorry. =)\n. Okay thanks, I think that's the best solution.\nFWIW if you ever run into a task that doesn't happen to have a watch, chokidar-cli is pretty good.\n. ",
    "josh-endries": "Sorry to butt in. I came across parallelshell from an adventure in building with VS Code. It didn't work, so I went to its site, which led me here. Anyway...\nQuoth the @kimmobrunfeldt:\n\nIn @keithamus' example:\n```\n$ npm-run-all --sequential a b c --parallel d e f --sequential g h i\nTo do this with three commands:\n$ run-series a b c && run-parallel d e f && run-series g h i\nOr\n$ run-series 'run-sequential a b c' 'run-parallel d e f' 'run-sequential g h i'\n```\nI like 2nd(this is not an option because lack of windows support) and 3rd more because they explicitly state which steps are run sequentially and which are run parallel. The 1st command has implicit hidden information: all those substeps are run sequentially.\n\nI'm confused as to your Windows comment. Using && works the same for me in Windows as it does in Unix/Linux--it runs the commands in series if the previous command succeeded. Maybe it changed with recent versions of Windows... What doesn't work the same is &. Also, what is the difference between run-series and run-sequential in the above example? Couldn't you just do run-sequential 'run-sequential a b c' 'run-parallel d e f' 'run-sequential g h i'? Honestly, with &&, I'm not sure run-series is even necessary, that's what && does (technically, that's what ; on Unix/Linux and & on Windows does; && also checks exit codes). I believe that the third command is irrelevant because of this.\nI agree that the first command is bad in that it includes an implicit behavior, another reason I prefer the second example. I would suggest that, if you boil this down to one command with aliases, that the one command considers --sequential and --parallel mutually exclusive. Having used commands with ordered parameters in the past, it can easily become a PITA, requires additional knowledge, is more error-prone and isn't very intuitive, IMHO.\nThe second command, however, does brings up a question: what to do with exit codes (if anything)? None of these examples use || in case one (or more? or all?) of the parallel commands fails. This is where I think the decomposition and flexibility in the second example really shows its value. For example, imagine something like this (which isn't great, I just tried to make it more realistic than a b c):\nrun-series clean initEmail\n    && run-parallel --must-succeed build 'sendEmail --subj=\"building \\\"${projName}\\\"\" foo@bar.com'\n    && run-series --any-must-succeed 'minify -d app/js -r \"^.*\\\\.js\"' imgify\n        && run-parallel emailDev emailMgrs\n        || run-series pkgErr emailDev\nAlthough, since run-series is (so far, as I understand it) redundant, this could really be:\nnpm run clean && npm run initEmail\n    && npm run-all --all-must-succeed build 'sendEmail --subj=\"building \\\"${projName}\\\"\" foo@bar.com'\n    && npm run minify -- -d app/js -r \"^.*\\\\.js\" && npm run imgify\n        && npm run-all --any-must-succeed emailDev emailMgrs\n        || npm run pkgErr && npm run emailDev\nI could see needing run-series in order to bridge the gap between ; and & to allow users to run commands cross-platform in series regardless of exit code.\nLastly, I am very glad you all agreed to combine your efforts. There is way too much fragmentation and duplication of purpose and effort these days.\n. ",
    "kievechua": "Hi all, may I know what's the status of the consolidation of all projects?\nIs there any possibility to create a Github organization and put all related repos in there?\n. ",
    "mitermayer": "Which project is the one where you are all merging into ?\n. Thanks for the reply, I had previously thought that npm-run-all also had a helper for watching, but I understand now that it is responsibility of the npm run task itself to do it. I manage to find a workaround by using this plugin together with node-watch, and using npm-run-all api to call tasks based on specific changes.\n. ",
    "amelon": "it's npm-run-all.\n. ",
    "lukeramsden": "Any update on this?. ",
    "xaviergonz": "Slightly different and slightly related, a project I recently made:\nmakfy\n. ",
    "BobbyBabes": "@keithamus Has npm-run-all already become the one canonical parallelisation tool that you proposed ?\n. That's awesome to hear. Great collaboration.\nThe sad thing is though that I'm going to use npm-run-all now.\n\nSadly I didn't get any time to work on it :blush:\n\nWell I don't understand that you guys have/find the time to build all these tools and maintain and support it. I must be a lot slower, or just less productive.\nCurrently rereading your article \"How to use npm as a build tool\", to rewrite my obnoxious large Gulp and Grunt scripts. Thanks for that too.\n. Do you follow your runAll calls with a .then() and .catch() ?\nEDIT: Or with just a .catch() to log and/or stop build execution ?\nSimilar to this :\n```JavaScript\n'use strict';\nconst runAll = require(\"npm-run-all\");\nrunAll([\"build:media:revise:*\"], {parallel: true})\n    .then(() => {\n        console.log(\"Finished revving media.\");\n    })\n    .catch(err => {\n        console.log(\"Failed revving media!\");\n        console.error(err);\n    });\n```\n. I finally had some time to play with the example code. I resolved the issue in the example code.\nBut what code is actually in the .catch(err => {}); block of the runAll().then().catch() statement in run-all-b-script.js ?\nWith a runAll statement, you can't throw in its .catch block. There is nothing to handle it (promises, promises). Of course using return Promise.reject(err) will also not work. Identical issue, unhandled  : UnhandledPromiseRejectionWarning.\nSo if you want to stop script execution (stop Node's process) you need to tell Node differently.\nYou can do it abrupt (abort) with process.exit(1);.\nOr you can do it gracefully with process.exitCode = err.code; or process.exitCode = 1.\nReasons to exit gracefully are here : https://nodejs.org/api/process.html#process_process_exit_code\nIn the example that you created, change script-a-error-c.js to the following and play with the commented statements at the bottom of the .catch() block. Uncomment only one each time.\nprocess.exitCode = err.code is what I use in nested runAll statements.\nThe lines throw (err);, throw (new Error('Something bad happened!'));, and return Promise.reject(err); will display the UnhandledPromiseRejectionWarning warning in the console.\n```JavaScript\nconst runAll = require('npm-run-all');\nrunAll([\"a\", \"error\", \"c\"], { parallel: false, stdout: process.stdout, stderr: process.stderr })\n    .then(() => {\n        console.info('>>> success running scripts a and c');\n    })\n    .catch(err => {\n    console.error('>>> error running scripts a and c');\n// Lines below, added by @BobbyBabes.\n\nconsole.dir(err);\nconsole.log(err.code, err.results[1].code);\n\n// throw (err);\n// throw (new Error('Something bad happened!'));\n// return Promise.reject(err);\n// process.exit(1);\n// process.exitCode = 1;\n// process.exitCode = 0;\nprocess.exitCode = err.code // a.k.a. err.results[1].code;\n\n});\n```\n. ",
    "exalted": "@kimmobrunfeldt commented on Oct 17, 2015:\n\n[\u2026] because concurrently is not tied to npm run scripts, you can also use the tool for any shell command.\n\nIs this goal achieved in this consolidation? As the name of this package suggests, I think, this is still pretty much tied to npm scripts. Am I wrong?\nThanks. \ud83d\ude4f . ",
    "stereokai": "Is the consolidation of all these projects into one megarepo still taking place? Cheers!. CTRL+C doesn't work at all for me on Win 10. ",
    "pygy": "Hi all I had originally missed this thread. I wrote gosub to scratch an itch (running subscripts in a npm/yarn-agnostic fashion), I didn't know that npm-run-all was doing it as well.\nI'll probably keep using it for my libs given how simple it is (no options, does exatcly what I want), but I can add a banner at the top of the README pointing to whatever the meta-project ends up being.. ",
    "roblav96": "Set exec to a script:\njs\n\"scripts\": {\n    \"exec\": \"exec\",\n    \"dev\": \"del dist; run-p 'exec -- tsc -w' 'exec -- nodemon'\",\n},\n\ud83d\udc4d. ",
    "leftiness": "I can confirm that npm-run-all restart works now. In the end, I decided to use my own start:dev, stop:dev, and restart:dev tasks separately from start, stop, and restart because the *:dev tasks also include things like watchify, but your quick response to this opened issue was admirable. Good work! :)\n. ",
    "jmilkiewicz": "Hi\nSo for now it does not work at all :(.\nwhen i updated to 1.3.0 than on running\nnpm test --npm-run-all-bug:reporter=nyan\ni got: \nERROR: test:t: None-Zero Exit(7);\nnpm ERR! Test failed.  See above for more details.\nin npm-debug.log one can see more details:\n\u2318 cat npm-debug.log.c6eddc672a318240c004b7a835d29ae0 \n0 info it worked if it ends with ok\n1 verbose cli [ '/usr/local/bin/node',\n1 verbose cli   '/usr/local/bin/npm',\n1 verbose cli   'run-script',\n1 verbose cli   'test:t' ]\n2 info using npm@2.14.7\n3 info using node@v4.2.1\n4 verbose run-script [ 'pretest:t', 'test:t', 'posttest:t' ]\n5 info pretest:t npm-run-all-bug@1.0.0\n6 info test:t npm-run-all-bug@1.0.0\n7 verbose unsafe-perm in lifecycle true\n8 verbose stack Error: write EIO\n8 verbose stack     at Object.exports._errnoException (util.js:874:11)\n8 verbose stack     at exports._exceptionWithHostPort (util.js:897:20)\n8 verbose stack     at WriteWrap.afterWrite (net.js:763:14)\n9 verbose cwd /Users/jmilkiewicz/workspace/npm-run-all-bug\n10 error Darwin 14.5.0\n11 error argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"run-script\" \"test:t\"\n12 error node v4.2.1\n13 error npm  v2.14.7\n14 error code EIO\n15 error errno EIO\n16 error syscall write\n17 error write EIO\n18 error If you need help, you may report this error at:\n18 error     https://github.com/npm/npm/issues\n19 verbose exit [ 1, true ]\n. Hey\nSorry for a huge delay - we simply had fire in project i am working on. Thx a lot for your effort fixing that issue (and a temporary break it introduce in v 1.3.1). \nIt is hard to me to say that it still does not work in version 1.3.3. I wish i could provide you with a better test suite ( an automated one) but for now i only have https://github.com/jmilkiewicz/npm-run-all-bug\nPlease simply clone the repo and run these 3 commands as described in README to find out that it still does not work as expected. \n. It seems i have no permission to reopen that issue, but definitely it shall be re opened \n. ",
    "misteroneill": "Confirming that I'm seeing this on any script that uses npm-run-all, but running the scripts individually has no issues.\n. :+1: \n. ",
    "alicoding": "I'm seeing the same problem here. It looks like this happened after the code refractor patch...\n. ",
    "janl": "Seeing this too. Confirmed that it is past https://github.com/mysticatea/npm-run-all/commit/8004ce4f3039fe6e8d67c0b291ddf688d55176c2 (\u201cRefactoring\u201d).\nI\u2019ve traced it down to stdout/err problems. When I added a fs.createWriteableStream() to the options passed to spawn() in spawn-posix.js (e.g. log stdout/err into files). Things work as expected.\nDo this in spawn-posix.js if you want to reproduce:\n``` javascript\nfunction spawn(command, args, options) {\n    var fs = require('fs')\n    var ofd = fs.openSync('npm-run-all.stdout', 'w')\n    var efd = fs.openSync('npm-run-all.stderr', 'w')\n    var out = fs.createWriteStream('', {fd: ofd, flags:'w'});\n    var err = fs.createWriteStream('', {fd: efd, flags:'w'});\noptions.detached = true; // eslint-disable-line no-param-reassign\noptions = {\n  stdio: [options.stdio[0], out, err]\n}\nconsole.log(command, args, options);\nvar child = _child_process2[\"default\"].spawn(command, args, options);\nchild.on(\"exit\", removeFromPool);\nchild.on(\"error\", function(error) {\n  console.log(error);\n  removeFromPool()\n});\nchild.kill = kill;\n\n// Add to the pool to kill on exit.\nchildren.push(child);\n\nreturn child;\n\n}\n```\nGood luck with this one <3\n. And again as a diff, if that\u2019s easier, full commit here: https://github.com/janl/npm-run-all/commit/2889479f9ea9f5e460dab069c718a4c84dd0ed28 branch here: https://github.com/janl/npm-run-all/tree/issue/14\n``` diff\ndiff --git a/src/lib/spawn-posix.js b/src/lib/spawn-posix.js\nindex c04abc1..8f10254 100644\n--- a/src/lib/spawn-posix.js\n+++ b/src/lib/spawn-posix.js\n@@ -48,8 +48,18 @@ function kill() {\n  * @returns {ChildProcess} A ChildProcess instance of new process.\n  * @private\n  */\n+\n+var fs = require('fs')\n export default function spawn(command, args, options) {\n+    var ofd = fs.openSync('npm-run-all.stdout', 'w')\n+    var efd = fs.openSync('npm-run-all.stderr', 'w')\n+    var out = fs.createWriteStream('', {fd: ofd});\n+    var err = fs.createWriteStream('', {fd: efd});\n+\n     options.detached = true; // eslint-disable-line no-param-reassign\n+    options = {\n+      stdio: [options.stdio[0], out, err]\n+    }\n const child = cp.spawn(command, args, options);\n child.on(\"exit\", removeFromPool);\n\n```\n. nice! <3\n. ",
    "e-jigsaw": "@mysticatea Thanks for great support!\n. ",
    "ronkorving": "Thanks from Tokyo, Chuo-ku ;)\nPS: I really love this module\n. Cool! :)\n. Thanks for fixing the docs\n. ",
    "moqada": "As you said, it looks more better if it can use babel-runtime...\nBut, v1.3.4 works fine!\nThanks!!\nRefs:\n- Job #126.1 - moqada/aws-sdk-config-loader - Travis CI\n. ",
    "micky2be": "Great. Thank you\n. ",
    "clonq": "Runs the tasks in series, each passing their results to the next as in https://github.com/caolan/async#waterfall\n. Yes it is a pipe. The same way we try to avoid doing task1 && task2 && task 3 it might be beneficial to pipe the result of one task into another. The output of the last task would be the output of the CLI.\nE.g. get-json-async | jq 'json selector' | write-to-file \n. Could you also add an option for printing the task number? e.g. [1/3]\n. That would be great. Thanks!\n. ",
    "tomdavidson": "I do not work on osx or win very much but both supports pipe (powershell and git bash...). Would these be equivalent?\nnpm-run-all -w \\\"get-json-async\\\" \\\"jq 'json selector'\\\" \\\"write-to-file\\\"\nand \nnpm-run-all get-json-async | jq 'json selector' | write-to-file\nI do not see the purpose npm-run-all has (lack of imagination?) unless we can do globs parallel:\nnpm-run-all -p -w  \\\"get-json-async\\\" \\\"jq 'json selector'\\\" \\\"write-to-file\\\"\nin which case wouldn't interpreting the pipe be more intuitive than the flag?\nnpm-run-all -p get-json-async:* | jq 'json selector' | write-to-file\n. @evilebottnawi in the mean time you can do something such as:\njs\n    \"compile\": \"npm-run-all -p compile:ts:*\",\n    \"compile:ts:cjs\": \"time tsc --p tsconfig.commonjs.json $*\",\nWould work for most bash users, even git bash ?\n. This is too cool. Sorry I over look the detail in the docs and thanks for the quick response. Works perfectly:\njs\n    \"compile:ts\": \"npm-run-all -p \\\"compile:ts:* -- {*}\\\" --\",\n    \"compile:ts:cjs\": \"tsc --p tsconfig.commonjs.json $*\",\n    \"watch\": \"npm-run-all -p \\\"compile:ts:* -- {*}\\\" -- -w\",\n. Understood and mostly agree, even though the other nra appears unfinished with no commits or builds for three years. I think npm-run-all is pretty awesome.\n. ",
    "lostm1nd": "Thanks for the fast reply.\nYou can check out this issue in the following app - https://github.com/lostm1nd/WebDevolopment/tree/master/Pizzeria-ES2015\n. Mine is:\n- Windows 7 64bit\n- Node v5.4.1\n- NPM v3.8.0 (just upgraded from v3.3.12 and still the same issue)\n- npm-run-all and copyfiles are the same as you listed\nEdit:\nI just tested it in the cmd.exe and it works. I guess the problem is with git bash since I run most of my commands from there when I am working on a repo. I guess you can close this issue if you wish.\nThanks,\n. These three lines of code work for me as expected. It does not hang:\njavascript\nnode index.js\n1\n1.5\n2\nEdit: Just updated node to v5.7.1 and the code works again.\n. @mysticatea Thank you for the time invested in the issue!\n. ",
    "BarryThePenguin": "Great! I've done some more investigation and I believe it's related to Spawning .bat and .cmd files on Windows, as well as the space in the path.\nI'm working on that right now.\nAfter that I can send through setup for Appeyor too\n. Sure. I didn't think it would be that simple... It could need a check for the existence of a space in the path?\nI'm just guessing now though...\n. Just a suggestion, would it be worth using an existing cross platform spawn utility like node-cross-spawn-async\n. Do you have the test available for me to try? What version node are we both running?\nI'm on v5.5.0\n. Yeah... ok. Tests work here too\n\nBut not the project this issue originated from...\n\n. :clap: No problem, happy to help. Ping me anytime\n. ",
    "coveralls": "\nCoverage remained the same at 96.373% when pulling 5f5d26faa1dfde744ec1a11f1ed1d2fcc6b14583 on sarbbottam:serial into 9aa2a2d2429b5acaec3d97efd7edce04ffa34184 on mysticatea:master.\n. ",
    "coryhouse": "Ah! The new version Git Bash fixes it. It's an issue in 1.9.2 (yes, I hadn't updated in awhile!), but works great in 2,7.4. Thanks so much for taking the time!\n. There's a free trial at the link I provided in the issue. :+1: \n. It's still occurring for me on Windows 7. What version of Windows are you on?\n. Odd, I'm running the exact same setup. I'm stumped why we're seeing different results.\n. ",
    "dasa": "A free open source license is available. Details at:\nhttps://www.jetbrains.com/buy/opensource/?product=webstorm\n. ",
    "zont": "The same behavior with FAR Manager and Windows 10:\n1) npm-run-all -l -p dev:*\n2) CTRL+C and say Y\nResult: task was killed...\n3) F10 to exit FAR Manager\nResult: failed, FAR not closed...\nBroken FAR process:\n\nNormal FAR process:\n\n. The same behavior with cmd and Windows 10:\n- npm-run-all -l -p dev:*\n- CTRL+C and say Y\nResult: task was killed...\n\ntype exit to close cmd window\n\nResult: failed, window not closed.... ",
    "zhekaus": "I have quite similar issue.\nI use npm-run-all to run Angular (ng serve), Laravel (php artisan server) and pug-cli simultaneously like this (a package.json fragment):\n\"scripts\": {\n\u2026\n    \"serve\": \"ng serve --proxy-config proxy.conf.json\",\n    \"sleep\": \"sleep 3\",\n    \"serve:postponed\": \"run-s -s sleep serve\",\n    \"start\": \"run-p pugw laravel serve:postponed\",\n    \"laravel\": \"php ../lar/artisan serve\",\n    \"pug\": \"pug src\",\n    \"pugw\": \"pug src -P -w\"\n  },\nIf I hit Ctrl+Cas many times I want \u2013 nothing happens. \nIf I hitCtrl+C and Enter, I finally can see the bash prompt. However, all stuff (php.exe and ng, pug, etc.) continue work in background, and bash freezes \nPS. Win 10. ",
    "SargoDarya": "We have the same issue on MacOS. Even though we're pressing Ctrl+C like mad, the processes continue to run. Restarting will pile up more and more of those processes bringing everything slowly to a halt.. ",
    "trygveaa": "I'm not sure. The only thing I could think of when creating this was --verbose, but then you would have to call --silent --verbose which would probably be confusing to users.\nAlso, I think it would be more logical to keep the option separate from the --silent option (even though it may not be that useful alone). Maybe you could call it --print-name, and also add a one letter shorthand for --silent --print-name, for example -n?\n. I'm thinking that each option should only do one thing (except the ones that combine options), which is why I suggested a separate one. If you rather want one for both, you could call it --silent-with-name (a bit shorter than your suggestion at least), and still add a shorthand for that (-n or another character).\n. ",
    "jwbay": "I would gladly give up coloring via a command line argument in favor of cleaner logs for run-p. Since the streams are already wrapped to be able to prepend them with the label, maybe it's possible to hold back the output until a script is complete?\n. ",
    "JuanCaicedo": "Very interested in this! The last approach sounds very good to me. What would it take to make this happen? Maybe I can help. I'm sorry, the command that was taking a long time was actually\nnyc --require babel-register mocha \"test/*.js\" --reporter progress --timeout 60000. Might be related, if I run npm run watch, I see a lot of tests fail. NPM_EXECPATH sounds like a good fix, I can test it locally. \nDropping v0.10/0.12 sounds like a good idea, but maybe the problem is running babel the mocha babel compiler? From what I understand, this interprets the ES6 code at runtime, which is much slower. Something we do at my company is to run a compile step first and then execute our tests against the compiled code. I think that could have huge performance improvements! \ud83d\ude03 Let me know if you would like to do that and I can help. I found that this works if you run npm run build. Maybe there's away to run a pre-link script?. SGTM! I was trying to link it for development, maybe it would be good to have a development doc. If so, let me know and I can write down some notes as I'm getting started. I don't think this is the right fix, details in the issue. ",
    "fatso83": "I think I'll need to look into this when I have time, because the output mangling is the number one issue. An option that enables batching/delaying the output from the parallel tasks would get us the speed advantage, while giving us the sequential output.. @fearphage, now the issue of overlapping output in parallel tasks is resolved :-). Shouldn't issues like this be closed? This is not a problem of this project.. Since the tests are so extremely time consuming, they practically make it so unattractive to run anything but the smallest subset locally. After looking a bit closer at them, it seems most of them lean themselves extremely well to parallel execution. \nI tried experimenting a bit with mocha.parallel in this commit and it worked very well. Would a PR where I parallelized all the tests be interesting? It should be able to cut the time down considerably (at least 3-4x).. I will do that ASAP, probably tomorrow. Didn't want to add documentation until I knew if it had a chance of surviving :-) Totally agree that parallelizing tests should be separate, just thought I would mention it.. Documentation added!. ",
    "rstacruz": ":+1: \u2014 i'd like to have 2 watchers running (eg, watchify + brunch watch), and have everything abort when one of them fails. otherwise, one will keep running and I'm left to wonder why the other one doesn't work.\n. ",
    "anddoutoi": "It would also be nice if\nJavaScript\nrunAll(\n  ['lint:something', 'lint:anotherthing'],\n  {continueOnError: true, stdout: process.stdout}\n);\ncould return a iterable promise like Promise.all do. One could then do something like:\n``` JavaScript\nrunAll(\u2026).then(function (results) {\n  var errorsDetected = results.some(function (result) {\n    return result.code === 1;\n  });\nif (errorsDetected) {\n    process.exit(1);\n  }\n});\n```\nThis would give task and tool writers a lot of freedom and would probably not impact the API that much. The only API that would change is the fulfilled value returned. Today it seems to be the result of the last task that ran.\nThis could probably also be done within npm-run-all. If continueOnError is true it could maybe do a Promise.all but without the fail fast and in the end reject the promise with a list of tasks that reported exit 1.\n. ",
    "keeganstreet": "One workaround for my issue would be to use npm configuration parameters. For example if this is my package.json:\njson\n{\n  \"name\": \"keegan\",\n  \"config\": {\n    \"port\": \"4567\"\n  },\n  \"scripts\": {\n    \"css\": \"grunt watch:css\",\n    \"mm\": \"bundle exec middleman --port=$npm_package_config_port\",\n    \"serve\": \"npm-run-all --parallel css mm\"\n  }\n}\nI can then call npm run serve --keegan:port=5000, and the mm script will receive the custom value of 5000 as a port.\nHowever, this will only work on Bash not the Windows Command Shell, which references variables with a % sign not a $ sign. To get this to run on Windows I would need to change the mm script to bundle exec middleman --port=%npm_package_config_port%.\nSo I still think it would be a great feature for npm-run-all to be able to pass arguments to scripts from the command line.\n. Thanks @mysticatea, I've confirmed that cross-conf-env allows this to work cross platform. I just have to change my mm script to cross-conf-env bundle exec middleman --port=npm_package_config_port and then I can call npm run serve --keegan:port=5000 and the port argument is passed through on both Mac and Windows.\nI understand it would be difficult to design a way to pass arguments through to the correct child script. Feel free to close this issue. The workaround with npm config params solves my use case.\n. Hey @robario,\nI'm just trying to understand your interface design. In your design and my use case, would the npm scripts be written like this?\njson\n\"scripts\": {\n  \"css\": \"grunt watch:css\",\n  \"mm\": \"bundle exec middleman\",\n  \"serve\": \"npm-run-all --parallel css \\\"mm $1\\\" -- --port=4567\"\n}\n(with $ symbol to be confirmed)\n. ",
    "robario": "@mysticatea @keeganstreet \nI also have the same problem.\nI suggest that it is able to include like $1,$2,...,$n similler to a shell script.\nIf $ causes a problem, it may be in a different symbol.\nWhat do you think?\n. @mysticatea @keeganstreet \nI've implemented the concept.\nhttps://github.com/robario/npm-run-all/commit/74f720e9068d529c2a8fd855c89efbce62bed08b\nPlease check it.\nIt enables below.\n```\n$ run-p 'task1 -- $2 $1' 'task2 -- $0' -- one 't \"w\" o'\n\ntask1  \"t \\\"w\\\" o\" \"one\"\ntask2 \"one\" \"t \\\"w\\\" o\"\n```\n- $0 is a bonus feature to be able to specify all the rest aruments.\n. @mysticatea \nSure, it is just a concept implementation.\nIf you have consensus about this idea, I want to continue to realize it.\n. Okay, thank you :exclamation:\nI will review of your comment now.\n. @mysticatea \ncmd.exe doesn't remove \\ since it just a path separator, so run-p \"a -- \\$1\" is parsed to [\"node\", \"run-p\", \"a -- \\$1\"].\n\nThis is correct behavior. Since \\ is used for escape $. I have implemented such as.\n@keeganstreet \nYou can do it in this way.\n```\n{\n  \"serve\": \"npm-run-all --parallel css \\\"mm $1\\\" --\"  # the last -- is a separator for npm-run-all\n}\n$ npm run serve -- --port=4567      # the middle -- is a separator for npm\n```\nAnd you can do anything that you want\n- \"serve\": \"npm-run-all --parallel css \\\"mm --port=$1\\\" --\" then do $ npm run serve -- 4567\n- \"serve\": \"npm-run-all --parallel css \\\"mm --po$1\\\" --\" then do $ npm run serve -- rt=4567\n- \"serve\": \"npm-run-all --parallel css \\\"$0\\\" --\" then do $ npm run serve -- mm --port=4567\n. @mysticatea I got it. Thanks.\n. @mysticatea @keeganstreet\nAs you pointed out, I think $ will cause a problem.\nIt is better that are similar to other languages, also it is better to think also scalability.\nPOSIX(C, Java, PostgreSQL,and so on) has been adopted %1$d,%2$s,... syntax.\nOn the other side, C#, Python has been adopted {0},{1},... syntax.\nIn order not to use $, I think the {index} syntax is better.\nIt is also scalable in this way :: {index,specifications}\nWell, there may have to be some decisions.\n- How to escape when a user really want to pass {3} to npm run-script?\nI think it is better not to use backslash.\n  One way, the user can avoid by himself.\n\"serve\": \"npm-run-all --parallel css \\\"mm {1}\\\" -- '{3}'\"`\nIt is simple and can be resolved with documentation, no need implementation.\n- Which do you want to adopt a 0-origin or 1-origin index?\nMy opnions\nIn consideration of the usage of this program, I want a way I pass all to npm run-script.\n  Since I want to use {0} for it, I think that 1-origin is good.\nOtherwise, using special index and use 0-origin like Python, C#.\n  The candidates are\n  - {@} from shell script $@ :: well..., I prefer this way! but $@ equals to $1 $2 $3 ... is 1-origin...\n  - {%} from vim %\n  - {} :: see bellow\n  - {-0} :: see bellow\n  - {-1} :: see bellow\n- In association with,\n  - Whether or not to adopt auto index like as \"{} {}\".format('hoge', 'hage')\n  - Whether or not to adopt negative index like as \"{-1} {-2}\".format('hoge', 'hage')\n  - Whether or not to adopt named argument like as \"{foo} {bar}\".format(foo='hoge', bar='hage')\nHow about?\n. I recommend to use 1-origin and special index {@} and {*} like shell-script.\nIt can keep npm-run-all's code simple.\nI'm trying implements.\n. I did it. https://github.com/robario/npm-run-all/commit/09e7c1e99888fd70788b1899a86eda1c9ef025f9\nPlease try this and review.\nrepo: https://github.com/robario/npm-run-all/tree/master\ndiff: https://github.com/mysticatea/npm-run-all/compare/master...robario:master\nPerhaps there are quote problems on Windows.\nI think it should use another library which can interpret metacharactors of cmd.exe and sh instead of shell-quote.\n. One more thing.\n- Whether or not to quote arguments.\n  1. traditional behavior of shell script\n     - run-s \"echo {1}\" -- \"foo bar\" => echo foo bar\n     - run-s \"echo \\\"{1}\\\"\" -- \"foo bar\" => echo \"foo bar\"\n  2. easy to use for the user. But the user can not control.\n     - run-s \"echo {1}\" -- \"foo bar\" => echo \"foo bar\"\n     - run-s \"echo \\\"{1}\\\"\" -- \"foo bar\" => echo \"\\\"foo bar\\\"\" :: this result is correct, usually will be not used\n     - ? => echo foo bar :: can not control means this behavior\nThere are same things about {@} {*}. In shell-script $@ and \"$@\" are different.\nMy recommendation is the second.\nAnd, upon request, provide a special syntax like ...{1} or  {1,raw|noquote} to be able to control it.\n. @mysticatea Thank you for your comments and advices.\nRepeated, I appreciate your decision and accepting it.\nSince roughly seems like no problem, I will send pull-request later.\nBTW, It\u2019s hard for me to say this but could you please add the documentation and tests?\n. Awesome thanks to all!\nAlthough most similar to the positional parameters of shell-script, these are to be careful when you update the document and test.\n- {@} is similler to \"$@\" not $@\n- {*} is similler to \"$*\" not $*\n- {1} is similler to \"$1\" not $1\nIf someone needs unquoted version, then another syntax is necessary for solving it.\n. @mysticatea \nI know how @poislagarde feel.\n{\n    \"build\": \"webpack\",\n    \"watch\": \"npm-run-all build -p watch:*\",\n    \"watch:webpack\": \"webpack --watch\",\n    \"watch:depends_on_webpack\": \"some_processing ./www/bundle.js\",\n}\nIn the case of above, webpack's first build runs twice. (And the first build is slower than the continuous build.)\nThe idea of using wait-on sounds good.\n\"watch:depends_on_webpack\": \"wait-on ./www/bundle.js && some_processing ./www/bundle.js\",\nHowever it is not waiting if ./www/bundle.js already exists.\nI want to wait for the completion of the process rather than the file creation.\nShould I do like this?\n\"watch:depends_on_webpack\": \"rimraf ./www/bundle.js && wait-on ./www/bundle.js && some_processing ./www/bundle.js\",\nOtherwise wait for the stdout as described in this issue?\nHowever, I think it is difficult that implement to wait for stdout.\n. @poislagarde\nThank you for telling me the actual situation.\nI started using rimraf and wait-on, too.\n. Thank you for merging.\nI expect official releasing it hourly.\n. Is it a restriction of minimatch?\n. Well..., is it a restriction of npm?\nIf so, I apologize it and please close this issue.\n. BTW, to tell the truth, I consider how to pass \"range of arguments\".\nHere are my suggestions.\n1. \\\"cmd1 -- {1}\\\" \\\"cmd2 -- {2} {3} {4} {5} {6} {7} {8} {9}\\\" :: cmd.exe like. It which is out-of-range should be empty\n2. \\\"cmd1 -- {1}\\\" \\\"cmd2 -- {2..} :: no good...\n3. \\\"cmd1 -- {1}\\\" \\\"cmd2 -- {@[2..]} (equals to {@[2..-1]} ) :: is it better? but become complex a little bit.\nFurthermore. I consider processing such as cut({1#chcp-}), replace({1/dev/development/}).\nI also think it might be overkill...\nCould you please tell me your opinions?\n. In haste, I will divide the commits into each p-r.\n. > I'd like to suggest to make tasks such release, release:ios, release:android.\nNot the kind of thing.\nBTW,\n\nNpm-scripts is an automation tool similar to Make or Gulp. I think we don't use arguments on those in most cases, so simple pass-arguments feature is enough.\n\nIf you think so, and actually, it really needs only {@}, doesn't it?\nCertainly as you say, the situations that require {-\\d+} (and even {\\d+}) might be not so much.\nAnd further, because only imitating shell script, also I see that it is better that the negative index does not exist.\n. Because I have created a helper script to ignore the not understandable arguments, it was no longer necessary for me.\nBut I'm afraid, if you do not adopt this issue, could you please close it?\n. @mysticatea \nThank you and I'm sorry to have stumped you.\nWhen #50 even be resolved it works completely for me.\n. I'm sorry. I'm in fixing the tests.\n. done.\napplyArguments should be applied when there is a placeholder, not an argument.\n. I apologize that I had overlooked.\nTo tell the truth, I noticed a look at the test you have added after it had been released.\n. Yes, I knew it.\nThank you again.\nBTW, I have thought hasPlaceholder cheking is not useful and over optimization.\nI just follow your code that is hasArguments checking.\n. @mysticatea\nAny update on this? In fact, the placeholder is useless until resolve this problem e.g. ls: {@}: No such file or directory.\nThank you for your hard work!\n. @mysticatea \nI know what you mean.\nIf so, the v2.x's user can NOT use the placeholder feature, does they?\nBecause >=v2.2.0 has such a bug:\n```\n{\n  \"list\": \"run-s \\\"ls -- {@}\\\" --\",\n  \"ls\": \"ls\"\n}\n$ npm run list\nls: cannot access '{@}': No such file or directory\n$ npm run list ./\nno problem\n```\nI think #50 does not mean a breaking change of spec but just a bugfix and which is needed to >=v2.2.0.\nBecause no one expects the current behavior even if v2.x's user.\n50 is necessary in order to ensure that v2.x's user can use the placeholder feature correctly.\n. I agree with you as long as you decided so.\nBut then, almost all of the bug-fixes become breaking change to a greater or lesser.\nSo still, I think it is the bug of implementation not that of specification.\nI'm looking forward to release of v3 to be able to use placeholder feature, since it could not be used in v2.x.\nBest Regards.\n. @mysticatea \n:= means use the default value and assignment it to the variable.\nSo run-s \"run-server -- --port {0:=8080} {0}\" should be run-s \"run-server -- --port 8080 8080\"\n:- means just use the default value.\nSo run-s \"run-server -- --port {0:-8080} {0}\" should be run-s \"run-server -- --port 8080\"\nI know the difference of the bash's one on this point.\n\nPositional parameters and special parameters may not  be  assigned to in this way.\n\nBut at the same, it should use :- to adopt default value feature.\n. The result of my opinion, There are two way.\n1. support :- only\n2. support :- and := then implement each such as \"use default value\" and \"use default value and assignment\"\n. Not necessarily the case.\nAnd say to C language specification, the {0} behaivior is unspecified but NOT undefined.\n. They are two of the reasons that I think that there is no problem.\n- In the shell script, $0 is acceptable, but the value is indefinite.\n- In the current implementation, {0} is always --, but the value can be indefinite.\n. ",
    "poislagarde": "I understand, it could get a little messy. Thank you for the quick answer and help though, and wait-on works great in my case. Thanks again!\n. @robario if it helps, I ended up doing this:\njson\n\"scripts\": {\n    \"prebuild\": \"rimraf _built\",\n    \"build\": \"tsc\",\n    \"watch\": \"npm-run-all prebuild -p watch:*\",\n    \"watch:tsc\": \"tsc -w\",\n    \"watch:nodemon\": \"wait-on _built/server.js && nodemon _built/server.js --watch _built\"\n}\nwait-on works fine here because the _built directory is cleared (rimraf _built) before.\n. ",
    "evilebottnawi": "@mysticatea Linux/Ubuntu, bash, 6.2.1, 3.9.3\n. @mysticatea yep, for cross platform\n. @tomdavidson thanks, i known about this feature, but it is not cross platform\n. @mysticatea i think @amilajack meant nested task, example:\n/- `favicons` -> `imagemin` (`serial`)\n           /-- `webfont` (`serial`)\n`parallels`\n           \\-- `copy` (`serial`)\n            \\- `another-task` -> `another-task-too` -> `another-task-too-too` (`serial`)\n. @nikolay maybe your can run commands parallels? https://github.com/mysticatea/npm-run-all/blob/master/docs/run-p.md. ",
    "tobiastom": "I fear there is no standard for it\u2026\nThanks for considering it!\n. @junejie How did you solve the issue that node lib/server.js would never be stopped?. ",
    "JoshuaKGoldberg": "I don't think we need to use Promise cancellations for this one. Seems a little extreme and not backwards-compatible.\nHow about keeping a list of processes that are running, and providing a way to exit/kill them all?. ",
    "TehShrike": "There's always https://github.com/sindresorhus/p-cancelable. I'm not a maintainer but I would love to see this merged \ud83d\udcaf . If you need a delay, you should use delay-cli\nTo the original example, here is my preferred solution:\n\nhave a prep-build script that does your initial CSS build\nhave a separate watch script that watches for changes and rebuilds your CSS based on that\nhave your dev script run the prep-build script, and then run all your watch scripts and your development server in parallel\n\nExample at https://github.com/TehShrike/memorize-text-app/blob/3c5126f70b8485541f6d6e69dda6ec496fafa1b4/package.json#L12. If you're setting a delay between them, then they're not running in parallel :-x. I think that would have to be added to cross-spawn since that's what this library uses. Duplicate of #149, #150, #152, #153, #154\nThis was fixed in v4.1.5. ",
    "ericanderson": "It would seem to be expected behavior, that if I installed a local npm, that said npm is what I would want to npm-run-all anyway.. ",
    "ibratoev": "Sorry wrong repo ;)\n. ",
    "kentor": "Yeah.. nested serial tasks within a parallel block would be useful. i guess it's possible if you added another script for the nested task but that won't scale well. and naming things is hard\nfor example i wanted to do this:\n+---> clean <--+\n           |              |\n           |              |\n           |              +\n           |          html:build\n           +              ^\n        js:build          |\n           ^              +\n           |          css:build\n           |              ^\n           |              |\n           |              |\n           +--------------+\n                  |\n                 rev\napi could look something like this?\nnpm-run-all clean -p js:build [ -s html:build css:build ] -s rev. ",
    "kentcdodds": "To be clear, these are the files that'd need to be extracted and open sourced:\n- src/lib/spawn.js\n- src/lib/spawn-win32.js\n- src/lib/spawn-posix.js\n. I think we should do this. Is that what you mean by:\n\nIf the offer is rejected, I'm happy to make the package with you!\n\n? :)\n. Gotcha. We'll see what they say!\n. Looks like the request was denied. cross-spawn-with-kill coming soon :)\nI'll let you know when I start working on it. If you beat me to it then that's fine :)\n. Alrighty, I'm going to try to knock this out!\n. It's a thing now! Thanks a ton!\nhttps://github.com/kentcdodds/cross-spawn-with-kill\n. ",
    "vitalets": "Thanks a lot for quick reply and actions! \nWhen you plan to release?\n. ",
    "iamstarkov": "wait, you can have several binaries in your package\n. and @tomdavidson did that\n. @mysticatea i didnt get your arguments about not having nra npm package \n. yay \ud83c\udf89. ",
    "juangl": "Thank you for responce! I think it's a nice feature to add.\n. ",
    "joscha": "Opened an issue on the other side as well, just in case: https://github.com/yarnpkg/yarn/issues/1035\n. I run it in a docker container. You can either use an alias yarn=npm or if you have sub-shells (we do) that wouldn't pick the alias up, you can do a ln -s /path/to/yarn /use/local/bin/npm. Admittedly it's a little bit of trickery ;)\n. ",
    "adamdicarlo": "@joscha how do you get it to run yarn, though - do you just have some postinstall hook to create an alias of npm -> yarn or something?\n. ",
    "zkochan": "That would be awesome! Thank you!\n. ",
    "odinho": "It's not really the same.  That is aliasing npm=yarn.  Whilst npm-r won't use yarn if itself was dispatched by yarn.\nThat was what I was thinking:\nIf running:\nyarn foo\nThen run-s would use yarn for running it.  If the starting command was npm run foo, then run-s would use npm.\n. The problem of it /not/ being in scope of npm-run-all is that npm-run-all as well as run-s are hard coded into the scripts.\nIn other words, if I want to run yarn, much of the dispatching will actually be running npm instead.  I appreciate that it's not really straight forward.  But it would be nice if yarn myscript would always run yarn and not weirdly decide to run npm.\nAdding --exec-path=yarn won't really help at all here, since the feature would not be meant for the one writing package.json but running it. E.g. an env var could work.\nAnyway, this issue is there for tracking it and having a place to keep the discussion.\n. Excellent, thank you :). ",
    "arxpoetica": "I noticed https://www.npmjs.com/package/yarn-run-all is aliased to this repo\u2014super confusing. Maybe document in the README?\n. @jonataswalker:\nbash\n\"script1\": \"...\",\n\"script2\": \"...\",\n\"examplescript\": \"NPM_EXECPATH=$npm_execpath npm-run-all script1 script2\"\nEtc.. @jonataswalker  Yes, but where did you set the correct path? Is it hardcoded in a bash or zsh file?. I suspect it's still using NPM under the surface. Can you confirm? Screenshot? If it's actually using Yarn, you'll see something like the following:\n\nEtc.. ",
    "jonataswalker": "Not sure If I understand how to use npm-run-all with yarn. @odinho or @mysticatea?. Thank you @arxpoetica but here (Arch) worked without any adding:\njson\n\"build\": \"run-p build:js build:css\"\nAnd then yarn build.. I did nothing, at all. zsh here.. There you are.\n\n. ",
    "mhulse": "\nrun-s \"cover -- {@}\" \"archive -- {@}\" is evaluated to npm run cover -- {@} and npm run archive -- {@}, then the {@} will be replaced by arguments preceded by --.\n\nAhhhhhh, I see! So I would have to do that for every command in the sequence. Interesting!\nI will try that tonight and report my findings. Looks like it will work though.\nI'm also curious to compare that to the raw npm version (e.g., \"foo\": \"node . baz && node . bar && node . gloop\" etc.).\nThanks for the help @mysticatea! I greatly appreciate it! :octocat: \n. @mysticatea your suggestion worked perfectly. Thank you!\nI spent a few minutes looking at how folks do the same thing using vanilla npm script running, and it looked much more syntactically messy. While the additional escaped quotes and curly braces etc. make the JSON a little less readable (which was the primary reason why I wanted to use npm-run-all) it reads much better than what I have seen when not using npm-run-all! \ud83d\ude06 \nAnyway, many many thanks for the help and for the awesome code! :octocat: \n. ",
    "pedroabreu": "I'm not able to pass down specific options to my child task\nIn this scenario:\n{\n  \"scripts\": {\n    \"from-cover\": \"run-s \\\"cover -- {@}\\\" archive --\",\n    \"cover\": \"node . cover\",\n    \"archive\": \"node . archive\"\n}\nif I try to execute npm run from-cover --try=1,2,3 it will evaluate to npm run cover -- \"1,123\" instead of npm run cover -- --try=1,2,3\nFrom the comments in this issue it seems ti should work like this \ud83e\udd14 . Managed to make it work. Was missing -- in my script call \ud83d\ude44 \nFor reference this is the correct script call:\nnpm run from-cover -- --try=1,2,3. ",
    "junejie": "Hi,\nI tried it but it dint work.\nNotes: A and B is a service (like mockserver and express )\nThe issue is it didn't execute the C.\n. I solved it. I created a http checker for it.\nand wait-on do a greate job. I dont event know wait-on exist.. @tobiastom  i just send it in background npm run test:server &. ",
    "rizowski": "@mysticatea \nI am actually seeing this behavior as well. In my case this only seems to be caused with eslint-watch. If I remove eslint-watch it exits like normal. Problem being, I have verified that eslint-watch is exiting correctly so it seems like the parent process (npm-run-all) is not. Here is the issue that I have been trying to solve: https://github.com/rizowski/eslint-watch/issues/80\nI can help with debugging this issue on OSX Sierra.. ",
    "jamietre": "So - I have spent some time dealing with the windows/CTRL+C issue and would like to help. There are actually other problems: in CMD shells CTRL+C will only kill the parent process. The child processes are detached and must be killed manually. I think most people use git bash, which may handle this better since it uses cygwin process model, but I use TCC/LE (a CMD replacement) and this comes up a lot. I hope nobody actually uses CMD itself, but that also is legitimate and will come up. This is actually a bug with \"npm run\" itself, too.\nSo - I have made changes to npm-run-all in my fork that solves this problem and ensures that CTRL+C will be trapped and correctly terminate the child processes. I would like to make a pull request, but I am concerned about the impact my changes would have on non-windows environments or possibly even use cases other than my own basic one (starting parallel tasks from command line).\nThe specific thing I'm concerned about is that in order for this to work correctly in windows, stdio needs to be \"inherit\" for the child processes. I'm not very familiar with process spawning in *nix compared to windows - and I don't really understand the purpose of detectStreamKind(stream, std) in lib/run-task.js. So maybe this could just be coded to always use \"inherit\" for windows O/S, but I suspect there's more going on here (e.g. different invocation mechanisms? ) and I was hoping someone could explain this part of the code.\nTo sum up the changes generally:\nThe basic issue in windows is that there's no actual SIGINT signal. So when dealing with child processes, any code that depends on propagating SIGINT won't work. (This includes node spawn). In order to actually capture SIGINT you need to listen on stdin for a SIGINT, and then manually terminate child processes. So - while the shell might correctly terminate the outermost process when you hit CTRL+C, the SIGINT signal doesn't actually do anything when sent to child processes.\nAdditionally, it is possible for the child process itself to receive the CTRL+C signal rather than the parent process (and I don't understand exactly why this is, but it's easily reproducible) so you also need to handle possible user-initiated terminations of a child process and treat it differently from the process just ending normally or with an error (e.g. - always do an \"abort\")\n. ",
    "julmot": "For me, most of the time CTRL + C doesn't even work when calling it multiple times. Need to exit the CMD and reboot sometimes \ud83d\udc4e . ",
    "cassiopagnoncelli": "Same problem on Mac OS high sierra. Capturing the signals and pass along to the children with 8s auto-exit timeout should solve.. ",
    "jbadlato": "Same problem for me using Git Bash/Windows 7.  CTRL+C doesn't abort the processes, and I have to manually end them in task manager. . ",
    "bobbwal": "Same for me too, Windows 10/Git bash, CTRL+C doesn't abort the processes and freezes up bash. Attempting to run browser-sync server and watch tasks, not sure if that is relevant.. ",
    "nulltask": "Thanks for your review, and congrats to release 4.0.0!. ",
    "Nighthawk14": "Hum why it is out of scope? That means we can't run some npm tasks as part of npm-run-all which is inconvenient. For example a classic use case would be to run build or some other tasks and then to use npm publish. At the moment we have to create a custom run-script to do the publish part. I don't see why npm-run-all could not be a global npm tasks runner, which would contains either run-scripts or built in tasks. Also I get that restart and env exists as run script but the real use case would be to have start and stop as well. . ",
    "igor-toporet": "Glad you have automated validation -- it definitely pays off :-). ",
    "Chalarangelo": "@mysticatea I would like to help add more colors, the question is what process do you use to test that the colors work on cmd.exe and have a proper fallback? I am reading through chalk to figure out a way to help with this.. ",
    "jantimon": "Okay actually the npm@4 way is a good approach although yarn is struggling to implement it. ",
    "AndyOGo": "I just tried same setup with cross-env, unfortunately with same results \ud83d\ude1e . I further investigated this issue and surprisingly found that it does not seem to be an issue with npm-run-all at all.\nTurned out that:\n- node-sass in combination with node-sass-import-once as the importer, does neither throw nor setting process.exitCode properly in case of an imported module can't be found - see: https://github.com/at-import/node-sass-import-once/issues/35\n- ~~even though I use webpack's bail option it does exit with code 0~~\n  related: https://github.com/webpack-contrib/karma-webpack/issues/66\n  https://github.com/webpack/webpack/issues/708\n  https://github.com/webpack/webpack/issues/3170\n- HappyPack hangs https://github.com/amireh/happypack/issues/133\nTo double check that npm-run-all does things right, wrote some small test scripts which throw at various posistions, namely first-line, within setImmediate callback and within setTimeout callback. All of them worked perfectly.... @mysticatea \nSorry for my wrong bug report.\nI could solve all issues by fixing/workaround above issues ... will close.. ",
    "eirikb": "I just realized that blunder as well, for this to work npm-run-all have to be the initiator, which would work, but it would render the sass and postcss tasks dependent on a npm-run-all task to start them (npm run sass wouldn't work).\nThanks for the answer! You are doing a great job with this lib, I use it all the time.. ",
    "serapath": "i don't know. I tried that, but for some reason there were so many complications and errors.\nIn theory i imagine that should be enough, but because it's connected to a TTY - it might be more complicated. I did not succeed finding an easier solution. Everything i tried to mute stuff didnt work.\nIn general i consider to build my own version of npm-run-all that i plan to call wireup.\nThe main reason behind it is - i want a cli-module that can be also used programmatically, that enables me to execute multiple processes (parallel and serial) and set up arbitrary ways in which i can pipe results between them.\nThe foundation regarding the command line usage that i plan is the module subarg which allows nested command line arguments following the same syntax as minimist ... but nested.\nIn my opinion, that would make it a lot more clear how command line options can be passed.\nI already was confused about the current option of --silent and --race which seem to not be group specific but global option unlike --parallel which seems to work on all tasks that follow after the option until the next --parallel or --serial appears.\nThe --mute option that follows a --serial/--parallel option is meant to affect the whole group.\nThe --mute opton that follows a task but preceds another group is meant to mute the last task.\nThat's how this pull request currently tries to work.\nYour proposal above would mean always the next upcoming task should be \"muted\", but what about a ...if a would be muted, then how could i mute the whole group?\n... i feel without something like using subarg (see above) passing group specific arguments  in general could be messy.\nThen - on the other hand - switching npm-run-all to use subarg (which is what i plan for my own module) - would be super awesome and adding the \"pipe feature\" would be even more awesome - but regarding the usage of the cli-api would probably be a breaking change.\n. I'm still interested in this pull request.\nI see that tests are failing, but I can update everything again. I'm just wondering about the proposal in general. Is that a wanted feature? :-). ",
    "codecov-io": "Codecov Report\n\nMerging #95 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster      #95   +/-\n=======================================\n  Coverage   91.59%   91.59%         \n=======================================\n  Files          22       22         \n  Lines         440      440         \n=======================================\n  Hits          403      403         \n  Misses         37       37\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 46cfd57...0fca0e0. Read the comment docs.\n. # Codecov Report\nMerging #101 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #101   +/-\n=======================================\n  Coverage   91.59%   91.59%         \n=======================================\n  Files          22       22         \n  Lines         440      440         \n=======================================\n  Hits          403      403         \n  Misses         37       37\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873f036...a8364ce. Read the comment docs.\n. # Codecov Report\nMerging #103 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #103   +/-\n=======================================\n  Coverage   91.59%   91.59%         \n=======================================\n  Files          22       22         \n  Lines         440      440         \n=======================================\n  Hits          403      403         \n  Misses         37       37\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94f1b64...5fbaa96. Read the comment docs.\n. # Codecov Report\nMerging #104 into master will increase coverage by 0.2%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #104     +/-\n=========================================\n+ Coverage   91.59%   91.79%   +0.2%   \n=========================================\n  Files          22       22           \n  Lines         440      451     +11   \n=========================================\n+ Hits          403      414     +11   \n  Misses         37       37\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/run-p/main.js | 93.75% <\u00f8> (\u00f8) | :arrow_up: |\n| bin/run-p/help.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/run-tasks.js | 84.84% <100%> (+2.08%) | :arrow_up: |\n| lib/index.js | 93.58% <100%> (+0.08%) | :arrow_up: |\n| bin/common/parse-cli-args.js | 90.8% <100%> (+0.21%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dff6409...f09358e. Read the comment docs.\n. # Codecov Report\nMerging #110 into master will decrease coverage by 0.93%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #110      +/-\n==========================================\n- Coverage   92.88%   91.95%   -0.94%   \n==========================================\n  Files          22       22            \n  Lines         464      460       -4   \n==========================================\n- Hits          431      423       -8   \n- Misses         33       37       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/match-tasks.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/run-task.js | 83.87% <80%> (-3.63%) | :arrow_down: |\n| bin/common/parse-cli-args.js | 90.8% <0%> (-2.46%) | :arrow_down: |\n| lib/index.js | 93.58% <0%> (-0.17%) | :arrow_down: |\n| lib/run-tasks.js | 85.07% <0%> (\u00f8) | :arrow_up: |\n| bin/npm-run-all/help.js | 100% <0%> (\u00f8) | :arrow_up: |\n| bin/npm-run-all/main.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43a6b16...f6d5b74. Read the comment docs.\n. # Codecov Report\nMerging #112 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #112   +/-\n=======================================\n  Coverage   91.86%   91.86%         \n=======================================\n  Files          22       22         \n  Lines         455      455         \n=======================================\n  Hits          418      418         \n  Misses         37       37\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/run-tasks.js | 85.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e83545...ca626b6. Read the comment docs.\n. # Codecov Report\nMerging #115 into master will decrease coverage by 0.16%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #115      +/-\n==========================================\n- Coverage   92.88%   92.71%   -0.17%   \n==========================================\n  Files          22       22            \n  Lines         464      467       +3   \n==========================================\n+ Hits          431      433       +2   \n- Misses         33       34       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/run-task.js | 86.56% <25%> (-0.94%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21c0269...66d6cdf. Read the comment docs.\n. # Codecov Report\nMerging #124 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #124      +/-\n==========================================\n+ Coverage   92.71%   92.73%   +0.01%   \n==========================================\n  Files          22       22            \n  Lines         467      468       +1   \n==========================================\n+ Hits          433      434       +1   \n  Misses         34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/run-task.js | 86.76% <100%> (+0.19%) | :arrow_up: |\n| lib/match-tasks.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c76db0e...4972be9. Read the comment docs.\n. # Codecov Report\nMerging #138 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #138      +/-\n==========================================\n- Coverage   92.73%   92.71%   -0.02%   \n==========================================\n  Files          22       22            \n  Lines         468      467       -1   \n==========================================\n- Hits          434      433       -1   \n  Misses         34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/create-header.js | 91.66% <100%> (-0.65%) | :arrow_down: |\n| lib/run-task.js | 86.76% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 52eaf86...1955f75. Read the comment docs.\n. \n",
    "shannonschaerer": "I forgot that sometimes I need to be more explicit. Duh! Thanks for your help!. ",
    "MB-Hilo": "you can use \"npx npm-run-all yourscript\"  as well. ",
    "ohtake": "I have the same issue with nodejs 6.10.3, yarn 0.24.5, and npm-run-all 4.0.2 on Windows 10 1607 64bit.\nUsing npm 3.10.10 instead of yarn works for me.. Using package.json you provided.\n```console\n$ yarn add --dev npm-run-all\nyarn add v0.24.5\ninfo No lockfile found.\n[1/4] Resolving packages...\n[2/4] Fetching packages...\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 64 new dependencies.\n\u251c\u2500 ansi-regex@2.1.1\n\u251c\u2500 ansi-styles@2.2.1\n\u251c\u2500 array-filter@0.0.1\n\u251c\u2500 array-map@0.0.0\n\u251c\u2500 array-reduce@0.0.0\n\u251c\u2500 balanced-match@0.4.2\n\u251c\u2500 brace-expansion@1.1.7\n\u251c\u2500 builtin-modules@1.1.1\n\u251c\u2500 chalk@1.1.3\n\u251c\u2500 concat-map@0.0.1\n\u251c\u2500 cross-spawn@5.1.0\n\u251c\u2500 define-properties@1.1.2\n\u251c\u2500 duplexer@0.1.1\n\u251c\u2500 error-ex@1.3.1\n\u251c\u2500 es-abstract@1.7.0\n\u251c\u2500 es-to-primitive@1.1.1\n\u251c\u2500 escape-string-regexp@1.0.5\n\u251c\u2500 event-stream@3.3.4\n\u251c\u2500 foreach@2.0.5\n\u251c\u2500 from@0.1.7\n\u251c\u2500 function-bind@1.1.0\n\u251c\u2500 graceful-fs@4.1.11\n\u251c\u2500 has-ansi@2.0.0\n\u251c\u2500 has@1.0.1\n\u251c\u2500 hosted-git-info@2.4.2\n\u251c\u2500 is-arrayish@0.2.1\n\u251c\u2500 is-builtin-module@1.0.0\n\u251c\u2500 is-callable@1.1.3\n\u251c\u2500 is-date-object@1.0.1\n\u251c\u2500 is-regex@1.0.4\n\u251c\u2500 is-symbol@1.0.1\n\u251c\u2500 isexe@2.0.0\n\u251c\u2500 jsonify@0.0.0\n\u251c\u2500 load-json-file@2.0.0\n\u251c\u2500 lru-cache@4.0.2\n\u251c\u2500 map-stream@0.1.0\n\u251c\u2500 minimatch@3.0.4\n\u251c\u2500 normalize-package-data@2.3.8\n\u251c\u2500 npm-run-all@4.0.2\n\u251c\u2500 object-keys@1.0.11\n\u251c\u2500 parse-json@2.2.0\n\u251c\u2500 path-type@2.0.0\n\u251c\u2500 pause-stream@0.0.11\n\u251c\u2500 pify@2.3.0\n\u251c\u2500 ps-tree@1.1.0\n\u251c\u2500 pseudomap@1.0.2\n\u251c\u2500 read-pkg@2.0.0\n\u251c\u2500 semver@5.3.0\n\u251c\u2500 shebang-command@1.2.0\n\u251c\u2500 shebang-regex@1.0.0\n\u251c\u2500 shell-quote@1.6.1\n\u251c\u2500 spdx-correct@1.0.2\n\u251c\u2500 spdx-expression-parse@1.0.4\n\u251c\u2500 spdx-license-ids@1.2.2\n\u251c\u2500 split@0.3.3\n\u251c\u2500 stream-combiner@0.0.4\n\u251c\u2500 string.prototype.padend@3.0.0\n\u251c\u2500 strip-ansi@3.0.1\n\u251c\u2500 strip-bom@3.0.0\n\u251c\u2500 supports-color@2.0.0\n\u251c\u2500 through@2.3.8\n\u251c\u2500 validate-npm-package-license@3.0.1\n\u251c\u2500 which@1.2.14\n\u2514\u2500 yallist@2.1.2\nDone in 8.86s.\n$ yarn run test\nyarn run v0.24.5\n$ run-s a\nyarn run v0.24.5\n$ node -p \"process.env.npm_execpath\"\nC:\\Program Files (x86)\\Yarn\\bin\\yarn.js\nDone in 0.23s.\nDone in 1.00s.\n$ yarn run test\nyarn run v0.24.5\n$ run-s a\n^C\n```\nrun-s a won't run in the second time. I hit Ctrl+C.\nI noticed that yarn run test runs successfully in odd time,\nand it fails in even time.\n\nnode 6.10.3 x64\nyarn 0.24.5\nWindows 10 x64 1607 14393.1198\n\nI also tested it on another machine, which installed older yarn.\nThe issue did not happen.\n\nnode 6.10.3 x64\nyarn 0.23.4\nWindows 10 x64 1607 14393.1198\n\nAfter upgrading yarn to 0.24.5, the issue was reproduced.. You can get yarn v0.24.5 at GitHub release.\nIt is not recommended to install yarn via npm.\nI also reproduced the issue with v0.24.3 and v0.24.4.\nI have not tested with pre-released v0.24.[0-2].. I also cannot reproduced the issue with PowerShell and Command Prompt on Windows 10.\nBut I can reproduced it with bash bundled with Git for Windows.\nI tested 2 versions of bash and both of them have the issue.\ngit version 2.11.1.windows.1\nGNU bash, version 4.3.46(2)-release (x86_64-pc-msys)\ngit version 2.13.0.windows.1\nGNU bash, version 4.4.12(1)-release (x86_64-pc-msys)\nThe terminal for bash is mintty, the default terminal of Git for Windows.\nIf bash is executed from cmd.exe, the issue does not happen.. Thank you for workarounds.\nDefining the alias or hitting enter key solves the issue.. ",
    "leggsimon": "I'm getting this as well but I'm not using npm-run-all, I think the issue might lie with node-sass but I'm not sure what exactly is throwing the error.\nEdit: Oh actually, maybe not according to this comment https://github.com/sass/node-sass/issues/2075#issuecomment-324344654. ",
    "timwis": "Thanks I'll give that a shot. For what it's with I tried setting the environment variable via the Docker compose file, and it reflected the result of which yarn.. Including --npm-path /usr/local/bin/yarn did the trick - thanks!. Although yarnpkg/yarn#2843 sounds like they'd patched this :/. ",
    "ntwb": "Thanks for the module @mysticatea \ud83d\udc4c \np.s. I was and still am debugging a Node.js 8 issue, so making sure any upstream modules work with Node.js 8 was the reason behind it \ud83d\ude04 . ",
    "Kinnardian": "This worked:\n\"start\": \"npm-run-all sass werun --parallel nodemon watch:sass\",\n    \"nodemon\":\"nodemon ./bin/www\",\n    \"sass\": \"node-sass ./scss/ -o ./public/stylesheets\",\n    \"watch:sass\" :\" node-sass -w ./scss -o ./public/stylesheets\",\n    \"werun\": \"echo 'we run'\"\nThe &'s were superfluous and it appears npm-run-all can only run scripts named in the package.json not just any shell commands/code.. ",
    "zeke": "Thanks, @mysticatea \ud83d\udc4d . ",
    "koba04": "Thank you!. ",
    "mmkal": "Yes. Don't know how I missed that!. ",
    "hugojosefson": "Thank you @mysticatea so much for your feedback!\nThat's a good idea to make sure the user knows what they are doing.\nI was also thinking that npm-run-all is very good at choosing yarn or npm, depending on how it was initially run. So it could be quite useful to be able to run commands too, if the commands are the same in npm and yarn.\nPreviously, I thought install was the only command that was the same and did the same thing in both npm and yarn, but now I see that for example publish is also the same command. I agree that it should be possible to distinguish between commands and run-scripts.\nHow about using for example command: as a prefix for commands, such as for example:\njson\n{\n  \"scripts\": {\n    \"install-sub-dependencies\": \"cd sub && run-s clean command:install\"\n  }\n}\nOr maybe even better by for example adding a specific argument to specify a command:\njson\n{\n  \"scripts\": {\n    \"install-sub-dependencies\": \"cd sub && run-s clean --command install\"\n  }\n}\nWould that be a good way forward?\nThanks for the consideration!\n/Hugo. ",
    "wyattjoh": "Yeah, we're using yarn with our project, 1.2.1 to be exact.. ",
    "buz-zard": "I'm having the same issue with yarn version 1.2.1:\njson\n{\n  \"name\": \"npmrunall\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"config\": {\n    \"msg_1\": \"message_c_1\",\n    \"msg_2\": \"message_c_2\"\n  },\n  \"scripts\": {\n    \"test0\": \"run-p test1 test2\",\n    \"test1\": \"echo $npm_package_config_msg_1\",\n    \"test2\": \"echo $npm_package_config_msg_2\"\n  },\n  \"devDependencies\": {\n    \"npm-run-all\": \"^4.1.1\"\n  }\n}\n17:03 $ yarn test0\nyarn run v1.2.1\n$ run-p test1 test2\nerror Command \"--npmrunall:msg_2=message_c_2\" not found.\nerror Command \"--npmrunall:msg_2=message_c_2\" not found.\nERROR: \"test1\" exited with 1.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n. ",
    "lostfictions": "Not sure how to increase the coverage here, sorry :(. Great! Any chance this could be included in a new release soon?. Great point! I guess npm-run-all doesn't support Node <= 0.10 so Map is safe to use. I've changed it in the latest commit.. ",
    "1000i100": "build:prodFolder:mk will not be catch by build:*\ni had to change it for build:prodFolder_mk to make it work\nEdit : build:** do the stuff.. ",
    "amclin": "I should clarify that this is locally installed to the project (not global install) and is being triggered from an npm command defined in package.json thusly:\n\"lint\": \"npm-run-all lint:*\". To help with troubleshooting, there are lots of other modules in .bin that use the require(\"../ pattern and are working successfully. But npm-run-all, run-p, and run-s are the only ones using the pattern require(\"../relative/file\")(\"module\") \nhttps://github.com/mysticatea/npm-run-all/blob/02e97675e3852aefd758d40fef366dc3be5b7aad/bin/npm-run-all/index.js#L13. @mysticatea thank you for the quick response\nBut I don't think this is an NPM problem. It only happens with this module (I pointed out how your module differs from every other one I've seen). It happens on multiple versions of Node/NPM (replicated with older versions as far back as Node 2.X) and I've seen it happening on multiple machines (the commonality is Linux instead of OSX). Reinstalling NPM, flushing caches, and reinstalling npm-run-all does not solve the issue.\nDropbox (or similar) filesync is not being used. Every machine is running a typical npm install to download and locally install the modules into the project workspace.\nI think you are depending on a module or pattern that does not consistently behave the way you think it does across all filesystems. Not all filesystem behaviors can be abstracted by Node/NPM.. Here are the warnings from NPM install (notice warnings only, no errors) - the only one I can discern that might be related are those for graceful-fs which npm-run-all appears to depend on.\n`\n08-Dec-2017 18:46:13 | npm WARN deprecated coffee-script@1.3.3: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen)\n-- | --\n08-Dec-2017 18:46:13 | npm WARN deprecated minimatch@0.2.14: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n08-Dec-2017 18:46:14 | npm WARN deprecated graceful-fs@1.2.3: please upgrade to graceful-fs 4 for compatibility with current and future versions of Node.js\n08-Dec-2017 18:46:15 | npm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n08-Dec-2017 18:46:15 | npm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue\n08-Dec-2017 18:46:15 | npm WARN deprecated coffee-script@1.8.0: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen)\n08-Dec-2017 18:46:16 | npm WARN deprecated coffee-script@1.7.1: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen)\n08-Dec-2017 18:46:32 | npm notice created a lockfile as package-lock.json. You should commit this file.\n-- | --\n08-Dec-2017 18:46:32 | npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules/fsevents):\n08-Dec-2017 18:46:32 | npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n`. @mysticatea I have totally stripped this down to remove all dependencies. The only module include is npm-run-all, which I am forcibly installing via URL to guarantee it's not coming from npm cache. No errors or warnings on npm install. There are no other modules beyond what npm-run-all includes, yet it still presents the error:\nhttps://gist.github.com/amclin/c0438a43682d3afbcb9e91e49101fa0b\n. Thanks for staying with this @mysticatea . When I run the command like that, it fails with the same error. I've been doing more digging now that I have the sysadmin for the server online and helping me. It does appear to be a disconnect where the npm install was run on one sever/location, and then the npm scripts run after that workspace was copied to a different server/location. We had initially ruled out stuff being moved around because the install and run steps were happening on the same box, but it appears we were wrong.\nThanks again for your support, I do appreciate it.. ",
    "mmojica53": "any updates? I am running with the same issue on AWS ElasticBeanstalk \nnpm --version\n2.15.11\nnode --version\nv4.8.5. ",
    "Enalmada": "I just tried this on beanstalk and failed.  \"concurrently\" also fails with a different error.  Then I tried @mysticatea suggestion of \"node node_modules/npm-run-all/bin/npm-run-all\" and it actually works on AWS Beanstalk.  I am passing beanstalk a zipped next.js directory that I have run npm install and build on...it runs fine with \"npm-run-all\" in the local directory.  For some reason AWS unzipping the directory and trying to run \"npm start\" on it requires \"node node_modules/npm-run-all/bin/npm-run-all\".  It would be amazing if someone could figure out what we can do to fix beanstalk knowing this...but at least there is a workaround for beanstalk users.. ",
    "mrozekma": "Don't think it applies to anyone who's commented so far, but note that this can happen if you've copied node_modules without preserving symlinks, so your .bin is full of scripts instead of links to scripts; then the relative path to ../common/bootstrap.js doesn't work anymore. ",
    "kublaios": "\nDon't think it applies to anyone who's commented so far, but note that this can happen if you've copied node_modules without preserving symlinks, so your .bin is full of scripts instead of links to scripts; then the relative path to ../common/bootstrap.js doesn't work anymore\n\n+1, this actually happened to me after I moved the project to another folder.. ",
    "IAMtheIAM": "Hey, thanks a lot!! it worked!\n```\n  \"install-msg:globals\": \"echo \\\"\\n\\n==============================================\\n\\n Installing Global NPM packages... \\n\\n==============================================\\n\\n\\\"\",\n\"install-msg:globals\": \"echo \\necho \\necho ==============================================\\necho \\necho  Installing Global NPM packages... \\necho \\necho ==============================================\\necho \\n\",\n```\nboth allowed the echo to output and not start a new command. Good to know that new line on bash means end of command.\nBut node -e console.log('\\n\\n==============================================\\n\\n Installing Local NPM packages... \\n\\n==============================================\\n\\n') failed with\n```\n\nnode -e console.log('\n\n==============================================\nInstalling Local NPM packages...\n==============================================\n')\nsh: syntax error: unexpected \"(\"\n```\nInteresting. Did I put that command wrong? I tried with and without quotes wrapping the entire console statement. Also, do you think this package makes it safer to use echo?\necho-cli. Thanks for all the help. Its working as I need now ;-)\nThis did work\nnode -e \\\"console.log('\\\\n\\\\n==============================================\\\\n\\\\n Installing Global NPM packages... \\\\n\\\\n==============================================\\\\n\\\\n')\\\". ",
    "jonaskello": "Having shorter labels would be really nice. Any progress on this?. ",
    "Siilwyn": "\ud83e\udd14 understandable, looking at redrun's code it doesn't seem that complex... but it probably doesn't fully emulate the npm run behavior.\nBtw. it's more like npm run is slow rather than npm-run-all.. ",
    "Asargiotakis": "Thank you for your help!!!. ",
    "erikkemperman": "The unrelated error I mentioned above just happened again on the Travis build:\nhttps://travis-ci.org/mysticatea/npm-run-all/jobs/334638286#L1010\nI'll try to close and reopen this PR to force a rebuild on Travis. Sorry about the noise in your inbox.... Ugh, now Travis passes but Appveyor fails. I'm going to leave this as it is, pretty confident that these errors are unrelated to my changes... Here is the commit history on my branch, please notice the green check marks :-)\nhttps://github.com/erikkemperman/npm-run-all/commits/special-chars\n. Cleaned up last two commits a bit, still CI fails here but works on my branch:\nhttps://github.com/erikkemperman/npm-run-all/commits/special-chars. @mysticatea\nThat\u2019d be great, thanks! There\u2019s no rush, I\u2019ll just npm link my fork for the time being.\nVery strange about those tests, I couldn\u2019t reproduce the problem locally so I\u2019m not sure what is going wrong. It was the same test that failed every time though.... Thanks for review and merge!. @mysticatea Would you consider making a release with this change in? I'm just about ready to do an initial release of the project where I am using this.. @mysticatea Sorry to bother you about this again, but would you please consider making a new release with this fix in it? Thanks!. @mysticatea Looking forward to it. Much appreciated, thanks!. @sebinsua \nCan you try with the master branch? I ran into something similar before and submitted a PR that was merged. See https://github.com/mysticatea/npm-run-all/commit/35f86ae8e613a853ce9acffc3b2a49552e31ee62#diff-b43628fb05fb9c145424caff92dc9fc6.\nYou can also try putting the pattern in quotes, I believe node-shell-quote then should leave it alone.. ",
    "francoismassart": "I have kind of the same scenario here...\nMy employer has around 20 websites in 20 repos.\nIn order to avoid to duplicate the \"default/basic npm scripts\", I made a private npm module which group the most common tasks with their default settings into a basic CLI...\nIn my private npm module's package.json I have few script that I'd like to call from my CLI source code...\nBut the only scripts found from within my CLI are the one located in the package.json of the current website, not from the package.json of my CLI utility...\nIs there a way to do this ?\nIt would be great to be able to run tasks in parallel.\nThank you. I was able to make it work by performing a \nprocess.chdir(\"./node_modules/company-private-tools/\");\nbefore calling\nrunAll([\"clean:site\", \"clean:common\"], {parallel: true, stdout: process.stdout});\nHope it helps others.. ",
    "ArmorDarks": "Well, that's hacky solution, and the solution itself only partially related to this issue.\nAlso, note that doing process.chdir() on occasion can break a lot of things if something runs in parallel and relies on it.. ",
    "IllusionMH": "You can try\n\"foo:1\": \"ng build foo1\",\n\"foo:2\": \"ng build foo2\",\n\"foos\": \"npm-run-all \\\"foo:* --enviroment=staging\\\"\". ",
    "JaneSmith": "Tested this same setup with parallelshell instead of npm-run-all and it works fine. I guess I'll just use that instead for now.\n\"watchimg:a\": \"cpx ./source/assets/images/** ./publish/assets/images -v -w\",\n\"watchimg:b\": \"cpx ./source/themes/01/assets/images/** ./publish/themes/01/assets/images -v -w\",\n\"watchimg:c\": \"cpx ./source/themes/02/assets/images/** ./publish/themes/02/assets/images -v -w\",\n\"watchimg\": \"parallelshell \\\"npm run watchimg:a\\\" \\\"npm run watchimg:b\\\" \\\"npm run watchimg:c\\\"\",\nThis prints out \"Be watching in ...\" for all three directories, and changes to all three directories work properly. npm-run-all just doesn't work right.. ",
    "CxRes": "@mysticatea I am sorry, but I seem to have made a mistake. I looked back into my shell history in the morning and found that the example I have been using was more similar to this:\nnpm run build --foo bar -- baz --cuux\nand my output is:\n```\n\nnode ./scripts/a \"bar\" \"baz\" \"--cuux\"\n\n[ 'bar',  'baz',  '--cuux' ]\n```\nAs you had seen I had missed the -- and that was what had confused me. However, I also think why that might have left me confused. npm run seems to pass the undashed bar argument before the double dash. I wonder if this is the way shells work or if this a bug in npm run. I say this because npm run doc categorically states that it passes arguments only after the -- argument. What do you think?\nAs for env:\nI am on node 8.9.4(LTS), npm 5.6.0, Windows 10 Pro x64. Filed a bug with npm: npm/npm/issues/19898. ",
    "CPatchane": "Hi here,\nI confirm, I got this issue when using the latest versions of Yarn since the v1.\nThere are no way to pass arguments to the task now from the terminal.\nFor now, we still have to use these arguments in scripts and wrap them with the script between ' or \".\nHere an example:\n\"scripts\": {\n    \"clean\": \"rm -rf build/*\",\n    \"commons:build\": \"yarn webpack build\",\n    \"lint:js\": \"eslint '{src,test}/**/*.{js,jsx}'\",\n    \"build\": \"npm-run-all --serial clean lint:js 'commons:build --production'\"\n}\nRun yarn build will correctly end with yarn webpack build --production. But there is no way to do it directly using the command yarn build --production even if I use the -- before (I will get an error for invalid arguments from npm-run-all).. ",
    "bcomnes": "Its very unfortunate yarn has decided to diverge on behavior here.. ",
    "pushred": "I had a similar issue where I needed a build file to be generated before a server started and the recommendation in #123 to use wait-on solved this perfectly\ud83d\udc4c . ",
    "yogeshgadge": "Thank you @pushred\nWill use wait-on. ",
    "kdambrauskas": "Yes, all of them are .then .catched\nin run.task.js\ncp.on(\"close\", (code) => {\n            cp = null\n            resolve({ task, code })\n        })\n\"child\" npm-run-all script\n(which correctly stops further script execution and returns code: 1, when is started 'directly' with npm run \"child\"),\nreturns code 0, when is called from inside another npm-run-all script.\nMy approach is somewhat like this, i've nested run-alls.\nhttps://github.com/kdambrauskas/npm-run-all-example\nnpm run a-error-c error\nnpm run all success. @BobbyBabes thank You very much for your time and help. I was unaware that I needed to stop node process. Have a nice day :}. ",
    "jorgebucaran": "It errors in Node.js v9 so I downloaded and tried v9.0.0 and v9.11.2 but couldn't reproduce the error. I am not sure what else to do as I am not familiar with the large number of tests in this repository. Do you have any pointers as to how fix the build error? \ud83e\udd14 . @mysticatea Turbocolor was renamed to colorette. I haven't updated this PR due to lack of response, but I'd be happy to update it if there is interest in the swap. . @TehShrike Thanks, I'll open a new PR instead. . ",
    "whymarrh": "https://github.com/kimmobrunfeldt/concurrently/issues/155 is a similar issue with concurrently. ",
    "amilajack": "Not sure why this is failing. Any ideas? My guess is race conditions\nhttps://travis-ci.org/mysticatea/npm-run-all/jobs/425831373#L1906. ",
    "estoel81": "Is there some progress on this feature?. Thank you, but i'm using it differently.\n\"pretest:integration\": \"webdriver-manager update\",\n\"test:integration\": \"run-p test:integration:*\",\n\"test:integration:student\": \"run-s test:integration:student:*\",\n\"test:integration:student:desktop\": \"ng e2e student-integration --webdriver-update false\",\n\"test:integration:student:tablet\": \"ng e2e student-integration --webdriver-update false --protractorConfig test/integration/protractor-tablet.conf.js\",\n\"test:integration:student:mobile\": \"ng e2e student-integration --webdriver-update false --protractorConfig test/integration/protractor-mobile.conf.js\",\n\"test:integration:teacher\": \"ng e2e teacher-integration --webdriver-update false\",\n\"test:integration:preview\": \"ng e2e preview-integration --webdriver-update false\",\nIt would be nice to set an interval between parallel jobs. Do you think thats possible?. ",
    "antoniokaplan": "Travis should be working now. ",
    "jagretz": "These are two solutions using cross-env-shell which is part of cross-env\nbash\n\"env:prod\": \"cross-env-shell NODE_ENV=production\",\n\"build:a\": \"cross-env-shell npm run env:prod npm-run-all a b c\"\n// or\n\"build:b\": \"cross-env-shell NODE_ENV=production npm-run-all a b c\". ",
    "wujekbogdan": "@jagretz \nThanks, I'll check it out. . ",
    "jaydenseric": "To know if your project is in danger, run:\nnpm ls event-stream flatmap-stream\nThe bad actor has publishing rights to event-stream and flatmap-stream contains the malicious code (specifically flatmap-stream@0.1.1, but any future version can't be trusted).\nHere is an example result from one of my projects:\n[redacted]\n\u2514\u2500\u252c npm-run-all@4.1.3\n  \u2514\u2500\u252c ps-tree@1.1.0\n    \u2514\u2500\u252c event-stream@3.3.6\n      \u2514\u2500\u2500 flatmap-stream@0.1.2. ",
    "XhmikosR": "@mysticatea Maybe try replacing the unmaintained ps-tree with something else like https://github.com/sindresorhus/fkill?. Hmm, maybe it's not wise to have released it as a minor bump if if 4.1.4 is buggy?. ",
    "indexzero": "FYI ps-tree@1.1.1 locked to event-stream@3.3.4 (which if I read the thread correctly pre-dates the questionable changes). \nThanks to folks for bringing it to my attention: https://github.com/indexzero/ps-tree/pull/34. ",
    "code-for-coffee": "@mysticatea thank you so much for being on top of this issue.. ",
    "stevensacks": "Whoops wrong package. ",
    "deniaz": "We're now even seeing errors in our CI pipeline since flatmap-stream was removed from the registry:\nnpm ERR! code E404\nnpm ERR! 404 Not Found: flatmap-stream@0.1.1\nEdit: nvm, see below.. ",
    "isnifer": "@jeremyrajan just upgrade to 4.1.5. ",
    "jeremyrajan": "yup that works @isnifer! thank you \ud83d\udc4d . ",
    "whomwah": "Sorry \ud83d\udc4d . ",
    "darklingChaz": "Cheers! . ",
    "codecov[bot]": "Codecov Report\n\nMerging #156 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #156   +/-\n=======================================\n  Coverage   92.94%   92.94%         \n=======================================\n  Files          22       22         \n  Lines         468      468         \n=======================================\n  Hits          435      435         \n  Misses         33       33\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5017a88...223237a. Read the comment docs.\n. \n",
    "mathiasrw": "Ahh - good point. I had not checked that. Thanks anyway for a great library. . ",
    "GuyMograbi": "Sounds right.\nIn version 3.1.2 it works great.\nI downgraded back to it.\nOn Sat, Dec 29, 2018, 6:03 AM Toru Nagashima <notifications@github.com\nwrote:\n\nnpm-run-all finds the command which runs npm-scripts by the environment\nvariable NPM_EXECPATH. The problem looks that lerna sets NPM_EXECPATH by\nitself but it doesn't compatible to npm run command. Would you confirm\nthat?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mysticatea/npm-run-all/issues/158#issuecomment-450495307,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AARihyfUZuOsahV8EMVdLPJ7Pgu-wPsRks5u93YcgaJpZM4ZkXYp\n.\n. I disagree. The feature where you read \"silent\" and blindly pass it along\nto lerna is not lerna's problem.\n\nOn Sat, Dec 29, 2018, 5:59 PM Toru Nagashima <notifications@github.com\nwrote:\n\nOK, so I recommend to open an issue on lerna repo. I'm closing as not\nproblem in this repo.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mysticatea/npm-run-all/issues/158#issuecomment-450533991,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AARih3bgedfgY-vQTY89crHJkWzfKXqWks5u-B4TgaJpZM4ZkXYp\n.\n. @mysticatea more so, I don't understand the motivation behind reading \"silent\" from config. \nif npm is configured to be silent, why do you need to explicitly send --silent to the command line? \n\nShouldn't the configuration just find its way to the spawned npm?\nThis behavior was changed in npm-run-all and it is not clear why.  . @mysticatea the release notes does not explain why you add --silent explicitly. \nloglevel is set to silent through .npmrc. \nWhy does npm-run-all decide this justifies a flag in the command line? \nI opened a bug in lerna, but I still think it's not their problem. \nsee lerna bug at: https://github.com/lerna/lerna/issues/1842. ",
    "ezpuzz": "https://github.com/mysticatea/npm-run-all/blob/52eaf86242ba408dedd015f53ca7ca368f25a026/lib/run-tasks.js#L133\nneed to wait for output to be flushed here. ",
    "ivancuric": "Is there any way npm-run-all can help with avoiding the log? Eg, replacing the || hack?. ",
    "Halfist": "@mysticatea, it works, thank you very much!. "
}