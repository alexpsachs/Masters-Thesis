{
    "daredevildave": "I've checked in a fix e3447cbf, which will let the build process complete. It still prints a warning about a  missing hg repo though, so I'll tidy that up later.\n. Which OS? Chromium on Mac seems to be fine.\n. Can you change the message about missing mercurial repo to a warning instead of an error as it does actually complete the build process.\nApart from that, it looks good.\n. Thanks, @b1naryth1ef that's all working fine now. I'd like to merge it.\nCan you fill in our CLA here: https://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\nThis protects the Engine from copyright issues.\n. Thanks,\nI'll pass this on to @willeastcott as he's master of the Math lib, but I will say that mulScalar is the same as .scale().\n. Thanks for the PR, but in the interest of keeping the Vec3 API minimal we won't be merging this.\n. Hmm, I'd forgotten we actually had phantomjs tests. They've been sadly neglected as I could never get them working in a headless way.\nWe currently run tests manually by loading all_tests.html in a browser.\n. No longer required. Covered by Sound Component.\n. Definitely sounds interesting. We're always interested in speed boosts. Though I'd worry about how hard to debug it would make things.\nI've tried running the sample and I get: \nUncaught TODO: get parameter 34467 : COMPRESSED_TEXTURE_FORMATS :8000/webGLWorker.js:511\nYou might want to try the No Framework example which uses less of the entity component system, so there is less to go wrong.\nhttps://github.com/playcanvas/engine/blob/master/examples/load_model/no_framework.html\n. Thanks for the update. I'd like to merge this. \nCould you complete the Contributor License Agreement here: https://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\nThis protects the Engine from copyright issues.\n. Fixed in e8439ee54c793ace3d0290ab8039dc258c0e908c\n. This is fixed in https://github.com/playcanvas/engine/commit/5e3691239254b81adc589891cbcd7759220d7d1a. \nThere is a slight change to behaviour. We now explicitly default materials with opacity=1 and no opacity map to BLEND_TYPE_NONE. If the opacity is changed in the designer the blendType will be updated to BLEND_TYPE_NORMAL (transparent). We will never automatically change the blend type back to NONE and we will not update the blend type if you change the opacity in code. \nThis should behave as expected in most circumstances. If you need to change the opacity to non-1 in code, you will need to make sure you explicitly set the blendtype to NORMAL as well.\n. Fixed in 176a0a75a388b72dca862f3424795a56b9bc982a\n. Generally speaking anything included in the API reference is the public API. The API docs are automatically generated from the stable branch, so should always match the current latest engine.\nRegarding internal code:\nPrivate methods/vars should be be prefixed by _\nWork-in-progress functionality may be included, but should not be documented.\nReleased code should always be documented and included in the API reference.\nI'm working on a CONTRIB file which will include details of how to submit patches and I'll include a coding standards section in that too.\n. Added a contributor file.\nAnything else we can add to help here?\n. There is now a gamepad example:\nhttps://github.com/playcanvas/engine/tree/master/examples/input/gamepad. Thanks, I'd like to merge this change.\nCan you please fill in the CLA here: https://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\n. Sorry, this has taken a while to get to. I'm trying to look at this now.\nOne potential problem is how script attributes handle multiple script definitions in the same file. I need to download and test this stuff out. And how it interacts with the designer.\n. Added extras dir to playcanvas.github.io repo\n. @cabbibo can you explain a bit more?\n- What do you mean by analyze?\n- Can you give an example use-case of sync audio within loops?\n. New Sound Component and Sound API is awesome!\n. Once this is merged, I think we should be able to optimize out a lot of the collision flags stuff in the main rigidbody update loop.\nWith this code all types (dynamic, static, kinematic, triggers) are on separate layers. So we shouldn't need to do all the checking that we were doing before.\n. There is a short integer for the mask. First 5 are defined by engine. Leaving 10 user definable.\nRIGIDBODY_GROUP_NONE: 0,\n    RIGIDBODY_GROUP_DEFAULT: 1,\n    RIGIDBODY_GROUP_STATIC: 2,\n    RIGIDBODY_GROUP_KINEMATIC: 4,\n    RIGIDBODY_GROUP_TRIGGER: 8,\n    RIGIDBODY_GROUP_ENGINE_1: 16,\n    RIGIDBODY_GROUP_USER_1: 32,\n    RIGIDBODY_GROUP_USER_2: 64,\n    RIGIDBODY_GROUP_USER_3: 128,\n    RIGIDBODY_GROUP_USER_4: 256,\n    RIGIDBODY_GROUP_USER_5: 512,\n    RIGIDBODY_GROUP_USER_6: 1024,\n    RIGIDBODY_GROUP_USER_7: 2048,\n    RIGIDBODY_GROUP_USER_8: 4096,\n    RIGIDBODY_GROUP_USER_9: 8192,\n    RIGIDBODY_GROUP_USER_10: 16384,\n. @vkalpias having every type in a different group means it's easy to disable individual types.\ne.g. triggers don't register other triggers. static doesn't register other static. \nCurrently Kinematic register with all but we (or user) might want to change that to skip other kinematic/static?\nPlus Bullet defines the default, static, kinematic and a few others so I've matched those with pre-defined engine ones.\n. Released in v0.163.0 becde67cf2c30e1794a6e43d3359473dfd4940fc\n. We've streamlined the Entity/Component API in the latest release.\nNow the code looks like this:\njavascript\n    var entity = new pc.Entity();\n    entity.addComponent(\"camera\");\n    entity.addComponent(\"light\", {\n        type: \"point\"\n    });\nMuch better!\n. I believe the thinking behind it was that getPosition() is self explanatory. I.e. it returns the position. getLocalPosition() is a specialised version to get the local position.\nPersonally I don't think there is much to gain from changing this.\n. So, I originally my had app.createEntity(). But it just calls new Entity(app) internally. So I removed it. \nThe reason we need to pass in app is because it needs access to the component registry. So we have to move that into scene for those options. I'm not really a fan if that.\n. On reflection. Possibly the Entity only needs the component registry so passing in the app could be over kill.\n. In this PR context is replaced with app, but principle remains:\napp.scene.createEntity()\nUnless we provided additional argument to script callback to provide the scene as well.\n. Pinging everyone again on this:\nCurrent status is:\nvar entity = new pc.Entity(); // optional `app` argument, use default \"current\" application if not provided\nentity.addComponent(\"light\", {\n    type: \"directional\",\n    color: new pc.Color(1,0,0)\n});\napp.root.addChild(entity);\nThis shouldn't break any existing projects. I'd like to merge this if there are no more objections.\n. Assuming approval I will update readme and examples.\nOn 13 Feb 2015 20:19, \"moka\" notifications@github.com wrote:\n\nThat is huge improvement.\nCan we update README too?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/136#issuecomment-74319941.\n. Hi,\n\nYes, PlayCanvas is compatible with FirefoxOS.\nIn general when targeting low-end platforms you should avoid CPU/GPU expensive features like: real-time shadows, dynamic lighting, physics.\n. See https://github.com/playcanvas/developer.playcanvas.com/issues/16\n. Yes. Building the engine runs the closure compiler which requires Java.\n. Currently app.root and app.scene.root are different.\nIt is possible to load multiple scene hierarchies into the application. Each one gets added to app.root\n- root\n  - scene 1 root\n  - scene 2 root\nI concede that it is natural to assume app.root is the root of the scene, but only if you are working with a  single scene. My feeling is this should remain as is.\n. Fixed now?\n. Does this produce the same results for the same input as Mat4#setLookAt()?\n. Mat4.setLookAt is used all over the place, so I'm pretty sure it works. It looks down negative z.\n. Looks like your view matrix is wrong. In scene_forwardrenderer we do this:\n```\n        // ViewInverse Matrix\n        var pos = camera._node.getPosition();\n        var rot = camera._node.getRotation();\n        viewInvMat.setTRS(pos, rot, pc.Vec3.ONE);\n    // View Matrix\n    viewMat.copy(viewInvMat).invert();\n\n```\nYou need to invert your view matrix.\n. It's called a fragment shader in WebGL right? Stick with that terminology\n. It's called fragment shader everywhere else in the engine. Search engine for \"fragmentshader\" and \"pixelshader\"\n. one application === one canvas\n. That's correct. \nThe client engine that covers rendering, animation, input, audio, entity/component system, etc, is open source in this repository.\nThe playcanvas.com website, including the Editor tools are not open-source.\n. Is this solved with camera.frustumCulling property?\n. Marking this as closed as camera's support culling. Suggest we add new ticket for additional features.. Fixed with immediate mode rendering\n. Fixed by new resource loader.\n. pc.inherits has been deprecated in favor of Object.assign. Sure. I think we should internalize this API. We're not making a general purpose JS lib, I don't want to be supporting string methods, etc.\n. pc.string.format is super-useful...! Maybe not in engine though.\n. sounds good, can we get this fixed as this will be visible with the new deploy.\n. This is almost certainly a hardware limitation. Most keyboards can only detect limited keypresses (plus modifiers)\n. http://gaming.stackexchange.com/questions/6669/how-do-i-remove-the-limit-on-pc-keyboard-button-presses\n. Hey, this looks good. Can you convert tabs to spaces and fill in the CLA here: https://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\nThen we can merge.\n. We no longer error with missing texture, we just wait for it to load,\n. I feel like this is probably covered by the Layer System. If not it's now out of date so a newer and more specific issue should be opened.. I think that sounds reasonable. I'd probably add an new option to the AssetRegistry to append a prefix to the asset url.\nThis would assume that all assets are based in the same location.\n. What is the format of the cubemap json and how to I generate one?\n. When loaded from the editor, cubemaps reference textures by asset id. When they are downloaded for use outside of the editor (as a json file) they reference textures as a relative path. \nThe resource handler needs to support path-based cubemaps which it doesn't at the moment. \n. I'd like to peruse this changeset, but it's difficult with all the changes to whitespace. Is it possible to fix that first?\n. Chrome team are aware of the issue:\nNote 4: https://code.google.com/p/chromium/issues/detail?id=470894\nNexus 6: https://code.google.com/p/chromium/issues/detail?id=498947\nBoth are driver bugs which have been fixed, but are slow to be rolled out. \nThis Chrome update should fix some issues with Note 4 and S6: https://code.google.com/p/chromium/issues/detail?id=512992\n. Looks great. Can you fill in our contributor agreement and I'll merge: https://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\n. Sorry for the delay, merged. Thanks!\n. See Layers. Fixed in 8e91a8f037bd32af58b497bdb546f8c9c25b484a\n. Yep fixed in new sound component use entity.sound.startTime\n. Why is this expected behaviour? The material is an asset. We don't clone assets when we clone entities.\n. Updated to include latest. We should merge this before it gets stale again. @Maksims @vkalpias \n. Sorry, @PsichiX you need to complete the form completely. \nIt's important to protect the library from claims by any third-party and ensure that the engine license can be maintained into the future. I realize that it's a bit of a pain, but it's a legal necessity.\nYou can be assured that any data provided is confidential and will not be shared.\n. Thanks for the PR, but this is no longer required. As it is covered in the new Sound Component API.\nhttp://developer.playcanvas.com/en/api/pc.SoundComponent.html\n. No longer applicable. :tada:\n. Use core/platform.js. Fixed in 3b8dc59b379d337e16b6237d48af30dfa43c3599\n. Fixed in 72fc5b05cc5302c373d4ce6cff0630847f045dee\n. Fixed in 02ad80427a38ac9832be7b7a0f941474082533db\n. Fixed in c5831800f1650c7a25253070747f5de12263c084\n. @willeastcott @guycalledfrank\n. No particular problem with having visible instead of hidden.\nBut there is an issue with making it a property on the model component. In the current implementation the model has no readable visible value.\nConsider:\n``` javascript\nthis.entity.model.visible = false;\nthis.entity.model.model.meshInstances[0].visible = true;\nvar visible = this.entity.model.visible; // what it this returning?\n```\nDo we iterate all meshInstances to determine if it's visible? This isn't very optimal. There isn't an easy way to cache a value as users can modify meshInstances directly.\nWith show() and hide() methods users are forced to manage the state themselves, but it's then at least they will know if any cached value is valid.\n. For castShadow we have the same issue. There is a property on the component which may not match the property on all mesh instances. \nmodel.castShadows is exposed in the editor though, so we have to have a property on the component.\nIn this case, I don't intend to have this exposed in the editor.\n. I like the idea of adding a parent component to combine meshes. But doesn't it have the same problem? You can still have two children that are 1000m apart.\n. Actually, it's a bit more complicated than this change. I'll fix it later on with a update.\n. This issue is too vague and now outdated due to multiple engine changes and memory leak fixes. \nIf there is a specific problem project please open a new ticket with repro case.. Thanks Aidin for the very thoroughly researched PR :-) We encountered a similar issue when looking into supporting audio streaming assets. So I'm aware of the problem. \nThat said I have a few problems with this PR.\n1. asset.file is a specific format and I don't think it is the correct object to pass around in this case. asset.data is general asset data (format defined by the asset type) and would probably be a better fit.\n2. The resource loaders are designed to be independent of the assets system until the \"patch\" method. This is so that users can use a simple call to app.loader.load(url, type, callback) and load resources without the boilerplate of creating assets. I'd like to keep that.\n3. I would always keep the callback as the final argument. This would require a check in the function to skip the missing argument but I think the exposed API is nicer.\nAs I see it, the main issue with the resource loader is that for a given combination of asset type and file url/extension. There is no way to indicate different loading methods.\nIn terms of your use-cases:\na. We're are planning to support \"asset variants\" for texture formats and LODs. It's not completely clear at the moment whether these would all be a single asset (1 id/url, 1 data block) or multiple assets (many ids/urls, many data blocks). For example, different texture formats can already be loaded differently as their URLs/extensions differ. Though this doesn't work for LODs. But if we add passing in asset.data, then we need to store all the information about variants in asset.data. Which I'm not sure is correct.\nb. I see no reason why procedural resources couldn't be created with the existing system. It would require a new asset type and handler combination, but it should all work.\nc. This is a valid case for adding additional information to the load request. This probably shouldn't be stored in asset.data though.\nd. This is also a valid case for adding additional information to the load request. It depends on your circumstances, does this data belong in asset.data?\nSo..., my feeling is we need to figure out how asset variants are going to work. @Maksims has been thinking most about this. Then if it still makes sense we many need to pass asset.data into the Handler.load method. Which would allow assets to specify particular methods of loading.\nAside: the asset.file.url field should support absolute URLs. This is a separate issue though, perhaps you could raise an issue for that?\n. Fixed in #1373 . Thanks, I'm going to check this out just need to find the time to test it :-)\n. Updated again today\n- moved text and image components into element component\n- loads of other fixes and additions including proper support for anchors\nI'm going to merge this as a \"hidden beta\" later on today unless anyone objects.\n. See this project: https://playcanvas.com/project/415342/overview/particle-cloning-test\nRun and press space twice.\n. This is now deployed.\n. Note, implementation referenced in #717 doesn't work. We'll have to do something more \"proper\"\n. Fixed in #1124 . After this issue, I got thinking about this. \nSo first off, we do have official builds on code.playcanvas.com. All builds are there, including the most recent stable as playcanvas-stable.min.js and the latest master as playcanvas-latest.min.js. However, we don't list these anywhere.\nThere are a few options:\n1. Create an index page for code.playcanvas.com that links to all the versions so people can find them.\n2. Check builds into the main repo. I don't really like this as we create builds almost daily and it just feels like bloating the repo.\n3. Check builds into another repo. e.g engine-builds\n4. Publish builds to npm.\n5. Several of the above.\n. fixed in d18b23757b267f8dc7dc1fb0d271a8b566d93048\n. Well, I think users should be using the application API resizeCanvas or setCanvasResolution. This can respect device pixel ratio.\nIf i'm setting the resolution of the graphics device and call resizeCanvas(100,100) then have the canvas resolution reported as (200,200) is a bit surprising...\n. I'm not suggesting the graphics device calls app code. I'm suggesting the graphics device doesn't need to know about device pixel ratio. That calls on the graphics device to resizeCanvas set the canvas resolution to the size specified.\nRegular users would use the application level calls to set resolution (then they don't need to worry about device pixel ratio). \nIf you are using graphics device level code and you set the resolution I think it is reasonable to expect that you want the resolution to be exactly what you specified.\n. When presenting VR we now set a flag on the application to disable resizing.\n. See also #644.\n. The component system core is one of the older bits of the engine and could definitely do with some love. Happy to see changes that improve the speed. \nOne thing of note. The newer components like, new scripts, zones and elements don't use the ComponentData object and instead store all data directly on the component. I would love to refactor all components to remove the data object. At the moment it is just adding additional overhead. This would probably also solve your problem as accessors would be created directly on the components.. Fixed by #792 \n. Layer system seems to address this. For any additional features please open a new issue.. Yes, glTf load would go in the same place.\nThe obj parser is not included in the engine (it's not in the dependencies list) because it is not necessary for developer's to use this (obj's should be converted into json via the Editor pipeline). I would probably go the same path with glTf unless we plan to make glTf files available as runtime assets from the Editor.\n. I don't believe this is a problem anymore.. First of all: thanks for the big PR it's great to see massive improvements like this coming in from users.\nHowever, (and I'm sorry for being on downer on what looks like a lot of work) for future changes I would recommend starting the conversation with an issue before embarking on a whole load of work as this would prevent doing lots of work which may not get used. In particular this PR covers the screen and element API which is currently still in development and not public and seems to cover some things that we already have designs for but have yet to implement. \nIn addition, I think this change should be split into multiple PRs covering different features each of which could have been discussed in an issue initially. It's a lot of work to review a PR this big and changes will be included into master more quickly if they arrive in smaller chunks.\nI've not had a chance to properly look at through it but my initial thoughts and questions.\n\nI don't understand why you need to add the \"corners\" this property? Local Position (x,y) is used to offset an element from the anchor. \nTo implement corners you seem to have re-implement much of the sync function and pivot point code. Again, I'm not sure what you were trying to achieve and what didn't work?\nI don't believe we should have any debug rendering code in the engine.\nIt looks like you've implement 9-slicing in the standard material fragment shader. My plan was to implement this in the asset (either the texture asset or a new asset type). This makes more sense as then you can share this data between multiple buttons. The UV set up would be done by at mesh creation stage rather than in the fragment shader. i.e. instead of a quad, the mesh for an image would be 9 quads.\nPointer Events should definitely be a separate pull request and TBH I would implement this as a patch at application level first to figure out exactly what is required before this makes it into the engine.\nDocumentation was intentionally left out as the API is not finalized yet and documentation is built automatically. All docs should be marked \"@private\" until the API is final.\n\nSo to summarize:\n\nCamera screen could be a separate PR. I had intended to implement this soon but happy to review a PR.\nMasking should also be a separate PR. I defer to @guycalledfrank as to whether this is how it should be done.\n9-slicing is done in a way that I wouldn't do it. I'm open to suggestions but my feeling is this not how we should implement it.\nPointer events should be a separate PR. There is quite a lot of design discussion to have before implementing this though. \nCorners and changes to pivot point seem unnecessary unless I've missed something?\nDebug color should be a user script in application not in engine.\nDocumentation should be labeled @private\n\nAgain, sorry if these seems like a dismissal. It's not, it's great to get submissions like this. But reviewing a 20 file PR is a lot of work and I would have suggested approaching it in a different way if it had been mentioned up front.\n. I believe you can accomplish all this already using the left/right/top/bottom properties.\nIn your example something like this:\nthis.entity.element.anchor = [0,0,1,0]; // minX = 0, maxX = 1\nthis.entity.element.height = 100;\nthis.entity.element.left = 10;\nthis.entity.element.right = 10;. Sorry, I'm not back into the office until next week. So I'll be taking a proper look then.\nPerhaps we are working from a different basic idea, but I don't really understand your suggested changes. \nWith respect to pivot and localPosition. You say: \"how do I modify localPosition once pivot is set?\" In the current system, the local position is the position of the pivot point with respect to the parent. To position an element you just call setLocalPosition(). If you move the pivot the then local position is unchanged, but the element moves (for example if I move pivot from left edge to right edge an image element would move left by one width).\nChanging the values of \"left\", \"right\", \"top\" and \"bottom\" changes the width, height and local transform. Imagine the pivot point is on the left edge, and I change the value of \"left\". By definition the local transform must change because the left edge (where the pivot point is) has moved. How do you propose separating pivot from position?\nThere are 5 properties which define an element's size and position: x,y,z (local transform), width and height. The corners or left, right, top, bottom can all be expressed in terms of these properties.\nAnd by the way, as I understand it. The existing system is very similar to Unity's UI already?. OK, I've been looking into this a bit more.\nUsing corners property and using that to calculate width/height could make sense. Though in your example (no parent) your code has invalid width and height so it's seems to just trade one issue for another.\nI'm still not sure if I'm missing the point of your suggestion around pivot point, but I'm still pretty confused over what you gain.\n\nThe local position is (0,0,0) but because of the corners the pivot point is now at (64,64,0). This just seems wrong and means we would need another property to expose the pivot point. Why introduce another position?  I haven't seen a concrete example of a use case where the current system doesn't work.\nUsing the Unity UI as a preview. How would you set up the example in the screenshot above using Unity. It doesn't seem like it is possible to me?\n\nIt looks like this (as I would expect).\n. OK, well I think we're getting closer to the same thing now :-)\nIn your pictures from Unity you can see that Unity is exposing the l/r/t/b values when the anchors are split and yes those values remain constant when you change the pivot.\nPlayCanvas has the same behaviour. Set the the same values as above: \npivot: [0,0]\nanchor: [0.35,0.35,0.65,0.65]\nthen set element.left = 30; element.right=30;element.top=30;element.bottom=30; and you will see the same behaviour. Changing the pivot point from 0,0 to 1,1 changes the local position but doesn't change the anchors or l/r/t/b.\n. The element will move because setting the pivot in code (element.pivot = new pc.Vec2(1,1)) doesn't change the local position. If you counter the pivot change by changing the local position (which is what the Unity editor does by default) then the element won't move.\ne.g.\n```\n// start with pivot at 0,0\n// move pivot without moving element\nentity.element.pivot = new pc.Vec2(1,1);\nentity.translateLocal(entity.element.width, entity.element.height, 0);\n```\n. So, what I'm going to do...\nI'm currently looking into how to best store these values internally (e.g. possibly replace width/height with corners property). So that you can assign all values successfully before adding to the hierarchy. \nBut I believe the rest of the behaviour is correct (and consistent with how you expect it to behave). I'll try and put together a test page so that we can fiddle some numbers and check everything is behaving as expected.\n. Take a look at this: https://s3-eu-west-1.amazonaws.com/ui-layout.playcanvas.com/ui/positioning/index.html\nIt lets you fiddle with properties of a two element hierarchy.. Just merged this change which adds support for margin property (this the collection of left/right/top/bottom)\nThis fixes also lets you define all properties up front before you add element to the hierarchy.\nI'm pretty much considering this a fix to this issue, but let me know if you think there are any more use-cases that don't work.\n. This was deployed a few weeks ago.\nhttps://forum.playcanvas.com/t/2d-sprites-and-9-slicing/7300. I believe responseXML is a part of the standard XML object: https://xhr.spec.whatwg.org/#the-responsexml-attribute (your link is referring to the .xml property)\nOur bug is that we aren't setting the responseType of the request to document.. Deployed. Interesting idea about storing the bitmap version in the alpha channel. My original thought was that we'd offer two types of font asset, MSDF and Bitmap. If you needed a small font size you could generate a bitmap font of the size you want. I haven't got around to trying it yet. For MSDF fonts we generate them at 32x32 px. If you think anything smaller than that would work OK scaled down then it's worth trying out.\nThe tool we use for generating is a modified version of msdfgen. Our branch has fixes for generating glyphs of consistent scale and then we do atlas and json generation in the backend pipeline.\n. I don't think there was any reason beyond getting more precision on the smaller characters.. In your bitmap screenshot are you generating a bitmap for each size or is that one size scaled up (or down)?. Interesting, my feeling is that bitmaps look better in all cases there. What the maximum font size 2x scale up?. Sorry. The question is: in the bitmap image, what is the maximum scale? 2x?\nThe reason I ask is that it looks pretty good even at the maximum. And I wonder how much bigger that is that the original.. I see. There's definitely issues with both of them. I think the problem with the SDF one is it seems uneven. I want to play more with the \"range\" option in the export to see how that affects the results.\n\nI'm not sure about this. One for @guycalledfrank.\n\nI don't. I'd be a little cautious about automatically switching for things like this. Usually the developer will know if the text is going to be big or small and they can choose, bitmap or sdf.. The MSDF shader already requires OES_standard_derivatives so that shouldn't be an issue.\n. What does a PR for this involve?  Some outstanding questions from me:\n\n\nHow is the font image with bitmap alpha generated? This would be part of the tool chain and not part of the engine.\n\n\nMy original thought was we would support 2 types of font asset: sdf and bitmap. Bitmap fonts would need to be generated at specific pixel sizes. Do we need this fallback if you can just create a bitmap only font?\n\n\nIf the above is yes. What does the transition between SDF and bitmap look like. Does it flick noticeable to a different type?\n. OK, makes sense. We can implement the tool-side separately. Sounds like we should do it.\n\n\nShould the flag go on the text element or on the asset? Or both?. Also it would make sense if you could display a full color bitmap font using this too. This change allows users to prevent rendering by disabling autoDraw. However, main tick is still called every frame because otherwise script updates won't run.\nAlternative is to also prevent component updates from firing. Then users would have to ensure they detected input in events to enable redrawing. Not sure if that is sensible.\n. Hi @renatoruk, can you confirm if this is still an issue for you? And if so, on which devices?\nThere are differences in the way Android behaves on different devices. In particular Daydream-ready devices (Google Pixel phones) can handle WebVR natively, but other devices do not.. Hi @H1Gdev, could you complete the Contributor License Agreement: https://docs.google.com/a/playcanvas.com/forms/d/e/1FAIpQLSfG9XHIgdapCBkvwxbXow592Y5NFPEKD5TM-TyWOmbaCbLeHA/viewform\nThen we can accept the PR.\nThanks,. Thanks for your PR.\nCan you please complete the contributor license agreement here: https://docs.google.com/a/playcanvas.com/forms/d/e/1FAIpQLSfG9XHIgdapCBkvwxbXow592Y5NFPEKD5TM-TyWOmbaCbLeHA/viewform\n. Sorry, it took a long time for me to see this...\nWhen loading from an asset the mapping data should be contained in asset.data which is why it doesn't try and load a mapping file.\n. Hi @filharvey \nWe'll look into this once we get an iOS 11 device (soon). Do you see any error messages in the console when it fails to render?\n. Anchors are measured from bottom left. So you should set the anchor to (0.5,0,0.5,1). \nIn addition, if you are splitting the anchor (b=0,t=1), then setting the height is invalid as the height is determined by the margins and the anchor. You should probably do this:\n{\n    anchor: new pc.Vec4(0.5, 0, 0.5, 1),\n    pivot: new pc.Vec2(0.5, 0.5),\n    width: 640,\n    top: 0,\n    bottom: 0,\n    type: \"image\",\n    textureAsset: panelAsset\n}\nFinally, note that the element component is not released yet and is still in development so you may find bugs and the API may change without notice. \u2620\ufe0f \n. Looks like there is a difference between the way the forward renderer sorts and the picker sorts draw calls. Looks like a bug in the picker to me.\n. Fixed in eafce294295a2504e713ad85f6c176b4e414a2dc. Fixed in #985. Waiting for release.. Hi Omar,\nCan you complete the Contributors License Agreement? \nhttps://docs.google.com/forms/d/e/1FAIpQLSfG9XHIgdapCBkvwxbXow592Y5NFPEKD5TM-TyWOmbaCbLeHA/viewform\nThanks. Just tested and it seems to work. Needs to be fixed to coding standards and CLA completed then I'll merge. \nThanks!. Change == to === and I think we're good.. Updated to version 0.9.39. As Will mentioned. I don't think this is something we'd implement. Thanks,. A temporary solution would be to insert \"\\n\" newline characters into your text to wrap the text manually.. Can you provide a reproducible sample for us to be able to look at? Thanks.. Can you complete the contributor license agreement here: https://docs.google.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk\nThanks,. Are you only receiving these errors when launching from the Editor? I believe this is a down to a know issue with our launch page, and not an engine issue.. This is a breaking change right?. I don't see those errors when running? Are there repro steps?. Please make a separate issue/thread.. Hi @sethgillett, \nCan you please complete the Contributor License Agreement so that I can merge your changes: https://docs.google.com/a/playcanvas.com/forms/d/e/1FAIpQLSfG9XHIgdapCBkvwxbXow592Y5NFPEKD5TM-TyWOmbaCbLeHA/viewform\nThanks. I suspect this is a super-high risk change, we'd need to extensively test this before releasing.. Hmm, yes, I had just noticed there is some global state used by renderLines. I'm currently updating it to work with the new Layer interface and I've removed the global state as part of that change. Release for Layers is targeted in the next few weeks, but it's a pretty big change.. I'm not sure I completely follow what you are trying to achieve here. \nHowever your project as I can see it today is set up incorrectly. Your title elements have anchors set to [0,1,0,0] which means your bottom anchor is larger than your top anchor. (We should prevent this in the Editor). You'll notice if you select the anchor gizmo in the viewport it snaps back to 0.\nTo anchor your title to the top set your anchors to [0,1,0,1] and set the pivot to [0,1] and your text alignment to [0,1].\nI don't see any bug here.. Fixed by 04e03b70636451df81d942260f11929753461309\n. Fixed by 04e03b70636451df81d942260f11929753461309. The blur event is defined as an event that is fired when an element loses focus. We don't really have an idea of \"focus\" of elements. So I'm not sure this is a sensible without completely implementing focus on element.. The Project page is here: https://playcanvas.com/project/529572/overview/after-the-flood. I notice this is called 'touchcancel' in the browser API. . Looks like you could do:\nif (options.sphereMap) {\n} else if (options.dpAtlas) {\n}\nInstead, which would mean that this change would only disable IBL on devices that use dpAtlas?. Performance is affected by deleting entities from the batch. However, we need to remove entities from batches if they are disabled/deleted. \n. Removed tests to be added in a separate PR.\nThe problem with using chunks is that we end up with shader code littered all over the component systems. Which leads to bugs like we have now where we use a different chunk that we have overridden. Note, we already had NineSliced code in transform.vert, so it's not like it wasn't already part of the standard material.\nI can see an argument that we should have a fully derived class \"SpriteMaterial\" or something that derives from StandardMaterial and adds the additional options but I don't think it's possible given the way the createShaderDefinition is written as a single large function with no scope for customizing.\n. Yes, fixed in #1342 and #1298. Fixed in #1251 . I believe this is now fixed in the Editor. Also, need to check the tests that are failing. Use 'npm run test' to check locally\n. Covered by #1333 . Fixed in #1323 . Potentially a breaking change, not definitely sure we should do this... Probably just need to add a check for pc.script.legacy before calling this behaviour. Creating 2058 PlayCanvas cubes in a scene takes on average 550ms with old engine and 435ms on average with this change.. Will be included in #1438. Do you have a scene available that displays this error?. Included in #1509 . I think we should establish if this is better before we merge. We probably don't need to ready the UVs? The test says it is checking if updateMesh is called, and it is testing that above. Either way, I don't really mind. [coding standards] Should be zTest.\n. Could this have a better name? gammaCorrection?\n. In materials we use the term \"map\" for all these properties.\ndiffuseMap, normalMap\n. psys?\ncan this just be this.model?\n. I would argue that these should all be:\nlocalOffsetGraph, worldOffsetGraph, angleGraph, etc..\nDISCUSS!\n. These names aren't very clear...\nI think I need to know more about how they work? On the speed? Not the velocity?\n. So we could do this in the place we use the keyboard.\nvar keyboard = new pc.input.Keyboard(window);\nBecause if we do this, we can't have multiple applications on the same page.\n. Why do you need to do this? Are you just testing if there is already an event attached?\n. Can we do this with Object.defineProperty()? Nicer looking and less prone to someone doing it wrong.\n. I don't think you have to create a new promise here.\nthis._assets.load().then() returns a promise you can just return that\n. Same thing re: new Promise()\n. Why are you doing this?\n. Calling off then on\n. When don't we want to raise events?\nJust seems like this is prone to error. It's weird that change events are only called if I call this special function for changing properties.\nI'd expect them alwasy to be called.\n. I need to confirm but I don't think prefix is used anymore.\n. Coding standards. Constants are ALL_CAPS.\n. I would definitely make this CONST_VALUE's. When you come to extend these in 6 months time, you'll be happy you did.\n. Ick, don't like that... is this really what we have to do?\nIt feels very fragile, and won't update if ANGLE gets fixed. Can we do this by feature detection rather than platform?\n. expose: false\n. This should be on graphicsDevice not a global\n. coding standards: use { and }\n. Access _var outside of class? Is it private or not?\n. I don't like this dependency on the page-global component system update.\nIt would be preferable to hook up and define an update function here, and then hook up the update in the application initialization.\nIdeally, we should steer clear of any \"Singleton\" type behaviour, (I know we have it already in these global update fns, but I'd like to get rid of it). It means multiple applications on the same page can interfere with each other. Possibly we need some sort of StatemachineManager instance which has the update fn and holds the instances. This would be created and updated in the Application.\n. We could probably move co-routine into core_coroutine.js. Especially if we remove the dependency on the component system.\nThis is broader than just state machines.\n. In framework_application.js in the constructor. I'd do something like this:\nthis._statemachineManager = new pc.StateMachineManager();\nThen in update()\nYou could just call\nthis._stateMachineManager.update(dt);\n. It's up to you. You should be able to update the files and just update the PR with no problems though.\n. \"html\"\n. what does this return? what is the browser support for this?\n. Private method? _fillFrameStats\n. Documentation?\n. Are these public?\n. Are these public?\n. Accessing private members?\n. Again, leading _ should indicate that a member is for private internal use.\nWe shouldn't be accessing them outside of the class.\n. Fair point, but we should be trying to make the code better :-)\nIn this case, shouldn't we just have a method which is camera.hasDepthMap or whatever it should be called?\n. Should we be exposing the depthTarget property properly?\n. The point of this is communication of API though. If I see a method that is documented, then I know I'm safe to use it. If I'm searching for properties with a leading underscore then I know I shouldn't use it.\nWhich is this? Should users of the camera node have access to this property or is it secret only for internal use.\nIt looks like authors of post effects will need to use it.\n. new parameter has no docs\n. Also question, do people use different formats here? instead of boolean, should this be a format? \n. Docs are useful for our team as well. And if docs exist, it's important to make sure they are up to date when changes are made.\n. You shouldn't store data in the component, this should be stored in the data block.\n. I feel like this is in the wrong place.\nShouldn't it be scene.bake()\n. It looks like you need app for getting the model list. Maybe better to pass in a list of models to bake?\n. Do we actually need the Entity, can this just be a pc.Camera?\n. Surely it would make no difference in javascript? There is no if-block scope, they would be hoisted to top of function.\n. I'm using the component directly. \nConsider this an experiment in whether we should drop the data object altogether.\n. Good catch. It was to fix an infinite loop. I'll update it.\n. We probably need to test that the resource supports a destroy function?\n. Why do we need an \"old\" version?\n. I'm not clear what this function does? It is called when one model asset is unloaded. But seems to delete everything in the device?\n. OK, we probably just want to change it everywhere to be unload, no point having an extra function. \n. Wouldn't it be better if this was a runtime option?. should be? ;-). start, end?\n. Better that the node object always has a valid boolean after loading.. Please use === always \nAnd spacing of if statements must fit the coding standards doc: https://github.com/playcanvas/engine/blob/master/CONTRIB.md. Please use === always. ===. ===. Could we just call this dynamic? I don't think we prefix \"is\" anywhere else.. Is this actually used to do Skinning or is it just that the technique is similar? If it is just a similar idea, then I would remove the term Skin from it all because it is confusing.. Same here, are these \"actually\" bones?. Should this be behind a #define PROFILING?. Suggest you start this at 1 to avoid having a batch id = 0. Hmm, actually, you're just using this as an index so maybe fine.. I hate this coding style. Is there a better name for this array?. This seems fragile. We could break this is someone updates the skin chunk. Should these just be new chunks?. Actually good point as this is edited by the editor... might need to be something different. I'll need to have a think. This should be initialized in constructor too, otherwise it is undefined if no group is added. This should be TextureAtlas not Sprite Atlas.. This should be TextureAtlas not SpriteAtlas. Should this be an empty array?\n. Should this be an empty array?. It's pretty general purpose, it defines a Texture that has uv rects defined. . Probably shouldn't have a gizmo layer in the default engine application. Only for the editor. This define applies to all maps? How come we don't need one for each map type?. If we doing all this work to support old chunk names, can we get rid of \"PS\" as GLSL doesn't use pixel shaders. And also doesn't fit our coding standards for acronyms (should be aoTexFs?). Then we're going to break any shader chunk code twice?. So it doesn't break shader chunk code, but does break javascript?. Can we split this file into to: layer.js and layer-composition.js. Are these public properties?. Need to document all these classes and methods (and mark private?). why are you using forEach instead of a for loop?. Tools update is deprecated. I don't think this is ever called.. This is probably OK. But we should watch out for how many times this is called during initialization. We may want to trigger it once at the end of setup instead of everything a entity is added.. I don't think this is used anymore. It looks like the 'schedulereflow' event is only used internally with in the layoutgroup component system. If so, it seems like using events for this adds unnecessary overhead. Can we just do this by calling into the system directly?. I think that's probably fine\n. Hmm, so it is. We still should avoid it, as I think we should deprecate it. The editor calls regular update as well, so instead I think the better solution is to call editor.call('viewport:render'); in the editor. This does a one frame update in the viewport.. Yeah, exactly. Whenever a property changes that needs a re-render, call that method. It will render the next frame. . Why in rigid-body constants?. agreed\n. Yeah, that sounds reasonable\n. Agreed. I think it's fine\n. Note: most newer components subscribe to 'beforeremove' or 'remove' events and handle this there. e.g. See ElementComponentSystem\nIf you want to override removeComponent, you need to make sure you call the parent class removeComponent method too. e.g. See ModelComponentSystem\nAlso note: LightComponentSystem is subscribing to 'remove' event already, but doesn't seem to have implemented the method.. Left over from previous commit?. Not sure I'm super happy about this. I think we may need a more general purpose event for this. But for now I think we should let it pass. As long as it is not a public event.. If this is going to be done every frame, can we pre-allocate these vectors and use .copy() instead. Same here, can we copy into temp vectors instead of allocating. use temp vector here too. We seem to have lost the check on whether the element has a screen? is it possible for this to run on an element with no screen?. I think that would be confusing given that we already have app.scene as part of the renderer.. Changing scene name in the editor requires a page refresh to be picked up. I'll wrap in #ifdef DEBUG.. My bad, I have this locally.. This basically how it worked before, but I changed the names slightly to be a bit more explicit.\nIf you load a material from a json file (i.e. engine-only) we add this _engine field to the data when it is loaded (we know we are engine on when material is requested by a URL)\nThen in the open() method we copy the data loaded onto the material resource temporarily.\nFinally in patch() we can assign the data from the material resource into the asset.\n. old comment?. As we're using various internal properties of the script component, could we move this code inside the script component itself? \"getEntityAttributes()\" or something?. Do we really want to return NaN? \nI would generally recommend we return 'null' for an error response. We might actually need to add a v1->v2 conversion here as well. v1 format is missing the data.info.maps section and the map property for each character.. See Arial.json in the engine examples as a v1 sample. We could probably move this down into the main body now?. this error message is no longer correct? Could be ktx or dds. I believe so. Materials are added to defaultImageMaterials in the system when they are created so if the default material exists hasUserMaterial() will correctly test against it.. :+1:\n. Is this refCount new?. so ugly\n. The parser already has an internal instance of a validator, presumably we can use this.. Does this print the warning when you use blob type?. I feel like this impacts findByGuid() which still uses this.guid? I'm guessing this works because guid is created before anyone could successfully call findByGuid?. These values aren't defined in the shader constructor? Can we initialize them to null there?. I would prefer internal properties to start with . this is allocating a new function for every function, can this be a method instead?. slightly confusing terminology. In constructor of pc.Shader we call device.createShader(this) which compiles the shader?. @willeastcott looks like you had chosen not to do this in the old code, remember why?. Should this code be in the asset?. Better to do this with an app event or something? Could this cause a bug if the application is destroyed before this is called?. Maybe we should define an actual class for this UrlObject? It's a bit confusing. . we know the asset is in a bundle. This should be a public property if it's accessed outside the application. \ud83d\udc4d \n. Also, what are the units on this? Are they the same as for shadowOffset?. We need to define these in the element and ensure they are initialized in initializeComponent in ElementComponentSystem.. I think this will mean that when you clone a localized text element the key will be lost in the initializeComponent call because you are also passing in the text property. Either key property should be preferred in initializeComponent or clone should not pass both values.. slightly odd examples as you have the specific number in the KEY. Even if both key and text are set as a correct pair. When this calls initializeComponent setting \"text\" will clear the key to null.. This adds a listener for every camera in the hierarchy. I think we can do the same job but in the camera/system.js so we only have one event listener which loops through all cameras.. Is this right? Seems like you're BB will always have one corner at [0,0,0]?. Should this be \"add:localized\"? To pair add/remove. should be remove. Same comment as the event. Should we pair add/remove rather than set/remove. Looks like we no longer handle the case where the asset is added to the registry after the element is created?. I don't see where we fire these events for the default asset?. ",
    "vkalpias": "Nice one Dave. \n\nOn 5 \u0399\u03bf\u03c5\u03bd 2014, at 12:29 \u03c0.\u03bc., David Evans notifications@github.com wrote:\nI've checked in a fix e3447cb, which will let the build process complete. It still prints a warning about a missing hg repo though, so I'll tidy that up later.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi @amerkoleci,\n\nThanks for reporting this issue. Do you have any steps to reproduce this? The rect should be a pc.Vec4 so it should have x, y, z and w properties along with the data array.\nI'm trying this in the post effects example in extras and it seems to work fine.\n. This should now be fixed (on dev) with this PR https://github.com/playcanvas/engine/pull/18\n. Looks fine to me...\n. Fixed in https://github.com/playcanvas/engine/commit/7121f902e44fcca4f05db5682e3a3284cb6da483\n. Shouldn't we use the appropriate gamma depending on whether gamma correction is enabled or not?\n. Does the new demo have more intense reflections?\n. Do we need to have static kinematic and trigger? What is their point?\nOn Nov 17, 2014 1:42 AM, \"Will Eastcott\" notifications@github.com wrote:\n\nIMO, should be:\nBODYGROUP_NONE: 0,\nBODYGROUP_DEFAULT: 1,\nBODYGROUP_STATIC: 2,\nBODYGROUP_KINEMATIC: 4,\nBODYGROUP_TRIGGER: 8,\nBODYGROUP_ENGINE1: 16,\nBODYGROUP_USER1: 32,\nBODYGROUP_USER2: 64,\nBODYGROUP_USER3: 128,\nBODYGROUP_USER4: 256,\nBODYGROUP_USER5: 512,\nBODYGROUP_USER6: 1024,\nBODYGROUP_USER7: 2048,\nBODYGROUP_USER8: 4096,\nBODYGROUP_USER9: 8192,\nBODYGROUP_USER10: 16384,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/79#issuecomment-63245722.\n. The engine doesn't fail if some audio files are not loaded so yeah\n. Are we sure that this migration for shininess will not change the look of existing projects?\n. Could you add docs for all the new properties of phong materials? (needed for the public API reference)\n. I think in the UI it would be called Tint\n. If we had scene.createEntity then typically users would write this in their\nscripts:\n\ncontext.scene.createEntity();\nvs\nnew pc.Entity(app);\nOn Wed, Jan 7, 2015 at 8:58 PM, Will Eastcott notifications@github.com\nwrote:\n\nI'm not keen on that. There shouldn't be two ways of doing things. \"Pass\nthis parameter if you think you might run your app on the same page as\nanother app even though you might not know at the time. And if you don't\npass the parameter, and your app does at some point run alongside another,\nthe results will be undefined.\" That's bad API design IMHO.\nI personally like:\nvar light = scene.createEntity().addComponent('light');\n@daredevildave https://github.com/daredevildave points out to me that\ncreateThing is not a paradigm we use much in the engine which is a very\nvalid observation. But maybe we should? This means developers can move away\nfrom calling 'new' and we can start using smarter allocation schemes\ninternally.\nI do concede that @Maksims https://github.com/Maksims suggestion is\nquick and easy to implement and is generally an improvement though - so a\ncompromise. But it doesn't mean I like it. ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/136#issuecomment-69071907.\n. Unless context is removed now? I'm confused\n\nOn Wed, Jan 7, 2015 at 10:38 PM, Vaios Kalpias-Ilias vkalpias@gmail.com\nwrote:\n\nIf we had scene.createEntity then typically users would write this in\ntheir scripts:\ncontext.scene.createEntity();\nvs\nnew pc.Entity(app);\nOn Wed, Jan 7, 2015 at 8:58 PM, Will Eastcott notifications@github.com\nwrote:\n\nI'm not keen on that. There shouldn't be two ways of doing things. \"Pass\nthis parameter if you think you might run your app on the same page as\nanother app even though you might not know at the time. And if you don't\npass the parameter, and your app does at some point run alongside another,\nthe results will be undefined.\" That's bad API design IMHO.\nI personally like:\nvar light = scene.createEntity().addComponent('light');\n@daredevildave https://github.com/daredevildave points out to me that\ncreateThing is not a paradigm we use much in the engine which is a very\nvalid observation. But maybe we should? This means developers can move away\nfrom calling 'new' and we can start using smarter allocation schemes\ninternally.\nI do concede that @Maksims https://github.com/Maksims suggestion is\nquick and easy to implement and is generally an improvement though - so a\ncompromise. But it doesn't mean I like it. ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/136#issuecomment-69071907.\n. I'm fine with it.\n. I have pushed a fix to sprite.js which fixes the issue. Get the latest from https://github.com/playcanvas/sprites\n. Hi,\n\n\nYou are talking about pc.Mat4 correct? Why is this inconsistent with the rest of the code? A pc.Mat4 is a 4x4 matrix so it has 16 values. The other methods in pc.Mat4 also set 16 values unless there is a method that doesn't somewhere?\n. Ah OK, thank you. We're not using pc.Mat3 that much internally so that one must have slipped. Fixed it.\n. Do you think maybe we can change material.overridePs to material.pixelShader ? \n. Do we definitely need a public boolean called useMetalness? Couldn't we just make 'metalness' and 'metalnessMap' properties that set an internal boolean (perhaps called _useMetalness) to true when the properties are set?\n. I would guess either a checkbox or a combo box that selects between the two workflows.\n. We need to add these new material properties to the new editor UI and possibly to the old Designer.\n. This is an improvement but I don't think it's going to work if you have to set the prefilteredCubeMap128 property. We need to make it only accept the cubeMap property and depending on what type of texture it is then set the appropriate prefiltered internal properties of the material. \nThat's because the material asset will reference a cubeMap which might be prefiltered or it might not. Then the cubeMap resource loader will return either a plain cubemap pc. exture\n. ... Or a dds pc.Texture.  In either case the result will go into the cubeMap property of the material so that's why the cubeMap property needs to be smart about what it accepts. \n. Sorry for closing the pull request my stupid phone did it \n. The problem is the one I explained above, because we are loading something that is predetermined to go into the cubeMap property so we can't load a dds pc.Texture and tell it to go to a different property instead \n. Good man - I'll play with this tomorrow :)\n. Fixed in https://github.com/playcanvas/engine/commit/4eeb9505a507e4d2d220ca1c8d3ec0e364bed0ae\n. Fixed with https://github.com/playcanvas/engine/commit/6820b49021723feb5a4a3cc2ae30bf176350f48a\n. Fixed in https://github.com/playcanvas/engine/commit/dfe8d4b0d2ef380df45ed156fbcb88d81eb87ab1\n. The cubemap json is already generated when we export a model archive and one of the materials references a cubemap. The material cubemap property is changed to point to the cubemap json. The cubemap json simply contains the cubemap asset data. For example:\n{\n   \"textures\":[\n      \"../18062/f0.png\",\n      \"../18065/f1.png\",\n      \"../18067/f2.png\",\n      \"../18061/f3.png\",\n      \"../18063/f4.png\",\n      \"../18064/f5.png\"\n   ],\n   \"minFilter\":5,\n   \"name\":\"New Cubemap\",\n   \"magFilter\":1,\n   \"rgbm\":true,\n   \"anisotropy\":5\n}\nIf the cubemap is prefiltered then the json will also contain a 'prefiltered' property that points to the dds file.\n. We could maybe provide two ways to call the find method. One with a simple string and one with a regex. \n. These all seem useful nice job! Will have a more thorough look later today \n. I tried to make a test project using the example code for the state machines. I'm getting some errors maybe there's a bug somewhere? Try this http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true and checkout this script https://playcanvas.com/editor/code/349013/sphere.js . It seems that in patrol#update this.targetPos is null\n. Go to the directory where you have built the engine (typically engine/build/ouput and run a local server at port 51000. For example python -m SimpleHTTPServer 51000.\n. Works for me\n. +1\n. Seems kindof confusing to me that in order to set a value I call getUniform\n. Shouldn't it be called setUniform then?\n. This doesn't happen in the new script system. Closing.\n. I guess I would also go for loading it when enabled. I can imagine a case though where a user chose to not preload an asset so that the game starts quickly but then when inside the game start streaming the asset even if the component that uses it is disabled. So maybe it should be a choice. Or I guess the default could be the first and if the user wants the latter, then he can do it by hand in code.\n. Yeah\n. Fixed in https://github.com/playcanvas/engine/commit/89aaa6f65795269cf90c26bc4e64cda1282eca9f\n. Fixed in https://github.com/playcanvas/engine/commit/54c2b2641a335fe6dca8eb16909b20d18e31a3bc\n. Main issue with this is that we don't have transform change events which are expensive. So we need to track if the scale of the Entity has changed or if any of the parent Entities have changed scale every frame which is also expensive.\n. Fixed in https://github.com/playcanvas/engine/commit/8dfa8b40d62a9eb664b311e4945c1f9b6d38f22d\n. Fixed in https://github.com/playcanvas/engine/commit/5760452b90f563ce3133bcd7a2e4416aab452696\n. Fixed in https://github.com/playcanvas/engine/commit/22e246f43ac87d2fc299f46742a749679409eee3\n. The problem is not that the material itself is not cloned but rather the cloned model does not have the material of the original model.\n. Fixed in https://github.com/playcanvas/engine/commit/7ce6c5e7fc610c9a797af10efcc36413a4fd0507\n. Fixed in https://github.com/playcanvas/engine/commit/8e97720e5395469557882fa0362c1e8950ac0ceb\n. Fixed in https://github.com/playcanvas/engine/commit/104a2986a8b5954f1864500b0b149adf914a7a98\n. Fixed in https://github.com/playcanvas/engine/commit/89aaa6f65795269cf90c26bc4e64cda1282eca9f\n. If we end up doing this properties like the color / opacity curves should probably still work somehow.\n. Fixed in https://github.com/playcanvas/engine/commit/873630dabfb045c3a04b38aaa4a4dcace08ceec6\n. Are you renaming files and keeping their commit history or are you deleting and adding new files instead? If we lose history on each file then that's a big problem \n. My feeling is each collider should be a child entity. That way you can attach scripts on each Entity separately and get events on it and also attach children to those Entities to be destroyed for example when the Entity collides with something etc. I think we might be limiting ourselves by having just a list of shapes.\n. The default in the web audio api is 'inverse'. Should we change this to linear? I think it might be best to keep the web audio api defaults.\n. Also there is a difference between how maxDistance is used in the Web Audio API and how we might want it to be used. Ideally what we want is for the volume to be 0 after maxDistance. However the Web Audio API simply stops reducing the volume any further after maxDistance. So you can still hear its 'min' value no matter how far you are. \nThis could possibly be handled by manually setting the volume to 0 after maxDistance in the engine. \n. Added distanceModel in https://github.com/playcanvas/engine/commit/fdb7a8c736785ff3c140231346e8b0b0ac1eaa1a\n. A problem with pooling instances is that a user could keep a reference to an instance and subscribe to its events. How do we know when it's safe to free an instance for use in a different sound and what do we do with its event handlers.\n. Should be fixed in https://github.com/playcanvas/engine/commit/90b53a1854d213455a6ae336acee52d89cad7706\n. Why is this a memory leak? I mean it allocates new memory sure but it's not a leak per se?\n. OK just making sure because 'leak' usually means that it's never garbage collected.\n. It might be a little issue with the order in which some things are initialized, it's a bit tricky to fix. However you can do \nentity.addComponent('collision', {\n    type: 'mesh',\n    asset: asset\n};\n. Should be fixed now in https://github.com/playcanvas/engine/commit/26e458d42b3758b33af97475e123f4430f669664\n. I cannot reproduce that. Is it still happening?\n. Seems to work for me can you verify?\n. Fixed in https://github.com/playcanvas/engine/commit/5519248787642e75e1606be4b5efac5d945e3979\n. Removed that check in https://github.com/playcanvas/engine/commit/0ece70b3a9b1021f417116f38698430bacd80e48 because the test that already checks if a child is already parented when addChild or insertChild are called should be enough.\n. Should we rename isStatic to static? \n. file.url is used in various projects to reference assets. This makes sure that this will continue working when apps are proxied. \n. So I changed this to use asset.getFilrUrl instead because it makes the code a lot cleaner. We will need to update projects that use asset.file.url though like tanx\n. Do you know if this breaks any post effects that use the depth buffer?\n. This is because we only load the faces of a cubemap if loadFaces is true in the cubemap asset. That boolean seems to only be set inside the pc.Application when we apply scene settings. There we check if the scene's skyboxMip is 0 and in that case we set loadFaces to true. This does not happen when we call pc.Scene#setSkybox which is unaware of the assets and the framework.\nThe easiest way to fix this would be to expose a boolean field on the cubemap asset which lets us force loading of cubemap faces. Otherwise we need to refactor how this works so that the cubemap loader itself knows when or when not to load the faces. That would tie the cubemap loader with the current scene which might be a little awkward. \n. Fixed in https://github.com/playcanvas/engine/commit/53c086e49ab409624c0b68d0d463012da932fa97\n. Another issue solved the same way is having a particle system with initial velocity e.g.:\nparticle count: 6\nemission rate: 0.01, 0.01\ninitial velocity: 2\nSee attached gifs for behaviour.\nCorrect\n\nWrong\n\n. How do we set the resolution including pixel ratio when we load the application? Do we call a different method? What does the pixel ratio setting do in the application - does the user need to remember to use it when they resize the canvas?\n. If we're talking about including pixel ratio inside setCanvasResolution we should take into account that currently the maxPixelRatio property is on the graphics device, which internally calls resizeCanvas. I think it might be kinda weird to have the graphics device call app.setCanvasResolution internally as the device doesn't know about the app at all. \nAlthough I guess it could call resizeCanvas with the width and height pre-multiplied.\n. We could add a few methods like setPosition, setRotation on the rigidbody.\n. I think it would be nice to refactor this bit. One thing that we need to be careful about is making sure that the same events are fired when these properties are set.. Should be fixed with https://github.com/playcanvas/engine/pull/1178. I think we should make sure that aabbVer wraps correctly when it reaches NUMBER.MAX_VALUE because we are just increasing it and it will not wrap automatically. . Really? What if something moves every frame\nOn Jul 27, 2017 12:39, \"Will Eastcott\" notifications@github.com wrote:\n\nI guarantee that no one will ever see aabbVer reach max value. \ud83d\ude04\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/974#issuecomment-318312397,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAz8GUIOS8z9eHl4_Y-_R32cBL8GUI2Wks5sSFrugaJpZM4OfZMr\n.\n. Hm I thought max_value was smaller\n\nOn Jul 27, 2017 13:27, \"Will Eastcott\" notifications@github.com wrote:\n\nWell, do the math, but MAX_VALUE is truly enormous.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/974#issuecomment-318323606,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAz8GRdV_xC0vid3EZsW7UXFnXGMXHoXks5sSGYQgaJpZM4OfZMr\n.\n. I believe the point of the default material is to not be cloned for performances reasons. . Seems that this bug was introduced a while ago. I pushed a fix https://github.com/playcanvas/engine/commit/9d3cec5c212c4394102148bdbc003f45e22cf342 . It should be deployed to stable soon.. Thanks for reporting! Pushed a fix https://github.com/playcanvas/engine/commit/1f2d33a5a0daf112c4afe600f7f6d34a6aeec751. Hi, thanks again for reporting an issue! I pushed a fix https://github.com/playcanvas/engine/commit/63e8679548ff335e387ddd587b62b64968071e90. Before we deploy it to stable would you be able to test it? Clone the master branch, build the engine on your machine, run a local server in /build/output at port 51000 and then launch your application using this query parameter to run with your local engine: ?use_local_engine=true (make sure to use HTTP instead of HTTPS when launching so that your local server will work).\n\nIf you regularly updating the engine I recommend you have this workflow ready on your machine so you can actually change the engine and test your changes instead of monkey patching :). Sure we also use monkey patching sometimes :) But if you're testing PR's it'd be best to test them in the engine directly to see if it affects anything else. \nYou can use the local engine over HTTPS as well, as long as you have a valid key and certificate. Personally I use the http-server npm utility and run it like so inside the engine's output folder:\nhttp-server -p 51000 -S --cert mycert.cert --key mykey.key. \nThen the use_local_engine query parameter can also be a full engine URL. So you could do something like:\n?use_local_engine=https://localhost:51000/playcanvas-latest.js or if the domain doesn't allow it you might need to add an entry in your hosts file.. You forgot the new keyword.. Should be\nvar curve = new pc.Curve();. So this is a bit tricky. There's 2 issues here, one is that initialize is not called on the enabled script instance and also postInitialize is not called either.  We can probably call initialize immediately when enabling a script, however we cannot do that with postInitialize because then postInitialize might get called before all the initialize methods for all the scripts have been called first. \nIt's a bit complicated because we will have to keep track of when all the initialize methods have been called first and then on the next frame call initialize and postInitialize together.. I think the easier thing here is for the developer to call initialize and postInitialize manually in their script if the script is enabled at a later time.. It sounds like it should be possible, I did some tests today and it probably looks alright. I've got some other tasks to finish first and then I'll try to get back on this PR.\nIf you want to make another ScriptType perhaps you can monkeypatch it in your application?. Hey so I made another PR here https://github.com/playcanvas/engine/pull/1024 that should address this problem.. \ud83d\udc4d . Fixed in https://github.com/playcanvas/engine/commit/a6536735fcd0e177f59efb14a31efce78311146d. Thanks this was introduced with this commit https://github.com/playcanvas/engine/commit/294a2ce6b9ff3f2116471fb5abb089f0bd648fcb which is attempting to fix a bug when individual scripts are enabled. We will have a look at fixing this as soon as possible.. I'm not sure but can you both check launching your application using this query parameter in the launch window URL:\n?use_local_engine=https://code.playcanvas.com/playcanvas-latest.js\nThis will load the latest master branch where I've reverted that change. Let me know if this fixes your problems.. @afk-mcz I would appreciate it if you could provide a test case for what your problem is exactly because I'm not sure I understand exactly what's broken in your situation. That's so we can fix it :) Thanks. I'm deploying a new version of the engine right now without the offending commit until we figure out what's wrong exactly. . I deployed engine v0.219.4 which does not have this bug - if you could PM me a link to your project in the forum I'd appreciate it so at least I can have a look at what might be wrong there.. That would be pc.Vec3#length which already exists.\nOn Feb 5, 2018 21:47, \"Ron Korving\" notifications@github.com wrote:\n\nIt would be nice if a Euclidean distance\nhttps://en.wikipedia.org/wiki/Euclidean_distance method would be\nexposed on vector classes. While rather trivial to write myself, I feel it\nmakes sense to have on the Vec-classes by default. That avoids me having to\nexpose some playcanvas-math-helpers file in my project to expose these\nfunctions (one per vector type).\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/issues/1083, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAz8Gf49lE2kJ7ZmN-a8rUCfrBn9zJc-ks5tR-eDgaJpZM4R6h-0\n.\n. You can subtract two vectors and get their length which is the distance between them. For example vec.sub2(vec1, vec2).length() . I have found that I almost always need a few temporary vectors in my scripts if I'm to do any vector math so I think in realistic use cases you would have at least one temporary vector stored in your script in initialize and just use that for any math operations.. I believe the thinking for the math API was to make a minimal API that promotes practices that avoid excessive memory allocations. It's something that might look a bit odd at first but it kinda forces you to think about your allocations beforehand - you can be sure that lots of people who are unfamiliar with JavaScript or programming in general will really abuse the methods that create new instances of vectors.. \n\n. This is related to each Element component calling _updateScreen on every insert event which causes parent Screen to re-calculate the draw order for every child again and again.\nAlso there are other optimizations to be done as well in the Element component, mainly updating text should not loop through all the characters in the font every time to find min / max bounds and also any for loops should be optimized as much as possible.\nUltimately we need to avoid the continuous recursion of children during the syncDrawOrder call in the Screen component.. This should now be fixed with https://github.com/playcanvas/engine/pull/1178.. There's no 'official' way to get character metrics - I suggest going through the text element and checking out the code basically. \nHaving said that we are going to implement text wrapping ourselves soonish I believe.. We can't reverse the for loop order - the order of the update calls need to happen in the same order as the scripts array.. I have updated the old sprite and font_renderer scripts just haven't pushed the changes, 'cause I'm waiting for all this to be deployed first.. Does it work if you make sure your margin is 0? . One comment from is I think we need a wrapText property on the Element component which would probably need to be false by default as this will change the behaviour of existing projects. Then in the Editor we would add a checkbox on Text Elements where we can have it true by default.. Also for some reason it looks like not all letters are visible sometimes:\n\nThis should read \"This is a sentence with many words\". Notice it also duplicated the word \"many\". I haven't checked yet but seeing how you changed a lot of docs tags this will likely break autocomplete in the editor. I think maybe the class to classdesc might affect it. I'll check tomorrow should be easy to update anyway. . Hi, this is by design - onEnable will only be called after the script has been disabled. If you need your code in onEnable to be executed after initialize I suggest you add a call to onEnable inside your initialize function.. Are you talking about the PlayCanvas Editor? If so can you post your issue at forum.playcanvas.com? Github issues are for the engine only. Thanks!. Hmmm, I'm not against either, I think it'd be better to use common browser event names but if that's going to affect performance in a way that the user can actually feel it then maybe we should do custom events.. I'd try preventDefault first personally.. I can't really think of a project with a lot of UI input. It should be fine mainly I think it's about whether mouse+touch enabled devices are still going to work OK. You could try something like Master Archer, I can add you if you give me your playcanvas username.. Regarding the naming of the events, we haven't used the words gain or lose anywhere else, but usually use set, unset or remove. I'm not too bothered about this just saying that this is the only thing that popped out as inconsistent to me but I realize it's probably a lot of work to change those.. And the other thing is the use of # - we currently use : for everything. Maybe using : for these events is harder to parse? Unless we're always taking the first part of string.split(':'). The gamepadconnected and gamepaddisconnected events do not seem to have great support. We could add the following properties to our project settings instead:\nenableKeyboard: boolean (or useKeyboard)\nenableMouse: boolean (or useMouse)\nenableGamepads: boolean (or useGamepads)\nWe can enable keyboard and mouse by default and leave gamepads disabled. If one of those is disabled then we would not create the respective device at all, so we would skip calling device.update altogether if it's not there.\nFor engine-only users they do not have to worry about these settings at all as they would manually create the pc.Application passing the devices they need into the pc.Application constructor.. Fixed by adding input project settings.. It's not that straightforward because scripts enable and disable other scripts causing these lists to be modified while looping. . Fixed in https://github.com/playcanvas/engine/pull/1321 and https://github.com/playcanvas/engine/pull/1324. New PR here https://github.com/playcanvas/engine/pull/1438. I tested this against our existing unit tests and also added some more tests which seem to pass. I also tested various projects that use script attributes and seem OK so far. However I would like to test it on more projects that programmatically add scripts. If you know of any projects that do that let me know.. This PR also seems to fix https://github.com/playcanvas/engine/issues/949. We have another class that looks quite a lot like the sync queue. It's called pc.SortedLoopArray. It basically uses binary search to insert items in a sorted order in an internal array and it also allows you to loop that array while they array is modified. The second part is probably not needed by sync hierarchy but the sorting bit looks pretty similar... Just wandering whether we should use that since it's already used by various components and it's well tested. . It looks like your issue has been resolved in the forum. Please use the forum if you are not sure that there is an engine bug before opening a new engine issue here. Thanks!. Do you need to subscribe to all properties of the component here, so that if one changes you update the emitter?\n. [coding standards] should be \"reset\"\n. Is there a reason why these properties are initialized to undefined and not null or a different default value?\n. deltaRandomness and deltaRandomnessStatic seem pretty unintuitive parameters. Do we absolutely need them or could they be renamed to something more intuitive?\n. is stretch a float or a boolean?\n. You might want to set the enabled property last here so the emitter is created after all the other properties have been initialized. \n. Here you should also check components[id].entity is also enabled\n. Do these variables need to be public in the pc.gfx namespace? Could they be made private? This entire file could be written so that you extend the gfx namespace and in the end return which public methods or variables you want to expose.\n. [coding standards] should be vsCode or maybe vertex_shader\n. [coding standards] should be createShader\n. [coding standards] should be createShaderFromCode\n. [coding standards] should be drawQuadWithShader\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. // Mr F ?\n. var LinearGraph = function (numValues) {\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. var ParticleEmitter2 (I hate that '2' in the end ! ) = function (graphicsDevice, options) {\n. [coding standards] method should start with lower case letter\n. [coding standards] method should start with lower case letter\n. :D So in general we usually set these to null - it feels kinda weird to define values and set them to undefined which is like you haven't defined them!\n. Maybe these should be be private in the namespace and if you do actually need them you use methods to grab stuff from them, because that's safer and clearer\n. You probably to need to do this.on(\"set_whatever\", this.onSetWhatever, this);  for all your properties so when they change you update the internal emitter\n. The old emitters are used in dungeon fury and swooop. Maybe others are\nusing them too\nOn Thu, Sep 25, 2014 at 1:49 PM, moka notifications@github.com wrote:\n\nIn src/scene/scene_particleemitter2.js:\n\n+\n-            if (this.oneShot) {\n-                if (this.onFinished != undefined) {\n-                    if (Date.now() > this.endTime) {\n-                        this.onFinished();\n-                    }\n-                }\n-            }\n  +\n-            device.setDepthTest(true);\n-            device.setDepthWrite(true);\n-        }\n-    };\n  +\n-    return {\n-        ParticleEmitter2: ParticleEmitter2,\n\nDo we want to call it ParticleEmitter rather ParticleEmitter2?\nAs previous one was not exposed to public anyway, so we definitely should\nignore its existence.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/42/files#r18025250.\n. What is this doing?\n. Everything from this point to the end of the method is already implemented inside _onInsertChild, so here you should call that instead of replicating the code.\n. What is this doing? This is not clear why it should belong to the scene_graphnode\n. This is a comment for setLookVector, not sure what you see on Github..\n. So this is for scene_graphnode#setLookVector: we have a setWorldTransform method so since you added a similar method\nthere (which btw should be named setFromLookVector like all the other\nsetter methods) you can set it like that in your code - no need for a\nsetLookVector method in the scene_graph. Again the aim is to keep the API\nminimal and not have methods for special cases.\n. If you need to use the optimized version as you say, you can just set the\nworld transform of the entity or modify it directly. The lookAt method is\neasier to use because you don't have to do all the math to calculate the\nlook at vector. An example is Unity's transform class which only has a\nLookAt method and not a SetLookAt vector.\n\nOn Thu, Sep 25, 2014 at 10:07 PM, guycalledfrank notifications@github.com\nwrote:\n\nIn src/scene/scene_graphnode.js:\n\n@@ -1078,6 +1115,37 @@ pc.extend(pc.scene, function () {\n             }\n         }(),\n\nThis is exactly the reason setLookVector should be here - because it's\nessential and not the special case. I'd rather remove lookAt, because it\ndoes more things than setLookVector, and if you really need to do lookAt,\nyou can sub points and normalize manually. Why the heck do I need to call\nfunction that does redundant job to achieve a simple result? JS isn't the\nfastest language out there.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/42/files#r18052919.\n. But I am talking about the scene_graphnode#setLookVector method. You\nalready added a setLookVector in the mat4 class. What's so hard about doing\nnode.getWorldTransform().setLookVector(z, up)?\n\nOn Thu, Sep 25, 2014 at 10:15 PM, guycalledfrank notifications@github.com\nwrote:\n\nIn src/scene/scene_graphnode.js:\n\n@@ -1078,6 +1115,37 @@ pc.extend(pc.scene, function () {\n             }\n         }(),\n\nModifying the world transform is hard and not all users will be able to do\nit. Just changing the Z direction is not enough, because matrix should be\nkept orthogonal. The setLookVector just makes an entity to point to a\ndirection, and I had a lot of situations in my past experience when it was\nnecessary. The lookAt is not easier to use when you have a vector, because\ninstead of setLookVector(vec), you have to do something like\nlookAt(tempVec.copy(pos).add(vec)) which looks like crap and does redundant\nstuff (lookAt will sub your addition back and normalize the already\nnormalized vector). Again, in some situations you have a vector/normal, and\nNOT the point.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/42/files#r18053371.\n. Because lookAt has been used more often than that. In general I would try\nto not add more methods to the current API and try to use what's already\nthere. We can add methods later if we see a real need for it but for now I\nwould keep changes to a minimum.\n\nOn Thu, Sep 25, 2014 at 10:22 PM, guycalledfrank notifications@github.com\nwrote:\n\nIn src/scene/scene_graphnode.js:\n\n@@ -1078,6 +1115,37 @@ pc.extend(pc.scene, function () {\n             }\n         }(),\n\nWell, I just looked at how lookAt was implemented in the engine, and saw\nit in both mat4 and graphnode, so I thought that's the way to add. So the\nquestion then is: why lookAt has to be in graphnode and not only in mat4?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/42/files#r18053707.\n. I think we should merge after we deploy the asset migration stuff,\notherwise these will be deployed to stable right away. So next week.\n\nOn Fri, Sep 26, 2014 at 9:47 AM, guycalledfrank notifications@github.com\nwrote:\n\nIn src/scene/scene_graphnode.js:\n\n@@ -1078,6 +1115,37 @@ pc.extend(pc.scene, function () {\n             }\n         }(),\n\nOK, fine, let's not include these now. However, here are some examples\nwhen you need setLookVector:\n1. Align particle system to surface normal.\n2. Align decal to surface normal.\n3. Calculate object motion procedurally and make entity look along the\ndirection of motion.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/42/files#r18075745.\n. I changed those to have one point on purpose. Any reason why you want to start with 2 points?\n. Ah ok :) Do you think you could change those back to one point?\n. Yeah new properties need a migration\n. Is this right? Does the cubemap variable exist or should it be 'texture' ?\n. The skybox component will probably be removed altogether soonish so not sure if it's worth you changing it. It will probably be a scene setting accepting a cubemap asset.\n. Could you remove the parenthesis around !respawn?\n. should this be a public property? \n. Yes this is so that we do not subscribe to the change event multiple times for the same asset.\n. Do you mean define a property for each field? The problem is what happens when you don't want to raise a 'change' event. We don't always need to raise events when we set a property for various reasons.\n. Which bit?\n. Same reason. We don't want to subscribe multiple times for these change events and we definitely will if we don't add this off call, because these are materials so whenever you change something in a material this code will run again.\n. OK I see what you mean. Currently if you raise events always that will cause issues in some cases. But I'll try to fix that  and add properties instead.\n. I am kindof scared to do this though. Because it means that whenever you set an asset property you will raise events and these events are there only for reloading assets basically. So if you set asset.resource to something somewhere temporarily or whatever that is going to raise events which might have quite complicated handlers. That's why I added a 'set' method so that you are aware that you will raise events when you call it.\n. Black Magic?\n. All these numbers here ? Maybe need some comments or constants or something?\n. line 397 and below..\n. I agree that we should have different properties per shape and show / hide them accordingly in the UI, like we do for collision components. \n\nAs for names I'd say emitterExtents or emitterHalfExtents and emitterRadius for spheres.\n. Should the default value for emitterRadius be something more meaningful like 1 ?\n. Should we add a pc.EMITTERSHAPE_NONE option which would be the default? That way we can hide the emitterExtents completely. That way we can set the default emitterExtents to 1, 1, 1 which is more meaningful than 0, 0, 0 (which is like that because we don't have EMITTERSHAPE_NONE)\n. typo\n. Should this be 'chunks' instead of 'customChunks'?\n. How about options.pixelShader instead of customPS? Basically I think we should not have words like 'custom', 'override' etc\n. how about we change options.metalnessWorkflow to options.useMetalness ?\n. The internal boolean is not meant to be used by the public. They don't really need to set it to true anyway without setting metalness or metalness map. Why not just hide it from the user? It's kinda like the 'blendType' property in scene_material.js which sets whatever booleans it needs internally in the property.\n. Regarding internal properties like metalnessWorkflow vs useMetalness, is there a reason why they should be named differently? Isn't it more consistent to use the same names for option variables and their counterparts?\n. Let's not expose new stuff in the UI because they will need migrations. Instead can we make a list of what's been added so we can add everything in one go?\n. There are various issues with this cache. First of all it's global which means we can't use it in the editor where we use the same engine for multiple contexts. So this cache needs to be tied to an instance of something... I have a feeling this belongs to the cubemap resource loader.. \nSecond I don't think you can use an object as a hash key because objects are casted to strings. Which means pc.cubeMapMipsCache[new pc.Texture()] will return the same result as pc.cubeMapMipsCache[prefilteredCubeMap128]. \n. Is this code right? if scene._skyboxMip is 0 then the code will be var mipTex = this['skyboxPrefilterednull'] \n. I wonder if it'd be better to provide extra arguments like duration and delay in a config object instead of function parameters. So it'd be something like:\nnew pc.Coroutine(function (dt) {\n   // blah\n}, this, {\n   duration: 5,\n   delay: 1\n}\n. Yeah that's even better\n. It seems you're using tabs instead of 4 spaces? I know it's a pain but do you think you could setup your text editor to replace tabs with 4 spaces instead? This is what the rest of the code is using :)\n. I think having working examples of most of that stuff would be great to also prove why they're useful to everyone!\n. So if you try this again http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true you'll notice the sphere 'patrols' for 2 seconds then 'seeks' for another 2 seconds and then disappears. It shouldn't disappear so maybe there's another bug somewhere?\n. This is probably automatically changed by your text editor but we use brace and else in the same line :D\n. So I noticed this method and probably others too are making clones of vectors, quats etc. Since these are methods that are meant to be called every frame do you think maybe you could use scratch vectors/quats for temporary operations instead so that we minimize the memory footprint?\n. Calling this.fn will generate a new function every time. Is this intentional? Maybe we could do \nthis._fn = fn.bind(this) || noop\n. BTW as a naming convention for the files we use folder_filename. So this file for example should be named statemachine_blender.js\n. same here about using temporary vectors/quats\n. I guess this would be a good place to add more types of interpolation in the future? Like easeIn easeOut etc?\n. Returns a DocumentFragment. Seems to be supported by all browsers except Safari and IE mobile.. I guess I can use a more universal method.\n. I think this would be better: \"Parent object to add the tags to\"\n. Similar to above comment\n. Similar to above comment\n. Fires after any add / remove operation has been made\n. If this is optional then surround the 'parent' with brackets like so [parent]\n. should be: @param {String} name Name of a tag, or array of tags.\n. Should be {String} name Name of a tag or array of tags\n. When 'an' array is provided\n. I think you can drop the 'of' here\n. Well we should at least make it better right? \n. I think this should be LightMapper instead of Lightmapper. I believe the rest of the engine follows this convention where possible.\n. Hm OK I thought that the area is calculated by the engine? If not then maybe there is no need to duplicate this in the mesh?\n. Yeah maybe. Because what happens with procedurally generated meshes? These won't have area calculated so if this is only server-side then it should probably stay in the asset only.\n. Yeah this is something that I did after using this. Initially it didn't do that however it was then becoming a sort of async thing. Now it always returns an instance and calls the play event. The play event is also raised on the instance however only when the asset is loaded.\n. The general way things work is that non-overlapping instances change with the slot whereas overlapping instaces are not changing. Also it is acceptable to add / remove nodes while sounds are playing.\n. I think in most cases these nodes will be setup before anything is played so I think we should be consistent with the rest of the properties. If the user doesn't want to apply nodes to that sound surely he can do it later or if it's overlapping he can do it anytime.\n. There is no 'glitch' if there is it's a browser issue. For example there is no glitch in Firefox. Regarding your second question you can either set it to overlapping or you can subscibe to the 'stop' event and do it then.\n. no it's fine as the instance manages the creation of its source on its own.\n. I can imagine a scenario where you are playing music continuously non-overlapping and want to add / remove effects dynamically to it. If you don't want to add those effects on the playing music you can either stop the music add the effects and play from the same time or you can wait until the music is ended using events and add nodes there or other ways.\n. should all those properties be set on the component or the data object?\n. Not too sure about which URL to use here, the asset.file.url or the full URL with the prefix.\n. Better cache r.length in a variable instead of calling it twice?. copy paste error?. In the example code it says var tv = m.transformVector(v); I guess it should be transformVec4 ?\n. Yeah sure :). Frames have a unique key and if you add or remove frames in between of other frames in the atlas the keys of the existing frames shouldn't change. So this is an easier way to change the atlas without having to change all the sprite assets that reference these frames.. We don't loop through this object. The sprites assets reference keys of this object directly. . You have the same line at line 164 above - is that on purpose? I'm guessing you only want _firstBatch to be called once but you subscribe to the prerender event twice.. So it is 'kinda' general purpose. A frame has uv's but it also have pivots which are unrelated outside the context of sprites. That's why I named it SpriteAtlas. We could use it for regular materials too I guess but then we'd also store the pivot which is probably not needed. . It's a dictionary. We could initialize it as a dictionary although that's gonna be garbage collected once we load the real frames unless we always modify the same object.... Same as with the SpriteAtlas#frames. Oops. The thing is that when you execute the initialize method then the script might no longer be enabled so we need to check this.enabled again.. irrelevantDecls ? :P . I think we should remove the script from here and maybe replace it with the app. And in options you can pass a render callback.. masterial?. Aaarg forEach! I'd change it... Why do we need another _remoeScreenFromElements function?. There is a file in the Editor called viewport-entities-components-binding.js - you can do the viewport re-rendering there as that's where other components do the same too. We don't want to have Editor code in the Engine if possible I think that's why toolsUpdate shouldn't be used... const keywords are not currently allowed with our linting rules. I'm fine with it if it doesn't break stuff . I don't think you should do this here. We have onEnable and onDisable callbacks in components - can you use those instead?. Well it's just introducing new events to entities is a big deal in general at least in my mind, because then everyone is going to start using them for their own thing. When an entity gets disabled we call onDisable on all its components. What if you handle that in the component that got disabled and fire an event there for the interested components to handle? . Hm I'm not sure if the click event is fired on a document when you just have touch input I need to check.... It not => If not. Do you need to check if this._element.fire exists? . I think possibly the problem with this is what happens if someone adds a component and say passes in an instance of a pc.Vec4 instead of an array of 4 values for example. We need to check if the value is already the desired type.. I kinda feel like everything that applies to 2D elements should apply to 3D elements as well.. You can also do hitCorners[0].clone() . Do you also need to handle cloneComponent? I guess when you clone the Button you want it to reference its child entities not the original entities.. Well this is when someone does this at runtime not in the Editor. The Editor handles duplicating on its own because the Editor doesn't normally rely on the engine to do stuff - it just notifies the engine of changes. When you are duplicating in the Editor you are essentially just creating a new Entity in the engine not cloning it.. Well it was an early decision I guess to implement duplicate that way - I think the Editor doesn't know if something is duplicated or not, it's just an entities:add message which creates an engine Entity as well.. Is there a chance this will be called very often like every frame, creating a new array every time? Also noticed below we are creating new pc.Vec2s for which we maybe could re-use some temporary vectors?. Same here do we need to make a new pc.Vec4 if this function is called often?. Should this live in app.scenes instead?. Users can rename scenes in the Editor. Do we need to handle it?. Do you really want to add this? e.g. I use http-serverand probably people are using their own servers.. When you say temp storage does this mean you're changing this?. Should this be a property?. Should this be a property?. I moved this whole section into the script component now.. Are there going to be multiple ways of rtl reordering? If not I guess we could make this a boolean?. Yes we would. I don't know if that's a problem though I'm just curious. Is it like a huge library?. Sounds sensible - I updated the code.. Does this hasUserMaterial function work right now that materials are created later?. Should we set this to false after we're done? Probably doesn't matter much. Do you need to allocate an object here? Perhaps instead of creating a new object you can check if url is already an object and create two variables from it like urlLoad and urlOriginal so you don't have to allocate it. Like \nvar urlLoad = url;\nvar urlOriginal = url;\nif (typeof url === 'object') {\n    urlLoad = url.load;\n    urlOriginal = url.original;\n}. I propose adding a warning here only in Debug builds.. Is the comment above not valid anymore?. This library is not currently included.. Only thing here is is there a chance assets can be null?. I've been trying to get away from this way of re-applying properties. Do you think maybe we could separate the part that does the applying into a separate function and call that from here instead?. I think eventually the possible URLs for assets should be in the asset. I could add a method on the asset like getFileUrls or something but I wanted to leave this until we actually do something about the font asset.. Added a check to address this.. Changed it to enableBundles. Would it be a bit faster to do the if statements here instead of calling onUpdate and doing them in there?. yeah I guess so just wanted to really point out what that '5' is in the example.... If 'text' exists in the source and it's the translated text then key will exist too. If 'text' exist in the source because the user set it directly then key will be null. So when you clone it it should either use the key with a higher priority if it exists or use the text.. These events are fired on the pc.LocalizedAsset instance. We could do that sure.. We handle it in onSetLocale but we do not handle adding the defaultAsset later when it comes to the set:localized and remove:localized events which I'll fix. Basically whatever ends up in localizedAsset is the asset where we listen for load events etc.. ",
    "willeastcott": "I'm guessing this is Chrome OS. On that OS, ALT+LMB has a system level 'special meaning': it simulates a right mouse button click. This is a bug in Designer.\nAs for WASD not working in the FPS Starter Kit, I haven't been able to repro that. I'm on:\nVersion: 35.0.1916.116\nPlatform: 571.61.0 (Official Build) stable-channel peach_pi\nFirmware Google_Peach_Pi.4482.94.0\nThis is a brand new Samsung Chromebook (ARM based model that has just been released).\n. Yes, those are the standard key codes for those keys that should always be returned. See here: http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes\n@Maksims Can you test Designer on your Linux rig this evening? And create a project with the FPS starter kit and see if WASD works?\n. @Maksims And presumably ALT+LMB in Designer to orbit works OK?\n@guywithcrookedface Can you confirm:\n'WASD not working' is in the FPS Starter Kit in PlayCanvas Designer, correct? Not this engine demo:\nhttp://playcanvas.github.io/#camera/first_person/index.html\n?\n. @guywithcrookedface Also, can you confirm this behaviour is the same in Firefox on your Gentoo machine?\n. Ah. I see the problem. Can you go to the project settings and check the box that says 'Enable 3D Physics'? This is a result of a bug we had a couple of days ago where forking a project would not copy the project settings. This is now fixed but any projects that were forked when the bug was in existence will be affected.\n. Hi Sam,\nThanks for adding all this stuff. About 6 months ago, I rewrote the math API entirely to what it is today. One thing I tried to do was keep it succinct/minimal and cover the cases that were regularly used. You've added mulScalar which, as Dave points out, is covered by pc.Vec3#scale. That's a very regularly used function, which is why it's included. Having written a large number of games/demos with PlayCanvas, I've never needed to add or sub a scalar from a vector. This is why I never added it in the first place and, to date, no users have asked for it.\nThe exception which I have been considering is 'distanceTo'. Users do need to do that quite regularly and normally have to code that up in their game-side scripts. One of the main reasons I haven't added it so far is naming. lhs.distanceTo(rhs) is OK. If there's a version of that function that takes two args, it would be static since it wouldn't need a 'this' vector. Also, in your code for distanceTo, you're not using pc.Vec3#sub correctly. It subtracts rhs from the supplied vector in place. I would just do:\njavascript~~~\nvar v1 = this.data;\nvar v2 = rhs.data;\nvar x = v2[0] - v1[0];\nvar y = v2[1] - v1[1];\nvar z = v2[2] - v1[2];\nreturn Math.sqrt(x * x + y * y + z * z);\nNo allocations. No function calls. Should be pretty optimal. I should also say that there should be a Vec2 version, I guess.\nSorry, I should be putting these kinds of comments in your pull request code diff.\nSo bottom line is that I want to avoid adding new math functions to the API unless there's a really good use case. i.e. Somebody is writing a game and they are finding it hard to do what they want with the existing API. I think pc.Vec2/3#distanceTo is the only one people will use regularly. What do you think?\n. Thanks for reporting this! Very much appreciated. I have fixed the bug. :)\nhttps://github.com/playcanvas/engine/commit/4573a0dfd90f1b1f9d9387ddcba804d11792e54e\n. Hi! I think this has something to do with this commit: https://github.com/playcanvas/engine/commit/1680d36232a717cf71a714c24d94eabf8905af0a\nEssentially, I have a feeling that material's are now correctly respecting their 'blend type' in Designer. If you expand the Render State section at the bottom of a material in the Designer Material Editor, you'll see you can only select Normal or Additive. You can't currently create a material with no blending! The upshot is that every mesh is then rendered back to front (including meshes that should be opaque). @vkalpias and I will aim to get this fixed by Monday. I hope that's OK (and sorry if this is causing you a headache in the meantime!).\n. @daredevildave Any reason this can't be merged?\n. Thanks for the doc update! Well spotted. A contrib file makes sense. @daredevildave can you sort that out?\n. Hey @guycalledfrank, what do you think we should do with this?\n. If we turn this on, @vkalpias will need to update the material editor UI. It might 'break' certain artwork since behavior will be slightly different to the modelling apps, but if it gives more power to the PlayCanvas user, surely it's a good thing. What do you think @guycalledfrank - should we just turn this on?\n. I don't think there's currently a mechanism to version materials, but @daredevildave will know more. I think we probably should get a feel for what percentage of material would actually render different if we made the switch. If it's low, it's probably OK to just make the change.\n. Fixed in https://github.com/playcanvas/engine/commit/05c874c75ece811c219bf2f8440ce21938d7752b\n. Fixed in https://github.com/playcanvas/engine/commit/3fde24936be956749410e0084f88bcd778a4e140\n. I've disabled blending when rendering post effect full screen quads.\n. I would look at fixing it, but someone seems to have 'borrowed' my 360 pad! :( I might have to buy a new one sigh\n. I have added GamePad support to my Zombie Pac-Man game. All seems to work fine. I'm leaving this bug open though, until we have added an SDK sample plus some unit tests for pad input.\n. Hi @gotwig. That's interesting that the gamepadtest link works but PlayCanvas doesn't. The problem for me is that I don't have a Linux machine to test on (I do use Ubuntu, but it runs on VirtualBox and so cannot run WebGL). If you can help us fix that, it'd be great. Is there anything I can do to make debugging this easier? Maybe supply a simple test that registers button presses to the JS console or something?\n. So I thought that, currently, there was a standard mapping that all pads are using:\nhttps://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#remapping\nAre you able to break on this exception you mentioned:\nthis.current[a].pad.buttons[pc.input[this.current[a].map.buttons[b]]]\nWhat is undefined exactly? pad? map?\n. Yep, I'm happy for these to be added. Not sure why I never added them initially.\n. Looks good to me. :+1:  Thanks!!\n. Thanks @Systemcluster!\n. Fixed in 2e084ed4dad1ff359790e99dd65585bd56492956\n. Fixed in https://github.com/playcanvas/engine/commit/4c1d106021929db65cfdd4db8cde9bb68773207d\n. This was a bug in ammo.js which has been fixed by upgrading our version of the library.\n. At the moment, this PR doesn't seem to run in IE11. Can you try it your end? Hopefully you're running Win7 or up.\n. Fixed in 9f025310c3738fd75ddc4573e472ef4727439a17.\n. Point light shadows are really a new feature and it feels like they should be isolated in a specific PR. We won't be able to deploy that until late next week at the earliest. Can you submit the ambient light fix as a separate PR? Alternatively, I can patch that in to the engine's master branch myself by inspecting this PR and pulling out the relevant bits.\n. Thanks so much for letting me know! I've fixed the picking project with the change you outline. \n. If you suspect it's an engine problem, post here and if you think it's related to the website, then answers.playcanvas.com is good. But don't worry too much - I'd much rather we knew about bugs, wherever they're posted. ;o)\n. Fixed in https://github.com/playcanvas/engine/commit/e2f586046270b0483b09f689ca4ae8eb5e7afbcf\n. Chrome's cache seems pretty aggressive. Even CTRL+F5 doesn't seem to work as expected.\n. Here's another suggestion: if you run out of varyings, disable normal mapping and print a warning to the JS console. At least you are then almost certain to have enough varyings since you can drop the binormal and tangent. And at least the program will link and the mesh will render (albeit not quite as prettily). I'm not saying I like this option, but it's better than what we have currently.\n\ncan we drop mapTransforms and replace it with something better performance-wise?\n\nWhat did you have in mind?\n\nBut maybe it would be too complex and unusual for users?\n\nIt depends on the interface. I can't quite visualize what it would look like.\n\nActually, since we recompile & cache on any serious material change, the best option for now would be to check transform equality of different maps, and recompile if it's changed.\n\nYeah, this is probably the way to go for now.\nBy the way....I did just look at the GLSL generated for the floor plane in the project. It has 9 varyings:\n- vPositionW\n- vNormalW\n- vTangentW\n- vBinormalW\n- vUv0\n- vUvDiffuse\n- vUvNormal\n- vUvOpacity\n- vUvSpecular\nIt looks like vUv0 isn't needed. You could use a temporary instead. I guess at the moment, the linker isn't able to drop vUv0 because it's kind of being used.\n. I would say it would be best to remove uUv0/1 where possible first (as the top priority because it's easy to fix).\nUltimately, it's a question of the engine doing something sensible in every case when there are only 8 varyings possible. A failed program link must always be avoided.\n. @guycalledfrank I just wanted to completely understand the current status of this in the engine. Am I right in saying this is still technically an issue? What are the circumstances where the number of generated varyings can still exceed 8?\n. IMO, should be:\nBODYGROUP_NONE: 0,\nBODYGROUP_DEFAULT: 1,\nBODYGROUP_STATIC: 2,\nBODYGROUP_KINEMATIC: 4,\nBODYGROUP_TRIGGER: 8,\nBODYGROUP_ENGINE1: 16,\nBODYGROUP_USER1: 32,\nBODYGROUP_USER2: 64,\nBODYGROUP_USER3: 128,\nBODYGROUP_USER4: 256,\nBODYGROUP_USER5: 512,\nBODYGROUP_USER6: 1024,\nBODYGROUP_USER7: 2048,\nBODYGROUP_USER8: 4096,\nBODYGROUP_USER9: 8192,\nBODYGROUP_USER10: 16384,\n. @daredevildave I think this can be closed now, right?\n. Fixed in https://github.com/playcanvas/engine/commit/05c874c75ece811c219bf2f8440ce21938d7752b\n. Is this fixed now @Maksims?\n. Yes, but then since it's an extension, we'll always need multiple code paths. If it's a big perf win, it's worth considering. But for now, it's reasonably low priority. Note that this is a core feature of WebGL 2.0.\n. This was fixed with this PR: https://github.com/playcanvas/engine/commit/4918e7072d014221d59a34f4f2fe4a140cc2e3b5\n. For background, it's worth reading this:\nhttp://blog.tojicode.com/2012/07/using-webgldepthtexture.html\nI'm not convinced this buys us much but willing to be proved wrong.\n. Audio API (not Web Audio) support in IE was completely broken. I've just fixed it here https://github.com/playcanvas/engine/commit/f661718ec394a9320f50a2ea2ca4270820eff82f\nI don't know whether this helps solve this particular problem though.\n. @vkalpias Can we close this now?\n. Fixed in https://github.com/playcanvas/engine/commit/f661718ec394a9320f50a2ea2ca4270820eff82f\n. Ambient Occlusion Map should be in Ambient section, yes.\nSince we have diffuse, diffuseMap, diffuseMapTiling and diffuseMapOffset, it seems incongruous to have modulateDiffuse. Shouldn't it be diffuseModulate? Same for other colors of course.\nCan I suggest we rename specularAA to specularAntialias? It's just a bit clearer.\n. Can you submit specific bugs? Otherwise, it will be impossible to close this.\n. Is this now fixed @guycalledfrank?\n. Fixed in https://github.com/playcanvas/engine/commit/795ff2530693ae75da539621c2d5686a0bfe28ad\n. Fixed in https://github.com/playcanvas/engine/commit/e4cbec7bb2eb8b5f3d9217f87af4280b4aff6d3d\nA biasing problem remains but I'd argue that is a separate bug, so I'm closing this for now.\n. I'm 99.999% certain the depth buffer is being cleared. This is either a precision issue or some place where distanceToViewPosition is being used instead of viewSpaceZ or vice versa.\n. Fixed in https://github.com/playcanvas/engine/commit/3e4f3b99739ca9e421b3e6d24a8473c63710f3bb\n. So it's very hard to discern the problem by looking at that demo. However, a pixel's RGB is: Ambient contribution + spot contribution. If you have the pixel in shadow, the result is: Ambient contribution. So if the spot contribution is very small, it will be hard to see the shadows. This is what I would expect. And for spots with a small range, the rapid attenuation over a short distance will mean that shadows will be hard to see.\n. Fixed in https://github.com/playcanvas/engine/commit/f6c0e75952203887ec6fe49bbaee81be443c3941\nNote that we need to expose this in the editor still. This is obviously just the engine component for this feature.\n. Fixed in https://github.com/playcanvas/engine/commit/fe1cc4c9ab7ce08d1544d93a7c1fb93148efe4e8\n. Thanks for the feedback. It was something I spent quite some time considering when I designed the API. The thinking was that getPosition suggests an absolute position and it's fewer characters to type.\nCan everybody reading this issue let us know how you feel by answering this survey question:\nhttps://www.surveymonkey.com/s/YCH8NDR\n. I don't like Ogre's naming at all. Any similarity to Unity could be considered a good thing in that Unity developers will find the API familiar. Do you agree?\n. You can switch between local space and world space gizmo in the editor. It's the 'World' icon on the toolbar (or 'Edit' -> 'World/Local Space').\n. On the whole, I think this is a big, big improvement. A question:\nWhich is best and why?\n1. var e = new pc.Entity(app);\n2. var e = new pc.Entity(scene);\n3. var e = app.createEntity();\n4. var e = scene.createEntity();\nObviously, this PR chooses the first option. Just want to ensure we're choosing right here.\n. I'm not keen on that. There shouldn't be two ways of doing things. \"Pass this parameter if you think you might run your app on the same page as another app even though you might not know at the time. And if you don't pass the parameter, and your app does at some point run alongside another, the results will be undefined.\" That's bad API design IMHO.\nI personally like:\nvar light = scene.createEntity().addComponent('light');\n@daredevildave points out to me that createThing is not a paradigm we use much in the engine which is a very valid observation. But maybe we should? This means developers can move away from calling 'new' and we can start using smarter allocation schemes internally.\nI do concede that @Maksims suggestion is quick and easy to implement and is generally an improvement though - so a compromise. But it doesn't mean I like it. ;)\n. If you are an engine user, this is because you are no included ammo.js into your page:\n<script src=\"http://code.playcanvas.com/ammo.751ec5f.js\">\nSee this example.\nIf you are using the PlayCanvas cloud editor, it's because you don't have 3D Physics turned on. Go to the project settings page for your project and ensure the 'Enable 3D Physics' option is checked. We are aware of a bug where this can become unset - we will fix this very soon.\n. Fixed in https://github.com/playcanvas/engine/commit/34e6bfb80238c85f72fc480ca11db50c1b259022\n. I already deleted the view_position uniform from the base.vs file (see here) because it doesn't seem to be used anywhere in our current set of chunks. As a result, can I simply close this?\n. Fixed in https://github.com/playcanvas/engine/commit/d6c72a12d13104fffe872143138afee887f2ecac\n. Fixed in https://github.com/playcanvas/engine/commit/6e662ca4d32543020f45f3ce8c63ed928f26d560\n. To give a little more information, uniformMatrix3fv is being passed a Vec3 for the spawnBounds uniform, rather than a Float32Array. I'm guessing the shader program isn't updating when the emitter type is changed?\n. You're not following the (very complicated) instructions to reproduce, @Maksims. I can demonstrate tomorrow if you like.\n. This seems fixed now. Closing...\n. I'm going to close this because we did some work to delay shader linking in the engine. The only other things we can do are start compilation earlier or reduce the number of shaders generated (probably by moving to deferred rendering). These should be opened as new issues IMHO. The original premise of the bug report was wrong.\n. Fixed in https://github.com/playcanvas/engine/commit/f1c261a99ec341b495364bf33d4a251bd1d0f77c\n. Just a point in response to: \n\nAlso, the API for LookAt does not contain eyePos.\n\nYou set eyePos by simply using the setPosition/setLocalPosition functions. e.g.:\ncameraEntity.setPosition(1, 1, 1);\ncameraEntity.lookAt(0, 0, 0);\n. Just to check that your import is actually working, can you run this function:\nfunction supportsImports() {\n    return 'import' in document.createElement('link');\n}\nWhat does it return? Note I found this function here:\nhttp://www.html5rocks.com/en/tutorials/webcomponents/imports/\n. @liming0791 Have you checked that 'java' is in your path on the command line? I don't see why the 64-bit version of Java wouldn't work.\n. glTF vertex data is loaded via ArrayBuffer from .bin files. Ideally, you want to point a pc.VertexBuffer at this data and use it directly without having to copy it. This is fine if the glTF vertex data is interleaved. But the most common layout for the vertex data is non-interleaved. This means we'd need to create a pc.VertexBuffer per attribute, presumably. And a pc.Mesh would need multiple pc.VertexBuffer objects.. pc.GraphicsDevice#clear should really only be called inside a pc.GraphicsDevice#updateBegin/End block. The render target is only bound in WebGL inside pc.GraphicsDevice#updateBegin. So provided you do call clear inside the begin/end block, whatever is bound (render target or back buffer) will be cleared.\nI could tighten up the docs on this to make it more obvious.\n. Yes, that should work.\n. I suspect this is not working because you are using the default filter modes on your render target, which are mipmapped. Here's code from the pc.Texture constructor:\n```\n    this._addressU = pc.ADDRESS_REPEAT;\n    this._addressV = pc.ADDRESS_REPEAT;\nif (pc.math.powerOfTwo(this._width) && pc.math.powerOfTwo(this._height)) {\n    this._minFilter = pc.FILTER_LINEAR_MIPMAP_LINEAR;\n} else {\n    this._minFilter = pc.FILTER_LINEAR;\n}\nthis._magFilter = pc.FILTER_LINEAR;\n\n```\nWhen creating this.colorRT, do this:\n```\n    // Create a 512x512x24-bit render target with a depth buffer\n    this.colorBuffer = new pc.Texture(gd, {\n        width: 512,\n        height: 512,\n        format: pc.PIXELFORMAT_R8_G8_B8\n    });\n    this.colorBuffer.minFilter = pc.FILTER_NEAREST;\n    this.colorBuffer.magFilter = pc.FILTER_NEAREST;\n    this.colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n    this.colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\nthis.colorRT = new pc.RenderTarget(gd, this.colorBuffer, {\n    depth: true\n});\n\n```\n. This isn't a bug. The other eulers will have flipped signs at some point in rotating around Y. But you're not printing those. The Eulers are not stored as such. Instead, they are converted to a quaternion on set:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/scene_graphnode.js#L594\nAnd when you query them, they are extracted from the quaternion:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/scene_graphnode.js#L393\nThis store/extract operation can cause axes to flip, but the rotation remains equivalent. Getting Eulers you have just set does not guarantee returning the same values. But it does guarantee returning the same orientation. You cannot consider one Euler while ignoring the other two.\n. Are bit masks user friendly? Don't I want to create a tag called 'Lightmapped' and set it on a material and exclude the sunlight directional from 'Lightmapped'.\n. Currently, you can set a sphere map or a cube map as the material's reflection map. The cube map will override the sphere map if both are present. Shouldn't we follow that convention here? If a specular map and a metalness map is set, use the metalness map?\n. What's the UI for this going to be in the Material Editor (to switch between Specular and Metalness)? @vkalpias @Maksims ?\n. I just imagine that the API would be smart enough to see that:\nmaterial.specularMap = someMap;\nmaterial.metalnessMap = null;\n....is saying that I want to use the specular workflow.\nOr even:\nvar m = new pc.PhongMaterial();\nm.metalnessMap = someMap;\nAdding m.useMetalness = true seems a bit....redundant. Sure, a toggle for UI is OK. But is this really necessary for the API? And in the (rare) case where both maps are set, just pick one. Metalness, I'd say, since it's probably less common for that map to be set. Thoughts?\n. Is it possible to avoid adding to Designer since it's going away?\n. Couple of comments:\n- pc.Light is not public API. If developers need this, it must be in the light component.\n- It should be pc.SHADOWUPDATE_XXX, not pc.SHADOW_UPDATE_XXX. Check out the format of all the other enums.\n. There's no requirements for component properties to be serialized or have UI.\nI sympathize about your tiredness, but it's the only way developers will find the API in the docs. ;)\n. It probably makes sense that we merge some of the scene API into the components so we don't need to do all this copy-pasting any more. But that's a separate job, right?\n. Please document pc.Application#timeScale.\n. Hi @issacclee - this work is still not scheduled. Can you give me the use case of what you want this feature for (just out of curiosity)?\n. Could it be achieved with skinning?\n. You're in luck @westoncb - we're going to look into adding support for this next. Good timing!. I feel that these flags are too general and hard to explain. Should we, for now, just expose hints on the phong material?\npc.PhongMaterial#fastGamma = true/false;\npc.PhongMaterial#fastTbn = true/false;\nOr a bitfield maybe?\n. OK, but do you see my point? Your enum naming is reasonably meaningless. What does it mean for a shader to be medium quality? I'd prefer to think of these as hints or individual flags.\n. I think this belongs on the camera.\n. We really need a fast, reasonably general purpose, space partitioning scheme to do efficient frustum culling of many meshes.\n. Hey @guycalledfrank - do you agree this is a bug? I just verified it. Does seem a bit odd that it doesn't affect just the map...\n. Sure. One option is to create an entity, add a model component with type set to 'plane'. You can then orient it however you like using the entity.setEulerAngles/setRotation functions.\n. Ah, so it seems the common thread is the Qualcomm Adremo family of GPUs. One Plus One is an Adreno 330. @Maksims can you provide the http://webglreport.com/ output for your phone? \n. So looks like it's not using the EXT_shader_texture_lod code path. But there are 16 textures supported in the fragment shader which should be sufficient. @guycalledfrank any ideas for figuring out what's going on here? It helps that @Maksims has a device that exhibits the problem.\n. Hey @Maksims, a bunch of GLSL fixes have been committed recently. Might be worth republishing Star-Lord against the latest engine and verifying this is still a problem (I suspect it is).\n. @SquareLi Can you confirm if this is now fixed? Would be cool to close the issue. :smile: \n. Would it help to switch FF or Chrome on Windows to use OpenGL instead of DX?\nhttps://github.com/mrdoob/three.js/wiki/How-to-use-OpenGL-or-ANGLE-rendering-on-Windows\n. I think it's fair to say this is done now.\n. Indeed it is.\n. My pleasure. Sorry it took so long! :). I wouldn't even internalize it. Like @Maksims says, startsWith already works in Chrome and FF. We simply polyfill for other browsers. We should remove endsWith too. Also note that pc.string.toBool is not used anywhere in the engine. And pc.string.format is pretty worthless. Just use the string + operator, fer cryin' out loud. :)\n. I think 'super-useful' is maybe overstating it. Let's look at the only usage not related to printing errors/warnings in the engine:\n```\n            var path = this.name;\n            var format = \"{0}/{1}\";\n        while (parent && parent._parent) {\n            path = pc.string.format(format, parent.name, path);\n            parent = parent._parent;\n        }\n\n```\nHow is that better than:\nvar path = this.name;\n            while (parent && parent._parent) {\n                path = parent.name + '/' +  path;\n                parent = parent._parent;\n            }\n. I don't think this is the case. The line is:\nlogERROR(\"Failed to compile \" + typeName + \" shader:\\n\\n\" + addLineNumbers(src) + \"\\n\\n\" + error);\naddLineNumbers prepends a line number to each line of shader source (the string held in 'src') and then, lastly, the error returned from WebGL is printed (with no line numbers required).\n. Can we please verify that? It's surprising to me. What happens on your Mac?\n. So @Maksims recommended me a laptop with a crap keyboard. Grrr.\n. I can confirm that this script works on my keyboard.\n. @guycalledfrank I can't quite remember. Perhaps because I assumed it would be regenerated at render time. But yes, that doesn't account for the case where you set the shader manually (when using a pc.Material instead of a pc.PhongMaterial).\n. You mean expose alpha test? For foliage, I think there are techniques where you can render once with alpha test to just write fully opaque pixels, and then render again with blending turned on.\n. For uniformity, can't all these functions take a layer argument?\n. Can we slow down a bit here. It's arguable to add reflect. But minLength and maxLength are just very simple utility functions. I'm not convinced they're adding much value.\nvar min = v1.length() < v2.length() ? v1 : v2;\nWhat's wrong with just having the above in your code?\nIt's also arguable to add toJSON perhaps, but wouldn't it be:\nreturn { x: this.x, y: this.y, z: this.z };\n? Also, we can't just add a generic function like that without also doing the other math classes.\nAs for the constructor, we could have it take any combination of parameters (numbers, arrays, typed arrays, strings, and so on), but there's a balance between maintaining simplicity, speed and flexibility. Plus, any change to one math class constructor really ought to apply to all of them.\nMy current feeling is I'm OK to pull reflect. With documentation included. :)\n. I think that's an Editor problem, not an engine problem. Although I'm not entirely sure how I'd fix it in the Editor codebase.\n. Sorry, I'm not sure exactly what's missing here. We have a cubemap resource handler. The Editor seems to generate a valid zip for a cubemap. What do we need to do and (roughly) how long would it take to fix? (BTW, I just tried downloading a cubemap and loading it into one of the engine examples but the load function passed to loadFromUrl never gets called).\n. Have you tried updating motion.js yourself?\nWe've been working on a replacement animation system here:\nhttps://github.com/playcanvas/playcanvas-gltf/blob/master/src/playcanvas-anim.js\nIt supports animation curves and better animation crossfading. It should evolve into what is outlined in the OP.. It will be brought into the mainline engine codebase as a 'true' component in the next few months, yes. As for whether it supports animation masking, I don't think so, but @thomasbiang can comment on that.. What about supporting wildcards in the regular find function?\n. I feel that coroutines and state machines are 'core' objects. Coroutines seem to have a dependency on component systems (for updates). Note that the core pc.Curve object has had a dependency introduced on coroutines. Just trying to take a birds eye architectural view on things. Thoughts?\n. Just wondering where things are at with this PR. Would love to get this merged. :)\n. Oh dear, sorry to hear that. :( No hurry on this...\n. @Maksims @vkalpias @guycalledfrank Can you guys test TANX on your Android devices? Anybody get a WebGL crash?\n. Just tested on a Nexus 4. That's fine too. @robknopf I'm amazed but it could just be that you're very unlucky with the devices you have. I think I have a Note 4 at home. I'll try it on that tonight.\n. What I would recommend, Rob, is submitting this to Chromium. As @Maksims says, this is highly likely to be a browser bug.\nhttps://code.google.com/p/chromium/issues/list\nIf you fill out an issue there listing a link to the content that causes the problem and the devices/Android version/browser and browser version, then paste the bug link here, and we'll all star it (to stay notified and hopefully bump up the priority at Google).\n. No, but we would welcome any pull request that resolves the issue.. Seems fixed! I just tested this on iPhone X running iOS 11. Works fine with this little script with Device Pixel Ratio enabled and disabled:\nvar ScreenToWorld = pc.createScript('screenToWorld');\n```\n// initialize code called once per entity\nScreenToWorld.prototype.initialize = function() {\n    this.app.mouse.on('mousemove', function (e) {\n        var pos = this.entity.camera.screenToWorld(e.x, e.y, 2);\n        this.app.root.findByName('Sphere').setPosition(pos);\n    }, this);\n    if (this.app.touch) {\n        this.app.touch.on('touchmove', function (e) {\n            var pos = this.entity.camera.screenToWorld(e.touches[0].x, e.touches[0].y, 2);\n            this.app.root.findByName('Sphere').setPosition(pos);\n        }, this);\n    }\n};\n```. I thought that's what this does:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/graphics_device.js#L742\n. Ah OK, good point. :)\n. This is in the new sound component, right @vkalpias?\n. Fixed in https://github.com/playcanvas/engine/pull/1041. No ETA yet, but the dev team discussed the need for 3 new engine features after completing a recent project. This was one of them, so it's bubbling closer to the top of the priority list.\n. You can already run PlayCanvas in a worker. See issue https://github.com/playcanvas/engine/issues/11.\n. Fixed in 86bd8c53100d252595fbcf0f01a4c28ec91aa2de\n. Looks good to me apart from the minor comments I had. :)\n. We don't have a concept of static meshes/models, but ordinarily, collision meshes would never change scale in a running app, except for in response to a scale change in the Editor, where it doesn't have to be fast to check this kind of thing.\n. Does a lerp make sense for a representation of orientation? Surely you just need slerp? In other words, what's your use case?\n. Hey @vkalpias - does the new sound component support this?\n. I'm happy to have this closed for now then, since at least something is now visible.\n. Fixed in 0deb497649ea7c7c647b4af4e95b80777dbc8d64\n. @guycalledfrank Is this already fixed? \nhttps://github.com/playcanvas/engine/blob/master/src/graphics/device.js#L1025\nCan you verify?\n. Sounds like a browser/driver bug, so closing... Feel free to log as a bug on any relevant browser project.\n. Closing due to lack of activity. Also, there are a million things we could test to check against broken WebGL implementations, but we have to draw a line somewhere. I'm all for posting bugs against browser projects for this kind of thing though. For that, I'd need: device, OS version, browser and browser version. Plus a cubemap asset that triggers the problem.. Fixed in 89d09780fd2f53b7a106de8a368ab4cbb047c175\n. Apologies for the inconvenience. Fixing right now.\n. Fixed in 76db905c2edc770b31d844964cbbd18a17c323c7\nI'm so sorry this bug affected you.\n. Since this is now far, far faster than it was, I'm going to close this issue. If it becomes a problem again, we'll reopen the issue.\n. Expect Microsoft to fix this sometime next year. But yes, since this is a bug in IE/Edge, I'm going to close this issue. If you are affected by this, maybe consider splitting your opacity map out to a different image.\n. Fixed in 300947e521864d59a7904770956202395de3295c. Sorry, but I accidentally committed this to stable. I've since merged it back to master. I've checked all is well - it's a very minor change so nothing to worry about. :smile:\n. No problem, Nakata-san! :) A couple of things:\n1. Please complete the Contributor License Agreement here so we can merge your PR.\n2. Please test your engine changes against your project. To do this, build the engine (run 'build.py' in the build folder), run a local web server (in a command prompt, navigate to the build\\output folder and run a local server. python -m SimpleHTTPServer 51000). Then add '?use_local_engine=true' to the URL of your launched app running. Then your local engine will be used instead of the one on code.playcanvas.com\n. Any ideas, @vkalpias?\n. My opinion here is that an initial call to update with dt as 0 means that the first frame rendered will be the start state as specified by scripts' initialize function. This is a good thing IMHO. So I'm going to close this.. But with option 1, how are shapes going to be moved relative to the entity? You'd need to add offsets for at least translation and rotation, and probably scale as well. I think it would get a bit messy. I'm leaning more towards option 2.\n. Agreed @redsparkzone. Having to create a child entity to offset a single collision component is indeed annoying.\n. Hey @guycalledfrank (and @Maksims) - we had this discussion before. Why didn't we switch newly created pc.PhongMaterial instances to physical? Especially since the Editor creates physical materials by default now. I guess we didn't want to change the behavior of existing projects. But, to be honest, how many project create materials in script and can't be quickly fixed up as necessary. I vote we just change it.\n. Fixed in 5d9f0f42d8d0ddc0b6aa64b206c715d3e9b5ed39\n. Haha. That's my bug. Well done for spotting it! :+1: \n. Thanks!\n. Actually, I don't think this fixed what I expected it to fix after all. Check out these slightly different viewpoints and the shadows cast:\n\nSo it seems we still have a problem here.\n. If you feel like investigating, the project is here:\nhttps://playcanvas.com/project/336533/overview/sponza-atrium\n. @guycalledfrank has added support for UV1 to pc.createMesh. The function now just needs vertex color support for your feature request to be fulfilled @Maksims. Feel free to add it if you get a second, @guycalledfrank.\n. This makes sense. When I was profiling SWERVE, I noticed that starting playback of a new sound was relatively expensive on the CPU (creating stuff).\n. That file doesn't report browser (yet).. Hi there. I just wrote this for you:\nhttp://developer.playcanvas.com/en/user-manual/graphics/file-format/\nWhat do you think?\n. How are you reproducing this, @guycalledfrank?\n. Fixed in iOS 10.. I notice our keyboard handling code reference the keyIdentifier property. According to MDN, this is deprecated so I guess we should update:\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier\n. On Chrome (Windows), the keypress event has a keyIdentifier of 'U+007' but when was pressed is called, it's looking for 'Delete' in the keymap, not 'U+007'.\n. Confirmed.\n. I just verified that the skin splitting does work. I suspect maybe you executed those lines after the model JSON has been parsed. To see the skin partitioner work, just have the texture_float extension return null and set the max vertex uniforms to 128. Then you'll get a bone limit of about 21. And it does actually work. The problem is that the engine has changed how it handles material mappings in the last few years. The skin partitioner does handle the mappings when they are passed in as a parameter. However, these days, the call has been changed to pass null. So materials are incorrectly assigned. And the extra mesh instances generated from the split simply get the default material:\n\nThe current skin splitter is really bad for other reasons too. \n\nIt manipulates the source JSON model format. It doesn't split the runtime format. This mean that if you load a glTF skinned model, say, the skin partitioner cannot split it.\nPicking in the Editor 3D view starts to return the wrong mesh instances for split skins. I can't exactly say why, but I've seen this happen.\n\nI'm wondering if we should consider ripping it out and falling back to CPU skinning where necessary. I mean, we already have a CPU morphing path.. Fixed in 2c1bb5ae20f0e41e1d3a4a53fddc923af1f366e3\n. Fixed by @nakata0705 in ca49cd45a6288e4deb0bfd495b5f7e1d0962d021\n. Fixed in 8bba7e33e5239a72f89c1ace93b714c4b13010fe\n. Because update is called every frame and this._lastmap is overwritten with a new object on every call. The previously created and set one is then orphaned and later garbage collected.\n. No. For that to happen, there'd be a bug in the JS engine and not our code. :smile: \n. I like either:\nmaterial.chunks.vertex.transform\nmaterial.chunks.fragment.diffuseConst\n(I hate acronyms like vs/fs)\nOr:\nmaterial.chunks.transform\nmaterial.chunks.diffuseConst\n(Do we even need to differentiate between vertex and fragment chunks?)\n. This doesn't seem to happen any more. iOS may have been patched. Closing.\n. I can live with resolution change. It's the banding/artifacts that appear (shadow bias related) as the frustum size changes. Makes it really hard to tune shadows if the window size is variable.\n. No reproducible was ever provided so I'm closing this.. Definitely one for @guycalledfrank \n. Hmmm, I kinda agree with @redsparkzone, here. Or make it an option. Like ALT+drag locks the world space position of the reparented entity.\n. The offending lines are now commented out so closing.. Sorry, but I would prefer 'visible' as a property that complements 'enabled'. I don't see why this should be two functions. And I would change the property on the pc.MeshInstance to visible. Nice, simple and consistent.\n. I'll compromise on a property called 'hidden'. Can't have hide because it's a verb/action which doesn't work for me as a property name.\n. This is because the experimental build of Chrome is based on Chromium, which doesn't support MP3 playback.\n. It looks like a point light does now cull the scene against each face of the shadow cubemap:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L1749\nSo I'm closing this. @guycalledfrank, if I've misunderstood something, please reopen. \ud83d\ude04 . Neither function appears to be official API yet - they don't appear in the API reference manual. However, I believe both should be 'intersectsRay' (with s).\n. Hey, @guycalledfrank, does current batching support in the engine warrant closing this issue? Seems so to me.. Yep, I agree. If I define a 'wood' material, it's just wood. It's not 'wood in room X but not in room Y'. That's just weird.\n. Yes. One option is to create an entity with rigidbody/collision components and create a child entity with a model component and offset the model. Or vice versa.\n. No, I don't even think that's officially API (and I gotta be honest, that code to scroll the UVs is pretty ugly!). My snippet is the official way. Removing the update stops the scrolling effect.\n. So I've been thinking.... \ud83d\ude04 \nPerhaps we should treat materials like textures. Whenever you update a property, we just set a dirty flag to true. Then, in the forward renderer, when the material is set, we check the flag and update the material internally as required.\nAnd the update procedure should just update what's changed. Maybe we need some kind of 'dirty properties' list.\n. I've tried to recreate the bug with this app:\nhttp://playcanv.as/p/5MYLz99N/\nOriginal project:\nhttps://playcanvas.com/project/413360/overview/fog-bug\nWe don't have any of those devices in the office. We get:\nNexus 5X:\n\nOne Plus Two:\n\nSamsung Galaxy Tab S:\n\nSamsung Galaxy Alpha:\n\nSamsung Galaxy S6 Edge:\n\nCan you verify that this app also exhibits the problem on the Motos/LG G2? Do you have Android devices that do not display the problem?\n. Some extra info about device GPUs:\nMoto E: Adreno 302\nMoto G: Adreno 305\nLG G2: Adreno 330\nNotice a theme? ;)\n. @guycalledfrank Maybe the way to debug/resolve this is to create a script that creates and assigns a minimal shader that implements fogging of a white color and pretty much nothing else. Then we can ask Mario to tweak the shader until we track down the offending line. Might take a few iterations, but could work. :/\n. @guycalledfrank has now fixed this so closing this issue...\n. A parallax map without a normal map? Does that even make sense?\n. This no longer seems to happen:\n\n@guycalledfrank - if you think I'm closing this prematurely, please re-open.. Oh! Indeed it is. \ud83d\ude04 . It would be great to have an engine example showing how to load a texture with variants.\n. I can't reproduce this so I'm closing it.. Closing due to age of bug. No similar reports of such artifacts have come in over the last year.. You just need to build and include the built JS library. Probably best to include the minified and unminified library.\n- Clone the repo\n- Switch to stable branch\n- Check the last commit of the form [RELEASE] vX.XXX.X. This is the build version.\n- Build unminified library: node build.js -l 0 -o playcanvas-X.XXX.X.js\n- Build minified library: node build.js -l 1 -o playcanvas-X.XXX.X.min.js\n. Good point. The linked demo does both (and looks great for it).\n. We already support this in the engine. Just set this property on option.graphicsDeviceOptions, where options is an argument of the pc.Application constructor. The graphicsDeviceOptions object is passed directly into getContext when wrangling the WebGL context. I suggest closing this, @daredevildave.. This is no longer the case. I guess @guycalledfrank has worked some magic to optimize this. \ud83d\ude04 . Oh right. Is this issue already logged then?\n. OK, I'll close this then.\n. The 'nullification' (is that a word) of setPosition/Rotation when adding a dynamic rigid body component has been a source of confusion and endless support queries since we implemented the API. Can we make look again at whether we can solve that problem? The reason we introduced this was because we didn't want the entity to know about the rigidbody component. But perhaps we should look at this again...\n. I was thinking more that updating the transform of the entity via the standard functions could set some flag which the rigidbody could query and then handle. So the entity still wouldn't need to know about the rigidbody component. But I'm sure I would have thought about this before so there's probably a problem with this.\n. Do it with events? The rigidbody component could register an event on the entity if the position or orientation is updated and respond accordingly?\n. Yeah, that'd work (for now). It's internal so we can always change it later if necessary.\n. Fixed in f2f81afd2eb9c4de42f60d57a4adc2990e53c9a2. But this PR doesn't seem to touch Mat4.mul2. What's the story?\nHow expensive in the instanceof operator? Did you do tests in JSperf?. But glTF is designed to be a format for transmission and loading. i.e. it's a runtime format, not a source format, as FBX is. It is worth evaluating whether it could be used as a replacement for PlayCanvas' current JSON format.. Yes, a glTF importer would indeed support 2.0 since that is the current head version of the format.\nDo you have evidence that GZIPd PlayCanvas JSON is much different in size to glTF? Personally, I think the benefit of glTF is probably more about it being faster to read and lower memory requirements on the client.. @daredevildave Since you've now merged the OBJ parser, should we put a glTF parser in the same folder? The question is: Should parsers be part of the core engine or separate? Just concerned about bloating the engine.. Shouldn't the parsers go in extras then?. Indeed. \ud83d\ude04 . For anyone coming to this issue looking for glTF support, please head here for a fully-featured glTF 2.0 loader:\nhttps://github.com/playcanvas/playcanvas-gltf\nWe might transfer the loader to this repo at some point. But for now, we'll keep it as a separate extension that you can drop into your projects.. 0, 0, 0 isn't a normalized vector - I wouldn't expect that as the result. I'm not sure how this will help. If you're concerned that you might have a zero length vector, do:\nif (v.length() > 0) {\n    v.normalize();\n}. OK. Fixed in https://github.com/playcanvas/engine/commit/bfcd6a26956deaeffb931ba3f711f8dc3feaaaf1. Assigning this thread to @guycalledfrank. This part of the engine has changed a fair bit since I last worked on it.. @daredevildave - can you provide a description for this issue please? In what way are they not destroyed correctly?. Fixed in https://github.com/playcanvas/engine/pull/1118. Some time ago, we introduced the following convention for predicating debug code in the engine:\n// #ifdef DEBUG\n   doDebugStuff();\n// #endif\nExample:\nhttps://github.com/playcanvas/engine/blob/master/src/math/mat4.js#L805\nTherefore, I'm closing this.\n. @vkalpias or @daredevildave know which tool is used to generate the font files. Guys?. I'm just gonna leave this here:\nhttps://astiopin.github.io/webgl_fonts/. No, I don't feel like it's a hard dependency really. From the looks of things, the ammo.js node package is no longer updated.\nAnd the package.json is not regularly updated with a meaningful version.\nThe only dependency on ammo is the link to the version of the library that we recommend.\nI don't think the library is required anywhere else in the codebase. Now, as an end user, sure, you're likely to want to use ammo.js, and if so, either grab the latest build from kripken's repo, or use the latest on https://code.playcanvas.com  \nI think I'll add a comment in the engine's top-level readme to explain all this.\n. This hasn't been updated in some time. What's the plan with this?. Just out of curiosity, I just did a quick test to see if this is still an issue - and it is.\n\n. It seems so, yes.. Looks OK to me. \ud83d\udc4d . There's no integration of React with PlayCanvas as far as I'm aware.. This is a good example.. This doesn't lead to a big performance difference when I run tests. Certainly, compileShader is called multiple times with the same shader source, but the browser (at least Chrome) seems smart enough to not recompile the same code. I barely detect a load time difference for After the Flood.\nThat said, I am definitely in favor of only calling a WebGL function when it's necessary. So I do think it would be worth refactoring shader compilation to only compile unique source.. Oooor, just fall back to audio tag (as is the case when Web Audio API is not available).. Just to chip in again, I did try to debug and fix this, but on my Win10 machine, I can create 25 browser tabs playing a looping sound with Web Audio and it works fine. I gave up at 25. Unless we can actually find a system that exhibits the problem, we'll have to close this.. Agreed.. So, @guycalledfrank, I just updated that project to use the new batching functionality. Works great. Draw calls drop from ~2000 to ~100 and render time goes from about 9ms to about 2ms on my laptop. Nice. I notice the auto instancing code paths are still in the engine. Does the new batching completely supersede it? Can it now be deleted? . Well, I don't think it was ever promoted to public API so go right ahead.. Can you include a link? Not quite sure what you're referring to.. Ah this:\nhttps://github.com/playcanvas/engine/blob/master/examples/camera/first_person/first_person_camera.js\nYep, you're right! Need updating.. Are you saying the example I updated doesn't work for you. Or that your own app doesn't work?. I've tried that example in my fork of the engine and a fresh clone of the master repo. Works fine. Not sure what to suggest.. No, that doesn't work.. It's because of this:\nvar app = new pc.Application(canvas, {\n        mouse: new pc.Mouse(canvas),\n        keyboard: new pc.Keyboard(canvas)\n    });\nShould be:\nvar app = new pc.Application(canvas, {\n        mouse: new pc.Mouse(window),\n        keyboard: new pc.Keyboard(window)\n    });. I've fixed this and a bunch of other stuff here:\nhttps://github.com/playcanvas/engine/pull/906. Closes #902 . Duplicate of #699. Closing.. Thanks! \ud83d\udc4d . I believe @Maksims  has now updated the default shadow bias when creating new projects. You may have to tweak the bias of existing projects.. Thanks.. Thanks. Hey, @daredevildave, what should happen with this PR? I've seen several folks ask about npm support. Any thoughts/feelings on this?. I want to understand more about this. Currently, the build.js file generates a package.json. What is that? Should we be checking it in? If we do, we'll have the engine version number checked in, which means we must edit the package.json every time we do a release. If we check in the package.json, does that mean we should start checking in builds of the engine? Do we have to register the PlayCanvas engine in some NPM registry somewhere?. Hi everyone. Sorry it took so long to merge this. Better late than never. \ud83d\ude09 \nI'm also now wondering if we should move to rollup.... To be honest, @scarletsky, I'm not sure about jsdom.\nI just looked at rollup and webpack. Despite webpack seeming to be more popular, rollup seems to be designed specifically for building and distributing JS libraries so I feel it's probably a better fit. With rollup, you can build a library for both Node and general browser usage. It would involve quite a significant edit to the sourcebase though.. Last week, I published a test package to npmjs as a way to test drive the process for the engine:\nhttps://www.npmjs.com/package/eslint-config-playcanvas\nI'm going to update the engine to use this package probably tomorrow and merge this ESLint update: https://github.com/playcanvas/engine/pull/1161\nThe outstanding things that we have to figure out:\n\nDo we start committing engine builds to GH?\nIf so, where should they be built to? I think build instead of build/output\nAnd if so, what frequency should we regenerate the engine builds?\nShould we change the library build name? Currently, we build to playcanvas-latest.js. I think playcanvas.js (and playcanvas.min.js) are probably better.\nDo we need to update our continuous integration server in response to any of the above changes?. Fixed in #936 . Thanks. Can you sign the Contributor Agreement before we can merge please?\n. Thanks!. Thanks!. Here you go @guycalledfrank:\n\nhttps://playcanvas.com/project/486581/overview/cubetaskfordebug. I would recommend bearing with us while we put the finishing touches to a major rework of the engine. You can find the current state of the PR holding this update here. After we deploy this, I suspect it'll be much easier to do what you want. @guycalledfrank can probably confirm (or deny!).\n. Looks good to me. Go ahead and merge. \ud83d\udc4d . Thanks! \ud83d\udc4d . Thanks!. Thanks! . Thanks for the contribution @MeisterGit. Have you filled out the Contributor License Agreement?\nHappy to merge, @guycalledfrank? . Thanks so much! \ud83d\udc4d . Thanks! \ud83d\udc4d . I guarantee that no one will ever see aabbVer reach max value. :smile:. Well, do the math, but MAX_VALUE is truly enormous.. Thanks! \ud83d\udc4d . Thanks!!. Sorry, I didn't notice where the call to reset was being made. If I call pc.Scene.defaultMaterial.reset(); at the end of the pc.Application constructor, the example app you have works fine.\n. Hey @guycalledfrank, can you run TANX on your iPhone and check if the particles are displaying when you play? e.g. Shells exploding against walls. I don't see them on my iPhone 7. Perhaps this is related?. @daredevildave, can you review please?. Thanks! \ud83d\udc4d . Thanks!. Thanks! \ud83d\udc4d . Thoughts @daredevildave?. @vkalpias or @daredevildave - looks good to you guys?. I'm not sure I understand. The format supports 4 blend indices per vertex for skinning, not 2. Am I missing something?. Thanks! \ud83d\udc4d . Seems so.. I believe Google is working on an iframe -> texture solution:\nhttps://www.youtube.com/watch?v=dAtdE4LQCSc#t=25m22s\nWho knows when that will see the light of day or whether it'll become a standard, but it looks pretty cool.\nIn the meantime, it is possible to render a PlayCanvas scene over an HTML div that is transformed with CSS 3D to match the transform of the PlayCanvas camera. You simply have to render a transparent quad into the PlayCanvas scene where you want to the 3D div to be to write the quad to the z-buffer. But yeah, it's a technique that does kinda work.. GitHub describes milestones as follows:\n\"Use Milestones to create collections of Issues and Pull Requests for a particular release or project.\"\nAs you have probably noticed, we generate releases a lot faster than many other open source projects. It's not uncommon for us to have multiple releases of the engine per week. And our engine 'projects' tend to be delivered by one engineer per 'project' in a single PR. So GitHub's milestones feature doesn't map very well onto the PlayCanvas engine repo.\nTo see ongoing development, just keep an eye on the master branch and the list of incoming PRs.\nNow, I do think we should start publishing a roadmap, which may be more what you're after. I'll have a think about the best way to do that. But for now, I'm going to close this issue because we don't have plans to start generating milestones on GitHub, at least for the moment.. Interesting suggestion. But Running PlayCanvas on Regl will likely make it slower. And since nobody has ever requested the ability to share a PlayCanvas WebGL context with another renderer, it doesn't seem worth doing, TBH. It's an incredibly niche use case.. Fixed in https://github.com/playcanvas/engine/pull/1131. Hi @ImmanuelSamuel - would you like to keep this issue open?. OK. Please reopen when you have time to investigate. \ud83d\ude04 . Thanks!. Excellent, thanks for this! \ud83d\udc4d . Thanks \ud83d\udc4d . It's a feature. You can't set component properties like that. You need an assignment or the underlying engine doesn't get properly notified that the property has changed. Closing... . Looks fine to me. @daredevildave?. Thanks! \ud83d\udc4d . Thanks! \ud83d\udc4d . Hey @daredevildave and @vkalpias - was this ever intended to be a public event? Is there a valid use case for regular devs?. Thanks! \ud83d\udc4d . Thanks! \ud83d\udc4d . Many thanks! \ud83d\ude04 . Thanks Omar! :smile:. Thanks so much!!. Thanks. Good point, I hadn't considered the texture compression process. Flipping the image pre-compression makes sense. For now, I've overridden the entire pc.GraphicsDevice#uploadTexture function just to switch true to false. But we can't release the glTF reader until engine support arrives for this.. FIxed in https://github.com/playcanvas/engine/pull/1051. This PR is not deployed to production. It can't possibly be affecting your project on playcanvas.com. It's more likely you've changed something in your demo. But if it is due to a change in the engine, you can run your app with an older version of the engine. Just add:\n?use_local_engine=https://code.playcanvas.com/playcanvas-0.219.4.js\nto the launch URL to use the previously deployed engine. Or update the version number to go back even further.. Rather than add support for this to the engine, I think we should see if we can enhance the glTF loader code instead. Ideally with shader chunks.. We could rename the property that we write to the JSON format from bumpMapFactor to bumpiness, but there will still be a large amount of assets that are already created with the old name. However, I do agree that we should probably change the name but we'd have to still look for the old name on load in case it's an older asset.. Hi @Neoflash1979. TBH, I never liked the PlayCanvas function pc.math.random. If it were up to me, it never would have been added. It goes against my philosophy of keeping the engine lean with a small interface. The following is both succinct and rarely done by developers:\nvar v2 = new pc.Vec2(Math.random(), Math.random());\nvar v3 = new pc.Vec3(Math.random(), Math.random(), Math.random());\nSo I'm afraid I'm going to decline this particular request. But thanks very much for suggesting!. I just checked the Wikipedia page on this. Actually, shouldn't it be:\nfunction computeGaussian(n, theta) {\n        return (1.0 / Math.sqrt(2 * Math.PI * theta * theta)) * Math.exp(-(n * n) / (2 * theta * theta));\n }\n. Looks good to me. Unless anyone else objects, please go ahead and merge.. This is because of this line:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/model.js#L259\nWe force 16-bit indices for wireframe meshes. And you're getting int overflow with your model because it has >65535 vertices. @guycalledfrank - we could just switch to 32-bit when necessary, but there is only about 95% support for 32-bit indices in WebGL 1. The correct approach would be to generate more than one mesh maybe?. Except 32-bit index support is not guaranteed for WebGL 1.0. I believe support is around 96% or something, although webglstats.com is down at the moment so I can't verify.. Looks like this is affecting PIXI too.\nIt should be noted that this is really a warning rather than an error. The game works fine in FF.. According to this issue, Mozilla \"will be moving to zeroing on creation soon\" so I'm going to close this. To be honest, this really isn't anything to worry about anyway.. Looks good to me.. > However there's still renderTarget on camera, deprecate it?\nSo you're saying there's no way to maintain backwards compatibility for this property? Is it fair to say that post effects are really the only thing this is used for. And jumbo-tron screens and rear view mirrors and such like?\n\nMake a better name?\nYeah, I don't like simple either. 'basic'? (matches pc.BasicMaterial naming which is unlit) 'passThrough' (more literal/descriptive)?\nShader generator options are undocumented though.\n\nDoes onUpdateShader need to be public API?\n\nBreaks on Macs, but works on Win/iOS/Android. Probably need to report a bug and run a small test on engine init.\n\nEven in Canary? Can we say this is not a blocker to merging? If you can create a small repro, we can submit to crbug.com and I can get the Chrome team to look into it.. I'm not against the idea. :) What would the function signature be?. Sounds good to me. Please feel free to submit a PR. \ud83d\udc4d . Thanks!. Thanks!. So you are not able to reliably reproduce this problem? Without a set of instructions to reproduce the behavior you are observing, it will be hard to resolve this issue.. You might as well change the _audioManager property to _soundManager in application.js too.. Thanks!. This is happening because, in your code somewhere, you are calling:\nthis.app.systems.rigidbody.setGravity(x, y, z);\n\nThat is the way to set gravity for PlayCanvas' built-in physics engine (Ammo.js), not P2. But since the built-in physics engine is disabled (since you're using P2 instead), this._ammoGravity is not defined.\nJust so you know, the built-in physics engine is disabled by default, and is only enabled when you create a PlayCanvas collision or rigidbody component in your project. This setting can be toggled in your project settings under the Physics category.\nBy the way, if you have further problems with the P2.js integration, post issues against this repo.. Thanks!. Thanks!. Thanks! \ud83d\udc4d . Thanks for this! Can you fill out the Contributor License Agreement please and we'll merge.. Thanks!. Fixed in https://github.com/playcanvas/engine/pull/1071. I've tested this myself - seems to work fine. But I'll let @guycalledfrank perform the merge since it's his code. \ud83d\ude04 . This is because we don't apply tone mapping as a post effect - it's done in the standard material shader. @guycalledfrank will know more.... Did you use the teleport function to move the entity? It's useful if you can provide a simple test case showing the problem.. I'm not aware of any feature matrix comparison. I do know that PlayCanvas is designed to be a generalized game engine and Three is a 3D graphics library. In other words, the codebase in this repo implements a fully integrated set of systems handling not just 2D/3D graphics, but also audio, collision, physics, entity/component system, input devices and more.\nI'd say the biggest pro with PlayCanvas is the online editor. IMHO, nothing else comes close.. Yes, PlayCanvas offers a few things to allow you to tweak shadows. First, the engine offers 2 techniques: PCF and VSM. VSM tends not to suffer from the acne you sometimes see with PCF. For PCF, PlayCanvas exposes a shadowBias property, but also a normalOffsetBias to further tune. PlayCanvas even offers different flavors of PCF and VSM for you to enable, via the shadowType property. There's a bunch of documentation on shadows here but I notice that page hasn't yet been updated with a good description of the difference between VSM and PCF. Must do that soon...\nPlayCanvas has the concept of a mesh (vertex buffer + optional index buffer + definition of a primitive). You then assign the mesh to a mesh instance, which is basically a material + mesh + transform. You can have two differently transformed mesh instances pointing to the same mesh.\nPlayCanvas has what's called 'batching' to optimize submission of multiple mesh instances. You can add graphical objects (model components and element components) to batch groups. Read more about batching here.\nPlayCanvas has a shader chunk system. You can find all the GLSL chunks here. The different material types provided by the engine programmatically construct shader programs from these chunks. The shader chunk system has not yet be formalized into public API, but you can certainly get in there and use it (but it is occasionally subject to change). Typical use case is to customize/tweak standard behavior. For example, to make the pc.StandardMaterial behave like the material in the glTF 2.0 spec which is done here.\n\nBy the way, I was the guy who presented Polydance\n\nVery cool - I remember it well!! \ud83d\udc4d \n\nPlayCanvas is really inspiring. :)\n\nThat's so kind of you to say! \ud83d\ude04 \n. Closing for now but feel free to reopen if you want to continue the discussion. \ud83d\ude04 . Interesting. Auto-fill generates keyboard DOM events? This is kinda difficult to debug without a repro, unless you fancy submitting a PR to address this?. Is there a reason why it can't be debugged when running from the Launcher? Just open dev tools when running from the Editor and enable Break on Exceptions.. I think it's reasonable to do:\nif (code === undefined) return;. OK, all looks good to me. Merge?. Checked against the glTF sample model test suite. Works fine! Merging.... What do you want to use the GUID for?. Hmm, OK. I guess we could make the GUID public. However, I'd prefer to:\n\n\nExpose pc.Entity#guid. Make this a read-only property by defining only a getter.\nDelete pc.Entity#getGuid.\n\nThoughts, @daredevildave?. You can't. GUIDs are created in the pc.Entity constructor and should not be changed after that.. How do you mean 'depend'?. The scene loader does this:\nhttps://github.com/playcanvas/engine/blob/master/src/resources/parser/scene.js#L50\nSo, as you can see, it's 'cheating' by setting the GUID after the entity is created to ensure the GUID is maintained every time the scene is loaded.. I think I'd prefer to leave GUIDs as a private detail of the engine for now. Your use case is not very typical - you're writing a framework rather than a game/application. So for now, use _guid, but just be aware that you're accessing non-API engine internals.\nYou may notice that, generally, my default position is to avoid adding new API. I am keen to keen the API small, and only add to it for very good reasons.\nI'll close this for now.. I kinda agree with you here. A static function makes sense. The reason why I don't want to do this impulsively, though, is because this might make the API a little inconsistent. For example, if we add a static distance function, should we make the dot and equals functions static too?. Part 2 is addressed in this 'soon-to-be-merged' PR: https://github.com/playcanvas/engine/pull/1124/files#diff-3168734c2ab705a493aceda7394c1024\nBut I'd be happy to merge the changes to address part 1.. OK, https://github.com/playcanvas/engine/pull/1124 has now been merged. Did you want to update this PR or would you prefer to close it?. Looks good to me. \ud83d\udc4d Thanks!. The Chrome team has updated the warning to:\n[Deprecation] AudioParam value setter will become equivalent to AudioParam.setValueAtTime() in M65, around March 2018  See https://webaudio.github.io/web-audio-api/#dom-audioparam-value for more details.\nThis is actually an effort of the Chrome team to make Chrome behave the same as Firefox. Since we know Firefox handles audio playback fine, I'm going to close this.. @maungers Do you still have problems on your Mac system if you use Chrome Canary instead? It may be a regression in Chrome that Google have already fixed.. OK, fine. Chrome Canary can be found here.. Thanks! \ud83d\udc4d . Thanks for this! Can you sign the contributor agreement linked here please?. Thanks! \ud83d\udc4d . So this is reproduced by:\n\nCreate new empty scene.\nCreate a default particle system entity.\nLaunch on iPhone 5c\n\n?. Any luck reproducing with a fresh scene?. So many possibilities. 7 spot lights is quite a lot. Are they shadow casting spotlights? Could be running out of VRAM? Hard to say. If you can create a simple scene that reproduces this, I can debug... I don't have a 5C, though. But maybe I can find something similar somewhere in the office.. Hey @pete-richter - I think I'm gonna close this if there's no repro. Please re-open if you can generate something though. Also, you may have noticed but PlayCanvas supports text wrapping for the element component now. Please try it out. \ud83d\ude04 . Hmmm. @daredevildave - shouldn't there at least be a mode for screens that's based on proportion of screen size rather than pixel resolution. For games that adjust canvas resolution based on device performance, say, having to adjust UI element sizes to compensate would be a real pain!. This function is just an alias for:\nthis.entity.rigidbody.teleport(this.entity.getPosition(), rotation);\n\nSo I don't quite understand why it's needed.. Because pc.Entity should not have a dependency on pc.RigidBodyComponent. Architecturally, that's a bad idea.\nOne solution could be that calling setPosition/Rotation on a pc.Entity fires an event ('setposition', 'setrotation', or maybe just 'updatetransform') and the RigidBodyComponent listens on that. But the concern there is that firing an event on every update to the transform of an entity would impact performance quite considerably.. Thanks! \ud83d\udc4d . We don't have that device. I don't suppose you're in a position to develop a fix? \ud83d\ude04 . Thanks for taking the time to investigate.\nSo implementing this doesn't seem too complicated. The main issue is recreating the WebGL resources for certain PlayCanvas objects, namely:\n\npc.Texture\npc.VertexBuffer\npc.IndexBuffer\npc.RenderTarget\n\nThere might be some others but those 4 are the main ones. To create any of those, we pass the graphics device into the constructor. We could just add 'this' to an array on the graphics device. So when the context is restored, we just iterate over the arrays and invalidate or recreate the required WebGL resources.. Made pretty good progress on this today. It's maybe 90% implemented now. \ud83d\ude04 . Thanks! \ud83d\ude04 . Sure! Please go ahead and enhance the documentation to help others who may have problems with this behavior. It's probably best dealt with by adding API reference example code showing the use of preventDefault in an event handler with a comment explaining the presence of the function call.. Thanks! \ud83d\udc4d . Excellent, thanks! \ud83d\udc4d . Thanks for investigating this, @sethgillett! @daredevildave, @vkalpias - what do you think? This is basically happening because the number of script components to update is cached and while the for loop executes, 1 or more script components can be removed. So the array can be accessed out of bounds, returning undefined. To fix the original reported bug, you can just not cache scripts.length and things seem fine. But is this or what's submitted here the 'right thing' to do?. Yes @mcmorry you're right - I noticed this myself. For the case you describe, reversing the for loop should solve the problem, no? i.e.:\nfor (var i = scripts.length - 1; i >=0; i--) {\nThis won't address a script deleting a different script. \ud83d\ude04 . Yep, that could work.. Closing this because it has just been fixed in this PR: https://github.com/playcanvas/engine/pull/1181. Thanks!. OK @guycalledfrank, I think this is ready for your review now. The only thing I suspect doesn't work is transform feedback. Is there a simple project to test that against?. OK @guycalledfrank - I think I'm genuinely done now. The graphics device can now even recover when running After the Flood. But the scene goes darker and the leaves disappear, presumably because you need to rerender to render targets and maybe set up transform feedback again. The graphics device now fires 'devicelost' and 'devicerestored' to allow you to recreate stuff. If you're OK with this PR, I will merge. SO HAPPY to have finally implemented this. \ud83d\ude04 . My previous commit didn't fix this. The cause is actually because the element component sets the layer property on a mesh instance to pc.LAYER_HUD. But the batcher doesn't copy the layer flag. Gonna submit a new PR... \ud83d\ude04 . Fixed by https://github.com/playcanvas/engine/pull/1124. Whoops. Looks like this conflicts with a recent merge. Can you resolve?. Did you want to update this or would you prefer I close it?. Thanks! \ud83d\udc4d . I've tested against the following projects and they're fine:\n\nDoom3: Gangnam Style\nBMW i8\nCreating Rigid Bodies in Code\nTitanfall 2 Experience\nStar-Lord\nFlappy Bird\nStar Wars: X-Wing\nSteampunk Slots\nPlanet Earth\nWarp a Sprite with GLSL\nSpace Base: Texture Compression\nPong\nCall of Duty: Gunsmith\nSponza: Lightmap Demo - works but dynamic shadows look broken for both versions of the engine\nSWERVE\nFlying Toasters\nMy First Project\nModel Viewer Starter Kit\nVR Starter Kit\nWebVR Lab\nHappy Christmas\nMMX Racing: Monsterize\nTutorial: Video Textures\nTutorial: UI Buttons\nTutorial: UI Stats Counter\nTutorial: UI Progress Bar\nTutorial: UI Leaderboard\nTutorial: Motion Blur\nTutorial: Capturing a Screenshot\nStained Glass Window\nOrange Room\nIntroducing iPhone 6\n\nProblem projects:\n\nMaster Archer - Characters/environment sprites sort incorrectly (mainly when large tree passes over the characters to move to next stage.\nStar Trek: Voyager - Hit the WARP button and an exception related to an undefined shadow shader will be fired.\nVirtual Voodoo - UI not visible (based on new element system)\nWebGL Chess - UI not visible (based on new element system)\nThis is Halloween - UI not visible (based on old font script)\nZombie Pac-man - UI not visible (based on old font script)\nRagdoll - camera.js calls scene.getModels() which was never public API so this is the author being 'naughty'.\nMixamo Characters - same problem as above with camera.js\nTerminator T800 - same problem as above with camera.js\nStatic Batching - displays 'Draw Calls' as -7 instead of 2.\n\nQuestions:\n\nShould we make pc.Scene#getModels backwards compatible? If it's easy, probably yes. Otherwise, don't worry about it.\n. I have now, @yaustar. List updated.. Confirmed that all is fixed except the old font_renderer.js script. So I agree: let's not support that with backwards compatibility. But we could just upgrade the script itself to the new layer system. So if developers do still use the script and want to get back up and running fast, they just drop in the updated font_renderer.js.\n\nAnyway, I believe this is now good to merge. @daredevildave is coordinating this release of stuff this week, so let's just wait until he's ready.. Oh, and I still see -7 in the 'Static Batching' scene:\n\n. Yay! Nice job, @vkalpias. Looks like we're all set.. @SHADOWELITE7 There is a full description here: https://github.com/playcanvas/engine/pull/1057 (referenced at the top of this PR).. I think @daredevildave or @vkalpias are best placed to advise you here. But if I select the Title under screen 1 and set to 'Bottom Left' and then set Y translation to -57, it looks fine and seems to work as expected. Same for Title under screen 2. Set preset to Bottom Left and Y position to -57.. The loading screen script format is not related to the script component script format. It just defines a function of the form:\npc.script.createLoadingScreen(function (app) {\n    // Implement your custom loading screen...\n});\nI just tested the feature with a new project (current scripting system) and edited the page background color in the CSS. Works just fine.. Very cool. So @yayhi, do you consider this 'done'/mergeable now?. Can I get some context on this? What is this exactly?. I don't really want to impose a PR template on contributors at the moment. However, thanks for the suggestion. As a result of this, I've improved various other things in the repo:\n\nI've added an issue template\nI've added a code of conduct\nI've renamed CONTRIB.md to CONTRIBUTING.md, which is the GitHub official naming convention\n\nClosing this now.... Can't you just bake AO maps for your scenes? That's way more efficient (and often nicer looking) than doing SSAO.. No progress in this particular area, no. Currently, the core engineering team is focused on areas like performance and the UI system. But if anyone wants to submit a PR for new post effects, they'd be very welcome.. Thanks! \ud83d\udc4d . OK, this is ready to be merged now, @daredevildave. The rules added are mainly concerned with addressing code and docs errors. ESLint also has rules for enforcing code style too but I won't add those until after the layer system is merged.. @vkalpias Can you give me an example of how I might have broken auto-complete? It's worrying the auto-complete would be so brittle to break in response to these fixes. I have:\n\nMade all returns tags consistent.\nAdded all missing param and returns tags.\nFixed various incorrect types.\nAdded missing param descriptions.\nAdded constructor tags to all constructors.\nChanged class to classdesc.. Cool, I hope so. \ud83d\ude04. Yeah, I know. I thought 'build' was a better name than 'prepublishOnly'. \ud83d\ude04 . @ronkorving I think more choice is always good. Both minifiers perform reasonably similarly in my tests, but yes, not having to have Java installed does make UglifyJS attractive.. We also use Closure Compiler to minify and obfuscate the code in the build.js script.. Thanks! \ud83d\udc4d . Looks good to me. @daredevildave?. Looks good to me. Can you please sign the Contributor License Agreement and I'll merge.. Thanks! \ud83d\udc4d . I can't even reproduce this.. Ah, well spotted! Thanks. \ud83d\udc4d . Is it not sufficient to disable backface culling on the material:\n\n\nTorus knot on the right is negatively scaled in one axis.\n. Uh, hold your horses! \ud83d\udc34 The PR isn't merged yet. \ud83d\ude09  . Yes, that's the link you have above. It should work now because the PR has now been merged. But in fact, it's also been deployed to production, so you don't even need to use the dev engine.. Replace:\n```\nMain.prototype.bake = function()\n{\n    var myApp = this.app;\n    this.device = myApp.graphicsDevice;\n    this.root = myApp.root;\n    this.gameScene = myApp.scene;\n    this.renderer = new pc.ForwardRenderer(this.device);\n    this.assets = myApp.assets;\nthis.lightmapper = new pc.Lightmapper(this.device, this.root, this.gameScene, this.renderer, this.assets);  \nthis.lightmapper.bake(null, pc.BAKE_COLOR);\n\nconsole.log(\"bake!!\");\n\n};\n```\nWith:\nMain.prototype.bake = function () {\n    this.app.lightmapper.bake(null, pc.BAKE_COLOR);\n    console.log(\"bake!!\");\n};. Sorry, I'm not sure what you're asking. What's the question?. The PlayCanvas Editor on playcanvas.com does not 'work like a plugin'. There's currently no official way to customize the Editor either. Although you might find this page interesting:\nhttps://forum.playcanvas.com/t/scripting-the-playcanvas-editor/2315\n. @JarnoVgr To be precise, the autoplay change in Chrome has been delayed until M70 (October). We should still merge this ASAP because any apps published beforehand will have problems when this change goes live.\n@vkalpias Unless there's no reason not to do so, I'd recommend just merging this.. Thanks! \ud83d\udc4d . Thanks! \ud83d\udc4d . Alpha to coverage is a WebGL 2.0 feature. So it's not supported on iOS at the moment (mobile Safari only supports WebGL 1.0). Alpha to coverage works well for things like foliage. But not for things like large areas of graduated alpha. For the example you show, I would just make the ring use alpha test (or even model it with triangles) so it doesn't interfere with the alpha of the spot plane. Alternatively, you could break the spot plane into two planes (above and below the ring. Then, it should sort better. But to be honest, I would just edit the solid ring to not use blending.. Closing as this has been answered and it doesn't seem to be a bug.. You need to configure your web server to set the mime type of DDS file. For Apache, you can add the line:\nAddType image/dds .dds\n...to httpd.conf. Closing because this seems to be a web server configuration issue rather than anything relating to the PlayCanvas sourcebase. Please reopen if I've misunderstood.. The only concern I have is about performance. Have you determined what the performance impact of this is?. That is very odd. What platform/browser are you observing this with? Does it happen in other browsers too?. Ooo. I wonder whether the problem is because of this:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/index-buffer.js#L146\nIf you monkey patch that function and add the line:\nthis.device.indexBuffer = null;\n...does that fix the problem?. So what if you add this to a script if your project:\n```\npc.IndexBuffer.prototype.oldIndexBufferUnlock = pc.IndexBuffer.prototype.unlock;\npc.VertexBuffer.prototype.oldVertexBufferUnlock = pc.VertexBuffer.prototype.unlock;\npc.IndexBuffer.prototype.unlock = function () {\n    this.oldIndexBufferUnlock();\n    this.device.indexBuffer = null;\n};\npc.VertexBuffer.prototype.unlock = function () {\n    this.oldVertexBufferUnlock();\n    this.device.vertexBuffer = null;\n};\n```\n. Can I access this scene to reproduce what you're seeing? Username 'will'.. Interesting. \ud83d\udc4d . Yes, only the pc.StandardMaterial supports custom shader chunks (unless @guycalledfrank would care to disagree). \ud83d\ude04 . Thanks @Maksims! \ud83d\ude04 . Thanks \ud83d\udc4d . Thanks! \ud83d\udc4d . Sounds reasonable to me. And enableTouch too?. You fixed this, right @daredevildave? The sprite component still creates a bunch of materials though, so maybe close after applying the same technique to the sprite component.... After doing some profiling, it seems >50% of entity creation time is spent in pc.guid.create(!).. Yep, exactly! I'll have a chat with @vkalpias and @daredevildave to work out the details.. Also, if you mouse hover the original entity the moment it gets cloned, all the cloned ones are stuck with the hover color, and the original default color gets changed to the hovering one.. Fixed in #1266 . Closing this because it's just too general. I might reopen again if I can identify a concrete strategy to address this.. I can see how that would complicate things, yes. In fact, my head hurts thinking about the algorithm. We should discuss in more detail tomorrow.. Hey @guycalledfrank - before I have a stab at fixing this, do you have any words of advice/caution?. Error is:\nlaunch.js:7522 ERROR:   Failed to link shader program. Error: Uniforms with the same name but different type/precision: atlasRect\n. I can't say for sure if there are any lowp GPUs out there. I doubt it.\nI guess I'm concerned about just patching this specific situation. If somebody added another uniform in the future that is shared between vertex and fragment shader, we'll hit the same problem. Isn't the best solution to add:\nprecision highp/mediump/lowp float;\n...to the top of the vertex shader to mirror the fragment shader?. OK, good point! I didn't consider that. I've added some comments to this PR to fix this:\nhttps://github.com/playcanvas/engine/pull/1251/files\nMake it so, @daredevildave. \ud83d\ude04 . This is because a non-asset type model component (i.e. a primitive shape) creates a pc.Model, but on removing the component (on calling entity.destroy()), the model is never destroyed as it is with the asset type. Since the model component has a default material which points to the mesh instance of the box primitive, the boxes never get garbage collected. Instead, the material's mesh instance array just continues to grow. @daredevildave could probably fix this really quickly.. @e-strokov The .data getter functions in the backwards-compatibility.js file can be deleted at some point. But probably not for quite some time. One day, we could make it easier for developers to include a build of the engine with backwards compatibility stripped out. But for now, it's not really a lot of code.. Fixed in #1373 . How about:\nObject.defineProperty(SomeComponent.prototype, \"someProperty\", {\n        get: function () {\n            return this._someInternalProperty;\n        }\n    });. @e-strokov Good point. I've updated.. @e-strokov The fragment shader does become slower, but there are benefits too:\n\nYou need to specify 1 less vertex attribute. \nThere's one fewer interpolator between vertex and fragment shader.\nThere's less vertex data to pass around.\n\nRead more about it here.. No. The problem is because we have a legacy script component which is preserved to support older projects:\nhttps://github.com/playcanvas/engine/tree/master/src/framework/components/script-legacy\nWe select which script component to use here:\nhttps://github.com/playcanvas/engine/blob/master/src/framework/application.js#L473\nSo the problem is because resolveDuplicatedEntityReferenceProperties is defined for the current script component, but when it was added, attention was not given to the legacy script component.\nWe didn't have entity attributes when the legacy script component was the default, so I'm not entirely sure what the right thing to do is. @daredevildave?. Sounds like a good solution. Done.. \"Works for me\" (tm) \ud83d\ude04 \n\n. I have Version 71.0.3562.0 (Official Build) canary (64-bit). No, just that one.. if (user === 'deltakosh') {\n   hideExtension('KHR_parallel_shader_compile');\n}. Have you got any 'before and after' numbers?. I've seen this code show up in profiles. Accessing raw properties is much faster than accessing getter based properties. So it makes a difference, although a small one.. Actually, I'm not convinced Chrome Dev Tools is being truthful. I have fun some tests with very complex hierarchies using only performance.now and the results show the current implementation is at least as fast as my replacement. Closing for now.. I think the problem here is that, when you change a material from opaque to transparent (or vice versa), the engine doesn't move the mesh instances that use that material from the opaque sub-layer to the transparent sub-layer (or vice versa). So yes, this is highly likely to be a bug in the engine.. Can you post some performance numbers that demonstrate that this change is at least as fast as the current implementation?. On reflection, maybe it would have been better to create 2 PRs: Matrix optimization and syncHierarchy optimization. But I probably wouldn't bother splitting it now that it's been created. \ud83d\ude04 . Hi @aidinabedi - sorry that this hasn't been merged yet. It's fantastic that you've submitted a fix for this. Although the amount of code that has changed is small, we're going to have to schedule some very thorough testing to ensure that it's safe to deploy. We're working on asset bundles just at the moment, but we'll do it straight after that. Thanks for being patient with us - we appreciate the contributions! \ud83d\ude04 . @realityreflection Did you post this on the forum?\nhttps://forum.playcanvas.com/t/solved-console-error-from-latest-playcanvas/8342\nIt sounds like this may well no longer be an issue. If you agree, let's close this.. @realityreflection Did you test with a previous engine?. This looks good - thanks! \ud83d\udc4d \nAre you sure you signed the Contributor License Agreement? I can't find your GitHub username...\nOnce that form is completed, I can merge this.. Hmm, well, you can be assured that your phone number is kept completely confidential. The spreadsheet to which contributor details is recorded to has never actually been used (and may never be), but we record this info anyway. It would certainly never, under any circumstances, be shared with a third party!\n(To be honest, you could put in a fake number and it wouldn't make a difference. I guess it's more in your interest that it's accurate should something require us to contact you in the future about your contributions).. And thanks for this fix, BTW! It's been bugging me for a long time, so it's much appreciated!. Hey @guycalledfrank - do you have any idea why the new iOS devices are exhibiting this behavior? The proposed workaround worries me a bit - what happens when A13 arrives etc?. OK, thanks for your input @Maksims and @guycalledfrank. I'll merge this for now. But it will require a more comprehensive fix at some point.... Could it be because iOS devices only support up to 8 texture uniforms in a fragment shader (which I think is the minimum supported by the WebGL spec)? That limit's easy to hit if you are using up 6 with cubemap faces.. Thanks for the comments @Maksims! I believe @daredevildave wrote those code comments originally so I'll assign this to him.... Seems to be because of this code by @guycalledfrank:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L2695\nBy default, the renderTarget property of a pc.Layer is undefined (if the renderTarget property is not set in the constructor options object). So, when layers in the composition are rendered, for each layer, the code checks if that layer has been rendered with the specified camera. If not, then the renderTarget is cleared. The code looks to see if the current renderTarget has been encountered so far. It looks for undefined (which is set on the Skybox layer), and only finds null set on the World layer. It thinks that's effectively a different renderTarget, so it clears the render target again after the World layer is rendered.\n. How about changing:\nif (renderedRt[k] === rt && renderedByCam[k] === camera) {\nTo: \nif (renderedRt[k] == rt && renderedByCam[k] === camera) {\n. https://twitter.com/willeastcott/status/1085543435233222656. Also, a previous warning from Dean:\nhttps://twitter.com/grorgwork/status/650059802349998083. Already done:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/device.js#L699. Ah yeah, completion status needs updating.\nHowever, the implementation should select a sensible number of threads, as hinted by the comment in the spec sample code:\nvar ext = gl.getExtension('KHR_parallel_shader_compile');\n    if (ext) {\n      // Just for demo of API usage. Generally it's not needed unless you really\n      // want to override the implementation-specific maximum.\n      var threads = gl.getParameter(ext.MAX_SHADER_COMPILER_THREADS_KHR);\n      ext.maxShaderCompilerThreadsKHR(Math.max(2, threads));\n    }. So the fog fix in that PR is really nothing to do with skin batching. It should have been a separate PR. Also, it looks like gamme correction and tonemapping chunks will suffer the same problem and that PR doesn't address those problems either. So I think we'll need a new and complete PR.. What's the plan for this PR?. Thanks! \ud83d\udc4d . Was this causing a specific bug? Or did you just notice the code was wrong?. OK, great! If you fill out the Contributor License Agreement, I will merge this PR. Thanks!. Thanks! \ud83d\udc4d . You hate PlayCanvas? Great way to get people to work on your feature requests.... This looks great - nice job. Hey, @e-strokov, I did a quick review and it looks OK to me, although this is a part of the graphics engine I didn't write. Take a look and let me know if you are OK for me to merge.... Hi @StefanSchmutz - I'm happy to merge. Can you confirm you did actually fill out and submit the Contributor Agreement? I took a look at the responses we have and I couldn't find you. But yes, I'm very happy to merge this change once that's confirmed. \ud83d\ude04 . Hey @daredevildave - this test now fails:\nhttps://github.com/playcanvas/engine/blob/master/tests/framework/components/element/test_imageelement.js#L425\nThis is because the _uvs property doesn't exist any more. Options:\n\nI look at the data in the vertex buffer and compare (which is a bit involved).\nI delete the test.\n\nWhat would you like to see done here? Shouldn't unit tests stick to testing API functions/properties?. OK, I've deleted that particular test.. These vars are polluting the global namespace (and the functions in this file are too). Can this be wrapped in the pc.gfx namespace?\n. This can cause some horrifically nasty bugs. Overwriting pc will clearly break everything but overwriting less major vars can cause subtle and hard to diagnose bugs - trust me. If this isn't in the coding standards, we need to add it.\n. Should this function be on the LinearGraph's prototype? Also, it should be 'getValue'.\n. addKey. :)\n. quantize\n. Actually Vaios, we don't have coding standards for GLSL. But we should define some.\n. Once it's added, it's very hard to remove it. I think the deciding factor for me is that this pull request is not dependent on the GraphNode/Matrix4#setLookVector functions. It's just the particle demo that is using them. In the interest of keeping this PR as focused as we can, please transfer these functions into your demo for now, and we'll consider them for future integration. Apart from that, I'm happy to merge. Hooray!\n. Actually, depthTest. That's what it is for a pc.scene.Material, so it should probably match.\n. I vote 'gammaCorrect'.\n. Consistency, consistency, consistency. So important. API should be as guessable as possible - otherwise users are consulting API ref all the time. I use descriptionThing as a general rule. worldMatrix, diffuseMap and so on.\n. The WebGL spec says \"The initial value of GL_TEXTURE_MIN_FILTER is GL_NEAREST_MIPMAP_LINEAR.\" See https://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml\nSo if you're going to change this, you have to actually call gl.texParameteri to update the texture object. Note that minFilter is the property used to shadow WebGL state. The property minFilter is an API level property that actually calls a function that calls texParameteri.\n. OK. Just sayin' ;)  If you're comfortable with what's happening here, I'm fine with it.\n. Best to delete rather than comment out.\n. How often will this allocate? This vector isn't leaked is it? It's stored on the material? Just want to check we're not allocating often because Vec4s (Float32Arrays) are very slow to create.\n. OK, yep, you're right. I'm happy.\n. Trailing comma in an object.\n. Shouldn't this be normalMap and normalMapAsset? That's what they're called in the PhongMaterial class.\n. colorMap or diffuseMap would be better I think? Just trying to align naming with Material classes.\n. I feel that this should default to Inverse Squared. It's 'nicer' after all, right? If people want to gain a little performance back, they can always turn it off.\n. Description please.\n. Do you have any evidence these kinds of functions get inlined by GLSL compilers? I would be amazed if they didn't but I thought I'd mention it since the current chunk system makes a lot of function calls.\n. Remove trailing comma from object definition. Is it worth being explicit and having autoMipmap: false too? I have a feeling that the engine might currently be using up VRAM mipmapping the shadow maps.\n. Again, it's probably a good idea to have autoMipmap: false here.\n. Should this be an enum like pc.scene.LIGHTTYPE*? Personally, I'm starting to dislike this style of enum. It's very C++-like. I'd kind of prefer to use strings. e.g. light.setType('point'); instead of light.setType(pc.scene.LIGHTTYPE_POINT); The problem is, there's already an existing style of enums and we have to be mindful of that. :( \n. Is adding 'falloffMode' going to require a migration @vkalpias?\n. @daredevildave @vkalpias I'll defer to your preferences on this. If it's an enum, it should be pc.scene.LIGHTFALLOFF_LINEAR and pc.scene.LIGHTFALLOFF_INVSQUARE maybe.\n. Can you split this onto multiple lines....hard to read. :)\n. For consistency, can you call this camera_exposure? And make this a per-camera property?\n. So presumably you want this as a checkbox in the material editor UI, defaulting to true? Is it better to just migrate existing materials and just force this enabled in all situations (in the interest of keeping things simple)?\n. We need a material editor checkbox for this in the specular section of the panel?\n. Would the AO Map channel go in the Ambient section of the material editor? Is the AO Map modulated with the ambient color?\n. What do you need in the material editor to support this?\n. We need a couple of enums for this. I suggest:\npc.TONEMAP_NONE\npc.TONEMAP_FILMIC\n. Correct. But as we've mentioned, we want to get rid of this component (and the staticcubemap component). The scene's skybox is really a scene property.\n. In Designer, if you want to see the exposure on a camera, you switch to that camera via the toolbar dropdown menu. You can't (currently) change the properties on a Designer camera. It doesn't have to be called 'camera_exposure', no, but all the other shader uniforms have the naming convention thing_property. TBH, I now prefer uThingProperty. I'm just ensuring consistency.... We can change all this but it has to be a global change.\n. It's a scene setting, so put it in scene_scene.js for now. Note that these should go in the global 'pc' namespace though. We're moving everything there at some point in the near future.\n. Change them all. :)\n. Sorry, can you clarify? First you say you want a scene level option for setting shading model. Then you say some materials in a scene will need one shading model and other will require a different one. Am I misunderstanding?\n. Brackets please.\n. blahblah?\n. Any reason this isn't called texture_cubeMapSize? It's a texture property rather than a material property. It's internal so it's not a big deal...\n. I'd prefer to call this 'Box'.\n. How would a vector represent a sphere radius? Do we need to create separate properties for box and sphere bounds? The UI will simply hide/show these based on the setting of spawnShape.\n. Where is this defined? Should be pc.EMITTERSHAPE_BOX.\n. pc.EMITTERSHAPE_SPHERE\n. I would say, yes, these have to be different properties that we hide/show. I think 'spawnBounds' was OK before, but now, with multiple shapes, I think we should rename to: 'Emitter Shape' (emitterShape). As for the naming of the size properties.....that's harder. Let's take the radius. I think there are 4 options: 'Spawn Radius', 'Spawn Bounds', 'Emitter Radius' or 'Radius'. I think Emitter Radius is the most precise name. As for the Box type, is spawnBounds currently Extents or Half Extents? @vkalpias and @Maksims  - can you give your thoughts here?\n. And ideally, we should try to get as much symmetry as possible between the collision component size properties and the particle system property names.\n. EMITTERSHAPE_BOX\n. I don't like the sound of this. The shape affect how particles behave. It has to have a shape. I'd probably default it to a sphere with 0 radius.\n. No, 0 is best I think. (e.g. firework/explosion)\n. This property name is completely opaque to me. Suggested alternative: refractionIndex\n. http://en.wikipedia.org/wiki/Refractive_index\n. Where is this defined?\n. Shouldn't this be in the pc.Light structure?\n. Should this be in pc.Material? Shouldn't all materials be able to specify which lights they are lit by? Not just Phong Materials?\n. Yep. But right now, if you wrote another material based on a shader generator, you'd need this in the pc.Material base class. Seems like it belongs there to me.\n. As I may have mentioned before, I would like pc.Light and pc.Camera to be merged into the Light and Camera components at some point soon. Putting 'mask' into the LightComponent is like you've started doing this already. The current convention is that all light specific properties go in pc.Light. So it's not wrong, but it doesn't conform to the current 'architecture'. ;)\n. Oh, actually, I see you do save the mask property into the light. But mask is not initialized in the pc.Light constructor. I think that's my problem with it. :)\n. Whoops. ;)\n. Does this need exposed: false (for now until we want it in the UI)?\n. I do as some point, but for the purpose of just getting this merged, it simplifies things. If this is exposed, we need to update Editor too. Let's do that later when the new editor is out.\n. Doesn't this function need to go on the pc.LightComponent?\n. In your PR description, you say this is false by default. Which did you intend?\n. So it's not possible to render unindexed primitive instances?\n. The FBX -> JSON tools only generates indexed, but you can create pc.Mesh objects that are unindexed procedurally.\n. Should this be var useDp = !!device.extTextureLod; ?\n. Surely this should be 'flipX'. I don't think this is in the coding standards, but introducing 'don't' into variable names is probably a bad idea. :)\n. an -> a\n. pc.Entity support would be cool, but it's not in this PR, right?\n. Is this how the JSdoc example tag works? I thought you could only have one. Maybe I'm wrong - I never tried using multiple...\n. Just a note on engine architecture. Currently, everything in src\\graphics can run with zero dependency on anything else except maybe src\\core. This breaks that. I feel that the code should be doing something like: this.stats.vram.tex += numBytes. So I guess the stats object could be defined in src\\core maybe. Either define all props or modules can register values they want to record. I dunno. Just throwing some ideas out there. Also, in the interests of speed, should we just remove namespacing in the stats object completely? e.g. vram.tex -> vramTex?\n. Destroy the texture?\n. I think the API on the AudioSourceComponent should match the animation component:\nhttps://github.com/playcanvas/engine/blob/master/src/framework/components/animation/animation_component.js#L268\nIn other words, rather than functions, a property would be better.\n. You might as well just move this into the component.js now, right? onSetType?\n. I just checked MDN. Seems String.includes is not universally supported. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n. Handle the case where this isn't available.\n. 10 euros?\n. I'd probably just name this 'autoInstancing'.\n. ...'with respect to the mesh instances it lights'?\n. I know. I'm trying to suggest an edit to also explain that static doesn't completely mean static (as with the moving train example).\n. Shouldn't you be copy this rather than referencing?\n. Needs documenting.\n. I ordered the 'enums' in this file alphabetically, at least based on the word before the first underscore. Not a big deal but....\n. Why don't you just delete this? Messy!\n. Sorry, but why can't source evaluate to true?. Duh. Oh yeah! :). Since scaleCompensation might not be in nodeData, should this instead be: node.scaleCompensation = !!nodeData.scaleCompensation;. This should be _dirtyNormal. Remove the 's'. It's not the normals that are dirty, but the normal matrix.. Actually, this should be 'Adds a node to the internal nodes array.'. This should be 'Grouping vertices according to the position related to the face'. Would simply changing this line to pc.Scene.defaultMaterial.reset(); solve this whole issue? What do you think, @guycalledfrank?. It's just 'entity.model.meshInstances'.. 'batching' is a verb. I'd make that batcher (matches renderer).. Does this need to be private? At least for now?. Does this property need to be deleted from the docs? It's not in the code.. This may be a dumb question, but why is this an object and not an array?. Good point, @daredevildave. I do agree. However, a texture atlas is quite a generic thing. Is the SpriteAtlas class currently geared just towards sprites? Looks like it is. Does this object belong in the src/graphics folder? Or src/scene? Comments @guycalledfrank?. Is this right? 'request' is a property defined as a function. Why have you dropped the ': function'?. I think we should have:\ndiffuse\ndiffuseMap\ndiffuseMapChannel\ndiffuseVertexColor\ndiffuseVertexColorChannel. Maybe don't make this public just yet. Get it deployed and see if it fixes what you need it for and we can always add it to public API later for everyone to enjoy. \ud83d\ude04 . Maybe revert this file. This isn't part of the PlayCanvas engine sourcebase but part of QUnit instead.. These are there for backwards compatibility purposes.. They're defined in global scope.. You can just use .set to set this properties. Otherwise you're just 'leaking' a pc.Color object. Plus you only need to set 3 values. Diffuse and emissive properties are RGB, not RGBA.. Use .set(r, g, b). If you don't need this code, delete it.. Redeclaration of i. Put at start of function.. Redeclaration of mi. Put at start of function.. Redeclaration of i and mi. Put at start of function.. Delete commented code.. Will this break down with multiple engine instances?. Redeclaration of i. Put at start of function.. Redeclaration of sp. Put at start of function.. Redeclaration of children. Put at start of function.. Why is this here? It's empty.. Please delete these two commented out lines as well, just to keep things tidy. \ud83d\ude04 . I think originally, base was set as on the base property in the primitive instead of 0. It's probably not needed though so I think it's fine to delete.. '''this.body''' is only null if Ammo can't be loaded for whatever reason. Angular and linear velocity for a rigidbody component should be 0,0,0 rather than undefined in this case. The fact that there was a code path in those getters without a return was a bug. This PR is about changing code behavior if that behavior is wrong. \ud83d\ude04 . The PlayCanvas model JSON writer never writes tangent data which explains this line. Are you creating your own model JSON with this data?. Fair enough. I'll merge then. \ud83d\ude04 . Fair enough. Whoops. Fixed.. I agree.. Coz removing components is not a performance critical bit of code and it\u2019s easier to read and maintain.. forEach should not be universally banned but used judiciously to keep our codebase \u2018nice\u2019. :). Why?. Personally, I would recommend defining these with the rest of the component code. e.g. https://github.com/playcanvas/engine/blob/master/src/framework/components/rigid-body/constants.js. No in that file. That's an example of how the rigid body component defines constants.. Did you mean to add this dependency? If so, why is it needed in this PR?. Scrits.. Fixed! \ud83d\ude00 . I sense you're trying to tell me I've configured the dot-location rule incorrectly. \ud83d\ude09 TBH, I don't mind whether it's at the start of a line or at the end of the previous. The default for the rule is at the end of the line after the object so maybe that's why I went with that. Happy to change it globally. But I'd rather avoid disabling rules like this.. I'm fine either way. \ud83d\ude04 But I see AirBnB's point about the leading dot showing it's a function call on an object rather than a new statement.. Google seem to be just recommending use of the 'click' handler: https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio  ...one instead of two events.. I'm fairly sure it is, but yeah, do check.. Uhm. Uh. Interesting.. Can you please update this PR to have 4 spaces instead of tabs?. Yeah, you're right, @Maksims. If you preventDefault in a touchend handler, click isn't fired. So yes, we should stick with the events here. What's the solution to the developer calling stopPropagation?. Should all this debugging stuff be deleted now?. Remove?. Wrap in the DEBUG preprocessor?. Remove?. Remove?. Remove?. Delete commented out code?. Change these three uniforms to be 'uniform mediump vec...'. This is because they're also declared in the vertex shader. If the device only supports mediump, they'll have highp in the vertex shader and mediump in the fragment shader and the program will not link. I don't believe there are any lowp devices out there so mediump should be fine.. Change these three uniforms to be 'uniform mediump vec...'. This is because they're also declared in the fragment shader. If the device only supports mediump, they'll have highp in the vertex shader and mediump in the fragment shader and the program will not link. I don't believe there are any lowp devices out there so mediump should be fine.. Change these three uniforms to be 'uniform mediump vec...'. This is because they're also declared in the vertex shader. If the device only supports mediump, they'll have highp in the vertex shader and mediump in the fragment shader and the program will not link. I don't believe there are any lowp devices out there so mediump should be fine.. That's wrong, I believe. It's the inverse of the model transform, no?. Actually, I think 'serve' is the most widely used package - I'd use that: https://www.npmjs.com/package/serve. I prefer this:\n```\n        set: function (value) {\n            var x, y, z, w;\n            if (value instanceof pc.Vec4) {\n                x = value.x;\n                y = value.y;\n                z = value.z;\n                w = value.w;\n            } else {\n                x = value[0];\n                y = value[1];\n                z = value[2];\n                w = value[3];\n            }\n        if (x !== this._rect.x || y !== this._rect.y || z !== this._rect.z || w !== this._rect.w) {\n            this._rect.set(x, y, z, w);\n\n            if (this._renderable.mesh) {\n                if (!this._element._beingInitialized) {\n                    this._updateMesh(this._renderable.mesh);\n                } else {\n                    this._meshDirty = true;\n                }\n            }\n        }\n    }\n\n```\n. Do you need to leave this property in if it's 'for debugging'?. You really shouldn't use pc.string.format. I don't even think it should be public API. Do \"rgba(\" + r + \", \" + g + \", \" + b + \")\" instead which is 100x faster.. And certainly generates less garbage too.. https://jsperf.com/playcanvas-format-vs-string-concat/1. If you're talking about pc.string.format, yes, it's also ugly (and not readable by JS engineers new to PlayCanvas).. No. If you look at the whole PR, this code was cut and pasted from pc.Material#setShader, which now just sets the shader property and has been officially deprecated.. I've switched to using the internal instance. Look good?. Delete if not needed.. You're changing the structure of pc.StandardMaterial which can cause de-optimization of code. Maybe just allocate this in the constructor?. This line could probably benefit from a comment. \ud83d\ude04 . I'm not suggesting you change this, but I do notice that this function creates JS objects, then calls Object.assign and then throws away the original objects. This will generate more garbage and probably be a bit slower than the original implementation. It may be that the amount of memory we're talking about here is very minor and the performance difference is negligible. But it's good to be aware of these things... \ud83d\ude04 . Probably doesn't need addressing in this PR, but I hate how the map names have been stored directly in the pc namespace. Would be great to remove that pollution at some point. As a general point, for var in x is about 3 times slower than a regular for loop.. Extra comma needs to be removed.. I think my preference here is to have the function take 9 number arguments than 1 array. The problem being that we already have pc.Mat4#set that takes an array. As you can see below where you have updated the creation of pc.Mat3#ZERO, you've had to allocate an array redundantly. I wonder how many people currently use pc.Mat4#set.... As discussed, let's leave this as a single array argument for now, then.. Delete commented out code.. If it's better to do things with 'true', we should probably just make the the default behavior instead of changing the API and exposing the option?. No need to initialize. \ud83d\ude04 . Misspelling of Standard. I'm not sure about the addition of these properties on the pc.ProgramLibrary for a couple of reasons:\n\nThe src\\graphics codebase shouldn't really know about the src\\scene layer which is built on top of it.\nThe program library is there to serve more than just the pc.StandardMaterial.\n\nIf you can't think of a better place for this, it's fine. But just wanted to mention is somehow feels a little misplaced. Would be good to hear what you think about that.. If making 'true' (linking immediately) the default behavior yields superior results, I think it's preferable to update multiple internal components instead of modifying public API.. You shouldn't really use this here - it works, but it's a bit hard to read, because this module isn't a 'class', it's an object with a number of functions in it. I probably would have referenced props as a property of pc.programlib.standard, e.g.: pc.programlib.standard.props. I think there's actually an ESLint rule (which I don't think we have activated) which disallows this outside of prototype functions and constructors.. This function is called by the constructor.. I'm fine with that, but it'll have to wait for another PR since almost no member variables in device.js have underscore. A full refactor to address this and create consistency would take some time.. Yep, it's not ideal. It's tricky since a pc.Shader is a WebGL program and a WebGL shader doesn't really have an equivalent in PlayCanvas. This is internal to not a big deal for now. But we could refactor a bit further later.. Delete.. Array.prototype.includes is not supported in IE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility\nConsider using indexOf instead perhaps?. You can delete this comment now. \ud83d\ude04 . Delete. Delete. Minor point but in JS, it's best to do:\nfor (var i = 0, len = this._values.length; i < len; i++) {. To avoid generating garbage, it's better to do:\nthis._values.length = 0;. I'm wondering whether this function has to be allocated on every call of push. Presumably it does? Would it make sense to declare it outside the function?. I'm not super-keen about grabbing the application like this. What do you think, @daredevildave? I do also kinda feel like the sync queue should be on the pc.Scene, not the application.. Where's this function used? Is it needed?. Actually, I've done a bit more research, and the optimization I suggest above doesn't really make a measurable improvement in modern JS engines.. I don't think so but @daredevildave can confirm.. Delete commented out code.. Does this need to be fixed before we merge?. Should this be called outlineWidth or outlineThickness instead? Distance seems a little less obvious.. More generally, API ref docs for the new properties need to be added. \ud83d\ude04 . Well spotted. Fixed.. ",
    "ghost": "Hey all,\nThanks for the reply. I'm running on Gentoo Linux. I'd be happy to provide\nany other info you need.\nThanks :)\nOn Jun 5, 2014 6:05 AM, \"willeastcott\" notifications@github.com wrote:\n\nI'm guessing this is Chrome OS. On that OS, ALT+LMB has a system level\n'special meaning': it simulates a right mouse button click. This is a bug.\nAs for WASD not working in the FPS Starter Kit, I haven't been able to\nrepro that. I'm on:\nVersion: 35.0.1916.116\nPlatform: 571.61.0 (Official Build) stable-channel peach_pi\nFirmware Google_Peach_Pi.4482.94.0\nThis is a brand new Samsung Chromebook (ARM based model that has just been\nreleased).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45206504.\n. Okay, tried a couple more things and it appears that in the IDE the 'A' key works and most other keybindings work; but 'ALT' doesn't seem to for me. I'm guessing my window manager (OpenBox) is eating my 'ALT' strokes. I'll check out the FPS gameplay again to see if the WASD keys are being emitted. I'll also add event handlers for keyup and see what keycodes are being bubbled. I'll post the results back here.\n. 18 is the ALT keycode that's being captured by document in the IDE.\n. 87 = W\n65 = A\n83 = S\n68 = D\n\nAre the keycodes being captured by document in the IDE.\n. The aforementioned keycodes are also being captured by document in the FPS test as well.\n. Wroops, clicked the wrong button.\n. Sure thing,\nI'll download nightly and see if it works; thanks for the quick reply on\nthis guys =D\nOn Thu, Jun 5, 2014 at 6:18 PM, willeastcott notifications@github.com\nwrote:\n\n@guywithcrookedface https://github.com/guywithcrookedface Also, can you\nconfirm this behaviour is the same in Firefox on your Gentoo machine?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45287120.\n. Hrm,\n\nTried with nightly Firefox and I'm still not seeing movement with the WASD\nkeys, or the arrow keys in an FPS project. I'll try the IDE and see what\nhappens there.\nOn Thu, Jun 5, 2014 at 6:33 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nSure thing,\nI'll download nightly and see if it works; thanks for the quick reply on\nthis guys =D\nOn Thu, Jun 5, 2014 at 6:18 PM, willeastcott notifications@github.com\nwrote:\n\n@guywithcrookedface https://github.com/guywithcrookedface Also, can\nyou confirm this behaviour is the same in Firefox on your Gentoo machine?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45287120.\n. The IDE keybindings seem to work fine. Except ALT+* keybindings, which\nmight be due to my window manager. When I try left alt and middle click my\nwindow manager grabs them first so they never make it to the browser;\nthat's something I can work with though.\n\n\nIf there's anything else I can do to help here lemme know :)\nOn Thu, Jun 5, 2014 at 6:36 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nHrm,\nTried with nightly Firefox and I'm still not seeing movement with the WASD\nkeys, or the arrow keys in an FPS project. I'll try the IDE and see what\nhappens there.\nOn Thu, Jun 5, 2014 at 6:33 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nSure thing,\nI'll download nightly and see if it works; thanks for the quick reply on\nthis guys =D\nOn Thu, Jun 5, 2014 at 6:18 PM, willeastcott notifications@github.com\nwrote:\n\n@guywithcrookedface https://github.com/guywithcrookedface Also, can\nyou confirm this behaviour is the same in Firefox on your Gentoo machine?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45287120.\n. Sure thing,\n\n\n\nI'll tick that box and try again; thanks Will.\nOn Thu, Jun 5, 2014 at 6:40 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nThe IDE keybindings seem to work fine. Except ALT+* keybindings, which\nmight be due to my window manager. When I try left alt and middle click my\nwindow manager grabs them first so they never make it to the browser;\nthat's something I can work with though.\nIf there's anything else I can do to help here lemme know :)\nOn Thu, Jun 5, 2014 at 6:36 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nHrm,\nTried with nightly Firefox and I'm still not seeing movement with the\nWASD keys, or the arrow keys in an FPS project. I'll try the IDE and see\nwhat happens there.\nOn Thu, Jun 5, 2014 at 6:33 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nSure thing,\nI'll download nightly and see if it works; thanks for the quick reply on\nthis guys =D\nOn Thu, Jun 5, 2014 at 6:18 PM, willeastcott notifications@github.com\nwrote:\n\n@guywithcrookedface https://github.com/guywithcrookedface Also, can\nyou confirm this behaviour is the same in Firefox on your Gentoo machine?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45287120.\n. w000t, that fixed it =D\n\n\n\n\nThanks to all!\nOn Thu, Jun 5, 2014 at 6:41 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nSure thing,\nI'll tick that box and try again; thanks Will.\nOn Thu, Jun 5, 2014 at 6:40 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nThe IDE keybindings seem to work fine. Except ALT+* keybindings, which\nmight be due to my window manager. When I try left alt and middle click my\nwindow manager grabs them first so they never make it to the browser;\nthat's something I can work with though.\nIf there's anything else I can do to help here lemme know :)\nOn Thu, Jun 5, 2014 at 6:36 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nHrm,\nTried with nightly Firefox and I'm still not seeing movement with the\nWASD keys, or the arrow keys in an FPS project. I'll try the IDE and see\nwhat happens there.\nOn Thu, Jun 5, 2014 at 6:33 PM, Christopher Dale \nguy.with.crooked.face@gmail.com wrote:\n\nSure thing,\nI'll download nightly and see if it works; thanks for the quick reply\non this guys =D\nOn Thu, Jun 5, 2014 at 6:18 PM, willeastcott notifications@github.com\nwrote:\n\n@guywithcrookedface https://github.com/guywithcrookedface Also, can\nyou confirm this behaviour is the same in Firefox on your Gentoo machine?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/issues/2#issuecomment-45287120.\n. \n\n\n\n\n",
    "Maksims": "@willeastcott just verified on Version 34.0.1847.116 Ubuntu 12.04 (260972), that keyboard input works as WASD in FPS example on playcanvas platform.\nBUT, the example in engine folder which is accessible here: http://playcanvas.github.io/#camera/first_person/index.html\nDoes not do WASD in first place, as it is arrows there. So if arrows do work in that example (fps one), then we just need to add WASD as more common fly/fps movement controls. (doh, who did arrows? no one uses arrows nowadays :D )\nAs well verified that Russian layout keyboard does not affects keyboard input and it still works fine.\n. That was my bug! :D\nNow it is fixed indeed. There might be small number of people made projects during period of bugs wildness, which will result of physics library not being included into list of scripts of a pack.\nBut hopefully all fine now.\n. Not relevant anymore as of scripts 2.0.\nIf similar implementation needs to be made for new scripts, shall be done as new pr as this one is 2,790 commits behind.\n. That is pretty cool!\nBut there is some bug in Chrome:\nUncaught TODO: get parameter 34467 : COMPRESSED_TEXTURE_FORMATS  \n/webgl-worker/webGLWorker.js:512\n. It works, pretty cool!\n. This functionality should be applied to most maps, especially emissive maps, as this will allow such features as color highlights for teams (like, red, green, blue), while having same textures, and using just material properties to affect it.\n. Indeed.\nWe will have tutorial page explaining how to access gamepad input values and make a simple controllable objects with it.\n. Those have been added and merged. https://github.com/playcanvas/engine/commit/41338ab23cf202cc70c5f0c489f1321904b62f8d\n. With change https://github.com/playcanvas/engine/commit/7dcc7dcc769ba8cae65167906aea74629d8152ad we have possibility to catch any scenarios outside of canvas.\nWe need to decide wether moving mouse outside of canvas will finish mouse event, triggering isPressed right at the edge of canvas element where mouse left canvas. Or should we allow mouse move outside of canvas clamping mouse coords within canvas element? And handling all mouseup events as suppose to, even if they are outside of canvas?\n. Can there be specific example provided to highlight the issue. Otherwise this ticket needs to be closed due to inactivity.. Fixed: https://github.com/playcanvas/engine/commit/7dcc7dcc769ba8cae65167906aea74629d8152ad\n. Scripts 2.0 allows to define scripts anywhere now. So perhaps this never merged (don't know why tbh) pr shall be closed.\n. Do you need actual frame buffer width/height or actual screen size of canvas? If screen size, then please use clientWidth/clientHeight for this case.\nWe've updated a bit the bootstrap.js, so now it is not wrapped in container as well as canvas does not have strict style on it anymore. Which was required to prevent some rendering and reflowing problems on iOS and other platforms.\nThis question is related to PlayCanvas bootstrap.js which is a wrapper around canvas, it is not really an Engine related question, so better place would be: http://answers.playcanvas.com/\n. The reason why mouse events are handled on Window: we need to handle scenarios when mouse leaves canvas bounds (for example when mouse is down and leaves canvas element), and to have mouse movement when there are elements above canvas and below mouse if developer wants it. Previously there was no option for such.\nThis gives possibility to have UI elements on top of canvas that have only visual purpose and it is up to developer to stop propagation of mouse events on hovering if dev wants so, or leave as it is.\nIn order to stop propagation you can easily follow this flow:\nuiElement.addEventListener('mousedown', function(evt) {\n    evt.stopPropagation();\n});\nHere is example where moving mouse above UI does not breaks game, especially notice it at bottom logo - game still playable.\nThis change were made to let developer have both options.\n. UI libraries are not affected anyhow by PlayCanvas, except the fact that mouse input will propagate.\nThat means if your game does not care about events on canvas itself, then it just uses UI events as it used to.\nBut if you do care about custom input to canvas as well as UI above it, and you have a mixture of different behaviours, like in here for example: http://apps.playcanvas.com/max/tanky/colorTanks\nWhere you want mouse to be working in game when you still hovering minimap. And UI buttons still work.\nThat means it is up to a developer to define the logic of mouse interactions, and go from there.\nIn order to make all (dynamic selector) buttons in bootstrap to ignore mouse events, which is \"logic\" and not \"workaround\":\n$('body').on('mousedown mousemove mouseup', '.btn', function(evt) {\n    evt.stopPropagation();\n});\nIt is up to your UI logic to do things, if you want to draw DOM image on top of canvas, or use div with text on top of 3D object using DOM, you might want to still have mouse events working as expected on canvas, ignoring div element above.\nOr you might have custom behaviour by adding events as described above.\nIt is hard to find generic use case for such things as Keyboard and Mouse inputs in order to prevent most issues related to JS fragmentation on different platforms as well as allowing developers to define behaviour the way they want.\nIf we would provide UI framework, those things would be a part of API it self, but unfortunately we don't have any UI framework atm.\n. It is a valid point. Developer will have to know the way of achieving \"transparent/non-transparent\" elements in any case, so knowledge of stopPropagation or some other potential functionality to enforce propagation is necessary (unfortunately only \"hacky\" solutions come to my head for thing like that).\nWe will add to API reference for Mouse Input, stating clearly that Mouse events will fire as far as mouse position is within canvas bounds regardless of elements overlapping, unless the overlapped element caches the events and stops its propagation.\n. @guycalledfrank is this still an issue, or have been addressed? This ticket been stalled, and shall be at least updated or requires a closure.. Exactly that scene has sphere called ambient_occlusion that is fully transparent, but once AO map removed, it appears. There are few more spheres just around that sphere which have AO on them too, and they are invisible.\n. It should have fallback if extension is not supported.\n. Believe with larger number of shadows in screen it will make a bit more difference, especially with wider PCF. We should try test in with few Point Light ShadowMaps with PCF.\n. Can we call modulate to something more user friendly in UI? colorMultiply sounds friendly to me, and self explanatory.\n. In general this is more \"practice\" rather than specific issue.\nYes there is big list of problems. We can tackle them one by one, I will post specific examples later on here.\n. Could you fork project within dev in the future to apply some shader stuff, otherwise you override current project code, making it broken without PR. Thanks.\nLooks damn sexy :)\n. Most of problems are fixed indeed, except one:\n- Red spot light has low range, and drops nearly no shadows, increasing range makes shadows to appear.\nSpot light still get better precision with increased range (which should opposite just as for point light), so that particular bug has been missed.\nOr I assume it hasn't been deployed yet playcanvas.com?\n. Spot Light Precision issue.\nIssue: lower range - worse precision.\nShould be: lower range - higher precision.\nhttp://playcanvas.com/max/shadow-culling/designer/pack/49982d82-9be2-11e4-a815-12313b0a5ec6\nPoint light with no cast_shadow flag with geometry close to far_clip of depth camera.\nhttp://playcanvas.com/max/shadow-culling/designer/pack/6d1b4380-9be1-11e4-b6ff-12313b0a5ec6\nIssue: low range with some geometry at the end of range, with geometry between that has no cast_shadows flag, will render artefacts and shadows where should no be any shadows.\nThat is issue from above for green/yellow light.\nPlease fork project to play with packs, and do not modify packs specified above to keep demos with issues as test case.\n. Fixed in https://github.com/playcanvas/engine/pull/807. Trails most of the time are not straight, saying that index buffer has to be constantly modified. It will be very slow to do on CPU with few trails on screen (done it previously in DX9), and usng GPU makes huge difference.\nCan be implemented using texture that is size proportional to length of nodes in trail, and then updating only last indexed information, then incrementing index for looping through. That way each frame only 3 pixels needs to be written, and texture fed to shader. No index buffers CPU uploading.\nThen vertex shader will read information from texture and position pixels based on data from texture and index offset.\nThis will allow to make such effects:\n- Trails from star ships\n- Trail from swords in fighting games\n- Trails behind fast flying objects\n- Flying snakes :)\nAnd many more.\nHaving it as a component makes perfect sense, as it can be attached to any entity, and then user will be able to set fill texture, color curve, width, shape (segments), face to camera, length of segments, life of a segment.\nAnd to operate trail, just move entity around.\n. This feature is too case specific. Implementing general purpose trailing system might be too niche. It worth making this as tutorial example as base for experiments and specific implementations by other devs.\nAdditionally this ticket has been stalled for too long.. Closing this ticket due to lack of activity. If this will be a concern or requirement in the feature, new conversation can be sparked.. Hi @whatisor \nWe have been on the journey to rethink and redefine API design as a whole for some time now, as we do recognise that this is \"not the best\" design at all.\nWe brought certain ideas on table, and there is a work going on, being still backwards compatible (temporarily), enable simple and straight forward use of APIs.\nNo more too crazy multiple inheritances with thousands of dots in between. And no more need to memorise all this madness.\nBut it is quiet a bit of work still to do to get it out right.\nJust to assure you, simplification - it is happening, but need a bit more time ;)\n. There might be an issue, as Spawn Bounds are not half extends, but full width, height and depth of bounds. So rendered rectangle is twice bigger than it should be.\n. As we have (assumption) only rare cases of multiple Applications per page, then whole work with App is more edge case rather than a norm, so we potentially have to move away the need to worry about providing App for majority users, and keep ability for edge cases.\nThat is possible by creating one global variable currentApp that will be set to app on: create new app, call app.update, and few other situations. Then when you create an Entity, if app is not provided, it uses currentApp, which in majority (99% cases, assumption) will be what you want.\nThat is little 'magic' behind the scenes, but it is great benefit for most users. Then we just clearly say: if you want multiple Applications per web page, then make sure you provide app when you create Entity, that's it.\nSo that way we are looking at: new pc.Entity(); as a holy grail.\nSome example what I think looks good:\n``` javascript\nvar app = new pc.Application(canvas);\n// ...\nvar light = new pc.Entity();\nlight.translate(5, 0, 15);\nvar point = light.addComponent(\"light\");\npoint.type = \"point\";\npoint.color = new pc.Color(1, 1, 1);\npoint.range = 100;\napp.root.addChild(light);\n``\n.app.scene.createEntity()vsnew pc.Entity()`\nFirst one requires some learning of the naming as we do need to find out function of how to create entities. While second one follows general conventions of OOP programming, and users are very likely to be familiar with pc.Entity class already, so nothing new to learn.\n@willeastcott the case of multiple apps in one page, is extremely rare edge case for advanced users, surely clear documentation regarding multiple apps will do great job to allow them do whatever they want. But for majority of users, keeping API clear and simple - is a priority I believe.\n. That is huge improvement.\nCan we update README too?\n. Method has 6 arguments, and one of them is options, why not to fit all of them or at least most of them in options and use just object inside?\npc.prefilterCubemap(options);\n. It is different spawn bounds shapes feature we lack.\nWe probably should allow to specify spawning shape to be one of: box, sphere, cylinder, cone.\nAnd parameters based on that spawn shape (radius, height, width, etc).\n. Seems like being fixed some time ago, cannot reproduce using master branch. Please verify so.\n. After some research, those calls itself are not really slow.\nWebGL has underlying thread with queue of commands. This queue is executing independently.\nOnce page thread (JS) needs some data from webgl, for example status of shader compilation, or parameter location, then it makes those requests, webgl thread checks if program or shader that data is required from is available (finished compilation), if it is not, then it has to block main page JS thread, wait till WebGL thread queue comes to the point it can execute commands gl command, get result and throw back to page js thread, unpausing it.\nThat basically leads to the thread lock.\nThere are two approaches can be taken, first one would require some research done, in order to identify which of the webgl commands do block, and if they are avoidable by any chance. If they are - then we all great, and can just have it as it, without using those commands.\nAnother approach would be alternative option, only should be considered if first approach is not possible.\nThat would require engine to predict how long program would take to compile, then create small timeout before executing blocking webgl commands. That would allow page thread execute js, do some other things, before shader will be created.\nIt creates two main considerations - shader creation will become async, and might involve some considerations for developer, but I believe it is simple and common async approach.\nSecond consideration is amount of time to wait till executing blocking wegbl commands, as there is nothing clearly indicates how long it will take, and there seems to be no easy way to check if it is done or not without blocking. So that would require some research and try.\nBut at the end we might have nice async shader creation without any blocks, that will greatly improve responsiveness of javascript and preventing page js thread to be blocked.\n. Although few improvements we still missing: start compilation during loading of assets using placeholder textures to prevent recompilation on texture availability.\nAs well as think of alternative ways to get parameters from compiled shader, as there might be cheaper options.\n. Will add here too: if camera has viewport [ 0, 0, 0.5, 1.0 ] it stretches too.\n. I totally agree that there should be no limitations, and developer should have possible access to as many properties as possible, not everything should be publicly exposed though.\nSo potentially it is possible already, but by inspecting actual data and modifying not exposed values.\n. Closing this ticket due to lack of activity.. Could you please post simple test application, wether using tools or pure engine on lets say jsfiddle?\n. Most common use of app root, is easy way to find entity by name in script components. Do users write: app.root.findByName(\"foo\"); which is very easy to remember. Introducing scenes interface how that will look like?\nI think personally, that scene should.be always represented by its root node. And app.root should point to root node of running scene. All scenes that leaded on demand, are added as child to other nodes, usually to root of pimary scene. This is rather simple, and does not introduces new abstraction on the way of hierarchy, and eliminates weird root node.\n. Is this still a problem or consideration for future updates? Please give some feedback on this @willeastcott @guycalledfrank \nOtherwise this ticket shall be closed due to lack of activity.. Shall we close on this ticket then?. Fixed by https://github.com/playcanvas/engine/pull/507\n. So timeScale is global to all applications variable, even if there are many applications?\n. As we spoke before, we should use .frag and .vert extensions for shader files and .ps and .vs are totally for different languages and seems like now even not doing what supposed to.\n. I think it should affect color or/and texture in all cases. Otherwise currently in order to affect texture, you need to enable tinting, which is a bit wasteful in this case.\n. Same problem on One Plus One.\n. One Plus One\n\n. @SquareLi please try this build: http://playcanv.as/b/2fAvxRc2\nAnd let us know if problem still persist.\nI've received update on One Plus One, so now it works all well, doesn't means issue is gone.\n. It appears to happen only on non-ANGLE devices such as Mac and Linux.\nVery likely it is related to the way ANGLE handles uninitialized buffer data and still works, where Mac and Linux just throws warning and breaks rendering.\nTry switching in browser flags to use OpenGL, it might allow you to reproduce the issue.\n. Does this https://github.com/playcanvas/engine/pull/271 fixes issue described in this ticket?\n. If you open editor, then it does a bit weird things with shadows until you zoom in: https://playcanvas.com/editor/scene/7069\n. In #376 added getting params and other blocking methods on shaders only when rendering and shader is \"dirty\". That way compilation can start very early, and will not block main JS execution thread.\n. We do linking later on now, only when rendering required, while getting params early, this improves situation a bit.\n. Implemented in #379\n. Please try this script: http://jsfiddle.net/6mjjspdn/\nPress more than 2 buttons, if keyCodes appear for more than two keys, then it is engine issue.\n. Duplicate of #359 \n. In WebGL 2.0 it is possible to define shading smooth or flat for in/out. It means it will be possible by altering shader to enable flat shading for just normals. Although this will not work for WebGL 1.0.\nDue to inability of making this shader shading approach backwards compatible without affecting a vertex buffer, the only way would be to preceduraly edit vertex and index buffers splitting vertices into separate triangles.. It's been long, sorry, but merged now.\n. Of there is a way to combine vertex color with textures and other multipliers?\nFeels like they all should work together if in present instead of replacing each other.\nGood example would be to have aoMap on the ground plane, and combine with ao from vertex data under trees.\n. I don't see problem with multiplication at all.\nThere wont be over-darkening, because 0 * 0 = 0;\n. Encountered same issue on some projects.\n. To render cubemap. I believe it should be as easy as possible, actually without even a need to create a cameras, just be able to call render of cubemap specifying position and resolution.\nAnd a starting point would be just a possibility to render to buffer (one of face of cubemap).\nCamera utilities would be an addition over this basic functionality.\n. It is somewhat more complicated with multiple cameras used. So it is more encouraged to the developer to manage own cameras references and act accordingly.\nThere might be a case where something is rendered to different cameras and need to be modified so. This probably will require a clone of renderable model with different culling mask on it to ensure they are rendered to own cameras and modified accordingly.. How does this addresses concern of multi-camera cases?. So would that be an event on MeshInstance that would be called for every render by different cameras?\nSomething like:\njavascript\nthis.entity.model.meshInstances[0].on('render', function(camera) {\n    // called by shadowmap cameras, as well as normal cameras\n});. That would do :). What layer can be? Is it same as onTop? And if there is a way to have post render for meshes too?\nTo have some stuff rendered on top of basic scene, but still being sorted with same layer stuff.\nWhat is the difference between renderMeshInstance and renderMesh?\n. Does that means they will be always on top of everything, and there is no way to draw line on specific layer overlapping with that layers zbuffer?\n. toString is the same as toJSON then? toJSON probably should return JSON, which is actually an object, not string. Pretty much: this.get();\n. If found lack of constructor from array pretty often.\nIt is sad that we do prototype = { ... instead of individual method, as Vec3.prototype.toJSON = Vec3.prototype.get - would be more optimal and efficient.\n. Closing this PR due to lack of activity on our end, and since then many things have changed regarding Vec3. Although reflect method could be introduced as separate PR in the future and is considered useful.. It is more of a question where to store and how to store such data.\nCurrently material mapping is store within model asset data property (json).\nIn order to enable overriding default materials, we need to extend model component with array that would contain same number of values as materials in model asset. And can have null or another material asset id, which means it overrides default material.\nThat way we will have still ability to inherit all material mappings from model asset and they can be changed in one place. And user can override them on model basis.\n. We could add filter method, where you provide a filter callback, that iterates through each asset and by returning true will include it to result list.\nYou have to understand that iterating through each asset like so is a costly operation, and should be done very few times, probably on loading only and not on every frame.\nSomething like:\njavascript\nvar items = app.assets.filter(function(asset) {\n    return asset.type === 'material' && asset.name.indexOf('monster') !== -1;\n});\n. Added PR https://github.com/playcanvas/engine/pull/322\n. This PR implements several features and has been stalled for long time.\nIf any of further work is going to happen for such features, then they have to come as separate PRs with initial discussion in Issues section.. If it is a \"hit a snag\" it is a browser problem, and is under our control.\nWork on my One Plus One too.\n. Worked around by 9d8b7a2185b269d33ce27f7115fa9c80e95bd5f8\n. Does mouse coords has to take density of a pixel in account? Because on DPI 2 screens, mouse coord like 10,10 will be 20,20 in canvas pixel space. Should that be handled by engine, or should it be handled by user?\n. @yard this options would be fully static, and wouldn't allow further manipulations of entities within single geometry.\nPerhaps both sounds like different options.\nComplicated bit is UVs and materials.\n. And on webgl2 using Transform Feedback operations on transforming VB's and merging into single buffer can be GPU accelerated.\nYou right on complexity with shader batching approach.\nJust on your opinion, do you think that shall be runtime feature and/or tools feature?\n. I think for many cases allowing a developer to decide - is best case here. Default behaviour should be least magical and most simple, providing functionality to start loading if required.\nSo +1 for \"don't load unless asset has to be rendered\".\n. @vkalpias you mean it should be not loaded if entity is disabled, and if user want to load still, can do it through code?\n. Fixed in 26975003b1bded4a29ebe0bc2aa1a7dfdc5e8035\n. Checking if any parents have scaled every frame, is heavy, and might impact launch performance as a whole. Which is not good, as we don't want any extra overhead of running application in launcher over published app.\nSo we need to think clever here. Only if there would be some event system to notify of scale changes all children. We possibly can make it in launcher actually, so event could be created on scale change, and propagated through to all children to observer, so they all can react if needed. Which can be a bit tricky with very complex hierarchies though.\n. Duplicate of: https://github.com/playcanvas/engine/issues/315\n. Closing this due to inactivity.. For normals, it will just work even if texture is different resolution, because tilesX/Y is number of tiles, so all should be fine.\n. Instancing is not encouraged currently, and this ticket been inactive for very long.. This been addressed several times, and ticket has been inactive for long.. Noticed that on @daredevildave mac laptop, even 1024 cubemaps had only quarter (512) part textured, rest was black. Looks like partial support of it.\n. It seems that webglreport for Max Cube Map Texture Size is larger that is actually supported. We have device that has only top left quarter of texture visible, but rest is black.\nSo it might be that webgl extension reports one resolution, but reality is different. So we perhaps need to make small test of that to detect this behaviour?\n. Regardless of a source of issue, similarly to float and half texture format precision inconsistencies, if we can test for this and implement a workaround to ensure that users get appropriate cubemap scaling.\nFor developer's point of view - issue is on our side. If we can solve it, then we shall better do so.\nThis is motivated by recent forum post of a developer who found many devices having inconsistent cubemap renderings with specifically that issue.\n. You can add those too :)\nASSET_CSS: 'css',\nASSET_HTML: 'html'\n. Could you please sign this Contributors Agreement form, so we can merge your PR?\nThanks a lot for making a PR :)\n. Dzi\u0119ki you very much for a PR! :) Feel free to make more of them, or ask question and request features.\n. This is to track how much the asset has been used around, and if we can find out that we can unload asset if it is not used?\nThis is a bit tricky indeed, and sometimes case dependant, but we will think about that indeed. Bigger projects need a good way of managing what is loaded, and what is not. Currently we trigger loading of assets when they needed. Assets can be non-preloaded, making loading async, and only when needed to be in scene. This already allows to load bunch of assets on-demand. Although not much unloading work been done yet.\n. What if asset is not used, but needs to be held loaded, as player goes through level, and that monster will come up at some point?\nIt is more of a game specific behaviour. We need to think of flexible API that allows to make it simpler.\nCurrently finding our if asset is used or not - useful, but if API allows to be avoided (using id directly instead of AssetRef), then it is prone to human mistakes.\nUnloading is possible, and in most cases currently done by using Tags, where people load whole bunch of assets tagged lets say level-1, and then unload them as they need to.\n. I believe it works :)\nHardest bit is to make it very easy, almost transparent for users, that will not complicate and not require almost any learning to apply.\nAny design that requires to learn, reduces number of users capable of using the engine. So we have to be very careful about implementing new APIs.\nAnother option for doing what you need, is we could have toggle on asset \"unload once unused\", that would unload it self automatically once not used, and engine would do it fully transparently.\nAnd add another feature to track number of uses of that asset, possibly with references to who is using an asset.\nSo that developer can make decisions of it.\nThen using tags we get list of assets, mark them \"unload once unused\" or not. And then allow developer unload by force if needed.\nThat would not change the way referencing in engine works, and will not complicate life for existing users at all, but add extra functionality for those who demand it for extra control.\nIt is important and valuable that you are looking at this, as it helps us to understand many use cases and user demands. So huge thanks already for having a discussion on that topic.\nWhat you think?\n. Hi. I've noticed this when was doing some demo quiet a long time ago. And do agree that if asset is set to non-preloaded, it should load ONLY if it is enabled and is in scene.\nI've made small hack to enable such behaviour, of course it should be made better way, but worked in my case:\n``` javascript\n// fire enabled event\nvar entityStateChanged = pc.Entity.prototype._onHierarchyStateChanged;\npc.Entity.prototype._onHierarchyStateChanged = function(enabled) {\n    entityStateChanged.call(this, enabled);\nif (enabled)\n    this.fire('enable');\n\n};\n// load asset only if entity is enabled\nvar modelComponentSetAsset = pc.ModelComponent.prototype._setModelAsset;\npc.ModelComponent.prototype._setModelAsset = function(id) {\n    var self = this;\n    if (! this.entity.enabled) {\n        if (this.waitingForEnabled) {\n            this.entity.off('enable', this.waitingForEnabled);\n            this.waitingForEnabled = null;\n        }\n    this.waitingForEnabled = function() {\n        modelComponentSetAsset.call(self, id);\n    };\n    this.entity.once('enable', this.waitingForEnabled);\n} else {\n    modelComponentSetAsset.call(self, id);\n}\n\n};\n```\n. Could you please sign this Contributors Agreement Form, so we can merge your PR?\nThanks a lot for making a PR :)\n. Thank you a lot for making a PR! Feel free to make suggestions, request features and make more PR's :)\n. Hi @erlend-sh, we've developed our own runtime format, to run efficiently to our engine, and we produce it from popular formats like fbx, collada, 3ds, obj.\nFirst we need to find out what benefits using glTF will have comparing to our proprietary format. If there are any and they are significant, then we will consider using glTF.\nIf there won't be big advantage of such, then we will still support glTF for upload if it becomes popular, but will still produce our internal format from it, as it suits our engine in very efficient way.\nWe do have plans to improve our model runtime format, and it is in our roadmap.\n. Feature discussed here: https://github.com/playcanvas/engine/issues/806. This been implemented, and instancing need to be updated which is different issue.. Duplicate of https://github.com/playcanvas/engine/issues/338. You can see in files changed, that each file is marked as renamed, instead of deleted and new file added. Used git mv so that preserves all the history.\n. Translate and Rotate - yes, Scale - no. Each shape has own params, such as halfExtends for box, or radius for sphere. Those are used instead of scale.\nSo all it is, list of shapes with types, and their specific params based on type of shape.\nIn code it can be simple as two vectors (Position, Rotation), and in Editor on selecting entity with compound shapes, we can render gizmos for each shape allowing it to be easily dragged.\n. There will be huge number of limitations of what compound child entity can do. As well as extra overhead of managing extra nodes. Where in almost all use cases, physics compound objects are almost 1:1 comparable to trimesh physics objects. Which purpose is to do just physics.\nThen what if you want another child entity with physics to not be compound, but be another physics object?\nWhat if you update transform of a child, need to update compound transform too, what is overhead with that taking in account that there is hierarchy now involved?\nPlease provide examples of what can and cannot be done with both cases. User stories here will be perfect.\nPlease look at real-world projects, and think how it would look and be implemented with 1 or 2 options?\nHaving child entities - is over complicated with many edge cases, scenario, that will not have almost any more benefits over option 1, which can be done with alternative more primitive approaches.\nJust think of level of complexity here. We do not have anything in engine that has child entities dependencies.\nHere is user story (for option 2):\nUser has a chair, that has 4 legs, base and a back which is made out of few planks, around 500 tris in total. It is a single mesh, optimised for real-time performance. Then user needs to mimic shape of a chair with compound shapes. He will have to create a lot of entities for each compound child? But user for sure don't need any entities for this. This is unnecessary overhead. So this system creates rules of the way to make compound shape, with unnecessary overhead.\n. In Editor, we have Sound Component with way more properties per each Slot.\nHere we probably would have similar, list of child shapes, which are way smaller as they need just position, rotation, type and properties based on type. We can fold each of them, and highlight gizmo (wireframe of shape) in viewport on hover, that gives good idea of which child is which shape. And probably show gizmos for all shapes in viewport, allowing you to drag them easily.\nWe can implement \"selecting\" mechanics for children as well easily, allowing to focus on them and orbit camera them. As all modules in editor ready for doing it already.\nWhen we implement such things, we go through R&D process, and we try loads of user stories and behaviours, trying to find best solution we can here.\n. If some third-party shims will override functionality of those methods which are used in engine, how we can guarantee it won't break the consistency, which might lead to unexpected problems? Plus, surely those shims do same exact check on existence of those methods, which then keeps the engines at the end.\nIs there any case of something misbehaving?\n. Thanks for a feedback. You can make a PR to change it to configurable, we will merge it.\n. Could you please sign this Contributors Agreement Form, so we can merge your PR?\nThanks a lot for making a PR :)\n. I give +1 to change to physical.\nOld one is getting deprecated and should steadily go away.\n. For some reason we didn't merged it after approving it, now merged.\n. Been implemented in https://github.com/playcanvas/engine/commit/53c086e49ab409624c0b68d0d463012da932fa97. Fixed in https://github.com/playcanvas/engine/commit/421aeace06e20898e3639027235e10041abaa3a3. Implemented in #632 \n. Could you please sign this Contributors Agreement Form, so we can merge your PR?\nThanks a lot for making a PR :)\n. Just wondering what is the purpose of StaticArray?\nTrying to get head around of this new structure, and take in account it is not actually static as it has push too, but then it lacks all the other features of common Arrays.\n. Hm, I see now the point of this, but is it a really an optimisation here, or it is such a micro-one, than introducing new abstraction might not worth it?\nBasically, we usually avoid introducing abstractions around the code if it is used by single thing or does not have reasonable enough purpose.\nIf those arrays are really a point of performance waste, which we can track by measuring % of performance used to deal with arrays while running functions above that relies on those, and it is actually considerable time, then it worth it.\nIt is easy to introduce abstraction, but hard to keep it simple, and I personally thing it better to be simple for open source projects.\n. Added in #532\n. We do have stop event on instance? It indicates it is stopped due to stop() method or after end event.\nI assume it is safe to say that after stop that instance shall be used no more by developer.\nSimple rule, and clear to communicate. We can clear all events after stop event as well.\n. Duplicate of https://github.com/playcanvas/engine/issues/479\n. Please provide more detailed description of how to replicate and what is wrong.\n. Can we verify this is still an issue?. Due to inactivity closing this issue.. Fixed in https://github.com/playcanvas/engine/commit/e30a8be4f5021c700b38cc997aff9db34b85c985\n. It is not leak, but re-allocation.\nGC does the right job in order to clear memory of unused data, so it is not leaking.\n. There is no alternative to \"update\" the rect without re-allocating a new one.\nIn order to implement reliable updates of canvas resolution, engine either user shall implement functionality to call DOM related methods to get size and position of canvas. In all cases querying DOM for such properties will lead to reflows.\nUsing getBoundingClientRect makes one reflow instead of many by individually calling clientWidth, clientHeight, etc.\nI don't see alternatives to this with easy work we do for users already by managing resolution of canvas.\n. Fixed in #540\n. There is currently difference between filenames of chunks and variable names, if that can be eliminated as well, it will help easier to navigate and override chunks.\n. Done in #649\n. Why not get world transform of entity before reparenting, and then set it back when reparented?\nScale actually won't work generally, as there is no such thing as global scale. Which means that there are ways to have parents scaled so that other parent scaled differently, your entity will looked skewed differently, and there is no way to compensate that using local scale of reparented child.\nChanging current behaviour won't be possible, as it will change general logic on which many apps relied on, so it will break. Alternative function or argument for reparenting method is potentially possible way to go with it.\n. If this is an Editor feature, then it shall be discussed in forums http://forum.playcanvas.com/c/suggestions\ngithub is for engine-only stuff.\n. Closing issue due to lack of activity.. Closing the issue due to lack of activity.. Project seems to be unavailable (is it private?)\n. Link in first post points to master, so it is not pointing to right line anymore, is this still an issue?. Where?\n. Duplicate of https://github.com/playcanvas/engine/issues/688. Hm.. visible might sound like check if mesh is visible. While hide might state that mesh needs to be hidden. visible might be confused with potentially query method to check if something is visible based on culling or occlusion.\nNot sure on naming, but it shall be a property rather than two methods.\n. It is same for castShadow for example. What do we do there?\n. Hm.. More I think about it, more I actually prone to say that methods hide/show on model and visible query on meshInstance, is actually most optimal solution here.\n. Added in https://github.com/playcanvas/engine/commit/c399d85740d77c074c96e1abf40b9d690d2857e8. Fixed in: https://github.com/playcanvas/engine/commit/6b330c5d84057447063309bc5e6859580067b778. That is definitely a nice feature.\nAlthough seems like there is no such field exposed on camera component, which many people use.\nProbably worth adding all necessary fields to camera component too, so at some point it can be exposed in Editor UI, as well as to component users.\n. Hmm...\nThinking a bit more about this:\nmeshInstance has layer property. Defines what order stuff is rendered at.\nmeshInstance has mask property. Defines what lights will affect it.\nlight has mask property. Defines which meshes that light affects.\nlayer property on meshInstance, which decides order of rendering, all it does is makes sure that some stuff is rendered before/after other stuff. This is like, making sure HUD is rendered above world, and even world there are many layers allowing to for example render a gun from first person that will not occlude with level.\nSo in order to say what camera sees, it makes more sense to use mask concept rather than layers.\nAnd if camera will have mask, shall it affect visibility of both: light and meshInstances (I believe it shall).\n. Could you please sign this Contributors Agreement Form, so we can merge your PR?\nThanks a lot for making a PR :)\n. @guycalledfrank it shall not be merged to stable, it has a bug: add/remove to index shall be applied to each child of added entity. Otherwise children wont be in index that will lead to bugs.\n. https://github.com/playcanvas/engine/commit/8cda81997fe817c393afc460bfc1bde17056790b. Tested on few project, merged.\nThank you for simplifying PR a lot and sorry for not acting on it that soon.. Is this been addressed?. Changing file.url at runtime will lead to problems.\nHave we engaged with another option by making a method getFullUrl that will return full path (including host), instead of modifying file.url?\n. Hm.. I'm really liking that you actually go deep into guts of engine, and getting a grasp on things!\nWill have a look into that a bit more precisely. Reasoning of that check was to prevent that method from executing unless there are really a need to set attributes, and defined __attributesRaw was an indicator of that. There are quiet a few scenarios where __initializeAttributes is called from, and will need to test all those cases first to make sure we do not do unnecessary initialising of default attributes multiple times, as well as attributes are still available when they are needed.\nIf there were a particular problematic scenario that lead to this change?\n. I need to test few things, there were complicated scenarios that lead to this reason, and they are that you can use default values for example \"resource_id\" for entity type attribute, or asset id, but you can't guarantee that entity or asset will be available during creating of script instance on script component, as that happens way before final initialisation process. Which then leads to racing condition of what gets first and where.\nThat's why there was a decision to delay attributes initialisation and that delaying depends on case of creating script, for example if it is a cloning of entity with script and children scripts, or it is an initial initialisation.\nSo I will test many cases next week, and will let you know about impact of this :)\n. Fixed in https://github.com/playcanvas/engine/pull/780\n. Moving train is good example, but it's not really \"local\" to particle emitter, but to some other node.\n. Using this.app.setSkybox(asset) fixes the issue, and is preferable to be used.. Regarding loading texture with variants almost nothing different needs to be done.\nOnly variants object needs to be provided with relevant details (same as file) when setting file field.\nAnd when that happens AssetRegistry will automatically pick the best available variant. So there is no need to do anything except providing extra details about variants files.\n. Will debug it in Editor then.\n. If this has been addressed?. There are engine builds available here: https://github.com/playcanvas/engine#how-to-build. This perhaps should take in account XHR behaviours to check response statuses, so to avoid requesting when valid 404 is given.\nIt will have a cost of requesting again by polluting request queue so should be done with care.\n. In our case, materials - is what contain opacity information. Materials are applied on meshInstances, which are part of model component of an Entity.\nEntities are part of scene graph, but properties of opacity are not applied to entities, they are applied to materials.\nIf you visualise structure, then you will get a tree with leaves, where leaves - are meshes with materials, they are not within the graph, so they can't be inherited.\nSo in PlayCanvas, any material properties are applied only to meshes that material is applied on, and have no any ability to propagate through scene graph to siblings.\n. Here is a project that simply unloads texture and loads it again, if texture is not compressed then it will reload as supposed to and re-appear on plane. But if texture is compressed that won't happen. This PR fixes it.\nhttps://playcanvas.com/editor/scene/470306\n. Added https://github.com/playcanvas/engine/commit/9c173d466f4c0fe1ac17ad22a17a44a0bb888d16, but lacks the docs.. https://github.com/playcanvas/engine/commit/f9457387545a6a510ef9bb9341b25be37236d80a. Is the logic 1:1 as exposure?\nThen perhaps values above 1.0 in Editor shall be allowed.\n. Shall it be changed?\nI did noticed previously if Reflectivity value is 0, we still are getting diffuse ambient, so it was not possible to regulate it.\nPerhaps there are both cases where you want that and where you don't.\nWhat would be a option here?. This is not bug, please test properly, to prove observation.\nWith Linear Tonemapping it will look over-bright. But falloff is actually squared.\nLinear:\n\nInverse Squared\n\n. This might complicate a lot of users life. Where exactly setting resolution, made pixel ratio not usefull?\n. Sounds reasonable. What about disabling/enabling auto-resizing? So in case with VR auto-resize shall be disabled to avoid app.resize to be called.\n. That is Editor problem as it does not provide correct AABB for mesh.\n. I think ticket in jira, to make whole new useful grid system. As current one is a bit useless :)\n. Fixed in https://github.com/playcanvas/engine/commit/722469b3054b755eba11aa6641cfe63d35df060b. Perhaps setPosition and setRotation on rigidbody might confuse as being same name as on Entity. Different naming might help to distinguish behaviour and relevance to entiyty or rigidbody.\n. @willeastcott you mean to make setPosition and setRotation on Entity, to actually change rigidbody instead? Perhaps that would dramatically simplify the whole world of working with physical objects, indeed.\n. That probably wont work, as setPosition and setRotation, and other methods should have immediate effect, rather than delayed.\n. Could, but feels like an overhead. I would rather check if entity has method _syncTransform, and if does, it would call it every time transform has been changed.\nThen rigidbody would define that method when component is added and would remove it when removed.\nThat way entity does not need to know about rigidbody, only about possible _syncTransform. Overhead is minimal here - single if to check if method is defined.\nEvents would have too much of an overhead to deal with, as transform changes - is very-very often thing in update loop.\n. Pretty much all features have been re-implemented as separate PR's to support WebGL 2.0 new capabilities and few extra things.\nDue to that closing this PR.\nGreat work!. Could you please sign this Contributors Agreement Form, so we can merge your PR?\nThanks a lot for making a PR :)\nAlthough not sure about those extra spaces, as same lines then still jump around :). Awesome! :)\nThank you for contributing, and it wouldn't be great if not people who use it and contribute.. As @daredevildave mentioned, newer components already started to go away from that pattern. And you are correct - it is not efficient.\nIf you have a look at Zone, Script, Screen component, they already do not use any of data stuff, just simple enabled property, for backwards compatibility.\nThen there are those events all around. Events are used internally, and not externally. Some of them are required for communication between multiple components, some are not needed at all. So this could be all changed so that there is minimum, or even none of the dynamic events fired internally - because they have a price (each fire unfortunately has to allocate a copy of callbacks array, no good for GC).\nAnd right now to introduce new property, you have to add it to 10+ places! Insane, I know. So this shall be extremely challenged to dramatically reduce headache of a future development.\nThen there is backwards compatibility - that relates to two things:\n1. Logic - the flow and logic of things getting initialised, and just the whole order of things shall be preserved mostly. As this might affect due to ripple effect some projects who rely on it.\n2. Public Functionality - this of course shall be preserved, as we do not want to break any of existing projects. Option of deprecated way of doing something and more new way - is what we've used in some places. The goal here is to be backwards compatible, which does limits a lot the freedom of redoing everything :)\nSo best way to go here, would be to try coming up with some test user stories and test examples. Then redo one of the simple component. Thinking about holy-grail approach first. There is potentially some semantical improvements can be done which would simplify life for a developer - feel free to engage those ideas. Some review process would be good to be done along the way. Once there is one or two components done in new way, and it is tested and it works, then we can start moving whole system to that way.\nThis refactor would be very-very good for an engine and users.\nThis might save couple of KB's of the engine as well :). Here is forum discussion regarding that feature: http://forum.playcanvas.com/t/iray-pascal-spherical-camera-photospheres/2797\nIt worth thinking about different approaches and their cons/pros.. I agree, that would not blow up the engine, and prevent complicated branches in logic with cubemaps and will not introduce runtime conversion performance hit.. Made a simple test. And in FF there is no difference pretty much, and performance is staggering comparing to others.\nBut in Chrome on Linux, arguments approach is slowest, and instanceof is the fastest.\nOn Android, Chrome, arguments is slowest and undefined test is fastest.\nSo this even improves the performance.\nhttps://jsperf.com/function-overloading-arguments-test. > Optionally ignore gamma/tonemap/fog/other global things\nThat is managed by materials isn't it?\nAnd by Scene. Multiple Scenes (Worlds?) could do exactly that, as they would contain specific models and lights, and can have own settings of gamma/tonemap/fog etc.\nSo basically, it is almost there, but needs to be changed so it is easier to work with.. The script you have here does weird thing with creating Script Type and then you define another Script Type.\nIf this is not bug and clearly not an issue with engine, could you please use forum instead of Issues in github: http://forum.playcanvas.com/\nYou've basically copy-pasted code from old script system, and then tried to change it, but didn't do it fully.\nHere is corrected code: \n```javascript\nvar VideoTexture = pc.createScript('videoTexture');\n// initialize code called once per entity\nVideoTexture.prototype.initialize = function() {\n    // Create video element\n    this.video = document.createElement(\"video\");\n    this.video.src = URL;\n    this.video.crossOrigin = 'anonymous';\n    this.video.loop = true;\n    this.video.preload = \"auto\";\n    this.video.play();\nthis.material = this.entity.model.material;\n\nthis.texture = new pc.Texture(this.app.graphicsDevice, {\n    format: pc.gfx.PIXELFORMAT_R5_G6_B5,\n    autoMipmap: false\n})\n\nthis.texture.minFilter = pc.gfx.FILTER_LINEAR;\nthis.texture.magFilter = pc.gfx.FILTER_LINEAR;\nthis.texture.addressU = pc.gfx.ADDRESS_CLAMP_TO_EDGE;\nthis.texture.addressV = pc.gfx.ADDRESS_CLAMP_TO_EDGE;\nthis.texture.setSource(this.video);\n\nthis.material.emissiveMap = this.texture;\nthis.material.update();\n\n};\n// update code called every frame\nVideoTexture.prototype.update = function(dt) {\n    this.texture.upload();\n    this.entity.rotate(10dt, 20dt, 0*dt);\n};\n```. Would be good if it would not generate possible NaN's and would NOT console log unless engine is compiled with DEBUG flag.. Been thinking about this format and how it could fit for engine-only as well as developers with Editor, and can see two major things:\n\n\nEngine-only users would benefit a lot by simply being able to load this format. This does imply that file is treated as container and there would be easy and nice way to interact with contents (mesh information, animation, texture, material and other data). This would simplify life for engine-only users, and would allow users to simply plug'n'play their content using only Engine.\n\n\nTools Workflow (Editor) would be different. In order to provide users with full control over their assets: textures and their parameters, materials and their properties as well as being able to process their models, like auto-unwrap. And most importantly allow developer to compress textures to generate variants. This all implies that glTF would be treated as container format, just like FBX is, and would be a source for all target assets listed above. This would allow easy workflow of simply dragging stuff into Editor, as well as fine-control of it's content once it is imported. Re-importing would work same as FBX, updating stuff as required.. Providing native support for glTF in engine will enable engine-only workflow so developers wont need to go through Editor to export models.. I would definitely make it at least not.to return NaN indeed.. Wow dude, this is big PR. Awesome! :)\nWill have to spend some time reading and reviewing, @daredevildave is on 2D a lot recently.\nNote from me: would be easier if they would be smaller PR's, but many of them ;)\n\n\nWe will jump onto reviewing the code, and probably will be bounce back-forth with some comments on things. This came out of nowhere, always exciting!. I'll mention again: it would be way way much simpler if each specific thing was in its own PR. There are about couple of different features in single PR, it is hard to review and challenge each of it.. And is always best to start small chat in Issues, so to get a good solution ideas before jumping into the code. We brainstorm a lot, and match ideas against many user-stories constantly, to ensure our decisions over API designs are generic and enabling all developers to get their results faster, easier and simpler, avoiding segregation by all costs.. Nothing is deletable from GitHub :)\nIt's all a history and will be recorded till the end of days..\nThank you again for what you are doing, we really value such work people like you do!. Based on discussion above, this PR is intended to be split in separate PRs with specific features in each, due to that this PR will be closed.. Previously we had debugging and visualizing features for collision, cameras, lights, and some other gizmos. And it looked liked no one actually have used them. Reason they were put there in first place is to render them in Editor. We've decided to remove them from the engine to keep engine cleaner, and implement it as own things in Editor.\nMore of a question - how easy or hard will it be for somebody to implement border code - how flexible is the system that would allow easily make such modification.. Then perhaps hidden under DEBUG #define will do the good trick :). Does this have any regressions on existing developers workflows?. Thank you for PR!. Encountered a bug with this PR where making multiple-sets within one update, if last set was a flag or similar, leading to not changing shader, it would set dirty flag to false.\nFixed in: https://github.com/playcanvas/engine/commit/d90a0dcb45205a12b88b446aa1acdb9db83fc21a. We have thought about it. There are few vectors of approaching it. Would be great to get some ideas brainstormed first.\nConsiderations from me:\n\nHow is animation data produced, is it timeline with curve? What about positional data, is it splines, how they are authored?\nWe've got curves, they are good way to store value changing over time. And with curveset you can do vecs and colors. Will the system be a \"link\" that binds property and curve together and provides playing API?. We are planning work on Animations 2.0, which will be a whole rework for animations system, covering: file format simplification; morphing; playing groups of bones; better work with bones; much better control over animation playback; slots like on sound component; and many many other things. Right now animation is one of the weakest parts in engine. And huge system needs to be put in place. Loads of thinking :). It only add orbit camera, and not control for it though.. Currently there is Fly Camera, which has controls in it. So it is simply plug'n'play script. With orbit, it depends on controller script - input files. So I believe it would be good to have them, similar to ones we use in Model Starter Kit, that way dev can simply plug in files, and have orbit camera working.\n\nGoal here, is to make it as easy as possible for a developer to get it working.. Good, change, have you tested existing project if they are affected anyhow by this change?\nOne more notice, we have amended CONTRIB.md to include more specific styling rules. If you be kind to check it out, as it relate to some code styling within this PR to be corrected to comply with Engine coding standards.\nOtherwise, I will test some of our existing projects tomorrow, and if all good, after styling corrections will merge.. Thanks a lot for corrections. I've made some tests, and there is one issue where there are cases when people implement their own component systems. One of them is spine. So it was implemented relying on old system, so I've added few backwards compatibility things to make sure it still works with old components definition.\nTo test locally, fork this project and download a build, replace engine with built from your PR.\nSo those changes will make it backwards compatible:\n\n\nin components/component.js bring back buildAccessors but with a check:\njavascript\nif (this.system.schema && ! this._accessorsBuilt)\n    this.buildAccessors(this.system.schema);\n\n\nin _buildAccessors method add a prototype property _accessorsBuilt so we can know if it has or not built a new accessors:\njavascript\nprototype._accessorsBuilt = true;\n\n\nand lastly buildAccessors method shall be brought back.\n\n\nThis way old component system definitions will still work, and new ones use new system.\nYou can add a console.warn to buildAccessors behind debug define to give warning saying that new accessors system shall be used.\nOtherwise PR worked well on other cases, and after those changes will be ready to merge!\n\u0421\u043f\u0430\u0441\u0438\u0431\u043e! ;). > The only thing I feel a bit uncomfortable about if that _buildAccessors and buildAccessors are quite similar in terms of logic, but I didn't find a way to use one method only \u2013 is it a big deal?\nIn _buildAccessors, argument prototype I would call it obj.\nThen changing buildAccessors to:\njavascript\nbuildAccessors: function (schema) {\n    Component._buildAccessors(this, schema);\n},\nDoes the trick ;). Updated comment above few times :D. Thank you very much again for making a PR! It feels really good when other developers go into, understand things, and see how it can be made better.. Closing due to lack of activity.. Perhaps worth to be mentioned in aabb property that it might be not up-to-date if any ancestor including self been transformed since last application render.\nA PR would be nice ;). One problem I have with this, is that it tries to change the behavior towards new approach too much.\nWhat it should be instead, is to simply add override to Entity constructor, that allows passing name as first argument - which is what it is in PR, but with totally fine with no name provided.\nSo instead of treating \"old\" way as \"legacy\" and doing backwards-compatibility, instead do a new way as arguments overloading, and simply be fine with both ways.. It is important to keep such changes backwards compatible with current projects. And adding extra arguments should not break anything, indeed.\nName and application arguments both are optional.. Thank you a lot for contributing! :+1: . I have tried few existing projects with this PR, and it seems like it has some issues. Not sure what exactly is the problem, but running any project from Editor, leads to black screen.\nTo test things from Editor, serve engine from localhost like so:\ncd build/output\npython -m SimpleHTTPServer 51000\nAnd then open any Editor scene link or Launch, with HTTP (not SSL), and add argument: ?use_local_engine=true.\nThis will use local engine and allows you to test your engine changes on real existing projects.. Agree on this one. Previously we used to make a lot of warnings and error logs. Now there are defines for engine, and perhaps this warnings should go behind DEBUG define, to ensure production engine is not logging this stuff.\nPlease consider making simple PR to address this, we will be very happy to have another contributor.. Yes you can use any libraries you want.\nPlayCanvas Engine is just another library that uses some JavaScript.\nBest place to ask similar nature questions would be a forum: http://forum.playcanvas.com/. Just to clarify - this is due to polyfill assumed all mobile devices are VR capable. But WebVR has different assumptions about devices, so pretty much all non-daydream mobile phones didn't get VR love :)\nHere is that issue discussion on https://github.com/googlevr/webvr-polyfill/issues/177. Currently you could enforce loading polyfill for mobile, unless you know it is Daydream compatible device.\nIt is still not clear where vendors will go, either they will never add support for before-daydream mobiles, or they will in future - not clear.\nI personally believe it is good thing, as experience and performance on before-daydream mobiles is too poor, and this leads to bad experience for users. But of course delays Mobile VR accessibility by quiet a bit of time.. You could override property on pc.VrManager which called isSupported to return false in cases where it is true but you still want to enforce polyfill to get loaded. This should be done before app starts loading stuff, which would be in loading script perhaps.. @Dhellblazer does this happen to many WebVR demos as well as other engines/frameworks? If so, it is Chrome 58 regression bug, and should be reported here: https://bugs.chromium.org/p/chromium/issues/list\nEdit: here is bug report about that: https://bugs.chromium.org/p/chromium/issues/detail?id=724398\nYou can help by staring this issue there.. Fixed https://github.com/playcanvas/engine/commit/60e3805e3f83b8a62263b8e51099f26666763b36\nExample will work a bit later, once we deploy the fix.\nUPD: example working well now.\nThank you for reporting!. Implemented by @06wj.. Thank you for contributing!. Thank you for making a contribution!. Hi @AngeloReppucci, do you have a troubling model examples that gave issues before, and work with fix?\nAnd could you complete the Contributor License Agreement: https://docs.google.com/a/playcanvas.com/forms/d/e/1FAIpQLSfG9XHIgdapCBkvwxbXow592Y5NFPEKD5TM-TyWOmbaCbLeHA/viewform\nSo we can merge a PR after tested?. Tested, awaiting for form to be filled.. Thank you a lot for a contribution!. Thank you for making a contribution! Works like a charm :). Thank you for this little touch :). Thank you for making a contribution!. Will test through before merging.\nKudos for making another PR! :). Thanks again for making a PR, I've tested it across many existing projects, and works as intended. Great to see you getting to know how things are working and helping to make it better :). There are few reasons why this might be not that good idea:\n\nBackwards compatibility - we have to maintain 100% backwards compatibility, unless this is very critical situation, then we make alternative new path without affecting old path. So in this case, as @vkalpias mentioned, this will break if attribute type is a string.\nMultiple meanings. This is generally bad practice to have multiple meanings on things. This makes learning harder and developer need to remember two paths and keep conditioning in head when reading code.\nIf attribute is type of string, this will create confusion as it will be unclear either enum is used or actual value.\nUsing strings all around - actually has a price. In web we tend to forget that this stuff has to be garbage collected. But reality is if you allocate (define) a lot of strings around, then you will end up with GC stalls as browser has to collect all those unused strings and release associated memory. So strings all around - is not best practice.\n\nAs you can see, this PR unfortunately is under a question. Such nature of changes would be best to start from discussion in Issues first, to check how it aligns with general practices across engine and if it impacts learning and performance.. If pc.SHADOW_DEPTH2 is used, it will use black clear color and ignore what is set on camera.. Lightmap baking with new shadow type is broken - gives exceptions within engine.. Can you provide complete example with only the problem replicated?. Fixed in: https://github.com/playcanvas/engine/pull/892. Hi @ImmanuelSamuel.\nWe've been evaluating potential use of TypeScript. From the statistics around popularity of languages, TypeScript still is very niche language, having very small group (below 2-3%) of JavaScript developers using TypeScript.\nAnother reason why we don't make support of any other languages is that there are many: http://stateofjs.com/2016/flavors/\nSo how do we pick which one to support, or try to support all?\nThis most importantly will segregate our user base into groups that wont be able to exchange knowledge easily as they \"speak\" different languages.\nAnd documentation + reference would need to be available in all those flavors which makes maintenance much harder for very little benefit (user base for those languages is just extremely tiny).\nYou can check some work from @Nigh7Sh4de that might help to add TS support: https://gist.github.com/Nigh7Sh4de/bb85ca244d21ed5e5441\nWe have no plans in near future to add support for any other flavors of JS.. Problem with this approach is that it will compile shader once based on camera type, but then if you change camera projection or use multiple cameras with mixed projections this approach will not work, and use one shader for both cameras.\nEasiest way to preview this in this project: https://playcanvas.com/editor/scene/513932\nThere are two cameras, first one is Perspective and second Orthographic, because first is persp. it will compile different shader, not suitable for ortho. If you change them places, then it will be fine. But if you first have perspective camera and then set to ortho - problem again.\nEditor camera preview of ortho. user cameras shows same issue.. Summoning @guycalledfrank to answer those question :). Tested, seems to be good and working.\nThanks for another PR! :). Here is a classic use case:\nPlayer pauses game, and main game logic is not responding, but menu, and background music, and possibly some other stuff is working as intended.\nSimilar example is inventory system in game, which pauses main game, but continues to use animations in character window, or other things.\nBased on just those two examples it is apparent that time scaling is specific for different systems on different level.\nFor example for sounds, it might affect some sound sources, but some not - like button click sound in menu, or music.\nFor animations, it might affect animation in game, but not animation of character in character screen.\nParticles - same case.\nBased on this, the best solution would be if each system would provide a time scaling property that can be applied on different level.\nFor example for audio, this is already possible by changing pitch on individual sound instance, or sound slot, or sound component, or whole sound system.\nOther systems should expose same mechanics to provide sensible mechanics for all possible time management use cases.\nSound - instance, slot, component, whole system - this is already implemented, and we've used in actual project, and it worked really well with no limits on different cases.\nPhysics - might be challenging, so simply single time scaling factor would be enough.\nAnimation - should have control over individual animations, whole component, and whole animation system.\nParticles - control per component and for whole system as well.\ndt - is a delta time since last frame, and actually if frame rate is 60, then dt should reflect that appropriately, without actually being affected by time scaling.\nTime scaling is old legacy property that never been used properly within systems and has very limited use cases.\nIt is best to expose and provide tools to developers to define their mechanics of time scaling, rather than give some workflows that only would cover small % of cases, or require \"back-thinking\" of \"unscaling\" timings for explicit things - which is more confusing, than simply being explicit of what should be time scaled.. Tested on various projects, works like a charm.. In casino project, shadows from VSM8 are do not bake with this PR: https://playcanvas.com/project/421009/overview/casino\nSame happens with VSM lights in Space Base: Texture Compression demo.. There were recent changes to bias, which leads to some bias differences, which means some adjustments to bias value are required.\nWe will update default bias value to have better results.\nThis PR actually breaks a lot of other stuff.. If the PR introduces change to logic or some additional functionality, and it is not related to any existent Issue, then it is better to first make an Issue for a discussion, and there we can come up together with some good design and talk about a change in first place to ensure all things are in check.. This PR been reverted. Will be reconsidered when issues bellow are addressed:\n\nUses DEBUG define which changes logic when used without.\nTesting with debug will produce different results when application runs without.\nHandling different cases when used with GL1 and GL2 should be part of API and intuitive to user, current way is just not good:\njavascript\ntry {\n    var result = device.copyRenderTarget(null, rt);\n    if (result === false) {\n        // with DEBUG and GL1 will return `false`\n    }\n} catch(ex) {\n    // without DEBUG and GL1 will throw exception as `source` is undefined\n}\n\nShould be as simple as:\njavascript\nvar result = device.copyRenderTarget(null, rt);\nif (result) {\n    // copied successfully\n}. Thanks for the contribution! Please fill up the Contributor License Agreement.. Worth noting, that there is another possible optimization to minimize number of syncHierarchy calls by marking nodes all the way to the root from dirtified node with some extra flag.\nThis would lead to almost no extra cost for static entities in hierarchy as they would be never even checked, unless there was transformations on the path to them or under them.. Nice PR. \ud83d\udc4d \nVanilla JS way is way simpler to understand, as pc.inherits required to learn the abstraction as well as vanilla prototyping.\nReason why there was arg1..8 was the initially I think there was use of arguments object, which then was deconstructed every time constructor was called, which lead to looping through arguments which leads to allocations within browser and making array of arguments to pass through lead to more allocations. So we replaced it with hacky arg1..8, very similar to what is used in events library still, but proves to be better way than using arguments object.\n. Looks like useTexCubeLod flag was purely based on observation that devices with extTextureLod and less than 16 available textures per shader would support cubemap smooth seams. @guycalledfrank as mentioned there is no specific docs in WebGL specs about such behaviour, and seems like browser implementations don't expose any flags to probe it.\nWhich left it open to weird implementations by vendors - what exactly happening with A12 chip.\nAs this workaround does fixes this particular problem and makes all A12 chips render properly, I would assume it is working fix now without negative impacts, so worth merging.\nIf weird behaviours happen further, then proper manual test code have to be implemented, where it would render cubemap, and check on results as @guycalledfrank suggested. Reason @issacclee needs this fix, is that many their apps right now rendering wrong on new iPhones, and they rely on IBL a lot in their products.. @terence-wang it has not been deployed to Editor yet.\nAnd you sure it comes from this change? Do you have simple project to replicate an issue?. I can confirm that issue happens with this fix too, but it is weird as on some scenes it is popping out, and on others it is not. So it is somewhat scene related. Looks like it did not initialise some textures for cubemap. Maybe it is not using useTexCubeLod flag everywhere properly, and in some places it does own logic ignoring the flag or something.\nBasically, there needs to be a fix for A12 chips, and it seems like there is another logic that defines textures based on some other flag.\nEveryone with new iPhones and iPads is affected with PBR (IBL).. Tested it more.\n@willeastcott you are right, it is because A12 chips have limited WebGL support, and reporting (webglreport.com) that only 8 texture units are supported in fragment shader, while hardware is capable of more. Making it very limited.\nAnd there is a degradation of A12: they removed cubemap seams filtering.\nScrew Apple :D\nIf useTexCubeLod is false, it will fallback to scenario where it uses separate textures for faces instead of cubemap, to emulate manual cubemap seams filtering. But that uses 6 out of available 8 textures. With one light with shadow on scene and one diffuse texture it is already barely fitting. If you add another texture to that material, A12 chip just will refuse to render it leading to error mentioned by @terence-wang.\nSeems like best to revert such change, at least it will not throw errors, but IBL looks bad :(\nIf there is a way to do cubemap path but with fixed seams - that would fix everything. @guycalledfrank have to add on that.. Added a PR https://github.com/playcanvas/engine/pull/1473 with a fix suggested by @guycalledfrank . Based on discussion here, perhaps we should revert and look for another approach. Apple is screwing things up :(\nhttps://github.com/playcanvas/engine/issues/1464#issuecomment-454633744. But it is a bit more involved, there is a setting for number of threads can be used. And then it is only beneficial when instead of querying LINK_STATUS of a Program, it should query ext.COMPLETION_STATUS_KHR until it returns true, only then should query LINK_STATUS.\nThis can't be just plugged in, and will require engine to take it in account. And some behaviour development.\nFor example:\n1. Start precompiling shaders in the beginning of preloading phase.\n2. Allowing developer to specify material to be async or sync which will lead to changes that regenerate ubershader to be immediate with thread stall or asynchronous.\n3. What is API to compile shader, will it provide a way to start compilation and then ignore it if shader changed on the way, so all those API bits regarding shader code.. Status of this extension, been merged to latest ANGLE, so on Windows we will have it soon: https://github.com/gpuweb/gpuweb/issues/144#issuecomment-455050522. I guess the commented condition is a typo?\n. Here is shorter condition:\nif (this.emitter.texture) {\n. In the future we could refactor this bit to use regular expressions instead of iterations with indexOf and manual extracting.\n. Please do not name variables from capitals.\nthose will be: vsCode, psCode or codeVs, codePs\n. Capitals in function names only used if it is a class, if it is a method, it should follow camelCase convention.\n. This is not used as class (new DrawQuadWithShader) but as function, please name it using camelCase convention.\nAs well it is global, and might collide with someones methods, so it would be preferable to put it under pc. namespace in appropriate section related to the method functionality.\n. Not sure that we need to leave this here :)\n. All shaders have tabs, could we please use 4 spaces convention in all shader files?\n. LinearGraph seems to be very generic class, that allows to create keys with values. It is also not linear taking in account smoothstep attribute.\nThis class should be moved to its own file, as well as should use .prototype to initialise its methods.\n. All methods should start from lowercase using camelCase convention.\n. Do we want to call it ParticleEmitter rather ParticleEmitter2?\nAs previous one was not exposed to public anyway, so we definitely should ignore its existence.\n. Changed back to respect the target.\nAlthough then we need to make sure that we recommend to use \"window\" as a target in most places if users want to have single game per page.\n. If skybox model already exists, should it reassign textures instead of recreating model and material?\n. As we are going to have cubemap asset now, individual properties for textures are not required anymore, right?\n. There is no need for typeof here which is way slower than triple equal against undefined. So it is equivalent to:\nhdr = (options.hdr === undefined) ? hdr : options.hdr;\n. I believe we should keep existing materials as they are, and all new ones set to true, but we need to check what colour is get exported from default material from fbx. I believe if material has texture map, then default colour will be diffuse, should it be white to prevent dimming of texture map?\n. Yes\n. Skybox is: Box with backfaces visible only, with material that has emission map as cubemap, and depth check off, and positioned on camera, correct?\n. And if we would change PS, I would name it then Fragment instead of Pixel. vs/fs\n. tabs? We don't do tabs :)\nUse 4 spaces please instead of tab.\n. Which then wont find any prefiltered skybox reference (will be undefined).\n. Array.isArray is part of ECMA6, is it polyfilled?\nBased on ECMA6 Compatibility Table it is almost not implemented by other browsers.\n. Array.forEach does look semantically well, but most benefit it has over normal loop is to have scoped local variable. In this case it is not necessary, and classic for loop is way more efficient in this case.\n. Tiny // left over :)\n. .bind is very inefficient and leads to a bit more memory used.\nIf you can use upper scope var self = this - it is preferable option, then browsers can cache anonymous function, and improve its calling performance.\nGenerally .bind is pretty bad thing to use, and upper scope variable always preferable, unless it is very-very necessary.\n. Some tabs mixed with space here leading to jumpy lines.\n. mixture of tabs with spaces here.\nIf you use sublime text, then add those two lines to your config:\n\"translate_tabs_to_spaces\": true,\n\"trim_trailing_white_space_on_save\": true\n. this.states[this.state] is referenced many times, having a local variable var state = this.states[this.state]; and then referencing it later will be a bit cleaner.\n. Seems like well supported: https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment\nIt takes valid html string, and converts it to abstract document fragment, which then can be appended as child to DOM.\n. TagsCache and Tags is implemented to be agnostic regarding what it's tagging. So can be added later, although currently it is not part of this PR, as there are few questions of where TagsCache should sit on: Application or Scene, or Root node?\nAs currently it is: app.root.findByName, so makes sense to do: app.root.findByTag, although root is a GraphNode, so a bit of technical design is required here.\n. I've looked at places around, seemed like used practice for multiple examples.\n. Speed is not any \"touched\" by namespacing. This would be unmeasurable nano-optimisation.\n. Can you name stats as frame, otherwise it is a bit miscommunication later on where it puts actual values.\nSame for drawCalls later on.\n. This will be calling getter everything any scene stats is required, is a bit of an overhead.\nPassing app to constructor of this class, and the referencing graphicsDevice and scene is a better way.\n. You can pre-cache result of this function, as userAgent does not changes in real-time.\nSo you wont run it on every audio element added. As doing indexOf of relatively long userAgent, can be costly for real-time.\n. just for readability like in animation_component, store assets registry in var above.\n. If weights is 0, don't add pixel.\n. We probably want to return null here to allow users to get result of their function, instead of double return value meaning (new slot, or existing one - this just complicates).\nAnd do a logWARNING, as this is not exception case - this scenario is totally handled.\n. this context is not used in callback, so no need to bind it, as binding increases price of calling bound function.\n. If asset is not loaded, it will still fire play event?\n. Does that means that all playing instances will have their nodes updated?\nShall we do that, or playing instances should finish playing as is, but new ones should only be affected?\n. Same as above.\n. This is same as: return this._asset != null;\nOr simply return ! this._asset;\n. We can pre-cache this in variable, instead of calling it every time on load event.\n. Is that reliable way to detect all Firefox Agents?\n. Just thinking of use case. If you are playing something already, then you simply cant change nodes at any time, but have to do it only once current played, otherwise it will change in sound, might lead to sound glitches during change of nodes for currently playing instances.\nSo doing it that way, does not gives user choice, and it will affect sounds \"rudely\" if they playing right now.\nIf we don't affect playing instances, then it wont lead to \"glitch\" in sound where it changes in the middle of playing.\nAnd if this is something user really wants, he simply can call it on all instances himself. But I rarely can imagine such use case tbh.\n. So what to do with \"glitch\" problem if it is changed during playing?\nAnd how to change nodes for next play, but not the current, add change nodes only after it is played over?\n. If instance ended, calling play on that instance will lead to problems?\n. By glitch I mean very quick change in sound, like if someone removes echo, it will immediately be perceivable.\n. Shall it be a shader chunk too?\n. If model not defined, then those two variables will be allocated for no need. Moving then on first line of condition if (model) makes it better.\nSame for show method.\n. It is generally good practice to initialize variables only when you really need them. Regardless of hoisting.\nMakes reading of code more easy as well.\n. Can we do this warning only on debug version of engine?\n. setFunc.call(this, value, oldValue) - will make sure context is passed. So no \"self\" argument required in actual function later.\n. It would be good to do simple check for equality, and if equal return.\n. Do for(var loop instead of forEach for performance reasons.\n. Those vectors are not cloned inside of a constructor, so by \"cloning\" you will have same vectors used by different bounding boxes, which will of course lead to wrong behaviour when changing one of clones or original properties.\n. We had discussion about it, and did agreed that it shall be runtime option.. But that means it is not tested well. Changing it earlier might highlight some problems.. yes.. There is a file backwards-compatibility.js that is used for such cases.\nWe want to keep clean actual code, and anything for BC shall go in there.. You could make a for loop to go through 3 indexes.. : no need for a space before :, please check other places that have same.. There is a cost associated with defining an extra variable. In this case this would improve readability, but reduce the performance. I would prioritise performance in this case.. In many places dot is not needed. In docs it looks good without a dot. And being inconsistent across the docs, means we can preserve what it is already, without a need to change or look at it.. Is this called once, or on every render? If on every render, this might lead to big GC problems due to constant allocation of an object.. If it is internal engine code, then we can speed up few things by accessing private methods directly, such as entity._children.. Sorry to be picky, but from coding standards throughout the engine, we don't do extra spaces between () :). This allocates a Vec4, if this method called once, or multiple times? If multiple times, then consider pre-allocating Vec4 in advance and reuse it, to avoid GC stalls due to unnecessary allocations.. Same as on Vec4 above.. Same as on Vec4 above.. Same as on Vec4 above regarding allocations, and for the rest of this method, new pc.Mat4 and clone - are allocations. Pre-allocate vecs in scope of this file, and reuse them to avoid GC stalls.. Allocations through out the method, please pre-allocate them and reuse to avoid GC stalls.\nConsider pre-allocations in namespace of file, if can be shared between instances. If can't be shared between instances, then pre-allocations once in constructor, or once when not available before needed, and store as property against instance.. When dealing with objects such as color or vecs, etc, we need to be careful by actually replacing objects, as it might lead to problems where initially put object will be modified later on from somewhere, or previous reference wont be updated.\nBest here would be to do copy of values, for example: this._debugColor.copy(value);. In advance checking if color actually has changed. Double meaning for this property: color and state might be harder to understand as well, so would be good to move state as separate flag.\nCalling multiple times this property will lead to bug: multiple subscribes to update event on component system.. Same as for debugColor regarding objects or copying its values.\nAdditionally it is cheaper to do checks if value to be set is actually different from existing value, so in this case getWorldTransform won't need to be called in that case.\nThere are more same cases in other property methods below in this file.. Check if drawOrder is actually going to change. So to prevent event when it is not changed (set to same value).. Check if value is actually different from existing one.. Check if value is actually different from existing one.. Double meaning for properties, is something we really try to avoid in different places. If unavoidable and makes life much easier, then no problem :). Same as this._border.copy(value); ?. Check if value is actually different.. It is pretty generic name for this manager, but this relates only to elements, and does conflict with existing Pointer Events API. Would be better to reconsider the naming for it, so to make it easier to search/google, and not confuse with other things.. screenToWorld has last argument for a point, if it is not provided, it will allocate Vec3 which is source for GC stalls. To avoid this issue, simply pass last argument to this method and it will save results to it.. Being picky again, but we don't do spaces between [] and (), and funky space up there for var element :D\nI'm very picky :DD. Allocation, is no good, consider another approach.\nIn sense of providing object as argument in event, it can be clearly stated that this object should only be used by developer within sync life of a function.\nAdditionally, what about mouse button that is used during mouse event, like right mouse, or mouse wheel clicked, etc? :) Providing second argument - original event, would be not bad too.\nThere is Vec2 for doing 2D vectors. And in this case, using X, Y simply numbers would not be bad either.\nTo challenge this even further, why not to stick to similar API as current mouse event handling does? Where it provides mouse event object.. Same method been just defined above.. What about multi-touch? And it could have been not the first finger that clicked on button.. I've worked with quiet few mouse/touch interactions, and did came up with thing I've called taps, where developer works with abstraction where he does not know if it is mouse or touch, and there is only this list of events:\ndown\nclick\ndragstart\ndragmove\ndragend\nWhere if mouse/touch where not moved too far from initial down location and did get released within something like 300ms, then it will be click event. But if mouse/touch stayed at same location 300ms or moved few pixels, then it will be dragstart, for every next move dragmove and on release dragend. This provides unified touch/mouse UX and allows developer to do pretty much any interaction required. For mouse there were additional things provided on event, such as button.. Do challenge this a lot, if we actually do want to provide API to deal with input, or API to deal with \"picking\" on elements. As input sounds to me as very specific to application, but \"picking\" on elements, can be used in many cases, not only mouse/touch inputs, but VR as well, and many others where not actual input is used.\nPlus making touch/mouse API this way, is it preserving all the flexibility, or is somewhat restrictive to some use cases. Then I would really consider going \"picking\" approach instead of implementing whole mouse/touch handling.. We do use two line condition annotation sometimes, where it really shortens number of lines, like in this method:\njavascript\nif (this._align == pc.TEXT_ALIGN_CENTER)\n    wd *= 0.5;\n. Allocation as mentioned before, is no good.. Allocation of arrays, is no good as well, consider somehow pre-allocating this.. Check if property is not same value already.. Check if property is not same value already.. Allocations is no good as mentioned before throughout whole function.. Debugging code, is something that should not end up in Production code. There is #define we use to specify if it should be used with debug compiled engine. Consider adding this flag, so this debugging method does not end up being in release engine.. Allocations is no good as mentioned before.. Check if value actually changed.. Is masking changed once in a lifetime of an application for only one element? If it is called few times, and for each element individually, then this should be pre-allocated, as it will produce GC stalls.. In such case, it would be better to put this under #define DEBUG, so it does not gets into production engine code, and debugging to be non-public method. Devs tend to use everything out there, and if it is \"official\" API, they will expect it to perform, as their use cases might surprise on daily basis, which easily leads to big performance issues :). Removing, probably is the way :). We have had internal conversations about similar cases, where there are events and Vec is returned, what to do here. And we came up to conclusion that as GC is very major issue in pretty much any project we've worked on, it drives some design decisions, and one of them - to make either Vec living for only duration of that callback sync scope, or to provide arguments with X and Y numbers instead of object.\nPlus, there is already mouseEvent, why wont we just pass it through?. Some text change every frame :). What if developer need to figure out coordinate of event within space of panel on which button was clicked?\nI think there is a bit more fundamental functionality is required here, so it allows developers to easier code their stuff, like getting bottom-left corner of element relative to bottom-left of screen (0, 0) - is kind of fundamental block that is useful and universally simple to be used in very different cases.\nDoing specific implementation of something, might cover only some % of use cases, and if it is something like half of people, but other half left without a solution and this wont solve their problems, then we need to challenge the way we implement it in first place, and even if we do at all.. Intersection is not necessary when sphere is inside of an AABB, it might be just touching each other, which is still \"intersecting\".\nSo perhaps reference should be slightly rephrased.\nIt would be good to have separate method to check if AABB contains a sphere.. Why not to reuse one of tmpVec's here?. Intersect !== inside.\nConsider rephrasing this to make it clear what intersect is.. Please, ensure your IDE adds empty line at the end of the file as stated in our contribution document: https://github.com/playcanvas/engine/blob/master/CONTRIB.md#remove-all-trailing-spaces-and-ending-line. Perhaps another method would be useful to find out if a sphere is actually contains another sphere (contains, means fully inside and not colliding with the edges.. Please consider using short tmpRay, tmpVec etc. naming convention here. As this might not get simplified when engine is minified, leading to unnecessary extra download size.. Is it possible to avoid two matrices per OB?. name is optional, so should be [name].. name is optional, so should be [name].. To keep it backwards compatible, name argument is optional. So we can keep it that way, so this comment is unnecessary.. For simplicity of examples, as name is optional it is better to keep it away as it is not relevant to an example of code.. functionA - this was not a suggestion, we never did named functions like so. As functions always have specific purpose.\nIn case with vectors - their purpose to \"use and throw\", so they have no meaning outside of context, that is why called \"tmp\".\nWe've used \"tmp\" approach all around in many many projects, and this been good so far. Lets think of future problems when they arrive in this case, as practice shows - this wont be a problem.. This leads to unecessary clone if Mat4 been created.. Or simply: \njavascript\nthis._modelTransform = (worldTransform && worldTransform.clone() || new pc.Mat4()).invert();. Built output should not be included into repository. When installing using npm it probably should build it as part of installation.. version number is already mentioned below, this leads to duplicate key in JSON.. Please use 4 spaces intention as by our coding standards.. Please move keys for better readability to such order:\nname, version, author, homepage, description, license, main, bugs, repository, dependencies, devDependencies, directories, engines, scripts. There is also -p for profiler define option available.. We use 4 space indention.. The reason why package.json was generated as part of build process, is that it updated the version based on content of VERSION file, and it is still part of our deployment script, which ensures we keep version number in track all around.. Our engine actually depends on modified ammo.js version which is here: https://github.com/playcanvas/ammo.js. Please expose it as some option that is possible to pass to Device and Application.. Could be a single condition line.. Could be a single condition line. This is called by engine it self, and not intended for a user, so consider adding @private after @name so to avoid it getting into documentation.. Just to simplify this method for reading and avoiding extra indention, consider such style:\n```javascript\nsetTransformFeedbackBuffer: function (tf) {\n    if (this.transformFeedbackBuffer === tf)\n        return;\nthis.transformFeedbackBuffer = tf;\n\nif (this.webgl2) {\n    var gl = this.gl;\n    if (tf) {\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.feedback);\n    } else {\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    }\n}\n\n},\n. Same as about setTransformFeedbackBuffer. Consider not overloading this method, and add new one:javascript\npc.TransformFeedback.createShader(device, shaderCode, name);\n. Condition can be combined. Consider adding `@example` code with some comments skipping irrelevant code. Add list of options with description in similar format: https://github.com/playcanvas/engine/blob/9b42982e3c73c0b2e880214b8747273f59a9b338/src/framework/application.js#L893. If description is not required, then no need to add this line.. Add arguments and description with example on this method.. Add relevant documentation to this method.. Does that means that previous render target will be lost?\nAnd as it is internal code, you could use `device.renderTarget` property directly to reduce function call. Applies to rest of the code.. Not sure this API suggests multiple buffers, this is static method on TransformFeedback, no more.javascript\nvar tf = new pc.TransformFeedback(buffer);\nvar shaderA = pc.TransformFeedback.createShader(device, codeA, 'tfShaderA');\nvar shaderB = pc.TransformFeedback.createShader(device, codeB, 'tfShaderB');\n// in somewhere else\ntf.process(shaderA);\ntf.process(shaderB);\n. Doesn't justifies the way device methods are exposed for not reason, polluting API Reference with dozen of methods :). It's a new code, good opportunity to write better code for it.. Would be good.. Please add documentation to this method.. Please add documentation on what it returns (type of returned object at least). After some looking, this method is actually not required, consider removing it.. Missing `shader` param documentation.. This is way out of our style guidlines and never been seen in engine code before. Please make those single-lines, they are not that long.. Indention is 8 spaces here instead of 4. And missing spaces between [ ] and /. Please write example with provided second argument as more recommended one to avoid allocations.. Can be a single line conditions, no need for two.. Some old code never been compliant with our coding standards, and if you have chance to edit it too, would be great.. After some testing, this actually is wrong. Render target data is still upside down, so you need to flip coordinates. Fix is simple, change this line to:javascript\ndevice.readPixels(x, y, width, height, pixels);\n```\nAnd line 67:\njavascript\n} else {\n    y = this._pickBufferTarget.height - (y + (height || 1));\n}. We've spoke to remove pc.GAMMA_SRGBFAST as it is very tiny benefit for only old hardware.\nDoes it worth adding pc.GAMMA_SRGBFASTHDR as well?. Are we talking big difference here? This seems like very-very-very tiny difference would make for very-very narrow use case, but creates some branching and confusing options for developers.. Can you provide some tests to prove performance difference?. If there is method on RenderTarget instance it self, what is the point of this method?\nCreating same method in 3 different places, does not make API usage better, and makes learning worse by overloading with information. Especially taking in account that arguments do differ between static and instance methods.. If source is backBuffer, this will throw exception.. But there is same method on device copyRenderTarget, either of them is redundant as public API.. Debug console will output error in DEBUG mode, but still will execute this line which will lead to exception, instead of returning from function before that happens.\nConsider adding return value, true/false as status for executing this method.. It will lead to exception, which will originate from engine thus will look like engine bug.. Do not throw exceptions from engine, unless in DEBUG mode.. Why not:\nif (morph && morph._dirty) {\n?. If not vectors are provided it will allocate in constructor.. Reading bellow on other properties, this will throw exception, as opts is optional. Check how height is defined. So you would need to take in account that scenario.. We use 4 spaces indentation, not 2 spaces. :). This would be clearer, indeed:\nvar radius = opts && (opts.radius || opts.baseRadius);\nradius = radius !== undefined ? radius : 0.5;. If touch event is handled or preventsDefault is called, then I believe click event might not fire.\nThere is another situation where window will not get events, if developer of the app have handled touchend or mousedown events and called stopPropagation on them. Which will lead to window never getting bubbled event.. Not sure there is a way to list all current events and temporary cancel them before first event intercepted. But that is magical and intrusive as well.\nLooks like best practice would be to offer an exposed method for a developer to call himself as well. And document browsers behaviour and how to enable sound, so developer will have to adopt those practices them self as well.\nAnd does the keyboard interaction possible to start sound?\nOne of easiest way to implement by developer would be \"press start\" - title screen, that is common practice since old school 8-bit games :). ",
    "b1naryth1ef": "As a quick addendum to the pull-request, it might be a good idea to switch from getopt too something like argparse, which is more of the standard. I didn't make these changes within this PR, both because I was unsure if the build script was temporary, and these are larger structural changes.\n. Cleaned up those messages to appear as warnings and added a message when the build completes. Hopefully that works.\n. Submitted.\n. ",
    "samgreen": "Oh yeah here's what I added:\n- addScalar(number) - Add a number to each component of a Vec3.\n- add2Scalar(lhs, number) - Add a number to each component of a Vec3.\n- subScalar(number) - Subtract a number from each component of a Vec3.\n- sub2Scalar(lhs, number) - Subtract a number from each component of a Vec3.\n- mulScalar(number) - Multiply each component of a Vec3 by a number.\n- mul2Scalar(lhs, number) - Multiply each component of a Vec3 by a number;\n- distanceTo(rhs) - Calculate the distance between two Vec3 objects.\n- distanceTo2(lhs, rhs) - Calculate the distance between two Vec3 objects.\n- perpendicular(rhs) - Create a new Vec3 object that is perpendicular to the caller.\n- perpendicularTo(rhs) - Determine whether two Vec3 objects are perpendicular by checking their dot product against zero.\n. I've removed perpendicular vector generation, seems much more useful for Vec2 anyway.\n. All tests are passing :shipit: \n. ",
    "amerkoleci": "Sorry it was my issue, i've made some changes to code that make it break down.\n. Seams that yours are following unity3d ways, ogre3d calls getPosition for local space and getDerivedPosition for world space transformed to its parent.\n. I agree, probably would be better to leave as it is, just curiosity, in editor your using world space for translate, rotate and scale with gizmo?\n. Ok sorry then, closing now, thank you\n. ",
    "kripken": "Yeah, it is riskier in terms of debugging. At least at first ;) Thanks for the suggestion, I'll try the no-framework example.\n. Ok, that was much much easier to debug - was just an uninitialized canvas size. On the master branch in that repo, I basically have the no_framework demo working in a worker. It shows the model and it rotates, but the entire thing is small - it's rendering to a small area and not the whole screen. Aside from a scaling factor though, it looks correct to me.\n. If you want to check it out, it's simple-normal.html and simple-worker.html\n. The last issue on that example is now fixed, the worker version looks identical to the normal one. Was my fault - I forgot to copy the canvas size from the normal html to the worker html...\n. Note that the demo has 0 changes for this proxying, it's exactly the same code in both normal and worker.\n. Online demos: \n- normal: http://kripken.github.io/webgl-worker/playcanvas/simple-normal.html\n- worker: http://kripken.github.io/webgl-worker/playcanvas/simple-worker.html\nI guess this issue can be closed. I'll probably blog about this approach, mentioning the PlayCanvas demo, later this week. Let me know if you have any thoughts on the topic.\n. Thanks! I tested the other demo on chrome but not the playcanvas one. I wonder why chrome checks that parameter but not firefox? Anyhow, pushed a fix, that link should work now.\n. I blogged about this project, including the PlayCanvas demo, https://blog.mozilla.org/research/2014/07/22/webgl-in-web-workers-today-and-faster-than-expected/\n. ",
    "jaimeMF": "Done.\nBy the way: thanks for publishing the engine's code.\n. ",
    "frankxw": "I did some more digging and it looks like the plane with the cloud textures is now being drawn before the landscape below it (it blends correctly but with the clear color instead of objects behind it).  I don't think I saw any code change that would affect render order, so I'm not sure if this is a recently exposed bug.\n. Dave, you're right.  For some reason I had thought the attributes also specified which script they were for.  Ultimately, if this kind of feature were to be implemented I think they would have to specify the script...but I'll have to give it some thought to see if there's a clean way to implement that in a backward-compatible way.\n. One idea is to maybe have a new function that can add a \"named attribute\".  That way pc.script.attribute can continue to work and the new one will only add it to a specific script.\n. I just ran into this recently on an iPad 2 (pretty old at this point).  Shader results in too many varyings. If you look at base.frag, you guys recently commented out vVertexColor.  Could you also comment out the other varyings not being used?  Specifically vUv1 and vNormalV.  There's a comment at the top about the compiler removing unneeded stuff, but I don't think this always applies to varyings.\n. I think that since there's already a structure to the export (files/assets/id), that it makes sense there would only be one location for all the assets.  Splitting up the files directory, in my opinion, is not a likely case because it would bring a whole host of other problems - at that point you'd be better off using the engine directly instead of using an export from PlayCanvas.com\n. ",
    "gotwig": "I am going to look into the issue next week. I will try to make it work like this http://luser.github.io/gamepadtest/ , which works perfectly with my gamepad.\n. Sry, I am ill, I cant do it\n. @willeastcott \nThe demo you provided sadly doesnt work with my gamepad. it works fine, until I trigger any gamepad button. \nMozilla terminal shows the folowing:\n\"WARNING: Invalid filter mode set on non power of two texture. Forcing linear addressing.\" playcanvas-0.158.7.min.js:18\n\"WARNING: getAssetByResourceId: Function is deprecated. Use getAssetById() instead.\" playcanvas-0.158.7.min.js:794\n\"WARNING: Invalid filter mode set on non power of two texture. Forcing linear addressing.\" playcanvas-0.158.7.min.js:18\n\"WARNING: getAssetByResourceId: Function is deprecated. Use getAssetById() instead.\" playcanvas-0.158.7.min.js:794\nTypeError: this.current[a].pad.buttons[pc.input[this.current[a].map.buttons[b]]] is undefined\nGoogle Chrome:\nWARNING: getAssetByResourceId: Function is deprecated. Use getAssetById() instead. playcanvas-0.158.7.min.js:794\n311 times: Uncaught TypeError: Cannot read property 'pressed' of undefined playcanvas-0.158.7.min.js:489\n925 times: Uncaught TypeError: Cannot read property 'pressed' of undefined \nIm running Arch Linux, tried in both Firefox and Chrome, latest versions.\nMy gamepad is a ps3 controller, but it is shown as a xbox360 controller to the system (i use a software called xboxdrv, it worked fine so far with all my games on steam). I checked my /dev/js files, theres only one gamepad, and its \"Xbox Gamepad (userspace driver)\".\nPlease tell me, if I can help fix this. Would be good to have your zombie pacman game on github for example, so there is some sort of bug management.\nEDIT: In windows 8 it works flawlessly.\nEDIT2: On a sidenote, http://luser.github.io/gamepadtest/ still works perfectly with my gamepad under linux: it tells me the following: gamepad: Xbox Gamepad (userspace driver) (Vendor: 0000 Product: 0000) \n012345678910\n. it would be sweet to have a settings menu to assign buttons manually. I think than it would work, I think  the reason this all doesnt work is just because the names or something like this is different. Such a menu should be application wide, imho, but playcanvas has nothing like this afaik and I think this approach is not much liked.\n. ",
    "detzt": "Ok I have just found context.root.findByName(), so this works fine.\n. That would make helping a little easier\n. That would be great!\nIs the gamepad support already fixed?\n. Outrageous!\nBut thanks anyway :)\n. I dont know if this feature is really missing, see my post here:\nhttp://answers.playcanvas.com/questions/1403/flat-shading\nI would close this if I could\n. That would be a great feature!\n. I just wanted to ask if theres anything new to this?\nIt would be pretty useful.\n. ",
    "emddudley": "Just now I see that you have a Contributing section in the README, but I missed it. Also it doesn't cover contributing patches.\n. ",
    "guycalledfrank": "It's easy to add. Actually I already created shader chunks for it, while overhauling the shader system. They're just currently unused.\nFor diffuse map, for example:\nWhat we currently use:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/albedoTex.ps\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/albedoColor.ps\nWhat we may use:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/albedoTexColor.ps\nI have such chunks for some other maps too:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/emissionTexColor.ps\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/specularityTexColor.ps\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/programlib/chunks/opacityTexFloat.ps\nI don't like the idea of diffuseMixAmount. Despite being default 3dsmax mixing behaviour, it's totally useless in my opinion. Multiplying texture by color makes more sense.\n. Ideally, I'd mark material version and use old behaviour for old materials and new one for freshly created. I'm not sure if we have any version value saved per-material though.\n. found some bugs there... so don't merge\nbut you have to move code += \" addAmbientConstant(data);\\n\"; out of if (lighting)\nto fix that ambient bug\n. We do. sRGB conversion only used in gamma 2.2 mode.\nAlso, check out a bit changed Lambo demo with this update: http://geom.io/lambo/Lambo/index.html\nI thought I'd talk about this PR in HipChat, but it's still empty =)\n. I tweaked reflections/lighting. There was a problem: Will tried to enable gamma correction in Lambo demo, but cubemap became overbright and desaturated, because it was treated like linear texture, while it was gamma texture (just a bunch of jpegs from internet). So Will asked me if I can tweak it right, and I realized that we should treat user reflection maps as sRGB and... I made this PR (and Schlick's fresnel is also must have, everybody uses it. Why didn't I include it before in the original shader system PR? I'm not sure).\n. tweaked lambo a little bit more. Chrome has problems with refreshing for some reason - had to do \"clear browsing data\" to reload properly o_0\n. I see. Is there any elegant solution to this? When developing new shaders I used an unfinished \"layer\" system for a moment, where each layer could have only 1 UV set, and we could have all kinds of maps assigned to one layer. I also wanted to make an ability to add multiple layers with different blends over each other. But it would break old mapTransforms in old projects.\nAs a workaround, I decided to convert mapTransforms to layers by analyzing if there are equal transforms at the moment of shader creation and grouping them into 1 layer (and 1 varying).\nBut the downside of such idea was that once the shader is compiled, you can't dynamically change mapTransform of one texture without affecting all other textures that shared the original transform at generation time. Or you should recompile the shader when changing mapTransform a few times at runtime. In the end I just dropped the idea and returned all map transforms back.\nThat's it...\n- can we drop mapTransforms and replace it with something better performance-wise? (I guess no, projects will break)\n- should we allow users to create UV transforms in UI and assign them to maps? We may also allow users to use position as UV and other funky stuff. But maybe it would be too complex and unusual for users?\n- if we're just leaving mapTransforms as they are now, we then have to silently couple multiple equal transforms in one, as I tried. Should we compile multiple shaders instead of just one in case if user decides to dynamically change transforms after original shader generation? Should we recompile the shader each time any transform changed (not great)? Should we transforms maps in PS by uniform when no varyings available? This will make it a dependent read though...\n. Actually, since we recompile & cache on any serious material change, the best option for now would be to check transform equality of different maps, and recompile if it's changed.\n. OK, I'll fix it. So the total list of stuff to add is:\n- use 1 varying where transforms have equal value;\n- remove vUv0/1 when these aren't used;\n- disable normal/parallax mapping when we exceed varyings and print a warning.\n. Can we have custom groups as well? E.g. if I want to make a trigger which will only collide with the player and not other bodies?\n. yeah, I'll fix that\n. Please make a scene to show it. AO map works in Spheres scene, I used it on a teapot.\n. The problem was that AO map used secondary UV channel as default, and most objects, which didn't have it, were broken. Now AO map default UV channel is first, so it's not broken in this case. However, Max recently found out that we may import meshes that don't have ANY UV mapping at all, and they refuse to work with any textured materials correspondingly. This means, I need to remove any texturing from shader based on supported UV maps.\n. Good idea, but latest FF still doesn't support it though, so multiple cubemaps path is required =/\n. Implemented it, but didn't found significant performance difference. Same on PC, very slightly faster on a Mali GPU tablet, slightly slower (why?) on iPhone 5s.\nNot convinced we really need it now.\n. It shouldn't change the look. Let's check it on dev.\nAdded some docs.\nAlso, actually it wasn't a problem to add specularAA to old Phong. So you shouldn't then check for specularModel when deciding that checkbox visibility.\n. Yes.\n. I'm not sure we need to change the blend for user. If I remember correctly, at the times of this issue, we were automatically changing the blend mode if opacity map is used. Currently you need to manually switch the blend from None to whatever, because you can use the map for alpha test. So if you then decide to remove map or change the slider, why should the blend change? It's an option you manually enabled, so you disable it back if needed.\n. yeah, I already made a fork of it. I'll do it once more just in case.\n. PVRTC is not yet supported. Also, we need server generation (user format -> platform specific formats -> select which to load based on platform).\n. All formats are supported now, only server generation is required.\n. Hmm I actually like app.createEntity() more...\n. Maksims, that would be much better :)\n. I'm unsuccessfully trying to get rid of this. The \"regular grid\" look is more like a precision limitation and can be fixed, but the \"box shape\" is not that easy to get rid of. The reason of this is that we select random velocity separately for X, Y, Z axis. So for each axis we have equal probability of all values between 2 curves. Shortly speaking, sphere shape requires normalized direction, while our XYZ have independent non-normalized motion. But simply normalizing the velocity kills it's length... I'm not sure what to do here.\nI can add sphere spawn shape and add a checkbox that will assign starting velocity to particles based on shape. So particles will start moving spherically, but again, you won't be able to emulate the same kind of motion through just velocity graphs.\nThinking of something more flexible...\n. I see what's the problem, I'll fix it.\n. BTW, you can't make fish-eye projection with just matrices, because it's not linear, it's usually simulated with pixel shader, or tessellated geometry and similar vertex shader.\n. I'm not sure we need such low-level features to be user-driven. Besides it would complicate every single mesh processing algorithm in the engine. Plus, the number of attached buffers is limited and depends on hardware. Plus it's slower than an interleaved buffer. Plus we need at least one free buffer slot for the cases when we use instancing.. You can give user names to bits in UI and it'll be user-friendly.\n. We already strayed away from WebGL terminology. Original Playcanvas uses a lot of DX terminology like device, vertex format handling, semantic names etc. Pixel shader sounds more intuitive.\n. Not sure. Cube map is better than a sphere map. Metalness map is no better, but different from a specular map.\n. I thought about checkbox (metalness workflow) that would hide specular map/tint/color controls and show metalness map/slider instead.\n. Metalness can be set without any map with just a single float. So you have to have a switch anyway.\n. Not sure if this should be in component, because:\n- it doesn't have to be serialized\n- it doesn't have to be in UI\n- I'm tired of copy-pasting :) Let there be only one file containing light properties already.\n. Hi! Morph targets are supported now. They're imported from FBX and can be used, but the API is a bit low-level, so we didn't document it properly, hoping to add a better public API later. However, you can use these methods: https://github.com/playcanvas/engine/commit/3b42ad2b470d5d7b096af52c30485174e0cd37ce. In fact you only need to use meshInstance.morphInstance.setWeight. It doesn't support loading animated weights... in fact I didn't realize there was such a thing. If they are really in the FBX, that can be implemented. For now it can be done via scripting.. How would you define multiple animated tracks from a single FBX though?. Fixed\n. Now works for non-indexed objects too\n. The problem here is that gamma code is selected in scene and used to patch many different shaders (e.g. particles), not only PhongMaterial.\n. I see the point, not sure yet exactly how we should change it though.\n. Changed the API\n. Should be fixed now\n. As we spoke before, shaders will be renamed after all these PRs are merged. It doesn't make sense to rename it just here, as it will be incompatible with other PRs, current state of the engine etc...\n. unexposed the property\n. Partially.\nControl culling per camera: yes (camera.frustumCulling);\nDetect if entity is culled: no such mechanism yet;\nEnable/disable culling for entity: yes (meshInstance.cull);\nHierarchical culling: not yet.\n. I added intensity as a workaround to inability to set HDR color in color picker, it's basically used as color multiplier. It's not really a bug... I just wouldn't show the intensity slider, unless Tint is enabled. I can, however, make intensity work as separate color-independent intensity, but it would likely make code more complicated, and I'm not sure it's worth it.\n. Alright, alright\nFixed in https://github.com/playcanvas/engine/pull/655\n. I remember this problem before, but I actually can't reproduce it right now. Do you have an example?\n. Seems to work on IE11 apart from ANGLE browsers. Mac/Linux-only problem?\n. Still can't reproduce, even with GL Chrome.\n. It should.\n. Added in https://github.com/playcanvas/engine/pull/248\n. Should be fixed.\n. Should be fixed, check it\n. Should be fixed, check it\n. This one should be fixed now too\n. I was going to do that, but realized that as we have separate sphereMap and cubeMap properties (with cubemap having higher priority), maybe prefiltered cubemap should also be separate (different codepath and features).\n. OK, you now should be able to set prefiltered cubemaps into cubeMap\n. Fixed cache issue, fixed syncing between cubeMap/prefilteredCubeMap, also fixed some minor stuff.\n. I think we should ignore it, because it doesn't work as expected anyway. \n. Yeah almost done\n. It should be fixed\n. Looks fine to me. Why the shader was nulled in the old version anyway?\n. Seems too complicated. And how are you going to blend them? It shouldn't be just multiplier. If you want to combine AO, you would usually do it with min(ao1, ao2), not multiply (overdarkening). Blending of all these things is too specialized and not straightforward, I'd leave it for custom chunks for now.\nI think using vertex color the same way you use a texture is much more clear.\n. Believe me, multiplication is a shit idea.\n. I think it's very useful. Currently using scene.activeCamera for that all the time, but we should have a reliable public method.. _activeCamera is currently the last rendered camera actually (if you're checking it in update()). However, if you have a pc.Command() that is executed inside the rendering loop, the _activeCamera will what it is.\nUnity has a similar problem/solution. Basically they have an overridable callback when any camera starts rendering.. Probably just make scripts subscribe to camera rendering start? Events per culled mesh instance is overkill.. Fixed in http://github.com/playcanvas/engine/pull/262\n. Added in https://github.com/playcanvas/engine/pull/265\n. Fixed in https://github.com/playcanvas/engine/pull/274\n. Added in https://github.com/playcanvas/engine/pull/278\n. layer is pc.LAYER* enum defined in scene_scene.js\n. For lines, onTop doesn't only mean layer, but also disabling ztest\n. Drawing overlapping lines, while not intersecting with zbuffer? This would require clearing zbuffer before drawing, which is not the cheapest thing to do. I'm not convinced we should do it. Clear is issued in editor anyway, so adding another one will clear it twice. And it's not issued in game, so we can't rely on editor's clear. We can branch (if editor, else game), but what if user adds his own clear by code, and then he doesn't need 2 clears again, when lines are drawn... complicated.\n. I'm not sure it's obvious that min/max should compare by length. More often vec3 min/max implementations are meant for per-component comparison.\nAlso, reflect should have version without allocations (clone = memory allocation), that would use supplied vec3 object as output.\n. Fixed in https://github.com/playcanvas/engine/pull/309\n. Skybox uses tex.fixCubemapSeams flag as materials do. You probably set it to true when it's not supposed to be true.\n. Also, skyboxMip is not supposed to work without prefiltering, as auto-generated mips look terrible anyway.\n. Fixed in https://github.com/playcanvas/engine/pull/307\n. Does it help? https://github.com/playcanvas/engine/pull/305 (can't reproduce on Win)\n. Alpha test cutoff threshold is already respected in shadow mapping. Not in picker though.\n. The problem with the picker is when you drag-n-drop an alpha-tested material onto object. If your mouse happens to be on a transparent pixel, then the next frame picker will select a different object behind the first. Then, again, first object becomes opaque, and picker will select it, and so it flickers back and forth...\n. Added picker alpha-test support in https://github.com/playcanvas/engine/pull/654\nIn Editor, if you drag a material, you must set\npicker._ignoreOpacityFor = last picked meshInstance\nto prevent flickering.\n. Not able to reproduce - perhaps was fixed in some commit.\n. Would be great to see some examples using these features.\n. Works on Samsung Galaxy Tab S.\n. * @param {Number} cw The width of PlayCanvas' canvas element.\n     * @param {Number} ch The height of PlayCanvas' canvas element.\nUse graphicsDevice.width/height there (and corresponding x/y)\n. Right, but we don't use it when creating shadow maps. So mostly it's about shadow maps.\n. Fixed in https://github.com/playcanvas/engine/pull/336\n. getUniform is the way to set uniform overrides on meshInstances.\nTo change per-material parameters, you do it as usual.\n. No. Because it gets uniform. It doesn't change anything. It returns you a structure with uniform name + value (possibly processed, like shininess rescale from 0-100 to 0-1 etc).\n. Dynamic CPU mesh combining can be okay-ish for very simple lowpoly geometry. For heavy geometry it would introduce serious performance drops. For static geometry it's great.\nFor dynamic stuff a good solution (suggested in the first comment) is to combine once and bake mesh ID per-vertex, then we can just update a uniform buffer/vertex texture with transforms.\nAnother solution is instancing, but it only helps identical meshes. We have some instancing code in the engine, but it often doesn't work as fast as desired in dynamic scenarios...\nMaterials: I'd simply batch per-material (not combining multiple materials in a single batch), would be good enough already. In WebGL2 it can be possible to combine multiple similar materials in one batch by using texture arrays.\nAnother non-trivial thing is batching vs culling: on one hand it's good to combine as much as possible, on the other hand, if you have a huge mesh, containing polys from different parts of the world, it will be never culled, because the bounding box is huge. Not sure if Unity does anything about it - their static batching produced similar meshes to me. I think some poly locality should be taken into account.\nI'm not sure that transform feedback can help us here in any way.\n. I agree, I'll change it later. It was a quick workaround.\n. Fixed in https://github.com/playcanvas/engine/pull/368\n. First problem was fixed: https://github.com/playcanvas/engine/pull/391\nNot sure if 2nd is a bug though... maybe in some situation you want particles to persist on spawned positions, but only start simulating since some event? You can always control visibility separately.\n. Fixed in https://github.com/playcanvas/engine/pull/653\n. Fixed in https://github.com/playcanvas/engine/pull/415\n. Fixed in https://github.com/playcanvas/engine/pull/414\n. Critical part is fixed here: https://github.com/playcanvas/engine/pull/417\nNot sure about other parameters though.\nUsing Editor defaults might be not the best idea, because it uses 2 velocity graphs for randomness, and if you need to construct a new non-randomized particle system, you would have to set 2nd graph to null in constructor, instead of just not providing it.\n. Can't reproduce - existing code works if trying to force low maximum cubemap resolution, downscaling correctly.\n. Sounds like a driver bug to me. Not sure how to detect this behaviour quickly without actually creating a big texture (can cost some ms) and reading it back.\n. Mesh particles are currently very limited by design. They don't have UVs, normals and tangents.\nAlso, simply enabling normal map would be likely not enough, because then people will want to emit shiny things, so basically we need to connect particles and materials we use for normal objects.\nI created another issue for it: https://github.com/playcanvas/engine/issues/452\n. Fixed in https://github.com/playcanvas/engine/pull/461\n. Optimized in\nhttps://github.com/playcanvas/engine/pull/457\nhttps://github.com/playcanvas/engine/pull/458\nhttps://github.com/playcanvas/engine/pull/459\n. It now works but it's often slow :|\nTODO: optimize instancing usage.\n. Tiling is not broken. The problem with IE is that it pre-mutliplies colors by alpha, and then divides back, ignoring UNPACK_PREMULTIPLY_ALPHA_WEBGL being false. Closer your alpha to 0, more precision loss occurs on IE. Try separating color and alpha to different textures.\n. Removed in https://github.com/playcanvas/engine/pull/636\n. Really appreciate the effort. Old directional light needs some proper treatment :)\nHowever, there might be something wrong with the code. I fixed the _calculateSceneAabb function and tried to use it instead of the manual AABB. Here's the fixed version:\njavascript\n    function _calculateSceneAabb(scene) {\n        var i;\n        var drawCalls = scene.drawCalls;\n        var drawCall;\n        var meshInstances = [];\n        for(i=0; i<drawCalls.length; i++) {\n            drawCall = drawCalls[i];\n            if (!drawCall.command) {\n                meshInstances.push(drawCall);\n            }\n        }\n        if (!scene._sceneAabb) scene._sceneAabb = new pc.BoundingBox();\n        if (meshInstances.length > 0) {\n            scene._sceneAabb.copy(meshInstances[0].aabb);\n            for (var i = 1; i < meshInstances.length; i++) {\n                scene._sceneAabb.add(meshInstances[i].aabb);\n            }\n        }\n    }\nThe correct AABB for Sponza then has center = [-0.6051899790763855, 6.514899730682373, -0.3869050145149231] and halfExtents = [18.604299545288086, 7.779399394989014, 11.44119930267334]. You can check it by creating a box with position = center and scale = halfExtents * 2, it looks correct, tightly surrounding the scene. But if I then do\napp.scene.aabb = app.scene._sceneAabb\nshadows become bugged. With your suggested values they look nice and don't shimmer, but the AABB is too large comparing to the scene.\nI'll investigate the problem further, but perhaps you know the source of it.\n. Seems to work nicely now :)\nNot sure about using dynamic arrays every frame though... but seems to be not critical.\n. Actually it seems like there are still places where _getZFromAABB gives incorrect results, for example here: \n\nAs a workaround, I currently replaced it with a simpler implementation which doesn't perform actual intersections, but just uses transformed corners of scene AABB to find min/max. Looks fine, and even min/max values are pretty close, but perhaps not that extremely close, as would be possible with proper intersection. I wonder, do we really need such precision anyway, given our shadow maps are all 32-bit.\n. Happens if you change from portrait to landscape mode. Seems like a bug, yeah.\n. - Enable \"device pixel ratio\" in scene settings;\n- Run in portrait;\n- Rotate the phone to landscape.\nOR you can run in landscape (it's fine), rotate to portrait, then switch again to landscape - bugged\n. Can't reproduce; Running this line in console in the middle of execution is incorrect; Starting engine with supportsBoneTextures = false doesn't affect shadows.\nsupportsBoneTextures affects model loading, partitioning them, your line probably runs after asset loading.\n. Done in https://github.com/playcanvas/engine/pull/635\n. Thanks, Nakata!\n. Nice, but maybe it would be cleaner to call them just \"extensionPS\", \"extensionVS\"? \"glsl\" seems weird, because all shader chunks are GLSL anyway.\n. chunks.vs and chunks.fs seem OK to me\nDifferentiation gives some hints, e.g. we have normal.vert/normalSkinned.vert and normalMap.frag/normalVertex.frag, it would be very unclear what goes where without vs/fs.\n. Fixed in https://github.com/playcanvas/engine/pull/545\n. Fixed in https://github.com/playcanvas/engine/pull/553\n. Done in https://github.com/playcanvas/engine/pull/631\n. Seems expected? Wider your view angle -> larger the camera frustum -> larger the shadow frustum -> lower the resolution.\n. BIas fixed in https://github.com/playcanvas/engine/pull/657\nResolution change is expected.\n. Fixed in https://github.com/playcanvas/engine/pull/630\n. Is there an easier way to reproduce?\n. Should be fixed in https://github.com/playcanvas/engine/pull/582\n. Fixed in https://github.com/playcanvas/engine/pull/581\n. Fixed \nhttps://github.com/playcanvas/engine/pull/590\nhttps://github.com/playcanvas/engine/pull/591\n. Fixed in https://github.com/playcanvas/engine/pull/623\n. Was this way since forever. Also, nobody ever used this function, maybe just delete it?\n. https://github.com/playcanvas/engine/pull/622\nSort of fixed, but doesn't make much any difference. Dev tools lying?\n. What is model.resolution?\n. Added in https://github.com/playcanvas/engine/pull/615\n. Suggestion:\nuseLighting\nuseSkybox\nuseGammaTonemap\nnoFog -> useFog?\n. Added in https://github.com/playcanvas/engine/pull/621\n. Fixed in https://github.com/playcanvas/engine/pull/629\n. I think what I meant was to cull 6 point light frustums by the camera frustum to skip some faces completely.. Hi. VSM is not supported for point lights yet (but it's planned... stay tuned). The fact that you could enable it for point light is actually a bug, which is fixed https://github.com/playcanvas/engine/pull/660\n. Fixed in https://github.com/playcanvas/engine/pull/666\n. Fixed in https://github.com/playcanvas/engine/pull/667\n. Fixed in https://github.com/playcanvas/engine/pull/665\n. API thoughts:\nMarking as static manually might not give desired granularity, e.g. you can end up having objects from different parts of the world stitched together - the resulting mesh will be hard to cull.\nInstead what if you:\n- add desired objects as children to some other object;\n- add some \"Combine meshes\" component to the top object;\n- It works.\nTbh, this is exactly what I was doing in Unity because of the culling reasons.\nAdditionally such combining doesn't imply that the combined object is necessarily non-movable.\n. You can but it's your (user's) fault then.\nAdditional idea: use similar logic (parent component) to combine multiple identical objects with hardware instancing.\n. Problem: can't easily combine lightmapped models, because each has their own texture/UVs... can atlas multiple lightmaps into one, but not always possible (lightmaps can be too big already).\n. Let's say you add a component called \"Mesh Batch\". Options:\n- Combine unique meshes into one (checkbox, default=true). \"Unique\" means that there are no mesh instances with the same mesh. In the end scene.drawCalls will have one meshInstance instead of the original source meshInstances. Exception: if can't fit all instances into one new (16 bit) buffer, more than one mesh (and instance) will be generated.\n- Combine repeating meshes (those which share the same mesh). Options:\n  -- Don't combine;\n  -- Single mesh: same as with unique;\n  -- Static instancing: use hardware instancing, prepare instance buffer once, don't touch later. Falls back to Single mesh, if instancing is not supported; (default)\n  -- Dynamic instancing: use HW instancing, but allow moving objects inside the group. Falls back to no instancing.\n. Yes. Thanks! Seems to work.\n. Merge?\n. ACTUALLY, I think we need it per meshInstance, not material\n. Would be much better to assign objects to zone, and then they would pick the cubemap/ambient from it, etc\n. Fixed in https://github.com/playcanvas/engine/pull/697\n. > Should we rename isStatic to static? \nI wanted to, but then \"static\" is a reserved keyword in JS. Although It SHOULD work as a variable name, but... I just don't like the idea, I think some day it can break - maybe in browser, maybe in our build tool, maybe somewhere else. Also Sublime annoyingly highlights \"static\".\n. You can scroll textures without using the update function: https://playcanvas.com/editor/scene/372898\nBut seems like nobody uses it...\n. I should definitely refactor this mess\n. Does the problem persist if you disable gamma correction (set to 1) and tonemapping (set to linear) in the scene settings?\n. marionieto, how does this project look on your phones?\nhttps://playcanv.as/b/OzyzLJPu/\n. So it seems like these devices have some driver bug. @willeastcott just emailed some driver people about this problem. In case if fixing it would take too long for them, we can try to add a temporary workaround.\n. Can't find any depth-based posteffects on the Store.\nThings like DoF should work, because they work only with the screen depth. Problems can arise when you compare fragment depth with screen depth (as in soft particles), because then you need to provide your fragment depth in the same format.\n. Seems to only happen in \"Color + Dir\" mode.\n. Fixed in https://github.com/playcanvas/engine/pull/723\n. var p2 = this.entity.clone();\np2.destroy();\nI do this in an update loop of an entity with particle system attached. No errors. Maybe there are other conditions?\n. That should be resolved in https://github.com/playcanvas/engine/pull/718\n. Current quick implementation: https://github.com/playcanvas/engine/pull/717\nNote that it's possible to implement much more efficiently. We don't need to store intermediate particle state for local-space systems.\n@Maksims Moving train should be world-space, at least when I think of smoke...\n. Implemented. Not much. Pixel displacement will work, but it would still be lit based on vertex normals. We still allow it however.\n. Receiver Plane Depth Bias is removed on WebGL 2.0. Will try to fix 1.0 too soon.. Skybox is being rendered, but it has a black cubemap applied, with 4x4 faces...\n. This error can be related to the grid implementation (attempts to render something when divisions = 0?) given that it's not reproducible in Launch. Grid is not part of the engine, so I'm not quite sure how it's implemented.\n. Can't reproduce it on Samsung Tab S. Specific to some GPUs?\n\n. BTW, shadow casting and shadow receiving are different things for a particle system. Casting is easy if you ignore translucency (otherwise harder), receiving is troublesome due to overdraw, and needs serious optimizations to work well.\n. They don't have transparency though... (but I must say, this demo is soooo amazing o_o)\n. Should be gone at least when running WebGL 2.0 after this: https://github.com/playcanvas/engine/pull/892\n1.0 still has the artifacts, but can be fixed. Can you make a simple example without requiring to play the kitten game?\n. Seems to be fixed in https://github.com/playcanvas/engine/pull/762 (wait for it to deploy on prod)\n. Please, can you at least make the replay button work on PC?\n. PinkFloorMaterial had Alpha enabled. Disabling it fixes the problem for me.\n. If you set material.reflectivity to a value higher than 1, it will essentially work like the skybox exposure slider, brightening the cubemap\n. They both are linear multipliers\n. Seems like we can now set the reflection value up?\nThe only problem I realized is that we don't boost the diffuse ambient, if it comes from the prefiltered per-material cubemap.... Converting to 6 face assets in Editor would be the best, I guess.. This is quite possible to do, yes. We even have the visible shadow casters' AABB already: https://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L1645\nBut it's only used for tightening near/far planes. Shadow map bounds are currently bound to the camera. I'll take a look at focsuing them on the casters' AABB, as soon, as I finish current tasks.. It does already have a single-pixel padding for that reason: https://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L881\nCascades are good, but heavy for many non-desktop platforms. They're on the roadmap, however, I wanted to add per-object shadows first. Per-object can be relatively cheap, because you can draw only few needed objects in their own shadowmaps, skipping vast empty spaces (therefore utilizing texels way better), and you can also skip updating shadows for objects that don't move. Would per-object shadow help you? (note, that it doesn't mean strictly 1 shadowmap per 1 model, you could group stuff together).. Currently I have a prototype of per-object shadows, but they require screen depth to be available... (which would be a separate geometry pass). I thought about clustering objects as well. For static lights and static geometry (\"static\" checkbox in Editor) we do cut triangles from meshes where the intersections happen. For dynamic lights/shadows we need different clusterting at runtime though. For static geometry it would be valid to generate a BVH tree of triangles, for example... dynamic objects could have local movable trees. Starts to sound complicated, but should be doable.\nWith screen depth approach it's also possible to only draw shadow receiving geometry to depth, which is better than the whole scene. However it has some problems to solve with shadow occlusion and overdraw.. About the recomputeUVWithTextureBorders function: am I right that what you want to get is basically this?\n\nBut without additional vertices? Are you sure, you need a whole mat4 for it?. Hmm, I think 6 floats should be enough? Left width, right width, top height, bottom height, inner width, inner height?. Looks good :) I'll run a few compatibility tests and merge it, if everything's fine.. About chunks - they're often used conveniently in a way like\nmaterial.chunks.someChunk = someCode\nThis is the reason for the dirty flag on read. Because it's often expected that you set values straight, without assigning the chunks object.\nPerhaps it's the case where functions like setChunk, getChunks would make more sense, than a getter/setter with obscure logic?. Yeah, the reason is that we can't guarantee if you just read the chunk object when you get it, or you access it to change its properties. In 2nd case the dirty flag is needed.. I'd have it back, as right now it would break some projects, and the new way is not obvious. We need to come up with something better.. About texel-to-pixel ratio: this should be doable with dFdx/dFdy. Basically if you have pixel coordinates, these functions will give you the rate of change per screen pixel (how many texture pixels are there per screen pixel). It requires OES_standard_derivatives, but this one is almost universally supported.\nSafari and IE suck at PNGs and not planning to stop. Solution: use DDS (or any other non-web format that you can convert to a simple color array).\n. I added it to the upcoming PR, so should be merged soon: https://github.com/guycalledfrank/engine/commit/f08056da0d3eee68590b083384508305c787ce01. It's merged now: https://github.com/playcanvas/engine/pull/873. Ambient can be useful, the useLighting param only affects lights. We should add separate useAmbient maybe?. Actually gives too many compatibility problems for a tiny perf benefit - doesn't worth it.. I'd also add a circle.\n\n(not halfExtents please).\n\nThat would make it harder to switch between rect/existing aabb. I would keep the halfExtents approach (or change both).. That's weird, do you have a project link to debug?. Where do you get the DDS and how do you load it?. Ah, yes, DDS can be RGBA and BGRA, I think latter might be your case. Apparently engine tries to load it as RGBA, and you get it all blue. The engine only supports a small subset of DDS formats (RGBA8, DXT1, DXT5, RGBA32F), which are used internally and map directly to WebGL formats, and WebGL doesn't have the BGRA format. Are you sure there are no export format options in the spacescape?. @Maksims can answer that better than me, but I can suggest an easy fix. If you use the engine locally, you can go here https://github.com/playcanvas/engine/blob/master/src/graphics/program-lib/chunks/reflectionCube.frag#L6 and replace \".rgb\" with \".bgr\".\nIf you want to control it per-material, and not change everywhere, you can make a changed copy of this file. After you get the modified file's string, you can plug it into an individual material: material.chunks.reflectionCubePS = modifiedCode; material.update();. The sphere you're using can be patched the way I mentioned, but skybox, yes, needs separate patching, you can try adding https://github.com/playcanvas/engine/blob/master/src/graphics/program-lib/chunks/skybox.frag#L5 \".bgra;\" in the end. You can try simply pc.shaderChunks.skyboxPS = newCode;. Cubemaps are assigned automatically based on skybox, but only if they're prefiltered (that means they can support different levels of material glossiness).\nReflection probes are planned, and I'm sorry it's still not implemented, but we had too many important other features to work on... \nMirror reflection is better done without any cubemaps and probes, but with an additional render pass, using reflected camera matrix. \"After the Flood\" demo had planar mirrors and water that did exactly that, and we're going to open-source it soon. It relied on a few additional helpers in the engine code though.. It should be removed and we should re-think the API, the way it works right now is not useful enough.. I think existing instancing functionality should be deleted. It wasn't designed properly, and it's broken now... but it doesn't mean we should ignore integrating instancing.\nOne way I see is to make it a BatchGroup property (boolean), so it will be Static, Dynamic, Static+Instanced, Dynamic+Instanced... in this case, if hardware supports it, we will use instancing while assembling batch group meshes.. Hey, Steven, thanks for the fix! It works, but I tried to make a simpler version: https://github.com/playcanvas/engine/pull/911\nThe whole billboarding matrix calculation was overly complicated, so I unified it to work the same way with different projections + the code is cheaper on both paths now. . Addresses this: https://github.com/playcanvas/engine/issues/893. Alright, gamma2.2_fast is removed. Hi, I didn't get what you're trying to accomplish. Besides, FUNC_NOTEQUAL doesn't make any sense and will break shadows in any complex scenarios.. IMHO, compressed textures need to be flipped in advance. That's what our server pipeline does.. Flipping the texture in advance is the way to go.. Specular light is present, but there's no diffuse. Also happens on iphone. Investigating.. Can you give the link to your fork please?. Thanks. The problem seems to be in the PNG (the diffuse map).\nIE and iOS Safari particularly pre-multiply PNG color by its alpha, when reading.\nsquareTextured.png seems to be transparent, and that's a problem for these browsers.\nTry splitting color and opacity into separate textures.. Do you mean the readable depth buffer texture? Or a general zbuffer? How do you sample it exactly?. Ah yes, I see. So we simply omit any blended draw calls for this depth map right now: https://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L1904\nI wonder what the best solution API-wise would be.\n- Autoset drawToDepth when changing meshInstance material and allow further changes to it? Bad, because you can change the material itself, and meshInstance won't be notified.\n- Just draw everything only based on drawToDepth? Bad, because there will be huge opaque surfaces at wrong places.\n- add some kind of additional meshInstance flag, like forceDrawToDepth?\n- allow meshes that are only rendered to depth? Then you can have 2 models - one for depth, and one blended for main image. Sounds like the best option to me.\n@willeastcott @daredevildave  @Maksims ?. Another way is just to make the posteffect system more flexible, so you can simply draw the HUD after the posteffect, what would be the proper options actually.. In fact there's still a problem, because of this: https://github.com/playcanvas/engine/pull/1057/files#diff-a244156671d2beae826c3398f7d6fc21R195\nBasically, each layer is split to opaque and transparent part (based on blendType), and\n- on WebGL1 only the opaque part is rendered to the depth buffer (as separate pass).\n- on WebGL2 depth grabbing occurs also after the opaque and before the transparent part (because transparent objects may already require depth - e.g. soft particles, water edges...)\nOn WebGL2 you would be able to get the desired behaviour by putting your blended objects into a separate layer between World (opaque) and Depth layers. It will write to the native ZBuffer, and get captured.\nOn WebGL1 however it's not as easy, because there's this separate pass...\nPerhaps we can split to opaque/transparent by the depthWrite flag itself, instead of blendType. In this case it should be expected (and might be not obvious) that all blended objects with depthWrite = true won't be properly sorted.\n\nTested: seems to break some scenes. Seems like we actually want SOME transparent objects both sorted (back to front) and captured to depth buffer.\n\nThe easiest suggestion would be: create objects with redWrite=greenWrite=blueWrite=alphaWrite=false and depthWrite=true and let them get into the depth buffer. Then add actual visible transparent objects to another layer.\nAs for\n\nposteffect system to allow the HUD to be drawn afterwards\n\nThat should be super-easy to do with the upcoming PR.. Sorry, haven't installed iOS 11 yet. Perhaps they'll fix it after leaving beta? Are other WebGL demos (non-PlayCanvas) work?. Pushed a fix. Should fix https://github.com/playcanvas/engine/issues/953. I'll wrap.. Heh, also, you can move the var out of the loop (should be a tiny bit faster).. ~~So, do you suggest changing vertex attribute offsets and vertex size to align to 4 for custom vertex formats?\nI think it's a bit wasteful to lose bytes in every vertex. What if instead of accessing vertices by Float32Array, we'd change it to DataView?~~\nOK, actually let's align to 4. It seems, ARM can be way too slow for anything non-aligned.\n~~But instead of changing every offset, it's possible to just add some bytes to stride.~~ except you won't be able to address floats that are after any non-aligned elements in the vertex... doh\nThis PR looks OK to me.\nwhydoidoit, is it for your custom vertex format?. What I think should be done:\n- Make everything graphnodes.\n- Instead of storing entity data on entities-aka-inherited-graphnodes (and possibly cluttering all graphnodes with additional unused data, if we'd make them all full entities), have a separate entity system, with each entity storing a link to its graphnode + own data.\nWhat I'm saying is that scenegraph is scenegraph and it shouldn't be dealing with components; instead, only for those graphnodes that have any components, we create linked entities, somewhere in a parallel array. These entities are just component storage.\nEvery graphnode will be able to have components, and you don't need to bloat those without them.. Editor-wise could be a single asset checkbox. If generated compressed textures need to be flipped, we'd do it before compression.\nFlipping DXT/PVR/ETC in engine is not as straightforward, they're made of blocks, not pixels, I would avoid it.. Can add an option for the standard material.. New bloom is coming soon and doesn't even use this function :). Just needs UI chechbox. We already use 32-bit indices for models that don't fit into 16. So perhaps switching to 32 in generateWireframe would be consistent?. A tutorial? Amazing!\nYes, that should be finished soon, hopefully next week. But then other guys will need to review and add UI for the Editor.. >So you're saying there's no way to maintain backwards compatibility for this property?\nBecause Layers now dictate the render target (and I find it more convenient than a camera property, because we're often rendering different shader/scene passes with the same camera), camera.renderTarget is unused.\n\nIs it fair to say that post effects are really the only thing this is used for. And jumbo-tron screens and rear view mirrors and such like?\n\nThese things need to be reimplemented (fairly easy). All post effects are already redone.\nSeems like we'll need to release a bunch of tutorials right after (or even before!) we push it to prod.\nIf you had a camera and did\ncam.renderTarget = myRt;\nYou will need to create a layer instead:\nvar layer = new pc.Layer();\nlayer.renderTarget = myRt;\nlayer.addMeshInstances(myMeshInstances);\nlayer.addCamera(cam);\nvar comp = app.scene.activeLayerComposition;\ncomp.insertLayerBefore(layer, comp.getLayerByName(\"World\"));\nBut this is completely code-only. In reality we have model.layers and camera.layers properties which you'll be able to set in Editor, and the order of layers will be also defined there in scene settings. So in the end what you need is:\n- Create a new layer in Editor and drag it before World.\n- Select all models you want to be rendered and your special camera and add them to this new layer via GUI.\n- Code:\napp.scene.activeLayerComposition.getLayerByName(\"myLayer\").renderTarget = myRt;\nI'm up to suggestions about the \"activeLayerComposition\" variable name. Perhaps it's too long (but descriptive)..\n\nDoes onUpdateShader need to be public API?\n\nYes. It opens up lots of possibilities.\n\nEven in Canary?\n\nI don't know. You guys have macs :D\n\nCan we say this is not a blocker to merging?\n\nAt the moment we can't. Either we need to prove it works in Canary, or make a small benchmark on engine start (same with float texture renderability - create rt, render, read back)..\n\nYeah, I don't like simple either. 'basic'? (matches pc.BasicMaterial naming which is unlit) 'passThrough' (more literal/descriptive)?\n\nI like passThrough. . @vkalpias is working on the Editor integration right now. I'm afraid to merge it before we are sure it works and there are ready quick-access tools to take advantage of stuff, especially given that it breaks a few things (like post effects people actually use).. Continuing here https://github.com/playcanvas/engine/compare/layers?expand=1. Bit more details about shadow acne: \nshadowBias used to be constant offset, but now it's actually slope-scaled. \nhttps://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L1696\nOn WebGL2 non-VSM shadows are rendered into plain depth buffers (no rgba encoding), and slope-scaled bias is achieved with simple gl.polygonOffset.\nOn WebGL1, depth is encoded in color textures, and with OES_standard_derivatives extension (99% support according to webglstats.com), same polygonOffset behaviour is emulated in a shader.\nnormalOffsetBias is what you think it is. Bias is applied in object shaders, before sampling the shadow (there is another normal bias variation, when vertices are pushed by normal when rendering the shadow map - unity does it, and it gives significant distortion. I believe they did it because they had no vertex normals in GBuffer, and they care too much about deferred, but since we're forward-rendering oriented, we can use higher quality version).\nResizing: surprised to hear you need to do it manually in three. Perhaps there should be an easier way. All Playcanvas entities have usual 4x4 matrices with pos+rot+scale, and you can call entity.setLocalScale() to set the scale in the matrix (no CPU vertex loops).\nInstancing: not yet (although we tried adding it early, but it didn't perform well when being completely automatic). Also instancing requires an extension that's not supported everywhere yet. Take a look at batching in Will's post: it attaches multiple meshes into one and can automatically \"skin\" them to original entities, so you can still move many objects, but only have 1 draw call. And it works on every platform. \nSince Batching requires you to at least define groups of objects you want to batch, we can easily extend it later to use hardware instancing for batches of identical objects, where it is supported. . > What I'd like to do is be able to re-size a mesh (similar to what a scale transform does), but not affect children in the scene graph tree\nJust scale all children inversely then. If there are too many of them, put them in an intermediate node, like... parent\n . |_intermediate\n     ...|_child\n     ...|_child\n     ...|_child\nIf you set parent's scale to 2, then set intermediate's scale to 0.5 and so on. You should be able to do the same in three, unity and anywhere else as well.\nWe also have support for the \"scale compensation\" feature from Maya: http://download.autodesk.com/us/fbx/FBX_Maya_online/files/WS73099cc142f48755-3d114b751181c40f14b1283.htm\nIt's just a single boolean: entity.scaleCompensation\nYou can try and see if it does what you want.\n\nThat rejected Three.js pull request makes it fully automatic,\n\nI don't see a nice automatic way to do instancing without making it even slower in some cases. For a small time cost of marking models as belonging to a particular batching group, we remove the overhead of constantly scanning and sorting every frame's draw calls and restructuring transform buffers.\n\nI can't find any bias values that make it go away\n\nIf you'll have this situation in playcanvas, I'll buy you a beer. I spent way too much time fighting shadow artifacts :D\n. I see, well, there's another way: modify the vshader (just multiply verts before transforming by matrix). In fact I have a simple test scene that does just that: https://playcanvas.com/editor/scene/560732. Renamed (for all maps):\ndiffuseMapVertexColor -> diffuseVertexColor\ndiffuseMapVertChannel -> diffuseVertexColorChannel\ndiffuseMapTint -> diffuseTint\nAlso updated docs\nWill require migration now. With all the renaming it is. Before the renaming it wasn't.\n... can add get/setters for old property names. OK, it's no longer breaking.. Why not?\nI tested various stuff with it, but you might try testing some other stuff too + make sure it does work with GLTF the way it should.. Looks alright. - Sponza: this one is bugged simply because shadow map bias value for the dynamic spotlight is wrong. Set it to e.g. 0.5, and it's fixed. Apparently this bug appeared after we changed the way biasing works (long time ago).\n\n\nMaster Archer: uses old meshInstance.layer, so it's expected. Migration to the new layer system will solve this.\n\n\nVoyager: fixed.\n\n\nUI not rendering in various projects: fixed.\n\n\nOld font script: can't fix, uses old meshInstance.layer and generally is pretty low-level.\n\n\ngetModels() crash: fixed.\n\n\nStatic Batching: can't reproduce, shows 2 to me.. BasicMaterial is basic. It's left as legacy to support cases where it was used. You can always downgrade Standard material to a basic feature set, e.g:\nmat.useFog = mat.useLighting = mat.useGammaTonemap = mat.useSkybox = false;\nand still use chunks :). BTW, I recommend testing if the combined mesh AABB is still correct for batched skins and doesn't waste performance.\n\n\nRight now batched mesh AABB is a combination of underlying mesh instances' AABBs:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/batching.js#L967\nAnd skinned underlying instances will try to use their transformed matrices to generate full mesh AABB:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/mesh.js#L335\nMatrices are calculated for all draw calls before rendering:\nhttps://github.com/playcanvas/engine/blob/master/src/scene/forward-renderer.js#L1034\nBut given batching removes original models from the list of draw calls... perhaps they'll stop updating. That means you probably need to patch BatchManager.prototype.update() to generate the AABB using the matrices you build in SkinInstanceBatched.\nHere is a simple AABB visualization script: https://playcanvas.com/project/342895/overview/skinbounds. That's some huge PR. Are those program-lib/results/ files need to be merged? Should it be a separate repo perhaps (like with gltf etc)? The test will break if any chunk will change in the future. \nCan't be nine-slicing implemented as additional chunks instead of being sprinkled everywhere around the standard shadergen?\nStandard shader also calls overridable onUpdateShader() with options including pass, so you can apply some related patching (e.g. for the picker pass).\nJust feels like this PR brings a lot of complexity to fix a relatively small problem.. Cool. So it seems to only affect primitives for now? For meshes I guess we need some kind of a checkbox on assets.. Any shader compilation errors, or just this warning?. One way to fix it is to just rename the uniform in the fragment shader. That would work for mixed precision scenarios, but perhaps will add a little overhead to other platforms (+1 uniform to manage on JS side).\nOption 2: just force declare it as \"uniform mediump vec4\" everywhere (are there any devices with lowp?!). I suspect medium precision should be fine for atlas UVs.. That can give some precision problems, e.g. jittery vertices. We'd better run VS with the best precision we can.. Grouping multiple assets into large blobs is definitely a good idea. I wonder if you can just reuse existing browser GZIP compression and simplify the task into joining/splitting data without any fancy logic? You only need a file table with byte offsets + large chunk of glued data.\nEDIT: ah wait, TAR does exactly this. You may still strip some not-very-useful bits.. Well the proposed PR is what I suggested to Max who suggested it to author :D I tested it on 5S and didn't notice anything bad, so seems like a problem with newer models. I don't really know any elegant way to detect if cross-face cubemap interpolation is supported apart from literally drawing and reading back stuff. WebGL doesn't seem to define any strict rules about this behaviour.. Can be, although I don't think it's bad. Why do we need to write \"pc.shaderChunks\" when we can just use \"shaderChunks\"? Because someone can mistakenly define another global shaderChunks? Well, there is actually a higher chance someone will define another \"pc\". So I'm actually very sceptical about that namespacing.\n. OK, I'll put chunks into pc\n. Done\n. not a typo (it should be commented out), but I can remove unused lines like this\n. not sure, I just had to register the component the same way as others were\n. will fix\n. will fix\n. no :)\n. They have a bit different names in schema along with descriptions\n. float, it's described in schema\n. not sure. All stuff here is useful, maybe except shaderCache.\n. 2 will be removed as soon as we remove the old particle system\n. okay\n. removed\n. fixed in multiple places\n. done, now all params can be changed in runtime (some require costly internal system rebuild though)\n. fixed\n. fixed in multiple places\n. done\n. OK, I set enabled property to be the last one in data class, so it'll be the last when iterating\n. fixed\n. yep\n. done\n. OK, now only shaderChunks is public, and collectAttribs is now a method\n. fixed\n. fixed\n. fixed\n. fixed, also put the function into pc.gfx namespace\n. fixed\n. fuck standards, but fixed\n. yep\n. yup\n. yop\n. yeah, it's my nickname :) probably not the best place to put it, because the shader is cut to pieces anyway. removed\n. fixed\n. fxd\n. done\n. okay\n. I see\n. right\n. fixed\n. ok\n. k\n. yes\n. done\n. pc.gfx.drawQuadWithShader now\n. removed\n. done\n. OK, now it's pc.Curve\n. You select codeblocks to comment in a bit strange way - they do not point to things you discuss sometimes. If you're talking about setLookVector, it sets the Z direction of the matrix. Originally you had lookAt function, but it accepts a target position and internally computes (target - pos).normalize vector. But sometimes you already have a vector (e.g. picked normal from physics engine) and you don't want to perform unnecessary computations.\n. I'm not sure what are you talking about, you comment on unchanged engine code, or at least github shows so  :/\n. fixed\n. I see lines 1115-1117 for some weird reason. I answered about lookVector on your other comment higher. Maybe you comment on older commits (?).\n. This is exactly the reason setLookVector should be here - because it's essential and not the special case. I'd rather remove lookAt, because it does more things than setLookVector, and if you really need to do lookAt, you can sub points and normalize manually. Why the heck do I need to call function that does redundant job to achieve a simple result? JS isn't the fastest language out there.\n. Modifying the world transform is hard and not all users will be able to do it. Just changing the Z direction is not enough, because matrix should be kept orthogonal. The setLookVector just makes an entity to point to a direction, and I had a lot of situations in my past experience when it was necessary. The lookAt is not easier to use when you have a vector, because instead of setLookVector(vec), you have to do something like lookAt(tempVec.copy(pos).add(vec)) which looks like crap and does redundant stuff (lookAt will sub your addition back and normalize the already normalized vector). Again, in some situations you have a vector/normal, and NOT the point.\n. Well, I just looked at how lookAt was implemented in the engine, and saw it in both mat4 and graphnode, so I thought that's the way to add. So the question then is: why lookAt has to be in graphnode and not only in mat4?\n. Used by who? You don't know what will be used more often unless you add it and see how people use it.\n. OK, fine, let's not include these now. However, here are some examples when you need setLookVector:\n1. Align particle system to surface normal.\n2. Align decal to surface normal.\n3. Calculate object motion procedurally and make entity look along the direction of motion.\nMaybe we should make a poll or something for users so they can vote for features to include?\n. I don't think we should waste our time on moving words around\n. but it makes things work.\nbecause there is\nthis.minFilter = this._minFilter;\non upload and recover\n. OK, I guess you're right, changed it to avoid any future pitfalls\n. It's totally the same behaviour as before. Original code had:\ntransform = transform || new pc.Mat4();\nI changed to\ntransform = transform || new pc.Vec4();\n. No. Probably I was just changing an old file without your change and haven't notice it.\n. No, I think it's a good idea to start with 1 point.\n. It is \"more physically correct\", although also a bit more expensive. It is also a bit too bright in the center, so I'd set it to default only if we had nice tonemapping working by default. But we don't (I should add it!). So let's not set it to default at this point.\n. There are no functions calls in shaders. Everything is naturally inlined. I never heard of any \"true\" function calls there.\nCouldn't find any GL specs on this, but:\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/bb509607%28v=vs.85%29.aspx\n\nTherefore, a function is inline regardless of whether you specify inline, and all functions in HLSL are inline\n\n\nGL is likely to follow the same rules:\nhttps://www.khronos.org/files/opengles_shading_language.pdf\n\nThe following are the keywords reserved for future use. Using them will result in an error\ninline noinline\n\nSo should be always inline I believe\n. fixed\n. oops, fixed. Oh, I didn't think it can enable mipmaps by default... I'm definitely fixing this.\nBTW, the original code (before this PR) didn't specify autoMipmap as well. I didn't change this function too much.\n. fixed\n. It probably should. And I like enums :)\nI'm not sure if this enum passion has any sense in JS though...\n. I already added exactly those enum names in the latest commit\n. Not right. Fixed by setting to false at the moment. Ideally, I'd like to remove the whole asset importing code in skybox and only leave initialization by setting cubemap.\n. I think skybox still needs to be an entity with some material on it. Even if it's automatically enabled by scene setting.\n. sure\n. I can make it a per-camera property. Then it probably doesn't have to be called \"camera_exposure\"?\nAlso, what about editor camera? We want to tweak exposure in editor, but we don't have access to editor camera entity. So how should we deal with it?\n. I don't think this checkbox should be exposed in UI. Migration is needed. I think leaving this boolean might be good for debugging/optimizing. Maybe we should remove it later?\n. For specularAA? Probably yes.\n. Makes sense. Yes, it darkens the ambient color.\n. Currently it shouldn't be exposed, as we don't have in-editor conversion from HDR to multiple RGBM mips.\nIn future it shouldn't be exposed either, because nobody wants to set reflection maps based on a material by hand. Reflections should be picked up from scene dynamically, using probe points, put by user, and scene-wide sky cubemap.\n. Yep. In which file should I declare the enum?\n. probably. I'll change\n. I suggest you change the skybox from component to something else, using my modified component code, so it will work with same shaders/can be HDR.\n. I just copied the line like those above =)\n. Also, it only works for Blinn-Phong, while default shading model is still set to Phong. We need some scene-wide shading model selector, I guess (because you definitely don't need Phong on some materials, and Blinn-Phong on others in one scene)\n. Or maybe we shouldn't care, because the original asset-based code doesn't seem to care about it as well.\n. I mean, we really need to view results in Designer. Because some scene may look super-extremely-bright without bringing down the exposure, and you won't be able to edit anything (I had such problem in Unity). So as we don't have access to designer camera, I guess we can currently leave exposure to be just scene property? And if it is a scene property, then it's not a \"camera_\" property.\n. OK\n. Skybox has a dedicated shader. Material shaders can be a little bit too fat for skybox.\n. No problem\n. No, I'm saying we DON'T have to use both Phong and Blinn-Phong in one scene.\nOr actually... forget it, let's make a per-material switch, should be more flexible.\n. My bad\n. where?\n. If we'll have to extend this for many different pixel formats, some things can be clarified. But for now it's enough, it's just the fastest way to write it.\n. This is from http://webglreport.com/\nI haven't seen a better way.\n. Only X component is used for radius. I thought of different properties, but it's a bit of a pain to make it for each shape. Imagine cone for example: it has 2 radiuses and length. Fits perfectly into vec3 again. So are you sure we'll need 2 vec3s and 1 float instead of just 1 vec3?\n. Forgot to upload scene_scene. Changed to emitter*.\n. ok\n. fixed\n. I'd use 0 because it's not only a spawn volume, but it also gives initial spherical direction, so you'll see the difference even with 0.\n. thx for pointing this, fixing\n. Would be useful to have in UI though. Unity has UI for bitmask things.\n. This one is internal, not a material property.\n. This one is internal again. Don't look at that file :D Public API is in scene_phongmaterial\n. \"internal boolean\" is not intuitive.\nmetalnessWorkflow is internal, useMetalness is public.\n. What I think is not intuitive is metalness overriding specular. Metalness is not necessarily better, but it's different. What happens if you set both metalness and specular? That won't make sense. We need a switch that'll show either specular or metalness controls, useMetalness is that switch.\nI agree on consistency, I'll change it.\n. I don't like FS =P\n. c'mon, every 3d artist knows what is IOR\n. oops! forgot to push that file\n. it is in all possible structures, isn't it?\n. Maybe, but shader generation and light usage in shader depends on shader generator implementation.\n. fixed\n. fixed, turns out I just forgot to add the file initially\n. oh lol\n. Do you think we shouldn't expose it in UI? I think it can be useful to have there.\n. When do we use unindexed primitives in engine?\n. I honestly don't see a point of {} here. It may make sense only when (cullBorder) is executable code, in which case we can better see which line caused a bug.\n. No, lack of extension means likely slow device (except normal device running IE).\n. Or you can get app.stats.scene once and then read it every frame.\n. Who cares? Look at the original source: this posteffects file CREATED the _depthTarget on camera before, and ForwardRenderer was reading it. So I didn't make it worse.\nhttps://github.com/playcanvas/engine/blob/master/src/posteffect/posteffect_posteffectqueue.js#L69\n. Again it's not worse than the original code\nhttps://github.com/playcanvas/engine/blob/master/src/scene/scene_forwardrenderer.js#L634\n. Renderer also reads the depth map.\nOf course you can have has, get, set and whatever methods, but it doesn't gives us anything except bloating the source.\n. Maybe, at least as read-only.\n. Original post effect system internally sets depthMap variable for each effect that requires depth though.\n. pushed, even better: https://github.com/playcanvas/engine/pull/459\n. Oh. Right. Fixed.\n. - do we need docs for \"private\" underscored functions?\n- Max thinks no.\n. Not sure how I can get app (and graphicsDevice) from scene object though.\n. Also for device, asset API, and renderer. We can pass it all as arguments, but it just makes things more complicated and error-prone.\n. Maybe, then we'll just pass app.assets into the lightmapper constructor?\n. changed\n. changed\n. Perhaps it should be vertices, not vertice?\n. Can you remove \"new\" from the main loop? It's better to do all memory allocations in advance.\n. Actually yes :)\n. Polyfilled the method as suggested there\n. Maybe, but it's small and doesn't need to be overridden.\n. Seems like it should be <<, not <?\n. You don't actually need \"1 <<\" here, because drawCall.mask is already a bitmask ready to be AND'ed\n. Oops! Fixed.\n. It means it will only affect the triangles of static models it intersects with\n. Hmmm... then we also need a good correction to this: https://github.com/playcanvas/engine/pull/697/files#diff-a01b339213b1ec54098b0d4161e1bceeR28\n. Hmm yeah. I'll add copy/clone methods for StencilParameters.\n. Heh, never noticed that. Can reorder.\n. Added clone\n. Documented\n. Reordered\n. Hmm not sure why you moved the decrement\n. You used it somewhere in the app.destroy, calling resource.destroy manually, so I didn't change it.\n. Hmm I thought it always supports it for some reason.\n. No. It flushes some states on the device, because there were cases when some deleted buffer remained bound. But I agree, that looks a bit hacky...\n. It will be. For now it's easier to keep a define.. This doesn't look very good to me - you're injecting a UI only code to EVERY (even non-UI!) shader. . Now passing it from the constructor options. Applies to most of the device methods though.... Applies to most of the device.set* functions though :). That would require you a way to change the shader. Right now the TF object contains an output buffer, which can be then processed by multiple shaders. You syntax would suggest creating many buffers for the sake of running a different shader.... I just copied that from VertexBuffer/IndexBuffer comments. Should then patch those as well.. added. Did I write this?... how did it even work before? :D . Where? Example creates a mat4 and a vec4, and then transforms.. Ouch. My bad. Fixed.. I copied it from the transformVector actually. We should consider some auto-formatting tools, because this is rather ridiculous. Would complicate observable logic to me. Link must never ever be called, if the shader is ready, and it makes it more clear, than a single line.. Well, it's still a benefit that made some difference in Seemore on the Mali tablet.. I don't remember, but it wasn't absolutely tiny. The tablet we tested on, is still not too old, and there are a lot of worse cheaper devices still, so I'm not convinced we should remove it. Maybe 5 years later.. This is when you want to use the backbuffer. OK, removed docs for the device method.. Added debug check.. It's not practical to perform that many checks in non-debug builds.. This is true for many other errors which are better readable with #DEBUG mode (e.g. material shader error etc). If you need to debug, you run DEBUG. Otherwise it had to be called just \"verbose\" or something.. This is basically a copy-pasted code from skinning parser. Should change both then.. Sorry, not sure how I missed that. Also, most of these checks aren't needed since we decided to not support copying from/to backbuffer, so source and dest must be always non-null now. Merged a fix.. Given that we only check for if (node.scaleCompensation), and it'll work the same way with false and undefined, should we care?. So why do we need to always call resolve for every uniform now?\nI believe we should just reset the default material on init, not change anything in the render loop.. Did you mean \"var drawCall = drawCalls[i];\"?. That might be a bit uselessly complicated, there are not too many arguments. And if we'd have more arguments, we could change them to be an object.. So the logic is a bit different here, and you don't change _levelsUpdated, if the texture is invalid.\nWhat if _levelsUpdated was false, then you uploaded an invalid texture, and it's still false, yet we uploaded the black 4x4 data?. It's always a number, so I thought -1 is fine for a non-value. Can be a pc.Batch object itself... . It's a simplified copy of SkinInstance. Engine treats it like a normal skin instance, but it doesn't do matrix multiplies.. Technically there's no difference between skinning bones and batching nodes, they work exactly the same way.. They're getting swapped in the end of the loop. Can call them e.g. A and B.. Which property? Github doesn't make it clear to which line you point. If you mean the model property - it is going to be used by users.. Why?. I recently noticed that for...in loops can be quite slow, so maybe some other solution (emulate linked list with 2 arrays?) will be better. 164 is firstBake not batch ;). This one is slightly experimental and may change in the future. But if it'll stick, I'll document it.. No. Shader generator #undefs previous defines before every map: https://github.com/playcanvas/engine/pull/1080/files#diff-0df44c31b04313738bd9cf0de37958bbR173. Next time, in another PR ;). This PR is made carefully to NOT break any shader chunk code.. But doing setters for all chunks we have for the sake of changing names isn't useful. diffuseMapTint, diffuseMapVertexColor -> diffuseTint, diffuseVertexColor.\nThis is breaking, because you could use old names in procedural material creation code. But I can define old names as get/set too.. \"Gizmo\" layer also contains all the line/immediate rendering. Those without the underscore are.\n... although they're supposed to be read-only.. Done.. Done.. Oops. Done.. Two different _setMaskedBy should be probably a single function. Keep in mind that shaders with DYNAMICBATCH define implement skinning with just one bone:\nhttps://github.com/playcanvas/engine/blob/master/src/graphics/program-lib/chunks/transform.vert#L17\nIf you want proper batched skinning, you need to make shaders use SKIN define instead of it.. I think all shader-based game engines I ever saw or reverse engineered used 4 bones per-vertex, because it's usually enough, and you don't really want to to compile/switch more shaders just because some objects use less. And 4 bone indices fit neatly into 4 bytes, and you can't have less for a vertex attribute. So PlayCanvas too used 4 bones per vert from the beginning. All imported FBX models are set up to use 4.\nDynamic batching is basically a specialized skinning mode that only uses 1 bone and no weights. But if you want to batch skins, then you'll need to switch shaders to a \"normal\" skinning mode with 4 bones.. Pretty cool! I hope what happened to character's leg is expected though :D \n\n. You can probably precalculate (font_pxrange / font_textureWidth) and (2.0 * font_pxrange / font_size) to uniforms to avoid divisions.. I didn't test this code, but I wonder if there is any visible aliasing due to hard comparison.. Might make sense to put outline/shadow only code to a branch or #ifdef. ",
    "dylanvorster": "Not sure what the status of this request is but I have also run into a similar issue such as this. Ive just forked this branch and can confirm that it works. The project I'm working on uses a build system and it requires all of the javascript to get concatenated and minified, which is obviously an issue when PlayCanvas requires the scripts to always be in a separate file. Using the patch by @demalus is a good step to solving this problem as we can now just move all the code into a single file and include that.\nWhat would be ideal though, is if the engine would be smart enough to cache the scripts immediately based on the name when pc.script.create is called and ignore the URL completely (only if the ScriptLoader is currently not loading files). This would allow us to do things like the following:\napp.context.systems.script.addComponent(camera, {\n    scripts: [{name: 'controls'},{name:\"picking\"}]\n});\n... because the script already exists at this point when its all concatenated into one file. Not sure what your thoughts are on this, or how possible it would be to implementing something similar into the engine, but either way +1 to @demalus for really improving this a whole lot already.\n. ",
    "alexisvincent": "+1\n. ",
    "muzzyfrank": "After some more investigation I've found the issue.  The problem is in the new bootstrap.js.  In the _reflow method you are doing the following:\nthis.canvas.style.width = '';\nthis.canvas.style.height = '';\nThis is fine, but the example Frame Buffer Picking implementation (in the example project I sent and also on one of the answers) does the following:\nvar canvasWidth = parseInt(canvas.style.width, 10);\nvar canvasHeight = parseInt(canvas.style.height, 10);\nThe fix is to use canvas.width and canvas.height.  I'll leave this issue open for now so you are aware that the examples need updating, but really the issue can be closed at this point.\n. Sorry about putting this issue here.  I originally thought it was an engine issue but then figured it out.  In the future, which category does bootstrap.js fall into?  Also, do you prefer bug reports to always go to answers.playcanvas.com first before becoming a github issue?\n. The fix makes sense, but there are still a few issues.  Most UI I imagine will likely be done in jQuery and other libraries (we are using bootstrap for some elements).  It makes it a little bit difficult to have normal UI libraries work correctly.\nThe workaround on my end is to do something like this:\n$('body > *:not(canvas)').on(\"mousedown mouseup mousemove mousewheel DOMMouseScroll\", function(event) {\n    event.stopPropagation();\n});\nThis relies on the canvas always being a direct child of body - is that a valid assumption?  Otherwise I'll have to likely make some kind of base css class that all UI elements include.\n. That makes sense.  I guess the only other way something like this could work is if UI developers had to manually send the mouse event to the canvas if they wanted pass-through instead of having the developer turn off propagation.  It feels like more UI is likely to not want the event to propagate (especially because it will not propagate to the canvas by default in this way), but that is really just my opinion.\nI would only recommend adding this to the documentation somewhere because it feels like other devs will probably run into this issue if they are building the UI in HTML.\n. ",
    "cabbibo": "\nAbility to analyze any node\nAbility to create and destroy nodes,\nAn easy way to sync audio within loops!\n. there is an 'AnalyserNode' in the web audio api, that lets you can use to return an fft array of an analyzed audio. Super awesome!\n\nsync case with audio loops maybe something like: http://cabbi.bo/PhysicsRenderer/examples/tendril.html\n. but obviously, analysis is much more important than looping :)\n. ",
    "marquizzo": "I recommend adding a \"seeking through media\" functionality so the developer can jump to a specific time point in the audio. This would be very handy when working with sound effect sprites.\nFor example:\npc.AudioSource.currentTime = 6;\npc.AudioSource.duration = 3.5;\npc.AudioSource.play();\nWould start playing the audio at the 6-second mark, and stop after 3.5 seconds of playback have elapsed.\nAn onEnded and onLoop event callback would also be very helpful.\n. ",
    "yhydra": "Would be great to get this open again. https://github.com/yhydra/playcanvas-animator\nIf anyone else is looking for animation layering, avatar masking . @TheCodeCrafter\nWhat do you think of this Pull Request? Have you seen this or tested it, would it help us in anyway ? . ",
    "muit": "Wow, I didn\u00b4t see that. Thanks!\n. ",
    "ssavinel": "Great, thank you !\n. ",
    "r2d2Proton": "Thank you for pointing that out. I was actually discussing in a general sense. My petition to the team is that the design should not inhibit developers, if possible.\n. Thanks Dave.\nIs it safe to say that the latest version of Java is okay to use?\nhttp://www.java.com/en/download/ie_manual.jsp?locale=en\n. I got it working now using the localserver.bat approach. I really wanted to use Visual Studio so that I can easily step through the code (give that I've used the IDE for a hundred years or so).\nAs I stated before, I have the project folders intact, the source code isn't minified, and I can view the overall structure more easily. In an effort to get away from copying and pasting the list of source file (all 185 of them) into the HEADER section of each HTML, I created a singe HTML that includes the list of JavaScript files (and in the same order as Dependicies.txt does). Now it's a simple matter of a one-liner in each HTML file, and commenting out the -latest.js reference.\nHere's the bummer, as I ran into it anyway. . .Visual Studio 2013 isn't expanding my IMPORT request:\n<!-- script src=\"../../build/output/playcanvas-latest.js\" / -->\n<link rel=\"import\" href=\"../../SourceFiles.html\" />\nAnd when trying to debug the \"website\" the debugger fails. It doesn't recognize \"PC\" or \"pc\", which leads me to believe the JavaScript files aren't being imported.\nWhen I run localhost using the localserver.bat file, it works fine. Any ideas?\n. That's funny. That's the exact link I got the import from. Of course I skimmed over it looking for the punch line. I also got the Xbox/PlayStation Controller link from that site too.\nLet me read through it so that I have a better understanding of the function use and I'll report my findings shortly.\n. Sadly I didn't have to go too far down the page. And worse yet, on IE 11 the function is reporting that import isn't supported.\nA side note: it's a little scary when HTML/DOM authors talk about how exciting something like \"import\" is:\n\"Let this sit. It's exciting stuff.\"\nComing upon this issue, that is to centralize the list of files to include, my first question was where in the heck is the #include directive :dancer: \nBtw, the Dojo Toolkit, which I've used in the past makes heavy use of asynchronous loading of JavaScript files.\nI'm going to see if I can find a fix for IE.\n. Adding more information:\nThe problem of lost keyboard occurs regardless of which call to the gamepads.update is uncommented. It doesn't matter if I call the gamepads.update before the gamepad check, or after the gamepad check. The keyboard is lost.\nIf you switch to gamepads.isPressed there is no problems. Also, the call to gamepads.update seems to be superfluous.\n. Thanks Will.\nAfter reviewing the documentation (again) I remember seeing the description and use of it. So, first call setRenderTarget(target), then make the Begin/End calls followed by setRenderTarget(null).\nIs that correct?\n. Thanks :)  I'll close this once I finish my testing.\n. I don't think it's working. I can clear the front buffer with green and see it provided I don't do anything else:\ngd.setRenderTarget(null);\ngd.updateBegin();\ngd.clear({\n    color: [0.0, 1.0, 0.0, 1.0],\n    depth: 1.0,\n    flags: pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH\n});\ngd.updateEnd();\nI can clear the front buffer with green, and render to a target and don't do anything else and see the green as should be the case:\n```\ngd.setRenderTarget(null);\ngd.updateBegin();\ngd.clear({\n    color: [0.0, 1.0, 0.0, 1.0],\n    depth: 1.0,\n    flags: pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH\n});\ngd.updateEnd();\ngd.setRenderTarget(this.colorRT);\ngd.updateBegin();\nthis.DrawBackground(gd);\ngd.updateEnd();\ngd.setRenderTarget(null);\n```\nThe above still shows green, which is correct. And I can render what was drawn to the rendertarget and see the image:\nvar white = new pc.Vec4().copy(pc.Vec4.ONE);\nvar rect = new pc.Vec4(0, 0, gd.width, gd.height);\nthis.DrawTexture(gd, this.colorRT, rect, white, window.ScreenManager.BlendMode.None);\nHowever, if I just use clear with the rendertarget nothing appears. So instead of rendering my own image, just performing the clear and rendering it to the screen appears not to work:\n```\ngd.setRenderTarget(this.colorRT);\ngd.updateBegin();\ngd.clear({\n    color: [1.0, 0.0, 0.0, 1.0],\n    depth: 1.0,\n    flags: pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH\n});\ngd.updateEnd();\ngd.setRenderTarget(null);\nvar white = new pc.Vec4().copy(pc.Vec4.ONE);\nvar rect = new pc.Vec4(0, 0, gd.width, gd.height);\nthis.DrawTexture(gd, this.colorRT, rect, white, window.ScreenManager.BlendMode.None);\n```\nThe only substitution made was the use of \"clear\" vs. rendering with a texture.\n. Actually I think is the getEulerAngles that is causing the problem. Keeping track of the angle and setting it, regardless of previous values in the matrix, works.\n. Mat4.setLookAt doesn't work. Try a simple test. Below the camera position is 1 up the Y-axis, and is looking down. Mat4.setLookAt doesn't honor that request. Also, change the Z-direction. Instead of being in the negative direction, change it to positive and you won't be looking at the origin. Either that, all of my code is messed up. However, if I use the above I get exactly what I'm expecting.\nvar cameraPos = new pc.Vec3(0.0, 1.0, -3.0);\n        var target = new pc.Vec3().copy(pc.Vec3.ZERO);\n        var upDir = new pc.Vec3().copy(pc.Vec3.UP);\n        var view = new pc.Mat4().setLookAt(cameraPos, target, upDir);\nBtw, the above code was taken from:  http://www.songho.ca/opengl/gl_transform.html\n. Okay, maybe I am doing something wrong. Would you mind reviewing the information below and let me know what I need to change in order to get the correct behavior.\nThere are a series of screenshots using both pc.Mat4.setLookAt, and the LookAt I posted above. The first lookat the camera is position at (0.0, 1.0, -3.0), and changes to (0.0, -1.0, -3.0), then to looking from the other side (instead of negative z-axis looking at 0,0,0, to a positive z-axis looking at 0,0,0).\n\n\n\n\n\n\nOkay, now with the LookAt using the proposed code (one from the front, and the other from behind):\n\n\n\n\n. I should have tried this earlier. If I invert the view matrix it works as expected. (I see your comment now).\nOkay, easy enough to follow.\nThanks.\n. ",
    "liming0791": "My java is 64bit version , and I had the same error while building. Do I need a 32bit java SDK to build it ?\n. ",
    "Nigh7Sh4de": "I could not simply create a jsfiddle or a codepen because the sprite.js script must be in it's own file.\nI have created a project in PlayCanvas to illustrate the problem and the workaround: https://playcanvas.com/project/337724/overview/sprites (left mouse click is just destroy and right mouse click is enabled = false; destroy();\n. Thanks for resolving this :D. ",
    "WarWithinMe": "However, application.render() will try to render the default scene for all cameras, which defeats the purpose of multiple scenes.\nI think it's good to support multiple scenes, but app.root shouldn't be a generic Entity object. Instead, app.root should be a specific type of object ( might be AppRoot? ) that its children can only be Scene object ( not the scene.root object ).\nThen it would be very clear that\n```\n   var scene1 = new pc.Scene();\n   var scene2 = new pc.Scene();\napp.root.scenes = [ scene1, scene2 ];\n   // or\n   app.scenes = [ scene1, scene2 ];  // which remove app.root entirely and more compact\nscene1.root.addChild( cameraEntity1 );\n   scene2.root.addChild( cameraEntity2 ); // In current version of PlayCanvas, a camera can be add to app.root !\n```\nNotice that the Scene is not subclass of Entity, thus its parent ( a.k.a app.root ) should not be subclass of Entity too. \n. @Maksims Your idea totally makes sense. The only problem left might be \"Is multiple running scenes necessary?\" I actually don't think of practical use cases for multiple scenes ( perhaps it's because I'm relatively new to 3D development ).\n. @Maksims Done filling the form.\n. @willeastcott Well, actually there's still another problem with directional lights.\nBut since I can't investigate the scene in your screenshots, so I'm not sure if the remaining problem I found is relevant.\nThe problem is the light frustum is calculated based on the view frustum. Typically the light frustum would be bigger than the view frustum, but still there will be a great chance that objects lie between the light source ( directional light is infinitely far way ) and the light frustum. In that case, those objects are not able to cast shadows.\nTo fix the problem, we need more information about the scene. In my local branch, I simply added a AABB attribute to the scene, and take the AABB into consideration when calculating the light frustum\n. @willeastcott So I downloaded the sponza-atrium, replaced the playcanvas.js with my local version, set the scene's AABB big enough to contain everything, and the missing shadow in your screenshot is gone.\nThe problem is indeed the same as the one I stated before.\n. @guycalledfrank  It seems like it's the problem of _getZFromAABB(), it fails miserably in many cases :sob:.\nUntil we get a solid implementation of calculating intersection of scene's AABB and view frustum, we simply use the maxz of the scene in the light view space. Although it will waste some z precision in some settings.\n9a3d024 also removes scene.aabb property to allow calc-ing the aabb in runtime. However, I think we should avoid recalc-ing it every frame.\n. Ok, I think I figure it out, the problem is mainly caused during transforming scene AABB into shadow camera space. Instead of transforming only two vertices of the AABB, all the eight vertices should be transformed.\nfc8eadd should works with the dynamically calculated AABB now. ( Remember to call _calculateSceneAabb() before rendering the shadowmap. )\n. I think it's done.\n. @Maksims in the algorithm for calculating the intersections, I need some arrays to hold vertices ( to be exact, vertex references ). The arrays are supposed to hold no more than three vertices.\nWhen we call new StaticArray(3), what it does is to allocate an array ( the data closure ) with length of 3, and the array has a size attribute to keep track of how much elements ( elements that are useful ) it holds. If you push an element to the array while size is smaller than the length, you don't have to allocate memory, because you are merely replacing one old element of the array with a new one. And when size = 0 is call, no memory is freed.\nObviously, you can achieve this in another way:\n```\n// Another way to make static array.\nvar array = new Array(3);\narray.size = 0;\narray.push = function( v ) {\n  this[ this.size ] = v;\n  ++this.size;\n}\narray.push(1);\narray.push(2);\n```\nThe reason why this approach is not adopted is that, by adding size to array, the array will implicitly transform to an object( see https://gamealchemist.wordpress.com/2013/05/01/lets-get-those-javascript-arrays-to-work-fast/, the paragraph right above Point 8 )\n. Of course, you can always drop those commits relating to the array stuffs. These commits exist because @guycalledfrank expressed his concern for it.\nAnd these modifications doesn't speed up the algorithm, but to minimize memory allocations, which helps browser GC to stay still.\n. @guycalledfrank I must admit that the current implementation is a little tricky, as I don't know a proper way to test if the implementation is correct.\nThe precision issue depends on the scene setting. For a very long scene ( as stated in the msdn doc ), we will waste a lot z precision. But I do doubt that kind of scene would ever appear in WebGL\n. Sure, I'll try to make a cleaner version.\n. ",
    "zfedoran": "I am referring to pc.Mat3, not pc.Mat4.\nhttps://github.com/playcanvas/engine/blob/master/src/math/math_mat3.js#L115\n. ",
    "issacclee": "Hi Will,\nJust wondering have you guys made any progress regarding to supporting morph animation in Playcanvas?\n. Hi @willeastcott , sorry for such late reply. I was in need for such feature because we are trying to simulate the process of turning machine cutting through metal piece which of course would require the ability to either import morph animation made by 3d tools like 3dsmax or have the engine work with procedurally created mesh. \n. Small update on the issue: on A12 chips app.graphicsDevice.useTexCubeLod is true, if only on them it is forced to false it makes a workaround.\nSo if engine could detect A12 chip to flip such switch, it will do the job for now.. ",
    "TWandrag": "Hey @willeastcott. Would love to get this feature in there. I'm really new to Playcanvas and trying to push it atm to see whats achievable. Working on characters and be great to use non-boned facial animation among other things  : ). ",
    "westoncb": "Another thing this would be useful for is custom character creation. Or similarly, producing random variations of characters for crowds etc. As an example: https://threejs.org/examples/?q=morph#webgl_morphtargets_human   I may be unable to use PlayCanvas without this feature, unless it offers another way of achieving this. (I'm also a brand new user, but enjoying it very much so far!).. Great! Glad to hear it. Meanwhile I'm going to attempt constructing a VertexBuffer manually that interpolates between some static meshes with identical topology.. ",
    "bizymouse": "any news on this? doing character animation without corrective shape keys is not great. There are also limitless amounts of effects easily achieved by a simple morph target that would be impossible with skinning.  I didn't realize this was unsupported when I signed up because its supported in every other engine.. Does this support animated weights from the fbx file or would that have to\nbe re-animated via scripting now. Whats the eta on a finished\nimplementation? Mostly i'm recreating a sketchfab type of experience that I\ncan host myself. Its been a decent experience so far, although I would pay\nmore to remove the requirements of using the cloud...\nOn Oct 25, 2017 8:00 AM, \"Mr F\" notifications@github.com wrote:\n\nIn fact you only need to use meshInstance.morphInstance.setWeight\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/issues/179#issuecomment-339306948,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AfjrO7ik4vNb4nItPscreDBWch-4DP8qks5svyLvgaJpZM4Dt3Ep\n.\n. XD yes thats part of fbx and used often\n\nOn Oct 25, 2017 12:20 PM, \"Mr F\" notifications@github.com wrote:\n\nIt doesn't supported loading animated weights... in fact I didn't realize\nthere was such a thing. If they are really in the FBX, that can be\nimplemented. For now it can be done via scripting.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/issues/179#issuecomment-339386505,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AfjrO00JPXCE4jn53D0qx67qicltQEe7ks5sv1_GgaJpZM4Dt3Ep\n.\n. https://docs.unity3d.com/Manual/BlendShapes.html\n\nhttp://answers.unity3d.com/questions/675871/exporting-keyed-blendshape-animations-from-maya.html\nOn Oct 27, 2017 6:43 AM, \"Mr F\" notifications@github.com wrote:\n\nHow would you define multiple animated tracks from a single FBX though?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/issues/179#issuecomment-339937912,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AfjrO08XE8Y6547LDqaq22UMVAewqd0fks5swbO_gaJpZM4Dt3Ep\n.\n. \n",
    "kenhoff": "Ah thanks, I didn't realize there was a \"plane\" model. Now I just have to figure out how to attach a texture/sprite to it, but I'll reopen if I have issues.\n. ",
    "SquareLi": "@willeastcott  Sorry for the late response. Yeah, the new build works good for me. \n. It also happens when entity is disabled in Editor.\n. ",
    "BAntDit": "Ok, I've done conversion from tabs to 4 spaces. And fill in the CLA. \nNot quite sure, does i need make new pull request after file changes? (i didn't work with github before :))\n. ",
    "eXponenta": "Fixed!\n. Oh, Thanks! Fixed\n. I can add reflect method to 'math_vec2.js' , if it's necessary.\nI think that creating vectors from array is also a nice feature because it's more convenient when you use JSON.\nFor example:\njavascript\nvar pos  = new pc.Vec3(p); // p - array\ninstead of\njavascript\nvar pos  = new pc.Vec3(p[0],p[1],p[2]||0);\n. ",
    "FeaturedSpace": "PLEASE, someone, integrate this. The engine is so powerful but without an easy way to integrate root motion and multiple animations on a skeleton, the animation system is pretty much useless for most character design. \nThere's no telling how important these features would be. Not to mention that @whydoidoit 's motion.js file is now broken and also can't help people anymore (it's not broken, the engine won't let you attach it to an entity).\nI would appreciate any help if you could give it (especially maybe you, @whydoidoit , but nevertheless, I am forced to stop using this engine until I can successfully integrate root motion..)\nThanks, Guys!. Ok, I'll check it out. Looks pretty good! Is the animation crossfading planned to be implemented into the actual component ever, or just as a functional scripting component?\nI understand what's going on in the code, but just to confirm, animation masking is not in this yet? Or is it already implemented under a different name (session curving)?. I know curving is a big deal in PlayCanvas, but I also see many unanswered questions (from last year mostly) about how to mask animations and layer animations, etc. I have also made a post in the forums about this. Maybe if you could help out and explain how to mask/layer animations on a skeleton, on this forum post? I just haven't seen any good explanations for a simple way to do this!\nI'd really appreciate it if you could help me out with this!\nhttps://forum.playcanvas.com/t/skeleton-blending/8055/2. @thomasbiang Thanks! That sounds pretty neat. If you need any help implementing the feature, I'm here. I have some previous experience working with the WhitestormJS folks off yonder, but I still have very little engine Javascript experience, so forgive me for my mistakes or stupidity \ud83e\udd23 \nOf course, once this is integrated into Playcanvas, I can make a nice little tutorial about animation layering so that we can clear that confusion up once and for all.\nAlso: I know it would be a lot of trouble for either of you, but could you see what's going on with the forum link above? I would really appreciate any sort of explanation as to how the current playcanvas animation system handles simple animation layering! Thanks!\n(Of course, if you're just going to work on implementing it in the gltf addon, then obviously don't bother wasting your time explaining it to me).\nlol I can be confusing with these long and weird comments. Sorry about that.. Got it figured out! @yhydra helped me out. Oooh let me check.. I have not seen this before but I'm quite intrigued now...\nUnfortunately, it looks like this is pretty unrelated to our current little Library, and I don't think we could do much to change it. It is a revamp of the AnimationComponent though, so I mean, perhaps later on after we have fully fleshed out everything about our library we could attempt to patch it into the official PlayCanvas engine.... ",
    "thomasbiang": "I think blending is supported https://github.com/playcanvas/playcanvas-gltf/blob/4f12805e95ec71b09c1d0cbe7644f47a09d478ba/src/playcanvas-anim.js#L1289\nYou can blend one animation clip or one curve (DOF). But currently it is not organized as a blend tree. \nIt should be easy to add blend mask support. . ",
    "SirFizX": "Nice design.  This is even more powerful. Cheers.\n. ",
    "whydoidoit": "One thing I'm tempted to do is to extend Entity to return a coroutine that is bound to the enabled state and lifetime of the Entity. I think it's cleaner, but at the time I didn't do it as it's messing with something pretty \"core\". On reflection I think it's a cleaner way to go for use though. \nI need to add some tests for hyper extension on quaternion interpolation in curves to ensure we can exceed the 0..1 boundaries. \nWill add examples use cases here. Clearly it needs a demo project to really make it all fully comprehensible. @guycalledfrank. It's really the basis for driving an animation state machine derivative but this stuff is all useful and it's deployable as a unit\n. How do I use a local engine?\n\nOn 19 Jun 2015, at 09:44, vkalpias notifications@github.com wrote:\nI tried to make a test project using the example code for the state machines. I'm getting some errors maybe there's a bug somewhere? Try this http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true and checkout this script https://playcanvas.com/editor/code/349013/sphere.js https://playcanvas.com/editor/code/349013/sphere.js . It seems that in patrol#update this.targetPos is null\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-113434633.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Ah of course :)\n\nOn 19 Jun 2015, at 09:48, vkalpias notifications@github.com wrote:\nGo to the directory where you have built the engine (typically engine/build/ouput and run a local server at port 51000. For example python -m SimpleHTTPServer 51000.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-113436005.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Yeah oops, I see what it is.  Its bound the state functions to the wrong thing in update.  More tests to add!\n\nOn 19 Jun 2015, at 09:48, vkalpias notifications@github.com wrote:\nGo to the directory where you have built the engine (typically engine/build/ouput and run a local server at port 51000. For example python -m SimpleHTTPServer 51000.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-113436005.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Basic demo project I'm intending to flesh out.\nShows interpolations, Coroutine statemachines and state machines themselves. WIP\nhttps://playcanvas.com/project/349052/overview/demo-states\n. We could add a pc.interpolate.overTime.curve(Curve/Curveset) which would remove that dependency in Curve - I thought about doing it that way too, might be cleaner, I guess I\u2019d probably prefer it in Curve for my personal preference but the other is also logical.\nCoroutines are dependent on an update cycle.\nNote that there is also a dependency in Entity on Coroutine so that we can have the easier this.entity.coroutine to create a \u201ctied\u201d coroutine for the entity.  This seems like the right thing to do from an API perspective.\n\nOn 22 Jun 2015, at 12:32, Will Eastcott notifications@github.com wrote:\nI feel that coroutines and state machines are 'core' objects. Coroutines seem to have a dependency on component systems (for updates). Note that the core pc.Curve object has had a dependency introduced on coroutines. Just trying to take a birds eye architectural view on things. Thoughts?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-114073782.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Didn\u2019t i do that - UGH\nOk so is that they changes in Entity, Curve etc?  I can certainly roll those back and reapply just the modifications.  Wait one.\n\nOn 22 Jun 2015, at 12:41, David Evans notifications@github.com wrote:\nI'd like to peruse this changeset, but it's difficult with all the changes to whitespace. Is it possible to fix that first?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-114075450.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Hey Will, really sorry, my mother has been ill and I\u2019ve been snowed under with things to do!  I\u2019ll be getting onto this shortly.\nBest\nMike\n\nOn 21 Jul 2015, at 16:14, Will Eastcott notifications@github.com wrote:\nJust wondering where things are at with this PR. Would love to get this merged. :)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326#issuecomment-123228946.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Ooops, serves me right for cut and pasting then changing something lol.. And then using the wrong commit message ARGHHHH. Kill this PR. Yes the format does, but procedural createMesh only uses and emits 2.  Having submitted the request I considered whether that should be considered a fault too, as it was due to this I was having a problem.  So the other way to fix my issue was to change createMesh, however I guess it\u2019s also possible that something else would have a \u201cnot 4 byte aligned\u201d reason for doing something so left this in.  I certainly could look at altering createMesh as well?\n(Found this in my decimator plugin, which does now remove the two minor blend weights from models it operates on, thinking that it would be a good idea to allow the original 4 anyway, but that would require patching or fixing createMesh).\n\nOn 15 Sep 2017, at 20:13, Will Eastcott notifications@github.com wrote:\nI'm not sure I understand. The format supports 4 blend indices per vertex for skinning, not 2. Am I misunderstanding?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/pull/999#issuecomment-329874560, or mute the thread https://github.com/notifications/unsubscribe-auth/AA50I4UBJYDRM1de-ky99bTXX4pC_VYDks5sisxRgaJpZM4PYyiY.\n\n\n-- \n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008\n3radical Pte Ltd, Suntec Tower 2, 9 Tamasek Boulevard, #09-01, Singapore \n038989.\nT: +65 6407 1390\n3radical Pty Ltd, Level 13, 135 King Street, Sydney NSW 2000, Australia.\nT: +61 289 737 506\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\n3radical Pty Ltd is registered in Australia with an ABN of 90 600 403 290. \nThe registered address of 3radical Pty Ltd is T53, 2A Defries Avenue, \nZetland, NSW 2017, Australia.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited, 3radical Pte Ltd and \n3radical Pty Ltd accept no liability for any loss or damage which may be \ncaused by software viruses.\n. Agreed, I was just thinking of dropping duration anyway - you can just call .cancel(0.5) on the resulting object\n\nOn 19 Jun 2015, at 09:53, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32811650:\n\n\n* @returns {undefined|Boolean|pc.Coroutine~callback|Number} The return value designates what will happen next. Returning undefined, true or any string will cause the Coroutine to run on the next frame. Returning 'false' will immediately terminate the coroutine. Returning a number will delay the next execution for that many seconds. You may also return a different function which will be subsequently used to be the body of the coroutine, when you do this coroutine.pop() can be called to return the previous function to execution.\n*/\n  +\n/**\n* @class\n* @name pc.Coroutine\n* @description Basic support for coroutines that run for a fixed period, either dependent on an object or independently\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\n  I wonder if it'd be better to provide extra arguments like duration and delay in a config object instead of function parameters. So it'd be something like:\n\n\nnew pc.Coroutine(function (dt) {\n   // blah\n}, this, {\n   duration: 5,\n   delay: 1\n}\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32811650.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Sorry cross thinking that\n\nOn 19 Jun 2015, at 09:54, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32811760:\n\n\n* @returns {undefined|Boolean|pc.Coroutine~callback|Number} The return value designates what will happen next. Returning undefined, true or any string will cause the Coroutine to run on the next frame. Returning 'false' will immediately terminate the coroutine. Returning a number will delay the next execution for that many seconds. You may also return a different function which will be subsequently used to be the body of the coroutine, when you do this coroutine.pop() can be called to return the previous function to execution.\n*/\n  +\n/**\n* @class\n* @name pc.Coroutine\n* @description Basic support for coroutines that run for a fixed period, either dependent on an object or independently\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\n  Yeah that's even better\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32811760.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Oops\nWait one\n\nOn 19 Jun 2015, at 09:57, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32811912:\n\n\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\nthis._fn = fn || noop;\nthis._bind = bind;\nthis._destroyDelay = duration;\nthis._callDelay = delay || 0;\ncoroutines.push(this);\nObject.defineProperties(this, {\nfn: {\n  It seems you're using tabs instead of 4 spaces? I know it's a pain but do you think you could setup your text editor to replace tabs with 4 spaces instead? This is what the rest of the code is using :)\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32811912.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Done\n\nOn 19 Jun 2015, at 09:57, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32811912:\n\n\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\nthis._fn = fn || noop;\nthis._bind = bind;\nthis._destroyDelay = duration;\nthis._callDelay = delay || 0;\ncoroutines.push(this);\nObject.defineProperties(this, {\nfn: {\n  It seems you're using tabs instead of 4 spaces? I know it's a pain but do you think you could setup your text editor to replace tabs with 4 spaces instead? This is what the rest of the code is using :)\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32811912.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. I\u2019ve added a test case to verify state machine function binding so hopefully I won\u2019t miss that again :(\nShall I put together a working example of this using local engine at some point?\n\nOn 19 Jun 2015, at 09:57, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32811912:\n\n\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\nthis._fn = fn || noop;\nthis._bind = bind;\nthis._destroyDelay = duration;\nthis._callDelay = delay || 0;\ncoroutines.push(this);\nObject.defineProperties(this, {\nfn: {\n  It seems you're using tabs instead of 4 spaces? I know it's a pain but do you think you could setup your text editor to replace tabs with 4 spaces instead? This is what the rest of the code is using :)\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32811912.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Yeah there must be a bug in moveTowards damn it, state machine is fine, entity position is NaN, NaN, NaN\n\nOn 19 Jun 2015, at 10:18, vkalpias notifications@github.com wrote:\nIn src/statemachine/coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32813321:\n\n\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {Number} duration Optional duration, if specified the coroutine runs for this number of seconds\n* @param {Object} bind Optional object with an enabled property whose value will control the execution of the coroutine\n* @param {Number} delay Optional delay before executing the next step\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, duration, bind, delay) {\nthis._fn = fn || noop;\nthis._bind = bind;\nthis._destroyDelay = duration;\nthis._callDelay = delay || 0;\ncoroutines.push(this);\nObject.defineProperties(this, {\nfn: {\n  So if you try this again http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true http://playcanvas.com/editor/scene/372270/launch?use_local_engine=true you'll notice the sphere 'patrols' for 2 seconds then 'seeks' for another 2 seconds and then disappears. It shouldn't disappear so maybe there's another bug somewhere?\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32813321.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Checked in the fix for moveTowards when at target\nWill fix the braces when I can figure out how to tell IntelliJ :)\n\nOn 19 Jun 2015, at 10:23, vkalpias notifications@github.com wrote:\nIn src/framework/entity/entity_entity.js https://github.com/playcanvas/engine/pull/326#discussion_r32813780:\n\n@@ -82,38 +87,44 @@ pc.extend(pc, function () {\n         if (system) {\n             if (!this.c[type]) {\n                 return system.addComponent(this, data);\n-            } else {\n-            }\n  This is probably automatically changed by your text editor but we use brace and else in the same line :D\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32813780.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Yeah good point. Will do. Now I know how to run the engine locally I'll make up a demo pack\nSent from my iPhone\n\nOn 19 Jun 2015, at 10:28, vkalpias notifications@github.com wrote:\nIn src/statemachine/blender.js:\n\n\n* @name pc.interpolate.moveTowards\n* @function\n* @description Move a value towards a target with a limited maximum step\n* @param {pc.Vec3|pc.Quat|Number} start The start point for the move\n* @param {pc.Vec3|pc.Quat|Number}end The target for the move\n* @param {Number} max The maximum distance to move, if start and end are vectors or\n*     numbers then this is a distance, if start and are quaternions then this is a\n*     distance measured in radians\n* @example\n* update: function(dt) {\n*     this.entity.setPosition(pc.interpolate.moveTowards(this.entity.getPosition(),\n*     someTargetPosition, this.speed * dt));\n* }\n* @returns {pc.Vec3|pc.Quat|Number} The updated value\n*/\nmoveTowards: function (start, end, max) {\n  So I noticed this method and probably others too are making clones of vectors, quats etc. Since these are methods that are meant to be called every frame do you think maybe you could use scratch vectors/quats for temporary operations instead so that we minimize the memory footprint?\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Ugh. Sucks to be me. Damned if I didn't remove all of the self = this in favour of .bind. Oh well. You learn something new every day!\nBest\nM\nSent from my iPhone\n\nOn 19 Jun 2015, at 11:33, moka notifications@github.com wrote:\nIn src/statemachine/coroutine.js:\n\n\n*     an object or independently\n* @constructor Creates a new coroutine\n* @param {pc.Coroutine~callback} fn The function to be run every frame\n* @param {pc.Coroutine~parameters} options Optional object with an enabled property whose\n*     value will control the execution of the coroutine\n* @property {pc.Coroutine~callback} fn The currently running function\u00e5\n* @returns {pc.Coroutine} The new coroutine\n*/\nfunction Coroutine(fn, options) {\noptions = options || {};\nthis._fn = fn || noop;\nthis._bind = options.bind;\nthis._destroyDelay = options.duration;\nthis._callDelay = options.delay || 0;\ncoroutines.push(this);\nObject.defineProperties(this, {\n  .bind is very inefficient and leads to a bit more memory used.\n  If you can use upper score var self = this - it is preferable option, then browsers can cache anonymous function, and improve its calling performance.\n  Generally .bind is pretty bad thing to use, and upper scope variable always preferable, unless it is very-very necessary.\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. According to this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nArray.isArray is compatible with everything:\nDesktop <> Mobile <>\nFeature Chrome  Firefox (Gecko) Internet Explorer   Opera   Safari\nBasic support   5   4.0 https://developer.mozilla.org/en-US/Firefox/Releases/4 (2.0)  9   10.5    5\n\nOn 19 Jun 2015, at 11:27, moka notifications@github.com wrote:\nIn src/statemachine/statemachine.js https://github.com/playcanvas/engine/pull/326#discussion_r32817834:\n\n\n* @description Called when a state is entered\n* @param {String} previousState the state that is being switched from\n* @param {String} state the current state\n*/\n  +\n/**\n* @callback\n* @name pc.StateMachine~exit\n* @description Called when a state is exited\n* @param {String} newState the state that is being switched to\n* @param {String} currentState the state that is being switched from\n*/\n  +\n//For each loop\nfunction forEach(collection, fn) {\nif (Array.isArray(collection)) {\n  Array.isArray is part of ECMA6, is it polyfilled?\n  Based on ECMA6 Compatibility Table https://kangax.github.io/compat-table/es6/#Array_is_subclassable_Array.isArray_support it is almost not implemented by other browsers.\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32817834.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Ok pushed a new version that should address the issues I think\n\nOn 19 Jun 2015, at 15:47, Michael Talbot mike.talbot@3radical.com wrote:\nAccording to this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nArray.isArray is compatible with everything:\nDesktop <> Mobile <>\nFeature   Chrome  Firefox (Gecko) Internet Explorer   Opera   Safari\nBasic support 5   4.0 https://developer.mozilla.org/en-US/Firefox/Releases/4 (2.0)  9   10.5    5\n\nOn 19 Jun 2015, at 11:27, moka notifications@github.com> wrote:\nIn src/statemachine/statemachine.js https://github.com/playcanvas/engine/pull/326#discussion_r32817834:\n\n\n* @description Called when a state is entered\n* @param {String} previousState the state that is being switched from\n* @param {String} state the current state\n*/\n  +\n/**\n* @callback\n* @name pc.StateMachine~exit\n* @description Called when a state is exited\n* @param {String} newState the state that is being switched to\n* @param {String} currentState the state that is being switched from\n*/\n  +\n//For each loop\nfunction forEach(collection, fn) {\nif (Array.isArray(collection)) {\n  Array.isArray is part of ECMA6, is it polyfilled?\n  Based on ECMA6 Compatibility Table https://kangax.github.io/compat-table/es6/#Array_is_subclassable_Array.isArray_support it is almost not implemented by other browsers.\n\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32817834.\n\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Agreed. You\u2019ll have to point me in the direction of how to do that update management - is there somewhere it already happens?\nAlso on reflection, I\u2019m going to move all of the curve and curveset stuff to interpolation.  Its as good a home as any and keeps everything else pretty clean.\n\nOn 22 Jun 2015, at 12:58, David Evans notifications@github.com wrote:\nIn src/statemachine/statemachine_coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32926757:\n\n@@ -0,0 +1,225 @@\n+pc.extend(pc, (function () {\nWe could probably move co-routine into core_coroutine.js. Especially if we remove the dependency on the component system.\n\nThis is broader than just state machines.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32926757.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Yeah I got it. Ok.  So should I just roll back the changes to Curve,CurveSet,Entity and then make that change or should I fork again and start a fresh - thinking that sounds a bit cleaner?\n\nOn 22 Jun 2015, at 13:11, David Evans notifications@github.com wrote:\nIn src/statemachine/statemachine_coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32927475:\n\n@@ -0,0 +1,225 @@\n+pc.extend(pc, (function () {\nIn framework_application.js in the constructor. I'd do something like this:\n\nthis._statemachineManager = new pc.StateMachineManager();\nThen in update()\nYou could just call\nthis._stateMachineManager.update(dt);\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32927475.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Just doing this.  In pc.Coroutine - what would be the right way of getting a coroutine manager for the current app? Pass app as a parameter? Use pc.Application.getApplication()?\n\nOn 22 Jun 2015, at 13:11, David Evans notifications@github.com wrote:\nIn src/statemachine/statemachine_coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32927475:\n\n@@ -0,0 +1,225 @@\n+pc.extend(pc, (function () {\nIn framework_application.js in the constructor. I'd do something like this:\n\nthis._statemachineManager = new pc.StateMachineManager();\nThen in update()\nYou could just call\nthis._stateMachineManager.update(dt);\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32927475.\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. Further thoughts on this.  It feels like to avoid the singleton issue we should switch my pc.interpolate to be just the inline ones. \nWe would then add an app.coroutine call to create a new coroutine and associate it with the manager.  For over time interpolation it gets more tricky: we can provide an interpolate namespace on Coroutine to do coroutine based interpolations.  In this way pc.interpolate needs to know nothing about app and coroutines and becomes a utility for the others - however of course, this pushes interpolate towards core functionality if it comes out of a coroutine - now in core - which I\u2019d guess you might want to avoid.  This is a primary use case though for less skilled developers so I\u2019d guess we want something really obvious.\nThe only other choice would appear to be passing a coroutine or an app to pc.interpolate.overTime.xxx which feels cumbersome.\nSo perhaps?\napp.coroutine.startCoroutine(fn, opts)\napp.coroutine.interpolate.easeInOut(start, end, time, fn);\nWe can obviously keep\nentity.startCoroutine(fn, opts)\nAs this already knows it\u2019s app\nWe could go all Unity and only allow coroutines on Entities but this causes its own set of challenges and a vast amount of confusion on Unity Answers.\n\nOn 22 Jun 2015, at 16:40, Michael Talbot mike.talbot@3radical.com wrote:\nJust doing this.  In pc.Coroutine - what would be the right way of getting a coroutine manager for the current app? Pass app as a parameter? Use pc.Application.getApplication()?\n\nOn 22 Jun 2015, at 13:11, David Evans notifications@github.com> wrote:\nIn src/statemachine/statemachine_coroutine.js https://github.com/playcanvas/engine/pull/326#discussion_r32927475:\n\n@@ -0,0 +1,225 @@\n+pc.extend(pc, (function () {\nIn framework_application.js in the constructor. I'd do something like this:\n\nthis._statemachineManager = new pc.StateMachineManager();\nThen in update()\nYou could just call\nthis._stateMachineManager.update(dt);\n\u2014\nReply to this email directly or view it on GitHub https://github.com/playcanvas/engine/pull/326/files#r32927475.\n\n\n\nSee our 2 minute video on DBS bringing gamification to Singapore here: \nwww.3radical.com/resources/videos/#DBSVideo\n3radical Limited, 1 Friary, Temple Quay, Bristol BS1 6EA, England.\nT: +44 117 344 5008 \u00a6 F : +44 117 344 5188\n3radical Pte Ltd, 3 Church Street, Level 8 Samsung Hub, Singapore 049483.\nT: +65 6408 3711 \u00a6 F : +65 6408 0101\nwww.3radical.com\n3radical Limited is a limited company registered in England and Wales \nunder number 7872556.  The registered address of 3radical Limited is 1 \nFriary, Temple Quay, Bristol BS1 6EA, England.\n3radical Pte Ltd is a registered in Singapore under number 201312239K.  The \nregistered address of 3radical Pte Ltd is 51 Goldhill Plaza, #07-10/11, \nSingapore 308900.\nThe information in this e-mail and any attachments may be confidential.  If \nyou are not the intended recipient, please notify the sender as soon as \npossible and delete any copies. Unauthorised use, dissemination, \ndistribution, publication or copying of this communication is prohibited.\nAttachments to this email have been checked with virus detection \nsoftware before transmission, however you should carry out virus checks \nbefore opening any attachment. 3radical Limited and 3radical Pte Ltd \naccepts no liability for any loss or damage which may be caused by software \nviruses.\n. ",
    "robknopf": "I'm not seeing a problem on my other Android devices, just those two.  I have an S6 I can test later today, but FWIW, the same browsers on the same phone (Note 4) are displaying other WebGL content such as ( http://labs.gooengine.com/pearl-boy ) without an issue. \nMultiple page refreshes will eventually let me into Tanx, but the tanks are not rendering.  My simple test ( http://playcanv.as/p/SnveiZwO ) is also failing.\nAnything I can do to help ferret this out?\n. ",
    "scarletsky": "Any updates about this issue?. Hi guys, is this issue solved ?. @willeastcott Sorry for the delay.\nIf you want to publish your libraries to npm, you need to register an account in npm. And then you can publish whatever you want to it. Other users can download it by npm install xxx.\n\nCurrently, the build.js file generates a package.json. What is that? Should we be checking it in?\n\nGenerally, we should put the package.json at the root of the project. If you put it at subfolder, developers would consider it as the submodule of the project. But in playcanvas/engine, the build folder is just the build folder, not any submodule of the project. So I think we'd better put the package.json at the root of the project.\n\nIf we do, we'll have the engine version number checked in, which means we must edit the package.json every time we do a release.\n\nYes, this is very common in Node.js usage. As developers can specify which version they want to use. What a library author should do is just to update the version of package.json and then publish to npm, that's it.\n. I've add umd-wrapper for the output file, so that developers can require playcanvas in commonjs environment without error.\nBut the cons is that require jsdom as dependences.. @JarnoVgr \nThat's very strange. When I publish 0.220.0, it works. However, I merge 0.221.0 and publish a new version, it sucks... I do have a .npmignore, but the build/ folder is always missing when publishing... \ud83d\ude2d  \nI think JSDOM should be a optional deps too.. @JarnoVgr \nI know why the 0.221.0 release miss the build/ folder now. Because I run the build process in the master brunch, and it generate package.json. When I switch to my brunch, the package.json is still in build/. When npm pack, it will ignore the folder which contains package.json.\n. @Tatsujinichi Do you have any idea how can we require playcanvas engine in Node.js environment?. @ronkorving \nI think the main problem is how can pc run in Node.js environment. \nThis PR use jsdom as optional dependence, which will include a lot of dependencies when you run npm install @scarletsky/playcanvas. Maybe I should remove the jsdom, and tell people to use webpack or rollup or other build tools to inject pc into their project.. @ronkorving You can also use the non-minified version in your development, and minify it with uglifyjs by yourself.. @willeastcott Do you agree with the jsdom as optional dependence ? . @willeastcott \nSome articles say webpack is better when you build application, while rollup is good for libraries.\nThe PlayEngine framework also use rollup as build tool. \ud83d\ude03 \nhttps://github.com/scarletsky/playengine/blob/master/rollup.config.js. @willeastcott Done!. Oh, I see, thanks will.. This issue will affect the engine users.\nAs an engine user, I will save the material data which bumpiness is named bumpiness. But when I init the material, the bumpiness will not work until I renamed it to bumpMapFactor... \ud83d\ude22 \n. @willeastcott \nI am writing a framework for playcanvas engine, I need to manage all entities by guid. \ud83d\ude03 . @willeastcott \nHow can you set specific guid for a entity ? \nThis is really common when loading a scene.\nJust set entity._guid ?. Oh, so I should not depend on Entity.guid in the scene.. That is, now I save the entities by the following structure:\n{\n    entities: {\n        guid1: Entity1,\n        guid2: Entity2\n    }\n}\nAnd when I reload scene, I will regenerate entity, and make sure the entity has the same guid.. Yes, I know. I am doing the same thing to make sure the entity has the same guid.\nAnd now I don't use scene loader, because I have my own data structure.\nI open this issue to ask why I can't get the entity's guid by getGuid. As I am using TypeScript to write my framework, and using the types. The types is generated by @Neoflash1979 , and I notice the getGuid method is marked as private method.. @willeastcott I am not familiar with the new layer system. So I prefer to  remove the code in src/scene/immediate.js. \ud83d\ude22 . @willeastcott Remove the prepublishOnly means you should manually run npm run build && npm run closure before npm publish.. @willeastcott It seems we use google-closure-compiler to concat files only ? Maybe we can find another choice.. @mcmorry Yes, just like the event in dom: https://developer.mozilla.org/en-US/docs/Web/Events/blur. @daredevildave \nWithout the \"blur\" event, you should have a fullscreen transparent element component to simulate the \"blur\" event. This is really tricky. \ud83e\udd23 \n. Here is an example:\nhttps://scarletsky.github.io/playengine/gizmo-light/index.html\nSteven notifications@github.com\u4e8e2018\u5e744\u670820\u65e5\u5468\u4e94 \u4e0b\u53486:39\u5199\u9053\uff1a\n\n@scarletsky https://github.com/scarletsky Do you have an example of how\nyou would use the blur event? How do you know what is in 'focus'?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/1164#issuecomment-383057640,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACRo9ehTV8jAwtvofS6XtyjE70g0J6GMks5tqbrigaJpZM4TJj4Q\n.\n. It seems THREE.js solve this by setting gl.frontFace.. Ignore it. I know why.. Maybe it is related to this:\n\njs\nvar _defineFloat = function (obj, name, defaultValue, func) {\n    var priv = \"_\" + name;\n    obj[priv] = defaultValue;\n    Object.defineProperty(StandardMaterial.prototype, name, {\n        get: function() { return this[priv]; },\n        set: function (value) {\n            var oldVal = this[priv];\n            var wasBw = oldVal===0 || oldVal===1;\n            var isBw = value===0 || value===1;\n            if (wasBw ^ isBw) this.dirtyShader = true;\n            this[priv] = value;\n        }\n    });\n};\nWhen setting opacity from 1 to 0, wasBw is true, isBw is true. wasBw ^ isBw equals to 0.\nSo the dirtyShader do not update ?\n. \ud83d\ude31 I make a big mistake.... I am writing a THREE.js to PlayCanvas parser. \ud83d\ude03 The THREE.js geometry contains tangents data. \nWhat's more, calculating tangents in client/browser can be slow if the model is complex.\nI've tested on models which contain 1M vertices... The JsonModelParser is really slow when calculating tangents.. @ronkorving You are right.. Done.. ",
    "linkmauve": "I just signed it, after getting the agreement from my company.\n. Hi, what is the status of this pull request?\n. ",
    "MONKATRON": "+1\n. ",
    "yard": "Wouldn't it make more sense to actually combine meshes on CPU (baking transforms) and submit to resulting mesh to GPU instead? This should perform better for hundreds of meshes - consider a sprite-heavy game where a lot of quads are rendered, for instance. \n. @Maksims re combining on CPU \u2013 actually that's how Unity works IIRC. Making batching work in the shader introduces a few challenges indeed, namely: all materials have to be aware of it (which requires adjustments to all shaders), it's required to keep an eye on the number of objects batched (due to limits on uniforms count / sizes). \nI appreciate merging meshes on CPU can be a significant performance overhead, especially when it comes updating vertices dynamically as it will involve parts of \"mega-mesh\" to be recalculated, but that's something worth testing I think. Having batching be performed in runtime on CPU would be great from usability perspective: meshes sharing the same material will not require any amendments and will work out of the box, which is quite useful when textures are grouped into atlases wisely.\n. I think transform feedbacks can be utilized to offload actual mesh transformation onto GPU - however for the case of highly dynamic meshes the overhead of interacting with GPU might eliminate the win from math. \nRe comp cost for big meshes - well, I guess we have an upper bound of 65k vertices per mesh anyway, so it's quite easy to test. Plus, we can update only parts of supermesh (affected by transform change) which can save a lot. \nThe part re huge aabb ia valid, but is easily solvable by tags or smth - we can always give a control on which meshes to batch to together in some flexible way. \nAs for realtime vs static impl - well, being runtime is the whole point of dynamic batching, and tools can utilize it for precomputed approach.\n. Just my 5 cents here: when I did a test fix on the engine I did preserve the logic of keeping the actual values in data hash \u2013 I guess that's why it just worked. Wouldn't it be a good idea to start with this simple fix?\nP.S. Totally agree with the intent to remove data storage \u2013 at least 1 extra property lookup upon getting / setting ANY property seems like an overhead. Same for callbacks \u2013 the do take up quite a bit according to profiler.. An immediate problem that comes to my mind and might be worth noting is that frustrum of shadow camera should have some padding around shadow casters' BB \u2013 otherwise (due to CLAMP_TO_EDGE sampling mode) the shadows might spread further from the end of the actual projection.\nAnd I believe the questions like Cascading Shadow Maps etc are \"not for now\"? :). \"Per-object\" shadows sound great, I was thinking of smth similar - maybe clustering objects somehow? This would complicate applying shadow though - so per-object approach is good enough I think. Well, I think starting with focusing on shadowcasters is probably the way to go \u2013\u00a0replacing the notion of \"shadow casters\" with a more narrowed set of objects would gradually optimise the algorithm down the road.\nBVH tree is a great idea \u2013\u00a0actually, I've been thinking that the whole scene hierarchy should be somehow packed in an R-tree or smth to allow efficient geometry queries; a hashmap with layer -> list objects to be maintained etc. Just looking through the code of the engine and these filter-loops are everywhere \u2013 but that's for a separate issue.. Hey,\nAppreciate the PR is huge, but you know... I started with small changes and they required more and more to produce smth more or less finalised.\nHappy to amend things as per your comments of course.. Yep, that's exactly what I was trying to achieve :)\nAs for needing the Mat4 \u2013 technically there are 4 floats for U, 4 floats for V and (to make things unversal) same 8 floats for source texture region to describe the 9 patch area, all totalling up to 16 floats.\nDo you have any ideas on how to bring this number down?. Not quite, you might want to pack the texture region to use (meaning you also need leftmost, rightmost, topmost and bottommost uv origins).\nI appreciate this can be handled by Tile and Offset params though, but becomes slightly messy to manage separately.. @Maksims thank you for the review \u2013 will work through your comments and update the PR.\nOne question is re input system: do you have any drafts for it? What I was trying to achieve is to provide a simple UI-centered API for touches and clicks \u2013 and mouse and touch systems of playcanvas are actually quite different in terms of interface (which is fine as touches aren't mouse pointers). Do you have a any high-level idea on how this can be re-used / designed in the best possible way?. @guycalledfrank I remembered why 6 floats aren't enough: you need to know lower and upper bounds of UV coords as in fragment shader you have only current varying value. Imagine you said the width to be 0.1 U unit and the fragment shader sees a U coord set to 0.15. Does it mean it's 0.15 U coords into the texture already or it actually started at 0.1 U coord and only advanced 0.05 so far?. @Maksims @daredevildave got it \u2013 no probs, will split into separate PRs.\n@daredevildave re your comments \u2013 I believe we will discuss each specific point in the corresponding PR then.\nP.S. Please don't delete this PR just yet \u2013 I am afraid @Maksims comments will be lost and there are quite a few that are applicable anyway.. Technically you are suggesting the right thing, but the devil is in certain details, as usual.\nI've been playing with master branch on that and found a few issues with the current implementation:\n\nAnchor offsets aren't stored explicitly anywhere, and rely on properties like _width and _absLeft upon setting/retrieval. The most obvious implication is this code:\n    panel.addComponent('element', {\n        anchor: new pc.Vec4(0, 0, 1, 1),\n        pivot: new pc.Vec2(0.5, 0.5),\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        type: \"image\",\n        textureAsset: panelAsset\n    });\n    Which will not work (as there might be no parent yet or the width might not computed) \u2013 please mind I did fix element/system.js to pass these props on before testing it :)\nFor some reason pivot point also takes part in this computations. While I do appreciate it might be a \"by design\" thing, I still believe it's much more reasonable to separate layout box (driven solely by anchors and corners) from pivots and transforms: you don't want to mix those and surely you don't want changes to transforms (for animation purposes) affect the layout box.\nSetting pivot point changes position, which means pivot does something other properties do. If you want to change the position, why don't you change anchors/left/top/bottom/right? And it's not about pivot being relative to the size of an element \u2013 the former properties do allow for that as well.\nMinor, but still: you use a single property for anchors, but went for 4 properties for corners and that's why I introduced borders property. Just being consistent, you know :)\nIt might sound super-minor, but the whole computation logic becomes a bit cumbersome, meaning it is potentially prone to errors. Tying up pivots, dimensions and localPosition not only makes things look a bit complicated but also introduces some challenges, i.e. how to I modify localPosition once pivot is set? I cannot write to it as it's driven by _onScreenResize method at least. And will this play nicely with complex transforms, which would alter rotation and position of the entity? I think you get the idea. With the changes suggested in the https://github.com/playcanvas/engine/pull/816 the local transformations are identity unless you modify them, and layout box is computed solely from the element's properties, making things clearly separated.. Hey @daredevildave,\nSorry to bother you during holidays \u2013\u00a0but maybe you have any comments on the above?. Hi,\n\nNo probs \u2013 holidays are holidays :)\nFirst of all, in your example (\"for example if I move pivot from left edge to right edge an image element would move left by one width\") \u2013 I think that's the issue. You are moving pivot and thus change the position of the element. But why? You already have anchors and top/left/right/bottom affecting the position. Wouldn't it make more sense for the pivot to define the origin for transforms, and leave positioning (sans localPosition, of course) and sizing to layout mechanism?\nChanging local transform with modifying left/top/right/bottom means you lose the flexibility to animate elements as local transform might be \"dirty\" making it difficult to animate the element to/from designed position. What I propose is to keep local transform operating \"around\" pivot point and make it be identity unless modified explicitly. This way you design the interface by placing elements and then animate to show, hide, rotate and do whatever you'd like. Resetting local transform to identity will put the element back and that's it.\nAlso, you aren't entirely correct re width and height driving positioning: width and height can be computed from corners, but not the other way around. The easiest example is an element without a parent: having undefined width and height it can still ask for specific corner values, and this shouldn't be a problem.\nAs for being very similar \u2013\u00a0as I said, the devil is in the details, and I just propose to eliminate these details :). Hey @daredevildave, sorry to bother you - any thoughts on the above?. Re invalid width / height \u2013 my point here was that the position of the element should be defined by corners and anchors, and should not depend on the presence of parent. What's wrong with creating a button, telling it to take full parent rect sans 10px marging, but adding it to the parent rect later?\nRe pivot: technically the same applies here. If we lay elements out using anchors and corners, why would the positioning depend on the pivot? Consider two screenshots from Unity illustrating exactly this:\n\nPivot at bottom left corner: https://www.dropbox.com/s/od14ng22sn51p3u/Screenshot%202017-01-18%2018.47.35.png?dl=0\nPivot at top right corner: https://www.dropbox.com/s/x0fyh2059agq18c/Screenshot%202017-01-18%2018.47.45.png?dl=0\n\nAs you can see moving pivots around doesn't change the corner or anchor values, neither does it move the component (disregard float precision errors in the inspector).\nThe results of rotations, for instance, would, however differ for both cases:\n1. Pivot at bottom left corner: https://www.dropbox.com/s/cczbodsv7oqnxx5/Screenshot%202017-01-18%2018.49.39.png?dl=0\n2. Pivot at top right corner: https://www.dropbox.com/s/i4vgzwmrf7jzdkm/Screenshot%202017-01-18%2018.49.55.png?dl=0\nAnd this is totally fine (I think): you lay your interface out using corners and anchors full stop; then you move pivot point as you wish and tune local transforms to animate things, tweak the position etc.\nI should admit, however, the local position does get changed when pivot moves around \u2013 my mistake; but mind one wouldn't normally modify local position of UI elements \u2013 again, you have rect transform for that (and that's why in Unity you don't even see it unless switched to debug inspector mode).\nHope this makes sense :). I might've missed smth in my tests, but I clearly remember that changing pivot point did move the element (although I didn't change anchor). Is it supposed to be like so?. Hey,\nJust did play with the page. Generally looks sane, but it looks like I don't quite get what's the purpose of pivot point in your example. It does move element around when corners property is unchecked (not sure what it means logically though) and doesn't seem to change position when corners are set. Position coords behave the same \u2013 no change when element is driven by corners.\nIs the behaviour expected or it's some sort of a bug?. P.S. Another thing that is quite easy to implement in the shader and much more difficult to achieve with 9 quads is tiling mode: when the center of the image gets tiled instead of being scaled (comes in useful for certain types of artwork). Hi guys (@guycalledfrank and @daredevildave),\nJust a kind reminder about the existence of this thead :). You know, my question is quite generic: in most instances you either have something right at your fingertips or you quickly reinvent the wheel. The point is to put something easily accessible - not in the engine maybe, but still straightforward to find and use. \nKeeping this stuff solely in the editor is a politically biased decision as it prevents guys using these things from outside (when no editor is involved). @guycalledfrank and @daredevildave \u2013\u00a0what do you think?\nIf debug define is OK, I would wrap the code into it before submitting as a PR.. I think get/set functions are like \"hello from Java\" in most cases as we have properties, so let's try avoiding them. \nHowever, I would go for your suggestion here as I probably don't know the whole situation. . So, what do we do? Assume one would call the setter of the property or get the dirty flag back?. It's back now :). As you've probably noticed I usually refer to how stuff works in Unity when there's a similar functionality :)\nSo, in Unity we have animation curves, which seem to be Cubic Hermite spline. Each curve controls a scalar value (with the exception for boolean properties of course), meaning even positions and rotations are animated on a per-component basic. This gives a very straightforward and universal approach to animating properties as creating the math for controlling curve shapes for scalar values allows to re-use the same logic for animating both transforms and user-defined properties.\nThe only tricky thing to consider is, of course, rotations: while you can interpolate Euler angles pretty safely for rotating around 1 axis, for the case of needing perfectly smooth rotations a spherical interpolation has to be utilised. However, spherical interpolation doesn't allow for rotations of over 180 degrees around a given axis, meaning it's required to maintain intermediate keyframes for such cases. In case of Unity this is done by the editor \u2013 whichever type of interpolation you choose, internally the curve just controls different properties of a rotation (either quat's coords or euler angles coords), with the missing keyframes injected when needed. So it's really up to the way the curve data is going to be produced.\nAs for built-in curves of playcanvas, I am afraid they have a critical limitation \u2013 I don't see it supporting custom tangents / control points on the curve, so they probably have to be extended. The other concern I can immediately see is the way the curve computes its values: it seems to be quite computational-heavy (I refer to https://github.com/playcanvas/engine/blob/master/src/math/curve.js#L107), so for animations that run at FPS rate it might require some optimisations.. I see your point, this way there is probably no point in bringing this up now :). Hi @Maksims,\nSure thing, will go over styleguide tomorrow. \nAs for testing - sure, I did run the examples and a few my projects and noticed no issues; I don't think there should be any as the changes do not affect the behaviour in any way - but the more testing the better :). Hi @Maksims,\nI have updated the pull request to comply with the style guide.\nPlease ping me if I am still missing anything.. Hi @Maksims,\nI brought the logic back and added the fallback as per your suggestion. It seems to be working for me \u2013 please check on your side and let me know if you have any further issues.\nThe only thing I feel a bit uncomfortable about if that _buildAccessors and buildAccessors are quite similar in terms of logic, but I didn't find a way to use one method only \u2013 is it a big deal?\nP.S. \u041d\u0435 \u0437\u0430 \u0447\u0442\u043e :). Hi @Maksims,\nYou were right \u2013 I just missed getters/setters logic slightly \u2013 but nvm and please check the latest version of the branch with the fix applied.. My please guys and thank you for your great work!. Thank you for the hints. Let me try the fallback approach - I will post the results shortly and we can decide if it's worth mainlining. \nBtw I've recently encountered this article - http://wdobbie.com/post/gpu-text-rendering-with-vector-textures/. The demo looks particulary impressive; I was very surprised such a sophisticated shader actually does perform quite well in terms of performance. Would be curious to hear your thoughts on this one :). Hi guys,\nI've been playing with various tweaks to fonts to make it look better in smaller sizes.\nOne thing I noticed is that example SDF texture provided with playcanvas engine has non-uniform scaling on chars. While I appreciate smaller symbols (like + or *) might benefit from having more pixels to store SDF values in, it looks like non-uniform scale actually damages text lines as different letters (say, \"i\" and \"A\") get different \"precision\" and look blurry because of that.\nI have tried exporting font glyphs at the same scale and noticed an immediate improvement in text quality (not ideal still, but it's WIP anyway) \u2013 do you guys have any specific motivation for non-uniformly scaled glyphs?. Ok, so there seem to be 3 parts preventing glyphs from rendering properly:\n1) SDF map with non-uniform scale of chars \u2013 easy to fix, but need to check the effects on smaller chars\n2) Sub-pixel SDF bitmap placement \u2013 easy to fix as well, doesn't seem to affect anything\n3) Sub-pixel glyph quad placement \u2013 trying to work it out in the vertex shader right now. This makes the text to move in \"steps\" upon geometry/canvas resize, but makes small text look much much better.\nI will post my results for your review here shortly. . Ok guys, he's the progress I've managed to made.\nChanges and notes\n1) Set the uniform scaling of glyphs upon MSDF export\n2) Made translation of glyphs be pixel-perfect\n3) Added bitmap version of the font as alpha channel, so that MSDF texture contains both signed-distance field and bitmap glyphs.\n4) Texture has mipmapping enabled with linear filtering.\nThe results\nMSDF shader: https://www.dropbox.com/s/uifvxi9gkw6wqw4/sdfs.png?dl=1\nBitmap shader: https://www.dropbox.com/s/k4w57zhgz26shwf/bitmaps.png?dl=1\nConclusion\nBitmap fonts look more readable at smaller sizes, while SDF shine at bigger scale.\nCurrent concerns\n1) Something still doesn't look correct to me. The bitmap font looks slighly too blurry, but that's because it's almost impossible to have 1:1 correspondence between texels and screen pixels. Maybe that's fine (smaller sizes will have a lot of aliasing anyway)\n2) SDF could've looked better \u2013 just checking if alpha channel damaged SDF data in any way.\n3) As far as I know Safari and some versions of IE premultiply alpha upon loading textures with transparency, which could break SDF data. Do you guys know if this is still true and, if so, if there are any workarounds for this?\n4) I feel there is an easy way to switch rasterization mode in shader so that texts of big sizes, but placed far away from camera would use bitmaps rather then sdf eliminating the need to hint that through code. Apart from using derivatives, if there any way to do so?\nLooking forward to hearing your thoughts.. Hi @daredevildave,\nThat's the same size (being scaled and down) residing in alpha channel of MSDF texture.\nThe texture thus looks like https://www.dropbox.com/s/cqnezaws3hz0lwq/Arial-MSDFA.png?dl=0 (previously it was https://www.dropbox.com/s/o1klbecob1ydu15/Arial-MSDF.png?dl=0). Well, you are almost right: the MSDF texture has 32x32 glyphs, making only the last 2 lines benefit from SDF - but that's clearly visible if you look closer at the glyphs: with SDF char edges don't become blurry, while bitmap ones do (just make sure you are looking at 100% zoom in both cases). I can prepare a test with even bigger glyphs, but nothing new is hapenning here and the results are pretty much expected; the point is visual outlook for smaller font sizes.\nNot sure I understand your question, specifially \"what the maximum font size 2x scale up\"?. Not really, the max font size is 45x45 (using 32x32 char atlas, giving 1.4 scale ratio) and to my taste this is already slightly too blurry (check out https://www.dropbox.com/s/70uz5udnu1x67i5/bmp-vs-sdf.png?dl=0)\nSo, two questions that are in the way of getting this working properly:\n1. Is texture premultiplication still the issue in Safari? Can it be worked around?\n2. Do you have any ideas of how to detect texel-to-pixel ratio in the shader to be able to switch rendering mode automatically (to work around cases when 100px char is placed 100m away from camera and takes 10px of real screen estate)?. Well, SDF is not a silver bullet for fonts, neither bitmap are. I still feel the approach suggested by http://wdobbie.com/post/gpu-text-rendering-with-vector-textures/ is way more suitable for fonts. \nAs for #2, maybe there should be choice of 3 then? Like \"use sdf\", \"use bitmap\" or \"auto\"? However, I am not sure if there is any way other than derivates to make auto work.... @daredevildave yeah it's just that SDF shader works without derivates as well \u2013 and \"auto\" matching obviously won't. However, it seems ok to just wrap this into a define (just like sampling does).\nSo, do you guys want me to prepare a pull request with the things discussed above?. Hi,\nThe PR basically deals with the following:\n1) Amends MSDF shader to take alpha value from alpha channel based on fwidth value of texture sampler (if it's less than X it switches to bitmap font)\n2) The text element gets a flag indicating whether to sample font texture as msdf, as a bitmap or decide automatically (based on point 1)\nAnswering your questions:\n1) I was just rasterising glyphs from a given TTF using ImageMagick and setting the font size to be the same as for msdfgen (so that glyphs \"match\" each other) and them combining the images using ImageMagick's output as alpha channel and msdfgen's one as color channels\n2) The fallback is purely for convenience purposes to make fonts look OK in most situations. Surely enough, achieving perfect look might force you to go bitmap-only path, but that's why point 2 in the PR allows you to force bitmap rendering; just generate a bitmap font, set this flag up and enjoy. If you don't want to deal with it and/or want the same font to look good across multiple scales, the auto will serve the best\n3) The transition is of course visible, but I don't think it should ever \"flick\" (unless you are animating elements / resizing a browser window and the size of the glyph changes around critical point \u2013 but that can be worked around by either forcing a certain rendering type or amending the animations to deal with slightly bigger / smaller font sizes).. Hey,\nAs for full-color bitmap \u2013 that's a setting for asset for sure (setting this up as a uniform to the shader would make it super easy) \u2013 as this doesn't change at \"runtime\" (here I am referring to screen scaling, moving stuff around etc).\nAs for the sampling setting \u2013 I bet it's better to have in the text element AND in the asset. Basically, you can set the asset up to use bitmap, or MSDF or auto, but for some specific elements fall back to bitmaps for instance \u2013\u00a0and in this case you definitely don't want to create a separate asset. So, assets holding the default plus elements overriding it (if set) makes the most sense to me.. Cool! Closing the issue then :). Yeah, that's what I thought. But it never gets called in non-UI shaders \u2013\u00a0will it have any effects post-linking?. It's called \"once\" \u2013 upon actually chaiging the masking, the material or whatever else. However, agree re GC \u2013\u00a0will extract this to a field to be on the safe side.. Thank you for the hint, will do.. No probs, will change that.. This method is basically _sync method of entity \u2013\u00a0it's called upon transforms getting dirty. But I can definitely pre-alloc that.. Same :). Same object in fact.. I will check what we can pre-alloc \u2013\u00a0I guess pretty much everything. Thank you for the hint. This method is for debugging purposes only \u2013\u00a0drawLines is very very slow itself anyway, so I don't see a point in avoiding allocs here.... Totally agree with you, will change that.. Um... guess so, was a copy-paste from the old code :). It's avoidable \u2013 just the way it was done previously, so I retained it. If you agree, I would rather remove it as well.. I think the allocation will be here in all cases \u2013 as we aim to give the element touch/click coords in its local space. Pre-allocating things and re-using through all events is an option \u2013\u00a0just not sure if that's a good idea.. Np :). This is very rare and happens only upon text change (which is fine I think?). We cannot pass mouse event over \u2013 b/c mouse event has coords in screen space and it's much more convenient to have coords in element's space.\nIn addition to that, touch input is a thing to consider on par with mouse events \u2013 but it has incompatible interface to that of mouse event, meaning the user will have to bother with it.. Do you have thing abstraction extracted somewhere so that I can reuse it with UI elements?. ",
    "crazydadz": "Any ETA on that feature? xD\n. ",
    "Guam": "Thanks Will.  That issue thread is very helpful.\n. ",
    "Disorrder": "Any progress?. @willeastcott I'm using engine with Webpack. And this is only one library I should load from file :) I'd love to install it by npm with semver features. So,\n - you're not using requireJS or something like that, so of course you need to commit built version.\n - Doesn't matter folder name, just write in your package.json file main\n - playcanvas.js would be nice\n - you can also add job to your CI which will build and publish to npm each time you push to master (or specified branch). @vkalpias \n\nI think the easier thing here is for the developer to call initialize and postInitialize manually in their script if the script is enabled at a later time.\n\nThis is okay for temporary workaround, but why don't we able to call initialize on enable? \nFor postInitialize method we can create additional flag for app (f.e. app._intialized) and call all postInitializes when it becomes true. So, if you enable a script, and app.initialized is true, we also call postInitialize.\nAnother question: Why ScriptType is private? I'd like to create another ScriptType based on it with redefined or extended methods, that's would be very useful.. nice, thank you. Then I have some time to realize my idea about app's initialized flag in seccond commit.\nWell, it looks like I need my own repo for all my monkeypatches. I have at least 4 in my project yet :)\n\n But they are have about 2-3 overrided prototype methods, it's okay for my project. But I also need native ScriptType. I don't try to say you wrote bad code there, I just would like to inherit another kind of ScriptType from native)) Not sure, editor will find inherited scripts, I didn't tried. But anyway, this is theme for another discussion, sorry.\n. So if this code almost duplicates 1024 (nice number lol), I can close this PR, right?. Thank you very much for review my PR, this bug was too weird annoying until I looked through sources. If it finally works and you tested it enough, I can't wait to remove monkeypatches around it from my project :). Any progress here?. What difference between Entity and GraphNode?\nGraphNode has no _guid and cannot contain Entity as a child.\njavascript\nvar cube = new pc.Entity('cube');\ncube.addComponent('model', {type: 'box'}); // now cube has one GraphNode in children\ncube.children.length = 0; // nothing happens\nI also noticed GraphNode uses calculated global coords and maybe are used for rendering optimization. But why they are in children array? When I used official editor I even didn't know that GraphNode children are mixed with Entities. @kungfooman ah, thanks, I'll check! I think, you're right. ",
    "yaustar": "Doesn't look like it in the ammo.js repo :( : https://github.com/kripken/ammo.js/blob/master/ammo.idl\nHowever, there are enough bindings exposed in ammo.js currently that allow you to do filtering if that helps?\nLooking at PlayCanvas engine code, it looks like there was support for AllHitsRayResultCallback at one time: https://github.com/playcanvas/engine/blob/master/src/framework/components/rigid-body/system.js#L465\nPlayCanvas have a fork of ammo.js that you can submit a PR to if you want to have a go at exposing it yourself: https://github.com/playcanvas/ammo.js. Simplified version: https://playcanvas.com/project/432829/overview/simplified-particle-problem\nPress 0 to teleport the camera and particle effect to the origin\nPress 1 to teleport the camera and particle effect to 100 units in the Z axis\nPress Space to reset and play the particle effect\nParticle effect is set to 1 sec lifetime\nTo reproduce: \nPress 0, then press Space to trigger the particle effect. Effect plays.\nAfter all the particles disappear, press 1, then press Space to trigger the particle effect. Effect does not play (you may get one or two particles show up at the end). \nWait a couple of seconds, press Space again and particle effect will play like normal\n. I can try. In the meantime, you can use the Developer tools to 'fake' it.\n. Fixed replay button on PC\n. Thanks for looking into it!\n. Read a little more into touchEvents it looks like the advice is to use preventDefault() to prevent the default mouse events: https://developer.mozilla.org/en-US/docs/Web/API/Touch_events#Additional_tips\nAccording to the W3C, the default action is to perform a series of the mouse events: https://www.w3.org/TR/touch-events/#touch-interface\nLooking at the Safari Web Content guide: https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\nIt is possible that on iOS, no mouse events are fired because it doesn't find a clickable element?. Still needs testing on other projects. Tested against other projects and looks good. Would we want the controls for the camera in the extras though? Were you envisioning a folder for the orbit camera with all the input components?. Found a bug with the lerping on the yaw where it doesn't find the shortest route that I will need to fix.. Made an update to the documentation and also using temp variables using the tmp* naming convention.. This is an issue that I'm currently looking into as it is currently affecting all WebVR demos that I've tried (three.js and the examples on webvr.info) do not work unless polyfill is forced.\nYes, you are correct that since Chrome 56 now has implemented the WebVR API, polyfill is no longer needed. The issue is that only a small number of devices (I'm assuming the Daydream supported devices) are deemed to a be a compatible display for use with WebVR. . It's a http/https difference. WebVR is only natively enabled on webpages that are on the Origin Trial and only on https.\nThe tutorials pages are on http so WebVR isn't natively enabled and the polyfill is used instead.\nSo if you load http://playcanv.as/p/v6qoi4Yt/ (note it's on http), it will 'work' via the polyfill.. I've done the refractor to the way I mentioned in the first post and it does look a lot cleaner: https://github.com/playcanvas/engine/pull/904. With that in mind, what is the preferable option here for the shader?\n Adding an if condition in the shader (guessing not for performance reasons)\n Using a conditional assignment operator (supposed to be better than an if?)\n Some clever math in the billboard function based on parameters passed to the shader\n Some fourth option I haven't considered?. Closing this PR as I made a new one due to going in a different direction with the shaders:\nhttps://github.com/playcanvas/engine/pull/910. Taken on feedback from PR https://github.com/playcanvas/engine/pull/904\nNew branch as this went in a different direction with shaders.. Ah cool, in that case I trust your 3D math over mine and close this PR :) . Click on the code editor icon on the left or double click on a script asset.\nhttps://playcanvas.com/editor/code/512433. 'Fixed': https://playcanvas.com/editor/scene/587196\nUnlike Unity3D, when referencing an entity in the attributes, it isn't a relative path/reference. So when you clone the parent entity, it is still referencing the child entities of the 'prefab'/template.\nI think there is consideration to change this but in the meantime, I've worked around this by using entity.findByName.\nSo in a nutshell, the original code was disabling the child entity in the template, not the one in the clone.. Unfortunately, there was never a 'feature' that entity references could be relative (ie they were always absolute). AKA a clone of a global reference is still a global reference.\nIt's worth noting the entity.findByName only searches it's children if that helps? It means that the entity names only has be unique within the scope of the children.. In your project, the template has Child2 referring to the same entity as Child1\n\n. Hmm.. In the case of a reference to an entity that is above itself, (e.g a parent or a parent of a parent), it will result in a null reference.. 20 tables * 10 seats * 25 nodes = 5000 entities being created + any script initialisation calls of scripts attached to the entities.\nDo you need all 20 tables created at the same time (ie will everything you have cloned be visible at the same time?)? If not, you could stagger out/lazy load some of the entities over time.\nDoes creating a single table cause a significant performance hit?\nWhat happens when you remove the UI elements (as it looks like that's what eating up most of the frame)?\nAre you moving/reparenting any UI elements?\n. Can you you try the 20 tables without the UI elements (or disable them completely in the template)? \nDoes each table have it's own UI screen? Or is it adding elements to the same UI screen?. Has this been checked against the project templates and the Ball starter project?. PlayCanvas maintains a fork of WebVR polyfill to ensure that they have a known version in control. (External sites can get updated/removed/changed). You be best making a PR on that repo: https://github.com/playcanvas/webvr-polyfill. Honestly, I don't know :(\nMy guess is that they are pretty focused on the new 2D features and getting all the documentation ready etc\nI'm trying to find some time to make the PR myself but I've been pretty busy with my FT job and I can't test all the HMDs beyond cardboard and gearvr. :(. Looks like an editor only problem when you put an alpha'ed object against a skybox. When you launch the app, it looks fine.. @realityreflection You can test with an older engine via: https://developer.playcanvas.com/en/user-manual/scripting/custom_engine/. It doesn't work in the same way as Unity. In PlayCanvas, you have to explicitly have to listen the event. A tutorial can be found here https://developer.playcanvas.com/en/tutorials/collision-and-triggers/. There are examples in the page that I linked. \nSource project/editor here so you can see how the components should be set up on the entiitis: https://playcanvas.com/editor/scene/440154\nSource files here: https://playcanvas.com/editor/code/405871?tabs=4468766,4468765\nAnd you can see the list of events here: https://developer.playcanvas.com/en/api/pc.CollisionComponent.html\nSounds like you want collisionend (https://developer.playcanvas.com/en/api/pc.CollisionComponent.html#event:collisionend)\n```\nvar Collider = pc.createScript('collider');\n// initialize code called once per entity\nCollider.prototype.initialize = function () {\n    this.entity.collision.on('collisionend', this.onCollisionExit, this);\n};\nCollider.prototype.onCollisionExit = function (result) {\n    if (result.other.rigidbody) {\n        this.entity.sound.play(\"hit\");\n    }\n};\n```. The closest you can get to it at the moment is with the entity.clone() function as shown here in the documentation: https://developer.playcanvas.com/en/tutorials/procedural-levels/. Will has mentioned that it is something that is being thought about: https://forum.playcanvas.com/t/a-brand-new-upgraded-up-to-date-editor/9353/2?u=yaustar\nUntil then, clone() is your only option and you have to work with it. You could make a proxy entity that clones an existing entity via script quite easily. You won't be able to see the clones in the editor but can get you some of the functionality with minimal script work.. > willeastcott I have a question\nhow can I make new type in playcanvas?\nI like to store my object as prefab by dragging it in Assets\nPrefabs like Unity don't exist in PlayCanvas so you can't do this at the moment, hence the suggestions of the alternatives.  . > I know it.I like to develop it for my self because I need it\nbut I don't know how can I make it can you help me\nJust tell me what should I do to make this useful feature\nTo do something like this requires modifying the editor (which isn't open source nor part of the repo) and potentially the engine.\nThat said, the editor does have an undocumented and non-public API (which means that it can change at any time) that some users are exploiting as shown here: https://forum.playcanvas.com/t/released-free-aris-common-utilities/9138\nTL;DR The editor is not open source so you can't change existing behaviour or add new asset types. You can write a Chrome Extension/plugin to add some functionality as shown in the thread above.\nYour best bet is to create the prefab object as a JSON object and a script that references it. Then write a plugin like the user in the thread that allows you to update all entities in the scene that have that script attached.. > that's right I can use renderLine but It's better that playcanvas make it as builtin function\nWhat do you mean by a built in function? renderLine is part of the engine so it's already builtin?. I assume you are moving the mouse out of the window and releasing the button? (not 100% sure if it's the same as moving the mouse out of the context/canvas too)\nYou have to listen for the mouseout event on the window unfortunately to get around this. . Odd. Opera uses Chromium under the hood. Just tried this myself and it seems fine?\n\nEdit: Can you post a link to a public that has the issue and perhaps a GIF or video to make it easier for people to reproduce? . Can you post a link to the project that has this issue and the version of opera that you are using please?. Can you post the project overview page rather than the build please? This is so we can see how the project is setup and also access the source without it being minified.. Using your project, I can't reproduce the issue on my Macbook Air, Opera 58.0.3135.79\nDo you have any plugins install on Opera that might interfere with right click?. > Hoding Right click -> determine power\n\nDetermine power -> Shoot\nDetermine power-> Shoot\nDetermine power -> Shoot\nas right click not released Holding Right click is not work!\nyou can test this issue in my game\nhttps://playcanv.as/b/VYPBJFxe/\n\nSorry, I can't reproduce this bug in Opera on my Mac. It all works as expected.. I've reproduced the error in Opera. \nCan you go to preferences in Opera and see if you have Gestures enabled? \nIf so, this overrides the right mouse and drag to detect mouse gestures for the browser.\n\nDisable mouse gestures and it should work as expected.\n(Edit: Found this when I was wondering it if was a windows only issue: https://stackoverflow.com/questions/8520880/how-to-disable-opera-mouse-gestures?noredirect=1&lq=1)\n. The mouse gesture is part of the browser features so as far as I know you can't disable it via a script on the site.\nI recommend using the space bar as an alternate control for cue strokes or something similar as well as right mouse button (and also detect the browser to warn players). \nThis will also help laptop users on trackpads.\nYou could also disable cue stroke control after the shot is made or if any other button is pressed. That might be enough to get around this issue.. Please stop getting frustrated at the problem and indirectly, at the people that are trying to help you. \n\n\nPlayCanvas is using Ammo physics which is compiled version of Bullet. A well matured and long running physics library used for games.\n\n\nThis is a common physics problem for a lot of libraries including the one included in Unity.\n\n\nHave you enabled CCD on the physics like I mentioned in the forums? It's expensive but need for fast moving objects. Basically the object is moving so fast (more than its length) in each simulation step that it's going through the other objects. CCD does another broad pass to check for collisions.\n\n\n. As the conversation is going on in the thread here, this ticket can be closed. It isn't a bug with the engine really (beyond maybe exposing CCD options to the user)\nhttps://forum.playcanvas.com/t/physics-not-work/9432/15. Could this be inlined as it is only used once?. Done and useful to know. Done. On a class these size, you're right, I should be using the temp variables here and will change them.\nI'm just a bit conscious of a potential maintenance headache if/when the class gets bigger in regards to reusing global variables. e.g.\nfunctionA : function() {\n    tmpVecA.set(0, 0, 0);\n}\nThen on a later date, further down the file:\nfunctionSomeOtherThing : function() {\n    tmpVecA.set(1,2,3);\n    // some more code\n    functionA();\n    var length = tmpVecA.length();\n    // some more code\n}\nThe code won't work correctly and it's a bit of a headache to debug due to the use of same global temp variables whereas having temp variables dedicated to a function is arguably more maintainable.\nWhat do you think?. Yeah, don't worry.. The functionA was just a made up function name for the example.\nFair enough, changing it now. . Fixed.. I could use the tmpMat4 instead here I think:\nworldTransform = worldTransform || tmpMat4.setIdentity();\nthis._modelTransform = worldTransform.clone().invert();. Line 937 is in the else block of if (source) { (Line 929) so it can never evaluate to true.. Given the code on L149 where the pad devices are pushed on to the array, this would mean that pads would just grow in size every frame if a gamepad is plugged in?. ",
    "vasiliy-pdk": "I have just run into this:)\nTried to change the platform scale in the basic project. So mesh was scaled but collision model left the same. It's a static rigidbody, collision type is mesh. \n. ",
    "Tatsujinichi": "Also saw this, same as vasiliy-pdk.  Scaling individual dims appears to break static mesh collision.. I would like to see this happen as well, but I am not sure this is the right way to go about it.  Ideally you would want to have something like Rollup replace the current build.  The package.json should not be generated. IMO. Also check out webpack.\nOn Mar 18, 2018 3:44 PM, \"Will Eastcott\" notifications@github.com wrote:\n\nHi everyone. Sorry it took so long to merge this. Better late than never.\n\ud83d\ude09\nI'm also now wondering if we should move to rollup...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/931#issuecomment-373976555,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEyO7cd6Gxvjl9ClfJe1OZRDvd_EqncMks5tfgI0gaJpZM4NZ_rf\n.\n. Alright, filled it out.. Just running the project in chrome with the inspector open should trigger\nthe error after a few seconds.  The failing code appears to be the call to\nthe update function of a script.  After destroying.\n. @willeastcott updated. @willeastcott updated, removed changes to log.js. @willeastcott removed commented code. Sure, missed previous message.\n\nOn Mar 17, 2018 7:35 AM, \"Will Eastcott\" notifications@github.com wrote:\n\nDid you want to update this?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/1123#issuecomment-373863159,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEyO7dPDu-8WlGwfN8Ba-Ugua_2kbQWGks5tfD44gaJpZM4SiGPw\n.\n. @willeastcott think that fixes it, sorry for the delay.. this does not modify basename, maybe a mistake?. no one seems to use these anywhere.. did someone intend to use this for something?  Maybe a mistake?. Hmm, how can anyone access them from outside?. Ah I see, because of the way you guys build, all js files are concatenated directly.  Sorry, I was unaccustomed to that style.  I am used to those being module local variables.. Is there a reason len is used for this loop?. \n",
    "Mistale": "Thank you very much, that was quick!\n. ",
    "PsichiX": "@Maksims: ok, remove this merge request and i will make another one with complete addictions :)\n. @Maksims: ok, done :)\n. @daredevildave: ok, new agreement was sent.\n. +1\n. It's simple: when you acquire asset, then you'll get it's AssetRef object pointing on Asset - asset will be loaded automatically when first AssetRef will be obtained, then will be unloaded if all AssetRef objects will be released/destroyed that points to given asset. So all work about how to handle asset life-cycle is done by keeping AssetRef objects instead of it's IDs.\nYes, right now you can load asset on-demand, but as you've said: there is nothing that can work properly with unloading assets that are not used. And this problem is solved right in API that i introduced here.\n. When you have to preload some assets just for current level, then you acquire assets by tags (in my API: variants query), that returns you an array of AssetRef and you store that array in LevelController script on ::initialize(), and you release/destroy that AssetRef objects from stored array on LevelController::destroy() - with that you're making sure that those assets are always loaded when you're on given game level.\nThat's why using IDs as assets references is not good in this case - ofc, you can use asset ID to acquire given AssetRef and store it in object until object is not destroyed - like i said: using AssetRef instead of ID which cannot be tracked, but ID still is used to acquire asset.\nUnloading your way makes possible to accidentialy unload all asets by tag at any point of game logic. Unloading by reference just unbind that reference from it's asset and invalidate that AssetRef, so you're able to unload assets ONLY when there is no valid reference to it. For example: Make AssetRef pointing to one asset in two objects. in one of them you're releasing the same AssetRef twice, but after first one you're just removing one reference from asset, so another object is still able to use that asset. Another example: you've acquired array of AssetRef by tags/variants and at some point releases all of these in that array, but you're still in the same game level and some objects still uses those assets. They will be not unloaded when you'll release array of AssetRef from tags/variants. They will keep alive until objects that uses those assets will not be destroyed - again, you're free of problems with accidentialy unloads.\n. anyway, i will make a test project where i will show you that idea works :)\n. And that's what i'm looking for! ^^\n. ",
    "shaochun": "surely.\n. glad to help :)\n. ",
    "nakata0705": "Thank you for your review Will. That makes sense.\nI updated my branch and implemented properties as you proposed. Now AudioSourceComponent has currentTime and duration properties.\n. Hello Will,\n1. I believe I already signed to Contributor License Agreement for the\n   translation team. I included the github account when I submit. So this\n   should be already completed.\n2. This is an easy and handy method! I'm encountering an unexpected\n   behavior.\nI have been testing my API change with a modified spin cube example in my\nlocal disk. The new interface has been working well during this debug. So I\nsent a pull request.\nFYI: My local debug code is in...\nhttps://github.com/nakata0705/engine/tree/debug/examples/audio_test\nhttps://github.com/nakata0705/engine/tree/debug/examples/assets\nBut when I tried your method with my work-in-progress project in\nPlayCanvas, I noticed that the music just stops after changing the\ncurrentTime from the slide bar. I chased the issue and I realized that\nthere are two extra channel.pause() call from unknown location that didn't\nhappen when I run the modified engine code at local. I'm currently kind of\nin stuck. If you would think of any cause, that would be great!\nFYI: My work-in-progress that uses my updated engine is in...\nhttps://playcanvas.com/project/368712/overview/work-in-progress\nThis is the expected 1st channel.pause() call from the new interface.\nchannel.unpause() is called right after this as I coded in the new set()\nfor currentTime.\n[image: Inline image 5]\nThis is the unexpected 2nd channel.pause() call from somewhere. Somehow the\ndebugger doesn't display the call stack.\n[image: Inline image 6]\nThis is the unexpected 3rd channel.pause() call.\n[image: Inline image 7]\nIf I hit \"step out from this function call\" from the 2nd or 3rd\nchannel.pause() call, it goes to here. Currently I don't fully understand\nwhat's going on in this situation.\n[image: Inline image 10]\nOn Sun, Dec 13, 2015 at 7:31 AM, Will Eastcott notifications@github.com\nwrote:\n\nNo problem, Nakata-san! :) A couple of things:\n1. Please complete the Contributor License Agreement here\nhttps://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform\nso we can merge your PR.\n2. Please test your engine changes against your project. To do this, build\nthe engine (run 'build.py' in the build folder), run a local web server (in\na command prompt, navigate to the build\\output folder and run a local\nserver. python -m SimpleHTTPServer 51000). Then add\n'?use_local_engine=true' to the URL of your launched app running. Then your\nlocal engine will be used instead of the one on code.playcanvas.com\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/473#issuecomment-164268185.\n. Changed the name as advised. Please confirm.\n. \n",
    "cognitiveplus": "Approach 1 seems to be better indeed.\nCompound collision would be really great to have!\n. @willeastcott Offset / rotation would be a good practice anyway. A typical example is character with capsule collider. Characters usually have pivot on their feet, so right now adding collider with vertical offset requires creating a child entity and offsetting it. In majority of cases developers still need to adjust offset / rotation, but now it's done via child colliders. If we could move this workflow into a single Collision Component, that would be a little bit more convenient. The only challenge I see is how to make new Collision Component not bloated in terms of UI.\n. @Maksims \nIndeed, forgot about Sound Component UI.\nReimplementing Collision in the same way would be the most efficient way by me.\n. Turns out that happens if directional light is looking strictly down, i.e, with (0,0,0) rotation. If you rotate it slightly, for example to (-1, 1, 0) - the issue seems to get solved.\n. I mean it should stay the same relative to the world (i.e. top root node in the scene), but should change relative to the parent. Transform displayed in the editor is currently relative to the parent - and it should readjust itself based on the new parent transform.\n. Are we talking about in-editor reparenting or in-code? I'm totally fine with in-code reparenting as it is. My concern was only about in-editor reparenting!\n. ",
    "thomcc": "It specifically causes a crash when loading es6-shim after PlayCanvas in Safari 8.\nThey do check if it exists, but they also check to ensure it works exactly as specified in the ES6 spec, and override it if it does not. This is to work around implementation bugs in various browsers.  That said, yours do not because they don't throw when given a regexp (looking at your source, your implementations also don't convert this to a string, which could matter if you called it like String.prototype.startsWith.call(someNonString, ...), and there are probably other subtle errors as well).\nRegardless of whether or not I care about those specific changes (honestly I don't, and I think the likelihood of the differences between your implementation and the spec mattering are very low), I do want to use the rest of ES6 shim, and if it worked with my build process that would be ideal (as it is, I have to ensure that ES6-shim is included before everything else, which is inconvenient). \nIt's not a huge inconvenience, but given that you're shimming it and violating the spec in a few minor ways, (the subtle errors in the implementation), and one large way (setting it to non-configurable), I think it's worth fixing.\nAgain, I'm not saying you should remove them, just that you should leave them configurable and writable, which is how the spec says the property descriptor should be specified for methods (in this case, only configurable is necessary to fix my issue, but it should be a writable property as well)\nEDIT: oh, and you also don't take the search position argument for starts with, or the end position argument in ends with.\n. Done.\nOn Tue, Dec 22, 2015 at 8:47 AM, moka notifications@github.com wrote:\n\nCould you please sign this Contributors Agreement Form\nhttps://docs.google.com/a/playcanvas.com/forms/d/1Ih69zQfJG-QDLIEpHr6CsaAs6fPORNOVnMv5nuo0cjk/viewform,\nso we can merge your PR?\nThanks a lot for making a PR :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/playcanvas/engine/pull/488#issuecomment-166622142.\n. \n",
    "andreasplesch": "This looks really nice and is a great start. I imagine a complete description is a major job but would enable others to produce exporters. Materials next ?\n. ",
    "leonidas7L": "We had the same issue with shadowmapping artifacts on iOS, with the latest update issue seems fixed.\n. ",
    "phindle": "\"I propose the entity should maintain its global transform when being moved from one parent to another in the editor.\"\ndid you mean say \"I propose the entity should reset its global transform..\"?\n. ",
    "void-ecs": "This should be very easy to fix, just replace escape with encodeURIComponent in http.js but still not yet, after 2 years. And we have to use unescape on our server side.\nIs there any reason for not fixing this?. ",
    "aidinabedi": "Maybe MeshInstance.mask is better than .layer if you want to make say only a few particle effects invisible to a particular camera, but still keep others particle fx visible.\nAlso the camera property Camera.cullingMask is shorter than .layerCullingMask (thus fitting in better with the rest of it's properties? :).\n. I'll make a new pull request with typo correction and the changes discussed (use mask instead of layer).\n. Signed!\n. > 1, asset.file is a specific format and I don't think it is the correct object to pass around in this case. asset.data is general asset data (format defined by the asset type) and would probably be a better fit.\nI agree that Asset.data is better suited to be passed around generally. But in the case of Handler.load, I would argue that Asset.file might be the correct object, since it already contains properties (like hash) which you might specifically need when fetching resources from an asset server . However, as you point out it is definitely ugly (and maybe error-prone in the future) to fill it with arbitrary stuff. So Asset.data is more correct, although maybe both would be good to pass.\n\n2, The resource loaders are designed to be independent of the assets system until the \"patch\" method. This is so that users can use a simple call to app.loader.load(url, type, callback) and load resources without the boilerplate of creating assets. I'd like to keep that.\n\nI fully respect and support your wish to keep the ability to let users make a simple call to app.loader.load without boilerplate. That is why the new parameter is optional and it's the handlers responsibility to handle ;) it correctly. Just like when the url parameter in Handler.open is always null if called using app.loader.open().\n\n3, I would always keep the callback as the final argument. This would require a check in the function to skip the missing argument but I think the exposed API is nicer.\n\nI support that.\n\na. We're are planning to support \"asset variants\" for texture formats and LODs. It's not completely clear at the moment whether these would all be a single asset (1 id/url, 1 data block) or multiple assets (many ids/urls, many data blocks). For example, different texture formats can already be loaded differently as their URLs/extensions differ. Though this doesn't work for LODs. But if we add passing in asset.data, then we need to store all the information about variants in asset.data. Which I'm not sure is correct.\n\nBy adding Asset.data (or Asset.file) as a optional parameter in Handler.load, you would allow customers that need \"asset variants\" and LODs (like us) to implement it ourselves right now. Big new features usually take time to mature and design correct. In the meantime it would be great to have a workaround.\n\nb. I see no reason why procedural resources couldn't be created with the existing system. It would require a new asset type and handler combination, but it should all work.\n\nThe problem is that the procedural resource is generated asynchronously, based on seed input/value(s). Because the generation is async it must happen when it's custom handler.load is called. But how does the custom handler know which input values to use for this particular asset? Obviously it could load them from a file the url points to but that is completely unnecessary loading time for data that is small enough to fit in Asset.data.\n\nc. This is a valid case for adding additional information to the load request. This probably shouldn't be stored in asset.data though.\n\nI agree, this supports the case for passing both the Asset.data and Asset.file.\n\nd. This is also a valid case for adding additional information to the load request. It depends on your circumstances, does this data belong in asset.data?\n\nIt is an edge case. The additional information contains an override json object that is merged with the url-file content. I would prefer it to be in asset.file since in most cases our handlers forwards calls to built-handlers which expect asset.data be contain specific information.\n\nSo..., my feeling is we need to figure out how asset variants are going to work. @Maksims has been thinking most about this. Then if it still makes sense we many need to pass asset.data into the Handler.load method. Which would allow assets to specify particular methods of loading.\n\nI urge you to please add a workaround while the design for asset variants are being worked on. It is a completely valid and sufficient workaround to just pass Asset.data to load. It would help us and other customer to have workable solution in the short term. A great solution takes time and it's better to not rush big design changes. That is why I designed this PR as a non-breaking API, as a short term solution.\n\nAside: the asset.file.url field should support absolute URLs. This is a separate issue though, perhaps you could raise an issue for that?\n\nWill do!\n. Hello @daredevildave!\nHas @Maksims had a chance to look at this PR?\nI've been thinking more about this request, the use cases and the \"asset variants\" planned feature. We've actually stumbled upon a new even more important use case - which I'll explain below. First I must inform, that I unfortunately can't see that \"asset variants\" will be enough.\nIn fact, \"asset variants\" might help in only 1 of the 4 previously mentioned use cases, specifically texture LOD and alternative formats. The new 5th use case is a big one:\n- When you finish loading a non-preloaded asset, it is currently not guarantied to be completely loaded, since it may depend on other non-preloaded assets such as in the case of a material or model. This causes a big problem if the asset resource needs to be cloned (which it does in many cases, including ours). We need to create separate instances of a material so we can change color for isolated objects without changing the color for all objects sharing the material. However this will causes a race condition. If the asset (e.g. material, model) is cloned before referenced textures are asynchronously assigned, the clone will be incomplete. The best solution is thus to asynchrounsly preload all referenced assets needed by our material inside our custom MaterialHandler load function before it reports back to the callback parameter.\nThis use case together with our discussions, have made me realize that this PR has to be even more general. I have thus changed so that the 3rd optional parameter is the asset itself instead of just asset.file or asset.data. This is so that playcanvas can supports a wider range of use cases and make no assumption about whether the *Handler.load function should be limited to asset.file or asset.data.\nP.S. I've submitted a fix for supporting absolute asset urls, as promised.\nPlease let me know what you think :)\n. Please re-review my changes. I've made the PR simpler and also pass the Asset as an optional parameter to Handler.open(url, data, *asset*). This allows for even more flexibility for developers and applications that need custom handlers.\nPlease consider this PR. Sincerely,\nAidin. Found the bug in build script! Please see PR #710 \n. Thank you for your kind words, @Maksims!\nI work for Animech Technologies, I believe some of your colleagues have meet some of mine :)\nAnyway, the check I removed in the PR, is causing default attributes for scripts instantiated in run-time (using entity.scripts.create('MyScript')) to not be assigned. Obviously a possible workaround is to just pass a empty custom attributes like entity.scripts.create('MyScript', { attributes: {} }), but that is not a obvious workaround and shouldn't be necessary IMHO :)\nI understand the optimization aspect. Another way to fix this scenario more specifically would be to change the following line in /src/framework/components/script/component.js:\n- attributes: args.attributes || null -> attributes: args.attributes || {}\nI can update my PR. What do you think?\n. I've change the PR to use the alternative solution I proposed, i.e. just changing this line:\n- attributes: args.attributes ||null -> attributes: args.attributes ||{}\n. I'm closing this PR as it is no longer a priority for us.. @Maksims Fair point. I've reverted all examples of the Entity constructor. This simplifies the PR a lot.\nLet me explain why I'm \"trying\" to push the new way as the primary approach instead of adding it as just an alternative approach. Because Entity inherits from GraphNode, they will share the same constructor parameters. However GraphNode has no knowledge of pc.Application and no need of such dependencies. So to add a constructor parameter that GraphNode wants (name), it should be first. Otherwise it will have to know about the other irrelevant parameter (app) that only Entity cares about.\nIf you wish, a side from reverting the examples, I can also change the new approach to just an alternative, but that will IMHO result in less readable code. I just want PlayCanvas to have a more maintainable codebase in the long run :)\nCheers,. @Maksims Good point and great comments! I've updated the PR in accordance with your feedback :). Hello @Maksims!\nThanks for letting me know about the issue! I'm sorry, we must have missed it when upgrading the old feature branch to the latest stable. I apologize for the oversight. I believe we've fixed it now. Could you please try it again?\n. I propose fix #1413, which doesn't rely on \"forcing\" anything.. Anyone had a chance to look at this, @daredevildave? @vkalpias?. That is weird, I wrote <<. Must have been my editor's auto-correct ;)\n. Of course, \"1 <<\" should be removed!\n. Fix it in commit below\n. Done! See commit https://github.com/playcanvas/engine/pull/846/commits/ca7c04b3032becb3e39632e219a6572cafe2063c. ",
    "mrLoganite": "Tagging entities as static sound like a good way of doing it. I might also be a good idea to incorporate the light mapping as well as it highly likely the shadows on static objects would also want to be baked. \n. ",
    "growf": "Certainly makes a big difference. I don't hit a wall now until ~16,000 entities and the wall I hit is somewhere in render(). Entity.addChild() has dropped from 60% of my total runtime to 7%.\n. ",
    "OmarShehata": "I was surprised that I couldn't find a way to do this in the editor. When you say \"non-obvious for new users\", is there currently a way to do it that isn't very clear?\n. Is there any special process for deprecating a function @Maksims ? Is it just adding @deprecated in the comment block above it?. I've run into this issue as well. I'm trying to create a water shader with a foam line. The water material has blending so that it can be translucent when alphaToCoverage isn't available. My approach to rendering the foam lines using the depth texture is similar to the one described here:\nhttps://lindseyreidblog.wordpress.com/2017/12/15/simple-water-shader-in-unity/\nSince blended objects are filtered out of the depth texture, I can't use this technique. @guycalledfrank of the options you listed, either of the last two would be perfect for my case. \nAre there any workarounds for now? . Thanks for posting the issue up @Robotpencil ! I just opened a PR #985 as a potential fix. . Any updates/feedback @daredevildave ?. @daredevildave I've completed the CLA and fixed all the style issues, except for making each variable be declared on an individual line, because I noticed other parts in the code use this pattern:\nvar i, len = padDevices.length;\nfor (i = 0; i < len; i++) {\nI've also made the gamepad example have an example of wasPressed as well as isPressed. That file isn't required for this PR but might be nice to have.. Ah, yes, sorry about that! I started going through the style guide point by point and forgot about strict equality. \nShould be good now.. Is this something that can be fixed just on the engine side or could the bug be on the online editor side?. I recently pushed this code in a PR as a fix for something, and I guess I broke something else!\nI wonder if just a simple fix where you loop over max(pads.length, this.current.length) and delete excess if you find any would suffice. . I've been thinking about this, and I just realized that might not be good enough @ransico . If you connected gamepads A and B, then current would look like this:\ncurrent = [A,B]\nSo gamepads.wasPressed(1,0) would return true if controller B pressed the 0 button. If you disconnect controller A, and you remove it from current then suddenly it becomes:\ncurrent = [B]\nWhere  gamepads.wasPressed(1,0) wouldn't refer to anything and  gamepads.wasPressed(0,0) is actually now controller B. I can see this being annoying if you had Player 1 using controller A, and Player 2 using controller B, that if A gets disconnected temporarily then suddenly B would be controlling the other player.\nWhat doesn't change is pad.index. So B.index would still be 1. \nI guess the question is, should PlayCanvas be handling making the the gamepads persistent in the array (we could index it by pad.index and it would be current = [null,B] when disconnected, which would match the GamePad API), or should that be something the developer sorts out on their own?. Hey @guycalledfrank , thanks for the awesome work you're doing this! Do you have a ballpark estimate of when you expect this to be complete and merged? I'm writing a tutorial set for early February that would rely on this, so I'm trying to decide whether to wait or try to hack together a work around.. ",
    "marionieto": "I tested your example and it has the same issue.\nMotorola Moto E xt1021 Chrome:\n\nLG G2 Chrome:\n\n. I did a new test with the suggestions of frank and it didn't work.\nThe setup of the new test: \n\n. @guycalledfrank I tested in a few devices and these are the results:\nApple iPhone 6 iOS 9.3.3 Safari:\n\nLG G2 android 4.4.2 Chrome 51.0.2704.81:\n\nMotorola Moto E XT1021  Android 4.4.4 Chrome 52.0.2743.91:\n\n. We have been suffering this issue for a long time.\nThis error always happen after launch a project.\nThe error occurs 3 out of 10 times.. ",
    "khoaho": "I confirm the issue was fixed. All examples are working now. Thank you.\n. ",
    "ejacquier": "Hi,\nAny idea when this will be fixed?\nThis is major for us and using the enable/disable workaround would be very time consuming.\nThanks,\nEmmanuel\n. ",
    "cainmartin": "Any traction on this issue? One use case that is common is muzzle flash or charge up effect on a weapon. Unfortunately it makes it impossible to use the particle system for such effects as the particle is left behind as (for instance) a character moves.. ",
    "Pheater": "I would be interested in this feature as well.. What would be the best way to add a public readonly variable to an existing component if not in dataStore?. ",
    "sethgillett": "So is this issue closed?. Is this issue closed?. This is undocumented, but if you call: clonedEntity.script._onInitialize() it will initialize the attributes as set in the editor (I think).. I believe _onInitialize is usually called after the initialize event is fired and after initialize itself is called in each script, so calling it on the script component will not cause initialize to be called.\nEdit: Apologies, this does not work.. Could you specify what code specifically is causing the error and/or steps to reproduce.. Interesting. The error seems to occur specifically when an entity has more than one script attached, and one of the scripts calls destroy on the entity. For example, if entity A has script B and script C, and script B calls destroy on entity A, the update method on script C is still called, even after the entity is destroyed resulting in an undefined error.. Ah my bad, so to clarify was there an agreed upon solution for the setPosition() setRotation() methods syncing up with the rigidbody? Why not just have setPosition and setRotation call the corresponding rigidbody methods? Something roughly like:\njavascript\n// entity.js\nsetPosition: function(x,y,z)  {\n    // ...\n    if (this.rigidbody) {\n        this.rigidbody.syncEntityToBody()\n    }\n}\nAnd then just deprecate rigidbody.teleport() altogether.. Ah, I see the issue. I guess in that case, the addition of a teleportOrientation() method is unnecessary. Could a potential fix be that the rigidbody component throws an error if the entity's transform is directly altered? That would get rid of the confusion at least.. @daredevildave I have completed the agreement.. I'm a little bit confused what __attributesRaw is even supposed to represent here. Is it in place to ensure that script attributes are initialized to their default values only once? If that's the case it seems safe to force attribute initialization in script.create() since it's basically guaranteed that a newly created script's attributes are uninitialized. This is also an issue with entity.clone() #1098. \n```javascript\n/ src/script/script.js /\nscript.prototype.__initializeAttributes = function(force) {\n    if (!force && !this.__attributesRaw)\n        return;\n// set attributes values\nfor (var key in script.attributes.index) {\n    if (this.__attributesRaw && this.__attributesRaw.hasOwnProperty(key)) {\n        this[key] = this.__attributesRaw[key];\n    } else if (!this.__attributes.hasOwnProperty(key)) {\n        if (script.attributes.index[key].hasOwnProperty('default')) {\n            this[key] = script.attributes.index[key].default;\n        } else {\n            this[key] = null;\n        }\n    }\n}\n\nthis.__attributesRaw = null;\n\n};\n```. That's odd, when I tested it a few days ago it seemed to be working in milliseconds. My mistake.. ",
    "jamestrickey": "+1 \n. ",
    "PeterDaveHello": "Hi @willeastcott, is it possible to release the official builds? It'll be a good \"reference\" since sometimes we can not so easily make sure if the built files been built 100% correctly, and for security reason, it'll be better to use a official build(if there is one), actually CDNJS started to support SRI (subresource integrity) recently, this is also for security and integrity, we believe it'll be better to have the dist files from official, not us, what do you think? Thanks.\n. Option 3 looks good, there are some libraries have this method for bower release, it'll be great!\n. ",
    "dirkteucher": "Here is the code from that demo - https://github.com/dli/vortexspheres\n. ",
    "WingMrL": "Thank you very much !\n. ",
    "qiangzi7723": "Yes,I think so!That will be a greater way to change the orientation in the future. \n. ",
    "majimboo": "@Maksims, Yo! done. You're welcome, thanks for this great engine too. :+1: . ",
    "sonygod": "how about glTF 2.0 format? why not support that? or may be you consider some business  reasons  for your online editor.\ncurrent playcanvas only support their owners   json format ,so it's size is not well for web  transmission and loading if scene or model size is huge.\n. ",
    "TobiasWehrum": "That's the second time I google for a PlayCanvas feature I'd need just to find one of your threads here - pointing to #816, which seems to have everything I could ever wish for, but apparently was never integrated.... Is there any performant way to measure the width of a text via code? My text is coming from an external source, so I can't add the \"\\n\"s manually, I'd need to iteratively measure width and insert \"\\n\" via code.. @vkalpias Yes, it fixes the problem I describe here.. @willeastcott No, I can't reproduce it. It just happens about once in maybe 30 runs. Apart from whatever is causing it, maybe it would be a good idea for the loader to retry files that fail? (Do I have any way to plug myself into that process and at least display an error message?)\n@daredevildave I think so, but I'm not sure. What's the known issue?. ",
    "joonjoonjoon": "I got this exact error when using Playcanvas-spine. If I export with the Spine exported '.atlas' file, I get the \"InvalidStateError: responseXML is only available if responseType is '' or 'document'.\". If I remove the file from the project, it works as expected. (both tests done in Firefox) . renaming the .atlas file to .atlas.txt fixed the problem, but I had to re-upload it as renaming inside the editor doesn't actually cause the exported file to be renamed.. I just caught that, sorry and thanks :). ",
    "trusktr": "Maybe a better question would've been \"Is there a React interface for PlayCanvas?\".. The online editor indeed looks really awesome, good job on that!\nMaybe more specifically, I'm curious to know about how PlayCanvas and Three.js compare with regards just to rendering.\nFor example, in Three.js the only utility around fixing tweaking shadows (f.e. fixing ACNE) is modifying shadows' bias, but there aren't other things like normal bias or slope-adjusted bias. Also is dithering on the shadow ACNE something doable?\n1) Does PlayCanvas offer any of these shadow-tweaking utilities besides just plain bias?\nIn Three.js, resizing a geometry means looping on every vertex of a geometry and modifying it's position, or just creating a new Geometry which effectively does the same thing with added overhead of discarding and creating a new object. This gets tricky if the geometry is shared with multiple meshes.\n2) Does PlayCanvas have a way to scale or resize geometries on a per-mesh basis if we use one geometry per mesh, and without re-calculating all the vertices on the CPU but rather in the GPU? If so, then what about with geometries shared across meshes but needing mesh-specific sizing?\nThree.js doesn't have automatic instancing which can drastically improve performance on the average case, and this amazing PR was never merged due to adding too much \"maintenance overhead\" for Ricardo.\n3) Does PlayCanvas have an auto-instancing feature?\nThree.js recently received this amazing feature for composing Shaders out of functional nodes.\n4) Does PlayCanvas have a feature for easily composing shaders out of dynamically linkable nodes, and for easily modifying these shader compositions on a per material basis, or something similar?\nI'm starting to experiment with PlayCanvas, so maybe I'll discover questions/answers and I'll post back.\nBy the way, I was the guy who presented Polydance with Anastasiia at 3DWebFest 2017 (video and codepen). I saw you there, but didn't get a chance to meet you. I'm going to Codame's get-together this Saturday.\nPlayCanvas is really inspiring. :)\nI recently put up documentation pages for my 3D custom elements at http://infamous.io (WIP). This pen shows how to write HTML that blends normal DOM elements with WebGL (<button> elements with WebGL lighting and shadows). I dream of eventually having a creation studio too (a general purpose one for any sort of web applications, not necessarily just games), but right now it's just me, a one-man team with no funding, who's project is open source and generates no income despite the big amount of time spent making it. \nMaybe I can learn something from PlayCanvas \ud83d\ude04 .... @willeastcott \nThanks for all those details!\n\nYou can have two differently transformed mesh instances pointing to the same mesh.\n\nWhat I'd like to do is be able to re-size a mesh (similar to what a scale transform does), but not affect children in the scene graph tree. In other words, a \"size\" in this concept is similar to a \"scale\", but it does not propagate to children. Children in the tree will remain the same size on the screen, but they will still translate/rotate/etc with the resized parent. Is this possible?\nThis sizing concept is similar to DOM/CSS3D where resizing a DOM element in a 3D scene using CSS transforms (where all elements in the tree have transform-style: preserve-3d) does not resize children; the resized element only grows or shrinks but all children sizes are not affected.\nHere is an animated codepen that shows exactly the concept expressed with CSS3D: https://codepen.io/trusktr/pen/e856997b50496a1b061d586e8730dd02\nNote in the CSS3D example, I am rotating the parent node, which rotates (transforms) all the children, yet sizing the second node (not scaling it) does not affect children.\nIn Three.js this is very difficult to achieve without one of: modifying the scene graph from it's original structure, writing a new shader, or re-calculating Geometry vertices on the CPU which means no sharing the same geometry with other meshes otherwise all meshes will be resized.\nI'd like to share one geometry with multiple mesh instances (so that one geometry is stored in the GPU), but give them all different sizes (not give them child-affecting scales).\nDoes PlayCanvas support this sort of sizing?\n\nRead more about batching here.\n\nThat's nice for manual control. That rejected Three.js pull request makes it fully automatic, it's quite awesome. One just writes the scene graph, and can enable auto-instancing on the renderer, then it just works in most cases without having to think about it. It has options to fine tune it manually if needed.\n@guycalledfrank \n\nbut now it's actually slope-scaled.\n\nOh, I didn't know about that. In other engines (I don't remember where I saw it) it is possible to adjust a variable like slopeBias which determines how much the bias grows relative to the slope (it can grow faster or grow not as fast). But I'm not too experienced with it, so I don't know the technicality.\nIn this example (uses Three.js under the hood), if you go full screen, you can see some shadow ACNE on the backround (presumably because the light is close to the background surface so the light rays approach to parallel with the surface). I can't find any bias values that make it go away. The docs don't mention a public bias setting relating to slope, though in the code I do find instances of polygonOffset, so maybe it's just not exposed in a meaningful way?. @guycalledfrank\n\nJust scale all children inversely then. If there are too many of them, put them in an intermediate node\n\nI know I can do that, but it has some problems:\n\nIntroduces a layer of floating point precision error\nModifies the child tree. This is not ideal in situations when multiple people are writing different parts of the tree. By modifying their scale, you may interfere with their logic, therefore increasing the chances of causing errors.\nWorld matrices need to be recalculated for the subtree.\n\nIn CSS3D, size and scale are two separate things. Size does not affect child properties, and does not involve touching or restructuring the child tree.\nI want to achieve this feature in a non-impacting way, so currently my custom elements modify the vertices of a mesh's geometry without affecting child in any way, but it is not ideal when animating too many of them because that runs on the CPU, and plus for every mesh with the same geometry but different size it means I cannot instance them currently therefore more memory use and more draw calls. I'm using only the Three.js scene graph APIs and not making custom shaders yet, which is why I have this limitation.\nOne way to solve may be to have a geometry scale that is separate from the mesh scale, where the geometry scale is not used in calculation of the world transform. This separate transform is applied per mesh in the shader so that meshes can be instanced. World matrices in this case do not need to be updated for subtrees if only size has changed (win!).\nThat's what I would like to have. I'm not familiar with the PlayCanvas API yet other than basic demos, so I'm not yet sure how easy it may be to implement.. On a conceptual level, I'm not sure if scaling in the vshader is even doable? How would that impact world transforms? How would we scale a geometry in the mesh's local space? Hmmmm... Maybe it need to be on the CPU, right when we figure the mesh's world transform, we then update a separate scale matrix for the geometry. When the algo moves to children, it only considers the  parent world transform and the geometry transform is not in play.  Then, we send both world and geometry transforms to the shader to be multiplied. How does that sound?. @willeastcott We can keep it closed, since it's just discussion and not an issue. :). @guycalledfrank Where do I see the code? I tried clicking on the box, and on the script, but the \"edit\" buttons doesn't seem to work, I can't see the script.. ",
    "renatoruk": "@yaustar, @Maksims  thank you guys for clarifying this. Will follow the thread from now on. \nDo you plan on adding any modifications to the WebVR polyfill included in Playcanvas before the official fix is out?. Since Playcanvas source is not available through online code editor, where could I force usage of the webvr polyfill?. Hello @daredevildave, yes, webVR is functional now in Chrome 57 on Android. I tested on Samsung Galaxy S7 so it probably ran the polyfill version.. ",
    "daveranan": "I'm a bit confused, not sure if this is a bug or what not.\nIf you open any WebGL demo, i.e. WebVR 360 Image by itself in Chrome 56, VR & Gyroscope do not work. All you can do is tap/click & drag the screen to look around.\nBut, if you open any of tutorials page, i.e. WebVR 360 Image Tutorial Page, VR button & Gyroscope are fully functional and work perfectly like they were used to.\nI connected my android phone to mac, inspected the page to see if there are any error differences, but there were none. Same errors.\nAm I'm missing something here?. Even as a web dev, I wouldn't have thought that https would be such an issue. Thanks for pointing that out @yaustar, have been trying to debug this all morning.. Here's another bug, not really sure it's a bug or not. So I forked the 360 VR image tutorial project, and was expecting same results as on the tutorial project, but it just shows brown/red background in VR instead. Link: https://playcanv.as/p/2EMTn1Dv/\nAlso, why the User Experience is different on iOS devices vs Android? On Android you have option to turn on the VR. But by default you can use gyroscope to move camera around. On iOS it forces you to use phone in cardboard mode, otherwise it will not work.. ",
    "bjsommer": "Hi together,\nthanks for this thread!\nI experienced the same problem when using the samples from webvr.info:\nhttps://webvr.info/developers/\nWhen I used the standard version of the actual Chrome 56, the demos did not start.\nBut then I did the following: downloaded \nChrome Beta (58.0.3029.82)\nWhen I started the demos, I got a message that\ngoogle vr services \nhave to be installed. After I did this, all demos worked again :-)\nIn addition, I have of course the \nCardboard app (4.2)\ninstalled on Android version 6.0.1 (security patch 1.12.2016) . ",
    "Dhellblazer": "Hi, I have a problem when viewing webVr content in chrome 58 (Android), the image comes out reduced to a very small box in the bottom left.. Hello everyone, as I mentioned earlier in Chrome 58 there is the problem that it does not load well the screen, because it comes reduced or only a part. With happiness I comment that the version 59 must leave the next week, at the moment you can download the Beta version, in this version (Chrome 59) the problem is solved. Thank you.. ",
    "AngeloReppucci": "Hi @Maksims , i filled and submitted the form. It is a fix that i made some time ago, give me some day to find the problematic model. In general, for triangles without a texture mapping (covering an empty surface of the texture space) there is a division by zero. . ",
    "06wj": "Thanks for review, I fixed it.. ",
    "MatthewEdgmon": "I've signed the license agreement. Thank you.. ",
    "leecommamichael": "Is this as straightforward as adding 'rectangle.js' in 'engine/src/shape' following the practices in the shapes in that directory? For clarification; you're asking for a rectangle, not a rectangular prism, yeah?. ",
    "H1Gdev": "There are the following changes in setter.\n```\n              set: function(raw) {\n                  var old = this.__attributes[name];\n              // convert to appropriate type\n              this.__attributes[name] = rawToValue(this.app, args, raw, old);\n\n\nif (this.__attributes[name] === null && args.enum && typeof(value) === 'string') {\n// from enum\nfor (var i = 0; i < args.enum.length; i++) {\nif (args.enum[i].hasOwnProperty(value)) {\nthis.__attributes[name] = rawToValue(this.app, args, args.enum[i][value], old);\nbreak;\n}\n}\n}          this.fire('attr', name, this.__attributes[name], old);\n          this.fire('attr:' + name, this.__attributes[name], old);\n      }\n\n```\nBut 'boolean' type will not be expected behavior...\n\n\nIf keep backward compatibility at script, this idea may not be suitable. \nHow much keep backward compatibility ?. Thank you for answer my question.\nThis PR do not match PC policy.\nIf I want to reuse enum value, so I use ScriptAttributes get method.\nI close this PR.. Thanks for reply this PR.\nPlease fix this issue in another way.. Hi, @willeastcott.\nThank you for teach me.\nChange shadowBias and normalOffsetBias the same values as current new project from Editor, and fixed this issue.. Separate two PR.\nhttps://github.com/playcanvas/engine/pull/926\nhttps://github.com/playcanvas/engine/pull/927. Hi @guycalledfrank \nUse easy texture compression and output flipped texture(Y axis).\nSo, need to Y flip the image in the shader.. Oh...\nI look forward to skybox future support.. camera/component.js is described in API Reference, so I PR.. @vkalpias \nThanks for your advice.\nReset pc.ModelHandler.DEFAULT_MATERIAL when destroy Application.. @vkalpias \nI change commit.\nScopeSpace has latest ScopeId, so always get ScopeId from ScopeSpace.. @guycalledfrank \nPlease review this PR.. @guycalledfrank \n\nI believe we should just reset the default material on init, not change anything in the render loop.\n\nI fixed following commitment before.\n\nReset pc.ModelHandler.DEFAULT_MATERIAL when destroy Application.\n\nIs this commitment preferred for PC ?. @willeastcott \nThanks for your confirmation.\nThis playcanvas-latest.js in example app is fixed this issue.\nI added pc.Scene.defaultMaterial.reset(); to original playcanvas-latest.js, but did not fix this issue.. FYI\nScriptComponent move method is public.\nhttps://developer.playcanvas.com/en/api/pc.ScriptComponent.html#move\n. j is undefined, so 'j<nodes.length' is always false.. Hi @guycalledfrank\nsource is not true, so this condition is always false.. Thanks @yaustar. Hi @guycalledfrank\nIf parentToUseScaleFrom is null or undefined, then occur exception at line 1193 and the other.\nIs parentToUseScaleFrom check really necessary ?. radius will be undefined if opts is:\nopts = {\nbaseRadius: 1.0\n};\nFor compatibility,\nvar radius = opts && (opts.radius || opts.baseRadius) !== undefined ? opts.radius || opts.baseRadius : 0.5;\nHow about above code?. Hi @CarlBateman \nDid you revert this commit ?\nhttps://github.com/playcanvas/engine/pull/973/commits/8eb9e80438d4e5bb746311e17c056ac5f87d7d87. \nI think that in this PR context, you would change 4 space.\n@Maksims said\n\nWe use 4 spaces indentation, not 2 spaces. :)\n\nBut you reverted in following commit, so I questioned. \nhttps://github.com/playcanvas/engine/pull/973/commits/d0433667d24b72cfc3fea796a36c5948eae61acb. @guycalledfrank \nThanks for your review.\nThis issue is caused by old value(instance) remaining in global variable(pc.ModelHandler.DEFAULT_MATERIAL).\ngraphicsDevice ScopeSpace always has latest ScopeId.\nSo always get ScopeId reference from ScopeSpace is more safer.. @guycalledfrank \nExtract characters to the end of the string, so you can omit 2nd argument.\njs\nurlWithoutParams = urlWithoutParams.substr(blobStart);. @guycalledfrank \nAdd initialData @param.. @guycalledfrank \nIf usage parameter omitted, set initialData to this.usage.. @guycalledfrank \nThanks for your review.\nIf texture is invalid, update _levelsUpdated at end of this method(line 616 in original file).\nSo skip this line.. I don't know what kind of use is supposed to be added in the future.\nBut many usage parameter of new IndexBuffer is omitted in playcanvas-latest.js.\nSo I thought that usage parameter is usually omitted.. @willeastcott \nCan not solve this issue.\nThis issue is caused by old value(instance) remaining in global variable(pc.ModelHandler.DEFAULT_MATERIAL.parameters[name].scopeId).\nThis field is excluded from StandardMaterial.reset() method.\nI think that it is ideal that first start and second start have the same sequence.\nTherefore I proposed the following two ideas.\n- Reset pc.ModelHandler.DEFAULT_MATERIAL when destroy Application.\n- Always get ScopeId from Application ScopeSpace(app.graphicsDevice.scope).. @vkalpias \nI think that it is better to check this.enable only once.\njs\nif (!this.enabled) return;\nor\njs\nif (this.enable) {\n  if (! this._initialized) {\n    ...\n  }\n  if (this.app._initialized && ! this._postInitialized) {\n    ...\n  }\n}. // destroy old meshes. simplier ?. need @param about passFlags.. this._initialized is always true, so check this._initialized is not needed.. I think that it is better to check this.enable only once.\njs\nif (!this.enabled) return;\nor\njs\nif (this.enable) {\n  if (! this._initialized) {\n    ...\n  }\n  if (! this._postInitialized && !this.entity.script._beingEnabled) {\n    ...\n  }\n}. typo.\n(initialize might have disabled ....). Oh...  :disappointed:\nThis method has strong side effects.... if this.enable is flip-flopped, I think that should call fire method after here.. ",
    "ImmanuelSamuel": "I was just trying it out locally. I stripped everything from my code and just ran the cubemap part. \nI did some testing and am quite certain that its the dds file thats the issue. \nhttps://playcanvas.com/editor/scene/512798\nCheck out the space dds file. If I use the png then its alright.. The software is called spacescape. I tried multiple. They all give me the same shifted colors.\napp.assets.loadFromUrl(\"/dds/clouds1.dds\", \"texture\", function (err, asset) {\n    app.scene.skybox = asset.resource;\n});. I checked that and it says 8bit RGBA as the output format. Thats why I wanted to see if pc uses some other format.. How can I modify the code above to construct a cupemap texture from jpegs?. Is there a way of doing material.chunks.reflectionCubePS = modifiedCode; material.update(); for skybox?. Everything works now.\n\nAlso currently the reflections need to be set by myself by hand each time and the reflections do not reflect other objects. I see you have mentioned this previously\n\nThe post was on 2014. So any updates on automatic reflection cubemap assignment based on scene skybox or setting up the reflection probes for dynamic reflections in the latest pc release? I am trying to get player reflection on a mirror.. @Maksims thanks for the detailed response. I totally understand. Hope this engine gets even more popular!!!. Thanks @willeastcott. My mouse events are getting triggered but my keyboard events are not. The update functions is being run but keyboard.isPressed(pc.KEY_UP) always returns false and thus no camera translation.. After some testing ... in keyboard.isPressed(), this._keymap is undefined.. The example that you uploaded didn't work. I was using chrome on ubuntu at that time. I am at a windows computer now. Let me see if it works here. . Yup. It doesn't work on this computer either. In the keyboard update function this._keymap is undefined. So when the keyboard.isPressed function is called there is a return value !!this._keymap[b]. Since keymap is undefined it always returns false.. Can you see if the following works? Its just a single page with your code but using the pc engine from the latest release.\n```\n<!DOCTYPE html>\n\n\n\nPTLJ\n\n\n\n\n\n\n    // <strong><em>*</em></strong><strong><em>*    Initialize application   </em></strong><strong><em>*</em></strong><strong><em>*</em></strong>**\n    var canvas = document.getElementById(\"application-canvas\");\n    // focus the canvas for keyboard input\n    canvas.focus();\n    // Create the application and start the update loop\n    var app = new pc.Application(canvas, {\n        mouse: new pc.Mouse(canvas),\n        keyboard: new pc.Keyboard(canvas)\n    });\n    // Set the canvas to fill the window and automatically change resolution to be the same as the canvas size\n    app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n    app.setCanvasResolution(pc.RESOLUTION_AUTO);\n    app.scene.ambientLight = new pc.Color(0.2, 0.2, 0.2);</p>\n\n\n    var FirstPersonCamera = pc.createScript('firstPersonCamera')\n\n    FirstPersonCamera.attributes.add('speed', {\n        type: 'number',\n        default: 10\n    });\n\n    FirstPersonCamera.prototype.initialize = function () {\n        // Camera euler angle rotation around x and y axes\n        var eulers = this.entity.getLocalEulerAngles()\n        this.ex = eulers.x;\n        this.ey = eulers.y;\n\n        // Disabling the context menu stops the browser displaying a menu when\n        // you right-click the page\n        var mouse = this.app.mouse;\n        mouse.disableContextMenu();\n        mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this);\n        mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this);\n    };\n\n    FirstPersonCamera.prototype.update = function (dt) {\n        // Update the camera's orientation\n        this.entity.setLocalEulerAngles(this.ex, this.ey, 0);\n\n        // Update the camera's position\n        var keyboard = this.app.keyboard;\n        var forwards = keyboard.isPressed(pc.KEY_UP) || keyboard.isPressed(pc.KEY_W);\n        var backwards = keyboard.isPressed(pc.KEY_DOWN) || keyboard.isPressed(pc.KEY_S);\n        var left = keyboard.isPressed(pc.KEY_LEFT) || keyboard.isPressed(pc.KEY_A);\n        var right = keyboard.isPressed(pc.KEY_RIGHT) || keyboard.isPressed(pc.KEY_D);\n\n        if (forwards) {\n            this.entity.translateLocal(0, 0, -this.speed * dt);\n        } else if (backwards) {\n            this.entity.translateLocal(0, 0, this.speed * dt);\n        }\n\n        if (left) {\n            this.entity.translateLocal(-this.speed * dt, 0, 0);\n        } else if (right) {\n            this.entity.translateLocal(this.speed * dt, 0, 0);\n        }\n    };\n\n    FirstPersonCamera.prototype.onMouseMove = function (event) {\n        // Update the current Euler angles, clamp the pitch.\n        if (pc.Mouse.isPointerLocked()) {\n            this.ex -= event.dy / 5;\n            this.ex = pc.math.clamp(this.ex, -90, 90);\n            this.ey -= event.dx / 5;\n        }\n    };\n\n    FirstPersonCamera.prototype.onMouseDown = function (event) {\n        // When the mouse button is clicked try and capture the pointer\n        if (!pc.Mouse.isPointerLocked()) {\n            this.app.mouse.enablePointerLock();\n        }\n    };\n\n\n\n    app.start();\n    // ***********    Helper functions    *******************\n    function createMaterial(color) {\n        var material = new pc.PhongMaterial();\n        material.diffuse = color;\n        // we need to call material.update when we change its properties\n        material.update()\n        return material;\n    }\n    function createBox(position, size, material) {\n        // create an entity and add a model component of type 'box'\n        var box = new pc.Entity();\n        box.addComponent(\"model\", {\n            type: \"box\"\n        });\n        box.model.material = material;\n        // move the box\n        box.setLocalPosition(position);\n        box.setLocalScale(size);\n        // add the box to the hierarchy\n        app.root.addChild(box);\n    }\n    // ***********    Create Boxes    *******************\n    // create a few materials for our boxes\n    var red = createMaterial(new pc.Color(1, 0, 0));\n    var white = createMaterial(new pc.Color(1, 1, 1));\n    // create a few boxes in our scene\n    for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 2; j++) {\n            createBox(new pc.Vec3(i * 2, 0, j * 4), pc.Vec3.ONE, red);\n        }\n    }\n    // create a floor\n    createBox(new pc.Vec3(0, -0.5, 0), new pc.Vec3(10, 0.1, 10), white);\n    // ***********    Create lights   *******************\n    // make our scene prettier by adding a directional light\n    var light = new pc.Entity();\n    light.addComponent(\"light\", {\n        type: \"point\",\n        color: new pc.Color(1, 1, 1),\n        range: 100\n    });\n    light.setLocalPosition(0, 0, 2);\n    // set the direction for our light\n    // light.setLocalEulerAngles(45, 30, 0);\n    // add the light to the hierarchy\n    app.root.addChild(light);\n    // ***********    Create camera    *******************\n    // Create an Entity with a camera component\n    var camera = new pc.Entity();\n    camera.addComponent(\"camera\", {\n        clearColor: new pc.Color(0.5, 0.5, 0.8),\n        nearClip: 0.3,\n        farClip: 30\n    });\n    // add the first person camera script to the camera\n    camera.addComponent(\"script\");\n    camera.script.create(\"firstPersonCamera\");\n    // add the camera to the hierarchy\n    app.root.addChild(camera);\n    // Move the camera a little further away\n    camera.translate(0, 0, 2);\n\n\n\n. So the code fromhttps://code.playcanvas.com/playcanvas-latest.jsmight not reflect some recent PRs?! \nI just copy pasted your code. The only difference would be your pc source.. Hurray!!!. Also the following is what works - minor code edit\nMouse is bound to canvas and keyboard to window.\nvar app = new pc.Application(canvas, {\n        mouse: new pc.Mouse(canvas),\n        keyboard: new pc.Keyboard(window)\n    });\n```. Solved with electron beta release. Currently I am busy with work. Maybe we can close this and I can reopen when I get time to replicate this issue. My current project is big and I would need to do quite a bit to get this.. Any progress on this? Its very hard to get the aesthetic look right for really large scenes without AO. The sense of geometry takes a hit. Also is it easy to port some post-effects from other webgl engines (like SSR - the planar reflections are very resource heavy - and God-rays)?. My project involves procedurally generated scenes. I already have AO maps for individual objects but when I am constructing a building in game with user generated layouts it gets complicated. Also I am going for a space look and without AO object geometry in a sci-fi genre is ok but would be a lot better. Another major thing is Screen space reflections. I cant get the feeling that people are looking at a metallic finish without some form of SSR. I have discussed this before here and was suggested to use planar reflections but that would work for specific cases very nicely but to model that into every object in the scene (especially like scifi genre where every object has reflection) its hard. Yeah I can get some cube maps from specific points in the scenes and use them in the cube map reflections but its not as convenient and is cumbersome. Don't get me wrong the PBR stuff brings a lot to realism but for a scifi genre where geometry (SSAO) reflections (SSR) and the space dust (god rays) are important to get that sense of immersion its hard to model each and everything into the game. For example, god rays - I can do transparent planes to mimic it but it looks so cheesy, compared to something I can get from threejs. But I like the playcanvas engine a lot and would like to make something visually pleasing. Putting them in the plugins like the posteffects are now would ensure that the engine remains fast while giving the users option to make visually pleasing scenes. Sorry for the essay but thats a genuine thought that I keep having whenever I see other gameplays and then start working on my project to get a similar aesthetic. The engine is FAST no doubt, I would like it to shine in some post-effects too. Right now I am working on polishing the core mechanics based on user feedback but I was almost tempted to spend some time on porting the post effects from other engines but since that would take too much time I thought I would first post here since the experts here might be able to quickly take existing code and port them quickly than myself ( I would think that the algorithms for something like SSAO, SSR and light shafts which are heavily used in most engines are already optimized so would probably not need too much tweaking ). Excited for the future of PC!. ",
    "MackeyK24": "Yo @guycalledfrank ... Is this Still true... These are the ONLY DDS FORMATS as of July 2018.\nAh, yes, DDS can be RGBA and BGRA, I think latter might be your case. Apparently engine tries to load it as RGBA, and you get it all blue. The engine only supports a small subset of DDS formats (RGBA8, DXT1, DXT5, RGBA32F), which are used internally and map directly to WebGL formats, and WebGL doesn't have the BGRA format. Are you sure there are no export format options in the spacescape?\nSo no RGBA16F ... \nI am using cfmt command line... so it can export whatever...\nits just RGBA8 losses so much and RGBA32F is a little BIG... RGBA16F looked really good for WebGL games... Just wondering of any plans to RGBA16F support for DDS ?\n. ",
    "MichaelFedora": "For anyone still looking for typings, I've got a slightly more complete version over here that I'm using in my projects. Should be able to update it as I make more progress, just kinda filling things out as I need them right now.. Hi @netgusto ! I don't know as I've never used Babylon JS. You should try asking on the PlayCanvas / BablyonJS forums or something similar.. ",
    "netgusto": "@MichaelFedora hey Michael thanks !\nIncredible luck to find this whereas you just posted it yesterday.\nWe are considering PlayCanvas for a big project of ours. Would you recommend it against other libs (like BabylonJS?) ?. ",
    "gprzybylowicz": "Hey all. Didnt want to open new issue to ask same question so writing here. Since the @Maksims response typescript is getting more and more popular so i'm wondering if you still don't have any plans to release official typings for PC, or maybe sth changed in this matter? :) Thanks in advance. . ",
    "kungfooman": "What I actually want: not just typings, but complete PlayCanvas engine in TypeScript.\nThat would result in a christmas tree of possibilities. E.g. use AssemblyScript[1]  to generate WebAssembly or source-to-source transpiling to C++ for compilation via Emscripten[2]. The performance and load time would increase and the file size would decrease (small .wasm file, which streams into executable memory while it downloads... no JavaScript parse time).\nIt would also be a great help for the actual developers, because an IDE like Visual Studio Code has powerful auto-complete and shows every little type/syntax error. That kills a lot of potential problems a JavaScript developer can run into. And since TypeScript compiles to clean JavaScript, the \"end user\" still just could hack around in the ts_to_js_bundle.js.\nSince converting a large code base like PlayCanvas to TypeScript takes a lot of time, I simply started myself, named PlayCanvasTS[3]. Currently only /src/math/ and a bit of /src/core is converted into a bundle (and it \"works\"). When I convert new code to TypeScript, I simply delete the JavaScript code out of the official playcanvas.js, so I can convert all code one-by-one. This is far from complete, but might be a starting point for some people.\n[1] https://github.com/AssemblyScript/assemblyscript\n[2] https://github.com/kripken/emscripten\n[3] https://github.com/KILLTUBE/PlayCanvasTS. You need to enable CORS on your production server\nThis has lots of example configurations for different web servers: https://enable-cors.org/server.html\n. What I would suggest is to use an \"assets\" repo, which you have locally and on your production server. Then you could simply load all data from each corresponding server via e.g. url = \"../assets/\" and the files load faster, because it's not remote anymore for local testing and you don't need to hack around with CORS settings for each server. ",
    "JarnoVgr": "Bump. It would be great to have official npm support. :). Sorry for bumping this again. Would really like to see this happen. :)\nEdit:\n@scarletsky Your latest npm build/version doesn't have the build files. Also, JSDOM adds an incredible amount of deps which is a problem when using it with e.g. Browserify. Is it a possible to make JSDOM dep optional?. @SHADOWELITE7 NPM is a package manager for open-source JS libraries. This allows end-users for tighter integration in their existing website/app/web-game workspace.. @ronkorving You could download both minified and normal file and put them next to each other. Some IDEs auto-detect the normaal version when you include the minified one in your HTML, which should make development easier as well. However, stacktraces/sourcemaps etc. are still somewhat wrong.. They're in the README.md/project page.\nE.g.\nNon-minified: https://code.playcanvas.com/playcanvas-latest.js\nMinified: https://code.playcanvas.com/playcanvas-latest.min.js. I would very much like to see this prioritized as well.. Just a heads up: It looks like autoplay policy is being reverted again with an updated Chrome 66.\nRelated Chromium issue: https://bugs.chromium.org/p/chromium/issues/detail?id=840866. ",
    "SHADOWELITE7": "whats NPM?. ooh that actually is very cool, thx for letting me know about it @JarnoVgr . this might take a while to merge @guycalledfrank . wow. have you applied it. like when you are coding, you would have to apply the script in the code editor so it may sync and work with your object\nI think that's how it works. hmm this seems confusing. your welcome . interesting changes . I see the text \n\n. is layers like what gimp has but we are putting the feature in playcanvas. hmm I guess I should have read the help article. A PR or pull request template is for others to show the terms to make a PR merge able\nLike you know one of guy called Frank's PR had something that would break the playcanvas engine.\nI was thinking of adding the project template but I didn't have much time because I had to go to the gym. \nYou can make your own edits if you like.\n. https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/. Here you can sen your fork of the playcanvas/engine to add your own features and updates\ndo you think this line should be deleted. ",
    "ronkorving": "Regarding versioning hassle, you can use npm version patch|minor|major to do the following in 1 shot:\n\nbump the version number in package.json at the given level (patch, minor, major)\ntag your branch with the version number it became. I'm trying to debug an issue right now which may or may not be a PlayCanvas bug. I'm stuck with a minified engine file, which doesn't work. If PC was properly integrating into my project via package.json (ie: via NPM), it would not minify during development and my stack traces would be so much more readable.... I think this PR would make a lot of people happy. I know it would make my life a lot easier.. @JarnoVgr Absolutely, but do you know where I can get the non-minified file?. @scarletsky It would be nice if the REST API that I use to download my project would include both the minified and non-minified versions :). Now that the package.json PR #931 has landed, you guys can publish this on NPM. Here's a quick getting started guide on publishing packages on NPM. I hope we can use this soon :)\n\ncc @willeastcott . Sorry, I should have been more specific. More practically speaking, when I'm looking for the distance between 2 world coordinates, I find myself writing a distance method that does:\n```js\nfunction getDistance3(vecA, vecB) {\n    const x = vecA.x - vecB.x;\n    const y = vecA.y - vecB.y;\n    const z = vecA.z - vecB.z;\nreturn Math.sqrt((x * x) + (y * y) + (z * z));\n\n};\n```\nSo my suggestion is to have:\njs\nconst myNumber = myVec3.distanceTo(myOtherVec3);. Fair enough \ud83d\udc4d  It may still be worth considering a dedicated method for it, but I'll leave it at that. Cheers.. @daredevildave Thanks so much for your feedback. I'm looking forward to it!\nIf you don't mind, I will keep this issue open until then.. Related: #1086 . @willeastcott Not having to use closure compiler (but UglifyJS instead) means not depending on the Java runtime. A definite improvement in my book :). LGTM \ud83d\udc4d . Putting var at the start of these lines makes this function do exactly nothing :)\nI believe you're trying to reset the values of these variables in the outer scope where they are varred, so you can just remove var on lines 117-121 and that will do its thing.. Just wanna raise a flag that previously if this.body was falsy, no value would be returned (ie: undefined would be returned). I assume the new code is more correct, but since this PR is not really about changing code behavior, I just wanted to point that out. Is this an intentional change?. Great :). This is dangerous if the asset does not exist. indexOf would return -1 and this would happen:\njs\nvar a = [1,2,3];\na.splice(-1, 1);\nconsole.log(a);\nprints:\n\n[1, 2]\n\nI would strongly suggest storing the result of the indexOf test in a variable, and making sure it's not -1 before splicing. You could even do that as the first operation in this method and simply bail out if -1.. ",
    "tommhuth": "How's this coming along?. ",
    "thisredone": "Any progress on this?. ",
    "kishlayaS": "@guycalledfrank @willeastcott Splitting diffuse and opacity maps into separate texture fixed the issue.\nThanks for the support \ud83d\udc4d . ",
    "sdfgeoff": "I use a screen filter and sample the texture. You can see the filter here:\nhttp://www.6dof.space/Inferno0.0.2/Scripts/filter.js\n. Yeah, it's tricky to handle depth map's with blended calls. I don't think there is any perfect solution\nRather than extending the posteffect system to allow the HUD to be drawn afterwards, I would prefer the ability to run multiple scenes at the same time, and the postFX to be applied on a per-scene basis.\nThis makes some sense because the playcanvas interface already has methods of putting objects into scenes, so no additional UI development is required.. ",
    "filharvey": "Any updates?\n. k, looks like it is now fixed with the latest beta. I will keep you informed on it.\n. Thanks for the update, will try this. Yep i know elements is unreleased but is definitely a needed addition. Also nearly working to my desires.. any updates on this?\nThanks. ",
    "MeisterGit": "The change I proposed is applied too late in the chain. The scale being handled in the prior calculations throws everything off, then we absolute value the broken calculation. No good. I'll make a second merge request with an actual proposed fix. Don't know what I was thinking with this first one.. @willeastcott I filled it out just now. We're good.. Upon further investigation, I have tracked down the exact changes which trigger this behavior!\n\"No longer needlessly nuke texture unit and bound buffer cache.\"\ncommit 06a96fa7cd9566a2e7f92e866b71f8abaa298dc3\nIs the cause. If I manually restore:\nfor (var i = 0;i < 16;i++) {        \n                      this.textureUnits[i] = null;      \n                    }\nand\nthis.boundBuffer = null;        \n                this.indexBuffer = null;\nThen the flickering vanishes, and the WebGL warning goes away.. Upon further investigation, all that needs to be restored is:\nthis.indexBuffer = null;\nYou can continue to cull out the bound buffer null and the texture units null in my case.. Windows 10, the issue occurs in all three browsers I checked: Firefox, Chrome, and Edge\nThe error message in Chrome is:\n[.Offscreen-For-WebGL-000001DFF9B78FE0]GL ERROR :GL_INVALID_OPERATION : glDrawElements: attempt to access out of range vertices in attribute 0\nEdge silently fails with the same visual flickering symptom, but doesn't emit any error messages.\nThe specific chunk of PC code in question is:\nif (primitive.indexed) {\n      if (numInstances > 1) {\n        this.extInstancing.drawElementsInstancedANGLE(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * 2, numInstances);\n        this.boundBuffer = null;\n        this.attributesInvalidated = true;\n      } else {\n        **gl.drawElements(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * this.indexBuffer.bytesPerIndex);**\n      }\n}. Close! The entire plane now flickers black instead of half, but it only happens on the first character of each text animation update.\nNot perfect like restoring the null to its original spot in device.js, but you're going in the right direction.. Correction:\nI have to restore both this.indexBuffer AND this.boundBuffer to null in device.js to get a flawless 0 flicker result. When I returned to double check this.indexBuffer alone, it had the same single-flicker going on as the current monkey patch solution.\nFor clarity, this is what my 'perfect' device.js function looks like:\n```\n            updateBegin: function() {\n                var a = this.gl,\n                    b = this.renderTarget;\n        this.boundBuffer = null;\n            this.indexBuffer = null;\n\n            if (b)\n                if (b._glFrameBuffer) this.setFramebuffer(b._glFrameBuffer);\n                else {\n                    b._device = this;\n                    b._glFrameBuffer = a.createFramebuffer();\n                    this.setFramebuffer(b._glFrameBuffer);\n                    var c = b._colorBuffer;\n                    c && (c._glTextureId ||\n                        (c._width = Math.min(c.width, this.maxRenderBufferSize), c._height = Math.min(c.height, this.maxRenderBufferSize), this.setTexture(c, 0)), a.framebufferTexture2D(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0, c._cubemap ? a.TEXTURE_CUBE_MAP_POSITIVE_X + b._face : a.TEXTURE_2D, c._glTextureId, 0));\n                    var h = b._depthBuffer;\n                    h && this.webgl2 ? (h._glTextureId || (h._width = Math.min(h.width, this.maxRenderBufferSize), h._height = Math.min(h.height, this.maxRenderBufferSize), this.setTexture(h, 0)), b._stencil ? a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT,\n                        h._cubemap ? a.TEXTURE_CUBE_MAP_POSITIVE_X + b._face : a.TEXTURE_2D, b._depthBuffer._glTextureId, 0) : a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, h._cubemap ? a.TEXTURE_CUBE_MAP_POSITIVE_X + b._face : a.TEXTURE_2D, b._depthBuffer._glTextureId, 0)) : !b._depth || 1 < b._samples && this.webgl2 || (b._glDepthBuffer || (b._glDepthBuffer = a.createRenderbuffer()), a.bindRenderbuffer(a.RENDERBUFFER, b._glDepthBuffer), b._stencil ? (a.renderbufferStorage(a.RENDERBUFFER, a.DEPTH_STENCIL, b.width, b.height), a.framebufferRenderbuffer(a.FRAMEBUFFER,\n                        a.DEPTH_STENCIL_ATTACHMENT, a.RENDERBUFFER, b._glDepthBuffer)) : (a.renderbufferStorage(a.RENDERBUFFER, a.DEPTH_COMPONENT16, b.width, b.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.RENDERBUFFER, b._glDepthBuffer)), a.bindRenderbuffer(a.RENDERBUFFER, null));\n                    this.webgl2 && 1 < b._samples && (b._glResolveFrameBuffer = b._glFrameBuffer, b._glFrameBuffer = a.createFramebuffer(), this.setFramebuffer(b._glFrameBuffer), c && (b._glMsaaColorBuffer || (b._glMsaaColorBuffer = a.createRenderbuffer()), a.bindRenderbuffer(a.RENDERBUFFER,\n                        b._glMsaaColorBuffer), a.renderbufferStorageMultisample(a.RENDERBUFFER, b._samples, c._glInternalFormat, b.width, b.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0, a.RENDERBUFFER, b._glMsaaColorBuffer)), b._depth && (b._glMsaaDepthBuffer || (b._glMsaaDepthBuffer = a.createRenderbuffer()), a.bindRenderbuffer(a.RENDERBUFFER, b._glMsaaDepthBuffer), b._stencil ? (a.renderbufferStorageMultisample(a.RENDERBUFFER, b._samples, a.DEPTH24_STENCIL8, b.width, b.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT,\n                        a.RENDERBUFFER, b._glMsaaDepthBuffer)) : (a.renderbufferStorageMultisample(a.RENDERBUFFER, b._samples, a.DEPTH_COMPONENT32F, b.width, b.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.RENDERBUFFER, b._glMsaaDepthBuffer))));\n                    this.targets.push(b)\n                } else this.setFramebuffer(null)\n        },\n\n```. Tried it! Same result. A single flicker occurs with the start of each new message displayed.\nAs an aside, this solution has two WebGL messages instead of one:\nError: WebGL warning: drawElements: Vertex fetch requires vertex #3, but attribs only supply 3.\nplaycanvas-stable.dbg.js:5608:9\nError: WebGL warning: drawElements: Vertex fetch requires vertex #3, but attribs only supply 2.\nplaycanvas-stable.dbg.js:5608:9\n. ```\n    pc.IndexBuffer.prototype.oldIndexBufferUnlock = pc.IndexBuffer.prototype.unlock;\n    pc.VertexBuffer.prototype.oldVertexBufferUnlock = pc.VertexBuffer.prototype.unlock;\npc.IndexBuffer.prototype.unlock = function () {\n    this.oldIndexBufferUnlock();\n    this.device.indexBuffer = null;\n    this.device.boundBuffer = null;\n};\npc.VertexBuffer.prototype.unlock = function () {\n    this.oldVertexBufferUnlock();\n    this.device.vertexBuffer = null;\n    this.device.boundBuffer = null;\n};\n\n```\nThis modification appears to be working. Testing some more.\nYeah, all four of those lines are required, but it's working as well as modifying device.js now. Is the plan from here just to edit those functions directly instead of relying on a monkey patch locally?. I reproduced the issue in what I believe is a minimal example! Added you to the team on it. \"Textbox Bug\"\nThe name isn't quite representative of what's going on. I learned more about the issue while reproducing it.\nMy camera has a 'fader' in front of it, a plane which I tweak the opacity on to fade in and out of scenes. If this fader plane is disabled, the issue goes away, but when enabled, even if 100% invisible, the bug triggers the plane to partially render.\nThe monkey patch is in the code for messagebox.js, commented out. If you comment it back in, the issue vanishes as expected.\nSimplifying it boils the issue down to literally just:\n\nAdjust camera to pos 0, 10, 0 and rot -90, 0, 0\nAdjust background plane to scale 16.9, 1, 9\nAdd child plane to camera, position it at 0, 0, -0.5, give a material that is black and invisible.\nAdd 2D Screen\nAdd element group w/ pos 0, -25, 0\nAdd text element to group\nAdd script to text element which updates element.text at some interval.\n\nAnd voila, you've cooked up a rendering issue.. ",
    "CarlBateman": "Sorry for the two PRs only saw the last comment beforehand.. Would\nvar radius = opts && (opts.radius || opts.baseRadius);\nradius = radius !== undefined ? radius : 0.5;\nbe clearer?. Would\nvar radius = opts && (opts.radius || opts.baseRadius || 0.5) || 0.5;\nbe acceptable?. No (I wouldn't know how), but it has been merged. Is there a problem?. Dunno. :( I'm still getting to grips with GitHub, but the current version looks OK, so hopefully everybody's happy?\n. ",
    "Leander1P": "As a tiny status update, we may have a workaround for our particular issues (although it doesn't yet explain why things broke around then for sparks on the aforementioned devices).\nOur attempt to set forceCpuParticles was botched somehow; if we force it to true in playcanvas-latest.js near the unmaskedRenderer branches in a near-HEAD build (rather than trying in a game script), the sparks example works, as does our demo (although positions or scales are messed up, will investigate this shortly) -- on at least an iPad 2 with 8.4.1 and an iPhone 5 with 10.3.3 (the only two I've tested on).  \nSo a workaround for our particular issues may come down to more unmaskedRenderer special-cases a la those suggested at https://forum.playcanvas.com/t/particles-issue-for-ipad-2-and-4/2237/3 .\nI'm going to keep hunting for a bit to try to see if I can ascertain why we're getting some unexpected position/scale in our particle systems with forceCpuParticles, but that should probably end up in another issue or PR to avoid making this one any more vague than it already is.\nAlso may continue to try to figure out why things broke around the commits mentioned in the bisect above -- modulus temporary shader compile errors -- with the default forceCpuParticles (undefined/false, I think, on these devices?).  It would be nice to have GPU particles on these devices, if at all possible.  Will try to report back here with any findings, if time and deadlines allow any more investigation.\n. I sort of monkey-patched in a solution for us that'll work under launch etc, for the time being; this uses the alternate/additional approach of putting the _createSource calls in play/resume for the non-WebAudio branch.\n```javascript\nvar PlayCanvasFixes = pc.createScript('playCanvasFixes');\nvar installPlayCanvasFixes = function() {\n    if ( pc.SoundManager.hasAudio() && ! pc.SoundManager.hasAudioContext() ) {\n        var oldPlay = pc.SoundInstance.prototype.play;\n        var oldResume = pc.SoundInstance.prototype.resume;\n        pc.SoundInstance.prototype.play = function () {\n            //console.log( \"monkeypatch: SoundInstance.play\" );\n            if ( ! this._source ) {\n                //console.log( \"monkeypatch: SoundInstance.play calling _createSource\" );\n                this._createSource();\n            }\n            oldPlay.call( this );\n        };\n        pc.SoundInstance.prototype.resume = function () {\n            //console.log( \"monkeypatch: SoundInstance.resume\" );\n            if ( ! this._source ) {\n                //console.log( \"monkeypatch: SoundInstance.resume calling _createSource\" );\n                this._createSource();\n            }\n            oldResume.call( this );\n        };\n    }\n};\ninstallPlayCanvasFixes();\n```. (Apologies while I chase my tail a bit here; I can probably whip up a minimal repro case if this doesn't prove fruitful. =)\nLooking further up the stack, perhaps it's actually the resizecanvas event that's the important link? I don't see the resizecanvas for ScreenComponent off'd either?\nhttps://github.com/playcanvas/engine/blob/d0e2c802a37ae721b5b29117103a0e23e36781d0/src/framework/components/screen/component.js#L39. No longer getting the undefined error and I don't see ScreenComponent hanging around in heap snapshots after the scene.  Thanks!. We monkeypatched this temporarily as a proof of concept and it appeared to work:\njavascript\n    var useEntityDestroyFix = true;\n    if ( useEntityDestroyFix ) {\n        var oldDestroy = pc.Entity.prototype.destroy;\n        pc.Entity.prototype.destroy = function () {\n            oldDestroy.call( this );\n            console.log( \"monkeypatch: entity.destroy setting this._parent=null.\" );\n            this._parent = null;\n        };\n    }. Sure thing, will let you know momentarily.\n\nFor what it's worth, as a slight digression: we've done a combination of both monkey-patching and engine changes.\nWhen a single programmer is debugging or testing engine stuff, it's typically been an easier (although perhaps not faster) flow for us to work with the Publish -> Web Download version, with a slightly modified index.html to point at the playcanvas-latest.js that is generated locally.\nWhen \"deploying\" certain fixes, it's been easier to just monkey-patch in a script early in the load order, so that all the other folks on the dev team don't have to be savvy to the use_local_engine stuff and can benefit from the fixes however they play -- at least until the fixes are upstream (and sheesh y'all are great at turning around fixes, it's been delightful, thank you), and for certain stuff that you wouldn't want upstream.  =)\nThere are various concerns with $big_client about ever sending anything over http versus https, and I've been bitten repeatedly by CORS issues, so I admit to noticing but not yet trying the ?use_local_engine=true stuff.  Was tossing around the idea of using Charles Proxy to get the Access-Control-Allow-Origin stuff correct to let the use_local_engine stuff work in https mode -- or just chrome's --disable-web-security -- but haven't gotten that far yet.. Looks like all is well!  Verified the _parent link is breaking where we'd expect it to and the tween is stopping (with the changes from https://github.com/playcanvas/playcanvas-tween/issues/3 ).  No other issues apparent so far (testing on launch with use_local_engine on a debug build from 73340dad5c5e1b6a79d770be02a301a4452c2f53).\nNothing terribly suspicious in a first glance across a heap snapshot either.\n. Closing since this appears to be in stable as of v0.216.5 =)  Thanks so much!. ",
    "Neon22": "it looks like this fixes #848 ??. ",
    "highvrahos": "@willeastcott a roadmap would be more than welcome!. Hi @willeastcott, although docs state this change doesn't affect cubemaps, I am getting strange behaviour on a project build last week.\nOriginal build:\nhttps://playcanv.as/b/Na5C4IAc/\nToday's build:\nhttps://playcanv.as/b/8zuWiG44/\nHaven't changed anything in between, so I assume a new engine build has been pushed.\nNotice how the cubemap rotates in a weird manner. I could fix this from my side, but I would like to adapt my changes to what changed in the engine.\nOn my update loop I get the forward vector of the camera and pass it to the shader:\n// look dir\nthis.material.setParameter(\"lookDir\", this.camera.forward.data);\nOn the shader the cubemap is added to the skybox colour. You will notice it's the reflectionCubePS shader chunk:\nvec3 lookupVec = fixSeams(cubeMapProject(dReflDirW));\nlookupVec.x *= -1.0;\ncol += textureCube(texture_skybox, lookupVec).rgb * material_reflectivity;\nReversing y or z, or removing x doesn't resolve this.. Yes, you are right, using previous engine builds doesn't seem to resolve this.\nThanks for the quick reply! I will debug and see what might have changed.. ",
    "ransico": "I think the bug existed prior to your recent submission as well - so I don't think your recent PR regressed this :) \nYour suggestion sounds like it should do the trick though!. ",
    "leweaver": "Sorry for the delayed response - I've been out of the office for the past 10 days!\nNo easy answers on this one - the gamepads API doesn't really support the notion of 'pinning' a physical controller to a particular player number (especially across disconnect/reconnect).\nIf the number and ordering of gamepads mattered strongly to a developer across disconnect/reconnect, I suspect they would need to detect a change in the number of connected gamepads and respond by pausing the app, presenting a dialog of some description allowing players to 'reclaim' their controlled avatar. \nI don't have a strong opinion on whether you should introduce gaps in the array; while it does introduce consistency with the Gamepad API - that is always subject to change since it is not a ratified standard no may be an own-goal in the long run. Additionally, introducing gaps could be more error prone in apps, since developers will need to check for nulls (and not just take gamepad 0)\n. ",
    "afk-mcz": "Hey Is this related to this issue ?\nhttps://forum.playcanvas.com/t/entity-clone-not-deep-cloning-attributes/5374. Yes, this seems to fix the issue\n. @vkalpias I tried to replicate it on a new blank project but I couldn't. I think I have a post Initialization script around that triggers the object initialization, and maybe it's getting called in the wrong order, and that's why my objects are not getting initialized.\nI changed a lot of files trying to figure out the initial problem, so right now it's a little bit hard to reproduce in another project, will try later if the bug continues.. @vkalpias PM'd you . ",
    "felladrin": "Good idea!. ",
    "Neoflash1979": "Inspired by http://glmatrix.net/docs/quat.js.html#line91\n```\n/*\n * @function\n * @name pc.Quat#getAxisAngle\n * @description Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setFromAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param {pc.Vec3} [axis] The 3-dimensional vector to receive the axis of rotation.\n * @returns {Number} Angle, in degrees, of the rotation\n /\nQuat.prototype.getAxisAngle(axis)\n```. @daredevildave I have completed the license agreement.. Sorry about that, it is a mistake. I think the wires got crossed between my TypeScript declaration file and the source code.. ",
    "goldenratio": "\n. Thanks. Closing it. I started a forum thread https://forum.playcanvas.com/t/recreating-fallingshapes-demo-in-p2-js/5610 . ",
    "asvrada": "Done :D. ",
    "maungers": "I made a simple example, there are no problems with triggers =)\nhttps://launch.playcanvas.com/582175?debug=true (details in the console)\nApparently the problem was in our code, but it is already solved in another way.\nI apologize.. yes, in that you described there are no problems, it's easy to fix)\nit's about reducing performance and incomprehensible errors when using mac + chrome\nall who use mac + chrome please test this app:\nhttps://interactive.olympicchannel.com/avatar/. I do not know if this can be reproduced ... I do not have Mac + Chrome\nThese problems were reported to us by our testers.\nYes, probably the problem was in the old version of Chrome, I advised the testers to update the Chrome =)\nIf the problem persists, I will report this...\nThank!. ",
    "viziionary": "Edit: Just realized there is already a way to do this via ApplyForce^2, ignore this.. ",
    "mcmorry": "I'll start by doing a simple repro, and I'll try to do a fix. If I'll not be able I'll call for help :). @willeastcott It's a bit more complicated than expected. \nI can't reproduce this issue after publishing the app because the url changes from playcanvas.com to playcanvas.as and Chrome stops suggesting the account (the one of the playcanvas forum).\nBut this raises another issue: I can't make Chrome to prompt for storing a new account, because I'm doing the submit by Ajax.\nI was searching online and there are tons of outdated and awful html/js tricks to do that.\nI'll keep trying, but if you have any ready made solution, it's more than welcome.. Yes for sure I can do that, and I'll do.\nI just realized that the auto-saving system doesn't work on Chrome. while on Firefox is ok.. So I paced a breakpoint on the exception line and the keyCode argument is undefined.\nThe call stack is very short and it brings me here:\nKeyboard.prototype._handleKeyDown = function(event) {\n    var code = event.keyCode || event.charCode;\n    var id = this.toKeyIdentifier(code);\n    this._keymap[id] = true;\n    this.fire(\"keydown\", makeKeyboardEvent(event));\n    if (this.preventDefault) {\n      event.preventDefault();\n    }\n    if (this.stopPropagation) {\n      event.stopPropagation();\n    }\n  };\nevent type is \"keydown\" but both event.keyCode and event.charCode are undefined:\nEvent {isTrusted: true, type: \"keydown\", target: input, currentTarget: Window, eventPhase: 3, \u2026}\nbubbles: true\ncancelBubble: false\ncancelable: false\ncomposed: false\ncurrentTarget: Window {postMessage: \u0192, blur: \u0192, focus: \u0192, close: \u0192, frames: Window, \u2026}\ndefaultPrevented: false\neventPhase: 3\nisTrusted: true\npath: (7) [input, form.loginForm, div.loginPanel, body, html.gr__launch_playcanvas_com, document, Window]\nreturnValue: true\nsrcElement: input\ntarget: input\ntimeStamp: 2241.925\ntype: \"keydown\"\n__proto__: Event\nI'm not sure what is the best approach in this case.\nMaybe to check if code is undefined and quit the function? Or should we still re-fire the \"keydown\" event?. PR sent. @vkalpias so if I have vec1 and vec2 I have to allocate a new vector to calculate the difference and finally the length. Is it correct?\nIn case this distance must be calculated every frame (or more time per frame) will be better to cache the temporary vector in a class field.\nThe idea to have \"static\" methods like the one suggested by @ronkorving is not that bad and could be applied in more cases.\nTo keep the engine source small, we could make an extension library that adds these methods to main engine objects, like pc.Vec3.distance(vec1, vec2). When I started using some vector math in PlayCanvas I found very weird the add2 method and alike. I would have probably preferred a pc.Vec3.add(vec1, vec2) that returns a new Vec3, to avoid manually creating a vector for the result.\nI mean, add2 is the just a shortcut for result.copy(vec1).add(vec2);\nOne more use case for static methods is the Color.fromString. I feel more natural to type\nvar color = pc.Color.fromString('#123456');\nthan\nvar color = new pc.Color().fromString('#123456');\nof course, if I have to keep doing this multiple times is better to use the instanced method and avoid allocations.\nBut for sure the methods that would really benefit from being static, are all those methods that return scalar values and not new object instances, like distance or distanceSqr.\nAnother case is the lerp method. Wouldn't be easier to learn this:\nvar res = pc.Vec3.lerp(vec1, vec2, t);\nand to avoid allocations also\nvar res = new pc.Vec3();\npc.Vec3.lerp(vec1, vec2, t, res);\n. I run it on mac + chrome and I didn't get those errors.\nInstead, I have tons of \"pc.Mat4#invertTo3x3: Matrix not invertible\"\nAlso, I don't have any performance issues, but other types of issue. Probably it's still in development and you already know, but here they are: avatar cap customization crashes, pause->quit->restart sequence is broken, after many games played and going back to \"Cross Country Skying\" when I tap it turns two times, the opponent to beat has the cap/glasses moving independently from the head.. Probably not. What do you mean?. Yes of course... I also put breakpoints and tested in multiple ways. Doesn't work.. repro: \nhttps://playcanvas.com/project/534820/overview/children-enabled-bug\nthe Factory script clones the box template and enables it.\nThe Box script is setting one child enabled and the other not enabled, but both children are visible.. I understand, but this is really bad...  the clone should really clone the whole entity.\nThe documentation is even more confusing by not saying that references are not remapped:\nhttps://developer.playcanvas.com/en/api/pc.Entity.html#clone\n\nCreate a deep copy of the Entity. Duplicate the full Entity hierarchy, with all Components and all descendants\n\nAnd also the names have to be unique and we can't use the editor at full potential.\nI really hope the team will consider this (and prefabs) a top priority.. yes, but lacking the prefab concept, and having only the clone method to create multiple instances of the same object, is not a missing feature... is more like a flaw in the design.. Also, I went inside the cloned object and this is also very strange.\nThe cloned entity has the two children referring both to child1:\n\n. oh my shame... sorry.\nI'm trying now to monkey patch the clone method to take the name from the assigned entities in the attributes and remap them on the cloned object. I hope it will simplify my work.. so as a workaround I call this function in the initialize:\nBox.prototype.remapEntities = function() {\n    var attrs = this.__scriptType.attributes.index;\n    for (var attr in attrs) {\n        if(!attrs.hasOwnProperty(attr)) continue;\n        if (attrs[attr].type == 'entity') {\n            this[attr] = this.entity.findByName(this[attr].name);\n        }\n    }\n};. > It may be a bit slow as now every entity reference attribute will attempt to find a child entity\nyes but if this is a cloned object I have to do it in any case for all of them otherwise the reference will be wrong and useless.\n\nAlso, in the case of a reference to an entity that is above itself, (e.g a parent or a parent of a parent), it will result in a null reference.\n\nTrue, it doesn't address all cases, but is enough for simple entities where the view logic is implemented all in the topmost parent of the prefab.. In the meantime that I'll get an answer to the point 1 (so that I know I could start working on a PR), I addressed the limitation of point 2. \nIn fact, I had problems with non-unique names.\nI then replaced the findByName with findByPath but I had to build the path for each referred entities.\nHere is the updated version:\n```\npc.Entity.prototype.clone_original = pc.Entity.prototype.clone;\npc.Entity.prototype.clone = function patched_clone() {\n    pc.Entity.prototype.clone = this.clone_original;\n    var cloned = this.clone();\n    pc.Entity.prototype.clone = patched_clone;\n    cloned.remapClonedEntity(this, cloned);\n    return cloned;\n};\npc.Entity.prototype.remapClonedEntity = function(source, cloned) {\n    var i;\n    if (this.script) {\n        var scripts = this.script.scripts;\n        for (i = 0; i < scripts.length; i++) {\n            var script = scripts[i];\n            var attrs = script.__scriptType.attributes.index;\n            for (var attr in attrs) {\n                if(!attrs.hasOwnProperty(attr)) continue;\n                if (attrs[attr].type == 'entity') {\n                    var attrPt = script.__attributesRaw[attr];\n                    if (attrPt) {\n                        var path = getPathToRoot(attrPt, source);\n                        var newEntity = cloned.findByPath(path);\n                        if (newEntity) {\n                            script.__attributesRaw[attr] = newEntity;\n                        } else {\n                            console.log(this.name + '.' + attr + ' points to an non-child entity: ' + path);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    for (i in this.children) {\n        var child = this.children[i];\n        // sometimes there is an empty NodeGraph as first child... why???\n        if (child.remapClonedEntity) child.remapClonedEntity(source, cloned);\n    }\nfunction getPathToRoot(child, root) {\n    var path = child.name;\n    var node = child;\n    while (node.parent && node.parent != root) {\n        path = node.parent.name + '/' + path;\n        node = node.parent;\n    }\n    return path;\n}\n\n};\n```. I got a decent improvement by disabling the container of the tables, and enabling back once the tables are created.\nAs soon as I enable it, it still takes many seconds to resume the app.. Yes are a lot of elements and for sure I can create only 3 tables and recycle them while scrolling, but I was very surprised of the very bad performance.\nIt get worst and worst after each new table. It looks like that the engine has to go through all the node right after a new node is added in the hierarchy, maybe to define the rendering order or something similar. I'm not sure.\nI just clone and add the new entity to a parent. Nothing else.\nMy initialization scripts are very light and are not the source of the slowdown  (except for the cloning of new entities). By adding a 2D Screen to each table makes it way faster! Thanks.\nIt still gets slower and slower, but much less. And using other tricks as a lazy loading of the seats or, even better, a recycling of the tables while scrolling will be smooth enough also on mobile.. On mobile even to generate 2 tables it takes 4 seconds. It can't be.... @daredevildave @willeastcott @vkalpias \nI set up a simple repro that reproduces the issue. It's private as it contains some reserved content. \nSo, please, if you can help, I can add you.\nIt directly generates some tables (the amount can be changed in real-time in the \"LobbyView\" attribute) and prints in the log some timings.\n3 tables on my Mac takes around 0.7 seconds. On a Samsung S4 around 5.8 seconds.\n. ok... I cleaned it from most of the reserved contents and made it public.\nHere is the project:\nhttps://playcanvas.com/project/535478/overview/performance-issue\nI know that JS is not as fast as native code, but I did much more complex UI in Unity that is loading much faster on mobile than this one on Playcanvas. So, I think it has to be an issue somewhere.. wouldn't the initialization be called two times this way? I'll check the sources.. This is going to be quite an annoying issue.\nIn my workflow, I have multiple entities that get cloned, ready to be used but disabled on start.\nThen I have a system to setup and initialize the scene that calls methods of those entities to perform additional internal setups (like enabling or disabling some children assigned to some attributes). But all the attributes of these entities are undefined.\nSo I have now only two way to go:\n\n\ncheck every time in multiple places if the entity has been initialized so that I can use the attributes values. This solution is not always enough if I need those attributes right at that moment.\n\n\nenable all the entities right after cloning and disabled them again just to get the attributes initialized. But this makes the cloning much slower because of this other issue: #1092 \n\n\nDo you see any other workaround or solution?. Yes is fixed!\nThanks!. So is not a Playcanvas bug, but as pointed by @vkalpias, is Chrome that simulates mouse events after touch events.\nThis can be avoided by calling event.preventDefault() on touch end event.\nWhile this could not be a valid solution for all situations, it could be probably useful to add this info it in the documentation to avoid hours of debugging.\nIf you agree, I could try to integrate it.. @willeastcott PR sent. I hope it will be good. Otherwise, let me know how to improve it. :). Hit play. The text will change but the red squares don't move as expected . I verified that this behavior is not related to the text element only.\nIf I resize by code any element, its children don't get notified, and I have to call a fake setLocalPosition to force them to update their position based on the anchor.. If the length is changing after removing a component during the loop, both solutions of checking script or not caching the length are not enough.\nIn both cases it would avoid the exception but one component could be skipped.\nFor example  [A, B, C, D] while the loop is doing the update of B (so the index is 1) and B is removed, on next loop the index will be 2 and the array will be [A, C, D]. It means the from B the code will jump to D skipping C.. One option could be to queue the deletion of script components and execute the deletion after the update or the postUpdate.. About to apply the wrapping by default, it could limit future implementation of auto-sizing of the font.\nFor example, we could set a fixed width, but not to wrap the text, but to make it fit in that size by reducing the font size.\nAlso, by setting the height we could enable both wrapping and auto-sizing.. I don't know why I have also the old commit about the fix for Chrome included. It was already merged.\nIs it possible to remove it or I have to close the pull request and redo it?. @vkalpias I saw you applied the changes directly without merging this PR. Thanks. I close it then.. It's an unfortunate design choice. I also had this issue. It's more natural to think that an even should be triggered as soon that condition becomes true. And by enabling a disabled object the first time is what you expect to happen.\nBut going to change it now will go to break all the code that is manually calling the onEnable function :(. @scarletsky by blur do you mean something like losing focus?. Yes it could be useful. Also, I would probably add a try catch around the JSON.parse and notify the exception as an error, so that it can be better handled by the application.. ",
    "vishnukool": "I would love for this bug to be resolved. It almost makes dynamic model loading useless without the proper texture dependencies. Any chance we can prioritize this, please? pretty please?. ",
    "pete-richter": "I\u2019ll try it with a fresh scene.  I admit I didn\u2019t isolate it, but disabling it seemed to alleviate the issue.\n\nOn Feb 20, 2018, at 5:45 PM, Will Eastcott notifications@github.com wrote:\nSo this is reproduced by:\nCreate new empty scene.\nCreate a default particle system entity.\nLaunch on iPhone 5C\n?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#issuecomment-367185773, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhXBpI-K_9DL_vMcTlkqrncdA66mrks5tW3VBgaJpZM4SMHw9.\n\n\n. Sorry for the delayed response; I thought I already had.\nIt does not throw the error, it works fine!  My original scene isn't wildly complicated.  I have about 7 spot-lights total, and very very basic materials.  Two with Cubemaps and that's it.  What else might I be doing that's messing it up?. I\u2019ll see what I can do.  I\u2019m tinkering right now with implementing word wrap on the Text Element, since I\u2019m needing it pretty badly, as well as a single set of lights that travels with you, and assumes predefined positions/colors/etc for each installation you visit.  Everything else is either unlit or light mapped.\nThank you for looking into this.  I\u2019ll do what I can to help get to the bottom of the issue.  It\u2019s good to know that it\u2019s at least possible, and does run reasonably well with 4 digits worth of particles.\n-Pete\n\nOn Mar 12, 2018, at 10:56 AM, Will Eastcott notifications@github.com wrote:\nSo many possibilities. 7 spot lights is quite a lot. Are they shadow casting spotlights? Could be running out of VRAM? Hard to say. If you can create a simple scene that reproduces this, I can debug... I don't have a 5C, though. But maybe I can find something similar somewhere in the office.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#issuecomment-372404854, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhYBzJjRDUL5RDqN5ss0-uJIE5lVJks5tdrbWgaJpZM4SMHw9.\n\n\n. On that topic\u2026\nIs there any way to get character metrics from a text element?  :)   I\u2019ll \u201cgaffle\u201d it in the meantime with some magic attributes.\n\nOn Mar 12, 2018, at 11:08 AM, Pete Richter pete.oliveira.richter@gmail.com wrote:\nI\u2019ll see what I can do.  I\u2019m tinkering right now with implementing word wrap on the Text Element, since I\u2019m needing it pretty badly, as well as a single set of lights that travels with you, and assumes predefined positions/colors/etc for each installation you visit.  Everything else is either unlit or light mapped.\nThank you for looking into this.  I\u2019ll do what I can to help get to the bottom of the issue.  It\u2019s good to know that it\u2019s at least possible, and does run reasonably well with 4 digits worth of particles.\n-Pete\n\nOn Mar 12, 2018, at 10:56 AM, Will Eastcott notifications@github.com> wrote:\nSo many possibilities. 7 spot lights is quite a lot. Are they shadow casting spotlights? Could be running out of VRAM? Hard to say. If you can create a simple scene that reproduces this, I can debug... I don't have a 5C, though. But maybe I can find something similar somewhere in the office.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#issuecomment-372404854, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhYBzJjRDUL5RDqN5ss0-uJIE5lVJks5tdrbWgaJpZM4SMHw9.\n\n\n. Already in the weeds, sir!  ;D.    Thanks for the prompt response!\n\nOn Mar 12, 2018, at 12:36 PM, Vaios Kalpias Ilias notifications@github.com wrote:\nThere's no 'official' way to get character metrics - I suggest going through the text element and checking out the code basically.\nHaving said that we are going to implement text wrapping ourselves soonish I believe.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#issuecomment-372436604, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhXgXaNgpXr-4oOnSy-eA3LcfVpC6ks5tds4qgaJpZM4SMHw9.\n\n\n. Totally fine, I should have closed it, sorry.\nI do have another question:\nI noticed that the new Text Element is either:\n- rendering at twice the size when not using device pixel ratio,\n- or, rendering at half size when rendering at device pixel ratio\nThe only workaround I see presently is having some sort of event listening script on text elements that would hear events from my existing AspectRatioManager, but I was curious if you had a better suggestion.\nThe reason I don\u2019t \u201cjust pick one\u201d is because my aspect ratio manager is actively measuring frame rate, and if it determines the fps is too low, it disables device pixel ratio rendering, which is actually working great.  I was just wondering if there was a way to get the UI elements to play along.  :)\n\nOn Mar 24, 2018, at 9:11 AM, Will Eastcott notifications@github.com wrote:\nClosed #1101 https://github.com/playcanvas/engine/issues/1101.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#event-1539257817, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhc6gKUNmayBsO6mNPx52d9l0QTNIks5thnA7gaJpZM4SMHw9.\n\n\n. On it.\n\nOn Mar 25, 2018, at 1:31 PM, David Evans notifications@github.com wrote:\nPlease make a separate issue/thread.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1101#issuecomment-376001003, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhTuaM1qihD1s7E-bBhonH8QG1Njwks5th_6egaJpZM4SMHw9.\n\n\n. Was hoping to keep the Y positions at 0.  :)   Semi-Liquid Layout.\n\nOn Mar 10, 2018, at 2:06 PM, Will Eastcott notifications@github.com wrote:\nI think @daredevildave https://github.com/daredevildave or @vkalpias https://github.com/vkalpias are best placed to advise you here. But if I select the Title under screen 1 and set to 'Bottom Left' and then set Y translation to -57, it looks fine and seems to work as expected. Same for Title under screen 2. Set preset to Bottom Left and Y position to -57.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1126#issuecomment-372070987, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhfHQdEeenFK_H6EZhmsVWfo84KMoks5tdE6CgaJpZM4SlVr_.\n\n\n. My goal was to keep all margin, alignment, and anchor values at 0 or 1, as they apply to floating the given element to the top, or sinking it to the bottom.  So that the only real arbitrary values were the actual width and height of the elements themselves, and the width and height of the encompassing canvas.\nIn the editor of the project I supplied, you\u2019ll notice that the Y values of both title and subtitle are 0, yet they stick to the top and bottom, respectively.  And you can control the spacing simply by changing the height of the canvas.  But in the player, it\u2019s not reflected as such.\n\nOn Mar 11, 2018, at 8:50 AM, Vaios Kalpias Ilias notifications@github.com wrote:\nDoes it work if you make sure your margin is 0?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1126#issuecomment-372125404, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhXwLUhTcoNkS0WB0FEJC3qgDfe8aks5tdUfUgaJpZM4SlVr_.\n\n\n. My mistake, I saw an app\u2026. Reference without a this, and figured it was deprecated, like the Toon Shader example I was messing with the other day.\n\nOn Mar 10, 2018, at 1:53 PM, Will Eastcott notifications@github.com wrote:\nThe loading screen script format is not related to the script component script format. It just defines a function of the form:\npc.script.createLoadingScreen(function (app) {\n    // Implement your custom loading screen...\n});\nI just tested the feature with a new project (current scripting system) and edited the page background color in the CSS. Works just fine.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/playcanvas/engine/issues/1127#issuecomment-372070168, or mute the thread https://github.com/notifications/unsubscribe-auth/AIJrhaosVDjJD2F7DcOGTJ0QNVpbEjUiks5tdEt2gaJpZM4SlVu6.\n\n\n. ",
    "tmey2016": "I can get part of the way. \nA brief summary:\nengine/device.js:21-27 is the problem: _contextLostHandler and _contextRestoredHandler. From this great Khronos Group Wiki page on handling WebGL context lost:\n\nIn all these cases and more your program may lose its WebGL context. By default when a WebGL program loses the context it never gets it back. To recover from a lost context you must take the following steps \n1) add a lost context handler and tell it to prevent the default behavior \n\n\n```\nvar canvas = document.getElementById(\"myCanvas\");\ncanvas.addEventListener(\"webglcontextlost\", function(event) {\n    event.preventDefault();\n}, false);\n```\n\n2) re-setup all your WebGL state and re-create all your WebGL resources when the context is restored. \n\n```\ncanvas.addEventListener(\n    \"webglcontextrestored\", setupWebGLStateAndResources, false);\n```\n\nAt the point that setupWebGLStateAndResources is called the browser has reset all state to the default WebGL state and all previously allocated resources are invalid. So, you need to re-create textures, buffers, framebuffers, renderbuffers, shaders, programs, and setup your state (clearColor, blendFunc, depthFunc, etc...) \nFor many programs this is a simple matter of calling your init or setup function again. \nWe went through the demos in the Khronos WebGL SDK and made them handle lost context. Below are some of the issues we ran into and the solutions we used. \n\n\nSolution:\nPart 1 above looks simple, just add event.preventDefault() to _contextLostHandler. \nPart 2 is what I have no knowledge of: in _contextRestoredHandler we must \"re-setup all your WebGL state and re-create all your WebGL resources\". Maybe this is complicated, maybe this is simply calling a particular engine initialization function you can direct me to.\nTesting:\nI am extremely new to PlayCanvas, so I certainly don't have an engine development environment, but I can try to help however I can. The WEBGL_lose_context extension would seem to be what is needed to test this without a particular hardware setup.\nMore testing details:\nIn VrDisplay.requestPresent, this.display.requestPresent() is failing some of the time. That is, I can refresh the browser page and there is about a 50% chance the whole thing works, 50% chance this error occurs. This is because the webglcontextlost event is firing. (I wonder if it is because the Surface Book 2 has two GPU.). ",
    "yayhi": "@vkalpias @daredevildave @mcmorry agree re having a flag, added.\n@vkalpias thanks \u2013 yes there are some cases I still need to fix when actually running within the engine \u2013 please see PR description :) I will update the PR once I'm done with that.. Updated to correctly handle left/center/right alignment:\n\nAnd also to handle some special cases around alignment when there is trailing whitespace at the end of a line, or when a hyphenated word is wrapped:\n\n. @willeastcott yes, all good from my side.. I've pulled the linting updates out into a separate PR to reduce noise: https://github.com/playcanvas/engine/pull/1187/files. The duration is controllable, via the fadeDuration property. Personally I don't feel that being able to specify an easing type is necessary \u2013 linear usually looks better for alpha and color fades in my experience. Since it also complicates things a fair amount, I think it's better to leave it out for now.. > It's hard to say what should be inside a button and what not.\nFor example in my implementation I had the need to specify what entity to show/hide on over/disable/click because in this way I can tune also the content of the button (like a dynamic text for example) and not just a fixed sprite of the background.\nFor me having more options is better than less. This way you cover most use case and developers can speed up their work.\nI agree that there are lots of potential use cases. Given that it's difficult to second-guess them all, I think we should aim to provide a base level of functionality initially (which will cover 90% of the basic use cases), and then add functionality over time when it's clear what the requirements should be. That's why I've implemented TransitionMode as an enum \u2013 so that new transition modes can be easily added in future.\nThe user can always implement their own behaviour via scripting, which is why the mouseenter/leave/down/up and touchstart/end/leave/cancel events are all propagated. Also, they can use a different entity as the button background image if they desire, by reassigning the imageEntity property.\nAt the moment we don't have a button component at all \u2013 this PR at least remedies that :) People can raise further PRs if they have ideas for additional functionality that would be useful.. touchcancel is completely different from touchleave actually:\n\nhttps://developer.mozilla.org/en-US/docs/Web/Events/touchcancel\nhttps://developer.mozilla.org/en-US/docs/Web/Events/touchleave\n\nTouchcancel is for cases when the touch ended for reasons other than the user removing their finger from the screen. Touchleave is for cases where the user moved their finger off the element, but hasn\u2019t removed their finger from the screen.\nTouchleave isn\u2019t actually part of the DOM spec anymore (it never got past the proposal stage) but is required in order to implement the requested behaviour of buttons switching back to the non-pressed state if the user moves their touch away from the button.. Ah, interesting \u2013 great point. So perhaps we need to go with the preventDefault() solution I mentioned in the description? Or alternatively, perhaps we could modify element-input.js to provide an additional set of standardised events (i.e. called just down, up etc), which could also handle de-duplication in this scenario.. Updated to use preventDefault(). What's the best way of testing this performance wise \u2013 do we have a large/complex project we can test with?. > Regarding the naming of the events, we haven't used the words gain or lose anywhere else, but usually use set, unset or remove. I'm not too bothered about this just saying that this is the only thing that popped out as inconsistent to me but I realize it's probably a lot of work to change those.\nThanks for the feedback, that was actually one area I wanted to discuss but forgot to highlight in the PR description. I actually chose gain/lose deliberately because we don't already use them for anything else, and because what they represent doesn't actually correlate directly to any of the set/unset or add/remove events. The reason they don't directly correlate is because of this, which I found to be a really useful way of handling the availability of components. Happy to change to some other names, but that was my reasoning.\n\nAnd the other thing is the use of # - we currently use : for everything. Maybe using : for these events is harder to parse? Unless we're always taking the first part of string.split(':')\n\nYes \u2013 I chose the # separator specifically because : is already used within many event names, so I wanted it to be clear that the # is separating the source name from the event name. Also, it somewhat matches the JSDoc syntax, which I felt was quite nice.. Thanks, taking a look.. So there are three separate issues here:\n\nThe tint color does appear to be copied to the cloned buttons.\nIf you mouse over the original entity at clone time, all clones get stuck with the hover color.\nIf you mouse over the original entity at clone time, the original button also gets stuck with the hover color.\n\n(1) and (3) are both addressed by https://github.com/playcanvas/engine/pull/1266. In fact the tint states etc were all being copied just fine; the problem was that the entity reference that points to the button image was not being updated due to an order of operations issue.\n(2) is more difficult to fix, as there is no dedicated storage on the Button component for the 'default' tint of the image \u2013 it is instead inferred from the tint of the image at the point at which the Button component is enabled. The idea of this was to reduce redundancy in the editor UI (i.e. to avoid the user having to specify the tint on the ImageElement and also on the Button component). The same logic applies to the 'Sprite Change' transition mode \u2013 the default sprite state is inferred from the state of the ImageElement, rather than being re-specified on the Button component.\nWe should chat about how we want to address (2), but in the meantime we can get the fix for (1) and (3) in.. @daredevildave no issues as such \u2013 the resolution of the references is just deferred until the cloned entity is enabled (same applies if an entity is cloned with its Button component disabled).. @willeastcott with this change we're down to just 9 errors and 1 warning from ESLint.\nLet me know if you're not happy with any of the fixes. Several of them were cases where IMO we have valid reasons for using eslint-disable \u2013 for each of these I've added a comment with the reasoning.. @daredevildave obviously this isn't good :) I'm basically duplicating dependencies.txt. However, I couldn't see a way to test Elements or Entities without including most of these dependencies. Perhaps we could have a way to transform dependencies.txt to a list of <script> includes and inject it when loading the tests in a browser?. This change is potentially significant \u2013 it's designed to stop the resize event from being fired if a resize didn't really take place. Hopefully people don't already depend on receiving a resize event in the case where there wasn't actually a resize, but they could be doing. We could make this conditional perhaps, or do it on the recipient's end by including the previous width and height values in the event payload.. I added this TODO to draw some attention to this section during the review, as it's significant. I'll remove it after discussion.. Apologies for the noise in this file \u2013 it was necessary in order to introduce the new calculatedWidth and calculatedHeight properties. You can see most of those changes in isolation here \u2013 I was planning to put them in as a separate PR, but in the end I figured it'd be more straightforward to test both sets of changes together. Can split it out if you don't agree.. I'll resolve this shortly.. Good call, will do.. It's definitely called \u2013 if I remove the .on('toolsUpdate', ... subscription then reflow never happens in the editor. Is there a new way I should be handling updates when in the editor?. Hmm ok \u2013 where/when should that be called though? Whenever we change a relevant value in the editor?. Ok \u2013 that does seem like a lot of extra code though; there are about 20 properties that would trigger a reflow (across Element, LayoutGroup and Layout Child). Also we'd have to keep things in sync \u2013 i.e. if a new property that should trigger a reflow is added/discovered, we'd need to remember to flag it as a reflowing property in the editor too.\nIs there something about toolsUpdate that we didn't like that lead to the deprecation?. Ah, I see ok. Will update, thanks!. \ud83d\udc4d\ud83c\udffb. Could someone look over this section?. Ah, sorry \u2013 force of habit :) will fix.. I did some testing \u2013 it seems that during initialization it gets called ~3 times for each node when running in the editor, and ~4 times when running in a game (i.e. via Launch). For comparison, _dirtify() is called roughly the same number of times.\nDo you think it's worth changing it so that it's recalculated on demand?. @daredevildave should we also check whether the LayoutGroup and its Entity are enabled here before proceeding with the reflow?. @daredevildave what do you think here? Makes sense to check it IMO \u2013 i.e. if the LayoutChildComponent is disabled then it should have no effect on its element's sizing within the LayoutGroup.. @daredevildave be good to get your opinion on this \u2013 also note that this is adding a new event into a fairly regularly used codepath, so would be good to know if that's a concern or not.. The reason I'm doing this is in order to remove this entity from the layout flow \u2013 i.e. if the user disables a child entity, we need to reflow without that entity taking up any space in the layout (and vice versa).. Yeah I definitely appreciate it\u2019s a big deal adding this to GraphNode. Cool \u2013 I\u2019ll dispatch an event from onDisable/onEnable in Element instead.. Oh, haha, really sorry \u2013 I wasn't actually, I just misinterpreted the rule. I thought it was asking me to place all of the chained calls on the same line, i.e.\nreturn items.slice().sort(sortFn).map(getIndex);\nAnd I felt that separating them was actually more readable in this case.\nI've never actually considered the idea of placing dots on the same line as the object and then the next function call on the next line, as the rule actually dictates...it seems quite alien to me. The MDN documentation for Promise, for example, places all of the dots on the same line as the function call whenever calls are chained:\nPromise.reject()\n  .then( () => 99, () => 42 )\n  .then( solution => console.log( 'Resolved with ' + solution ) );\nIn any case I don't care as long as it's readable \u2013 will update.. Hmm, doing a bit more research \u2013 the AirBnB and Google styleguides both recommend dot on next line:\n\nhttps://github.com/airbnb/javascript#whitespace--chains\nhttps://google.github.io/styleguide/jsguide.html#formatting-where-to-break\n\nPerhaps it is more of a defacto standard. Might make sense to switch globally if it's not a massive pain?. Great ok \u2013 I've updated this branch to use property and raised a PR to adjust the config: https://github.com/playcanvas/eslint-config/pull/1.. Thanks \u2013 fixed.. This change allows us to specify types in the _schema for a component (like this), which then means we don't need to hand-write various bits of type casting (e.g. in initializeComponentData()).. I can pull it out into a separate PR if you prefer.. @daredevildave @vkalpias be good to get your feedback on this. This is the tweening TODO that I referred to in the PR description.. This is the touchleave TODO that I referred to in the PR description.. Ah, you mean in the case where someone clones it via the JS API rather than via the editor? Right, yes I guess we do.\nOut of interest, is there a reason that duplicating via the editor doesn't make use of engine methods like cloneComponent? Seems odd to have to implement things like the duplicated entity reference resolution in two places.. That's what the line below handles  \u2013 i.e. if the provided value is a Color/Vec with a .data member.. Not really I guess, will remove.. Sure, I understand that \u2013 what I'm saying is that if the editor did rely on engine methods like createComponent rather than implementing the same processes separately, we could just concentrate on implementing them in one place. There'd be less code to write/maintain in the editor, and bugs or inconsistencies that arise from differing behaviour in the editor vs the engine could not occur.\nFor something like duplication, the end goal is the same: the user wants to end up with a copy of a subtree with exactly the same properties as the original, regardless of whether they did that via the JS API or via the editor. As such it seems to make sense to just write it once.. Ok \u2013 anyway I guess this still needs doing :) will add to the list.\n\n[x] Implement cloneComponent(). Implemented here: https://github.com/playcanvas/engine/pull/1200. I have a sketch of this working locally \u2013 we have everything we need to do it, but it needs a bit of cleaning up. Also it's technically a breaking change (if anyone's somehow relying on the old behaviour, although you would think not), so we should treat it with a bit more caution. I'll put it in a separate PR.. Thanks, I didn't know about copy() \u2013 updated.. Ah, I removed it because it was redundant \u2013 it gets checked here: https://github.com/playcanvas/engine/blob/4c6461b613c22882810df12a76e5159e816899c8/src/input/element-input.js#L590 Which is before we get into _checkElement2d().. It only gets called when there's a reflow to process during the current frame.. We could \u2013 seems a bit premature to me though. Given this is passed to an event which gets broadcast outside of the LayoutGroup, and so we have no control over its lifetime and usage, I think it's better to send a copy than a reference to an internal object.. Re the Vec2s \u2013 we could, but that's not related to this change.. Opened a separate PR for the Vec2 thing: https://github.com/playcanvas/engine/pull/1210 :). - [ ] Handle scroll wheel events in Scrollbar component. - [x] Complete EntityDragHelper tests. - [ ] Handle scroll wheel events in ScrollView component. Done here: https://github.com/playcanvas/engine/pull/1236. This file just seems to be missing \u2013 if we add it back in we can re-enable this test.. These tests were passing before, but only because one of the files was actually failing to load and so the significant parts of the tests weren't running:\n\n\nAfter I fixed the test asset path I started getting the error:\n\n. Normally you'd use the karma-qunit package to manage the running of QUnit tests with Karma, but it assumes that QUnit has been installed as an NPM module. The version of QUnit we're using isn't available on NPM, and it has some specific APIs that aren't in the 1.0.0 version that is on NPM. So in order to avoid changing lots of the test files, I've slightly customised the adapter.\nIdeally we should update to the most recent version of QUnit, or switch to Mocha/Jasmine/etc. I figured we could put that through as a separate PR though.. [nit] Would be nicer to use .bind(this) here rather than adding the self reference.. I suppose it's possible that the element could have had its useInput property set to false by something else during the scroll operation, in which case we'd be setting it back to true here inadvertently. Perhaps we don't need to worry about that though.. [nit] _disabledContentInput would be a bit clearer \u2013 we're not actually disabling the elements.. [nit] Maybe _applyScrollTension?. ",
    "slodge2": "Is there any progress on this or alternatively an estimation on when we may expect SSAO in playcanvas?\nThe only hint I was able to find is a post back from 2015 saying its on its way. \nSo.. is it?. ",
    "MrTelanie": "thank you\ni have signed the agreement. ",
    "NichUK": "Apologies for putting this in the wrong place, and I can't reproduce it again now either. Closing.. ",
    "fwelz": "Hi have the same problem with Moto G5 Plus and Asus ZenFone 2 and 3, so it seems like VR stopped working in any device with Android.. It's seems that is a pretty old version and I not working in any browser, when do you think is going to upgrade to the new one 0.10.6?\nThanks!\n. ",
    "lvenerosy": "A bit more information, this stutter is more visible on lower end devices.. My bad about the \"whitening\", there are 3 particles but I see them at different locations so the difference in intensity was throwing me off. Then my actual problem is still about all the particles not moving together:\n\nCompared to the expected behaviour below (which happens after a few clicks):\n\n. ",
    "otrubakarel": "Disabling backface culling is a way to make this work, but when using really complex model (e.g. car) where multiple mirroring is used with multiple materials, the performance hit is quite noticeable.. ",
    "malDuffin": "I'm seeing the issue on my project as well ( nice catch! )\nWith the example above, and using the latest engine, I'm still seeing the issue...\nhttps://launch.playcanvas.com/475211?debug=true&profile=true?use_local_engine=https://code.playcanvas.com/playcanvas-latest.js\n. Is there a use_local_engine= that will use the source from the latest master branch?\nBeing able to test against the very latest commits would make it possible for users to easily check that the fix works on their projects.\n. It would be great if this was fixed, a client of mine recently tried out a prototype link and saw the jittery effect ( I found a link about it here - https://forum.playcanvas.com/t/solved-webvr-broken-gyroscope-issue/7385 ), it's a shame it isn't fixed yet after 5 months.. Batched skinning is something I\u2019m interested in with regards optimising a\nproject - will Glenn\u2019s changes be integrated to enable this feature?\nOn Saturday, June 9, 2018, Glenn Ko notifications@github.com wrote:\n\nAfter the discussion on whether basic.js should include support for custom\nchunks, i decided to revert back to to original and just rely on\nstandard.js the main choice of material to use. Essentially, with the right\nsettings, standard.js can easily emulate any unlit material, right? So,\nbasic.js is just for legacy purposes it seems.\nRegarding batching, when is clone() method being used? I don't see any\nimmediate case of it being used within the batch.js codebase itself.\nRegarding inverse bind poses from skin's rigs, from what I remembered, they\nare precomputed beforehand and remain immutable right? ie.They aren't\nmodified during rendering so it should be safe to re-use the exact same\nreference instances of inverse bind poses for the same rig, without\ndeep-cloning them, right?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/playcanvas/engine/pull/1233#issuecomment-395977309,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AE7yT0455uKZHjXuV1YaNMU9D5Twi4FPks5t6-gFgaJpZM4UfbK3\n.\n. \n",
    "yiakwy": "Dear @willeastcott I modified my questions and corrected some mistakes.\nHere is what I plan:\n```js\n// import the editor, all developed in es6, webpack3 \nconst editor = new Editor(\"#editor\") // playcanvas user interface or some version I can customize \n// Editor is a react component to compute dom representation.\neditor.bind(evt, target, cb) \n...\n// or do anything playcanvas editor requires us to do\n// editor registers elements, sets titles, sets colors ...\nexport editor\n```\nSpecifically I mean if I use playcanvas, I  build a project with es6 + webpack + playcanvas engine environment . I will also integrate an editor for inner group purpose usage. \nI tried to develop my own editor, I wrote sidebars, headers, sliders and panels (using react, sass). But that is not what I am good at. Then I think I should use some open source editors.\nIf playcanvas editor works like a plugin demonstrated above or I can help make it a plugin, I believe that then I am able to integrate it with my frontend codes (es6, webpack3/4).\nI am confident to say that Playcanvas 's editor is an application killer. It should be more popular and famous.   . copy it. ",
    "taelg": "i've spend all day trying to figure out what was i doing wrong :(. ",
    "Glidias": "What happens if let's say there's a scenerio where i got a bunch of blinking dynamic batched entities that constantly switch on and off (or gets removed/re-added back in again, etc0)?  Many batched entitites can come and go, disabled or re-enabled from pool again, etc. Or for every frame they run through some user-culler implementation onPReCull that disables/enables the entities based on visibility to camera?   When I \"remove\" entities from a given batch, usually i prefer not to dispose them, but they are simply recycled back i again via pooling.  Does it mean if i call .disable() on a batched entity the entire batching must refresh again? That doesn't sound good. Any performant way to handle such cases of dynamic batching? \nAlso, i feel 1 pc.Entity per batched item is not really good for super large scaled simulation of small things (like projectiles and such..epic battle simulator, etc..) I'm not sure if it's possible to work directly  by narrowing it down to  plain MeshInstances or just plain GraphNodes per cloned items or even just Transforms alone (instead of 1 pc.Entity + 1 pc.Model) . Ie. A Lite version like:   1 Model entity contains 1 Batched group of cloned GraphNodes (if there's hierachy) or just Transforms per mesh (if no  hierachy is needed and all clones are flattened to same level under Model entity).  That way, useless extra infos datas AABBs may even be avoided, even if it means less utility in certain cases, it means lighter footprint.  Eg. do i need AABB for every arrow projectile? Obviously not. I just need a minimal boilerpalte mechanism to perform raw batching, that's all. \nBack then when i did batching in Flash... i had an optional ICuller.filterMethod(persitantArrayBufferToFill, srcArrayOfInstances):Int hook to return a value, (zero, minus 1, or positive number), to indicate what/how many mesh cloned hierachies are visible within that batch group or have changed. \"-1\" means all items from srcArrayOfInstances is visible,  but a postive number indiciates array items filled up to that positive len within persitantArrayBufferToFill has changed. Then, the batch instance data bone transforms are simply updaed per frame for whatever instances found within the filter and pushed to renderer with a capped number of triangles to draw (this is based on X amount of items visible within filter). (eg. then, if needed, set the batched draw call's number of triangles to simply correspond to how many batched clones are visible at one time for that frame, and reupdate those uniform arrays that were passed to the shader based off what is found in the filtered array of active/visible clones). If needed, the filter could return a code like \"-2\" that indicates \"no change since last frame\", so the uniform array buffer doesn't need re-updating.. All materials should support custom chunks as per standard I feel. If needed, factor out that code to some seperate boilerplate function to prevent repetition. I have the changes on basic.js on my fork but i haven't tested yet tho.\nI even did changes to allow the fog chunks to be overwritable.. I see. That makes sense now.  No wonder there's no such option in the editor and probably an old holdover from the past.. After the discussion on whether basic.js should include support for custom chunks, i decided to revert back to to original and instead just rely on standard.js the main choice of material to use. Essentially, with the right settings, standard.js can easily emulate any unlit material, right? So, basic.js is just for legacy purposes it seems.\nRegarding batching, when is clone(batch, meshInstances) method being used? I don't see any immediate case of it being used within the batch.js codebase itself. Regarding inverse bind poses from skin's rigs, from what I remembered, they are precomputed beforehand and remain immutable right? ie.They aren't modified during rendering so it should be safe to re-use the exact same reference instances of inverse bind poses from the same rig, without deep-cloning them, right?. It should be the same as regular meshes ( which also has a \".skinInstance\" )  though I'm not too sure for playcanvas if skinned mesh (ie. the one skinned with animations)  conservatively uses the largest possible bounding box based off all it's animations. ( I assume it should?? Oh ...it looks like it doesn't ...).  Taking this further   I might  handle culling manually on my own via meshInstance.cull= false, or/and since the crowd entities are moving about in gamespace, i might use my custom conservatively expanded/padded bounding boxes management to avoid updating per frame meshInstance._updateAabb =false, especially when batch counts are large.\nOkay, wait, it seems that the batch's meshInstance._updateAabb is set to false in batching.js.  Which means the bounding boxes of the batch's meshInstance.aabb getter  won't update unless you manually call batch manager's update() function. This makes sense because it uses combined bounding boxes of all the entities to determine bounding box of the entities instead of the default prototype implemetnation. . \nImportant tip to avoid unnecessary calculations: When calling .aabb on the mesh instance,  you should remember to call it once only since it's a getter  (ie. only whenever needed to lazy-update), and then use ._aabb subsequently. Eg. from playcanvas engine code forward renderer:\n        meshPos = meshInstance.aabb.center;\n        if (meshInstance._aabb._radiusVer !== meshInstance._aabbVer) {\n            meshInstance._aabb._radius = meshInstance._aabb.halfExtents.length();\n            meshInstance._aabb._radiusVer = meshInstance._aabbVer;\n        }\n\nNotice that .aabb getter is called once only to ensure the aabb is updated if there are any skinning/dynamic-batch position changes. Then, subsequent references to aabb may simply use ._aabb raw property instead.. Okay, i'd proably need to update/redo this pull request to only pull from a proper branch with ONLY 1 file  (batching.js) change. but anyway, to continue the discussion, here are my findings so far from my test projects (see links below at end): \nTo recap, contrary to what guycalledfrank  mentioned, Playcanvas engine DOES update the batched skins, and you don't need to call update() manually. (However, I do know that this generalised approach may not be very performant so I've personally considered ways of circumventing this dynamic batch bounding boxes updates if performance is a concern...such as manually force-flagging batch.dynamic= false/batch.meshInstance.cull=false to prevent Playcanvas from updating it, while i roll in custom app-specific batched bounding box management/culling management schemes.)  Apparently, Playcanvas' meshInstances also has an option to set _updateAabbFunc , which perhaps you could use to roll in your own custom AABB updates to better suited for your game if needed be. (eg. instead of updating the skin's bounding boxes based off vertex animation per frame, simply use a large-enough bounding box by default and then simply update bounding box's .center to match the entity's position, for example..)\nIt appears that somehow skinned meshInstances must remain within the scene's layer composition (ie. remain within the draw call array list!) in order to have their individual bounding boxes update correctly per frame.  Otherwise, the bounding boxes appear shorter than usual (even though they still morph/adjust themselves with the animations). Why? Something to do with skinned meshes having skin binding transform updates that only apply within renderComposition of forward-renderer.js?\nThe project describing the above problem can be found in:\nhttps://playcanvas.com/project/571467/overview/skinbounds-batching-test-problem\nOkay, so the real (suggested/to-be-discussed ) fix would be under this project:\nhttps://playcanvas.com/project/571469/overview/skinbounds-batching-testings\nBasically, I added provision for original skinned meshes in batching.js to have their updateMatrices() be called as well. This will ensure .aabb calculaion for skinned meshes wlll have the correct matrices (i think) to properly expand the bounding box per frame. Additionally, i included various flags at the moment to forego this autoamtic per-frame calculation depending on advanced usage situation. For example, if the user deliberately sets the entire Batch's global meshInstance to cull=false or visible=false , then it's assumed the user doesn't intend to cull the batch at all via the default Playcanvas approach of combined bounding boxes) as it won't be visible or culling isn't necessary, so why bother updating the bounding boxes for that frame, since it's only used for culling for rendering?  Setting any of these flags to false will therefore forego the need to update the original mesh instances' bounding boxes via Playcanvas, and thus not require the need to update matrices of original skinned meshes.\n SkinInstancesBatched.prototype = {\n\n    updateMatrices: function (rootNode) {\n        var v;\n        var vp;\n\n        if (this.meshInstance.cull && this.meshInstance.visible) {\n            var origMeshInstances = this.origMeshInstances;\n            for (v=0; v< origMeshInstances.length; v++) {\n                vp = origMeshInstances[v];\n                vp.skinInstance.updateMatrices(vp.node);\n            }\n        }\n\n\n        var _invMatrix = SkinInstancesBatched.invMatrix;\n       _invMatrix.copy(rootNode.getWorldTransform()).invert();\n\n       var i =0;\n       var inverseBindPoses = this.inverseBindPoses;\n       for (v = 0; v <inverseBindPoses.length; v++) {\n           vp = inverseBindPoses[v];\n\n           for (var b=0; b< vp.boneCount; b++) {\n                this.matrices[i].mul2(_invMatrix, this.bones[i].getWorldTransform()); // world space -> rootNode space\n                this.matrices[i].mul2(this.matrices[i], vp.pose[b]); // rootNode space -> bind space\n                i++\n           }\n       }\n    },. On a related (perhaps more important) note, why should Playcanvas iterate over any 'update'/'postUpdate' of scripts which the user left \"undefined\" in the Script Panel?  I would safely assume that if no \"update\" found written in the Script panels upon initializing, it should not even belong to the update call list Otherwise, it appears that \"data-only\" scripts (ie. .with no update() implementation) , still gets called!?? That's not very good. Most users would assume that only declared methods will get called coming from the \"Unity\" camp.\n\nRelated link, Unity does check beforehand during engine initilization what methods are declared/not: \n  https://blogs.unity3d.com/2015/12/23/1k-update-calls/\n\nRegarding the algorithm, maybe a linked list approach might be better? Not too sure. But anyway this code won't work and i think it's missing out various things...just jogging some ideas:\nhttps://gist.github.com/Glidias/2cbd4830566e07c7d5ba829d73d210ef\n\nIn my opinion though, I would rather let Disabled scripts be iterated through regardless. If performance is a concern on user's part, perhaps the user can simply call removeScript or remove the Entity entirely from the scene?  That would stop iteration, right? If he needs to re-activate it, he can re-add it later, right?  Actually, that partly solves the zombie Update() calls on (init-only) script assuming i can simply remove such scripts after post initialization.. Hmmm... like: \nmaterial.chunks.transformVS = this.boneLimit + \"#define \"+(!isSkin ? \"DYNAMICBATCH\" : \"SKIN\")+\"\\n\" + (material.chunks.transformVS ? material.chunks.transformVS : pc.shaderChunks.transformVS);\n\nIs this correct? Looks like it's not just that.... I think you mean with various blend weights across possibly multiple bones, right? As the supplied inputs must also include the relavant weights if needed. Hmm.... Looks like the previous animation tests didn't blend the bones and i didn't noticed it. Gotta see how to get this to work proper when i hav the time though.. It seems with teh SKIN define, it has problems accessing x,y,z,w properties it seems? That's weird. Maybe it's because it ALWAYS assumes component size of 4 always? \nOh wait...so that's Playcanvas skinning convention? It always uploads bone component size of 4 always for skins, regardless of the actual model setup by the artist? Isn't that slightly wasteful for VRAM for some skins that don't require blending of all 4 components? (i might be wrong, i think component size of 1 still takes up all 4 registers?). But i guess this simplifies the shader setup though, otherwise need differnet vertex program for different skin blend amounts. Or, if i'm not wrong, eg. the y,z,w properties will default to zero if only component size 1 skin is used...\n~~~I think it's pretty obvious i need to replace skinBatchConstVS with skinConstVS for isSkin 's case? No, doesn't seem like it. Hmm...ok, this is quite complicated or i'm just ignorant.~~~. I meant what if the skin had less than 4 blends, etc. But anyway...yea, it would mean having to create a differnet program setup for a trivial thing just to shave off a bit of bytes seems pointless.\nOk, i did up some changes, working fine now, you can preview the results in:\nhttps://playcanv.as/p/3QlSEgHF/\nAha, now the animations look much more fluid/real now. Previously, there wasn't any blending. Lol, didn't realised.. Ignore that, urm...was trying to test if IK was possible so i can align it with terrain slopes..... If you got any advice on how to get it to work, perhaps you can help. I just need basic IK solver to solve knee to ankle based off ankle position (y offset), ...also prefably solve ankle base to foot tip alignment along slope for sole base. Perhaps, the rig must be set up with certain conventions to help make the process simpler.. ",
    "Nokitoo": "Thank you, it would be nice if it could be fixed.\nDespite I think it won't fix the leak in our game because we don't use non-asset model components.\nIs there a way application assets could leak? I made a simple test where I repeat multiple steps:\n1. Create pc.Application with assetPrefix to our game assets path, and the canvas (created only one time)\n2. Call app.configure\n3. Call app.preload\n3. Call app.destroy\n4. Repeat\nDoing this I have leaks, am I missing something to correctly delete the application? (I don't create any entity). ",
    "kizzd": "Can you give any workaround for this problem?. ",
    "e-strokov": "I assume we going to eliminate .data at some point?. This function is part of ScriptComponent, so tried to figure out why it is 'newEntity.script' rather then newEntity.c.script? Could it be the actual issue? If not where this newEntity.script is being created?. Split on two PRs.. Yeah, I understand that. Ideally, these all (or at least some) options should be cached or pre-build.. This structure is being used only in standard.js and standard-material.js, so it's easy to remove it from pc namespace, just don't know where exactly it should be.. Commented.. Moved into the constructor.. It's not a problem at all to change this - my intention was to keep M3 and M4 interface consistent. So let me know if 9 args is more preferable over an array.. 1. The properties objects is part of interface between those 2 layers, and ProgramLibrary is already explicitly depends on  - so IMHO it's not a problem.\n2. I absolutely agree.\nIn general, I'd prefer to have shared (static) objects in standard material namespace.. Intention was to minimise amount of affected components.. reflexes... :). Done.. Done.. Not sure if compiler can optimise it, so I'm extracting it.. Old code, moved to a fallback branch where it's only being used.. Done.. ",
    "deltakosh": "Interestingly this is not avaialble on WebGl2..this is kind of weird. which version of chrome canary do you have? \nThis is mine:\n\n. Me too! What the heck!. Do you have more flags than that?\n\n. What!!!!! is that some kind of AB testing?. Lol:). ",
    "gameatp": "\nLooks like an editor only problem when you put an alpha'ed object against a skybox. When you launch the app, it looks fine.\n\nYes, the refresh is correct again. I think the rendering queue has not been refreshed since the blendType has been changed. The sky box should be drawn in front of the translucent object. > I think the problem here is that, when you change a material from opaque to transparent (or vice versa), the engine doesn't move the mesh instances that use that material from the opaque sub-layer to the transparent sub-layer (or vice versa). So yes, this is highly likely to be a bug in the engine.\nYes, it should be an engine bug.. Modifying this property of component has no effect, so I found out that the name is wrong here.. I Agree. ",
    "realityreflection": "@daredevildave To make sure, Can I test it with previous engine?. I found a clue:\nSome objects are culled and never be rendered again event if they are inside the camera's viewport.\nI'm still testing this case.... That was not me, however it has been disappeared by some unknown actions just like forum's.\nCulling problem in my second comment is still existing. Could you give me a way to test with the previous engine? \n. Okay, I'll close the issue. \nJust leave a comment:\nI made a huge transparent plane in front of the main camera to make a screen effect.\n1.9.0 was fine. but I found a  bug with 1.10.0 which contains some culling updates.\nThere's no bug with current version, I don't know what was changed. And even we don't have a huge plane anymore. (game design was changed)\n. ",
    "stefnotch": "Oh, I probably messed up when submitting the CLA. I resubmitted it. (Though, really, my phone number? That's absolutely private information.). Great to hear that my information will be kept safe! Also, thank you for so quickly responding to my PR and merging it; this issue was bugging me as well.. ",
    "terence-wang": "\nSmall update on the issue: on A12 chips app.graphicsDevice.useTexCubeLod is true, if only on them it is forced to false it makes a workaround.\nSo if engine could detect A12 chip to flip such switch, it will do the job for now.\n\nThere are still problems with this solution, such as when there is a skybox in the scene, and the system will make a serious error when there is a texture in the diffuse\n\n. > @terence-wang it has not been deployed to Editor yet.\n\nAnd you sure it comes from this change? Do you have simple project to replicate an issue?\n\nI encountered this problem while using the engine development project. In the editor I mounted the script on the root and changed this property to make the problem appear.\nhttps://playcanvas.com/project/596015/overview/material-issue. ",
    "lmx99": "How is it going on? @Maksims your fix cause some weird problem , as the image \n\nAnd the normal\n\n@willeastcott . ",
    "JohannesDeml": "Pull request https://github.com/playcanvas/engine/pull/1233 already handles the problem in this commit: https://github.com/playcanvas/engine/pull/1233/commits/5342987e56ce6f768a0332bb57fc4fa3af86e5b5\nI can do a simpler pull request only containing the changes for the fog chunk handling, or does it make sense to wait for PR 1233 to be merged?. ",
    "smkplus": "\nIt doesn't work in the same way as Unity. In PlayCanvas, you have to explicitly have to listen the event. A tutorial can be found here https://developer.playcanvas.com/en/tutorials/collision-and-triggers/\n\ncan you take an example that how it works?\n```\nvar Collider = pc.createScript('collider');\n// initialize code called once per entity\nCollider.prototype.initialize = function () {\n    this.entity.collision.on('collisionexit', this.onCollisionExit, this);\n};\nCollider.prototype.onCollisionExit = function (result) {\n    if (result.other.rigidbody) {\n        this.entity.sound.play(\"hit\");\n    }\n};\n```. > The closest you can get to it at the moment is with the entity.clone() function as shown here in the documentation: https://developer.playcanvas.com/en/tutorials/procedural-levels/\nI like to make prefab by dragging it and dropping in inspector\\\nI don't like to create prefab by code!!! I like to place it in inspector\n\nI Hate Repeat!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n. > You hate PlayCanvas? Great way to get people to work on your feature requests...\nsorry I was angry because I have to repeat , repeat  and repeat \nPlaycanvas is very good but when it hasn't prefab feature working with it is very hard for me\n. > Will has mentioned that it is something that is being thought about: https://forum.playcanvas.com/t/a-brand-new-upgraded-up-to-date-editor/9353/2?u=yaustar\n\nUntil then, clone() is your only option and you have to work with it. You could make a proxy entity that clones an existing entity via script quite easily. You won't be able to see the clones in the editor but can get you some of the functionality with minimal script work.\n\nbut I like to clone inside editor Unity has this feature\nhttps://docs.unity3d.com/ScriptReference/ExecuteInEditMode.html. > You hate PlayCanvas? Great way to get people to work on your feature requests...\nwilleastcott I have a question\nhow can I make new type in playcanvas?\nI like to store my object as prefab by dragging it in Assets\n\n. > > willeastcott I have a question\n\n\nhow can I make new type in playcanvas?\nI like to store my object as prefab by dragging it in Assets\n\nPrefabs like Unity don't exist in PlayCanvas so you can't do this at the moment, hence the suggestions of the alternatives.\n\nI know it.I like to develop it for my self because I need it \nbut I don't know how can I make it can you help me \nJust tell me what should I do to make this useful feature. no I don't move my mouse out of window\nI haven't this problem in chrome and firefox\nIt just happened in Opera\n. but I tested this in many system and dosen't work\nas you can see when I hold right click and move I have this bug!\n\n. I don't like to bother you\nany way my opera version is 58.0.3135.79\nand link is here that is console to test:\nTest. ok\nhttps://playcanvas.com/project/604623/overview/test. no I tested in multiple computer and have this problem\nlet's take an example that what happened if right click will not release.\n\nI defined right click to determine the power of cue but when I shoot the ball right click not released and next time that player want to shoot the ball by dragging mouse ball will shoot\nExpected way after each Turn:\nHoding Right click -> Determine power -> Shoot\nHoding Right click -> Determine power -> Shoot\nHoding Right click -> Determine power -> Shoot\nHoding Right click -> Determine power -> Shoot\nBug after each Turn:\nHoding Right click -> determine power\nDetermine power -> Shoot\nDetermine power-> Shoot\nDetermine power -> Shoot\nas right click not released Holding Right click is not work!\nyou can test this issue in my game\nhttps://playcanv.as/b/VYPBJFxe/. oh thank you!!\nit works!!!\nis there a code to disable mouse gesture\nmaybe it is enable just in pc. ",
    "StefanSchmutz": "Oh! I sorry for messing this up. The Contributor Agreement should be submitted now. Thank you for fast response! \ud83d\udc4d . ",
    "lzubiaur": "Good catch! \ud83d\udc4d  The array returned by poll was copied into current so I thought to let the caller to clear the array but then I removed the for loop and forgot to clear it again in poll. Thanks!. ",
    "Mikecoon": "No, sorry, it was occasionally.... ",
    "idolize": "I guess I meant \"transparent version of the font color\", but I'll just remove the to transparent part of the comment. The issue with making it a boolean is then we have to include the algorithm for RTL/bidi in the engine code itself, right?. I did that just to ensure a Number type is always returned from the function, but I can change it to null. It's actually used in isCodeBetween right now, but I'll change that.... Did you mean to use != or !==?. ",
    "szevvy": "I think the example shouldn't include the number, it does make it confusing.. "
}