{
    "dginsburg": "Not sure what went wrong but I'm past that hurdle Probably something stupid like I forgot to save IB and didn't have the outlets set up. Sorry.\n. The orientation on the MGSplitViewController itself always appears to be accurate. Though I don't think you can navigate to it via the parent hierarchy so you have to keep a separate reference.\n. ",
    "mattgemmell": "Confirmed; I can reproduce that. I'm not entirely clear on why it's happening; I'd have thought that UIViewController would do the right thing based on receiving orientation-change messages. The interfaceOrientation property itself is read-only, so can't be set. Will need to look into it some more.\n. Hi all,\nThe issue is that the interfaceOrientation property on UIViewController is read-only, and is not automatically updated when the orientation changes. UISplitViewController cheats by using internal magic to update the interfaceOrientation of its child view-controllers. It's a difficult issue. There is a setInterfaceOrientation: method but it's private, and would presumably cause an app to be rejected.\nAll of the issues relating to orientation are due to this one problem. I could fix it 100% by making MGSplitViewController take two generic controller objects (not UIViewController subclasses), but that would mean more work for people who were previously using UISplitViewController.\n. Good catch; fixed and pushed.\n. Already fixed earlier today!\n. Fixed earlier today. :)\n. Will certainly take that under consideration.\n. What I tend to do is have one checkout of the project on my disk, and then include the relevant files in as many other projects as I want (without copying them into each project folder). That way they all get updated at once, and there's no duplication.\n. Wouldn't setup be called twice in that case, since init will be called from the superclasses' designated initialisers, eventually? Better to just use the initWithNibName:bundle: initialiser will nil arguments.\n. Planned future enhancement. Likely to be significantly improved by a reimplementation of the -splitViewSizeForOrientation: method.\n. Glad you got it fixed!\n. toggleMasterView: actually changes the relevant \"showMasterIn...\" setting; it's designed that way.\n. Fixed.\n. ",
    "indragiek": "I can confirm this as well.\n. ",
    "pothibo": "Could be because the only association made between master/client controller is through each other's view which makes the controller solely a container for a view. It is probably not connected to most of the inner working of controllers. not sure how you can bind them though.\n. Nevermind, I had a problem here. :( \n. Actually I got confused with the methods and some boolean,\nif showMasterInLandscape is set to NO, if you use\n- (IBAction)toggleMasterView:(id)sender, shouldn't it be ignore if showMasterInLandscape is set to NO ? I would have assumed that showMasterInLandscape has a higher priority than sending explicit action?\nAlso, I had was about to create my own splitViewController myself, so it was a relief that you did all the extra work. \n. Surprisingly it fixed the issue, but it should be mention somewhere as this is clearly something dev should be aware of. \n. really? so it happens when the view doesn't belong to the window?\n. ",
    "danpalmer": "Another confirmation if you need it. I am trying to change my detailViewController based on orientation and I can't get it to work until the orientation changes. Any ideas about a bugfix or a work-around?\n. In this case, it might be possible for MGSplitViewController to call an orientation change method on its delegate whenever its own orientation changes. This is definitely a 'hack' as it should work the normal way, but might be something that can be put in until a fix is done.\n. This sounds really annoying. I was relying on this method to do all of the interface redrawing for orientation changes in my app. Is there any work-around with the current code?\n. ",
    "ghost": "There is a work-around - you can use the interface orientation of the MGSplitViewController object itself, which has the correct value. I have an outlet to this in my AppDelegate so I retrieve it and check the orientation.\nThis is a pretty ugly problem though.\n. I think I have a similar issue. When I present a modal view controller, in either Landscape or Portrait, everything is fine. Once I dismiss the modal view controller, the orientation in the detailViewController goes completely wonky. It is rotated 90 degrees. I can't fix it by rotating the device. \nI don't get the original crash, but I tried adding the self.view.window check anyway. It didn't change anything for me.\nDoes anyone else see an issue like this? Am I doing something wrong? Is there a work around? (It works fine on a vanilla UISplitViewController).\n. OK, I just found a workaround for my issue. I was using:\n[self presentModalViewController:changePasswordVC animated:YES];\nfrom my detailViewController, but I if override presentModalViewController:animated: dismissModalViewControllerAnimated: to present/dismiss the modal view controller using the MGSplitViewController as the receiver, things work properly. E.g.\n- (void)presentModalViewController:(UIViewController *)modalViewController animated:(BOOL)animated\n{\n    [self.splitViewController presentModalViewController:modalViewController animated:animated];\n}\n. Thanks, Steve -- I'm aware of that one. :) It's all good; my ARC fork works well.\nSent from my iPad\nOn 13/09/2011, at 3:32 AM, \"Steve Johnson\" reply@reply.github.com wrote:\n\nIf this patch isn't accepted, you can mix ARC and non-ARC code by adding -fno-obj-arc to the build flags of each affected file.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mattgemmell/MGSplitViewController/pull/43#issuecomment-2073204\n. This should fix the issue, iOS 5 automatically forwards appearance and rotation methods to child view controllers.\n\nobjective-c\n-(BOOL)automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers {\n   return NO;\n}\n. The Sample project doesn't work anymore if you build your project on Xcode 4.5 or using deployment target as iOS 6.0. The issue is with Rotation methods it has been using, have been changed in iOS 6.0 - http://9to5mac.com/2012/06/25/apple-pushes-ios-6-0-update-to-devs/ I tried using new shouldAutoRotate and SupportedOrientations methods but it didn't make any difference. Could someone please throw some lights here. Thanks.\n. Funny thing is it works on iOS6 if you build your project on lower version on Xcode(say 4.4) with deployment target set to iOS 5.0.\n. @cheesemaker I have made splitviewControlle as root view controller and everything fixed it. I don't see issue when App starts in Landscap mode. It adjusts views automatically. I have built project in XCode 4.5 deployment target to iOS 6.0.\n. just add 20 pixel to height in \n- (void)layoutSubviewsForInterfaceOrientation:(UIInterfaceOrientation)theOrientation withAnimation:(BOOL)animate \n. ",
    "MikeWeller": "Just ran into this problem myself. I have worked around the issue by using self.mgSplitViewController.interfaceOrientation instead of self.interfaceOrientation. mgSplitViewController is a nastily hacked category method on UIViewController similar to -splitViewController, -navigationController, etc. Not sure if there is a reliable way to find the split view controller from a view controller, so I (ugh) dive into the shared app delegate and get it from there.\n. ",
    "wuf810": "Matt, I like your suggestion. \nAlthough I appreciate it is more work for those already using MGSplitViewController, at least it will provide a solution and put an end to this thread.\n. Remember if you are just trying to retrieve the current orientation you can always just use the device orientation :\nUIInterfaceOrientationIsLandscape([[UIDevice currentDevice] orientation])\n. I have the same issue with viewWillAppear but only if I programmatically define the detailViewController by modifying the .viewControllers (i.e. do not instantiate via xib).\nSadly I can't use the xib because my view gets instantiated before the appDelegate and I need the appDelegate defaults loaded before hand.\nLooks like I will need to attach via outlet a dummy view in the xib, and then load the final view to get it to call. I'll let you know how I get on\n. Actually looks like my proposed solution doesn't work either. So to confirm, unless the detailViewController is defined in the xib, he viewWillAppear method does not fire.\nI haven't tested, but I guess that would mean that programmatically changing the detailViewController is a no go too.\n. OK, can't blame Matt for this issue as it seems to be known issue from way back.\nhttp://davidebenini.it/2009/01/03/viewwillappear-not-being-called-inside-a-uinavigationcontroller/\nMy own fix when programmatically setting the detailView is to call the configureView method in which I call [self viewWillLoad:NO] or just calls a method that does the equivalent. \nHowever be aware that viewDidAppear method and the various \"disappear\" methods may still not be called.\n. ",
    "stevenwei": "Note: if you do use [[UIDevice currentDevice] orientation] make sure to account for the fact that UIDeviceOrientation can potentially be set to UIDeviceOrientationUnknown, UIDeviceOrientationFaceUp, and UIDeviceOrientationFaceDown.\nIt's generally best to use UIInterfaceOrientation (which can only be one of the four valid orientations). The workaround of keeping a reference to the MGSplitViewController and using the MGSplitViewController's interfaceOrientation is the cleanest approach, IMO.\n. ",
    "tbrannam": "maybe on iOS4 you can call [[[UIWindow window] rootViewController] interfaceOrientation]  - assuming you have set such a value in your nib.\n. ",
    "liamlynass": "Whoops - just noticed this is a dup!\n. Or use weak linking...\n. ",
    "chbeer": "That would also improve the updateability for those who use your classes.\n. Well... OK. I should first check the documentation before posting issues. Sorry for that.\nThe thing is: there is no initWithFrame: for a IUViewController. But a plain init should be supported IMHO.\n. ",
    "jdmuys": "Has any progress been made since that answer? I want to have a split view inside one tab of my tab bar application, and I'd rather not reinvent...\n. ",
    "psugihara": "Man, I should have come here first before spending hours on this!\n. ",
    "steve21124": "Is this the same problem as from example code: using UIViewController instead of UITableViewController. \nRootViewController : UIViewController\nLater add it to UITableView, it has problem on landscape because the table cell extend all the way to full screen. \n. ",
    "MrZoidberg": "Any progress with this issue?\n. Great, thanks for help!\n. ",
    "Krumelur": "Grab your copy of the code and replace -splitViewSizeForOrientation: with a version that returns a rectangle instead of a size. Let it return the rect you are planning to use. Then you need to adust -layoutSubviewsForInterfaceOrientation: to inset the master and detail view according to your rect. The \"fullSize\" should be the size of the rectangle.\nThe \"newFrame\" also has to be the rectangle you return. Then you still need to adjust the corner views and that's it.\nFYI: I'm the writer of MTSplitViewController, a Monotouch port of MGSplitViewController and the Monotouch version offers this feature.\n. ",
    "rajatmohanty": "Can any body update this code because i also want MGSplitViewController inside a tabbar\n. Can i integrate MGSplitViewController inside a tabbar ,if yes where i can get the latest code for this implementation?\n. ",
    "daikini": "Are you presenting the modal view controller from the split view controller?\n[splitController presentModalViewController:someViewController animated:YES];\nIf not, that could be the issue.\n. ",
    "bgneiting": "Sorry, my mistake. This works fine if you use it correctly.\nI was presenting the modal view from the DetailViewController itself like so:\n[self presentModalViewController:animated:]\nrather than calling it on the instance of MGSplitViewController\n[splitController presentModalViewController:animated:]\nHaving the splitController present my modal view works fine.\n. ",
    "ahndee": "I'd rather not do that - quoting Apple employee \"big3\" from https://devforums.apple.com/message/244624#244624:\n\nFYI: Weak linking a framework with as many symbols as UIKit will probably cause an appreciable increase in your app's startup time. It's best avoided if possible.\n. \n",
    "duhanebel": "this reintroduces the masterViewController's views' disarray bug, though..\n. If the app has a modal view controller (i.e. a login controller) which is presented at application launch, I can reproduce the bug with the following steps:\n1. Start the app in portrait\n2. When the modal controller is shown, rotate to landscape\n3. Dismiss the controller.\nWith your suggested fix the app won't crash but the masterView's tableview frame won't be aligned correctly. Rotating again to portrait and then back to landscape fixes the issue\n. ",
    "felixyz": "I had a crash when reusing the same MGSplitViewController and showing its view as a modal view, if the orientation had changed between the two modal view presentations. Fixed it by adding this condition immediately before the crashing line (same place that others have seen):\nif ([self.view window])\n    {\n        [_hiddenPopoverController presentPopoverFromRect:CGRectZero inView:self.view permittedArrowDirections:UIPopoverArrowDirectionAny animated:NO];\nI have never seen \"masterViewController's views' disarray bug\" so can't say if this is reintroduced or not. But if it does one could use the view's didMoveToWindow method or (better) some method in the controller to insert the magic line there. (?)\n. ",
    "BoyNamDinh": "Thanks a lot Felixyz, your code works like a charm.\n. Same problem here, the interface is changed when presentModalViewController be called. Everything become out of control.\n. Sorry, my bad.\nI should use [self.splitViewController dismissModalViewControllerAnimated:YES]; instead  [self dismissModalViewControllerAnimated:YES];\n. ",
    "bernardx": "Sorry i just found sb else posted the solution:\n- (void)presentModalViewController:(UIViewController *)modalViewController animated:(BOOL)animated\n  {\n  [self.splitViewController presentModalViewController:modalViewController animated:animated];\n  }\n. ",
    "rosskimes": "I have noticed this too.  Both my master and detail view are UINavigationControllers.\nOn launch, the bottoms of both toolbars in the master and detail view extend past the bottom of the screen by the height of the status bar.  The navigation bar of the detail view extends an extra toolbar length, but the master navigation bar is fine.\nThe main views seem unaffected.  The detail view is cut off on top by the lowered navigation bar and leaves a space at the bottom because of the lowered toolbar, but the view itself is where it should be.\nUpon rotating, the top fixes itself, but the bottom of both toolbars still extend past the bottom of the screen.\n. ",
    "QTraveler": "I, too, am seeing the same problem with my navigation bar on the detail view. The problem occurs with both iOS 3.2 and 4.2. Does anyone have a solution or work-around for this?\n. ",
    "elbryan": "This fix is not anymore applied in the master version? The navigationbar height is not anymore subtracted. I encountered this error today when adding a UITabViewController to the detail view. The tab bar was almost completely hidden because of a miscalculated height.\n. The issue seems to be related with the following:\n[UIPopoverController _startWatchingForWindowRotations]: message sent to deallocated instance 0xb09d980\n. It was all my fault. I had this line in the \"master view controller\" - (void) viewWillAppear:(BOOL)animated :\n[splitViewController setShowsMasterInLandscape:YES];\nand I was toggling the master view. So, when it was in landscape, it was toggling the master view (and it was working fine when \"hiding\" it because the viewWillAppear method is not called). \nOn the other hand, when I was showing it, it would have forced to show the master in landscape, therefore the method - (void)reconfigureForMasterInPopover:(BOOL)inPopover would have been called twice: once for the toggleMasterView and once for the setShowsMasterInLandscape methods giving all the above issues.\nSorry for the ugly explanation :p\n. Confirmed. Same problem here.\n. I cannot confirm what @cysp claims.\nWhenever and whatever I present the MGSVC (landscape or portrait) it is always rendered in a bad layout fashion.\n. Another data point here: if you try to use the toggleMasterView method, you should obtain the same unwanted rendering. Can you confirm?\n. That UIPopoverController is more a mess than a bless. Meh. If I only knew something more I would been able to investigate it.\n. I can confirm this too. It seems working as before in iOS 6b4\n. @sam899 I want to make love to you.\n. @fittoburst yeah, you're right. There's too much hatred in the world, I tried to be dramatic :p\n. ",
    "zwaldowski": "You can remedy this by hacking thins so that the modal view controller is instead displayed by whatever \"master\" is over your MGSplitViewController; e.g., tab bar view controller, app delegate, whatever.\n. ",
    "newacct": "Or, you can just wrap it inside a\n    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)\nand it will be fine.\n. ",
    "jpm": "+1 on this one.\n. ",
    "raid5": "+1 Why is this still not merged in? Such a useful and easy update.\n. ",
    "tobiaszuercher": "+1, please merge that in!!\n. ",
    "bytor99999": "Odd thing is I can't see anything in your code that might even remotely cause this problem. Maybe I can make sure the XIB has the width correctly for the view controller.\n. The XIB for the TableView is set to width of 250, and the NavController is created in code adding the table. So it should be correct at 250, based on wheat I have and your code, I don't see how this might be fixed.\n. ",
    "maikg": "The splitPosition property is constrained to certain limits by default. Implement the following delegate method to override those limits:\n- (float)splitViewController:(MGSplitViewController *)svc constrainSplitPosition:(float)proposedPosition splitViewSize:(CGSize)viewSize\nYou could implement this method to always return the proposedPosition. That way, you have complete control over the split position by setting the splitPosition property.\n. ",
    "ZuYuanZhou": "I meet this problem in my problem, and can u tell me why? What does this \" if (self.view.window != nil) \" do to the program? The popover shows always, when add this line, but if not add this line, the self.view.window sometimes to be nil.\n. ",
    "cduhn": "I encountered this same bug in a case where I start in portrait orientation, push a full-screen media player, rotate to landscape, and dismiss the media player.  \nAt first I tried the same fix (if (self.view.window != nil)), but I found that it \"leaves masterViewController's views in disarray\", as Matt mentioned in his comment above that line.  Specifically it left masterViewController's navigationBar sized for the wrong orientation.  Here's an alternate fix that worked better for me:  Change self.view to [[UIApplication sharedApplication] keyWindow].  So the full line reads:\n[_hiddenPopoverController presentPopoverFromRect:CGRectZero inView:[[UIApplication sharedApplication] keyWindow] permittedArrowDirections:UIPopoverArrowDirectionAny animated:NO];\n. ",
    "viteinfinite": "Thank you for your comment. I will fix that line according to your suggestion (and close the pull request, by the way).\n. ",
    "Matze2010": "Never mind, you have to manually call [navController.toolbar setBarStyle:UIBarStyleDefault], which you don't have to do if using it with a UISplitViewController. Took me a whole day to find that out :-)\n. ",
    "StevenEWright": "+1 Same Issue\nI wasn't able to fix the issue with the same workaround reakinator used. I'm sure my situation is different... so, for anyone else struggling with this - the only way I was able to get around the problem was to remove the leftBarButtonItem prior to rotation, and add it back in afterwards:\n\n@property (nonatomic, retain) IBOutlet UINavigationBar * header;\n@property (nonatomic, retain) IBOutlet UIBarButtonItem *editButton;\n\n....\n\n- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration\n{\n    self.header.topItem.leftBarButtonItem = nil;\n}\n\n- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation\n{\n    self.header.topItem.leftBarButtonItem = self.editButton;\n}\n\n. ",
    "andyroberts": "I'm experiencing a similar bug when I put a UISegmentedControl into the master's navigation bar. Everything launches looking fine, but give it a rotation and suddenly the segemented control width shrinks to only a few pixels, and the labels are spilling out.\nThe work-around I found was similar to what reakinator mentioned and is to rectify things in the didRotateFromInterfaceOrientation method. In my case I reset the segment control's frame width. It's a big ugly though because you do notice the control being redrawn to fit its specified size.\n. ",
    "evands": "I found a work-around without the visual glitch of the control disappearing and reapparing.\nIn -[MGSplitViewController willAnimateRotationToInterfaceOrientation:duration:], move the calls to the master and detail view controllers to happen after the relayout call:\ncocoa\n--- a/Classes/MGSplitViewController.m\n+++ b/Classes/MGSplitViewController.m\n@@ -186,9 +186,6 @@\n - (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation \n                                                                                 duration:(NSTimeInterval)duration\n {\n-       [self.masterViewController willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];\n-       [self.detailViewController willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];\n-       \n        // Hide popover.\n        if (_hiddenPopoverController && _hiddenPopoverController.popoverVisible) {\n                [_hiddenPopoverController dismissPopoverAnimated:NO];\n@@ -197,6 +194,9 @@\n        // Re-tile views.\n        _reconfigurePopup = YES;\n        [self layoutSubviewsForInterfaceOrientation:toInterfaceOrientation withAnimation:YES];\n+       \n+       [self.masterViewController willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];\n+       [self.detailViewController willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];\n }\nThen, in your master view controller, resize your UIBarButtonItems:\n``` cocoa\n- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration {\n    / When MGSplitViewController rotates, it causes a resize of our view; we need to resize our UIBarButtonControls or they will be 0-width /\n    [self updateBarButtonIems];\n[super willAnimateRotationToInterfaceOrientation:toInterfaceOrientation duration:duration];\n\n} \n```\n. ",
    "sharmaji": "I too getting the same problem. Did you get any solution on this?? Kindly let me know as well.\nThanks in advance.\n. ",
    "mikesilvers": "I was not able to look anymore at this.\n. ",
    "jonsterling": "Yeah, I'm also having this problem.\n. ",
    "ashrafulkarim": "I had the same problem. But this technique  help me to resolve the issue. thanks.\n. ",
    "Inza": "Excelent hautelook-jimmy! Thanks you very much! I really own you one for that;). Will it be fixed in the repo by the author, or should I create a pull request for it?\n. ",
    "hautelook-jimmy": "I haven't seen author updating the code for a long time.  so i basically just subclass it and override the entire method.\n. ",
    "Ricardo1980": "Same problem here. Did you find a solution?\nHere it seems there are some suggestions:\nhttp://stackoverflow.com/questions/4089794/uisplitviewcontroller-within-a-uitabbarcontroller-orientation-problem\nAnd here it is my problem:\nhttp://stackoverflow.com/questions/8874149/sometimes-willhideviewcontroller-from-uisplitviewcontrollerdelegate-is-not-calle\n. You were right. Thanks a lot. \n. ",
    "ghulammustafa": "I ended up using IntelligentSplitViewController https://github.com/grgcombs/IntelligentSplitViewController. This should solve your problem.\n. ",
    "acf": "I've seen this issue when you try and switch the detail programmatically before the master popover has ever been displayed...\nworkaround is to programmatically show then hide the popover prior to the setDetail call.\n. ",
    "chrishulbert": "Hi,\nYes we've gotten it to work inside a tab bar on a production app.\nHowever there are lots of little bugs that cropped up that we had to\ndeal with. I'm not sure what they were any more however. Good luck\nOn Sat, Nov 12, 2011 at 3:25 AM, rajatmohanty\nreply@reply.github.com\nwrote:\n\nCan i integrate MGSplitViewController inside a tabbar ,if yes where i can get the latest code for this implementation?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mattgemmell/MGSplitViewController/pull/42#issuecomment-2709909\n. \n",
    "irskep": "If this patch isn't accepted, you can mix ARC and non-ARC code by adding -fno-obj-arc to the build flags of each affected file.\n. ",
    "joshuafeldman": "Isn't it -fno-objc-arc\n. ",
    "felixLam": "Fixed with a pullRequest: \nhttps://github.com/mattgemmell/MGSplitViewController/pull/49\n. ",
    "ritzmo": "Just before this pull request I added a similar change to my working copy, though I had different reasons for this.\nReading the comment leads me to believe that this might explain some of the crash reports I received :D\nSo if anyone cares about my opinion, I'd give it a +1.\n. ",
    "garethbowker": "Attach the modal view controller to the MGSplitViewController rather than the master or detail views. (Duplicate of issue #14)\n. ",
    "mrJakez": "exactly as it appears there: \nLink the masterviewcontroller against the right navigationcontroller. If you are using a MainWindow.XIB look at the splitViewController outlets - there the masterViewController must be linked against the Navigation Controller. Not against the \"RootViewController\"\ngreetings\n-Dennis\n. ",
    "johanneslagos": "You can do like this: \n[mgSplitViewController viewWillDissapear:YES]\nNSMutableArray rootArray = [[mgSplitViewController.viewControllers objectAtIndex:0]viewControllers];\nNSMutableArray detailArray = [[mgSplitViewController.viewControllers objectAtIndex:1]viewControllers];\nUIViewController *yourRootView = [UIViewController alloc]initWithFrame:...];\n[rootArray addObject:yourRootView];\n[mgSplitViewController.viewControllers objectAtIndex:0]setViewControllers:rootArray animated:NO];\nUIViewController *yourDetailView = [UIViewController alloc]init];\nmgSplitViewController.delegate = yourDetailView;\n[detailArray addObject:yourDetailView];\n[mgSplitViewController.viewControllers objectAtIndex=0]setViewControllers:detailArray animated:NO];\n. ",
    "lemonkey": "Note: this is confirmed in iOS 5.\n. ",
    "ai81": "seems this fix help with this: https://github.com/mattgemmell/MGSplitViewController/issues/76\n. same for me\n. this patch https://github.com/mattgemmell/MGSplitViewController/pull/57 is help me to fix this issue\n. ",
    "schustafa": "Have a look at #31, it's the same issue you're describing here.\n. ",
    "hborders": "This was premature. I'll do a different one that is more comprehensive.\n. ",
    "cysp": "As a data point, it appears that the bug only manifests in my applications if the MGSplitViewController is initially presented in portrait orientation.\nIf it is initially presented in landscape orientation, even multiple rotation events don't result in incorrect layout.\n. I'm away from the code and - unfortunately - a compiler right now but I'll try that tomorrow.\nI'll have another look to see if I missed something special that we're doing in landscape orientation too.\nWe're using the .showsMasterInPortrait option, but I don't have a theory for why that would \"fix\" landscape.\n. OK, so landscape worked for me because of some poor code that configured the MGSplitViewController in the master VC's -loadView. So presenting in landscape prevented the UIPopoverController from being instantiated.\nI guess I can confirm that the incorrect layout is related to the use of UIPopoverController, for as much as my additional voice on that point helps.\n. ",
    "gzbanson": "It's looks like the issue is causing by the popoverview, when the master has \"present\" (including: [_hiddenPopoverController presentPopoverFromRect:CGRectZero inView:self.view permittedArrowDirections:UIPopoverArrowDirectionAny animated:NO];) as the popoverview, the UINavigationController's frame has been changed, but it didn't layout itself again when the device go back to landscape.\n. Is there anyway we could force the UINavigiationController relayout correctly at the right time? I tried \"layoutSubviews\", it didn't work for me\n. The issue seems be fixed by Apple in beta 4, I will keep this issue open until Apple release the GM build, thx everyone.\n. Thanks all your help and reply guys\n. ",
    "nnhubbard": "Have the same issue, really wanting to get this fixed!\n. Not working like before for me. Now my entire split view is about half the height...but doing the following in my didFinishLaunchingWithOptions fixed it:\n[self.tabController setSelectedIndex:1];\n[self.tabController setSelectedIndex:0];\n. ",
    "blitzvb": "same here :/\n. the problem seems to occur only in landscape for me on the beta 4. half of the screen is black.\n. this affect the demo too. Just start it on iOS 6.0 b4 and the orientation is not taken in account anymore. Actually upon investigation those methods are not called anymore :\nwillRotateToInterfaceOrientation\ndidRotateFromInterfaceOrientation\nall shouldAutorotateToInterfaceOrientation return YES so to me those methods should be called.\n. ",
    "tristanseifert": "I can confirm the problem @nnhubbard mentioned - the split view doesn't render right in landscape on iOS6b4, although it renders fine in portrait as well as when rotating from Landscape. If you can't use @nnhubbard's workaround, the below workaround works for me (and does not seem to have any side effects besides a very unnoticable 1 pixel move):\n``` obj-c\n            // at some point in your code\n            [_splitView setSplitPosition:splitView.splitPosition - 1];\n        // a little later\n        [_splitView setSplitPosition:splitView.splitPosition + 1];\n\n```\n. ",
    "akac": "iOS 5 and before would start iPad apps in portrait mode and then call the rotate methods to move it to landscape. iOS 6 launches right into landscape if you build against the iOS 6 SDK.\n. Are there any forks of this project that have this fixed in the source itself? \n. Actually I found a much better way than this for iOS 6 support. The setting of the split is unneeded. I plan to upload my fork soon. It's somewhat heavily modified but works very well. One major change is I no longer use popovers for the master. \n\nAlex Kac CEO/Founder\nTranscribed by Siri\nOn Sep 13, 2012, at 11:14 AM, cheesemaker notifications@github.com wrote:\n\nTo update this for the 6.0 GM, you must do the following:\n1. change any instances in your code of [window addSubview:splitviewController.view] to [window setRootViewController:splitviewController]\n2. MGSplitViewController has a layout bug that occurs when you start in landscape mode under iOS 6 that will cause it to start with the view improperly sized. To fix, add the following after you have set it as the root view controller:\n[splitViewController setSplitPosition:splitViewController.splitPosition - 1];\n[splitViewController setSplitPosition:splitViewController.splitPosition + 1];\nThen you should be back in business.  These changes are harmless on previous OS versions back to OS 4.0.  However, be aware that setRootViewController doesn't exist prior to OS 4 so if you need to support OS 3.x you will need to have branching code to check for the version and use addSubview on OS 3.x instead.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry, been busy. Still planning on putting it up shortly.\n\nOn Sep 13, 2012, at 7:04 PM, Jeremy Gale notifications@github.com wrote:\n\nIs anyone else finding that @cheesemaker's fixes are not enough for them on iOS 6 GM? The split view still takes up only half the vertical space of the screen when launched in Landscape for me. @akac, I don't see any commits on your fork?\n\u2014\nReply to this email directly or view it on GitHub.\n\nAlex Kac - President and Founder\nWeb Information Solutions, Inc. \n\"If at first you don't succeed, skydiving is not for you.\"\n-- Francis Roberts\n. ",
    "Flufflicks": "I can also confirm this problem. In my project I used the following code to add the splitCon to my window:\n[self.window addSubview:splitCon.view];\nafter i changed it to:\nself.window.rootViewController = splitCon;\nit works correct like in iOS5  :)\n. ",
    "cheesemaker": "To update this for the 6.0 GM, you must do the following:\n1. change any instances in your code of [window addSubview:splitviewController.view] to [window setRootViewController:splitviewController]\n2. MGSplitViewController has a layout bug that occurs when you start in landscape mode under iOS 6 that will cause it to start with the view improperly sized. To fix, add the following after you have set it as the root view controller:\n    [splitViewController setSplitPosition:splitViewController.splitPosition - 1];\n    [splitViewController setSplitPosition:splitViewController.splitPosition + 1];\nThen you should be back in business.  These changes are harmless on previous OS versions back to OS 4.0.  However, be aware that setRootViewController doesn't exist prior to OS 4 so if you need to support OS 3.x you will need to have branching code to check for the version and use addSubview on OS 3.x instead.\n. ",
    "jgale": "Is anyone else finding that @cheesemaker's fixes are not enough for them on iOS 6 GM? The split view still takes up only half the vertical space of the screen when launched in Landscape for me. @akac, I don't see any commits on your fork?\n. Awesome, looking forward to it. Thanks! :)\n. I realized my problem - I needed to do the adjustment of the splitPosition after didFinishLaunchingWithOptions. I did it in the viewDidLoad of my master view controller.\n. @aporat I am noticing that now too. No touches seem to be registered in the top-right corner of the screen when used in Landscape mode on iOS 6 (UIInterfaceOrientationLandscapeLeft or UIInterfaceOrientationLandscapeRight). I haven't figured out why yet. Let me know if you discover anything. Very interesting if it also happens with stock UISplitViewController.\n. I am actually seeing it on any app that I run in Landscape on iOS 6 iPad simulator, non-retina only. Even brand new Xcode New Project templates, not even using UISplitViewController. This makes me think it's just an Xcode bug, but it scares me that you are seeing it on an actual device. \nNote: Retina simulator works fine. I am seeing this when both in landscape left or landscape right.\nI will have to try on a real device and see if it still happens for me. Unfortunately I don't have any iPad 2s around. \n. Moving [self layoutSubviews]; to viewDidAppear helped with this, but the UIMapView I had in my DetailViewController was not properly sized. I had to go back to the previous approach.\n. Just a note to others, one side effect of using this workaround:\n[splitViewController setSplitPosition:splitViewController.splitPosition - 1];\n[splitViewController setSplitPosition:splitViewController.splitPosition + 1];\nwas that when I launched the app in landscape on the iOS 5.0 iPad simulator, 2 of the tabs from the UITabBarController in my Master VC were missing. Rotating would fix them. iOS 5.1 and 6.0 simulators did not have this problem, so I only conditionally enabled this workaround on iOS 5.1 or higher.\n. @akac Yes, I know. Moving [self layoutSubviews]; to viewDidAppear does not work for me, it caused the layout of the Detail pane to be incorrect. (MKMapView is not sized correctly). I had to use the previous workaround with setSplitPosition. Just wanted people to know in case that fix doesn't work for them either.\n. ",
    "aporat": "I resolved the issue by adding\n[self.splitViewController willAnimateRotationToInterfaceOrientation:UIInterfaceOrientationLandscapeRight\n                                                               duration:0]; \nafter the makeKeyAndVisible class in the app delegate.\nOn another note, did anyone notice a strange touch behavior with UIInterfaceOrientationLandscapeLeft? the master view controller is not responding to touch events correctly. seems to happen with the stock UISplitViewController as well.\n. I'm glad it's not just my app. I couldn't solve this issue, so I disabled the UIInterfaceOrientationLandscapeLeft orientation. Happens on an actual ipad 2, so it's not just the simulator broken.\nIt does happen with the stock UISplitViewController, which let me believe it's a bug in the ios 6 gm /  xcode 4.5. I'll try to replicate it on a new project and submit a bug report to apple. \n. ",
    "Nygashi": "Just add [self layoutSubviews]; to the viewDidAppear instead of the viewWillAppear in MGSplitViewController. Problem solved.\n. ",
    "ArtSabintsev": "@Nygashi is correct. You have to add [self layoutSubviews] in viewDidAppear and change the method in which you present your MGSplitViewController instance. Instead of adding tot he window's subview, just set the window's rootVC.\n. Forked the code and added the 2 changes here: https://github.com/ArtSabintsev/MGSplitViewController\nI tested it on an iOS 6 iPad, and on iOS 5, 5.1 and 6 iPad simulators. Works fine.\n. Yes. I submitted it a few minutes after I uploaded the fork: https://github.com/mattgemmell/MGSplitViewController/pull/73\n. @jgale The fix I posted doesn't use that setSplitPosition code. \n. Ah, understood. Thanks for clearing that up.\n. Instead of adding a subview, I reset the window's rootViewController (https://github.com/ArtSabintsev/MGSplitViewController/commit/a63c963ac56f597b90b7ef9fbe06f5082d8da851). I called layoutSubviews later on, to re-draw/orient the view on rotation.\n. My pleasure!\n. No, I will not be doing that, as iOS 7 has ~86% market share and iOS 6 has ~12% marketshare, which leaves iOS 1-4 with 2% market share. https://mixpanel.com/trends/#report/ios_7\nThere is no reason to support iOS 5 or iOS 6 at this point in time.\n. ",
    "ygbr": "@ArtSabintsev have you submitted a pull request?\n. ",
    "sam899": "The easiest way I've found that works is to add the following to MGSplitViewController.m at the end of -(void)setup\nself.view.autoresizesSubviews = NO;\nIt seems to work perfectly and doesn't cause the views to jump into place when they load. Can anyone confirm this with their setup?\nIt works with iOS 5.1 and iOS 6 (haven't tested any others)\n. Glad it's working guys! I'll submit a pull request later\n. @ArtSabintsev , @wedkarz - I just submitted a pull request that doesn't have the flashing problem on load for iOS 6 - Could you see if it has a better result for you?\n. ",
    "fittoburst": "@sam899  Thanks....your solution seems to work for me.  Saved me too many late nights!\n. @elbryan .... I think that's a bit extreme!!!!!\n. @elbryan ... Yeah you're right. Bring it on! \n. ",
    "tylerjames": "@sam899 Did you ever know that you're my hero?\nFix worked for me as well. Couldn't figure out why my views thought they were supposed to be ridiculous sizes. \n. ",
    "cherukkayi": "I think this will work,\nif __IPHONE_OS_VERSION_MAX_ALLOWED > 6000\n[window setRootViewController:splitViewController];\n\nelse\n[window addSubview:splitViewController.view];\n\nendif\n[window makeKeyAndVisible];\nin - (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions method. :)\n. Try this,\nif __IPHONE_OS_VERSION_MAX_ALLOWED > 6000\n[window setRootViewController:splitViewController];\n\nelse\n[window addSubview:splitViewController.view];\n\nendif\nin - (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions. :)\nIt works for me. :)\n. ",
    "rainbowrainx": "@aporat 's method is work for me. This issue takes me serval hours, thanks for you sharing.\n. ",
    "ibiren": "I am facing issue while trying to push MGSlitview into a Navigation controller.\n. ",
    "sebastianwr": "Before putting master and detail VC in the split view: You alloc the master view controller and save it in a local variable, then the detail view controller and assign the detail view controller to a @property of the master view controller. Then the master VC can call any method on the detail view controller.\n. Since you don't provide any useful debugging information or effort on your side:\n[[self navigationController] pushViewController:[[MySubclassOfMGSplitViewController alloc] init] animated:YES];\nworks perfectly fine here.\n. ",
    "rae": "I made a change to my grandfork to address this. Unfortunately, Github has no way to do a pull request from a grandfork, only a fork.\nhttps://github.com/rae/MGSplitViewController/commit/50da3fe3f49db01c8369223f553072cd5f56886d\n. ",
    "jackbellis": "When i use your code, Art(?) it rotates properly. When I use Matt's it does not. Can anyone explain the differences? I diff-ed all the classes and only saw the one line about the layout and I don't spot what the effect is when i apply that change to Matt's. Thanks\n. Arggg... I had forgotten that the diff also picked that up, so I didn't try it in my experimenting. Thanks very much.\n. ",
    "TrungVu37": "could you fix MGSplitView in storyboard IOS > 5 plz?\n. ",
    "niveus": "Thanks Sam. That worked for me too\n. ",
    "Jeswang": "Worked for me too, but didn't get the reason.\n. ",
    "muhammadnasr": "Thank you for your reply.\nI tried that patch but it does not work. \nThe problem I have is not related to rotation. It just happens when I drag the divider to the left and decrease the width of the master view\n. ",
    "bestimmaa": "This should be done in both the setDetailViewController and setMasterViewController. It's the same way it is handled in the setViewControllers method. https://github.com/bestimmaa/MGSplitViewController/commit/d95f3c0cfba5ae26164f85214ec4d7479bb5b08f\n. Thanks for pointing out the right position in the code, I experienced the same issue and just wanted to search for this. I think it safe to assume that the status bar overlaps the view controller because there is no other behavior available in iOS7.\n. \"Please update\" HAHA - The author didn't update this since iOS5. How about describing the issues in more detail and start fixing them in a branch, maybe someone can help you out? I'm interested in fixing this too but lacking the time right now.\n. Check out this fork, looks good on iOS8 https://github.com/asprega/MGSplitViewController (0ece092c7debc8b69d98b58a672042ea304cc01b)\n. ",
    "jamra": "I just did the same thing you are trying to do.  Change UISplitViewController to MGSplitViewController.  In your detail view controller, change the UISplitViewControllerDelegate to MGSplitViewControllerDelegate.  \nI didn't document my steps, but it's not too difficult.  I would also recommend downloading the demo project.  It gives you the ability to see all of the features that you will get from the MGSplitViewController.\n. ",
    "SushilSharma12": "Can you show some code?\n. ",
    "wangbourne": "I found the answer from: #73 \nThanks\n. ",
    "jamesandres": "Turns out the issue was not with MGSplitViewController actually. It is either a bug (feature?) in iOS 6 where the rootViewController's view frame behaves differently based on orientation.\nThe following code example is how I got around the issue:\n``` objective-c\n- (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions\n{\n    // Add the split view controller's view to the window and display.\n    [window setRootViewController:splitViewController];\n    [window makeKeyAndVisible];\n// The status bar is initially hidden in Info.plist\nif (application.statusBarHidden) {\n    [application setStatusBarHidden:NO withAnimation:UIStatusBarAnimationSlide];\n\n    CGRect newFrame = splitViewController.view.frame;\n    UIInterfaceOrientation statusBarOrientation = [application statusBarOrientation];\n\n    switch (statusBarOrientation) {\n      case UIInterfaceOrientationPortrait:\n        newFrame.origin.y = 20;\n        newFrame.size.height -= 20;\n        break;\n      case UIInterfaceOrientationPortraitUpsideDown:\n        if (SYSTEM_VERSION_LESS_THAN(@\"6.0\")) {\n          newFrame.origin.y = 20;\n        }\n        newFrame.size.height -= 20;\n        break;\n      case UIInterfaceOrientationLandscapeLeft:\n        newFrame.origin.x = 20;\n        newFrame.size.width -= 20;\n        break;\n      case UIInterfaceOrientationLandscapeRight:\n        if (SYSTEM_VERSION_LESS_THAN(@\"6.0\")) {\n          newFrame.origin.x = 20;\n        }\n        newFrame.size.width -= 20;\n        break;\n    }\n\n    splitViewController.view.frame = newFrame;\n}\n\n// .. carry on ..\n\n}\n```\n. ",
    "fechu": "Check out this version of the fix. It looks a little bit less hacked. :-D\nhttps://github.com/kurtzmarc/MGSplitViewController/commit/94b33c750300a0f0b0f846a941f470e4c8fa98c6\n. ",
    "wiistriker": "\n(CGSize)splitViewSizeForOrientation:(UIInterfaceOrientation)theOrientation\n\nheight -= statusBarHeight;\n. Can i use your version in my project using cocoapods?\n. ",
    "HanClinto": "This works perfectly for me, thanks!  I was having trouble with an unusable (blank) 20 pixel bar at the bottom of my screen in iOS7 when using MGSplitViewController, and this fixed me problem.  \nThanks so very very much!\n. It was still an issue for me, yes.  My problems with iOS7 weren't fixed until I used this patch.\n. ",
    "fatuhoku": "Is this issue still open then?\n. ",
    "answer-huang": "It seems that the auth has not update this response for a long time.\n. ",
    "aschepis": "@wiistriker No, i haven't submitted a pod.  was hoping to get this merged.\n. @mattgemmell this code hasn't been updated in 5 years, so im guessing the PR isn't going to get merged :)  closing for now.\n. ",
    "ConfusedVorlon": "this is the demo app after clicking 'show master'\n\n. update for anyone interested: Matt has told me that he isn't developing this any more, so there won't be a fix from him.\n. @MyIDABC the last iOS beta fixed my issue. \n. ",
    "MyIDABC": "@ConfusedVorlon  Do you have an updated version of MGSplitViewController for iOS8?\n. ",
    "tikamchandrakar18": "ok\n. ",
    "thiagorios": "woow thx a lot! U saved my day!\nThis solution should be in the main project!\n. ",
    "wedkarz": "Isn't it just temporal fix? layout subviews should be called in willAppear, because still bad layout is flashing firstly.\nWhat might be the cause of different behaviour in iOS6? I noticed that problem occures only while building project using Xcode 4.5 (or rather iOS SDK 6.0). If you build using old one (i.e. 4.3.3) it still works fine, even if iOS 6 device.\n. ",
    "SunilJagnani123": "Its working from navigation controller now. Before it was not showing in landscape mode. the master part was going blank. \n. "
}