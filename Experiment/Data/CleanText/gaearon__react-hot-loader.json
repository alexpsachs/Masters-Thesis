{
    "sokra": "Maybe you can emulate a remount by calling componentDidUnmount on the old component and componentDidMount on the new component.\n. Only replaceCreateClass needs a SourceMap. Just use the SourceNode class from the source-map library instead of string concat. You may want to import the map that is passed from the previous loader (jsx-loader) with SourceNode.fromStringWithSourceMap. You receive it as second argument to the loader. Instead of return you need to call this.callback(null, code, map).\nCurrently the jsx-loader doesn't emit SourceMaps, but it should! :smile: @petehunt\n. You can fix the PR in the jsx-loader\n. > This is pseudocode assuming callbacks are stored in _listeners property on store but you should see the idea.\nThat's not a good idea. You should only store state/data in module.hot.data.\nThe proposed way keeps references to old modules (the old listeners), which is not good.\n. From webpack side this is possible. HMR was designed to support production usage. You just need to use an appropriate runtime instead of webpack/hot/dev-server.\n. @geekyme Technically this is possible... Some preconditions:\n- Compilation (currently webpack/webpack#295) must happen on the same absolute path. (So maybe in a docker container or vm)\n- You need to store records\n- You need a mechanism to notify the client about updates (Maybe over an existing WebSocket connection)\n- You need to implement HMR management code in your application. (Something similar to webpack/hot/dev-server but integrated with your app and update notification)\n- You need to be careful about changes to a components state (because react-hot-loader keeps state). @gaearon maybe react-hot-loader should handle this. I. e. each component can export a component version. When it increases react-hot-loader should do reinit/remount the component.\n. No need to proxy anything. The trick is to point publicPath to the dev-server port.\nExample:\n- node.js server port 8080\n- webpack-dev-server port 2992\noutput.publicPath = \"http://localhost:2992/_assets/\"\n<script src=\"http://localhost:2992/_assets/bundle.js\"></script>\nuse the inlined mode (recommended) or set contentBase = \"http://localhost:8080/\nThe webpack/react-starter does it this way:\n- https://github.com/webpack/react-starter/blob/master/package.json#L9\n- https://github.com/webpack/react-starter/blob/master/make-webpack-config.js#L50-L52\n. Should be no problem. HMR is also using the public path provided by __webpack_public_path__...\n. Maybe an optional stateVersion or componentVersion property on the component. Everytime it changes state is invalid and component should be remounted...\n. ",
    "gaearon": "For me, remounting defeats the purpose because a lot of my components do something in intervals and I don't want them to remount on each change.\nThere's a more fundamental problem than a timer here: if any old A method gets stored by someone and then called after an update, any change you made in B gets reset until you save A again. This affects requestAnimationFrame, setInterval, setTimeout and any callback really. This makes hot reload very unreliable and not worth it.\nWait: that seems to be a separate unrelated issue.\nI'm not very keen on JS prototype system, but I feel this might be solved by a membrane. (I'm only guessing but it kinda makes sense\u2014if we're the gatekeeper, we can forward calls to the freshest implementation.)\n. Implemented in 0.1.5 with a great help from @johanneslumpe\n. Can't reproduce this in master. Must be a local bug.\n. @luigy The label on the screenshot doesn't match current version. You have an outdated version.\n. This looks like a different issue than what I described.\nI'll try to reproduce this today. \n. @sokra What would be a sane approach? Ideally I want to hide the fact I'm using two loaders here (index and replaceCreateClass). Should they both handle source maps somehow? \n. Thanks! Will look into it.\n. Oh well. I'll update the PR then this weekend!\n. Source maps are in 0.5.0, thanks to @jRiest.\n. @luigy\nI can't figure out how to reproduce it. Do I understand correctly that all you do is replace image src? It works fine for me. Can you clone it anew, do npm install and try again?\n. Maybe some incompatible version of some package was in NPM cache?\nI'm not sure which could be causing problems though. Could it be that jsx-loader (and its inner react) and top react versions were different? I don't know NPM very well yet so I can't figure out if that could have been an issue.\n. I'll close for now. If you can reproduce it, let me know.\n. Done in v0.2.0. \n. Oh right! Thanks.\n. Lol, didn't mean to close it.\n. YES, but it clearly belongs to react-hot-api now. Filed as https://github.com/gaearon/react-hot-api/issues/1.\n. How does installing locally work? Specifically, would you need to type awkward node_modules/ whatever, or is there an easier way? Maybe we could do npm example? What do you think?\n. I like this solution, less globals is good! Would you be willing to submit a PR?\n. I\u2019d put it in devDependencies, right.\n\nOn 23 Jul 2014, at 23:28 , Chris Wheatley notifications@github.com wrote:\nSure, do you think it'd be best as a dev dependency or not? I guess it's perhaps not a huge issue consider the project is, as you've put it, 'a highly experimental proof of concept'.\n\u2014\nReply to this email directly or view it on GitHub.\n. Merged via acf8a3c49f6354a72f9d97648f3d97a6c95e3a05, thanks.\n. I'm writing a tutorial that will cover integrating this into an existing project, with a Node API example (so it's usable from Gulp as well as Grunt).\n\nMake sure you have HotModuleReplacementPlugin in Webpack config plugins and also hot: true in WebpackDevServer options (second parameter to its constructor).\n. By the way I'm also getting 404s for .json files but it doesn't matter: Webpack still downloads JS chunks without a problem. I'll ask Tobias about these when I hit into this again (while I'll be writing the tutorial).\n. If it is of any help, I ported react-tutorial quickstart project to have live reload:\nhttps://github.com/gaearon/react-tutorial-hot/commits/master\nMaybe last two commits will help.\nBlog post is in the pipeline.\n. This blog post should give you enough info to get started:\nhttp://gaearon.github.io/react-hot-loader/\nPlease let me know if after following these steps something still doesn't work.\n. Great news!I'll take a look at the path issue today or tomorrow.\n\u0414\nOn Sat, Jul 26, 2014 at 2:02 AM, Kyle Mathews notifications@github.com\nwrote:\n\nGot hot reloading working! https://github.com/KyleAMathews/coffee-react-quickstart/commit/29f759b965ff130460f150d85101fce4e8d195ab\nPretty awesome.\nOne small remaining problem that's probably more of a webpack issue. I can't get webpack-dev-server to use my public directory as the base directory for loading files. It'll only look at __dirname. You know what magic config to use to get around that? contentPath doesn't seem to have any effect.\nReply to this email directly or view it on GitHub:\nhttps://github.com/gaearon/react-hot-loader/issues/10#issuecomment-50213871\n. Ah, cool! I didn't notice that.\n. Merged via acf8a3c49f6354a72f9d97648f3d97a6c95e3a05.\n. @swirlycheetah Should be fixed, thank you.\n. :+1: \n. I think we can consider this done by now. Many starter kits already use react-hot-loader. The next step is to make a proper landing page, so that's what I intend to do in the future.\n. Hey!\n\nNah, it's because React DevTools can't find window.React and Webpack doesn't export a global require like RequireJS.\nYou can work around it two ways:\n1. Do window.React = React in your entry point (easiest way)\n2. You can specify output: { library: 'require', libraryTarget: 'this' } and set your entry point's module.exports to a function that acts like require and is implemented via a switch for all modules you'd like to be able to require externally:\njavascript\n  module.exports = function (path) {\n    switch (path) {\n    case 'react':\n      return require('react');\n    case 'app':\n      return require('app');\n   ...\n\u2014 convenient if you're used to requireing certain modules from console.\n. Yes I think it can!\n. If you post a breaking example, I can try looking into it. Note that with React 0.12 it doesn't seem necessary anyway because they changed how devtools talk to React. (I may be wrong though\u2014worth investigating).\n. I think there isn't! Please feel free to do that (just make sure the bundled example works).\n. @KyleAMathews\nI think it should be enough to make replaceCreateClass anonymous. I'm not sure where createHotClass.render comes from (why does Chrome think render belongs to createHotClass?). Maybe we can set its prototype or something so it appears as component's display name instead.\nI'm also thinking of trying to get rid of pitch loader altogether and always do just one transform with module.hot.accept(cb) instead of module.hot.accept(dependency, cb). It should be faster (twice less modules).\n. As of 1.0 alpha we don't change createClass to anything so it's no longer relevant.\n. Thanks!\n. Looks like Hot Loader tries to hot-load itself.. :-)\nI didn't see this issue because I only enabled hot loading for *.jsx files and naturally this didn't include loader's own JS. I'm not sure how to correctly handle it yet, but for now, you could adopt .jsx or .React.js as a suffix of choice for components and only enable Hot Loader for files with this suffix. This will fix the false positive.\n. > can only imagine if we could one day run dev \"unbundled\"\nI don't get it, what did you mean?\n. > If dev files could be served \"unbundled/individually\" and hot replaced individually, it could probably make it instant. \nHot loader relies on Webpack's require/resolve machinery to work out-of-the-box so I doubt it's feasible.\nOne way to make things faster is to try to re-implement hot loader as a single transforming loader (like JSX loader). Right now, it emits an additional module for each of your modules, so that may contribute to the delay.\nEmitting source maps also contributes to the delay.\nI think there may be some optimization opportunities in Webpack itself, I wonder if @sokra can weigh on this?\n. I'll leave this open because people are hitting it.\n. Fixed via 02c971305360b81e23d43170162f59b8658113e3\n. @syranide \nThis is how it works if you set notify=errors or notify=all (e.g. react-hot?notify=all). It will then dump errors in console and desktop Notification API (I'm open to adding notify=console and making it default though).\nWhat do you think?\n. I think notify=console would be really useful for default behavior so I'll leave this open for now.\n. I suppose we'd need to add a typeof Notification !== 'undefined' check in requestPermission and showNotification. Would you like to submit a PR for this?\n. Would be nice, I'm currently busy with normalizr :-)\n. Thank you!\n. I'm actually using this for accurate names (but it's way slower than eval). I haven't looked into making it nice in eval yet.\n. Fixed via 02c971305360b81e23d43170162f59b8658113e3\n. Looks good, thanks.\n. I wonder if file-loader has HMR handling code.\n. I don't think we can do anything about it, if you'd like please file it in file-loader.\n. That's amazing! Nice idea with __HUA :+1: \nI'll test it on my project and hopefully merge today!\n. Sorry for the long delay. Ideally I'd like to merge this after https://github.com/petehunt/jsx-loader/pull/19 gets through. \nWould you mind adding this.sourceMap check?\n. Since we're waiting for https://github.com/petehunt/jsx-loader/pull/19 and I had to move all hot loader code to top, I decided to collapse all hot loader code into one line so it doesn't obscure each file. This isn't as nice as source maps, but on the upside it works with devtool: eval (which is faster).\nThis will require a few adjustments in your PR but before doing them, let's wait for JSX source map support to land.\n. Thank you again! Source maps are in 0.5.0.\nI needed to tweak this PR so I did it via a separate commit, but it's really thanks to you that we have this.\n. We'll have to change a lot anyway because 0.13 is coming, and React.createClass will no longer be The Way to create components, slowly being phased out in favor of ES6 classes. We will need to reimplement hot loader considering this (#39), and intuitively I feel that this time createElement will be involved. While we're overhauling the loader for ES6 class support, we might want to also look into supporting dynamic createClass calls and see if any approach solves both problems. I could use any help with brainstorming these approaches in #39, feel free to suggest your ideas!\n. This. Is. Coming.\n. This should actually Just Work now with 1.0.0-alpha if you opt in explicitly:\n``` javascript\nfunction createRedirectHandler(to) {\n  var cls = React.createClass({\n    displayName: 'redirect-' + to,\nstatics: {\n  willTransitionTo: function (transition, params, query) {\n    transition.redirect(to, params, query);\n  }\n},\n\nrender: function () {\n  return null;\n}\n\n});\n// this is new API suitable for the dynamically generated classes:\n  if (module.makeHot) {\n    // second parameter is some string that uniquely identifies class inside current module\n    // (even if it is generated)\n    cls = module.makeHot(cls, to);\n  }\nreturn cls;\n}\n```\nPlease give it a spin and report any issues.\n. Closing, as this will be in 1.0.\n. Yeah, this is possible. Need to verify.\n. This now belongs to react-hot-api: https://github.com/gaearon/react-hot-api/issues/2\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. react-hot-boilerplate now uses NoErrorsPlugin and hot/only-dev-server! \n. This is done with new homepage.\n. I think using lowercase react is somewhat unusual but I'm not opposed to it.\nHowever the reason I use ({ is to avoid hot loader choking on its own JS files (which have .createClass(something) calls. It's not ideal but we need to find a different workaround for this issue (#17).\n. This looks good. Let's have this merged and see if it causes issues for anyone.\n. Published to NPM as react-hot-loader@0.4.3\n. What's your Webpack config? I think react-hot should come before your CS transform and you'll be fine.\n. Here's an example\n. @Chrazy It only works properly with vanilla React.createClass calls if that's what you mean.\n. Have you tried using hot/only-dev-server and NoErrorsPlugin?\nHere's the example.\nThey should solve your problem.\n(I plan to include them later in the doc btw.)\n. Ah I see, you're already using them.\nHmm..\n. Yes, just did, thanks for the repro.\n. @sokra explains why this happens in this comment.\nNoErrorsPlugin will only protect us against compilation errors. However ReferenceError is a runtime JS error. It ruins require and HMR runtime doesn't know what to do.\nNow I'm not sure if there is a way for us to gracefully handle this\u2014need to experiment a little bit.\n. I'm not actually sure why HMR can't live with the previous version in this case (if we promise our component definitions don't have side effects). We could of course wrap the whole module in try-catch and cache previous result but if feels hackish.\n. While this could work, I'd prefer fixing this without \"injecting ourselves\" into the app.\nThe loader tries to be very unintrusive and I'd like to keep it that way, if possible.\n. Actually it seems like the main problem in this case being the final block (if (module.hot)) not being executed because ReferenceError makes the code die before that.\nIf I move if (module.hot) before module's actual code, it seems to work.\nThat is,\njavascript\n  return [\n    'var __hotUpdateAPI = (function () {',\n    '  var React = require(\"react\");',\n    '  var getHotUpdateAPI = require(' + JSON.stringify(require.resolve('./getHotUpdateAPI')) + ');',\n    '  return getHotUpdateAPI(React, ' + JSON.stringify(filename) + ', module.id);',\n    '})();',\n    'if (module.hot) {',\n    '  module.hot.accept(function (err) {',\n    '    if (err) {',\n    '      console.error(\"Cannot not apply hot update to \" + ' + JSON.stringify(filename) + ' + \": \" + err.message);',\n    '    }',\n    '  });',\n    '  module.hot.dispose(function () {',\n    '    var nextTick = require(' + JSON.stringify(require.resolve('next-tick')) + ');',\n    '    nextTick(__hotUpdateAPI.updateMountedInstances);',\n    '  });',\n    '}',\n    processedSource\n  ].join('\\n');\nCan you verify whether this solves your initial problem?\n. Thank you for reporting this and specifying the exact repro case.\nReleased on NPM as react-hot-loader@0.4.4.\n. It's definitely possible and you're right it fits Flux well.\nWithout any work, hot reload often works for most modules except Stores, just because updates bubble up to component level, and updated components work with new module references. \nIt would indeed be fascinating to:\n1. Definitely test where with Flux updates work as is (I presume action creators and utilities should work)\n2. Find a way to recycle Stores (what you suggested seems reasonable)\n. Is there a reason you're not using Webpack HMR API directly (module.hot)?\n\nOn 21 Sep 2014, at 23:56, Robert Nagy notifications@github.com wrote:\nDid a small proof of concept:\nhttps://github.com/ronag/fluxit\n'use strict';\nvar fluxit        = require('fluxit');\nclass TimelineStore extends fluxit.Store {\nreset(prevState) {\n    console.log(\"2\");\n  }\nhandlePayload(payload) {\n}\n}\nif (!window.Fluxit_Stores) {\n  window.Fluxit_Stores = {};\n}\nvar prevState = window.Fluxit_Stores['TimelineStore'];\nvar newState = window.Fluxit_Stores['TimelineStore'] = new TimelineStore();\nif (prevState) {\n  newState.reset(prevState);\n}\nmodule.exports = newState;\nAny ideas as to how make this better? The Fluxit_Stores stuff would go into a loader.\n\u2014\nReply to this email directly or view it on GitHub.\n. I plan to take a look at this ~ in a month.\n. I have some progress. This is very sketchy at the moment, not on NPM and can work only with FB's vanilla Flux (Facebook's flux dispatcher and EventEmitter stores):\n\nhttps://github.com/gaearon/flux-hot-loader\nIf you feel like giving it a try, put this in node_modules manually and add something like this next to react-hot in Webpack config:\njs\n{ test: /\\.jsx?$/, loader: 'flux-hot?dispatcher=../dispatcher/AppDispatcher', include: /scripts\\/stores/ }\nwhere include is regexp for directory with your Flux Stores and dispatcher is path to the global dispatcher from any file in that directory.\nOne hard condition right now is that each Store must have a property called dispatchToken that is equal to AppDispatcher.register return value.\n. Note: it's quite possible that this only works in Manual mode (react-hot?manual). I haven't even documented the manual mode yet because I'm waiting for React Router 0.12 with router.replaceRoutes to be released :-)\n. Thanks for the tip, I'll add support for default.\n. I'm going to go with a different solution to this. It's more fundamentally solid.\nI'm closing this issue for now, but expect to see something working in a month or two!\n. @bebraw Looks a lot like react-hot-boilerplate :-)\nDoes the loader work with 0.12? I haven't tried yet..\n. Hah. Very pleased to hear this. Good luck with demo :-)\nI'll update deps on weekend, or feel free to submit a PR and I'll try it out.\n. Closed via #36.\n. I'd like to. Any ideas how to tell class A is still class A in next version of module? Ideally we'd also like to support dynamically generated classes inside function. I can't think of a way to do that now..\n. We can probably differentiate by call index (first createClass in module, second, etc) and disable hot reload for createClass calls after module definition (this will avoid problems with functions). Would you like to try?\n. Ah, I see now, your use case is createClass inside a function. Same as #24.\n\nReact does not support setting displayName property directly into wrapped component \n\nUm, you're sure? I thought it worked.. Is it true for 0.11? So you can't do \njavascript\n  return React.createClass({\n    displayName: displayName,\n?\nThat's weird...\n. OK, looking into that.\n. Why does this work for me?\nhttp://jsbin.com/jaxezekeni/1/edit?html,js,output\n``` javascript\n/* @jsx React.DOM /\nvar wrap = function (displayName) {\n  return React.createClass({\n    displayName: displayName,\n    render: function () {\n      return {displayName};\n    }\n  });\n};\nvar A = wrap('yo');\nvar B = wrap('dawg');\nvar X = React.createClass({\n  render: function () {\n    return ;\n  }\n});\nReact.renderComponent(, document.body);\n``\n. Your code [works for me too](http://jsbin.com/higojepusu/3/edit?js,output). (Fixed fiddle to usedisplayName`)\n. Are you sure you have 0.11 locally?\nMaybe you updated package.json but old dependency is still there.\nOm comment is from February so it may not be relevant anymore..\n. Woah, that's quite a common problem actually. I wish React warned right away when this happens!\n. @jedwards1211 Those are not two Reacts, it's just the way Babel names variables.\n. @jedwards1211 NPM doesn't care what Webpack says. If google-map-react's version of React declared as peerDependency is not compatible with the one in the outer project, NPM will install its own version of React inside there. That's the big problem with NPM 2, and it will be fixed in NPM 3.\n. You can't inject it on top because each module needs its own module-specific createClass function.\nYou can probably do following:\n1. Instead of replacing regex, monkey-patch React.createClass at the beginning of each module\n2. Restore React.createClass at the end of each module (otherwise first require in the file will mess it up)\n3. Currently we opt out of hot reload for modules that don't have regex matches. If we say goodbye to regex, we must only enable hot reload (if module.hot code) if monkey-patched createClass was called during module definition. \n. Modules opt in to HMR by calling module.hot.accept. We don't want to opt-in to HMR for files that contain no components. For plain JS files, it's best to let HMR bubble up dependency tree because for most React apps, there is a component somewhere on the too, and it is HMR-capable by itself. As a consequence, side-effect free plain JS modules will get hot reloading as a bonus by the virtue of being require from HMR-capable components.\nHowever, if we just put module.hot.accept in every file (as opposed to those containing createClass calls), Webpack will think that these files are truly HMR-capable (which they are not), and won't bubble reload up when they change.\nRight now we add module.hot.accept when regex matches, but if we do away with regex, we must have other way to know if module is \u201ccomponentish\u201d or not. One way to do that is to check if monkeypatched createClass was called by the end of module definition. If not, probably this module contains no components, and therefore we shouldn't emit module.hot.accept, or we lose the benefits of HMR bubbling.\nFinally, this is only a problem if regular (non-component) files go through this loader. This is often the case. Personally, I use JSX transforms even on plain JS files so I can use Harmony syntax and some JSX occasionally in helpers.\n. @mbektimirov \n1.0.0-alpha no longer uses the regex. Instead, only module.exports is hot-enabled implicitly.\nHowever, there is an API to hot-enable any class (e.g. a private one, or one inside a function):\n``` javascript\nvar SomeComponent = React.createClass({ ... }); // or ES6 class in the future\nif (module.makeHot) {\n  SomeComponent = module.makeHot(SomeComponent);\n}\n```\n. Yeah, there's no need for that now.\nNow it works like this:\n- module.exports is always stored implicitly, regardless of displayName\n- call to module.makeHot(SomeComponent) by default uses displayName or name (ES6), but you can specify any other key as a second parameter\n. Closing, as this will be available in 1.0.\n. Pretty sure this is a Node.js issue, what version are you running? It's definitely too low-level for JS.\n. Yeah this seems probable. node-sass uses C/C++ library bindings so native error might come from there. I'll close this issue.\n. But this sounds like you don't need react-hot-loader in tests, do you?\nCan you have a separate webpack configuration for test runner that doesn't use this loader?\n. Can you run webpack-dev-server with hot: false for test page?\n. 30 seconds?! How many modules do you have? If you use devtool: 'sourcemap', consider switching to devtool: 'eval', it's way faster.\nYes, react-hot-loader makes components handle their own reload. There's no way you could use (insert-hot-reloading-test-system here) without disabling react-hot-loader because it kind of defeats its purpose :-).\nI'm not sure this will help but perhaps you could write your own hot dev server. It's just a little code, compare dev-server.js that reloads page and hot-only dev-server.js that never reloads page. Maybe you could implement a custom one that behaves differently in test environment.\n. What's the problem with Flux stores btw?\n. HMR is module-scoped (and updates propagate up the dependency hierarchy if unhandled).\nreact-hot loader is only intended to inject its if (module.hot) { implementation into modules with React components. In fact it doesn't even emit if (module.hot) if module contains no React.createClass call.\nYou are free to write your own if (module.hot) logic for any other modules, including Stores. What you need to do is to transfer subscribers from old (dying) store to new (reloaded) store. I think you could do it in this fashion:\n``` javascript\n// MyStore.js\nvar MyStore = {\n// ...\n};\nif (module.hot) {\n  if (module.hot.data) {\n    MyStore._listeners = module.hot.data.listeners;\n  }\nmodule.hot.dispose(function () {\n    module.hot.data = { listeners: MyStore._listeners };\n  });\n}\n```\nThis is pseudocode assuming callbacks are stored in _listeners property on store but you should see the idea.\nNote that you don't accept yourself from the store, the HMR update will still bubble up, and React components will accept the new Store.\ndispose docs\n. I agree it's not very clean but I can't think of another way to do that without requiring consuming components to handle store updates themselves..\nI believe approach I suggested, albeit dirty, will work because old listeners will actually get forwarded to new methods by react-hot-loader. It's quite hackish but as long as it gets the job done and is absolutely drop-in (no client code needed), I tolerate it.\nI wonder if there are better solutions that keep \u201cdrop-in-ness\u201d of react-hot-loader but also allow reloading stores.\n. Yes that's what I was saying. If it doesn't work, share the code and I'll dig it too.\n. Cool! I wonder if we could make a loader similar to react-hot-loader, that would work with event emitter-based Stores.\nYeah HMR is tricky to get mind wrapped around. As @sokra said there are probably better solutions but I haven't yet trained the HMR brain muscle enough.\n. I'll close this issue, if you have more thoughts to share on Flux reload, let's continue discussion in #30 \n. Some good news https://github.com/gaearon/react-hot-loader/issues/30#issuecomment-72126754\n. Thanks. Does the example work as expected?\n. Awesome, glad to hear it!\n. You mean you're using React with Dart? Hot loader will work as long as there is literal \"React.createClass\" call in generated code.\n. No need for verbatim createClass call now either, as if 1.0 (which comes out very soon).\nClosing, let me know if you have any problems!\n. I'd love to see a proof of concept of this. Personally I don't think it's ready for prime time (HR occasionally fails with stateful code and we all have some stateful code), but as an experiment, it would be really cool. Indeed, it seems to come down to implementing a custom hot server.\n. Can you describe your use case?\n. Closing, as not really an issue.\nI don't think hot reloading in prod would work because\n1) React components are stateful, this works between minor updates but any non-trivial update will have some breakage.\n2) There's a perf hit to using RHL because we're proxying each method. You should always turn it off in prod builds.\n. 1.0 alphas support React master (both ES6 style and createClass), so closing this one. When we get 0.13, will revisit.\n. There's work in progress in 1.0-styles branch but we haven't finished it (need to finish the logo and header, add styling to example & replace long article with a simple Getting Started).\n@kkga Do you think we can get it done?\n@pburtchaell What would you like to contribute? I haven't even gotten to writing a small Getting Started so that's something you can take, if you'd like. It's a challenging task because this page has to be both short, concise and useful.\n. Fixed.\nSeriously.\nIt's awesome and has a live demo.\nYou've got to see it!\nhttp://gaearon.github.io/react-hot-loader/\nalso, new guide http://gaearon.github.io/react-hot-loader/getstarted/\n. Please share when it works. I'd love to see it! I haven't tinkered with server rendering yet, but with RR 0.11's new API I need to seriously consider it :-)\n. Thank you so much for sharing! Will try it out tomorrow.\n. There's now plenty of RHL examples with server rendering, so I'm closing this out.\n. Any chance you can share a reproducible example?\n. Also, you can try whitelisting react-hot-loader to just JSX files and see if it solves the problem.. If it does, some JS file is probably being treated incorrectly and we need to find out which one.\n. I don't think the problem is specific to react-router per se, rather maybe it is specific to AMD (which when.js, which RR depends upon, is using).\nI'm not @sokra but I reckon specifying second parameter to webpack is akin to calling run on it and you're not supposed to do it yourself in conjunction with webpack-dev-server: instead, let the server run or watch. But I totally agree it's a weird issue.\nI'll close this one since it's not specific to react-hot-loader, but feel free to file this with Webpack. Thanks for sharing the repro!\n. Um, that's weird. Does it help to only enable react-hot-loader for JSX (and not JS) files?\n. It's more or less the same issue as #24. You can fix this by adjusting your regex to only enable hot loader for JSX files. If you always use JS extension, you can opt some specific modules out of hot reloading by using exclude in loader config.\n. This should no longer be an issue as of 1.0.0-alpha.\n. It's not an issue with 1.0, so closing. Official release coming later this week.\n. I thought more about makeHot and I would rather have it more explicit:\n`` javascript\n// You'd need to require it and passmodule` object to it\nvar makeHot = require('react-hot-loader/makeHot')(module);\n// if you need to make hot something other than module.exports, just wrap it:\nvar Something = makeHot(React.createClass({\n  ...\n});\n// also works for classes:\nclass SomethingElse {\n  ...\n}\nSomethingElse = makeHot(SomethingElse);\n```\nThis is more explicit than module.makeHot, but it allows to eliminate if condition because in production, we'll just return whatever you passed as an argument.\nFor comparison, the syntax I considered before was more magical but also more error-prone:\n``` js\nvar Something = React.createClass({\n  ...\n};\nif (module.makeHot) {\n  Something = module.makeHot(Something);\n}\nclass SomethingElse {\n  ...\n}\nif (module.makeHot) {\n  SomethingElse = module.makeHot(SomethingElse);\n}\n```\nThe check was necessary because we wouldn't have module.makeHot in production (whereas an exported function would just be a no-op returning its argument).\nThoughts?\n(This is all only relevant for components that aren't module.exports.)\nEdit: Now that I think of it, wrapping isn't really helpful because JSX wouldn't figure out displayName and we'd have to pass second parameter to makeHot every time.\n. Whew, that's quite weird, sounds like some kind of dependency order issue.\nCan you please verify that neither react-hot-loader nor react-hot-loader/node_modules/react-hot-api have their own Reacts? (I know you checked but I still wonder about react-hot-api somehow being involved)\n. @natew I split this into a separate issue: https://github.com/gaearon/react-hot-loader/issues/47\nThanks!\n. Fixed via https://github.com/gaearon/react-hot-api/commit/d1bf76a3237523391d2a0dfca3d95469e62e7e5b\n. Hi, thank you for kind words. Have you looked at isomorphic-react-template? \n. There is also isomorphic-hot-loader example. I haven't really dug into differences yet (since I'm not server-rendering myself just yet), but I think I need to document at least one of these approaches because it seems like a common issue nowadays.\nDoes any of these solve your problem?\n. @sokra can you chime in to help? I wonder if there's a more proper way to do this.\n. Not really an issue. Closing. See above for many working approaches :-).\n. @natew Can you please check whether 1.0.2 fixes this issue?\n. In case it doesn't, next thing I want to ask you to try is to only enable hot loading for files in your source folder and not node_modules, e.g. { test: /src\\/.*\\.jsx?$/, loaders: ['react-hot', 'jsx'] }\n. This should be fixed now. I'll close this out, but if you encounter this with 1.0.7 (or newer versions), please let me know and I'll reopen!\n. @sokra Can you please give a hint? I don't really know about webpack_public_path or dynamic paths at all.\n. In case Tobias is busy, can you please elaborate on what you're trying to do? \n. Yeah, sure. I'll add this.\n. Fixed in https://github.com/gaearon/react-hot-loader/commit/5e57a4b5bbfd7675e317cb8f4e293321ae8a95a6, but not released yet. Will release after updating docs later this evening.\n. Fixed in react-hot-loader@1.0.3.\n. The only part I don't understand is whether module.exports and exports are the same thing. If this doesn't work for you, please show your config so I can replicate.\n. Ah, I get it now. OK!\n. Fixed via 15f30349521a20ece0cb0db49218aab6e43796e7 (https://github.com/gaearon/react-hot-api/commit/148c5aba3d2ece7f7eec9dc4260f078c38f1c557).\nPublished on NPM as 1.0.5.\n. Good catch. We depend on internal react/lib/ReactMount.\nIn your case, it seems that external packages are being used for React itself, but react/lib/ReactMount is taken from NPM package. This doesn't work because they correspond to two independent copies of React. If you delete NPM packages, it should no longer build at all.\nI think it would be nice to avoid depending on ReactMount but then we'd need another way to get list of root instances. This could be made injectable by user but I'm not sure if it's worth the complexity.\nWhat practical benefit does it give you to use externals in dev?\n. Please see if this works for you:\nhttps://github.com/gaearon/react-hot-loader/blob/master/docs/README.md#usage-with-external-react\nAvailable in 1.0.6.\n. As they're aiming for smaller API surface I doubt they'd be inclined to do it.\nThere is a devtools hook that can be used to get internal objects (React Chrome DevTools uses it), however this hook is meant to only be set once so it's inconvenient and error-prone to try to use it here. I'll raise an issue though.\n. Filed as https://github.com/facebook/react/issues/2797\n. @frankychung I'm glad to hear this!\n. Davide, can\u2019t find your comment, have you figured it out, or is Github glitching?\n\nOn 03 Feb 2015, at 10:34 , Davide notifications@github.com wrote:\nI think this happens even if you use react from npm and you require('react/addons') which is the version with all the addons.\nAt least it happens to me with react 0.11.1\n\u2014\nReply to this email directly or view it on GitHub https://github.com/gaearon/react-hot-loader/issues/53#issuecomment-72606827.\n. Yeah I also bumped into that before. You can actually work around it in a terrible-ish way:\n\njs\n'react': 'react/addons',\n// A workaround for react/lib to be resolved correctly:\n'react/addons/lib': 'react/../lib',\n. With react-hot-loader@2.0.0-alpha you'll no longer need this Injection nonsense, it will just work.\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. Are you using the latest version? Try 1.0.6.\nIf it doesn't help, change your config to have exclude: /node_modules, e.g.\njs\n{ test: /\\.jsx?$/, loaders: ['react-hot', 'jsx?harmony'] , exclude: /node_modules/ },\n. Related webpack/webpack#632.\n. Are you on Windows?\n. OK, I know what this is. Thanks.\nI have an additional check to guard against this but it uses / as separator.\nI'm not sure whether to fix the check, or to remove it altogether and tell everyone to use exclude..\n. Fixed in 1.0.7. Thanks for reporting!\n. This should be fixed in 1.1.0.\n. Does hot reload actually fail, or does it just output this message?\nThere was some in issue in Webpack about errors which are not \"errors\" per se.\n. Let's leave this open for posterity.\n. This is on Troubleshooting page now, so closing.\n. @halt-hammerzeit Can you send a PR to Troubleshooting doc describing how you fixed the problem? Others may have the same issue.\n. Does this happen with 1.0.6?\n. By the way, to avoid refreshing completely (even when you have syntax errors), use hot/only-dev-server and NoErrorsPlugin. This setup is shown in react-hot-boilerplate:\nhttps://github.com/gaearon/react-hot-boilerplate/blob/master/webpack.config.js\nBut let's figure out the main issue first..\n. If you don't feel comfortable sharing the source we can arrange a 15min TeamViewer session to figure this out once and for all. Ping me at email or on Skype (dan.ex) if you'd like to do that.\n. btw you can give it another go with 1.1.0, node_modules issues should be fixed\n. Fixed with 1.1.1\n. This will be fixed with chokidar 1.0 release: https://github.com/webpack/webpack/issues/703#issuecomment-70724467\n. Fixed in watchpack@0.2.2 which you should get with webpack@1.5.1 now.\n. It works with jsx?harmony. Probably something 6to5 does when using class extends that hot loader doesn't pick up. I'll take a look, thank you for reporting.\n. Released with react-hot-api@0.3.4. I'll bump the dependency in next release but you should (probably?) get the new version by nuking node_modules/react-hot-loader/node_modules and running npm install again.\n. I'm not sure about fb-flo because I haven't taken a close look at it.\nThis is not tied to Webpack. I extracted Webpack-independent part into React Hot API, and that's what powers the homepage.\nThere are three ingredients to making this work:\n- Patching React classes on the fly with a new version and tricking React into thinking it's the same class so it doesn't bail out of reconciliation (that's what React Hot API does);\n- A generic system for modules to register \u201cupdate handlers\u201d for any module and bubble them up require hierarchy until some module \u201cknows\u201d how to accept its update (that's what Webpack's Hot Module Replacement is);\n- A build step where we generate a React-Hot-API-calling update handlers for component modules.\nSo it's theoretically possible to do (2) and (3) with any other build system that can emit partial updates (for changed modules and their dependencies), can replace modules with new versions, execute user-defined code when module is updated, and transform code.\nIn fact even React Hot Loader is not very tied to Webpack itself. Webpack HMR has quite a generic API, and you can implement it in another module system. It looks like a set of methods on a special module.hot object (which is only available when HMR is enabled): module.hot.accept(handler), module.hot.accept(dependency, handler), module.hot.dispose(handler), etc. Here are more examples from Webpack's website with API description. I'd be thrilled if more build systems adopted this API.\nSee also an older technical intro post for more context.\n. @sokra can probably explain HMR module system requirements better than I do.\n. I think that can work nicely, and we can make the video default. By the time person gets to the live demo, she knows what the real workflow looks like.\n. Very good point, thanks.\n. I was thinking about special casing getInitialState but that's too fragile. It may return different keys because store state is different.\nI think I'll add some sort of magic comment as an experiment and see whether it helps my workflow. Not a big deal.\n. I think I should split docs/README into several files in docs and add Troubleshooting there. Link to Troubleshooting from Get Started on landing, main README and from React Hot Boilerplate README. Makes sense?\n. I agree refreshing works fine in these cases and couldn't think of a more obvious way to do that. I'm still open to suggestions tho\n. Normally hot updates bubble. This means if components requires a Store, and you change the Store, since it can't handle the update on its own, the update will propagate to the components. Components then handle the update with hot loader. Is this what you're experiencing?\nThis works really well for stateless modules. For example, if you have a mixin, or an utility module, if it is only used by components (or modules that themselves satisfy this condition), then hot replacement works nicely, because update version of components will use the new version of dependency.\nIt kinda falls apart with stateful modules like Stores because their new versions will not contain any state, and components are still subscribed to the old versions. Currently, I don't solve this in any way and just refresh manually after I change Store code. In the meantime, I'm working on flux-hot-loader which is supposed to fix this problem for Stores.\nDoes this answer your question? Or do you have some other kind of problem?\n. > I thought it was a bug honestly that modules that weren't accepted caused a hot reload rather then a page reload.\nI think you're right about this not being quite \u201cby design\u201d of HMR system. We're kind of cheating in React Hot Loader by claiming components can always accept updates of themselves when in fact it's not strictly true. Unfortunately there is no way for us to know which of the modules are stateful, so we're making a compromise.\nOne thing you might be interested in is the Manual Mode. I haven't properly documented it because I'm wating for React Router 0.12 to come out with router.replaceRoutes. If you say react-hot?manual in Webpack config instead of react-hot, the loader will not generate any module.hot.accept calls. This means you're free to accept (or not accept updates) in any file, with any custom logic. My use case for it is putting module.hot.accept on routes.js file and hot-replacing the router configuration when any route handlers update, but you may want to use it in some other way.\n. I'm not really sure we can do that, but worth a try.\n. Gonna be fixed when RHL switches to use React Hotify. Closing the issue for now, as it's fixed in Hotify. We might switch in a month or two.\n. It is fixed, but in another project. RHL is going to switch to using this project as the engine later. I don't plan to fix it inside RHL itself, so it is non-actionable here.\n. That's amazing! I'll figure out the docs structure and will add it!\n. > But I cannot see the http://localhost:8080/assets/App_wp_bundle.js or where it's created. \nI don't know about Rails, but just to clarify: WebpackDevServer doesn't actually create any files, it serves them from memory.\n. Do you mean changing the route configuration midfight? This will be possible with react-router 0.12 (not released yet) because it adds router.replaceRoutes.\nOnce it's released, you'll be able to achieve this by using React Hot Loader manual mode (react-hot?manual in Webpack config) and code like this:\n``` js\nvar routes = require('./routes'),\n    Router = require('react-router');\nrouter = Router.create({\n  routes: routes,\n  location: Router.HistoryLocation\n});\nif (module.hot) {\n  module.hot.accept('./routes', function () {\n    routes = require('./routes');\n    router.replaceRoutes(routes);\n  });\n}\n```\nManual mode just lets hot updates bubble up require hierarchy until they're handled in router.js.\n. Your approach actually works for me with 0.11.6.\n. Not sure I'm following you.\nThe first screenshot looks fine: RHL will wrap your event handlers. They will proxy to the most recent versions of your methods.\nCan you reproduce this problem in React Hot Boilerplate? I'm not sure how making React external would help here. In fact RHL needs a special configuration for external React.\n. While this is a fair point, you can also exclude node_modules from loader configuration. This will prevent RHL from transforming vendor files:\njs\n      { test: /\\.jsx?$/, loaders: ['react-hot', 'jsx?harmony'], exclude: /node_modules/ },\n. Yep, let's do that.\nTwo other nitpicks:\n- Indent with two spaces, not one.\n- There's a missing space in a function call.\nPlease squash the changes later.\n. > Can't make class <> hot reloadable due to being read-only, tip: vendor files can be excluded by excluding the /node_modules/ directory from the jsx loader configuration\nI'd change it to:\n\nCan't make class <> hot reloadable due to being read-only. You can exclude files or directories (for example, /node_modules/) with \"exclude\" option in loader configuration.\n\nBy the way, what key is failing? It it trying to process type? I'm just concerned if this is something ES6-related that may happen to user components as well.\n. Oh, I see. Let's open another issue for that.\n. Thanks!\n. IIRC webpack/hot/dev-server will reload page if HMR can't be cleanly updated, webpack/hot/only-dev-server won't: https://github.com/webpack/webpack/issues/418#issuecomment-54288041. I find F5-reloading very distracting and rarely want it so I suggest to have that turned off by default.\nAs for not needing webpack-dev-server/client \u2014 docs suggest you use --inline mode in CLI which injects this script automatically. I don't use inline mode (it seems unsupported from Node API) so I write it explicitly. I also prefer it being explicit so I better understand the complete picture of what's going on.\n. What I usually do is compare every little configuration piece with react-hot-boilerplate until I find something that differs. Can you try doing that?\n. Oh, that's a good point. I never realized this happens. I'll take another look and if that's an issue, I'll wrap module code into IIFE.\n. Should be done. Thanks again for reporting.\n. What's your Webpack config? react-hot transform should be done after 6to5, so loaders config should look like ['react-hot', '6to5'] (yeah, I don't know why it's right to left lol).\nDoes this help?\n. I just added wrapping user code in IIFE to preserve \"use strict\" if user had it. So it worked as is before IIFE but wouldn't now.\n. Thanks for the test case. I'll take a look later in the evening.\n. This is one of those annoying cases where CLI version of webpack-dev-server does not behave like its Node API for some reason. I'll file a bug report in Webpack.\nFor now, creating server.js with this code and running it as npm run dev solves the problem:\n``` js\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar config = require('./webpack.config');\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true\n}).listen(8080, 'localhost', function (err, result) {\n  if (err) {\n    console.log(err);\n  }\nconsole.log('Listening at localhost:8080');\n});\n``\n. Filed as https://github.com/webpack/webpack-dev-server/issues/106. Hopefully we can get it fixed once and for all, now that you provided the repro!\n. Let's leave it open so it's visible.\n. Can I ask you to add this to Troubleshooting doc page? \n. Thanks!\n. You can copy pastewebpack/hot/only-dev-server` to your project, strip logs from it and use your version instead.\nClosing, let me know if I missed something!\n. It's not really something we can control in RHL. You can file an issue with Webpack.\n. I'd use if ('production' !== process.env.NODE_ENV) in this case.\nYou'd need to set it to true using DefinePlugin for production anyway so React is properly compressed.\n. Appreciated!\n. Is the check failing or something? Can you submit a PR to fix it?\n. Thanks! By the way, while it's good to have this fix in, you can just set exclude: /node_modules/ in your loader config: https://github.com/gaearon/react-hot-boilerplate/blob/master/webpack.config.js#L24\nThis way we won't process any your dependencies.\n. Out in 1.1.6. Thank you!\n. Thanks! Does this happen with 0.13.0-beta.1 or master?\n. Oh, I see. I didn't realize there's a new beta. I'll check it out later today.\n. Fixed in react-hot-api@0.3.5, which should be installed when doing npm install!\n. That's interesting. I don't see why it wouldn't work. Can you try and let us know?\n. Closing, as it's not an issue. Let us know how it goes!\n. Good point.\n. Webpack 1.7.0 is out with a fix for this behavior. I strongly suggest everyone to upgrade.\n. Appreciated!\n. I think I have this after long sessions in debugger. There must be a timeout or something. Is this your case?\n. Weird. If you find a way to reliably reproduce this, let me know!\n. Regardless of the origin of this problem, it's not related to React Hot Loader per se.\nPlease file it with Webpack Dev Server (or something else :-).\n. Make sure publicPath in Webpack config has 3000 port, not 5000. publicPath is where you want Webpack to make requests.\n. Any chance you're changing the entry point (something with React.render call) and it doesn't export anything? You need to change the component files which export valid components.\n. There might be some kind of timeout but it's better to ask this on Webpack repo. I only experienced this after long debugger sessions which prevented JS from executing.\n. Closing as not directly related to RHL (you might want to file this in webpack or webpack-dev-server repos).\n. Out in 1.1.6. Thank you!\n. I can't reproduce this. Could your browser be blocking additional alerts from the same page?\n. Is this related to RHL? If you remove react-hot from loaders, does the problem disappear?\n. Please let me know if you can share a reproducible example! Either way, it's highly unlikely that RHL is messing with setTimeout. I'm closing for now but let me know if you can give me a way to repro this.\n. I'll take another look, thanks.\n. It works with boilerplate, I tried React 0.13 RC2 in a branch: https://github.com/gaearon/react-hot-boilerplate/tree/react-0.13\nMaybe you got a duplicate React installation by mistake? This may happen if some library specifies React in dependencies instead of peerDependencies, and when you update to a new version of React, it keeps the old version in its own node_modules.\n. Can you check https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md page if any suggestions could apply to your case?\n. > I had this code in my index.js even though react was a npm package in node_modules:\nWhere did it come from? It should only be used with external React. Regardless of this, this code should actually work too with the current version, react-hot-loader@1.2.1. It was fixed in 1.2.0.\n. :+1:\n. Awesome.\n. Is it failing on everything or a specific example?\n. OK, I'll take a look real soon. Stay tuned :-)\nIf anybody wants to take this, go ahead!\n. Fixed in 1.2.2. Thanks for reporting!\n. Can you verify that you have exclude: /node_modules/ in your config in loader configuration like on this line? You need it, because without it different things may break.\n. 1.1.x only worked by sheer luck. Too many things can break unexpectedly if you don't use exclude, and there's no good fix for that on RHL's part. In fact it looks like the error is related not to RHL, but some other loader (Babel?) that also has exclude unspecified.\nTutorial explicitly states to use exclude, so please add it.\n. This might be the same as #99. If you don't have exclude: /node_modules/ in loader configuration, you need to add it; it worked only by luck before. Can you verify?\n. Added to Troubleshooting: https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#socketio-cannot-use-in-operator-to-search-for-document-in-undefined\nThanks!\n. @Dakuan This happens if you try to process Webpack's own webpack-dev-server/client with something like babel-loader. Are you sure you don't have Babel processing node_modules or wherever you have installed Webpack Dev Server?\n. @Dakuan Can you show your config and paste Webpack output?\n. @sagiavinash The absolute path in the entry configuration looks weird. Not saying it causes the issue but I\u2019d try using a relative path there. Otherwise, it\u2019s hard to say, and in any case, this is not related to React Hot Loader.\n. 0.13 is supported. Anything in particular that doesn't work?\n. I don't think this is due to RHL.\nYou probably have some other peer dependency that wants 0.12 (e.g. React Router).\n>=0.11.0 includes 0.13.\n. Totally get it, NPM warning is confusing.\n. wow\n. We're in the process of simplifying RHL a lot, so such experimentation will be easier to do in userland.\nClosing for now, thanks for submitting a PR!\n. This is good, thanks! I'll get it released on Monday.\n. It works fine for me with document.body. Can you isolate this issue in a repo? (e.g. you can take react-hot-boilerplate and work from there.)\nThere are other reasons why you shouldn't render to body though. See explanation here (second half of the article).\n. Please reopen if you find a way to repro!\n. What kind of devices? iOS?\n. cc @appsforartists who has experience with this\n. @xgrommx Normally you run server at 0.0.0.0 and connect at whatever IP your computer has in the local network (usually 192.168.something.something). But I think hot reloading wasn't working like this for me, at least on iOS. I'm not sure why: either socket support isn't there, or I had some other issue.\n. Thanks!\n. I'd like this to be somewhere in docs but I'm not sure where to put it.\nIf somebody can turn it into an article that'd be great, I'd just link to it.\n. @appsforartists You should! I'd love to read your stuff.\n. > Just to be pedantic they're decorators and are very different from annotations. \nYeah. Some recent \u201cdecorators or annotations\u201d argument caused a brainfart in my head.\n. Just wrote some thoughts about what I want 2.0 to become: https://medium.com/@dan_abramov/the-death-of-react-hot-loader-765fa791d7c4\ncc @sebmck @milankinen @caspervonb\n. Continued by:\n- https://github.com/gaearon/react-hot-boilerplate/pull/33\n- https://github.com/gaearon/react-hot-loader/pull/182\n. Awesome!\n. My biggest problem was always lack of tests. I'm solving that with React Hotify, the successor to React Hot API. It has not reached feature parity yet but it's fully covered with tests.\nAnother issue is the complication of passing root React instances to the React Hot API. I did it so React Hot API could walk mounted instance tree and force deep updates. In React Hotify, I don't do that anymore, instead monkey-patching componentWillMount and componentWillUnmount to track instance list for every component.\nYet another issue is the complicated API of React Hot API. In React Hotify, I'm exporting a decorator instead and letting consumer use a Babel plugin to put it automatically in the source code. The nice thing about this approach is that both parts are fully reusable in Browserify environment. Both React Hotify and the Babel plugin don't depend on Webpack at all.\nThe tricky part in Browserify is reloading only the changed module. In Webpack, we have HMR for this, and it's the last missing piece. Please correct me if I'm wrong, but I think you are reloading the whole application code in LiveReactload? This is the reasons shims break, you need to do require trickery, etc. This seems fragile.\nI know @Kureev wanted to look into using the new React Hotify with Browserify. I wonder if you have any thoughts about compiling a \u201cpartial update\u201d for Browserify so it only re-executes the code of our component annotated with @hotify calls with Babel.\n. Appreciated, thanks.\n. Hey! A few thoughts:\n- I'm not doing server rendering so I can't really weigh on this as I'm not familiar with the workflow;\n- I'd rather avoid complicating RHL and I'm happy to see alternatives (from which RHL might steal someday);\n- I've been thinking about making RHL more generic... In particular I'd be happy to split react-hot-api into a generic \u201cprototype patcher\u201d and React-specific tree traverser that calls forceUpdate.\nWhat do you guys suggest?\n. > I'm happy to try to extract out the prototype patching myself and see if it's worth doing, unless you want to abstract it out regardless.\nPlease do! I'm busy with other projects at the moment and plan to take another look at RHL in a month or so.\n. Can try/catch help here? We wouldn't want to special-case any specific properties that might throw in some rare cases.\n. I think we may silently ignore it, or maybe warn unless it's too noisy.\n. Should be fixed in 1.2.9.\n. Thanks for the effort. Superseded by https://github.com/gaearon/react-hot-loader/commit/64dd55a0cca4b4a117b087053601489a2f9ddaf0.\n. Thanks, good catch.\n. Landed in 1.2.5\n. Can you put up a project reproducing this?\n. I'm closing, but I'll be happy to look into this if you provide a sample project.\n. Let's keep it open for further investigation later.\n. I'm closing because this is not React Hot Loader issue. Please file it with Webpack if you still have it.\n. Please report this at https://github.com/webpack/webpack or https://github.com/webpack/webpack-dev-server!\n. Have you tried with React master? It should use parent context.\nWe need to know if it's an inherent issue in RHL, or just an issue with that specific patch.\n. I'm pretty sure it's https://github.com/facebook/react/issues/3404 (fixed in https://github.com/facebook/react/pull/3494).\nThis should get into 0.13.2: https://github.com/facebook/react/issues/3629.\nPlease reopen if you see this problem in React master.\n. > The problem is that the styles that get injected in the page using the style-loader are not available when accessing the app as described above. What is the best way to solve this? Any tips?\nWhy aren't they? CORS problems?\n. > Now I just have to deal with externally loaded react.\nhttps://github.com/gaearon/react-hot-loader/tree/master/docs#usage-with-external-react\n. It's a regression. That's why we're going TDD in the upcoming rewrite..\nI'll take a look what's up, thanks for reporting.\n. The fix should be out as react-hot-loader@1.2.6.\n. @mmahalwy \nCan I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. Thanks. This is fixed and released in react-hot-loader@1.2.7.\n. You can try finding a fix by adding a failing test to react-hotify. Then, if you find a solution, I can backport it to RHL.\n. @slonoed Yes, if you also find a fix.\n. @slonoed It's also worth checking if this change helps (or makes it worse, I dunno)\n. Thanks! I'll definitely get back to this after my React Europe talk.\n. Properties are very tricky to hot reload because they're really being defined inside the constructor.\nWe'll see what we can do with a Babel plugin later, but for now, the workaround from @opatut is the best we got.\n. We're supporting autobind decorator in the next beta release coming soon.\nStay tuned.\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. @steadicat Hmm, I'm pretty sure fat arrow methods still shouldn't get hot reloaded. Can you check again, or share a reproducible case?\n. (That said @autobind decorator should work now. Just not the fat arrows.)\n. Oh. It works because it generates a new class on every invocation. The downside is Test state will be reset on every hot reload.\n. Add/removing @autobind is not going to be hot reloaded correctly\u2014it doesn\u2019t seem to be very useful to support this corner case. But tweaking @autobound methods should work. If not, please file a new issue with a reproducing project.\n. It is Sublime + Spacegray Light.\n. See here:\n\nUncaught RangeError: Maximum call stack size exceeded\nWhen using WebpackDevServer CLI flag --hot, the plugin new HotModuleReplacementPlugin() should not be used and vice versa, they are mutually exclusive but the desired effect will work with any of them.\n\nRemove HotModuleReplacementPlugin if you're using --hot CLI flag and it should work. I don't why it works this way, it's one of the reasons I prefer using WebpackDevServer's Node API instead.\nFeel free to reopen if this doesn't solve it!\n. Yes, you should set output.publicPath in your Webpack config to point to the WebpackDevServer port. For example, publicPath: 'http://localhost:3000/scripts/.\n. In React Hot Boilerplate, I'm using ES6 classes. In this case this specific error (lack of render) is only checked when the instance is force-updated on the next tick.\nIn your project, the lack of render is checked right in createClass call and it blows up the module definition.\nIn theory we could try to recover from errors during module definition, but I'm not going to make functional changes to RHL at this point, since it's going to be converted to use a new engine in a few months. This new engine will be easier to modify (as it will be covered by tests), so we might support something like this there.\nFor now, it's non-actionable, so I'm closing. Thank you for bringing this to my attention, so that I'll try to do better in the next engine.\n. Is it really related to React Hot Loader? I think it's more like a generic Webpack issue, so you should ask in Webpack's repo. Here's how you shim globals with Webpack. Does this help?\n. This is fixed in the next beta release coming very soon.\nStay tuned.\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. Also check out https://github.com/glenjamin/webpack-hot-middleware\n. You'll want to uncomment exclude: /node_modules/, because some of the scripts used by hot module replacement machinery will not work with Babel out of the box.\n. > which I should probably do from now on for modules that I publish\nYeah, this is always the easiest way for everybody!\n. exclude: '/node_modules' is wrong.\nexclude: /node_modules/ is correct.\n. From what I remember, this happens if it can't find root React instances by looking at react/lib/ReactMount. Any chance that you have duplicate Reacts on one page? \nIf not, please create a sample project and I'll dig in.\n. Wouldn't it be easier to solve this as an alias in Webpack config, as opposed to a query option?\nLonger-term, this problem will go away in a few months when we switch to react-hotify that doesn't need ReactMount.\n. This also wouldn't be an issue if ngReact had react (and angular?) in peerDependencies instead of dependencies. This would ensure there's only react in the node_modules root. Otherwise as soon as you start using other React libs, you'll bump into the same\u00a0\u201cduplicate React\u201d problem.\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. Fair enough! In RHL 2 we're not depending on react/lib/ReactMount so I thought maybe that would help.\n. Thank you!\n. Oh wait, I acted too fast :-/\nThis seems to break HMR if I import a non-existent file.\nI'm going to ask around in Webpack repo because I really want errors in console and I want imports to not break HMR.\n. So, NoErrorsPlugin is not needed after all!\n\nThis seems to break HMR if I import a non-existent file.\n\nwas fixed by https://github.com/gaearon/react-hot-loader/pull/187 and released with 1.3.0.\n. Does it fit on every media query as you resize the window down?\n. Seems good, thanks!\n. Hey! React Hot Loader works on top of Webpack's Hot Module Replacement interface (module.hot). AFAIK it's implemented in transport-agnostic way, so the actual transport is only referenced here:\nhttps://github.com/webpack/webpack-dev-server/blob/8e8f540b2f7b35f7b6c3ce616a7fd2215aaa6eea/client/index.js#L64-L67 (listens to Socket.io for hot updates and calls postMessage)\nThis message will be picked up (again, in transport-agnostic way) by this \u201chot server\u201d that is a thin wrapper over HMR API:\nhttps://github.com/webpack/webpack/blob/bac9b48bfb0f7dd9732f2faafb43ebb22ee2a2a7/hot/only-dev-server.js#L59-L67\nDoes this help?\n. Just do it normally, but make sure each entry point has webpack/hot/only-dev-server, or hot updates inside it won't work.\njs\n{\n  entryPointA: ['./entryPointA', 'webpack/hot/only-dev-server'],\n  entryPointB: ['./entryPointB', 'webpack/hot/only-dev-server'],\n  devServerClient: 'webpack-dev-server/client?http://0.0.0.0:3000'\n}\n. (You're welcome to PR the docs!)\n. @Surreal9 I don't know :-(. You can probably ask around in Webpack's Gitter room or repo.\n. This is not going to be an issue in next versions. They will be based on react-hotify that doesn't have a dependency on ReactMount. So I don't plan to fix it in 1.0.\n. We won't have this limitation in the next beta release coming soon.\nStay tuned.\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. Thanks for bringing this up!\nI want to support that. The problem is determining which functions actually are component factories. This pattern doesn't make it easy.\nI will likely be able to solve it in react-hotify (the spiritual successor to RHL). A Babel plugin could interpret a function with JSX inside as a likely component, and try to enable hot reloading for it. In fact you can already try to add support for hot reloading functions to react-hotify (it has tests!).\nI'm going to leave this open. In a few months this is likely to be solved.\n. Please wait until React Transform supports stateless components. This will take some time.\nAfter that we can considering backporting a limited version of support for them to React Hot Loader, but this is not very likely.\n. > My react components hot reload fine but my other utils are giving me the same message.\nPlease note that The following modules couldn't be hot updated does not mean you have this specific issue described in this thread. This is a very general message meaning the hot update bubbled up, and there was no component midway to handle it. It can happen because you use stateless components and they're not supported by React Hot Loader, but it can also happen due to many other reasons.\n. Please track https://github.com/gaearon/babel-plugin-react-transform/pull/85 if you are interested in this.\n. I don't see react-hot in your loaders so you're not using React Hot Loader.\nTry changing loader: 'babel' to loaders: ['react-hot', 'babel']?\n. The number is just module ID so it'll be different for everyone.\n@Saturn2888 We can't help you without seeing the source code of the module you changed.\n. AFAIK Windows doesn't understand 0.0.0.0 thing.\nBut I'm such a network noob so can't really answer your question.\n. I'm closing because, if it is an issue, it is a Webpack (or Webpack Dev Server) issue, not React Hot Loader's.\n. Thanks!\n. Awesome job! Thanks.\n. :+1: \n. This is out. Can you please verify that it works?\n. React Hot API still has a peer dep, and since that's the thing that actually reaches out to React's internals, it better stay just there.\n. Are you sure this is related to React Hot Loader? I don't remember us using process.env.\n. Yes, it's on the page because it corresponds to the next section.\nBoth titles are for the same section that tells to exclude node_modules.\n. :+1:\n. Are you using Windows by chance?\n. Are you using Babel?\n. If you could fork http://github.com/gaearon/react-hot-boilerplate and set up a minimal reproducing example that would be a huge help!\n. Thanks. I'll take a look with in a few days. In the meantime can you try Babel's loose option? I think it may work if you use loose: ['es6.modules'].\n. Not really an issue with Babel, it just tries to follow the spec which disallows overwriting exports. I'm not sure what the right solution is. Maybe it's possible to override them after all\u2014I really don't know property descriptors well. Yeah I would accept a PR.\n. I think it works if you move export-loader after react-hot-loader in your loader configuration.\nCan you verify?\n(This would require you to put loader into config instead of inline require but it's a better style anyway.)\n. Is there anything we can do on RHL side?\n. Closing as non-actionable.\n. Thanks, great to know!\n. I think changing hot/only-dev-server to hot/dev-server in your Webpack config's entry should do the trick. Can you try it?\n. React Hot Loader requires you to put every component into a separate file and export it.\nDoes this help?\n. Closing because this is by design.\nWe'll have a way to avoid it later, but it will be available as a Babel plugin that will make RHL obsolete.\n. Edit: fixed the screenshot. :-) El Capitan screenshotting is broken..\n. Yes, the next step is to modify React Hot Loader to read (and resolve via Webpack's require.resolve I think) the reporter from the query config and pass it to React Hot API, then modify React Hot API based on my current PR so it uses that reporter, or, if reporter is not specified, behaves like it used to behave (just throw).\n. @syranide Interesting. Yeah this could be separate. What API do you imagine?\n. @davidpfahler \nWe want to eventually deprecate React Hot Loader in favor of a Babel plugin: https://github.com/gaearon/react-hotify-boilerplate\nSo this is consistent with how we want to do things in the future. As for HOCs, I'm not sold: https://github.com/loggur/babel-plugin-react-error-catcher/issues/1\n. @philholden To clarify, error is not in the modal. (It's just I was demoing that RHL can change stuff inside dynamic stateful components like modals.) The error is placed exactly where the error'd component was rendering (with width: 100%; height: 100% to fill the space).\n. @philholden That's why I want custom reporters. You could write a reporter that checks if the bounding rect is smaller than some value and shows an overlay in the screen corner in this case.\n. With React Hot Loader 3, we now have error reporting on initial mount.\nIt doesn\u2019t work for updates yet but I think it should once facebook/react#6020 lands.\nKeeping this issue open to track this.\n. Do you mean in development, or in production?\nYou shouldn't be using React Hot Loader in production.\n. React Hot API peerDep is now more relaxed.\n. Sorry, can I ask you to PR again? It doesn't merge cleanly now from web interface\n. We\u2019ll use official error boundary capabilities in React when they become available. Some initial work is already there in 15.0, and 15.1 will handle more cases. Closing for this reason.\nYou can track error boundaries in https://github.com/facebook/react/issues/2461.\n. Can you please go through Troubleshooting? If it doesn't help, check out React Hot Boilerplate and compare your configuration to it. If it still doesn't work, please publish a sample project so I can take a look.\nYou certainly don't need hot: true in the Webpack config. You need it in WebpackDevServer options though.\n. Can you reproduce it on a small project? I've never seen this before.\n. There is no way we can make this work. We're going to support autobind-decorator soon though, so you might want to start using it.\nEventually we'll figure out something to support property syntax, but probably in form of a Babel plugin that will deprecate React Hot Loader.\n. Closing as duplicate of #141.\n. Whoops, can you please edit the page again? It doesn't merge now :-(\n. Thanks!\n. It would actually help to see the source code, not the generated one. ;-)\n. My guess is that you're using getters, and React Hot Loader doesn't support them yet.\nSupport is coming!\n. Stay tuned for the next beta release that is going to fix it and drop very soon.\n. Can I ask you to check whether react-hot-loader@2.0.0-alpha solves this issue?\nPlease provide any feedback on it in this PR: https://github.com/gaearon/react-hot-loader/pull/182\n. See why we removed it: https://github.com/gaearon/react-hot-loader/pull/146. :-)\n. There is nothing we can do until Chrome fixes this: https://code.google.com/p/chromium/issues/detail?id=492902.\n. > Is there a similar bug in Firefox? My source maps don't update there either.\nYes, Firefox also has this problem. I remember @jlongster wanting to take a look someday but he's probably super busy with Firefox devtools React overhaul.\n. It works with devtool: 'eval' in Chrome 48, but source maps indeed are still broken.\n. > ...and I just realized that I could exclude the static files directory ;)\nThis :-).\nWe're assuming we're inside Webpack so module is available, otherwise we'd also need to check for require, etc.\n. Actually it's always better to include just the source directory instead of exclude-ing something.\n. @mattconde Can you try react-hot-loader@2.0.0-alpha-1 please? I tried to fix that there..\n. @mattconde Thank you!\n. @hmeerlo Thanks. I released react-hot-loader@2.0.0-alpha-2 which enforces the correct version of react-hot-api.\n. @hmeerlo Bah, I forgot to publish it! Works now?\n. @hmeerlo That's good! :+1: Let me know if you find any problems.\n. Damn. I was sure I published it as next... NPM :-(\n. @cpsubrian \n\nAt the class-level I needed to position @autobind after (below) the @connect decorator supplied by react-redux, otherwise the scope of the methods wasn't properly set.\n\nShouldn't be RHL issue, right? If you put it before connect() you're autobinding the component generated by connect() which isn't your class.\n. Here's something new that came out of this.\nhttps://github.com/gaearon/react-transform-boilerplate\n\n. We\u2019re skipping 2 but 3 might be coming eventually. \ud83c\udf77 \n. Duplicate of https://github.com/gaearon/react-hot-loader/issues/184?\nClosing.\n. Thanks for reporting! You shouldn't use inheritance for React components, it's generally a bad idea. However you're right we at least shouldn't break it. Please revert to react-hot-loader@1.2.9 until this issue is solved.\n. The right way to solve this problem with composition:\n``` js\nclass A {\n  return {this.props.children}\n}\nclass B {\n  return hooray;\n}\n``\n. Because this is a React Proxy issue, let's track it in https://github.com/gaearon/react-proxy/issues/9.\n. Should be fixed in2.0.0-alpha-3`, please verify.\n. > Maybe just include suggested approaches in docs?\nYes, that's what I meant. I mean not just the code, but also the boilerplate, Getting Started guide, etc.\n. @glenjamin \nThough as you probably saw, \n\nRecover from module definition level errors\n\nand\n\nRecover from file not found errors\n\n(when NoErrorsPlugin isn't enabled)\nwere actually broken until #187 so that counts.\n. Meh, this is very old.\n. Note: this means you can finally remove NoErrorsPlugin and enjoy Babel errors in your console, as well as hot reload code after fixing those errors.\n. Me neither \ud83d\ude04 \n. React Hot Loader looks for module exports that are React components.\nIn your case, there are no React components at all: you are exporting functions.\nThis is what causes the problem: React Hot Loader thinks there's nothing to reload.\n. Please see https://github.com/Gozala/reflex/pull/35.\n. I don't see webpack-dev-server/client?http://localhost:3000 in your entry.\n. Please provide a full project reproducing the error. It is preferable that this project is in JavaScript.\n. React Hot Loader is going away. I'm going to post about it soon.\n. There'll be more instructions, but at the moment RT is still work in progress.\nPlease give it some more time.\n. @jaredly, is there any way I can tell React DevTools to look at a different function? Right now it points to the proxied method, but I can set something like __originalMethod on the proxy if we can come up with a convention you're happy with.\n. @jaredly The constructor is proxied too. Never mind React Hot Loader though\u2014it's deprecated and the new proxying mechanism is in React Proxy. I'm proxying both constructor and all prototype methods there.\n. I can\u2019t repro this with React Hot Loader 3 so it somehow got fixed.\n\u00af(\u30c4)/\u00af\n. React Hot Loader is deprecated in favor of React Transform plugin for Babel and React Transform HMR. I don't plan to add support for stateless components to React Hot Loader, but I do plan to add it to those projects. Please track https://github.com/gaearon/react-transform-hmr/issues/6.\n. This is fixed with React Transform.\nPlease see the deprecation notice.\n. Thanks, but React Hot Loader is unrelated to React Transform. They both use HMR API so warnings are similar, but this isn't really the right place for this tip.\n. Please see https://github.com/gaearon/react-hot-loader/blob/master/docs/README.md#usage-with-external-react.\n. Can you check whether updating react-proxy to the very latest version fixes it?\n(react-proxy is a dependency of react-hot-api@0.5.0)\nThat said we don't plan to support components inherited from createClass components\u2014even React doesn't officially support them. Inheritance is a terrible solution to code reuse in React so we won't encourage it.\n. @smashercosmo What do you mean by \u201cslightly change\u201d? As long as you wrap it, just use it as is. If you want to change its internals, fork. It's like \u201cwhat if you want to use third-party function but change its source\u201d.\n. Sorry for the turbulence. We\u2019ll unite both projects eventually but for now this isn\u2019t relevant to this repo.\n. It\u2019s on gh-pages branch, feel free to inspect it, e.g. https://github.com/gaearon/react-hot-loader/blob/gh-pages/public/js/live_editor.js\n. Which version are you referring to?\nRegardless, the project is deprecated, please see https://github.com/gaearon/react-transform-boilerplate instead. It will get full 0.14 support soon.\n. No, I meant which version of RHL.\nThere's 1.x and 2.x betas.\n. RHL is compatible with 0.14 AFAIK. It isn\u2019t currently compatible with React 15, but that\u2019s in the works.\n. Functions defined inside constructor can\u2019t be reloaded. This is more or less by design\u2014no easy way to get around it.\n. That code is going away anyway so no big deal!\n. There are two parts to this:\n1. Make sure your symlinked folders end up included in the loader configuration for the transform. For example if you have something like include: __dirname in Webpack config, symlinked folders will be excluded.\n2. If RHL wants some dependencies like react, you can symlink them back, e.g. cd ../toolkit and npm link ../app/node_modules/react.\nNone of this is specific to RHL though so I\u2019m closing.\n. React Hot Loader doesn't currently support functional components.\n. In any case this is not React Hot Loader issue.\n. > 1) How to specify multiple entry points? react-hot-boilerplate has only one entry point. I have two entry point and second entry point is a DOM-less code (code which will run in web-workers)\nHere is an example: https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#i-see-hmr-nothing-hot-updated-and-nothing-happens-when-i-edit-appjs\n\nI noticed that, If I am using hot-reload, then it only hot-reload render function. If I change anything in other functions then it will not do a hot update. \n\nIf this is the case, it\u2019s a bug. It should hot reload any functions on the components. I\u2019m in the middle of a rewrite so this is probably going to be irrelevant afterwards so I\u2019m closing. Keep an eye for React Hot Loader 3 release\u2014it should be more stable, and if you have this issue again, please feel free to file it as a bug with a sample project reproducing it.\n. It's not coupled. The underlying part (https://github.com/gaearon/react-proxy) is agnostic of any build tools. It is possible to build something like https://github.com/gaearon/babel-plugin-react-transform but for Webpack (think \"react-transform-loader\") that would work with existing transforms such as https://github.com/gaearon/react-transform-hmr. In fact I'm curious why no one did that yet. Would you like to try?\n. If somebody does it, I'll happily port RHL to use that loader internally, and everyone would be happy. Babel users would enjoy more thorough support (there are benefits to static analysis!) but current users of RHL would also use the same underlying codebase.\n. > I was also caught off guard that decision was made to go from a generic webpack loader to babel specific implementation.\nAs I said before react-proxy is completely independent from Babel. That I currently don't work on React Hot Loader doesn't mean you can't use it to build something specifically for Webpack using React Proxy or React Transform HMR. ;-)\n. An important factor is that \u201cBabel specific implementation\u201d is more generic than \u201cgeneric Webpack loader\u201d because it can be used with alternative packagers such as Browserify and (most interestingly) React Native packager.\n. It's totally possible (with some limitations) to use React Transforms without Babel. Please see #216 which is exactly the same question. I left some hints on how to approach this.\nIf you're familiar with how Webpack loaders work and read React Hot Loader source code, it shouldn't take you more than a few days. Unfortunately nobody expressed interest in implementing this so far.\n. :+1: \n. We mention this in the Troubleshooting guide:\nhttps://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#syntaxerror-import-and-export-may-only-appear-at-the-top-level\nWe can't ignore this unfortunately.\n. Feel free to create a PR to add this to Getting Started page though!\n. @mdreizin \nYes, that wouldn\u2019t work with the code we generate. Please feel free to send a PR to make this Webpack 2-friendly. We might need a separate branch that only works with WP2.\n. I don't think we support hot reloading in IE8 either way.\n. This is not currently supported and in fact unlikely to ever be supported in React Hot Loader because it transpiles to an assignment inside a constructor. We might have a solution based on Babel which will handle this, in the future.\n. @eisisig Feel free to help out! #242.\n. Hi! This is a React Hot Loader issue tracker rather than a Webpack support forum, so I\u2019m afraid we can\u2019t help you with this one. Cheers!\n. It doesn't really make sense to use react-hot-loader and react-hmre together.\nThese are two wildly different and conflicting approaches to the same problem.\nThey are also both unrelated to how global works with Webpack.. The CLI options of webpack-dev-server do some of the tricks but they also cause issues in some cases so we don\u2019t recommend them.\n. Very hard to say without a project reproducing the issue. \n. This is a React specific project but it\u2019s great to see similar tools exist for Angular!\n. v2.0.0-alpha-4 uses react-hot-api@0.5.0-alpha.3 which doesn\u2019t contain makeAssimilatePrototype.\nI\u2019m closing as it doesn\u2019t affect v2 alpha, and won\u2019t affect v3 that I\u2019m working on right now. I don\u2019t have plans to backport the fixes to v1.x, sorry!\n. You are using react-hot-loader yet there is no react-hot-loader in your loaders configuration. So it\u2019s never really used.\n. Can you show the relevant code? This is a bit vague to help you.\n. Yeah. I\u2019m closing as it\u2019s not directly actionable right now. This is fixed in the upcoming rewrite (RHL 3), and there are no plans to fix this in earlier versions. Please feel free to watch the repo for the RHL 3 announcement which might be up in a few weeks.\n. I think replacing webpack/hot/only-dev-server with webpack/dev-server in your entry configuration in webpack.config.js should have the desired effect.\n. Nah, they\u2019re all highly experimental \ud83d\ude04 . This doesn\u2019t mean you shouldn\u2019t use them\u2014I\u2019m just a bit frustrated by the trend of piling experimental tools on top of each other, calling it a \u201cboilerplate\u201d, marketing it as a best practice, and thus alienating beginners from JavaScript development who rightly think these setups are crazy.\nAs for the future\u2014I\u2019m merging these projects with some lessons learned. Stay tuned.\n. Seems like you got it solved there instead!\n. \ud83d\udc4d \n. It should be solved in the rewrite that I\u2019m working on. No plans to backport the fix to older versions so you\u2019ll probably need to either wait it out, or hold off from using React Hot Loader until then. I\u2019m closing because this is not actionable\u2013keep your eyes on the repo and try RHL 3 when it\u2019s available!\n. This is an issue in Webpack, please feel free to report it there. We can\u2019t fix it here.\n. @anaibol \nThank you for asking! I go over this difference in detail here: https://medium.com/@dan_abramov/hot-reloading-in-react-1140438583bf. The result (React Hot Loader 3) is what I came up with, having learned from both approaches and their weaknesses.\n\nI thought that React Hot Loader was dead in favor of React Transform.\n\nI thought so too \ud83d\ude09 \n. @nfcampos Thanks for reporting, should be fixed in -alpha.9.\n. I think it is ready but it\u2019s hard to say until it gets more usage.\n. @glenjamin This is the relevant commit: https://github.com/gaearon/react-hot-loader/pull/272/commits/e41e11701754c5026b36d286495bd0ff1bc27777. Relevant PR: https://github.com/gaearon/react-hot-loader/pull/272. Rather than assign _source, we now call .register() from the modules, so RHL doesn\u2019t care whether or not the new types get createElemented. The new code updates proxies during module definition (register() call) rather than during first use (createElement()).\n. Yes!\n. Also, in v3, \u201cTag every export of every module\u201d depends on whether you use Webpack loader or Babel plugin. Webpack loader tags everything in module.exports but Babel plugin tags any top-level variable, so it works with unexported classes or HOC call results.\n. > What stopped createElement from getting the right component in this case originally?\nSomething like this:\n``` js\nclass App {\n}\nReactDOM.render() // Whoops, early element usage!\n// Generated:\n(function () {\n  REACT_HOT_LOADER.register(App) // Executes too late\n})\n```\nSince the initial render was done with vanilla element, registering a proxy now would cause it to unmount on the next render, as we would start returning a proxy next time. This can be unexpected, so we just bail out.\n. > Would it be possible to place the register call immediately after the definition? That way there wouldn't be a dead zone between definition and registration.\nIt would be possible for Babel plugin but not for Webpack. To be honest I think it\u2019s a fair compromise because it makes the plugin really non-invasive. It just appends some stuff at the bottom, so it\u2019s safe to say it\u2019s not fragile. And it\u2019s easy to refactor this to the desired pattern anyway.\n. > I'm getting\n\n[react-router] You cannot change ; it will be ignored\nHow exactly do I configure react-router with this?\n\nThis warning message is absolutely harmless; you can ignore it. Unfortunately there is no way to opt out of it at the moment (you can contribute to fix it in https://github.com/reactjs/react-router/issues/2182).\n. > Is this normal that componentWillMount is called for components behing \"hot reloaded\"?\nIt\u2019s not. Please provide an example reproducing this.\n\nI am having stateful (class) components rendered from stateless (function) components, can this be the cause of this behavior?\n\nNo, this shouldn\u2019t remount inner components. But I can\u2019t help without a reproducing case.\n\nIt's unfortunate but the current state of things.\n\nAnd it will stay the current state unless you can share the example reproducing this or are willing to look into why this happens \ud83d\ude09 .\n. > are you using react-router because I think this is the reason I'm seeing this. I'm using a hack to force React.createElement to happen.\nWhat hack? There was a mention of a hack before (with alphas) but it is not necessary with betas.\n. Fixed in 4acd85cb1d682dec1bda4053954b208539340a80.\n. I don\u2019t think so. But then again, you can\u2019t have class properties without Babel anyway?\n. No, this transform is harmless for any class. I just mean turning\njs\nclass Stuff {\n  doSomething = (e) => {\n    this.x(e.stuff())\n  }\n}\ninto\njs\nclass Stuff {\n  doSomething = (e) => {\n    return this.___doSomethingqwertyu234567(e);\n  },\n  ___doSomethingqwertyu234567(e) {\n    this.x(e.stuff())\n  }\n}\nI\u2019m not sure if there is anything in the spec that would make it a bad idea but it\u2019s worth giving it a shot. The only special case I see so far is arguments object which should still end up being the one in constructor. To be honest we can bail completely when we see arguments used.\n. We need to create it once, otherwise it\u2019s slow.\nI\u2019m not really sure I see your point about functions without body. We can just convert them to arrow functions without body that call those hidden methods. Or we can bail out because most event handlers are more than one liners, and commonly React code uses those just for event handlers. Handling majority of cases is good enough here. \n. Yeah I get it, but if Babel is able to compile arrow functions correctly, so can we \ud83d\ude04 . Just a matter of having enough tests.\n. To give some sense of perspective, if nobody contributes, the stable 3.0 might get out as late as June because I really don\u2019t have the bandwidth to work on a good doc right now. It really is the biggest blocker to getting this version out!\n. We need to update this intro.\nThe new intro would be slightly longer because there is a bit more setup involved.\nI would split it into several sections:\n1. Enabling HMR\n   - Create a development Webpack config separate from production one\n   - Add HotModuleReplacementPlugin to development Webpack config\n   - If you only render on the client, consider using WebpackDevServer\n     - Easier to set up\n     - Enable hot: true and add its entry points\n   - If you use server rendering, consider using Express server + webpack-dev-middleware\n     - More work but also more control\n     - Show how to add webpack-dev-middleware and its entry point\n2. Using HMR to replace the root component\n   - Show how to add module.hot hook to re-render your root component\n   - (This will not preserve state but is good enough for some cases!)\n3. Adding React Hot Loader to preserve state\n   - If you use Babel:\n     - Add react-hot-loader/babel to plugins\n   - If you don\u2019t use Babel:\n     - Add react-hot-loader/webpack to loaders\n   - Add react-hot-loader/patch as the first entry point\n   - Change your index.js to render <AppContainer> instead of your root component\n   - That\u2019s it!\n. Thanks!\n. @gadicc @hedgerh Can I ask you to work it out between yourselves? I added you both as collaborators so you should be able to work on a single PR together without much hassle. (Up to you if you want to first take it somewhere else, but I would prefer reviewing on GitHub.) Just a reminder that the PR(s) would need to be sent against the next branch. Thanks!\n. Might be a Babel bug. Filed as https://phabricator.babeljs.io/T7298.\n. Fixed in 3.0.0-alpha.9.\n. I just activated it. Can you try adding .travis.yml to next?\n. Appreciated!\n. Fixed in 48b2382.\n. Previous versions of React Hot Loader or React Transform used to wrap class in the proxy during its definition time, so this wasn\u2019t much of an issue\u2014the update would just never propagate up to the router. The current approach has many more upsides (e.g. works with functional components) but it now wraps components in createElement() so now it needs all components in chain to update the React way, so the Router behavior becomes problematic.\n. Thanks for looking at it!\n. @glenjamin \nThanks for the idea! I added this to 3.0.0-alpha.12 so people can get started more quickly. This is still ugly though so we\u2019d better figure out a proper way to do this before the release. The router console error stays so hopefully this will bring more light to https://github.com/reactjs/react-router/issues/2182 \ud83d\ude04 .\n. I feel this is out of scope of this hack and should be fixed in https://github.com/reactjs/react-router/issues/2182. \n. @jaredpalmer As far as I can see, this means a different component is mounted every time, so the state of any children components is destroyed. If this works well for you (e.g. you don\u2019t use local state a lot), you can remove React Hot Loader and just use Webpack HMR API without it.\n. Aside from the annoying warning, should be fixed in v3.0.0-beta.1.\n. @burkhardr \nRoot.js\njs\nexport default function Root() {\n  return (\n    <Router component={App}>\n       ...\n    </Router>\n  )\n}\nindex.js\nTake this file and replace App with Root.\n. It\u2019s expected to work (as in, I don\u2019t see why it wouldn\u2019t), but I have not tested it, so issues might still exist.\nI would appreciate if you filed an issue with a link to the branch I can test and instructions to reproduce.\n. > The hot reload works for me, but I keep receiving the error in console. The error is:\nIt is not an error, it is a warning. There is no harm in it. Yes, it\u2019s expected to appear until React Router fixes https://github.com/reactjs/react-router/issues/2182, but you don\u2019t need to worry about it.\n\n[EDIT] The only way to make it work is via setting <Router key={Math.random()} />\n\nThis does not make it work. You are forcing the root component to remount, thereby losing all the local state. If this works well for you, you don\u2019t need React Hot Loader at all because its only purpose is to preserve the local state.\n. Seems like we shouldn't have any more dreaded \"can't change routes\" warnings with RR v4. And routes should hot reload too. https://react-router-website-uxmsaeusnn.now.sh/basic\n. Thanks for the PR! Left a few comments inline. I think that we want to add a custom propType for children that verifies that this is a single element, and that its type is a function. We shouldn\u2019t allow passing <div><Stuff /></div>, for example.\n. Looks great!\nCan you please add support for the old way of doing things? The propType warning is enough to get people to migrate to the new way, but I\u2019d rather be able to release it in the next alpha without bumping to beta. I\u2019ll remove the compat code in a beta.\n. The new code doesn\u2019t.\n. Yeah, this looks great. Will release today or tomorrow. \n. Backward compat doesn\u2019t work here.\n1. It crashes inside the proptype check because it assumes children.type exists\n2. After fixing this, it crashes in hasChildTypeChanged for the same reason\nI\u2019ll fix this but I\u2019d appreciate more thorough manual testing next time \ud83d\ude09 .\n. Out in react-hot-loader@3.0.0-beta.0.\n. What version are you using?\n. It\u2019s hard to say what\u2019s wrong from a glance. This shouldn\u2019t depend on a route because React Hot Loader 1.x patches components right where they are defined, so route configuration should not play any role.\nIn any case 1.x has been deprecated for a while so I\u2019m unlikely to find time to look into why this happens. \ud83d\ude1e  I\u2019m closing because this is not actionable for me, sorry!\n. Ah, that\u2019s great to know, thanks for the follow up!\n. Are there any other kinds of routes in RR?\n. We should probably change the hack to activate for Router component and traverse the children and routes props, making sure that we support both APIs (and that we do this defensively so if there\u2019s an API change, we don\u2019t fail hard). https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-211504531 gives an idea of how that looks like for React element routes, but plain object routes work the same, they just use arrays and have different field names.\n@zywyz Would you be interested in looking into this? I\u2019m fine merging the current PR but a more comprehensive hack might be better.\n. \ud83d\udc4d \nI\u2019ll cut a release in a day or two.\n. I\u2019ll try to do this tomorrow, with a more comprehensive fix from #253.\n. Thanks, this looks good. I have a few more style nits but I\u2019m happy to fix those myself. I need to add a linter anyway.\nWould you be open to considering adding some tests for this? I have a basic Mocha setup for the Babel plugin, and it seems like this is another example of something we want to be tested.\n. This looks great! hackRouter sounds a little intimidating, let\u2019s rename it to addReactRouterFix() or something similar?\n. Out in 3.0.0-alpha.13, thank you!\n. Let\u2019s keep this open for now.\nIt would be helpful if you could reduce this to a simple example based on https://github.com/gaearon/react-hot-boilerplate/pull/61.\nWe can look into simplifying it then, or providing a utility for this.\n. Hi, thanks for your work! I\u2019ll take a look when I get some time but likely not earlier than next weekend.\n. Yeah, you are not using react-hot-loader anywhere so it doesn\u2019t work.\nPlease use https://github.com/gaearon/react-hot-boilerplate for the reference.\nAlso check out 3.0 branch which is the next major release: https://github.com/gaearon/react-hot-boilerplate/pull/61.\n. What is the output of npm ls react-proxy? My guess is you have an old version (less than 3.x) installed for some reason, maybe due to some of the past dependencies. You can try removing node_modules, making sure you only have react-hot-loader (and not react-transform-hmr), and run npm install again.\n. @alansouzati If you could create a sample project reproducing this (you can fork https://github.com/gaearon/react-hot-boilerplate/pull/61) and file an issue in https://github.com/gaearon/react-hot-loader repo, it would be very helpful! For now, closing it here.\n. Fixed in react-hot-loader@3.0.0-beta.0.\n. Hi! I don\u2019t see how this is related to React Hot Loader so I\u2019m closing. This is an issue tracker of React Hot Loader.\nIf you can show that it is React Hot Loader that\u2019s causing this issue, I\u2019m happy to reopen, but so far I see no sign of that.\n. Can you share the exact sequence of steps? I tried your commit, and I\u2019m able to update every component.\n. Oh, I thought you were saying that views are not updated when you edit them.\nThanks for reporting, this definitely sounds like a bug. \n. It\u2019s https://github.com/reactjs/react-redux/issues/163#issuecomment-192556637 showing its head all over again. \ud83d\ude1e \n. Okay, I\u2019ve got a solution. We need to get rid of setting _source and do a global call instead (e.g. __REACT_HOT_LOADER_MAP__.set(uniqueID, type). This would both solve this problem and (I think) the router issues.\n. We can\u2019t assume the user has Symbols. Also this fixes issues with React Router because we don\u2019t need createElement to run. I think this would be a better solution, at least until browsers provide an equivalent of _source.\n. We call .set() from module definition so I think the new type will be in the map even if the router calls createElement with previous types. The problem was that new types weren\u2019t getting createElement-ed, but with approach in #272, it doesn\u2019t matter whether you call it with previous or new version because we have entries in idsByComponent for both.\n. > Also, is it a problem for a development tool to depend on the existence of Symbol?\nNot a big problem but a good thing to avoid when easily possible. But this is not the main reason why Symbol doesn't seem like a solution to me. React Redux could copy symbol properties too, if it wanted\u2014this is still easy to break. And the bigger issue is the problems with stale types that #272 so neatly avoids. The logic in resolveType was really brittle and full of edge cases but now it\u2019s easy to grok. I think it\u2019s an important improvement. (And RR support too.)\n. Fixed in v3.0.0-beta.1.\n. Really appreciate that you reported this and provided easy instructions to reproduce!\n. Oops. Thanks\n. This looks amazing! I wish you wrote our docs \ud83d\ude04 .\nI\u2019d appreciate you updating the article when version 3 is out.\n. Thanks a lot. Let's change it to force update every time then, it's fine in development. Yeah, more tests would be welcome. While React Proxy is well tested we want at least a couple \"integration tests\" making sure we use it correctly. \n. Added you to collaborators. Please feel free to fix the bug on the next branch directly. \n. Thanks! This is indeed a known problem in 1.x but it\u2019s solved completely in the upcoming 3.x. Would you please amend the note to mention that?\n. \ud83d\udc4d \n. Wrong branch.\n. Really nice job with the tests.\n. > Should we have a different .eslintrc for the tests folder?\nYea, this is usually sensible.\n. Done in #280.\n. Can you give beta.1 a try? It uses a different approach (#272). I haven\u2019t had a chance to look at this yet but I might find some time in a week or two.\n. > I wonder if it isn't because Im using createElement which I import from react. This should be overwritten shouldn't it?\nAs long as react-hot-loader/patch runs before any other imports.\n. Might be caused by this: https://github.com/gaearon/react-hot-loader/issues/276#issuecomment-216302815.\n. Hmm. But no, you are using createElement, not a factory. I\u2019ll need to look at it later but I think that in your case react-hot-loader/patch executes later than it should.\n. Yeah, hard to guess. I\u2019ll need to look into this when I get some time.\n. If you want to keep the local state of a connect()ed component, you need to either:\n- Export the \u201cinner\u201d component so it\u2019s visible in module.exports so react-hot-loader/webpack can pick it up;\n- Or remove react-hot-loader/webpack and use react-hot-loader/babel in .babelrc instead, which can pick up any top-level variable as opposed to just the exports.\nDoes this make sense?\n\nLooking at AppContainer, I don't see where it would save local state\n\nIt patches createElement so your component is resolved to a proxy that keeps the state. But for this to work, the component must be picked up either by /webpack (only works for exports), or by /babel (works better but requires Babel).\n. Aha. It seems like the same problem as https://github.com/gaearon/react-hot-loader/issues/275#issuecomment-216266645.\nWe patch React.createElement() but React.DOM factories use ReactElement.createElement (internal React module) directly, and so bypass our patch.\nCan you try replacing\njs\nrequire('react-hot-loader/patch')\nwith\njs\nrequire('react-hot-loader/patch')\nrequire('react/lib/ReactElement').createElement = require('react').createElement\n?\n. Filed as #277, this is the most likely culprit.\n. Ugh, you\u2019re right. There\u2019s some tricky dependency stuff going on there. This is the stack:\n\nI can\u2019t say for sure, but in any case monkeypatching internal modules is a bad idea.\n\nI'd poke around some more to help with this but I don't have a whole lot of time. Any idea why it would create an infinite loop?\n\nWe need to patch createElement to always go through our version. It seems that patching React.createElement is not enough because React.createFactory and React.DOM.* reference the \u201cinner\u201d, unpatched createElement. The fix as I see it would be to also patch the exported React.createFactory and React.DOM.* factories to work through our createElement. Some more manual work but should be doable.\nIf you\u2019d like to help, feel free to copy paste this test case, call it with React.createFactory() and React.DOM.* and change it to not use JSX. This will give you a failing test case. You can then leave it for me, or implement createFactory and .DOM.* patching in patch.dev.js.\n. Got it. Let\u2019s keep it open for now until we know the root cause.\n. Haha, excellent point! I\u2019m being silly.\n. We could do this. It wouldn\u2019t work in the future though when React ships flat bundles. Also doesn\u2019t work for people who use precompiled builds of React. (Not sure we really want to support it, but right now we do.)\n. Fixed in 3.0.0-beta.2.\n. Yeah, let\u2019s do this.\n. > If you want to look at this, let me know and I'll put together a sample repo that shows the problem\nPlease do! Also make sure you\u2019re using react-hot-loader/babel rather than react-hot-loader/webpack if you want \u201cconnected\u201d classes to be found by it.\n. I wonder if a simple way to fix this would be to insert our own \u201cregistering\u201d decorator as the innermost one if we see a decorated class.\n. Looks good. I left a few comments.\nYou can try using eslint --fix . to get some of these fixed.\n. If we use ES modules everywhere, we should add the commonjs compat plugin so that react-hot-loader/webpack and  react-hot-loader/babel keep working as they are.\n. Yeah, this one: https://www.npmjs.com/package/babel-plugin-add-module-exports. Not sure if it works well though. Never tried it.\n. I\u2019m a bit confused. I meant that we can use ES modules everywhere in the code. We just need to make sure that the CommonJS compat code is generated as part of Babel compilation for entry points like /babel and /webpack. Does this make sense? Or are you saying this makes ESLint fail?\n. > what i'm saying is that it currently works great the way it's written so instead of changing everything to es6 modules just to appease eslint it's easier to selectively disable the offending rule, no?\nWorks for me \ud83d\udc4d \n. The error message needs to be fixed but the rest is up to your judgement.\n:shipit: \n. Please provide a complete example reproducing this. Since it doesn\u2019t happen in https://github.com/gaearon/react-hot-boilerplate/pull/61, it\u2019s hard to say what\u2019s going on.\n. Sorry, copy-pasting and setting up a project is really tedious to validate bug reports \ud83d\ude04 \nCan you please provide this on GitHub?\n. Thanks for the repro cases. I\u2019ll have a look in a week or two.\n. @benwiley4000 Not yet!\n. This is an issue about 1.x. Unfortunately 1.x is no longer supported so this is not actionable for us.\nPlease try 3.x beta: https://github.com/gaearon/react-hot-boilerplate/pull/61.\n. Great, thanks!\n. Thanks for a repro case. Here\u2019s another great repro case: https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-218835358.\nWe\u2019ll need to look into this before releasing 3.0. Probably something funky related to how require.ensure works with hot reloading. Also would be great to check if it\u2019s still an issue with Webpack 2 ES modules.\n. React Hot Loader 1.x is deprecated and will not be supported anymore.\nThis shouldn\u2019t be an issue with React Hot Loader 3.\nPlease track progress on it in https://github.com/gaearon/react-hot-boilerplate/pull/61.\nThanks!\n. @resistdesign Can you provide a complete project reproducing the issue?\n. Sorry to bother you but can you please file a separate issue with a link to the exact commit that breaks with v3? This is a project I do in my free time, and every extra step like \u201cThe Babel plugin just needs to be added to that loader in that file. (Using require.resolve)\u201d means I might do it wrong way and waste the little time I have to work on this. So I\u2019d really appreciate if you could file a bug report with a complete project that is ready to be tested.\n. Which version of React Hot Loader are you using?\nIn which order are you applying babel-loader and react-hot-loader?\n. Can you please provide a complete project reproducing the issue?\n. Ah, sorry, RHL 1.x won\u2019t work with Webpack 2 ES modules.\nPlease switch to RHL 3.x beta.\nhttps://github.com/gaearon/react-hot-boilerplate/pull/61\n. Can you please provide a minimal project reproducing this?\nThe smaller the better.\n. However I don\u2019t see why you think this is caused by React Hot Loader.\nCould it be that your Babel loader is only configured to run on the files inside a certain directory?\nThat would explain the issue.\n. Yep, please feel free to fix the issues there!\nI\u2019ll tag this as 3.0 for now so we don\u2019t forget to revisit in case nobody fixes them.\n. Yes, thank you very much! It will release automatically in a few minutes.\n. No, transpiling node_modules is definitely not the way this should be solved (if it is solvable at all).. > Oh! I'm using webpack-dev-middleware and webpack-hot-middleware and the RHB example is using webpack-dev-server. That's about the only difference I can still see.\nThis should be irrelevant, RHL doesn\u2019t care about the transport.\n. I'll be taking a look next week. \n. I don't know why it happens but we don't support 1.x anymore. You can try using 3.x alpha instead and it won't have this problem. https://github.com/gaearon/react-hot-boilerplate/pull/61\n. Wow! Thanks for working on this.\nI\u2019ll definitely check it out soon.\n. I know this is not helpful, but this doesn\u2019t look like an error related to this project.\n. Yeah, we couldn\u2019t possibly be responsible for this.\nSomething\u2019s likely messed up with your npm setup.\n. I don\u2019t understand what you mean.\nHow is react-hot-loader related to history?\nThese are completely different projects, and neither is each other\u2019s dependency.\n. Yea, AFAIK it\u2019s not really possible to push a module with something in node_modules.\n. This is an npm bug: https://github.com/npm/npm/issues/11582.\nCan you try with npm 3.8.7?\n. Please see https://github.com/facebook/react/issues/7985#issuecomment-253979300.\n. This should be fixed with redbox-react@1.3.2. You will need to delete node_modules/redbox-react/node_modules/react-dom if it's there after updating.\n. React Hot Loader 1.x has been unsupported for over a year.\nPlease switch to 3.x!\n. 3.x is technically more stable than 1.x IMO.\n@calesce What's blocking 3.x release?\n. It doesn't seem very wise to me to roll back a version of a project that is actively being developed (React) in order to keep compatibility with a tool version that was abandoned a long time ago (RHL 1.x).\n. If the current approach taken in 3.x doesn't work for you I could see a way to make it work more like 1.x did. But it needs someone to actually work on it. I've been working on hot reloading for a long time and I'd appreciate somebody else taking initiative this time. \n. You can fork and change react/lib/ReactMount to react-dom/lib/ReactMount if you're stuck. But this will too break someday. \n. Appears related: https://github.com/facebook/react/issues/8379.\nCan you share a reproducing example?. As for IE11 problem, also see this: https://github.com/facebook/react/issues/8379#issuecomment-264858787.. @montogeek I added you to GH and npm collaborators so you should be able to get it merged and released!. Seems like CI is failing?. Yes, these internals don't exist anymore. 1.x will not work with React 16.\nPlease try to see if 3.x works for you. If it doesn't file issues.\nNow that we have a new core I think we can take another look at what needs to be exposed for hot reloading.. The \"beta\" label there just means that nobody found time to do the job of updating docs etc. 3.x is much more stable than 1.x ever was. . Hey, there's no need to be aggressive. I'm sorry you're frustrated but I've been busy with React 16 itself and I think it's obvious this was a higher priority.\nUnlike many others who only complain, @neoziro volunteered to help maintain the project. If you\u2019re not happy with how he\u2019s doing it, there are polite ways to raise an issue and let me know. I will take a look at this after the weekend but I encourage you to be more friendly and assume everything is being done in good faith in the future.\nGetting emotionally charged hyperbolic reports like this on weekends is why people quit open source. Even if you\u2019re technically right please reconsider your attitude. Thanks. . Also, calling people names will get you banned from this project, regardless of how technically right you are. Please edit your post. Thanks. . Can you point out specific examples where he is calling you names or is being hostile? Technical disagreement or misunderstanding doesn't count.\nAlso, I'm pretty sure you called me a jerk too. Can you clarify how I deserved this from you? Have we even interacted before?. I\u2019ll look at the technical side of this on Monday. Let\u2019s just be clear misunderstandings happen on every project.\nI understand you were frustrated but there are always ways to express it in a way that isn\u2019t a personal insult. For example your issue could just be a collection of facts: you could state you don\u2019t understand the logic behind these decisions, but not jump to calling us names or declaring a project \u201cdead\u201d. This could be your mistake, @neoziro\u2019s mistake, or a combination of factors. Maintainers are just people, they make mistakes. Nobody hurt you or insulted you. \nIf you assume everyone operates in good faith and isn\u2019t intentionally trying to be a jerk to you, it is much easier for everyone to come to a mutual understanding. Getting your PR closed can be frustrating but if you take this personally, you are putting unreasonable pressure on maintainers. If we\u2019re not allowed to close PRs or make mistakes without getting emotional abuse in return we might not find it sensible to continue investing our effort in these projects. \n. I won\u2019t even read these comments because they\u2019re so emotionally charged. Please stop.\nI\u2019m sorry you\u2019re experiencing issues contributing on Windows. It hasn\u2019t been our priority to fix them, but we\u2019re happy to take fixes that don\u2019t rename files. Changing public API to fix the build doesn\u2019t make sense to me.\nBut again, I don\u2019t feel like diving in to read about your issues because of the tone of your posts. Please stop attacking @neoziro and file a clear issue describing what exactly is broken, not what you think about us.. Is it certainly using the very latest version of react-deep-force-update?. Please avoid relying on React internal APIs if you can. We don't want to introduce more dependencies than already exist in deep-force-update.\nI intend to work on officially supporting hot reloading in React in the beginning of next year. So it's best to coordinate our efforts. . If it uses the same exact internals it\u2019s okay. . I want to note that I still don't really understand what this is doing, so I'd appreciate a more in-depth explanation of why this works, why it is better than the existing approach, and what are the potential downsides and things that could break.\nThat said I don't want to block you on my understanding :-) If you're sure this is solid and give it a lot of testing in large codebases (I'm sure plenty of people would be happy to volunteer trying an alpha) then let's roll with it.. My two cents: I'm not actively involved with the project anymore but I think we might need to fundamentally rethink how it works with the assumption that we can change something in React if necessary. Both the way we proxy classes and the way we traverse the rendered tree seem potentially flaky to me. I'm sorry I can't spend more time on diving into details but I would love to see a proposal in React RFCs that suggests hooks necessary on React side to remove all the hacky code from RHL and make it work 100% consistently.. Does the project currently add any custom hooks to components beyond the React API? I noticed something called componentDidRender and wasn't sure what that is.. I don't understand what this means:\n\nrely on subrender, ie async updates. \n. What are you using componentWillReceiveProps for today?. Got it. componentWillReceiveProps is a bad place to call forceUpdate so that sounds good.. Can you be more specific? Maybe a small code example?. Isn't that what react-force-deep-update already doing? Do you need something else?. React maintains a tree of nodes per root. Each node in a tree has an \"expiration time\" which can either be some time in the future, a marker that says \"nothing to do here\" or a marker that says \"flush it synchronously\".\n\nWhen we forceUpdate or setState, what really happens is:\n\nWe also push its new state value into node's \"update queue\" (or set a flag for forced update)\nWe mark the related node as having \"expiration time\" of \"synchronous\" (unless in async mode)\nWe mark all its parent nodes up to the root the same way\nWe schedule React to \"work\" on this root\n\nReact loops over all scheduled roots. That list contains this root (because we just \"scheduled\" it). React then looks at all its child nodes that have expiration time that is not \"nothing to do here\", depth first.\nThat's why it goes over each ancestor. It \"skips over\" the deep parents (before setState / forceUpdate) because they don't have anything new in the update queue and therefore they're safe to not re-render. But it still looks at their children because it knows something inside called setState / forceUpdate and needs to re-render. Potentially more than one thing.\nEventually it gets to the child that actually has something new in the update queue (our node) and that's when it starts re-rendering.\nI hope this gives some insight into how it works internally. We could expose some of this, or we could keep using hacky internal APIs, or a mix of both. The question is what would be valuable to expose. I don't remember enough about how RHL works to say what would be, but maybe you could tell me?\nDoes this help at all?. @mvestergaard If you create a small reproducing example I can look.. I think the issue is that React uses a flag on the method to determine whether it's coming from react-lifecycles-compat polyfill (in which case the method shouldn't lead to a warning). But proxying doesn't preserve the flag.\nIf I change this method to include\njs\n    Object.assign(wrappedMethod, realMethod);\nbefore returning wrappedMethod then the issue goes away.. Arity shouldn\u2019t matter although preserving it is always nice if it\u2019s not too difficult. . Can you provide a repro case?. We have some ideas but it\u2019s too early to share yet. I think there\u2019ll be a way forward within a year.. By \u201cI think\u201d in this case I mean \u201cI\u2019m pretty sure\u201d. I\u2019m optimistic about this for the first time in a few years :-) . Yep, all of this sounds correct . There are two separate parts to this problem:\n\nWrapping things that appear to be React component\nExtracting behavior from the fresh version into the wrapper and transplanting it\n\nThe first one isn\u2019t really a problem. It may seem like one, but it\u2019s really the second problem that\u2019s making the first one difficult.\nThe solution I\u2019m thinking about solves the second problem, leaving RHL to only worry about the first one, and drastically limiting its complexity. \n. Yeah, the solution I'm thinking about will eventually solve those things.. Nit: extra newline\n. I think it would be nicer to put try/catch around  something like var maybeReactClass = freshExports[key] to make it clear where we might expect the error.\n. Lol. It has been that way forever and I never noticed it..\n. This one changed to reactjs/redux, mind updating? Thanks.\n. Let\u2019s return React.Children.only(this.props.children) instead?\nThis way we enforce that there\u2019s a single child.\nReact.cloneElement() isn\u2019t necessary here.\n. I think we want to compare props.children.type and force-update if it changed. Otherwise, if the user re-renders from the top for other reasons than a hot reload, we are wasting force updates. Sure, the user probably wouldn\u2019t do that, but it\u2019s better to double check.\n. Should also compare type here.\n. Expected a single React element with your app\u2019s root component, e.g. <App />.\n. I\u2019d usage the same message here.\n. Error message needs to be updated here too. It\u2019s fine if it\u2019s exactly the same one.\n. Let\u2019s move this initial loop into forceUpdateRouteAndChildRouteComponents as well.\n. Let\u2019s just use for (var i = 0; i < childRoutes.length; i++)?\n. Still using _key here\n. Minor nit: let\u2019s use const where possible, let otherwise.\n. Object.values may not work in older browsers, we shoot for wide compatibility.\n. Nit: space after for.\n. Maybe we\u2019d just use Object.keys(obj).map(key => obj[key])?\n. for of requires Symbols, let\u2019s use components.forEach\n. Let\u2019s rename to extractComponents. We\u2019re not exactly force updating them anyway.\n. We need backward compat here too. \n. Let's move else to the previous line. \n. Let's extract this to hasChildTypeChanged and use it everywhere we compare children. It would include backward compat logic which we would later remove. \n. If it works correctly, sure. \n. The reason stale types were used is because Router cached old types and called createElement with them. Now the only \u201centry point\u201d to updating a proxy is an explicit __REACT_HOT_LOADER__ call. So router can\u2019t revive old types.\n. I\u2019m fine with using double quotes everywhere. (for JSX)\n. We might also want to disable it completely for Babel test fixtures.\n. It\u2019s weird but apparently it\u2019s what everyone else is doing these days \ud83d\ude04 \n. Ah, missed that one.\n. There\u2019s a missing space after the period in the error message. The sentences will collide.\nAlso a style nit: let\u2019s put a newline right after the opening paren.\n. Lol this rule is so nitpicky. But I can live with it \ud83d\ude04 \n. Kinda silly to leak these into the generated code. Can we add some na\u00efve code to cut comments in the Webpack loader?\n. This will not be true for the Babel plugin itself.\n. Similarly, module.hot will not be true inside Webpack loader itself, only in app's code.\n. Let\u2019s leave both checks here. if (module.hot) && process.env.NODE_ENV === 'production'\n. Same here: let\u2019s check both.\n. I think we need use strict here. If ESLint says we don't, it's wrong.. Same. It's not an ES6 module. It needs use strict.. Please let's keep semis \ud83d\ude1b . If you really insist we can remove. You're the maintainer now \ud83d\ude04 . It's the fate of all my projects now. I pass them on and people remove the semicolons.... Oh okay.. Yea I know. Just funny.. ",
    "johanneslumpe": ":)\n. ",
    "IAkumaI": "Same bug was found. Look at this code:\n```\ncomponentDidMount() {\n        this.interval = setInterval(this.updateAll, this.props.updateInterval);\n        this.updateAll();\n    }\ncomponentWillUnmount() {\n    !!this.interval && clearInterval(this.interval);\n}\n\nupdateAll() {\n    Qajax('/api/somemethod')\n        .then(Qajax.filterSuccess)\n        .then(Qajax.toJSON)\n        .then((response) => {\n            this.setState({....}); // Will not work after hot-reload if babel use es2015 preset\n        });\n}\n\n```\nDo you know why? Because this will transpile to local _this (or the same) because of () => {} function. Function must save context, babel transpile it to do this in old browsers....well, I think you understand (my english is bad, i dont know how to white it better).\nAnd, very bad side of this bug: No errors on page, no errors in console, no error anywhere. About 30 mins I tried to understand why code \"just not work\" :)\nMaybe it can be fixed too? ))\n. ",
    "luigy": "I ran into this earlier today, but then the final of the world cup started :joy: \n\nthe bug is still there with master\n. Yes, that was with the old version, but same steps also reproduce this in master\nhttps://i.cloudup.com/0OYErnjZHN.mp4\n. what a heisenbug :ghost: ... after a fresh clone + npm i I reproduced it again, but I can't anymore.  Not even in my older clone \n. ",
    "petehunt": "https://github.com/petehunt/jsx-loader/pull/16\n. ",
    "KyleAMathews": "Anything I can do to help sourcemaps happen?\n. Ooops, false alarm :)\nTwo bad assumptions. I thought coffee-react-transform spit out js when it doesn't and loaders apparently execute back to front.\nEverything seems to be working with this config.\njavascript\nmodule.exports = {\n    entry: ['webpack/hot/dev-server', './client'],\n    output: {\n        path: path.join(__dirname, 'output'),\n        filename: 'bundle.js'\n    },\n    resolveLoader: {\n        modulesDirectories: ['..', 'node_modules']\n    },\n    resolve: {\n        extensions: ['', '.js', '.cjsx', '.coffee']\n    },\n    module: {\n        loaders: [\n            { test: /\\.cjsx$/, loaders: ['react-hot', 'coffee-loader', 'cjsx-loader']},\n            { test: /\\.coffee$/, loader: 'coffee-loader' }\n        ]\n    }\n};\n. @ConradIrwin haha thanks! You might want to check out as well my more up-to-date webpack config at https://github.com/KyleAMathews/coffee-react-quickstart\n. Got hot reloading working! https://github.com/KyleAMathews/coffee-react-quickstart/commit/29f759b965ff130460f150d85101fce4e8d195ab\nPretty awesome.\nOne small remaining problem that's probably more of a webpack issue. I can't get webpack-dev-server to use my public directory as the base directory for loading files. It'll only look at __dirname. You know what magic config to use to get around that? contentPath doesn't seem to have any effect.\n. Thanks! Hot loading has been as magical as I hoped. Quite a bit faster and less disruptive than full page reloads.\n. Figured out the base directory for serving static files issue. Typo on the config item :\\ should be contentBase not contentPath https://github.com/KyleAMathews/coffee-react-quickstart/commit/fb32116a6c09869269006b8c33f6858eb7a21d13\n. So what... catch all errors and rewrite the stack trace?\n. I just refresh. I find that rhl gets the code into a weird state sooner or later so have to refresh anyways after enough code edits.\n. alpha-2 has been working perfectly so far this morning! No noticeable speed difference.\n. Who's gonna write the Babel plugin which auto adds this if it detects a hook import? \ud83d\ude18. ",
    "SanderSpies": "jsx-loader supports sourcemaps now - so we only need to get react-hot-loader to play nicely with it.\n. Great :+1: \n. ",
    "chrisdwheatley": "Yeah if it's a locally installed dependency you'd need to reference it in the node_modules folder. You could wrap that in an npm run command, something like:\npackage.json\njavascript\n\"scripts\": {\n    \"serve\": \"cd example && ../node_modules/webpack-dev-server/bin/webpack-dev-server.js --hot\"\n}\n'Running Example' would then be:\nnpm install\nnpm run serve\nopen http://localhost:8080/webpack-dev-server/bundle\nNot the most elegant solution and not the biggest problem in the world no biggie whatever you decide.\n. Sure, do you think it'd be best as a dev dependency or not? I guess it's perhaps not a huge issue consider the project is, as you've put it, 'a highly experimental proof of concept'.\n. Thanks! Really excited about the project, I'll be keeping a close eye on it and hoping to contribute further where I can.\n. Dan, when accessing over https (https://github.com/gaearon/react-hot-loader) the page is failing to load in the css files in Chrome due to https -> http blocking.\nConsole error:\n[blocked] The page at 'https://gaearon.github.io/react-hot-loader/' was loaded over HTTPS, but ran insecure content from 'http://gaearon.github.io/react-hot-loader/public/css/poole.css': this content should also be loaded over HTTPS.\nI tried debugging on my fork but couldn't quite get things replicated correctly so perhaps best for you to look at? I think it's related to baseurl in the _config.yml file, perhaps needs to be relative rather than absolute as per https://github.com/poole/hyde/blob/master/_config.yml but I may be wrong.\n. Awesome, thanks. Just realised I put the wrong link in that reply sorry! Will commence spreading the word =)\n. Somewhat unrelated (sorry!) but I think a good addition to the landing page would be the first paragraph from the getting started page:\n'React Hot Loader is a plugin for Webpack that allows instantaneous live refresh without losing state while editing React components.'\nI think that's a concise opening statement for those who may be unsure of what exactly they're looking at, which seemed to be a point which came up in the HN thread.\nPersonally I'd place that under the navigation items above a demo & video.\n. ",
    "ConradIrwin": "Thanks @KyleAMathews, you just saved me a bucket-load of time :).\n. ",
    "cchanningallen": "@KyleAMathews me too! Thanks :)\n. ",
    "agilgur5": "@KyleAMathews been trying to find a solution for hours, didn't know about the back to front parsing! This explains why your cjsx-loader didn't check for literate flags. Thanks a ton!\n. ",
    "bravo-kernel": "Simply love it :+1: \n. ",
    "briandipalma": "Awesome, thanks for both points. This had me stumped.\n. ",
    "rocketraman": "Can Webpack expose-loader be used? https://github.com/webpack/expose-loader. I tried a naive usage without success, but this is all pretty new to me.\n. > Note that with React 0.12 it doesn't seem necessary anyway because they changed how devtools talk to React.\nJust tried it with React 0.12 and you're right -- it works without expose. I did have one strange issue which was that I had to click on the \"Elements\" tab before the \"React\" tab would show up (which means it's possible expose-loader with 0.11.x might have worked too).\n. ",
    "syranide": "Aaaah, that solved it, works perfectly now, many thanks!\nFYI, I noticed that if I render a ChildComponent from a ParentComponent, when I modify ParentComponent the ChildComponent is re-rendered twice.\n. PS. Btw, a stop-gap fix for react-hot-loader if others get caught by the same issue, could be to only enable \"hot loading\" when the JSX docblock comment is present.\nPS2. I ended up doing just /\\/myapp\\/src\\/.*\\.js$/ for the test, works just as well for my purposes so far.\nPS3. This is seriously cool! I can only imagine if we could one day run dev \"unbundled\" and avoid the delay to make it almost instant...\n. @gaearon Ah (I realize what I wrote made no sense). Perhaps I'm wrong in this, but it seems to me that the biggest delay between updates comes from rebundling all the files and resolving requires. If dev files could be served \"unbundled/individually\" and hot replaced individually, it could probably make it instant. But there are probably tons of non-obvious issues with this, and probably concerns webpack more than react-hot-loader. (Just dreaming :))\n. @gaearon @sokra I did a little research (as I should have) and the issue is with source maps as you point out. As awesome as sokra/webpack is he had already fixed it, devtool: 'eval-source-map', voila, now it's almost instant (and just splitting up the bundle is another option when the output becomes too big).\n. Oh, that's awesome :+1: (updated, works great).\n. Oh, had missed that :+1: \nPersonally I'm not really interested in desktop notifications (I keep the console open all the time) and wouldn't mind notify=console, not that I really care (just click \"deny\"). The biggest reason I can see for it are other users viewing the dev site, they aren't really interested in desktop notifications for errors.\nPS. Feel free to close this.\n. Using notify= on browsers without the notification API causes tons of 'Notification' is undefined error spam.\n. I could look into it if you want.\n. Any time! This is awesome (I'll try to spread the word on IRC whenever I can :)).\n. I usually find it easiest to just \"go back out and in again\" to accomplish that. An interesting possibility would be to remount components if the keys returned from a call to getInitialState differs from the initial mount (but then you'd have to track that).\n. npm install react@0.13 gives you react@0.13.0-beta.2 which is what I'm using.\n. PR merged, this is fixed in next release.\n. Are you sure options.dev is set to true?\n. {test: /\\.jsx$/, loaders: options.dev ? ['react-hot', 'jsx?harmony'] : [\"jsx?harmony\"]},\n. Reimplementing the features provided by WebpackDevServer is probably a waste of time, personally I just proxy the WebpackDevServer into a path on my regular web server (in my case nginx). I get all the benefits of WebpackDevServer without having to use it to serve other content.\n. Isn't this a bad idea?\nEach react-hot-loader is not compatible with every react version and peerDependency makes it easy to install/update without having to manually track version numbers. If you're testing beta versions and all packages are not yet updated for the beta you can --force install them at your own risk instead.\n. Intuitively this seems separate from react-hot-loader, I could imagine wanting just this. Or a special version of this in prod where the errors are also submitted elsewhere. EDIT: But obviously there is a benefit if react-hot-loader ships with one to avoid breaking React everytime you make a mistake, but I'd prefer it if it wasn't opinionated (perhaps it could just return the last render result?)... I prefer my errors in the console, in full.\n. @gaearon All it really boils down to is just overloading the render-function right? So decorators should work just fine. It seems beneficial to be able to piggyback on react-hot-loader with a global option for all renders to be wrapped with try/catch and an fallback render-callback (which gets the exception as an argument) for when that happens.\nThat's the extent to which I see react-hot-loader involved in this as I could imagine wanting to have the same feature on a per-component basis applied by a decorator. Being able to reuse the same \"fallback render-callback\" for all components when using react-hot-loader but just a few special components in non-hot or production.\ntl;dr I see this more as react-hot-loader providing easy access for decorating all components, not the error-box as a feature of react-hot-loader. Which means this could even boil down to react-hot-loader just accepting a bunch of decorators that should be applied to all components, nothing more.\n. @davidpfahler :+1:\nBut I'm not sure what prevents react-hot-loader from using a list of decorators right now, react-hot-loader doesn't need to use decorators itself, it just needs to apply them to the classes it processes.\nAnyway, I don't necessarily mind the reporter-feature either, it may be more accessible and could make sense in that it could have additional behaviors that makes sense only for react-hot-loader... say try/catch all life-cycle methods too, and in-case of error it will cleanly remount the component on next update or w/e.\n. renderSth = () => { binds the method to each instance (at least when transpiled I would assume), so when the class is patched each bound method still refers to the initial method.\n. Working great so far :+1: \n. ",
    "jRiest": "No problem. If this.souceMap === false source maps will no longer be emitted.\n. ",
    "eldh": "This would be awesome. \n. ",
    "natew": ":+1:\nAny way we could do your monkeypatching scheme now? I'd like to help on this if possible.\nEdit: I am just directly passing displayName, like so:\nfunction(stuff) { return React.createClass(displayName: stuff.name, ...) }\n. It works! Initial testing is looking awesome.\n. So I split up an old project into some smaller pieces, and with the app I've been running I started getting this error that I was having trouble debugging. Lo and behold disabling hot components fixes it, so I'm guessing it has something to do with react-hot-loader. Unfortunately it probably won't be open sourced for another month or so.\nBut, I can upload info on the error and setup. I actually had it fixed at one point because I was loading multiple versions of React, but I've triple checked that now and it seems my bundle is clean.\nThis is with react 0.12.1, hot-loader alpha.3.\nError comes on whenever I first require('react'):\nUncaught TypeError: undefined is not a function\nReactEmptyComponent.js:25\nThat line is this:\njs\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function(emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\nReactElement is an empty object for some reason, even though when looking through the requires, it seems it's loading the file that sets up all those functions like createFactory.\nAnyway, if I disable it seems to work. I'll try rolling back maybe and seeing if it's the latest version that causes this.\n. Would love to do a screen share because I'd bet you have some good insight into how I'm structuring things as well. I'll add you on Skype. \n. :+1: updated in reapp\n. I\u2019m just seeing that if I add my own it prevents react hot loader from\nbeing called. So just asking for a callback function to hook into the\ninternal one in rhl.\nWould let me patch in store state preservation logic on hmr.\n. Don't need before and after, to be honest didn't look at what it even does in that function so just did the safe thing and added hooks for both. Your point on adding something above is good though, trying that now.. Adding an extra file above worked for me, thank you!\n. I suddenly started getting this error, though I'm having trouble isolating why after resetting a few things:\n```\nERROR in ./src/main.ts\nModule build failed (from /Users/nw/projects/motion/orbit/packages/build/node_modules/thread-loader/dist/cjs.js):\nThread Loader (Worker 0)\naSourceMapConsumer.eachMapping is not a function\nat Function.fromStringWithSourceMap (/Users/nw/projects/motion/orbit/packages/build/node_modules/source-map/lib/source-node.js:87:24)\nat Object.transform$1 (/Users/nw/projects/motion/orbit/packages/build/node_modules/react-hot-loader/dist/webpack.development.js:132:59)\n\n@ multi (webpack)-dev-server/client?http://localhost:3999 (webpack)/hot/dev-server.js ./src/main null[2]\n```\nIf I remove the react-hot-loader/webpack loader it runs just fine. I tried forcing source-map to 0.7.x.\nEDIT: I see this referenced by @strobox. I'm getting the sourcemap errors again with 4.5.3 (wasn't seeing them with 4.5.2):\n```\nERROR in ./src/main.ts\nModule build failed (from /Users/nw/projects/motion/orbit/packages/build/node_modules/thread-loader/dist/cjs.js):\nThread Loader (Worker 0)\n.inputSourceMap must be a boolean, object, or undefined\nat assertInputSourceMap (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/validation/option-assertions.js:110:11)\nat Object.keys.forEach.key (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/validation/options.js:107:5)\nat Array.forEach (<anonymous>)\nat validateNested (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/validation/options.js:83:21)\nat validate (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/validation/options.js:74:10)\nat loadPrivatePartialConfig (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/partial.js:66:50)\nat Object.loadPartialConfig (/Users/nw/projects/motion/orbit/packages/build/node_modules/@babel/core/lib/config/partial.js:110:18)\nat Object.<anonymous> (/Users/nw/projects/motion/orbit/packages/build/node_modules/babel-loader/lib/index.js:140:26)\nat Generator.next (<anonymous>)\nat asyncGeneratorStep (/Users/nw/projects/motion/orbit/packages/build/node_modules/babel-loader/lib/index.js:3:103)\n\n@ multi (webpack)-dev-server/client?http://localhost:3999 (webpack)/hot/dev-server.js ./src/main null[2]\n```\nEdit: What in the world.... I now downgraded to 4.5.2 and still get this error but was just fine until I upgraded to 4.5.3 this morning.... checking caches. Managed to guess  a patch that seems to work for me with https://github.com/gaearon/react-hot-loader/pull/1117. Does the patch I sent work for you? It fixed it for me.\n. @theKashey the docs for hooks in the readme still seem old?. Didn't see this anywhere in the comments here or other issues. I'm getting this when I change hooks in a component:\nError: Rendered fewer hooks than expected. This may be caused by an accidental early return statement\nIs this a current known issue or limitation or due to an improper config?. Could you not do a source comparison and if it differs reset the state? I did this in a hot loading setup previously and I liked it more than attempting to preserve state changes when source changed.\nUsually was just upcomingComponent.constructor.toString() !== previousSource or similar.. In this case I\u2019m not changing anything like memo to sfc just editing the\nthing directly. Is it potentially a bug then?\n. Ok, I'm able to get it working now. Not sure what changed as I redid a few things in the process, but if anyone sees this ticket I can post my new config if need be.. ",
    "zachasme": "I tried reproducing the problem in #17 by running the hot loader on both js and jsx files.\nThis did indeed choke on the React.createClass call in makeComponentUpdater.js (though throwing a different runtime error).\nI'm going to wrap the call in parentheses in my fork (3c236aaecaf5a09552d60adfd86596b0e4823aac) though there is probably a more elegant solution.\nIncredible loader by the way!\n. ",
    "Chrazy": "I'll investigate more and get back to you, closing this for now because the issue could be with us using a super set of the base createClass to add mixins and stuff.\n. ",
    "ronag": "From what I've been able to figure out. Given the following code from index.js.\njavascript\n    'if (module.hot) {',\n    '  module.hot.accept(function (err) {',\n    '    if (err) {',\n    '      console.error(\"Cannot not apply hot update to \" + ' + JSON.stringify(filename) + ' + \": \" + err.message);',\n    '    }',\n    '  });',\n    '  module.hot.dispose(function () {',\n    '    var nextTick = require(' + JSON.stringify(require.resolve('next-tick')) + ');',\n    '    nextTick(__hotUpdateAPI.updateMountedInstances);',\n    '  });',\n    '}'\n__hotUpdateAPI.updateMountedInstances is never called after an \"Cannot not apply hot update to...\".\n. This problem only occurs when I get the \"Cannot not apply hot update...\" error, e.g. Cannot not apply hot update to App.js: kjdfngdskfgjn is not defined. Where kjdfngdskfgjn is just something added to cause an error.\n``` javascript\n/* @jsx React.DOM /\n'use strict';\nvar React = require('react');\nkjdfngdskfgjn / asd\nvar App = React.createClass({\n  render() {\n    return (\n      Hello, world!\n    );\n  }\n});\nmodule.exports = App;\n```\nWhich only seems to occur for certain types of code errors (e.g. https://github.com/js-next/react-style/issues/51). In other cases errors are simply ignored and the above message is never displayed, e.g. if I remove the </h1> closing tag no error is displayed in the browser window and the problem does not occur.\n. I've tried this with\njson\n    \"webpack\": \"1.4.1-beta1\"\n    \"webpack-dev-server\": \"1.6.4\"\n. Have you managed to reproduce the issue with the sample?\n. It doesn't really have to render anything meaningful (such as the previous version) on an error the important part is that you can fix it and continue working without having to reload.\n. That seems to have solved it. Good work!\n. Did a small proof of concept:\nhttps://github.com/ronag/fluxit\n``` javascript\n'use strict';\nvar fluxit = require('fluxit');\nclass TimelineStore extends fluxit.Store {\nconstructor(prevState) {\n    super(prevState);\n  }\nhandlePayload(payload) {\n}\n}\nvar stores = window.Fluxit_Stores || (window.Fluxit_Stores = {});\nmodule.exports = stores['TimelineStore'] = new TimelineStore(stores['TimelineStore']);\n```\nAny ideas as to how make this better? The __Fluxit_Stores__ stuff would be added by a loader.\n. @gaearon: No, there is no reason other than I'm just trying things out and it's quicker this way. Once it works it would be refactored out in a loader + HMR API.\n. I'm probably I bit in over my head here since I don't fully understand how modules are loaded and updated.\n. exclude helped.\n. Correct.\n. Hm, the issue went away by itself after a reload.\n. ",
    "nivoc": "Any update since then? My store/s get hot-reloaded but the Problem is that the old store is still there and still registered to the dispatcher callbacks... so after a hot-reload both stores (new and old version) react on the actions. I have some hacky ways in mind to solve it - but :-)\nIs there any non-hacky way already?\n. ",
    "valscion": "Looks promising! I doubt that it will work with ES6 modules, though \u2014 the 6to5 loader we're using happens to export definitions such as export default MyDispatcher; to module.exports.default and the stores which are exported in our app use the same export default MyStore; syntax.\nI'm not fully aware how other ES6 transpilers/loaders/what have you set variables to CommonJS module.exports, but I'd suppose it won't be such a big leap to support finding exports from module.exports and module.exports.default should it be available.\nIf I export ES6 6to5 modules via export var MyVariable or something else besides the export default Foo, they will get properly assigned to module.exports.MyVariable, but I would not want to change our code base to use that syntax, as importing defaults are far superior to importing with a named object.\nI could give it a try with our setup if it would support these things.\n. Well, that could be a solution indeed :smile: I'll go ahead and try something like that. I'm just worried it might make my build times even larger than what they currently are..\nMy setup is currently running a Ruby on Rails server, which serves some RoR-specific JS files and then my bundled entry points (there are more than one) with webpack-dev-server in development machines to speed up loading. In CI I prebundle all the JS files and thus I have no issues with hot loading.\nI was hoping that I could do with just one configuration where it also outputs the test bundle, and then run my special testing page even on development to see my tests pass. And it works, but only doesn't refresh when I want it to.\nAh well. Maybe I'm solving this in a waaay too complex way. Thanks for the response!\n. I'm only running one instance of webpack-dev-server, as the startup time is more than 30 seconds and it's enough to keep one instance running. Plus I'm currently hard-coding some URLs for webpack-dev-server generated bundles, it'd be weird to have different ports in tests as to what I have elsewhere. But still, that might be the easiest approach... I'm just experimenting with different options here.\nWhat I'd really want would be to get hot live reloading of my tests when any dependencies change but I don't think this is possible with my current setup. And if I'd happen to actually go forwards with something like that, I suppose the (insert-hot-reloading-test-system here) wouldn't reload when components change as the change won't be propagated to the parent file?\n. Maybe what I needed was for webpack itself to always listen to module.hot.decline() before any module.hot.accept() calls.\nI'm not so sure I'll put too much time to this seemingly small issue as I presume we'll nevertheless move away from our (kind of) weird RoR test page at some point and go using plain mocha. I believe it wouldn't be worth the time.\nAnd as for the compile times, I already am using devtool: 'eval'. I just have another endpoint for vendor files (generated using CommonsChunkPlugin) and they are quite large and need a looot of processing power. I am also using es6 transpiling. There might be ways to optimize this, but as webpack-dev-server handles updates in some hundreds of milliseconds, I don't see the need for it.\n. The other thing that bothered me was integration with Flux stores (as written in #30) and the inability to get HMR to work with it, even manually through some callbacks (like what @sokra proposed in https://github.com/webpack/webpack/issues/341#issuecomment-50110132). But that's a whole another issue and not related to this one, which should probably be closed as it doesn't seem like a proper issue in itself.\nThanks for your responses anyway :)\n. Ah, I'm just confused of how to dispose the old, obsolete store and add change listeners to the new one. As to where I should put my if (module.hot) { ... logic when using this react-hot-loader.\nMore specifically, how could I be able to run MessageStore.addChangeListener(this._onChange); code on the new instance of MessageStore which was just hot reloaded?\n. I actually tried that solution and it never hooked to the correct instances of the new React components.\n. Oh wait, you mean that the way react-hot-loader works is that it just proxies the method calls to the correct instances? So that it shouldn't matter which function references I get, as long as they're stored properly, as they're always proxied to the latest instances?\nI now feel like I tried it, but maybe I should re-try it. I'll create a simple test case to test this behaviour.\n. Oh yeah, it actually worked. I wonder how I implemented it before... this is how my Store looks like now:\n``` js\n// Hot Module Replacement magic dance\nif (module.hot) {\n  // Also accepts changes to search constants\n  module.hot.accept(require.resolve('constants/search_constants'), () => {\n    ActionTypes = require('constants/search_constants').ActionTypes;\n    console.log(\"New ActionTypes\", ActionTypes);\n  });\n// Dispose handler, unhooks all state created by this module\n  module.hot.dispose((data) => {\n    // Remove the old dispatcher callback, as new one will be loaded when this\n    // module is reloaded\n    SearchDispatcher.unregister(SearchParamsStore.dispatchToken);\n    SearchParamsStore.dispatchToken = null;\n// Store old listeners to allow reinstantiating them later on.\n// react-hot-loader proxies function calls always to the latest instance so\n// we don't need to care about which module the function came from.\ndata.oldListeners = SearchParamsStore.listeners(CHANGE_EVENT);\nSearchParamsStore.removeAllListeners(CHANGE_EVENT);\n\n});\n// Reinstantiate listeners, if they were stored during disposal\n  if (module.hot.data) {\n    module.hot.data.oldListeners.forEach((listener) => {\n      SearchParamsStore.addChangeListener(listener);\n    });\n  }\n}\n```\nMy store itself merges the prototype of Node.js' EventEmitter and implements the addChangeListener in a similar way as in flux' example.\nThanks for the help! It's sometimes quite tricky to get ones head around Hot Module Replacement as it is such a new idea.\nEDIT: Ah, of course, the part where I got confused was exactly this:\n\nNote that you don't accept yourself from the store, the HMR update will still bubble up, and React components will accept the new Store.\n\nI did in fact accept the store in itself, which was not good. Thanks for showing the way to do it!\n. ",
    "bebraw": "FYI, it's out now apparently. http://facebook.github.io/react/blog/2014/10/28/react-v0.12.html\nIn other news I stripped out the example out of your repo and turned it into a little starting point for demos, https://github.com/bebraw/react-hot-starter .\n. > @bebraw Looks a lot like react-hot-boilerplate :-)\nfacepalm Somehow missed that... Oh, well.\n\nDoes the loader work with 0.12? I haven't tried yet..\n\nNot sure. Gotta give it a go at some point.\n. @gaearon Good news. Looks like the loader was updated to support 0.12. I updated the deps of my starter and ran it. It seemed to work just fine. Now just hoping it won't crash during demo. ;)\n. Cool. \ud83d\udc4d \nAny ETA on a new beta?. Hi,\nMy understanding is that they'll fix it in the next beta. Currently react-hot-loader has been packaged in a such way that it's not possible to process through webpack to inject the right code paths depending on the environment. Once they alter the way react-hot-loader is built, this will be fixed.\nYou have to solve this on the user space for now. I've documented what to change and how. Ideally user space hacks wouldn't be needed. \ud83d\ude04 . ",
    "mbektimirov": "I didn't read through all code yet, is it possible to simply check for an id property and create it if necessary?\n. That's right, this problem is actual for 0.11. Same issue with Om: https://github.com/swannodette/om/issues/124 \n. Maybe the problem is with transferPropsTo? \n. It's very strange. I'll investigate it more precisely. \n. Figured it out. React was loaded twice in a bundle. Thank you for help. I'm closing this issue.\n. @gaearon why don't replace React.creactClass with hmr proxy on top of the app? RegExp check is a mess. Even if replace it with a parser like esprima or graspjs the variable name is unpredictable.\n. I think it is possible to inject hmr code once in app entry point instead of patching every module. If you don't have time for this I could try to manage the issue and send a PR.\n. Confused about point 3. Why need this check if patched createClass will be called explicitly every time we want create a component?\n. Great, looks much better now. Will you drop components store by displayName? \n. ",
    "jedwards1211": "I'm having an issue with React being loaded twice, but I don't understand what's causing it to be loaded twice.  Do you guys have any tips?  I'm using the google-map-react library and this code:\n```\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\n```\nSomehow seems to be loading an additional copy of react.  Not even different versions!  Why would Webpack ever load two copies of the same exact library? Seems like a bug to me\n. @gaearon yes, I understood those aren't two Reacts.  I think what was happening though was a second version of React was being loaded from google-map-react's own node_modules, even though its webpack bundle declares react as an external.  I still haven't had time to get to the bottom of this issue\n. Huh, it was compatible as far as I know, but that's good to know anyway.  Thanks!\n. @troutowicz ports do matter.  According to MDN, \"Two pages have the same origin if the protocol, port (if one is specified), and host are the same for both pages.\" An example shows that a request to a different port fails the same-origin policy.\n. @troutowicz that is strange.  I have no idea if all browsers enforce CORS for localhost or 0.0.0.0, but at least one person has seen it happen. ",
    "dtothefp": "I was running 10.31 but switched to 10.26 using NVM but the problem still exists\n. I think the problem wasn't your plugin but instead https://github.com/jtangelder/sass-loader.  I was experimenting with a modular sass build and having too many require calls to .scss files I think was causing the crash\n. ",
    "moretti": "Yeah, it does! :smile: \n. Thanks! :+1: \n. ",
    "geekyme": "can you show me how I could implement a custom hot server @gaearon \n. My use case will for a commenting feed where people will add comments to feeds in real time. I want to be able to ship new code and update the users' UI using HMR. If HMR is not possible at this stage, maybe live reloading all connected users' browsers might work. \n. ",
    "pburtchaell": "@gaearon I'd love to contribute, so I can help out with this if needed. Planning to host on GH Pages? \n. IMO, the live demo works as straightforward demonstration that clearly explains the purpose of the loader for devs that are familiar with React. But... I also agree with you that someone new to React might not get it just from the live demo. In that case, the video might be useful to them. If you do include a new video, I'd suggest a more concise example < 2 min long. \n. It's a bit hacky, but I currently have this and it helps by clearing the console of old logs after each refresh:\nif (WEB_ENV === 'development') {\n  console.clear();\n}\nThe WEB_ENV variable is set by WebPack in the config.\n. Looking at the loader source, I think this might be connected to the way my modules are exported? Here is an overview of the tree:\n\u251c\u2500\u2500 auth\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 passwordResetView.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 registerView.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 signInView.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 styles.less\njs\n// index.js\nexport { default as PasswordResetView } from './passwordResetView';\nexport { default as RegisterView } from './registerView';\nexport { default as SignInView } from './signInView';\nimport './styles';\n. Yes, I am.\n. Sure. Here you go: https://github.com/pburtchaell/react-hot-boilerplate\n\n. I enabled the loose option and that seems to have fixed it. Guess this would be an issue with Babel then? \n. Also\u2014since this did fix my issue\u2014it might be worth editing the \"Can't make class hot reloadable due to being read-only\u201d warning message from React Hot Loader to mention trying the loose option. I'd be happy to make a PR if you agree.\n. Cool. PR at #159.\n. ",
    "irvinebroque": "Figured it out:\nhttps://github.com/irvinebroque/isomorphic-hot-loader\nAll the path configuration in webpack drove me bananas, but it works.\nThank you so much for writing react-hot-loader -- totally worth the pain to get this working. As a designer it saves me so much time, especially when making slight tweaks or prototyping new ideas in meetings.\n. @gpbl - that's awesome! I like the idea of using a redirect there -- on my end I still need to think through what a clean and minimal config looks like that can handle dev, staging, and production. Will check out your example tomorrow for sure.\n. ",
    "gpbl": "@irvinebroque we were doing the same thing :-) The only part i didn't like so much was the need to hard code the webpack urls. I've resolved in the build task replacing the disturbing urls. \n~~But maybe a small proxy in the dev environment would do the trick~~\nnope, a redirect was enough\n(just dropping here to thanks @gaearon for the awesome module, you really made my weekend :+1: )\n. Thanks @gaearon \u2013 yes my config already whitelists them:\njs\nmodule: {\n    loaders: [{\n        test: /\\.jsx$/, loaders: ['react-hot', 'jsx-loader?harmony']\n      }]\n  },\nOK, I'm going to try reproducing the issue with a server that resemble my configuration. I'm using gulp with nodemon to serve the app. Also, the webpack-dev-server runs on a different port. Maybe something is wrong there.\n. So @gaearon since I wanted to give you a clean example, i started removing even more code and  I've casually found the problem :+1: \nI had the webpack compiler created with a function to log the errors:\njs\nvar compiler = webpack(config, function (err, stats) {\n    console.log(err);\n});\nvar server = new WebpackDevServer(compiler, { /* etc */ } );\nWithout passing a second argument to webpack it works fine:\njs\nvar compiler = webpack(config);\nvar server = new WebpackDevServer(compiler, { /* etc */ } );\nWhy only with react-router? Which kind of bug is this? :-)\nAnyway, I've put the case in this simple app.\n. I prefer to use a proxy so I can open the web app on other devices maintaining relative urls.\n. @gaearon it works great! (testing 1.0.4) Thank you!\nAs for the module.exports vs exports, I consider that exports = module.exports = {}; i.e. they reference to the same object. So when I write\n``` js\nfunction myThing() { console.log('hi'); } ;\nmodule.exports = myThing\nrequire('./myThing')(); // logs \"hi\"\n```\nI overwrite the whole export \u2013 while writing export.myThing = myThing I just extend it:\n``` js\nfunction myThing() { console.log('hi'); } ;\nexports.myThing = myThing\nrequire('./myThing').myThing(); // logs \"hi\"\n```\nAnyway in my case the transpiler writes\njs\nexports[\"default\"] = MyComponent;\n// same as\nmodule.exports[\"default\"] = MyComponent;\n// being the default i can do\nrequire('./MyComponent'); // returns myComponemt\n// or in es6\nimport myThing from 'myComponent' // myThing is now myComponent\nimport { default as myThing } from 'myComponent' // should be the same\nNot that I even had taken advantage from this... too confusing for my little brain.\n. @ronag i've seen this as well - maybe is your server restarting itself (nodemon)?\n. What about using the host name? I set it in the OS X sharing preferences. \nSo if my hostname is gpbl.local, i set the web server to that address and I can reach gpbl.local:3000 from the other devices on the same network.\nThen, my webpack config is something like this:\njs\nimport os from 'os';\nconst host = os.hostname() || process.env.HOST || 'localhost';\nconst PORT = 3001;\nconst config = {\n  entry: [\n    `webpack-dev-server/client?http://${host}:${PORT}`,\n    'webpack/hot/only-dev-server',\n    './app/client.js'\n  ],\n  output: {\n    publicPath: `http://${host}:${PORT}/assets/`\n  }\n}\n. ",
    "rottmann": "Thank you!\n. ",
    "bilalq": "I'm not terribly concerned with making the app isomorphic, but those were interesting reads, thanks. It seems all three of us are doing a variation on the same idea though. \nNone of us are using the webpack-dev-middleware though, and I wonder if that could be used as a mounted sub-app somehow.\nFrom the looks of things, it seems proxying/redirecting is indeed the way to go.\n. Thanks for sharing the approach. \n. ",
    "kurtharriger": "i use a proxy as it avoids issues with cross origin resource requests.  While you can and should handle cors headers for apis, browsers do not return good error information on 500 errors and using a proxy simplifies debugging during development.\nInstead of having your api proxy requests you can do it the ither way around as well. \nWebpack-dev-server can proxy request instead of redirecting by using contentBase: {target: 'http://localhost:8000' }.  Note contentBase is now an object with a target instead of a string. This tells webpack to proxy rather than redirect.\n. ",
    "catamphetamine": "Don't know if it works uniformly (on server) but with new webpack and its new \"proxy\" parameter it works for me with webpack-dev-server and existing node webserver\n. I'm having this issue by the way, and I've set the headers in the config.\nI'll go google for possible solutions.\n. Oh, I'm not having this issue anymore: my port number in the corresponding webpack entry point \"webpack-dev-server/client?http://127.0.0.1:... was messed up and that caused the error.\n. @gaearon Ok, here's how it was:\nwebpack.config.js\n... [\n    \"webpack-dev-server/client?http://0.0.0.0:\" + configuration.development.webpack.development_server.port,\n...\nAnd the variable configuration.development.webpack.development_server.port was basically undefined.\n. Oh, the port was messed up.\nBut, still, after correcting the port, it outputs the same error:\nGET http://0.0.0.0:3001/socket.io/?EIO=3&transport=polling&t=1436636370722-0 net::ERR_ADDRESS_INVALID\n. I was only able to fix it by changing the 0.0.0.0 to 127.0.0.1\nFrom:\nentry:\n    {\n        application: \n        [\n            \"webpack-dev-server/client?http://0.0.0.0:\" + configuration.development.webpack.development_server.port,\n            'webpack/hot/only-dev-server',\n            './client/application.react'\n        ]\n    },\nTo:\nentry:\n    {\n        application: \n        [\n            \"webpack-dev-server/client?http://127.0.0.1:\" + configuration.development.webpack.development_server.port,\n            'webpack/hot/only-dev-server',\n            './client/application.react'\n        ]\n    },\n. You can close it if you want.\nBut you may want to reflect this bug in the documentation.\n. Yes, I do\n. Ok, I'll investigate this one and post you with results.\nIt seems to be present in the project\n```\n...\n// },\n/ 5 */\n/*/ function(module, exports, webpack_require) {\neval(\"'use strict';\\n\\nmodule.exports = __webpack_require__(236);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRzovd29yay9jaW5lbWEvfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2luZGV4LmpzPzNhOTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLE1BQU0sQ0FBQyxPQUFPLEdBQUcsbUJBQU8sQ0FBQyxHQUFlLENBQUMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21ha2VNYWtlSG90Jyk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogRzovd29yay9jaW5lbWEvfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2luZGV4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n...\nvar ReactHotAPI = webpack_require(5)\n...\n```\nMaybe it's not supposed to be a function?\nmodule.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () {  ...\nNo idea what's in the module.hot.data variable.\n. I'll continue investigating later this week and I'll post back if I get something.\nThe project is derived from a boilerplate so there's a lot there: I just copy-pasted everything into my project and of course it didn't work until I found some missing pieces\n. So, I resolved the issue.\nThe issue was that I didn't have exclude: /node_modules/, in my javascript loader in webpack configuration.\nNow it works\n{ \n                test: regular_expressions.javascript,\n                exclude: /node_modules/,\n                loaders: [babel]\n            },\n. And the link to the boilerplate is also wrong.\nhttps://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#try-webpackdevserver-node-interface-instead-of-cli\nThe branch is wrong.\nWhy is it on next branch and not on master when react-hot-loader@4 has already been released a long time ago.\nAnd the boilderplate is wrong - it's for hot-loader@3.\nIt still has 'react-hot-loader/patch'.. Ok, thx.\nConsider adding the babel plugin step in the Getting Started section then.\nOtherwise it confuses a lot of people on why isn't their project hot-reloading.. ",
    "songawee": "Sure, we are webpacking our assets in one repo and serving them to our site on another server. We have multiple chunks that are relative to one another as we webpack and set webpack__public__path in our entry point to the server we are serving the webpacked assets from (something like __webpack_public_path = window.assetUrl. We can't figure out to do something similar for the hot-loader. It seems like it uses the public path at compile time. Thanks for your help.\n. Ok, thanks. I'll go ahead and close this and will let you know when I come up with something.\n. ",
    "bjfletcher": "Hello @gaearon! That's a great turnaround. :)\nA reason for asking about this is because, for me, If there's any way to reduce the differences between development and production environments without impacting on their productivity and performance respectively, then I feel that's worth exploring. :)\nI wonder if Facebook or the React people have been asked about providing some way of accessing ReactMount with the precompiled version?  Worth asking them, do you think?\n. ",
    "ffky": "Just wanted to chime in this works great for our project that has React as an external. Thank you!\n. Working great so far. In our case we were using getRootInstances() since we have React as an external so we haven't had any problems removing that.\n. ",
    "davibe": "I had a second look. Basically I wanted to require react+addons without modifying my code (its code that works fine with plain require.js and now i am making it work with webpack too). So i set up an alias { 'react': 'react/addons' } in webpack.config.js but if you do that then again react-hot-loader can't find 'react/lib/ReactMount' anymore. Which makes sense. It's just one more case similar to the previous ones.\n. ahaha, my god. I like the hot realoding thing. Its why i am tryin webpack. But the amount of unclean hacks I had to apply is making me sick. Thank you though, nice one.\n. ",
    "gioacostax": "@gaearon but now appears this; if I use ReactDOM to render (the correct way):\n\nERROR in ./~/react-dom/index.js\n/bower_components/react/react.min.js/lib/ReactDOM \n. \n",
    "codelegant": "@gaearon In product env, use externals, and the addons had to declare like this const update=React.addons.update. But in dev env, use NPM package, you should import update from 'react-addons-update.\nThat made me confused, for consistency, I had to  use externals in dev.\nIs there any solution? I'm waiting online. Thank you. \n. ",
    "Dakuan": "I also have this\nitems:1 XMLHttpRequest cannot load http://0.0.0.0:3000/6a5bec410cd2f01435bc.hot-update.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:4130' is therefore not allowed access. The response had HTTP status code 404.\n. This patch to webpack-dev-server fixes this issue for me https://github.com/webpack/webpack-dev-server/pull/110\n. @jbasdf add cors middleware to your webpack-dev-server\n. we are running into this but excluding node_modules isnt helping\n. it does feel like thats whats happening, not sure how as node_modules is excluded!\n. Nevermind.\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\nI will not raise github issues on Friday afternoons\n. ",
    "jbasdf": "I'm seeing the same issue when serving pages from node on 8888 and using the webpack dev server on 8080:\nXMLHttpRequest cannot load http://localhost:8080/build/377563fabf427177f203.hot-update.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8888' is therefore not allowed access. The response had HTTP status code 404.\n. Thanks @Dakuan, I ended up setting the headers when I start the server. Here's the code: \njs\nvar webpackDevServer = require('webpack-dev-server');\nnew webpackDevServer(webpack(webpackConfig), {\n  publicPath: \"http://localhost:8080/build\",\n  hot: true,\n  headers: { \"Access-Control-Allow-Origin\": \"*\" }\n}).listen(settings.ports.hotPort, 'localhost', function(err, result){\n  if(err){\n    console.PluginError(err);\n  }\n  console.log('Webpack hot load server listening on port ' + settings.ports.hotPort);\n});\n. I serve the page using node.js and the assets via the webpack-dev-server. They run on different ports so CORS has to be enabled or the browser will give you same origin errors.\n. That was my assumption, but the version of Chrome I'm using wouldn't allow the socket connect until I added Access-Control-Allow-Origin\": \"*\". \n. ",
    "troutowicz": "CORS should not need to be enabled locally. If you want to access the dev server from another device in your local network, have your web servers run on your devices local IP instead if localhost. You can do this with webpack-dev-server by passing the --host flag.\n. Ports do not matter, the domain does. As long as your servers are running on an internal IP other than localhost, CORS is not needed when accessing server resources from another device in the network.\n. I have not been using Chrome, but I just went and tested in Chrome v40.0.2214.115 m, and everything works as expected.\n. @jedwards1211 Strange. When I was working with this project I never had CORS issues when using private ip-ranges.\n. ",
    "DominicTobias": "Thank @jbasdf ! Was having the same issue on Chrome 43\n. Sooo, any examples?. ",
    "hugotox": "I'm having this issue with webpack-dev-server 2.4.2 and react-hot-loader 3.0.0-beta-6. Adding { 'Access-Control-Allow-Origin': '*' } did not work. @michaelBenin thanks a lot that fixed it!. ",
    "michaelBenin": "Also running into the same issue as @hugotox with v2. . @hugotox in your webpack config, try adding this: \ndevServer: {\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\n  },. That's something configured in the cdn or web server serving the file. What are you using?. Also running into this issue. \nMy react components hot reload fine but my other utils are giving me the same message.\nIs there a way to reload the page when this happens until hotify is finished?\nThank you. \n. ",
    "sheprdinc": "great that everyone is showing how to do it with the devServer, but what about the production server? where/how do i do that?\nwhere/how do i add this:\nheaders: { \"Access-Control-Allow-Origin\": \"*\" }\nto my production build?. ",
    "DmacMcgreg": "Try adding this: (where app = express() )\napp.use(function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n})\nIt worked for me. Add it near the top of the file after initializing express and before all of the webpack initialization code.. ",
    "SylarRuby": "You guys are the boss! Thanks for headers: { 'Access-Control-Allow-Origin': '*' } on https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#no-access-control-allow-origin-header-is-present-on-the-requested-resource. ",
    "geowarin": "The dependency was picked up fine when I re-npm installed the hot loader.\nAnd it works! Many thanks for the very quick response.\n. ",
    "tcoopman": "I would have both, a very short video to introduce the concept and the live demo to dig in a bit deeper.\n. I also refresh. It would be nice though if you could replay all your actions after an refresh:\nSeems like a nice use case for https://github.com/gaearon/flux-hot-loader :)\n. @xgrommx do you mean you want your applications to be able to surf to your own ip? You have listen to 0.0.0.0 with WebpackDevServer instead of to localhost.\n. @xgromnx I haven't checked it with hot loader, but dev server should work like @gaeron explained\n. ",
    "chenglou": "It's all about seeing state preserved across time. The counter demo from the React home page will do. \nPut an explanation of a short comparison and ask them to modify the \"Seconds Elapsed\" part. Not sure if you'd even need a video with such a simple demo =). Bonus is that if the site's ever available on mobile they could just tap and delete a few letters and see the point.\n. ",
    "moimikey": "'twould be interesting to have the realtime output of the HMR similar to sokra's demo here: http://webpack.github.io/example-app/\n. ",
    "patrickheeney": "New user to react and hot loader. I have been working on getting this setup for about a day. I incorrectly assumed that state changes should have something happen. I kept debugging with the assumption that this was not standard behavior. I would love a troubleshooting guide or some notes somewhere regarding how react-hot-loader handles state and when we should expect it to refresh.\n. ",
    "kibin": "Any updates on this?\n. ",
    "vishnevskiy": "That mostly answers my question.\nI thought it was a bug honestly that modules that weren't accepted caused a hot reload rather then a page reload. But since it seems that it is by design I guess I can just call decline on them manually for now.\nI will keep an eye out for the flux hot loader.\nThanks!\n. ",
    "jmcbee": "Can't u close the issue, when it's already fixed? You  might forget this issue or something :see_no_evil: \n. k\n. ",
    "sergiocolussidev": "Nice post @kevinold , very clear.\nI'm trying it with no luck that configuration in a ruby on rails project but it's in a vagrant vm. \nEven I see this in the console after run it:\n./app/assets/javascripts/App_wp_bundle.js  1294037       0  [emitted]  App\nchunk    {0} ./app/assets/javascripts/App_wp_bundle.js (App) 1244140 [rendered]\nBut I cannot see the http://localhost:8080/assets/App_wp_bundle.js or where it's created. \nThen http://localhost:8080/webpack-dev-server/index.html seems to not been running.\nI'm sure I'm missing some point here.\n. Thanks @gaearon for the clarification. Yes since the host where it's served is not working, seems to be something related to the environment I'm running this.\nI don't know too much about Rails either.\n. ",
    "vipulnsward": "@kevinold this is amazing. Thanks for the writeup!\n. ",
    "petrbela": "@kevinold Great article! I actually spent several hours trying to set it up until I found your post.\nOne note though, if --hot is passed on the command line, it seems that setting up the plugin with new webpack.HotModuleReplacementPlugin() is not necessary. In fact, it causes stack overflow.\n. ",
    "edygar": "Well, react-hot?manual should just work now with current teardown and recreating and running the router, shouldn't?\nI did try something similar to the following and it didn't worked, It ended up with a infinite recursion and stack overflow.\n``` js\nvar routes = require('./routes'),\n    renderer = require('./renderer'),\n    Router = require('react-router');\nfunction startUpRouter(routes) {\n  router = Router.create({\n    routes: routes,\n    location: Router.HistoryLocation\n  });\n  router.run(renderer);\n  return router;\n}\nif (module.hot) {\n  module.hot.accept('./routes', function () {\n    routes = require('./routes');\n    router.teardown(); \n    startUpRouter(routes);\n  });\n}\nstartUpRouter(routes)\n```\n. I couldn't verify yet, because of this problem: https://github.com/gaearon/react-hot-loader/issues/77\n. Verified. The approach actually works, the RangeError was caused because another issue https://github.com/gaearon/react-hot-loader/issues/77 . \n=) Hot Routers gave me a nice productivity boost\n. Nice! I didn't know the problem was in webpack-dev-server's CLI, thank you for the reply and the opened issue there... \nShould we close this issue or let it open until https://github.com/webpack/webpack-dev-server/issues/106 gets solved?\n. @herebebeasties  confirmed! Now I just check if --hot flag is present before add new HotModuleReplacementPlugin() and it just works \n. Sure you can! Later today, ok?\n. ",
    "jbraithwaite": "I changed the configuration for WebpackDevServer to exclude React.\nexternals: {\n      \"react\": \"React\",\n      \"react/addons\": \"React\",\n      ...\n    }\n. ",
    "tobad357": "Well that's an even fairer point, didn't know that was possible :)\nIf you want I could update the code to warn and suggest excluding as a possible fix?\n. Would this text be ok?\nCan't make class <> hot reloadable due to being read-only, tip: vendor files can be excluded by excluding the /node_modules/ directory from the jsx loader configuration\n. It's failing on updating module.exports.<>\nIe this doesn't work\nmodule.exports[prop] = ReactClass\nWhere you are redefining the existing prop.\nDoing Object.getOwnPropertyDescriptor(m,'exports',key)\nreturns that both writable and configurable are false so can't enable writing to the prop either.\nLooking at https://github.com/esnext/es6-module-transpiler/blob/master/lib/module.js\nShows that they are setting writable to false and as configurable is false per default we end up with a  situation where the prop can never be changed.\nOne option could be to redefine the whole exports prop as it is writable?\n. ",
    "slhnq": "Hello\uff0c I don't seem to understand\uff0cCan your make it clear? Thank your\uff01. ",
    "gilbox": "Thanks a lot for the push. I was trying to get this working with rails. I had been looking at react-hot-boilerplate, but on your suggestion I went back and got it working with just server.js (without rails), and then changed the paths to be more rails-like (/app/assets/javacripts), and changed the port to 8080. \nThen I changed just one value, publicPath, and it worked with rails:\n/app/assets/javascripts/ => http://localhost:8080/app/assets/javascripts/\n. ",
    "nelix": "This actually hit me pretty hard yesterday (not that it took long to fix or anyone noticed :P), production build failed to load due to something being undefined (not triggered in dev because strict was not enabled).\n. ",
    "doctyper": "Ah! That was it, thanks. Not sure how it was working before?\n. > Cannot not\nDouble negative?\n. ",
    "herebebeasties": "As a commenter in webpack-dev-server/issues/87 says, you're probably tripping over this because you have both --hot on the CLI and also a new HotModuleReplacementPlugin() being added in your webpack.config.js.\n. ",
    "philihp": "Found this issue because I, too, had --hot and in my plugins new HotModuleReplacementPlugin().\n. ",
    "crobinson42": "\nFound this issue because I, too, had --hot and in my plugins new HotModuleReplacementPlugin()\n\nI removed webpack.HotModuleReplacementPlugin() from my plugins and left the --hot and it works as expected, now.. ",
    "steida": "Silent option in configuration would be nice.\n. Yeah, I'm using piping for over two years in https://github.com/steida/este.\n. ",
    "irom-io": "How disable console.log for webpack/hot/only-dev-server ??\nconst server = new WebpackDevServer(compiler, {\n        stats: {colors: true},\n        hot: true,\n        clientLogLevel: 'none',\n        //quiet: true,\n        watchOptions: {\n            ignored: /node_modules/\n        }\n        /*\n         historyApiFallback: {\n         index: '/'\n         }*/\n    });\nquiet: true not working!. ",
    "tavurth": "Add this to your apps index.js:\njavascript\n// Clear after module reload\nwindow.addEventListener('message', e => {\n    if ('production' !== process.env.NODE_ENV) {\n        console.clear();\n    }\n});\nFor example, this is part of my index.jsx entry point:\n```jsx\n...\nconst render = Component => {\n    ReactDOM.render(\n        \n\n\n\n,\n        document.getElementById('root')\n    );\n};\nrender(App);\nif (module.hot) {\n    module.hot.accept();\nwindow.addEventListener('message', e => {\n    if ('production' !== process.env.NODE_ENV) {\n        console.clear();\n    }\n});\n\n}\n```\nif (module.hot) will get culled out when we run production minification, and every time HMR reloads, we'll clear the console.. @leongaban They're sprinkled liberally througout the code.\nGo to your /node_modules/webpack folder and run a search and replace:\nfind . -type f -name \"*.js\" -exec sed -i '' 's/console.log.*$//g' {} \\;\n/s. There's also this: \nhttps://github.com/webpack/webpack-dev-server/pull/579#issuecomment-244406936. ",
    "leongaban": "This is really annoying, could anyone tell me where these logs are located in the react-hot-reload folder? Did not see them.. @tavurth ah thanks! I was looking in the react-hot-reload folder.. ",
    "peteobrien": "A quick way to silencing could be filtering in devtools with regex. i.e. ~ /^((?!(\\[HMR|\\[WDS)).)*$/\nUPDATE: in chrome 62 we can simply use -HMR -WDS. ",
    "tofilagman": "Add this to your apps index.js or index.ts: \n```\nvar _log = console.log;\nconsole.log = function () {\n    if (arguments[0].indexOf('[HMR]') == -1) //remove hmr logging\n        return _log.apply(console, arguments);\n};\n```\n. ",
    "lorenzomigliorero": "Import log module directly in your bundle, and change logLevel:\nimport { setLogLevel } from 'webpack/hot/log';\nsetLogLevel('none');. ",
    "maxmaxmaximus2": "@lorenzomigliorero set var logLevel = \"none\"; by default OMG\nALL PEOPLE HATE IT ((((. ",
    "geiszla": "For those who can't make it work with import { setLogLevel } from 'webpack/hot/log', see this comment: https://github.com/webpack/webpack/pull/6265#issuecomment-430932442. ",
    "IAMtheIAM": "Hey guys, none of these suggestions worked for me, except the CLI option does!!\nwebpack --client-log-level warning\n// or \nwebpack --client-log-level error\nIt defaults to info which is where all the [HMR] and [WDS] spam comes from.. @skrzepij  That is a fantastic solution to control how many files get produced by hot-updates. Also thanks because I did not know about the hotUpdateChunkFilename  and hotUpdateMainFilename options for specifying location and name. Perfect. ",
    "mindjuice": "I'm seeing something similar.  I have one a really simple set of components as I'm just getting setup for a new project.  The App component renders three child components, Inbox, Calendar and Dashboard.  The child components are identical except for the text displayed in them.  Oddly though, changing App, Inbox or Calendar DOES trigger a reload, but changing Dashboard does not.\nI'm on React 0.12.2 and react-hot-loader 1.1.5.\n. In my case, I just hadn't properly configured react-hot-loader.  It's working for me now.  Such a newb!\n. ",
    "DarrylD": "Doing research for an upcoming project. I'll keep progress updated when I get time to the POC.\n. ",
    "knpwrs": "Or maybe not. More has been posted to that issue since I opened this...\n. ",
    "alexhancock": "It doesn't seem to only happen when I have had a long session in the debugger.\nSometimes I will go for a while and hot reload will continue to work. Other times, I will come from a fresh pageload of my web app, and then the first time I make a code change which should trigger a hot update, this will happen.\n. Will do. Thanks!\n. ",
    "jnsandrew": "I'm having the same problem and found this open ticket - I can also reliably get it to do this. It's basically the only thing it does. Attached a screenshot of my console: \n\nMy site runs on port :3000 while webpack-dev-server runs on :3001. If I try and access the refused URL on another tab or through a REST app both return the json and a 200 status (on both 3000 and 3001). I'm not sure if it should  load the script on 3000 or if I've missed a config setting somewhere? My node app has a proxy setup so that it redirects everything on:\n/scripts/\n/socket.io/\nto http://127.0.0.1:3001 using http-proxy package\n\nThat's where it errors apparently.\nNot sure what else you need? \n. I added the access control origin setting into my config just in case, but weirdly what fixed it for me was, previously I was creating a server using express:\n```\nconst app = express();\napp.listen(port, function () {\n});\n```\nBut if I use the 'http' package and create a server using that, I don't get an error anymore:\n```\nconst app = express();\n...\nvar server = http.createServer(app);\nserver.on('upgrade', function (req, socket, head) {\n  proxy.ws(req, socket, head);\n});\nserver.listen(port, function () {\n  console.log('Server running on port ' + port);\n});\n```\nI got the above code from server.js in https://github.com/christianalfoni/webpack-express-boilerplate\nSo I just have an if, which uses 'http' in development and app.listen in production.\n. ",
    "chrisvfritz": "@alexhancock @jnsandrew Is it possible you're running into the cross origin problem?\n. @gaearon Ahh, thanks for clarifying. Maybe as things slow down for the holidays, I'll take a stab at coding myself a new loader for Christmas. :smiley: \n. @alexgorbatchev I haven't gotten a chance to work on anything yet - free free to take a swing at it yourself! And thanks again @gaearon for taking the time to explain things. Now that I understand a little better, I really appreciate how you've architected react-proxy to avoid any kind of ecosystem lock-in. :smiley:\n. ",
    "WishCow": "Okay, the request is being sent to the correct URL now, however I don't see the changes in the browser.\nI added publicPath under the output key in webpack.config.js, so it now looks like this:\noutput: {\n        path: __dirname,\n        filename: 'bundle.js',\n        publicPath: 'http://localhost:3000/'\n    },\nAnd in firebug, I see this when making a change to the files:\n[WDS] App updated. Recompiling... bundle.js (line 565)\n[WDS] App hot update... bundle.js (line 607)\n[HMR] Checking for updates on the server... bundle.js (line 694)\nGET http://localhost:3000/184d199e5da09cfa82f3.hot-update.json 200 OK       1ms bundle.js (line 26)\n[HMR] Updated modules: bundle.js (line 672)\n[HMR]  - 8 bundle.js (line 674)\n[HMR] App is up to date. bundle.js (line 678)\n. Fixed.\nI got a warning in Firebug about something like \"you might have multiple versions of react.js dragged down in node_modules\", and indeed, I had react installed with npm, however I also had it ignored with externals: { react: 'React' } in webpack, because I had it loaded from a CDN in the html template. \nAfter removing the externals line from the webpack config, it is now refreshing changes correctly. I'm not sure why I didn't see the firebug warning message the first time, it definitely does not always show up.\nThanks for the help!\nedit:\nActually no, it's still not perfect. Sometimes it refreshes, sometimes it doesn't.\nIt seems like if I leave the page alone for a long time, it will stop receiving updates. Is there some kind of timeout I should be aware of? Like if no change happens for 5 minutes, it will no longer listen for changes?\n. I haven't found a solution, the problem disappeared by itself.\n. No, a console.log doesn't show up either.\nIt works fine in Chrome, but Firefox (36.0) doesn't trigger it. \n. ",
    "yu521088": "@WishCow , i am having the same issue to you, did you find any solution? I am not introducing react twice, BTW.\n. @WishCow after a day's work, finally find the solution. In your html file, you should introduce the script file under the publicPath config, no matter where your output.path is. This is my config:\n```\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\n  entry: {\n    index: ['./src/js/index.jsx']\n  },\n  output: {\n    path: path.resolve(__dirname, 'build/js'),\n    filename: '[name].js',\n    publicPath: 'test/for/'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.less']\n  },\n  module: {\n    loaders: [{\n      test: /.jsx$/,\n      include: [path.join(__dirname, 'src')],\n      loaders: ['react-hot', 'babel-loader?presets[]=react,presets[]=es2015']\n    },\n    { test: /.css$/, loader: \"style!css\" },\n    { test: /.less$/, loader: \"style!css!less\" }]\n  },\n  watch: true,\n  plugins: [\n    // new webpack.optimize.CommonsChunkPlugin('common.js'),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin()\n  ]\n};\n```\nand this is how i introduce my script in HTML, where ./test/for/ is the publicPath config in webpack.config.js:\nhtml\n<script src=\"./test/for/index.js\"></script>\nwebpack-dev-server will compile index.js to memory instead of  build/js/index.js, and test/for/ is just a virtual path, it doesn't matter if it exist. \nIt works for me, hope that will help you.\n. ",
    "NwawelAIroume": "I'm on windows10 and i experience the same issue nothing worked for me. i still get GET http://127.0.0.1:5000/f450e336c3b076f73ab0.hot-update.json 404 NOT FOUND        2ms bundle.js (line 26)\n\"NetworkError: 404 NOT FOUND - http://127.0.0.1:5000/f450e336c3b076f73ab0.hot-update.json\"\nf450e33...te.json\n[HMR] Cannot find update. Need to do a full reload! bundle.js (line 644)\n[HMR] (Probably because of restarting the webpack-dev-server)\n. @AllenZeng path.join(__dirname, 'build'), path cause compilation error didn't fix even if i put the public path. help me  to solve this. i don't know why my config work on ubuntu and not in windows\n. ",
    "AllenZeng": "in this issues https://github.com/gaearon/react-hot-loader/issues/194 @seburgi suggest adding \" publicPath: '/' \" to output section, so it looks like this:\nbash\noutput: {\n    path: Path.join(__dirname, 'build'),\n    filename: 'bundle.js',\n    publicPath: '/',\n},\nThat help me fixed the problem.\n. ",
    "brentatkins": "I've been scratching my head with this. Have pretty much the same setup as @WishCow and adding the publicPath fixed the 404 error when a file was changed.\nHowever the module doesn't refresh. I get the correct logs in console, but no change to the control on the page.\nThe hot module replacement works when I run the website from the webpack server (port 3000). But nothing when I use my backend (port 5000) with a script reference to the webpack server bundle.\nAnyone have an idea on where I might find the problem?\n\nUPDATE\nUser error (is it ever anything else?)\nIt works! The publicPath setting did the trick.\n. @AlexLeung I have it set to http://localhost:3000/ and it works for me\n. ",
    "AlexLeung": "@brentatkins What publicPath setting did you end up using?\n. ",
    "Levino": "I had a webserver running on port 3005 but was serving the webpack files from port 3015 (webpack dev server \"port\" config setting). Setting \"publicPath\" in \"output\" in the webpack.config.js to \"http://localhost:3015/' instead of not setting it at all solved my problem. Per default webpack gets all files from the current domain / port that the page has that you load the webpack javascript into. One can also see the issue in the console: There is a failed get request on the wrong port for the updated js files.. ",
    "inakianduaga": "It's not working for me even after setting publicPath to point to the webpack dev server location (so serving from a different backend than webpack's). I'm using webpack 2, not sure that makes a difference. ",
    "johnloy": "This seems to be happening to me as well, though I also couldn't tell you how to reproduce it. setTimeout should just work, and for whatever bizarre reason it's simply not. With webpack, babel, and RHL magic going on under the hood, I don't even know where to begin to troubleshoot. \n. Ok, I just realized it's only not working when the document is loading, if that provides any kind of clue.\nMore specifically, I was trying to execute it in an es6 constructor for an instance of React.Component. I haven't tried it in other contexts yet.\n. ",
    "Pierozi": "I have the same issue on firefox v45. not Chrome.\nsetTimeout callback has not fired even after page loading when i try with console through firebug or firefox devtool.\nI can confirm the problem disappear with i disable or remove hot-loader in webpack.\n. ",
    "terebentina": "Hmm, no, I checked...could it be from the fact that I have 2 entry points? A vendors and an app?\nThis is the only significant difference I see from the boilerplate. And the fact that I have a real server started, besides webpack-dev-server.\nI was starting webpack-dev-server with --inline --hot but now I removed the command line args and added them in webpack config, just for the app entry.\nI also added the webpack.HotModuleReplacementPlugin plugin and config.devServer = { hot: true }\nStill, it behaves the same.\n. Everything is fine according to this page. However, it lead me to find the problem:\nI had this code in my index.js even though react was a npm package in node_modules:\njavascript\nif (module.hot) {\n  require('react-hot-loader/Injection').RootInstanceProvider.injectProvider({\n    getRootInstances: function () {\n      // Help React Hot Loader figure out the root component instances on the page:\n      return [rootInstance];\n    }\n  });\n}\nWhen I removed the code, hot reload started working.\nYou might want to mention this in the troubleshooting page specifically?\nAnyway, thanks for your help, it's much appreciated.\n. ",
    "ZucchiniZe": "It is broken for me also\n. ",
    "jasonkuhrt": "Verified that 1.1.7 works.\n--edit\nConfirmed that 1.2.0 does not work so that's the version that broke it.\n. @gaearon We do not although that does not change the information above.\n. @gaearon Will do thanks.\n. ",
    "emroot": "FYI this doesn't happen when I use 1.1.4, but breaks with latest version.\n. ",
    "mattatcha": "@gaearon I had the same issue and exclude: /node_modules/ fixed it.\n. ",
    "sagiavinash": "@gaearon my webpack.config.js is\nas u can see i have mentioned exclude: /node_modules/ in the babel loader.\nstill facing this issue.\n```\nconst autoprefixer = require(\"autoprefixer\");\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nconst sassLoaders = [\n  \"style-loader\",\n  \"css-loader\",\n  \"postcss-loader\",\n  \"sass-loader?sourceMap?indentedSyntax=sass&includePaths[]=\" + path.join(__dirname, \"flash/ver_static/css\")\n];\nmodule.exports = {\n  entry: {\n    bundle: [\n      \"webpack-dev-server/client?\", // WebpackDevServer host and port\n      \"webpack/hot/only-dev-server\",\n      \"/path/to/app.js\"\n    ],\n    vendor: [\"react\", \"underscore\", \"moment\", \"react-router\"]\n  },\n  output: {\n    filename: \"[name].js\", //this is the default name, so you can skip it\n    path: path.join(__dirname, \"path/to/output_dir\"),\n    publicPath: \"\"\n  },\n  devtool:'source-map',\n  module: {\n    loaders: [{\n      test: /.jsx?$/,\n      exclude: /node_modules/,\n      loader: 'babel',\n      query: {\n        plugins: ['transform-runtime'],\n        presets: ['es2015', 'stage-0', 'react'],\n      }\n    }, {\n      test: /.scss$/,\n      loader: sassLoaders.join(\"!\")\n    }]\n  },\n  postcss: [autoprefixer({ browsers: [\"last 2 versions\"] })],\n  externals: {\n    //don\"t bundle the jquery npm package with our bundle.js\n    //but get it from a global jQuery variable\n    \"jquery\": \"jQuery\"\n  },\n  resolve: {\n    extensions: [\"\", \".js\", \".jsx\"]\n  }\n};\n```\nbut still i am getting this error \n. @gaearon found the issue, the problem is that i have a libs directory in the scope of webpack. excluding that folder everything works fine.\nthanks for your time.\n. ",
    "sebastienbarre": "Oh good news. I was performing an npm update and it would fail, unfortunately, so I figured it wasn't quite ready yet:\nnpm ERR! peerinvalid The package react does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer react-hot-loader@1.2.3 wants react@>=0.11.0\nWith package.json like this:\n\"dependencies\": {\n    \"react\": \"^0.13.1\",\n...\n  \"devDependencies\": {\n    \"react-hot-loader\": \"^1.2.3\",\n...\n. Apologies, you are correct.\n. ",
    "iansinnott": "Will do. Thanks @gaearon. Haven't had time lately but I will let you know I run into this issue again\n. Thanks @skaapgif for the info. I haven't had the issue again since but hopefully this thread helps anyone else who runs into it.\n. ",
    "skaapgif": "@iansinnott I just ran into this same problem while playing around with react-hot-loader and react-router. What caused the problem for me was that I had kept react-hot-loaders default of rendering <App> into document.getElementById('root') and also rendered <Router> into document.body, you should only have one of these. Hope that helps.\n. ",
    "xgrommx": "Yes I mean IOS, Android, Windows phone\n. @tcoopman Okay and where I should connect? To 0.0.0.0:3000 on my phone.\n. I use this\nThis is my config\n``` js\nvar webpack = require('webpack');\nmodule.exports = function(ip, port) {\n  return {\n    devtool: 'eval',\n    entry: [\n      'webpack-dev-server/client?' + ip + ':' + port,\n      'webpack/hot/only-dev-server',\n      './js/app'\n    ],\n    output: {\n      path: __dirname + '/js/',\n      filename: 'bundle.js',\n      pathInfo: true,\n      publicPath: '/js/'\n    },\n    resolve: {\n      extensions: ['', '.js', '.jsx', '.styl']\n    },\n    module: {\n      loaders: [\n        {test: /.js?$/, loaders: ['react-hot', 'babel'], exclude: /node_modules/},\n        {test: /.styl?$/, loader: 'style!css!stylus?paths=node_modules/'}\n      ]\n    },\n    plugins: [\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.NoErrorsPlugin()\n    ]\n  };\n};\n```\nAnd this is my server\n``` js\nvar ip = require('ip');\nvar port = 3000;\nip = ip.address();\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar config = require('./webpack.config')(ip, port);\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n  }\n})\n.listen(port, ip, function(err, result) {\n  if(err) {\n    console.log(err);\n  }\nconsole.log('Listening at ' + [ip, port].join(':'));\n});\n```\nNow it work on all my devices.\n. ",
    "appsforartists": "Before You Begin\n1) Add an entry for your app to /private/etc/hosts:\n127.0.0.1       my-app-name.private\n2) Make sure your webpackDevServer.listen call doesn't specify a host:\n``` javascript\nrequire('prfun');\nWebpackDevServer.prototype.listen = Promise.promisify(WebpackDevServer.prototype.listen)\n// ...\n// Notice, there's no host here; only a port:\nwebpackDevServer.listen(8080).then(\n  // ...\n)\n```\niOS\n1) Download and install Charles on your computer.\n2) Use its DNS Spoofing feature (\uf8ff-Shift-D) to point all requests to the *.private TLD to 127.0.0.1.\n3) In your iPad's WiFi settings, set your computer's IP as a proxy.\n4) Go to http://my-app-name.private:8080 in Safari.\n5) In Charles, authorize your iPad's proxy connection.\nAndroid\n1) Root your device. (You can find instructions for your particular hardware with a Google search.)\n2) Install Hosts Editor.\n3) Use Hosts Editor to point my-app-name.private to your computer's IP address.\n4) Go to http://my-app-name.private:8080 in Chrome.\n. I just wrote that up from memory.  Let me know if it needs editing.\n. @gpbl that works as long as you only ever want to test one domain.   I have unique hosts set for all my projects.  This is especially important if you are developing an API and an app concurrently.\n(The nice thing about your technique is that it uses mDNS, so you don't have to worry about Apple's utterly broken resolution of .local URLs.)\n. @xgrommx Glad you got it working.  I'd still remove the ip arg from the listen call, so you don't end up confusing yourself later if you try to move to domains and your app stops responding.\n. @gaearon I think we can close this now.\n. I should start doing some technical writing.  I've also got one I want to write about an experiment I'm going with functionally-reactive flux.\n. :smiley: \n. In next-docs, Webpack is recommended as a fallback if you aren't already using Babel.  Is there a difference in featureset or reliability between the two adaptors, or is it entirely personal preference?\n. @gadicc That was my hunch.  Glad it will be documented. \ud83d\ude03 \n. ",
    "savovs": "Still struggling with this guys, I'm not really sure how to set up my config file :( http://stackoverflow.com/questions/37602797/accessing-webpack-dev-server-from-local-network-react-hot-reloading-on-mobile\n. ",
    "kittens": "\nFinally, with ES7 annotations\n\nJust to be pedantic they're decorators and are very different from annotations. :stuck_out_tongue_winking_eye: \n\nIf Babel had a transform that wraps each class declaration into a specified function, we would not need this trickery at all.\n\nThis would be absolutely doable with the plugin API coming in the next major.\n. ",
    "milankinen": "+1 to this issue :+1: \nWhen someone starts to use devtool like this without the understanding of its limitations, he/she probably ends up writing code that prevents the tool working right => tool\u00b4s fault => go to the forums telling that \"tools is not working\". IMO, that's why listing the known limitations is crucial for maintaining \"good publicity\".\nSorry, I didn't fully understand your comment: what are are the other problems? Actually I was positively surprised how well the React Hot API worked. \nOnly problematic case was to maintain the original react package over reloading events (when bundle reloads, it contains new react as well, which does not known about the existing classes or mounted root instances) so I decided to override the original require function at the beginning of the module. This function caches the first instance to the window and serves it when the next bundle components require React.\nI'm also worried about the following issues:\n- Memory consumption with big bundles? How well can JavaScript engines manage the GC when many big bundles have been thrown to the trash bin after multiple reloading events?\n- Module renaming? Might there be conflicts when same module gets renamed or moved (since Hot API uses filename as an identifier)?\n- Non-forward compatible state? Well.. this is obvious: if your reloaded application assumes that your state has a schema that is not compatible with the current one, then you just have to reset the state (reload page). But could this be avoided somehow? \nWhat kind of challenges have you encountered? This is a great honor to me and I\u00b4m also excited about this co-operation.\n. ",
    "jlongster": "Personally I think what's more interesting for the backend is more general patching of modules, like replacing all top-level functions. The backend tends to have a bunch of code outside of React components. Also, can't you just render everything client-side while developing, or is something I'm missing?\nI'm actually really close to my last blog post in the backend webpack series which shows how to hot-patch backend servers (generally speaking, not using react-hot-loader, but using the same approach).\n. I find webpack's HMR infrastructure a bit unintuitive, to be honest. What I really want (coming from a Lisp background) is to literally replace a function or class in place. Webpack's HMR encourages reloading not only the entire module, but all the modules up the dependency chain. It has to do this because if a module is reloaded, anything that depends on it must be reloaded as well to see the changes. This works best when the root module is the only one with side effects, like starting a server.\nThat's what you ran into. You needed to stop the server in a dispose handler, right? That way the new root module could start a new one. Another way you could handle it would be to pass the server instance along:\n``` js\nvar server;\nif(module.hot) {\n  if(!module.hot.data) {\n    // no data means this is the first time this module is run\n    server = new Server();\n    server.listen();\n  }\n  else {\n    server = module.hot.data.server;\n  }\nmodule.hot.dispose(function(data) {\n    data.server = server;\n  });\n})\n```\nI most likely made some mistakes in the above... but like I said, not intuitive at all.\nMy post shows a technique similar to react-hot-loader, but instead of patching existing react instances, it patches all the top-level functions in a module. Yeah, these kinds of things get hairy, and I'm usually hesitant about them too. But it turns out that if you restrict the heuristics to make it extremely simple, it's really straight-forward. If you define a top-level function foo in module A, start the server, change foo and save the file, my loader will take the source of the new foo, eval it inside module A to create a function instance, and set foo to it points to the new instance. This only happens with top-level functions defined like function foo() { ... }. No way we can hot patch closures or all that without touching the engine debugger. Just doing top-level functions, this patching should never change semantics and is always created inside the exact same scope.\nWe can probably improve the heuristics to patch a few more things, but I'm starting stupidly simple to prove that it can be done consistently without breaking things.\nWhat will be interesting for React components is patching classes. No reason we could not do the exact same things for classes: use eval to create a function in the same scope, and simply set it on the prototype (MyClass.prototype.foo = newFoo). If that works, it will probably solve your use case.\nHowever, react-hot-loader definitely is the well-trodden path so it might make sense to get server-side support in it as well.\nI'm still a little confused as to what code is running server-side inside a React component that can't be run client-side? Usually with isomorphic apps you can disalbe server-side rendering and everything just happens on the client, but you must have server-specific code in your components. I'm curious what code that is.\n. It totally makes sense! I haven't done a really complicated server-side app, so I was merely curious to learn what people are putting into components.\nI'm in my blog-writing mode, sorry if I dumped too much here. I think we need a companion to react-hot-loader on the server, whether or not it's baked into react-hot-loader or not.\n. There's potential in #3, in that I could take your prototype patcher and use it with my hot loader, and that might make server-side stuff work well. I don't really know yet though. If you'd rather avoid complicating RHL, I say we try that first and see what we can get out of it.\nI'm happy to try to extract out the prototype patching myself and see if it's worth doing, unless you want to abstract it out regardless.\n. @skevy The idea of my article was to show that all of these hot loaders have the same functionality: use webpack's HMR to get module updates. How you apply the updates should be easy to configure.\nTheroetically, if we extract out the ES6 class patching, I could add an option to monkey-hot-loader to tell it to use just that. If you used that, you would basically (I think) have react-hot-loader without the React-specific stuff like forceUpdate.\nThis is all pretty theoretical though, and maybe that much abstraction isn't worth it. If it's just a few lines in RHL might be worth just doing it there, but it's @gaearon's project so it's up to him.\n. Let me know what you end up with. You could fork RHL too and show @gaearon how much complexity it would add. If not much he might be convinced.\nIf you end up integrating ES6 class patching with monkey-hot-loader, I'd love to see how well that works!\n. @RickWong I'm confused, isn't that still killing the entire server and restarting it basically? That loses a lot of hot reload benefits.\n. @RickWong that is cool, but that wouldn't be very hard to do with webpack itself. In the top-level module, you only start the server if there isn't one already on module.hot.data, otherwise use the existing one if reloading.\npiping does give you that if you don't already use webpack for the backend, which is cool! :)\nWhat I really want though is a true REPL. It's too useful to declare some state for debugging and build it up between evals, which is real interactivity. Plus, if you happen to have any module-level state (which you shouldn't do that very much, but can be useful for something like caching), you will lose that. See my post here: http://jlongster.com/Backend-Apps-with-Webpack--Part-III\nI don't mean to take away any of the current efforts of backend live reloading, I just pine for a Lisp-style REPL, but I'm about to start using ClojureScript anyway so I'm not too concerned with it now. :)\n. This is the accordion component that I was tweaking, and it's not a connected component: https://gist.github.com/jlongster/5d97bac8c9d776d12a7e8b2c17a6b3af\nThe component which creates the accordion, however, is: https://gist.github.com/jlongster/204d05ca52874d099ea4ecf34ca23c15\nI don't quite understand how the new version works though, so I might still be missing something.\n. I was including the patch as a webpack entry, but I removed that and added both lines to the top of my main.js. I get a \"too much recursion\" error. Neither Firefox or Chrome is giving a stack to figure out where this is happening (Chrome is actually crashing with devtools open)\nI'd poke around some more to help with this but I don't have a whole lot of time. Any idea why it would create an infinite loop?\n. Alright, thanks for looking into it! I would love to help but I'm a little tight on time right now.\nI just noticed something odd. I tried version 1.3.0 and I'm actually still seeing the behavior of the accordion collapsing. It looks like the state is being reset with the old version too, so while I may have highlighted a problem with the new version, I may be doing something wrong. I don't really know, the old version usually worked for me, so I'll have to look into what's up.\n. ",
    "skevy": "Regarding rendering client-side while developing - yes, of course, but I just found that restarting my server (there are a few connections it's making to different db's that can cause the server restart to lag a bit) was much slower than the sub-second times HMR provided. So if I'm coding a component and I'm testing a piece of functionality that is closely related to the server-side render, I have to continuously refresh the page, which of course negates the client-side benefits of HMR and RHL, which is exactly why it would be awesome to have server-side.\nRe: doing more general patching of modules...perhaps that really is all that's needed here. If we don't have to worry about some of the other things RHL is doing (such as forceUpdating changed components) on the server, then yah, we can probably just do something more general.\nThough, I feel like there could still be benefits to having more specific HMR loaders (such as RHL) server-side, but admittedly I don't have a specific use-case at the moment.  I worry a little bit about writing a plugin to HMR that just does things super general, but perhaps I'm just jaded from the front-end. On FE you have lots of persistent state to keep (which is why HMR is so important)...on the backend, there is presumably less persistent state, thus you don't have to be as careful with how you replace things. In addition, I was having trouble getting HMR to work with express without just closing the server and restarting it (which kind of defeats the purpose), but perhaps I was just doing something wrong.\nI'll give it some more thought though, and of course read your post when it's published. :+1: \n. The specific use case was bootstrapping components. I was testing server-side flux functionality, so I needed to not disable server-side rendering. I understand that it's kind of a contrived use-case and not one that everyone runs into all the time, but I think there are definite cases where it's useful.\n. Totally agree. We'll sync back on this after @gaearon weighs in and we all get a chance to read your blog post. :)\n. Just read your post @jlongster. Great read.\nI love monkey-hot-loader. Smart stuff.\nI still feel like there's use to having react-hot-loader work on the server, in order to work with the workflow you described in your post and building isomorphic apps. As I said, I think we really just need to turn off the forceUpdating (because it's not necessary) when on the server. Though, I totally agree with @gaearon's point of not complicated RHL, so I'm not sure of the proper route to go here...\n. Yah. Definitely on the same page.\nI will prototype it, and see how gross it is.\n. ",
    "RickWong": "About server-side hot-loading check out https://www.npmjs.com/package/piping\nI use it in my starterkit https://github.com/RickWong/react-isomorphic-starterkit to enable instant code updates, both on the server and on the client (using React Hot Loader). \n. @jlongster It reloads the application, but does not restart the Node server. In practice that means the changes are available instantly < 1s compared to a full node-supervisor / forever restart which can take up to 2 or 3 seconds. But don't take my word on it, try it out yourself if you have a minute or two. Combined with webpack for client-side hot reloading, developing web applications has never felt so interactive before.\n. ",
    "gdborton": "That should work as well.  Did you want to do anything specific with the exception?\n. ",
    "matthewwithanm": ":thumbsup: No problem!\n. ",
    "shane13hsi": "Hi, @gaearon\uff0c I\u2019ve got the same problem. You can reproduce the error by:\n1. commenting the line https://github.com/shane13hsi/bee/blob/28dceadd4d021477c34adaff6d587521d072f426/src/components/Navbar.js#L1(And the browser did not hot update after comment)\n2. uncomment (cause already commented, the module doesn't exist of cause. So the remove outdated modules got errors. )\n3. see the log in chrome dev tool\nThank you advance.\nSee this https://github.com/webpack/webpack/issues/682\nThe related file may be https://github.com/webpack/webpack/blob/master/lib/HotModuleReplacement.runtime.js#L375\nthe moduleId in outdatedDependencies is already not found in installedModules.\n. ",
    "hiattp": "Seeing this as well, is this active as an issue in Webpack somewhere? Just found this, now closed.\n. ",
    "0nn0": "I'll close the topic since it's not related to react-hot-loader.\nI tried it with the react-hot-boilerplate setup, where I added a css file with some styles and changed \"localhost\" in server.js to \"0.0.0.0\". There it works like a charm and the styles. \nThe problem did arise once I used a setup like isomorphic-hot-loader where you run an express server next to the webpack-dev-server. However if in the file e.g. index.html where you link to your entry.js file you replace \"http://localhost:3001/public/client.js\" to \"[ip-address]:3001/public/client.js\", it works well too.\n. ",
    "KeKs0r": "where exactly? For the server or for webpack?\n. ahh thanks, that was the issue. Now I just have to deal with externally loaded react.\n. ",
    "christianalfoni": ":+1: \n. ",
    "mmahalwy": "I still have this problem....\n. ",
    "stevenhauser": "For what it's worth @gaearon I had this issue and alpha-3 fixed it for me. Thanks for all the work you're doing on all of these projects!\n. ",
    "chrisvariety": "The exact message I get when trying this is Cannot set property fooBarMethod of #<Component> which has only a getter\n. ",
    "slonoed": "@gaearon should I add test for work with autobind-decorator?\n. For me this issue not actual now. I switch to arrow functions in class definition.\nclass Cmp extends Component {\n  myBindedFunc = () => {\n     this.callSmth();\n  }\n}\nCan I close this issue?\n. @lancefisher I think there is no spec for arrow functions in class.\nThis is babel stuff https://gist.github.com/jeffmo/054df782c05639da2adb\nBabel put this functions assignments in constructor. And bound to this in constructor (i.e. instance of class).\n@opatut why you want bind render? It is always called by library code, isnt it?\n. ",
    "vasa-chi": "Dunno if much help, but here is a test for react-hotify for this problem (using core-decorators):\n``` js\nimport React, { Component } from 'react';\nimport createShallowRenderer from './helpers/createShallowRenderer';\nimport expect from 'expect.js';\nimport makeHotify from '../src/makeHotify';\nimport { autobind } from 'core-decorators';\nclass Bar {\n@autobind\n  getProps() {\n    return typeof this.props;\n  }\nrender() {\n    return {this.getProps()};\n  }\n}\ndescribe('autobind usage', function() {\nlet renderer;\n  let hotify;\nbeforeEach(() => {\n    renderer = createShallowRenderer();\n    hotify = makeHotify();\n  });\nit('should bind methods of hotified components', function() {\n    const HotBar = hotify(Bar);\n    const barInstance = renderer.render();\n    expect(renderer.getRenderOutput().props.children).to.equal('object');\n  });\n})\n```\n. ",
    "cpsubrian": "Happy to help test possible fixes. Also wondering if this is a general problem interoperating with decorators in general, and if that should be the focus rather than @autobind in particular?\n. I've done the same, but consider it a temporary fix. I prefer the decorator approach (because I bind at the class level, not the method level). I will chime back in here if my other decorators have issues (I haven't gotten that far yet, this is my first hot-reload project).\n. So far so good for me with 2.0.0-alpha-2. Note: I'm using class-level autobind mostly, but method-level autobind in some cases. At the class-level I needed to position @autobind after (below) the @connect decorator supplied by react-redux, otherwise the scope of the methods wasn't properly set.\n. @gaearon Yep, sorry didn't mean to imply it was a bug, just a note for other redux users so they don't make the same dumb mistake.\n. ",
    "lelandrichardson": "@slonoed this arrow function approach works? Will it always? I would have thought that in that scenario the arrow function would have made this bound to the this in the context outside of your class definition. Is this just a convenient bug or is this actually the spec'd behavior of arrow functions inside class definitions?\n. ",
    "opatut": "I am having issues with the arrow function, actually. The hot reloading does not apply when using render () => { ... } instead of render () {}. Hence, no 'autobinding' :( Any ideas on how to fix this?\n. It's not only about binding render, when I add other methods, such as event callbacks, I cannot change logic inside them with hot reloading, since they are not proxied.\nHowever, I find that binding the methods with .bind() or .call() upon usage works great, especially after I discovered the new (stage 0) function bind syntax. Example:\n``\nclass MyComponent extends React.Component {\n    onClick () {\n        console.log(this); //this` is bound\n    }\nrender () {\n    return <button onClick={::this.onClick}>Click me</button>;\n}\n\n}\n```\n. ",
    "steadicat": "2.0.0-alpha fixes hot reload of fat arrow methods for me. Thank you!\n. @gaearon You're right, it turns out I have a decorator on my components that somehow works around this issue. Here\u2019s a reduced test case (code below):\n\n``` js\nimport React from 'react';\nfunction wrap(Component) {\n  return class Wrapper {\n    render() {\n      return ;\n    }\n  }\n}\n@wrap\nexport default class Test {\nrender() {\n    return this.renderInner();\n  }\nrenderInner = () => {\n    return Version 4;\n  }\n}\n```\n. ",
    "yangmillstheory": "I don't think this is fully working with react-hot-loader@3.0.0-beta.2  yet.\nSmall test commit here.\n\nIn the demo above there's 3 steps:\n1. without @autobind on onClick, click the button. This doesn't have the right context - this is null.\n2. add @autobind to onClick - this is recognized by RHL and correct logs the right state in the console (this is bound to the Counter instance).\n3. remove @autobind, this is still bound to the Counter instance (you would expect it not to be).\nRHL doesn't remove the binding when using fat arrows to declare the method either.\nHope that's helpful, would really love to use this with RHL!\n. ",
    "episodeyang": "I'm having trouble too, no production ready example yet.\nIt might make sense to reopen this issue.\n. got it! I moved to the beta and everything worked after I updated to node 6.x, so it is all good!\nThanks for the response.\n. ",
    "eriknyk": "Thanks dude!\n. ",
    "mtscout6": "If you want to see the above error on that branch run:\nnpm install\nnpm run docs\nIt should load up on port 4000 with the webpack-dev-server hosted on port 4001.\nI see this error when I change the docs/src/HomePage.js component text.\n. That did it thanks!\n. ",
    "quangbuule": "Yeah, but I think that if some guys here have solved the problem.\nIt would be nice if you put some thoughts in here:\nhttps://github.com/webpack/webpack-dev-server/issues/174#issuecomment-102079669\n. Hard to fix on huge projects with tons of nested HoCs (since it is proper way to do HoCs). I created babel plugin to solve this:\nhttps://www.npmjs.com/package/extract-hoc. I added some tests here: https://github.com/quangbuule/extract-hoc/blob/master/test/snapshots/babel.test.js.snap. @mqklin No, the react-hot-loader is suppose to be better than previous version/library, but from what I see, developing app with react-transform-hmr is much less painful. There are several cases that your code might have and  won't work with react-hot-loader. My library is just to solve the case when you used nested HoC wrappers.\nIt basically convert this (which not work with react-hot-loader):\njs\nvar FinalComponent = foo()(bar()(TheComponent))\nto things like this:\nvar FinalComponent_arg1 = bar()(TheComponent);\nvar FinalComponent = foo()(FinalComponent_arg1);. @mqklin have no idea, my team haven't used the React 16 yet :).. ",
    "timnew": "To fix this issue, I think it should avoid to read and set property directly, instead call Object.getOwnPropertyDescriptor() to read property and call Object.defineProperty again to override it. This approach should work because descriptor.configurable is set to true by default;\nthis is what _createClass look like:\n``` js\n\"use strict\";\nvar _Object$defineProperty = webpack_require(29)[\"default\"];\nexports[\"default\"] = (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n  _Object$defineProperty(target, descriptor.key, descriptor);\n}\n\n}\nreturn function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\nexports.__esModule = true;\n/**\n* WEBPACK FOOTER\n  ./~/babel-runtime/helpers/create-class.js\n  module id = 23\n  module chunks = 0\n **/\n```\n. ",
    "balanceiskey": "Hmmm, that might be a good option. So I guess in dev environments we'd kill this webpack.watch approach and just spin up the server. Is this the only/best option? Something about having two servers running to accomodate this feels heavy.\n. Thanks guys! I'll close out the issue for now as this should do the trick. \n. ",
    "threepointone": "Ok, that helped. I also had to republish disto with compiled files(which I should probably do from now on for modules that I publish), and set up a proxy to the dev server (I used express-http-proxy). Thank you!\n. ",
    "leozdgao": "I meet the same problem. Here is my config:\n```\nimport path from 'path'\nimport webpack from 'webpack'\nimport { entryPoint, externals, autoprefixerLoader } from './baseConfig'\nimport config from '../config'\nconst webpackDevServerAddress = http://localhost:${config.webpackDevPort}\nconst cssLoaderForDev = style-loader!css-loader!${autoprefixerLoader}\nexport default {\n  devtool: 'eval',\n  entry: [\n    webpack-dev-server/client?${webpackDevServerAddress},\n    'webpack/hot/only-dev-server',\n    entryPoint\n  ],\n  externals,\n  output: {\n    path: process.env['PUBLISHPATH'] || './assets',\n    filename: 'bundle.js',\n    publicPath: ${webpackDevServerAddress}/assets/\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin()\n  ],\n  resolve: {\n    extensions: [ '', '.js', '.jsx' ]\n  },\n  module: {\n    loaders: [\n      { test: /.jsx?$/, loader: react-hot-loader!babel-loader, exclude: '/node_modules' },\n      { test: /.css$/, loader: cssLoaderForDev },\n      { test: /.less$/, loader: ${cssLoaderForDev}!less-loader }\n    ]\n  }\n}\n```\nAnd, yes, my webpack.dev.config.js:\n```\nrequire(\"babel-core/register\")\nmodule.exports = require('./webpack/webpack.dev')\n```\nI do not fully understand the solution above...I do not comment the exclude: '/node_modules', and I think I haven't the uncompiled module in node_modules.\n. It works, thanks! :smile: \n. ",
    "smondal": "Set the valid target thing for webpack.\n```\nmodule.exports = {\n  // ...\ntarget: 'node',\n};\n```\n. ",
    "AprilArcus": "My educated hunch is that since ngReact is handling mounting / unmounting via its own React in ngreact/node_modules/react, react-hot-loader should be pointed at ngreact/node_modules/react/lib/ReactMount instead of at react/lib/ReactMount.\nRegardless, I'll have a test case for you ASAP. Thank you very much!\n. Confirming this - changing references to 'react' to 'ngreact/node_modules/react' in index.js resolves this issue. I'll submit a PR with an option to configure which react react-hot-loader uses via the webpack query string.\n. Thanks again; this looks like a non-issue for us. Love react hot loader and super excited to show it to my team!\n. Unfortunately I'm no longer working on that codebase and can't migrate it to React Hot Loader 2, but FWIW we determined it to be an issue with package install order in npm. After rm -rf node_modules; npm install there was nothing to troubleshoot.\n. ",
    "cadorn": "I think I am getting closer. When I run:\nwindow.postMessage(\"webpackHotUpdatedf943cf06be4efe7882a\", \"*\");\nI get a 404 for http://localhost:8082/webpack/df943cf06be4efe7882a.hot-update.json if the hash is invalid (expected). Or it seems to find it (if I used previous hash before modification) but nothing gets reloaded on client.\nThe hot file being loaded does have one entry in it {\"h\":\"49d286bd194695484a4b\",\"c\":[0]}\nSo it appears the client is not refreshing something?\n. So it appears I had my paths wrongly configured and thats why I got the 404. It seems to trigger the hot reloader now. Thanks!\n. ",
    "Surreal9": "I've taken this approach to my app but it seems to trigger all of my entry points to be re-processed with every update. I'm used to working with webpack-dev-server where updating one file simply shows that one file was updated, but for some reason when I update a file when using this approach/syntax with react-hot-loader I get the same output in the console as I do when I first fire up the new RHL'd webpack-dev-server. Is there something I'm missing that could allow me to use multiple entry points, but not have all of the files re-checked by a single file update?\n. Unfortunately not really.. I basically decided there was no benefit to switching over my main project to RHL since it was taking just as long to 'hot-load' as it was in doing a plain old refresh which was already built in with webpack-dev-server (due to RHL re-building the entire bundle each time).\nI have since re-visited RHL in a new project, but I unfortunately see the same behaviour, (of re-building the entire bundle every time), even though this project only uses a single entry point. I've just decided to live with it.\n. I was linked to https://github.com/webpack/webpack/issues/669 though, which remains open, so maybe that's still related\n. ",
    "Gillingham": "@Surreal9 Did you ever find more information or a resolution to that?\n. ",
    "ghost": "Just a quick note on here. I couldn't get it to work using the answer provided by gaeron (https://github.com/gaearon/react-hot-loader/issues/141#issuecomment-106878103).\nBut this worked:\n{\n  entryPointA: ['./entryPointA', 'webpack/hot/only-dev-server', 'webpack-dev-server/client?http://0.0.0.0:3000'],\n  entryPointB: ['./entryPointB', 'webpack/hot/only-dev-server', 'webpack-dev-server/client?http://0.0.0.0:3000']\n}\nSince that worked, I didn't bother to look into why that worked while the answer given previously did not work.\n. Are you using extract text plugin?\n. @calesce @gaearon\nLooking for a place where babel-preset-react-hmre can either be inlined to another codebase that makes sense, or someone that is using it to have commit and npm access. \nhttps://github.com/danmartinez101/babel-preset-react-hmre/issues/46#issue-180449718\nOne recommendation so far was a place like the babel monorepo. \nI was also wondering how / if it would fit into this side of the equation?  \nOr do you have other ideas than merging it into somewhere maybe? It is basically a dozen lines of config that gets downloaded quite a bit.\n. Ah, wow, that is how far removed I've been... I got the different implementations mixed up. If no-one is maintaining the versions that that preset goes with... everything is pretty simple. \nThanks for straightening me out!\n. Thanks for advise @jtangelder. ",
    "monochrome-yeh": "@gaearon good answer! you have solved my problem \ud83d\udc6f \n. @pgsandstrom , thanks, it's simple way for solve my issue \ud83d\udc6f . ",
    "JonathanGuo": "@dcefram This actually works. webpack-dev-server/client cannot be loaded as an individual entry. It has to be bundled into each entry.. ",
    "hkjpotato": "It is better not to separate  hmr related code in a different entry chunk if you are developing with Django and using django-wepack-loader. \nIf you keep the entry structure of development.config and production.config the same, you don't need to modify the template to load different static files.\n. ",
    "Dimon70007": "I have fixed hot-reloading with multiple entry points in my project by removing babel-polyfill from all entries in webpack.config.dev.js and using config like in the example above/. ",
    "thylle": "\n'webpack-dev-server/client?http://0.0.0.0:3000'\n\nI had the same issue, added these lines but it didn't work. - Had to add (both) .js files to the index.html and then hot-reloading worked.. ",
    "glenjamin": "Seems to be fixed :+1: \n. It seeks like perhaps these\n\nShow syntax errors in an overlay (maybe even switch to webpack-hot-middleware by @glenjamin)\nRecover from module definition level errors\nRecover from file not found errors\n\nShould be out of scope for RHL, as they're not react specific? Maybe just include suggested approaches in docs?\nAfaik, hot-middleware handles all 3 cases currently.\n. @gaearon do you have any notes which explain why the React Router hack isnt needed anymore? I can't see any difference from when the original issue was hit?\n. I was about to write something about how I didn't understand how that differed from the pre-v3 approach, but I think I have it now:\nPre v3\n\nAttempt to detect type of thing at definition time\nReplace definition in-line with proxy\ncreateElement is normal\n\nv3 alpha\n\nTag every export of every module\nLeave the original definition alone\ncreate/update proxies by tag when createElement is called\n\nv3\n\nTag every export of every module\nLeave the original definition alone\nCreate/update proxies in a global map based on tag at definition time\nResolve to the current proxy when createElement is called\n\nThat look about right?\n. Is this warning still relevant? https://github.com/gaearon/react-hot-loader/pull/240/files#diff-8be7b0cf5cd0de13e69f70bcf3a11143R90\n\nReact Hot Loader: ${uniqueLocalName} in ${fileName} will not hot reload correctly because ${baseName} uses <${uniqueLocalName} /> during module definition. For hot reloading to work, move ${uniqueLocalName} into a separate file and import it from ${baseName}.\n\nWhat stopped createElement from getting the right component in this case originally?\n. > Since the initial render was done with vanilla element, registering a proxy now would cause it to unmount on the next render, as we would start returning a proxy next time.\nAh, that makes sense.\nWould it be possible to place the register call immediately after the definition? That way there wouldn't be a dead zone between definition and registration.\n. I ran into this today when using react router properly for the first time, and was surprised that no-one had tackled this before.\nHow do all those people work with a Router that won't hot reload without getting really frustrated?\nIdeally, the proper fix for this should be in resolving https://github.com/reactjs/react-router/issues/2182 - bcause the warning here is just cheeky: https://github.com/reactjs/react-router/blob/master/modules/Router.js#L131 \"Sorry, this looks like a declarative component but it's actually an imperative API call and we're doing to ignore your new routes!\"\nI'll take my further comments / help over to that thread now \ud83d\ude04 \n. I just had an idea I wanted to write down, not thought through heavily yet.\nWhat if instead of trying to patch <Router>, you patch <Route> to apply the proxy code.\nSomething along these lines:\n``` jsx\n// Make a note of the Route component so we can detect it later\nrequire('react-hot-loader/patch-router')(Route);\n// ...\nReact.createElement = function(type, props, ..children) { \n  // as well as all the other stuff\n // When we see a Route, proxy its component\n  if (type == Route && props.component) props.component = proxy(props.component)\n  // ...\n}\n```\nThis sort of approach would ensure that the component is proxied whenever the routes list is \"rendered\" even though those <Route> children are never actually applied to <Router>\nExactly how and when to do this is up for debate, but I think the general idea of opt-in to detecting Route and converting those components to proxies should sort things out.\n. Interesting question.\nIt might be possible to load only the overlay, although there isn't an obvious way to get a working webpack build to do that when the intended one is broken.\nIf we found a way to load a stub with an overlay, I'm not sure whether it could be hot reloaded back into the main application.\n. Is it worth dropping the component prop and only having children before this goes into a final release perhaps?\n. ",
    "veke": "It was the resolveLoader.root setting. Needed to set the path where to look the modules.\n. ",
    "TYRONEMICHAEL": "Just wondering if this has been resolved? See it is closed now. Do we have to use ES6 classes for react-hot-realoder to work?\n. My apologies, I see this has been resolved with 1.0 and the public API.\n. I am unable to get factory functions to hot reload. I am still getting the message ' The following modules couldn't be hot updated'. I know this is because of the 'isReactClassish' file, but the docs state if the function has a render method, it will automatically be hot by default. I am also not having any luck with Module.makeHot.\nfunction helloFactory() {\n  return {\n    render: function() {\n      return <span>Hello World</span>;\n    }\n  };\n}\n. https://github.com/gaearon/react-transform-boilerplate solves the above issues. Thank you for the awesome work.\n. ",
    "Cottin": "although, there is no boilerplate for non-babel yet :'(\n. I've been trying to research this for a while now and I'm still getting this warning. Is it just me?\nhttps://github.com/Cottin/some-boilerplates/tree/master/react-hot-warning\nIf somebody wants to reproduce, I made a minimal example above.. @theKashey Thanks a lot for explanation! Works great with componentDidMount!. \nI get the above error when using Context. You've seen this before? Me doing something wrong?. ",
    "voronianski": "Components are rendered on server and when I edit them I restart server through nodemon utility.\n. @gaearon thanks! it works, my fault :hankey: \n. ",
    "Sawtaytoes": "I'm getting a similar error except the number is 76 for me:\n[HMR] Waiting for update signal from WDS...\n[WDS] Hot Module Replacement enabled.\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\n[HMR] Checking for updates on the server...\n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n[HMR]  - 76\n[HMR] Nothing hot updated.\n[HMR] App is up to date.\n``` coffee\npath = require 'path'\npaths = require __gulp + 'paths'\nwebpack = require 'webpack'\nmodule.exports =\n    colors: true\n    debug: true\n    devtool: 'eval'\n    entry: [\n        'webpack-dev-server/client?http://localhost:8080' # WebpackDevServer host and port\n        'webpack/hot/only-dev-server' # \"only\" prevents reload on syntax errors\n        './' + paths.root.dest + 'main'\n    ]\n    module:\n        loaders: [\n            test: /.js$/\n            loaders: ['react-hot']\n            include: path.join(__base, 'web')\n        ]\n    output:\n        path: '/'\n        publicPath: '/'\n        filename: 'bundle.js'\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n```\n``` coffee\nwebpack = require 'webpack'\nwebpackConfig = require __gulp + 'webpack-config'\nwebpackDevServer = require 'webpack-dev-server'\nops.webpack = webpack\ngulp.task 'webpack', ['webpack.watch']\ngulp.task 'webpack.watch', (callback) ->\n    hostname = 'localhost'\n    port = '8080'\ntry hostname = require __gulp + 'machine-address'\n\nnew webpackDevServer ops.webpack(webpackConfig, (err, stats) ->\n    if err\n        throw (console.error)('webpack', err)\n    console.info '[webpack]', stats.toString colors: true\n),\n    # Server and Middleware options\n    contentBase: './' + paths.root.dest\n    historyApiFallback: true\n    hot: true\n    https: false\n    publicPath: webpackConfig.output.publicPath\n    stats: colors: true\n.listen port, hostname, (err, stats) ->\n    if err\n        throw (ops.showError)('webpack-dev-server', err)\n    console.info '[webpack-dev-server]', 'http://' + hostname + ':' + port + '/webpack-dev-server/'\n    callback()\n\n``\n. I got it working by scrapping Gulp. Don't remember what the issue was.\n. This is resolved in react-hot-loader4.0.0-beta.12.\n. That would be because I havehot: true`. I'm running unit tests in the browser and React is showing information about the tests, parsing TAP output messages.. I understand.\nI found a workaround for my issues with v3, so I at least have a working solution for now.\nv4's hot allows hot reloading React components in legacy applications such as AngularJS which I do have to deal with.\nThe v4 workaround is doing a full mount instead of shallow. This had the unintended side effect of mounting components that use Redux or React-Router down the chain. Unless I have an explicit need, I don't mock Redux when testing.. I came up with a workaround:\n```js\nimport React from 'react'\nimport TestComponent from '@shared/components/TestComponent'\nimport renderEntrypoint from './renderEntrypoint'\nrenderEntrypoint()\nmodule.hot\n&& (\n  module.hot.accept(\n    '@shared/components/TestComponent',\n    () => renderEntrypoint()\n  )\n)\n``\nSince this file is meant to be overridden in other projects, I don't like the fact that I have to duplicate themodule.hot.acceptcode in other places depending on the name of the component being loaded. v4 seems to have a fix for this because I'd just need anotherhotwrapper, but it looks like v3 might be stuck since I don't know how it would understand that while this component is wrapped deep, it'simport` statement is somewhere else.. ",
    "fabriciocolombo": "I am using Windows 7 for developing. I am running the server and browser on same machine, and hot reload works fine with both wepack-dev-server host: localhost and 0.0.0.0. I will try access from virtual machine to test.\n. ",
    "grssnbchr": "I am developing on a Ubuntu VM (VirtualBox). When setting the IP in Webpack to 0.0.0.0, I can access the server from outside (i.e. my Windows host) the via (using bridged network) - however, hot reloading does not work. Is there a solution for this? I.e. make at least \"normal\" reloading work, i.e. a full page refresh after a file is saved? I think it has to do with the sockets.\n. ",
    "SimenB": "0.0.0.0 is supported in webpack-dev-server@1.11.0 https://github.com/webpack/webpack-dev-server/commit/eb50101b449d1fb99600d9c710db70679f6f4592\n. Woo! :tada:. React-proxy hasn't seen a commit in 11 months, will it be getting some love?\nAnd could you link to the outstanding issues?. ",
    "dariocravero": "It's perfectly fine! Thanks :)\n. ",
    "ptmt": "It's more related to webpack, you're right. For some reason, the exception was already in Troubleshooting.md:\nUncaught TypeError: Cannot read property 'NODE_ENV' of undefined\nAnd it's on the first position at Google, so it's just confusing. Now I get it, this is because https://github.com/mjohnston/react-native-webpack-server/issues/34, and the right solution is adding to whitelist only ES6 node_modules in loaders, not including react.\n. ",
    "minheq": "It is probably related to paths to where you serve yours assets in bundler and webpack-dev-server. I setup like this:\nwebpack.config.js\noutput: {\n    path: path.resolve(__dirname, 'public/build'),\n    publicPath: '/build/',\n    ...\n   }\nserver.js\nnew WebpackDevServer(webpack(config), {\n  hot: true,\n  publicPath: '/build/',\n  contentBase: 'public/build',\n  ...\n}\nor with terminal:\nwebpack-dev-server --content-base public/build\n. ",
    "Lordnibbler": "Where do you apply this loose option? the docs linked in #159 no longer exist\n. ",
    "prewk": "I'm wondering this as well, trying to upgrade to Babel 6\n@Lordnibbler I tried https://github.com/orlin/babel-preset-es2015-mod which enables loose, this did however not solve my problem. Can you try it out and see if it solves yours, so I can rule out issues in my own config?\n. Well, module.exports works as you say, but the problem is that it's not ES6. If you import it and then module.exports it, you might as well require it to begin with :)\nBut it's a workaround, absolutely (given that everything is transpiled.)\n. I think I'm having the same problems.. can you try switching out the code in github.tsx with a stateless component and see if it renders?\nJust do something like: export const GitHub = () => <div>Github test</div>;\nOne of my imported modules started spitting out that error. I tried exporting it as a class - error, as a React.createClass - error, as a stateless component - no error.\nI have no idea why (and my component is stateful so I can't use that solution anyway). Commenting out RHL from the webpack config solved the issue.\nAlso: Moving the module into the same file (instead of importing it) solves the issue!\nI changed another working component I'm importing from stateless to React.createClass. No problems.\nSo weird, it's like it dislikes certain modules for some reason.\nThe error @s-panferov mentioned is accompanied by this error for me: warning.js:44 Warning: Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory\n. FWIW: I tried downgrading to react-hot-loader@3.0.0.beta.0 which renders the component correctly without errors, but the hot loading stopped working entirely.\n. I'm having the same issue with System.import code splitting. It's immediately solved if I statically import the components instead (that is, removing the splitting)\n. @ctrlplusb Wow, I wrote that on a tram and then went in searching inside your start kit for a solution and found that exact one. Tried it just now and saw your comment afterwards. You're fast :)\nGreat start-kit btw, I've borrowed a lot! Thanks!\n. ",
    "idan": "I was also experiencing this. The warning goes away when I stop using an index file to reexport things in bulk.\ntl;dr: export {default as FooComponent} from './FooComponent' is what breaks things.\nSetup\nGiven a filesystem like so:\n\u2514\u2500\u252c client\n  \u2514\u2500\u252c components\n    \u251c\u2500\u2500 index.js\n    \u2514\u2500\u252c Spinner\n      \u2514\u2500\u2500 index.jsx\nwith client/components/index.js:\nexport {default as Spinner} from './Spinner'\n// ... more lines like that\nWith webpack's resolve.root pointing at client/, I'd import components elsewhere like so\nimport { Spinner } from 'components'\nAnd get the warning about Spinner being readonly.\nThe fix\nAlter client/component/index.js to export things like so:\n```\nimport {default as Spinner} from './Spinner'\nmodule.exports = {\n  Spinner\n}\n```\nEdit: no circular imports\nThis approach works okay but you can't do the following inside a component:\nimport {SomeOtherComponent} from 'components'\nInstead, load the desired component directly:\nimport SomeOtherComponent from 'components/SomeOtherComponent'\n. Given my relative lack of experience with all of this, I'd welcome a more experienced eye on the suggested setup I'm going with.\n. Following up \u2014 I switched to using react-transform-hmr and it works fine with the export { default as Foo } from './Foo' syntax.\n. Hey there,\nI'm seeing a suspiciously similar error; AFAIK I don't see require() getting redefined anywhere in the generated webpack bundle, and yet I get Uncaught ReferenceError: require is not defined from the line: var React=_interopDefault(require(\"react\"))\nUsing webpack 4.1.x with RHL 4.0.0.\nAny idea how to run this down? I haven't changed any of my code, and it works in development, but when I generate a bundle for production it seems to always contain this landmine.. To be clear @theKashey \u2014 if you can just suggest a direction for me to dig further, I'd be grateful. I'm pretty stumped. Could one of my dependencies have created this shadow? Why is that not showing up in my webpack-compiled bundle, then?\nHelp me, Obi-Wan Kenobi. You're my only hope.. @theKashey I did some more detective work and filed an issue with webpack: webpack/webpack#6752\nIt's clear that webpack doesn't notice the cjs require; when I run webpack in verbose mode, the react chunk does not list itself as being required by react-hot-loader.production.min.js.\nI created a minimal example in an attempt to isolate the bug, but I'm unable to reproduce the broken behavior with the smaller project. In that smaller project, the RHL production shim chunk is properly transformed. \ud83e\udd14 \nIf you have a moment to check out the webpack issue and say if you can think of a direction to look in, I'd be grateful!. OK, solved! This was totally my fault.\nMy config specified module.noParse: /\\.min\\.js/, \ud83e\udd26\u200d\u2642\ufe0f  because of some other library we include that is already minified.\nHence the react-hot-loader.production.min.js wasn't processed.\nThanks for the positive vibes! <3. ",
    "wilfreddenton": "@idan's workaround did not fix this issue for me. Neither did use the es2015-mod babel preset. Has anyone figured out something for this?\n. ",
    "Download": "I'm also having the same issue. I am using an index.jsx file as @idan mentions, so will try to fiddle with that.\n. @idan Thanks for your comments here. After fiddling with my exports i got rid of the issue.\n. ",
    "fgarcia": "for others trying to solve this problem, this is what I got before and after the fix\n// export { Button } from './button';\n export const Button = require('./button').Button;\n. ",
    "ButuzGOL": "any new solution ?\nmakeExportsHot warning hint not working\ncurrently I am using\nimport util from './util';\nexport { util };\n. ",
    "altaurog": "I get these warnings because I re-export my classes from index.js as mentioned above.  I did not enable loose mode, I'm just using the standard es2015 preset.  But hot reload on the components in question sure seems to be working, despite the warning.  Has anyone else noticed this?\n. ",
    "hugw": "@altaurog You are right.\nHot reloading is working as expected here but the warning is still showing.\n. ",
    "mitkaaa": "Remove warnings:\n1. Don't reexport. OR\n2. Use CommonJS export (module.exports) OR\n3. Use plugin for babel babel-plugin-add-module-exports\n. ",
    "mondaychen": "@altaurog Same thing happens to me. It seems that this warning is just a warning. The component still got reloaded. So why the warning?\n@mitkaaa I tried babel-plugin-add-module-exports but it did not work for me. I guess it only works for export default case?\n. @gaearon Can you release a new alpha version for this? Thanks!\n. ",
    "deviantony": "Same issue here, got the warning but the component still got reloaded !\n. ",
    "Zacqary": "I ran into this issue, and it's happening in a super confusing way. When I created a Main file to centralize all my exports for a particular widget, I did this:\nexport {default as actionCreators} from \"./actions.js\";\nexport {default as reducers} from \"./reducers.js\";\nexport {default as QueryEditor} from \"./view.jsx\";\nexport {ReduxQueryEditor, ReactQueryEditor} from \"./renderers.jsx\";\n(ReduxQueryEditor, in this case, being the result of React.createClass and everything else being either a function or an object)\nThe warning I got wasn't on any of the default as blah stuff I was exporting. I got the warning on ReduxQueryEditor.\nI was able to fix it like this:\nimport {ReduxQueryEditor} from \"./renderers.jsx\";\nexport {ReduxQueryEditor}\nThis is really confusing though. I'm exporting defaults from other modules, not from that one.\n. ",
    "guolin": "@Zacqary It is useful for me, thx.\n. ",
    "elado": "Another solution is\njs\nexport default {\n  Component1: require('./Component1'),\n  Component2: require('./Component2'),\n  ...\n}\nInstead of having to update both import and export sections, each component has one line.\n@gaearon - curious, is 3.0 going to solve that?\n. And FYI the links in the warning are incorrect:\nhttp://babeljs.io/docs/advanced/loose/ is 404\nhttp://babeljs.io/docs/usage/options/ doesn't mention loose mode\n. also posted on react-proxy https://github.com/gaearon/react-proxy/issues/80. @neoziro the current areComponentsEqual solution does not work with 3rd party libraries unless they change their code. Can this issue remain open until there's a better approach?. I'm having the same issue, seems like React Router is indeed causing it. When I use simple React components, hot reloading works well.\n. So here are my findings:\nI had routes.js file that looked like\n``` jsx\nimport React from 'react'\nimport { Route, IndexRoute } from 'react-router'\nimport Home from './components/Home'\nconst routes =\n  \nexport default routes\n```\nAnd Root.js\n``` jsx\nimport React, { Component } from 'react'\nimport { Router, browserHistory } from 'react-router'\nimport routes from '../routes'\nconst Root = () =>\n  <Router\n    history={browserHistory}\n\n{routes}\n```\n\nThis combination led to unaccepted state of a module, because for some reason the module queue (on webpack side) had the one with the _main in it.\nSeemed like the import Home from './components/Home' in the routes was actually the key to this failure. I moved all the routes to Root and it works.\n. Found the root of the problem:\nMy index.js imported routes too, and it probably messed the dependency tree. I removed it from there. Now everything works. So I suggest checking what is being imported.\n. cc @calesce \nI just upgraded another project to latest beta (5). It's not reloading components that are directly or indirectly imported into the index.js file.\nFor example:\nindex.js\n``` js\nimport X from './X'\nimport Root from './Root'\n// render  etc.\n```\nX.js\n``` js\nimport Y from './Y'\nexport function foo() { / something / }\nexport function bar() { return  }\n```\nY.js\njs\nexport default class Y extends Component {\n  // react component\n}\nindex needs X, and X depends on Y. In this case, updating Y won't cause a hot reload. It worked in the previous version.\n. @calesce thanks. Is this requirement new for 3-beta? Same code worked fine with 1.3.0.\n. @theKashey, don't know much about the current architecture, so a question - does RHL have to wrap dependencies with Proxy? would it make sense/be possible to exclude it from touching anything in node_modules?. ",
    "slightlytyler": "Have tried all the solutions in this thread, nothing works to remove the warning. However, hot reloading is working as expected for the relevant components.\n. ",
    "nikhilyeole1": "I too was getting this issue. After reading comments above i fixed it by doing following thing\n```\n/ file a.js /\nexport default x;\n/ file index.js /\n//previously\n// export {default as x} from a;\n//now\nexport x from a;\n```\nUseful link -\nhttps://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0#.rvrx62s5p\n. ",
    "msembinelli": "Thank you nikhilyeole1, worked first try!. ",
    "DmitriWolf": "After a lot of head-banging, we replaced\nexport {default as SampleOne} from './SampleOne/SampleOne';\nexport {default as SampleTwo} from './SampleTwo/SampleTwo';\nwith\n```\nimport {default as SampleOne} from './SampleOne/SampleOne';\nimport {default as SampleTwo} from './SampleTwo/SampleTwo';\nexport {SampleOne, SampleTwo};\n```\nand that seems to be working for us.. ",
    "lorefnon": "Yes, it indeed does. Thanks for pointing that out. \n. ",
    "ladas-larry": "There is already repo for it https://github.com/schovi/webpack-chrome-extension :) now I'm contributing to that.\n. Will this be working with TypeScript? Our team is using it instead of Babel.js. @gaearon \n. ",
    "smussell": "That works, thanks.\n. ",
    "davidpfahler": "@gaearon Just to be clear: The next step here is to implement the opt-in error report API, not any specific reporter, right?\n. @gaearon @syranide  You want to take a look at babel-plugin-react-error-catcher which just \"adds a decorator as a higher-order component to React components\". I have two questions:\n1. Is it better to use react-hot-loader to apply a decorator to all components than using something like a babel plugin or other method? Do we gain anything in terms of being able to hot reload?\n2. How could an API look like to provide decorators to react-hot-loader?\n. @syranide \nAfter a short discussion with @gaearon we think this is a reasonable course of action:\nreact-hot-loader is moving towards decorators and a babel plugin, which you can see at gaearon/react-hotify (WIP). Once this is completed, it will be easy to implement this as just another decorator (which can then also be used outside of react-hot-loader) as described by @syranide.\nIn the meantime, we don't want to pass on exception catching and rendering. So we are going to go ahead with @gaearon 's initial idea of implementing a new API like this: react-hot-loader?reporter=npm-module-name. Adding this API just to deprecate it in a few weeks in not a huge concern, because once we move to decorator as described above, we are going to make a big breaking change anyway.\n. For everyone's interest: You can find a working example of catching errors with react-hot-loader and redbox-react in the redbox-react repo. It relies on a PR to react-hot-loader and a PR to react-hot-api, so you probably don't want to use it, yet.\nThere is also an example using @timbur 's babel-plugin-react-error-catcher.\nFeedback, issues, pull request and contributions of any kind are always welcome.\n. ~~Update: So I just saw the errorReporter prop, I can supply to the AppContainer component. Unfortunately, if I throw an Error in render of my Root component, I get the following errors in the console:~~\nwarning.js:44 Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `AppContainer`.warning @ warning.js:44ReactElementValidator.createElement @ ReactElementValidator.js:221patchedCreateElement @ patch.dev.js:164render @ AppContainer.dev.js:67ReactCompositeComponentMixin._renderValidatedComponentWithoutOwnerOrContext @ ReactCompositeComponent.js:815ReactCompositeComponentMixin._renderValidatedComponent @ ReactCompositeComponent.js:841ReactCompositeComponentMixin.performInitialMount @ ReactCompositeComponent.js:351ReactCompositeComponentMixin.performInitialMountWithErrorHandling @ ReactCompositeComponent.js:323ReactCompositeComponentMixin.mountComponent @ ReactCompositeComponent.js:242ReactReconciler.mountComponent @ ReactReconciler.js:46ReactCompositeComponentMixin.performInitialMount @ ReactCompositeComponent.js:357ReactCompositeComponentMixin.mountComponent @ ReactCompositeComponent.js:244ReactReconciler.mountComponent @ ReactReconciler.js:46mountComponentIntoNode @ ReactMount.js:102Mixin.perform @ Transaction.js:136batchedMountComponentIntoNode @ ReactMount.js:123Mixin.perform @ Transaction.js:136ReactDefaultBatchingStrategy.batchedUpdates @ ReactDefaultBatchingStrategy.js:63batchedUpdates @ ReactUpdates.js:98ReactMount._renderNewRootComponent @ ReactMount.js:286ReactMount._renderSubtreeIntoContainer @ ReactMount.js:365ReactMount.render @ ReactMount.js:386(anonymous function) @ index.js:22(anonymous function) @ bundle.js:2080__webpack_require__ @ bundle.js:556fn @ bundle.js:87(anonymous function) @ multi_main:4(anonymous function) @ bundle.js:586__webpack_require__ @ bundle.js:556(anonymous function) @ bundle.js:579(anonymous function) @ bundle.js:582\ninvariant.js:38 Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. Check the render method of `AppContainer`.\n~~Why isn't this error caught?~~\n~~@gaearon As facebook/react#6020 seems to not have landed yet, I assume hot reloading does not yet support error reporting in RHL 3, right? Also, do you intend to embed redbox-react in the RHL 3 error reporting (some of your comments seem to suggest that)? I tried to to move the RHL example of redbox-react to 3.0.0-beta.2, but the error is not being caught and I don't know how to hand it over to redbox. Any suggestions?~~\nNevermind the above, I figured it out. For others: You can use the errorReporter prop on AppContainer to hand over redbox-react. You can find an example here.\n. @ntucker In order to get error catching on save with RHL 3 you'd need to build this react PR yourself and use it instead of latest react. We hope these changes land soon in latest react. Also see my description of this somewhat related PR.\n. ",
    "philholden": "It would be quite cool to have a transition effect so the error modal expands out of the component where the error originated. \n. I was partly thinking of components where there is not enough space to show an error message or that are offscreen (still probably not a great idea though as you lose inspectability).\n. ",
    "timbur": "Anyone watching this thread may want to check out babel-plugin-react-error-catcher.  It is compatible with hot reloaders and is designed to use custom reporter functions and/or components.\n. ",
    "allyraza": "Hi Dan, thank you for putting this together I have been using this package for some time now, I am implementing an overlay much like hot-middleware overlay in spare time is it okay if I send a PR?\n. ",
    "neoziro": "It is actually supported https://github.com/gaearon/react-hot-loader#adding-a-custom-error-reporter. @aaronatmycujoo react-router < 4 will not be supported, if you use it you can setup hot reload stuff in Webpack without React Hot Loader. Your app will be entirely refreshed when a change occurs. . This issue seems outdated, I close it, feel free to add a comment if you experienced a problem relative to jspm.. Sounds fixed in v4.0.0-beta.5.. @mqklin you can ignore it, we will switch these warnings to debug mode.. @mqklin yes, I just submitted it, I keep you in touch!. @mqklin done https://opencollective.com/react-hot-loader. I close it. React Router v4 is supported and stable.. I think it is not a good pattern but I think it is used by some people. React Hot Loader should not break it.\nThe problem is that with the current strategy (proxy) we do not have the choice.. @theKashey tricky. Fixed in v4: https://github.com/gaearon/react-hot-loader/tree/next#checking-element-types. @mmoutenot good point! I don't have any solution yet. I think we will have to wait for React team to provide a Hot Reloading solution built in React.. This is a known problem, we have to update babel plugin to handle native classes. Help welcome!. Fixed in v4. Also added a modern example.. Upgraded all things and it seems to be fixed with v4.. React router v4 is now the standard. I close it as it is now outdated.. Fixed in v4. Also added an example with heavy hoc usage.. @Rokt33r you can contact me. This would be definitely fixed in v4 since we do not transpile arrow functions any more.. It should be solved in v4 please give it a try!. @alex-shamshurin sorry for delay and annoying stuff. You should give a try to React Hot Loader v4 it could solve your problem! I close this issue, feel free to reopen a new one if you experienced some problem. We will try to be more REACTive \u263a\ufe0f. To clarify, shouldComponentUpdate will not be called when react-hot-loader <AppContainer> or <HotContainer> will be re-rendered. If your setup is \"classic\", it will happen when you re-render your application from the root.\nExcept that, the behaviour is exactly the same with or without react-hot-loader.. @theKashey yes but this is very very annoying. In a big application it is a ton of warnings.. My advice, if you are on react-router v3:\n\nUpgrade to react-router v4\nGive a try to React Hot Loader v4\n\nWe will not provide any support for React Router v3 because the new stable version is v4.. This is completely solved in React Hot Loader v4.. HMR is mostly done by Webpack, when Webpack notifies a new update, React Hot Loader handles it  almost instantly.. Documented.. Definitely fixed in React Hot Loader v4. This is the same problem as #391 and others. React Hot Loader v3 was not able to support modern code (ES6 classes) without being transpiled. It now works out of the box with v4. I close it because it is a duplicated issue.. All of this is outdated. I close it.. Seems fixed https://github.com/reactjs/react-redux/pull/715. Hello, I am a new maintainer on the project (@gaearon). I think we can remove Redbox since it is not the responsibility of this project. We could give the choice to the user, but the natural way of reporting error is the console. I would like to merge it, what do you think?. @gaearon I think it is a good idea, I can do it.. React Hot Loader v4 is coming as a Lerna project \ud83d\udc09.. Should be solved with React 16 Portals. If not, it is now a React issue.. I am sorry, external rendering is not supported in v3.. I think it is not related to react-hot-loader, seems outdated, I close it.. @theKashey we should document it... @th3fallen yeah I think so.. It was relative to React Router v3. If you are using React Router v3, please update to v4 if you want to use React Hot Loader.. Duplicate of #494. This is a Webpack issue, module.hot.accept is relative to Webpack, not React Hot Loader. You should try to ask Webpack team if your problem is not solved.. The two modes (harmony and cjs) are now supported with new hot setup. React Hot Loader v4 is ready to be tested! Give it a try!. It is a known issue, please refer to https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#react-hot-loader-this-component-is-not-accepted-by-hot-loader. What you described here is relative to Webpack, not to React Hot Loader. These logs came from Webpack not from React Hot Loader.\n[HMR] Updated modules:\n[HMR]  - ./src/Components/Counter.js\n[HMR]  - ./src/Components/index.js\n[HMR]  - ./src/App.js\n[HMR]  - ./src/Widget.js\nSo this is not a React Hot Loader issue and it should probably be fixed now.. If you use React, you have to compile using \"NODE_ENV=production\", compiling in another environment is not a good idea.. React Hot Loader v4 provides a good TypeScript support using Babel. I added an example with Typescript.. Duplicate of #627, we need to clarify it in documentation.. @heaplabs I think it is a transpilation error, it could be easily reproduced in a test. I don't have time to work on it but you could investigate by adding a test and looking at the output. After this PR it will be easier.. Should be fixed now, if not will be in v4.. @thomasthiebaud thanks. entry: ['react-hot-loader/patch', 'webpack-dev-server/client?https://localhost:8088', 'webpack/hot/only-dev-server']\nTry to only stay with 'react-hot-loader/patch' in entry.\nI think publicPath is not needed but I am not a Webpack expert, it is a Webpack HMR related issue. You should try to get help from the Webpack team.. @Alex-ray thanks. This is all solved in v4. Also added an example using react-bootstrap.. @EugeneZ if it is still beta, I prefer to not add it.. See https://github.com/reactjs/react-redux/issues/670. @frankwallis if you solved it, I prefer to not merge it.. Should be fixed in v3.. Probably a Webpack HMR issue already fixed. I don't have any problem using Webpack 3.. Working on it.. @theKashey https://github.com/neoziro/bare-minimum-react-hot-rr4-redux/tree/loosing-state this looks weird, state is lost.. @theKashey \n\nI tried to use keys and it didn't solve it\nTimer was just a test, I clean it up using didMount / willUnmout but it is not the point\n\nSo for you this is \"normal\" and we should just mention it in README?. OK I retried it with last version, two problems:\n\n\nRemoving \"above\" cause a unmount / mount, this is React behaviour, using key no problem\n\nHot Reloading does not work the first time, and we can fix it\n\nInstead of ignoring it if __REACT_HOT_LOADER__ is not present we could create a __REACT_HOT_LOADER__ temp in Babel and replace it by the true one when patch.js is loaded. This is exactly the strategy of Google Analytics with global ga.\nhttps://github.com/gaearon/react-hot-loader/blob/41520935adcf655aab033b28e1c660f62be494ae/packages/react-hot-loader/src/babel.js#L30-L40\n@theKashey what do you think? I think it is better than including patch.js by ourself because we do not know where we are with Babel.. Described this in a separated issue #738.. This is not a bug, this is exactly the behaviour of React, React uses index as key by default to changing the order triggers a unmount / mount.. This issue is related to Webpack HMR, not React Hot Reload. I hope you fixed you problem by upgrading Webpack!. @mikechabot thanks. Alpha is not an issue, we have to target the fresh new React 16 now.. Yes it works.. I have tested it with React Hot Loader v4 and it is now fixed.. Not related to React Hot Loader. Webpack devtool + Error boundaries are the solution.. @AepKill not the way we choose to do it see #494. @anthonyettinger you are missing App in AppContainer, your config is not good. Please follow the migration guide.. @dizel3d thanks. Sounds fixed.. @TheLordHighExecutioner thanks but we will update all dependencies, not just mocha.. Actually, we do not plan to support dynamic require. Dynamic import is coming and it is supported by React Hot Loader v4.. You have to mark all your module dynamic imported with hot. We are currently experimenting something in Loadable Components to make things easier. https://github.com/smooth-code/loadable-components/pull/53. No it must be in the module you load, so you have to duplicate it in each file dynamically loaded.. I you still experienced some issues, give a try to React Hot Loader v4. It has been entirely rewritten. I close this issue, feel free to reopen one if you experienced an issue.. We will take care of updating all docs at the same time. But thanks for PR.. It is a known limitation, it is solved in v4. https://github.com/gaearon/react-hot-loader#known-limitations. Clarified in https://github.com/gaearon/react-hot-loader#getting-started. @dcosson we are not sure to keep it and we will update all dependencies at the same time. But thanks.. I am just starting on the project. I have not yet had time to investigate it.. @Mr-Binary the AppContainer just force a reload of the application. The core of this package is to register every classes and hot replacing them. . @Mr-Binary so I can close this issue?. @MrDesjardins I tried to reproduce it but I can't make it work, I got some errors.\nCan you please give a try to React Hot Loader v4 and tell us if your issue is fixed?. As @theKashey it should be fixed even before v4. I mark it as fixed. Feel free to reopen a new issue if you experience some problems with v4.. @piperchester thanks. @zhenyulin you are not owner or collaborator so it's not the good section to add it.. Should be fixed in v3.. Project is not dead! Will try to release v3 soon!. React router v3 is not supported, if you want Hot Loader support, please use v4.. Related to #662 and Babel transpilation. Fixed in next.. @sotnikov-link thanks. @jonathanphz if you fixed it can you please update the documentation?. @Grimones thanks, can you please review it for v4?. I know this bug, we have to add a test for it. It is relative to babel plugin that doesn't work with native class. Help welcome.. I close it because it's a duplicate of #313 . Now we have Error Boundaries!. @Neglexis  This should be fixed in next. Can you please give a try?. I mark it as fixed, feel free to reopen it if you experienced some issues.. We have several known issues that explain this result:\n- decorators are not supported #279\n- only exposed components can be reloaded #650\nThere are complicated to solve, help is welcome.. @theKashey this is linked to #279 right? We should focus on this case and implement a MobX example.. @alexilyaev I fork your project add I added a demo, no mount/unmount occurs. The constructor is called but it is the normal behaviour.. The next documentation, it is very simple now.. To close this issue and resume, add to your Webpack config:\njs\nplugins:[\n  new webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify('production')\n  })\n]\nAnd then don't forget to bundle with the correct environment:\nsh\nNODE_ENV=production webpack. @alasdairhurst you can do this if you use two separated Webpack config, one for development and one for production. It depends from your configuration. Setting NODE_ENV to production even in development will disable React warnings and React Hot Loader.\nAlso as mentioned by @montogeek, you have to add quotes.. Be sure to not include new webpack.HotModuleReplacementPlugin() in production.\nTo do that simply:\njs\nplugins: [\n  ...(process.env.NODE_ENV !== 'production' ? [new webpack.HotModuleReplacementPlugin()] : []),\n],\nAnd to have this plugin:\njs\nplugins:[\n  new webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n  })\n]\nLast step, be sure to build with the correct environment:\nsh\nNODE_ENV=production webpack. I upgraded it, will be solved in the next release.. Seems resolved, I close it.. @Kikobeats you are right but we will rewrite all doc soon. @viridia it's weird, any update on it?. @theKashey very interesting, I like the idea. I keep it opened, I have to take a deeper look before merging it.. @theKashey I talked to @gaearon and I will try to maintain the project.. I will update dependencies, but thanks for this PR.. @mrmartineau thanks. @amitzur thanks. Not related to this project.. @Toosick thanks. I close it. Code splitting is a real problem with HMR but this issue was resolved.. I think we could resolve this issue by adding it in the documentation.. @codeBelt thanks. Do we need test for that? I think we can merge it. . You can follow the loading progression in console. Usually you have it opened when you develop. I think this is not useful to add a visual indicator on the page.. @MAPESO yes but we couldn't merge it without full green.. Closed in favor of #638. I experienced a problem when we do not transpile everything (classes seems to be the problem). But I looked your project and you use \"babel-preset-latest\" instead of \"env\". You should use \"babel-preset-env\" and do not target anything. It should work.. @asvetliakov yeah, I think Webpack support is broken since it uses \"webpack_exports\". I think this is the correct way to fix it.. @eliseumds I understand the problem but what is the link with react-hot-loader?. @eliseumds I don't know. I close it because I think it is not related to react-hot-loader. Hello, you can configure webpack-dev-server in a proxy mode.. I think there is a lot of bug using Webpack without Babel. I need to check but if you want to be safe use Babel.. About this issue, this is probably due to Webpack since you see a full reload. Also, Webpack plugin support is very limited (only module exports). . It uses React internals no longer exposed in React 16, I have to check how to do it now with @gaearon.. The next version is the beta 7, I started working on the project two weeks ago and I haven't release yet. I think we will release a v4 including React 16 support.. Documentation issue is now fixed by 00404dd0805260441339de4771816b1b87df118a\nNo release since React 16, so it is probably bugged. I need to try and to fix it.. React 16 is not yet compatible, you can follow this PR #658. I close this issue because it was related to HotContainer / AppContainer and it is now solved.. Sorry, the documentation reflected the code in master, not the code in the v3.0.0-beta7. I fixed it.. @FedeG yes you are right, I will try to clean documentation this week-end.. Fixed in 00404dd0805260441339de4771816b1b87df118a. You should refer to https://github.com/gaearon/react-hot-loader/tree/master/docs#migration-to-30. In fact, there is no good documentation for now. And it is the best documentation we have. You have several things to do:\n\nWrap your application in <AppLoader>\nInstall module.hot.accept\nAdd patch (react-hot-loader/patch) to your bundle\nAdd babel loader (react-hot-loader/babel) to your babel config. The only wrong thing I see in your example is using \"start\": \"...\" rather than \"scripts: { \"start\": \"...\" }.\n\nYou should also try to use webpack-dev-server in proxy mode on your server.. You have to use proxy mode if you want to use your Flask server + webpack-dev-server.. It has nothing related with react-hot-loader.. @alexanderwhatley you missed { \"hot\": true } in devServer. . Server doesn't influence hot reloading, it is just a problem in your webpack / babel / patch / AppLoader configuration, nothing related to Flask.. I am sorry, I do not have time to do that, just follow webpack hot reloading and react hot reloading documentation and it will work. With a quick look, I can tell that you devServer config is not correct: \"hot\" is under proxy.. @alexanderwhatley you have to trigger an hard refresh for your users. You can take a look at Service Worker or you can do it by yourself:\n\nPing a endpoint every seconds that give a version\nIncrement version when you deploy a new version of your application\nDetect a change in the version client side\nTrigger a fresh or display a message telling user to fresh (eg. Inbox by Google, Messenger by FB)\n\nI close this issue since it is not related with React Hot Loader, feel free to continue the discussion here.. We have to add this to documentation.. @theKashey done in #655 . This is good, we could eventually integrate it in the project if it is enough stable.. @mqklin I don't think react-transform-hmr works with React 16, but I can't confirm.. A long issue finally fixed in React Hot Loader v4.. @AaronFriel thank you! Great find! I think I will work on a v4 soon because 3.0 is very confusing, beta for more than a year now \ud83e\udd14. I will pay a special attention to what you found.. We will publish a new version as soon as possible, currently no one has time to do it.. @AaronFriel publishing on npm is the final step, it doesn't take so much time.\nI want to be careful by publishing a good working version and I don't want to do it in 5 minutes.. It is not necessary to remove PropTypes because they will not be included in production. If you take a look to .prod.js files there is no trace of require('prop-types').. OK I understand, it is relative to React 16. I was waiting for enzyme to be able to test it on React 16. Will do it soon.. Let's focus on #652.. Thank you!. @AaronFriel I will not comment about your behaviour. I think that you can figure out by yourself that it does not help and that it is not in your favor.\nI will explain each point:\n\nYes I haven't see it. I didn't hear about this problem, but I am new, I could have missed something. I think it is better to make it in another PR and to release it in a v4 rather than in a v3.\nYes I removed it but I didn't publish it and I fixed my mistake (updating documentation). I asked you politely to make a one line alias to avoid breaking all existing installations and a tons of issues.\nI am sorry but you are wrong, tests are not failing, there is an \"error\" log because we do not mock \"console.error\" and it is actually what we want to test.\n\nI closed your PR because all your commits was already in #654. We do not need 3 PR with similar commits.. Open source is collaborative, if others do not make things right it is your responsibility to explain what is wrong and to fix it. Insulting or creating this kind of issue does not help in any way.\n\nYes v3 alpha / beta has been released more than a year ago, it is widely used and its our responsibility to not break every existing installation. I merged HotContainer because I plan to release a v4 including React 16 support.\nYes it is your responsibility to not break this repository by updating documentation that does not reflect what is published on npm.\nMajority of users (including me and @gaearon) use MacOS. If you use Windows, it is great because you can fix things that we cannot easily fix on our side. But it is also your responsibility to not break CI and to fix it if you did. I will not merge a red pull-request.\n\nAlso to mention your patch (dc1daaa61bddf51a2f1fa0a35d533ceadba44055) fixed by a breaking change. I think we can fix it without making a breaking change, and fixing something means adding a test to reproduce the bug. I do not see any test in your PR.\nI can see that you do not want to spend several hours understanding how to run jest and I do not expect you to fix React 16.\nIf you want to fix issue related to babel.js and windows, you can still do it by following the right way:\n\nReproducing bug in a test or explain it in an issue to give opportunities to others to reproduce it\nTrying to find a way that do not fixing it by a breaking change\nMaking a PR that fixes this issue without bumping, adding a VS Code settings and breaking existing tests. Regarding your gif, it is more a npm issue rather than a react-hot-loader issue. I suggest you to replace \"build\" script in \"package.json\" by:\n\njs\n\"build\": \"./node_modules/.bin/babel src --out-dir lib\"\nMy thinking is that on Windows, current path has priority over build path.\nSince Travis does not support Windows, it will be hard to add test I agree.\nAgain, your language is not correct, if I was owner of the project, I had banned you.\nI think we should add a code of conduct similar to the Babel one to this project. @AaronFriel you should read it, it is probably new for you.. A lot of scripts are relying on \"./node_modules/.bin\", I prefer to rely on it rather than introducing a breaking change for every users. Also in npm scripts, we should not have to specify it, but if it is not working correctly on Windows it could be a bug in npm itself.\n. You are probably thinking about https://github.com/npm/npm/issues/4040#issuecomment-27159695\nI think it is a bug in npm itself, we can't rename our files because there is a conflict with npm scripts. It is a npm issue not a react-hot-loader issue.. Build is green, errors are intentional because we are testing it.. I thought it was related to enzyme and update issue but I tried with pure ReactDom.render and I have the same issues. Looks like react-deep-force-update or react-proxy is not compatible with React 16. @gaearon do you have an idea?. @gaearon yes \ud83d\ude15. @gaearon I dove into react-deep-force-update and it looks like stateNode is not updated.\nhttps://github.com/gaearon/react-deep-force-update/blob/89506f42004843bd7297d44fdbd535fa2c9735cc/src/index.js#L83-L86\nI think node of type \"HostComponent\" are not updated. How to force an update of these nodes?. @gaearon problem occurs only with stateless functional components, they are not updated and the function is not called. If I switch it by a class based component, it works.. @gaearon also I used the react-deep-force-update proposed in https://github.com/gaearon/react-deep-force-update/pull/9. I updated code, if you want to investigate, just switch to my PR and run jest --watch test/HotContainer.dev.test.js. If we make this test pass, it is good.. @gaearon I finally found the problem, in the following case, App will not be reloaded because element instance is not recreated. It was the case in React 15. I think it is a minor regression but it has to be noticed.\njs\nconst App = () => <div />\nconst element = <App />\nReactDOM.render(<HotContainer>{element}</HotContainer>, main). @ntucker I try \ud83d\ude42. This is an issue related to Webpack and not to React Hot Loader, it can also be related to your filesystem watcher.. @drcmda it is an other bug related to #464, can you please fill a new issue?. @drcmda will do it. Closed as duplicate of #662, by the way it is fixed in next.. We are taking care of not adding code in production, the goal is to simplify setup for end users.\nIf you do not want to include it in production, you can do it by your own :\njs\nif (NODE_ENV === 'production') {\n ...\n}. @sahil290791 yes module.hot is Webpack stuff\nIt will not break anything if you include it in production. The only thing to do is to build your project with NODE_ENV=production, you can follow Webpack environement guide.. @switz for now it is the best solution. Thinking about reverting #464, since we do not have any solution to reload constructor without re-instantiating component.. My fix didn't work, and doesn't handle all cases. We have to revert this feature. Help is welcome #673. I think handling arrow functions is one of the biggest issue in React Hot Loader, this is mostly relative to Babel transform and React Proxy. I am thinking about transforming this project into a Lerna project (see #496) to be able to easily fix big issue like this one.\n@theKashey I think we should plan a meeting to discuss about the project. Also you should be a collaborator. I will ping @gaearon about that. Do you know a good place to talk about a project between contributors? A Slack?. This is now fixed in React Hot Loader v4.. @andrewcoelho thank you!. I tested it and it is now fixed in React Hot Loader v4.. @theKashey I tested it but not in modern environment. You think there is still a bug in modern? It is easy to test it using examples.. @theKashey if it is an edge cases it is OK for me. But having an error and breaking the application is not OK.. This problem is solved, I tested it and we do not have any error. Of course constructor and methods could have some issues but it doesn't break all application.. You are right, a warning is sufficient! Thanks!. It is new in v3, it gives you warning about component not accepted by React Hot Loader. The behaviour is the same as v3.0.0-beta.7 except you don't get any warning about not accepted components.. Not yet. Feel free to contribute #667. You can disable warnings https://github.com/gaearon/react-hot-loader#disable-warnings. @loris in fact the implementation is the same as in beta. We added warnings by default and you can disable them.\nConcerning support of HOC we do not have any solution yet except exporting them at top level.. react-refetch issue is fixed in next. Also added an example using react-refetch.. Ping @theKashey . It is a known issue, a solution emerged in https://github.com/gaearon/react-hot-loader/issues/650#issuecomment-336156450.. Nice! Thanks @theKashey and sorry for having missed the true problem @Koenkk.. Very good! Thank you for implementing it!\nCan you set RHL.warnings to true by default? For now it's undefined and it can be confusing.. Sorry, I was thinking about the default on hooks in patch.dev. I wasn't enough clear, sorry, can you remove it from AppContainer and just do it in hooks ?. Thanks, can you make ESLint happy please?. OK, also I think it is not a good idea because there is a lot of cases that will not work:\njs\nclass Foo extends React.Component {\n  constructor(props) {\n    super(props)\n    const foo = 'bar'\n    this.arrow = () => console.log(foo)\n  }\n}\nI will revert all logic of extracting arrow functions from constructor.. Fixed in v3.1.1. @drcmda I will try to do it this week-end. Yes this is the recommended best pratice. React Hot Loader handles development and production environment by itself. As you can see, production AppContainer is very small and will not increase your build size.. We should document it, because a lot of people are not serene with that.. @sachinrekhi thanks. @nloding Can you please try next version, set up is simplified and it works better with React 16 and ES6 code. Feel free to reopen a new issue if you experienced some problems.. Hot Reloading is not compatible with compatible. Not sure if it is relative to Webpack or React Hot Loader. The current workaround is to disable code splitting in development. You can use a different ./src/routes/index.js in production and in development. I know that it is not the best thing, but it is currently the only workaround.. If you are not re-rendering the root, changes will not be visible until you manually triggers a new render. AppContainer propagates a forceUpdate in all application tree when re-rendered. If not, components are Hot Replaced but not re-rendered, this is the only downside.. @selbekk thanks, I think it is good like this.. @jhoch thanks. Yes react-hot-loader works with styled-components. The problem could be in your Webpack entry setup, have you tried to remove entry_1 and entry_2? https://github.com/GiancarlosIO/Django-HMRReact-boilerplate/blob/master/webpack.config.js#L9. @GiancarlosIO \ud83d\udc4d . I experienced same issue, still a problem in styled-components > 2.2.0 very annoying. Follow https://github.com/styled-components/styled-components/issues/1225. @theKashey We need to find a better way to make it work... It is too hacky today. It should not impact code that is not relative to React. Maybe the Babel strategy is not the good one. I will try to take back and think about another solution to do it.. @theKashey \ud83e\udd17. @AndrewRayCode it is stable but it still has some bugs, must of them are due to the approach (Babel is dangerous). We will try to reduce Babel scope in the next version.. Arrow function are no longer transpiled in React Hot Loader v4.. @johnnyreilly thanks!. @theKashey can you contact me on Twitter or by email, so we could talk directly on Slack or Hangout or ... . Closed as duplicate of #686 . This should be fixed in next. Multiple hocs (including Redux) are supported.. @starandtina I am surprised by not seeing any new webpack.HotModuleReplacementPlugin() in your Webpack configuration. This plugin should not be included in production. If it is not (I have just tested it) module.hot will be replaced by false.\nTested with Webpack v3.8.1.. @theKashey what about removing module.hot test? We could just test if we are in production, what do you think?. If your application is built in production, React Hot Loader will not add an overhead. Exactly like React.. @jrylan thank you for the fix.. Will be fixed in React Hot Loader v4. I close it because it is a duplicate.. Published!. This is fixed in React Hot Loader v4.. This isn't required in v4 anymore. https://github.com/gaearon/react-hot-loader/tree/next. React Hot Loader wrap all components into proxies. You should be careful when manipulating types. For more information, please give a look to react-stand-in documentation.. Actually these are the ideas implemented in React Hot Loader v4. Thanks @theKashey!. @meyer please reopen a new issue if you experienced some problem with React Hot Loader v4.. @theKashey I simplified tests, run prettier and added scripts to compile packages globally. I will find a way to run test on different Babel configurations.. @theKashey yes I will fix build and it is OK for me.. @theKashey no. @theKashey it should be OK now. @theKashey can you go on Google Hangouts please?. @theKashey ready to merge, diff is because Babel configuration is not fixed to a specify set of plugin \"node\": \"current\". Nothing important.. @theKashey using a Babel \"env\" config standard we have some tests that are not passing. I think it is a problem because it is the most used preset.. Resolved in next.. @theKashey I updated lerna branch to run tests using two different Babel configurations: \"modern\" and \"es2015\". \"modern\" targets Chrome 60, \"es2015\" targets old browser. Both are used and both should work.\nActually I have several errors when I run: yarn test:modern --watchAll --no-cache\nI think there are the last issues to solve, after we could release a beta version. I will give a look and try to solve them.. @theKashey we have to solve it I think. I think we are now stable on lerna branch. We should add a sandbox projet to be able to test real use-cases and then we could release a beta.\nAlso would be great to work on a detailed changelog about what's new in v4 and the trade-offs.. @theKashey I like the idea of reducing and improving boilerplate and if we can make it work with code splitting it is a great news!. Yes I think so, I will try to do it before xmass.. Release as beta: https://github.com/gaearon/react-hot-loader/tree/next. React Hot Loader v4 has now a simplified set up using hot that will handle both. @verydanny you should give a try!. Very good work! The idea is great! I think you have resolved the major issue of this project \ud83d\ude04.. @gaearon can help us!. @theKashey we can't remove proxy because we have to keep state and variables. So even if we have a custom comparison function proxies are still needed.. @theKashey Thanks! I could take a look on tuesday, not before. . The problem is that your Babel config is not correct, you don't include \"react-hot-loader/babel\". https://github.com/James2516/hot-reload/blob/master/config/webpack/Base.js\nIf I can give you an advice, use only one simple webpack.config.js with some ternaries. An example : https://github.com/smooth-code/website/blob/master/webpack.config.babel.js. @mulmulovich it looks like your problem has been solved. I close the issue, feel free to reopen it if you experienced some issues with React Hot Loader v4.. HMR v3 and v4 both work with PureComponent. I close it.. Related to Webpack. React Hot Loader v4 has now a much more simpler set up.. The v4 will be based on a new proxy system. As soon as we will release a beta, we should test it on Electron.. Yes I hope too.. Ready \ud83d\ude0a https://github.com/gaearon/react-hot-loader/tree/next. I tested it and it does not change the result. But I think it is related to your setup. It looks like code in index.html and in scripts are into two different universes.\nI tried to pass React into props and then compare it to import React from 'react' in app.js and it does not work.\nSo this issue is probably not related to React Hot Loader, and maybe even not related to Hot Module Reloading.. @rllola your application is not wrapped with hot. Please follow every steps of Getting Started.. I think your way to forceUpdate is not correct. We should maybe rely on react-force-update package.. Instead of reactHydrate strategy why not walking the React tree, swap what is swappable, mark as pending update. Then walk again and update it?. @fwh1990 decorators are still an issue in v4 (#279, #727)\n@theKashey I think we should add warnings: false by default and switch it to a debug option.. @theKashey you know warnings are annoying, the only use-case I see is to debug it so I prefer to not active them by default.. Fixed in v4.0.0-beta.7. @Grimones thanks, that's awesome!. @Grimones yep babel-loader is missing so we can't merge this PR. I think we could not simplify the migration from create-react-app but maybe we could discuss again about adding it in the project by default.. I close it but we can continue discussion here.. Why not, or including it in this project if it is working great.. @wdvvgy can you try to use the next version? There is a lot of changes also in setup. So it could probably solve your problem.. @theKashey is right, this is mostly due to setup. I mark it as fixed in next.. React Hot Loader v4 has a simplified set up but all is required. You do need AppContainer or mark your app as hot-exported.. Actually we can do it using hot(module, { debug: true }). What do you think?. dev is confusing because we are in \"development\" environment when we use RHL.. @theKashey I agree, do you think we will need other options? I think about:\njs\nimport { configure } from 'react-hot-loader'\nconfigure({ debug: true }). @theKashey OK, waiting for PR.. #743 will definitely fix this one. @oliviertassinari not for Lerna projects \ud83d\udc4e . Yes, lerna publish for example. But yarn does a lot!. @theKashey OK, I merge it, I let you continue. Thank you for reporting and trying to fix it! The second solution is better, I did it in #747.. @katmai7 I didn't ask you to do it because I was not sure how to do it exactly (especially for test).. We have another problem #746. I will fix the toString problem.. Fixed in #746. Fixed in v4.0.0-beta.7. Fixed by #746 . Yes it is a known bug in [4.0.0-beta.7] but it has no issue yet, you are so first one. Thanks.. If you have a repro, it is welcome @theKashey will need it.. Fixed in 4.0.0-beta.8. @mqklin yes, I will reopen it when we will have a repro. OK. Can we use something on module default export (or another export) matches with the component marked as hot?. OK, so no fix for now. I close this issue because the original bug is fixed. The discussion was about warn user about a misconfiguration but it is not possible for now.. @katmai7 can you try with v4.0.0-beta.8?. @theKashey you mean import 'react-hot-loader/patch' I think. You can also put in webpack.config.js entry just like in v3.. Should be definitively fixed in 4.0.0-beta.9.. Fixed in v4.0.0-beta.11.. At this time this is not the goal of React Hot Loader to change the behaviour of React. If people want this kind of behaviour they can use \"key\". Wrapping it with custom key will introduce a lot of bugs for a minimal gain.\nI vote NO.. I think detecting wrong is worst than not detecting. So if we have a 100% sure solution, let's do it, else I think we should not warn.. @theKashey I propose to work on \"loadable-components\" to make it support React Hot Loader out of the box. So users would have a working zero-config solution to use Code Splitting + Hot Reloading.\nloadable-components have still some issues with the strategy used to register components (server-side rendering). So I have to also fix them.\nWhat do you think?. OK let's keep it opened.. @likun7981 Did you follow Code Splitting guide?. Fixed in v4.0.0-beta.12. This is not the right fix. We need to transpile these specific files using a specific Babel config. Also there is no test. In two weeks we will have forgotten why you did that.. @theKashey please let me do it, build is my kind of stuff. Continue in #761.. Yes it looks like it is a problem in Babel configuration but on our side we need to make a clear guide in README.\n@DevanB to solve your problem:\nAdd a .babelrc:\njs\n{\n  \"presets\": [\"env\", \"react\"],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\nInstall \"babel-preset-env\" and \"babel-preset-react\".\nYou can take some inspiration from our TypeScript example.. @DevanB do not take it like that, @theKashey is trying to help. He is not blaming you! I even prefer that you reported this issue rather than trying random stuff on Google. Also all should work out of the box so it is still an issue for this project.. @theKashey we have to detect it, too many bugs are caused by wrong configuration.. @chrisabrams thanks for reporting, we added a warning that should help detecting wrong usage. I close this issue, feel free to ping us or to reopen a new one if you still have some problems using React Hot Loader.. Not plan soon.. @ryuever Thanks but we are about to release v4. We do not accept any changes for current version.. @theKashey oh I had forgotten this, sorry you are right.\nI vote for an explicit warning telling that the browser is not supported. I do not know how to detect if class is supported. May be using try...catch + eval?. Hey thanks! Can you give us some information or write a test case by yourself?. This issue seems to be fixed, React Hot Loader v4 is not out! Update!. React Hot Loader v4 is released, please try it and feel free to open a new issue if you still experienced some problems.. I would like to deprecate errorReporter, try to add a custom Error Boundary in your root component (just after hot or AppContainer) and it should work.. Documented in v4.0.0-beta.17.. Fixed in 4.0.0-beta.16.. Documented in v4.0.0-beta.17.. Fixed in 4.0.0-beta.16.. OK so you mean transforming const Hello => 'hello' into const Hello => <Hot>hello</Hot>, is it right?\nI think it is not possible because we have no idea if it is a simple function or a component.. @theKashey OK I understand.. Yes good catch! I had seen it but I forgot, thanks!. Let's remove this useless dependency!. Fixed in v4.0.0-beta.17.. You should be able to do it in Scala, it is a simple JS code using globals.. If it is fixed for you, good, I think writing JS in Scala is not a good idea but good luck!. Thanks!. We will deprecate errorReporter this is why it is not in hot. Instead the user would have to implement its own ErrorBoundary.\nBut we need to check deeply the behaviour you experienced. Maybe componentDidCatch is not called with HMR. @theKashey an idea?. Documented in v4.0.0-beta.17.. Fixed in v4.0.0-beta.17.. Coverage is decreasing, can you add a little test for this?. Hmm, and why not throw it instead of logging?. Fixed in v4.0.0-beta.19.. Fixed in 4.0.0-beta.18.. Fixed in 4.0.0-beta.18.. I am OK with your solution. No more hack!. Thanks for it. Just a little problem, this project is using yarn. You have to install it with yarn, to do it just run yarn at the root of the project then go in packages/react-hot-loader and run yarn add prop-types.. Fixed in v4.0.0-beta.19.. I am sorry but we will not solve this problem, create-react-class is deprecated and having React Hot Loader working with it is not a priority. For now just reload page at every changes. It is another motivation to migrate!. This should not be relative to RHL.. Good catch, no we would not, it is an edge case.. RHL requires Babel, so it is expected.. Fixed in v4.0.0-beta.19.. @theKashey no .min.js is not the problem here.\n@idan you should fix it from your side, .min.js is dangerous, you should be more explicit and specify something like jquery|lodash.. Should be fixed in beta.21.. Will do it by this morning.\nOn Mon 5 Feb 2018 at 08:31, Codecov notifications@github.com wrote:\n\nCodecov\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=h1\nReport\nMerging #842\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=desc\ninto next\nhttps://codecov.io/gh/gaearon/react-hot-loader/commit/d29f4841051caff4475684e70da55070cac4d346?src=pr&el=desc\nwill not change coverage.\nThe diff coverage is 100%.\n[image: Impacted file tree graph]\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=tree\n@@           Coverage Diff           @@##             next     #842   +/-   ##\nCoverage   86.21%   86.21%\nFiles          25       25\n  Lines         573      573\n  Branches       95      153   +58\n=======================================\n  Hits          494      494           + Misses         68       59    -9     - Partials       11       20    +9\nImpacted Files\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=tree Coverage\n\u0394\n...es/react-hot-loader/src/reconciler/proxyAdapter.js\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842/diff?src=pr&el=tree#diff-cGFja2FnZXMvcmVhY3QtaG90LWxvYWRlci9zcmMvcmVjb25jaWxlci9wcm94eUFkYXB0ZXIuanM= 94.44%\n<100%> (\u00f8) \u2b06\ufe0f\npackages/react-hot-loader/src/global/modules.js\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842/diff?src=pr&el=tree#diff-cGFja2FnZXMvcmVhY3QtaG90LWxvYWRlci9zcmMvZ2xvYmFsL21vZHVsZXMuanM= 74.19%\n<0%> (\u00f8) \u2b06\ufe0f\n...ot-loader/src/internal/stack/hydrateLegacyStack.js\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842/diff?src=pr&el=tree#diff-cGFja2FnZXMvcmVhY3QtaG90LWxvYWRlci9zcmMvaW50ZXJuYWwvc3RhY2svaHlkcmF0ZUxlZ2FjeVN0YWNrLmpz 8.69%\n<0%> (\u00f8) \u2b06\ufe0f\n...-hot-loader/src/reconciler/hotReplacementRender.js\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842/diff?src=pr&el=tree#diff-cGFja2FnZXMvcmVhY3QtaG90LWxvYWRlci9zcmMvcmVjb25jaWxlci9ob3RSZXBsYWNlbWVudFJlbmRlci5qcw== 87.72%\n<0%> (\u00f8) \u2b06\ufe0f\n\nContinue to review full report at Codecov\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=continue\n.\nLegend - Click here to learn more\nhttps://docs.codecov.io/docs/codecov-delta\n\u0394 = absolute  (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=footer.\nLast update d29f484...a824ddb\nhttps://codecov.io/gh/gaearon/react-hot-loader/pull/842?src=pr&el=lastupdated.\nRead the comment docs https://docs.codecov.io/docs/pull-request-comments\n.\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/pull/842#issuecomment-363002562,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQQPrpmXDqHoQL-DDBpPXtjDgm6Kq2mks5tRq5tgaJpZM4R5BAG\n.\n. This is our number one bug. @theKashey it seems to be introduced by your render PR.. Fixed in beta 22.. Should be fixed in beta.23.. @brianlmacdonald of course! You are welcome!. Fixed.. The only problem to fix is Jest that does not return a zero code. It has nothing to do with Lerna or Rollup. You can just restart from next branch, all code here will not help.. Closed in favor of #853 . Fixed in beta.23.. No update on master sorry.. Should be fixed in beta.23.. Should be fixed in beta.23.. @theKashey conflict. @theKashey I guess this is what broke SSR right?. @gaearon I agree, now that the project is stable, we have to make it cleaner, and to do it we have to make changes in React.. We should not refer stand-in anymore, please replace next by master and point to an existing file.. Thanks @oliviertassinari . Please follow the reporting guideline, thanks.. Thanks!. You should not require the dist version, the entrypoints are in the root directory of the repository. This is the same approach as React.. You are not using the good version of React Hot Loader. hot is only available since v4. Upgrade react-hot-loader and it should work.. @th3fallen this is probably another problem, not relative to async component. react-loadable or loadable-components also work with React Hot Loader v4 following the guide.\n\nBe careful of using hot(module) in each loaded components (in each module entry in fact).. @theKashey thanks!. OK for me, but I think another look from a TS expert would be great.. I think this is not very useful, we are talking about 164 bytes gzipped. You can still avoid loading RHL in production if you want to optimize your build to the edge.\nWe ship the same type of bundles shipped by React, and yes it could be a problem for dead code elimination but it is simpler. We are not a real candidate for dead code elimination.. No activity, I close it.. I think we can solve it using Rollup, but I do not see what is the source of the problem. Can you give me the link to the PR you previously solved it with or describe what we need?. We are aware of that, but the difference is very minimal probably less than 200 bytes gzipped. That's why for now we choose to not address it.. 1.3K    dist/react-hot-loader.production.min.js\n645B    dist/react-hot-loader.production.min.js.gz. Ping @gaearon what do you think?. The video is a bit outdated, in https://github.com/smooth-code/error-overlay-webpack-plugin, I choose to reload the page when an error is displayed.\nI don't know the behaviour of create-react-app but the reload is not done by react-hot-loader.. Actually I will close it because this is expected, the only thing we have to do is updating the website.. Thanks.. I think it is too much yes, I will remove it completely.. Yes, new challenge to come!. I think it is a good idea, we have a lot of confusion between these packages.. For now we rely on Babel to make React Hot Loader work. I am sorry, but you have to add Babel if you want to use it.. @jackwilsdon sorry, a wrong click!. Thanks for taking care of that! . Thanks!. cc @oliviertassinari this is probably why it is not working for you. Typescript setup looks like not very clear, I think we have to improve the readme.. Thanks for reporting it, it is fixed!. @theKashey  it looks like you fixed it? Isn't it?. Test added, I think the source of the problem is not PureComponent.. @theKashey good work!. I made some test on Loadable Components. I don't know what has changed but I no longer need to reload everything. It works out of the box without adding any code. Could be the same for React Loadable.. Example from this PR. Let's make it clear before rewriting this README section.. @theKashey the behaviour that I want is loading in component but only server-side https://github.com/smooth-code/loadable-components/blob/master/src/loadable.js#L58. So I think doing it in constructor makes it compatible with HMR, so nice!\nYes the state of Code Splitting stay unchanged. Loadable Components and Imported Components work both out of the box.. I think we could try to add support for \"ref\" and only for React > 16.3. I don't know if it is possible to do it without breaking React < 16.3 support.. Thanks!. @theKashey I am on it!. I have nothing against Jamie approach, it is just important to notice it. I can remove the striked line if you want.. Just use yarn release and all will be fine \ud83d\udc4c. I think this is not a good thing to add in README, this is very confusing and it will generate a lot of issues.. I love the idea!. @s-h-a-d-o-w you are right, let's go for \"webpack\"!. I am happy to know that there is finally a hope for React + Hot Reloading. When I started to work on the project one year ago, I didn\u2019t expect so much complexity. I quickly gave up but thanks to @theKashey, the project continued to live.\nToday I think you should warn in readme that the latest supported version is React 16.5 and specify it in peerDependencies. And yes, stop the development \ud83d\ude22 even if it is your baby.\nThanks again for this year of hot reloading, it would not have been possible without you!\nExcited to see what @gaearon and React team are cooking \ud83c\udf73\ud83d\ude01.. @theKashey looks clean!. @theKashey with Babel 7 + Typescript, I think it is not a good idea. Better to keep it simple.. You have to mark your App as hot, so it the path is correct, you must not be in the App.js.. It is AWESOME, I like the idea to monkey patch React \ud83d\udc4c. I think it is very nice to simplify API and to remove the magic \"module\" part! Good job!\nI can't review it in detail because I no longer understand the whole code.. @gaearon OK \ud83d\ude24. We transpile it using Babel, so why do we need to add it?\n```sh\n$ babel src/AppContainer.js                                                                                                                     \n'use strict';\n/ eslint-disable global-require /\nif (!module.hot || process.env.NODE_ENV === 'production') {\n  module.exports = require('./AppContainer.prod');\n} else {\n  module.exports = require('./AppContainer.dev');\n}\n```. It is not a real problem since Prettier does the job for us.. Can you remove this file?. Why renaming \"babel\" to \"babel-plugin\"? I think it doesn't have so much value except breaking all existing installation of react-hot-loader.. We have to expose both AppContainer and HotContainer and deprecate AppContainer. The 3.0.0 beta is widely used and we should minimize breaking changes and take users by the hand.. I agree, but without a Lerna project containing all three projects (react-hot-loader, react-proxy, react-deep-force-update) this is not easy.\nAnd yes we should have a memo for this kind of issues.. We could rely on WeakMap since we are targetting only modern browsers.. hydrate / traverse. The goal of this function is to traverse a tree (stack) and swap all components is it right? I think the naming is not good.. The goal is to traverse React tree and build an AST of it in order to traverse it and swap all swappable components, yes?. This part should not appear in this section. It is an advanced case. We have to keep it as simple as possible for the user and the hotExported is easier.. To move in advanced section.. We have to wrap displayName. It is a well known pattern in hoc and it is better for debugging. . The signature is not correct and not composable.\njs\nhotExported(module)(WrappedComponent)\nAlso do we really need to specify \"module\"?. I think we should always activate reconciler. Why making it optional?. So we can drop this option isn't it?. This is old changelog reformated, nothing important.. What does it fix?. This is not perf, we iterate two times. I prefer to check child after.. This is not the fix.. Useless. OK. null. Not needed.. Global does not work in browser.. We should use logger.. We should remove it.. I think we should not add note in this section.. We should make it work on Parcel too.. Can you explain what is the problem? I think we should open a new issue on Parcel, if it does not work with this project, it is useless.. This is not very clear, I suggest to change everything and put it in the README :\n```\nUsing React Hot Loader + Relay\nTo enable Relay compatibility mode, you must define a custom config:\n__js\nimport { setConfig } from 'react-hot-loader'\nsetConfig({ relayCompatMode: true })\n__\nThis mode is not compatible with react-async-bootstrapper or react-async-component, more detail in #833.\n``. 1. ?../utils.devshould not do anything at runtime, refactoring needed.. Rename torelayCompatMode(even if it not justrelay, for now it is).. This is React Stand In, not React Hot Loader.. If you are doing that, please removereact-stand-inand put all code inreact-hot-loader. I think this is a good idea. We could also remove Lerna.. If it is, then we can removereact-stand-in.. I think we do not need emotion in this project.. Examples should reflect real examples, I think this is not a real example. I suggest to create a simple Portal example.. Or an Async Portal but without tricky things.. Excludingnode_modulesis a good thing, please add it and remove comment.. We have class properties \ud83d\ude01.. We should definitely merge projects.. nop. Just #824 should be fine, please remove link.. I agree, but could we find a name more precise thancompat?. Maybe long and explicit, it is OK for me.. Why?. You should useloadable-componentsorreact-imported-component. They provide the best support for RHL.. We should discourage usingreact-loadable`.. Miss parenthesis. Incompatible with PropTypes. Webpack. Webpack-less\n\nLinks on electron-compile and electron-forge. \n",
    "cgarvis": "Looks like this is happening if you are trying to use the 0.14 rc of react.\n. :+1: \n. ",
    "fortruce": "I see this too when using react@0.14.0-beta3. I was able to resolve it by changing the peer dependency in react-hot-api to include the version I'm using:\n\"peerDependencies\": {\n    \"react\": \">=0.11.0 || 0.13.0-beta.1 || 0.13.0-rc1 || 0.13.0-rc2 || 0.14.0-beta3\"\n  },\nAnd I had to remove the older version of react from react-hot-loader's node_modules.\n. ",
    "fc-io": "sure, should be fixed now\n. ",
    "dzannotti": "+1\n. ",
    "qimingweng": ":+1: \n. ",
    "pebie": "I found my mistake.\nYou can checkout default branch on my git hub repository it works now like a charm. Just launch gulp after npm install\nI did not put hot in the right place (webpack-dev-server config instead of webpack config).\nAnd, thanks to Troubleshootings page, to prevent browser reloading each time I modify a React component I forgot these in my entrywebpack config : webpack/hot/only-dev-server\n{\n        module: [path.join(options.srcPath, 'index.js'), 'webpack/hot/only-dev-server'],\n        common: ['react', 'react-router', 'webpack/hot/only-dev-server'],\n        client: ['webpack-dev-server/client?http://localhost:8080']\n}\nHope it could help !\nThanks for your answers and apologize for my mistake :) \n. ",
    "chanon": "Thank you for the solution!! I just ran into the same problem and was able to fix it by excluding /node_modules/. I wonder why it happens only to us and why the boilerplate example doesn't need it.\n. ",
    "toddwildey": "In react-hot-loader, a regex test if performed on the resourcePath.  This test should be expanded to include react-hot-loader dependencies.  Specifically, react-hot-api, react-proxy, and lodash should be added to the exclusion list.  Code section I'm referring to starts on line #13 of index.js:\nvar resourcePath = this.resourcePath;\n  if (/[\\\\/]webpack[\\\\/]buildin[\\\\/]module\\.js|[\\\\/]react-hot-loader[\\\\/]|[\\\\/]react[\\\\/]lib[\\\\/]/.test(resourcePath)) {\n    return this.callback(null, source, map);\n  }\n. ",
    "seeliang": "Thanks @halt-hammerzeit \n. ",
    "peterKaleta": "thanks!\n. ",
    "patrick91": "Check this issue: https://github.com/gaearon/react-hot-loader/issues/141 :)\n. ",
    "mxstbr": "Close irrelevant PR\n. ",
    "Anahkiasen": "Oh for christ's sake. Ok I found the issue, I spent hours changing my codebase, my Webpack config, my folder structure, etc. And it was a goddamn casing issue. My folder was named assets/js/components instead of assets/js/Components which was ok to JS but not to RHL (or Webpack dev server, don't know).\nTroubleshooting mentioned this:\n\nAlso make sure that your requires have the same filename casing as the files. Having App.js and doing require('app') might trip the watcher on some systems.\n\nSo I checked all my files, but not my folders. I'm an idiot.\n. I updated my folder to match the casing in my imports. You can install this plugin to help you and prevent further similar errors.. ",
    "nickw444": "+1 Thank you @Anahkiasen for coming back and writing your resolution here! Saved me a few hours of debugging! Cheers \n. ",
    "wzup": "@Anahkiasen \nwhat exactly have you done to solve it? It is not clear from your answer. Could you pls add more details?. ",
    "baterson": "@Anahkiasen thanks a lot! I tried to fix it several hours. ",
    "gajus": "I have figured it out.\nBecause we are using webpack-dev-middleware and webpack-hot-middleware, we need to be using webpack-hot-middleware/client instead of 'webpack-dev-server/client?http://[..] in the webpack config, e.g.\n``` js\nvar webpack = require('webpack'),\n    devServer;\n// webpack-dev-server --hot\ndevServer = {\n    contentBase: __dirname + '/src/endpoint',\n    colors: true,\n    quiet: false,\n    noInfo: false,\n    publicPath: '/static/',\n    historyApiFallback: true,\n    host: '127.0.0.1',\n    port: 8000,\n    hot: true\n};\nmodule.exports = {\n    // devtool: 'source-map',\n    debug: true,\n    devServer: devServer,\n    context: __dirname + '/src',\n    entry: {\n        app: [\n            // WebpackDevServer host and port\n            // 'webpack-dev-server/client?http://' + devServer.host + ':' + devServer.port,\n            // 'webpack/hot/only-dev-server',\n        'webpack/hot/dev-server',\n        'webpack-hot-middleware/client',\n\n        './app'\n    ]\n},\noutput: {\n    path: __dirname + '/src/endpoint/static',\n    filename: '[name].js',\n    publicPath: devServer.publicPath\n},\nplugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.OldWatchingPlugin(),\n    // new webpack.NewWatchingPlugin(),\n    // https://github.com/webpack/docs/wiki/optimization#deduplication\n    new webpack.optimize.DedupePlugin(),\n    new webpack.NoErrorsPlugin()\n],\nmodule: {\n    loaders: [\n        {\n            test: /\\.js$/,\n            exclude: [\n                /node_modules/\n            ],\n            loader: 'react-hot'\n        },\n        {\n            test: /\\.js$/,\n            exclude: [\n                /node_modules(?!\\/redux\\-immutable)/\n            ],\n            loader: 'babel'\n        }\n    ]\n},\nresolve: {\n    extensions: [\n        '',\n        '.js'\n    ]\n}\n\n};\n```\n. This issue is not limited to async functions. https://github.com/gaearon/react-hot-loader/issues/554. The real issue is documented here. https://github.com/gaearon/react-proxy/issues/69. This doesn't fix the issue.. Duplicate of https://github.com/gaearon/react-hot-loader/issues/554. ",
    "kevinSuttle": "For future reference: https://github.com/Browsersync/recipes/tree/master/recipes/webpack.react-hot-loader\n. ",
    "Raigen": "I have the same problem with this.state to be undefined in getter when using hot-loader.\nNewest version of webpack and react-hot-loader\njavascript\n// transpiled by babel\n      _createClass(Plugin, [{\n        key: 'editLabel',\n        get: function get() {\n          return this.state.mode === 'view' ? 'Edit' : 'Save';\n        }\n. ",
    "brownieboy": "@Gaearon,\nThanks for your response.\nIs there a similar bug in Firefox?  My source maps don't update there either.\nOnly Safari seems to be updating them, which is a bit of a bummer if you're not on a Mac!\n. ",
    "zivni": "@gaearon - the Chrome bug is reported to be fixed in Chrome version 48. but my source maps still do not update. I'm using devtool: 'eval-source-map'\n. ",
    "xjccc": "i try to use devtool:'eval-source-map',can not usefull\n. ",
    "trbngr": "...and I just realized that I could exclude the static files directory ;)\n. ",
    "mattconde": "Making a straight switch for 2.0.0-alpha from ^1.2.8. My app doesn't render at all from the dev server and I get Uncaught TypeError: Cannot read property 'writable' of undefined   makeExportsHot.js 37.\nI've logged it and it's the first component that has drag and drop on in my app, in the error case m.exports is a Function not an Object.\n\n. @gaearon Yup thanks! That's done it. It's running now, I'll continue to test whilst I dev the app.\n. ",
    "muzfuz": "I made the switch on a project I'm currently in early stages on.  Nothing broke, but reloading is noticably slower.  I'll update this post if anything breaks. \n. ",
    "hmeerlo": "Installing it gives me a warning which I think should not be ignored:\nnpm WARN deprecated react-hot-api@0.5.0-alpha-1: BROKEN NPM RELEASE. USE 0.5.0-alpha-2.\nreact-hot-loader@2.0.0-alpha node_modules/react-hot-loader\n\u251c\u2500\u2500 source-map@0.4.4 (amdefine@1.0.0)\n\u2514\u2500\u2500 react-hot-api@0.5.0-alpha-1 (react-proxy@0.6.5)\n. Hmm, apparently 0.5.0-alpha-2 is not even available yet:\nNo compatible version found: react-hot-api@'>=0.5.0-alpha-2 <0.6.0'\n. Yes thanx, it works fine now. Not seeing any noticeable difference with the 1.x version btw.\n. ",
    "thetimbanks": "Installed the alpha-2 and everything seems to be working fine. The speed is relatively the same.\n. ",
    "billyjanitsch": "@gaearon you might want to publish 2.0.0-alpha-X as a prerelease on npm rather than as the default latest release, so that it doesn't get installed when you run npm i react-hot-loader. See http://carrot.is/coding/npm_prerelease\n. ",
    "Baggz": "@gaearon \nWorking great so far! Thanks a lot for a very seamless upgrade! :+1:\nIs there any ETA of stable release?\nThanks!\n. ",
    "mweststrate": "+1 for releasing this :)\n. ",
    "STRML": "Depending on a shared module that handles syntax errors/ENOENT sounds like the right approach to me. :+1: \n. ",
    "alexkuz": "I don't even remember that =]\n. ",
    "Gozala": "In theory it should be easier to hot swap app written in this interface since all of the app state is one place and there is only top level view and update functions (usually composed out diff component view and updates) so in practice I should be able to just swap the whole thing and re-render but when manually trying that I run into issue with two reacts versions :(\n. ",
    "tugberkugurlu": "I have the below content for example:\n```\nvar React = require('react');\nvar ReactDom = require('react-dom');\nvar HelloWorld = () => {\n    return Hello World!;\n};\nReactDom.render(\n    , \n    document.getElementById('app')\n);\n```\nAny change I make to HelloWorld component gives the below warning:\n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n[HMR]  - 76\n\nyou are exporting functions.\n\n@gaearon I guess HelloWorld is what you were referring there as function, correct?\n. ",
    "dontlemmedown": "Yes, i did it...\njs\nentry: {\n    app: [ path.resolve('app', 'entry', 'index.jsx'), 'webpack/hot/only-dev-server' ],\n    vendors: Object.keys(dependencies),\n    client: 'webpack-dev-server/client?http://localhost:3000'\n}\n. #### This, when I start the server.\n\nWhen I try to update a data\n\nMy entry looks like \njs\nentry: {\n    app: [ path.resolve('app', 'entry', 'index.jsx'), 'webpack/hot/only-dev-server' ],\n    vendors: Object.keys(dependencies),\n    client: 'webpack-dev-server/client?http://localhost:3000'\n}\nto get some changes, I should to refresh the page..\n. I thought, that hot: true in devServer settings equals webpack-dev-server --hot or \njs\n new webpack.HotModuleReplacementPlugin()\ni was wrong =)\n. ",
    "seburgi": "I can confirm the described behavior: when I edit a component that is located on a deep linked part of the application (e.g, http://localhost:3000/items/) I see a failed http request:\nGET http://localhost:3000/items/699c0d87-fd01-4aee-a5e8-eb1d08b306c6/34f89fad62976d0397c3.hot-update.json 404 Not Found\nWhen I manually load http://localhost:3000/699c0d87-fd01-4aee-a5e8-eb1d08b306c6/34f89fad62976d0397c3.hot-update.json (without \"/items\") I get a valid response.\nI will try to reproduce this in a sample project and will report back.\n. @pdeva could you try adding \" publicPath: '/' \" to your output section, so it looks like this:\noutput: {\n    path: '.',\n    filename: 'bundle.js',\n    publicPath: '/'\n},\nThat fixed the problem for me.\n. ",
    "dlong500": "Any updates on this?  I'd like to move to your recommended way of doing things but without a migration guide I just don't have the time or expertise to fiddle around with it at the moment.\n. ",
    "lionelB": "thanks for clarification.\n. ",
    "jaredly": "Yeah, that sounds reasonable. Here's the code for jumping to a function's source (it uses the chrome console api fn inspect that jumps you to any function's source).\nIf it's an es6 class then I jump to the constructor, otherwise I jump to the render fn.\nI imagine the constructor doesn't get proxied, right? So the only change would be for the render function?\n. ",
    "Bnaya": "I'm having this issue on v4.3.12 and i think with all 4.x\n/cc @theKashey . @theKashey Thanks!\nWhich config should make it work?\nwhat i have:\nalias: isHot ? { \"react-dom\": \"@hot-loader/react-dom\" } : {},\nand i have the console message that its up and runnint.\nAnd:\n```\nimport { setConfig } from \"react-hot-loader\";\n// https://github.com/gaearon/react-hot-loader#setconfigconfig\nsetConfig({\n  logLevel: \"warning\",\n});\n```\nAnd the babel transformer plugin:\nplugins: isHot ? [\"react-hot-loader/babel\"] : [],\nreact-hot-loader@^4.6.3:\n  version \"4.6.3\". I tried to understand what that means, and how it will effect me and i didn't manage to understand  :(\n. i read the docs, but i just don't know what that means\nif there will be a minimal example of what it do will be great. yes, but why its not on by default?\nWhat is the effect on RHMR?\n. https://github.com/Bnaya/react-mobx-typescript-boilerplate/tree/hmr-3-not-working\nThis is more striped-down version with only entry point component . Managed to make it work. A common practice is to disable ExtractTextPlugin in dev mode\nnew ExtractTextPlugin({\n        filename: \"styles/[name].[contenthash].css\",\n        disable: !isProduction,\n      }),. You can always put babel loader after ts-loader\nThat what i do. @theKashey there's a yarn \"trick\" to install package as another name:\nhttps://twitter.com/sebmck/status/873958247304232961?lang=en. Seems like hmr won't preserve state when component is wrapped with  mobx stuff. Dose both babel plugin and webpack loader are required for it to work?\nOr just the loader?. ",
    "theKashey": "Yeah, lets reopen this.\nhttps://github.com/facebook/react-devtools/pull/1191. Fixed in 4.5.0 (beta) - https://github.com/gaearon/react-hot-loader#setconfigconfig. @Bnaya - you need setConfig({pureRender: true});. @Bnaya  - https://github.com/gaearon/react-hot-loader#-hot-labs-\n```js\nimport { setConfig } from 'react-hot-loader'\nsetConfig({\n  pureRender: true, // RHL will not change render method\n})\n. The problem with DevTools was in shadowing `.render`, and the option you yet have to manually enable - the solution.. It was an experimental option. There are a few tests, which goes red with this option enabled.. @tgroutars - cos https://github.com/ReactTraining/react-router/issues/2182#issuecomment-216220598 and https://github.com/ReactTraining/react-router/issues/2182#issuecomment-246901302. _Good_ example will got help you - it should work out of the box. Better provider your example to play with.. @PeterKottas With HOC - yes, with double HOC-no.\nRHL will highlight the class you should try to export as a top-level variable.\nAnyway - it is easy to solve your puzzle, than to explain that should you do.\nCan you list the code with the problem?. @PeterKottas - let me reveal the hidden truthjs\nconst roomsWrapped = \nwithDashboardLayout( // produces a result\nrolesLoadedHoc(   // produces a temporary variable\npropertyPlanLoadedHoc( // produces a temporary variable\nroomsLoadedHoc( // produces a temporary variable\nRooms // a variable.\n))));\n``\nSo - here we hot 3 temporal classes, RHL can not manage.\nOne said that https://www.npmjs.com/package/extract-hoc could help, or you can extract everything manually.. @inetfuture - you have decorated Console with @connect, so Console is notvisible` to react-hot-loader. And you will loose internal state of that Element. And, usually, in all nested tree.. This is a most important thing to be solved in future. And the hardest puzzle to solve.\nCurrently, there are two ways:\n1. Integrate deeply into the webpack, and ignore changes in components outside the changed file.\n2. Try to create a way to handle unexported components. Use stack traces as fingerprints.\nFirst one is a bit tricky - currently, on module update, you will require new sources, and render the new application from the scatch. RHL in this case preventing React to unmount the old application.\nIt is also possible just to require the new sources and re-render the old application. And RHL will replace all the React components by the new ones. Magic.\nAnd what if React Hot Loader will replace not all the new ones, but only the CHANGED one - this will throw away all the issues, as long all decorators and compositions before the change point will be the same as before.\nThere is only one small problem - if you will edit React component, and we will replace it - that is ok. But if you will edit some common code, and the change will affect the wider amount of React components... How to detect the borders of the change? \nStill easy, but one has to understand which files contain React components, and which is not (Easy), and track how one exports its imports (possible) and extending the change borders by doing it.\nPS: You can do it manually by placing module.hot.accept.\n. Look like it working just because you dont \"decorate\" classes (like HOC), but you modify their prototypes. Thus it is the same class and you had it as a top level variable.. > Ok, the \"decorators\" branch in zdavis/react-hot-boilerplate shows the problem pretty clearly.\n@zdavis  - thanks for this case\nV4 is also unable to solve this puzzle. The problem is this this code\njs\n<div>\n      <h1>Hello, world!!!!</h1>\n      {children}\n</div>\nIn does create {children} prop for a div with a length 2, and second element is also an array.\nIn the same time after react-render, ie while one traverse react-tree it will be children prop with a length 3. Look like something unflatten the array.. Just yesterday we desided not to do anything. #821. \nThe key reason - you are not going to hotreload something from node_modules. Ie change the function code. \nWarning is just a warning. Everything should work. \nIf not - could you provide some example, to let us understand the problem?. @lgra - it will not always work, and even can break some generic code. The problem is that React-Hot-Loader will always somehow wrap original class with something to.. just do his work.\nAnd that somehow is the internals you should not rely on. It might be changed at any point.\nCurrently, there are 4 options:\n 1. Trick by @JorgenEvens. It will always work.\n 2. We can ask react-proxy to expose the original class as @yesmeck propose in https://github.com/gaearon/react-proxy/issues/68\n 3. It is possible to make construction element.type instanceOf ImportedComponent work. Will you use it?\n 4. We can wrap the original class just after creation, so comparisons will start working instantly. But it will introduce yet another magic code transform we are trying to avoid.\nThe best way, I can imagine - we can expose special function for comparison, but how to provide a requirement to use it?. @Igra - can you show the rest of your babel plugin? To be more clear - newExpr.\nActually - code might be quite safe if\n```js\nelement.type === ImportedComponent\n// will be transpiled into\ncompareRHL(element.type, ImportedComponent)\n//where\ncompareRHL = (a,B) =>{try{ return a===B || (typeof React !== 'undefined' && a===.type)} catch(e){} return false; } \n```\nKey points -> keep the old comparison, and there might be no React, and long something.type === something is quite generic.. But is far not easy to transpile something in node_modules and get all the things working properly. \nAnyway - sooner or later we will solve this.. @gaearon - could React help? Expose an underlaying type from a proxy as .type prop?\nIn the same time I am just wondering - why one need this comparison outside the tests. What are you going to solve, to archive?\nI mean - should the case be solved at all.. Look like the best way to solve this issue (and not only this one) - it is move React-Hot-Loader from React, to React-dom. Solve it from inside.\nAs long all idea around RHL is to bypass Reconciler's element.type === existingChild.type, and we are trying to undo this inside the client code.  Left arm is fighting with the right one.\nAnyway - this task could be solved for ES5 classes, as long we have full access to the prototype and do all the magic we need, but I am not sure about ES6 as long classed are sealed a bit.. So - it task is close to doable.\nIt is possible(*) to always use the first instance of a class or a function.\n - in case of class we can monkey-patch the original prototype, and backport some changes via life cycle methods. As long constructor in es6 is immutable - it is the only way.\n - in case of stateless functional component, it is also \"doable\", but will require changes on the React side -> replace FunctionCall(params) by Function.call(null, params..). Next one can overload .call method of a function to hot-replace it.\nSo - it is doable, but I am not sure that one should try to solve this problem.. ```js\nimport {isComponentsEqual} from 'react-hot-loader'\nisComponentsEqual(element.type, ImportedComponent);\n// for production\nconst isComponentsEqual = (a, b) => a === b;\n// for dev\nconst isComponentsEqual = (a, b) => a  === b || a === getProxyByType(b);\n``\nSome things is easier doable from inside.\n. It's a 0:55 o'clock. I am already not here a bit.. The main reason - your code should not relay on RHL internal implementation. But there is no way :(\nWhat I could propose:\n1. We are exporting resolveType, but you are __not__ using it\n2. We could add @lgra's magic into our babel plugin, tofix` the issue seamlessly for you.\n3. Is automagicaly does nothing for production code.\nYou will not change your code, but your code will work. This is not a great solution, as long it will not fix third party libraries, which may relay on type, but this is far better that nothing.. Anyway, even for the case with babel magic - method have to be exposed.. ...this issue will remain open, but we don't have another soluting yet..... It could. Even more - create-react-app already transpiling all the code, and RHL's babel plugin cound also safely extended to all the node_modules.\nThe problem - node_modules contain transpired JSX, and @lgra 's plugin will not work out of the box. And it much harder to create stable version, capable to work on transpiled, bundled, and uglified code. \nVolunteers? . Not so fast :( We have no information about the origins of a class or file. We have some part of this information from registration, and they cover only \"yours\" code, but they dont see a lot components(HOC, decorated and so on).\nThe closest approach is to extend babel plugin to node_modules, and next handle classes from node_modules as something not going to be replaced.\nWhich is not always true, as long redux's connect should be handled.\nThe best approach for now - create a proposal to React team, to make thing more possible. If React will be more RHL friendly, RHL could be less aggressive to JS code.. Hacks you said, @idubrov ?\n```js\nimport reactHotLoader from 'react-hot-loader';\nconst originalCreateElement = React.createElement;\nReact.createElement =  (type, ...args) => {\n   if(type should not be replaced){\n      const oldValue =  reactHotLoader.disableProxyCreation;\n      reactHotLoader.disableProxyCreation = true;\n      const element = originalCreateElement(type, ...args)\n      reactHotLoader.disableProxyCreation = oldValue;\n      return element;\n   } else {\n          return originalCreateElement(type, ...args);\n   }\n};\n``. You are right. RHL tries to hack React as soon as possible, and the only way to disable it - usereactHotLoader.disableProxyCreation. Which is a bit tricky flag, as long it will disable __creation__, but if something already got corresponding proxy - it will be returned.. Ok, so lets extract my latest proposal to completely _nothot__ node_modules into the separate issue https://github.com/gaearon/react-hot-loader/issues/991. RHL could not work without Proxies. Proxies are RHL.\nBut you can usecold APIto disable proxy creation for any specific component.. Then it would not work without RHL, in production, for example.. For __libraries__, which are not meant to change during developing, I would proposecold api`. There is ongoing PR to use webpack loader to cold all node_modules by default.\nLibrary authors should not be bothered by RHL (even if right now they are) - we should change RHL to be more reliable.. Yep. Could be a problem for monorepo. Right now we have something like this\n```js\nimport { setConfig, cold } from 'react-hot-loader'\nsetConfig({\n// this is for components defined on \"top level\" only\n  onComponentRegister: (type, name, file) =>\n    file.indexOf('node_modules') > 0 && cold(type),\n// styled is created inside a function, we dont know the file name (probable doable using stack.js)\n  onComponentCreate: (type, name) => name.indexOf('styled') > 0 && cold(type),\n})\n``\nSo the real \"consumer\" could have all the power upon freeze behavior, but not library itself.. @pitops -hot-loader/react-dom`(or webpack plugin) to solve type comparison for SFCs only.\nv5 would solve this issue next month.. That's implementation/design/language issue. For now for comparison you may use:\n- React.createElement(Type).type === React.createElement(Another).type\n- or <Type />.type === <Another/>.type, but it might complain about missing props\n- count on some static method -> Type.secret === SomeSymbol\n- use cold api to disable RHL proxies for some classes (and lose reload ability). That might help if you dont update the problematic components.\n- use Functional Components\n- wait will v5, which will remove proxies from classes, as v4.6 removed them from Functional ones.. .. that means that babel transformation, to support arrow functions can be removed!? Let me double check. It should not work.. This is known bug. A solution was found and will come in next version.. @rodoabad - it sounds like webpack, not RHL.. The root cause - arrow functions. You have to avoid them yet.. Everyone  - version 4 solves this. Update today. . @vkosovskikh, gonna to fix this in next release.\nKeep in mind - this is not an errors, just a warning.. One warning for a one component \ud83e\udd37\u200d\u2642\ufe0f . @vkosovskikh - could you try the last beta version?. @Cottin - here is an explanation\n```js\nclass Hello extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {name: '...'};\nthis.getNameAndSet = this.getNameAndSet.bind(this)\n\nthis.getNameAndSet() <-- will be executed on Class(Component) creation\n\n}\n  getNameAndSet() {\n    console.log(this)\n    setTimeout((() => this.setState({name: 'Worrrld'})), 100) <-- will always be fired\n  }\n```\nDuring update RHL trying to undertand wich changes were made, and creating an old and a new class to compare them.\nCreating, and throwing away, not adding to the tree.\nYou shall not trigger state change mechanics in the constructor. Move this logic to componentDidMount.. Webpack-hot-middleware stands for Server-Side. It detects changes and informs client side about it. \nIt actually is the Hot Module Replacement. \nIn the same time react-hot-loader... do nothing. It\u2019s goal is to stop and prevent updates. It\u2019s purely front end and starts working after webpack did its job. \nSo, correct answer is simple - this is 2 different things, but they supposed to work together. \n. @AndrejGajdos  - react-hot-loader is Cliffside react-specific library, while webpack-hot-middleware is library-agnostic mostly backend solution.\nReact-Hot-Loader would not work without webpack hot module replacement(no mater how you call it or activate it), while HMR would work without RHL.\nRHL is just keeping React Components state while they being updated.. @Aghassi - sorry, but this problem is absolutely unclear for me. Nor what you want to do, nor why it does not work.. @Aghassi - it sounds like you need this function - https://github.com/gaearon/react-hot-loader/blob/master/src/reactHotLoader.js#L82\njs\nimport ReactHotLoader from 'react-hot-loader';\nReactHotLoader.patch(AnythingDucksAsReact); // land RHL patches where you want.. RHL needs 2 things:\n- \"React\" to patch\n- \"Module\" to accept\nYou can provide your own version of react to patch - just ReactHotLoader.patch it\nYou are always giving your \"module\" to hot(module)\nI am not sure why you have to manually patch react, as long all the modules are importing react in the same way - import React from 'react'.\nRHL v4 does not rely on any React internals - only on React.createElement, and if something is not working out of the box - the right question is \"why\".. It should not work without it. Cos updating sources will not cause redraw.. @cjnaude - yes. If you do have module.accept only on App level - HRM(part of webpack, not RHL) will update a lot of modules down to the tree.\nSo having \"[HMR]\" in logs - it is ok.\nHaving a tree rerender is not ok, but there is no official way to debug and fix it. \nUnfortunately, all \"game masters\" have left this place \ud83d\udc4e . That could be solved by https://github.com/gaearon/react-hot-loader/pull/608, but no one review anything here for ages :(. @cjnaude - first - RFTM(always and carefully), next use webpack 3. By this time  \"before\" variant of Amour's code is correct, and \"workable\" is obsolete.. @jamesmfriedman - \"expected\" behaviour. All parts must be extracted as top level variables (visible to babel plugin). Or RHL will not understand how to replace a spare part.. @th3fallen dead?. @joshjg - some React components, invisible to ReactHotLoader - any decorators or any functional composition.\nA technical solution was found, and the only things left - new tests and new documentation.. Keep in mind - when you don't use harmony modules, ie not transpiled import/export, you have to re-require updated module by yourself.\nWhen you will enable them (by disabling babel modules) as @ehe888 said - everything will work out of the box.. @vraa - you forget to update a local variable\njs\nApp = require(\"./containers/app\");\nRequire by it own does not do anything.. Above..\nThere is 2 issues with code itself:\n1. Page1 starts timers on construction, but should on mount.\n2. by the time page1-3 were executed react-hot-loader is NOT (in RootApp).\nThis is a quite important moment, and we should point on it in readme, and maybe add some reporting via babel plugin.\n you have to import react-hot-loader before any other component  Or REACT_HOT_LOADER variable, all components will register into will not exists.\nBy fact - on the first change you will got all components remounted, cost they all were auto-wrapped before, and now they are registered ones.\nThere is also an issue with React itself:\n\nAs long prev and next elements are completely different - it will unmount/mount all the things.\nTo make it work one has to add keys to rendered elements, letting React know that's happening.\njs\n<p key=\"above\">above, remove this and Page1 looses statrkke</p>\n<Page1 key=\"page\"/>\n<p key=\"below\">below, remove this and Page1 keeps state</p>\nResult: there is nothing to be fixed in RHL, but there is one moment to improve.. So, this is related to webpack`s HMR, not react-hot-loader?. @thtliife - so, the rule is simple - accept modules as you import them.\nIt is bit strange, as long my version of webpack(3) will trigger an error in case you used a wrong module name.. @jamesmfriedman - whats why I have opened https://github.com/gaearon/react-hot-loader/pull/608, to understand \"what the f*** is going on\" somewhere underneath.. @ThiagoMiranda - you missed the webpack.NamedModulesPlugin()\nWithout it you file is not \"print.js\", it is \"39\" as shown in network tab.. @ThiagoMiranda if you are using webpack 3 - it should work. In case of webpack 2 - you have to re-require all the stuff you need.\nPlease check ANY webpack's HRM guide.. Please don't use v3. If you are looking for webpack plugin it's here - https://github.com/gaearon/react-hot-loader/releases/tag/v4.4.0\nPD: Just yarn add react-hot-loader would bump it to the maximal possible version .. @dangdennis - that might be due to a bug in React-Hot-Loader v4, when it does nothing without babel (#923). Always use just hot.. Any our example - just wrap with hot some component \"just before\" react-dom render, and it should be an export of another file. That was nor webpack, nor reac-hot-loader issue. It even was not an issue.. This is expected. Patch cant see all components of a class\njs\n@inject('todos')\n@observer\nclass Navigator extends React.Component ...\nWill give you ONE class. But by the fact, you are creating TREE!\nFirst (exported, extracted to a variable) one will be registered in RHL, but internal classed - will be not. RHL will be unable to change them using react-proxy.\nSee https://codeburst.io/how-to-hot-load-react-component-in-7-days-part-2-react-28ce2b61d0c7\nor  https://github.com/gaearon/react-hot-loader/pull/608\nIt is just very hard, and sometimes impossible, to use HoC or decorators. And there is no solution, yet.. Was failing with v3 - cos MobX hides class from RHL, and it will be unmounter\nWas failing with v4 - cos you dont have any AppContainer or hot.\nAlso your way to module.accept is just wrong.\nIf you will wrap Routes with hot - everything will be ok\n```js\nimport React from 'react';\nimport {hot} from 'react-hot-loader';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Root from '../root/root';\nexport default hot(module)(function Routes() {\n  return (\n    \n\n\n\n\n  );\n})\n``. Oh hot module update RHL will \u201cprobe\u201d all components, creating and rendering them. \nSo this output is ok. . @alexilyaev - you have to wrap your Application with AppContainer or usehot(module)` which, actually, do the same.\nWithout any of them you will got remount.\nAlso - Dan's video was about RHL v1. Here we got v4 - it is a bit different.\nKeys change - to handle arrow functions (they catch this) we cannot use react-proxy. \nThe new approach has to understand the change, and it literally creates an OldComponent and a NewComponent on hot-change, to probe and understand the difference.\nNext it copies over that changes back to the old component.\nAll messages you can saw - is from dry-run. They are not related to the real application.. AppContainer and hot do the same. hot wraps Component you provided with AppContainer and setup webpack module.hot.accept. Thus means - do not hot-accept App.js. Wrap with hot only nested Components (Root/Routes)\nYou need at least one of AppContainer/hot. Lots of hot just could help in some situations, as long they are able to scope the change.\nAnd it is documented in v4(next) branch.. If someone having this issue, just open your bundle source code.\nTry to find https://github.com/gaearon/react-hot-loader/blob/master/src/patch.js, it must look like\n```js\n/ eslint-disable global-require /\nif (true) {\n  module.exports = webpack_require(\"./node_modules/react-hot-loader/lib/patch.prod.js\");\n} else {\n  module.exports = require('./patch.dev');\n}\nAfter uglify it will look likejs\nfunction(e,o,s){\"use strict\";e.exports=s(\"./node_modules/react-hot-loader/lib/patch.prod.js\")}\n``\nIf NOT - that is the issue. Webpack does not reduce!module.hot || process.env.NODE_ENV === 'production'to thetrueoffalse` and inject both version of a patch file.\nPS: And the first piece of code I've got from debug build. As long module.hot is not defined\nPPS: Tree shaking is not defined for commonjs(require) modules. You need dead code elimination.\nPPPS: I've used NamedModulesPlugin to name modules. . It does it. if you set env before the build.\nSee this PR - https://github.com/gaearon/react-hot-loader/pull/1119/files. That\u2019s babel plugin, and by a some reason it thinks it\u2019s dev time. . Just improve a bit debug information. Now one can just click on function signature to found the wrong component.\nAlso I just wondering - should I suppress error messages in case Component does not have any children. Sometimes they are just annoying.\nPro - remount of component will not cause nested tree remount, as long there is no tree.\nCon - remount exists and can case parasite side effects.. Hooray!. @Philin-Anton no normal merges for half-year :(. @bmperrea , @teologov - can you just try to use read-hot-loader@next (aka version 3) ?. At your service  \ud83d\udc4c . @teologov - it worths to bump React Router and RHL. New versions are much more correct.\nAnd, anyway, it will be the fastest way to solve your issue \u2013 this repo seems to be partial abandoned :(\nNo one is answering for the issues, no one is reviewing PRs \ud83d\ude2d . @Aranir - the problem is hidden inside babel plugin. It just did not understand something.\nCheck sources after babel - file will be appended by hot-loader stuff. And if not - you have to modify your code.\n(or fix babel plugin, but this way is harder). This is an  expected behavior as long hot reloading just updates a component. \nUpdate. Not unmount, destroy, create a new one, and mount a new one. \nConstructor and other lifecycle methods are not going to be invoked. In another case, you will lose component internal state and trash all idea of hot reloading.\nHow to fix - move initialization code off component. And it is possible as long it does not depend on the component.\n```js\nimport React, { Component } from 'react';\nimport { Editor, EditorState, CompositeDecorator } from 'draft-js';\nfunction HandleSpan({ children }) {\n  return {children}\n}\nfunction handleStrategy(contentBlock, callback) {\n  const text = contentBlock.getText();\n// comment this line and type some text in editor\n  console.log(text);\ncallback(0, 1);\n}\nconst compositeDecorator = new CompositeDecorator([\n      {\n        strategy: handleStrategy,\n        component: HandleSpan,\n      },\n    ]);\nconst editorStateDecorator = EditorState.createEmpty(compositeDecorator) ;\nexport default class MyEditor extends Component {\n  constructor(props) {\n    super(props);\nthis.onChange = editorState => this.setState({editorState});\n\n}\nrender() {\n    return (\n        \n    );\n  }\n}\n```. @MikeDevice - there is no powerfull Reflection tools in Javascript to perform magical updates. Hot Loader is just a script. It has limits. You have to keep them in mind.\nThere are others ways to solve this issue, for example force HotLoader to remount this Component, but they all require some actions from you.. Not related to React world. This is pure webpack/js related stuff.\nDo you forget to module.hot.accept changes. If you extract some code as a common chunks plugin - you also have to accept changes from its main entry.\nSee https://medium.com/@antonkorzunov/how-to-hot-load-react-component-in-7-days-part-1-webpack-d8b77eea61eb. Related to Webpack's HMR, not React-Hot-Loader.\nSometimes you have toacceptHMR in more than one place. Check console logs to understand how changebubblesto the top and where you have to accept the change. This is HRM related issue, not RHL. You should go the webpack or webpack-dev-server repos.\nBut, long story short - you should not usewebpack-hot-middleware- just add --hot to webpackdev-server startup command.. @alex-mironov - add webpack.NamedModulesPlugin(), and do not forget tomodule.accept` the changes.. @Pau1fitz - not enough information. Please show your webpack configuration.\nPS: react-hot-loader v3 and v1 is completely different solutions. You should not use any webpack loaders, and use babel plugin instead.\nCheck the migration guide.. @SnowFlowers  - webpack (with hot module loading) and  react-hot-loader - are different projects. Nothing similar between them. You should address your question to the webpack community.\n. This is expected behaviour. As long React-Hot-Loader rely on babel's magic - you have to had that pass.\nReact-hot-loader will not work nor for \"node_modules\", nor for DLL plugin.\nYou also can not enable babel/webpack-plugin for \"all the files\", cos they both work for a top level exports or variables.\nBut RHL is only for (hot)replacing old React components. Everything(EVERYTHING) must work even without it - you will just loose internal component state due to tree re-render.\nIf not - check HRM settings.. I'll take a look. I hope initial repo, @marcellomontemagno created 2 years ago, is still valid to reproduce a problem.. Call me if you need a hand.. @foisonocean - do you define current envoroment?\ndefineConstants({\n  'process.env.NODE_ENV': environment,\n});\n. And you also have to not use babel plugin. \nUnfortunately, there is no simple rule provided, to destroy registers by uglify. \nIt exists in webpack plugin, and one should port it into the babel one.. @foisonocean - by whom? There is no magic(yet) - you have to remove it by yourself.. But do you have it as process.env.NODE_ENV or you just define a variable with such name in the target script?\nPS: You can get rid of RHL code in production by defining\njs\nnew webpack.DefinePlugin({\n  '__REACT_HOT_LOADER__': undefined\n}),\nAnd next uglify will destroy blocks. (I hope)\n. @foisonocean - double checked - there is no way to contain RHL into production bundle. Are you sure that you are not getting these codes from third party sources?\nCan you share a whole webpack config?. Just try to remove a 'cache-loader'. According to the sources it should respect ENV, but I cant see any other reason (and latest babel-loader has internal cache).. @Kannnnng - yet, without RHL HOT Update will destroy application state. With RHL it might(not always) keep it.\nBut anyway - where is NamedModulesPlugin and do you include react-hot-loader/patch?. @Kannnnng - do you wrap your Application by AppContainer?. \ud83e\udd37\u200d\u2642\ufe0f  I cant help without example.. @Kannnnng - but there is no RHL-related code inside :(. @Kannnnng - ok, that was easy :)\nThe roots of evil are inside \"react-loadable\". It is designed to load a Component only on mount action. In proper RHL you will not have remount action (and will not lose internal state).\nThis a common \"issue\" for near to all \"loaders\".\nHow to solve - use https://github.com/theKashey/react-hot-component-loader, it is designed to work with HMR and quite handy. \n. @Kannnnng - eh, webpack3 three shaking is so weird thing - from one side they ask you to ship es6 sources, from other - not working out of the box :)\nI'v bumped package version and not it might work.. PS: I'v just remove loader from Routes, and RHL work perfectly. So problem is with Loader, as expected.. @Kannnnng - for me problem is not exists without react-loadable.. @Kannnnng - it should not be a problem, as long I am using static class members and everything is ok.\nAnd, anyway, there is no matter for babel plugin how do you create your classes - it just looks for a variable.\nPS: You should not use state-0, use https://babeljs.io/docs/plugins/transform-class-properties/ instead.. Second is also quite easy to solve. I just need your repo to test everything.\nI dont know why, but I didn't face that error.\n@Kannnnng  - tested on your repo and fixed. Just bump the version.. @ipostol - not sure I understood you, but your code is correct for webpack < v3.. @ipostol - for webpack 3 you can not re-require component, but you have to re-render Application to trigger component replacement.. @KidkArolis - webpack plugin will \"see\" only exports. Babel will \"see\" all top level variables.\nYou should always use Babel plugin, not webpack one.\nPS: And RHL had nothing with \"full page reloads\". Please - just check console output. \nWebpack's HRM(HMR!=RHL) will allways describe why page in going to reload.. @KidkArolis - yep. Actually, I did the same in the beginning and nothing works. \nLoosing internal state occurs when react-proxy could not replace old Component by a new one. And it occurs then old(or new) Components in not registered.\nSo - to get it working you have to:\n 1. export ALL used components(ALL!). Cos webpack plugin works on module exports.\n 2. use babel plugin. It could be the only babel thing inside your code, you can just disable(not use) rest of Babel's magic.\nEven in this case, RHL will break on HoC composition( and decorators) and so on. \n__REACT_HOT_LOADER__.register must be invoked for all the spare parts and Component. Sometimes it is not quite easy. Especially with the webpack plugin :(. @noahgrant - I am currently on duty and I still have a hope that we could solve problems with decorators, compositions and other stuff RHL cant, but should handle.\nHandle code splitting is also not a great problem, but it depends on the loader you use. Popular repos does not support RHL, but it is possible to fix it:\n1. Dont user loaders, which does not react on componentWillReceiveProps( loadable-components, react-loadable ), or you will never even fetch update from a server, as long they do it onComponentWillMount (eaten by RHL).\n2. Wrap rendered component in RHL's Application, to get them re-rendered after code update.\nIt is hard to make a good advice which loader you should use, as long the best ones were just named as \"not usable\". I know only 2 loaders with good hot behavior. \n- https://github.com/theKashey/react-imported-component/ - I've built it especially for RHL.\n- https://github.com/faceyspacey/react-universal-component/ - A bit more mature version.\nThe good part: the interface is always almost same.. Thats the difference between v1 and v3?\n\n\nv1 adds module.accept to the end of each file with React.Component inside, hooks the exports and do its work. Working from the bottom, and for a single file.\nAs result if you change a single file - only single file will be updated. As  result - if you have decorators somewhere higher - they will be just NOT re-rendered. And, as result, deferred loaders are works.\n\n\nv3 asks you to add module.accept to the application mount point. It works from top to bottom. And if you will change a single file - a whole subtree will be updated. Thats why you can get whole tree rerender and will face some problems with code splitting.\n\n\nBehavior of v1 is very, very bad.\n- First of all - it does not support Stateless Functional Components. As long any function could be SFC - it justs ignores the at all.\n - Second - it adds appends module by self-accept code. Not all files could be self accepted.\nSo, if you want V3 to behave as V1 - just append each file with this code from V1. But you could not append each file. It is not a good idea.\n. Forget about V1. It is easier to make V3 working as V1 that to keep it alive.\nHow to do it:\n1. copy webpack/index.js from this repo\n2. modify it, to contain code from V1\njs\nif(typeof React !== 'undefined'){\n    // self accept all `react` modules\n   module.hot.accept(function(){}); \n   module.exports.forEach( module => {\n      if(typeof module==='function'){\n        try{\n          React.createElement(module); // this triggers react-proxy\n        }catch(e){}\n     }\n });\n// code is not tested\nPS: And next you somehow have to trigger deepForceUpdate. But you stop HRM even bubbling and Application will not receive it. And you dont have access to mounted instanced - react-proxy does not expose it. Maybe there is some webpack API for it...\n3. You just converted V1 to behave as V1. And it will work with React 16.\nIf one good day one good one will create babel rules to detect possibilities of safe-self-accepted of a module - it will change the game rules. But for now, it is too dangerous.\nPS: v3 is unusable for me right now for a few reasons\u2014one is the binding issue after transpiling only to modern browsers.\nWe already have a solution in dev branch.. Same shit :) . Due to internal logic, all spare parts (ie hot-replaceable) must be extracted as top-level variables, or HRL will not be able to hot-swap them.\nThis is a stopper for HoC or decorators. It is just easier to convert HOCs to a normal, prop-based components, and use react, not functional composition, to create target logic.\nOr just use\njs\n const level1 = provideHoC()(Counter);\n const level2 = provideHoC()(level1);\n export default level2;\n. @neoziro. Never too late. I'll do it.. @quangbuule - looking quite good, but, please, add tests and a bit more description.. @mateoKaradza - just have a look on your project.\nFirst - you did not wrap your App with HotContainer. Next - there is no errors in console. But state is dropping on update :(\nAccording to your message - you have problems with the internals of redux-form.. @mateoKaradza are you expecting redux form to reset values to the initial state on remount? There must be no remount.\nWill try to dig your case once again.\nPS: \n\nHere is the HotContainer for the app: https://github.com/blazing-edge-labs/admin-playground/blob/master/src/index.js#L12\n\nI still can't see it. You just accept changes.\nYou have to wrap whole application with AppContainer\njs\nimport { AppContainer } from 'react-hot-loader'; //   <------\nconst render = Component => {\n  ReactDOM.render(\n    <AppContainer> <<--- not exists in your code.\n      <Component />\n    </AppContainer>,\n    document.getElementById('root'),\n  )\n}\nWithout this component magic will not work.. @mqklin - as long there is no \"decorators\" in JS you can try to add babel plugins\n1. babel-plugin-transform-decorators-legacy. Which will convert decorator to a HOC.\n2. extract-hoc, which will transform that HOC to the digestible by RHL code.\nThe order is crucial.\nie\njs\n\"plugins\": [\n    \"transform-decorators-legacy\",\n    \"extract-hoc/babel\",\n    \"react-hot-loader/babel\"\n  ]\nPS: Might not work. Having no chance to properly test it, sorry.. Decorators will not work at all. There is no way to make them work.\nExcept #711 - it will literally solve everything. I'll do my best to make v4 sorted out before Christmas.. ```js\nclass MyComponent extends React.Component {\n  onLoad = () => this.setState({loading: true});\ncomponentDidMount() { onLoad(); }\n}\nThis code will not work, cos `this` in onLoad and the actual `this` are different.\nAnd this is genetic issue from react-proxy. It cannot override `this` bound to arrow function :(. Yep, @gaearon should be involved, cos one(current) solution for RHL is to implement a magic-proxy to hide the proxied component change from React. \nBut the second, may be the better, solution is to add some magic into React, to enable hot-replace for component. Using a key prop, or some fiber/reconciliation magics..\nFighting with arrow functions (actually - fighting with language itself) is like fighting with wind mills. Just endless.\nPS: Slack, Stride, Gitter, Telegramm \u2013 they are all good enought. The only problem is the time difference between UK/France and Australia.. This is issue for react-proxy. PrototypeProxy is bound to the first realisation.js\nif (InitialComponent.prototype && InitialComponent.prototype.isReactComponent) {\n``\nAnd no one expects a change here.. (for ES6) you can switch from class to a function, but you cant switch from function to a class -first` constructor is sealed during initialization.\nShould not work. Easy to make it work without error but with a state loss (recreate ProxyComponent on type change).. If you will evolve functional component it will copy over all methods, but not a constructor.\nIt will still inject methods, created in a constructor, but same for all instances.\nThis is commonly ok, but not always. For react components will work just only React injects some things (this.updater, for example) by itself.. What about \"that babel plugin\"? @loris - check this out - https://github.com/gaearon/react-hot-loader/issues/650#issuecomment-335979743. @Stanko - we will remove this warning asap. This is just a warning. Everything is ok in real.. @Koenkk - this is a quite complex problem. And source lays somewhere in webpack. \nSo what the problem - shrinkwrap. Just delete it and it will work. Or use yarn (as long it ignores it).\nMore deeply - react-hot-loader will use quite old version of react-deep-force-update. Just with another interface.\nAnd then we do have magic - you ask for the latest version of deep-update, and shrinkwrap it to version 1.\nAs result - you, @Koenkk, have react-deep-force-update:* in your package.json.\n NEVER use wildcard import, and NEVER import things you not gonna use *\nThat will install react-deep-force-update v 2xx, and react-hot-loader will install desired version as nested node modules.\nMagically, it will use not own and correct version of deep update, but the top most one.\nAs result - everything will not work. Just because calling deepForceUpdate to bypass connect's PureComponent will do - nothing.\nBut this is webpack issue, as long it perform incorrect rewiring of a modules.\n```js\n// \"./node_modules/react-hot-loader/lib/AppContainer.dev.js\":\n// (function(module, exports, webpack_require) {\nvar React = webpack_require(\"./node_modules/react/index.js\"); <- points to top most React.\nvar PropTypes = webpack_require(\"./node_modules/prop-types/index.js\");\nvar deepForceUpdate = webpack_require(\"./node_modules/react-deep-force-update/lib/index.js\");\n^^^ points to top most react-deep-force.\nmust be ./node_modules/react-hot-loader/node_modules/react-deep-force-update/lib/index.js\n``\nSo, webpack just ignores './', ierelative to the current file` and uses it's default behavior - relative to the project root\nSo - how to solve.\nJust remove all node modules you are not going to use from package json.. Should we leave a memo about problems using Hot-loader with untranspiled ES6?. AppContainer must be top most container.. PS: react-slingshot is using RHL's webpack-plugin. This is not related to this issue, as long it might cause only state loss, not nothing, but they should move to babel plugin.\nIf someone could provide any reproducible example - I'll be very excited.. @nloding - Yep, I did a mistake - saw react-hot-loader/patch in webpack.conf and thing about loader.\nAny way - I could not find where babel plugin is attached. \nPS: It is not related to this issue.. Did you update react-mount as well? Will be components updated, if you will work with them (aka updated by normal React update cycle).. this is not depends on version of React or RHL. The best way - just provide a reproducible demo.. @SidKwok - thats \"ok\".\nAs you may see react-hot-loader will not trigger componentDidMount/Unmount on hot-swap - only redraw. And that is expected behaviour. And thus lost of loaders are not working. They are designed to not work.\nYou can try:\n1. https://github.com/theKashey/react-hot-component-loader - simple as a rock\n2. https://github.com/faceyspacey/react-universal-component - for all the things.\nThey do work - proven.\n. Unfortunately you are wrong, @wmertens.\nreact-universal-component is awesome thing, and it is \"HMR-aware\" loader, so it will just reload async component, as long react-loadable will not.\nBut it is not \"RHL-aware\". The new component will be mounted out of RHL's AppContainer execution context, and as result the first HOC or decorator will break all the stuff. As that happens in RHL v3.\nFor a good experience component should be wrapped with AppContainer by the time it got updated.\nYou can wrap your export by yourself, or you can use our helper (hot) to do the same.\nSo there is the only good answer - if you are going to import component, - wrap it's export with hot. And then use any loader you want to use.\nActually this issue was for RHL v3. Give a try to version 4 right now, it just got that brand new hot method, to help you, I am talking about.\nSee https://github.com/gaearon/react-hot-loader/tree/next#code-splitting. Without hot and with react-universal-component RHL will work. Just not as good, as it could with hot :)\nOr you can use react-hot-component-loader, I've mentioned above. It will just wrap component with AppContainer by itself.. Tests are dead without correct proxy.. Why hot reloading will not work? . @selbekk , @adc17 - not it's clear, thanks.\nIn my case it was a bit more tricky - there was no static public path. So, you can always set it on a client side:\njs\n// find `your` script among all others on the page.\n__webpack_public_path__ = myScriptPath;. No, that was a wrong approach. With same code different components can have different scope.. Components with static styles just sealed from any changes. As long they are not expected.\nI hope they will fix it soon. (one line change)\nUPD: I've created a PR to fix this.. Resolved: https://github.com/styled-components/styled-components/issues/1225#event-1334523244. That's the nature of GitHub. Happy forking!. RHL contain a special logic to \"hack\" arrow function and inject another context(\"this\") into an arrow function.\nThat could lead to some issues :(\nHow  to solve: Find a way to protect a file from RHL's babel plugin.\nNot easy doable. First, that comes to my mind - use webpack with 2 babel's profiles. One for jsx(or /components) and RHL inside, and one for the rest of files.. @neoziro - I've found a better solution, will provide some code in an hour or two. Everything is quite simple, but better to double check.. @neoziro - https://github.com/theKashey/react-stand-in/issues/1. @harshes53 - the problem IS with ES6. But you can try to use webpack loader instead of babel plugin. It does not have any magics inside (and that's the problem of loader solution :) ). Heh, good luck.\nI am not sure that webpack loader could handle ES6 code (arrow functions). Everything has some limitations.\nI'll propose to add babel-loader to your dev webpack configuration, and babel all the things into ES5, at least in dev mode.\nES6 code does not always work due some magic code transforms we are doing, sorry.. @fwh1990 - currently you have to transpile arrow function. To be fixed in next release.. This is related to #686. We are on track.. Did you use RHL's babel plugin? \nThe source code looks ok, so it might be just not a quite correct configuration.. I can name the way of babel-foo which leads to the victory: for each non-top-level function or a class find all non-top-level functions or a variables it is using. And store them in prototype. \nNext - it become possible to use just toString to compare the old and the new realisation (and next variables to match scope). \nThus still will fail to hot replace component you actually changed, but it is far better that today. . @Tsourdox - \"next\" is not known as version 4 (current).. Have you passed NODE_ENV down to code?\nhttps://github.com/gaearon/react-hot-loader/issues/602#issuecomment-335605416. @starandtina - any chance to see your config file, or a whole bundle?. \ud83e\udd37\u200d\u2642\ufe0f nothing suspicious. Try to replace\njs\nconfig.globals = {\n  'process.env': {\n    NODE_ENV: JSON.stringify(config.env),\n  },\n// by\n'process.env.NODE_ENV': JSON.stringify(config.env),\nwebpack.DefinePlugin is quite straight forward.. @starandtina - but I dont see .dev variants in both cases. \nIt just keeps e.hot in the beginning of a file, but already eliminate .dev branches.. So, @starandtina, try to search in final bundle \"index.dev.js\",\"patch.dev.js\", and so on.\nIf files will not exists - then statistic is incorrect, not the bundle.. In my personal case, Webpack-dev-server is adding HRM with hot enabled. So in case of static build that plugin will not exist at all.\nAnd without HRM RHL will not gonna work.\nSo current code is \"double secure\" code. In theory. To say the truth - I am still confident about practice.\n. LGFM.  Your turn, @neoziro . Which version or react-hot-loader are you using?. So, and how do it use it - with webpack loader, or with a babel plugin?\nCould you provide a real warning, and a code example for it.. Actually, the problem is another - the \"real\" arrow function does not work at all. They are updating the real component, not the used(proxy) one.\nSee: https://github.com/gaearon/react-hot-loader/issues/662, https://github.com/gaearon/react-hot-loader/issues/686\nThe possible solution is still in testing. Meanwhile, just don't use env plugin - transpile arrow functions back to es5.. As I understand - the proper solution is just to break the cycle.\nIe https://github.com/gaearon/react-hot-loader/blob/master/src/AppContainer.dev.js#L56\njs\n componentDidCatch(error) {\n    if(!this.state.error) { // set error only once per update\n       this.setState({\n         error,\n       })\n   }\n  }\nAnd next, when user will update the code, that state will be reseted.\nCurrently, setState cause re-render, and next Application gets a new error, but with the same information. So, buy freezing update we will not break anything, except the infinite loop.\nSounds like a one-line fix. . Looking good. Just double checking and then merging... . Anyway - \"the real arrow functions\" (env preset) are not working with RHL enabled.. Thanks!. We can not add it yet:\n1. RHL will not work with env preset.\n2. \"modules\" affects only one thing - will webpack auto re-require \"accepted\" module, or you will have to call require by your own.\nActually, currently RHL's readme is not asking to enable harmony modules, but listed examples does not contain re-requiring updated code - and that is a mistake we should fix.. @mildrenben if you will specify the target as a modern browser - RHL will blow up whole application due to some issues with non-transpiled arrow functions.\nAnyway - you named the second step as the third one.\nPlease check numeration, and I'll be quite keen if you will include few words about different behaviours for different modules mode.. Easy. The issue #700 proposed to solve.\nSo - add {modules:false} into your babel.rc, and let webpack update code magically or \njs\nif (module.hot) { module.hot.accept('./modules/app', () => { \n   App = require('./modules/app'); // do it by yourself.\n   render(App); \n}); }. Ok. My bad. \nAnyway - don\u2019t overload magic methods, and don\u2019t introduce new arguments. . This message also means, that RHL will not only not-accept this element, but also will remount all the nested tree. So - it is better to fix it, and usually it is not just easy, but may speed up whole application a but.\nI checked the sources, and could not found any red flags, like a double-nested HOCs, which may trigger this error.\nCould you provide any example, or just an error message?. @meyer - no need of isolated example - any example will be ok. This is the most common problem :( we know how to trace and fix it. @meyer - the code looks fine. Could you provide an error message from RHL?. @meyer - do you have others calls to factory expect this one? Somewhere in Button.tsx?. RHL throws cos it thinks that you are providing some class it should, but could not replace. The reason is simple - the source code the same. Actual implementation depends on the scope variable, but code is the same.\nAs result - on second element render it will throw.\nShould throw on the first render, should not throw on hot module replace. Please check am I right.\nThere is one thing I could do (and will do) - use displayName to differ Classes.\nThere is one thing you could do (you better skip) - overload Class.toString to return different codes for different Components.. We will fix it in next release. \ud83c\udf7b . @meyer - this should be fixed in next version, as long it does not compare classes in that way.\nCould you please double check?. Prettier is a magic.\nLooking good, but I am not sure it will compile.\nAnyway - good to merge, and I'll fix pipeline during my daylight time.. Sure. Are you done for today?. Ok. Ready to merge?. Ok. Then it is my time to continue fixes.. What about keeping boilerplate inside? \nRHL is a tricky thing, and it is better to test change against some implementation, with proper instrumentation (babel or webpack).\nIn the same time - it is a good way to ship a boilerplate as an example.. Yep. #700 is supposed to fix this.\nBut, if you will follow best webpack2 cases - you will enable harmony modules, ie {modules:false}, and webpack's magics will do the rest.. Ok. I\u2019ll take a look. \nI am also trying to solve the last issue about state loss in #703. \nLook like we could repeat and even improve behaviour of v1 (#643). @neoziro - this is ok, that modern tests are failing. The classes in the tests does not REGENERATE_METHOD, injected by babel plugin. As result they could not reproduce arrow functions.. So, I could bring back 15/16 boilerplates as sandboxes. And please add one new point - remove webpack plugin.. One more thing to be updated - troubleshooting. . One more thing to be added (and discussed) - HotExportedComponent.\n```js\n //index.js\n const App = loadable(() => import('./App'))\n//App.js\n export default hotExported(module, Component)\n```\nAs long popular loaders, like loadable-components or react-loadable, does not, and from point of view - should not, support ReactHotLoader flow, we might provide a better solution.\nV3 allows code change to bubble to the top, and then expects the code to be reinitialized from top to bottom. But loaders will not re-require async components on the fly, and code branches behind them will be kept old. \nV1 had a different behaviour putting module.accept automagically in all the places. That was a quite bad behaviour, and long it has no brains.\nUsing the helper function user can call HOC in the right place with component and module variable. Next RHL can setup module self-acceptance and wrap component with AppContainer to rerender it when the time comes.\nThe same can be archived for the top level components. Instead of adding\njs\nmodule.hot.accept('./containers/App', () => { render(App) })\nto the Application level, one can wrap App export with hotExported and magic might happen - code will be propertly updated on HRM event. And this is much more delcaration.\nAnd this is actually 3 lines-long function, which already exists in V1 code base, and which might save a lot of time and make life easier.. And the main - accomplish all the things before xmass.. All major tasks resolved. Imo - it's time to release a beta.. That was a plan \ud83c\udf85 \ud83c\udf84 \ud83c\udf81 . #700 is supposed to solve this. Actually, this is a really big gap in webpack documentation.\nBut we should improve our approach, by splitting configuration into steps, and providing explanation and expectations for each. When you know what you shall get - it is easier to spot a problem.. Got the point. There is no way to help you now, but in the future you might get 2 solutions.\n1. Is to use instanceOf, not type equality check\njs\nconst element = <Component />;\nconsole.log(element.type instanceOf Component); // true (currently - false)\n2. We could expose a helper function for type comparison.\njs\nconsole.log(areComponentsEqual(element.type,Component)); // true\nWe also had this function internally.\nPS: This is a duplicate of #304, and you might find few tips and tricks inside. Which will not help in your case, sorry.. Ideally this should be moved into react-mount, as a user defined class comparison function. And, as result we could even remove proxy, as long there will be no need to fake types. \nA single line change in react internals can make things must simpler.\nHow to sell this idea to the React team?. @gaearon - does this mean, that we should not proceed with this PR, as long it uses some React internals, or we could proceed, as long it uses the same internals as deep-force-update?. All react internals were move into a single (and quite small) file. Also refactored logic a bit (just perform dead code elimination).. @neoziro - just added a couple of tests. Coverage is not great, but enough for a start. \nIt is much more important to test this solution against some real edge cases, I am not quite aware of.\nWaive if you are keen to merge this to the lerna branch.. Ok, let me explain.\nThe biggest constraint of V3 is a literal unusability for lots of people. All these folks who use decorators, recompose, and quite happy about it - they are all off the boat.\nV1 injects update code on the each-file-basic, thus allows it to perform point updates, and thus allows it to work with a complex code. But actually, it does not respect any complete code dependencies - module self-accept is a dangerous thing.\nV3 performs the work much more gently, rendering from top to bottom, relying on registered classes to perform updates. This is the power, this is a weakness. It is just impossible to register everything, but you have to.\nReconciler is just another way to detect changes. \nThe idea is simply - you have a rendered React Three, and you are updating a single class. And you want only a single component to be updated (as V1 do).\nSolution:\n1. (hydrate)Traverse the existing tree, to store component type positions. Like - I know that Button was inside Form, inside Page12. This part actually borrows code from react-deep-force-update.\n2. (hotReplacementRender)Traverse the new tree, to spot the changes to update proxies. I this part I have to explain in deep.\nReconsiler:\n1. To make reconciler works RHL have to wrap all components with proxy. In real - not all, but all stateless, and all classes with injected \"REGENERATE_METHOD\". As long standin-proxy did not affect performance - we can do it.\n2. Call render method on real component instance, obtained from hydrate.\n3. Traverse the result, comparing component types.\n3.1 In case of DOM node perform monkey patching (mergeInject) combining type from rendered child, and children from hydrated one.\n3.2 In case of function compare the new and the old one\n3.2.1 If types are equal - continue render\n3.2.1 If types are equal from proxy point of view (registed) - continue render\n3.2.1 If types are swappable - update proxy and continue render.\nAnd swappable is the key of this solution.\nIn v3 swappable means that types have been exported from a same file and same name.\nHere - it does mean - types were found in the same tree position, have the same display name and also some similarity in code.\nsimilarity - full-text similarity, or 20% by Levenshtein distance (fuzzyCompare, up to O(n^2) ). For classes text similarity are tested on method level, allowing you add or remove one method, and change another. (has no effect on the registered types).\nAnd there is a small trick here - reconsiler does not respect a possible change in props. It does not render the true react tree. It tries to re-render application as it was, to spot and swap changes.\nIf you are:\n - rendering a different component \u2013 it will don't enter that leaf\n - rendering component in a different order - it will swap types, and render them in the old order\n - rendering with different props, resulting a different nested tree - it will update as many proxies as it could, and the nested tree will be completely updated in any case.\nSo, this is not a real render, this is just another way to rehydrate hot updated code. \nIt is still important to have a registered types, to perform major updates upon them, but now RHL can stand any decorator or function composition between these registered types.\nHooray? . RE:\njs\n// from\ncompose(one, two, three)(Component)\n// to\ncompose(one, three)(Component)\nReconciler will do it's best, and update all the proxies. But react-dom will not stand a tree change.\nWE could invent a way, to rehydrate the old instances into a new components, but I'll prefer not to hack React (more deeply).. The correct way is to:\n1. remove any hot thing from webpack config, except react-hot-loader of course \ud83e\udd47 \n2. run webpack dev server with --hot option.\nBingo!\nPS: Anyway - this is related to webpack, not react-hot-loader.. @a7madgamal - like HotModuleReplacementPlugin and so on.. It's may sound a bit strange, but I never think about preserving values of local-global variables. Maybe cos I don't have any?\nAs long this transformation is required for ALL files - it does not worth it. Very heavy magic.\nBut, anyway, it should be a part of Webpack's HotModuleReplacement flow, not React-hot-loader. Please, crosspost your issue to webpack repo. And they have to have some cooking receipts for this case, cos it is so common.\nPS: could be done by module self-accept and marking count as export, so you can copy-parse old values to the new ones. Ugly - yep. Working - yes.. As I can see - this may introduce more bugs, than solve.\nIf you are going to copy over only Plain Old Objects? Only non-constants? Does it enough? What about second level variables? IIFEs are around. What if you will use you count as key in some lookup table? Will you copy over that table? It is a object, it may be a function, why not to copy over React Component? But you will override your change...\nIf you are able to write a clear, and straightforward spec - go for it. I couldn't.\nAnyway - this should be separated from RHL, just because this is a different thing. If one day, someone will create a more ideal HMR. And not only React customers will be happy, but also VueJs and Angular ones.\nUntil then we all have just to maintain a bit better code. You could just extract this variable to a separate module, and it will keep its value. Already to simply.. V4 makes this proposal obsolete.. What does React Transform HMR doing here?\nDid you wrap all the things with AppContainer?. Looking good, but please use env preset, not react-hmre\nHMRE was designed to work with ReactHotLoader V1, not V3.. @adamtal3 - look like you did not enable harmony modules. Do you re-require App on module hot update?\nSee https://github.com/gaearon/react-hot-loader/pull/700. In case you dont specify not to transpile modules you have to call Root = require('./app/Root/RootContainer') manually on module.hot.accept, before you render the new code.\nWithout re-require you will render the old code, and next webpack will update code, as long nobody actually \"accepts\" it.. Yep, without modules:false you should.. So what exactly does not work - HRM or RHL or only the case with multiple entries?. We know > https://github.com/gaearon/react-hot-loader/issues/650. Usually, RHL ignores actions made on componentDidMount, as long there will be no mount/unmount.\nAnd it also ignores any changes made inside the constructor. Changing the stateUpdaters will affect only new instances. That's how react-proxy, the underlying internals of RHL works.\nWill be solved by #707. The new version does regenerate changes from constructor in runtime.. Just tested, and it seems to be ok.\nHave you wrapped your application with AppContainers? It actually does the \"update\" work.. When you are using webpack 3 with harmony modules enabled - there is no difference.. @okonet - I hope this weekends.. @neoziro - I've fix close to everything. Tested on pack of local projects - everything is awesome.\nChanges:\n 1. patch.dev proxies any components. (not only with regenerate method, as before)\n 2. reconciler also monkeypatching props during test render. Thus allow to broadcast not-registered changes via props (render/children)\n 3. Before render - call componentWillUpdate. This is the only way to drop Redux's renderedComponent cache\n 4. (Stand-in) After render try to wrap result with proxy. This is the only way to wrap with proxy cached rendered component from (yet again) Redux.\nAlso - I think few moments could be simplified. Did not test moment about registering the component in hot - may be it is not necessary (but it could).. No. Exactly this one will not work.\nautobind is a bit straightforward thing - when you access class method it binds it to current this and sets as a member of this.\nThis may works... unless stand-it will access prototype. autobind is so straightforward, that on property read it will bound all methods to the current this, and this will a prototype object, I am ready property from.\nAs result - this inside increment is a class's prototype itself :)\nFirst part is solvable. I could use another, more safer way to iterate thought prototype (same as autobind uses), but in any case - \nautobind will seal a whole class. There is no way to hot-reload it.\nIt creates descriptors in the current context, they are not swappable by prototype change. And nobody could programmatically remove them.\nTo solve this case we need react-proxy. But it cant stand arrow functions....\nPS: One should check getters/setters.. So, I'll take this task, and will add some fixes to make application at least just work, even without reloading.\nRHL might not work, but shall not blow the application.. Ok. This changes will fix issue with autobind. The solution is not to access prototype directly, but use property descriptors for it.\nAt the end - hot reloading actually does work, as long we also copy over descriptors on proxy update.. Hooray! The first issue!\nWill fix it today.. js\nReact-stand-in: Updated class  Connect(SomeContainer) contains native or bound function  \nnotifyNestedSubs \u0192 notifyNestedSubs() {\n    this.listeners.notify();\n  } . Unable to reproduce, use arrow functions instead.\nAny ideas why it can be bound?\nAny code example to reproduce? . @noinkling - could you try to debug this issue?\nJust place a breakpoint at the to the place this error if from and report why that code branch is executed.\nIt just compares function1.length vs function2.length (both must be zero for this case), and checking that this function does exist in prototype (it should). And first of all - it does check that function is not bound aka [native code].\nIt also should not be bound - something else cast a side effect on it.. Ok, I've found a problem. RHL is absolutely right - it cant regenerate this method, as long it does not exists.\njs\nthis.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription)\nReact-redux will refresh binding on hot-reload, but this is not transparent for RHL.\nFor now you have to live with this error. Next, we have a few options how to fix it:\n - override .bind for all class members, to detect when one call bind, and be able to understand result (hack)\n - introduce fixtures - a way to force-patch one classes and ignore others (leads to hell).. @zerobias - yep, something like ignoreHotLoaderErrors(someRules). Or reuse existing warnings flag just to hide all warnings.\n@noinkling - good to know. Thank you.\n@fwh1990 - RHL may work without babel plugin, but will be unable to hot-swap any arrow or bound function.. @neoziro - or not throw anything from node_modules, ie from the non-controlled code base.. So we need dev mode for a dev tool.. Where is babel-loader?. PS: What about https://github.com/cdharris/react-app-rewire-hot-loader ?. @Grimones - it is better to continue with this PR. To have a history.. If you will add a new hoc it will cause state loss, as log tree is absolutely different.\nIf you will modify any class - it may be updated without state loss\nIf you will change componentDidMount it will not have effect, as long component does not get refreshed. Ie it will be not called.\nAs I understand - all works as expected.\nCould you confirm that react-app-rewire-hot-loader will work without ejecting?. @neoziro - maybe it worth to point on react-app-rewire-hot-loader in README.. Oh no! @Grimones - your example got lost!. @Grimones - \ud83d\ude2d\ud83d\ude3f\ud83d\ude1e. I am not CRA/Rewire expert - so it's up to you.. Let me double check. Probably I could change default settings for RHL and fix hooks(more or less) for everyone.. Are you sure about \njs\nconst NextApp = require('./container/App').default;\n    module.hot.accept('./container/App', () => {\n        render(NextApp) <-- you have \"sealed\" NextApp. It will _never_ be updated.\n    })\nTry\njs\nmodule.hot.accept('./container/App', () => {\n    const NextApp = require('./container/App').default;\n    render(NextApp)\n}). debug or dev?\nHow to pass options without AppContainer?\n```js\nimport {enableDebug} from 'react-hot-loader';\nenableDebug();\n//or\nimport 'react-hot-loader/debug'\n``. How manyhotexports you may have in your project?\nAs I expected - at least one for every for every entry point (including chunks).\nAs I understand - you may have only one, at _loadables_ will still works\n(PS: this mean than we could monkey patchreact-dom`)\nBut anyway - as long you may have more that one hot - this global setting should not be a part of it.. To say the truth - it should not have options. But configure might be the simplest way.. Not finished yet.. Hey! I've simplified babel. Look like it works well.. This is release blocker.\nIssues:\n1. createElement got not replaces in App.js. It is actually createElementWithValidation. Will work only if {hot} will be required FIRST.\nThe root issue is quite-quite funny:\njs\nimport * as React from 'react'\n// produces React.createElement after babel <-- got not replaced.\nimport React from 'react'\n// produces React.default.createElement after babel\nSolution - import in this manner in patch.dev, and patch all the ways...\n\nStyled-components seal props. Everything like ProxyComponent.RHL_PROXY_NAME will have value \"undefined\"\n\nSolution - use defineProps for all our props. Make #748 obsolete\n\nStyled-components do have more that one parent.\nStandin does replace only the first one. And the second will throw error on construction.\n\nSolution - update all parents in prototype stack...\nI've spiked all the things, and do have a working solution. Will convert to a normal PR asap.. Last change makes #748 obsolete and fixes any issue with own props. \nIncluding the bug we had in transferStaticProps - it actually removes all props added by standin.\nStyled component case also works well, with proper config of course. Without proper config it will throw an error.. You have to mark App as hot in App.js, not in index. \n(Anyway should work, let me check). Ok. This is a bug and a feature.\nWhy this a feature?\n- it was designed to work like this. hot autoaccepts the changes, and trigger refresh after zero-timeout. On component refresh it perform all the work.\n- in this case, just after the changes you will call render, and it will call render method of RHL, skipping the update step.\n - as result - everything got lost.\nWe expect, that you will mark as hot-exported exports from some file, not imports.\nWhy this is a bug:\n- we could call update method in AppContainer render. Easy, and will stop issues like this.. This is a good example is the misconfiguration, we should be ready to handle.\nSo this is a bug.. As long internal generation is just an registration counter, and does not reflect the number of hot-reloads, and could change in runtime (hello async components) - there is no way to autodetect this behavior. In most situations it will create a new AppContainer, without any react-tree it could reconcile with, causing or full Application remount in this case, and application duplication in our styled-components example.\nThe only thing I could do - report that the component been unmounted was not on the last generation, ie was not upgraded, but they were, as long React first render a new tree, and next destroy the old one.\nThe same problem in #756 - we could not rely on generation, as long we also should use reload-counter, and different branches of code, behind different hot decorators, could have the different values.\nSo - there is no way to fix this issue. Yet.\n. Sure we could add some magic member into HotExported, but who and when will match the signature?\nThe second problem - module.exports in case of webpack are wrapped by getter/setter and you could not iterate through them.. @katmai7 - it should contain more extended information, written by console.error just before triggering an error.\nThe problem may be not in this file, but somewhere before, or after it - RHL just detects component which uses the unpatched version of React, and report about it.\nHow to solve completely - import 'react-hot-loader' in the index.js, ie before any other your file. Just import, nothing more.\nAnyway - it is better to trace the problem or provide some reproducible demo, and we will trace it.. react-hot-loader will import index.dev, it will import AppContainer.dev, it will import patch.dev :)\nSo you can just import react-hot-loader.. https://github.com/babel/babel/issues/7035. @JounQin - cos you need to setup Hot-Module-Replacement first.\nWe do have examples for parcel and webpack, but not for koa, sorry.. @JounQin - this does not depend on RHL, it depends on asyncComponent. It prevents update of nested component. Literally, it updates the code after RHL did it's work.\nSolutions\n - dont use asyncComponent, there are a dozens more reliable versions. Try https://github.com/smooth-code/loadable-components, sound like it works out of the box.\n - wrap Hello with AppContainer\n - wrap default export of Hello with {hot} from React-hot-loader\n(any of these variants will help). Maybe, in a bright future, React will change it's behavior :). So - when the hot-exported module got updated and reaches apply state - store the current generation as a minimal value.\nNext, store this variable in AppContainer's context. Next, all components shall have generation not less than that value.\nThe problem - currently ProxyComponent stores the number of times it got updated, and lots of components (from packages) will be never be updated. \nAs long there is no way to understand shall some component be updated on HRM even or not - it is impossible to detect wrong HRM. Look like we shall search the another solution.\nI've tried to spike a solution for webpack, but failed - there is no way to detect using hot api, that some module were not updated.\nThe only way I've found is no use module.hot.addStatusHandler\njs\nvar secret = Date.now();\n module.hot.addStatusHandler ( status => {\n    registerSecret(module.id, status, secret);\n});\n....\nconst registerSecret = (fileId, state, secret) => {\n  files[fileId][state]=secret;\n  if(state === 'idle') {\n    setTimeout(function() {\n      if(  files[fileId]['apply']==files[fileId]['idle']) {\n        // throw NOW UPDATED!\n      }\n   });\n  }\n}\nActually - this handler could be added only once, to the first instance of a module, and new files could just call some endpoints during the execution.\nAnyway - we will have to add this to all files via babel-plugin, and this logic is to far away from our business.\nThere must be a better way.. After yet another coastal hike I've understand - this is our business.\nAs long we prevent a whole page refresh and willing to smoothly update the page - we have to track changes like this.\nIt is not hard to track files updates, which were not applied.\nIt is close to impossible to make them - we have to ask user to fix his code - use another loader or mark exports as hot. Literally - just \"ask\", we cant fix this from inside.\n@neoziro - what're your thoughts?. I can do it only for webpack (99%?). But not for parcel, as long there is no other API, except accept.\nThe other (better?) way it to use some your experience from loadable, and analyze how the package was build, asking to wrap all endpoints with how. Maybe patch import in some way.\nAlso - webpack only solution.\nPS: You have to wrap endpoints with hot, or reconciler will not work. Ie all the components, extracted as top-level variables will work, but all the hidden ones - will not, as long replacementRender called only once.\n  . As it mentioned in readme - be aware of HMR is not a business for a \"loader\". As long react-loadable will ever support HMR/RHL, as long we could make loadable-components more HMR-friendly, and as long react-imported-component already is - it is better not to limit user with some Loader he could use. There is dozen of them, for any case and taste.\nIn a hour I'll will open a PR for webpack case, to track files user have to mark with hot.. Bad news, @neoziro - this is not possible yet.\nIt is quite easy to detect, that some file got updated, but there is no way to detect which file should be updated.\nThis is possible with pure webpack's module.hot.check({onAccept}), but it actually is not bound to the module, and uses only the last used option, which is global.\nAnd the last used option will be true, provided by webpack-dev-server.\nCurrently - there is no way to solve this task, except indicating the files which were updated in real, and the ones, webpack thinks were updated.\nThe other tools, not HRL should be involved here.. Please try \"next\", or 4.0.0-beta.11. Could you spill some light? Any code example?\nPage refresh means - something terrible happens (or you did not accept the change)\nPS: I am about v4 only. It should work.. Thank you. Will fix asap.. PR already opened. Waiting for completion. . We do not transpile code to es5 cos we have to use es6 classes to work with es6 classes. \nNot sure it will be easy to use two separate Babel configs for this task. . Look like there is no babelrc . Is there any difference between webpack-babel-loader and webpack-not-babel-loader? We can hide babel under the hood, and reintroduce react-hot-loader/webpack.\nTS is a language, Babel is just a tool. It can compile ES6 to ES5, can also be a \"language\", but in reality it just transforms the code. In this case it shall do nothing more, but code transform.\nIn real - babelrc @neoziro provided, is not correct - is does transpile JS, and JSX. As long it was already done by TS - there is no need to do it\nThe only thing you have to do - is to apply HRL patch.\njs\n{\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\nnothing more. I hope in this form babel is not stinks :) as much as before.\nAnyway - we need babel loader only to support non-transpiled arrow functions. If compilation target will be es5 - we could patch function.bind to do our work without any need of eval (and maybe we should do it). But as long the goal was to support arrow functions - we did not do it.. When two worlds collide - one is going to die.\nThere is no way to extend TS, and create some ts-plugin to empower RHL. Just there is no \"TS\" way.\nBut your problem is not a problem. If you will ever google it, or provide the real error here - you will understand how to solve it\njs\n{\n            loader: 'babel-loader',\n            options: {\n              babelrc: true,\n              plugins: [\n                'react-hot-loader/babel',\n                'syntax-dynamic-import',   // <<------\n              ]\n            }\n          },\nOne line! And babel will undertand the syntanx it does not undertand before.\nPS: Two lines, the second is yarn add --dev babel-plugin-syntax-dynamic-import. Dont get me wrong - I am willing to solve both your problem and our issue, which caused it.\nThe problem was not \"Syntax errors caused by imports\", the problem is \"SyntaxError: Unexpected token import\". And 2-3-4th results from Google contains enough information to solve it, as long this is a popular problem these days.\nSpot a bug, google it, add one more babel-plugin. As long you are not a babel user - it might be not so clear for you, but I hope I explained the problem, and now you get the point.\nThat's what I said, and I could not see anything unfriendly here. If you do - so, just sorry. If it was not supposed to be bad. Sometimes I am a bit straightforward.. CI stuck, and I even cant stop it. But it seems to be ok. Merge?. Should be fixed 2 days ago - #758 \nCould you check exact version of RHL you use?. \ud83c\udf85 . Please update to the latest version - 4.0.0-beta.12. This issue was already fixed.. Yet again. You shall mark as HOT EXPORTS of a module. Not imports.\nNever place hot in the same module, you perform a render.\nSo - just extract App into separate file, end export default hot(module)(App).. PS: The both examples are not working. The first just failing with js Error, but the second is failing to preserve the state.. You saw [HMR] The following modules couldn't be hot updated: (Full reload needed) cos there was JS error on render.\nThe only correct way to use hot is:\n```js\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nexport default hot(module)(function App(Component) {\nconst Layout = () => {Component}\n  return Layout\n})\n```\nit should be applied diffectly to the export.\nIf you need some complex logic, and just dont have a Component as a top level variable/export \u2013 then create it, and put everything inside it.\nThere is no need to mark all components as hot, - if you will mark only top-level application - it will be enought.\n```js\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nimport createLayout from './createLayout'\nconst Something = createLayout(SomeAnotherComponent);\nexport default hot(module)(function App  {\n  return \n}\n. Cos you can not wrap with `hot` a function, HOC in your case.\nYou have to wrap Component!\nAnd we cant detect the problem here, as long any function could be a component  . In you case you can wrap `theme` with hot, and may be it will the behavior you are looking for.\nBut! There is an easier way to do all the stuff - \"the old way\"js\nmport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {AppContainer} from 'react-hot-loader'\nimport renderHot from './renderHot'\nimport Theme from './theme'\nfunction render(){\nconst Component = new renderHot()\nconsole.log('type theme', typeof Theme)\nconsole.log('type hot', typeof Component) // Why am I type object when a function should be returned?\n// Wrap everything with AppContainer\nReactDOM.render(, document.getElementById('root'))\n}\nrender();\nif(module.hot) {\n  // accept the changes from that modules and re-render the app\n  module.hot.accept('./renderHot', render);\n  module.hot.accept('./theme', render);\n}\n```\nDont forget to set modules:false in babel.rc\nThis is actually the way v3(current) version work, explained as advanced usage in v4.\nIt will perfectly fit your requirements.. The last example will work, as long it will work on application top-most level. There is nothing higher.\nThe example with hot will not work, as long hot was created to wrap a single Component. Let me explain the word \"simple\":\n```js\nexport default hot(module)(function App(props)  {  <---- this is simple stateless functional component\n  return \n}\nexport default hot(module)(function App(Component)  { <-- this is not\n  return \n}\n```\nThis is a way to make it work\njs\nconst makeItHot = hot(module); // get `the hot`, and mark module as hot \nexport default function renderHot(Component) {\n  const Wrapped = () => Component\n  return makeItHot(Wrapped) <-- apply `hot` here.\n})\nThis will work, but will completely ignore different Components you may provide here \u2013 for any instance it always be \"the last used\".\nThe second problem, you have to understand, - it will react only to the changes made in this, or dependent files. Not inside the Component.\nTo make it work - you have to wrap Theme with hot.\nBut better do as I said - dont wrap anything with hot, use a bit more low-level API to wrap the topmost wrappable place in the entire application.\n\nI don't think that the v3/advanced way will work because I don't know what component I'll be wrapping, aka, I can't supply that component path in the if(module.hot) statement because I don't know where the component will be coming from.\nCurrently, this is only 2 possible files. List of dependencies is limited. In common applications - the is just the single file - \"App.js\". As long all the changes made used dependencies will bubble thought parents - you can accept only the App.js and that's done.\n\nIf you still don't clearly understand how it work - please invest some time into experiments. Try just to rethink the way you stuck with.. - [ ] stand-in should be included into code coverage\n- [ ] convert examples into integration tests.. But still an issue.. There is a reason displayed - Aborted because ./src/index.tsx is not accepted.\nAs I understand - you changed index.tsx, not the Root, or nested modules - so it works as expected\nIn any case - I will ask you to switch to the \"@next\" version, and it also do has TS example - https://github.com/gaearon/react-hot-loader/tree/next/examples/typescript. That sounds interesting! Let me check.. @YueminHu - a bit wrong assumption. That is not a react-hot-loader/babel's duty to transpile the code.\nActually, you are running into webpack 2 \"issue\" with HRM, which described in even RHL readme. Let me be more clear. The line\njs\n module.hot.accept(\"./src/App.js\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ __WEBPACK_IMPORTED_MODULE_3__App__ = __webpack_require__(\"./src/App.js\"); (function () {\nIs generated by webpack. In case you did not transpile the imports into requires (is specify \"modules\":false in babelrc). \nIf you did transpile (and ts-loaded did it) - webpack will not transform your \"common-js\" code.\nAnd you have to require Hello.tsx by yourself.\nThis is how webpack's HRM works. \nRHL v4 mitigated this problem via module self-acceptance.. Nor ts-loader, nor babel-loader(or both) transpiled imports into requires, and thus webpack did not add \"the magic\"(auto-require) you could add only for harmony imports. \nRHL's babel plugin in this case just adds some RHL related code, to make it works. But that code is absolutely not related to hot-module-replacement stuff. Like a - not our business.. Yep, I thought about it. The problem is - you cant always detect a change inside cwm/cdm. For example\n```js\nimport {getInterval, setIntervalFunction} from './utils';\nclass Ticker extends Components {\n  tick = () => this.setState({counter: this.state.counter+1});\ncomponentDidMount() {\n    setIntervalFunction(this.tick, getInterval())\n  }\n}\n``\nRHL could detect the change inside cdm, but could not detect the change inside tick, setIntervalFunction or getInterval. And I expect most of the changes will beexternal` to cdm, like this. \nThere are so many side effects, could be done in lifecycle methods. We just dont know how to detect them. Yet.  \nSo - I'll be happy to solve this issue. But not ready.. RHL should NOT work in IE11 and dev mode. By design :(\nThe reason - one of the goals for v4 was to support modern JS, thus require modern js to be used by React-hot-loader. \nAs result, AppContainer contains untranspiled class keyword.\nRHL is a development tool, and IE11 is not a development browser.\nWe have 3 options to solve this issue:\n - provide another package (or another entry point) both for RHL and standin, with fully transpiled sources.\n - completely wrap RHL and standin with eval, and do not execute them in case of older browser.\n - do nothing. In case of IE11 you are not developing, but testing the Application. You just could use production build.\n@neoziro ?\n  . All ok... except the whole bundle file will not load, in case of syntax error inside it. And class threatens as a syntax error, as I understand.\nMaybe I am wrong, and as long function will not be executed - it will not fall.\nOne need some experiments to accomplish first.. Even Linux penguins still use IE11. I'll pursue this issue.. #778  will fix the errors. There also was arrow functions inside.. Released in 4.0.0-beta.14. I'll double check. Works on my machine.. Oh. Refactoring break the stuff :(. The steps to make it:\n1. Auto-patch react-dom render method to auto inject the first part of RHL. As we do with React.createElement.\n2. Detect files with only React components as exports, and autowrap them with hot\nThis is doable for .vue, .tsx or .jsx, as long it is possible to understand - HERE IS THE COMPONENT, you can reload in isolation.\nBut lots of people use plain js to write the code. React-hot-loader v1 does contain this sort of automagic, but it was build for the older versions React, when Stateless components does not exists.\nThere is no (stable) way to distinguish function stateless component and a function :( So there is no (stable) way to setup HMR for random set of files.\nIt is still possible to detect the places where HRM could be safely injected, (for lots of use cases one point (\"App\") is enough) just by analyzing module dependencies, and should be researched.\n. Great work! But you provide any information about this nasty issue? \nSome code to reproduce, react(react-dom) version(is it 15?) \nHow do you run into it?\n  . wrapApp(hot(module)(App)), \ud83d\ude22 et again - this function is for EXPORTS, not for imports or local variables :(\nUse it to wrap default export AppComponent -> export default hot(module)(AppComponent). js\nLoadable.preloadReady().then(() => {\n  ReactDOM.hydrate(wrapApp(hot(module)(App)), rootEl) <---\n})\nYou have to move App to the external module, and use hot to make that module hot.\nWe are not 100% sure why it is impossible to mix hot and react-dom/render in one file, but it is impossible, actually resulting some problems with reconciler.\nAnd there are no problems with PR. We just want to know how you get the error, and why we dont get it before.\nAnyway - hotReplacementRender already got a code, about removing nulls from \"first\" children level. It sounds ok that we also should also filter out nested children as you propose.. @bennidhamma - RHL was not set by the time Router was rendered. This should not happen.\njust import it in index, but dont use! The best way - import it as a first import.\nIf it will fix the issue - rollback the changes and share the source code. We have to handle this automagically.. Ok, so it uses a bit uncommon feature, about returning another class instance from a constructor.. It is not a simple to fix this stuff, as long you will have to hot-patch a Component returned from RelayContainer, which may be tricky with ES6 classes.\nBut we can not wrap such constructors at all, just to not break anything.. @aminland - no, that's not a solution.\nI am looking forward to create isComponentWrappable function, if not - just dont proxy.\nWe actually had that logic before, and dont wrap anything inside node_modules, but next decide that it is doable.\nIt is doable expect returning another instance from a constructor.\nSo\n```js\nconst isComponentWrappable (BaseClass) => {\n  return testES5(BaseClass) || testES6(BaseClass);\n}\nconst testES5 = (baseClass) => {\n  function Tester (){\n     const that = baseClass.call(this);\n     return that==this;\n  }\n  try{\n    return !!(new Tester());\n  } catch(e) {\n    return false; // it was ES6 class\n  }\n}\nconst testES6 = (baseClass) => {\n   class Tester extends baseClass {\n      constructor(props) {\n         return super(props);\n      }\n      MAGIC_FUNCTION(){}\n   }\n  try{\n    return !!(new Tester()). MAGIC_FUNCTION\n  } catch(e){\n    return false;\n  }\n} \n``\nBut this will fail forReduxas long react-redux's connect require astore` passed down via props or context. If it will not find it - it will throw an error.\nSo we can't use this code to probe.\n  . @aminland - good catch. Look like it is possible to return pre-created instance only from IndeterminateComponent(got no idea what does it mean).\nIt is impossible to return it from any other place.\nActually - I could not find any documentation about this. @gaearon - could you spill some light?. Fix merged, but the update is not published yet.. Released in 4.0.0-beta.14. @taion , @aminland - please have a look on #833 . Obsolete due to #778, big kudos for effort.. Redux store might be ok even without any RHL. Look like you have problem with HRM setup.\nThe simple trick to check - add console.log just next to the state creating. It should not be called on a component update, only on full page reload.. Can not help without full sources.. @anthonator  - don't use hot in index.js or Root. Use hot in App.js only, don't re-create store, as you are doing it now.. You even could still use AppContainer + webpack HRM.\nV4 just provide a helper function for easy setup. \nUsually, it is enough to wrap top level component with hot, and do the same with async chunks. Ie you can just read this recommendation as \"wrap top-level component of a chunk or entry point\".. @panuta - you just cant hot-reload the \"entry\" of your application - the file with createStore, or the file with react-dom/render, or the file merging all this stuff together.\nReac-hot-loader gonna to reload React components, and files used by them, not side effects.\nIn @anthonator example he injects store in Root.jsx - the side effect one should avoid. Just move store creation one component up (index.jsx), or (in this example) mark as hot only App.jsx.. Tests to be added a bit later.. ! Not to be merged yet.. PR is feature complete. \n - Fixes an issue with IE11 (RHL still may not work due network/HMR)\n - Mitigates an issue with Indeterminate Component\nPR to follow - reactStack should support native functional component. Currently resulting empty instance, then stopping reconciler to dive into.. There is one change for @neoziro - we dont need ES6/2015 environments any more.\nTo handle IE11 case we have to compile all the code to es5, and construct class for standin using the eval.. @taion \njs\nif (isFunctionalComponent) {\n    ProxyComponent = function(props, context) {\n      return wrapResult(CurrentComponent(props, context))\n    }\n  }\n.....\nThats all. But we have to stick to Classes, as long we need instances to make reconciler work.\n.... I am saying that we could not use stateless components, and I am using it.... something wrong\n.... it just got swallowed by React. @taion - the correct way to solve this - find another way to hydrate React tree, supporting functional components. But I am not sure about this right now.\n\"IndeterminateComponent\" is a quite strange thing - it executes only one, dissolves in ReactTree, and next you can't change its result.\nIt memoizes the component it returned, and freezes result till unmount. There is no way to hot-reload returned instance.\nRHL is not working for this component class, due to React native behavior. And we should not fight with React.. Anyway - lets step back, and try to improve getReactStack to properly handle functional components.\nWe got too many new magic here.. The problem is - we are converting function(a) { return b;} to class A{ render() {return b;}}. But there is some React specific, so classes and function are not equal.\nAs result - There are only stateful class components., as you said :)\nIf we will stop doing it - it will also solve the issue, and make the code a bit more clear.. This is not related to RHL, as long this is pure Webpack configuration error, and look like it should work\nLook like (module as any).hot.accept('./reducers' just does not work.\nInclude webpack.NamedModulesPlugin() to decipher module names, shown at the screenshot. Maybe you have to accept changes in another place?. Look like you also have to accept the change of sagas.ts. @redroot - even accepting one more file did not help?. @neoziro - \ud83d\ude3f  we should rename hot or introduce more clear readme, or strict checking. Maybe just throw an error, if react-dom is in scope.\n@swASO - you are using hot in a wrong way. As long it affects the whole module, not a single component passed down to the function - use if to mark exports.\nBAD:\njs\nconst IndexApp = hot(module)(() => (\n    <Router basename={baseRoutePath}>\n        <App />\n    </Router>\n));\nGOOD:\njs\n// App.js\n.....\nexport default hot(module)(App). Ok, will try to reproduce.. Hey! @swASO - and could you share your webpack/typescript configuration?. @seanlarge - \n1. Try to update RHL\n2. Fill the issue with your case. errorReporter prop should still work fine.. It does not show RedBox or literally does not work?. Wow! That unfair. \nCan you provide more data how to repeat this?. One should pursue ts-loader. It somehow breaks webpack's HRM.. I've changed the target or this PR to the proper branch - \"next\", but it will not gonna work :(\nWe are not accepting changes for version 3, could you please raise another PR for the version 4?\n. The only difference is mapStateToProps?\nDid you wrap application with AppContainer or exported as hot?. Much less magic! LGFM.\nAnyway - let me test some edge cases. I\u2019ll handle this soon(sorry, time difference). \n . Yep, RHL v4 was started to support arrow functions, and the goal was reached.\nYou have got an error, cos you are transpiling the arrow function into the es5 code, and babel produces this we did not expect.\nWe will handle this case, but for you, it will be easier to use more modern js during the development, ie set the target for env preset.. > what do you mean ie set the target for env preset.?\nhttps://babeljs.io/docs/plugins/preset-env/ -> see \"target\" section.. Nothing more to add. Thanks!. Duplicates #692, please check your configuration, ie does dead code elimination works.. You have proven, that webpack could remove \"dead\" branches, and by \"dead\" I mean with const conditions.\nLet's try to search inside your bundle next string\nif (process.env.NODE_ENV === 'production') {\nIt does exist, thus it is not constant, thus could not be evaluated during the complication, and next removed as a dead code.\n\nPS: You also got 2 version of React. Hooray!\n\nTry replace\njs\nnew webpack.DefinePlugin({\n            \"process.env\": {\n                NODE_ENV: JSON.stringify(\"production\")\n            }\n        }),\nInto.\nnew webpack.DefinePlugin({\n'process.env.NODE_ENV': environment,\n});\nNow we have exact variable name, and webpack will do the rest of magic.. PS: React also has dev and prod variant, and in modern versions this is 2 big flat(single file) bundles.. @lili21 - sorry, but RTFM\n- https://webpack.js.org/guides/production/#specify-the-environment\n- https://github.com/webpack/webpack/issues/2537 \nYou have to \nnew webpack.DefinePlugin({\n     'process.env.NODE_ENV': JSON.stringify('production')\n }). That's why I linked an issue about \"webpack is not doing it\". And providing NODE_ENV is super important.. You shall not only set NODE_ENV, but also \"define\" that env for webpack. 2 comments above.. You are transpiling your own node_modules - please exclude them from babel-loader.\njs\n// webpack conf\n     {\n        test: /\\.jsx?$/,\n        loader: 'babel-loader',\n        exclude: /node_modules|packages/\n      }\n. This look like some webpack bug - when we inject our code to the file - it injects some additional code, and it actually breaks the stuff.. To be more concrete\njs\n __webpack_require__(\"./node_modules/webpack/buildin/module.js\")\nCould not be execute if the current module IS module.js.. This odd behavior has a roots in RHL, and we should mitigate the problem.. Released in beta16.. Great! Half of the issues had a roots in webpack configuration, and this will help to handle them.\nBut, could you please create a PR not for a current master branch (it is obsolete, and going to die soon, we are not accepting new PR), but for \"next\" branch?\n\"Next\", or \"v4\", is going to replace master.. The only problem now - \"React Hot Boilerplate\" is uber outdated.. Could you please try to setup RHL v4 as v3. Ie with \"manual\" module.hot.accept/AppContainer in index.js, and without hot.\nMaybe self-acceptance is working differently in Electron.. Related #720. So it is not working?. Confirmed. Degradation due to the changes made for #775 - \"could not override .render method, as long it read only.\". Regardless of regression in beta-14 this example runs perfectly for beta-12/13.\nBut there is just no HMR event from Electron.\nIt should print out Got HMR signal!, but it don't.. For me HRM fires only once. If I will change any file once again - no HRM will be sent.\nAlso it always does nothing, as you said, but thinks that everything is ok. Internally it does update all required components.\nCould you provide a workable (v3) version?. It's not related to IDE. But yes - I am using Webstorm. But no - I am running yarn outside of IDE. \nSo - could you just provide an example for v3, I just need solution without hot.. Ok. @rllola - I've solve your problem.\nRHL v4 do provide hot function, to auto-configure HRM, setting self-acceptance rule for a module.\nIn case of Electron - module.hot sets acceptance for application, and you also have to re-require yourself manually - electron just clears the cache.\nSolution - take your v3 branch and just install RHL v4. Dont change the code. Just bump version.\nI hope it will help. (please confirm)\nI'll try to find a proper solution, meanwhile going to create a section in README for Electron.. Look like my bad. The question is how to fix it.. Fixed!. Will be fixed today. Thank you for a report.. Meanwhile you can downgrade to the beta-13. It does not contain a bug.. Oh :(. Released in beta-15.. We actually don\u2019t have a single test for this case, as long they are the same for react 15 and 16. \nEasy to test. I hope easy to solve. . > Do you think it's worth documenting the common plugins RHL is incompatible with in the readme?\nNo, I think it's worth to understand why it is not working, and then fix.\nDo you have more information related to this case?. Yep. This is a tricky moment we could not mitigate. A module could have more than one parent, and all the parents should accept the change. And ExtractTextPlugin (or and CommonModulePlugin) creates that \"parent\" which do not accept the change.\nPlease double check your console, there might be information about module acceptance.\nThis is actually not related to RHL, but you are right - we should document this sort of problem.. Could you provide some code? Or just debug - what was provided into the last function?\nSounds very badly. . That is not an error, hopefully.\nI'll raise a PR to suppress this sort of warnings.. No, I mean add one line to a ProxyComponent's render method.\nCurrently, it checks that elements \"version\" is the same as the last one. If not - injects the last version. Ie variables and bound functions. Prototype is already overriden.\nAfterwards, will also check that elements was rendered as a new version (or not rendered before). If not - call hotReplacementRender with itself as root.\nMake any component behave as AppContainer.. The only feature we can achieve here - handle portals.\nThe only improvement we can get from the change - simplify the code.\nThe only concern - @gaearon said that he is going to work on hot-reloading in this year. Should we introduce a new level of complexity(even if it is simpler) hacking deeper into React, but just wait for a bright future, when all these features will be a part of react-dom reconciler.. So - I'll try to handle this idea on weekends. And look like it's a \"nothing more to add\"(yet again).. Not sure I understand the problem, but it is clear how to solve it.. I've tried to solve this issue by using preval, but it could not import react-stand-in, as long it gonna to be build after the react-hot-loader.\nSo - just hardcoding constant and adding a test to secure the name.\n. @insin - beta 16 just got released. Please check that it fulfils your requirements.. But you have to entangle your application's code with our, like AppContainer or hot?. Wow, and then magic happens.\nOh, how I wish  react-hot-loader-loader to handle async chunks.. No longer needed. Good catch.. As long you have webpack underneath - it should work. If not - then maybe not.. Usually you can\u2019t just accept the change. And as long you are able to \u2018import\u2019 App - it is not a Scala file. . I mean you can\u2019t \u201cjust\u201d \u201caccept\u201d - you have to do something to apply the changes. \nAny way - as it works for you - good luck. . Should. But it is easy to reproduce the problem and found out the problem.. You are right. If error boundary will be \"above\" the AppContainer - it will be notified about an error, but not about HRM event, as long this is just different things.\nImplementing some notification mechanism is not a good idea.\nThere are two ways to solve\n - export a top function, wrap with it your application, and we will deep-force-update it on HRM event, bypassing all the boundaries.\n - support custom error reporters. Far easier way. Maybe not via hot function, but via setConfig. \n. Ok, I've found a problem with error and open an PR to fix it. \nWhy do I thounght that try...finally will swallow the error?. About errorBoundaries - @neoziro just proposed in another issue, to place it just after AppContainer. Should work for any case (after PR to swallow error got merged). Ok. Got the point. You are shadowing the build-in module variable, and we are not expecting it.\nAnd the real variable does not exist due to hoisting.\nThe only way - just dont fall in case of error.. Done. Cos error should be thrown by real render. And it should be thrown in the real render. . Look like this is an internals of react-dom.\nIt will return false unless you got react-hot-loader configured. That's our goal - bypass this comparison.. Yep, sure. The problem is... not inside webpack config :) In it inside your code - react-hot-loader just could not digest it. Happens usually with the current version.\nHow to solve -> install react-hot-loader@next and try again. If it will not help - then we will need and example with a problem to reproduce.. And can you debug - which component is actually got unmounted. It element.type.name / element.type.displayName.\nFrom the code perspective, it should be ok.. Double check - the element.type should be an ProxyComponent - a wrapper around DialogComponent. If not - React-hot-loader does not instrument React properly.\nHow to debug - React.createClass should be patched_createClass from RHL. The \"patch\" file, you did include, replacing the original one, but maybe something went wrong.\nCould you provide full sources, to let me play with them a bit?. React-stand-in is standing in for react-proxy in v4. But this is still the same approach. . :coneofshame: should.. This is not related to React-hot-loader, only to webpacks HRM. If you will google \"Ignored an update to unaccepted module \" - you will found that a lot of people face it before, including the same case with react-hot-loader.\nhttps://github.com/gaearon/react-hot-loader/issues/354, for example.\nUnfortunately I did not saw any solution among all these issues, I could share with you.\nJust double check you consume NewRoot, and how application works. Next you could try to run RHL v4 as v3 - they are using absolutely different approaches to \"accept\" the change.. Should be bound to #820. Yep, the same - redux causes stand-in to throw a warning, but logger is broken. As result - full page refresh.. @rusty3, you made my day.\nWe have introduced cyclic dependency in our code, and everything is broken.. @eXaminator - any error in console, especially with setConfig({logLevel:'debug'})?. Hey! Don't use RHL 4.0 beta versions - install the latest one!. @njgraf512 -using the latest version?. Should be mitigated by cold components #991. Did you mean packages/react-hot-loader/packages.json? The one exposed as react-hot-loader to npm.. \ud83d\udc4d . Just dont used React-Hot-Loader with react native -> https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html. That\u2019s a good idea. . Oh no :( We don't accept PRs to v3 master branch. I'll change target to next. Nope :( It will not work.. It better just to merge next to master at last.. I am not sure why, but this function does not work this way. \ud83e\udd37\u200d\u2642\ufe0f\nAnd the test we have checking how RHL can compare the old, and the new version of Component.. @joshjg - so two questions:\n1. how you detect and actually load async component\n2. please add this code in any place\njs\n import {setConfig} from 'react-hot-loader';\n setConfig({debug: true});\nAnd the check the console output. Something should be inside.\nWhen you hot async component, you setup HRM to component-will-reload-component. It will perform hot-replacement without loader help. So the problem might be with \"loader\".. During hot replacement RHL will not trigger componentDidMount. If it got executed - so something \"upper\" remounts.\nPlease double check, the problem is before async component.\nDo you have any HMR on top level?. That's mean that React-Hot-Loader is not working for something between top-level component and loader.\nCan you double check, that changing top-level component does not cause the problem, and next moving deeper try to find the \"unmounting point\".\nI am quite interested in it.\n\nIf possible - just share some code.. So, @joshjg, could you share some code. There must a reason(or a bug) to unmount.. Normal class \ud83e\udd37\u200d\u2642\ufe0f \nMeanwhile I've found a bug which may lead to unmount, and it actually is #843 , but it is not related to sub-render as everyone thought before, and exists from the first beta.\nIf you will render one component instead of another - RHL will use the old one.. @joshjg, in this case, I'll ask for some example to reproduce.. I've got the idea, easy to fix, but lets double check.\nSome render returned an array as a children (it could be nested), but in render-before thats child did not exist.\n{ someFlag && [<div>....]\nDo you have such code? . Ok, let me write red tests first.. I probably should ask you to run codemod against your sources (https://github.com/reactjs/react-codemod#create-element-to-jsx), but I thought that createClass should work. Let me double check.. :( Usually, it works fine. You can always stash or roll back changes.\nV4 should normally work with any \"classes\" - es5, es6 or \"createClass\", as long they are es5. But we did test the elder ways to react.. @YouHusam - just tested, and createClass works fine. The only concern - it will not update bound functions. We decided not to relay on the way createClass auto-binds methods, as v3 did. \"Too internal-ish\". Anyway. I should point this problem and way to solve in readme . We could just disable RHL for the classes we cant handle. Ie - if user has changed something we could not reproduce, and we could not properly handle class update - disable RHL for the selected class, which will cause remount of a render-tree branch.\n\nThe second approach - make .bind function work even for non-class structures.\nReopening this issue, but still encouraging you to use codemod to level up your code.. I know how to detect the issue \nI don't know how to \"stop RHL from replacing class\", as long another part of RHL will throw an Exception, if something was not replaced.\nCode is here - https://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js#L292\nIf RHL unable to \"merge\" old and new version - it should re-create a proxy, and return a brand new one (https://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js#L171)\n. Strange. I know the source of error, but it should not happens.. This is not RHL's bug, this is bug from react-tree-walker from react-async-bootstrapper from react-async-component.\nIt just can't digest a valid React construction we produce.. Closing this issue for now. Sorry, but there is no way to use a current version of react-hot-loader with a current version of react-async-component.. @SleepWalker - the problem is simple - we are returning an instance from functional stateless component to work out Relay(it will also break async-loader) - see #775 \nWe tried to solve this in #833, but decided not to solve it in that way.\nIt is better to fix tree-walker, and I've raised an issue for it. It is literally one line code change. . https://github.com/ctrlplusb/react-tree-walker/issues/19. Anyway - I expect not only react-tree-walker to fail traverse \"the tree\". Even we are thinking to simplify traverse, dropping the odd cases and rely on sub-render(#830).. This PR will cause merge conflict with sub-render one. It will be a good idea to cover proxy-related code with better tests after merging any of them.. Both of them actually are quite rarely used, but it is possible to detect relay and ask to change the configuration. We could detect \"the instance was returned from a render\". \nBut we could not detect the opposite situation when that instance will blow up something outside our responsibility. And it impossible to understand that RHL is causing the issue.. Maybe it worth invest a bit more time, and make RHL \"function\" compatible. Ie wrap functions with functions, not classes.. I've spiked \"class-less\" solution, and here is outcome:\n1. Everything works, except hot-replacement-render. Stateless components does not leave anything except type in traversable react tree. The common issue even for enzyme - there is no \"instance\"\n2. I hoped that sub-render PR will mitigate this, and just \"continue\" hot-render on next class-based component.. but there might be no class-based component in next 10 steps.\nLook like this is the only way to solve the puzzle for now.. \ud83d\ude3f\ud83e\udd18\u2620\ufe0f. For now we ago going to support Relay, not React-async-component.. React-hot-loader should be disabled when you run stuff in jest.\nLet me double check your repo.. RHL will completely disable itself only in production, and partially without module.hot. Babel-plugin will be still active, but code it produces - shall not.. I dont have an answer yet. RHL should be transparent when it is not active, and it is not active.\nGive me an hour to find out what is happening.. Our bad. During the last refactoring we just lose that rule about module.hot.. The fix was merged into next branch few minutes ago. Will be released soon. . Released among 4.0.0-beta.23. This is babel. Could you also provide its configuration?. How your code look like after Babel transform - that is the question. . Ok. Now I see the problem. \ntransform-es2015-modules-umd - that is the problem. \nI am not sure that we should handle this, but we could. . @inspiraller\n - dont use our babel plugin, \n - require react-hot-loader/patch in the beginning of index.js\n - RHL will not regen changes made in \"bound\" functions, but everything else should be ok.. ES5 \"arrow\" function may work, and may not. There is no normal way to make it stable :(. React-hot-loader uses power of babel to hack into the classes and inject the magic method to regenerate the methods.\nInto the \"classes\", not arbitrary prototype-based something.\nWe should clearly point on this in readme.. It's better to say - RHL requires modern JS. It could not handle old ES5 solutions.. Confirmed. Logic this not detect any difference from the original class, ignoring injected into instance variant.. Sorry. But there is no way to fix it. Just keep in mind that your code with \"imports\" got transpiled into CommonJS, and RHL operates on this level.\nRequire is the only command one could use to require a module. You shall not shadow a few \"system\" variables, like module, require, exports as long there is no other way to repeat the same functionality they could provide.\nIt is possible to fix the issue, just by repeating v3 approach, and making React-hot-loader, you know, a global. But better - just don't shadow require.. Sorry, couldn't help you. Let me first create an example with webpack 4 to reproduce.\nI know that webpack sometimes does not provide requre to a module, but I dont know when and why.\nPS: you can try to ask webpack team about this. They shall know more.. Great investigations!  I am in the same situation as you -> \ud83e\udd37\u200d\u2642\ufe0f\nlet's await for some help from webpack team.. Hm, maybe we should not include min in the file name.. RHL does not cover this case, as long this is just a HRM setup issue. Look like module.hot.accept('./reducer'does not work.\nPS: In the first file you have 2 different ReactDOM.render methods. They should be the same, or you will lose component state on the first render(but only on first). RHL is only about React and React Components. Everything else is generic Hot-module-replacement and you have to handle it by yourself. As I can see, you configured it correctly, and it should work.\nIt seems that module.hot.accept('./reducer', () => { was not got executed. Are you sure, that ENV is local?. Unable to reproduce - all the tests I have are working.\nCould you please provide a bit more code?. And there is no exception in console?. I've found a problem :(. @fwh1990 - so, as long you got a bug - you are the best person to track it down! \ud83c\udff9 \n\nEnable debug mode. setConfig({debug: true}). Maybe it will shed some light (probably not). \nDouble check that this warning is just a warning. Ie react-hot-loader working correctly.\nAnd what is you actually changing. Why something got unmount?\n\nThe problem is caused by #806. On each render, and pre-prender call each Component you use will compare some magical number. It will change when you execute a new portion of code (HRM, async-chunk, whatever).\nThen, it thinks: hm, maybe it was HRM, lets double check.. and perform hotReplacementRender. And next it schedules a force update to all components updated. React will throw a warning if I do it during the render.\nThe question - why something got rendered, but next got unmounted.\nSo - what I am asking about - just double check that your application and RHL is working. \nIf yes - I will just track the mounted state, and don't update freshly unmounted components.\nIf no - so that will a be a problem, as long it should be ok.\n. * One of the components with children in the tree unmounts.\n\nIs it expected behaviour? Something is unmounting cos it should do it, or it is a bug?\n\n\n\nA varied amount of errors are thrown for components that don't contain any setState, replaceState, or forceUpdate calls.\n\nRHL converts all the components into the Stateful components, and also call .forceUpdate on them. So - you can have stateful error on stateless component \ud83d\ude38 \n. Ok. So everything is OK, and we should just track the component state to suppress the warning.. @fnpen the second error is a different error. And look it is IS an error. Please provide more information.. @fnpen - it will be just perfect.. \ud83d\ude80 . Always true. AppContainer shall not decide how the application would work.. @fnpen - just share some sources.. HotExportedAbout should synchronously flush the changes, but it doesn't do it. Just a few lines to debug.. I've failed to find the reason about \"Can only update\" - should be ok in last beta, in case you dont get error with \"cannot read children\".\nAnd that error is actually an error - https://github.com/gaearon/react-hot-loader/pull/830#issuecomment-365127831, fixing it right now.. @cyrilwanner - thank you. Looking..... Ok, kudos to @cyrilwanner, not it's clear - HRM/RHL works very well. A bit more very than it should.\n\n\n\nYou are updating something. Everything is ok, and update got scoped by hot HOC.\n\nMeanwhile a global variable, we call generation got increased.\nWhen you hit a button, and change a route - whole React tree start re-rendering.\n\"Sub-render\" trap detect that something gonna to be rendered, but that something was rendered within lower generation, and may contain async-updated HRM chunks.\nIt starts hot-render process, to reconcile the possible change.\nMeanwhile, hot-render just rendered the old react tree, cos react-hot-renderer ignores context changes, as long context updates are outside just rendering it could(and shall) perform.\nNow it is a time for a normal React rendered. It renders tree as it should be, and unmounts components scheduled for update.\nProfit \ud83d\udc4d \n\nThe ways to fix:\n1. The logic in .4 is just incorrect. It should react only to react updates occurred just after HRM event, the renders normal flow might just miss(portals, async-loaded components and so on).\nHave no idea how to distinguish these two execution branches - just after HRM, and 10 seconds after HRM. Or how to \"raise\" stored generations of all the components, not related to a specific update.\n2. Try to hook into willRecieveProps. That will allow just sync-flush of force-updates.\n3. Track the mounted state of components, just to hide these errors.\nWIP.. 2 and 3 got implemented.. Ok, I'll just use safeDefineProperty as we use for the rest of props.. During the CI\n$ scripts/ci.sh\nBootstraping project\nerror Command \"bootstrap\" not found.\nThis should be enough to stop everything and exit with an error.. @brianlmacdonald - no-no-no, we just got rid of lerna.\nPlease not bring it back, but wipe out a bit more complete as we do.. @sarkistlt - this error is thrown by v3. Just use v4(next).\nThe second error, you mentioned in a first issue is about 2 different versions of React, used simultaneously.\nReact-Hot-Loader gonna to control all the components, and if some of them are suddenly uncontrolled - we treat it is a configuration bug, and throwing an error.. 1. Don't ever do something not related to render inside the render function.\n2. React-loadable if \"HMR-unfriendly\", it will totally ignore it, and keep the old component (not reload it).\n3. Even if you setup HMR+RHL below and seeing the new component - Component.reducer will the same. As long loader was not remounted - it will not reload Component.\nThere is nothing you can do here, but change the way it works -> wrap Container with hot, and let him update reducers somehow.. \ud83e\udd37\u200d\u2642\ufe0f There is no RHL of server side, there is no RHL side effect before HMR event. How you do it?. @neoziro - still need example to reproduce.. As long react-kit uses v4(\"next\") - it should be ok for \"next\". The first warning is not a warning. Something just killed a component of yours.\nCould you please provide any code to reproduce the problem?. Just finished finished yet another fixing iteration, and I still have no idea how to reproduce this case. \nWe need some code. . @AndyBarron - I don't need a minimal example, I need any example.. Ok. Btw - how you got RHL running in jest environment? It should be transparent(and disabled) when HMR(module.hot) is not active.. Autobind uses .getPrototypeOf to get methods, and then hooks them. In this case autobind will hook into ProxyComponent's prototype, missing all the \"real\" handlers.\nTo say the truth - the used autobind is just far from perfect (\"standard\" @autobind decorator in examples do the same better), but React-hot-loader should mitigate this side effect.. This is not related to React-Hot-Loader, this is more related to the React or even Javascript itself.\nReact-Hot-Loader will inherit from and stand-for all the original components, to be able to \"swap\" realisation on hot-load, and present to React a single version of a class.\nIt even replaces stateless functional components by statefull class-based ones \ud83c\udf89 \nMeanwhile, I've got it sorted, going to open PR in React-Hot-Loader in an hour. Just have to write some tests beforehand.. resolved, just \"squash\" merge to hide unnecessary commits.. - componentWillUpdate is already removed\n- componentWillMount to be replaced by componentDidMount\n- we could not replace componentWillReceiveProps yet, but as long it will coexist with React until version 17 - we might just prefix it by \"UNSAFE\" for a while.. @JustFly1984 - just provide a demo to double check.\nMy tests are all green - RHL does not amending any component with componentWillMount anymore. The change looks reasonable, and I am going to merge your PR.\nThe only thing I am asking for - could you change your plugin code to\njs\n exit({ node }, {file}) {\n          const registrations = node[REGISTRATIONS]\n          if(!registrations) {\n              console.error('no program enter', file);\n          }\nnext double check the content of that file, and roughly explain (or copy paste code here) how you created a program you can leave, but do not enter.\nI can see the reason to this in the current implementation, it might be some serious bug, hiding between lines.. Actually, the problem is with ExtractTextPlugin, and only it has to be deactivated.. May be. The SSR example, I\u2019ve written was ok even without patch. . Problem is in AppRouter\n\nWarning: [react-router] You cannot change ; it will be ignored\n\nIs not a warning. You have to extract \"routes\" not to be affected by hot-loader.\nConsider bumping react-router, and react-hot-loader versions.. Refer to React-Router documentation. I could not help here.. Try to wipe out node_modules and installing them back.\nIf, by the any reason, you started with one nodejs version, and ended with another (9 -> 10 transition) - something (\"native modules\") could go wrong.\nPlus - I would not recoment using node 10 yet. Is has (at least for me) issues with fs-events, and they are those \"file-change-observers\" HMR is made with.. Somewhere between beta.19 and beta.21 stand-in was merged into main project.\nHere it is - https://github.com/gaearon/react-hot-loader/tree/next/src/proxy\nTODO: fix links.. Use React-Hot-Loader version 4, RC was shipped yesterday.\nAnd it just works. \nI mean we literally dont know a method, a way to make HoC/decorator/component NOT to work with a new version.. Currently, we have one \"problem\", one \"feature\", and one \"thing to improve\".\n1. The problem - we wrap all SFC into classes to have an instance to handle during the tree traversal.\nNot actually we need it, but we need props and context, to render a component, and even if we have the props we need - we don't a have context.\n2. The feature - all SFC we wrap, are \"IndeterminateComponents\", ie they are returning an instance(Used in Relay, #775). As result we got #833 - some other tree-traversals could fail. Remove the point 1, and you can remove the point 2. IndeterminateComponents could be returned only from SFC, and we just killed them.\n3. Some stuff requires componentWillReceiveProps to sync-update tree before the render. Thus my lead to renderx3 - hot-render, render, force-update after timeout.\nMeanwhile - all this stuff is required to fake element.type and hot-render the tree, and will not be required, if element type comparison, somewhere in the depths of react-dom, will be controllable. \nIe no wrapping SFC by classes to property render them, no tree-traversal. Only fuzzy comparing and hacking the instances, injecting the updated code.\nAnyway - I've promised at least trice to document how v4 works. It's time to fulfil the promises. . I've started adding some pages into Wiki. The first one - How-React-Hot-Loader-works. Just after writing down how it works, I've point a few moments which may no longer work as I expect, or should work differently.. I am not sure that this is enough. Could you please drop the old readme for stand-in, the old link actually refers to, in this directory?. I mean - physically drop(restore) the file in the correct place. \nAnd you should not refer to the \"obsolete branch\", or even \"current branch name\". Sooner or later next will become master, and what then?. The only thing we did not test - html elements nested in html elements nested in html elements, and no or them to be actually \"replaced\".. Good catch!. Thank you for a bug. Just in time. . Look like this is not a bug. I totally disable RHL and problem still exists, resulting Child not to be found in Root.\nHow to solve - jest --no-cache\nPlease confirm that flushing cache is working for you.. Ok. If some function does not has .contextTypes - that mean it does not has context. As result - we could continue wrapping only context-consuming SFC, keeping the normal ones unchanged.\nThis will make most of functional components.. functional again!. I have spiked possible solution, and everything should work IF that everything had Component in the beginning.\nThings become complicated if not, as long there is no way to forceUpdate SFC. There is no reaction even if one will enqueueForceUpdate manually.\nIn the same time - \"just updated\" always work, as long replace one function call by another - it's an easy task.. There is an issue with implementation. Not all props got merged correctly.. Fixed. Yeah. That might be important for debugging. . There is no need for a special flag, but few things had to be rethinked.\n - we could(and have to) remove module guards(enter/leave), as long all imports have to be in one place.\n - do something with hot(module) - for example magically transform into hot(__webpack_module__ || module). Condition exists - https://github.com/gaearon/react-hot-loader/blob/master/index.js\n```js\n'use strict'\nif (!module.hot || process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else {\n  module.exports = require('./dist/react-hot-loader.development.js');\n}\n```\nPlease check that you are using the latest version of RHL, as long the issue you are describing were fixed two weeks ago.. You AsyncComponent is not \"HMR/RHL friendly\". It have to re-import code splitting point.\nTo get RHL working you have to use:\n- react-universal-component\n- react-imported-component\nOther loaders are not HMR friendly :(. First double check that NOT async code is replaced correctly (may be you got problems with HMR itself)\nNext you could try async loader from our examples - it should work, also react-imported-component was created specially for React-Hot-Loader, and also should work.. Your repo is not quite correct - it uses old react-hot-loader and not the last version of mobx,\nbut, anyway, problem exists.. The problem - subRender could call render of a component inside the render of that component.\nNested call just blows MobX. Actually this is MobX's bug, but we could change our logic to mitigate it.. Fixed repo - https://github.com/theKashey/mobx-react-quick-starter. May be we should fix it from our side. . No. In this case RHL will not see any Components, ie classes, as long they will be transpile, and you will lose ability to change like a anything except \u2018render\u2019 method. \n. @johnnyreilly - so here is a fairy tale.\nv4 was started to support arrow functions as class members, for the projects which does not use es5 transpilation in dev mode. Actually, result is a bit more debuggable, as long it is almost the \"source\" code.\nSo, if your component got an arrow-function member, that member will \"lock\" this, and we could not use proxy as we do in v3 to do RHL's work - there is no way to fake this for arrow functions.\nAs result - RHL will search for classes, and inject magic method, to EVAL something in the class scope and class context\nAnd later we drop thousand lines from proxy, and just rely on this 3 lines long method.\nIf you will transpile TS to ES5 - RHL will not found any \"class\" it is looking for.\nIf you will not apply babel-plugin - RHL will be unable to update non-prototype-based method. Ie \"onClick\" handler.\nThis means - if you will transpile TS to ES5 or dont apply babel - RHL will still work (dont forget to import it before react), but just will lose some abilities. Not the main ones.. > So I can live without Babel, but from what you've said it sounds like I'll lose the ability to debug arrow functions in components. eg. onClick etc. That's a bit of a bind (see what I did? JavaScript jokes \ud83d\ude04 ) as I debug those a lot.\nNot debugging. Replacing. RHL will lose ability to repeat changes in the new constructor and will not repeat changes you made.\n\nIf I was emitting classes from my TypeScript (say having an emit target of es2015 instead of es6) would I be fine without Babel? I'm not in that position now because of IE 11 but that day will one day come.\n\nIf you dont use babel plugin - the \"mode\" you are using does not make any sence. No babel - no cry.\nAnd, yet again, RHL is for dev mode. Are you developing in IE11?\n\nWhat's the minimum Babel usage I have to have in place? My guess is that I need to have TypeScript emitting es2015 and that's me done. Is that right?\n\nOnly RHL patch is enough. In dev mode.\n\nI didn't realize import order was significant when it came to RHL. Can you tell me more about this please?\n\nReact-hot-loader should patch React before any component would be created. Import order is not significant, but better to import RHL before anything else.\n\nAs far as I can tell RHL v3 allows me to successfully hot module reload without babel in the mix. Debugging arrow functions seems fine as well. That being the case, what's the advantage of v4 over v3? Is it essentially down to this:\n\nv4 could handle almost any code you may write, v3 could handle almost no code I wrote.\n\nlatest and greatest RHL but with Babel so slower build.\n\nThat's why I created this issue - how to setup RHL and TS and babel without any significant slowdown.. Actually we could try to make it better to TS users, and NOT require nor babel, nor compiling to ES6 instead of ES5.\nThe only thing one need - set a custom property on each \"spotted\" class, to wrap .bind with some custom hook (like React-Hot-Loader v1-2-3 did, actually), everything else ProxyComponent can handle.\nThat may make TS users more happier, or just make it possible to use RHL, as long most of them have a target: es5, and, as result, could not use RHL :(. There is nothing you could do, but there is something that could be changed in the RHL's internals.\nThats is not an easy task, and we specially did not do it, as long it... you know.. hacks :). No. Only babel magic can handle arrow functions.\nYes. You are transpiling TS into ES5, and where arrow functions does not exists.. Unfortunately nothing could change context of arrow function, is it bound to the single this, and nothing could change it.\nThat means - to create an arrow function that this should execute it. We are using eval for it.\nThe simple solution might look like \njs\nfunction renegenerateArrowFunction(code){\n  return eval(code);\n}\ninstance.arrowMember =  renegenerateArrowFunction.call(instance, newFunctionBody)\nBut arrow function might \"consume\" something from variable scope, and we have to preserve that scope.\nAs result - we need a babel plugin to find class and add a new method with eval inside :(\nNor Proxy, nor Reflection API could not help here :(. What about using typescript plugins to repeat the things babel do?\nhttps://github.com/Microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin. May be you have .babelrc and it adds some transformations you are not expecting?\nAdd \u2018babelrc: false\u2019 to loader option and place it after ts. \nOtherwise RHL will not properly work unless you are set es6 as a target. . \ud83d\ude06\ud83d\ude06\ud83d\ude06\ud83d\ude15\u2639\ufe0f\ud83d\ude1f\ud83d\ude23\ud83d\ude16\nSure it is producing TS incompatible code. \"We\" just don't have linting enabled on build step(a common way to speed up builds).\nWays to fix:\n - change readme to show how split linting and compiling, thus make babel-plug work \"without\" errors.\n - add react-hot-loader/babel-ts which will emit code with type signatures. I am not 100% sure that babel will allow me to do it. babel 7 - yes, but not sure about 6.\n - propose ts->es6->babel then, to ship es5 into the production, one have to override config file location)\n - add some unsafe proxy magic, to hack this provided to bound handlers in \"constructed\" component, and redirect read/writes to the \"real\" this.\n - don't use babel plugin at all. We could restore old webpack loader to \"register\" something and provide some ground truth to reconciler, but bound method overload will not work anyway.\nPS: It is easy to make .bind methods works, but, as long nowadays everybody uses arrow function, and they are transpiled \"into\" the constructor - we could not get them out without eval :(\nReopening task.. Ok. PR just opened.\n- // ts-ignore by @AndyCJ works perfectly! But only for babel-7\n- I also updated solution for babel6/babel after TS. As long ts-loader/awesome-loader support config override, and configs support \"extend\" by design - separating dev and prod TS conf, ie ES5 and ES6 - should not be a problem.\nPlease review.. @madou - are you TS expert?. Meanwhile - found one more way to \"babel\" TS - it is build into awesome-typescript-loader!\nhttps://github.com/s-panferov/awesome-typescript-loader#usebabel-boolean-defaultfalse\njs\n     loader: \"awesome-typescript-loader\",\n            options: {\n              silent: process.argv.indexOf(\"--json\") !== -1,\n              useBabel: true,\n              babelOptions: {\n                plugins: ['react-hot-loader/babel']\n              }\n            }. Released in v4.1.3. Our example - https://github.com/gaearon/react-hot-loader/tree/master/examples/typescript - uses babel 7 under the hood, and might be not the best option.\nThe easiest way right now - ts -> es6 -> babel(with RHL plugin only) -> js(or es6)\nAll settings in all variants you might found in README.. It will be never possible to use all the features without babel. With webpack-loaders restored RHL will be almost usable for TS-only applications.. Wow! We already have a baker!. This is not related to the React-Hot-Loader only to the Webpack Hot-Module-Replacement setup you might have.\nComponent update somehow \"leaking\" thought React-hot-loader hot, and causing page refresh.\nJust \"preserve log\" in console, and reproduce - webpack will inform you how the update went from one file to another, bypassing our traps by the way.\nPS: if you have a \"common pages entry\" - you might need to accept changes there, to prevent them from leaking thought secondary entry point.\nBetter - just wrap with hot the Component itself.. Could not found a react-hot-loader's babel plugin in your configuration.. My bad, it exists. Actually, I could not spot any issues - everything should work. Let me try to run the code.. Look like this is completely server side problem and absolutely unrelated to RHL. Webpack's connection socket dies just after the code update.\nFast googling shows 100500 issues around nodemod and webpack-dev-middleware, and most of them already resolved (in a different ways).. Rhl is front-end only library. Problem is bound to backend. . This might be due to transform-react-constant-elements. it just \"freezes\" components, moving all the \"static\" stuff off the render, thus not letting RHL do it's work.. So\n - don't let RHL go to production.\n - don't let react-optimize work in dev environment.. As long RHL is shipped as a one-big-bundle, and actually has zero \"dead\" code to eliminate, and also has ~zero code in production - this issues does not make any sence.. hot uses AppContainer underneath. It's literally nothing we could tree-shake off RHL.. You still could not do it, as long rollup, the bundler we use, does not allow this. If you will found workaround - fell free to draft a PR.. expose-loader don't seems the root cause (but I dont get the point how it works), but there is noone else to blame.\nReact-hot-loader should be imported before React, and only once.. This problem going to be partially washed away by #991, as long we will allow component to be not proxied.. Just yesterdayI thought that this is an impossible case. And it is still impossible.\nHaving babel plugin, and importing ReactHotLoader before anything else - always works.\nAllways, except one case - you have more that one \"React\" under the hook.\nThat is actually a common case for us, then we are running example from our examples folder with linked RHL, and example is using nearest React for it, while RHL will use nearest React for it. And they are different.\nPlease ensure that you are using a single copy of React, or enforce it - https://github.com/gaearon/react-hot-loader/blob/master/examples/styled-components/webpack.config.babel.js#L24. Think about webpack aliases as a dependency mocking. \nIt could be, that you might have more than one version of something - react, styled-components, lodash - anything. You may use yarn resolutions to pin some dependency to a specific version, or use webpack aliases to pin any name to some folder, which actually does the same - pins dependency to a specific version.. Few docs have to be revisited.\nAbout requirements of babel - RHL could partially work without it, doing most of the stuff. But it will require some manual steps to setup RHL.\nIt is much better with babel, than without.. js\nexport default ReactHotLoader\nand then \njs\nreactHotLoader.register(type, NAME, FILENAME);\nBut why do you need to test it? I will not recommend to have RHL enabled in testing environment due 2 points:\n - it does not make sence\n - it actually breaking Jest(#856) and Enzyme(#897). why not to add your case to RHL's own tests?. When ComponentA is replaced by ComponentB, the following occurs:\n\nAll ComponentA instances are NOT unmounted (componentWillUnmount())\nA ComponentB instance is created, and ComponentA instnce is created (constructor())\nAll variables unchanged between a new ComponentA instance and existing ComponentA instances, are replaced by ComponentB variables.\nAs result the state got unchanged.\nAll arrow function or bound members, as long they are variables, is replaced and updated.\nComponentA prototype is replaced by ComponentB prototype. As result ComponentA does not exists anymore.\nAll ComponentB instances are NOT mounted (componentWillMount()), as long they were not unmounted.\n\nAs result\n - hot update went seamlessly\n - constructor of ComponentA was called once\n - constructor of ComponentB was called once\n - render method of ComponentA instance might be called at least twice.\n - no lifecycle method was called.\nThat was actually a thing to discuss - we are detecting changes in lifecycle methods, and displaying a warning about it. We are not executing them due to \"no time travel\" rule. Aka component already exists, we and wont change its past.\nIt is possible to not to update these components, but unmount them in real. Changes in lifecycle methods are rare, but applying that changes - it might be something user could expect.. Quite strange - outside of webpack dev env, ie without module.hot enabled, RHL should not affect anything. And not affecting by fact.. Now I see.\nTo be honest - we never tested RHL in such environment. Even more - we had an issue then RHL just blow up Jest, I mean - completely.\nI'll try to investigate that is happening and how we could mitigate the problem, but now I can't give you any advise, sorry.. Theoretically - is RHL working ok with mount, it shall work with shallow. Theoretically.. This is how webpack's hot module replacement works. We could not change it.. Just post an example to reproduce.. I'll double check.. So the problem - React.Component is undefined.\nThe root of the problem - React-Hot-Loader/babel patches React, adding React-Hot-Loader in the beginning. And requiring React...\nThe root cause - one have to ask babel-loader to not touch node_modules, ie add exclude: /node_modules/ in your webpack.conf.\nActually - I've fixed this a few months ago, but problem returns.\n. Yeah, this is due migration to rollup. Currently we could not target \"small\" internals, not bound to any external files, and creating a loops in case of babel in node_modules.\n@neoziro - how you recon - does it worth to went back to simple structure as we have before?. \u201cThe fix\u201d was simply - if Babel plugin could not register anything - it will not add any extra code. \nThat prevent webpack internals from being patched by RHL. Just by luck, you know. \nBut the goal is still the same - the code we inject in Babel should not have any side effects. Even require external modules. \nPs: and currently RHL will inject itself into RHL, but webpack could handle it. \n. Easiest possible solution - filter out all node_modules inside RHL's babel plugin.. And that's is the only thing we could and should do. Rollup is not the root cause - not only AppContainer is using \"external\" modules.. \ud83e\udd37\u200d\u2642\ufe0f I'll double check then.. I thought that was clear, and it should remove itself when environment is not dev or hmr is not active.. This is not a bug, this is a feature.\nSee https://github.com/gaearon/react-hot-loader#checking-element-types. You can use non RHL specific logic - child.type === <TheType/>.type\nPlease refer to https://github.com/gaearon/react-hot-loader/issues/304\nthis is a root design issue, we could not solve for years.. In all the tests I've created - it works.\nPlease share your example, this is the only way to let me understand the problem and fix it.. You cannot use react-hot-boilerplate as example, as long it was created for React-Hot-Loader v1, and you are using v4.\nDid you setup webpack HMR, or used hot help? Added a babel plugin?\nEverything you are asking for is 100% working, 100% tested, and 100% double tested in real applications. \nJust follow the v4 instructions.. But the true size of that file is less that 1kb!. There is nothing we could do. There is nothing we could change, as long things are working as the supposed to work.\nYou are reloading a file, that file re-creates the store, dropping all the information inside, Redux Provider warns you about that action and next RHL will prevent componentDidMount to fire, and you will never fill the store again.\nThere is a general rule - you shall not hot reload application initialization code. Including store creation and react-dom/render.\nHow to fix\njs\nconst App = () => {\n  return (\n    <Provider store={store}>\n      {/* ... */}  <--- take this\n    </Provider>\n  );\n};\nAnd extract to another file. And mark as hot that file.\nSo you will be able to reload reducers and application not simultaneously, will not recreate store on HMR even, and achieve the goal.. Just put hot into the \"next\" file. Don't reload store creation. We are React, not Redux hot-loader :). React Native are using react-hot-loader v1, and facing all the issues we solved. \nActually everything should work out of box, as long React-native supports the same module.hot as rest of bundlers. \nActually all the work shall be done not here - just rewire React-native HMR setup and done. . - [ ] We have to find a call to registerRootComponent and wrap passed Component AppContainer HOC (does not exists)\n- [ ] We have to find entry point('main' in package.json), and place hot/module.accept into. One module.accept on top level should be enough. I am still could not understand the approach of react-transform - placing accept to any files with any React stuff inside could be dangerous.\n- [ ] Implement points above as a separate babel plugin. Something like react-hot-loader-installer.\n- [ ] Update react-native/babel-preset/configs/hmr.js to use RHL plugin.\n- [ ] double check - if react-native compiles js to ES5 - may be it worth to stop using eval, and hack method .bind methods.. @neoziro - yo dawg! I heard you had a cool error overlay?. That's a typo. ES5 will not work :), and only in case of TS.. React-Hot-Loader version 4 does not include Webpack loader anymore. Please use babel plugin. \nThis is the only way for us to provide a better experience for you.. It depends on the meaning of \"working\"\nYou can use RHL v4 without babel or webpack loader and might get even better experience than with version 3 and webpack/babel plugin.\nWe dropped webpack plugin, as long it count not help us to achieve some goals, like support ES6, while babel could. \nv3.1.1 was the last version with webpack loader included.. They are in readme. Just keep in mind - you cant 'update' - just remove webpack loader and add babel.. @Tsourdox @user905  - just remove our webpack loader. Then it should work at 90%. Then, add babel plugin, to reach 100%.. There is no webpack loader, and there is no way to use it. That's the point.. You are right - he have removed it during migration, mostly cos it does not make a sense. It could not add anything.\nRHL without babel will support any complex HOC composition, but will be unable to change arrow or \".bind\" method body (which are usually also arrow today).. Look like webpack is broken - the source code contains two blocks with parentHotUpdateCallback\n - one on line 5, added by webpack itself\n - the second on 6xx line, added by hot-module-replacement plugin. Nope. This is your problem.\nJust remove HotModuleReplacementPlugin from webpack.config. \"--hot\" option for webpack-dev-server is doing the same.. We already \"fixed\" it - https://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js#L62\nBut we do break the fix.. Sorry. I am not a real Electron user, but, as I remember it is how Electron's HMR works - it replaces just everything.\nAnd, as not a real Electron user, could I ask you to draft a PR with the changes to README file?. Unfortunately no. Except the browser version matching. But RHL will use eval in some internal stuff, so it will not help.\nWhy do you need strict CSP rules in dev environment?. The problem is - to remove eval we will have to remove IE11 support. class is just a syntax error for IE11. There is no other way than eval, it \"not-executing-the-code\", to handle it.. Probably RHL should not be CSP-safe solution, as long it will use eval to update \"arrow\" class methods.\nI will amend the code to gracefully disable RHL in case of CSP.. PR has been drafted. Next version of RHL will include production, not development build if env does not met required conditions - for example due to browser version or CSP. ++ we have to test how new (\"real\") Context API works, as long \"Context\" is not a \"Tag\" or a function - it is a brand new element type. Should be fine, but even enzyme itself failing :). @oliviertassinari - yeah, RHL is adding componentWillReceiveProps, and I am going just to drop it.. @gaearon - this is a local meme( #830 ), about performing hot-render each time you \"can do it\". V3 uses AppContainer to start an update, v4 can use AppContainer to perform sync updates, and Component.render to perform async updates. Async cos they could be executed after the main update or main update could not \"render into them\" - code splitting, resource load, portals, and so on. Plus we have to defer .forceUpdate, as long shall not call it from a render method.\nBasically - this one line - https://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js#L164\n. Nothing but to being able \"flush\"(forceUpdate) changes. As I pointed above - we could safely remove it. It may cause double renders, but this is not something we should avoid.\nPlus, if you move updates from a timeout to componentDidUpdate - they will be not so very deferred.. PS: Is there any \"new\"(~fiber) way to trigger re-render? Is there any way to re-render SFC without a real Component on top of it? Is there any a bit more \"soft\" ways to update?.  - We found component to be updated.\n - We updated it.\n - Now we have to redraw it.\nDo we have other choice rather then calling .forceUpdate? How do new Context API handle it?\nActually, what we are trying to do every time - is to update everything from some point and beyond. Just everything will also be a good solution.. Yep, this is related to react-force-deep-update. I don't really need anything else, but have to ask you about possibilities.. Look like we still have to use forceUpdate to mark node to be updated. We could, but shouldn't use setState for this, as long it may alter the way Component work.\nAnd this is a less hacky way for now.\n\nI don't remember enough about how RHL works to say what would be, but maybe you could tell me?\n- On HMR we call .forceUpdate on AppContainer bound to updated branch.\n- Everything starts on update, in the render method after this issue being solved.\n- RHL checks that \"this.version\" is the same as \"current\" value(number of reactHotLoader.register calls), and if not - trigger hot-replacement-render.\n - hot-render hydrates the tree and next start rendering component, comparing to hydrated or registered components, performing proxies update then possible, and calling componentWillUpdate(to bypass redux component cache)\n - everything ends with another (forced) update, to actually display all the changes to the customer, bypassing PureComponents.\n\nIe - double, but in real triple, render. As long extra time, it will consume, is not comparable to the rebuild time - this is fine.\nPS: And thank you for a conversation, I've just understood that comparing this.version and \"current\" is the root cause of #923, as long current does not increment without babel plugin.. @jaydenseric - nothing. Did not get a chance to properly test the changes. Should be ok, but I am not going to ship something, which could possibly break your stuff. \nYou can help - just checkout that branch, build RHL and replace node_modules/react-hot-loader/dist by the new one (do not use yarn link, as long RHL will patch its own version of React in that case)\nGonna test the changes one more time and merge the PR. Aiming to ship on weekends.. Released. v4.1.0. @mvestergaard  - double checked - there is no componentWillReceiveProps in src folder. Could you double check?. I\u2019ve just copy-pasted wrong function. \nAnyway - I\u2019ve searched React-hot-loader sources and there is nothing related to deprecated methods. \nThat might be due ton polyfill, as long it adds all the deprecated methods, ignoring current React version, but setting secret flag to suppress the warnings. \nAnd next we wrapping all the methods, but not passing that secret flags. \nThus it is know how to fix it. . I'll update proxy code to keep everything from original class. @gaearon - should I also keep method arity, or (I hope) argument count does not count?. In review.. Patch version released. v4.1.1. @elisherer - you can activate debug mode - https://github.com/gaearon/react-hot-loader#setconfigconfig - and it shall explain what is wrong.. I've double checked and added a simple test to be confident about - everything is still \ud83d\udc4c . @elisherer - just to double check - App is included into templates/index or templates/index is included in App?\nThe main difference between 4.0.1 and 4.1 - SFCs are no longer converted into Stateful components, and as result - they lose \"brains\".\nThey could not found that \"O! I was updated! Hot reloading\", and have to had AppContainer(or hot), or any other \"smart\" Stateful component before them.\nYour application worked because \"safety net\" worked. I've removed it from SFC, and it got broken.\nI am not sure how you did it. And I could not reproduce it.\nI'll be quite keen to get an example to play with. You can send it in private, if it is not public.\nAlso, you can try to restore that net - just add App.contexTypes = {}. SFCs with context are still have to be converted into Stateful ones with safety things enabled.\nThat safety net actually activates \"React-Hot-Loader\" if it did not properly do it's work. As long there are no errors - look like RHL is just doing nothing, ignoring the update.. @swrobel it was \"fixed\" in 4.1.0, and yet again in \"4.1.1\" 4 days ago, and now I am waiting confirmation from @elisherer and @mvestergaard that this time everything is ok.\n\nAll the tests I've done myself - green.. @elisherer - this is not due to this issue, and it is easy to \"fix\" it - just remove \"Prevent\" component.\nThat means - \"forceUpdating\" of PureComponents might be broken. That's another issue.\n\nThis one is \u2705\ud83e\udd18. Checked, double checked, and ready for review. I am not sure why codeconv complain.. react-hot-loader - client side library(+babel plugin), to perform React Component hot-updates.\nwebpack-hot-client - server side library, watches for fs changes and sends updates to a client.\nwebpack-hot-middleware - mixed (more client), some additional code, to make hot-module-replacement work. More concrete - accept updates from webpack-hot-client.\nAnd you need all this stuff, as long react-hot-loader works atop webpack-hot-middleware, which is a part of webpack-hot-client.. The only way to solve this - dont update state. As long we are preserving state  - we should not just override the old state, by the new one - so something has to be changed.\nThere is 2 options:\n - call setState on state change (will not solve this issue, but could solve others)\n - do nothing, but this might be not a great idea, as long applying the changes - is usually expected operation.\nHow to actually solve this issue: change the state on componentDidMount to make state on instance differs from \"initial\" state, and prevent update as result.\nPS: But only after #840. We dont have this logic yet.. Babel is not required to preserve the state, only to properly propagate updates.\nSomething else is wrong(may be setup?), but I could not help without actual code. Your code is 100% fine. It does not work due some optimizations I've added :(\nReact-hot-loader does not understand that something got updated and does not try to perform an update.\nHow to solve? Add to the ./components/App(file you are expecting changes from)\njs\nrequire('react-hot-loader').default.register(() => {}, 'a','b');\nAnywhere. This code will just got executed on hot-module-replacement, and inform RHL about that event.\nLook like it is time to bring back webpack loader :). Even better - you can add this code to the index.tsx. Just right before ReactDOM.render. I've just played with your example, and fixed it with 3 lines, I've added to App.tsx (no changes in index.tsx)\n```ts\nimport {hot} from 'react-hot-loader';\n...... // all the file\ndeclare const module: any;\nexport default hot(module)(App);\n``.export class App-> I have to idea why, but TS expect you to reexport used class.. We can\u2019t. If we will try to hot reload code on each render - it will ruin everything. \nWe need some signal to rely on, for example - \u2018hot\u2019 method. . Ok. I should update Readme :). Yeah, it is better to codemod this code, as long we could not distinguish a \"local prop\" render method and \"render method we got from the prototype\". Just because we are using render as a descriptor.\nTo many of them :). Sorry about it. Might be solved with #840 . Ok, I just start typing a long story why I have to idea how to solve this problem, and thus could not.\nAnd then I got an idea how I could \ud83e\udd37\u200d\u2642\ufe0f . So the main thing here - there were no issues with the provided code. Only for the nested components, and even they possible were able to hot-reload themselves.\nI had to spend some time to get red tests to fix them. Anyway - PR is opened.. addnew webpack.NamedModulesPlugin()` to webpack plugins, to display and understand what you are doing wrong and hot update propagates.\nPS: and dont forget to add react-hot-loader babel plugin (see README). Yeah. So try to figure out why page/index should be accepted, or just accept it. \nBetter - just use proper webpack-dev-server configuration (pick any from our examples folder). \nBut there is nothing related to RHL. \n. Unfortunately, this is not related to React-Hot-Loader at all.\nPlease raise the same issue for parcel bundler - detect module replacement and call correct endpoint HMR API - that is their job.. @colinrcummings - sure not.\nI'll try to handle this one today. \ud83e\udd1e . \ud83d\udd77 do not merge. It's killing React 15.. Should be ok by now. instanceof React.Component is not properly working to detect SFC, and I have no idea why.\nAs result ProxyComponent tracks it state by itself via static property. That property sometimes, on component update got copied from function to classes, and I have no idea why.\nI've added \"stack trace\" to hot-render, to help myself debug this odd behavior. As result \"the fix\" - is just to add isStatelessFunctionalProxy to the RESERVED_KEYWORDS and stop coping it.\nThis fixes the issue, even if I did not found when and why my stateful components were soiled. So - something bad could still exists. But tests are green, and most complex application I've tried - also works well.\nAs result I keen stack tracing, as long it is still useful, as long RHL actually could not \"merge children\" from time to time. And, yet again, and I have no idea why.\nFolks, you have few hours to test last version in React 15 (nothing was changed for React 16) and next I merge.. There is SFC component related but, introduced by https://github.com/gaearon/react-hot-loader/issues/873 :(\nI will try to fix it, or have disable this feature (it is not in production yet). It is not easy to properly fix this, and the best way is to transpile code not into es5, but to es6. Ie keep arrow functions arrow.\n(but I will add _this3). This is not a bug, this is a feature. This is how RHL is trying to detect the changes.\nEven more - sometime it could execute render 3! times.. https://github.com/gaearon/react-hot-loader/wiki/How-React-Hot-Loader-works look for 1.2. \"A few\" :) Thanks mate!. You have to create store only once, and it should not be hot-reloadable. This is what Provider is asking about - please dont recreate the store.\njs\n// index.js\n....\nconst store = createStore(); // <-- create it once!\nrender(<Provider store={store}><App/></Provider>)\n....\njs\n// app.js\n....\nexport hot(module)(App);. At your beck and call.. React-Hot-Loader does not contain anything consumable or injectable into webpack. \nReact-Hot-Loader is a hot HOC and a babel plugin.\nPS: React-Hot-Loader v3 did provide webpack-loader, but not v4(current) .. Fear not! React-Hot-Loader is healthy. But HMR is broken in webpack.\nhttps://github.com/webpack/webpack-dev-server/issues/1377\nhttps://github.com/webpack/webpack-dev-server/issues/1369\nhttps://github.com/webpack/webpack-dev-server/issues/1367. @oliviertassinari - but #918 is only about deprecation warnings, everything should still work. . The example was created in December, \"preferred way\" was found weeks ago. That is the answer.. babel-after-ts might be the best way, as long it does not require babel7, but will not work with some boilerplates which don't let you specify dev/build tsconfigs.\nLets assume that we just listing possible configs, and which one to use - is up to you.. A fat-arrow-bound event handler usually could be reloaded, unless it was \"attached\" via addEventListener in componentDidMount, and, as long component will not \"remount\" handler will not update.\nAnyway - we could not detect such conditions.\nRHL only not updating lifecycle events, everything else should be updated.. In your case it will not, as long after ts-loader we have pure ES5, while our babel plugins looking for ES6 features, like classes.\nJust swap them! Or change tsconfig to emit es6 (but not in prod). Check readme, I've updated this moment 3 weeks ago, or better dive into the original issue - https://github.com/gaearon/react-hot-loader/issues/884. We know this problem, but could not do anything to solve it. At least today.\nThe only proper way to write your code is to compare the same things:\njs\nnode.type === <Component />.type. Nope. But we do have a special helper for it - areComponentsEqual, check out https://github.com/gaearon/react-hot-loader#checking-element-types.\nPS: @gaearon, I know that we have to have this conversation a long time ago, but is it possible to move RHL a bit more \"deeply\" inside React? Make React more \"hackable\"?\nBasically, only 1 things is required:\n - a function to derive type from type before element creation. \nThe same logic as we put into createElement, but in the proper place - below user space.\nThis will solve all endless \"element comparison problems\", and actually remove the last side-effect we have.. Yeah. Forgot to merge :). There is also Context API related test, waiting for a new enzyme release - https://github.com/airbnb/enzyme/pull/1513. Real detective!  Look like condition render in Fragment could break everything.. Actually here we got two bugs.\nSFC inside Context might not be \"force\" updated, as long there is no command to do it. The test I have actually testing Stateful component, the one I could update.. @neoziro - yep, now it is fixed.. So just in time.. Could you elaborate more, or provide some example?\nTheoretically, anything with \"didUpdate\", as something that will be triggered after RHL did its job, shall not affect anything.\nFeel free just open a PR with a new test failing, and ask me to fix it :). Reported by @elisherer\nIt has something to do with me using react-waterfall which isn't doing anything wrong (from my perspective).\nCheck it out on: https://github.com/elisherer/react-hot-loader-repro918\nI added examples of:\nClass component\nFunction component\nPure Class component\nConsumer Class component\nConsumer Function component\nConsumer Pure Class component\nChildren as a Function component\nConsumer \"Connected\" component\nConnected Children as a Function component\nComponent in a portal (modal)\nAll is working well besides the react-waterfall example.\nreact-waterfall is a mixture of the above and still manages to break, I added the library's source into the repo so you could fiddle with it.\nI Couldn't get it to work.\nCurrent state - could not create a red\ud83d\uded1 test to start with.. @neoziro - changing PureComponent to Component in the original example does solve the problem in real.\nThe second thought was about using _children, thus \"disabling\" some heuristics, but I've tried the same it tests - always green.\nThe problem still exists and easily reproducible (in complex example). Pure Component just next to Context Consumer. Double kill! \u2620\ufe0e\nAs long changing PureComponent to Component do the job, and we got control over PureComponent itself - solvable.. Strange. I have almost the same situation in the tests - Pure inside Pure, and they works.. :notsureif: \njs\n<AsyncRouteComponent>\n  <HotHOC>\n    <PureComponent>\n      <Fragment>\n        <Component>\n          <PureComponent>// this works?\n            <PureComponent>// this works?\n              <PureComponent> // this works?\n                <PureComponent> // Change this one to Component and it starts working (and \"this works?\")\n                  <PureComponent> // this works?\n                    <PureComponent /> // <- does not hot reload (BUT ONLY THIS!)\n                  </PureComponent>\n                </PureComponent>\n              </PureComponent>\n            </PureComponent>\n          </PureComponent>\n        </Component>\n      </Fragment>\n    </PureComponent>\n  </HotHOC>\n</AsyncRouteComponent>. So, how PureComponent_Row is different? Why does everything stop on it?. I've tracked down the problem. Fixing.... @elisherer - going to add your repo to our examples. Be be able to test it in the future. That is should fixed in the latest release. 4.2.0 adds support for Context and should solve this task.. Ok, I fixed the case, when PureComponent is located inside Context, but not next. actually it should not be a problem.\nThe only possible reason - Provider did throw an error. Where is value, I am actually counting on?. Just set setConfig({logLevel: 'debug'}), then you will see an error.. @IMalyugin - thanks for report. Fix will arrive soon.. Everything should fixed in v4.3.0. Every time I announce: * Hey! At last it works! *, it doesn't :). Obliviously - React-Hot-Loader does not always work. \nI have some examples as a proof - they are partially not working, and I don't know why.. Please double check console output. It should contain something.\nFirst thing to check - does webpack HMR working, as long it might not.\nUsually, then RHL does not work - you will see the change, after page reload. But if HMR does not work - you will see nothing.. We have a lof of examples, and almost all of them uses webpack. Pick any, and try to use them.. \ud83e\udd37\u200d\u2642\ufe0f only one file was updated, is that something you not expected?\nSorry, I could not predict, why you are having issues - better publish an example to reproduce.. Hey! No, you dont need to add anything related to redux and so on. It should \"just work\"\u2122\ufe0f\nI'll check the repository you have provided.. Sorry for a delay. Only now I got some time to have a look.\nEverything is simple, and described in readme. Not very clearly, but described.\nhttps://github.com/gaearon/react-hot-loader#code-splitting\nAs long your components are updated, not remounter lifeCycle of your asyncLoader will not be triggered.\nThere is 3 ways to fix the problem:\n1. Export each \"exported\" component (the one you will \"import\" later) with hot. Then it will \"reload\" itself.\n2. Use hot-loader compatible loader - loadable-components or react-imported-component\n3. Patch your own imported Component to become \"compatible\". Unfortunately, with React 16.3, this is not as simple as before. \nBetter stick to first 2 options.. No, only for the ones you are dynamically import. Hot loader could not update components you have to \"re\"-import first.\nSo - ok make them self-reloadable (wrap with hot), or use RHL-friendly loader.. First try to update RHL. We had an error related to updates.. @hannadrehman - yep, we had bugs like it. React-Hot-Loaded failed to trigger forceUpdate on components, and React just didn't re-render them.\nThen, on any external change, including HMR, something could hit re-render, but usually in the \"current\", not \"future\" state.\nI was absolutely sure, that I've fixed this half year ago.\nSo - which version are you using, and do you have some code to reproduce?. setConfig({logLevel: 'debug'})\nhttps://github.com/gaearon/react-hot-loader#setconfigconfig. In our internal tests react-loadable works pretty well. Could you share some details about your case, even if you fixed it already?. anyway - I'll be keen if you could share some example, as long in our all-async-component-loaders-i-found example react-loadable is the one who actually works.. \ud83e\udd18. The problem - RHL do have a logic to \"update\" bound methods, and it is straightforward - If a method was changed - update it!\nHere - there is no change the method itself, only in the external variable it uses. As result - we are not updating it.\nThe only possible change - always update all the bound/arrow methods.. Thank you. That was a major bug.. @TSL112358 - sounds like something different. But it sounds similar to #944 \nIf you have an easy example - please share. I need it.. If \"propagation\" change bubling will not \"hit\" hot (or module.hot) - it will trigger will page reload.\nThis is very handy, when you are updating something that could not be hotreloadable, redux store, for example.\nJust double check console output.. We will release a new version today \ud83e\udd1e. Sorry breaking this back.. In short - #1138 \nI just need some free time to start playing with it. Unfortunately free time is a problem.. Not reproducible.. So export function polyfill(Component) { means - it will be named import of the library\nNamed import means - import {polyfill} from 'react-lifecycles-compat';\nAnd that will be transpiled to reactLifecyclesCompat.polyfill(XXX);. Tested on fresh install - everything works.\nThe only way to \"break\" it - use react-lifecycles-compat version 1, where polyfill was a default export.\nCould you double check \"what\" is reactLifecyclesCompat for you?. @oraricha - that is only possible if you are using reactLifecyclesCompat v1.\nCould you remove node_modules and install them back? \nSomething wired up in a weird way.. But it is listed in dependencies, not peerDependencies. How could it conflict?. That is a correct behaviour. And it should work without issues.. As long people continues complaining about this, and the code itself is correct - I have to make a tought decision and solve it with a hack. . Should be double fixed.. Ok. So here is the plan. I'll describe the problems, and a few ways to solve them.\nHow RHL v3 works?\nIt uses babel to \"register\" all top level variables (including Components), and then replace \"real\" ones by \"fake\" on createElement call.\nThe problems here - HOCs and decorators. They are not a \"single\" top level variable, usually they are top level+internal. And that internal is invisible for v3.\nWhat did v4 changed\nExactly this moment. It first \"hydrates\" the tree, and then starts traversing the old and the new tree simultaneously. But with preact we don't have the old tree to traverse, as long is it \"VDOM-free\".\nHow to solve?!\nI have 2 ideas, both are great, both will work.\nIdea 1. Put everything inside.\nCompletely disable RHL \"hot-renderer\"\nMake \"compare\" function configurable in preact (in \"debug\" mode).\nAppend this logic from RHL to a new comparator.\nThen, on element comparison, it will not dom._componentConstructor===vnode.nodeName, but will isSwappable(dom._componentConstructor, vnode.nodeName) and next proxy got updated, original class will be hacked, and magic happened.\nActually - this is hot react-hot-loader should work from the scratch. Could be easy implemented both in React and Preact. As result it could compare existing component with a potential one, and diside - should it be hot-replaced or not.\nBut it will require changes in base libraries.\nIdea 2. Don't rely on the internals.\nRemove all \"getStack\" related code. We will not need it anymore.\nOn \"hot-render\" render the old tree, then render the new tree, as usual.\nAs long we render everything by ourself - we could remove 50% of \"hacks\" from hot renderer and comparison will be super easy.\nResult is React/Preact version agnostic, and does not rely on any internals.\nThe problem here - how render the old tree. It's doable, as long we control createElement and all \"entry points\" are registered via babel plugin.\nSo - on some component render, we can detect that hot-replacement-render should be run, and then \"roll back\" the proxy registrations, thus being able to render the old tree.\nCould be easily made if actual \"componentSwap\" will not occur on registration, but on createElement call, it will remove requirement of \"unrolling\" as long nothing will be applied yet.\nSO?\nBoth ways could reduce technical debt and greatly simplify how RHL works.\nBut which way to follow?. fixed in v4.3.0. If you were able to handle your project with v3 - you should be able to do it with v4.\nhot is just a AppContainer + module.hot setup - you can do everything by yourself.\nJust beware -hot-loader could not \"bypass\" async-loader, react-loadable for example, as long they load chunks only onMount. \nBut there is more \"RHL-friendly\" loaders like loadable-components, or react-imported-component.. There is super simple RHL-frindly solution in loadable-components - it just always load a new component. . Unfortunately no. Everyone has to pick it's own way to detect HRM and the way to reload stuff then. React-loadable still could not choose, but we have ideas how to enable every loader to work.. This is how our greatest sideeffect works :(\njs\n    PivotBase.prototype._getPivotLinks = function (props) {\n        var _this = this;\n        var links = [];\n        this._keyToIndexMapping = {};\n        this._keyToTabIds = {};\n        React.Children.map(props.children, function (child, index) {\n            if (typeof child === 'object' && child.type === PivotItem_1.PivotItem) {\n                                                     ^^^^^^^^ this comparison is \"wrong\"\nsee:  https://github.com/gaearon/react-hot-loader/issues/938 https://github.com/gaearon/react-hot-loader/issues/304\nUnfortunately, there is no way to \"fix\" it from our side.\nThe only thing I could (each time) propose:\njs\nnode.type === <Component />.type. Ok. Look like if Fragment is wrapped around a single element - it's children are actually a child.\nThanks for reporting. I'll fit it today.. It's fixed, but not released yet.. Your initial code I the \"right\" code, but connect swallows update, as long \"data not changed\"\nWrapping \"internal\" component with hot makes possible to \"bypass\" redux-connect checks, and thus everything working.\nThis sounds like #944, the issue I still could not trace down.. @akhayoon - yeah. This is how RHL should work. This is how it works for me, or for tests.\nBut not always, and I dont know why, but know \"when\" it was possibly broken (16.3 migration).. 4.5.2 contains a serious \"WFT-level\" bug. Please use at least 4.5.3. Linked: https://github.com/gaearon/react-hot-loader/issues/959. If yu have some issues with ReactHotLoader and redux - please raise the correct issue or provide an example. Then we will solve it. . There is nothing special you have to do. It just should work. . You know, it sounds like a bug. Ok a huge change inside webpack. \nIt could only work is something triggered \u201cregister\u201d. \nCan you share that example?. @neoziro - so everything is due to autoload inside the constructor. Look like the condition should be a bit different, - preload only NOT for browser, to emulate componentWillMount on server-side.\nIn imported-component I am using detect-node for it. Fix and test this moment just last weekends, so I am pretty sure you shall do the same.\nAs result - the state of code splitting is unchanged. You still have somehow trigger reimport, and it will not work without it.. But typeof window !== 'undefined' is a browser, not server side.\nAnyway, this one is good to merge.. Good idea. But only 16.3, you know.. But it requires a bit different interface.. @knoopx - you are right - every component would be wrapped with ProxyComponent, but only AppContainer used in hot would not forward ref. The rest is more about neutral (except SFC becomes Components). > It also seems weird to me that componentWillUpdate is called from react-hot-loader \ud83e\udd14\nThis is how React-Redux got signal to update wrapped component.\nAs far as I know - the logic around merging props should correct.\n```js\nconst Switch  = ({flag}) => flag ?  : ;\n<Switch flag={0}\n// and then\n<Switch flag={1}\n```\nReact will re-render something with flag={1} and that means that we have to work with flag={1}, with a new prop, not the old one.\nLook like, you dont need this change. You might need remove side effect on props. So - store the original props, and restore them just after render.\n\nin the same time, I am merging old tree and a new tree. Probably I should use the values used to build existing tree, ie \"the old values\".\n\nI have to double check.\nMeanwhile - could you double check that\n```js\nconst next = instance => {\n      // copy over props as long new component may be hidden inside them\n      // child does not have all props, as long some of them can be calculated on componentMount.\n      const realProps =  instance.props; // <<-------\n      const nextProps = {\n        ...instance.props,\n        ...(child.nextProps || {}),\n        ...(child.props || {}),\n      }\n  if (isReactClass(instance) && instance.componentWillUpdate) {\n    // Force-refresh component (bypass redux renderedComponent)\n    instance.componentWillUpdate(nextProps, instance.state)\n  }\n  instance.props = nextProps\n  hotReplacementRender(instance, stackChild)\n  instance.props = realProps; // <<-----\n}\n\n``\nFixes your problem. Might be this change should be added.. Why changing the props merge order (and why you are getting new values?) fixes the problem?\n. Ok. So what I found:\n1. The merge order was right. There is no difference betweenchild.propsandnextProps, they are both ispropsof Component, just from different sources (lets call it so)\n2. That might be not _correct_ in real, but this is how v4 works and this is how we build out tests.\n3. Your problem is not due to props, but due to howcomponentWillUpdate` called. As long \"we are not touching lifecycle events\", probably we should call this method with unchanged props.\n4. There were a side effect with soiling component props, I noticed with React 15. The patch will fix it.\nSee https://github.com/gaearon/react-hot-loader/pull/968. It's too late for me to merge and release. @neoziro, might be you could handle it?. \ud83d\udc4d \ud83d\udc4d \ud83d\udc4d . There was _this, this2, this3, half year later someone asked for this4, and now this5.\n\ud83d\ude29\ud83e\udd18. So what we are doing - reading function body from one class, and executing it in the scope of another. as result all variables, possible visible from a function, including this, are right.\n@loganfsmyth - this problem could be fixed with easy, if only you know babel. And look like - you know.\nWe just need to place our \"regenerator\" function inside a constructor, the place where all those thisN already defined. Currently, we are just adding it to the class.\nThe trick is - we have to the put a function into the transpiled class constructor, so in the scope, where this5 is already defined.\nLink to sources - https://github.com/gaearon/react-hot-loader/blob/master/src/babel.dev.js#L176 - just appending class methods. Works, but not always :)\nMoving regenerator into constructor will not cover some inheritance cases, as long they will have a \"place\" inside another constructor, but it will be better than current state.. Just to double check - adding code like\njs\n [REGENERATE_METHOD] = (key, code) => this[key] = eval(code);\nwill result regenerator code to be moved inside a constructor? \nWhat is the \"right\" way to put this method there?. I have failed :(\n\nTo move renerate inside constructor and keep the \"// @ts-ignore\" comments.\n\nThe move itself is relatively easy, but how to add comments :(. Just add this4-6 for now. Will help for a while.\nIf anybody could help modify babel plugin - please do it.. Sweet. Do not release until this related issue will be solved.. @neoziro  - today? But 4.2.0?. \ud83d\udc4d . @timneutkens - could you try master branch? Is this the last fix we all need?. Ok, lets wait for #975 and then release a new version.. @Kaishiyoku - hold my beer. version 4.2.0 - released.. Trolling detected. \nAs long you don\u2019t like Jamie\u2019s approach - we should not follow the same way. \nMeanwhile, I do have a better idea - we could ship fixtures with RHL with \u201cfix\u201d(or replace) for React-loadable, or any other library. \nAs long we control element creation - we could do anything. \n- probe componentDidMount for loaders\n- don\u2019t wrap some \u201ctype-sensive\u201d components \n- anything else. \n. I would appreciate. Closed issues is not a technical problem. . Gonna fix #979 and then merge this one (as long it introduces it). Oh crap :( This is something we could not handle and never will be.\nShould not be a problems unless you gonna change the universal-handler.\nAs far as I know - RHL should not change the method, if regeneration fails. Are you sure about \"lost\"?. Yeah, I thought about it many many times, as long sometimes it is the only way to solve some complex cases. And it is a super easy thing to do.\nThe main concern against - we probably should be as transparent, as we could. But we are not transparent, and, to be honest, RHL is a one big side effect.\n@neoziro - what do you thing about componentDidHotUpdate?. Better utilise  componentDidUpdate or (even better)componentWillRecieveProps. You will \"always\" get that error, while you have this.handle = handle(this) in a constructor.\nUsing componentDidUpdate/componentWillRecieveProps is just a way around, to actually get this method updated.\nBut will not solve the problem :(. Ok, let's try to find a way, to detect, and repeat functions like this.\nThe problem - we need a way to execute an \"update\" in current class context. Something like execting constructor with  overridden this (ie Component.prototype.constructor.call(otherThis). But we cant do it with ES6 classes.\nI could see 2 ways:\n 1. Use something like \"sandbox\", lots of proxies, to be able to hydrate and rehydrate any function call. Ie being able to call a constructor, get parse out of a new class, and use it in a new function. Probably this is a dead end.\n 2. Use babel to split constructor into lines, and then being able to rehydrate not the property result, but creation itself.\nie\n```js\nconst constructionLines = () => ({\n  data: [],\n  push(a){\n    this.data.push(a);\n    a();\n  }\n});\nclass SomeForm extends React.Component {\n   constructor() {\n      super()\n      this._constructionLines =  constructionLines();\n      this._constructionLines.push(() => this.state = { login: '' }))\n      this._constructionLines.push(() => this.handle = handle(this))\n  if (module.hot) {\n     module.hot.accept('./universal-handler', () => {\n        this.handle = handle(this)\n     })\n  }\n\n}\n```\nThe \"problem\" - we should not update ALL the properties in constructor, especially state.\nCalling for a babel Jedi!. May be I am should not try to solve this, as we solved this problem before\n - before: create a new class, and pick change we want to pick from it\n - after: apply contruction function to the current class, and restore changes we dont want to lose.\nThe second approach sounds much more doable, but still - constructors are not \"repeatable\"(in ES6), and something have to move everything off constructor, to another function.\nThe main problem still the same - we have to get string, and execute in the scope of a current component, or HOC will not work.\n```js\nclass SomeForm extends React.Component {\n   constructor() {\n      super()\n      this._constructorBody();\n   }\n  __constructorBody() { //just extract everything from constructor! (or duplicate)\n      this.state = { login: '' }\n      this.handle = handle(this);\n    }\n}\n```\nStill calling for a babel Jedi!. The problem is that there is no such thing are hot-reloading in javascript, and we have to emulate it.. Going first to \"fix\" RHL, \"back to 4.1.2\" behavior (just dont fall), then - implement a new way to update component properties.. Yeah, that was a basic update. Unfortunately, RHL does not contain any context related tests, as long enzyme still does not support them, as result some bugs exists.\nSo - the fix for your problem is almost ready - https://github.com/gaearon/react-hot-loader/pull/983. @Cottin - click on f and try to figure out that is it. This is not Context, just something with context.\nAnd that \"something\" got required before hot-loader.. @NervosaX - changes are already in master. I need to fix #1001 and then will release a new version.\nUnfortunately current version contain very nasty, almost buggy, behavior :(. \ud83d\udc4d . Yep, that's a bit controversial. Could we land a commitizen or something similar here? I need something to lint me.. Actually - there is a non RHL specific way to compare types (but a bit \ud83d\udca9)\njs\nelement.type = React.children.only({$$typeof: REACT_ELEMENT_TYPE, type: Component}).type\nI am just looking for a way, we could provide for a library creators. The ones who could not use any methods RHL could provide.. Please provide code to reproduce. As far I know - you can not get some modules updated, but reconcilation should not fail.\nIf you are unable to provide some code - could you try to trace the bug by yourself? I need just a call stack, to find how calling to a render function could break hot update.\nThere is 2 possibilities - something wrong with render, something wrong with class update, and RHL breaking your components.\nBoth sounds \ud83d\udca9, and lets try to fix them!. fixed in v4.3.0. \ud83e\udd37\u200d\u2642\ufe0f\ud83d\ude2d\nPlease share any code to reproduce a bug. \nDifference between 4.2 and 4.3 is quite narrow - 4.2 is updating all functions, while 4.3 - only with \u201cthis\u201d inside. \nIt should not reintroduce the problem. . https://github.com/gaearon/react-hot-loader/issues/995#issuecomment-395059652 \ud83e\udd37\u200d\u2642\ufe0f. I am undestanding what you are talking about. Currently hot loader could not bypass any memoization, as long it's goal is to preserve values.\nThere are some ideas how to fix it, add componentDidHotUpdate for example, but they all does not exists yet.\nCurrently you can chose what you want to get - component not updated, or state loss. Probably, in your case, state loss is preferred.\nUse new cold method from react-hot-loader to disable RHL for a specific component.\nThat will fix \"not updating\" issue, but will lead to tree branch unmount/mount on HRM event.. Could you provide an example?. Ok, so when it is working, and when - is not?\nEverything seems to be ok-ish.. What do you call \"state\"?. Changing the state will never trigger hot-reload, only changes in source files.\nMore of it - if you change state the state(default state, for example) in sources files - it will not be reflected on the page, as long RHL preservers the state.. I need some demo to reproduce on source of the file with error. It sounds like a our babel plugin, but I dont have any example with DLL stuff.. I reckon - this is the root cause - https://github.com/gaearon/react-hot-loader/pull/975\nCould anybody provide some text around the problem line? More about who is requiring the file with issue.. Look like there is nothing to fix here.. RHL got componentDidCatch on the top level, and could display error overlay, in case of error.\nBut would do it, if only someone specify errorReporter. Meanwhile you can't do it with hot decorator.\n@neoziro - maybe you could recall more about it. Look like we \n 1) better not use logger.error, but console.error, to always display problems\n 2) or even remove it at all, as long it probably should not be active not in \"update\" phase.. https://github.com/gaearon/react-hot-loader/blob/master/src/AppContainer.dev.js#L36 - it will always catch all errors.\nAnd swallow them.. Yep, should be fine. Need a bigger example to play with.. Working on this just now. Should be done among rest of maintenance work quite shortly.. Yeah, sorry but right now RHL does not update objects, like state or .... style. Nor objects, nor arrays - only simple fields and functions.\nThis is tracked by #840 and planned to be fixed in a short terms.\nit is just not super safe to fix it, as long it could break way more cases than fix.. Look like your problem got solved.. version next or 4.2.+?. React-Hot-Loader is not adding a new class properties on the fly.. - A new \u2744\ufe0f API - just cold, in the opposite of hot.\n- hook inside reactHotLoader.register(babelPlugin) to cool components by file patterns.. @ljharb - by default all your components could be changed and hot-reloaded, and all thirdparty could not be changed, and thus we probably shall disable RHL for them, to lower side effects (type comparison, for example).\nAs result cold API gives your ability to \"cold\" components you \"know\" and get reference, and \"cold\" anything else by file mask.\nThe only problem - it will not work out of the box, cos 99% babel setups excludes node_modules.. I am just not activating this untested feature out of the box, yet. And that is ok, as long it does not change the default RHL behavior.. fixed in v4.3.0. What it the problem with this?\nI mean - internally RHL is doing almost the same - https://github.com/gaearon/react-hot-loader/blob/master/src/hot.dev.js#L42\nmodule.hot is not our API, and we have to power over it.. Got the point. Let first double check webpack code, as long it probably should allow more than one status handler. . Never too late \ud83d\udc4d . As far webpack were \"right\" - that we are waiting for?\nLinks to electron forge?. This is more about #978\nSorry - there is no cure yet, except moving \"that\" off constructor, away from RHL hands.\nCould you please provide the your code, as long reselect usually used in a component constructor.. Yeah, \"class properties\" are created inside constructor. So this supposed to fail.\nMeanwhile - it should not break all the things. \nTry/Catch around regeneration code will solve the problem.. @balciseri  - initialize in componentWillMount. Not 16.3 very compatible, but will temporary fix the problem.\nGonna fix this in the next release. Related - #978. I think - its time to create a separate TS documentation file, with more deeper explanations, as long - we have got tooooo many variants.. allowSyntheticDefaultImports does not change the way code got generated.\nI thing we have to make a pause, and outline all possible way to handle TS, more examples to test, and all caveats found.. merged as a part of another PR. Yes, this is expected behavior.\nFirst RHL renders component to understand it, next React can render it without state loss.\nSometimes it could be renderer even trice.. Yeah, babel7 is still beta :(. it is out magic stuff, and it should not trigger warnings like this.\nCurrently we are looking to another setup, there ts-check is disabled for \"compiler\" itself, and running as a separate task - https://github.com/gaearon/react-hot-loader/pull/996. Probably there is no way fix it, as long RHL should not be applied to this library at all, as long this is not \"React\", just mimicking some interfaces.\n\"Cold\" components (https://github.com/gaearon/react-hot-loader/pull/992) should fix it completely, by disabling RHL for this library.\n. class ScatterplotLayer extends Layer while Layer extends React.Component\nI have no idea why you example is failing :(. Probably fixed in v4.3.0\nAnyway - could be fixed by \"cold api\", also in 4.3.0. Then, I need some example to play with.. Just give me an example to reproduce the error, or open a PR with a failing test.. Look like it is impossible to properly \"hot\" update class, and even heavy babel magic will not work.\nWe should not try to find a way to fix the problem, which does not exists.\nThe right way:\n1. Create a new class\n2. Copy state and all variables you have to keep from old component to  the new one\n3. Switch to the new component.\nNot the change current component, but adopt a new one\nThis require a one line change in React-Fiber - https://github.com/facebook/react/blob/dd5fad29616f706f484938663e93aaadd2a5e594/packages/react-reconciler/src/ReactChildFiber.js#L375\nThe similar changes as (not yet) was made to Preact  - https://github.com/developit/preact/pull/1120\n. fixed in v4.3.0. To be more concrete - this issue is NOT CLOSED.\nThis issue addresses the problem when class methods should not be updated, or this action would break your code - as a result, some methods will not be updated, while and could, and should.\nToday this leads to partial incompatibility with React-Redux v6.. Sorry, example was created before we made some changes into Parcel, and we forget to remove comment later.\nReadme is correct.. beta.7 was not the last v3 version, and version 4 was released a half year ago.\nJust move to v4.. So, it's up Sucrase.. Sorry, my psy abilities are not so strong.\nCould you provide a bit more context, source code, error as it is, and so on.. Look like the problem is Babel loader or Babel core. \nPlease delete Babel-core, you probably don\u2019t need it, and update Babel-loader. . Look like the problem is babel 5\n\"babel-core\": \"^5.8.38\", <-----\n\"babel-loader\": \"^6.4.1\", <-----\nPlease use babel-core: 6X, and babel loader 7X\nAll our tests are using\n\"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\nThat is not the \"latest\" versions, but quite fresh.. Duplicate of #1039. Do you might need before and after hooks?\nProbably you need only before.\nProbably it should be placed inside updateInstances to be more \"not only webpack\" compliant.\nIn case then you want to land a peace for webpack HMR I would propose another build\n```js\n\nApp.js\n// addStatusHandler does not \"accept\" the changes, but could \"observe\"\nmodule.hot.addStatusHandler(status => { do-whatever-you-want });\nexport default App;\nAppImporter.js\nimport App from './App';\n// HMR will be accepted and stopped here\nexport default hot(App);\nindex.js\nimport App from './AppImporter.js'\n```\n\nor, you can use anther \"hack\", by creating anther parent for App.js, which could observe the changes.\n```js\n\nobserver.js\nimport './App';  // you are another parent module for the App.js.\n\nmodule.hot.addStatusHandler(status => { do-whatever-you-want });\nmodule.hot.accept(); //you have to accept the change\n``. Also please double check will just a \"file structure\" solution work for you.. Glad that you are problem got solved.\nLets pause, but not close, this PR for a while - it should be a bit rethinked before the merge, as long we will not be able to revert published change. . \ud83c\udf1a\ud83d\ude34. Thanks! I forget that Preact could do it.. v4.3.1. No tests \ud83d\ude2d\nThings like this should be covered by tests, to not to be suddenly broken in the future.. \ud83d\udc4d . @taion - ok to merge? Is this the only change you need?. It sounds to be correct. Anyway - I should not break anything.. v 4.3.1. So that is not a bug. But I have no idea why both application got rendered.\nAnd there is no thing like \"I've updated only one component\" - you are updating everything \"below\"hot`.\nI honestly thought that \"hot-reloading\" of application should take maximum 2x time from normal render, and thus be blinking fast.\nAnd, during the hot update, RHL will forcely render components 2 or more times, just to detect possible changes.\nSo - everything here, except secondary Application re-render is not a bug, and even not bound to RHL, cos the \"size\" of update comes from webpack.. >Yeah, if it's not a bug, it's still an insane performance hit. This is what happens when I change just the width of a div in one component in my current project:\nBut that will update ALL components below hot. Or just all, if you have a single hot.\n\nIs there anyway to get around this performance problem?\n\nAbout this behavior - no. About performance problem - might be.\n\nEach additional one creates an additional call to render.\n\nThat's the deal! Please activate debug mode ( setConfig({ logLevel: 'debug' }) )\nRHL render application once, and then React render it. Total - 2 renders.\nIf some part of application were not renderer by RHL, but then React renders them... RHL renders branch again. Like a oh, crap, I did I miss it....\nOur way to handle portals and some edge cases. In terms of RHL this called subrender.\nI wonder - might be the \"main\" render was not successful, due to an exception, and thus subrenders took a place?. > react-hot-loader.development.js:168 React-hot-loader: a withState(WithStyles(Charts)) was found where a Component was expected.\nIs a fatal bug, not a warning :). RHL will not dive into the HOC, but will \"force update\" all components before.\nProbably there is some problem with displayName as long Component is \"name-less\" component.\nCould you stop at the line, where that error emitted, and send me details.\nhttps://github.com/gaearon/react-hot-loader/blob/master/src/reconciler/hotReplacementRender.js#L407\nI need childType and stackChild.type. They are not swappable as long got different names, but are they actually the same, or RHL \"render\" process go wrong?. Currently, RHL could work \"strangely\" if you add or remove components on the fly, as long \"new\" and \"old\" tree will be different.\nI should investigate this situation.. Don't know yet.\nIt should be:\n1. Ok\n2. Way faster than webpack part of the work.\nI am more concerned about secondary application render, and your HOC behaviour.. Something inside your application is breaking RHL. Could you try enable debug and look for errors?. \ud83d\udc4d . This is function actually a function of your component, or it should not be reloaded at all?\nIe #1001. should be fixed in v4.3.3. \ud83d\udc4d . Couldn't guest anything without example, sorry.. The root issue is here - https://github.com/JavoByte/react-koa-boilerplate/blob/master/src/shared/Routes/Routes.jsx#L7\nReact-loadable is not React-Hot-Loader compatible. As long you async load pages/Home you have to accept it manually.\nThe easiest way to fix the issue - wrap with hot exports of /pages, so they will be able to hot-reload themselves.. Yes, you are right.\nA lot of companies are thinking about dropping IE11, as long it is old and almost not used. And no one is considering IE10 as a browser nowadays. . But it is not hard to make RHL \"syntax correct\" for IE10. React-Hot-Loader v3 actually includes polyfill for WeakMaps, it's just a 10 lines of code.\nBut, if you are ok with importing babel-polyfill - go for it!. It's... deprecated. You wont be able to \"fix\" it, as long react-hot-loader import itself ontop of everything.\nThe only thing I could do (and it's partially done) - disable RHL, and not \"require\" it, if weakmaps are not supported - https://github.com/gaearon/react-hot-loader/blob/master/index.js#L11. Could you measure your optimism in terms of should we continue our efforts to improve the RHL way to hot-reload or it would become obsolete... more sooner than later?\nIn my current vision - RHL is a super complex thing, and we should stop moving it that direction, should stop fighting with React, and try to teamup, as we tried with Preact.\nReact-Hot-Loader was started as a preserver of Component's type equality, to fool reconciler from the outside. And that is something not letting us moving forward.\nNot \"fooling reconciler\", but \"outside\". \nAnd that is something RHL could not without your help. And that is something, that will sunset it.. > Extracting behavior from the fresh version into the wrapper and transplanting it\nThis is what we are currently doing, and this is what we could not solve.\nInitially we had only class.methods, and it is easy to inject a new ones into the prototype.\nNext  - \"bound\" methods. Ok - just \"bind\" them again\nNext - arrow functions - cast them toString, and eval back (a did not found another solution)\nBut when someone will create a new class member using factory function(per-instance-memoization, so popular after _ componentWillReceiveProps_ deprecation, is a good example) - there is no way to repeat it, and preserve possible used this - you have to fight with JS, you have to fight with Babel.\nThe easiest way - extract constructor body to another function, to be able to replay ES6 constructor for custom this. I am not sure that is the right way.\nThe simplest way - create a new instance how it should be, and copy some known methods from old instances. Reverse operation. And then explain React that new type is the same as an old one. It will also solve \".type !== Component\".\nMight be it is better to store variables we want to preserve, call extracted constructor on the current component, and restore variables back, as long that's a goal - it will keep refs, but still makes .type !== Component a thing.\nThe current version could solve almost any code from \"last year\", but as long React evolves - new coding patterns emerges, and as RHL failed to support Arrow functions in V3 - it is failing to support fabricated methods in V4.\nWe have to found a bit more durable solution.. Its almost 16.6 compatible, I just need to make lazy a bit hotter.\nAnd it will be 16.7 compatible, if https://github.com/reactjs/rfcs/pull/74 would succeed.\nWith hooks we would just be free from some issues, some side effects, and so on.\nThe \u201chot replacement\u201d stuff should be managed by something anyway.. Since version 4.6.0 we are \"inside\" React, and one may|shall use hooks - this would cure the problem.. Hey! Could you send a PR to fix it in our repo?. Does it work without React-Hot-Loader?. @sibelius - it depends. If you are using webpack-dev-server or serve - you need only --hot option.\nUse HotModuleReplacementPlugin only if you are doing \"your own\" service, or you will break HMR.\nAnd there is no public API to find out what was reloaded, as far I know. Nor in RHL, nor in webpack, parcel or Electron.. So you actually changed a single file, but nobody accept that change. Then - its parent got changed, but nobody accept that change, until hot will accept the change for Application.js.\nAfter it - everything below that point should be updated.\nIn reality, it should update only files related to the change-event propagation, so something is wrong with that propagation, might be cycles.\nYou can try to debug webpack internals in terms of finding how it generates and fills the \"update modules list\". You can found corresponding code at https://github.com/webpack/webpack/blob/master/lib/HotModuleReplacement.runtime.js#L375 (and to the end of a file). Looking great, but many people will refuse to use beta babel 7.\nProbably one should leave some message about it, as long default package install will bring babel 6.. I have no idea when it will be done, so lets try just some notes in README. All good, sorry just busy a bit in real world.. I've found that some TS people do not like babel. They could be ok-ish to add babel as a webpack loader, but dont want to replace TS by babel as a whole.\nLet me move old readme to a separate file, and point it for all non-babel-7 customers.. @faceyspacey - you isHMR function is broken! Not sure for how do you use it, but module.hot.status is not a thing if you are in node_modules.\nRight now the best way to handle HMR + RHL is to call import function in a component constructor. Not to set any states, or update some stuff - just call import, to execute a module's body and \"hook into\" RHL component registry.. @neoziro - what do you think about greenkeeper?. @mkg0 - that you for keeping us up to date!. I've found this issue then run RHL without babel plugin, and we definitely have one more big problem, probably with Context. . The problem - hot reloading is not \"complete\", a few things left unreplaced.\nBut usually that is about \"unchanged\" parts, so should be fine for you, and couldn't fight with them from our side yet.. In short - we are not reflecting some changes made in class constructors.. @dminkovsky - that is a problem, and we have an issue to track it - #1024. That's not a real error. Just the way RHL treat text nodes, and the way React doing it - is a bit different.\nThe problem here is a bit different - React-Hot-Loader ignores non-children-based component trees. Content, Author and Time in this case.\nIt actually might( not should ) lead just to internal component's state loss, but not to problems with re-rendering.\nI am afraid, but we don't a single test for cases like this.\nI'll take a look on your example.. I just found that there is no simple way to disable this error, and the only way is to set wrong logLevel.\njs\nimport {setConfig} from 'react-hot-loader';\nsetConfig({logLevel: 'no-errors-please'});\nI will look into the code, look like I could just suspend those errors, if unprocessed part of a tree does not contain any components, thus that's not a bit deal to no process it.. @daviddelusenet - does this error lead to a real Error, or just trashing your console?. @probablyup - \ud83e\udd47 \ud83d\udcaf \ud83d\ude4c React.forwardRef! That's the problem!\nNot I know that to fix.. - Error, listed in Issue - still could be present. The only way to fix it - use react-dom patches, and let react-dom do the job. So you can fix it.\n\nError due to \"styled-components\", ie forwardRef - fixed.. So easy :). > the react-hot-loader footer tried to look at process.env\n\nWhich footer? RHL access process only in it's internals, and you are unable to define your own process there.. I am seeing webpack loader as a good help for cold api in terms of freezing node_modules. \nMeanwhile, I am already working on this (just pushed current state), and look like it's not a quite helpfull - it \"registers\" only module exports, and some stuff, like StyledComponent with class constructed inside a function, could not be handled by webpack loader.\nMeanwhile - we failed to migrate to babel 7 in our own work projects, and still stuck with TS-loader, waiting for all peers to update first (even RHL itself is not babel7 compatible yet).\nSo \n - webpack-loader\n - plus #1047 in form of refreshing the page, if some updates could not be done (and without babel patches it's the case)\nWill do the job. Could be React 15 portals. They are breaking normal update processing, but should still be more or less good. \nThings to try - decipher error messages. RHL is showing what it should be rendered, and the really. Try to find such place in your application.\n(The last part is breadcrumbs - so just 6 elements from the top). Portals would be fixed by https://github.com/reactjs/rfcs/pull/74, if it ever got implemented.\nwebpack stuff was more or less finished a month ago, but not yet merged.. 4.6.0 with webpack and controlled type comparison went out. Babel plugin would inject special member to update class methods, while webpack would do nothing.\nSo - using only webpack plugin you will be unable to update non-prototype-based methods, especally the arrow functions, or any other \"bind\"ed callbacks. \n```js\nclass MyComponent extends React.Component {\n variable=1;// this can\n onClick = () => this.setState() // this can NOT\nrender() { // this can\n}\n``. Mee to :). Webpack-loader is restored.. That's super interesting!. React-Hot-Loader v4 does not support React14.\nNew RHL == New React. Version 15 at least.. It will not work. Let me explain.\n1. It breaks becausestack.children.push(childStack);` is not defined.\nWhy it is not defined?\n```js\nfunction hydrateLegacyStack(node, stack) {\n  if (node._currentElement) {\n    pushState(stack, node._currentElement.type, node._instance || stack)\n    // ^^^ cos this path was not executed\n  }\nif (node._renderedComponent) {\n    const childStack = {} // <--- and \"stack\" is an empty object\n``\nSo - you are fixing runtime error, butstack` keeps being an empty object.\nI've opened a PR, which adds children to the stack, not ignoring them as you propose. And that reveal another problem - hotReplacementRender(or \"ReactHotLoader v4\") ignores objects without type set, as long have to idea how to \"render\" them,  while stack has only children or even nothing, in your case.\nIn short - React-Hot-Loader v4 is NOT working for React 14. If it works for you - then React-Hot-Loader v3 works for you, but everything that distinguishes v4 from v3 - does not.\nFor old stuff, like webpack 1 or React 14 you should use older versions of RHL, which does not rely on React15/16 internals, as RHL v4 does.. Not React15, but React14, which we do not support.. I've got no plans of migrating to babel 7 while it is in beta.\nMeanwhile, all the changes to make RHL's babel plugin be babel 7 compatible were made, and one could already use them in a pair, to provision TypeScript, for example.\nFor Rect-Hot-Loader customer devDependencies means nothing.. @SamMorrowDrums - I've checked - babel7 did not changed visitor API. Something is wrong with your configuration.. Babel 7 rc just got released. Reopening the ticket.. Working on this right now as a part of TS hot-reloading.. @petermikitsh - I could not spot any issues using react-hot-loader with babel 7. Could you shed some light, and share some errors?\nI am using configuration from this PR updated to use rc-1, and everything is ok-ish.. @thcolin - and only with RHL enabled? Have you updated babel loader to match version 7?\nYou can also use yarn resolutions to force babel-core to point to version 7 bridge, \"fixing\" all the not yet migrated tools.\nI am afraid, but there is nothing we could fix on our side.. Mmmmm. Look like Babel 7 is a bit more immutable, and RHL's attempt to store some variables in the nodes does not work.\nBasically\njs\nnode[REGISTRATIONS] = [];\n...\npath.parent[REGISTRATIONS].push(buildRegistration({ // no longer works. @loganfsmyth - good idea. Just dropped a new message on slack.. This issue is probably fixed in v4.3.7. Probably, as long all my examples worked well all this time, and no one reported their babel configuration to reproduce.\nSo - could you give a try to a new version?. \ud83d\ude3fwhy it does work for me :(\ncould anybody share a broken example?. gist/another repo/codesandbox? Or you are speaking about real unit test?. We have some tests for babel plugin, not sure they are covering this case.\nMeanwhile - could any of you just replace your node_modules/react-hot-loader/dist/babel.development.js by this file\nThis one definitely \ud83e\udd1eshould work, but lets double check it first. Example in gist uses nested tree traversal, and the \u201clost\u201d variable is just a local variable in a function scope.\nNot sure how this approach affects performance, but at least it works. \nAnyway - still keen to see a broken example, to prevent this sort of issue in the future.\nI will double check the last solution and ship an update (in my) tomorrow. So - what's the best way to fix it - don't clear registration or use the other way to structure plugin, as I did in the last PR.. So - does this issue is not related to Babel 7, but to babel-plugin-rewire?\n\nWhy not to use jest, rewiremock, proxyquire, mockery or td instead?. v4.3.8 probably fixes this. If not - then we have #1064, which definitely would solve the problem.. Just give an example to reproduce. As long I don't have this problem - I could not fix it.\nPS: Sometimes wiping yarn/package lock fixes everything.. https://github.com/gaearon/react-hot-loader/blob/gh-pages/getstarted.md\nSpecial branch for github pages.. Sorry, I missed this PR. Looking into now.. I couldn't accept your PR right now, as long module.hot is something RHL is rely on.\nIt used to determine that hot updates are supported, and it used to actually update the code inside hot function - https://github.com/gaearon/react-hot-loader/blob/master/src/hot.dev.js#L36\n\nI didn't clearly remember how actually HMR works in Electron, look like it just updates everything, but your change might be a breaking change for someone, and we better search for a more accurate variables presented in electron.\n(could you double check solution from https://github.com/gaearon/react-hot-loader/pull/994 ?). Probably - we could inverse condition - if you are in dev - use dev, in all other cases - prod.. React-Hot-Loader is not changing the past. It preserves the component's past, including component's state, or lifecycle methods.\ndefaultProps are used in the component constructor, but the component is already constructed.\nWe thought about better detection of the situations we can't or won't reproduce, and then perform some action, to actually reflect the changes made. But not sure how to do it actually.. Actually - this is something I want to do. Blaming RHL creators, myself included, every time I hit the wall, and have to manually refresh the page.. Nope. We are here to preserve state (and other information), not to update everything.. RHL does not control, and, from some point of view, could not control defaultProps. Right now the only way is to hook into createElement and override the current mechanism, not sure it's a good idea, as long as that moment is about to change - see https://github.com/reactjs/rfcs/pull/107. But how to run this example?. The problem\n - \"react-hot-loader\", aka \"patch.js\" is working in development mode\n - \"react-hot-loader\", aka \"index.js\", is working in production mode.\ncold is not working, as long cold does nothing in production.\nI reckon this is due to Dll plugin - RHL partially got compiled in a wrong environment.\n. That's not a bug - that's a feature of RHL v4.\nRHL's babel plugin was not extended to your node_modules directory, thus RHL has no power upon classes defined there.\nMeanwhile - everything is working, RHL just reporting that it could not do some replacements, but they are not needed for redux.\nYou can ignore this message(change logLevel), or remove it using cold API (but I have another issue related to it, so wait a bit before use). @shahzaibkhalid - should work if pre-connected part exists as a separate variable. That's also a good idea for better testing.\nThis root cause of this issue soon will be resolved - #1138 . Would be fixed in react-redux v6.0.1 - https://github.com/reduxjs/react-redux/pull/1168. Oh, that doesn't sounds good.\nRHL could merge components, but they have to have the same names, and almost identical content.. This is super cool stuff -  you found big \ud83d\udca9!\nReact-Hot-Loader has a special thing, called hot replacement render, which tries to update component when it did not update them before.\nIn case of code splitting - unused code path was not updated, and by changing the route you are kicking RHL into this \"hot-render\" mode.\nDuring that render it will find a new component, which is just slightly different from the old one - contains A, not B. But the name will be the same.\nAnd then it will do it's job - hot update stuff.\nProblems here:\n - attempt to hot-update something out of HRM phase.\n - attempt to swap \"registered\" components by the mechanism created for \"not-registered\"(internal)\nThank you for this bug.\n. Released in 4.3.5. (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b). Looking good and logical. We have similar logic in proxy module, for the cases like this.\nLet me just double check all the things, but in my tomorrow.. Sorry mate, my Cerebro device is broken and I could not read you mind clearly.. It sounds like reactive problem. When you are changing something in mobx store your React components dont get updated. Nobody tells them that they should update.\nThis is not something RHL could or should do - this is more about more generic Hot Module Replacement - you should module.hot.accept changes of your store, and do something to propagate information about the change to the React-MobX connector.\nBetter check mobx documentation around HMR.. Something like https://github.com/mobxjs/mobx-state-tree/issues/372\nBy fact it is still not quite well documented.. Or this - https://github.com/mobxjs/mobx/issues/254. According to the code - babel prop plugin does nothing. Literally nothing. And the problem is not inside index.js file, you used as example, but - babel.js.\nCondition is the same - \njs\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/babel.production.min.js');\n} else {\n  module.exports = require('./dist/babel.development.js');\n}\nHere NODE_ENV should be a real env variable, not a webpack constant.. I know. Unfortunately author deleted the example. I am going to create rewired plugin for RHL to close RHL+CRA topic.. Look like App is a right name then.. Rest in peace, friend of Michael \u2620\ufe0f. Code in this PR confirmed to work well. Code in the master branch confirmed to have the same issues as before. And all examples I\u2019ve got - working for any version. . We went another way.. You have to wrap App with you hot hoc. ie\njs\nexport default hot(module)(withRouter( connect(mapStateToProps,mapActionToProp)(App))); . Em, no - this is standard global variable for webpack or nodejs enviroment. I am not sure why webpack environment is not a thing, but you can use nodejs.\nThis is how angular solved this issue\nAdd the necessary types to  src/tsconfig.app.json\njson\n{\n  ...\n  \"compilerOptions\": {\n    ...\n    \"types\": [\"node\"]   <----\n  },\n}\nThat's all.\nOr you can define global by yourself, or add // @ts-ignore before this construction to swallow error.\nBut there is nothing RHL could do itself.. Quite interesting approach. It would be great if you will provide any example to play with.\nOptionally - could you show the code for defaultProps?\nI am almost absolutely sure about two things:\n1. There is at least one error inside RHL react tree traversal\n2. It's 99.9% error proof.\nProbably here problem is with components displayName - it could be different for rendered and not-yet rendered components - you may set a break point in the place where we are comparing old and new type and double check \"how\" they are different in real.. Ok, look like the problem is about seeing \"LoadingComponent\" in React tree, while a \"target\" component has been rendered by fact. Somehow similar to #1050\nThis happens cos RHL is \"always enabled\" and trying to did it's job even without actual \"HMR\" event.\nRight now there is no way you can solve this issue (this is not a real issue) - probably just suppress warning. Everything should work - it just reporting about situation it could not handle, and shall not handle.. 1. Please dont wrap anything with hot without special need\n2. disable logging (actually look like you enabled it)\njs\n import {setConfig} from 'react-hot-loader';\nsetConfig({logLevel: 'error'}); // and this is default value!. Try to find the origin of [HMR]  - undefined and find why it is undefined. There is no way to create a module without id - something could be very broken. https://github.com/gaearon/react-deep-force-update/issues/13. Remove react-deep-force-update from your yarn.lock or package.lock files, and then reinstall packages.\nLatest version with fixed behavior should be installed automatically as long it's a patch change.. Better - use RHL v4. It's a drop in replace. setPrototypeOf is supported by IE11 and ReactHotLoader could not work without it. You can use babel-polyfills or core-js to have this method on unsupported browsers.. Also - we are looking forward to disable RHL for systems it could not handle by any reason(#917). Anyway - the only thing I could do - disable RHL at all for the not supported systems.. Ok. It's actually a 3 lines in https://github.com/gaearon/react-hot-loader/blob/master/index.js - test that setPrototypeOf exists and eval is supported - by my today is over. See you tomorrow :). PR has been drafted. Next version of RHL will include production, not development build if env does not met required conditions - for example due to browser version or CSP. I am not sure why our plugin causes this issue, but having 2 different version of React - is the issue.\nForce module resolution to a single version - https://github.com/gaearon/react-hot-loader/blob/master/examples/all-possible-containers/webpack.config.js#L54\njs\nresolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx'],\n    alias: {\n      react: path.resolve(path.join(__dirname, './node_modules/react')),\n      'object-assign': path.resolve(\n        path.join(__dirname, './node_modules/object-assign'),\n      ),\n    },\n  },. \ud83d\udca9hot fixed in 4.3.11. \ud83d\udca9hot fixed in 4.3.11. I've added. Just enable hot in webpack-dev-server and dont do anything else.\nAs long noone will module.hot.accept your changes - page will be reloaded.. You are using a few tricky babel plugins, which \"should be enabled only in production\". \nTo be more concrete - https://babeljs.io/docs/en/next/babel-plugin-transform-react-inline-elements - inlines React.createElement, as result RHL could not override it.. Try react-uid for key generation.. Sorry, but you have got issue with webpack Hot Module Replacement, not with React-Hot-Loader, for which you have enabled this feature.\nWe cannot help you.\nPS: and demo would be required, as long usually this stuff just works.. Yeah - it would be great to have a demo.\nAccording to your logs - RHL just didn't setup a new module.hot.accept, and that's strange.. So - this is actually 3 different things:\n1. ErrorBoundary in AppContainer is doing nothing (unless you set errorReporter), as result - if any error took a place - \ud83d\udca5 , see #811. Probably we need provide some build-in ErrorBoundary.\n2. In this case, after fixing error inside react - everything got broken, as long Application will receive two HMR updated - with error, and without error. Fix - increase timeout in hoc to receive all possible updates.\n3. In case of error out of react code - it will took a place during module execution, and new hot will not be called, and next updates would not be accepted. Patch here is possible, but will require some severe changes in API.\nOnly .3 is a problem. Here is the proposal how to solve it:\n1. add import 'react-hot-loader/hot' in the beginning of a file.\n2. react-hot-loader/hot would delete itself from a webpack  cache(__webpack_require__.c)\n3. setup hot for the parent - __webpack_require__.c[module.parents[0]].hot.accept) using the same hot RHL provides for everyone.\n4. Profit - as long it's a first import - it would be executed in all the cases.. Sorry, trying to solve React 16.6 and 16.7 issues first. \nAnyway - a lot of fixes will be released soon.. js\nimport {hot} from 'react-hot-loader/root'\n...\nexport default hot(MyComponent);// A DIFFERENT API CALL HERE!!\nwould solve the problem. They would not help, as long we have to patch every class in your codebase, and you dont want to wrap them all with macro :). Probably we could ship your babel plugin as our prod version of babel plugin, which, right now, is doing nothing.. That's sounds a bit crazy. How many hot calls you have got?. react-hot-loader in prod is just a few bytes. And a dozen kb in dev mode.\nCould you generate webpack stats (ie bundle-analizer) to double check the \"real\" difference. Or, disable module concatenation, and double check it is a real driver of bundle size change.\nThe difference is too huge.. Anyway - removing side-effect is still a good thing.. Amazing! Just amazing!. Gonna handle this and another pending PRs on weekends.. Released in 4.3.12. The best way is just to deprecate AppContainer. \nBut both code examples are doing the same - updates everything from the current module and \"below\".. hot is AppContainer + HMR + some stuff around.. @zhangwilling - then something is wrong with our module system, it's working in an unpredicted way. React-Hot-Loader is trying to get parent of react-hot-loader/root, ie your module, you are importing root from, but something is not working.\nCould you shed some light on your build tools?. There is no need of real demo. Let's look into root.js\n```js\n  var hot = require('./index').hot\n  var cache = require.cache\n  // ^ this would be something like webpack_require.cache\nvar parent = cache[module.parents[0]]\n  // parents should be an array, with a single element, and that element should be \"your\" module\n  // THIS parent is undefined. The question is why - wrong data in parents or cache?\ndelete cache[module.id]\nexports.hot = hot(Object.assign({ id: parent.i }, parent))\n  // ^^  it dies here\n```. Sorry, I am going to close this issue and not properly filled. There is no valuable information, about what does mean \"style\" for you, and how they works for you.\nStyled components usually works (this is our job), webpack style-loader also works (but this is already webpack HMR in work). But there are too many combination to reason about all of them.. \ud83d\udc4d . Levenshtein should be O(n) on the similar texts, and could increase complexity, as difference grew. But it should be a super small on hot update.\nI could not disable it, as long it would lead to false positive replaces, but you can mitigate the problem by \"registering\" component - babel plugin does it for \"top level\" variables.\nIs your component defined on a top level?. That's not about module structure, only about you ability to \"export\" some component from a file.\n```js\n//anyFile.js\n// module top level variable\nconst iAmOnTopLevel = () => aha;\n// component would be created inside HOC, ie not \"top level\". \nconst likeAHOC = (Component) => () => and this one is hidden inside\nLevenshtein tests is applied only for that \"hidden\" inside another functions components. Should be called veeeery rarely.. As long it is not __created__ inside HOC, but would be a given some props by HOC - just extract class declaration outside of connect, and call it a dayjs\n// a top level variable!\nclass GlobalNavigation extends React.Component {\n      // ...\n }\nexport default withRouter(\n  connect(state => ({\n    loginSessionState: state.loginSession,\n    feeds: state.feeds.models\n  }))(GlobalNavigation));\n``. Sound like it's time to reconsider this moment. I'll try to use another algo, as long as I dont need a reallevenshteinhere - just some (short) distance metric. Yes. RHL is 100% not compatible with hooks. There is just a few reasons behind it:\n- SFC are being converted to Class components. There is reason - to be able toforceUpdate` on HMR, as long there is no \"update\" method on SFC. I am looking for other way of forcing the update (like this. So RHL is killing SFC.\n\n\"hotReplacementRender\". RHL is trying to do React's job, and render the old and the new app, to merge them. So, obviously, that's broken now.\n\nI am going to draft a PR, to mitigate both problems. It will work, but not today.. Next version of RHL, with 16.6 support will add memo and lazy support, and thus break this \"fix\".\n\nRight now memo-ed components are invisible to RHL, as long they are not functions, but objects.. There is a more proper fix, which would work my better and ever after - cold API\n\nYou may disable RHL for any custom type.\njs\nimport { cold } from 'react-hot-loader';\ncold(MyComponent);\nor just search for \"useState/useEffect\" inside component source code, and \u2744\ufe0fit.\njs\nimport { setConfig, cold } from 'react-hot-loader'\nsetConfig({\n  onComponentRegister: (type, name, file) =>\n    (String(type).indexOf('useState') > 0 ||  String(type).indexOf('useEffect') > 0) && cold(type),\n})\n. Meanwhile, everything depends on this - https://github.com/reactjs/rfcs/pull/74. Probably pureSFC is a good option. Just\n- don't wrap SFC with hot - top component should be a component to be able to update nested tree on HMR.\n - don't define contextTypes on it (not a problem for hooks)\n- it would probably fail to reconcile updates, and will generate some error in \"hot-render\", and then continue from the next renderable component.\nSo - just don't use \"hidden\" components (ie not exported as a top level variables) - and that would be ok.\nAlso - there could be a problem with force update.. PS: While we found a way to handle hooks, React.memo and lazy is not yet supported\n(https://github.com/gaearon/react-hot-loader/pull/1084). Probably me. I already was used to introduce per-component settings to support React.memo, and the same would work for hooks.\nI'll release a new version tomorrow, with memo and hooks \ud83e\udd1e, but, probably, without React.Lazy support.. Styled-components v4 also reported not to work. One more thing to manage.. v4.5.0(next) solves most of 16.6/16.7 issues and could handle anything if you will got your node_modules processed by our webpack-loader.\nPlease give a try and report back.\nPS: If someone could convert webpack loader to webpack plugin - that would be just great.. You know, @joepie91, I also was not quite happy of this change. As I mentioned is the storybook issue - there is no way to ask user to include a one more webpack-loader to their configuration.\nIt's also not doable with Parcel, Electron, CRA and so on...\nSo I just did a terrible thing (everyone - please blame @joepie91 ) - forked react-dom - https://github.com/hot-loader/react-dom.\nNow you may skip webpack-loader stuff, just amend your configuration to use another react-dom. As far as I know - this would work only with aliases as long as you have to rewire not only your own files, but also node_modules, including react-hot-loader.\n```js\n// webpack.conf\nresolve: {\n    alias: {\n      'react-dom': '@hot-loader/react-dom',\n    .....\n// for parcel add alias field to the package.json\n// not sure about electron\n```\nThis is just a quick spike, currently only for dev version and React-16.7-alpha2 (build is automated, there is no problem to publish more versions, once approach would be proven). Then we got all the cases (except npm) covered. I've updated react-\ud83d\udd25-dom, and included production version, as long @Bnaya hack could not be undone for prod builds.\nthe final configuration could be like:\n1. Add webpack-loader or use special version of react-dom.\n2. Set configuration\n```js\n// hotConf.js. Should be imported before any other React stuff\nimport { setConfig } from 'react-hot-loader'\nimport ReactDOM from 'react-dom';\nsetConfig({\n  // if our patch is present - ignore all SFC\n  ignoreSFC: !!ReactDOM.setHotElementComparator,\n  // set this flag to support SFC if patch is not landed\n  pureSFC: true,\n  // remove side effect on classes, to make react-dev-tools experience better(go-to-source)\n  pureRender: true,\n})\n```\nEverything could work even without webpack-loader/react-hot-dom, but it could be strange experience, like React.memo could be not updated. (useMemo will be not updated in any case)\nIn my tests everything is working. What about you?. React-Hot-Loader is not quite CRA compatible. While we don't have any good solution for CRA - just setConfig({ pureSFC: true });. That's enough for hooks to work (if you are using \"next\" version of RHL). . > Module not found: Error: Can't resolve 'lodash.merge' in \nUse 4.5.1, not 4.5.0\n\nTypeError: aSourceMapConsumer.eachMapping is not a function\n\nSomething is wrong on mine side :( . @aaronjensen - scheduler package is below version 11. \nPossible solutions:\n- ensure that you have react-dom@16.7.0 installed\n- check scheduler version (why it's below)\n- (me) copy dependencies from react-dom to @hot-loader/react-dom - right now they are empty, and that would not work with complicated package resolution.. cold component ... has been updated is ok. You configured to ignore SFC, but they got updated - I just need to ignore this situation if setHotElementComparator is set. I will fix it.\nright now babel(or webpack) plugin is crucial for memo, lazy and forwardRef to work properly. But it should do something even without it.. @aaronjensen - could you shed some light? What(How?) is broken?. @ooloth - is it with 4.5.0+, our you are still on 4.3.x?. I will release an update just when I will figure out what is wrong with @ooloth issue.. Ouch. That explains a lot - it thinks that PageA and PageB is the same component and hot_reload one into another.. 4.5.2 released. All reported issues solved.. \"The same problem\" - one component rendered instead on another? That's critical, and I thought I fixed it... for any component, declared as a top level variable with babel or webpack plugins enabled. Without \"variable registration\" RHL could merge two classes with the same name, and looking the same.\nLook like LoadableComponent, created by one Loadable got merged with another LoadableComponent, created by another. This is how RHL designed to work. I was counting on tree reconciliation on Loadable, not sure why it lead to obsolete fiber element comparison.. So the problem is very simple, and we already fought with it before - the \"hot\" stuff inside react-dom is always active, always ready to hot-update something, even if there is nothing to. 2 loadable components are very similar in real, and should replace each other.\nI will whitelist this logic for a nextTick after the real HMR event, hope it will solve these false-positives.. v4.5.3(or just next) released. False positive merges got fixed, among a set of other problems.\n\ud83e\udd1e release candidate.. \ud83e\udd37\u200d\u2642\ufe0f. 4.6.0 just went out. No longer beta.\nHooks should work out of the box without any setup needed. 1 - look like source-map went frontend way due to fetch polyfill, probably. It's fixed in 0.8.0-beta.0, which I probably shall not use yet. See https://github.com/mozilla/source-map/issues/349\n2 - this error means that you have ignoreSFC: true, but not @hot-loader/react-dom - it should display a message when hot-patches are detected.\n. \"react-dom\" does not support hooks. They are available in alpha-2, or 16.8. @ntucker - you have to specify pureSFC or ignoreSFC option.\nProbably it's time to make one of them default.... @natew - try changing the configuration. RHL is trying to re-render updated application, and that \"custom\" render is not hooks compatible. It was just failing with alpha versions, but it was not a big deal. I didn't test 16.8, and something may change.\njs\nsetConfig({\ndisableHotRenderer: true\n}). The real problem - defineProxyMethods is not cleaning ProxyPrototype from previous \"faked\" methods.. Sorry, this is not the right way to do it.\nThe right way - drop all methods from a current prototype, and recreate it (https://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js#L216). Application, after been hot-reloaded, should represent \"real\" state a close as it possible. If then the application should fail - then it should fail.\nIn the same time, if you had an onClick handler before, in form of arrow class method, and remove it later - there it no way to remove it from an instance, as long as we are not removing any variables, created during the component life-cycle.. Looks good and right. Unfortunately RHL has side effects :(. Released in 4.3.12. Would be fixed in the next major version. Looking much more complex, this time.. Ready to merge?. 4.6.3 should solve the issue.. There is no way to code split something you did not import. And with latest babel plugin updates you will not import RHL in normal use case.\n\nthe latest-latest version it not yet published.. Probably \u2018sideEffects:false\u2019 could help in production, and don\u2019t break anything in dev, as long as Babel plugin injects \u2018require\u2019, which ignores sideEffect prop.. Sorry, but that would not work. \n- react-hot-loader is actually one big side effect. API it exposes just work with side effect it already did.\n- react-hot-loader uses rollup to generate a complete bundles for dev and prod, and there is no way you can tree shake it.\n- there is no sense to \"tree shake\" this - https://unpkg.com/react-hot-loader@4.3.12/dist/react-hot-loader.production.min.js. Probably we should teach babel plugin to remove the rest of used RHL parts... but which parts?. You are welcome . It was pointing to local version of react-hot-loader itself. \nJust build it first.. Gonna merge this, combine with React 16.6, add a bit if other fixes, and call it a day.. I'll release a fix tomorrow. It's to late for me to draft any release today.. Fell free to upgrade to 4.4.0-1 (beta). It fixes this and another issues.. My bad, sorry. \ud83d\udc22 tomorrow morning (GMT+10) \ud83d\udc0c \nSorry, was partially offline for two days.. Sorry for delay. I wanted to release this change with another one, but (and this is the nature of RHL) even having all the tests green - it does not work in real. Trying to find problem.... Fixed in \"next\", v4.5.1. :sweet:\nSo let me just collect some feedback before releasing a new version.. 4.6.0 is no longer beta.. - babel is required to update class-component methods\n- webpack is required to support memo, and ignoreSFC mode, which will enable hooks.. Lets discuss all the problems in https://github.com/gaearon/react-hot-loader/issues/1088. It sounds like\nif import is found in the file, then use import to get react-hot-loader, else use require.\n\nWould affect both babel and webpack logic.. probably it's time to use a global variable :). js\nconst plugins = [\n    [\"react-hot-loader/babel\", {safetyNet: false}]\n  ];\nThe new (4.6.5) version is require friendly(initial issue), while disabling safety net makes it module friendly (strange, but you cant module.hot.accept in mjs)\nI've just tested your demo - one change to babelrc and it works!\n. That's one of the rules of React-Hot-Loader - it preserves state. And don't change the past. Initial state value, you may set in the constructor, is the past.\nThat's the goal.. Related - https://github.com/gaearon/react-hot-loader/issues/1047. It will update \"simple\" values(which are \"equal\" between instances) and methods, but would ignore any complex objects, as long they are always unique.. hot in production does nothing, but(!) - as long as you have passed a magic module variable inside - it will disable webpack module concatenation. That's why it's good to remove it completely.. @DinerIsmail - see https://github.com/gaearon/react-hot-loader/issues/1080. Sorry, that's my bad, but this change is a bit obsolete - https://github.com/gaearon/react-hot-loader/pull/1101/files#diff-f464595d40b58d1b6989f0cd0b5f2229. Have a good day then :). That's a known problem. Please switch to the next branch (v 4.5.1). Lets keep this open until fix would land to a real release. . Since 4.6.0. Yeah, typo is my second name.. 100% your problem is related to NODE_ENV. Please make sure to use webpack.EnvPlugin.\nIn production mode RHL should be nothing, not something importing stuff like React.. PS: Ok, it wouldn't be \"nothing\", as long as it has to import React for AppContainer. \nBabel plugin should not amend files in production mode, only remove calls to hot.\nPlease ensure that you are not just providing some settings for webpack, but have NODE_ENV set as a real env variable during the build.. If something is not easy discoverable - it should be documented.\nIf you have struggled with our readme - be the change you seek and raise a PR.. You may rewrite plugin, to wrap produced sugar with some conditions, but dev and prod plugins are actually doing a bit different things, and have to be separated.\nUsing \"ENV\" or \"crossenv\" to specify \"mode\" for a build, and providing mode to webpack according to the real env variable - is a standard practice. See - https://github.com/kentcdodds/cross-env. Probably the easiest solution is to amend webpack.conf\njs\nresolve: {\n    alias: {\n      'react-hot-loader': path.resolve(\n        path.join(__dirname, './node_modules/react-hot-loader'),\n      ),\n    }\n}. \ud83d\udc4d . :nods: It's not easy to catch \"update\" event and remove error overlay. \n@neoziro - I think we have to make ErrorOverlay a part of AppContaner. Never mind. AppContainer has a prop named errorReporter, you just can`t provide a settings for it :). In short:\n - the feature you are asking for is supported\n - you can't use it :)\nWe have to:\n - create a way to specify settings to the AppContainer created inside hot\n - probably add one more field to setConfig, as long as your settings should be applied application wide.. 4.6.0 gives you everything.\nCheck errorReporter and ErrorOverlay options of setConfig. As long as it displays an error - yes.\nThat is the error it tries to show?. Should work \"right\" with the last version.. babel plugin would add some \"not pure\" code to every file, thus make it completely unshakable.\n- Use webpack environment plugin to provide NODE_ENV to the build, to let RHL(and react) pick the right bundle\n- Setup NODE_ENV as your own env, to let babel do the right job.\ntext\nNODE_ENV=production npx webpack --mode production --display-used-exports. Thank you very much. A few more patches to land, and I will draft a new release in the morning (~10 hours).. Released in 4.5.2. \ud83d\udc4d . This is 4.5.0 change.\nBy default configuration, SFCs are wrapped by a complex thing, which returns a class instance from SFC call(it's a long story). This \"conversion\" could be done only once, during the first component render. Later would lead to an error.\n4.5.0 adds \"early reject\" if render return null. And later returns class wrapper, when it's already too late.\nFor now, you can solve this by setting pureSFC configuration option. See readme for details.. Should be fixed in 4.5.2. \ud83e\udd37\u200d\u2642\ufe0f It's obvious - your code is right, but even old one is working for me. Why?. https://github.com/gaearon/react-hot-loader/issues/1121 would solve p1, and partially 3 others.. You have to regenerate jest snapshots. I am not sure yet. Lets first update jest snapshots, so we would see the result code.. Sorry, was quite busy with a new release. Could you check your problem with version 4.6.0?. You may have one hot for your top-level component, just don't use it in the same file you are creating redux store - put it one module below.. I'll take a look on your case later today. Please don't fix it.. This is React-Redux v6 issue.From our side it's tracked as #1001 \nThe problem - React-Redux creates methods via factories to render your Component. That WrappedComponent is stored in closure and RHL has no power on it.\njs\nthis.selectChildElement = makeChildElementSelector()\nDuring the class update we consider updating of the factored method as unsafe, and NOT doing it.\nResult - you are rendering the old WrappedComponent.\nSolutions:\n- find a way to regenerate methods like this.selectChildElement. Still no idea how\n- ask react-redux to make that method a class method, why it should be an extrnal function?\n- ask react-redux to render Component.WrapperComponent, which we cound update, not FinalWrappedComponent\nWhys:\n- v5 works as long as it was a magic compoenntWillUpdate methods, specially designed to HMR.\n- \"separation\" works as long you have Class as a registered variable, and we could inject a new version instead of the old one. That's always was the easiest way to make RHL work, but variable extracting is not quite cool stuff.\n@markerikson - could you take a look at the problem? I would really appreciate if Redux and RHL would be besties \ud83e\udd1d . This would fix the problem for now - https://github.com/reduxjs/react-redux/pull/1137. Next step - on hotUpdateEnter amend every mounted (tracked in createProxy) component with componentDidCatch, and remove all clean components on hotUpdateLeave, keeping only dirty ones with ErrorOverlay displayed in place.\nThat would match principles. @neoziro - you know - I do have the same problem. Sometimes I am thinking to start everything, especially tests, from scratch.. Could you provide some example - it's not quite clear what does mean object here.. @davewthompson - just explain in random words. You may even just dump broken \"object\".. Thank you. You probably did something wrong. Please read first page of our Readme (and update to 4.6.0). This is from v3 era - now we encourage you to use \u2018hot\u2019 from \u2018react-hot-loader/root\u2019 which has absolutely different semantic and even should be used in different file (in App). This overlay was added in 4.6.0. I thought that it could lead to some issues, but that code should not be called on server side.. Try 4.6.1. Try 4.6.1. Ok, I didn't get initial issue right - document is defined, but body is still not.\nMy bad.. Sorry for a delay - have experienced a power outage after the storm.\nAnyway - this problem could be solved in a more easy way, and I already have in a local branch.\njust if(!document)return.. Already testing... Unfortunately there is no e2e tests here, so testing is partially manual :(. \ud83d\udc4d . Try 4.6.1. As far as I know - it does not emit error - it report error.. Try 4.6.1. It does not change anything, except messaging around real error.. I shall not swallow the error. Something is not right, and it should report what exactly and where.\nPS: You may manually remove try/catch block around require, and double check the root issue.. So - look like this error is a real error.\nTry https://github.com/mzgoddard/hard-source-webpack-plugin. Remove DLL plugin and use only Hard one - and you shall get the same good speed.. Issue already was issued - #1126. 4.0.0 does not \"see\" Memo, that's why it working (it's not working at all). Yep. Not it aware, and doing something not expected with it.\nI'll fix the problem today, dont worry.. So it was broken for any Lazy around Class... as long as it's actually different types.. 4.6.3 (and actually new hot-loader/react-dom or webpack plugin) would solve the issue. You are using react-hot-loader 3.0.0-beta.7. Version 3 was never \"released\", and died in the same \"beta\" status a year ago.\nConsider moving to version 4.. This is a known issue.\nIn short inside React there is something like double buffering, - alternate in React terms. React-Hot-Loader could update the current view, but not the alternate.\nAfter the update you will see an alternate, and after another update - the updated type. It will be always one update behind.\nHow to fix today\nUse webpack-loader to patch react-dom or hot-loader/react-dom to give RHL access to React internals, and ability to monkey patch everything it needs.\nI will update RHL to perform the same action (update alternate) simultaneously with force update, and that would solve the issue without need of react-dom patches.. I'll reopen issue as long as it's possible to fix it better than today. \ud83e\udd1e. \ud83e\udd37\u200d\u2642\ufe0f sorry, this is not a PR \ud83e\udd37\u200d\u2642\ufe0f. Sorry. Didn't find time to investigate yet.. Everything is working great. Just 4 seconds is needed to generate an update, and to emit 3mb(of what?) file at the same time.\n4 seconds is too much, but I am not sure what is the driver of this slowness.\nThe problem is with your webpack configuration - it's too complex, and probably is doing something wrong.\nI've replaced it with an empty webpack config, and update time went to 145ms. Plus bundle lost 1mb somewhere.\nHere it is: https://gist.github.com/theKashey/0477957a6f284985e3d6a4d6c1b7d320\nPlease don't go hard ways (ejecting CRA) if you don't need it.. It's not too complex - just something (and I don't know what exactly) makes it a bit slow. Unfortunately - as long as CRA does not support RHL, it could be not so easy to add it.. \ud83d\udc4d . Unfortunately there is nothing we could do here - this is all about Hot Module Replacement, and that's a webpack feature.\nAnd it's quite confusing, but you will have as many \"my-file.jsx\", as many changes you made - old and obsolete files are not removed.\nWhat's how webpack(script tags in browser) works.. 1. componentWillReceiveProps is deprecated, do not use it.\n2. You should manually trigger getEditor on HMR to reload chunk, you are not doing it.\n3. You should use lazy\nSomething like this (I didn't test this code, but should work)\n```js\nimport React, { Component } from 'react';\n export default class ApplyInfoEditor extends Component {\n    state = {\n      Lazy: React.lazy(this.getEditor)\n    };\n    validate() {\n        return this.refs.editor.validate()\n    }\n    async getEditor(approvalType) {\n        let {\n            type,\n        } = this.props\n        type = approvalType ? approvalType : type;\n        let Editor = null;\n    switch (type) {\n        case 'discount':\n            Editor = await import(/* webpackChunkName: \"discount\" */ './discount/Editor');\n            break;\n        case 'testVouchers':\n            Editor = await import(/* webpackChunkName: \"testVouchers\" */'./test_vouchers/Editor');\n            break;\n        default:\n            return null\n    };\n    return Editor;\n}\nrender() {\n    const {Lazy} = this.state;\n    return (\n        <div>z\n            <Lazy ref={'editor'} {...this.props} />\n        </div>\n    )\n}\n\n}\n``\nPS: Better use some library to handle the stuff. Currently React.Lazy, React-Loadable and React-Imported-Componet are confirmed to work.. What isreact-dom` version then?. Probably I could not help you. In all my cases it's working well, as designed. There is something specific to your case, but that \"something\" is invisible to me.. Next time..... It's not bad idea.\nThe bad idea: using hot in the same file you are creating (or importing) client(or store), as long as it would lead to their recreation.\nSo it's easier to go with v2. Safer :). Something is wrong in your case. I need some example, or at least the code of the component, causing the error.\nNothing around error location was changed in the last half year.. Hey mate. It's simply - just do what we do - https://github.com/gaearon/react-hot-loader/blob/master/src/index.dev.js\n```js\nimport ReactHotLoader from 'react-hot-loader';\nReactHotLoader.patch(MyReact, MyReactDOM)\n. @ReactGirl - sorry, I am the last standing maintainer, and I am on annual vacations.. Question answered..js\n// package.json\n    \"react-dom\": \"npm:@hot-loader/react-dom\", // do I need this?\n```\n- This is optional, but highly encouraged.\njs\n// webpack.config.js\nmodule.exports = {\n  entry: [\n    'react-hot-loader/patch',  // do I need this?\n    './src/entrypoint.js'\n  ],\n  // ...\nOnly if you are not using hot-loader/react-dom and also yet optional\njs\n// babel.config.js\nmodule.exports = {\n  plugins: ['react-hot-loader/babel'], // do I need this?\n  // ...\nyes, we need this.\n```js\n// App.js\nimport { hot } from 'react-hot-loader/root';\nimport * as React from 'react';\nconst App = () => Hello World!;\nexport default hot(App); // do I need this?\n```\nyes, this is the most important moment\n```js\n// entrypoint.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader'; // do I need this?\nimport App from './App';\nconst render = Component => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('root');\n  );\n};\nrender();\n// do I need this?\nmodule.hot.accept('./App.js', () => {\n  const NextApp = require('./App.js').default;\n  render();\n});\n```\nno, please never do it without understanding how HMR works.\n\nIs there an up-to-date full example of rendering a hot-exported component?\nSee examples folder, sorted by last change date.. @Mknight492 - I personally use following configuration:\n- ts-loader\n- babel-loader (for react-hot-loader, jsLingui and so on)\njs\n{\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        use: [\n          'babel-loader',\n          'ts-loader'\n        ],\n      },\nThe current configuration, described in a readme(use babel 7 ts preset), is probably wrong - babel script is not real TypeScript, and may not work for everybody.. Mine 2 cents about @rockchalkwushock article:\n- (very common mistake) you __dont need to addHotModuleReplacementPlugin. It will actually lead to __TWO__ plugins exists simultaneously. Just specifyhotoption for webpack. THAT'S ALL!\n- (\ud83d\ude22) typescript withisolatedModules` is not typescript. It's babelscript. It might not work if you not re-exporting types, which is a common thing in \"enterprise\"(or properly decomposed) code.\nYou may found many different configurations among our examples folder. And all works.. hot=true should be enough for webpack-dev-server. You have to use HotModuleReplacementPlugin only if you are using a custom dev server.. There are 3 options:\n1. use webpack plugin to patch React\n2. use hot-loader/react-dom - already patched react version\n3. do not use anything.\nWebpack and babel plugins are not interchangeable - they are doing absolutely different work.. Yep:\n- babel-plugin registers top level variables, and let us hot update classes\n- webpack-loader registers top level variables, and patches react-dom\n- hot-loader/react-dom is just patched react-dom\nWe need:\n- register top level variables to remove false positives. Ie better know what we are doing\n- inject magic methods to be able to hot update class non-prototype based members\nBut actually, only tracking of top level variables is required. Without it, things could go REALLY WRONG.. https://github.com/gaearon/react-hot-loader#error-boundary-is-inside-every-component\nJust provide some default value, to \"disable\" it.\njs\n// to disable\nsetConfig({ ErrorOverlay: () => null }). It's not a part of webpack/babel plugin -as you said - it's runtime React ErrorBoundary inside AppContainer, which is created inside hot, plus hot has HMR error boundary.\nYou may disable it via webpack config by adding one more file to the entry point, which will setConfig. Ie - \njs\n{\n  entry: ['src/index.js', 'src/setup-hmr'], //(could be last, as long affect runtime, not startup time)\n}. Could you please provide some pseudo code to reproduce?. The change you are looking for is already in master and soon will be released.\nIn short - AppContainer will not catch errors if it's out of \"Update window\" - https://github.com/gaearon/react-hot-loader/blob/master/src/AppContainer.dev.js#L42. Released in v4.6.4. That's a brilliant idea!. \ud83d\udc4d . I am really unsure that we shall do it:\n1. That's not \"our\" API\n2. That's not an API we are using. Right now you dont have to use low level API to setup HMR - our hot function will do everything for you.. You got it wrong. And probably you are updating redux store every time.\nMove <div><Header...</div> to another file and component, and make it hot.\nOnly your application should be updated, not the code to setup and render it.. You may make routes also hot, just move them to another file.\nDuring hot update some files should not be updated and you have to keep \u201croot\u201d unchanged to keep the application state.. It depends. Sometimes some complex HOCs(Redux v6, for example) are not hot-reloadable.\nIf you have an example - I could try to find the problem.. The fix is already in react-redux master branch, will be available soon.. Why you need React-Hot-Loader then?. Ok. Got the point. Probably that\u2019s easy to fix.. You can\u2019t do it. It should be fixed inside RHL. \nThe best you may do - create a \u201cbroken\u201d example I could convert to a test later.. Ok. It's not possible to fix this issue from React-Hot-Loader side.\nHow to fix it:\n- you have to create window.React variable. An empty one.\njs\n  window.React = null;\n- you may do it instead of including React from CDN\n- you may create a file and require it before react-hot-loader\n- you will have to specify safetyNet: false option for RHL babel plugin (which is NOT released yet). The change was not released yet. ```js\nimport { hot, setConfig } from 'react-hot-loader';\nsetConfig({\n  ignoreSFC: true,\n  pureRender: true,\n});\nfunction render(component) {\n  ReactDOM.hydrate(\n    hot(component), <--- THIS IS HMR PART, AND IT HAS ANOTHER INTERFACE\n    document.getElementById('root'),\n  );\n}\n``\n- You shall usehot(module)(component)- I recommend toimport {hot} from 'react-hot-loader/root', and then you mayhot(component). Yep - the samehotbut with another API, like the one you tried to use. We will eventually deprecate thehotone you have used to mitigate this problem of picking right call arguments.\n- __do not__ use it in the same file, you are doinghydrate`. Move one file deeper to maintain the application state. (that's HMR rule, not RHL - you shall \"accept\" change somewhere, and everything below (and including accept location) would be updated)/\nHMR part... in short - you dont need it. hot will do everything.. \ud83d\udc4d . I heard that error already - #1131, #1082 and so on.\nI was never able to reproduce and trace the problem. Do you have an example?. Got the point \ud83d\udc4d . The only question - what is enums?. Ok. But how you are creating React element as \"enums\"? There were some packages to freeze elements after creation, but as long as RHL tries to access these methods - React also will do it, and also will break something.\nAnyway - if your PR fixes your problem - I am ok just to merge it.. The change was not released yet. HMR \"bubbles\" thought parents, finding the one, which will accept it. If something is wrong with parents - something is wrong with HMR.. Something is broken in webpack, and only in webpack. Try to remove enforce, and runtimeChunk.. @reaysawa - you may use ignoreSFC to cold all SFC, and RHL will not complain about it, only in one case - you are using hot-loader/react-dom or webpack-plugin.\nIn any other case, it will nullify all RHLs work (cold elements shall not be updated)\nAs I could see - you are using webpack-loader but you are excluding it from accessing node_modules (exclude: /node_modules/)\nwebpack-loader loaded is going to land a patch on your node_modules/react-dom, do not restrict it!. This is expected - ReactHotLoader could not change \"the past\".\n\nRHL is preserving a state, so it does not re-create component, doesn't call life-cycle methods, and so on.\nSo it does not recreate state and hooks - everything continues where it was, with a state as it was.\nAnd anyway - RHL does not have access to hooks. We could not detect your change, even if we wanted to do it.\n\nFor now, and nearest future, that how it would work, there is nothing I could do.. I could do it for classes not for hooks. \nAs long as they got released I could try to look for a proper hooks for hooks. Probably it should be quite easy to properly destruct the old hooks(changed ones) and let the new ones to spin up.. \ud83d\udd25. Honestly - I have no idea why this code got executed on webpack side. But:\n- 4.6.4 deprecated\n- 4.6.5 released. @blinkzz - 4.6.5 should contain a patch - https://github.com/gaearon/react-hot-loader/commit/6f8573fb44f7089d24e7c6f4af0246bf87477fff\nYou might have you code cached. Or delete the cache (node_modules/.cache or /tmp), or change anything in your .babelrc, and re-run.. got XXX instead of YYY and where. Usually, it would re-render the nested tree with a state loss.\nThis is from hot-renderer, when something went unpredictable, and after update XXX is not (new)XXX, but YYY. Memo vs SFC in this case.\nFor the message is clear, but the formatting is not quite. Probably I should pick something more console friendly.\n. Definitely. Could you parse a code around \njs\n<SomeProvider>\n  <AndSomethingInsideProbablyMemoVersionOfChangeThemeByName/>\n</SomeProvider>\n. Confirmed. The issue is with React 16.7+, where fiber.elementType is Memo, but fiber.type is memo-ed component.. There were 2 mistakes:\n- memo was not properly supported in hot-render, that's why you saw this message\n- reloading Providers was not supported at all. In all the tests they were created above reloading point.. \ud83e\udd1e \ud83e\udd1e \ud83e\udd1e . I was quite sure that after that last changes (ie hotComparisonOpen) ErrorBoundaries are working only when for HMR, not when an application is a normal state. Let me play with your example.. Probably it's better to display a message like this when hot patch is not detected, as long as we rely on it.. The current version would display this message only if hot-patch is hot present.\n\nReact-Hot-Loader: react-\ud83d\udd25-dom patch is not detected. React 16.6+ features may not work\n\nCos, you know, 16.6+ features really might not work, especially hooks. React-Hot-Loader is not very reliable thing and might ruin all DX with eeeeaaaasssyyyy \ud83d\ude2d.  We need some support from React side but have to inject it by ourselves.. That's awesome, and worth to be mentioned in a readme.. 1. There is definitely something wrong with RHL code\n2. There is a small mistake in your one\njs\n<ProtectedRoute path=\"/dashboard\" component={() => <div>Test</div>} />\n// should be\nconst Component = () => <div>Test</div>;\n<ProtectedRoute path=\"/dashboard\" component={Component} />\nRight now you are creating a new component every render. Dont do it.. js\nconst ProtectedRoute: FunctionComponent<IProps> = ({ component, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => {\n      if (isAuthenticated()) {\n        return <Component />; <<---- this is React.Component, which does not have .render method\n      }\n      return <Redirect to=\"/login\" />;\n    }}\n  />\n);\nReplace Component by a component. reactHotLoaderGlobal is basically React-Hot-Loader as a whole module. Including maps(knownClassComponents), holding every component you have, including proxy weak maps, and some other stuff.\nAnd you are right - there is no delete operation defined.\nPS: And you can't \"delete\" RHL as a variable. You are deleting no more than just copy.. ReactHotLoader global variable should not exists.\nIt would not if NODE_ENV is set to production.. yep. If it does not exist - ReactHotLoader does not exists.. \ud83d\ude40that\u2019s was a quite unexpected integration. Happy it worked!\nPS: use \u2018hot\u2019 from \u2018React-hot-loader/root\u2019 - it just a one function call.. Is it webpack based?. hot is not passing refs down the tree. Partially due to React 15 we still have to support.\nPlease consider hot-components, as independent applications roots (they are) and do not \"ref\" them. . My bad. Trying to \"register\" \"Provider.Provider\". I'll push update today. It's a one-line change.. 47.1 released. The patch is already here - #1190, just finishing something prior.... You may exclude node_modules from a loaded, that's a common setup. So webpack loader would not be able to land a patch.\nAnyway - could you tick preserve log in the console, and help me understand why using hot-loader/read-dom led to a full refresh. It sounds like a runtime js error.. \ud83d\udc4d . Sounds legit. Let me test some edge cases first.. Closing in favor of more robust PR https://github.com/gaearon/react-hot-loader/pull/1190\nYour one was or for const {Context, Provider} = createContext() but broke simple const context = createContext\n. \nCould you place something like ### Old API before the note, to separate it from a instalation steps.. Thanks mate! Don't hesitate to improve other sections.. ```js\n  var evalAllowed = false;\n  try {\n    eval('evalAllowed = true');\n  } catch (e) {\n    // eval not allowed due to CSP\n  }\n// RHL needs setPrototypeOf to operate Component inheritance, and eval to patch methods\n  var jsFeaturesPresent = typeof window !== 'undefined' && !!Object.setPrototypeOf;\nif (!jsFeaturesPresent || !evalAllowed) {\n    // we are not in prod mode, but RHL could not be activated\n    console.warn('React-Hot-Loader is not supported in this environment.');\n    ....\n  }\n```\nSo, which variable - jsFeaturesPresent or evalAllowed is falsy?. @borisding - so there is no window in SSR, and there is no RHL on SSR side - it relies on module update API, which does not exist on the server side.\nI would say - the right way to mitigate the problem - suppress this message on SSR.. Basically - when moving from v3 to v4 you shall change how you use RHL, not anything webpack related.\nHappy you solved your quiz.. Releases as react-hot-loader@4.7.2. browserlist has to be updated.. I will take a look later, meantime try setting \n```js\nimport { setConfig } from 'react-hot-loader'\nsetConfig({\n  pureRender: false, // was set to true at 4.7\n  pureSFC: false, // was set to true at 4.6\n})\n``. It does not work cosignoreSFCis set totruein the gatsby and no \"patch\" is present.\nAdding a patch (yarn add react-dom@npm:@hot-loader/react-dom`) solves the problem.\nPS: But you helped me discover one regression in RHL, which does not matter in this case.. Nope, that was not a regression. It should be so\ncommons.js:37720 React-hot-loader: Cold component Root at /Users/akorzunov/dev/github/react-hot-loader/tests/rhl/.cache/root.js has been updated\n__stack_frame_overlay_proxy_console__ @ commons.js:37720\ncommons.js:37720 React-hot-loader: Cold component default at /Users/akorzunov/dev/github/react-hot-loader/tests/rhl/.cache/root.js has been updated\nRHL is threating default and Root from Gatsby internals as not-hot-reloadable(cold) componenst, and thus it leads to remount.\nBut the fact (ignoreSFC) - the are cold and error is legit.\ngatsby it not hot-reloadable without a patch.. There is a long going issue about react-hot-loader and react-static - https://github.com/nozzle/react-static/issues/894. Keep your dependencies up-to-date :). No changes made to componentDidMount are applied by design - your component was and is mounted already.. It's still better to have lodash.merge, not the big lodash. \nPlease update, but not rename.. It's more about the dev bundle size, that runtime bundle size. But you are right - it was not updated, so you went the right way.. A flake.. Known issue, and one of 3 major ones.\nThe plain was to solve it in v5, but it was delayed a bit.. This is the idea - https://github.com/gaearon/react-hot-loader/issues/1138. Cold components would exist only in two cases:\n- you cold them. But you said that you only hot your top level component.\n- you ignoreSFC, thus cold all functional components, but didn't use webpack-loader(\ud83d\udd25-patch), and RHL should not work properly.\n- you are definitely not using hot-patch, as long it, and only it disabled this warning at all.\nSo the question you have to answer - why components got cold. Is it a misconfiguration?. A new version, 4.7.2, would suppress this message on the server side.. :( It's more about which React version you use. Then - you dont need hot-patch - so disable webpack-loader for react-dom, or dont use hot-loader/react-dom, if you do.. We still maintain tests and compatibility with React 15, but sometimes something could go wrong, as long the main problem is to support new features.\nexcluding react-dom from webpack-loader is a one line in webpack configuration, and would help you here and now. Later I would fix webpack-loader not to break your app, but that would be not today.. \ud83d\udc4d breaks with 16.8.4. Last tested version is 16.8.3 \ud83d\udc4d . RHL@4.8.0 (or hot-loader/react-dom@16.8.4) released. Thanks for reporting an issue in a right time :). That's definitely more your configuration problem, than React-Hot-Loader's. Lets continue on SO.. Have a good day :). Types are defined inside RHL, just remove \u2018@types\u2019 and it shall work.. https://unpkg.com/react-hot-loader@4.8.0/ - both root.js and root.d.ts are present in a package.. \ud83d\udc4d . React-native contain it's own (~v2) version of React-Hot-Loader and you cant use the real RHL there.\nThat's all I know.. Babel plugin is removing hot in production, but not hot from /root.\n@smelukov \ud83d\ude4f, could you save the day?. Don't look how it written - look what it does:\n- register all top-level variables\n- inject eval into classes (this would not be needed in a future)\n\nReliable HMR feature based on Dan Abramov's react-proxy,\n\nreact-proxy is not reliable. If you want to keep using it - try (react-stand-in)[https://github.com/theKashey/react-stand-in], which is currently used in React-Hot-Loader.\nPS: Every day it's harder and harder not to use Babel. Some translation libraries, like js-lingui, or SSR-friendly code splitting requires it. So - why not to use? It does not slow the build time.. So - the only difference between babel and webpack plugin (in this scope) - injecting eval to classes to be able to update arrow functions if they are not transpiled, or just inject something in the same function scope.\nThat's something we have to do, to make onClick handlers work. And that's something we shall not do, as long as function scope is invalid. It's like a dead end. Finita la comedia. See v5 for details - https://github.com/gaearon/react-hot-loader/issues?q=is%3Aopen+is%3Aissue+milestone%3Av5\nI am looking forward to overtake this limitation, and then only simple top level variables registering would be required (to remove false positives during updates). And yes - transformer also would be not needed.\n. Could you be a bit more concrete? \nAll my tests - unit, manual, and just daily work experience with RHL - are green.. \ud83d\udc4d good luck. Hooks are not quite well tested yet.\nTry to disable a single feature which may break them (only if you are using hot-patch(webpack-loader or hot-loader/react-dom)\n```js\nimport {setConfig} from 'react-hot-loader';\nsetConfig({disableHotRenderer: true});\n```. Then I will ask you to create a repo to reproduce a (exactly yours) problem.\nPS: And look like you are not using hot-patch\n- https://github.com/gaearon/react-hot-loader#react--dom via hot-loader/dom\n- https://github.com/gaearon/react-hot-loader#webpack-plugin - via webpack loader. Proxy is updated or created when React.createElement is called. You may use the same function to resolve component type as it uses  - reactHotLoader.resolveType(Component). So - you have an arrow function somewhere in class.\njs\nclass {\n  test = () => { body }\n}\nAnd babel transpile it as\njs\n contructor() {\n   this.test = () => {body};\n }\nAnd then you transpile it as \nclass{\n   constructor(){\n     this.test = (...params) => this.test_REACT_HOT_LOADER(...params);\n   }\n   test_REACT_HOT_LOADER(){\n     body\n   }\n}\nAnd here is the problem - in terms of ReactHotLoader this in constructor is always incorrect.\nPropose - transpile it into\nthis.test = (...params) =>\n this.test_REACT_HOT_LOADER.call(\n      REACT_HOT_LOADER_GET_THIS(this),\n      ...params\n  );\nWhere\njs\nREACT_HOT_LOADER_GET_THIS = \n    (that) => that && that.REACT_HOT_LOADER_INST \n      ? that.REACT_HOT_LOADER_INST \n      : that\nAnd next react-proxy(or RHL proxy) can provide and keep up to date reference to the current instance from the first one via that secret field.\nCurrently react-proxy just\njs\nconst proxiedMethod = function () {\n      if (typeof current[name] === 'function') {\n        ///// current._REACT_HOT_LOADER_STORE_THIS(this);\n        return current[name].apply(this, arguments);\n      }\n    };\nWe have to move the right this inside arrow function, somehow.. patch.dev was completely rewritten. Things like error reporting about failed registrations or failed replacement were removed, as long they are obsolete with reconciler.. The goal is to give RHL control over component's module. \nNext it will spinup HRM behavior to enable module self-acceptance, and next wrap Component with AppContainer.\nSo - this HOCs is doing 2 different things in real, but as long one shall have only one hot export per module - it is ok to merge all the stuff inside a single function.. It is performed on line 10, but I should use some helper to do it.\nPS: And I should not transfer contextTypes. Have no idea why I did it.. But it never accepts component. V4 does not change behavior of AppContainer at all.. Nevermind.. :0. The key is setTimeout or deepForceUpdate?\nUpdate on AppContainer was called before, and it must call update on it's children.. Temporary for debug.. Do not access prototype directly, but try to do it via descriptors. Trespasser!!. We cant place such secret-knowledge based logic here.\nAs long it may fix Relay - it can break something else. Or not fix something else.. We dont have any reasons to throw an error. I'll expect a lot of false positives here.\nJust give us a bit of time to find a proper way to solve this case as a broad problem, not bound to Relay case.. To let StatlessFunctionComponent exists.. returned instance must contain the same props, or will trigger a warning.. The actual fix.. It just creates a real functional component, which will be Interminate until the execution, and can carry desired payload.. The logic is the simple - how it will work __without__ RHL?\nWithout RHL it will construct and return a new Component on each render call, and will not cache anything.\nThat's the answer.\nWe can do a lot, but we shouldn't. . There is no such thing as initial mount for a function stateless component. As I understand - it just can't change its mind.\nIn real - this code works without any exceptions or warnings.. Yet again - just remove RHL from you mind.\n1. Reproduce the problem.\n You will found that you can return renderable-component only from Stateless functional, not from class-based. (and there is no third way).\n2. Let RHL to mimic same behaviour.\n RHL removes functional components, making all class-based - thats is the problem. We have to do it, cos this is the only(*) way to be able hot-swap function implementation.\nThis means - if you found some odd behavior, you could reproduce only using functional component - use functional component to reproduce the original behavior. \nThis also means - we should wrap functional components with functions. It will be the best way to solve any further issues.. Cos first you have to wrap them, next you can test something.. Just spiked possible solution with keeping functions as functions - it is much more clear, but results 5% tests to fail.\nI'll hope to work it out till the end of the day.. :P. Unfortunately, we have to proceed with this approach.\nI've spiked the other way to wrapping the stuff, keeping functional components functional, and works with this case without any magic, but....\nBut stateless component does not leave instance behind, preventing hot-reconciler to properly work. \nTo fix this one have to rework getReactStack to properly handle any possible React.Element type.\n. During the hot replace we start process to merge the old and the new react tree, to update components which are not exposed as variables or just hidden behind decorators. \nDuring this process we can\u2019t handle function components, except this case, as long React stores only return variable in the tree. \nYour code example is eligible, but hotReplacement can\u2019t pass though the real functional component. \nFor now - everything except this case have to be wrapped with class. . Now it mimics React behaviour better.. Why somebody even invents it!? \ud83d\udd2e . Nope. Result have to be an instance with a render function to trigger this code branch.. You are right. I've inverted the expectations.. It will be awesome. I\u2019ve stuck with home duties. . Yep, it's only the case for a \"decorator\" example, when you can not touch prototype without side-effects.. We could not. The only thing we could do - throw an error is someone will use \"hot\"+\"parcel\".\nOr wait a bit, and let parcel to make it's HMR a bit better. It is too simple yet.. https://github.com/parcel-bundler/parcel/issues/619\nMeanwhile, I've found a bug in hot. From now hot will throw an error is .id is not defined along the module.. Follow up - https://github.com/gaearon/react-hot-loader/pull/818. We do know that \"the hack\" is needed only for Relay, but it is an absolutely legit structure from React prospective, and someone else could use it. Thus we should not call it relay even if we don't know that someone.. As long CRA will not exclude node_modules and some projects might follow the same approach - we shall be ready (and we are ready).. \ud83d\ude28 . I am using them for debug purposes. They reflect only the pure idea of RHL - don't lose the state.\nThis example is a good one, cos it actually not working for sync portal, as described above.. the \"real\" name is supportIndeterminateComponent, but actually not support, but \"use\".\nstatelessIndeterminateComponent ?. Eh, just some trash from smoke testing.. Let me refactor this a bit. \nAnyway - this is a good decision to make.. I've removed this plugin from rollup config, but not from the package json.. My bad.. It has a side effect on the final bundle, causing this bug - https://github.com/storybooks/storybook/issues/1320\nSo, I've just removed it, and double check that bundle is ok-ish. Lets dont introduce some external stuff, the final customer should also inject in his code.. This is \u2620\ufe0f, I know that _this3 exists.\nIn ideal we should or inject regenerate in a constructor, to make these variables visible, or detect the error on regenerate, and ask to disable arrow function transpiling.. As far as I know - postinstall will be executed on a client, without any dev deps, it actually needs to be executed.\nShould not work.. CI related change. Rollup dislike eval.. When result of this function on next render iteration got in here again - it will be just ignored.\nThat was the first problem.. This was a second. A little \"gap\" in the tree. This means - fixed!. This is actually a fix. Everything else is related to this change - now tests have \"reset\" proxies sometimes.. It will stop here. It is still the App, but that App will use ProxyComponent created for App3 . Force Statefull one to have update during the tests.. This is \"the main concern\" -  I have no idea why this is happing, no explanation, nothing.... Not sure about exposing this command, but nothing will work without it (except idea 1 in the source issue). This element is \"invisible\" to RHL \"v3\". Ie for RHL+Preact+(no-VDOM)\nThe internal state always will be lost.. settingComparator to compareAndSwap (swap is optional, so - \"or\"). This is changes to be added into Preact code base. Literraly - just wrapping node._componentConstructor == vnode.nodeName by a controllable function.. SFC have to be wrapped by \"Components\", or Preact will wrap them. (to be controlled via setConfig). Proxy have to be able to \"kill\" itself.. In React we are comparing unwrapped class with wrapped (real is behind getPrototypeOf). Should be controllable.. This is the actual change.\nIf type == type - return.\nElse - compare them. Both types are \"wrapped\".\nIf types are replaceable\n - rollback proxy1\n - set alias oldProxy->newProxy\n - set alias newProxy(usedId) -> oldProxy (may be obsolete)\nreturn true.\nResult it \ud83d\udcaf full cream hot-loader.\n. They are in a section about \"friendly\" loaders, and dont require any workaround example, as long just works.\nWe could swap sections, displaying an easy path first.. This is a case Fragment inside a div.. This is a important moment, we dont log.. I am unsure about this. The value, stored in the type is not \"right\".\nMight be it is better to dive into children on hydrated instance.. Might fail. Lets secure it.. :( Yeah, now I recall all the issues around it.. This was a red test. The right way to detect React 15+ component\nOld code is needed for React 14-. I've found bug in tests :). that should be module.id. Left over comment :). React.memo could \"eat\" only simple class or functional component.\nThe current approach, with \"indeterminate\" components is breaking the stuff.. Probably the same magic is needed for Context. \ud83d\udca9 this is something unfinished. Idea was to provide yet-another-api, to specify special flags, component should be created with.\nThe current approach to \"fix\" hooks with setConfig({pureSFC: true}) is breaking Relay-modern.\nI also could not put this logic inside, as long I could not cast every component to a string - emotion throws an Error and should be fixed first.. You dont need to use module.exports, just getPackageAbsolutePath. You also don't have to callit - it could be a variable from the scratch.. const packageAbsolutePath = path.resolve(`${__dirname}/..`). lets move this comment above template, or you will add it to the every file processed.. !==, === - should be a habbit. \ud83e\udd47 \ud83d\ude22 \ud83d\ude2d \nAll this PR is just a disaster.. ",
    "Andersos": "So why is react-hot-loader deprecated in favor of React Transform?\n. ",
    "Jadaw1n": "Oh, didn't see that, thanks!\n. ",
    "arturi": "All right, maybe place it anywhere else you think is appropriate, just someone will be able to google, like I did that troubleshoot page.\n. ",
    "smashercosmo": "\nInheritance is a terrible solution to code reuse\n\nTotally agree) But sometimes it's the only way to extend third-party component and add some extra-functionality that you need. Of course you can always make a fork... but also not the best solution.\n. Nope, updating to the latest react-proxy doesn't solve the problem\n. By the way, what is your best solution in case you need to use some third-party component, but slightly change its render function?\n. @gaearon Yes, of course I was saying about changing the internals. So the only acceptable solution is a fork then. Ok, got it, but not satisfied with this option)) \n. ",
    "mik01aj": "+1.\nIn particular, I'd like to know how did you make CodeMirror work nicely with JSX. We need it in https://github.com/sapegin/react-styleguidist/issues/19.\n. ",
    "goldensunliu": "particularly 0.14.0\n. ",
    "sqrtroot": "bump\n. Okay i've found the problem\nIf you use () => {}functions typescript compiles this to:\nfunction Timer() {\n    var _this = this;\n    _super.call(this);\n    this.FUNCTION = function () {\n        _this.setState({ count: _this.state.count + 10 });\n    };\n}\nhot reloader doesn't re-execute this Timer() function so the function is never actualy reasigned.\na workaround is this\n```\nconstructor(){\n    this.tick = this.tick.bind(this);\n}\ntick(){\n    this.setState({count: this.state.count + 10})\n}\n```\nthis compiles into\nfunction App() {\n    this.tick = this.tick.bind(this);\n}\nApp.prototype.tick = function () {\n    this.setState({ count: this.state.count + 10 });\n};\nThe protoype function does reload an hotreloading works. I don't know if this is a issue for hot-reloader or for typescript.\n. full example of the time:\n``` typescript\nimport * as React from \"react\";\ninterface ITimerState {\n    count: number;\n}\nexport class Timer extends React.Component{\nprivate _interval: any;\n\nconstructor() {\n    super();\n    this.state = {\n        count: 0\n    };\n    this.count = this.count.bind(this);\n    this._interval = setInterval(this.count, 1000);\n}\n\ncount(){\n    this.setState({ count: this.state.count + 10 });\n}\n\ncomponentWillUnmount() {\n    clearInterval(this._interval);\n}\n\nrender() {\n    return (\n        <div>Seconds Elapsed: {this.state.count}</div>\n    );\n}\n\n}\n```\n. ",
    "alexgorbatchev": "I have this working with TypeScript very well https://github.com/alexgorbatchev/gulp-typescript-webpack-react-hotreload\n. @chrisvfritz have you made any progress on this? I was also caught off guard that decision was made to go from a generic webpack loader to babel specific implementation.\n. Thanks, I'll look into it.\n. ",
    "em-yuanbo": "great. it really save me.\n. ",
    "jdeal": "After sleeping on it, I figured out the problem. My HomePage component in the above example was a stateless function component like:\njsx\nconst HomePage = () =>\n  <div>\n    <Greeting/>\n  </div>;\nIf instead I make it:\njsx\nclass HomePage extends React.Component {\n  render() {\n    return (\n      <div>\n        <Greeting/>\n      </div>\n    );\n  }\n}\nthen hot reloading works fine. Nested child components (like <Greeting> in that example) can be stateless and also work fine. But it seems that components passed to <Route> must be normal components. This seems like a good thing to document somewhere, but I'm not sure if this is a requirement that's specific to react-router or somehow general to react-hot-loader.\nClosing this issue since I found a solution.\n. ",
    "nsisodiya": "Thanks !\n. ",
    "mdreizin": "@gaearon Unlucky react-hot-loader + babel-loader + webpack 2 = :broken_heart:\njs\n{\n    test: /\\.jsx$/,\n    loaders: [\n        'react-hot', {\n            loader: 'babel',\n            query: {\n                babelrc: false,\n                cacheDirectory: true,\n                presets: [\n                    'es2015-webpack',\n                    'react'\n                ]\n            }\n    }],\n    exclude: [\n        /node_modules/\n    ]\n }\n'import' and 'export' may only appear at the top level (7:0)\nYou may need an appropriate loader to handle this file type.\njson\n{\n    \"webpack\": \"^2.1.0-beta.4\",\n    \"react-hot-loader\": \"^1.3.0\"\n}\n. @lauterry I don't use react-hot-loader for now and just use full page refresh.\n. ",
    "seanadkinson": "I had assumed the 2.0.0-alpha releases of react-hot-loader would have addressed any obvious webpack 2 issues, but I see the same error above 'import' and 'export' may only appear at the top level, due to the \"use strict\" at the top of the hot file.\nCan there just be a query option to disable the \"use strict\" or something?  I can certainly look into a PR for this if you think this would be a good way of solving this @gaearon \n. ",
    "lauterry": "Hi @mdreizin\nStill react-hot-loader + babel-loader + webpack 2 = :broken_heart: ?\nHave you found a solution or a workaround ?\nBest regards\n. ",
    "jwdomingo": "Hello all, any updates on Webpack 2 support?\n. Thanks @ctrlplusb I will look into it and update back\n. ",
    "ctrlplusb": "@jwdomingo I have RHL working with Webpack 2.\nSee here: https://github.com/ctrlplusb/react-universally\nNote: it's using the latest beta version of RHL\n. @manuel-colmenero are you sure about this?  I have an identical component structure to what you are describing in my projects and haven't had the same issue.  I'm using webpack v2 though... not sure if that makes a difference.  You can have a look at my project's components here.\n. Crazy excited for it.\n. @benwiley4000 try module.hot.accept your routes to cause a reload within your app.js. I had to do this for my case, perhaps it will work for you? Here is my working version: https://github.com/ctrlplusb/react-universally\n. Hi @aight8 and @calesce \nI recently got my boilerplate working properly with System.imports without any RHL workarounds.  \nOriginally I had issues when doing static path System.imports, like so:\njavascript\nSystem.import('../components/Foo')\nRHL would not hot reload them the moment I navigated to another route of my application.  As a workaround I used to have to do hard require statements whilst in dev mode:\njavascript\nif (process.env.NODE_ENV === 'development') {\n  require('../components/Foo');\n}\nThis was tedious to say the least as my async routes grew.  \nI then introduced an expression based version of my System.import, for example:\n``` javascript\nfunction asyncAppViewResolver(viewName) {\n  return (nextState, cb) =>\n    System.import('../components/App/views/' + viewName + '/index.js')\n      .then(module => cb(null, module.default))\n      .catch(err => console.log(err));\n}\nconst routes = (\n  \n\n\n\n);\n```\nThis is more concise, and strangely enough I no longer need to do any workarounds to get RHL working with this.  I suspect the way that webpack wraps these kinds of statements plays nicer with RHL.\nYou can try it out from my repo: https://github.com/ctrlplusb/react-universally\n. Hi guys, I will have a look at your configurations to see if I can spot anything different to mine. Btw if you are using react router 4 it seems to play much nicer with RHL. I have a working example in here. \nWill report back soon with findings.\n. Might be a helpful reference, I have RHL working with code split routes:\nhttps://github.com/ctrlplusb/react-universally \n. No problem. What are you using to serve your production code?\n. @prewk this is okay, keep your System.import statements, but then have a wrapping code block that imports the routes statically for dev environment only.\ni.e. \nif (process.env.NODE_ENV === 'development') {\n  require('./routes/Foo');\n}\nI have this set up in my start kit, so you could reference there if you like.  https://github.com/ctrlplusb/react-universally\n. You could rename it on import?\n. @kwelch I have a working Webpack 2 example here.\n. Hi all;\nreact-router v4 definitely plays a lot nicer with HMR!\nI have an example set up in my code-split-component module that shows usage of RR4 with RHL3, and it includes code splitting using Webpack 2's System.import API.\n\n_Update_: turns out I didn't have the babel plugin included in my example above.  Unfortunately RHL3 doesn't play nicely with the declarative CodeSplit component.  It requires you to update a component twice and then only shows the previous update.  Every subsequent update hot reloads the previous update.  I've had to remove RHL3 from my example, so it won't be much use to many.  Sorry.\n. DOH! Closing.\n. ",
    "thj-dk": "Any solutions to this?\n. ",
    "purple-force": "@mdreizin same to you, react-hot-loader + babel-loader + webpack 2 = \ud83d\udc94!\nany solutions?. @wkwiatek ,i tried,when compiling,there is no error now.But it doesn't work(HMR) anyway,even refresh mannually.\nhere is part of my config:\njavascript\n{\n    test:/\\.(js|jsx)$/,\n    exclude:/node_modules/,\n    use:[{\n        loader:\"react-hot-loader/webpack\"\n    },{\n        loader:\"babel-loader\",\n        options:{\n            presets:[[\"es2015\",{modules:false}],\"react\"]\n        }\n    }]\n}\npart of package.json:\njavascript\n\"devDependencies\": {\n    \"babel-core\": \"^6.22.1\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.22.0\",\n    \"babel-preset-react\": \"^6.22.0\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"beta\",\n    \"react-hot-loader\": \"next\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"^2.2.1\",\n    \"webpack-dev-server\": \"^2.3.0\"\n  },\n  \"dependencies\": {\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\"\n  }\nps:i use webpack-dev-server --hot --inline --open. Hmm,it does work!I saw your source code,too much invasive code.\nIs there any way to achieve this just by configuring webpack.config.js with react-hot-loader? \n. ",
    "wkwiatek": "@purple-force make sure you're using react-hot-loader@next which means 3.0 beta. . You may miss react-hot-loader/babel from babel plugins and react-hot-loader/patch in source code. \nHere is the one which I'm working on and works just fine: https://github.com/wkwiatek/react-webpack2-hmr . See it as a reference. \nHere are docs from next branch: https://github.com/gaearon/react-hot-loader/tree/next/docs. . Just to keep you up-to-date. \nWe're now finalizing docs, and have 3 more bugs to solve that are blockers for final release. All of these are on the behalf of react-proxy.\nWe agreed to merge next to the master as some people had problem with starting with React Hot Loader, and v1 is now stale.. Here are all of them: https://github.com/gaearon/react-hot-loader/milestone/2\nI'm going to focus on the react-proxy right after RHL v3 docs are done. . We just merged #260 so I think we can close this general issue for now. If you can see that something in the docs is not right or there is some room for improvements, feel free to open either issue or PR. \nThanks!. As System.import became deprecated, I would recommend that you take a look at two webpack guides:\n- https://webpack.js.org/guides/code-splitting-import/\n- https://webpack.js.org/guides/lazy-load-react/\nDoes anyone have problems with the latests versions of webpack / webpack-dev-server and dynamic import? \n. Thanks for reporting @olslash ! \nThe question is whether your problem is connected to just dynamic import or rather asynchronous routes (with React Router). Don't you use React Router here? \nIf yes -> we have another issue for that: https://github.com/gaearon/react-hot-loader/issues/288\nIf not -> could you provide some repo with minimal setup that fails? . @mqklin RHL v3 works with Webpack 2 final, and dynamic imports (see https://github.com/gaearon/react-hot-loader/issues/303#issuecomment-280954577). Most of the cases here are due to React Router v3 async loading issues (#288). \nIf there is something more, let me know, I'll definitely reopen it!. I just copy-pasted your code into my playground and it worked. However, it's doing full reload (you're changing the state of the root component). \nI'll try to take a look later what's causing the issues in your repo. I bet there are some config-related problems (which are probably not covered in docs).. I totally understand, and RHL should work with both so we should investigate it deeper. Would you mind to create an issue for that (as related to webpack middlewares) with your specific example? I just don't want to mess in this thread which is really about webpack 2 and System.import in general. . @MarshallOfSound it's the issue of react-proxy. If you wanted to start with this, just try to do a simple proxy object (with react-proxy@next), and play with a dubugger. We'll dive into react-proxy more once we have docs ready for RHL as it's the highest prio now. . @fkrauthan \nDid webpack@^2.2 together with webpack-dev-server@^2.2 solve your problems too? If yes, then we can close the issue.. We'll wait couple more days until you verify it was the case. Thanks!. Ok, so I'll close this one. Problems and solutions with React Router v3 are being discussed here: #288. \nBTW switching to React Router v4 should definitely solve the problems.. I managed to find the root cause of the problem as it appeared for us too. \nThe problem is strictly connected to the copy of arrow function created as a method in a plugin. However, it's OK when there's no async there.  \nI assume there's a problem with babel itself rather than methods used there, but there's a part of code I found harmful for this case: https://github.com/gaearon/react-hot-loader/blob/51dae3f4c86f21c143db838ff5d880433e4bc739/src/babel/index.js#L206\nI also created an issue with more details on babel's repo: https://github.com/babel/babel/issues/5078\nAnd here is the reproduction repository: https://github.com/wkwiatek/babel-async-test\nBTW: @calesce, do you need some help on the v3 milestone? . I'm closing it as we're going to focus on v3.. @alex-shamshurin could you give us some repository with complete, non-working setup?. I updated PR #494 so that the default behaviour will be console.error. \nHowever, if you like RedBox for some reason there will be a possibility to add custom error catcher (documented in docs/TipsAndTricks.md). \nThere's still an issue opened for tracking errors #164, so I believe we can continue thinking about better approach. Nice solution would be to have 'redbox' only on a component that fails, and it can be achieved on react-proxy level.\nWould that work for most of you guys? . I think problem is related to RR v3, and we have an issue for that: https://github.com/gaearon/react-hot-loader/issues/288. \nPlease feel free to reopen if there's something more. Thanks!. @andyearnshaw @IgorGee could you share some repository with minimal reproduction scenario? \nI'll try to understand why you needed to add such a workaround. \nIn case of code from @akoskm and @bjudson (https://github.com/gaearon/react-hot-loader/pull/240#issuecomment-258614348) it should not be needed as the path says to webpack which code should be allowed to hot update. If you remove that path, then every change from outside will also cause hot update instead of full reload which potentially can have unexpected results.. Thanks for that. I quickly went through, and it seems your code is probably not using ES2015 imports from webpack. Following code fixes the issue:\njs\nmodule.hot.accept('./components/App', () => {\n  const NextApp = require('./components/App').default\n  render(NextApp)\n})\nHowever, it should not be required when using webpack ES2015 built-in imports. To have that, in your .babelrc you should have either es2015 plugin or latest (latest currently includes es2015). \nThis is how to use latest with module: false (https://babeljs.io/docs/plugins/preset-latest/#usagees2015): \njs\n{\n  \"presets\": [\n    [\"latest\", {\n      \"es2015\": {\n        \"modules\": false\n      }\n    }]\n  ]\n}\nI'll mention it in the docs.. If you provide a path, and have ES2015 modules by webpack, then you only need to have this: \njs\nmodule.hot.accept('./components/App', () => { \n  render(App) \n})\nBut if you use babel transform for modules, then code looks like this: \njs\nmodule.hot.accept('./components/App', () => {\n  const NextApp = require('./components/App').default\n  render(NextApp)\n})\nIt's not a bug, it's how it works with and without transforming es2015 modules. It's also stated in docs/migration guide. Of course you can say that any change in any file will trigger hot reload and hot update (not only the './components/App' path) but I can't say what consequences it may have.. @w- Thanks for the guide here! I believe it will be helpful for people that are looking for answers in this thread. I'm going to close the issue right now as RHL 1.x is not going to work with webpack 2. However, you can switch to v3 (currently in beta).. @arjun810 are you able to provide some min repro scenario? . @mattkrick please open a PR into react-proxy, we'll take care of it as soon as docs are finished here in RHL repo. \nThanks!. I investigated this issue and it seems like it's caused by componentWillMount function: \nhttps://github.com/mqklin/hot-loader-lazy-modules-bug/blob/1dc695dbe9d1f5665882449b47c0676849895a57/src/App.js#L10.\nThe problem is that once your component is loaded, componentWillMount will not be called again when you don't have any changes while updating. And this is how RHL actually works at the moment. \nPlease try to follow lazy loading react guide on a webpack site (https://webpack.js.org/guides/lazy-load-react/) and let us know if it works for you. . Probably we should consider a case when some run-only-once method has a dependency on some other module that was hot updated and then provide a full reload for that component when async. . @calesce Could you check the idea? . Of course it's not meant to be like this :) \nThanks for giving PR!. We need more info. How you're adding AppContainer?. You have two plugins that will not play together. You should either decide if you want to go with [\"es2015\", {\"modules\": false}] or \"transform-es2015-modules-commonjs\". modules: false says to disable transform-es2015-modules-commonjs. \nDepending on the version you're using you can either use (for \"transform-es2015-modules-commonjs\"): \njsx\nmodule.hot.accept('./containers/App', () => {\n    const NextApp = require('./containers/App').default; // <--- this line is required for babel modules\n    ReactDOM.render(\n      <AppContainer>\n        <NextApp/>\n      </AppContainer>,\n      document.getElementById('root')\n    );\n  });\nor for webpack es2015 modules (modules: false):\njsx\nmodule.hot.accept('./containers/App', () => {\n    ReactDOM.render(\n      <AppContainer>\n        <App/>\n      </AppContainer>,\n      document.getElementById('root')\n    );\n  });. Isn't just slow with webpack? Is that react-hot-loader slowing things down? RHL relies heavily on webpack so I'd start with clean webpack build and see if the RHL is the problem here. . Please see a discussion here #462 and this PR: #494 . @sylhero could you try to put <Provider> into the <App>? Also, full repo would really help here.  . Thanks!. Hi @Derek-X-Wang, is your issue solved? Haven't had time to see what's going on in this topic yet. \nThanks @izhaknys for your help! . @rpoitras airbnb preset has also modules in it, so if you want to use webpack 2 modules, then you have to put [\"airbnb\", {\"modules\": false}] as @retroalgic suggested. If you don't have it, then you need to re-require it. \nI hope, it's solved now, thanks guys for your help! . @oshalygin it's fine, sorry for the delay, thanks for PR!. @glued Thanks!\n. @plag thanks!. Actually it depends also how you achieved hot reload for reducers. If you could give us some repo, we could maybe help somehow. Now we can only guess. . Thanks @kevinzwhuang for pointing it out!. I'm still wondering what's the best option here... RHL and RR v3 are not the best pair and because of that RHL feels like 'works sometimes' and many of the issues are strictly related to RR. I just think we should communicate this somehow. \nOn the other hand v4 works much better (and seems to be pretty solid) but it's still in beta. What about just adding some warning that v4 is still not a production version? . Definitely, will do!. ",
    "WwupengP": "reference to issue#98\n. ",
    "eblanchette": "Added additional instructions for HMR with webpack modules\n. ",
    "eisisig": "Sorry for posting in closed issue.\nI guess this is still relevant to v3? Sadly 1. we have a lot of state in UI components 2. We use the arrow way everywhere\nWas testing upgrade to v3\n. Do you have a plugin to save to disk while dev server is running? That seems to be happening to me so I had to exclude those files\njs\nnew plugins.WriteFilePlugin({\n    // exclude hot-update files\n    test: /^(?!.*(hot)).*/,\n}),. ",
    "tyleralves": "I know this is old, but I've established what I think of as an acceptable workflow for using fat arrow click handlers with hot reload. \nBasically just make a copy of the click handler within your render function, and replace the onClick with that copy. Make changes and enjoy the hot reload goodness, then go back and modify original class property.\n```\nimport * as React from 'react';\nconst styles = require('./styles.css');\nexport class MainContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: 'Tyler'\n    };\n  }\n  // Make sure to go back and modify this\n  handleDivClick = () => {\n    console.log('click!');\n    this.setState({\n      name: 'John'\n    });\n  };\nrender() {\n    // Temporary hot-reload copy\n    const handleDivClick1 = () => {\n      console.log('click!');\n      this.setState({\n        name: 'TyTy'\n      });\n    };\n    return (\n      // Replace onClick with copy\n      {Name: ${this.state.name}}\n    );\n  }\n}\n```. ",
    "matsch01": "@cornerolive did you find a solution to this issue? Having the same problem and can't find a solution.. ",
    "albertolive": "Yes, I had to update react-hot-loader to latest version and added to webpack dev file this:\nquery: {\n    presets: ['react-hmre']\n  }. Hi @gaearon! \nSorry, I didn't want to change before a stable version. I switched to 3.x and all works fine.\nThank you again!\n. ",
    "mqklin": "Answer: https://github.com/gaearon/react-hot-boilerplate/issues/55\n. @sophiebits I've seen your tweet about \"what prevent you from upgrading to React v16\".\nThis issue :( Because React16 works only with RHL3, and RHL3 doesn't work with decorators.. @neoziro I have this warning now after each update (I use connect decorator from react-redux):\n\nNot sure what is it though. I would like to support the project on opencollective, but can't find it there\n@neoziro are you planning to register there?. Cool! Glad I can support the project as much as I can. Hope I will be able to give back more! Thank you for you work!. Here is the simplest demo.\nThe problem is obviously not a webpack 2, nor a import(). Please look at my example, I use webpack 1.14.0 with require.ensure.\nCode:\n```\nimport React, { Component } from 'react';\nimport NotLazy from './NotLazy';\nexport default class App extends Component {\n  state = {\n    Lazy: () => null,\n  };\n  componentWillMount() {\n    setTimeout(() => {\n      require.ensure([], () => {\n        const Lazy = require('./Lazy');\n        this.setState({ Lazy: Lazy.default });\n      });\n    }, 1500);\n  }\n  render() {\n    const { Lazy } = this.state;\n    return (\n      \n\n\n\n    );\n  }\n}\n`NotLazy` is editable, `Lazy` is not.  `\"react-hot-loader\": \"^3.0.0-beta.6\"`, `\"webpack\": \"^1.14.0\"`, `\"webpack-dev-middleware\": \"^1.8.3\"`, `\"webpack-hot-middleware\": \"^2.12.2\"`. @wkwiatek why did you close this? Is it fixed now?. @wkwiatek check this https://github.com/mqklin/hot-loader-lazy-modules-bug webpack 2, RHL 3, the simplest config, no React Router. Doesn't work.. Thank you for the example config. I can't use `webpack-dev-server` because sometimes I need to mock backend, that's why I use `webpack-dev-middleware` and `webpack-hot-middleware`.. Please look https://github.com/gaearon/react-hot-loader/issues/490. Yes, thank you! I've reinstalled `node` an now it works\n. @wkwiatek is this fixed now? I got this error too. How can I workaround it?. @andreatosatto90  no, I still use v2 :( I tried this https://github.com/gaearon/react-hot-loader/issues/391#issuecomment-268638968 but it causes state reload - https://github.com/gaearon/react-hot-loader/issues/642, so I'm just waiting for updates on this issue.. Confirm, it's fixed in v4. Seems like it is. I think it's definitely not webpack's bug. `import()` (I use `dynamic-import` plugin) is converted into `require.ensure`, and this example works nicely with HMR v1.3.1. Please note, I don't use react-router, and use webpack v.1. My example is as small as possible. . That code is so verbose... I'm sure it's work, but I don't want to use it. I got the point that I should call `require` somewhere every time component updates.\nI included `require('./Lazy');` inside `componentWillReceiveProps` and it works now:\ncomponentWillReceiveProps() {\n  if (DEV) require('./Lazy');\n}\n```\nYou said:\n\nAnd this is how RHL actually works at the moment.\n\nWill this change in the future?. Thanks for the bug label. I hope this will be fixed someday.. Same issue, this is blocking me from using RHL v3. I'm getting the error with this plugin as well. \nAlso I realised that HOCs cause component state reload now.\n@quangbuule could you confirm this part of bug as well? Does your plugin assume to fix state reload bug?\nThank you.. @quangbuule doest react-transform-hmr work with React16 and decorators?. @neoziro so, as I understand, I can't use RHL3 with decorators, right? Because state is reset on every hot reload?. @theKashey @transcranial still React Hot Loader: this component is not accepted by Hot Loader.\nHere is a repro project:\nhttps://github.com/mqklin/rhl3-decorators-bug\nAnd a gif:\n\nYou can see that state breaks only if I use decorators (I use extract-hoc, doesn't help)\n. I just tried it with react-transform-hmr and got exactly the same problem (works only without decorators). Here is PR: https://github.com/mqklin/rhl3-decorators-bug/pull/1/files. Still have this problem (beta.11)\nWill be able to reproduce next week. @neoziro \nHere is it: https://github.com/mqklin/rhl3-decorators-bug\n```\nimport React, {Component} from 'react';\nexport default class App extends Component {\n  state = {\n    showInitialFetchSpinner: true,\n  };\ncomponentDidMount() {\n    setTimeout(\n      () => this.setState(() => ({showInitialFetchSpinner: false})),\n      1500,\n    );\n  };\nrender() {\n    const {showInitialFetchSpinner} = this.state;\n    return (\n      \n        {showInitialFetchSpinner && Spinner...}\n        \n\n    );\n  }\n}\nclass Footer extends Component {\n  render() {\n    return Footer (edit me);\n  }\n}\n``\nI expect thatediting doesn't causereloading andcomponentDidMountcalling.. @theKashey thank you! I movedhottoApp.js` and it works now.\nIf it's not a bug, it can be closed.. ",
    "ElegantScripting": "Whoops, wrong repo.\n. ",
    "SeriousM": "Oh yes, that would be sooo awesome! Please! \n. ",
    "filoxo": "You mean like what's already available with angular2-hot-loader? More info on Minko's blog post about Angular 2 Hot Loader. It is still rough, but then again Angular is still in beta so... use at your own discretion with that caveat. \n. ",
    "Schniz": "@peterpine83 have you fixed it?\n. as stated in https://github.com/fortruce/relay-skeleton/issues/1#issuecomment-131881653, we can in the meantime split the containers and the stateless components into 2 separate files (and making sure the stateless component is a class)\n. ",
    "Willianvdv": "fwiw: I fixed this by exporting the container and the component, no need to split into multiple files.\nMy person.js:\n```\nimport React from 'react';\nimport Relay from 'react-relay';\nexport class _Person extends React.Component { ... }\nexport var Person = Relay.createContainer(_Person, { ... })\n```\nMy application.js:\nimport { Person } from './Person'\n. ",
    "cdroulers": "It would be very useful to have this small workaround in the docs! Google sent me here and it solved my problem immediately!\n. ",
    "Glavin001": "Thank you, @Willianvdv ! \ud83d\ude03 \n. ",
    "nsuthar0914": "@Willianvdv thanks !. ",
    "yazonnile": "just a quick shot :)\njs\n'webpack-hot-middleware/client?reload=true'\nreload=true ??\nreload - Set to true to auto-reload the page when webpack gets stuck.\nhttps://www.npmjs.com/package/webpack-hot-middleware\n. ",
    "mjhamm75": "Thanks, I tried that.  It didn't work for me.\nOn Tue, Mar 1, 2016 at 6:43 AM Slava Z notifications@github.com wrote:\n\njust a quick shot :)\n'webpack-hot-middleware/client?reload=true'\nreload=true ??\nreload - Set to true to auto-reload the page when webpack gets stuck.\nhttps://www.npmjs.com/package/webpack-hot-middleware\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/232#issuecomment-190728606\n.\n. \n",
    "acthp": "yeah, I'm not sure what code would be helpful. The react component is roughly like this (pattern for making react ignore DOM manipulation by 3rd party lib):\njavascript\nrender(): {return <div ref='root'/>},\nshouldComponentUpdate(): {return false},\ncomponentDidMount(): { drawHighchart(this.refs.root, this.props); }\nThe result is an error thrown on 1st load (not after a hot load event) in highcharts, on this line:\njavascript\nseries.pointClass.prototype.applyOptions.apply(pt, [data[i]]);\nbecause series.pointClass is some react-hot-api thing instead of the Highchart object. From chrom devtools:\njavascript\nseries.pointClass\nfunction () {\n      if (storedPrototype[key]) {\n        return storedPrototype[key].apply(this, arguments);\n      }\n    }\nFrom a brief inspection of the code, it looks like react-hot-api walks a list of components & modifies them in this way, but I'm not sure how it's discovering & modifying the highchart object.\n. Also, it works fine with hmr disabled.\n. It looks a bit like rhl modifies any exported object with a render() function. Is that correct?\n. That does appear to be the issue. If I wrap the export in another object, like\njavascript\nmodule.exports = {Highcharts: Highcharts}\nthe problem goes away, presumably because only the top-level keys are searched for objects with render method.\nMight be nice to document this behavior, as the failure mode is inscrutable.\n. ",
    "Prophet32j": "I'm guessing that the react transform library will remove the \"highly experimental\" language from it?\n. ",
    "alfonsogarciacaro": "Yeah, sorry I forgot to close the PR :/ Thanks for that!\n. ",
    "caiyongmin": "it maybe about unacceptedModules field. when see the source code.\n\n. I fix it, the problem is not about above three files, it's my fault, I straight edit root component, I should separate to some file and require what I need. Reference your Troubleshooting.md doc.\n. ",
    "jDeppen": "My issue was fixed when I switched my root component from\nclass LayoutContainer extends React.PureComponent {\nto\nclass LayoutContainer extends React.Component {\nNote: this is solved in 3.x. ",
    "srinivasdamam": "@EliasJorgensen Did you found the solution? I'm also facing the same issue.. ",
    "nfcampos": "@gaearon there's a bug with the babel plugin, it thinks variables babel creates to transpile arguments spread should be tagged, see this gist, see _len and _key and args\nthe issue appears to be it thinks those three variables are in the global scope when they are in fact not\nhttps://gist.github.com/nfcampos/216edf34ae47dfff809df41c58b58c8f\n. > hoist the bodies of the function properties into hidden methods on the prototype with mangled names\ncan you do that without a babel plugin?\n. yeah but then aren't we back to needing to identify classes that look like react components at compile time?\n. Hmm, I see, we might hit some edge cases related to the differences between regular functions and arrow functions, so we should bail out on use of super, new.target, and arguments as you said, and we also need to convert arrow functions without curly braces to regular functions with body\njs\nclass Stuff {\n  doSomething = (e) => this.x(e.stuff())\n}\njs\nclass Stuff {\n  doSomething = (e) => {\n    return this.___doSomethingqwertyu234567(e);\n  },\n  ___doSomethingqwertyu234567(e) {\n    return this.x(e.stuff())\n  }\n}\nso maybe it might be better to translate it to\njs\nclass Stuff {\n  doSomething = (e) => {\n    return this.___doSomethingqwertyu234567(e);\n  },\n  ___doSomethingqwertyu234567(e) {\n    return ((e) => this.x(e.stuff()))(e)\n  }\n}\nthis way the function would still be an arrow function... on the other hand we're creating a function on every invocation... \n. yeah you're right, this doesn't need to work for everything.\nI guess I'm just afraid of anything that changes code behaviour between development (where you'd use react hot loader, and class properties would be converted in this fashion) and production where you don't use it, especially if it changes the behaviour in subtle ways, like the differences between an arrow function and a regular function.\n. @gaearon I think you have to be the one to enable Travis no?\n. yep I'll do that\n. I've added it. it appears to be working\n. @gaearon I think a better solution might be to keep it as is but instead of setting __source we set [Symbol.for('rhl-source')]. That will never get hoisted so it's safe\n. We don't need createElement to run? Then how do we know which of the tagged functions/exports are react components and which are just regular functions?\nNuno Campos\n```\n\n```\nFrom: Dan Abramov notifications@github.com\nSent: Sunday, May 1, 2016 2:40 PM\nSubject: Re: [gaearon/react-hot-loader] React Hot Loader 3.0 might prevent views updates (#266)\nTo: gaearon/react-hot-loader react-hot-loader@noreply.github.com\nCc: Comment comment@noreply.github.com, Nuno Campos nuno.campos@me.com\nWe can\u2019t assume the user has Symbols. Also this fixes issues with React Router because we don\u2019t need createElement to run. I think this would be a better solutions, at least not until browsers provide an equivalent of _source.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub  \n. Also, is it a problem for a development tool to depend on the existence of Symbol?\n. I see. Yes that sounds like it will work :) (And yes I forgot Object.getOwnPropertySymbols existed)\nNuno Campos\n```\n\n```\nFrom: Dan Abramov notifications@github.com\nSent: Sunday, May 1, 2016 2:48 PM\nSubject: Re: [gaearon/react-hot-loader] React Hot Loader 3.0 might prevent views updates (#266)\nTo: gaearon/react-hot-loader react-hot-loader@noreply.github.com\nCc: Comment comment@noreply.github.com, Nuno Campos nuno.campos@me.com\nAlso, is it a problem for a development tool to depend on the existence of Symbol?\nNot a big problem but a good thing to avoid when easily possible. But this is not the main reason why Symbol doesn't seem like a solution to me. React Redux could copy symbol properties too, if it wanted\u2014this is still easy to break. And the bigger issue is the problems with stale types that #272 so neatly avoids. The logic in resolveType was really brittle and full of edge cases but now it\u2019s easy to grok. I think it\u2019s an important improvement. (And RR support too.)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub  \n. (I don't see any way to allow providing the component as children and not force update every time componentDidUpdate is called, but I might be wrong.)\n. Thanks. I will. \n. You might want to test this with the kind of tests I have in #269 replacing the call to tag with the set on the global map\n. airbnb config is too agressive for the tests, I was trying to get this set up but found myself having to disable at least these for the tests (at least these because I only looked at one file, this is kind of boring haha)\n\nShould we have a different .eslintrc for the tests folder?\n. theres no need to patch React.DOM.* beause we only care about composite components right?\n. :) also, how about patching only the internal react/lib/ReactElement? surely they all import createElement from that one no?\n. I've added the failing test case for this on #278 \n. @gaearon should I merge these failing tests before we add the fix?\n. I think this comes down to our babel plugin needing to be aware of decorators, otherwise it only wraps the decorated hoc, not the original component that was decorated\n. Yeah that sounds like it'd work\n. Yeah --fix helps at least with the semicolons, adding semicolons in hundreds of lines manually would have been terrible\n. @gaearon you wrote some of the files without const, import, stuff like that, any reason to keep them like that, since we're building everything with babel? I need to either change them or change the eslint rules\n. add the plugin to babel?\n. hmm, not worth it then I think. basically I'm getting a bunch of error  'use strict' is unnecessary inside of modules from this rule http://eslint.org/docs/rules/strict + airbnb  config adding parserOptions: {sourceType: 'module' } to the eslint config.  So all of the non-es6 modules files in src/ are being interpreted as being modules and thus not needing 'use strict'. but i dont think it's possible to disable parserOptions on a single file. should i just disable the strict rule?\n. what i'm saying is that it currently works great the way it's written so instead of changing everything to es6 modules just to appease eslint it's easier to selectively disable the offending rule, no?\n. Alright, I've finished fixing all the linting errors. Give it a look if you want, I think/hope I didn't break anything. Let's merge this soon to avoid merge conflicts\n. You're right, thanks!\n. Hi @capaj, can you bump to 1.2.6 to include this commit https://github.com/KeywordBrain/redbox-react/commit/719185de?\n. Hi @Mistereo \nThis is intended, react-hot-loader@3 patches React.createElement(<ImportedComponent /> is equivalent to React.createElement(ImportedComponent)) so that it returns an element of a proxy wrapper for your components instead of the original component, this is part of allows to replace methods on the component without unmounting.\nDo you have any need for <ImportedComponent />.type === ImportedComponent to be true?\n. @Mistereo no, I don't think it can be avoided with the current architecture\n. @calesce this looks awesome! what do you think of adding more isolated tests that do not include the es-2015 or stage-1 babel presets, to see what out plugin is actually doing on its own. something like this https://gist.github.com/nfcampos/275ada99b630ee9524b374b0588b36c3\n. @calesce one other thing i just remembered, we might have to leave alone class properties that use arguments in the body of the function, because the way babel compiles them (see http://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=stage-2&code=class%20Foo%20%7B%0A%20%20bar%20%3D%20(a%2C%20b)%20%3D%3E%20%7B%0A%20%20%20%20console.log(arguments)%0A%20%20%20%20return%20a(b)%3B%0A%20%20%7D%0A%7D ) they are the arguments of the constructor, and the way we compile them they are the arguments to the method we create on the class.\nedit: same is true of the use of new.target (see http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions-runtime-semantics-evaluation), not true of super because apparently it's not permissible to use it at all inside a class property (see http://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=stage-2&code=class%20Foo%20%7B%0A%20%20bar%20%3D%20(a%2C%20b)%20%3D%3E%20%7B%0A%20%20%20%20console.log(super)%0A%20%20%20%20return%20a(b)%3B%0A%20%20%7D%0A%7D)\n. @calesce take a look at this, I think it addresses what I mentioned above of opting out on use of arguments or new.target https://github.com/calesce/react-hot-loader/pull/1 sorry about the confusion of opening a PR against a PR, didn't know how else to do this, I think if you merge my PR this Pr will be updated with my changes\n. @calesce yep I believe the fix would have to be in react-proxy, I played around with it on friday but haven't figured out what exactly is different about native class that makes this fail\n. @calesce yeah I noticed, not sure why the tests are not failing but this is\n. Hi @dpwrussell! Thanks for bringing this to our attention. This should be fixed upstream in react-proxy (by making the length property of proxied methods track the length of the underlying method, will only be possible in browsers that support configurable length property on functions, http://kangax.github.io/compat-table/es6/#test-miscellaneous_function_'length'_is_configurable). I'm working on a fix and hope to have it out soon-ish.\n. Yes this looks great! Do you mind adding a test for an async arrow function like this async () => await 2 with no body?\n. @loganfsmyth this looks great! do we want to leave a comment in the code saying why we did this seemingly weird thing (assigning the result of a function that doesn't return anything to a variable we don't otherwise use)?\n. yeah I'm aware of this issue, but still haven't thought of a good way of detecting this in static analysis\n(thanks for the repro btw)\n. @janv if you look at the output of fixtures of the babel tests on this branch you can see that this should be correct\nedit: which obviously doesn't fix your issue, should just make it clearer to look for it\n. I'm not familiar with Typescript enough to know whether the definitions belong here or in the definitely-typed repo. \n. yay for block-scoped class declarations :)\n. I think this will update the proxy even if createElement is called with stale type only if we additionally keep a typesById map and do var latestType = typesById.get(id) after this line and use this latestType to update the proxy. Otherwise it doesn't solve the router problem\n. @gaearon calling deepForceUpdate in componentWillUpdate makes the children component re-render twice every time it changes, one due to the regular react lifecycle, another due to the deepForceUpdate. If we moved deepForceUpdate to componentWillReceiveProps it would re-render only once. Do you see any downside?\n. Good point.\n. using double quotes for jsx and single quotes for everything else isn't weird?\n. I have, that's why I created a .eslintignore file\n. double quotes it is then \ud83d\ude04 \n. Good catch\n. Yeah this one looks pretty silly in some places :)\n. I'll do that later\n. @glenjamin yeah I think that's the idea\n. because the first alphas had the component + prop way and later it was changed\n. Yep do switch to children. The other way is there just for backward compatibility now\n. @calesce it might be worth it to test that the method is replaced without remounting the component, eg. like it is done here https://github.com/gaearon/react-hot-loader/blob/next/test/AppContainer/AppContainer.dev.js#L182\n. same as above about testing that it doesnt remount\n. we could use stage-2 instead of stage-1 but it doesn't really matter\n. not related with this PR I think but what's up with this ; and the other one at the end?\n. @janv I'd noticed that before and thought it was weird too (like, how would it work at all if it was really outputting this code?), but that's apparently what happens when you use babel with only babel-plugin-syntax-class-properties, without the corresponding transform plugin. (which we're doing in these test fixtures). I'll fix these tests to use both plugins so that this confusing output doesn't confuse anyone in the future. \n. children should be a prop here too, no?\n. ",
    "anaibol": "Asking here because I am not sure to open an issue for..\nWhat's the diference between React Hot Loader and React transform / HMR? I thought that React Hot Loader was dead in favor of React Transform.\n. ",
    "jcreamer898": "\n. ",
    "ChrisCates": "@gaearon Is this ready for development use? :)\nI'm using an outdated hot reload atm. hehe\n. Things looking great so far @gaearon keep up the good work buddy! \nI'm blessed to have people like you make my development career a better experience.\n. ",
    "ntucker": "I get the redbox error when I first load a page with an error, but whenever it is fine, and then I save an error, I get in the console:\n\n[HMR] Cannot apply update. Need to do a full reload!\n\nAnd all hotreloading no longer works. Here's my config modifications for dev mode\njavascript\nconfig.entry.App = [\n  'react-hot-loader/patch',\n  'webpack-dev-server/client?http://localhost:3000/',\n  'webpack/hot/only-dev-server',\n  ...config.entry.App,\n]\nconfig.plugins = [\n  new webpack.HotModuleReplacementPlugin(),\n  new webpack.NoErrorsPlugin(),\n  ...config.plugins,\n]\nconfig.devServer = {\n  hot: true,\n  port: 3000,\n}\n. I'm getting \n\n[react-router] You cannot change ; it will be ignored\n\nHow exactly do I configure react-router with this?\n. Whenever I change a module, the console logs say it's updated, but nothing changes. I did some tracking on module updates:\n\nChanged module is being executed\nComponent render function is being run\nHowever, the module code is still old (changing the console.log message doesn't get reflected).\n\nIs webpack somehow not actually updating the code, but just re-executing the existing modules? (I'm using webpack 1.14.0). @dobryanskyy nope, still broken.. Yes, I love the name HotContainer much more.. Thanks for working vigilantly on React 16 compatibility @neoziro ! :). I'm having troubles when I yarn link a package that uses hooks. It works fine if it's installed normally though. I'm getting the 'classes cannot use hooks' issue. Or at the very least add that to the instructions? They are quite confusing now with about 4 different ways to do things and it's not clear if they're referring to the same way or old ones. Maybe move ALL outdated methods to other files and just focus on the options for the 'latest way' to do things on the main readme.. React-Hooks should work out of the box if you are using version 4.6.0 or above (pureSFC is enabled by default).\nfrom the readme. so I guess that's not true @theKashey ?. What does Having dom-patch enabled would solve any possible issue (ignoreSFC option is enabled) even mean? How is the parens and the first statement even related?. javascript\nimport { hot } from 'react-hot-loader/root';\nimport { setConfig } from 'react-hot-loader';\nsetConfig({ pureSFC: true });\nexport default hot(withRouter(App), { errorBoundary: false });\nIs this how I'm supposed to do it now? I also have webpack alias for the dom thing, and using the babel plugin.. You might consider adding https://github.com/gaearon/react-hot-loader/issues/1088#issuecomment-434912466 to the docs.. @theKashey well i have hotreloading working perfectly without yarn link, but it is still giving that error even after doing setConfig.\nhttps://github.com/ntucker/anansi/tree/master/examples/typescript is the project. the yarn link is for rest-hooks. ",
    "sarovin": "@ntucker i'm trying. See this --> http://stackoverflow.com/questions/37466598/react-hot-loader-3-with-webpack-dev\n. ",
    "ericclemmons": "Dunno if anyone else has this issue, but...\nWhen using Webpack with devtool: \"cheap-eval-source-map\" and react-hot-loader/babel, I get the following error (even in an empty file!):\nERROR in ./src/client.js\nModule build failed: TypeError: /Users/Eric/Projects/HigherEducation/platform/src/widgets.js: Cannot assign to read only property 'mappings' of {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourcesContent\":[]}\nIt has the same problem with inline-sourcemap as well, so it must be issue with using sourcemap?\n. ",
    "MoOx": "Is this normal that componentWillMount is called for components behing \"hot reloaded\"?\nIf not, I am having stateful (class) components rendered from stateless (function) components, can this be the cause of this behavior?\nFor example I currently have some data fetched in this part of the lifecycle and so I am getting new fetch() call each time I update the render, which is not optimal in my case (but I can understand it can be convenient in some other cases tho).\n. @thecentric you probably don't have the dependency installed. Try \"npm install\" if the deps is already specified in your package.json, or \"npm install --save-dev react-hot-loader@^3.0.0-beta.2\" if not.\n. I am seeing this message\nReact Hot Loader: App in /.../web/index.js will not hot reload correctly because index.js uses <App /> during module definition. For hot reloading to work, move App into a separate file and import it from index.js.\nHere is my index file\n``` js\n// @todo @ flow\n/ eslint-disable import/max-dependencies /\nimport \"react-hot-loader/patch\" // HMR react patch\nimport \"babel-polyfill\"\nimport \"whatwg-fetch\"\nimport { AppRegistry } from \"react-native\"\nimport React, { Component } from \"react\"\nimport { AppContainer as HotLoaderWrapper } from \"react-hot-loader\"\nimport { Provider as StoreProvider } from \"react-redux\"\nimport { hideSplashScreen } from \"../src/modules/splash-screen\"\nimport AppRoot from \"../src/app/AppRoot\"\nimport createStore from \"../src/app/redux/store.js\"\nconst store = createStore()\n// react-hot-loader need a class\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends Component {\n  render() {\n    // require for correct hot loading\n    const AppRouter = require(\"../src/app/AppRouter/web.js\").default\nreturn (\n  <HotLoaderWrapper>\n    <StoreProvider store={ store }>\n      <AppRoot>\n        <AppRouter />\n      </AppRoot>\n    </StoreProvider>\n  </HotLoaderWrapper>\n)\n\n}\n}\n// copy all assets\nconst assets = require.context(\"./assets\", true, /.*/)\nassets.keys().forEach(assets)\n// app placeholder\nconst rootTag = document.createElement(\"div\")\nrootTag.innerHTML = \"...\"\ndocument.body.appendChild(rootTag)\n// start react app, react-native way\nAppRegistry.registerComponent(\"WynsureGroupAdmin\", () => App)\nAppRegistry.runApplication(\"WynsureGroupAdmin\", { rootTag: rootTag })\nhideSplashScreen()\nif (module.hot) {\n  module.hot.accept(\"../src/app/AppRouter/web.js\", () => {\n    AppRegistry.runApplication(\"WynsureGroupAdmin\", { rootTag: rootTag })\n  })\n}\n```\nThat said hot loading works perfectly fine\nBut this notice was bothering me, so I tried to do what the message said. So I did this\nindex.js\n``` js\n// @todo @ flow\n/ eslint-disable import/max-dependencies /\nimport \"react-hot-loader/patch\" // HMR react patch\nimport \"babel-polyfill\"\nimport \"whatwg-fetch\"\nimport { AppRegistry } from \"react-native\"\nimport { hideSplashScreen } from \"../src/modules/splash-screen\"\nimport App from \"./App.js\"\n// copy all assets\nconst assets = require.context(\"./assets\", true, /.*/)\nassets.keys().forEach(assets)\n// app placeholder\nconst rootTag = document.createElement(\"div\")\nrootTag.innerHTML = \"...\"\ndocument.body.appendChild(rootTag)\n// start react app, react-native way\nAppRegistry.registerComponent(\"WynsureGroupAdmin\", () => App)\nAppRegistry.runApplication(\"WynsureGroupAdmin\", { rootTag: rootTag })\nhideSplashScreen()\nif (module.hot) {\n  module.hot.accept(\"../src/app/AppRouter/web.js\", () => {\n    AppRegistry.runApplication(\"WynsureGroupAdmin\", { rootTag: rootTag })\n  })\n}\n```\nApp.js\n``` js\n// @flow\nimport React, { Component } from \"react\"\nimport { AppContainer as HotLoaderWrapper } from \"react-hot-loader\"\nimport { Provider as StoreProvider } from \"react-redux\"\nimport AppRoot from \"../src/app/AppRoot\"\nimport createStore from \"../src/app/redux/store.js\"\nconst store = createStore()\n// react-hot-loader need a class\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends Component {\n  render() {\n    // require for correct hot loading\n    const AppRouter = require(\"../src/app/AppRouter/web.js\").default\nreturn (\n  <HotLoaderWrapper>\n    <StoreProvider store={ store }>\n      <AppRoot>\n        <AppRouter />\n      </AppRoot>\n    </StoreProvider>\n  </HotLoaderWrapper>\n)\n\n}\n}\nexport default App\n```\nNo message, but hot loading don't work anymore.\nI tried to replace my require().default in App.js by an import, no luck.\nI am getting:\n[HMR] Cannot apply update. Need to do a full reload!\ndev-server.js:34 [HMR] Error: Aborted because 106 is not accepted\nUpdate propagation: 106 -> 355\n    at hotApply (http://localhost:8080/web.28ffd53129937380cc7e.js:426:30)\n    at hotUpdateDownloaded (http://localhost:8080/web.28ffd53129937380cc7e.js:284:13)\n    at hotAddUpdateChunk (http://localhost:8080/web.28ffd53129937380cc7e.js:264:13)\n    at webpackHotUpdateCallback (http://localhost:8080/web.28ffd53129937380cc7e.js:8:12)\n    at http://localhost:8080/0.21264227de06970aa02b.hot-update.js:1:1\nThen full page loading. What am I doing wrong?\n. @calesce sorry I forget to mention it's code for the web, thanks to react-native-web, aliased to react-native via webpack.\n. Not sure you have read correctly my comment. It's working when everything is in one file (kind of in the example you posted), but I got a warning this will not work and I should explode into 2 files. But with 2 files, it does not work anymore. So this is confusing :)\n. ",
    "leidegre": "@MoOx it's work in progress. I think I see the same thing. I don't think it's supposed to be like that but the intricacies of why that is eludes me. You should however see a corresponding componentWillUnmount and if you're component is built proper it should be able to deal with it even though it loses internal state. It's unfortunate but the current state of things.\n. @nathanmarks What exactly is the new hot loader? What packages which versions? I'm using react-hot-loader@3.0.0-beta.2.\n. @nathanmarks are you using react-router because I think this is the reason I'm seeing this. I'm using a hack to force React.createElement to happen.\n. @gaearon I'll slap together a repo and see if I cannot reproduce this or if it's just my perception of the situation that is off.\nThe hack I'm refering to is this react-router hack https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-211504531\n. @gaearon Here you go https://github.com/leidegre/react-hot-loader-beta.2-test\nThis is not just the react-hot-loader it's a lot of stuff, but I get a unmount/mount to happen if I just change client/chrome/welcome.jsx and save the changes. You can see this if the console window is open when the update is pushed to the browser.\nI've fooled around with toggling things off. I have so far just assumed that it is the react-router hack that's the culprit but I removed that and it's still happening.\nHere's a screenshot of the minimal set of code I used to still have the unmount message appear. At this point the Redux Provider and react-router Router components are no longer in there.\n\nPlease let me know if there's something I can do to help out more.\n. @defr0zen have you tried beta.5?. @lekhnath didn't work for me and even if it did, I need an explanation for why this would be needed, what's going on!?. @lekhnath if you have a complete example I could look at, I could probably help. I've been through this a couple of times, most recently I've been working with code splitting and I think it's necessary to just keep these things separate for everything to under different circumstances.. @Pau1fitz been running with React 16 beta.5 for a while now, and it has been working just fine.. Should be this.props.props and not this.props.prop, no?\nSee https://github.com/gaearon/react-hot-loader/pull/285\n. Curious. Why does both ways exist?\n. I'll switch over to use children as a primary workaround for the bug and I think if the component/props way gets dropped that's just better. Assuming it has no other purpose.\n. ",
    "nathanmarks": "@MoOx @leidegre \nThey shouldn't be mounting/unmounting unless that's a result of one of your own componentWillUpdate functions. Mine are just running the update hooks with the new hot loader.\n. @leidegre Yeah, 3.0.0-beta.2 is the new hot loader. The AppContainer uses forceUpdate -- unless I've missed something, doesn't that only trigger an update? I'm not sure everything remounting is supposed to happen. I'm using it with react-router as well btw.\n. @leidegre I don't think you can use a functional component for the hot root. @gaearon can confirm though\n. @Kovensky thanks for the clarification!\n. @rosskevin I'm experiencing the same thing. Haven't had a chance to dig in yet though.\n. @dpwrussell it's fixed in #314 \n. @vinhlh see https://github.com/gaearon/react-hot-loader/pull/314\nthis is a dupe of #312 btw\n. @calesce One thing I noticed, I don't know if this is redbox related but I'm not getting sourcemapped stacktraces in redbox. When I switch to vanilla error handling (console, no redbox) I get stacktraces. Have you experienced this?\n. @calesce That's a bit rubbish. How do you feel about removing redbox as the default error reporter and using the console instead? \n. ",
    "Jessidhia": "@nathanmarks functional root components work fine (as long as you never ever hot accept them in the same module as they are defined; the transformed code tries to create a react-proxy of the component, which will fail (and crash immediately if you use an arrow function)).\nThe problem @leidegre is having (*assuming webpack2, but hopefully regular babel/ts transforms are the same) is not using ES6 modules correctly. When you use \"export default\", you create a static (i.e. not live!) binding, and the commonjs re-import is unnecessary when the modules are done correctly.\njs\n// root.jsx\n// note: NO default!\nexport function Root (props) { ... }\n``` js\n// index.ts\nimport { Root } from './root'\nrender()\nif (module.hot) {\n  // no require, Root is a live binding, so you can just use it directly\n  module.hot.accept('./root', () =>\n    render())\n}\n```\nIf you really want to be able to just import Root from './root' while keeping it a live binding, change root.jsx to:\njs\nexport { Root as default }\nfunction Root (props) { ... }\n. Using anything that is not an ES6 import is probably the biggest complicating factor for hot reloading.\nAlso note that, if you save the require('./About').default in the component property, it will never ever get updated if you don't write code to do it. This would also be the case with ES6 import though (imports are live, but if you save a copy of the current value elsewhere the copy isn't).. Just hit this, and I have the same symptoms/conclusion as @elodszopos.  Components belonging to an async chunk will log, to the console, as if they have been updated,  but their appearance in the UI doesn't change. Even if the component is something simple like only returning <div>foo</div>, changing it to <div>bar</div> will not update the render if the component is in an async chunk (as cut by System.import), but will if the component comes from a regular hoisted import.\nThis also happens if the component is imported through a hoisted import if the file that has the import / module.hot.accept is a file loaded through System.import; the rerender will misbehave.\nAs this is an accept for a sync import (inside an async chunk), code generated by webpack is still the same as usual:\n``` js\nimport Component from './module/request'\nmodule.hot.accept('./module/request', acceptCallback)\n```\nis compiled as (whitespace / newlines added, identifiers simplified for readability):\n``` js\n/ harmony import / var WEBPACK_IMPORTED_MODULE_4__module_request =\n  webpack_require(/! ./module/request / \"moduleId\");\nmodule.hot.accept(/! ./module/request / \"moduleId\",\n  function(WEBPACK_OUTDATED_DEPENDENCIES) {\n    / harmony import / WEBPACK_IMPORTED_MODULE_4__module_request =\n      webpack_require(/! ./module/request / \"moduleId\");\n    (acceptCallback)(WEBPACK_OUTDATED_DEPENDENCIES);\n  }\n);\n```\nEDIT: to clarify, the acceptCallback is called; but nothing changes when ReactDOM.render runs.\n. Correction: hot reloading actually does work, but only in one of the copies of the component. Only last component to be rendered in the first pass gets updated.\nIs webpack losing the module.hot.accept callbacks?\nEDIT: looks like webpack only keeps the last callback. I changed my code to a method where I keep track of each callback, and execute all of them in the callback actually given to module.hot.accept.\n. This seems related to #242. If it's not supported at all, I wonder, then, why did it (appear to?) work when transform-es2015-classes was used...\n. (I am just guessing but) I believe it is AppContainer by analogy with React Native.\n. Correction: this happens even with the es2015 preset, as the plugin run before presets, and it deletes the async keyword that the transform-async-to-generator relies on.\n. I found that running a react-hot-loader pass completely separate from a babel pass with all other plugins avoided these issues, even if I edited the react-hot-loader code to make it not skip transforming arrow functions.\nThe problem seems to happen when it interacts with other transforms; something is executing out of order and changing things before react-hot-loader gets to handle them. At first I thought it was related to mutating nodes and not properly t.cloneing them, but no matter how much cloning was done the result code was still broken.\nI then tried printing the node that react-hot-loader was trying to transform to begin with, and it had already been modified by other transforms. Maybe react-hot-loader/babel needs to do all its changes as a sub-traversal on Program enter.. It looks like DefinitelyTyped prefers that libraries bundle their own types:\n\nIf you are the library author, or can make a pull request to the library, bundle types instead of publishing to DefinitelyTyped.\n\nThere are definitions in DefinitelyTyped now (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12632), though, so this could be closed.\n. Yes, module.hot.accept() will stop the hot reloading propagation.\n. ",
    "wmertens": "@Dharmoslap did you try using the webpack plugin? That should work\u2026\n. Also remember, this is dev-only, so the production application is not\nimpacted. Basically, if it works for you, go for it!\nOn Sun, Sep 11, 2016 at 11:36 AM Peter Mouland notifications@github.com\nwrote:\n\nI'm not associated with the project so can't talk for the maintainers,\nthese are just my thoughts\n@Faradey27 https://github.com/Faradey27 RHL v3.beta3 is available:\nnpm i -D react-hot-loader@3.0.0-beta.3\nin theory its good to use in a large production website because it should\nonly be used in development... but, It's in Beta, so according to SemVer it\nmay have breaking changes before the final version is released. to find out\nif more breaking changes are likely before final release we'd have to find\nout from the guys who are building the project.\nI found it quite simple to implement, once I was able to see the changes\nthrough the comments, which is why i created the react-lego\nhttps://github.com/peter-mouland/react-lego project and this react-hot-loader\nbranch demonstrating the changes\nhttps://github.com/peter-mouland/react-lego/compare/react-hot-loader.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/pull/240#issuecomment-246171127,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADWliDFNnGom56Wix6yKJs5oeRfjWvSks5qo8uXgaJpZM4IJPU9\n.\n. Question about the module accept code, the current examples are not DRY and risk differing setup between first render and hot reload. \n\nWhy not take the function that does the hot accept and run it on first render too? Because of import graph analysis?\n. Nice, I like it! @gaearon something to make official?\nBTW, WET stands for We Enjoy Typing \ud83d\ude42\nOn Sun, Sep 4, 2016, 5:40 PM Janek Lasocki-Biczysko \nnotifications@github.com wrote:\n\n@wmertens https://github.com/wmertens I agree, its a bit wet so I've\nbeen doing something like:\nimport RootElement from './RootElement';\nrenderApp(RootElement);\n// Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./RootElement', () => {\n    const RootElement = require('./RootElement').default;\n    renderApp(RootElement);\n  });\n}\nfunction renderApp(RootElement) {\n  render(\n    \n\n\n\n,\n    document.getElementById('quickpick-root')\n  );\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/243#issuecomment-244610419,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADWljp8wpQZSaEhJ7p8RosZMmWTHqc1ks5qmuaDgaJpZM4IJyhC\n.\n. The problem is not just state in components, but also state in data fetching decorators. in my case, they are quite slow, even from cache, and remounting means they all run again.\nSorry, no solutions here, just expanding the problem space ;). It seems the only way to fix this is the unpacking of intermediate components. compose can be a special case where it gets transformed into the equivalent set of intermediate components.\n\nSo is it not possible to transform\njs\n  const NonReloadingComponent = foo(bar(Component))\ninto\njs\nconst __C = []\n...\nconst ReloadingWorksComponent=foo(__C[__C.length]=bar(Component))\nor something along those lines?\nand then compose(x, y, z)(Foo) first transforms into x(y(z(Foo))) and then into the above intermediates. Doesn't work for f = compose(x, y, z); f(Foo) but better than nothing.. Just confirming that Webpack 2.2 has the same problem. It's probably in the way RHL handles the update?. Worked  around it by only using splitting for a prod build. See also https://github.com/luqin/react-router-loader to automate this in your webpack config based on filename/path.. Oh cool! I was doing something like \"if dev then require else\nsystem.import\" your way is simpler \u263a\nOn Sun, Feb 19, 2017, 1:52 AM Mitch Robb notifications@github.com wrote:\n\nfor me, this was causing HMR to fail in System.imported components, which\nwas being done in react-router routes. The solution was simply require()ing\nthe modules at the top of the file if DEV === true (code that's\neliminated in the prod build). A little duplication but not too bad.\nif (DEV) {\n  // require every module that will be System.import()ed below\n  require('./components/NotFound');\n}\nconst notFoundRoute = {\n  path: '*',\ngetComponent: (nextState, cb) => {\n    System.import('./components/NotFound')\n      .then(loadRoute(cb))\n      .catch(errorLoading);\n  }\n};\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/303#issuecomment-280886658,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADWloWnKn74FRLAkIX6BH6XiRobMmKnks5rd5I5gaJpZM4IklcJ\n.\n. Turns out someone had this idea a long time ago:\n\nhttps://github.com/webpack/react-proxy-loader\nBasically, you can tell webpack which modules need to be async-loaded, and that's all that's needed (plus some handling for ES6 modules) \ud83d\udc4d \n. I encountered this issue with a single decorator as well, the @graphql decorator from react-apollo.\nBy assigning the decoration separately, hot-reload-with-state works.\nI tried debugging by looking at the React timeline but I got no farther than that the decorator render function is called and afterwards the decorated component is unmounted and remounted, maybe because the decorated component class reference changed?. I wonder if that is related to what is described in\nhttps://github.com/gaearon/react-deep-force-update/issues/2\nOn Thu, May 25, 2017, 4:59 AM Patrick Rogers notifications@github.com\nwrote:\n\nAs a follow-up and presumably for the same reason, internal state is also\nlost for anything wrapped with redux-form.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/378#issuecomment-303909165,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADWltT-_3E79My8cTBippJ6wVdarOd4ks5r9O6DgaJpZM4KDI50\n.\n. I have a similar thing - I automatically bundle all node_modules that the client needs into a DLL (by building without and looking at the dependencies in the webpack stats), but I exclude .*hot.*. However, I'm seeing the same symptoms. So perhaps there is a dependency of RHL that causes this problem\u2026. actually, no, when I disable DLLs altogether it's still not working :(. Found it for me - I was accepting reload of a child but not actually require()-ing it and that caused it to not actually update. You don't need to assign the require() to anything, so you can keep the original import, but you do need to do the require().\n\nAnyway, nothing to do with this issue :). Just a shout-out for https://github.com/faceyspacey/react-universal-component : it can also be super simple:\n```js\nimport universal from 'react-universal-component'\nconst DeferredHeavyComponent = universal(() => import('./HeavyComponent'))\nexport default DeferredHeavyComponent\n```\nThat's it - it works just fine with react-hot-loader.. Aha, thanks for the explanations @theKashey! I am actually running v4 and just started using react-universal-component, and it seems to work without change, including keeping state, but I'm not sure I tested it 100%.\nI saw the hot workaround for lazy imports, but it's actually a bit of work to set (moving original component out of the way, replacing it with wrapped version) vs just using universal().\nSo far I'm super happy I don't have to step through my state the whole time :). I just figured out it's because I have 2 webpack bootstraps :(\nIt's very unlikely this is due to RHL so closing this, sorry I can't be of help for the other issues.. ",
    "thecentric": "I'm having an issue with this branch when trying to run on Ubuntu 14.04 (working fine for a colleague on OSX).\nERROR in ./src/index.js\nModule not found: Error: Cannot resolve module 'react-hot-loader' in /home/demelza/Desktop/react-hot-boilerplate/src\n @ ./src/index.js 3:22-49\nAny ideas?  I tried a couple of versions of node.\n. @MoOx thanks for your reply, unfortunately that's not working; I can see the package in node_modules so it's definitely installed (I tried the second command you gave anyway, but no luck).\n. Thanks for your comment @tsnieman.  I'm actually using react-hot-boilerplate (the next branch).  The webpack.config.js has no configuration for the module resolution paths, so I've tried adding your suggested code, and also:\nresolveLoader: {\n  'fallback': path.resolve(__dirname, \"node_modules\")\n},\nbut no luck so far.  The node_modules directory is in the site root and I think webpack should check there by default.  I'm also using the module in a custom project with other node modules that load first; they are importing fine, for some reason it's just react-hot-loader having issues (and only the next branch, and only for my ubuntu machine and an ubuntu VM I tried with; colleagues with OSX are fine).\nStrangely we're running an npm build step inside of an ubuntu docker container (during docker image building, not during the running of the container), when building the docker image on my machine the npm build fails (with the same react-hot-loader module import failure), however building the image from a separate container with different base OS (using the docker base image which is Alpine Linux I think) and the npm build is fine.  I'm not really sure what to make of that!\n. ",
    "tsnieman": "@thecentric Look closely at your error message:\n\nERROR in ./src/index.js\nModule not found: Error: Cannot resolve module 'react-hot-loader' in /home/demelza/Desktop/react-hot-boilerplate/src\n @ ./src/index.js 3:22-49\n\nIt's only looking for the module in the src directory. I think you need to add node_modules to your module resolution paths.\nEDIT. For example, my webpack config has something like this:\n```\nmodule.exports = {\n  // Base directory used when resolving the 'entry' option\n  context: __dirname,\nresolve: {\n    root: __dirname, // ABSOLUTE PATH ONLY\n    modulesDirectories: [ // <--- determines where to look for modules.\n      \"node_modules\",\n      \"src\",\n    ],\n  },\n...\n```\n. ",
    "devinrhode2": "How does react-hot-loader relate to redux-devtools? (It looks like maybe redux-devtools is a sort of final solution.)\n. ",
    "kwelch": "What are the limitations of hot loading a functional component?\n. What I meant was the first example, but where Counter is a functional/stateless component instead of a class.\n. With the API change in RR v4, I am not having this issue. Sorry for extra comment, cannot edit on mobile. \n. Right counter could not be stateless in this scenario, in my scenario it\nwas a layout page that defined the page and rendered, Counter.\nOn Sat, Oct 1, 2016, 10:07 PM Cale Newman notifications@github.com wrote:\n\nWe'll still want to support RR 2/3 to some degree. But I'm not sure\nCounter would be possible as a stateless component since it relies on\nhaving state and lifecycle methods. You might be saying something else\nthough, mind to clarify?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/335#issuecomment-250950842,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABPE3Dj3jXllkGwGcgY-R6vFK0FC4NsXks5qvx_jgaJpZM4JcSwV\n.\n. Yeah, not a problem. May not be able to get it until tonight, but will post it once I have. \n. So I was able to reproduce, but I would easily consider it to be an edge case. Commit with my diffs\n\nCases as I see it: \n- Dynamic Routing\n- Layout as Functional Component\n- Change made to Home.js\nI hope this helps. \n. @calesce Great. Should I close this since it is tracked in #288? I don't think there are any differences between these issues. \n. ",
    "cristisp": "Any timeline for releasing this new version? :) Great work on it by the way!\n. ",
    "inithink": "HMR will not work if there was error. (commit: f134ff335d26f1b0369e65a9309b4ec1a38a2581)\nStep:\n1. in Counter.js, make error and save.\nreturn (\n      <h2>Counter: {this.state.counter}</h2>\n      dummyErrorString\n   );\n2. revert it, and change below\nreturn (\n      <h2>Counter1: {this.state.counter}</h2>\n);\n3. No update will be found.\n. ",
    "manuel-colmenero": "Hey there, I think I discovered a bug in this branch. Is this the correct place to report it? Anyways, here it goes...\nUsing the generic webpack loader (react-hot-loader/webpack) instead of the babel plugin (react-hot-loader/babel) causes a weird issue. The loader returns always the same module if the modules' file names are the same (but the paths are different). \nStep 1: Create two modules with different paths but identical filenames:\ncomponents/test1/index.js\ncomponents/test2/index.js\nStep 2: Load those modules from a third one:\nimport Test1 from \"components/test1\nimport Test2 from \"components/test2\nBoth Test1 and Test2 are the same component, I think the first one that was required:\nTest1 === Test2\nOtherwise, congratulations on the new version, it rocks! \n. I am pretty sure about this, I've been \"hunting ghosts\" for a few hours until I could reproduce it reliably. I stripped everything down so I'm pretty sure it can't be anything else.\nA few differences between your boilerplate and mine are:\n- I use the latest Webpack stable version (1.13.1).\n- I use webpack-dev-server instead of rolling my own dev server.\n- My index.js files are the modules themselves, they're not empty JS files pointing to the actual module.\n- You don't actually use react-hot-loader/webpack but the other one, react-hot-loader/babel, which also works in my setup. This seems to be the issue.\nSo to clarify things: react-hot-loader/babel (babel plugin, you add it to the babel config) works fine; react-hot-loader/webpack (webpack loader, you have to add it to the webpack config along with babel-loader) does not.\nRight now I can't (I'm at work) but when I have time I'll try to put up a repo reproducing the issue.\n. ",
    "AndrewGrachov": "+1 for non working react-hot-loader/webpack\nI use pre-babeled files, and it does not reload\nUPD:\nSeems to be my curved hands after all.\nWith code like this \n```\nrender(\n    \n\n,\n    document.getElementById('react-view')\n);\nif (module.hot) {\n    module.hot.accept(() => {\n        render(\n            \n\n,\n            document.getElementById('react-view')\n        );\n    });\n}\n```\nWorks like a charm\nmodule.hot.accept....\nis MANDATORY!!!\nNo docs say that, found in one of teh threads.\n. ",
    "peter-mouland": "If anyone is interested, I have implemented an example app, react-lego which implements v3. here are the code changes required to get it working.\n. > I'm not associated with the project so can't talk for the maintainers, these are just my thoughts\n@Faradey27 RHL v3.beta3 is available: \n npm i -D react-hot-loader@3.0.0-beta.3\nin theory its good to use in a large production website because it should only be used in development... but, It's in Beta, so according to SemVer it may have breaking changes before the final version is released. to find out if more breaking changes are likely before final release we'd have to find out from the guys who are building the project.\nI found it quite simple to implement, once I was able to see the changes through the comments, which is why i created the react-lego project and this react-hot-loader branch demonstrating the changes.\n. @griffinmichl i'd be interested in seeing it with Koa v2, have you an example app for a demo? \n. cool - i think i'll just remove all non react-hot-loader links as this in't a page for all types of hot loading!\n. are you happy to squash the 3 commits as you merge (using github) or would you prefer me to squash before you merge?\n. I would suggest to only use react-hot-loader in dev. and ensure that your test environment doesn't load/use the react-hot-loader code.  This would also have the benefit of making the tests run on a more prod-like setup.\nsorry for not truely answering the question being asked, but i think altering the approach to how the tests are run is probably worth while.. I think running at least a subset of e2e tests, in a single browser, on the dev machine using the prod build (or prod-like using fixtures) is a small ask.  Even if the build takes a minute to complete, having e2e tests on a pre-push is very much worth it and something we, as dev's, should get use to i.e. take responsibility for testing our own code.\nAre you able to set the apps up so that each app can be started with fixtures rather having a hard dependency on another, separate, app? If the apps are are started in isolation (i.e. using fixtures), do they still take a long time to start? . yeah, as soon as RHL 3 is out of beta, i'd be more than happy to remove the other starter-kits, anything to make mine stand out more! \ud83d\ude1d\n. ",
    "Faradey27": "@gaearon when you plan to release v3? or maybe to introduce beta version?\nis it possible to use hot-reloading for now on large production project without a lot of pain?\n. ",
    "calesce": "@MoOx: dumb question since I haven't used React Native recently: Don't they have their own hot-reloading implementation with their own bundler?\nFor React Router < 4 I have a simple example for reloading route config here. There's a caveat that async routes with require.ensure don't work (#288)\nIt might be worth opening a new issue here (ideally with a repro project), things can get lost in these big threads. :smile:\n. @MoOx ah ok, yeah I haven't played with that either. I'll take a look later, have you tested that hot-reloading works with a bare-minimum example? I'm guessing AppRegistry.runApplication gets turned into ReactDOM.render.\n. @csillag see v3.0 milestone. No estimates but you can always help :smile:\n. @griffinmichl: Yeah I've seen that happen, I'm not sure exactly which cases cause it. Would you mind sharing a minimal project reproducing the issue?\n. Added by #322, and out in 3.0.0-beta.4, thanks @nfcampos!\n. @rvaidya Is this the code from the Babel plugin? It should be omitted if you have NODE_ENV=production. See #367.\n. @rvaidya Ah, forgot about Windows. :wink: Let me know if that doesn't work.\n. I believe DefinePlugin is needed for your own client-side checks, but env variables or cross-env for Babel plugins, other loaders and node_modules. I might be wrong on one of those, but yeah we should add those to our docs.\n. @tleunen want to open a new issue with a minimal reproduce project? There's a number of possibilities, with the most common being not pointing to RR routes in module.hot.accept.\nI'm working on updating the troubleshooting doc with common 3.0-specific problems.. @jgentes as @gaearon said, that will remount all of your components on every update, so state will be lost.\n. @schickling It was tracked in https://github.com/ReactTraining/react-router/issues/2182, but it looks like they want everyone to migrate to 4.0 as a solution, and the maintainers won't be doing major updates on 3.X.\nRR 2/3 mostly works with React Hot Loader as it currently stands, AFAIK the only issues are the console warning and getComponent not re-running.\n. Hey, anyone in this thread want to take a look at #402?\n. Also, I think it might be a good idea to merge into next this pretty soon, even if we're not done. Having docs and code in different places can be confusing.\n. I'm going to merge this because it's confusing that the docs for 3.0 are separate from the code. We probably only need to update Troubleshooting.md to make the docs good enough for the full 3.0 release.\n. This hasn't been worked on in 10 months, and I'm thinking that we probably won't need a separate website for docs. The surface API of RHL is pretty small, and markdown files in the repository are more suitable IMO. Also, we already cover most of the copy in this PR.\nLet me know if anyone disagrees, otherwise we can close this. . @alexisvincent Hey, I was taking a look at this and unable to install via your repo's instructions. On jspm install (with jspm beta.29), I got:\nerr  Error looking up npm:@alexkuz/react-json-tree.\nI tried again and got \nerr  Error parsing package.json file /Users/calenewman/code/jspmloader/systemjs-react-hot-reloader/jspm_packages/npm/domain-browser@1.1.7.json\n. OK, yeah I reproduced your issue. \nAlso, even with JSX, on the first edit after reloading the page, it is slow to update and unmounts the component. All edits after that are fast, and the component isn't re-mounted.\n@tyscorp's project had the same issue with createElement, but it didn't have the problem with the first edit. It might be a difference between systemjs-hot-reloader and jspm-devtools (I'm not familiar with the JSPM ecosystem :D).\n. @alexisvincent sorry no, not yet. When I get some extended time to look, I'll probably double check that the createElement being used is the patched version. I don't have any other leads beyond that.\n. @jlongster any way can you see whether you still have this issue? createFactory is now patched (#287), and as far as I can tell React.DOM.* all go through createFactory, which should cover all of our bases (if that was, in fact, your problem).\n. Gonna close this out because I haven't heard back. Please re-open if you're still having the same issue!\n. @truongsinh: I don't know understand the semantics of private properties in TypeScript. It should work without Babel, but needs the Webpack loader. You can look here for a working example of that Counter example.. Thanks @danzel, it'd be helpful to have a TypeScript section on the 3.0 docs.. @reem to be clear, those don't look like decorated components, but are higher-order components, so this is more likely related to #378, although a similar issue.\nUnfortunately it's a really tricky one, since right now the best that the Babel plugin can do is to look for top-level references. One idea would be to \"expand\" the code, to recursively turn your first example into the last example (split out currying?), but that sounds like it'd be riddled with edge cases.. > I'm not exactly sure what you mean, what's an example of a decorator that would cause a problem and is not a higher order component?\nDecorators are a stage-2 JavaScript proposal, denoted with @. The most common ones from libraries are probably @connect and @autobind, which are class-level decorators.\nWhat's different is that you can have something like:\njs\n@connect(mapStateToProps)\nexport default class App extends React.Component {...}\nthat doesn't get reloaded, but this does:\njs\nexport default connect(mapStateToProps)\n(class App extends React.Component {...})\nI'm not familiar with the exact decorator semantics to tell you why, I haven't dug enough into this specific issue.\n\nThis sort of thing is where a true multi-phase compiler with a middle representation between AST and output representation is really helpful\n\nHa, yeah that sure would be nice, I'm guessing you have Rust in mind. \ud83d\ude09. Yeah you're right, my mistake. I typically write it out like in your latter example.\nIt looks like with decorators, you can't have a reference to the original class, which is why @gaearon suggested having the plugin insert a decorator that registers it with the RHL runtime.\nAnother approach might be running the transform-decorators plugin first, but if you have multiple decorators then you'd still have the issue of multiple intermediate components.. Yeah, and even unpacking compound expressions won't work with helpers like recompose, because it can create arbitrarily-nested components.. @reem: Yep, especially in such a dynamic language as JS. The most reliable solution might need to be baked into React, see Dan's comment here.. @reem: Totally agree!\nI think for that section he's specifically talking about enabling the \"limited\" hot reloading for Create React App. So you can always npm run eject and add React Hot Loader yourself.. @starInEcust: can you open a separate issue for extending other components? A project reproducing the issue would be extremely helpful, as well.\n@Kinjeiro: we are all working on this in our spare time, telling maintainers to \"fix it\" is unhelpful.\n. Glad you found out what was going on, @benwiley4000. Sorry none of us got back to you. It's clear that we need to document the known issues with RR 2/3, right now the solutions/workarounds are scattered in other issue threads. I'm going to close this one since we're tracking this in #249.\n. Closing this since the original React issue was fixed. I've also tested rendering <AppContainer /> on the server and it doesn't crash (even though most people will only need to use it in the client bundle)\n. Just wanted to add that I was playing around with require.ensure and RR, using @sthzg's solution, and it seems to work fine with getChildRoutes, but not getComponent.\nIt looks like the getComponent callback can't be called multiple times (tested out with setTimeout loading a different component). Another reason to move on to RR4? \ud83d\ude1b \n. @flut1 yeah that will allow updates to happen, but component state is lost because it's deeply re-rendering all of\u00a0the components, so it's not the ideal workaround.. agreed with @gaearon, this doesn't look to be related to RHL, it looks like the JSX files aren't being run through Babel. Please re-open if you can isolate the issue to be RHL itself.\n. @josectello If you still want to do this, I'd say the best place is on the next-docs branch, in docs/README.\nThere's also troubleshooting.md, but that'll need to be cleaned up, since most of it only applies to v1.\n. Closed by #402.\n. @calvinchankf: The simplest approach is to only server render in production, and only do client-side in dev.\nIf you want to have server rendering in development, you'll also need to re-require your routes/components on the server side, otherwise when you refresh the page you'll get the checksum warnings from React (because the HTML is stale and doesn't match the client bundle).\nIt's pretty tricky to get this right, and if you want a good example I'd recommend react-universally.\n. @heldrida: See #249, the warning comes from React Router. Feel free to ignore it or patch console.error to hide that specific warning. From the comments in https://github.com/ReactTraining/react-router/issues/2182, they probably won't fix this in React Router 3.. @heldrida: you'll need to accept your route config, since that imports all of your components.. Yep, here's a minimal example. We really need to add this to our docs.. @heldrida as I said before, there's no way to get rid of that warning without patching console.error in your own code. Are your components now reloading?\nYou don't need that componentWillReceiveProps hack any more, that was an issue in earlier RHL3 versions.. Nope, it's hacks all around \ud83d\ude04 . @peterbe yeah it was discussed a bit in #413. A blanket module.hot.accept() actually works well in most cases, but with stateful objects like Redux stores you might hit some rough edges. It's certainly the nicest approach with the least boilerplate.. Thanks!\n. Taken care of by #302, although we also still have the process.env.NODE_ENV === 'production' check. I'd say checking for both makes sense.\n. \ud83d\udc4d  Looks good to me, thanks!\n. Hi, I'd like to take a look at this. I have yet to mess around much with Webpack 2. Do you have a (minimal) project that reproduces the issue?\n. Thanks for the example @ctrlplusb, we should definitely put this in our docs.\nDo you think the issue with static path System.import is just a Webpack 2 bug?\n. @birkir: I'm not sure where that comes from without more context. What version of RHL/Webpack, and do you have a simple repo project? Also, it might not strictly fall under this issue, so please open a new issue if you think it's a problem with React Hot Loader.\n. Thanks!\n. Yeah, this doesn't seem related to React Hot Loader, I'd recommend taking a look at one of the CSS/SCSS loaders, or possibly Webpack itself.\n. I was able to check out @erikras's repo, updated to 3.0.0-beta.3, and run it/hot reload without any other changes.\n. Thanks!\n. Don't think this is related to RHL, since you'll receive those hot updates from Webpack HMR whether or not you have RHL configured. This appears to be a Webpack/WDS configuration problem.\n. Fixed by #314 and out in 3.0.0-beta.3.\n. Hi @olegstepura, sorry for taking so long to respond! I'll try to respond to each of your questions.\n\nAdding a Math.random() as a key property to Router did not help either.\n\nYes, that will force the <Route/>'s components to re-mount, which will destroy their state, so this wouldn't be a solution.\n\nIt's hard to understand what those module ids mean. It would be very helpful if it were component paths or some meaningful values\n\nI agree, that code seems to live in the main Webpack repo, might be worth opening an issue there.\n\nIt's runnable, with some warnings from awesome-typescript-loader after App is ready, please just ignore it.\n\nDoes awesome-typescript-loader use Babel under the hood? Otherwise I don't see react-hot-loader/webpack or react-hot-loader/babel being used, which may be the issue.\n\nI tried making router/routes.tsx to export a function (second commit in PR), but this does not help.\n\nThis is the approach that seems to work best, I added a minimal example with RR here. I export the routes as a function (plain object config works as well), and specifically reload that file and pass as props to <Root/>. This will also work with Redux if you hot reload the reducers when creating your store, see here for a full example.\nLet me know if those tips help, I may try to make a PR to your repo to demonstrate a solution, but not being familiar with TypeScript slowed me down there \ud83d\ude04 \n. Going to close this out because I haven't heard back, and the problem looks like that you're not reloading the routes. Please re-open if you're still having the issue!\n. @s-panferov it'd be helpful if you could get a minimal example repository, perhaps removing Redux/Typescript if they're not related to the issue.\n. @s-panferov Also, I see a bug in your example, where you call Github.render(), which is the class and not the gitHub instance.\nAnother issue is that you're using @connect, and currently, decorated components don't get reloaded (#279).\nI'm going to close this because I first responded 4 weeks ago, but please re-open if you still need help.\n. Thanks for the simple project, I was also able to reproduce. This is definitely a problem with RHL. I'm not familiar with React-ART, but since it uses React internals, it might break some assumptions that React Hot Loader makes.\n. Is this using Facebook Flux? This issue doesn't look to be related to React Hot Loader itself, but an issue with how Flux Stores don't get reloaded by Webpack HMR (which is why Dan initially developed Redux).\nIf you can provide a minimal, runnable example, I can try to help debug your issue.\n. Closing because no response from OP, and this doesn't seem like a RHL issue.\n. Ok, I fixed the case for arrow functions without block statement bodies. I also found a case where it failed, because the value field of a class property is nullable (which seems to happen when adding propType annotations to class components via Flow).\n. Thanks for the feedback @ro-savage! I also just noticed it breaks when destructuring arguments, eg:\nonClick = ({ target }) => {}. I should iron those two cases out tonight.\n. @ro-savage no problem!\nI now realize that this type of transform won't work if a developer were to change the number of arguments when changing a class property function, since the argument count won't be reloaded. Which isn't good. I think something like this might work instead:\nbefore:\njs\nclass App {\n  foo = (bar, baz) => {\n    return bar + baz\n  }\n}\nafter:\n``` js\nclass App {\n  foo = (...params) => {\n    return this.foo__REACT_HOT_LOADER(...params)\n  }\nfoo__REACT_HOT_LOADER(bar, baz) {\n    return bar + baz\n  }\n}\n```\nThat way, the number of arguments won't matter, so the developer can add/remove args and it should reload fine.\nEdit:\nDone, it works with the existing tests (although I had to change the Babel fixtures to match the new output), and anecdotally works well when playing around with it in my app.\n. Hey thanks! Any details on where/how it doesn't work?\n. @HriBB: I think you needed to npm run build first.\nThe way I tested was copy-pasting the built files into my app's node_modules/react-hot-loader (where I already had beta3 installed).\nnpm link is probably the recommended/easier way, but I've only used it a few times so I'm not comfortable with it yet :wink:\n. @carlosyasu91 It's hard to say, any way you can push up a minimal project reproducing the issue?\n. @nfcampos thanks for the review!\nI agree on not needing run the ES2015/stage1 transforms on the babel fixtures, the expected output is more readable that way.\n. @nfcampos no problem, I think I would've have to add you to my fork's collaborators.\nI'll take a look at why there are additional empty statements being created tonight, then this should be good to go \ud83d\udc4d \n. @nfcampos The semicolon insertion comes from #263, so not related.\nActually, it'd be nice if we could split out multiple plugins, so we can test them in isolation, but still be under a \"root\" react-hot-loader/babel plugin.\n. @janv: you're right, we're stripping the static keyword off of the properties. thanks for the repro!\n. Might be worth noting that we already were having problems when not using Babel to transpile classes (#313).\n. @janv thanks again for the repro.\nYeah, that definitely seems like the same problem as #313. The issue remains even if you replace the class properties in your example with normal class methods.\nI'm kind of surprised that \"native\" classes behave differently from how Babel transpiles them. The fix will probably have to come from react-proxy.\n. Weirdly, it looks like react-proxy has test coverage for native classes.\n. React Hot Loader 3 will be the best to use when it is released, see react-hot-boilerplate (next branch) for sample usage. \nEven though 3 is still in beta, it's already quite good. I'd personally recommend using it over RHL 1.x or React Transform (which the Babel preset covers, and is basically RHL 2). Those will be deprecated when 3 is released.\n. Thanks for the report, @sammkj. This looks like the same issue as #288, so gonna close this as duplicate since there's more discussion there.\nAlso, it looks like @ctrlplusb has a solution w/ Webpack 2 and System.import, which may be of interest.\n. Also fixed by #349, but thank you!\n. I don't have an example at hand using both Express and RHL 1.3.0, but I've used an existing Express app with the RHL 3 beta without a problem.\nYou'll need both webpack-dev-middleware and webpack-hot-middleware. See the webpack-hot-middleware README for setup.\n. Changed react-hot-boilerplate/next to use RHL 1 here.\n. @morajabi have you tried defining your routes in a separate module and accepting that module, like this? Also, there won't be a way to get rid of the warning unless you patch console.error, see #298.\nIt shouldn't have an impact on using with Redux, since you only need to create the store once and reload the reducers. I'll push up an additional example of using RHL with both libs if you're interested.\n. Yeah, unfortunately that's something that probably won't be fixed in React Router 2/3. For now, it's probably best to either ignore it, or patch console.error to ignore that specific warning (which is relatively safe but shouldn't be necessary).\n. This currently isn't mergeable, would you mind rebasing?\n. Closing because of inactivity.\n. Hi @kwelch, I'm familiar with RR but don't use it regularly, so I might be missing some context.\nBy \"route component\" do you mean the component holding your top-level RR config? I added a quick example here with a route config that returns React elements, but is used like a called function rather than a functional React component. In this case, the routes are defined separately and passed as props to the component rendering <Router/>.\nI'm not sure what approach you're trying to take, do you have your own example you can show me?\n. We'll still want to support RR 2/3 to some degree. But I'm not sure Counter would be possible as a stateless component since it relies on having state and lifecycle methods. You might be saying something else though, mind to clarify?\n. Hmm ok. I just tested with a SFC that rendered a Counter as one of its children, and both components reloaded without unmounting the Counter. Would you mind sharing an example where this doesn't work when you get the time?\n. Thanks for the update. Yes, dynamic/async routes with require.ensure are a problem, which we're tracking in #288. If you're using Webpack 2, @ctrlplusb has had success with System.import.\nOn your fork, I replaced all the getComponent keys with synchronous components (same for child routes), and hot reloading worked on all routes, so I'd say the issue is isolated to async routes.\n. Yep, I'll go ahead\n. This might not be the only issue, but I do see that you use decorators, and decorated components currently don't hot reload (#279).\n. Fixed by #347.\n. Out in 3.0.0-beta.4!\n. You need react-hot-loader/patch, and <AppContainer/>, see our docs for 3.0. Also note that decorated components currently don't reload (#279).\n. @sir-marc do you have the issue when you use connect()(Component) instead of the decorator form?\n. @fkrauthan both should be fine, but I don't think React Router is related to this issue, feel free to open a new one.\n. @sir-marc I'm going to close this because it looks to be either another case of the #279, or something else that needs more context than just the webpack config. If it's the latter case, please re-open!\n. I agree that's a valid approach, but that's probably outside the scope of our docs, and .babelrc is the more common/preferred way to declare presets/plugins.\n. Thanks!\n. This seems to be the same issue as #312, want to confirm this is fixed in 3.0.0-beta.3?\n. @nathanmarks Yeah, I'm seeing the same thing. I believe it should be handled by Redbox. Interestingly, on their README they recommend adding output.devtoolModuleFilenameTemplate to the webpack config and using devtool: 'eval'. I always used cheap-module-eval-source-map without many issues.\nI also thought that the source maps worked for RHL3 Redbox previously, but maybe I'm mis-remembering.\n. @nathanmarks Ok, it looks like Redbox stack traces are only sourcemapped with devtool: eval, but then you lose source maps in browser devtools... I guess for now it's pick one or the other.\n. @nathanmarks Yeah I'd like to see if there's a workaround first (or at the very least at least do console.log as well), but I'd probably agree.\n. Thanks, @dreyks. @nylen / @arcanis, can you see whether it solved your issues?\n. @nathanmarks: We should probably move this to another thread, but I think Redbox will probably be best for now, even though it's not perfect.\nAdding console reporting won't be any better, since the stack trace will still be bad with devtool: 'source-map', and the file context in the console will now come from AppContainer.dev.js instead of where the original error was thrown.\nSee error.stack in Chrome:\n\nAlso, I'm going to close this issue, since this was fixed in the latest beta.\n. @hieuhlc any way you can create a repo that reproduces the issue?\n. Closing because you didn't respond, but please re-open if you're still having problems!\n. Yep, that appears to be the problem, thanks @rosscourt. @ozum, want to see if that solves your issue?\n. This is more of a Webpack-specific question, so I'd look into Webpack resources. SurviveJS has some great walkthroughs.\nIn development, you can do normal require('./app.less') with Less/CSS/style loaders, and HMR will still work.\nYou can separate your CSS in your production config using ExtractTextPlugin.\n. Cool, I played around with this, and it works in a few simple cases. I'd prefer to have this kind of stuff tested, but we don't have tests on the Webpack loader anyways (something to improve!).\nEither way, since #337 was directly affecting at least a few people, and I don't see how it can break other use cases, I'll go ahead and merge it. Thanks!\n. Covered by #349, but thank you!\n. Thanks!\n. Feel free to make a pull request with documentation. As a heads up, we'll be moving to React Hot Loader 3 soon, so it'd be best to make a PR against the next-docs branch.\n. This doesn't seem to be an issue with react-hot-loader itself, but something to do with Cordova or Meteor. react-hot-loader doesn't use any sort of settings.json.\n. That code seems to come from meteor-hmr, not RHL. From what I can tell, meteor-hmr doesn't depend on RHL either, so the issue probably should be opened over there.\n. We already have a reference to react-hot-boilerplate, which covers just adding React Hot Loader 3 sufficiently well, in the next-docs branch.\nI agree that showing the diffs from RHL 1 or react-transform to RHL 3 would be helpful, so making a PR to next-docs would be welcome.\n. I'll go ahead and squash, thanks!\n. There's a lot going on in your project, but one clear problem I see is here, where you're not re-requiring AppRoot (or DevAppRoot below) in the module.hot.accept callback.\n. Again, I haven't yet looked at this deeply, but if you're saying that module.hot.accept is never called, that's likely a Webpack HMR configuration issue, and not specific to RHL.\n. Ah, ok. Have you tried removing the React Router bits to try to isolate the issue and see whether it's the same problem as the other React Router issues?\n. @Ciantic can you share a simple repo showing the issue?\n. @elado you'll need to add that to the array for module.hot.accept() and pass it into your root component, or add a separate module.hot.accept in another \"root\" file, like with Redux in their example.\n@fkrauthan I'm not sure, but I wasn't able to clone, install and run your project, I got this error:\n\n. @elado: for React components it wasn't required in 1.x because module.hot.accept was added to each \"detected\" component by the loader. It'd still be needed for non-React modules that aren't required by your Root component (or route config).\n. @ElForastero A simple, runnable project would be more helpful.\n. @sylhero I don't usually use multiple entry points, but doesn't the main.jsx and vendor.jsx ned to be last in the array?\n. @sylhero Hmm, looks like the relevant issue is #141. Maybe try importing react-hot-loader/patch at the top off main.jsx?\n. interesting, you left the devServer stuff out?\n. I'd recommend not using bundle.[hash].js in development, personally.\nYou can probably add a webpack plugin to update the hash in index.html (or wherever you need it) on file change. Otherwise, page refreshes will go back to the original bundle, which is what I think you're saying is the issue.\n. From my testing, process.env should be an empty object by default in Webpack (without doing something like DefinePlugin), so checking process.env.NODE_ENV is ok. Would you mind posting what a reproducible example, or at least what your webpack config looks ?\n. The plugin shouldn't do anything in production, are you using NODE_ENV=production?\n. After testing with your project, process.env.NODE_ENV was undefined in the Babel plugin when running npm run build. I investigated, and it's because DefinePlugin gets run after babel-loader, see here.\nI changed build to \"build\": \"NODE_ENV=production gulp production\", and it stripped those register() calls, and the build size was about 4k smaller than before.\nThanks for pointing this out! I'm sure there's more people who have this issue without realizing it, so we should document it better. Please re-open if this doesn't solve the issue on your actual app.\n. Thanks for the link! Yeah, our docs for 3.0 could use some more explanation of the Webpack/Babel trickiness.\n. Thanks for catching! I wonder if we can opt out of the plugin if we detect we're in the CLI.\n. Fixed by #374 and out in 3.0.0-beta.5.\n. Thanks!\n. Thanks!\n. Thanks, any way you can put up a minimal project reproducing the issue? The smaller, the better \ud83d\ude04 \n. Hey @maestroh, I tried to install/run and it looks like it's expecting a typings/index.d.ts file which keeps it from building. I'm trying to \"force compile\" but I'm not familiar with TypeScript.\n. Opened https://github.com/maestroh/rhl_error_362/pull/1 for the fix, let me know what you think.\n. @maestroh: The next-docs branch is the best place (for now) showing the changes needed, and react-hot-boilerplace has the simplest complete example.\n. Hi, I see two things:\n- You'll need to implement module.hot.accept in render.js, see here for an example of how to do it with Redux.\n- I see you're using @connect, unfortunately we don't yet support hot-reloading components with decorators, see #279.\nLet me know if those help solve your issue.\n. @vivaxy No problem, it'll be easier to get started once 3.0 is fully released and all of the information is in one place.\n. Do you have an example repo I can look at?\nYou'll need to make sure you import 'react-hot-loader/patch' before any other application code, but after loading React.\n. @awaw00 thanks for the repo, it looks like the issue is React Router also being external, if you remove it from externals and have it in node_modules, the issue goes away. I'm not sure whether we'll be able to support having non-React component libraries in externals.\n@pedronauck do you have a simple reproduce project? as I said above, React being external isn't the problem in @awaw00's project.\n. @awaw00 I did some additional testing, and it looks like the issue is React Router being external specifically. I tested with other 3rd-party components (react-datepicker) being external, and they were hot replaced properly.\n. Thanks! The website's a bit out of date now (update soon!), and there are tons of Webpack articles at this point. We'll probably just point to the Webpack docs in the future.\n. Hi, take a look at react-hot-boilerplate for an example similar to yours. It looks like you're missing react-hot-loader/patch from your webpack entry array, and you're not using <AppContainer> and re-requiring via module.hot.accept.\nOur current docs are on the next-docs branch, sorry that things are confusing right now.\n. See #357, make sure you have process.env.NODE_ENV set to production during the build.\n. React seems to always pass a proxy object to onSubmit, and I just tested with no React Hot Loader.\nAlso, it looks like the issue you were having was resolved in https://github.com/erikras/redux-form/issues/1818.\n. Hi. I've been keeping track of changes in releases. I'll update the CHANGELOG.md when I have more time. There aren't any breaking changes between beta.1 and beta.4, just added features and bugfixes.\n. Updated the CHANGELOG.md.\n. \ud83d\ude1e That's no good! Sorry @jquense!\nIt makes sense that this would happen in beta.4, since we added the class properties transform, and the plugin is not yet aware of async functions.\n. @jquense Awesome, thanks!\n. Out in 3.0.0-beta.5.\n. I personally use webpack-hot-middleware with webpack-dev-middleware instead of WDS, and webpack-hot-middleware actually shows a nice overlay on syntax errors, which disappears after fixing the error, and you can continue without refreshing:\n\nThe drawback is that you have to install a few more dependencies, but this should be solvable in WebpackDevServer.\n. Closing because this is related to WDS.\n. No, it works with any tool that integrates with Webpack and passes HMR updates.\n. This looks great!\nQuick nitpick: can you move that async test to test/babel/fixtures/class-properties/?\n. Made the changes we asked for, since I remembered that GitHub lets collaborators push to forks now. Thanks again @jquense!\n. Hi, I think what you're seeing is related to #164. We're currently using React's unstable_handleError hook, which currently only catches render errors on initial mount. They're working on also catching render errors on updates in https://github.com/facebook/react/pull/6020, which would make the redbox show up consistently.\nIn your first example, if you refreshed the page you'd see the red box with undefinedVar is not defined, since that's when React would first try to mount that component. Similarly, if you triggered the second example after the component first mounted, you'd see the uncaught exception in the example.\nI know Dan's talked about just building the error catching into React proxy instead, so that's the direction we might take instead. Sorry you're hitting the rough edges right now. \ud83d\ude15\n. Thanks!\n. Hi. To be clear, React Hot Loader has nothing to do with reducers hot-reloading, that's plain Webpack HMR.\nAlso, I wasn't able to install and run your project, it's stuck on this (I gave it about 3 minutes):\n[webpack-isomorphic-tools] (waiting for the first Webpack build to finish)\n. module.hot and module.hot.accept comes from Webpack HMR. React Hot Loader only really applies to React components so they can retain their state without unmounting.\nI tested your example and the reducers were hot reloaded. For instance, I changed the AN_USER_FETCHED case of anUser to just return state, and after that navigating to a user that wasn't yet fetched would be stuck at \"Loading\", as expected.\n. @wellyshen I was able to change mock data, passed it to the reducer, and it hot-reloaded. Sorry, I'm not sure what's going on in your case.\n. I made a quick screenshare showing how I updated it. I assume you're doing something similar, maybe there's something going on in your environment? Hope that's helpful.\n. Cool. What was the solution?\n. This is documented here, the react-hot loader is deprecated in 3.0.\n. @wmertens yep supporting decorated components (and HoCs that are able to be detected statically) should be feasible, see discussion in #279.. Hi, do you have an example repo demonstrating the issue? In my experience, startup can take around 5-20 seconds depending on project size (but that's mostly due to Webpack/Babel, haven't benchmarked RHL itself), but hot updates are <1 or 2s.\n. Cool, looks good.\n. Cool, looks good to me. Thanks @janv for pointing out the issue!\n. Please look at our docs branch, you need <AppContainer>, a module.hot.accept callback, and react-hot-loader/patch in Webpack entry. Also look at #249 for React Router caveats, and #279 for how decorated components won't be hot-loaded.\n. Thanks for the report! You're right. We need to either include the Babel runtime so Symbol() gets turned into something that works in those environments, or alternatively not support 0.12 and lower.\nI know Node 0.12 will no longer be receive updates at the end of the year, for what it's worth.\nI don't feel too strongly either way, thoughts @nfcampos?\n. Added a requirement for the Node version to be 4 or higher in 2ce0b3c27520777ae78b6050efbf5891577fb4c8.\n. @danmartinez101 I don't think that merging it here is the best place, since this repo has only been used for React Hot Loader 1 and 3. Also, React Transform and associated tools have been deprecated, and AFAIK no one else is working on them.\nEither way, RHL 3 is much simpler for end-user Babel configuration. Hopefully most people will either move to that or vanilla Webpack HMR in the future.\n. Hi, I don't see react-hot-loader/patch anywhere in demo13. Try putting that in entry of your Webpack config.\n. Ah yes, there's a known issue with require.ensure, see #288. The workaround is to add extra module.hot.accept callbacks for each separate module (which is annoying).\nSystem.import may be a good alternative if you can use Webpack 2, see https://github.com/gaearon/react-hot-loader/issues/303#issuecomment-249870741.\n. RHL uses Redbox-React just to display errors caught in render when a component mounts (unfortunately not yet on updates, see https://github.com/facebook/react/pull/6020). Syntax errors aren't handled by RHL. Personally (as I said in #371), I recommend using webpack-dev-middleware and webpack-hot-middleware alongside Express, the syntax error overlay is very nice.\nA simple example of using RHL3 with Redux is here. I agree we more simple examples using common libs in our docs.\n. Syntax errors aren't the concern of React Hot Loader, but since it integrates with Webpack, I'm just recommending the surrounding tools for the best (in my opinion) dev experience. Right now those choices are either WDS or dev+hot middleware (both work with RHL).\nWhen I say syntax errors, I'm talking about errors that fail at parse/compile-time, which would be before they get to RHL or a try-catch in running code. The error gets passed from Webpack to hot-middleware as a hot update. I don't know exactly what it looks like, but hot-middleware is able to take that error, display the chunk of broken code, and inject that onto the page.\nHope that's helpful.\n. This is an issue with Webpack Dev Server, and I recommend using webpack-dev-middleware/webpack-hot-middleware, see my responses in #371, #388.\n. Thanks for the follow up @mikeengland, too bad the fix isn't coming to WDS 1.x.\n. Hi, you can continue the conversation in the same issues after it's closed. Can you provide a simple repository that reproduces the issue? If you want to see a working examples you can look here.\n. Syntax error or runtime exception? Have an example? RHL isn't able to recover from errors on updates to render, see #164.\n. @aoshi321: OK, yeah if you refresh after Webpack fails to build, you won't see the error overlay in the browser, just the console. The overlay only appears in hot updates. I can see how that's confusing.\nIt might be worth opening an issue with webpack-hot-middleware to get the syntax error overlay on page refresh (if it's possible/feasible), what would you think @glenjamin?\n. Ok, opened as https://github.com/glenjamin/webpack-hot-middleware/issues/133, thanks for responding @glenjamin!\nClosing this one because it's not specific to RHL.\n. @valerymercury not currently. it might be worth adding an option to the Babel plugin to opt out of class properties transform.\n. @Kovensky: I took a look at this, and I think it's two things: there's a problem with the RHL plugin, where we unnecessarily add async/await to the generated class property. I also think this Babel bug is part of the issue, since we use rest params in the generated code.\n. So I was working on a potential fix on calesce/async-fix.\nWeirdly enough, if I just run the plugin ahead of time without other Babel transforms and copy the output (using astexplorer), the code runs fine. But if I run it as a normal plugin, it has the broken _this behavior. In both instances I'm using es2015 and stage-2 presets.\nReproduce project here, I'm kind of stuck on this right now. Anyone else have any ideas?\n. @danielarias123 yeah, but we don't want people to have to remove react-hot-loader/babel because then stateful components don't hot-reload :smile:\n. @danielarias123 Right, but they won't retain their state and will remount, you can check by adding componentWillUnmount and see it get called on save.\n. Yep, you're right. Really we should never use the dev version of AppContainer or patch whenever module.hot isn't present. I'll try to fix this and release a beta 6 tonight. Thanks!\n. Out in 3.0.0-beta.6\n. I'd recommend changing the package.json to \"react-hot-loader\": \"3.0.0-beta.5\".\nWe compile (via Babel) before publishing to NPM, so when users install it, the pre-built lib/ directory is already there.\nIf you pull directly from GitHub, that build step hasn't been run, so you won't have lib/.\n. I think because you're using singular loader, it needs to be a string instead of Array<string>\n. It doesn't look like redbox-react uses any internal React modules, which is the only change that can break libraries, maybe you have installed incompatible versions of React/React DOM?\n. It doesn't look like the example includes the RHL babel plugin. I also tried the example with the Beta 6 and hot reloading seemed to work.\nThere are only two changes in Beta 6. Is it possible the first change breaks any assumptions we're making? It opts out if there is no module.hot.\n. @hedgerh: Well, I wanted the docs to supersede some of those issues, since they're either not fixable under the current architecture or the fix probably will have to come from elsewhere (like Webpack for require.ensure).\n. Yeah, there's been a lot of discussion around dynamic imports via require.ensure and System.import we can link to.\n. OK, should be good now. I removed the section on transforming ES2015 classes because that's something I hope to fix in the short term.\n. @shikelong You need to either pass rootRoute into module.hot.accept and re-require it (and pass as props), or import it from <Root>. I have a simple RR example here.\nSince the routes are the \"entry point\" to importing components, you need to make sure those are being hot replaced, otherwise it breaks the HMR chain. Note that you'll get a warning about \"You cannot change \", but you can ignore it.\n. Hey, thanks for taking the time to do this. I think it'd be better to have type definitions in definitely-typed, rather than being maintained by us, so I'd recommend making a PR there.\n@nfcampos or @hedgerh, do you agree/disagree?\n. Thanks @Kovensky. Even though we have a small API, I still think it's better to have in DefinitelyTyped, and the typedefs are now there. Thanks again for your effort, @jupl.. Hey, just as a heads up, we're no longer maintaining React Hot Loader 1.x, and instead focusing on 3.0.\nHowever, if you're using express, you can add webpack-dev-middleware and webpack-hot-middleware without worrying about running two servers at once. I have a simple example here. You can use those middlewares with an existing express server. This works fine with React Hot Loader 1, but again we recommend moving to 3.\n. If you do want to use WebpackDevServer alongside a separate backend server, there's decent documentation here. You don't need to include React Hot Loader on the server side, just in the Webpack config.\n. > A key point of my question is why server need react-hot-loader. (as an above error message, Cannot resolve module 'react-hot' in server code ..)\nThe only place you need to reference it is in the Webpack config.\n\nThen I have received error message on my chrome browser.\n\nThis is a warning with React Router that you can ignore, but it still works. See discussion in #249.\n. What version of Node/NPM are you using? Also, can you share a simple project reproducing the Cannot resolve module \"react-hot\" issue?\n. Also, I see you're on Windows, what version? I haven't tested that repository on Windows, will try that tomorrow.\n. > Could you give me a time? I will write code which can reproduce this issue, upload to my github and share with you. May be, I am able to do this work by tomorrow night.\nNo problem, take your time.\n\nI have tested your code on Windows 10.\n\nOk thanks, and what version of Node and NPM do you have installed?\n. Thanks, I'll take a look later :smile:\n. For the error message, because you're running from the server, it's using the server directory's node_modules, which don't include react-hot-loader.\nI'd recommend using a single package.json. You don't really need step 2 in development, because the compiling and hot updates are done by Webpack via WebackDevServer.\nIf you want to have a REST API, for example, alongside WebpackDevServer, you'll need to use the proxy options to point to the port that server's running on (here's an extremely simple example).\nMy Windows machine was running really slowly (5 years old), so I haven't been able to test the RHL3 problem yet.\n. OK, just tested the RHL3 example on Windows with the same Node/NPM versions as you gave (and using Chrome), and everything hot reloaded fine. Again, the React Router message is a warning, not an error message.\n. > Second, When I try to your example again, It still doesn't work well. But, When I try to another way, It works very well.\nThe hot updates should come on file changes, all you need to do is npm start and edit the file of the component. The editor shouldn't matter. Does build-npm-apm do anything different on file save?\n\nAnd, \"You don't really need step 2 in development,\", what is meant?\n\nMeaning step 2 of the instructions you gave, which is running npm run build on the client bundle.\n\nIs it wrong that My project is separated the server project and the client project? \n\nNot necessarily, I just think that makes things simpler if you're using Node as your backend (obviously that's a different case if you're using PHP, for example).\nIf you want to split up client and server projects, you'll need to put all of your Webpack dependencies alongside your client-side dependencies, and run WebpackDevServer from there. You can pass the port of the API server as a proxy option.\n. > if you think what this problem is not for react-hot-loader@3.X.X, I will issue to noseglid/atom-build.\nI'm not sure, but I'd say make sure that it's not re-running npm start on file save or anything like that. Probably do some more debugging on your setup before opening an issue there.\n. We're working on documentation updates for the new version of React Hot Loader over in #257 and #260. We probably won't do any more updates to RHL 1 docs/website, but pull requests are welcome.\n. Yeah there's a few changes needed, see here for an upgrade guide.\n. > what does \"react-hot-loader/babel\" do in .babelrc?\nreact-hot-loader/babel is part of what makes RHL 3 work, by adding some code at compile time that makes potential components \"visible\" to the runtime code that handles updating proxied components. I recommend reading Dan's post for some background, but we also want to document how it works in detail.\nThe babel plugin also does some magic to make class properties able to be reloaded, because they're otherwise hidden to react-proxy. This is because class properties are defined on the constructor, which you can't update without re-instantiating the component.\n\nReferenceError: _this8 is not defined\n\nAre you using async class properties? That looks like the same issue as #391, hopefully we'll resolve that soon.\n. Hmmm, does the keyDown one need to be async? Doesn't look like it's using await.\n\nhot reloading works fine with this component even without the babel plugin\n\nYou won't need React Hot Loader if your components don't have state or lifecycle hooks. The reason the Login example works without the Babel plugin is that it completely remounts the component using regular Webpack HMR. You can test that by adding componentWillUnmount with a console.log.\nAlso, you can use the Webpack loader (react-hot-loader/webpack) as an alternative. It's only able to tag exported components, but it also has less bugs right now. :wink:\n. @Ciantic I agree it's confusing, but the plan is to have the quick setup guide (currently on next-docs) on the README.\nAlso yeah, it would be beneficial to check via the babel plugin/webpack loader whether a module using AppContainer also has a module.hot.accept callback. But it might be tricky because some people might put AppContainer in the \"Root\" component in a separate module, which is valid but would still trigger that warning. There's probably a few more edge cases like that.\nIf you want to write up a PR I'd be happy to look at it.\n. Going to close this out because the original issue was resolved, and the async issue is tracked in #391.\n. Weird, we've been having problems when not including babel-preset-es2015, see #313.\nThis looks like it has something to do with Webpack 2's native ES2015 modules and how Babel transpiles ES2015 modules. I added es2015/stage-2 to that repo's babel config, reproduced the issue, and fixed it by changing it to [\"es2015\", { \"modules\": false }].\n. Ok, just checked, and if you don't opt out of Babel transpiling ES2015, you'll need to re-require the root component like here. I'm going to add a section to the docs so that's more clear.\n. Hi, there's been a few issues about this, see #249 and #288. Also, there's a simple example here.\n. Yeah that works well in many cases. It might be worth changing the docs to use that as the default example.\nHowever if you have separate module.hot.accept calls in other non-entry modules (reloading Redux reducers, for example), it'll break things. I'm not exactly sure why, but I think by not giving the specific dependency (App.js), HMR will try to get updates from all other modules and override/ignore their module.hot.accept.\n. @BTMPL: I only scanned the example briefly, but it looks like you're recreating the store on every re-render. You'll need to pull the store initialization out of the component so it only happens once, like the example I linked to in my previous comment.\n. So that example will break if you modify code in store.js. But otherwise, it works pretty well. I'd guess that it's possible for most use cases, but you'll have to remember to keep references to stateful objects, like the Redux store.. Cool, it's definitely a nice approach I didn't know was possible \ud83d\ude04 . Check out #357, you'll need to make sure the webpack process is running with NODE_ENV=production (with something like cross-env for Windows support). DefinePlugin only sets NODE_ENV for the client-side bundle, but doesn't affect Babel loader.\n. This appears to be an incomplete demo. Can you share something that is runnable? That will make it much easier to debug what's going wrong.\nAlso, if you're using WebpackDevServer, you don't need webpack-hot-middleware.\n. I'm going to close this out because you haven't responded, feel free to re-open if you haven't resolved the issue (and with a runnable demo, please).. @gaearon @albertolive better/more documentation, and #391 and #313, possibly a few more under 3.0 milestone\n. @th3fallen check out next-docs\n. @th3fallen can you open a separate issue with a reproduce project?\n\nSince v3 is still labeled as a beta would it be possbile to make v1 work until it's the new stable? or is that a big ask?\n\nI don't think so, the focus has been on 3.0 and it has an improved architecture, but still a few bugs. I recommend checking out Dan's blog post.\n. > As I understand it, you can't just switch to v3 without also adding the bootstrap  to your app root?\nYou can use plain Webpack HMR, where you'd still need to add module.hot.accept calls in each entry point, for starters. You could also probably migrate one entry point at a time if you're concerned about scale of refactoring.\n. Fixed in 1.3.1 by #430.\nThis will be the last 1.X release, and ReactMount will continue to be changed on minor versions, so please move to 3.0 as soon as you can.. Are you using a separate .babelrc? I think babel-loader needs plugins to be defined as query.plugins. We have problems when not using ES2015 preset (see #313), so maybe that's what your issue is.\nAlso, instead of re-importing Main.js, you'll need to re-import routes, since that module is the \"entry point\" to other component modules. For React Router stuff see #249.\n. Hey, I'm closing this out due to lack of response, and I gave you a few potential solutions. Let me know if those don't work.. You'll need to make sure you're re-importing your route config, since that will link to your components. I'm not sure where AppRoutes comes from in this case. A runnable example would be more helpful, as we say in the issue template.\n. So one issue is that with Webpack 2 and Babel, you'll need to disable Babel from compiling ES2015 modules to CommonJS modules, see our docs\nThe other issue is that you're using the @connect decorator, which is currently not supported by RHL, see #279. A workaround is to instead do this:\n```jsx\nclass App extends React.Component {\n    render() {\n        return (\n            \n\nCounter\nField\nRedux\n\n                {this.props.children}\n            \n        )\n    }\n}\nexport default connect(\n    (state) => ({\n        routing: state.routing,\n    }),\n    (dispatch) => ({})\n)(App);\n```\nThat way React Hot Loader can \"see\" the original <App /> declaration and be able to hot-reload it.\nI've tested these fixes with your project, and it fixes the issue, so I'm going to close this out.\n. I don't think this is a big issue personally, but I'd accept a PR for this.\n. Fixed by #429, will be out in next beta!. Duplicate of #417. we'll get the fix out tonight/tomorrow, but probably stop updating 1.X after that.\n. Hi, I can't take a look at either of you issues without at least some code to look at.. Thanks, @thomfoolery. It'd be nice if the author could instead help with Webpack's/our docs instead of Medium articles :smile:\n@Q-Man / @mkalish:  please open a separate issue with a repository displaying the issue if you're still having the same problem. This issue already has three different people with potentially different problems.\n. Please update to beta.6. It looks like there's an error being thrown in one of your components, and there was a bug in beta.2 that didn't catch the error and display the red box correctly.. It's compatible with Node 6. I'm not sure what's going on there, I've been working with beta.6 for weeks.. > Also when I just run npm install react-hot-loader, it installs 1.3.0 which is not what I was expecting.\nThat's because beta/pre-release package versions aren't installed by default.. OK, actually this issue looks like it could also be an instance of #313. To fix you'll need to add babel-preset-es2015.. > Can I use this preset with react-hot-loader or does it have to be ES2015.\nAt least ES2015 classes, see the issue I linked to above.. Thanks @YasserKaddour, yeah actually you just need to change \"App\" to \"CurrentApp\" so that you're passing the latest version of the App module to render. Alternatively you could use Webpack 2 and not have to re-import App.. There's not a way around it for React Hot Loader 3, it forces you to explicitly opt into HMR. RHL 1.X inserted module.hot.accept into every module.\nYou can still probably put an AppContainer around every React \"entry point\".. You'll need to add module.hot.accept manually, as well as AppContainer. You can also go without React Hot Loader and use plain Webpack HMR if you don't care about retaining state in components when they're reloaded (say if you're using Redux).\nSorry if I wasn't clear before.. Going to close this out, please re-open if you have further issues!. property-initializers (or class properties) are basically sugar for what you're doing, see here%0A%20%20%20%20%7D%0A%0A%20%20%20%20this.handleSliderMouseDown%20%3D%20e%20%3D%3E%20%7B%0A%20%20%20%20%20%20window.addEventListener('mouseup'%2C%20this.handleSliderMouseUp)%0A%20%20%20%20%20%20window.addEventListener('mousemove'%2C%20this.handleSliderMouseMove)%0A%20%20%20%20%20%20this.setState(%7B%0A%20%20%20%20%20%20%20%20isSliderActive%3A%20true%0A%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%7D%0A%20%20%0A%20%20handleSliderMouseDown1%20%3D%20e%20%3D%3E%20%7B%0A%20%20%20%20%20%20window.addEventListener('mouseup'%2C%20this.handleSliderMouseUp)%0A%20%20%20%20%20%20window.addEventListener('mousemove'%2C%20this.handleSliderMouseMove)%0A%20%20%20%20%20%20this.setState(%7B%0A%20%20%20%20%20%20%20%20isSliderActive%3A%20true%0A%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%7D&experimental=true&loose=true&spec=false).\nThe problem is that React Hot Loader can't hot-reload the constructor without the component being re-instantiated (and remounting/losing its state). It can reload class methods, though, so part of our Babel plugin actually deals with this by copying the class property bodies to class methods, see this discussion.\nWe could probably do the exact same transform to support this pattern. I don't have much time to implement this right now, but I'd be happy to give some pointers to someone who wants to try it. :smile:. First, I recommend reading through babel-handbook if you haven't already, it's amazing. Also, AST Explorer is really useful for understanding JS ASTs. Also, babel-types is your best friend for creating new AST nodes.\nThe best way to understand what the Babel plugin does is to look at the test fixtures, for expected input/output. It's probably best to create more fixtures in this style as test cases for the new behavior.\nThis part of the plugin deals with finding class properties, creating new methods, and creating the class property that just proxies to the new method.\nYou can probably look for (arrow) functions defined on this in the constructor, and do the same type of manual replacement using path.replaceWith and creating a new class method the same way.\nHope that's helpful!. @paulpooch you're talking about something different from the original issue. can you move that comment to a new issue please? I don't want the prior discussion to get sidetracked with a separate topic.. I think this is another instance of #313. Try adding either babel-preset-es2015 or just transform-es2015-classes.. > That means transpiling ES6 to ES5, which seems like a temporary fix, as there shouldn't be need for such transpilation\nRight, that's why it's an open issue, and adding the transform is a workaround. \ud83d\ude09. You can make a PR, we're not actively working on React Hot Loader 1.. @bboysathish I haven't had time to look closely, but for webpack-hot-middleware you'll need OccurenceOrderPlugin and NoErrorsPlugin. Also make sure you're using transform-es2015-classes, there's a bug with built-in classes (#313).. If it's not an issue specifically with React Hot Loader (as it looks like here), please go to StackOverflow, Webpack's gitter, or Reactiflux.. If you're not even seeing HMR messages in the console, then it's likely not RHL, because it needs HMR to be able to work. I'd recommend looking at a working example, and making your project match that piece-by-piece until it works.. Can you share a runnable project? I don't know what hotMiddlewareScript does.. You'll need to reload your routes, since they import your components.\nSomething like:\njs\nmodule.hot.accept('./routes.js', () => {\n    const nextRoutes = require('./routes.js').default;\n    renderClient(RootContainer, store, nextRoutes, history, onUpdate);\n}). Again, it'd be more helpful to have an example repo that React Hot Loader contributors can run rather than pasted code.. Thanks! Can you just change this to be in the \"A Big Update is Coming\" section, perhaps at the end?. Thanks!. Thanks for the issue. Can you share your Babel config?. You may need to add transform-es2015-classes (or es2015 preset) to your dev config, as this could be related to #313.. Fixed in RHL. It seems most likely that the issue is at the react-proxy layer. Its tests are run against both transpiled and built-in classes, so I'm not sure what's causing it to fail.. Going to close this out because you got it working and the underlying issue is #313.. Yes, see the next branch.. This looks like a Webpack configuration problem, and doesn't have anything to do with React Hot Loader. Please check their docs, gitter chat room, or StackOverflow for help.. The boilerplate doesn't deal with CSS because it's focused only on getting React Hot Loader up and running.. Cool, looks good. Can you open a pull request and add it to the list?. \ud83d\udc4d Thanks!. Updated next to point to  3.0.0-beta.6. Thanks.. We use react-deep-force-update, which updates regardless of what sCU returns. However, I'd expect sCU to still be called. It seems to make some assumptions about internal React element properties, which may break at any time.\nRelatedly, I wonder whether there's a simple way to distinguish between hot update re-renders (where we can do deep updates) and \"normal\" re-renders from external props changes. We currently always deep update.. Looks good, thanks!. It looks like you're using webpack-hot-middleware in your server.js, but WebpackDevServer in your Webpack config. Note that WebpackDevServer is server built on top of Express. Either one should be fine, but they have different APIs, so you'll probably just want to use one.\nThis doesn't look to be an issue with React Hot Loader, so I'm closing this out. Let me know if you're still having configuration problems.. Can you post a gist or project with your full config? I don't see Webpack plugins, for example.. There's already a similar discussion in #385. I'm helping to maintain this project in my spare time. I'd like to release 3.0 but the docs aren't there and there's a few bugs I want to iron out. But 3.0 works really well for many use cases.\nAlso, stable isn't broken, there was a fix released to support React 15.4. . This error is usually caused by #313, but it looks like you have the es2015 preset. I'll try running your project later today and see what's going on.. Thanks!. Can you share a runnable project? The issue can be a number of things, not necessarily syncHistoryWithStore.. We want to encourage people to use the v3 beta (and similarly discourage v1). I agree it's confusing, but 3 will be fully released soon.. Fair enough. Please make a PR to add the npm install to README and I'll merge it.. Actually I just double-checked, and npm install react-hot-loader still installs 1.3.1.\nOnly installing react-hot-loader@next or specific betas will install 3.0. I'm not sure where the confusion comes from.. No worries, I sometimes have that problem myself, and it's very frustrating.. This appears to be a Webpack HMR configuration issue, can you confirm whether removing React Hot Loader removes that error message?. Closing as this doesn't seem to be a React Hot Loader issue.. Thanks!. Yeah, this is unavoidable when using HMR + React Router, see discussion in #249. The fix will have to come from React Router, but reloading routes still works. You can patch console.error to ignore the warning if it really bothers you. . Seems to be a duplicate of #303, no?. Yeah dynamic imports might be a place where our Babel plugin/Webpack loader for 3.0 should add a module.hot.accept() call. We'll definitely visit this before the full 3.0 release.. You'll get HMR updates (via sockets) in the browser from Webpack Dev Server (or dev-middleware), but not saved to disk in your project. Would you mind sharing a project demonstrating this issue? Also, this doesn't appear to be caused by React Hot Loader itself.. @joetidee can you share a small project reproducing the issue?. I don't know if you're using WebpackDevServer or dev-middleware/hot-middleware, but you're referencing both in your entry array.\nYou'll need entry to include both webpack-dev-server/client?http://localhost:${PORT} and webpack/hot/only-dev-server for WDS.\nFor hot-middleware you'll just need webpack-hot-middleware/client\nRegardless, this is a Webpack configuration issue and not a React Hot Loader issue, so I'm going to close.. See #404, we'd rather have TS stuff in DefinitelyTyped than in this repository.. There hasn't yet been any significant perf-related work on React Hot Loader to my knowledge, so I'm sure there are optimizations we can make.\nAlso, keep in mind that HMR is not just React Hot Loader, there's also the Webpack process itself, WebpackDevServer (or webpack-dev-middleware), and potentially other loaders such as Babel or TypeScript.\nYou might have better luck with Webpack 2.2, since react-hot-boilerplate is still using Webpack 1.14.. I'm thinking we can add an <AppContainer> without an unstable_handleError method. Until we either get better (or faster) source maps as well as better error boundaries in React, the Redbox is far from perfect.. Thanks, since this looks like the same issue as #391 so I'm going to close this as a duplicate.. Thanks @Rokt33r, looks great! I'll review more closely tomorrow. Apologies for the delay.. Yep, sorry for the delay, I burned out hard maintaining this project :smile:\nI only had issues with the file structure but the rest looked fine :+1:. Yeah this is the same issue as #462. Going to close this issue so we can focus on the discussion in there.. I haven't had issues with webpack-hot-middleware, would you mind sharing a project reproducing the issue? Also, this breaks all of the Babel fixtures, so you'd need to update those.. @christophehurpeau have you seen our docs for RHL 3? You'll need to add a module.hot.accept call in your root module, as well as wrap your root React component in an <AppContainer>.. #429 fixes this, but beta.7 hasn't been published.. I want to get #464 merged first, but no time right now to do a thorough review.. Yes, the warning message is something in React Router 2/3 that probably won't be removed (not an issue with RHL). The known RR issues are mostly covered by #249 and #288, so I'm going to close this.. RHL 1.x doesn't support functional components, which is partly why we are working on RHL 3. You can also not use React Hot Loader if you app is primarily stateless functional components and the state lives in something like Redux; just using Webpack Hot Module Replacement would be suitable.. Hi, the component and props props were deprecated as of beta.0, see AppContainer usage in the next branch.. In your first example you don't re-'require' Root. Looks great, thanks!. Dan would know exactly why, but I'd guess it's because every source code file potentially has a React component that could be hot-reloaded.\n__REACT_HOT_LOADER__ could be exported from a module, but you'd have to then add imports to every other source code file at build-time. It's probably not worth the overhead to avoid a global just for a development-time tool.. Many people don't use the .jsx extension for files with JSX, and it's very difficult to statically detect React components at compile time. That's why we added the new Babel plugin/Webpack loader to inject code that \"tags\" components at runtime. See Dan's article on hot reloading for some background.. Closing this because we probably won't change much from the current approach. If you have a solution that works just as well or better with a cleaner approach, please open a PR.. Can you please share an example project demonstrating the issue? We put that section in the issue template so it'll be easier for maintainers to reproduce and triage your problem.. We might need to update the tests for now so we're not always failing.. Looks great!. Hi, React Hot Loader can be used alongside webpack-hot-middleware and Express. You'll also need to include webpack-dev-middleware. I actually have an example using both together here.. Can you confirm whether this breaks when you don't have React Hot Loader? From your description it sounds like it just breaks HMR for Redux state, not React components specifically.. Looks good, let's also remove this doc. We still have #164 open in case we want to reconsider catching errors later on.. Can you put the files from that Gist into a runnable project, like the issue template asks?. Hi, thanks for the issue. This is already being tracked in #304, so I'm going to close this one.. Thanks!. Sure! Just make a PR.. Agreed, doesn't hurt.\n. Yeah I think they were still stage-1 when I first made the PR \ud83d\ude09 \n. We can probably leave this out, since React Transform has been officially deprecated (RHL 1 should be too :wink:).\n. Looks like this is no longer using Flummox.\n. I assumed it was Babel weirdness, I was making the tests pass here. According to AST explorer (highlight the semicolon) that's an additional empty statement, I'll see if I'm accidentally creating one.\n. can you call this directory something like arrow-function-in-constructor rather than issue-427? Also, we could probably use a few more test fixtures, see what we have for class properties.\nI'd also like at least one AppContainer test, since those are more integration-level tests that verify that RHL works, not just the Babel plugin. Here's a reference example. No problem! Take your time.. Can you move this section to the bottom with its own header? Also, please capitalize TypeScript/Babel.. I'm not sure we should push people to RR4 until it's been fully released. Also, there are plenty of workarounds for RR3 that we can supply.. Maybe give a code example with babel-polyfill specifically?. ",
    "csillag": "Is there an estimation about when will this come out of beta? Thanks.\n. ",
    "griffinmichl": "Strangely, I have the page refershing without module.hot.accept, but when I add it in, I get the message telling me 'App is up to date' without the changes occurring. Anyone experienced this?\n. Thanks for the offer, but I got it worked out. Didn't realize I had to re-require <App /> inside module.hot.accept's callback. I must have been looking at a bad example or old branch.\n. Something I found really useful for getting this up and running after a lot of struggle (especially with koa 2, which has less up to date webpack middleware): just use the webpack-dev-server cli and configure devServer in your webpack config to proxy API and asset requests to your app server. Ended up being much easier to implement and you don't end up with a bunch of dev vs prod logic in your server.\n. ",
    "akoskm": "@griffinmichl yes, I've seen that happening too. The WDS/HMR messages appeared in the console but the App remained the same. I never removed module.hot.accept, but instead of\nmodule.hot.accept('./components/main', () => { // .. });\nI switched to\nmodule.hot.accept(() => { // .. });\nand it suddenly started working. Here is the relevant commit from my boilerplate project: https://github.com/akoskm/react-hot-boilerplate/commit/9938a629b7825523e8d825b42523a0d9fa0e7d53\nSince it started working without the './components/main' it also works when that parameter is present. \ud83d\ude32\n. ",
    "dobryanskyy": "@ntucker were you able to solve the issue? I'm experiencing quite similar one. Yep, I have the same isssue. ",
    "rolandfung": "I have multiple applications in the same repo, so I use a wrapper function that takes in the root element, store and controller as the parameters (I'm using Cerebral.js). Changes in application files are being detected but I get full reload each time in the browser. Is my usage of this wrapper causing the problem? I am on RHL3 beta 6 and webpack 1.13.2.\nlet getAppWrapper = (App, controller, store) => {\n    @root(store)\n    class AppWrapper extends React.Component {\n        render() {\n            return (\n                <Container controller={controller}>\n                    <MuiThemeProvider>\n                        <App {...this.props}>\n                            {this.props.children}\n                        </App>\n                    </MuiThemeProvider>\n                </Container>\n            );\n        }\n    }\n    return AppWrapper;\n};. ",
    "ismay": "@rolandfung I'm experiencing the same problem (full reload on changes), with hot-loader beta6 and webpack 2.2.0:\n```javascript\n// abstract render for hot reloading\nconst renderWithHotReload = AppComponent => {\n  render(\n    \n\n,\n    document.getElementById('app')\n  )\n}\n// initial render\nrenderWithHotReload(App)\n// enable hot reloading, will be stripped in production\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./components/app', () => {\n    const NextApp = require('./components/app').App\n    renderWithHotReload(NextApp)\n  })\n  module.hot.accept('./rootReducer', () => {\n    const nextRootReducer = require('./rootReducer').default\n    store.replaceReducer(nextRootReducer)\n  })\n}\n```\nCode here. Apologies if this isn't the place to post this (but thought it would be valuable in case it's a bug).. ",
    "pablopaul": "@gaearon What kind of documentation is needed? Maybe you can give a rough documentation outline or so\u2026\n. ",
    "hedgerh": "I can help out with the docs.  I've been reading up and gathering as much info as I can.  I'm about to go through both the old and 3.0 source to try and figure out what's going on under the hood.  I'll see if I can get the ball rolling on the Intro, as well.\n. Hey hey @gadicc no worries.  I've been off all weekend so I'll need a little bit of time to get caught up.\nMy progress so far was:\n- I prepped a migration guide in docs/README.md\n- Removed all the starter kits bc I don't think they fit within the scope of the project\n- I took a first pass on the intro that I'm not crazy about, but should be a decent start\n- Added a little to the main readme\nTotally open to any changes.  Just did as much research as I could and piece things together as I understood it.\n. Hey @gaearon, just wanted to check in and see what the status on this was.  I haven't checked in on it in a couple of months.  I will take another look at them, but I think we just need you or someone that knows the lib to review the docs/site and see if anything needs to be added or removed.\nObviously no rush on my end.  Just wanted to touch base!\nPR for docs: https://github.com/gaearon/react-hot-loader/pull/257\nPR for github pages: https://github.com/gaearon/react-hot-loader/pull/260\n. > What is the best setting of devtool in my webpack.config.js file?\n@nilshartmann:  Looks the official boilerplate, react-hot-boilerplate, is using eval for the devtool property in the next branch, which is a good reference for seeing how to configure React Hot Loader 3.0.  Are you having issues with eval?\nhttps://github.com/gaearon/react-hot-boilerplate/blob/next/webpack.config.js\n. Sounds good.  I'm going to spend some time on the docs now.\n. I'm filling out step 1/3 now. \n. @tsaiDavid Has any of your work been lost, or is what is available here up to date?\n. @gaddic @tsaiDavid Been pretty busy, but took some time to review the Getting Started guide.  It's looking great!  I made some typo fixes in another PR and left some line comments.  I think something weird happened and I commented on a specific commit for a few different comments :O\nAnother thing I noticed is that the links are kind of hard to distinguish from regular text.  I completely missed the links to the boilerplate's webpack.config.js and any other links that used this styling.  We should make them more noticeable.  Agree?\n. @gadicc I'm working on this now.  I can take care of both of these. :D\n. Did a lot of work on the Getting started guide.  Still needs a couple of things worked out, plus the webpack-dev-middleware how to.  Let me know what you think, especially if its too much \ud83d\ude35 \n. Hey hey @capaj :) Dan opened an issue about this in the stackframe.js repo here:  https://github.com/stacktracejs/stackframe/issues/11\nLooks like they want to make error-stack-parser more resilient to parsing errors.\nDan has also opened an issue in the redbox-react repo to make it more resilient to errors, as well:  https://github.com/KeywordBrain/redbox-react/issues/54\nLooks like no one is really hopping on them, if you are up to the task.\n. @gadicc Sounds good.  I figured as much, just wanted to bounce it past you first :D\n. Are there any issues or anything that we can reference for the require.ensure, Checking element types, and Reassigning components limitations?\n. @calesce My thought was to provide reference to discussions surrounding each limitation in case people wanted more info on why they're issues, but we don't have to add it if you don't think its helpful or necessary.  I'm not caught up on these issues, so I'll yield that decision to you and merge it in.  Just give me the word.\n. Alright. add any relevant discussions and let me know when you're ready\n. Alright.  Feel free to open a new PR if there are any future changes.\n. I think this heading is a little confusing, since the first sentence introduces the getting started content, but this paragraph is actually about the boilerplate.  I think \"Introduction\" would be great, or something that essentially says \"Want a quick start? Try the boilerplate.\" in a clearer voice.\n. > For example, you can add an entirely new file called server.js and simply include the server provided in the boilerplate.\nAt first, I didn't realize you meant to just copy the boilerplate's server.js into my project.  Maybe we could rewrite this paragraph to:\n\nIf you're only rendering on the client side, this is the easier option, and quicker to setup.  You can simply copy the server.js from the boilerplate into your project. The key aspect of this configuration is that when creating a new WebpackDevServer, you need to specify hot: true as an option.\n\nand then maybe just include the server.js code as a codeblock.  What do you think?\n. Do you think this is something that may screw some people up?  We may want to make it more visually noticeable if someone is skimming, trying to troubleshoot, or even if this is just good info to know.\n. > you're almost done!\nAren't they finished with the steps already? :D I like this section, but I feel like some of this info would be more useful before going through the steps.  Also, maybe we should mention above, before the steps that involve the main entry point, that there is example entry point code down here that they can reference if they're confused by anything.\n. ",
    "gadicc": "Can I suggest we get started on Hackpad first?  I think it will get us started quicker, and then we can use something like the Hackpad downloader to download as markdown to commit, moving forward.\nI took an initial bash at https://hackpad.com/React-Hot-Loader-v3-CxSDMncWUnb.\n. @gaearon, sure thing, thanks.\n@hedgerh, sorry, I probably should have checked with you first on your progress but I just wanted to get the ball rolling.  But now we can collaborate together :)\nall, we'll track this in https://github.com/gaearon/react-hot-loader/pull/257.\n@tsaiDavid, help would be most welcome, thanks!  Everything is on github now so see the issue above for more info.\nIn particular, I'll mention that I don't use or know how to use webpack, so help is very welcome in all webpack related content.\n. @tsaiDavid, did you edit your post right like right now? :)  Sorry, I only saw it when refreshing the page, I had left the page open and your edit didn't come through.  Anyway, as you saw, everything is on GitHub now... your points are all great, would love you to submit it as a PR to next-docs as described in #257.\n. @hedgerh, sorry, I also didn't notice your other PRs until right now!  I'll take a proper look tomorrow (it's night time here now), but maybe anything that's not in gh-pages we can merge into the next-docs branch and keep all in one place tracked in the single #257.\n. @appsforartists, the webpack loader only registers/patches react components that are exported by the module/file, whereas the babel plugin works on all top level variable assignments.  This will be made clearer in the final version of the docs.\n. Merged the commits into gh-pages-next (tracking in #257) so we can collaborate on it.\n. @hedgerh, I merged these into the gh-pages-next branch so we can track in #260 and collab.  Agree that it's better to get things rolling!\n. I merged in @hedgerh's work from #254 that we can continue here.  Some of the previous work was moved to #260, since it was intended for the gh-pages:\n\nThis is non-website doc stuff. Made a first pass at a Migration to 3.0 guide and added stuff to main README.\nI also think the list of starter kits/boilerplates doesn't really make sense in the scope of this project, and should be taken out, with the exception of react-hot-boilerplate. A decent few of them were outdated/abandoned anyway. I can add them back if you don't agree, though.\n. thanks @nilshartmann, that's some important feedback and I've updated the doc (yeah, the PropType.error is from react 15, my bad).  I'm repasting your 3rd question here so it doesn't get lost, hoping some of the webpack users can help with that (I use Meteor):\nMight not be directly related but maybe someone knows: What is the best setting of devtool in my webpack.config.js file? I tried several ones but the stacktraces dumped both by Redbox and from console.error doesn't point to my source files (both link to my bundle.js that has been generated by webpack, like this: http://localhost:3000/dist/bundle.js:36376:12). When running my app without hotloader (just removing the AppContainer wrapper, no changes to .babelrc or webpack.config.js) all errors dumped on Chrome's devtool console are correctly linked to my source files (something like webpack:///./client/src/components/editor/ContactEditor.js) \n. - [ ] Explain about rhl/webpack vs rhl/babel for exports for top-level assignments.\n. this is awesome, @tsaiDavid, thanks!  all very welcome improvements.  just one issue which I'll comment on in the diff and then I'm happy to merge.  yeah, for future it's enough to just put a #257 in there somewhere and we'll get a notification (I think :)).\n. @tsaiDavid I'm going to fix that line on my side, these were actually intended for the gh-pages (sorry that's my bad) so need to move these there and then I'll ping you again.  Thanks!\n. Thanks.  I'm away for the long weekend but will set something up next week.\n. Actually, let me close this.  I don't think many other people will use this pattern (necessitated by historical reasons).  I'm going to refactor the project and I'll re-open if I come across something that needs this again.\n. I (mistakenly) put a lot of stuff in the docs directory, that I'll move over to here shortly.\n. @hedgerh I merged in the stuff that I mistakenly put in the non-gh-pages docs, and that @tsaiDavid helped with, to getstarted.md.  It follows the 3-step outline that gaearon suggested.  I removed references to the old version of the plugin.  I left the main Webpack outline in and put your changes there, I'll leave this to you, because, I don't use or know how to use Webpack :)  We can carry on working from here.\n. @tsaiDavid, oh yes, sorry, I meant to mention that I had to jsx -> js for the highlighting because of the change, but glad eveything else is there.\n\n@tsaiDavid, @hedgerh, I also enabled GFM for the markdown engine and as you saw, in the latest version of the engine we can do GFM style code fences, so no more missioning with the long jekyll syntax for that.  The CSS is a bit different though.\nI might have to take a step back until next week, but I'll follow the progress and chip in where I can.  jekyll drove me crazy today :D\n. Hey @hedgerh, @tsaiDavid, can you give an update on anything you guys discussed and/or are working on?\nLet's try finish this up in the next few days if possible, now that we're already in beta.\n. @gaearon, what are your thought on the current state of the docs or in particular the getstarted guide?  I setup a preview of the branch at http://rhl-docs.gadi.cc:4000/react-hot-loader/getstarted/ and of course you can comment on the lines here.  Maybe better to get the guide online and do further work later?  The two \"XXX\" sections could be cleaned up quite easily (when do you plan to merge the next branches?)\n. @hedgerh, great stuff!  Yeah it's pretty hectic doing this amongst other work but I think we're doing a great job :)  Yeah it did say one was on an outdated diff... if you left a github tab open, sometimes they don't update... when I do this I've gotten into the habit of ctrl-R before commenting.\nAgree.  Links should be real links, not formatted as code.  As per other comment, if you're working on this now, feel free to fix (I switched the other links to markdown for consistency), otherwise we'll do it.  Here are the two issues that either of us can check off when done :)\n- [ ] Move explanatory comments from \"Putting it all together\" to relevant sections (ref)\n- [ ] References to other files should be real links, not formatted as code (above)\n. Apologies, had this tab open in my meteor-hmr window (which used to be called meteor-react-hot-loader).\n. @hedgerh, all great!  Thanks for being so considerate :D  But I think next time just commit on the branch... let's both just commit whenever we finish up... if there ever is a conflict, we can manually fix it.  We can always just write a note in the PR if we're working on something big and don't want others to touch it.\n. Most considerate ever :)  Generally, I prefer what you did for my own projects, but I think for this, where we're both busy and we want to progress quickly, better to just commit.  I think I already took that liberty with some stuff you wrote :)  Better to keep things moving and revert a commit if problems do arise, especially since we're going to squash the commits at the end anyways.\n. thanks for the extra pair of eyes!  fixed.\n. just this snuck through :)\n. Agree.  If you're already working on this, feel free to just change it.  Don't forget to pull in the changes from the other PR first though.\n. Agree.  I actually thought you wrote this :D  All the Webpack stuff is either you, @tsaiDavid, left over from before, or just me summarizing what was already there.  In general I might be a bit useless for the Webpack stuff, since I don't use or know Webpack.  So consider all your views on the Webpack stuff as absolute :)\n. Agree.  I like the complete example at the end but yes, some of the explanations (thanks @tsaiDavid) there would be better suited in each relevant section.  Feel free to move it if you're already working on this otherwise one of us will do it later.\n. Oops, almost missed this note.  Yeah, it came up already in the main thread and is definitely important for people to understand.  We can make it clearer and add to the troubleshooting docs too.\n. ",
    "tsaiDavid": "@gaearon @gadicc @hedgerh \nI've been following everyone's work and gathering info as well, and would be more than happy to help with documentation. Below, I took the work you all have started and simply rearranged the JSX component tags to make the layout a little more familiar for folks new to this.\nWe may want to clarify a couple of points that could prove to be confusing:\n- RootContainer is simply an example of a named component, users should be able to swap it out for whatever they have already.\n- The same thing applies to the ID of react-root - I can honestly see this point being a bit confusing as well since this requires configuration on the user's part. I'd be happy to help explain some of these bits.\n- Finally, might we look into using something like GitBook as @gaearon had done with the Redux documentation? Setting up RHL3 would definitely take much longer than usual.\n``` jsx\nimport 'react-hot-loader/patch';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport RootContainer from './containers/rootContainer.js';\nrender((\n  \n\n\n), document.getElementById('react-root'));\nif (module.hot) {\n  module.hot.accept('./containers/rootContainer.js', () => {\n    const NextRootContainer = require('./containers/rootContainer.js');\nrender((\n  <AppContainer>\n    <NextRootContainer />\n  </AppContainer>\n), document.getElementById('react-root'));\n\n})\n}\n```\n. @gadicc - sounds good I'll get right on it! I did expand my original post at some point, yup\n@hedgerh happy to look at stuff for you guys, I love writing \ud83d\udc4d \n. Just want to point out I was also able to update the shell command example, prefixed it with the $ symbol that we typically see, indicating that it is a command to be used from one's terminal.\nAn example was also not in consistent ES6 as in our other examples, so I updated it.\n. @gadicc #257 #243 - apologies for all the comments, just want to make sure I'm referencing the issue correctly, please let me know if there's anything else I can do.\n. @gadicc @hedgerh - any areas that either of you need a hand with? Happy to help - got a bit confused as to where the changes I had made went.\n. @hedgerh - Pinged you on gitter - but I just spun up jekyll. Since the docs aren't going to be in plain markdown, the 'jsx' syntax highlighting is not going to work properly. But it looks like everything else is there!\n. So it seems like the general consensus is that while the error shouldn't really be there - it's not affecting the hot reloading in any way - right?\nThe codebase I'm refactoring right now is finally at the point where I'm getting all the correct hot-reloader messages in the console but the changes aren't appearing in my browser until I do a refresh/reload manually. Haven't run into this issue before..\n. @hieuhlc @gaearon - I'm facing the same issue myself in a larger app. Could you please share which versions (react-hot-loader & webpack) you're using? Are you running into this issue using RHL3?\n. @ozum\nStrange, I'm having a similar issue myself - though with a much more complicated app I'm working on. Since you're exporting the class App as a default module, I wonder if you can remove the \".default\" from the require statement? Not sure if that's going to help you out at all though. I'm assuming you're not passing the hot flag in CLI right?\n. ",
    "janeklb": "@wmertens I agree, its a bit wet so I've been doing something like:\n```\n// ... all other stuff\nimport RootElement from './RootElement';\nrenderWithHotReload(RootElement);\n// Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./RootElement', () => {\n    const RootElement = require('./RootElement').default;\n    renderWithHotReload(RootElement);\n  });\n}\nfunction renderWithHotReload(RootElement) {\n  render(\n    \n\n\n\n,\n    document.getElementById('quickpick-root')\n  );\n}\n```\n. @wmaurer never heard that one before -- excellent :)\n. ",
    "rvaidya": "A small optimization hack - I noticed that there are a bunch of places in my production javascript where my development env folder path is being included due to react-hot-loader.\nIf you use the Uglify plugin in your webpack production build you can add a global def in the Uglify config to drop this stuff out.\nThe react-hot-loader code itself could probably be modified to take better advantage of this by wrapping more of the module itself in if(__REACT_HOT_LOADER__) checks.\nnew webpack.optimize.UglifyJsPlugin({\n    compress: {\n        warnings: false,\n        screw_ie8: true,\n        drop_console: true,\n        drop_debugger: true,\n        dead_code: true,\n        global_defs: {\n            __REACT_HOT_LOADER__: undefined // eslint-disable-line no-undefined\n        }\n    }\n}),\n. I'm on Windows so I was using DefinePlugin to define NODE_ENV.\nLooks like I can achieve what you suggested by using a combination of DefinePlugin and cross-env.\n. Using both cross env and DefinePlugin does work.\nYou'd think just using cross-env to set the environment variable would be enough, but my output file sizes are larger without the additional DefinePlugin entry setting process.env.\n. ",
    "patsissons": "I ran into a really challenging issue to diagnose today. I was importing my API surface first (which imports a bunch of stuff in the correct order), then importing the root component explicitly. This ended up creating a dependency graph that HMR could (or would) not handle. In order to resolve the issue, I had to import my API surface as a namespace and access the root component via the import alias.\nThis doesn't work:\n``` ts\ndeclare let module: any;\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\n// import framework API surface\nimport './webrx-react';\n// import Root Component\nimport { AppView } from './Components'; \nconst container = document.getElementById('app');\nrender(, container);\nif ((module as any).hot) {\n  (module as any).hot.accept('./Components', () => {\n    // ...\n  }\n}\n```\nbut this does:\n``` ts\ndeclare let module: any;\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\n// import framework API surface\nimport * as wxr from './webrx-react';\nconst container = document.getElementById('app');\nrender(, container);\nif ((module as any).hot) {\n  (module as any).hot.accept('./webrx-react', () => {\n    // ...\n  }\n}\n```\nI tried a number of combinations, but ultimately, if your root component has two parents it gets removed from outdatedDependencies and then we end up walking up the chain to module 0 which returns without a result.\nI figured it's possible I'm not seeing something, so checking in with you guys.\nI should also mention i tried to import the AppView explicitly from its original export and then accept it directly from there, no dice same issue.\n``` ts\nimport { AppView } from './Components/Common/App/AppView';\n(module as any).hot.accept('./Components/Common/App/AppView', () => {\n // ...\n}\n```\n. ",
    "tleunen": "So I followed the steps to convert a project to the new \"3.x\" version and the page is realoading entirely every time a change is made. It wasn't the case before. Any idea on what could be the cause to that?. I'm in a fairly big project so I can try to reproduce it in a smaller one but I'm setting the AppContainer  with the root component (which contains the redux provider and router).\nif (module.hot) {\n    module.hot.accept('./root', renderApp);\n}. So I'm still having the same issue... In your post @thomfoolery, why are you adding 'webpack/hot/only-dev-server',? It seems it adds a second dev-servers. I can see twice this log in the console with that: \nWaiting for update signal from WDS...\n. I wonder if my initial issue might be related to react-router 3 as well..\nHow do you make HR works with react router?. @calesce Do you have any example with RR? It looks like most people have issues with that specifically. ",
    "alexisvincent": "@gaearon This can be closed now I think\n. Cool Cool \ud83d\udc4d \n. @tyscorp @gaearon I think the issue is actually with react router. \n. @gaearon Figured out a way to reproduce.\nThis works\njs\n    ReactDOM.render(\n      <AppContainer><App /></AppContainer>,\n      rootEl\n    );\nthis fails\njs\n    ReactDOM.render(\n      createElement(AppContainer, null, \n           createElement(App),\n      rootEl\n    );\n. @gaearon I wonder if it isn't because Im using createElement which I import from react. This should be overwritten shouldn't it?\n. @gaearon Yeah Looks about right\n. Hmm. Ill force it to load well before to test... Also, I've never used JSX but I thought it was a source transform... How does it get access to createElement\n. @gaearon I loaded react-hot-loader/patch in a promise and on completion loaded the rest. Same issue. I wonder if theres an issue with multiple versions of react?\n. @gaearon Nope. Only one version of react is being loaded\n. Hi @calesce, I'm glad you replied because a few days ago I hit this issue again but had forgotten about this issue. Was going to create another. I'll get a project up for you to reproduce within the hour. Going to just see if it's the same issue. \n. @calesce New repo code is up. Vastly simplified. Everything should work. Basically it seams that the issue is when using createElement instead of JSX.\n. Hmm. I think i forgot AppContainer in this version. Weird that it works and doesnt even without the container. Will add it now and see if this resolves the issue\n. Done, same issue\n. @calesce yeah I still need to sort that out. It has to do with how jspm-devtools bundles files initially. Will be fixed as soon as I start pushing dependencies over http2 server push\n. But glad you were able to reproduce. \n. @calesce Any progress on this?\n. I can confirm that upon a reload, react proxy is running an update. Don't know what that means for createElement. It seems that react proxy isn't keeping the state\n. ",
    "alexanderchr": "Will have to figure out some way to get this working with getComponent as well\n. Might want to update AppContainer.prod.js as well\n. Works flawlessly. Thanks.\n. Yeah, there are plain routes. Think they will be hard to support like this though as there are no Route elements at all when using them.\n. Might actually have to do this for all child routes as well, will test.\n~~edit: yes, not working when nested~~\n. Sure, added a few tests.\nAlso had some midnight inspiration and rewrote all of it. I included these changes in the last commit, so feel free to discard them if you think the old way was better. Otherwise you can just squash them into the first refactor commit. Tests should hopefully be passing either way.\n. Sure!\n. Cool. Thanks for reviewing!\n. Sure.\n. Yeah, nice catch. It seems like it worked because babel were transpiling it to _key anyways.\n. Sure.\n. Right, changed it a bit.\n. Might want to use a real polyfill instead\n. Yeah, that's it. Thanks.\n. ",
    "jaredpalmer": "@gaearon This may be a hack, but passing Router a random key seems to work fine.\n``` javascript\n// Root.js\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux'\nimport { browserHistory, Router} from 'react-router'\nimport configureStore from './store/configureStore'\nimport routes from './routes'\nexport default class Root extends Component {\n  render() {\n    const store = configureStore()\n    return (\n      \n\n\n    );\n  }\n}\n```\n. ",
    "burkhardr": "Is there a working example for react-router somewhere?\n. ",
    "phyllisstein": "Sorry if this is a dense question, but is beta.1 expected to still be broken for async routes? I've been trying to make the switch from react-transform-hmr in a project of mine, and I'm currently in a state where hot reloading works for individual components but not the asynchronously-loaded views (even with Webpack code splitting disabled).\n. It looks like this has something to do with using the es2015-webpack Babel preset, so I think you may be right. Another repo I've been working with (https://github.com/ignota/issue-0/tree/react-hot-3) is able to do some view reloading using es2015-loose in place of es2015-webpack-loose. Seems to still have some issues---in particular, the hot update usually fires once or twice then stops---but I think they could have something to do with redux-saga. Gonna try switching to redux-thunk and seeing if that improves things at all.\n. redux-thunk, lovely though it is, didn't get me too much further. The first change to a view registers with HMR, but logs a warning to the console: \"[HMR] Unexpected require(583) from disposed module 581.\" (581 is my main App component, and 583 is the view that's being hot-updated.) After that, every subsequent change is detected by the dev server and the hot reloader and loaded by the browser, but fails to update the view. Quick screencast again:\n\n. Grain of salt and all, but it seems this issue has mysteriously resolved itself with Webpack 2.2.0. Previously, in order to make hot reloading work, I was manually adding chunks of code like this to any parent view that asynchronously loaded children:\njs\nif (process.env.NODE_ENV === 'development') {\n  require('./child1');\n  require('./child2');\n  require('./child3');\n}\nI removed all such lines on a whim to see what it'd break, and much to my surprise and delight, HMR continued to function beautifully.\nI don't think anything relevant has changed in my setup other than the Webpack version, but this wasn't carefully tested. Would be glad to see if others could corroborate my story.. Just ran into this myself and I'm pretty stumped. I'd love to do something a little more elegant than checking displayName or cramming my components with static flags, but I can't seem to figure out a solution. Is it really hopeless, @nfcampos ?. Just got bit by this myself. Looks like the relevant react-proxy PR has been open for some time---any chance of getting that merged through, @nfcampos and @gaearon?. ",
    "tomitrescak": "Is React Router supposed to work with beta.2 with no errors? If so, what is the way of having it work? The hot reload works for me, but I keep receiving the error in console. The error is:\nWarning: [react-router] You cannot change <Router routes>; it will be ignored\n[EDIT] The only way to make it work is via setting <Router key={Math.random()} />\n. Thanks @gaearon , I already got accustomed to my red friend in the console;). Just for the peace f mind it would be great to have warning displayed as warning, not error, but that's no biggie.  I'll wait for RR fix. Thanks for your answer!\n. I have read that thread already quite thoroughly, but I have exactly the SAME proposed solution as per one of the last posts (see code avove) and I still receive the error.\n. Yes I tried that and it most certainly helps ;) But, if you add a different key with module reload, you will lose a state and the whole react-hot-reload is kind of useless then ;/ \n. Ok, thanks for the feedback! I'll wait for the official fix then and not mind the error message;)\n. ",
    "leecade": "\ud83d\udc4d \n. \ud83d\udc4d \n. ",
    "chase": "EDIT: After pulling my repo and doing a clean run, I cannot reproduce the effect unfortunately.\nPerhaps I'm missing something, but I seem to have things working without using @jaredpalmer's key={Math.random()} hack and I receive no warnings.\nI'm using:\n\"react\": \"^15.0.1\",\n    \"react-dom\": \"^15.0.1\",\n    \"react-hot-loader\": \"^3.0.0-beta.2\",\n    \"react-router\": \"^2.6.0\",\n    \"webpack\": \"^2.1.0-beta.20\",\n    \"webpack-dev-server\": \"^2.1.0-beta.0\"\nThe only change I made was instead of using a random key, I set the router's key to a static string.\nBasically as you see here: https://github.com/jaredpalmer/react-production-starter/blob/master/client/index.js#L39\nJust replace it with <Router routes={routes} history={browserHistory} key=\"ROUTER\" />\nMind you, I'm using async routes using Webpack 2's native module dynamic loading with System.import for most paths.\nI'll post my .babelrc and a simplified Webpack config later for others to reproduce.\n. @frankleng You're right. It seems it was just a fluke that I cannot reproduce on a clean setup.\nEDIT: @frankleng Trying your method, the routes never change after updating. Does it not warn you when adding or removing a route, then navigating to it using browserHistory?\nIt also doesn't appear you are using AppContainer in that gist, so if it does work, is local state maintained?\n. After quite a bit of searching, I found @dferber90's React Router with RHL3 compatibility table\nUnfortunately, as it says, asynchronous routes still aren't functional. I did discover a clever solution to my synchronous routes not working. You can find the reference code inside of his compatibility testing fork: https://github.com/dferber90/react-hot-boilerplate/blob/next/src/routes.js#L13\nUsing Object.assign on an empty exported reference object bypasses the React Router equivalency checks while still permitting the routes to update.\nMy setup is more or less like this:\nrefEqualRootRoute.js\njavascript\nexport default {}\nroutes.js\n``` javascript\nimport App from './App'\nimport SomeContainer from './SomeContainer'\nimport refEqualRootRoute from './refEqualRootRoute'\nexport default Object.assign(refEqualRootRoute, {\n  component: App,\n  path: '/',\n  childRoutes: [\n    {\n       path: '/SomePath',\n       component: SomeContainer,\n    },\n  ],\n  indexRoute: {component: App},\n});\n```\nRoot.js\njavascript\nimport React from 'react';\nimport routes from './routes';\nimport {Router, browserHistory} from 'react-router/es6';\nconst Root = ({store}) => (\n  <Provider store={store}>\n    <Router history={browserHistory} routes={routes} />\n  </Provider>\n);\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n};\nexport default Root;\nindex.js\n``` javascript\nimport {configureStore} from './store';\nimport rootSaga from './Sagas';\nimport Root from './Root';\nconst store = configureStore({});\nlet rootTask = store.runSaga(rootSaga);\nconst root = document.getElementById('app');\nconst render = () => {\n  ReactDOM.render(\n    \n\n,\n    root\n  );\n};\nrender();\nif (process.env.NODE_ENV === 'development') {\n  if (module.hot) {\n    module.hot.accept('./Sagas', () => {\n      rootTask.cancel();\n      rootTask = store.runSaga(rootSaga);\n      render();\n    });\n    module.hot.accept('./Root', render);\n  }\n}\n```\n. @awitherow I wouldn't say it is recommended, as I haven't used it with RR4 and stopped using RHL due to flaky behavior. It would not hurt to try and then post your results, though.. ",
    "frankleng": "Defining a static key has no effect\nWhat seems to work is moving the routes var to a higher scope and then call setTimeout on the hot reload render. \nhttps://gist.github.com/frankleng/39e5953b78d42fdc070eced38bd2b307\n. @chase thanks for catching that. might've missed it when I copy and pasted.\nI wrap <AppContainer> around react-redux <Provider>\nlocal state is is maintained and not seeing any warnings at the moment.\n. ",
    "codetony25": "When working on React Router v4 server side rendering, here's what I did on the client side:\n``` jsx\nimport { AppContainer } from 'react-hot-loader';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router';\nimport RootLayout from './components/layouts/RootLayout';\nconst renderClient = () => {\n  ReactDOM.render(\n    \n\n\n\n,\n    document.getElementById('app')\n  );\n}\n// Render the client-side DOM\nrenderClient();\n// Enable Hot Module Replacement (HMR)\nif (module.hot) {\n  module.hot.accept('./components/layouts/RootLayout', () => {\n    const nextRootLayout = require('./components/layouts/RootLayout');\nrenderClient();\n\n});\n}\n```\nHowever, for some reason, having the const nextRootLayout = require('./components/layouts/RootLayout'); there (even tho I don't use it) got it to hot re-load appropriately, but when I remove the nextRootLayout, it stops updating, not sure what's happening lol, but i'm just going to keep nextRootLayout there for now.\n. ",
    "seeden": "@codetony25  you need to use render client with your updated component\nrenderClient(nextRootLayout)\n. I have same problem. \n. ",
    "jgentes": "@jaredpalmer I had tried everything.. my modules were rebuilding, but the page wouldn't update. Your quick fix to add a random key to routes did the trick!\n. thanks @calesce , that's good to know. I was refreshing the page anyway, so it's still an improvement for me.\n. ",
    "schickling": "Is this issue still on the roadmap for RR3?\n. Thanks for that clear wrapup @calesce!\n. ",
    "Codelica": "\nRR 2/3 mostly works with React Hot Loader as it currently stands, AFAIK the only issues are the console warning and getComponent not re-running.\n\nAnyone else having issues with RR3 and  hot reloading?  Normal  entries reload fine but  doesn't for me.  I set them to the same component just to try things, and only the Route entry would hot reload it.  Going to try migrating to RR4, but was curious if I'm alone on that issue.. ",
    "janv": "@Codelica I \"solved\" it like this, with routes in their own module:\n```jsx\nlet routes = \n  // All your routes\n\n// Any update within the app will bubble up to this file\n// We can't create a new  element though, because Router won't accept\n// updates to its routes prop.\n// So we're passing the previous export from update to update to prevent Router from complaining\n// The React components themselves will still update properly\nif (module.hot) {\n  let oldRoutes = module.hot.data && module.hot.data.routes\n  if (oldRoutes) {\n    routes = oldRoutes\n  }\n  module.hot.dispose(function(data){\n    data.routes = routes\n  })\n}\nexport default routes\n```. I have encountered an issue with this when using static class properties\nclass Foo extends React.Component {\n  static bar = () => 'baz'\n}\nProcessed throught the react-hot transformation, bar will be removed from the class.\nI have illustrated this in https://github.com/janv/react-hot-static-bug\n. I ran into another issue with this.\nI recently tried removing the es2015 preset from our babelrc in development, since we're doing all our development in Chrome whcih should not need that preset.\nWe have Components nested two levels deep, that are forwarding callbacks which we create as arrow function class properties.\nSomething like\n``` js\nclass A {\n  render(){\n    return \n  }\nhandleClick = () => this.setState(...)\n}\nclass B {\n  render(){\n    return \n  }\nhandleClick = () => this.props.onClick(...)\n}\n```\nsetState in A complains that the component is unmounted. This happens without any actual module replacement happening, i.e. right after the inital page load.\nThat should mean someone somewhere is keeping a reference to an original implementation of a function. I'll try to come up with a minimal executable example. Also, no sure why this only started happening after we removed babel-preset-es2015 yet\n. I managed to write a minimal app that exhibits the problem:\nhttps://github.com/janv/react-hot-static-bug/tree/arrow-bug\n(Notice this is a new branch on the repo I used before to illustrate the issue with static class properties)\n. \ud83d\udc4d \nThanks a lot for this.\nI also managed to create an example-app for my problem in #322 \n. Just noticed this line.\nWouldn't a call to foo.bar() be forwarded to window.__bar__REACT_HOT_LOADER__ instead of the class instance? Since the first line binds _this to the global object and not the class instance?\n. ",
    "awitherow": "@chase is your method here above https://github.com/gaearon/react-hot-loader/issues/249#issuecomment-236790396 still the recommended approach to handling redux-saga?. ",
    "johnnypez": "I just wanted to share this fairly dirty workaround for hot-reloading async routes.\nLike others, I had initially added a random key to my router which blew away state every time anything hot reloaded.\nSo I poked around in react-router's Router.js by exposing a global reference to it then and tried recreating the internal transitionManager and router objects after a hot reload. This got things working, so I've wrapped react-router with another component that does this teardown and setup any time the routes prop changes.\nI know it's bad to call these lifecycle functions directly but it's working for now, is there any other reason why I shouldn't do it?\nhacky_router.jsx\n```jsx\nimport React, {Component} from 'react'\nimport {Router, browserHistory} from 'react-router'\nexport default class HackyRouter extends Component {\ncomponentDidMount(){\n    // componentWillReceiveProps just whines about changing the routes prop so this shuts that up\n    this.router.componentWillReceiveProps = function(){}\n  }\ncomponentDidUpdate(prevProps){\n    if(prevProps.routes != this.props.routes){\n      // tear down and set up router internals again\n      this.router.componentWillUnmount()\n      this.router.componentWillMount()\n    }\n  }\nrender(){\n    return this.router = ref} history={browserHistory} routes={this.props.routes} />\n  }\n}\n```\nentry.jsx\n```jsx\nimport React from 'react'\nimport {render} from 'react-dom'\nimport HackyRouter from './hacky_router'\nimport routes from './routes'\nimport {AppContainer} from 'react-hot-loader'\nconst root = document.getElementById('root')\nrender((), root)\nif (module.hot) {\n  module.hot.accept('./routes', () => {\n    // reload the routes file\n    let nextRoutes = require('./routes')\n    render((), root)\n  })\n}\n```. ",
    "yyankovblc": "We still reproduce the issue with react-router and redux, in the console we have WDS] App hot update...\ndev-server.js?05e4:45 [HMR] Checking for updates on the server...\nlog-apply-result.js?e2ce:20 [HMR] Updated modules:\nlog-apply-result.js?e2ce:22 [HMR]  - ./components/Login/LoginForm.tsx\nlog-apply-result.js?e2ce:22 [HMR]  - ./components/Login/LoginModal.tsx\nlog-apply-result.js?e2ce:22 [HMR]  - ./containers/App/index.tsx\nlog-apply-result.js?e2ce:22 [HMR]  - ./containers/AppComponent/index.tsx\ndev-server.js?05e4:27 [HMR] App is up to date. but browser doesn't re-render anything?. ",
    "mbonaci": "Same here, it says App is up to date but the DOM never changes. \nAll the latest versions:\n- react-router 3.0.2\n- redux 3.6.0\n- react-redux 5.0.3\n- webpack 2.2.1\n- webpack-dev-server 2.4.1\n- react-hot-loader 3.0.0-beta.6\n- babel-cli 6.23.0\n- babel-core 6.23.1\n- extract-text-webpack-plugin 2.1.0\n- postcss-loader 1.3.3\n- sass-loader 6.0.2\n- style-loader 0.13.2\nAnd configuration from here: https://webpack.js.org/guides/hmr-react/. This is actually a duplicate of #469. Closing.. ",
    "aaronatmycujoo": "Has there been any progress on this? Also getting a similar issue where the CSS hot reloads \ud83d\ude4c however the WDS tells me the app is up to date, but no DOM changes are made.\n\"react-router\": \"^2.6.1\",\n    \"webpack\": \"3.5.5\",\n    \"webpack-dev-server\": \"^2.7.1\". ",
    "tgroutars": "Still having this issue with\njson\n    \"react\": \"^15.6.1\",\n    \"react-hot-loader\": \"^3.1.2\",\n    \"react-redux\": \"^5.0.6\",\n    \"react-router-dom\": \"^4.2.2\",\n    \"redux\": \"^3.7.2\",\n    \"webpack-dev-server\": \"^2.7.1\"\nAny update? Why was this issue closed? @gaearon  @wkwiatek \n. ",
    "WangYang-Rex": "@theKashey I had tried everything.. my modules were rebuilding, but the page wouldn't update. Is there a working example for react-routera and redux somewhere?. how to use 'AppContainer'  with 'react-router' and 'redux\u2018 together?. can you provide some example?. ",
    "lolJS": "@gaearon Updated the PR per your comments. I'm not sure if the messaging on the warnings I wrote are clear enough.\n. Good call. I'll get on that :)\n. Awesome! Sorry didn't think to test the backwards compat since I had already converted my test code base to use the children. I'll be more thorough next time :+1: \n. @gaearon Thought of this after I committed...should we check type here too?\n. ",
    "levithomason": "Looks ready to go, bump.\n. Awesome, will give this a whirl soon. \n. Confirmed, looks good so far here \ud83d\ude38 \n. ",
    "ericgrosse": "Here's all the React based dependencies from my package.json\n```\n \"react\": \"^0.14.7\",\n  \"react-bootstrap\": \"^0.28\",\n  \"react-dom\": \"^0.14.7\",\n  \"react-fontawesome\": \"^0.3.3\",\n  \"react-ga\": \"^1.2.0\",\n  \"react-helmet\": \"^2.3.1\",\n  \"react-hot-loader\": \"^1.3.0\",\n  \"react-modal\": \"^0.6.1\",\n  \"react-redux\": \"^4.0.6\",\n  \"react-router\": \"^1.0.3\",\n  \"react-router-bootstrap\": \"^0.19.3\",\n  \"react-slick\": \"^0.11.1\",\n  \"redux\": \"^3.1.1\",\n  \"redux-router\": \"1.0.0-beta7\",\n  \"webpack\": \"^1.12\",\n\"react-addons-test-utils\": \"^0.14.7\",\n  \"redux-devtools\": \"^3.1.0\",\n  \"redux-devtools-dock-monitor\": \"^1.0.1\",\n  \"redux-devtools-log-monitor\": \"^1.0.4\",\n  \"redux-thunk\": \"^1.0.3\",\n```\nProbably more than what you need to know but doesn't hurt to be thorough\n. It turns out the problem was a misconfigured publicPath in webpack.config.js. Changed publicPath: 'dist/' to publicPath: '/dist/' and now hot loading works on urls with multiple path segments :)\nI have to thank your troubleshooting guide, it proved to be very helpful and is ultimately what led me to tracking down and solving the issue.\n. ",
    "doomsbuster": "I am facing similar issue and @ericgrosse your fix didnt work for me.\nMy App has following routes:\n/ - Home page\n/about - about page\n/build/:buildId - build sub route\nMy hot reloader reloads but it fails with the following 404 errors since it tries to fetch the bundle files from the /build/ route\nfe92bcf5-f54a-4457-a5c3-449172665e07:13 GET http://localhost:9000/build/vendor.js net::ERR_ABORTED\nfe92bcf5-f54a-4457-a5c3-449172665e07:13 GET http://localhost:9000/build/appbundle.d4f597cd2a7f512f1c74.js net::ERR_ABORTED\nUpdate\nI fixed it by setting the publicPath to / in my webpack config.. ",
    "zywyz": "I'm not sure if I'm able to do it properly and currently don't have enough time to verify it so I would prefer to merge actual version.\n. ",
    "guybedford": "@alexisvincent thanks for testing this. I've added a fix in https://github.com/jspm/npm/commit/f8cbbd9bdfbdad5281a9df2d97cf37392dd7bf35#diff-59adaa9915a15ff8ed1f21fd655d5378R297 for the next release of jspm - we weren't treating the index.js file as an exception to the files array.\nThis will apply in the next jspm beta, so this can be closed here.\n. ",
    "nilshartmann": "Hi @hedgerh,\nthanks for your reply. I've checked the react-hot-boilerplate project and tried both eval and source-maps for the Sources and for the stacktrace shown by React Hot Loader  (Redbox) in case of a runtime error.\neval\nUsing eval I see each single JS file of the Counter\nin Chrome Source tab (webpack:// - . - src - .js-Files). But the files shown are the compiled ones, not my source files.\n\nStacktraces rendered by React Hot Loader shows a webpack:///./src/Counter.js?:54:16 link. The line number points to the line in the compiled file but when I click on the link nothing in Chrome seems to happen (file will not be opened).\n\nsource-maps\nWhen I use source-maps as devtool instead, the original source files are shown in the Source tab and it is possible to set breakpoints and debug inside the source files. \n\nBut the rendered stacktrace points to the bundle.js file generated by webpack (http://localhost:3000/static/bundle.js:35142:17). A click on the links makes Chrome opening the bundle.js file in a new browser window.\n\nI'm still unsure If I'm missing something (I'm really not an expert in source maps). \n. Hi,\nthanks for the consoleErrorReporter tip!\nI tried to use it as described above and have a few questions/remarks:\n- I had to add redbox-react to my package.json. If that is desired, I think it would make sense to add it to the docu\n- React.PropTypes.error raised an error: prop type 'error' is invalid. I changed it to the proptype definition from Redbox (React.PropTypes.instanceOf(Error).isRequired) then it works. Not sure if this is a problem with my React version?\n- Might not be directly related but maybe someone knows: What is the best setting of devtool in my webpack.config.js file? I tried several ones but the stacktraces dumped both by Redbox and from console.error doesn't point to my source files (both link to my bundle.js that has been generated by webpack, like this: http://localhost:3000/dist/bundle.js:36376:12). When running my app without hotloader (just removing the AppContainer wrapper, no changes to .babelrc or webpack.config.js) all errors dumped on Chrome's devtool console are correctly linked to my source files (something like webpack:///./client/src/components/editor/ContactEditor.js) \nMy setup: RHL 3.0.0beta, React 15, npm 2.14.12, babel 6 (with presets es2015, stage-0, react and plugin react-hot-loader/babel), webpack-dev-server 1.14, Chrome 50.0, MacOS\nAgain: thanks for your efforts!\nNils\n. ",
    "hawkup": "I think you didn't install react-hot-loader and config.\nInstall react-hot-loader\nand I think should to seperate babel config to .babelrc file, it easier to setup.\nChange the config\n```\n.babelrc\n{\n  \"presets\": [\"react\", \"es2015\", \"stage-0\"],\n  \"plugins\": [\"transform-decorators-legacy\"]\n}\n```\n```\nwebpack.config.js\nmodule: {\n    loaders: [\n        {\n            test: /.jsx?$/,\n            loaders: ['react-hot-loader', 'babel'],\n            exclude: /node_modules/\n        }\n    ]\n}\n```\nAnd try run server again.\nreferrence: react-hot-boilerplate\n. ",
    "alansouzati": "Hi @gaearon thanks for the quick follow up.\nI deleted my node_modules and I cannot face the issue with createProxy anymore.\nBut I cannot get the hot reloading to work with my ES6 classes. There is no issue in the console, and I see the recompilation happened in webpack. But the component does not update in the browser.\nI'm fine closing this issue and deal with this problem separately. But in case you can help me in this issue, here is what I'm trying:\n.babelrc\njson\n{\n  \"presets\": [ \"es2015\", \"react\" ],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\nindex.js\n``` javascript\nimport 'react-hot-loader/patch';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport Main from './Main';\nlet element = document.getElementById('content');\nrender(, element);\ndocument.body.classList.remove('loading');\nif (module.hot) {\n  module.hot.accept('./Main', () => {\n    render(\n      ,\n      document.getElementById('content')\n    );\n  });\n}\n```\nI don't have react-hot in my loader chain with Babel, and I'm using Webpack 1.13.0 and React 0.14.X\n. ",
    "cameronroe": "Had the same issue. @alansouzati => Remove any hmr plugins/dependencies. npm prune your packages.\n. ",
    "davidfurlong": "react-native depends on react-transform-hmr https://github.com/facebook/react-native/blob/master/package.json#L180 so it seems a bit problematic that its deprecated..\n. It seems doing a npm uninstall react-transform-hmr resolves this. This behaviour is highly irregular, and it appears I need react-transform-hmr as I'm sharing the package.json between a react-native and react application (to share redux states). (Although that might be a mistake in itself)\n. @c-h- It has been a while! Can't be of much help unfortunately - I have simply extracted shared code from react-native & react into a separate codebase and included it in both projects. ",
    "c-h-": "Has there been any movement on this? Doesn't sound like it's possible to get HMR working in a project that co-locates React and React Native due to react-transform-hmr being present?\nPS hey @davidfurlong long time no see. . ",
    "nealoke": "My issue was not the react-transform-hmr but the babel preset babel-preset-react-hmre which also included an outdated react-proxy. Removing these solved the problem.. @hengkx this solves my issue but I'm not sure if the ideal solution is adjusting files in the node_modules folder after an install. Thoughts?. ",
    "slorber": "Also run into this issue while trying to use React-Native-Web with Gatsby and trying to transpile glamorous-native in Gatsby webpack config, due to the RN preset. npm uninstall react-transform-hmr seems to work. ",
    "adam-beck": "@willin are you sure this is a react-hot-loader issue? To me, it looks like a configuration error inside of your project. Could you point to the repo and I can help?\n. Try require('./style.css') or import './style.css. You are already configuring the loaders in your webpack configuration file.\n. ",
    "willin": "config:\n``` js\nvar webpack = require('webpack')\nvar path = require('path')\nmodule.exports = {\n  devtool: 'eval',\n  entry: [\n    'webpack-dev-server/client?http://localhost:5889',\n    'webpack/hot/only-dev-server',\n    path.join(__dirname,'src/app','index.js')\n  ],\n  output: {\n    path: path.join(__dirname, '/.deploy/public'),\n    publicPath: '//127.0.0.1:5889/static/',\n    filename: 'app.bundle.js'\n  },\nplugins: [\n    new webpack.optimize.UglifyJsPlugin({\n      compress: { warnings: false }\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        'NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n      }\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\nmodule: {\n    loaders: [\n      { test: /.jsx?$/, exclude: /node_modules/, loaders: ['react-hot','babel-loader?presets[]=es2015-loose&presets[]=react&presets[]=stage-1&plugins[]=transform-runtime'] },\n      // { test: /.jsx?$/, loaders: ['react-hot', 'jsx?harmony'], include: path.join(__dirname) },\n      {test: /.css$/, loader: 'style!css'},\n      {test: /.scss$/, loader: 'style!css!sass'},\n      { test: /.less$/, loader: 'style!css!less' },\n      { test: /.(png|woff|woff2|eot|ttf|svg)$/, loader: 'url-loader?limit=8192|file?name=static/[name].[ext]' },\n      { test: /.(jpeg|jpg|woff|woff2|eot|ttf|svg)(\\?.*$|$)/, loader: \"file?name=static/[name].[ext]\" }\n    ]\n  },\n// Automatically transform files with these extensions\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.css']\n  },\n  // Additional plugins for CSS post processing using postcss-loader\n  postcss: [\n    require('autoprefixer'), // Automatically include vendor prefixes\n    require('postcss-nested') // Enable nested rules, like in Sass\n  ]\n}\n```\ndev-server:\n``` js\n// require('babel/polyfill');\nimport webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\nimport config from '../../webpack.config.dev';\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  stats: {\n    colors: true\n  }\n}).listen(5889, '127.0.0.1', (err) => {\n  if (err) { console.log(err); }\n  console.log('Webpack listening at 5889');\n});\n```\ngreen hand in react, sorry\n. ",
    "loicfrering": "I just checked and reproduced it on another machine with these exact steps:\n1. git clone https://github.com/loicfrering/redux-devtools.git\n2. cd redux-devtools\n3. npm install (linting fails for some reason)\n4. cd examples/todomvc\n5. npm install\n6. npm start\nThen when I navigate to http://localhost:3000 I get the behavior I described: actions are correctly dispatched as shown by the devtools but views are not updated, the new todo is not added to the list.\nPlease let me know if I can help you with more details, thanks!\n. Thanks @gaearon for your fantastic work!\n. ",
    "vladshcherbin": "@rajaraodv hey, an app with a router example would be great\n. ",
    "jiayihu": "Yes, sure! I did it right now \ud83d\udc4d\n. ",
    "kkak10": "@gaearon I have one more question. React.PureComponent too not reloading now. react-hot-reload 3 is solve PureComponent hot reload?. @gtabmx after, I'm not try react-hot-reload 3 in PureComponent hot reload. I'm doing another Project now... but I seen Dan Abramov's Twitter post That write react-hot-reload 3 Support PureComponent Support Hot Reload.. ",
    "gtabmx": "@kkak10, Just out of curiosity, were you able to get hot loading working with PureComponents? I'd rather not convert to Components.. ",
    "tyscorp": "I can confirm that react-hot-loader does indeed work the same for jspm as it does webpack.\nWorking example repo\nAs far as I can see, the state is reset under the same circumstances that it resets while using webpack.\nFor example, inserting a new node above this line causes a state reset for both jspm and webpack, whereas changing the JSX below that line works fine for both.\n. ",
    "truongsinh": "https://github.com/Glavin001/react-hot-ts, as recommended by https://github.com/gaearon/react-hot-loader/tree/master/docs, is still losing internal state. Is it because of the fact that it uses purely TypeScript, and not TypeScript + Babbel?\n@gaearon\n\n\nExport the \u201cinner\u201d component so it\u2019s visible in module.exports so react-hot-loader/webpack can pick it up;\nOr remove react-hot-loader/webpack and use react-hot-loader/babel in .babelrc instead, which can pick up any top-level variable as opposed to just the exports.. Thank you for the reference. private in TypeScript is only for type check, and can still be accessed at runtime using the same symbol. Unfortunately, I copied the whole\n```ts\nexport default class Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n  }\n\n\ncomponentDidMount() {\n    this.interval = setInterval(this.tick.bind(this), 1000);\n  }\ntick() {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\ncomponentWillUnmount() {\n    clearInterval(this.interval);\n  }\nrender() {\n    return (\n      Counter: {this.state.counter}\n   );\n  }\n```\nBut the Counter component still loses state. Here's the webpack.config.js (taken from https://github.com/Glavin001/react-hot-ts/blob/master/webpack.config.js)\n```js\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nmodule.exports = {\n    entry: [\n        \"react-hot-loader/patch\",\n        \"webpack-dev-server/client?http://localhost:3000\",\n        \"webpack/hot/only-dev-server\",\n        \"./src/index.tsx\",\n    ],\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: \"bundle.js\",\n        publicPath: \"/static/\",\n    },\n// Enable sourcemaps for debugging webpack's output.\ndevtool: \"source-map\",\n\nresolve: {\n    // Add '.ts' and '.tsx' as resolvable extensions.\n    extensions: [\"\", \".webpack.js\", \".web.js\", \".ts\", \".tsx\", \".js\"]\n},\n\nplugins: [\n    new webpack.DefinePlugin({\n        'process.env': {\n            'NODE_ENV': JSON.stringify('production')\n        }\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n],\n\nmodule: {\n    loaders: [\n        // All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.\n        {\n            test: /\\.tsx?$/,\n            loaders: [\n                \"react-hot-loader/webpack\",\n                \"awesome-typescript-loader\"\n            ],\n            exclude: path.resolve(__dirname, 'node_modules'),\n            include: path.resolve(__dirname, \"src\"),\n        }\n    ],\n\n    preLoaders: [\n        // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.\n        { test: /\\.js$/, loader: \"source-map-loader\" }\n    ]\n},\n\n// When importing a module whose path matches one of the following, just\n// assume a corresponding global variable exists and use that instead.\n// This is important because it allows us to avoid bundling all of our\n// dependencies, which allows browsers to cache those libraries between builds.\nexternals: {\n    \"react\": \"React\",\n    \"react-dom\": \"ReactDOM\"\n},\n\n};\n```. ",
    "danzel": "For anyone who runs in to this, the solution for typescript for myself was to change the typescript loader to include \"react-hot-loader/webpack\"\nSee also:\nhttps://github.com/Glavin001/react-hot-ts/pull/2#issuecomment-275828421\nhttps://github.com/danzel/react-webpack2-typescript-hmr. Done.. ",
    "pocketjoso": "TLDR: don't use withRouter for the exported component used as as top level route component with react-router (and the Router)\nJust wanted to report what was the problem in my case causing local state to be lost with RHL3:\nThe top level component we passed to our react-router Router component (same problem with react-router 3 and 4) was an App component that itself was exported via a withRouter(App) HOC (withRouter from react-router). I eventually discovered that this caused the App component to get re-mounted on every HMR cycle (save), causing the local state everywhere to be lost.\nSolution for us:\nMove the withRouter wrapping to sub components; don't use it with the top level component put inside the Router. Now HMR works and local state is kept.\nNote for point of interest: we were, and still are, wrapping our App export in an connect - this does not cause any problem. Not sure exactly what withRouter does that causes this problem.. Okay after fixing the problem above I realised a HOC we created ourselves breaks the HMR in the same way (always gets remounted so local state is always lost), I'm not quite getting why - if anyone has ideas:\nhttps://gist.github.com/pocketjoso/deee25517824e8938a1956b212cfd3a0. ",
    "PeterKottas": "Did you @pocketjoso  manage to fix this by any chance? I have quite a few HOC composed to get my final component and I am pretty sure I am hitting the same limitation. I could theoretically move the hoc functionality to some utils to (maybe) fix this, but damn, it should work with HOC as well. Shouldn't it?. Hi @theKashey. My code looks something like this. \nconst roomsWrapped = withDashboardLayout(rolesLoadedHoc(propertyPlanLoadedHoc(roomsLoadedHoc(Rooms))));\nThe rooms component itself is a default export from a file and it's also connected to redux store. After reading bunch of issues here, it seems like what I have is a bit of a nightmare case. \nBtw, withDashboardLayout is just an lambda component implemented like this. \nconst withLayout = (LayoutComp, ComponentComp, props) => <LayoutComp><ComponentComp {...props} /></LayoutComp>;\nconst withDashboardLayout = (ComponentComp) => (props) => withLayout(DashboardLayout, ComponentComp, props);\nI wonder if this would be causing problems as well. The rest of them are proper HOC.. It might also be worth pointing out I am using typescript and awesome-typescript-loader to transpile. Setup is based on docs. Nothing special there. . Cool, that makes perfect sense. But it's still quite a problem for me :( Not exactly sure how to approach it as:\na) I am using swesome-typescript-loader so can't use that babel plugin\nb) I have so many of these I'll tear half of my hair out before I'd manage to do it all manually.\nwas this always a no no with hmr? I could have sworn this was working at some point in time. \nMaybe the principles of that plugin could be used to build a lib that could deconstruct these in a fashion that wouldn't force one to use babel. I'd have to think about it a bit. \nFor dev experience, I guess I could fake the initial state to \"working state\" to allow me to work with HMR, it's a bit of a pain though. Yeah same here guys. HOCs are breaking my setup at the moment.. ",
    "zdavis": "Ok, the \"decorators\" branch in zdavis/react-hot-boilerplate shows the problem pretty clearly. See zdavis/react-hot-boilerplate@7b510aa2d417e0e479fa0bf1f48b3469b65d44a7.\nThis commit adds a new component called \"DecoratedCounter\". The decorated counter is decorated with @connect, which just wraps a component around the decorated component.\nThe Counter component is also wrapped with connect, but without using decorator syntax.\nWhen DecoratedCounter is hot reloaded, it loses its internal state. This is not the case for the Counter component.\nLet me know if there's anything else I can do to help!\n. Really awesome to see this fixed! We're excited to try out the new version of RHL. Thank you all for your work on it!. Hard to say what the problem is without seeing a repo that reproduces the problem. It's a shot in the dark, but I ran into similar behavior on my project after I'd set everything up, but had neglected to include the conditional ReactDom.render call that you see here in the example:\nhttps://github.com/gaearon/react-hot-boilerplate/blob/next/src/index.js#L14\n. ",
    "liady": "@gaearon @nfcampos Any news on that? Currently all of our classes are decorated, which prevents them from being properly hot-reloaded (the Root component just refreshes and loses all internal state).\nIs there a temporary fix we can do in our code to get it working?\n. ",
    "reem": "@liady we had the same problem over at @terminalcloud but I figured out a way to get things to work in the meantime.\nBy my understanding of the code, react-hot-loader/babel goes through your modules, finding any variable or class declarations, checking if they are components, and registering them for reloading later. In order for stateful reloading to work, react-hot-loader must know about the full path of components from the root to your stateful component. If even one link in this chain is missing that subtree will be completely remounted.\nIn our case we use two decorators, connect from react-redux and view from redux-elm. To get this to work with react-hot-loader, ensure that each component class created by any decorator is exposed as an intermediate identifier, for instance:\n```js\n// WILL NOT WORK\nexport default connect()(view(() => ))\n// WILL NOT WORK\nconst View = view(() => )\nexport default connect()(View)\n// WORKS\nconst View = () => \nconst ElmView = view(View)\nexport default connect()(ElmView)\n```\nin the first example, react-hot-loader doesn't know about the actual component or the intermediate one created by view. In the second example it knows about both intermediate components, but is still missing the base component. In the final example react-hot-loader can detect all three components, and hot reloading should work as normal.\nThis workaround is pretty cumbersome imo, but it does work for now.... @calesce I'm not exactly sure what you mean, what's an example of a decorator that would cause a problem and is not a higher order component?\nThis sort of thing is where a true multi-phase compiler with a middle representation between AST and output representation is really helpful - the AST can be transformed into a radically simplified middle layer where all expressions are already split into their smallest possible pieces and you have a true CFG to work with (where all conditionals, loops, etc. have all been turned into jumps). Then implementing a \"decorator\" for all values of some type is much much easier, because you can detect them directly instead of relying on parsing, which is going to be inherently fragile.\n. > Ha, yeah that sure would be nice, I'm guessing you have Rust in mind. \ud83d\ude09\nYou got me :P\nYour examples are a little odd to me because in my testing it appears that:\nexport default connect(mapStateToProps)\n(class App extends React.Component {...})\nactually does not get reloaded, only:\nclass App extends React.Component { ... }\nexport default connect()(App)\ndoes. This would explain why decorators don't work, because the @ form is treated like the former, not the latter.. I think it's all actually the same problem: if you don't have a top level variable or class with your component, rhl can't discover it. Decorators, HOC, etc. are all just instances of this problem because they encourage you to not have all your components in a place where rhl can find them.\nIt really seems like the only way to conclusively solve this is to do something like override React.Component (though this doesn't catch stateless components!!) and/or unpack compound expressions into individual pieces that can be inspected.. Without the ability to conclusively query for \"what code is a component\" it seems pretty much impossible to solve this generally. React can answer \"what components are used\" but it can't tell us \"what code creates this component\".. I was reading that earlier, it is all reasonable but this part:\n\nEnable a simple implementation of hot reloading that is guaranteed to work in 100% cases without any hacks like proxies and associated pitfalls. In practice this means that I\u2019ll likely enable it only for stateless functional components defined in separate files. We recommend extracting markup-heavy code into separate components anyway so this encourages cleaner component structure.\n\nis pretty sad to me, reloading of stateful components is very useful! The ideal react application is made up of stateless components, but in reality many production applications have not only stateful react components but also stateful react components wrapping non-react APIs. rhl works seamlessly with these tools today, it would be a shame if those capabilities were lost.. ",
    "birkir": "Any resolution for this yet? I am having serious problems with maintaining state between hot reloads with higher order components (decorated or not).. This is definitely a bug.\nTypeError: Cannot read property 'call' of undefined\n    at __webpack_require__ (http://localhost:3000/vendor.js:686:29)\n    at fn (http://localhost:3000/vendor.js:111:20)\n    at http://localhost:3000/client.js:20574:10\nHappening here:\njs\nmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n. Oh yeah, sorry. https://github.com/ueno-llc/starter-kit/pull/16\nI'm still looking into this, may have posted too soon.\nI get this error on the first request to the server, once i hot reload (any code) everything starts to work as normally.\n. Just a little update.\nI fixed the issue by invalidating the first build from webpack. So to sum up, hot reloading system.imported code would only work on the second time the webpack builds.\nI don't know if I'm just using hot reloader the wrong way, but It's very similar to @ctrlplusb solution.\nhttps://github.com/ueno-llc/starter-kit/blob/master/webpack/dev.js#L118\n. I don't, thing is, people go from no permissions to incrementally add what they need, but RHL swallows the error and just thinks it doesn't have class support when in fact the error was 'unsafe-eval' restriction.\nIt took me a long time to figure this out, so I guess the actionable here is to improve error reporting.. Nice! good work. ",
    "oleksii-udovychenko": "I am upgrading an old React-Redux-Webpack project right now and just want to do everything right. It would be great to see support for decorators in the nearest future. . ",
    "inetfuture": "Just pulled up a setup with everything(react, babel, webpack, react-hot-loader, react-redux) as the latest version, hot updating works without loosing state, but there are error in console:\n```\nReact Hot Loader: this component is not accepted by Hot Loader. \nPlease check is it extracted as a top level class, a function or a variable. \nClick below to reveal the source location: \n \u0192 Console() {\n    var _ref;\nvar _temp, _this, _ret;\n\n_classCallCheck(this, Console);\n\nfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n  args[_key\u2026\n\n```. The code is here https://github.com/inetfuture/demo-rhl-decorator. Yeah, my mistake, the state does loose, I thought it didn't loose because I was using redux store.. ",
    "lgra": "I've just shown the warning about the use of Decorators in RHL readme.\nI'm pretty confused. I'm used to decorate my React classes and for instance, I don't face this issue. States of my decorated components seems to be preserved when hot reloaded.\nAm I wrong ? Or is my way to use decorator that prevents this issue ?\nI can't say.\nHere is a repo https://github.com/lgra/lg-webpack with a kind of React app template with WebPack and RHL. It can be run with vscode debug tool, or npm start. When modifying render method of decorated component, state seems to be preserved, even if the method itself is enhanced by the decorator (in the example, the render method of web_modules/app/group, enhanced by @renderDuration).. Understand! Thanks a lot.\nI'm using class decorator without returning a new constructor method. In fact, I don't return anything, and let the mechanism default to the initial constructor - the one and only used by RHL.\nI'm using class decorators to enhance the class prototype, as a replacement to mixing mechanism. I will continue to use it this way ;-)\n. Based on what's said here, I've build a very little Babel plugin which transforms foo.type === MyComponent in foo.type === (<MyComponent />).type.\nSave it as a .js file and reference it in your babel options in dev mode.\n```\nmodule.exports = function (babel) {\n  var t = babel.types;\n  return {\n    visitor: {\n      BinaryExpression(path) {\n        if (\n          (path.node.operator === '===')\n          && (t.isMemberExpression(path.node.left))\n          && (t.isIdentifier(path.node.left.property))\n          && (path.node.left.property.name === 'type')\n          && (t.isIdentifier(path.node.right))\n        ) {\n          var className = t.stringLiteral(path.node.right.name).value\n          var newExpr = t.memberExpression(t.jSXElement(t.jSXOpeningElement(t.jSXIdentifier(className), [], true), null, [], true), t.identifier('type'))\n          var rightPath = path.get('right')\n          rightPath.replaceWith(newExpr)\n        }\n      }\n    }\n  }\n}\n``. @theKashey hi Anton. My point of vue is to be less intrusive as possible. At my company, several projects share dozen of UI components. Every projects are not using the same version of REACT, webpack, Babel or even ReactHotLoader. The type comparison is often used in our components, and I don\u2019t want to modify this share code as I can\u2019t quantify the risk, nor the impact on production code - where this modification is not necessary.\nThis is why I\u2019ve created this Babel plugin. It doe\u2019s the @JorgenEvens trick on the fly at transpiration time. I\u2019m applying it only to my shunk, and only in dev mode.\nThis allow me to use latest version of ReactHotLoader, without any change in my code nor colegue code, and without any impact on production code.\nI\u2019m pretty sure you\u2019re true when you say it won\u2019t fit any situation. I don\u2019t give this as an universal solution. It\u2019s just an other way to implement the trick, that can save time in some circontances.. @theKashey - There's nothing else ! You've got here the whole code of the plugin. It doesn't produce final transpiled code. It produces JSX code that will be transformed by babelreact` preset (https://babeljs.io/docs/plugins/#plugin-preset-ordering).\n```\n// Things like:\nelement.type === ImportedComponent\n// is transform to\nelement.type === .type\n```\nIn the Abstract Syntax Tree, the plugin matchs strict egality expressions (BinaryExpression where operator is ===), where left is the literal type property of any object (a MemberExpression where property is an Identifier of name type), and where right is an Identifier (assuming this identifier is a REACT class).\nIn the matched expression, it replaces the right path by the type member of an JSX element of the JSX identifier found as the right parts of the expression:\n```\nt.memberExpression( // an object member expression\n  t.jSXElement( // the object is JSX element expression ...\n    t.jSXOpeningElement( // ... where opening element ...\n      t.jSXIdentifier(className), // ... is of class identified by the right parts of the egality - className = t.stringLiteral(path.node.right.name).value\n      [], true // ... with no attributes nor closing element\n    ),\n    null, [], true // no children\n  ),\n  t.identifier('type') // the member is identified by the name 'type'\n)\n```\nThis is the same AST tree as if you write your code the @JorgenEvens way.\nThe limit of this plugin is that it's assuming that the right identifier is a REACT class identifier. If you don't use type for something else than REACT object instance type, this is not an issue. And event if you uses a custom type member for something else and want to compare it to something, invert the binary expression to make the plugin skip it.. @gaearon I've got rules in my Webpack config to apply it only to my own modules and git submodules - but you're true : what if a npm module need to be patch ? and for instance, I don't have any external npm modules presenting this pattern.\n@theKashey We're using this pattern in some of our components.\nCase 1: A father element will inject some specific logic to a child element if it's of a certain type. For example, a CustomRadioGroup element will compute a unique name and inject it to any CustomRadio child - but not to CustomLabel child.\nCase 2: A father element will reflow its children depending on there kind. For example, CustomTable will have some CustomHeader, some CustomHeaderRow and some CustomRow children. CustomTable will render a HTML table tag, and put any CustomHeader in header tag, CustomHeaderRow in thead tag, and CustomRow in tbody. It could also parse the first CustomHeaderRow to generate colgroup and col tag accordingly.\n@gaearon @theKashey Maybe it's not a good pattern. Maybe a specific static property of the class is a better way - it allows the definition of several classes that will behave the same way when put into a father (for example, CustomOddRow and CustomEvenRow are body rows - not so far than the concept of display: table-row). I'll think about a behaviors static array property.. @gaearon I agree with you. As long as a proxy is used, as type is a readonly property, and as it's used internally by REACT when cloning element, I'm pretty sure it's not solvable at all. . @bathos You're welcome.\nI have enhanced my babel plugin to make replacement only if the right parts of the comparison is an imported class, and log what it had replace. Here's the code:\nhttps://github.com/lgra/lg-webpack/blob/master/scripts/babel-type-comparison.js\n. Maybe it's already been told, but here is my idea of the day, based on my use case.\nRHL is a huge value when creating our own code, or dealing with our own git submodules or npmised source packages, included as source JSX file. Using babel, it allows us to replace on the fly submodules file (for example css variable file) and insure our own code base to use common dependencies. The babel plugin I wrote perfectly fit this use case.\nRHL is less value, even no value at all, when dealing with third parties transpiled npm modules.\nIs it possible to make RHL proxified only our own classes, and let node_modules transpiled classes unchanged ?\nA way to set what musn't be proxified could based on a vendor chunk defined in web pack config.\n. Understood.. ",
    "dehypnosis": "logger.js:30 React-stand-in:, Non-controlled class Form(branch(Apollo(inject-\nbranch(withState(withHandlers(withState(withHandlers(BankAccountForm)))))))) \ncontains a new native or bound function  validateFields \u0192 validateFields(ns, opt, cb) {\n...\nYes I can ignore warnings, but still cannot hot reload composed codes.\nI can develop with hot reload component's jsx parts but nothing else.\nI recomposed all the handlers, states, props,..  So i am still sad with manual reloading.\nBut surely better than nothing.\nIs there any workaround or progress about this issue?. ",
    "kiki-le-singe": "I get this warning (The following modules couldn't be hot updated: (They would need a full reload!)) too.\nIt seems be related to react-router and react-hot-loader but I don't know why. My full project on implement_react_hot_loader\npackage.json\njavascript\n  \"scripts\": {\n    \"start\": \"npm run dev\",\n    \"dev\": \"DEBUG=app:* babel-node -- server/server.dev.js\",\n    ...\n  }\nserver.dev.js\n``` javascript\nimport express from 'express';\nimport webpack from 'webpack';\nimport path from 'path';\nimport _debug from 'debug';\nimport routes from './routes';\nimport webpackDevMiddleware from './middleware/webpack-dev';\nimport webpackHotMiddleware from './middleware/webpack-hot';\nimport projectConfig from '../config';\nimport webpackConfig from '../webpack/dev.config.js';\nconst debug = _debug('app:server');\nconst app = express();\nconst compiler = webpack(webpackConfig);\napp.use(express.static(path.resolve('src/assets')));\n/ ***\nwebpack configuration\n*** /\napp.use(webpackDevMiddleware(compiler, webpackConfig.output.publicPath));\napp.use(webpackHotMiddleware(compiler));\n/ ***\n ROUTES FOR OUR API\n** /\nroutes(app);\n/ **\n START THE SERVER\n** */\napp.listen(projectConfig.SERVER_PORT, () => {\n  debug(Express server listening on ${projectConfig.SERVER_PORT} in ${app.settings.env} mode);\n});\n```\nwebpack/dev.config.js\n``` javascript\nimport webpack from 'webpack';\nimport path from 'path';\nimport HtmlWebpackPlugin from 'html-webpack-plugin';\nimport _debug from 'debug';\nimport projectConfig, { paths } from '../config';\nconst debug = _debug('app:webpack:config:dev');\nconst srcDir = paths('src');\nconst assetsDir = paths('assets');\nconst nodeModulesDir = paths('nodeModules');\nconst deps = [\n  'redux/dist/redux.min.js',\n  'font-awesome/css/font-awesome.min.css',\n  'slideout/dist/slideout.min.js',\n];\ndebug('Create configuration.');\nconst config = {\n  devtool: 'cheap-module-eval-source-map',\n  entry: {\n    app: [\n      'react-hot-loader/patch',\n      'webpack-hot-middleware/client?reload=true',\n      paths('entryApp'),\n    ],\n    vendors: projectConfig.VENDOR_DEPENDENCIES,\n  },\n  output: {\n    path: '/',\n    filename: '[name]-[hash].js',\n    publicPath: '/',\n  },\n  resolve: {\n    alias: {},\n    root: [srcDir],\n    extensions: ['', '.js', '.jsx'],\n  },\n  module: {\n    noParse: [],\n    preLoaders: [\n      {\n        test: /.js[x]?$/,\n        loader: 'eslint',\n        include: [srcDir],\n      },\n    ],\n    loaders: [\n      {\n        test: /.js[x]?$/,\n        loader: 'babel',\n        query: {\n          cacheDirectory: true,\n        },\n        include: [srcDir],\n      },\n      {\n        test: /.json$/,\n        loader: 'json',\n      },\n      {\n        test: /.css$/,\n        loader: 'style!css!postcss',\n      },\n      {\n        test: /.(png|jpe?g)$/,\n        loader: 'file?name=img/[name].[ext]',\n      },\n      {\n        test: /.(woff|woff2|eot|ttf|svg)(\\?v=\\d+.\\d+.\\d+)?$/,\n        loader: 'file?name=fonts/[name].[ext]',\n      },\n    ],\n  },\n  postcss: webpack => ([ // eslint-disable-line\n    require('postcss-import')({ addDependencyTo: webpack }),\n    require('postcss-url')(),\n    require('postcss-cssnext')(),\n  ]),\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'React Redux Boilerplate',\n      hash: true,\n      favicon: path.resolve(assetsDir, 'favicon.ico'),\n      inject: 'body',\n      template: path.resolve(srcDir, 'index.tpl.html'),\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.optimize.CommonsChunkPlugin('vendors', '[name].[hash].js'),\n    new webpack.DefinePlugin({\n      CLIENT: projectConfig.CLIENT,\n      SERVER: projectConfig.SERVER,\n      DEV: projectConfig.DEV,\n      PROD: projectConfig.PROD,\n      DEBUG: projectConfig.DEBUG,\n    }),\n    new webpack.optimize.DedupePlugin(),\n  ],\n};\ndeps.forEach(dep => {\n  const depPath = path.resolve(nodeModulesDir, dep);\nconfig.resolve.alias[dep.split(path.sep)[0]] = depPath;\n  config.module.noParse.push(depPath);\n});\nexport default config;\n```\nsrc/routes/index.js\n``` javascript\nimport React from 'react';\nimport { Route, IndexRoute, Redirect } from 'react-router';\nimport AppLayout from 'layouts/AppLayout';\nimport Home from 'components/views/Home';\nimport About from 'components/views/About';\nimport Hello from 'components/views/Hello';\nimport Counter from 'components/views/Counter';\nimport Tools from 'components/views/Tools';\nimport Tool from 'components/views/Tools/Tool';\nimport NotFound from 'components/views/NotFound';\nexport default (\n  \n\n\n\n\n\n\n\n\n\n\n);\n```\nsrc/index.js\n``` javascript\nimport { AppContainer } from 'react-hot-loader';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { hashHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport configureStore from './redux/store';\nimport Root from 'containers/Root';\nimport routes from 'routes';\n//  STYLES  //\n// Path to svg logos icons\nimport 'assets/vendors/icons.svg.css';\nimport 'styles/app.css';\nconst rootEl = document.getElementById('root');\nconst store = configureStore();\n// Create an enhanced history that syncs navigation events with the store\nconst history = syncHistoryWithStore(hashHistory, store);\nReactDOM.render(\n  \n\n,\n  rootEl\n);\nif (module.hot) {\n  module.hot.accept('containers/Root', () => {\n    // If you use Webpack 2 in ES modules mode, you can\n    // use  here rather than require() a .\n    const NextRoot = require('./containers/Root').default;\n    ReactDOM.render(\n      \n\n,\n      rootEl\n    );\n  });\n}\n```\nsrc/containers/Root.js\n``` javascript\nlet Root;\nif (DEV) {\n  Root = require('./RootDev').default;\n} else {\n  Root = require('./RootProd').default;\n}\nexport default Root;\n```\nsrc/containers/RootDev\n``` javascript\nimport React, { PropTypes } from 'react';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport DevTools from './DevTools';\nconst propTypes = {\n  history: PropTypes.object.isRequired,\n  store: PropTypes.object.isRequired,\n  routes: PropTypes.object.isRequired,\n};\nfunction RootDev(props) {\n  const { history, store, routes } = props;\n  const showDevTools = () => (DEBUG ? () : false);\nreturn (\n    \n\n\n        { showDevTools() }\n      \n\n  );\n}\nRootDev.propTypes = propTypes;\nexport default RootDev;\n```\nThanks for your help\n. Yes I understand :D this is my repo react-redux-boilerplate\n. OK thanks for your time\n. ",
    "benwiley4000": "I assume you won't need access to the commit history - I created an orphan repo and changed a few things because the other repo I'm working on is private. Here: react-hot-loader-attempt\nWebpack configuration and dev server deployment all takes place inside the gulpfile.js between lines 149 and 254.\nI'm also getting a strange websocket error when I run a new copy of the project in a different directory:\nWebSocket connection to 'ws://localhost:8079/sockjs-node/633/rfhkw1kn/websocket' failed:\nError during WebSocket handshake: Sent non-empty 'Sec-WebSocket-Protocol' header but\nno response was received\nI don't think this necessarily has anything to do with React Hot Loader; in fact, the hot reloading that was working (when editing the root component) still works, so I think it's safe to ignore that error for now. But if anyone knows why that is happening please let me know!\n. @gaeron have you had a chance to look yet?\n. @davidlormor are you sure this is the problem - have you tried using state with your components to see if that fixes the issue? I'm only asking because I seem to recall experiencing the same issue without React Router in the way (hence my update in the original post), but I also didn't scientifically document my whole trial/error process.\n. @gaearon I understand you're quite busy. I'd love for you to take another look at this one, if you can. I've been going without hot reloading for the last six weeks and I'd really like to get it working! :smiley: \n. @l2silver I tried as hard as I could to reproduce the behavior you claimed worked for you, but I could not. I switched my route components to class components and I still could not get HMR to work.\nI'm getting the error (as mentioned before): The following modules couldn't be hot updated: (They would need a full reload!).\n@ctrlplusb To be honest I don't understand how that would solve the problem at hand. Still I was curious. This was my code before:\nif (module.hot) {\n  module.hot.accept('./root', () => {\n    const NextRoot = require('./root').default;\n    render(\n      <AppContainer>\n        <NextRoot {...{ store, history, onUpdate, routes }} />\n      </AppContainer>,\n      document.getElementById('app')\n    );\n  });\n}\nAnd I changed it to:\nif (module.hot) {\n  module.hot.accept(['./root', './route'], () => {\n    // ...\n  });\n}\nThere was a difference - I no longer get the above warning, but still, nothing reloads. :disappointed: I also tried accepting only './routes' and I had the same result. What was your before / after?\n@gaearon I would really, really, really appreciate you taking a look at the sample repo I provided you. Thanks. :)\n. @gaearon I spent a very long time tonight debugging this issue further to land on precisely what my problem is. It turns out, I was correct the first time, and this is a React Router issue. And in fact it's the same issue you have already identified here and here.\nI was led to believe it was merely an import issue, but it turns out that imported components hot swap fine if they are included outside of a Router instance. I have also found that hot swapping works fine with React Router if everything the Router instance uses is defined in the same file as that Router instance. The Router itself can live in its own file and be imported to the root, but all Route instances and component definitions must live in the same file as Router, and hot reloading works. Obviously not practical for any real application.\nI do have a follow-up question but it pertains to React Router so it's in this thread.\n. ",
    "davidlormor": "So I'm running into some similar issues, and it seems that this may all be related to stateless components tied to routes. Whenever I assign a react-router Route component to a component without any state, that route and all its children do not hot reload. Not really sure what the root cause is (I'm a long time Emberist just getting familiar with React), but I imagine that may put you in the right direction.\nThanks for all y'all's awesome work!\n. @benwiley4000 yes, whenever I switch the Route's component from a stateless function to a class-based component the hot reload works, but when I switch it back to a stateless functional component the hot reload fails. (Tried across several routes/components)...it may have nothing to do with the Router, but rather something about stateless components, perhaps...like I mentioned I haven't dived too deep into this issue, just sharing my observations.\n. ",
    "l2silver": "@davidlormor I think it is react-router. I'm dealing with a similar issue. Checkout the following...\nhmr fails\n<Route component={()=><p>Hello</p>}\nhmr works\n```\nclass SimpleComponent extends Component {\n render(){\n  return Hello\n }\n}\n\n```\nhmr also works\n```\nclass SimpleComponent extends Component {\n render(){\n return \n }\n}\nfunction SimpleStatelessComponent(){\n return Hello\n}\n\n```\n. ",
    "starInEcust": "hi guys,how's it going?\nmy component extends another component like this \nclass InnerQuery extends DelayRenderComponent\nget the same error\nthe following modules couldn't be hot updated: (They would need a full reload!).\n. ",
    "Kinjeiro": "@starInEcust The same problem. If inner component extends any non react Component, hot reload willn't work - page will be full reloaded\nIt's major bug (component's hierarchy is usefull functionality), please, fix it\n. @calesce I'm sorry for my tone, thank you for this wonderful plugin\n@vdh thank you for idea. Need think about litle refactoring =)\n. ",
    "vdh": "@starInEcust @Kinjeiro AFAIK, there's no mention in the React docs about inheritance, you may be attempting to use an unsupported workflow. They advocate \"composition over inheritance\".\n. ",
    "vagusX": "I think maybe it's time to rethink and refactor the render methods for modal \n. ",
    "jquense": "And as is usually the case, moments after posting an issue I realize my dumb mistake.\nthe hot.accept function actually needs to require the root module again:\njs\nif (module.hot) {\n  module.hot.accept('./client', () => {\n    const UpdatedApp = require('./client').default;\n    renderApp(UpdatedApp);\n  });\n}\n``\n. JUST SPENT 6 HOURS TRYING TO SOLVE THIS\n\ud83d\ude2d \n(not yelling at anyone just expressing relief that i finally located the issue)\n. I think it should be a straight forward fix, test case:\nactual\njs\nclass Foo {\n  bar = async (a, b) => {\n    return await a(b);\n  };\n}\nexpected\n``` js\nvar _this = this;\nclass Foo {\n  bar = async (...params) => await _this.bar__REACT_HOT_LOADER(...params);\nasync bar__REACT_HOT_LOADER(a, b) {\n    return await a(b);\n  }\n}\n;\n(function () {\n  if (typeof REACT_HOT_LOADER === 'undefined') {\n    return;\n  }\nREACT_HOT_LOADER.register(Foo, \"Foo\", FILENAME);\n})();\n;\n```\n. seems like that would be true for any class prop function? I wonder why...\n. Ya thanks! sorry I didn't get a moment to make those changes myself. many thanks \n. ",
    "MrEfrem": "With webpack 2 in System.import HMR too doesn't work. \n. Good news.. ",
    "hoschi": "Beta.2 has the same issue.\nMrEfrem notifications@github.com schrieb am So., 12. Juni 2016, 22:41:\n\nWith webpack 2 in System.import HMR too doesn't work.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/288#issuecomment-225459104,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAJ9OGWnHGWqhaw-nXrta7-ZB_S0hr26ks5qLG8VgaJpZM4IXvhK\n.\n. Now it stopped working for me with beta.0. I had this case already some days ago, which was fixed by a rm -rf node_modules; npm install but no luck this time. I cleaned up my /tmp, npm cache, babel-cache, but still broken.\n. How did you fixed it?. I have the same problem and I can't see where my setup is another than other people have  :(. > Removing \"above\" cause a unmount / mount, this is React behaviour, using key no problem\n\nYou mean that bug is expected behaviour, because there are two p tags without keys?. ",
    "rosskevin": "When routes/history are imported in the index.js and passed down as props to the <App/>, it appears to kill hot reloading and issues full reload needed.  I only moved my routes/history up to the index to avoid [react-router] You cannot change <Router routes>; it will be ignored.\nI'll move my routes/history back as hot reloading is more important, then I'll try to add back the async routes.\n. With async routes, it appears that Foo will reload, while FooComponent will not reload:\n``` javascript\nimport React from 'react'\nexport default function (props:any) {\n  return (Foo3 )\n}\n```\n``` javascript\nimport React, {Component} from 'react'\nexport default class FooComponent extends Component {\n  render () {\n    return (FooComponent2)\n  }\n}\n```\n. You don't need redbox, it is already integrated in the beta.  Change your index to look like this: https://github.com/gaearon/react-hot-boilerplate/tree/next/src\nRoutes\nA note on routes (I'm debugging as we speak): even without async routes, you will get router reload errors if your router is in the <App/> but hot reload works.  \nThe recommendation was to move my routes to be imported in the index.js and pass down {routes, history} as props.  This appears to cause the Full Reload needed.\n. Since yours is an example, I would delete your code, paste in the working boilerplate, and use sourcetree to diff the entire thing. Move your code back  a little at a time, testing to be sure hot reload works (until it doesn't).\n. @TAGC I'm encountering the same error with 3.0.0-beta.7. \nWarning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component.\nMy component is confirmed mounted (it would be impossible at the root to encounter this situation).\nI have meticulously compared to react-hot-boilerplate#next and do not spot an error.  The moment I disable hot loading, my app works.  \nnode -v                                                                                                                                                                                                            develop \u2b06 \u2b07 \u2731\nv8.1.2\n~/p/c/ui \u276f\u276f\u276f yarn list webpack webpack-dev-server react-hot-loader                                                                                                                                                              develop \u2b06 \u2b07 \u2731\nyarn list v0.24.6\n\u251c\u2500 react-hot-loader@3.0.0-beta.7\n\u251c\u2500 webpack-dev-server@2.5.0\n\u2514\u2500 webpack@3.0.0\nI think this is a bug.  I can file another issue, or you could reopen this one.. Similar symptom #446, #457. Possibly related to #313 \nMy .babelrc is:\njs\n{\n  \"sourceMaps\": \"inline\",\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": \"> 5%\"\n        },\n        \"modules\": false,\n        \"debug\": true\n      }\n    ],\n    \"stage-2\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"react-hot-loader/babel\",\n    [\"relay\", {\"compat\": true, \"schema\": \"./schema.json\"}],\n    \"transform-flow-strip-types\",\n    [\"lodash\", { \"id\": [\"lodash\", \"recompose\"] }]\n  ]\n}. I have tried all workarounds in linked issues with no success, including adding transform-es2015-classes to my .babelrc.  I have not tried to use bind in the constructor because that would be a massive undertaking for my codebase.\nUsing the transform-es2015-classes creates errors for me such as Class constructor RouteConfig cannot be invoked without 'new'.. ",
    "dkulichkin": "@dferber90, @gaearon, @rosskevin \nGuys, what is the last status with an issue? Is it still really no way to leverage hot reloading and chunking working together simultaneously when in development so f.e. when I want a hot reloading to work I need to sacrifice chunking and assemble everything into a main bundle?\nif (process.env.NODE_ENV !== 'production') {\n    require('...')\n    require('...')\n    ... // and so on - listing of all async top react components, f.e. redux containers\n}\nhaving a routing config in the form of:\n```\nconst loadContainerAsync = bundle => (loc, cb) => {\n    bundle(component => cb(null, component));\n};\nconst routes = {\n    path: '/',\n    component: WrapperContainer,\n    indexRoute: { component: LoginContainer },\n    childRoutes: [\n        {\n            path: 'dashboard',\n            name: 'Dashboard',\n            getComponent: loadContainerAsync(require('bundle?lazy&name=...'))  // or simply using react-router loader for simplicity -  does not matter\n        },\n        ...\n]\n```\n. @dferber90 the main point of having a chunking in development is the profiling, f.e. with help of such tools like webpack-dashboard. That allows for instance immediately see an impact of the changes to files size without necessity to build and switch to prod. So the drawback is pretty much serious.\nAnyway what's a main bottleneck in this issue making only pure stateless components reloaded in chunks? Router, react-hot-reloader or bundler?\nRegarding '...' character in my snippet - that's just skipped pathes to component files, nothing else\n. @sthzg Did you by chance also manage to make it working with a webpack-bundle loader?\n. ",
    "dferber90": "@dkulichkin Yes, that workaround seems to be the only way for now. As the sacrifice of not being able to use code-splitting is only for development, this isn't that much of a problem is it?\nOf course it would be nice if this wasn't necessary, but I don't even know why that fixes the problem in the first place so a lot of investigation would be necessary.\nThe code you provided isn't helpful because it leaves out the important parts (importing the component that is being split out in the second snippet). Your snippets only contain ... there.\nSee https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-218982382 for how to set things up.\n. ",
    "sthzg": "I ran into the problem with hot reloading async routes and updated by additionally registering amodule.hot.accept in the require.ensure() callbacks. E.g. like this\n``` js\ngetChildRoutes(partialNextState, callback) {\n  require.ensure([], function (require) {\nif (module.hot) {\n  module.hot.accept('../routes/Blog', () => \n    callback(null, [require('../routes/Blog').default]);\n}\n\ncallback(null, [\n  require('../routes/Blog').default,\n]);\n\n});\n},\n``\n. @dkulichkin No, sorry. So far I have only tried it with an app that uses code splitting based on thereact-router` async routes.\n. ",
    "flut1": "I worked around the getComponent() issue by adding a key prop to Router that changes on each hot update. This will force a different Router instance to be created, and re-executing getComponent() calls. This also fixed the You cannot change <Router router> warnings. Not sure if creating new Router instances causes other (performance) issues but it seems to work for me. \n```\n// create key variable\nlet routerKey = 0;\n// initial router rendering\n\nif (module.hot) {\n module.hot.accept('./containers/Root', () => {\n  ...\n  // first bump the key\n  renderKey++;\n  // re-render\n  render(\n    \n       ...\n      \n\n  , mountNode);\n });\n}\n```. ",
    "jharris4": "I ran into the same issue where HMR was not working with react-router, and I managed to work around the issue, so I thought I'd share my solution:\n```\nclass SplitComponent extends Component {\nconstructor(props) {\n    super(props);\n    this.state = { Component: false }\n  }\ncomponentWillMount() {\n    const { componentPath } = this.props;\nconst that = this;\n\n// chunks will be given file names like:\n// 0.route-PagesRoot.js\n// 2.route-PagesHome.js\nrequire('bundle-loader?lazy&name=route-[name]!./' + componentPath)(\n  Component => {\n    that.setState( { Component });\n  }\n);\n\n}\nrender() {\n    const { Component } = this.state;\n    if (Component) {\n      return ;\n    }\n    else {\n      return false;\n    }\n  }\n}\nSplitComponent.propTypes = {\n  componentPath: PropTypes.string.isRequired\n};\nfunction loadComponent(componentPath) {\n  return function (location, callback) {\n    callback(null, props =>  );\n  };\n}\n```\nUsed with the Router like this:\n<Router history={browserHistory}>\n  <Route path=\"/\" component={App}>\n    <IndexRoute component={Home}/>\n    <Route path=\"/pages\" getComponent={loadComponent('pages/PagesRoot')}>\n      <IndexRoute getComponent={loadComponent('pages/PagesHome')}/>\n      <Route path=\"/pages/:id\" getComponent={loadComponent('pages/PagesDetail')}/>\n    </Route>\n    <Route path=\"/chapters\" getComponent={loadComponent('chapters/ChaptersRoot')}>\n      <IndexRoute getComponent={loadComponent('chapters/ChaptersHome')}/>\n      <Route path=\"/chapters/:id\" getComponent={loadComponent('chapters/ChaptersDetail')}/>\n    </Route>\n  </Route>\n</Router>\n. ",
    "Dreem-Devices": "@sthzg Made it for me with async routes and react-router 3.x (Did not try yet react-router 4.x with history 4.x)\nUnfortunately transition to webpack 2.2 broke live reloading, In the console, I only get\nclient:37 [HMR] Waiting for update signal from WDS...\nclient:37 [WDS] Hot Module Replacement enabled.\nclient:37 [WDS] App updated. Recompiling...\nclient:37 [WDS] App hot update...\nIt seems like the dev-server.js code is not executed.\nI don't know what I'm missing.\nI'm using WebpackDevServer node API for launching my development server, and live reloading worked well using transform-hmre or react-hot-loader (though react-hot-loader need module.hot.accept for all my childRoutes and the first component to be synchrone...)\nThe logs missings are:\n\n\nwith hmre\ndev-server.js:55 [HMR] Checking for updates on the server...\nindex.js:81 [React Transform HMR] Patching Index\nlog-apply-result.js: 20 [HMR] Updated modules:\nlog-apply-result.js: 22 [HMR]   - 598\n\n\nwith react-hot-loader\n```\n\n\ndev-server.js:55 [HMR] Checking for updates on the server...\nlog-apply-result.js:20 [HMR] Updated modules:\nlog-apply-result.js:22 [HMR]  - 806\nlog-apply-result.js:22 [HMR]  - 804\nlog-apply-result.js:22 [HMR]  - 320\ndev-server.js:41 [HMR] App is up to date.\n```\nIf anyone has an idea? Does someone has the same issue?\nI've just updated to webpack 2 following the migration guide.\nWhat do you think @gaearon? (sorry for hard poking)\nEDIT : Just found the issue... Events are not the same between webpack and webpack 2. I just needed to update my webpack-dev-server dependency to 2.2.0...\nJust spent 1.5 day on this issue... There is nothing on the doc or on the webpack-dev-server github project...\nBut I learned a lot about webpack hot reloading and events emission by the way :)\nIt works well with hmre even if this preset includes require.resolve.\nWorks great with react-hot-loader v3, but does not work works perfectly with current react-loader, hot reloading is done but I have some warning in the console : https://github.com/reactjs/react-router-redux/issues/179\nThanks for these tools :)\n. ",
    "satazor": "Hello guys!\nFor those who want to make react-router's routes to work with react-hot-loader without sacrificing generating chunks for each async route:\n```js\n// Example bellow is for webpack2\nconst dev = true;  // Should be false when building for production\n// later..\n    module: {\n        rules: [\n            {\n                test: /.js$/,\n                exclude: /node_modules/,\n                use: [\n                    {\n                        loader: 'babel-loader',\n                        options: {\n                             // babel options here\n                        },\n                    },\n                    dev ? 'preprocess-loader?+DEV' : 'preprocess-loader',\n                ],\n            },\n           // Other rules...\n        ],\n    },\n```\nAnd then use preprocess in your async routes:\n```js\n// Example bellow uses import() but works with require.ensure() too\n{\n   path: 'about',\n   // Ensure component is required synchronously in DEV so that it works with react-hot-loader\n   // When not in DEV, we want to make sure that it generates a chunk\n   // @ifdef DEV\n   component: require('./About').default,\n   // @endif\n   getComponent: () => import('./About'),\n}\n```\nEnjoy!. @Kovensky I've tested using ES6 imports like so:\n```js\n// @ifdef DEV\nimport About from './About';\n// @endif\nexport default [\n    {\n        path: 'about',\n        getComponent: () => {\n            // @ifdef DEV\n            return Promise.resolve(About);\n            // @endif\n            return import('./About');\n        },\n    },\n];\n```\nbut it always needs module.hot.accept to integrate with react-router (just like using require), see: https://github.com/moxystudio/react-with-moxy/blob/master/src/client-renderer.js#L49\nI've got all of this working great in https://github.com/moxystudio/react-with-moxy if you guys want to see how all the pieces are glued together.. ",
    "kettanaito": "Is there any update regarding this issue?\nSo far there has been only a few suggestions, each having its own drawbacks and all being but workarounds:\nProvide \"key\" prop to <Route />\nFixed the problem, but as mentioned causes deep re-render, therefore loosing components' state.\nHowever, you can find this workaround in officially listed examples of react-hot-loader (i.e. here).\nUsing asyncComponent from react-async-component\nAs suggested here, it is possible to wrap the modules you wish to load async with asyncComponent and pass them as component prop to Route directly. This will eliminate hot-reloading issue, however forces you to create additional files doing nothing but resolving modules async.\nVarious other workarounds\nWhich are not meant for good code maintenance.\nSo, it this somehow being solved, or already has been solved with the new release of react-hot-loader?. @morajabi I haven't got enough time to read about it. So far, I don't see how to migrate my code to use react-router 4, especially since my SSR relies on match, which was removed from the fourth version.. @morajabi sorry, there is nothing about SSR in the migration guide.\nRegardless, the issue with v3 still remains, and there should be some statement how to cope with it.. ",
    "morajabi": "@kettanaito Why don't you migrate to react-router 4?. https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/migrating.md. @kettanaito You're right, but read this:\n\nKnown limitations\nReact Router v3 is not fully supported (e.g. async routes). If you want to get most of React Hot Loader, consider switching to React Router v4. If you want to understand the reasoning, it's good to start in React Router v4 FAQ\n\nAnd maybe it's worth a reading: https://github.com/ReactTraining/react-router/tree/v4.0.0-beta.8#why-did-you-get-rid-of-feature-x\n. Why react-router has <Router>? It must be <AppContainer>. Don't you guys think like me? \nAnd we can do this then:\nimport AppContainer as Router from 'react-router'\nimport AppContainer as HotContainer 'react-hot-loader'\nimport AppContainer as Provider from 'redux'\nimport AppContainer as ...\nIt's Great!\n. Read my msg above ^ @harmony7. \n. I was joking, @harmony7. It's a terrible Idea. so then if somebody wants to read someone else code he can't understand what is ReloadContainer (!!), because everybody names the Containers whatever he likes! he should scroll to where it is imported to find what is this component.\nYou name it HotContainer, others ReloadContainer and somebody RHLConrainer, It's not good for a readable source code.\n. Everyone has a different idea about this situation, I just said my opinion. Maybe it is others' opinion about the situation, maybe not.\n. OK, I will try ASAP, but \"... does not support changing store on the fly. ...\" won't solve IMO.\n. I said i have tested this way in last part of my issue. In this way Nothing will be hot reloaded.\n. Why when I add this line:\nmodule.hot.accept('../common/containers/Root', () => {\ninstead of this:\nmodule.hot.accept( () => {\nIt fails with a warning:\n[HMR] The following modules couldn't be hot updated: (Full reload needed)\nWhy doesn't detect what changed?\n. I do hot reload reducers myself, it's not the problem.\n. @calesce Thx. I will try that out ASAP.\n. I think it worked! but with the following error:\nWarning: [react-router] You cannot change <Router routes>; it will be ignored\n. I've got a problem with this solution, errors within a component will become: check render method of AppContainer\n. Hey, Can we solve this problem?. The same.\n. Same.\n. Thanks. You're right I will make a PR for this.. good edit.\n. ",
    "resistdesign": "@gaearon Thank you for your response, I know about v3, I commented here: https://github.com/gaearon/redux-devtools/commit/64f58b7010a1b2a71ad16716eb37ac1031f93915\nUltimately I have been unable to get it working due to an error: Module build failed: TypeError: The plugin \"react-hot-loader/babel\" didn't export a Plugin instance at PluginManager.validate. Is it not compatible with Babel 5 or something?\n. @gaearon Sort of, I reverted to 1.3.0 after I added the babel plugin and couldn't find a fix.\nThis project in the state that it's in at this commit is the setup I had with v3: https://github.com/resistdesign/rdx/blob/4f9611951b5e3be77e4621613fc98024be7153d6/src/Config/WebPack/Loaders/Common/JS.js\nThe Babel plugin just needs to be added to that loader in that file. (Using require.resolve)\nThe project is intended to be a globally installed build tool with HTML entry points.\nTo use it you just go into a project where you have an HTML file with a JS script tag in it and run: rdx serve -a ./src/index.html.\nIt's still in the works but that much should work in that commit I think.\n. Honestly, I wouldn't worry about it at this point, I really think it's a Babel version issue or something else in my crazy setup and I'm content to use v1 until you've had time to really release v3. Thanks man :)\n. @calesce Awesome news! Thank you for that! :). ",
    "Silviu-Marian": "``` js\n// babel config\n        const babelConfig = JSON.parse(fs.readFileSync(path.join(buildConfig.ABS_PATH, '.babelrc'), 'utf-8'));\n        babelConfig.cacheDirectory = path.join(buildConfig.CACHE_PATH, 'babel-loader');\n        mkpath.sync(babelConfig.cacheDirectory);\n        const loaderConfig = JSON.stringify(babelConfig);\n    // js loaders\n    const jsLoaders = ['react-hot', `babel?${loaderConfig}`];\n    if (buildConfig.WEBPACK_ENABLE_ESLINT_DEV) {\n        jsLoaders.push('eslint');\n    }\n\n    // build with webpack (watch mode)\n    clientCompiler = webpack({\n\n```\nWhereas buildConfig.ABS_PATH, '.babelrc' is the one from above. \n. https://github.com/Silviu-Marian/react-hot-loader-290\nnpm install followed by npm run dev\n. Looks like we get more output with webpack2 and es2015-loose-native-modules.\njs\n\\index.js 'import' and 'export' may only appear at the top level (3:0)\nYou may need an appropriate loader to handle this file type.\n| /* REACT HOT LOADER */ if (module.hot) { (function () { var ReactHotAPI = require(\"\\\\node_modules\\\\react-hot-api\\\\modules\\\\index.js\"), RootInstanceProvider = require(\"\\\\node_modules\\\\react-hot-loader\\\\RootInstanceProvider.js\"), ReactMount = require(\"react/lib/ReactMount\"), React = require(\"react\"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {\n|\n| import React from 'react';\n| import ReactDOM from 'react-dom';\n| import { Provider } from 'react-redux';\n @ multi Documentation\n. ",
    "capaj": "as this has been fixed in https://github.com/stacktracejs/error-stack-parser/commit/aeae15451f3a0b008a348dd42ad7f5acbfdace78 I presume all we need to do is update the dependency in redbox-react project, wait for them to release and then bump that dependency. Right?\n. ",
    "manducku": "I find answer form troubleshooting.md \nanswer is need to make index.js \n. ",
    "josectello": "@gaearon, is this update to the docs still up for grabs, and if so, would it be something implemented into the README.md?\n. ",
    "meyer": "@calvinchankf That project uses two separate webpack configs\u2014one for client-side rendering and one for server rendering. webpack.config.js (client-side) should contain your hot loading config options. webpack.server.config.js should not.\n. @theKashey the error occurs in our production application, but I\u2019ll try to get an isolated example that I can share up this weekend.. @theKashey the class is generated by TypeScript. Not sure if that would cause issues. The transpiled factory function looks like this (with boilerplate omitted):\njs\nvar cache = getStyleCache();\nfunction factory(displayName, defaultProps) {\n  var tagName = 'div';\n  return (\n    (_a = /** @class */ (function(_super) {\n      __extends(JsxstyleComponent, _super);\n      function JsxstyleComponent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.component = props.component || tagName;\n        _this.className = cache.getClassName(props, props.className);\n        return _this;\n      }\n      JsxstyleComponent.prototype.componentWillReceiveProps = function(props) {\n        this.component = props.component || tagName;\n        this.className = cache.getClassName(props, props.className);\n      };\n      JsxstyleComponent.prototype.render = function() {\n        var _a = this.props,\n          props = _a.props,\n          style = _a.style,\n          children = _a.children;\n        return createElement(\n          this.component,\n          __assign({}, props, { className: this.className, style: style }),\n          children\n        );\n      };\n      return JsxstyleComponent;\n    })(Component)),\n    (_a.defaultProps = defaultProps),\n    (_a.displayName = displayName),\n    _a\n  );\n  var _a;\n}\nvar Box = factory('Box');\n// etc.\nWe\u2019re using RHL with webpack + the babel plugin:\njs\n[\n  require.resolve('babel-plugin-transform-class-properties'),\n  require.resolve('babel-plugin-transform-object-rest-spread'),\n  require.resolve('babel-plugin-syntax-dynamic-import'),\n  options.hot && require.resolve('react-hot-loader/babel'),\n]\nThe patch is being included right before the entrypoint file:\njs\n[\n  options.hot && require.resolve('react-hot-loader/patch'),\n  require.resolve('./app'),\n]\nAs far as an example goes, what would work best for you? Code snippets or a working demo?. @theKashey here you go:\n```\npatch.dev.js:141 React Hot Loader: this component is not accepted by Hot Loader. \nPlease check is it extracted as a top level class, a function or a variable. \nClick below to reveal the source location: \n \u0192 JsxstyleComponent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.component = props.component || tagName;\n        _this.className = cache.getClassName(props, props.classN\u2026\nwarnAboutUnnacceptedClass @ patch.dev.js:141\nresolveType               @ patch.dev.js:160\npatchedCreateElement      @ patch.dev.js:182\nrender                    @ Button.tsx:172\n...\n``. @theKashey I don\u2019t. Components are imported fromjsxstylethroughout the codebase (including inButton.tsx), but the factory function is called once, when thejsxstylemodule is imported. The _first_ import call occurs inButton.tsx`, and that\u2019s the source of the error.\nHere\u2019s all 100 LOC if you want to take a closer look: https://github.com/smyte/jsxstyle/blob/103c076/packages/jsxstyle/jsxstyle.tsx\nEdit: the factory function is called multiple times; could that be the source of the problem?. @theKashey ahhhhhh, I see. yeah, HMR works just fine with this error. It\u2019s mainly a cosmetic thing. The component appears to reload correctly.. @neoziro @theKashey I accidentally upgraded from v3 to v4 and have not noticed this issue. I think it\u2019s fixed. Thanks!. also holy moly you all have done a ton of work on v4. Exciting! I love the greatly simplified installation instructions.. @theKashey ahhhhhh yeah, I npm installed on this project a few days ago. I was probably one version behind. It works now! Thanks!. I should\u2019ve checked those closed issues \ud83d\ude44\ud83d\ude44\ud83d\ude44. ",
    "calvinchankf": "@meyer Yes, I knew, I implemented it in client-side webpack.config.js but didn't work. I ended up giving up server-side rendering and made it work.\n. ",
    "zivl": "this issue is not related to react-hot-loader specifically. You rather ask this in an appropriate webpack forum.\nAnyway, to address your issue, while in dev mode, webpack can build the bundle to memory and not to a specific path on your file-system. That depends on your webpack.config settings.\nsee more info here: http://webpack.github.io/docs/configuration.html\n. ",
    "adanielyan": "Thank you zivl, I appreciate your response. Will take a look at webpack config. \n. ",
    "jalooc": "https://github.com/reactjs/react-router/issues/2704\n. All those are temporary solutions, but have you tried adding a key to the Router component, like e.g. here https://github.com/reactjs/react-router/issues/2704#issuecomment-211352123 ? I haven't tried that myself, but seems to be a good workaround, since the problem is rerendering. I have also seen a variant of this solution with key={ Math.rand() } , which is surely wild, but less fuss.\n. Yes, unfortunately that's how it'd work - different key is a sign for React to remove the React Element and add a new one instead of reconciling it. Therefore the whole state gets thrown away. So you either choose to get the error or to update all the state.\nPersonally, I don't mind the cannot change <Router routes> error - it shows up, but doesn't interfere with the application. If you have the same feeiling about it, I'd just ignore it and wait for the official fix.\n. ",
    "singggum3b": "I think this issue should this be kept open util it's officially fixed?\n. this is definitely a big flaw ! not able to check child type of which class ...\n. ",
    "gauravChaturvedi": "Any luck on this ? \nMy Routes file has the following: \n<Router history={hashHistory}>\n        <Route path=\"/\" component={Main} />\n        <Route path=\"/jobdescription/:id\" component={JobDescriptionContainer} />\n        <Route path=\"/apply/:jobdescription\" component={ApplicationForm} />\n        <Route path=\"/thankyou\" component={ThankYou} />\n</Router>\n. ",
    "thebuilder": "My \"solution\" is to override the console.error, and filter the warning out. It's only included when HMR is enabled.\n``` js\n/*\n * Warning from React Router, caused by react-hot-loader.\n * The warning can be safely ignored, so filter it from the console.\n * Otherwise you'll see it every time something changes.\n * See https://github.com/gaearon/react-hot-loader/issues/298\n /\nif (module.hot) {\n  const isString = require('./utils/checks').isString;\nconst orgError = console.error; // eslint-disable-line no-console\n  console.error = (...args) => { // eslint-disable-line no-console\n    if (args && args.length === 1 && isString(args[0]) && args[0].indexOf('You cannot change ;') > -1) {\n      // React route changed\n    } else {\n      // Log the error as normally\n      orgError.apply(console, args);\n    }\n  };\n}\n```\n. @akhayoon where ever you want - i have it in my app.js file.\n. ",
    "verlok": "Was this officially fixed yet?\n. ",
    "akhayoon": "@thebuilder curious, where are you putting this in your code? \n. I can also confirm that after upgrading to Webpack v2.2, react-hot-loader 3 stopped working.\nInstalling webpack-dev-server@2.3 restored functionality and everything is smooth now.. This problem went away for when I upgrade to v3. However, I think it was because DevTools and I'm far too lazy to reproduce a standalone project with the error :P. sorry I think you misunderstood. I'm saying the newer implementation of AppContainer is breaking the hot loader for me, but the deprecated way of using it works perfectly.. that was it, thank you.. I had this problem as well. I'm posting the exact error message so it can be found in search (I had a hard time finding this thread that solved it for me).\nThis is the error I received when trying to hot-reload like the OP:\n<Provider> does not support changing store on the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically. See https://github.com/reactjs/react-redux/releases/tag/v2.0.0 for the migration instructions.\n. @theKashey Is there any way for me to use this updated code that has the fix?. Do I need to import hot with every top level component? Can't I just do it with my top level (i.e the child of Provider). ",
    "elodszopos": "Well, @thebuilder, thanks for handing me the plastic bag to put over this this annoyances head. That's one way to go about it lol. I'd keep this issue open though until an official fix comes along.\n. Hey @ctrlplusb. Regarding your workaround. I've built out async route splitting / chunking using react router too with Webpack 2 and I got all my containers / routes loading on-demand with System.import. \nWhile in dev mode, I get the following:\n```\nprocess-update.js:100 [HMR] Updated modules:\nprocess-update.js:102 [HMR]  - ./UI/helpers/Paginate.jsx\nprocess-update.js:102 [HMR]  - ./UI/pages/Users/Users.jsx\nprocess-update.js:102 [HMR]  - ./UI/pages/Users/index.jsx\nprocess-update.js:102 [HMR]  - ./UI/pages async ^.\\/.*\\/index$\nprocess-update.js:102 [HMR]  - ./UI/routes/index.jsx\nprocess-update.js:102 [HMR]  - ./UI/containers/Root/index.jsx\nprocess-update.js:107 [HMR] App is up to date.\n```\nAll nice and fine, http://localhost:8080/15.c1b371b1060596a59e4e.hot-update.js also appears in the network tab as a request, containing \n```\nwebpackHotUpdate(15,{\n// 303:\n// function(module, exports, webpack_require) {\n...\n```\nas expected. Function gets called, module replacement happensss .... but then it doesn't. The UI never updates, the new component never gets rendered. I tried changing the new components (new meaning the one I'm trying to update) render to also log something on the console. Never gets called. No log, no render. \nI will try your workaround now and see if that helps. So if that works.. I can officially confirm this one. Unfortunately.\nMaybe I'm not on the right track, but I'm running out of ideas now.\n. Update: using require instead of System.import does update the container with the changes after HMR did what it should. But only upon navigating elsewhere and then back to the container that you updated, so router loads it again for you (containing the changes). Same page updating still does not happen. Possibly manually module.hot.accept them?\nThat can get out hand real quick though. Even with the leaf and parent route abstraction that I did. You can see below.\nfunction getLeafRoute(route) {\n  return (nextState, cb) => {\n    if (process.env.NODE_ENV === 'development') {\n      return loadRoute(cb)(require(`../pages/${route}/index`));\n    } else {\n      return System.import(`../pages/${route}/index`).then(loadRoute(cb)).catch(errorLoading);\n    }\n  };\n}\nUpdate: \nIf I try to hot accept the modules, I get: \n[HMR] unexpected require(116) from disposed module 26\n. @ctrlplusb I looked at what I had and compared with yours, and it's basically the same.\n```\nfunction errorLoading(err) {\n  if (process.env.NODE_ENV === 'production') {\n    // force reload with force get the page and load new chunks\n    window.location.reload(true);\n  } else {\n    console.error('Dynamic page loading failed', err);\n  }\n}\nfunction loadRoute(cb) {\n  return (module) => cb(null, module.default);\n}\nfunction getParentRoute(route) {\n  return (nextState, cb) => System.import('../containers/' + route + '/index.jsx')\n    .then(loadRoute(cb))\n    .catch(errorLoading);\n}\nfunction getLeafRoute(route) {\n  return (nextState, cb) => System.import('../pages/' + route + '/index.jsx')\n    .then(loadRoute(cb))\n    .catch(errorLoading);\n}\n```\nHere's a group:\n```\nconst loginGroup = moduleName => (nextState, cb) => {\n  const groupItems = {\n    login: System.import('../pages/Login'),\n    resetPassword: System.import('../pages/ResetPassword'),\n  };\ngroupItems[moduleName].then(loadRoute(cb)).catch(errorLoading);\n};\n```\nAnd some route definitions:\nconst appRoutes = {\n  component: App,\n  path: '/',\n  childRoutes: [\n    {\n      getComponents: loggedOutLayout,\n      childRoutes: [\n        { path: '/login', getComponent: loginGroup('login') },\n        { path: '/reset-password', getComponent: loginGroup('resetPassword') },\n      ],\n    },\n...\n    childRoutes: [\n            { path: 'accountInfo', getComponent: getLeafRoute('AccountInfo') },\n            { path: 'users', getComponent: getLeafRoute('Users') },\n...\nI cannot get it to work though. HMR does happen, I get the update, but the old component never updates. If anyone can provide some assistance it'd be most welcome.\nAlso, I can confirm that I isolated the problem and it is System.import. Non-asynchronously loaded routes work perfectly fine.\nThank you!\n. Awesome @birkir @ctrlplusb. I'll give it a try with both of the (possible?) solutions to see if they work. Will report back as well. Also, if there's any info that you need from me to further clarify or possibly webpack / route setup, can provide that too.\n. ",
    "tiberiumaxim": "@tsaiDavid Any fix for your problem? I have the same issue: console shows this\n```\n[HMR] Updated modules:\nprocess-update.js:102 [HMR]  - ./src/components/App.js\nprocess-update.js:107 [HMR] App is up to date.\n```\nbut my App component is not updated\n. It seems like my issue was related to another problem which has a fix now and is/was discussed here: https://github.com/gaearon/react-hot-loader/issues/410\nAlso for filtering the warning in the console, I prefer not altering the console object and just use a regex in the console filter section of Chrome. It just filters out the warning. The regex looks like this:\n ^((?!You cannot change \\<Router routes\\>).)*$\n. Thanks @calesce. It worked. But after running my project (not the demo) the console started being bitchy about inexistent imported constants and other things. I can't say it wasn't right, but I don't know why it didn't do this before this update to my app.\nAnyway, thanks for taking a look and for the fix.\n. ",
    "heldrida": "I'm getting the error Warning: [react-router] You cannot change ; it will be ignored\nindex.js\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from './root';\nimport configureStore from './store'\nconst store = configureStore({});\nconst history = syncHistoryWithStore(browserHistory, store);\nrender(\n  \n\n,\n  document.getElementById('app')\n);\nif (module.hot) {\n  module.hot.accept('./root', () => {\n    const NextRoot = require('./root').default;\n    render(\n      \n\n,\n      document.getElementById('app')\n    );\n  });\n}\n```\nroot.js\n```\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Router, browserHistory } from 'react-router';\nimport { routerMiddleware, push } from 'react-router-redux';\nimport routes from './routes';\nimport { Provider } from 'react-redux';\nimport configureStore from './store'\nexport default class Root extends Component {\n  render() {\n    return (\n        \n\n\n\n\n    );\n  }\n}\n```\nroutes.js\n```\nimport React from 'react';\nimport { Route, IndexRoute } from 'react-router';\nimport App from './containers/app';\nconst routes = (\n    \n\n);\nexport default routes;\n```\nwebpack.dev.config\n```\nvar path = require(\"path\");\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n    historyApiFallback: true,\n    entry: [\n        'webpack-dev-server/client?http://localhost:3000',\n        'webpack/hot/only-dev-server',\n        'react-hot-loader/patch',\n        './src/js/index.js'\n    ],\n    output: {\n        path: __dirname + '/static',\n        filename: \"index_bundle.js\",\n        publicPath: '/'\n    },\n    module: {\n        loaders: [\n            { test: /.js$/, exclude: /node_modules/, loaders: [\"babel-loader\"] },\n            { test: /.scss$/, loader: 'style!css!sass' },\n            { test: /.(ttf|eot|svg|woff(2)?)(\\?[a-z0-9=&.]+)?$/, loader: 'file-loader' }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            inject: true,\n            template: __dirname + '/src/' + 'index.html',\n            filename: 'index.html'\n        }),\n        new webpack.DefinePlugin({\n            'process.env': {\n                'NODE_ENV': JSON.stringify('development')\n            }\n        }),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.NoErrorsPlugin()\n    ]\n};\n```\napp.js\n```\nimport React, { Component } from 'react';\nclass App extends Component {\n    render() {\n    return (\n        <div className=\"app\">\n            <h1>Reaclux Boilerplate 2</h1>\n            <p>A React Redux Webpack Gulp Sass Mocha Enzyme Zombie Chai Boilerplate by <span>Punkbit</span></p>\n        </div>\n    );\n\n}\n\n}\nexport default App;\n```. It's ok to ignore ? I just don't know why other people stopped having the error.\nI made some changes, and get a different error instead \"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\"\nroot.js\n```\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Router, browserHistory } from 'react-router';\nimport { routerMiddleware, push } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport configureStore from './store'\n// include the stylesheet entry point\nrequire('../sass/app.scss');\nconst Root = (props) => {\n    return (\n        \n\n\n\n\n    );\n}\nexport default Root;\n```\nindex.js\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from './root';\nimport configureStore from './store'\nimport routes from './routes';\nconst store = configureStore({});\nconst history = syncHistoryWithStore(browserHistory, store);\nrender(\n  \n\n,\n  document.getElementById('app')\n);\nif (module.hot) {\n  module.hot.accept('./root', () => {\n    const NextRoot = require('./root').default;\n    render(\n      \n\n,\n      document.getElementById('app')\n    );\n  });\n}\n```. @calesce to accept ? like this module.hot.accept('./routes'). @calesce thanks for the suggestion, fixed the warning message but getting the initial one again \"Warning: [react-router] You cannot change ; it will be ignored\"\nindex.js\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { router, browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from './root';\nimport configureStore from './store'\nimport routes from './routes';\nconst store = configureStore({});\nconst history = syncHistoryWithStore(browserHistory, store);\nrender(\n  \n\n,\n  document.getElementById('app')\n);\nif (module.hot) {\n  module.hot.accept('./routes', () => {\n    const newRoutes = require('./routes').default;\n    const NextRoot = require('./root').default;\n    render(\n      \n\n,\n      document.getElementById('app')\n    );\n  });\n}\n```\nroutes.js\n```\nimport React from 'react';\nimport { Route } from 'react-router';\nimport App from './containers/app';\nconst routes = () => {\n  return (\n    \n\n  );\n};\nexport default routes;\n```\nroot.js\n```\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Router, browserHistory } from 'react-router';\nimport { routerMiddleware, push } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport configureStore from './store'\n// include the stylesheet entry point\nrequire('../sass/app.scss');\nconst Root = (props) => {\n    return (\n        \n\n\n                { props.routes() }\n                \n\n\n    );\n}\nexport default Root;\n```. I'm using the temporary fix suggested by Dan Abramov, but not sure if my setup is correct, so have that in mind if you're reading this in the future.\nRouter.prototype.componentWillReceiveProps = function(nextProps) {\n  let components = [];\n  function grabComponents(element) {\n    // This only works for JSX routes, adjust accordingly for plain JS config\n    if (element.props && element.props.component) {\n      components.push(element.props.component);\n    }\n    if (element.props && element.props.children) {\n      React.Children.forEach(element.props.children, grabComponents);\n    }\n  }\n  grabComponents(nextProps.routes || nextProps.children);\n  components.forEach(React.createElement); // force patching\n};. Yes it is reloading, without the compenntWillReceiveProps; Ok, I'll leave the warning, I thought everyone else found a non-hacky solution to remove it, thank you!. ",
    "peterbe": "If others, like me, encounter this when trying to add hot reloading to your react-router based React project from create-react-app, the much simpler solution is to make this change (to index.js):\n```diff\ndiff --git a/songsearch/client/src/index.js b/songsearch/client/src/index.js\nindex 954ab34..4c047b1 100644\n--- a/songsearch/client/src/index.js\n+++ b/songsearch/client/src/index.js\n@@ -9,14 +9,26 @@ import 'bootstrap/dist/css/bootstrap.css';\n import './index.css';\n+class Root extends React.Component {\n+  render() {\n+    return (\n+      \n+        \n+          \n+          \n+          \n+          \n+        \n+      \n+    )\n+  }\n+}\n+\n ReactDOM.render(\n-  \n-    \n-      \n-      \n-      \n-      \n-    \n-  ,\n+  ,\n   document.getElementById('root')\n-);\n+)\n+\n+if (module.hot) {\n+  module.hot.accept()\n+}\n```\nThe trick is the simplicity of the module.hot.accept() and that you need to put make the first block a component instead of a block of <Router>. . My index.js now looks like this:\njavascript\nconst rootEl = document.getElementById('root');\n// If you get errors like:\n// Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components). Check the render method of `AppContainer`.\n// then comment out these lines and uncomment the ones below.\nReactDOM.render(\n  <AppContainer>\n    <App />\n  </AppContainer>,\n  rootEl\n);\n// ReactDOM.render(\n//   <App />,\n//   rootEl\n// );\n:(\n. ",
    "wunderg": "Did you guys found a solution for the HMR problem? I'm stuck with exactly same thing .... ",
    "critic47": "I kinda had the same problem. I'm currently running version 3.0.0-beta.2 with webpack@2.1.0-beta.12\nHot reload works fine even with System.import if I just remove react-hot-loader/patch from my configuration.\nIt doesn't feel quite right though.\n. ",
    "DenisGorbachev": "Same problem here.... ",
    "olslash": "for me, this was causing HMR to fail in System.imported components, which was being done in react-router routes. The solution was simply require()ing the modules at the top of the file if __DEV__  === true (the var is provided by webpack and code protected by it is eliminated in the prod build). A little duplication but not too bad.\n```\nif (DEV) {\n  // require every module that will be System.import()ed below\n  require('./components/NotFound');\n}\nconst notFoundRoute = {\n  path: '*',\ngetComponent: (nextState, cb) => {\n    System.import('./components/NotFound')\n      .then(loadRoute(cb))\n      .catch(errorLoading);\n  }\n};\n```. @wkwiatek, thanks for pointing that out. I didn't realize System.import had been deprecated.\nI did a global find/replace on System.import( -> import( and removed my __dev__ hack, and while codesplitting still works as expected, HMR does not. Replacing the hack fixes it again.\n\"webpack\": \"2.2.1\",\n    \"webpack-dev-middleware\": \"1.10.1\",\n    \"webpack-hot-middleware\": \"2.17.0\",\n    \"react-hot-loader\": \"3.0.0-beta.6\",. Thanks for that link, I am using react router, and doing one of the tricks mentioned in there (forcing the root route to re-render on HMR updates) does fix the problem (poorly, but effectively shows that this is an RR issue).\n. ",
    "Mistereo": "@nfcampos I'm trying to implement conditional rendering depending on children types.\nI can just set some static prop on these components as a workaround, and check this prop instead.\nJust wondering if this can be avoided.\n. ",
    "JorgenEvens": "I'm running into the same problem, this is how I am working around the issue:\n``` javascript\nconst ImportedComponent = (props) => { ... }\nconst ImportedComponentType = ().type;\nconst element = \nconsole.log(element.type === ImportedComponentType)\n```\n. ",
    "w3apps": "Is it possible to fix this thing or is it too big of a change?\n. ",
    "harmony7": "Ran into this today.\nOne option is to check using .type.name like this:\nimport Component from /* ... */;\n// Check like this\nelement.type.name === Component.name\nHowever, even this would also break once the resulting code was minified.\nSo for now I'm using @JorgenEvens 's workaround, thanks for that.\n. I ran into this today and it seems that the cause relates to the way Redbox is being imported.\nhttps://github.com/gaearon/react-hot-loader/blob/next/src/AppContainer.dev.js#L5\nconst Redbox = require('redbox-react');\nHowever, this needs to be:\nconst Redbox = require('redbox-react').default;\nYou can also work around this in your app by installing redbox-react in your project and doing this (as this will refer to the default export):\n```\nimport Redbox from \"redbox-react\";\n\n...\n\n```\nThis might be due to a recent change in the way redbox-react exports itself or something?  I'm not sure if this is the correct way to fix the above.\nAny ideas?\n. Hadn't noticed #314.  I believe that's exactly the problem and fix.\n. Any module can export any number of identifiers and call them what they want.  They are \"namespaced\" to that module.  It's not a global AppContainer that RHL is exporting.  It's react-hot-loader's AppContainer.\nAs such, you're free to rename it as you import it.  Any of the following will work:\n```\nimport { AppContainer as HotContainer } from \"react-hot-loader\";\n\n\n\n```\nOr this:\n```\nimport * as reactHotLoader from \"react-hot-loader\";\n\n\n\n```\nIf you don't use import/export then:\n```\nvar HotContainer = require(\"react-hot-loader\").AppContainer;\n\n\n\n```\n. I agree. Each library can export a symbol called AppContainer and then we'd differentiate them by the namespace they are from. I'd have no problems with that.\nHowever these are not all written by the same people.\n. I realize you were joking.\nHowever I don't think the situation is as bad as you make it sound.\n. ",
    "c58": "I'm using another approach\n```\nconst ImportedComponent = (props) => { ... }\nImportedComponent.isMyImportedComponent = true;\n// Check like this\nelement.type.isMyImportedComponent === true\n```\n. ",
    "shenbin04": "@gaearon Just want to check beforehand that is it possible to fix this in a systematical way or not? If yes, I'll try to dig into it and fix. Thanks.\n. ",
    "Lohann": "+1\nSame problem here, for now I'm using this temporary solution:\n```javascript\nconst Component = (props) => { ... }\nComponent.type = ().type\n...\nChildren.map(children, child => {\n  if (child.type === Component.type) {\n    ...\n  }\n})\n```. ",
    "bathos": "@lgra thanks very much \u2014 it may be brittle, but it\u2019s better than adding nonsense code in prod \u2014 with a little adaptation this addresses it for me for now.. ",
    "alexey-kachalov": "Maybe it would be worth to add a helper function which will do all the magic, based on the implementation of react-hot-loader?\nSomething like that:\n```javascript\nimport React from 'react';\nexport const isElementOfType = component => {\n// Trying to solve the problem with 'children: XXX.isRequired'\n  // (https://github.com/gaearon/react-hot-loader/issues/710). This does not work for me :(\n  const originalPropTypes = component.propTypes;\n  component.propTypes = undefined;\n// Well known workaround\n  const elementType = ().type;\n// Restore originalPropTypes\n  component.propTypes = originalPropTypes;\nreturn element => element.type === elementType;\n};\nThe usage:javascript\nisElementOfType(MyComponent)() // true\n``. @theKashey it is ok for my issue. =) It would be worth to add that toreact-hot-loader.\nP.S. I think you meantareComponentsEqualinstead ofisComponentsEqual.. @theKashey , @gaearon can the functionresolveType` (https://github.com/gaearon/react-hot-loader/blob/master/src/patch.dev.js#L139) be exported as public API?\nI would like to use it for type checking in the following manner (if I get it correctly, it should work):\n```javascript\n// Helper (for 'dev' environment):\nconst isElementOfType = type => element => resolveType(type) === element.type\n// Usage:\nconst isFoo = isElementOfType(Foo)\nconst isFoo() // true\n``\nAre there reasons not to export theresolveType` as public?. I agree about 3rd parties. :( But it is not good for RHL as devtool to have such \"unresolvable issues\" as this one. In the case the devtool has a big influence to production. I think it is something like a problem. :/ It was some lyrics :)\nAbout my case. The code have no external dependencies with React components. There is a helper in the code like I described above and the only way to check the type of element is using this helper (the helper is already exist). There is the only place in the code to fix this issue.\nSo for me, I would use resolveType if you exported it, at least as temporary quick solution.\nIf you decided to expose @lgra's solution as public it would be nice. At least it would be good start point, I think.. @theKashey sounds nice) We could kill two birds with one stone :). Nice to hear! =) Thanks guys!. I don't know if babel can process 3rd party node_modules. If it can, we could try to write a plugin based on @lgra 's one which processes 3rd party modules using areComponentsEqual, I think.\nIt could be general solution. But there are performance issues in the case, I think.. @theKashey , thank you. I would like personally to have the helper. But it should work also without react-hot-loader in production I think.. Closed due to duplication. See the continuation here: https://github.com/gaearon/react-hot-loader/issues/304#issuecomment-349613396. ",
    "mmoutenot": "@neoziro Thanks for the work on areComponentsEqual. \nHow should one solve the issue where a third party dependency does this check? If react-hot-loader is imported at all it causes those checks to fail. This is noted above, but I wasn't able to find a resolution in the ensuing conversations.\nThanks!. Gotcha, it looks like some third party libraries are working to ensure things still work.\nFor example:\nhttps://github.com/palantir/blueprint/issues/723\nhttps://github.com/palantir/blueprint/issues/2095\nI'll keep my eyes open for a solution from the React team.. ",
    "idubrov": "Two questions:\nThere is no (easy) way to somehow tell RHL not to proxy certain components (using file path, component name, whatever)?\nAlso, there is no way to \"unproxy\" those components somehow (using some dirty trick or whatever)?. I tried doing something like this, but I wasn't able to get the original React.createElement -- it's replaced before I can grab it. I think, it's because of react-hot-loader babel plugin, which adds import to react-hot-loader, which in turn calls ReactHotLoader.patch(React), which replaces React.createElement. I'm too late to the party!. Actually, that seems to do the the trick. I only use GraphiQL component in one place, so wrapping the place it is used in the following way:\njavascript\nReactHotLoader.disableProxyCreation = true;\nconst result = (<GraphiQL>...</GraphiQL>);\nReactHotLoader.disableProxyCreation = false;\nreturn result;\nseems to solve my issue.\nThanks!. Would it be possible to have \"nothot\" function to mark components not to be proxable?\nLike,\n```javascript\nimport { nothot } from \"react-hot-loader\";\nimport GraphiQL as GQL from \"graphiql\";\nconst GraphiQL = nothot(GQL);\n...\n```. ",
    "smelukov": "Hi! Is proxy creation required for the correct working of RHL?\nWhat if we'll always set disableProxyCreation to true?\nAlso, what if create originalType property for type comparison instead of areComponentsEqual and <Compoennt>.type?. @theKashey What do you think about creating originalType property (inside RHL) for type comparison instead of areComponentsEqual and <Compoennt>.type?. Of course, but in this case, we can implement the simplest implementation of areComponentsEqual:\n```js\nfunction areComponentsEqual(a, b) {\n  const aType = a.originalType || a.type;\n  const bType = b.originalType || b.type;\nreturn aType === bType;\n}\n```\nThis code will work without creating an element and getting an object behind a proxy. And it will work in production (without RHL). We have a UI library (there are only UI components) and we compare element types often inside of it to implement some rendering logic.\nFor now, we need to include react-hot-loader as a dependency for our library to use areComponentsEqual or we need to creating an element of the UI-components to get it's type property to compare with some other element type.\nWe don't want to include react-hot-loader as a dependency.\nAlso, creating elements is not always available, cause some components have required props.\nWould be great if RHL will add originalType prop to the element object and we'll can to compare element types without requiring RHL and without creating an element (example was posted above). > use webpack loader to cold all node_modules by default\nSeems like it will affect linked modules (npm link) and the changes in linked libraries will not be displayed. Right?. Seems like adding\nexclude: [\n    /\\/node_modules\\/(?!@foo)[^\\/]+\\//\n]\nsolves the problem.\nBut is it normal?. \ud83d\udc4c . ~Interesting fact:\nI've built only modules, that uses hot in our project and got 7056kb (without dropping module) vs 4192kb  (with dropping module)\nIt's nearly 40-50% size reducing for some bundles in prod-mode~\nI was measuring prod vs dev \ud83e\udd26. 8. > It's nearly 40-50% size reducing for some bundles in prod-mode\nIt's because:\n- webpack applies some optimizations only for pure ESModules (using module bailouts these optimizations)\n- webpack treeshaking removes entirely import { hot } from 'react-hot-loader' because hot using is dropped. As a result, react-hot-loader-package probably will be entirely removed from the bundle. Hhhmmm... seems like I was measuring prod vs dev \ud83e\udd26\nThe real difference prod vs prod is 4-5kb on 8 hot-calls\n4-5 kb is because we have a really huge amount of chunks. Sure ). Now supports all import cases:\nimport { hot } from 'react-hot-loader'\nimport { hot as namedHot } from 'react-hot-loader'\nimport * as RHL from 'react-hot-loader'. Are there any comments for this? ). Thanks :). @edmorley Hi!\nThe output will change only in the production build (when NODE_ENV is production). @edmorley thank you! I've investigated this and find out that hot-dropping may not work with babel 7 (no matter which kind of export do you use).\nFix in https://github.com/gaearon/react-hot-loader/pull/1093. > But both code examples are doing the same - updates everything from the current module and \"below\"\nHmmmm... but AppContainer is not the same that hot. There are different behavior. @theKashey it's just iterating over AST body and collecting all import declarations. The reason is that the file.metadata.modules was removed in babel 7 - https://github.com/babel/babel/pull/6343\nThis means that hot-dropping will not working with babel 7 without this PR. Only getRHLContext was changed. The rest of the changes just about code style. Yep. Hi!\nsideEffects will work only for prod-mode, therefore if sideEffects: false does clean remained RHL code then I think that you may add sideEffects: false to the RHL package.json :). @edmorley Good idea. Are you willing to do this by your self?. ",
    "pitops": "@theKashey Any workaround suggestions for monorepos?. @theKashey thanks I will probably wait for v5 then. ",
    "wijdench": "Hi,\nSame issue for me, hope that v5 release will be soon.. ",
    "joanned": "Same issue as well.. ",
    "huijian3139": "Good catch ! Super sister\n. ",
    "krzysztofpniak": "Have you found any solution for this? Anyways, I'm sure that this is not related to react-hot-loader. I have a project with exactly the same problem and I do not have react hot loader there. I think it is rather a problem with Hot Module Replacement in webpack.\n. ",
    "ramilzakirov": "I had an identical problem. It has turned out to solve through the use of url-loader instead of file-loader for fonts files, but only to development webpack config.\n{\n  test: /\\.(eot|svg|ttf|woff|woff2)$/,\n  loader: 'url-loader', // file-loader for production\n},\n. ",
    "ponelat": "@ramilzakirov thank you. This has been a PITA for a while!. ",
    "erikras": "I have updated my repo to not have Redbox, and to use AppContainer, which was was not using, and now I really cannot see the difference between my app and the one in react-hot-boilerplate, but mine is not working, and RHB is.\nAny further ideas?\n. Oh! I'm using webpack-dev-middleware and webpack-hot-middleware and the RHB example is using webpack-dev-server. That's about the only difference I can still see.\n. ",
    "romulof": "According to webpack-hot-middleware docs:\n- You don't need to add webpack/hot/only-dev-server entry in your Webpack configuration.\n- You forgot to add OccurenceOrderPlugin before HotModuleReplacementPlugin and NoErrorsPlugin after it.\nYou also forgot to add react-hot-loader/babel plugin in your Babel configuration.\nI've made all these changes and sill got the same error as you :/\n. UPDATE: The problem here was with my Babel configuration.\nI had all my Babel config at package.json and was setting the react-hot-loader/babel plugin in babel-loader Webpack query. I forgot that the configs are not merged.\nNow the error is another:\n[HMR] Cannot check for update (Full reload needed)\nprocess-update.js:116\n[HMR] Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.\n    at invariant (http://0.0.0.0:3000/dist/client.js:641:16)\n    at ReactCompositeComponentWrapper.instantiateReactComponent [as _instantiateReactComponent] (http://0.0.0.0:3000/dist/client.js:19122:103)\n    at ReactCompositeComponentWrapper._updateRenderedComponent (http://0.0.0.0:3000/dist/client.js:55684:39)\n    at ReactCompositeComponentWrapper._performComponentUpdate (http://0.0.0.0:3000/dist/client.js:55656:11)\n    at ReactCompositeComponentWrapper.updateComponent (http://0.0.0.0:3000/dist/client.js:55575:13)\n    at ReactCompositeComponentWrapper.receiveComponent (http://0.0.0.0:3000/dist/client.js:55474:11)\n    at Object.receiveComponent (http://0.0.0.0:3000/dist/client.js:4380:23)\n    at ReactCompositeComponentWrapper._updateRenderedComponent (http://0.0.0.0:3000/dist/client.js:55678:24)\n    at ReactCompositeComponentWrapper._performComponentUpdate (http://0.0.0.0:3000/dist/client.js:55656:11)\n    at ReactCompositeComponentWrapper.updateComponent (http://0.0.0.0:3000/dist/client.js:55575:13)\n. UPDATE 2: I fixed it.\nThe problem was with my module.hot.accept reloads. I forgot to add .default after the required modules.\nThanks @erikras, you served as my Debug Rubber Duck today :)\n. @paulwithap, your JS code have go thru either react-hot-loader/babel Babel Plugin OR react-hot-loader/webpack Webpack Loader, if you are not using Babel.\n. I know the import X as Y from Z, I'm using it, but when you start doing this your code starts looking different from everyone else, it becomes \"unfamiliar\".\nI think it's ok to use when you have 2 external modules that by chance got the same name, but let's say that every library that uses React context name their root component \"AppContainer\" or \"Provider\", so eveyone is forced to rename it to something. Imagine yorself reading someone else's code, having to do a mental map of all the aliases while reading. I'm just trying to avoid this.\n. @kevinlaw91 HMR is the name of Webpack engine that, replaces modules on the fly (duh). React Hot Loader is the end that connects to Webpack engine to allow React to re-render automatically. So, I'd say RHLContainer or just HotLoader.\n. About the HotContainer rename that I suggested:\n1) I totally agree with @neoziro revert: Deprecation must come before change;\n2) None of those changes (including the revert) were published on NPM;\n3) Even if it was published, v3 was on Alpha dist-tag. Users of this kind of release must be open to changes;. ",
    "NeXTs": "@romulof Great catch! I had same issue\n. Finally! Thank you so much @calesce \n. ",
    "paulwithap": "I'm experiencing this issue as well while using webpack-dev-middleware and webpack-hot-middleware. I know @gaearon said it shouldn't matter, but someone did submit a PR to @erikras where the fix was literally just swapping Express with webpack-dev-server \ud83d\ude04 \nwebpack.config.js\njavascript\n...\n entry: [\n    'react-hot-loader/patch',\n    'webpack-hot-middleware/client',\n    './src/index'\n  ],\n  target: 'web',\n  output: {\n    path: `${__dirname}/src`,\n    publicPath: 'http://localhost:3000/',\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('development'),\n      __DEV__: true\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n...\nsrc/index.js\n``` javascript\n...\nrender(\n  \n\n, rootEl\n);\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => {\n    const NextRoot = require('./containers/Root').default; // eslint-disable-line global-require\n    render(\n      \n\n, rootEl\n    );\n  });\n}\n...\n```\nsrc/containers/Root.js\n``` javascript\n...\nconst Root = ({ store, history, routes }) => (\n  \n\n\n);\n...\nexport default Root;\n```\n. That's in my .babelrc file. I've tried putting the configuration directly\nin my webpack config as well. Neither worked.\nOn Wednesday, July 27, 2016, R\u00f4mulo Fernandes notifications@github.com\nwrote:\n\n@paulwithap https://github.com/paulwithap, your JS code have go thru\neither react-hot-loader/babel Babel Plugin OR react-hot-loader/webpack\nWebpack Loader, if you are not using Babel.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/307#issuecomment-235796832,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB9zZ7iwk2e9CObhJK2XnGljKUoWF2kaks5qaC1FgaJpZM4IvZoe\n.\n. @gaearon was right of course \ud83d\ude01 \n\nThe fix in my case was related to react-router. Passing routes in as a prop to <Root /> breaks HMR, but importing them directly into Root.js works.\nAny idea why? Routing was working as expected in the former version, and I assumed the output either way would be the same.\n. Try importing routes into Root.js rather than passing it as a prop.\n. My fix will solve your second error. You have to pass the path you what to hot replace in as the first parameter to module.hot.accept(), so your code should look like this:\n``` javascript\n// Render app in browser\nconst rootCompProps = { store: store, history: history }; // import routes in Root.js\nrender(\n  ,\n  rootElement\n);\n// Hot module replacment for dev purpose\nif (module.hot) {\n  module.hot.accept('../common/containers/Root', () => {\n    const NextRoot = require('../common/containers/Root').default;\n    render(\n      \n\n,\n      rootElement\n    );\n  });\n}\n``\n. Look at my code again. It is not the same as your original code. I'm not passingroutesin as a prop to, I'm importing it directly intoRoot.js`.\nHere is how the file should look:\nRoot.js\n``` javascript\nimport React, { PropTypes as T } from 'react';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport routes from '../routes';\nconst Root = ({ store, history }) => (\n  \n\n\n);\nRoot.propTypes = {\n  store: T.object,\n  history: T.object\n};\nexport default Root;\n```\n. ",
    "rbholeraj": "Anybody have solid reason why this error come. :(  @gaearon \n. ",
    "kkirby": "Because you're doing it wrong:\nloaders: [\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loaders: ['react-hot','babel']\n            }\n. ",
    "Tjorriemorrie": "@kkirby thanks, do you have more info on this? i.e. why you cannot have them set up separately?\n. ",
    "dpwrussell": "This is killing me!\nIt seems to be caused by many things. A certain way to trigger it is this:\n``` js\nclass Foo extends React.Component {\nconstructor() {\n    super();\n    this.x = this.x.bind(this);\n  }\n```\nwhere x does not exist.\nor similar with destructuring:\njs\nconst { foo } = props.x;\nwhere x does not exists in props.\n. @nathanmarks Thanks. I already implemented @harmony7 (Thanks!) workaround until #314 makes it into a release.\n. ",
    "alonbardavid": "redbox is very inconvenient to use as it doesn't really use the built in error handling of the browser - basically no sourcemap stacktraces.\nIt also doesn't look good when using chrome's mobile emulator (it's too small to really see anything).\ncan we instead do this in AppContainer.dev :\nif (error) {\n        console.error(error.message,error.stack);\n        return React.createElement(this.props.errorReporter, { error: error });\n      }\nat least we'll get nice stack traces alongside it.\n. ",
    "ntsim": "In the meantime before the pull request for this is merged in, i've done something like this:\n```\nimport React, { PropTypes } from 'react';\nimport RedBox from 'redbox-react';\nconst WrappedRedBox = ({ error }) => {\n    if (error) {\n        console.error(error.message, error.stack); // eslint-disable-line no-console\n    }\nreturn <RedBox error={error}/>;\n\n};\nWrappedRedBox .propTypes = {\n    error: PropTypes.instanceOf(Error).isRequired,\n};\nexport default WrappedRedBox ;\n```\nThen added it in the AppContainer errorReporter prop.\n<AppContainer errorReporter={WrappedRedBox}>\n...\n</AppContainer>\n. ",
    "jkeljo": "I'm seeing this as well. The React docs recommend this pattern of reassigning functions in the constructor for a couple of purposes:\n- binding handlers in ES6 classes\n- using PureRenderMixin in ES6\nBut even the presence of react-hot-loader is enough to break the pattern (you don't actually need to make a code change). From playing around in the debugger, it looks like react-hot-loader is cloning the objects in a way that doesn't update the binding of already-bound member functions.\nI created a repro repo here before I realized that this was the same issue.\n. ",
    "MarshallOfSound": "Came across this today while doing some work integrating react-hot-loader into a pure Electron dev workflow.  In Electron you only need to target latest stable Chromium which means that classes are already implemented natively.  This issue is much more prominent in that space because people just don't use the class transform as it isn't required.\nIf someone can point be in a good direction I'll be happy to dive into this at some point and get it sorted.. @wkwiatek OK so I spent a while inside of react-proxy and like half got it working, it's insanely complex so this could take a while I feel \ud83d\ude06 . ",
    "merges": "Is there a workaround for those of us who are experiencing this issue today?. ",
    "penx": "I had this issue when trying to switch from babel-preset-es2015 to babel-preset-env. Adding transform-es2015-classes to the included transforms resolved it for me:\npresets: [\n  ['env', {\n    targets: {\n      chrome: 60\n    },\n    include: ['transform-es2015-classes']\n  }],\n  'stage-1',\n  'react'\n],\nplugins: ['react-hot-loader/babel'] . I had this issue when trying to switch from `babel-preset-es2015` to `babel-preset-env`. Adding `transform-es2015-classes` to the included transforms resolved it for me:\n\npresets: [\n  ['env', {\n    targets: {\n      chrome: 60\n    },\n    include: ['transform-es2015-classes']\n  }],\n  'stage-1',\n  'react'\n],\nplugins: ['react-hot-loader/babel'] . I had this issue when trying to switch from `babel-preset-es2015` to `babel-preset-env`. Adding `transform-es2015-classes` to the included transforms resolved it for me:\n\npresets: [\n  ['env', {\n    targets: {\n      chrome: 60\n    },\n    include: ['transform-es2015-classes']\n  }],\n  'stage-1',\n  'react'\n],\nplugins: ['react-hot-loader/babel'] . I had this issue when trying to switch from `babel-preset-es2015` to `babel-preset-env`. Adding `transform-es2015-classes` to the included transforms resolved it for me:\n\npresets: [\n  ['env', {\n    targets: {\n      chrome: 60\n    },\n    include: ['transform-es2015-classes']\n  }],\n  'stage-1',\n  'react'\n],\nplugins: ['react-hot-loader/babel'] .\n",
    "fwchen": "+1 \nwait update. ",
    "ChuckJonas": "Also looking for a fix here!. I'm having the same issue. Targeting ES6. ",
    "kyleramirez": "+1\nThanks for being on this. Waiting patiently for an update.. ",
    "EloB": "Please merge this because it's very hard to develop right now with the beta. The error output without this is also pointing you at the wrong code! So I have to remove the <AppContainer> from the render function when ever I get an error that I don't know where it's located.\n. ",
    "blesswinsamuel": "My temporary fix:\n``` jsx\nconst mount = document.getElementById('app');\nrender(\n   {throw error}}>\n    \n,\n  mount\n);\n```\n. ",
    "quaninte": "Please merge this one \ud83d\udc4d \n. ",
    "jiripudil": "Until this is merged, you can still use redbox-react for error reporting, just import it yourself correctly and overwrite the default errorReporter prop:\n``` js\nimport RedBox from 'redbox-react';\n// or\nconst RedBox = require('redbox-react').default;\nrender(\n    \n\n,\n    mount\n);\n```\nAlso, bump :)\n. ",
    "olegstepura": "After searching better I found this:\nhttps://github.com/gaearon/react-hot-loader/issues/249\nhttps://github.com/reactjs/react-router/issues/2182\nhttps://github.com/gaearon/react-hot-boilerplate/pull/61\nThis seem to be a solution, but it does not work for me: https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-211504531\nAdding a Math.random() as a key property to Router did not help either.\n. Hi! Sorry I didn't answer anything before. I haven't had time to check since I switched back to older but working configuration in the project I worked on. But now this project is kind of freezed, so I will definitely try to use webpack 2 + react-hot-loader 3  later when I'll have time to switch back to that project. If I'll face an issue again, I'll reopen this with new details. Thanks!\n. @pts-moog16 yep, I already know and use that =) But thanks anyway. I forgot to mention this here.. BTW I'm now using webpack 2 and RHL 3.0 latest beta and I love this bundle. Cannot wait 'till RHL 3.0 will be released as stable version.. ",
    "pts-moog16": "@olegstepura this seems like an old post, but I've been looking into this issue and I found that using this plugin: new webpack.NamedModulesPlugin() gives the random numbers an actual name. Thought this might help someone.. ",
    "bitttttten": "I moved on from this example and so I do not have the code any longer. I could try and reproduce, however, since I have moved on it's no longer a priority or close to critical. I am sure, like you said, that I was encountering this behaviour since stores cannot be hot reloaded.. that's all. \nApologises for the late reply, I'm happy for it to be closed.\n. ",
    "ro-savage": "Awesome work @calesce !\nWe tried this out and found it broke when we had methods with default params. It seemed to work fine in all the other cases in our project.\nExample:\n``` jsx\nclass defaultParamsComponent extends React.Component {\ndefaultParam = (param = 'test') => {\n    return param\n  }\nrender() {\n    return (\n      \n        {this.defaultParam()}\n      \n    )\n  }\n}\n```\nGives the error\n\nProperty arguments[0] of CallExpression expected node to be of a type [\"Expression\",\"SpreadElement\"] but instead got \"AssignmentPattern\"\n\n@gaearon We'd love to see this implemented. Hot-reloading is pretty broken for us because we are using arrow function methods.\n. @calesce I updated our react-hot-loader with your latest changes and its working perfectly for us. Thanks heaps!\n. @HriBB, can you find out what is not hot reloading?\nI am using it on an app that solely uses arrow functions and contains >200 components and haven't ran into any problems. \n. ",
    "HriBB": "I tried your fork, and it works on a small app, but not on a larger application. I'm switching back to RHL1.3 for the moment. I hope you figure it out. Would love to help, but this is a bit over my head ATM.\n. @calesce will test it again tomorrow and report. Basically all I need is class arrow functions to hot-reload. I use them heavily throughout my app and without them being hot-reloaded is pretty much useless for me. For now I switched to binding them in constructor, and now they do reload, so I don't have to reload the app anymore :)\n. @calesce @ro-savage I must be doing something wrong, since even basic hot reload does not work. I'm not sure if I installed @calesce's fork properly. This is what I did.\ngit clone git@github.com:calesce/react-hot-loader.git\ncd react-hot-loader\ngit checkout class-properties\nnpm install\ncd ../my-project\nnpm link ../react-hot-loader\nnpm run client:dev\nApp loads fine, everything works except hot reload. I am using webpack-dev-server and resolve.alias. \nWhen I change some file, I get the standard output in the console, but nothing happens. \n[HMR] Waiting for update signal from WDS...\n[WDS] Hot Module Replacement enabled.\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\n[HMR] Checking for updates on the server...\n[HMR] Updated modules:\n[HMR]  - 1511\n[HMR]  - 1510\n...\n[HMR]  - 1568\n[HMR]  - 1666\n[HMR] App is up to date.\nBut nothing is changed. It works as expected with npm version of react-hot-loader@3.0.0-beta.2\nAny ideas? I'm looking at the RHL source, but I'm not yet familiar with it and so I have no idea how to debug this ...\nThis is my config\n. Ahh I finally got it to work. I guess that npm link is not the right way to install forks. Here's what I did. BTW I'm using node v6.3.1\ngit clone git@github.com:calesce/react-hot-loader.git\ncd react-hot-loader\ngit checkout class-properties\nnpm install\nrm -rf node_modules\nnpm install redbox-react react-proxy global react-deep-force-update\ncd ..\ncp -r react-hot-loader my-project/node_modules\ncd my-project\nnpm run client:dev\n@calesce @ro-savage how did you install the fork? I would really like to know so that I don't run into the same problems in the future.\nIt looks like it's working. I will do some more testing over the next few days and report any problems here ;)\n. @calesce yeah I know. It only worked if I manually copied files into my project's node_modules/react-hot-loader folder (after running npm run build in RHL3 fork).\nIf I used the npm link approach, I ended up with node_modules/react-hot-loader/node_modules/[all RHL3 dependencies] and hot reload would not work.\nThis is out of the scope of this PR, but does anyone know how to properly link forks?\n. Do we need\nconst NextApp = require('./containers/App').default\nhere?\nI'm in a twilight zone ... it works without require() in one project, but it does not work at all in the other, no matter if I use require() or not.\nCan anyone explain when it will work without?\n. ",
    "yasuf": "Any updates on this? I tried copying the built lib folder from the react-hot-loder repo on the class-properties branch into my project's node_modules but it didn't work, I get this error The following modules couldn't be hot updated: (They would need a full reload!), any ideas on what to try?\n. ",
    "minooo": "Thank you! \n. ",
    "sammkj": "@ctrlplusb thank you for your reference! I have a dumb question here. It seems like your app and every other apps that have code splitting and rhl use express to render their app. Would that make a difference if I use webpack-dev-server instead? My current requirement is I don't need express.\n. I will be using CDN like S3. For this app, I don't need SSR so express is not needed here. So during development, I use webpack-dev-server to develop the front end. I just couldn't get rhl to work with code splitting. Btw, I'm still very new to webpack. If you know of a better way to do things, it would be greatly appreciated if you can give some hints.\n. ",
    "crapthings": "rhlContainer is too ugly\n. import  { AppContainer as HotContainer } from ?\n. ",
    "kevinlaw91": "HMRContainer or HMRWrapper would be better\n. @romulof Yeah you're right. Naming should be more general instead. We can consider keywords like \"Root\" or \"Swap\" too.\n. ",
    "LiJinyao": "I agree, HotContainer is more specific.\n. ",
    "renatorib": "Agreed. ",
    "ariesjia": "+1. ",
    "avizaviz": "Same issue frustrating!!!\n. ",
    "tststs": "Hi @sandysaders,\ni had to showcase react-hot-loader yesterday and made a quick and dirty example for a colleague with express. feel free to pick the parts you need if they're suitable for you. it's based on react-hot-loader@3.0.0-beta.3.\nhttps://github.com/tststs/react-hot-loader-3-express-example\n. ",
    "max-mykhailenko": "I have same errors, but hot reloading works correct. Any progress with it?\n\ndoes not support changing store on the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically.\nWarning: [react-router] You cannot change ; it will be ignored\nWarning: [react-router] You cannot change ; it will be ignored\n. Clearing node_modules and removing package-lock.json helps for me. \n",
    "DimitryDushkin": "Definitely it is not react-hot-loader issue. It works fine within my project.\n. After upgrade to React 15.4 I have error\nSCRIPT5022: Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner, _store}). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `RedBoxError`.\nin IE11.\nRHL uses RedBox. I've create issue in RedBox for this https://github.com/commissure/redbox-react/issues/82, but I'm no really sure it's RedBox issue. Trying to figure it out.. I'll try Den. Currently I've figured out that only dev build with RHL included is affected. Production build with React 15.4 is okay. . By the way I've found out what was the problem with IE11: problem was within code in node_modules which is excluded in babel loader in webpack (for performance reasons):\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\nAt first react requires it when there is no Symbol polyfill and then some code require it where there is Symbol polyfill, so (as far as I understand) on phase \"Building VDOM\" REACT_ELEMENT_TYPE equals to number and on \"validation\" phase REACT_ELEMENT_TYPE equals instance of Symbol object.\nStill do not understand why it happened, but adding babel-polyfill helped.\nUP: even simpler solution https://github.com/thejameskyle/babel-react-optimize/issues/16#issuecomment-263519239. It's very helpful addition!. ",
    "antoinejaussoin": "I made a wrong assumption. I'm basically using a corporate NPM proxy at work, and, somehow, your package (in its 3.0.0-beta.2) version get installed with \"history\" in its node_modules directory even though it's not specified in package.json. So I (wrongly it appears) assumed you must have pushed it by mistake on NPM... \nI guess the issue lies with our corporate NPM repo at work... i'll investigate further.\nSorry for the mistake!\n. I wasn't crazy then :) \n. @gaearon: That's why I couldn't reproduce on my Mac. The problem arise in a corporate environment, and I don't have any way to update NPM there (it will be updated at some point, but it's totally out of my control).\nIn the meantime, I just copy-pasted your code into a /lib/ directory on my project, until we switch to NPM3 at work. This is hacky (and temporary) but it's the only way I can see with the limited means I have :)\nThanks for your reply, and if there's nothing you can do on your end, I'll close the issue.\n. ",
    "emyk": "I'm seeing the same thing, not using any npm proxy. history is in react-hot-loader/node_modules when npm-installing. \nTry downloading https://registry.npmjs.org/react-hot-loader/-/react-hot-loader-3.0.0-beta.2.tgz, history is already in there\n. FYI, this is not an issue with beta.4.\n. ",
    "jonjaques": "Hmmm, interesting. So I've nailed this down to a webpack config \"issue\", not sure which project's responsibility this falls to however.\nHere is my entry config and the source of the problem. I was experimenting with the webpack CommonsChunk plugin, in an effort to speed up builds.\nThe issue only crops up with the split vendor bundle. I'm going to try adding react-hot-loader/patch to the vendor bundle to see if that has any effect. \nentry: \n   { client: \n      [ 'webpack-hot-middleware/client',\n        'webpack/hot/only-dev-server',\n        'react-hot-loader/patch',\n        'file?name=styles.css!./assets/scss/index.scss',\n        './app/client' ],\n     vendor: \n      [ 'flux-standard-action',\n        'isomorphic-fetch',\n        'qs',\n        'react',\n        'react-cookie',\n        'react-dom',\n        'react-helmet',\n        'react-redux',\n        'react-router',\n        'react-router-bootstrap',\n        'react-router-redux',\n        'redux',\n        'redux-actions',\n        'redux-connect',\n        'redux-promise',\n        'use-scroll-behavior' ] },\n. Whoop whoop! \ud83c\udf89 \nAdding react-hot-loader/patch as the first require to the vendor entry did the trick.\n. Checkout the webpack.optimize.CommonsChunkPlugin. Btw the interface used here is for webpack@2, but this should work just fine with webpack@1.x\nYou config would look something like this; biggest change is you need to change the entry value to an object instead of array.\nentry: {\n  app: [\n    'react-hot-loader/patch',\n    'webpack-hot-middleware/client',\n    './src/index'\n  ],\n  vendor: [\n    'react-hot-loader/patch',\n    ...\n  ]\n},\noutput: {\n  filename: '[name].js'\n},\n...\nplugins: [\n  new webpack.optimize.CommonsChunkPlugin({ name: 'vendor', filename: 'vendor.js' })\n]\nThis would output two files, vendor.js and app.js, which need to be loaded in that order.\nI'm actually not sure if you need the patch file in both entry chunks. Will do some testing...\n. ",
    "blade254353074": "@jonjaques  Oh my god, you save me!\nAfter your remind, I found `react-hot-loader/patch must load before your codes` mean.\nIt means react-hot-loader/patch must load before your own codes, whatever vendor, entry, common, must before them.\njavascript\n...\nvendor: ['react-hot-loader/patch', 'babel-polyfill', 'react', 'react-dom', 'react-router', 'react-tap-event-plugin'],\n...\n. Oh...I misunderstood. Thanks ~ @theKashey . ",
    "strobox": "Have the same issue with config looked like this\n` \nentry:  [\n    'react-hot-loader/patch',\n    'webpack-hot-middleware/client',\n    './src/index'\n  ]\n,\nIf I'll change What I should put to vendor? Thanks.\n. @jonjaques My respect to you colleague! In fact my problem was in incorrect React Hot loader 3 setup related to import { AppContainer } from 'react-hot-loader'; .  \nI successfully setup webpack.CommonsChunkPlugin. and in my case 'react-hot-loader/patch', in vendor not needed. All works fine.\nBy the way, webpack.CommonsChunkPlugin is really awesome. One thing that I should append for others readers - don't forget to add following part to webpack config (export vendor modules variables):\n// ..... for example:\n  plugins: [\n    new webpack.ProvidePlugin({\n        $: \"jquery\",\n        React: 'react',\n        ReactDOM: 'react-dom',\n        DataTable: 'datatables.net'\n    }),\n//.....\nDocs references:\nCommonsChunkPlugin\nSplit app and vendor code\n. If I use\n{\n        test: /\\.jsx?$/,\n        include: /node_modules/,\n        use: ['react-hot-loader/webpack'],\n      },\nas sad in readme I  get multiply messages of save error:\n    _\n\nERROR in (webpack)/buildin/global.js\n    Module build failed (from ./node_modules/react-hot-loader/webpack.js):\n    TypeError: aSourceMapConsumer.eachMapping is not a function\n        at Function.fromStringWithSourceMap (/Users/chikovvas/activity/code/own/xapnew/node_modules/react-hot-loader/node_modules/source-map/lib/source-node.js:87:24)\n        at Object.transform$1 (/Users/chikovvas/activity/code/own/xapnew/node_modules/react-hot-loader/dist/webpack.development.js:132:59)\n     @ ./node_modules/html-webpack-plugin/node_modules/lodash/lodash.js 1:0-47\n     @ ./node_modules/html-webpack-plugin/lib/loader.js!./client/index.html\n\nIf I try @hot-loader/react-dom alias I get:\n\nModule not found: Error: Can't resolve 'lodash.merge' in '/Users/chikovvas/activity/code/own/xapnew/node_modules/react-hot-loader/dist'\n\nuntil I'll didn't remove    \"react-hot-loader/babel\" from .babelrc\n. ",
    "miraage": "Same problem.\njson\n{\n  \"presets\": [\n    \"react\",\n    \"es2015\",\n    \"stage-0\"\n  ],\n  \"plugins\": [\n    \"transform-runtime\",\n    \"transform-flow-strip-types\"\n  ]\n}\n``` js\n'use strict';\nconst path = require('path');\nconst webpack = require('webpack');\nconst autoprefixer = require('autoprefixer');\nconst HtmlPlugin = require('html-webpack-plugin');\nconst SRC_PATH = path.join(__dirname, 'src');\nconst DIST_PATH = path.join(__dirname, 'dist');\nmodule.exports = {\n  context: SRC_PATH,\nentry: {\n    app: './app',\n  },\noutput: {\n    path: DIST_PATH,\n    filename: '[name].js',\n    publicPath: 'http://localhost:8080/',\n  },\nresolve: {\n    extensions: [\n      '',\n      '.js',\n      '.scss',\n    ],\n  },\nmodule: {\n    loaders: [\n      {\n        test: /.js$/,\n        include: SRC_PATH,\n        loaders: [\n          'react-hot-loader/webpack',\n          'babel',\n        ],\n      },\n  {\n    test: /\\.scss$/,\n    include: SRC_PATH,\n    loaders: [\n      'style',\n      'css?sourceMap!postcss!sass?sourceMap',\n    ],\n  },\n],\n\n},\npostcss: [autoprefixer],\nplugins: [\n    new webpack.NoErrorsPlugin(),\n    new HtmlPlugin({\n      template: path.join(SRC_PATH, 'index.html'),\n      inject: false,\n      favicon: false,\n    }),\n  ],\ndevtool: 'eval',\ndevServer: {\n    contentBase: DIST_PATH,\n    historyApiFallback: true,\n  },\n};\n```\njson\n{\n  \"name\": \"yo\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.4.1\",\n    \"babel-loader\": \"^6.2.5\",\n    \"babel-plugin-transform-flow-strip-types\": \"^6.14.0\",\n    \"babel-plugin-transform-runtime\": \"^6.15.0\",\n    \"babel-polyfill\": \"^6.13.0\",\n    \"babel-preset-es2015\": \"^6.14.0\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"css-loader\": \"^0.24.0\",\n    \"html-webpack-plugin\": \"^2.22.0\",\n    \"node-sass\": \"^3.8.0\",\n    \"postcss-loader\": \"^0.11.1\",\n    \"react-hot-loader\": \"^3.0.0-beta.3\",\n    \"sass-loader\": \"^4.0.1\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-server\": \"^1.15.1\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.14.0\",\n    \"bootstrap\": \"^4.0.0-alpha.3\",\n    \"classnames\": \"^2.2.5\",\n    \"history\": \"^3.2.1\",\n    \"react\": \"^15.3.1\",\n    \"react-dom\": \"^15.3.1\",\n    \"react-redux\": \"^4.4.5\",\n    \"react-router\": \"^2.7.0\",\n    \"react-router-redux\": \"^4.0.5\",\n    \"redux\": \"^3.5.2\",\n    \"redux-logger\": \"^2.6.1\",\n    \"redux-thunk\": \"^2.1.0\"\n  }\n}\n. ",
    "aalpgiray": "I have edited the official boilerplate. Now everything works.\ntypescript react-redux-hot-reload\n. ",
    "pepjo": "I'm using babel and facing the same issue\n. ",
    "aweber1": "I'm using webpack and seeing similar. In my case, I have a component with file name AppMain.js and a reducer elsewhere in the codebase with file name AppMain.js. These two files do not import or reference each other in any way, they just share the same name.\nThanks @tanguylebarzic for the fix!\n. ",
    "shikelong": "I use the webpack v1 and react-hot-loader v3. \nNow I have also encountered this problem. I want to know how you solve this problem? Thank you\u3002:)\n. Thank you. I will try it.\n. Thank you. I will try your method.\n. It no work.  \n``` js\nentry: {\n    index: [\n      'react-hot-loader/patch',\n      'webpack-dev-server/client?http://localhost:3001',\n      'webpack/hot/only-dev-server',\n      appConfig.entry\n    ],\n    vendor: vendorPackages\n  },\n```\n. ",
    "sir-marc": "// for hot reloading\nif (module.hot) {\n    module.hot.accept();\n}\nin the index.js  did it for me.\nSo it looks something like this:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Perf from 'react-addons-perf';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n// for hot reloading\nif (module.hot) {\n    module.hot.accept();\n}\nwindow.Perf = Perf;\nReactDOM.render(\n    \n\n, document.getElementById('root'));\n```\n. In the meantime I changed a lot: \nwebpack config:\nentry: {\n        app: './src/js/index.js',\n    },\n       devServer: {\n        port: 8090,\n        hot: true,\n        inline: true,\n        publicPath: '/',\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js$/,\n                loader: 'babel',\n                exclude: /node_modules/,\n            },\n        ],\n    },\n       plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n.babelrc:\n{\n    \"presets\": [\"es2015\", \"react\"],\n    \"plugins\": [\n        \"transform-object-rest-spread\",\n        \"transform-decorators-legacy\",\n        \"transform-class-properties\",\n        \"react-hot-loader/babel\"\n    ],\n}\nI moved the babel queries to the babelrc file and also removed the react hot reload from the wepack entry but added it in the babelrc file.\n. @nodkz So if i have @connect decorator, I can't use hotreload?\n. ",
    "agupta1989": "@calesce link is dead.. can you please update it ?\n. ",
    "StalkAlex": "@agupta1989 here's new link https://github.com/gaearon/react-hot-loader/tree/next/docs. Just change branch to next and it's within docs folder.. ",
    "nodkz": "But your problem that you made wrong configs see boilerplate branch NEXT:\njs\nimport { AppContainer } from 'react-hot-loader';\n...\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    // If you use Webpack 2 in ES modules mode, you can\n    // use <App /> here rather than require() a <NextApp />.\n    const NextApp = require('./App').default;\n    ReactDOM.render(\n      <AppContainer>\n         <NextApp />\n      </AppContainer>,\n      rootEl\n    );\n  });\n}\nAppContainer is required\nif (module.hot) { is required\nWithout them  react-hot-loader v3 beta does not work.\nAlso exists another working example https://github.com/nodkz/react-webpack-babel-hotreload-example\n. If you use decorators (eg. @withStyles) and transform-decorators-legacy, then state in components will be cleared with every update. \nComponents without decorators updates as expected, without nullifying the state.\n. @sir-marc You may use hot-reload. But your component will be totally reloaded and you loose its state.\nI can not confirm this with @connect, because I'm not using Redux. \nBut if your component losing state after hot update, then you know that problem with decorator now.\nIssue about decorators problem: https://github.com/gaearon/react-hot-loader/issues/279\n. ",
    "fkrauthan": "I have that module.hot code but I still get that it needs to do a full reload. I compared my code with the example code and from a config perspective there is no difference.\n. Could it be because I use JSX for my route config instead of the JSON Object format? Is that not supported at the moment (react-router)?\n. The weird thing is the log shows me a bundle id path but the root components ID is not listed. I will play a bit more and then publish my test project and open a new ticket.\n. @calesce I know this project is not build as a simple project this is a boilerplate for a enterprise grade react application. The re reqeuire is not needed as I use the new webpack2 with es6 modules system (There is actual comments in this project that it is not needed). In addition I've added some console.log in the hot accept and that method never gets called.\n. It's just that the module id chane that the error message displays does not contain the module id of my DevAppRoot (which is the component that is rendered). Thats why I assume that its a react hot loader issue. It somehow looses track of my Root component (maybe because of react router?)\n. But that shouldn't be a problem? I thought react router is suppose to work in this way too? The old school way of hot reloading (using the babel plugin) was working perfect for this scenario.\n. So the problem could be that my main.js file imports the routes and just passes them to my root component instead of my root component importing the routes?\n. @calesce I've pushed a new version with fixes (and a shrinkwrap file to make sure that the dependencies are going to be the same). I found out that not my module.hot.accept('./components/DevAppRoot', () => { gets called but instead if I add a module.hot.accept('../common/routes/create', () => { that handler gets called (that file assembles my route config). Is that the intended behaviour? Do i need to re render the application if my route file gets changed?\nEdit\nI just tried re-rendering my app within that callback but my output just changes to:\n[HMR] Waiting for update signal from WDS...\napp-e7eec7c\u2026.js:39705 [WDS] Hot Module Replacement enabled.\n2app-e7eec7c\u2026.js:39705 [WDS] App updated. Recompiling...\napp-e7eec7c\u2026.js:39705 [WDS] App hot update...\napp-e7eec7c\u2026.js:39871 [HMR] Checking for updates on the server...\napp-e7eec7c\u2026.js:39842 Ignored an error while updating module 517 (accept-errored)\napp-e7eec7c\u2026.js:96808 [HMR] Updated modules:\napp-e7eec7c\u2026.js:96810 [HMR]  - 533\napp-e7eec7c\u2026.js:96810 [HMR]  - 538\napp-e7eec7c\u2026.js:96816 [HMR] Consider using the NamedModulesPlugin for module names.\napp-e7eec7c\u2026.js:39852 [HMR] App is up to date.\nBut the component itself is still showing the old content.\n. @sylhero so your solution was to define the app.jsx plus your actual index.jsx in webpack? Instead of just the index.jsx (which in my opinion should be enough?)\n. I have to give it a try later next week. Will update this ticket as soon as possible. We could also close it for now and I just comment on here in case it still is an issue?. I just updated my code to use webpack 2.2.1 and webpack-dev-server 2.4.1\nAnd it looks like the step into the right direction. Now I get: react-router] You cannot change <Router routes>; it will be ignored\nMy current reload code looks like this:\n```js\n// Render with devtools if enabled\nif (DEVTOOLS && !window.devToolsExtension) {\n    const DevAppRoot = require(\"./components/DevAppRoot\").default;\n    ReactDOM.render(\n        \n\n,\n        dest\n    );\n// Listen for hot replacement\nif (module.hot) {\n    module.hot.accept(['./components/DevAppRoot', '../common/routes/create'], () => {\n        const NewDevAppRoot = require(\"./components/DevAppRoot\").default;\n\n        ReactDOM.render(\n            <AppContainer errorReporter={errorReporter}>\n                <NewDevAppRoot store={store} history={history} routerRender={applyRouterMiddleware(useScroll())} routes={createRoutes(store, reducerRegistry)} />\n            </AppContainer>,\n            dest\n        );\n    });\n}\n\n}\n```. But interesting enough it still seems to hot reload correctly regardless of that warning. So i guess this ticket can be closed. I might gonna switch to the new react router anyways.. ",
    "arcanis": "I also have this error. In order to have the actual error, I have to put a breakpoint on the following line:\njs\nreturn React.createElement(this.props.errorReporter, { error: error });\nIt seems that errorReporter is null for some reason, and we have to inspect the error variable manually.\n. ",
    "dreyks": "@calesce the issue is fixed in 3.0.0-beta.3\n. ",
    "nylen": "Confirmed that upgrading react-hot-loader fixed the issue for me.  Thanks for fixing it!\n. ",
    "hieuhlc": "@tsaiDavid I used react-hot-loader 1.3.0 and webpack ^1.9.11. I haven't tried RHL3.\n. ",
    "sandor11": "@calesce Hi, I have a similar issue. I have created a repo with the bare minimum. I have setup https://bitbucket.org/sandoz_dev/react-hmr-boilerplate.git\nThe master branch, works pretty well, but HMR still can be intermittent. I have also created a branch with-sass-loader where the, update recognized -> changes not reflected problem is pretty much constant.\nOne thing I noticed, is in the dev tools, new style sheets are appearing in the sources tab under the  webpack:// > . > components folder, but the <style> tags are only sometimes replaced. \nOther environment stuff\n- Windows 10\n- Node 7.5.0\nAny help would be appreciated. It is so close to being perfect, HMR will be a great step forward for my workflow. \nIf you need any further info, just let me know.. To follow up...\nI have just found out it was an issue with my IDE (WebStorm) as referenced here https://webpack.github.io/docs/troubleshooting.html#file-saves-in-webstorm-don-t-trigger-the-watcher\nEverything is work as expected using the code from my previous comment.. ",
    "robbporto": "Similar problem here. When I edit the parent component, everything works fine. When I edit the child component, the code doesn't compiles.\nI'm using Webstorm.. Thanks for the answer. The problem is with the Webstorm IDE. I increased the inotify size (just like the IDE warned me) and everything worked out fine.. ",
    "ozum": "@tsaiDavid, without .default same result. Also I'm not using hot flag in CLI, I use node server.js.\n. @rosscourt, @calesce, yes, that appears to be the problem. Thanks @rosscourt. \n. ",
    "rosscourt": "@ozum \nI ran your code to see if your error was the same as one I am experiencing (it wasn't \ud83d\ude1e) but I managed to spot the error in your code at least.\nIn your \"index.jsx\" file, this line:\njavascript\nconst NextApp = require('./components/App').default;\nshould be after this line:\njavascript\nmodule.hot.accept('./components/App', () => {\nnot before it.\nHope that helps solve your issue.\n. ",
    "stevenjob": "Duplicate of #326 \n. ",
    "damonmaria": "The code posted at the top of the issue is react-hot-loader code. So it tries to access settings which if they have not been initialised (which it appears they are not in Cordova builds) will cause a TypeError. \n. Apologies. You are totally correct. I should be posting to the other project. \n. ",
    "hank7444": "@elado  thank you! I have a same problem too!\n. ",
    "Ciantic": "I even removed react-router from my app, now my app is just two modules, and I still get these: Ignored an update to unaccepted module, the damnest thing is that I have another app where everything works. This is really hard to debug with the cryptic numbers just there.\n. I want to add a one thing: There should be a way to detect and guide the users to do the setting up right:\n```\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./Containers/App\";\nimport { AppContainer } from \"react-hot-loader\";\nconst rootEl = document.getElementById(\"root\");\nrender(\n\n, rootEl);\nif (module.hot) {\n    module.hot.accept(\"./Containers/App\", () => {\n        // If you use Webpack 2 in ES modules mode, you can\n        // use  here rather than require() a .\n        const NextApp = require(\"./Containers/App\").App;\n        render(\n            \n\n,\n            rootEl\n        );\n    });\n}\n```\nThere is so much new in there. \nI've tried react-hot-loader 3 couple of times, but it didn't guide me in anyway so I thought it was not working with my setup yet. It turned out to be that I just needed to throw this new stuff in there.\nIdeally it should somehow detect that user is still trying to use the old way: \n```\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./Containers/App\";\nconst rootEl = document.getElementById(\"root\");\nrender(\n\n, rootEl);\n```\nWhich just doesn't work anymore.\n. I had this in the package.json \"react-hot-loader\": \"next\" but if one then run yarn upgrade react-hot-loader it changes the package.json version to the 1.3.1.\nIn order to install right version I had to upgrade more verbosely: yarn upgrade react-hot-loader@next. Something to keep in mind when upgrading.. ",
    "ElForastero": "Hi there. Trying to setup from scratch I've got one problem - HMR logs is OK in console, but browser content doesn't updates.\nhttps://cl.ly/212B1i3G420N\nI'm runing webpack-dev-server CLI with --hot --inline options.\n. ",
    "sylhero": "trying to separate vendor and app in the entry everything is fine but the reload.\n`entry: {\napp: ['./src/client/app/main.jsx',\n        'react-hot-loader/patch',\n        'webpack-dev-server/client?http://localhost:3000',\n        'webpack/hot/only-dev-server'\n    ],\n    vendor: ['./src/client/app/vendor.jsx',\n        'react-hot-loader/patch',\n        'webpack-dev-server/client?http://localhost:3000',\n        'webpack/hot/only-dev-server'\n    ]\n}\n[WDS] App updated. Recompiling...\nclient?843a:38 [WDS] App hot update...\ndev-server.js?b7b7:45 [HMR] Checking for updates on the server...\nlog-apply-result.js?d762:20[HMR] Updated modules:\nlog-apply-result.js?d762:22[HMR]  - ./node_modules/raw-loader/index.js!./src/client/app/widgets/index.html\nlog-apply-result.js?d762:22[HMR]  - ./src/client/app/widgets/main.jsx\nlog-apply-result.js?d762:22[HMR]  - 0\ndev-server.js?b7b7:27 [HMR] App is up to date.\nthe only working combination I did is\nentry: [\n        'react-hot-loader/patch',\n        './src/client/app/main.jsx',\n        './src/client/app/vendor.jsx'\n    ]\n. @calesce thanks for your reply! I just tried your suggestion but unfortunately I got the same problem everything is fine it just doesn't reload\n. @calesce after some experiments I finally found something that works for me now:\nentry: {\napp: [\n        'react-hot-loader/patch',\n        './src/client/app/widgets/app.jsx',\n        './src/client/app/widgets/index.jsx'\n    ],\n    vendor: [\n        'react-hot-loader/patch',\n        './src/client/app/widgets/vendor.jsx'\n    ]\n}\nI deleted node_modules and update my npm to 4.0.1 now it works. Thanks for your help!\n. @calesce basically I followed the solution in this post https://github.com/gaearon/react-hot-loader/issues/243 and for now I don't see the need to add webpack-dev-server stuff. Maybe I need to try more to confirm that\n. @fkrauthan you are right. eventually I may merge them together. Now, it's just for testing multiple entrance + commonchunckplugin. \n. @wkwiatek thanks for replying me. I tried your suggestion but still not working. I can not provide a repo but it's easy to reproduce.. @HeyHugo  thanks for the solution!. ",
    "gustavohenke": "I want to say that I noticed exactly the same as @ctrlplusb:\n\n[...] It requires you to update a component twice and then only shows the previous update. Every subsequent update hot reloads the previous update.\n\nIf I swap System.import with require, then the hot reloading works just fine.. ",
    "pgsandstrom": "I solved a similar problem.\nI had the issue with hot.module.accept not triggering when I switched to webpack2. I simply saw nothing relating to HMR in the console, but WDS printed the normal stuff about \"App updated. Recompiling...\"\nI had to simply update to webpack2:\nnpm install webpack-dev-server@beta --save-dev\nPreviously I was running ^1.16.2. Perhaps someone else here has done the same mistake.. ",
    "amerker": "@pgsandstrom That was a most excellent tip and cleared up many days of headache. Thanks!. ",
    "jquintozamora": "@pgsandstrom thanks!! In fact, since yesterday you can do just npm install webpack-dev-server --save-dev and will be installing version 2.2.1. . ",
    "crisu83": "@pgsandstrom I had been wresting with this issue on and off for a couple of days now. Thanks for the tip, after I switched to webpack-dev-server@beta everything started to work.\nEDIT: I actually upgraded to webpack-dev-server@2.3 based on @jquintozamora's comment and everything still works fine.. ",
    "joriskoris": "@ElForastero did you figure it out?. just noticed it is the same as https://github.com/gaearon/react-hot-loader/issues/666 so can probably be closed. ",
    "songtao1": "Try to perform NPM upgrade and reinstall node-modules.  npm install -g npm. ",
    "Industrial": "Hi!\nthis is the code/line it breaks on; https://github.com/sytac/resumator/blob/e2d1cdf7f528f121bdf02f7f1d36395e053bf45d/services/app/src/client/js/app.js\nTo reproduce:\n- clone\n- docker-compose up --build\n- open http://0.0.0.0:3000\n. I've fixed this issue for my project by not using babel-polyfill in the application entry file and instead using the transform-runtime babel plugin.\n. ",
    "xuqingkuang": "@calesce Yes, I enabled NODE_ENV=production in webpack config.\nAfter checking I found there are a lot of __REACT_HOT_LOADER__.register() calling in built file, there's a test project[1], please take a look.\n[1] https://github.com/xuqingkuang/react-redux-boilerplate\nBTW: In the test project still using beta 1, but the behavior as same as beta 3.\n.  @calesce Good, thanks a lot!\n. ",
    "iam4x": "Was hard to find the culprit, but @pwhipp is right: \nERROR in ./modules/inputs/order-stock-items/index.jsx\nModule parse failed: /Users/iam4x/save/ivi-front/node_modules/babel-loader/index.js?{\"presets\":[\"react\",[\"es2015\",{\"modules\":false}],\"stage-0\"],\"plugins\":[\"import-glob\",\"transform-async-to-generator\",\"transform-decorators-legacy\",\"transform-runtime\",\"lodash\",\"react-hot-loader/babel\",\"typecheck\"]}!/Users/iam4x/save/ivi-front/modules/inputs/order-stock-items/index.jsx The keyword 'await' is reserved (121:8)\nYou may need an appropriate loader to handle this file type.\n|         var url = STOCKS_API + '/stock_items/' + this.pendingItemTrackingCode;\n|         var data = { location_type: 'Order', location_id: id };\n|         await axios({ method: 'put', url: url, data: data });\n|         await this.refreshOrder();\n|       } catch (error) {\n @ ./modules/inputs/index.jsx 40:0-50\n @ ./modules/filters/index.jsx\n @ ./modules/ivi-resource/list/index.jsx\n @ ./modules/ivi-resource/index.jsx\n @ ./app/savers/savers.routes.jsx\n @ ./core/router/index.jsx\n @ ./core/index.jsx\n @ multi app\nBut it happens only with react-hot-loader@3.0.0-beta.4\n. ",
    "maestroh": "Here's an example. I tried to keep it as simple as I could.\nhttps://github.com/maestroh/rhl_error_362\nThanks for looking into it.\n. You may need to get the typescript definition files. Try this:\nnpm install typings --global\ntypings install\n. That fixes the problem. It looks like you made two main changes: wrapping my root component, <Home/> with the <AppContainer> component & adding the module.hot.accept bits. I seem to have overlooked that code in the boilerplate. Could you point me to the docs that could explain why you had to make those changes?\n. @calesce Thanks for the help\n. ",
    "vivaxy": "@calesce Thanks.\nSeems react-hot-loader@3.0 is a little bit difficult to use. Maybe I'll consider switch back to 1.0.\n. It worked fine after I removed react-router.. @nikolaipaul It's not fixed. I removed react-router just to find out what part causes this problem.\nIt seems this bug is regarding to react-router hot reload support. I have added hack code to accept router hot reload. But this doesn't work after my upgrade to webpack@2.x.\n. @bjudson I tried, It's still not working. I've noticed that repo does not use react-router.\nAnd if you want to fix react-router warning, you might have to try this.\n. It just worked after my several updates.\nI still didn't work out why it worked.. ",
    "awaw00": "@calesce \nThanks for your reply.\nI've created a example repo here, and I found if I used react-router as a external library(use script tag), when components under my routes has changed, react-hot-loader couldn't replace the module exactly.\nSorry for my poor english.\n. ",
    "pedronauck": "Is happening the same error here \ud83d\ude10 When we put react as external script, hot loader it's getting confusing and can't reload files... We're following the same structure above.\nIn our case, we need react as externals because webpack is bundling multiple instancies of react, and we get a reference error, so we need it as a external. It's so funny, because this just happened when we put our projects in a monorepo and set the CommonsChunkPlugin.\n. I just set pureSFC and everything works fine, this can be a problem for other pieces @theKashey?\njs\nsetConfig({ pureSFC: true }). I tried a lot of setups on docz, but since 4.6.1 the hmr with hooks doesn't happening \ud83d\ude15 \nWhen I put webpack patch I got this error:\n(node:67190) UnhandledPromiseRejectionWarning: Error: You must provide the URL of lib/mappings.wasm by calling SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) before using SourceMapConsumer\n    at readWasm (/Volumes/Projects/dev/iter/components/node_modules/react-hot-loader/node_modules/source-map/lib/read-wasm.js:8:13)\n    at wasm (/Volumes/Projects/dev/iter/components/node_modules/react-hot-loader/node_modules/source-map/lib/wasm.js:25:16)\n    at BasicSourceMapConsumer.then.that (/Volumes/Projects/dev/iter/components/node_modules/react-hot-loader/node_modules/source-map/lib/source-map-consumer.js:264:14)\n    at <anonymous>\n(node:67190) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n(node:67190) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nAnd when I try to use setConfig with @hot-loader/react-dom I got this error:\n\nSo, without any config it's doesn't happen at all \ud83d\ude16 . ",
    "adamyonk": "Ugh, yeah. Thanks for the tip.\nDon't:\nwebpack --define process.env.NODE_ENV='\\\"production\\\"'\nDo:\nNODE_ENV=production webpack\n. ",
    "BrunoQuaresma": "Thanks @calesce !\n. ",
    "SDSLeon": "webpack 2, 3.0.0-beta.5 'this' context lost in async arrow functions;\nname = async () => {\n    this is undefined;\n}\n. ",
    "bochen2014": "@calesce  like you said , if we use webpack-hot-middleware and webpack-dev-middleware,  yes we will have a nice error box popping out in the case of syntax error -- I have already got it work with my project.. But do we still need RHL in such case?\nI thought RHL only works with WDS (according to tutorials), and the whole idea is to replace webpack-hot-middleware & webpack-dev-middleware and providing better experience. Please correct me if i'm wrong\n. btw, the Bare minimum hot loader example is too minimum ,, I mean, it's quite rare that <App /> is at the top of dom tree, in most cases, it's wrapped by <router> or redux <provider> .We may not want to include Router/Redux into hot loader, as they are unlikely to change. Also, the store is a bit tricky, we don't want to create a new store instance on every re-render (which I did, and then corrected the mistake following  https://github.com/reactjs/react-redux/issues/259 ). \nAnyway, not sure if you want to flesh it out a bit, maybe just make it work with \n<Wrapper>\n  <AppContainer>\n       <App />\n</AppContainer>\n</Wrapper>\nwhich is what I was doing in my opening question. I'm happy to make a pull request if you think is worth it. thanks\n. @calesce  thanks for answering my question.\nSo you are saying RHL can't handle syntax errors, and if we want handle that, we have to switch to webpack-dev-middleware with webpack-hot-middleware. Please correct me if I'm wrong. \nI'm actually explicitly calling react-redbox to display syntax error rather than relying on RHL to handle it automatically (plus, I don't think webpack-hot-middleware can handle syntax error by itself, you need to code for it explicitly as well). so you comments on render , update is not closely relevant to the question maybe?\ntry{\n  // host re-render\n}\ncatch(error){\n     // hot re-render failed. display a nice error page like inwebpack-hot-middleware \n       const RedBox = require('redbox-react')\n       ReactDOM.render(<RedBox error={error} className=\"redbox\"/>, dest)\n    }\nabove code doesn't work on RHL , but it worked on webpack-dev-middlweare + webpack-hot-middleware. However,  If I replace <RedBox > with something like <div>oops.. syntax error</div> I can see my simple error page using RHL + WDS. \nlast question, can I use RHL with webpck-dev-middleware + webpack-hot-middleware? my understanding is RHL only works with WDS. but correct me if my understanding is wrong\n. thanks @theKashey  you are absolutely right in this case. \nMy previous hot decorated module only  points to the root of router;\nthere is another path which is rooted from my redux store configuration which is parallel to my router root;\nI've add the accept statement in src/index.js and it works fine now. \nthanks again for your help!\n. ",
    "dcurletti": "Yup, that sounds exactly what is happening. \nThanks for the link and for responding so quickly.\n. ",
    "loganfsmyth": "Glad it worked out!\n. I'm happy to try to help, but it would go a long way if someone could spell out what this wrapper is doing, since I'm not familiar with the internals of the hot loader.\nWhat ends up running at the end, and why isn't _this5 already available in the outer scope?\nCan could in theory generate any number of _this variables, dependent only on how many arrow functions and this references you have in a single file.. It seems like, along with the current behavior of injecting\n [REGENERATE_METHOD](key, code){\n   this[key] = eval(code);\n }\n\nYou could special-case if the class has a constructor, also inject\n this[REGENERATE_METHOD] = function(key, code) {\n   this[key] = eval(code);\n };\n\nin the constructor? Then you could use that instead.\nAs you said, there are a lot of edge cases in approaches like this, but I feel like the logic in here is already a little scary to me, so it's not much worse with this :P \n . Attaching metadata to nodes like that can definitely be dangerous since any plugin could replace any node, and could well do so in a minor version. I haven't looked closely at this codebase to see which plugin change could have been applicable here, though. We'd be happy to give suggestions if you want to chat with folks in Babel's slack, or here if need be.. Perfect, thanks @villesau.\n\n@theKashey Here's the issue. Because of the way babel-plugin-rewire works, it can actually insert an ExportDefaultDeclaration during Program#exit, which means that your delete line will have removed the array by the time you push into it.\nThis ordering could potentially have caused this in Babel 6 too, so I'm not sure why it wasn't throwing before.\nIt might be enough to change to\n// delete state[REGISTRATIONS]; // eslint-disable-line no-param-reassign\nstate[REGISTRATIONS] = [];. Is this new behavior still throwing about push on null? Is there an example reproduction repo so I verify this behavior? I'm happy to help diagnose why the old solution didn't work. It seems like it should work.. ",
    "jkomyno": "Maybe you could do something like this:\n``` javascript\nimport {createStore} from 'redux';\nimport rootReducer from '../reducers';\nexport default function configureStore(initialState) {\n  const store = createStore(rootReducer, initialState);\nif(module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers/index').default;\n  store.replaceReducer(nextReducer);\n});\n\n}\nreturn store;\n}\n```\n. ",
    "wellyshen": "Hi @jkomyno I already do it but seems it doesn't work.\nhere's my configureStore :\n``` javascript\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nexport default (initialState) => {\n  const store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(thunk),\n    DEV && typeof window === 'object' && typeof window.devToolsExtension !== 'undefined' ?\n      window.devToolsExtension() : f => f\n  ));\nif (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(require('./reducers').default);\n    });\n  }\nreturn store;\n};\n```\nhere's my client.js :\n``` javascript\nimport React from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { Provider } from 'react-redux';\nimport { Router, browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { fromJS } from 'immutable';\nimport configureStore from './configureStore';\nconst initialState = fromJS(window.INITIAL_STATE);  // redux-immutable only allow immutable obj\nconst store = configureStore(initialState);\nconst history = syncHistoryWithStore(browserHistory, store, {\n  selectLocationState: state => state.get('routing').toJS(),\n});\nconst mountNode = document.getElementById('react-view');\nconst renderApp = () => {\n  const routes = require('./routes').default;\nrender(\n    \n\n\n\n,\n    mountNode\n  );\n};\n// Enable hot reload by react-hot-loader\nif (module.hot) {\n  const reRenderApp = () => {\n    try {\n      renderApp();\n    } catch (error) {\n      const RedBox = require('redbox-react').default;\n  render(<RedBox error={error} />, mountNode);\n}\n\n};\nmodule.hot.accept('./routes', () => {\n    // Prevent the hot reloading error from react-router\n    unmountComponentAtNode(mountNode);\n    reRenderApp();\n  });\n}\nrenderApp();\n```\nhere's my server.js :\n``` javascript\nimport path from 'path';\nimport morgan from 'morgan';\nimport express from 'express';\nimport compression from 'compression';\nimport helmet from 'helmet';\nimport favicon from 'serve-favicon';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Provider } from 'react-redux';\nimport { match, RouterContext } from 'react-router';\nimport routes from './routes';\nimport configureStore from './configureStore';\nimport renderHtmlPage from './renderHtmlPage';\nimport config from './config';\nconst app = express();\n// Using helmet to secure Express with various HTTP headers\napp.use(helmet());\n// Compress all requests\napp.use(compression());\n// Use morgan for http request debug (only show error)\napp.use(morgan('dev', { skip: (req, res) => res.statusCode < 400 }));\napp.use(favicon(path.join(__dirname, '../public/favicon.ico')));\napp.use(express.static(path.join(__dirname, '../public')));\n// Run express as webpack dev server\nif (DEV) {\n  const webpack = require('webpack');\n  const webpackConfig = require('../tools/webpack');\nconst compiler = webpack(webpackConfig);\napp.use(require('webpack-dev-middleware')(compiler, {\n    publicPath: webpackConfig.output.publicPath,\n    noInfo: true,\n    hot: true,\n    stats: { colors: true },\n  }));\napp.use(require('webpack-hot-middleware')(compiler));\n}\n// Render content\napp.get('*', (req, res) => {\n  if (DEV) {\n    webpackIsomorphicTools.refresh();\n  }\nmatch({ routes, location: req.url }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      res.status(500).send(error.message);\n    } else if (redirectLocation) {\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n    } else if (!renderProps) {\n      res.sendStatus(404);\n    } else {\n      const store = configureStore();\n  const promises = renderProps.components\n    .filter(component => component.fetchData)\n    .map(component => component.fetchData(store.dispatch, renderProps.params));\n\n  Promise.all(promises)\n    .then(() => {\n      const content = renderToString(\n        <Provider store={store}>\n          <RouterContext {...renderProps} />\n        </Provider>\n      );\n      const initialState = store.getState();\n\n      res.status(200).send(renderHtmlPage(content, initialState));\n    });\n}\n\n});\n});\nif (config.port) {\n  app.listen(config.port, config.host, (err) => {\n    if (err) console.error(==> \ud83d\ude2d  OMG!!! ${err});\nconsole.info(`==> \ud83c\udf0e  Listening at http://${config.host}:${config.port}`);\n\n});\n} else {\n  console.error('==> \ud83d\ude2d  OMG!!! No PORT environment variable has been specified');\n}\n```\n. By the way when I modify my reducer the HMR also triggered, but nothing changed.\nHere's the console :\n\n. Hi @calesce \nSorry I am confused, why reducer can't be hot reloaded through React Hot Loader? If it can't, why the following code still be implemented :\n``` javascript\nimport {createStore} from 'redux';\nimport rootReducer from '../reducers';\nexport default function configureStore(initialState) {\n  const store = createStore(rootReducer, initialState);\nif(module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers/index').default;\n  store.replaceReducer(nextReducer);\n});\n\n}\nreturn store;\n}\n```\nBy the way, you need to npm run build at the first time to try my repo.\n. @calesce \nIf I use mock data for AN_USER_FETCHED then I change the mock data, it won't be updated on view render, and I even need to restart the server that the changed mock data will be updated finally. Does it expected?\n. @calesce Really? after you change the mock data, does it update on browser view? My case is after I change the mock data, it was hot reloaded but it doesn't updated on browser view. I am not sure if it's expected or not.\n. @calesce Sorry for my un-clear describing of this problem. If you refresh the UserInfo page by the browser's refresh button then the changing the mock data won't be hot reloaded. So I'm wondering if it's expected or not? Or any great idea to make reducer can be hot reloaded when it's an initialState which sent from server side.\n. Hi @calesce I have solve this problem thank you for your help \n. Hi @calesce \nIf I prevent the double data fetch action from client side (componentDidMount) of the initial loading page, the reducer won't be updated, the problem in my action creator.\nOne of my container :\n``` javascript\n  // fetch action for server and client\n  static fetchData(dispatch) {\n    return Promise.all([\n      dispatch(action.fetchUsersIfNeeded()),\n    ]);\n  }\n// fetch data on client again\n  componentDidMount() {\n    const { dispatch } = this.props;\nHome.fetchData(dispatch);\n\n}\n```\nMy action.js :\n``` javascript\nexport const USERS_INVALID = 'USERS_INVALID';\nexport const USERS_FETCHING = 'USERS_FETCHING';\nexport const USERS_FETCHED = 'USERS_FETCHED';\nexport const USERS_FETCH_FAILED = 'USERS_FETCH_FAILED';\nconst API_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const fetchUsers = axios => (dispatch) => {\n  dispatch({ type: USERS_FETCHING });\nreturn axios.get(API_URL)\n    .then((res) => {\n      dispatch({ type: USERS_FETCHED, data: res.data });\n    })\n    .catch((err) => {\n      dispatch({ type: USERS_FETCH_FAILED, err });\n    });\n};\n// If add this checkout reducer won't be updated\nconst shouldFetchUsers = (state) => {\n  const users = state.get('users');\nif (!users.get('list') ||\n      users.readyState === USERS_INVALID ||\n      users.readyState === USERS_FETCH_FAILED) return true;\nreturn false;\n};\nexport function fetchUsersIfNeeded() {\n  return (dispatch, getState, axios) => {\n    if (shouldFetchUsers(getState())) {\n      return dispatch(fetchUsers(axios));\n    }\nreturn null;\n\n};\n}\n```\nFor this case, do you have any suggestion?\n. OKAY, thanks you\n. @theKashey I'm pretty sure that I have set up RHL according to the document. Let me help you how to reproduce this issue:\n1. git clone https://github.com/wellyshen/react-cool-starter.git\n2. yarn install\n3. yarn build\n4. yarn start\n5. Edit ./src/components/UserList/index.js\nBTW, use AppContainer instead of hot helper also cause this issue.. Excepting nodemon (use node directly). The sub-components still can't be hot reload (webpack will re-bundle for the breaking). Is this related with RHL?. If I wrap sub-components with hot helper. This issue will be solved. How to explain it?. OK, I solved this issue by:\n Adjust nodemon watch files.\n Because I'm using react-router-config to handle my routes, so I use AppContainer with webpack hot module replacement for my routes.js file.\n@theKashey Thank you for your time.. @ianks Here you are.. ",
    "rogersp": "I'm experiencing the same state reset behavior, when calling react-redux connect() on the component returned inside my higher order component function (this line).\nInterestingly, the state does not reset when using the master branch of react-hot-boilerplate.\nRepro examples:\n- State IS preserved (base: react-hot-boilerplate/master): https://github.com/rogersp/rhb-redux-hoc/tree/master\n- State is NOT preserved (base:react-hot-boilerplate/next): https://github.com/rogersp/rhb-redux-hoc/tree/next\nTo clarify, the state is maintained for anything that comes from the redux store, but any state the wrapped component tracks internally is reset on hot reload.. As a follow-up and presumably for the same reason, internal state is also lost for anything wrapped with redux-form.. ",
    "markpradhan": "@rogersp have the same issue\nReturning an unconnected component that calls your hoc stores the return value and always returns that value instead is a nice workaround.\n```\nconst devExport = (...args) =>\n  class ConnectedHOCHelper extends PureComponent {\n    constructor(props, context) {\n      super(props, context)\n      this.C = YOURACTUALHOC(...args)\n    }\nrender() {\n  const { C } = this\n\n  return <C {...this.props} />\n}\n\n}\nexport default (isDevEnv === true ? devExport : YOURACTUALHOC)\n```. ",
    "NSLS": "The issue was resolved by removing the webpack-module-hot-accept plugin and restoring the original setup of the react-hot-loader v3, so in case your app doesn't reload after the upgrade while your configuration is fully correct - check for this plugin in your webpack's config.\nClosing the issue.\n. Got it. Thanks.\n. ",
    "xianshannan": "Here is the demo ,https://github.com/sn-demo/webpack-react-demo(see demo10).When i add a ui library\uff0cit spend nearly 30s to rebuid!And React Hot Loader3  is failed!\n. The libray i add is ant-design .\n. I was wrong.I forget to set NODE_ENV to development.It's slow because of using UglifyJsPlugin!\n. I put react-hot-loader/patch in the entry, but it's no use when using require.ensure.See Demo 13 again.\n. ",
    "Rokt33r": "I want to help RHLv3. Could you give me some points where should I start?. I want to try. Where should I start?. This is what I need. Thank you so much! I'll give a shot soon. . @calesce \nI need some help... I've confronted two problems.\nHow to visit AssignmentExpression inside of constructor?\nI found the way to find constructor. but I have to check every AssignmentExpression.\nI'm now can parse this style just by iterating ExpressionStatement.\njs\nclass Foo {\n  constructor () {\n    this.onClick = (e) => e.target.value\n  }\n}\nBut, I can not parse the following... because I have to check all children...\njs\nclass Foo {\n  constructor () {\n    if (true) {\n      this.onClick = (e) => e.target.value\n    }\n  }\n}\nHow should I write the test?\nDoes it look good? Also, how should I check it actually work?\n```js\n// actual.js\nclass Foo {\n  constructor () {\n    this.onClick = (e) => e.target.value\n  }\n}\n// expected.js\nclass Foo {\n  constructor() {\n    this.onClick = (...params) => this.onClick__REACT_HOT_LOADER(...params);\n  }\nonClick__REACT_HOT_LOADER(e) {\n    return e.target.value;\n  }\n}\n;\nvar _temp = function () {\n  if (typeof REACT_HOT_LOADER === 'undefined') {\n    return;\n  }\nREACT_HOT_LOADER.register(Foo, \"Foo\", FILENAME);\n}();\n;\n```\n. I think I found the solution of the first question.\njs\n{\n  ClassMethod (path) {\n    path.traverse({\n      AssignmentExpression(path) {\n        // ...\n      }\n    });\n  }\n}. @Razinsky \nThere is a hacky solution. https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-211504531\nAnd, keep watching this issue also. https://github.com/gaearon/react-hot-loader/issues/249. I confirmed it works.\n\n. Done! Please review this again. @calesce . I'll do gladly. But, I think I can do after the 2nd week of the next month.(I have to finish my graduate thesis.) Could you wait about 3 weeks?. ",
    "mikeengland": "I am experiencing the same issue. I posted an issue on webpack-dev-server as you can see above, but I am still unsure which project is the culprit here. https://github.com/webpack/webpack-dev-server/issues/655\n. ",
    "aoshi321": "Hi\nI've tried the example you have linked to. That also has the same problem. I edited one of the components. Added a syntax error. Any changes after that are no longer picked up until you refresh.\nthanks\n. Added the following error\nclass Home extends Component {\n  render() { \u00a3$%\u00a3$%\u00a3$\n    return Hello, world;\n  }\n}\n. ",
    "danielarias123": "I am also getting this error, when I remove react-hot-loader, babel compiles as expected\n.  Oddly enough, removing the react-hot-loader/babel plugin from my .babelrc file fixed this problem. \nI no longer get the invalid this binding problem on async arrow functions and my react modules hot reload as expected.\n. @calesce hmmm that's weird because both stateless functions that return jsx and stateful React classes are hot reloading for me when the plugin is removed.\ud83e\udd14\n. ",
    "wuchu": "It should be a troubling bug to me, too.\n. ",
    "valerymercury": "Is it possible to disable hot loader for component/method that fails?\n. ",
    "wesm87": "I've found that the order of the plugins in your .babelrc makes a huge difference. For example, the following produces this error:\nplugins: [\n  'react-hot-loader/babel',\n  'transform-regenerator',\n]\nThis also gives the error:\nplugins: [\n  'transform-regenerator',\n],\nenv: {\n  development: {\n    plugins: [\n      'react-hot-loader/babel',\n    ],\n  },\n}\nHowever, this works fine:\nplugins: [\n  'transform-regenerator',\n  'react-hot-loader/babel',\n]. ",
    "andtos90": "@mqklin same here, have you found a workaround?. ",
    "LeoLeBras": "This doesn't work:\njs\nclass App extends React.Component {\n  myAsyncMethod = async () => {\n    return new Promise((resolve) => resolve(true))\n  }\n  render() {\n    return (\n      <Button onPress={this.myAsyncMethod} />\n    )\n  }\n}\nHowever, this works fine with:\njs\nclass App extends React.Component {\n  async myAsyncMethod() {\n    return new Promise((resolve) => resolve(true))\n  }\n  render() {\n    return (\n      <Button onPress={() => this.myAsyncMethod()} />\n    )\n  }\n}. ",
    "Dilatorily": "I found another workaround:\njavascript\nclass App extends React.Component {\n  myAsyncMethod = () => async () => {\n    return new Promise((resolve) => resolve(true))\n  }\n  render() {\n    return (\n      <Button onPress={this.myAsyncMethod()} />\n    )\n  }\n}. ",
    "FourwingsY": "I am escaping this issue with:\njavascript\nclass App extends React.Component {\n  myAsyncMethod = async () => {\n    const _ = arguments // eslint-disable-line\n    return new Promise((resolve) => resolve(true))\n  }\n  render() {\n    return (\n      <Button onPress={this.myAsyncMethod} />\n    )\n  }\n}\nor using autobind-decorator\njavascript\nclass App extends React.Component {\n  @autobind\n  async myAsyncMethod() {\n    return new Promise((resolve) => resolve(true))\n  }\n  render() {\n    return (\n      <Button onPress={this.myAsyncMethod} />\n    )\n  }\n}. ",
    "mhagmajer": "+1. ",
    "jp7carlos": "It seems that using the alternative config by removing react-hot-loader/babel from .babelrc and adding react-hot-loader/webpack to webpack.config.js works. It is not the same thing but it is good enough for me.\nSource: http://gaearon.github.io/react-hot-loader/getstarted/\n\nNote: react-hot-loader/webpack only works on exported components, whereas react-hot-loader/babel picks up all top-level variables in your files. As a workaround, with Webpack, you can export all the components whose state you want to maintain, even if they\u2019re not imported anywhere else.\n\n. ",
    "skidding": "FYI (Blindly) downgrading from 3.0.0+ to 3.0.0-beta.7 worked for me.. ",
    "GravityMsc": "some problem when upgrade react-hot-loader, in async arrow function, 'this' is undefined. \nI change foo = async () => { } to async foo() { }, and it works.. ",
    "chucksellick": "\nFYI (Blindly) downgrading from 3.0.0+ to 3.0.0-beta.7 worked for me.\n\nCan confirm also worked for me.\nThis issue in v3 (also along with #650) is super frustrating, good to hear next version will be fixing things but right now am stuck on an old version with all warnings suppressed and HMR basically not working properly -- on an otherwise very vanilla create-react-app babel config.. ",
    "Eugen-Ask": "I found a workaround that doesn't make you to change any code except the method declaration. Just wrap it in IIFE:\n```js\nclass App extends React.Component {\n  myAsyncMethod = (() => async () => {\n    return new Promise((resolve) => resolve(true))\n  })()\nrender() {\n    return (\n      \n    )\n  }\n}\n```. ",
    "esturcke": "Works as advertised now. Thanks for the quick turnaround!\n. ",
    "clarabridges": "Thank you!\n. ",
    "roebuk": "Ahhh, so we may have had a similar issue to yourself, a colleague of mine managed to get it working. From looking at your code the I've noticed the following:\nWithin your webpack.config.js make sure you have the webpack-dev-server and webpack/hot/only-dev-server after your react-hot-loader/patch\nentry: [\n  'react-hot-loader/patch',\n  'webpack-dev-server/client?http://localhost:3000',\n  'webpack/hot/only-dev-server',\n  './src/index'\n]\n. ",
    "greenfrog82": "Sorry. I have read your answer now .. Thx for your answer.\nBut, I have not resolved my question. A key point of my question is why server need react-hot-loader. (as an above error message, Cannot resolve module 'react-hot' in server code ..)\nIs this bug of react-hot-loader 1.3.0? \nAnd .. I try to your simple example here. I have downloaded you example code, installed npm package and run script. \nIt seemed to go well, But I try to change a message of 'Home' component from 'Hello' to 'Hi' and save. Then I have received error message on my chrome browser. This is as below.\n\nbrowser.js?26d3:49 Warning: [react-router] You cannot change ; it will be ignored\n\nCould you tell me answer?\n. Thx for your answer. But I have still not resolved my question despite your answer.\n\nA key point of my question is why server need react-hot-loader. (as an above error message, Cannot resolve module 'react-hot' in server code ..)\nThe only place you need to reference it is in the Webpack config.\n\nFirst, I understand above your answer. Ok, react-hot-loader module must be not placed in server side. But, My question is why when my server code build and start, it require react-hot-loader like the following image.\n\n\nThen I have received error message on my chrome browser.\nThis is a warning with React Router that you can ignore, but it still works. See discussion in #249.\n\nSecond, I understand too. But, Your code has still not worked. See the following image. I've started your code and connected your server using web browser. And I have changed text from 'Hello, world' to 'Hello, aaaa world'. Then I've received the error message through console of web browser and the contents on web browser doesn't change. So, I've told you, Your code doesn't work. \n\nThx, for your kind answer :) Please resolve my question, if you know.\n. > What version of Node/NPM are you using? Also, can you share a simple project reproducing the Cannot resolve module \"react-hot\" issue?\nOk, I'm working on my company now. And the code which occures 'Cannot resolve module \"react-hot\" issue is owned by my company. \nCould you give me a time? I will write code which can reproduce this issue, upload to my github and share with you. May be, I am able to do this work by tomorrow night.\n\nAlso, I see you're on Windows, what version? I haven't tested that repository on Windows, will try that tomorrow.\n\nI have tested your code on Windows 10.\n. Sorry .. Please reference the following image :)\n\n. Hi, I've written a simple project reproducing the error message (Cannot resvole module 'react-hot'). Please reference the following link.\nexpress_react_boilerplate\nOnce I include react-hot-loader to server side code to work well. So, When you test this project, uninstall react-hot-loader to reproduce the error message.\nI will explain process what reproduce the error message through this simple project. Please see the following explain.\n1. This simple project is composed server folder and client folder. server folder is server written by express.js and client folder is view written by react.js\n2. first, Enter the client folder and build client source through follow command.\n   npm run-script build\n3. Enter the server folder. Uninstall react-hot-loader and build server source through follow command.\n   3.1 uninstall --save-dev react-hot-loader\n   3.2 npm run-script build\n   3.3 npm run-script development\nif you execute the above process, you may be received error message on console like the following pic ..\n\nP.S\nI worry about that this simple project is tested on Windows 10. So if you are using Mac or Linux, I don't know what this project works find. \nif this project doesn't work on your machine, I will fix this project to work find on you machine. Please test this project and reply :)\n. Thx for your careful answers which are helpful for me :)\nI've read your answer and studied my problem. And I have two issue. \n\nI'd recommend using a single package.json. You don't really need step 2 in development, because the compiling and hot updates are done by Webpack via WebackDevServer.\n\nFirst, about the above your answer, what is meant?\nIs it wrong that My project is separated the server project and the client project? You are telling me to combine the server project and the client project to single project? \nAnd, \"You don't really need step 2 in development,\", what is meant? \n\nOK, just tested the RHL3 example on Windows with the same Node/NPM versions as you gave (and using Chrome), and everything hot reloaded fine. Again, the React Router message is a warning, not an error message.\n\nSecond, When I try to your example again, It still doesn't work well. But, When I try to another way, It works very well. These results are only different way to run your code.\nFirst case that example doesn't work well, I try to run your example on Atom Editor.\nSecond case that example works very well, I try to run your example on command.\nThese result are reproduced on my colleague's computer. He is same condition to my computer.\nCould you test this environment again? Please see the following information ..\nI'm using Atom editor to develop node.js. I'm using build and build-npm-apm package to build and run project on Atom editor. \n\n\n\n. I've moved WebpackDevServer code to client side and refactoried all my code. Thanks to your answer.\n\nThe hot updates should come on file changes, all you need to do is npm start and edit the file of the component. The editor shouldn't matter. Does build-npm-apm do anything different on file save?\n\nAFAIK, No build-npm-apm package just run npm-script. And I use this package very well until now. if you think what this problem is not for react-hot-loader@3.X.X, I will issue to noseglid/atom-build.\nCould you check this problem and tell me your decision?\nThank you. Have a nice weekend!\n. OK, I'll debug my ATOM setting. If I find some problem about react-hot-loader@3.X.X, I'll raise issue here.\nThank you very much for you answer until now. Your answer is very helpful for me :)\n. ",
    "Foxhoundn": "Thanks @calesce, got it working <3.\nOne question though, what does \"react-hot-loader/babel\" do in .babelrc? Because this change broke my acceptance tests: \nReferenceError: _this8 is not defined\n         at World._callee5$ (world.js:251:19)\n         at tryCatch (/Users/filipwitosz/Code/Projects/qorus/node_modules/babel-regenerator-runtime/runtime.js:61:40)\n         at GeneratorFunctionPrototype.invoke [as _invoke] (/Users/filipwitosz/Code/Projects/qorus/node_modules/babel-regenerator-runtime/runtime.js:329:22)\n         at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (/Users/filipwitosz/Code/Projects/qorus/node_modules/babel-regenerator-runtime/runtime.js:94:21)\n         at step (/Users/filipwitosz/Code/Projects/qorus/features/support/world.js:2:366)\n         at /Users/filipwitosz/Code/Projects/qorus/features/support/world.js:2:610\n         at new Promise (/Users/filipwitosz/Code/Projects/qorus/node_modules/babel-polyfill/node_modules/core-js/modules/es6.promise.js:193:7)\n         at World.<anonymous> (/Users/filipwitosz/Code/Projects/qorus/features/support/world.js:2:277)\n         at World.__keyDown__REACT_HOT_LOADER__ (/Users/filipwitosz/Code/Projects/qorus/features/support/world.js:327:3419)\nI was trying to debug this, tho' the problem was gone when I removed it from .babelrc, and hot reloading still works fine.\nThanks!\n. @calesce well i will keep using it without the babel plugin and see if something doesn't work.\nWe don't really use any async class properties afaik, and the only test that failed was one that uses keyDown event dispatching, which is, in fact, an async class property: \nkeyDown = async (target, key) => {\n    const event = this.browser.window.document.createEvent('HTMLEvents');\n    event.initEvent('keydown', true, true);\n    event.which = key;\n    event.keyCode = key;\n    const tr = this.browser.window.document.querySelector(target);\n    tr && tr.dispatchEvent(event);\n  };\nCheers, fox.\n. @calesce I've found one file where we use a async class property, and hot reloading works fine with this component even without the babel plugin.\n```\nclass Login extends Component {\n  static contextTypes = {\n    router: PropTypes.object,\n  };\nprops: {\n    location: any,\n    sendAuthCredentials: () => Promise<*>,\n  };\nonSubmitSuccess = async () => {\n    const { router } = this.context;\n    const { location } = this.props;\nconst nextUrl = location.query.next || '/';\nrouter.push(nextUrl);\n\n};\nhandleSubmit = (\n    { login, password }: { login: string, password: string }\n  ): Promise<*> => (\n    auth(login, password, this.props.sendAuthCredentials).then(this.onSubmitSuccess)\n  );\nrender() {\n    return (\n      \nQorus web application\n\n\n\n    );\n  }\n}\n```\nMaybe this will help in debugging the issue.\n. ",
    "patrikholcak": "Added a note to readme\n. ",
    "touqeerkhan11": "woops :octocat: contentBase: \"./views\",\n. ",
    "BTMPL": "\nYes, module.hot.accept() will stop the hot reloading propagation.\n\nThat is either not the case, or the chain is starting from the .accept() calls that use a dependency.\nYou can try to clone my repo at https://github.com/btmpl/react-hot-loader-example and: \n- npm install\n- npm start\n- open the browser\n- make a change to src/reducers/reducer.js\n- the change will be reflected \nThe problem I'm running into right now is that making change to any of the components will now break the Provider - it will try to swap the store even though it wasn't updated. This will happen in both cases - when (in index.js) I call module.hot.accpet() and when I use module.hot.accept('./components/App', () => { ...\n. @calesce you are correct, such a silly mistake. I moved let store = createStore(testReducer); outside of the exported function and it works perfect right now.\nThe original question remains though:\nI can change\nif(module.hot) {\n    module.hot.accept('./components/App', () => {\n        console.log(\"index.js HMR\");\n        const NewApp = require('./components/App').default;\n        render(<AppContainer><NewApp /></AppContainer>, document.getElementById('a'));\n    });\n}\nto\nif(module.hot) {\n    module.hot.accept();\n    console.log(\"index.js HMR\");\n    const NewApp = require('./components/App').default;\n    render(<AppContainer><NewApp /></AppContainer>, document.getElementById('a'));\n}\nand the end results are exactly the same. Can someone point me to a use-case where it is required to pass the dependency and use the first version of the code?. Ok, good enough. I'll close the issue and maybe revisit it if I run into something breaking ;). @Diokuz - thanks, I can see this happening in my code, so it is a valid use case.\n. ",
    "Diokuz": "The difference is that in case of \nmodule.hot.accept(\"./App\", () => {\n    const NextApp = require('./App').default;\n    render(<AppContainer><NextApp /></AppContainer>, document.getElementById('a'));\n});\nonly accept callback will be executed on each hot loading.\nIn case of\nmodule.hot.accept()\nwhole js file will be executed each time, not just accept callback.. ",
    "tvedtorama": "I can't get the module.hot.accept(dep, callback) way to work at all, it does not seem to recognize the paths I pass.  However, module.hot.accept() works, but I don't think react-hot-loader is doing it's magic in that case - I could nicely remove the AppContainer component without any changes? Also I get this annoying error where react-redux claims the store is changed (there should only be one, or it is recreated as my module is reloaded).  \nI also cannot figure out why the path-specific module.hot.accept thing is not working, anyone know how to debug that kind of issues?\nUPDATE: I had an old version of the webpack-hot-middleware, this was most likely the cause of my problems.\n. @egorovli I spent hours to trying to get my rhl 3 update to correctly apply edits, then your solution with module.hot.accept() worked. The recommended way, with  module.hot.accept(path, callback) failed silently - with \"Component does not know how to update itself\".  I think there must be something about the relative paths or anything in my typescript setup that fails it. \nIs there any documentation/links on what this does, exactly - since we don't get the chance to explicitly call the render function again?  Apart from the very annoying store error, are there any other disadvantages to using this simple syntax?\nUPDATE: I had an old version of the webpack-hot-middleware, this was most likely the cause of my problems.. ",
    "elyobo": "Same problem as @tvedtorama, except that I do have the most recent version of webpack-hot-middleware.\nWith the path specific version I invariably get \"full reload required\" errors like the following\n\n[HMR] The following modules couldn't be hot updated: (Full reload needed)\nThis is usually because the modules which have changed (and their parents) do not know how to hot reload themselves. See http://webpack.github.io/docs/hot-module-replacement-with-webpack.html for more details.\n- ./js/components/container/HomePage.jsx\n\nBabel config looks like this, which appears to be correctly disabling the es2015 modules.\njson\n{\n  \"sourceMaps\": \"inline\",\n  \"presets\": [\n    \"flow\",\n    [\n      \"latest\",\n      {\n        \"es2015\": {\n          \"modules\": false\n        }\n      }\n    ],\n    \"stage-2\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"transform-class-properties\",\n    \"transform-object-assign\",\n    \"transform-es2015-block-scoping\",\n    \"transform-runtime\",\n    \"react-hot-loader/babel\"\n  ],\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\n        \"transform-react-remove-prop-types\",\n        \"transform-react-constant-elements\"\n      ]\n    }\n  },\n  \"babelrc\": false\n}. ",
    "lovetingyuan": "so sorry for no response in time. now I just use webpack-hot-middleware without RHL, and it works for me, thank you a lot. ",
    "th3fallen": "@gaearon on that topic is there a migration guide? the one i see is migrating TO 1.x not from it\n. So after spending about 2 hours trying to get v3 to work (unsuccessfully, it would detect changes but say they couldnt be reloaded i assume because they're wrapped with HOC's for redux?)\nI've given up. \nSince v3 is still labeled as a beta would it be possbile to make v1 work until it's the new stable? or is that a big ask?\n. So i've got a very similar issue http://th3fallen.d.pr/4o2K in that video you see the word coworker become coworkers as expected but then the entire application reloads is this similar to what you were seing?. still getting it here, haven't found a fix. wow i really dropped the ball on this one @calesce i'll \"try\" to get you a running version frist thing monday morning. @alexilyaev hot reloading still works without the appcontainer in your project? mine fails to update anything?. @neoziro any chance we can remove the unconfirmed tag on this since it's clear others have the same issues?\nSince hmre is now dead in react-16 looks like I'll begrudgingly have to come back to this and just let my entire tree rerender :(. @theKashey it doesnt rerender components anymore after changes,\nAlso @neoziro thanks for removing that badge would you say this is a bug?. Thanks for the input,  converted my async loader to use react-universal-component like so but i'm still getting the same result\n```\nexport default (componentImport, exportName = 'default', HOCWrapper = false, target = null) => {\n  exportName = exportName || 'default';\nreturn universal(componentImport, {\n    loading: Loading,\n    key: exportName,\n  });\n};\n```. I'll try your example the imported comonent also fails with the same issue. ",
    "omichelsen": "As I understand it, you can't just switch to v3 without also adding the bootstrap <AppContainer /> to your app root?\nIf there is anyway we could just upgrade and leave that for later, I would appreciate any instructions, because we have a lot of entry points, and this would be a major refactor for us.\n. ",
    "renaudl": "so what is the solution there. roll back react version?\n. @gaearon in the long run, I agree but when you have a set of stuck developer you have to pay... Will try to move to 3.X in parallel.\n. Thanks for advise\n. ",
    "jtangelder": "Adding alias: { 'react/lib/ReactMount': 'react-dom/lib/ReactMount' } to your webpack config fixes this for now. Meanwhile I'm looking forward to see 3 go final! \ud83d\ude09 \n. ",
    "hyy1115": "@jtangelder good idea. ",
    "QuietWind": "what should i do \uff1fupdate version to 3\n@gaearon  i have some question, thx your code.\nnpm install --save-dev react-hot-loader@next. ['react-hot-loader/webpack', 'babel-loader', 'webpack-module-hot-accept']\nwork fine. https://github.com/gaearon/react-hot-loader/issues/581\nwill resolve your problem ?. \njavascript\n    const reactAppContainer = document.getElementById('reactAppContainer')\n    if (module.hot) {\n        module.hot.accept() // this is important\n        ReactDOM.render((<AppContainer><MainPage /></AppContainer>), reactAppContainer)\n    } else {\n        ReactDOM.render((<AppContainer><MainPage /></AppContainer>), reactAppContainer)\n    }\nappContainer use this. and setting with migration-to-3.0. ",
    "bytor99999": "Updating to 3 did not fix the problem. I still get ERROR in ./js/components/inputs/maskedInput.jsx\nModule not found: Error: Can't resolve 'react/lib/ReactInputSelection'\ngoing to try the alias suggestion.. ",
    "rodoabad": "Upgrading to 3.x now causes a new error.\n```js\nrecords.chunkModuleIds[chunk.id] = chunk.mapModules(m => m.id);\nchunk.sortModules is not a function\n```. ",
    "justinkwanlee": "+1 This has started happening since upgrading to react 15.4\n. ",
    "yleclanche": "Not sure if it's the same issue, I'm still on React 0.14\n. Here is an example : https://github.com/yleclanche/react-hot-loader-example\nI didn't manage to get the same exact behavior..\nNow I don't have the full reload message. Logs looks fine, but hot reload doesn't work.. ",
    "maxilev": "+1\n. ",
    "mkalish": "I'm seeing the same thing as well.\nVersion\nNode: 6.9.1\nNPM: 3.10.8\nreact-hot-loader: 3.0.0-beta.6\nScreenshot\n\nProblem did not occur after downgrading to 1.3.0\n. ",
    "Q-Man": "I have the same problem like mkalish since upgrading from 1.3.0 to 3.0.0-beta6. Always full reload with the same error message. With 1.3.0 hot module update was still working.\nI'm using react-hot-loader/patch as Webpack entry point. Problem occurs no matter if i use react-hot-loader/babel plugin or react-hot-loader/webpack loader.\nAm I getting it right, that I don't have to call module.hot.accept by hand if I use the react-hot-loader/patch Webpack entry point?\nThis is my startup code:\nimport \"babel-polyfill\";\nimport \"isomorphic-fetch\";\nimport * as React from \"react\";\nimport * as injectTapEventPlugin from \"react-tap-event-plugin\";\nimport * as ReactDOM from \"react-dom\";\nimport {MainContainer} from \"./parts/main\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport * as createLogger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {MainReducer} from \"./common-reducers/main-reducer\";\nimport {StyleRoot} from \"radium\";\nimport {AppContainer} from \"react-hot-loader\";\n\ninjectTapEventPlugin();\nlet store:any = createStore(MainReducer.mainState, applyMiddleware(thunkMiddleware, createLogger()));\n\nReactDOM.render(\n    <AppContainer>\n\n        <Provider store={store}>\n            <StyleRoot>\n                <MainContainer/>\n            </StyleRoot>\n        </Provider>\n\n    </AppContainer>,\n    document.getElementById('app')\n);. What do you mean with \"I had followed the migration steps from 1.x to 3\"? The link you posted doesn't contain that.\n\nI still don't have success. Always full reload with the same error message. :(\nThis is my webpack config (react-hot-loader/babel is added as plugin in .babelc):\nconst webpack = require('webpack');\nconst WebpackConfig = require('webpack-config');\nconst path = require('path');\nconst buildPath = path.resolve(__dirname, '../www');\nconst srcPath = path.resolve(__dirname, '../src');\nconst testPath = path.resolve(__dirname, '../test');\n\nconst config = new WebpackConfig().merge({\n    //Entry points to the project\n    entry: {\n        app: [\n            \"react-hot-loader/patch\",\n            \"babel-polyfill\",\n            \"./src/app/app.tsx\"\n        ],\n        devServer: [\n            'webpack/hot/only-dev-server'\n        ]\n    },\n    //Server Configuration options\n    devServer: {\n        contentBase: 'src/www',  //Relative directory for base of server\n        hot: true,        //Live-reload\n        port: 3000,        //Port Number\n        host: 'localhost',  //Change to '0.0.0.0' for external facing server\n        inline: true,\n\n        //Map API calls to local backend server\n        proxy: {\n            '/api/*': {\n                target: 'http://localhost:8080'\n            }\n        }\n    },\n    plugins: [\n        //Enables Hot Modules Replacement\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n    //Config options on how to interpret requires imports\n    resolve: {\n        extensions: [\"\", \".js\", \".jsx\", \".ts\", \".tsx\"],\n        //node_modules: [\"web_modules\", \"node_modules\"]  (Default Settings)\n    },\n    output: {\n        path: buildPath,    //Path of output file\n        filename: '[name].js',\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.ts$|\\.tsx$/,\n                loaders: ['babel-loader', 'ts-loader'],\n                include: [srcPath, testPath],\n            },\n            {\n                test: /\\.css$/,\n                loader: \"style-loader!css-loader\"\n            },\n        ],\n    },\n});\n\nmodule.exports = config;\n. Thanx @thomfoolery, your code helped me to find the problem.\n\nThe main reason for my problem was this: I'm using HMR with TypeScript. Because there is no typing for \"module.hot\" I tried to avoid the TypeScript compile error by writing the HMR replacement code like this:\n//NOT WORKING!!!\nif (module[\"hot\"]) {\n    module[\"hot\"].accept('./parts/main', () => {\n        const NextRoot = require('./parts/main').MainContainer;\n        render( NextRoot )\n    })\n}\n\nThis for some reason this doesn't work. So I changed it to this and now it works:\n//WORKING!!!\ndeclare var module; //avoid TypeScript compile error\nif (module.hot) {\n    module.hot.accept('./parts/main', () => {\n        const NextRoot = require('./parts/main').MainContainer;\n        render( NextRoot )\n    })\n}.\n",
    "thomfoolery": "@calesce I was struggling with this problem for a couple days and came across this article that helped me solve my problem\nhttps://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.7kq8oibt5\n\nImportant: Use either CLI or Config file but never mix and match the above two ways.\n\nI had followed the migration steps from 1.x to 3, \nbut the eureka moment was after I moved my CLI params (--inline and --hot) into my webpack.config file, and then everything fell into place. @Q-Man I updated my comment with a link to the migration example. .babelrc\n{\n  \"presets\":[\n    \"es2015\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"react-hot-loader/babel\",\n    \"transform-object-rest-spread\"\n  ]\n}\nwebpack.config.js\nmodule.exports = {\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:9000',\n    'webpack/hot/only-dev-server',\n    './client/index.jsx'\n  ],\n  output: {\n    path: '/client',\n    filename: 'bundle.js',\n  },\n  devtool: 'source-map',\n  devServer: {\n    hot: true,\n    contentBase: './client',\n    inline: true,\n    port: 9000,\n    proxy: {\n      '/**': {\n        target: 'http://localhost:9001',\n        bypass: function ( req, res, proxyOptions ) {\n          if ( req.path === '/' ) return '/index.html'\n          else return false\n        },\n      }\n    }\n  },\n  resolve: {\n    root: path.resolve('.'),\n    extensions: ['', '.js', '.jsx'],\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\",\"css\",\"sass\"],\n      },\n      {\n        test: /\\.(png|woff|woff2|eot|ttf|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        loader: 'url',\n      },\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n      }\n    ]\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n  ]\n}\nindex.jsx\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Root from './containers/Root'\nimport { AppContainer } from 'react-hot-loader'\nrender( Root )\n// Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => {\n    const NextRoot = require('./containers/Root').default;\n    render( NextRoot )\n  })\n}\nfunction render ( RootElement ) {\n  ReactDOM.render(\n    \n\n,\n    document.querySelector('#root')\n  )\n}\n```\ncontainers/Root/index.jsx\n```\nimport \"client/styles/index.scss\"\nimport React from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { connect, Provider } from 'react-redux'\nimport rootReducer from './reducer'\nimport thunk from 'redux-thunk'\nimport {\n  Route,\n  Router,\n  IndexRoute,\n  hashHistory,\n} from 'react-router'\nimport App from 'client/containers/App'\nimport Index from 'client/containers/Index'\nimport Learn from 'client/containers/Learn'\nimport Review from 'client/containers/Review'\nimport Designer from 'client/containers/Designer'\nimport Inspector from 'client/containers/Inspector'\nconst initialState = undefined\nexport const store = applyMiddleware( thunk )( createStore )( rootReducer, initialState, window.devToolsExtension && window.devToolsExtension() )\nconst Root = props => {\n  return (\n    \n\n\n\n\n\n\n\n\n\n\n\n  )\n}\nexport default Root\n```. ",
    "abergs": "Any updates on this?. ",
    "sbussetti": "@gaearon is there any kind of verbose logging we can enable (via config or source build) that would give us a better idea of why our stacks are insisting on doing full reloads?  I just spent two hours trying to isolate the cause and came up with nothing =/  I'm not even sure if react-router has anything to do with it! \nEDIT:  Update.  Sigh.  For posterity's sake, here is what I was doing wrong and what I had to fix.  I'm using webpack 2, babel, es6,  etc in my project.\n\nDid not enable {devServer: {hot: true}} in my webpack.config.js\nDid not disable the babel modules feature, \"presets\": [  [\"es2015\", {\"modules\": false}] ... ]\nFailed to appropriately configure my entry point's hot.accept call.  I had:\nif (module.hot) {\n    module.hot.accept('./App.jsx', (App) => { render(App) })\n  }\nwhen I should've had\nif (module.hot) {\n    module.hot.accept('./App.jsx', () => { render(App) })\n  }\nIn the former, I was receiving an array of strings naming the matched component, but using es6 modules I did not need that.\n\nFundamentally the stupid thing I forgot to do that helped me solve everything was turn on \"preserve log\" in my console. =/  Per my initial comment, there is, in fact, a wealth of warnings explaining what is wrong if you don't let the console reset on reload.. ",
    "ambethia": "I am experiencing this, and can echo @tleunen, I am seeing this:\n[HMR] Waiting for update signal from WDS...      dev-server.js:49 \n[HMR] Waiting for update signal from WDS...      only-dev-server.js:66 \n[WDS] Hot Module Replacement enabled.            client?843a:41\nI can't find anything else that's different from what others are doing. I am not using React Router.. > Finally I have fixed it, thanks\n@jeud can you let the rest of us know how you fixed it? Thanks!. @jeud Thanks, which version of webpack are you running?. ",
    "raoofha": "my problem was that I put the following code in the component rather than index.js\nimport injectTapEventPlugin from 'react-tap-event-plugin';\ninjectTapEventPlugin();\nafter putting it in index.js problem was gone\nI found out by turning on Preserve log in chrome devtools thanks to @sbussetti . ",
    "erik-sn": "@sbussetti your #2 is what was causing my issue, thanks for writing it down. I recommend anyone struggling with this to go to the boiler plate as well and comparing your configuration.. ",
    "jasonbarry": "I'm running into this problem with react-hot-loader@3.0.0-beta7 too. \nDoes anyone have a link to configuring HMR with react-hot-loader@1.3.1 and Webpack 3?\nEdit: I solved my problem \u2014 I was following these docs closely, but not webpack-dev-server's docs closely enough. \n\nIt is recommended that devServer.publicPath is the same as output.publicPath.\n\nSetting both devServer.publicPath and output.publicPath to /js/ worked for my configuration (with both 1.3.1 and 3.0-beta).. I'm seeing this too \u2014 I've got new webpack.DefinePlugin({ 'process.env.NODE_ENV': JSON.stringify('production') }) set in my production webpack config file, and only specify react-hot-loader/patch as an entry in my development webpack config file.. @viridia I just got HMR working using externals. Perhaps ensure that your devServer.publicPath is the same as output.publicPath?. ",
    "vamsiampolu": "warning.js?8a56:36 Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Image component still occurs after I installed beta.6. I have put my react-hot-loader config and Image component code into a gist here and do a hard reset to remove react-hot-loader.\nI think I should wait before reintroducing the project into my build. Thanks.. I have babel-preset-env in order to transpile my code, I do not want to transpile all ES2015 features when I am using  node v7 and Chrome 54. Can I use this preset with react-hot-loader or does it have to be ES2015.. @calesce \nI gave it another shot,  I enabled babel-plugin-transform-es2015-classes as you suggested above:\n.babelrc\njson\n{\n  \"presets\":[\n    \"react\",\n    [\n      \"env\",\n      {\n        \"targets\":{\n          \"chrome\":52,\n          \"node\":true\n        }\n      }\n    ]\n  ],\n  \"env\": {\n    \"development\": {\n      \"plugins\":[\n        \"transform-es2015-classes\",\n        \"react-hot-loader/babel\"\n      ]\n    },\n    \"production\": {\n      \"presets\": [\"babili\"]\n    }\n  },\n  \"plugins\":[\n    \"transform-class-properties\",\n    [\"transform-object-rest-spread\", {\n        \"useBuiltIns\":true\n      }\n    ]\n  ]\n}\nWebpack hmr config::\njs\nconst hmr = {\n  entry: [\n    'react-hot-loader/patch',\n    `${APP_PATH}/index.js`,\n  ],\n  devServer: {\n    inline: true,\n    hot: true,\n    host: process.env.HOST || '0.0.0.0',\n    port: process.env.PORT || 3000,\n    stats: 'errors-only',\n    historyApiFallback: true,\n    contentBase: BUILD_PATH,\n    watchOptions: {\n      aggregateTimeout: 300,\n      poll: 1000,\n    },\n  },\n  plugins: [\n    new DefinePlugin({\n      NODE_ENV: JSON.stringify('development'),\n    }),\n    new HotModuleReplacementPlugin(),\n    new NpmInstallPlugin({\n      dev(module) {\n        return (/(^babel-?.*|.*-plugin$|.*-loader)/).test(module);\n      },\n    }),\n  ],\n};\nMain component:\n```\nimport React from 'react';\nimport { Router, hashHistory } from 'react-router';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\nimport routes from './routes';\ninjectTapEventPlugin();\nconst root = document.getElementById('root');\nfunction renderRoutes(nextRoutes) {\n  render(\n\n, root);\n}\nrenderRoutes(routes);\nif (module.hot) {\n  module.hot.accept('./routes', () => {\n    const nextRoutes = require('./routes').default;\n    renderRoutes(nextRoutes);\n  });\n}\n```\nThis is working correctly for me.. ",
    "yasserkaddour": "Hi @lemonmade,  Relay work for me so I checked your repo, I deleted your render function and that solved the issue.\nSee my PR https://github.com/lemonmade/relay-starter-kit-hot-reloading/pull/1\n. Assuming good faith is a fundamental principle on Wikipedia and it should  be the same for any collaborative project like open source software.\n@AaronFriel I hope a little bit of reading on this principle will help you calm your nerves.\nhttps://en.wikipedia.org/wiki/Wikipedia:Assume_good_faith\nhttps://opensource.org/node/877. ",
    "lemonmade": "Yeah sorry, I was definitely wrong with that example as you said. I do have a more complex version of this within a larger app that doesn't work correctly (with a similar message, which is why I was a bit overzealous in posting the issue), I will reopen when I have another failing minimal example. Thanks!. ",
    "asterikx": "Thanks for your quick reply. So adding module.hot.accept manually to the respective modules is not sufficient anymore with RHL 3? At least it did not worked for the module I have tried it right now.... Ok, thanks for clarifying.. ",
    "paulpooch": "I've been doing the method prescribed in this link and having an issue with alias pollution.  Every reload ceates an alias for every class method (bound handler).\nhttp://reactkungfu.com/2015/07/why-and-how-to-bind-methods-in-your-react-component-classes/\nSo basically:\n```\nclass CatPicker extends Component {\nhandleClick = (e) => {\n    // do stuff.\n  }\nrender() { ... }\n}\n```\nWith the downside being hot loader creates aliases every time it reloads.  So you end up with this grossness:\n```\n}, {\n    key: 'handleTimeSelected__REACT_HOT_LOADER',\n    value: function handleTimeSelected__REACT_HOT_LOADER() {\n      return this.handleTimeSelected__REACT_HOT_LOADER.apply(this, arguments);\n    }\n  }, {\n    key: 'handleTimeSelected__REACT_HOT_LOADER',\n    value: function handleTimeSelected__REACT_HOT_LOADER() {\n      return this.handleTimeSelected__REACT_HOT_LOADER.apply(this, arguments);\n    }\n  }, {\n    key: 'handleTimeSelected__REACT_HOT_LOADER',\n    value: function handleTimeSelected__REACT_HOT_LOADER() {\n      return this.handleTimeSelected__REACT_HOT_LOADER.apply(this, arguments);\n    }\n  }, {\n    key: 'handleTimeSelected__REACT_HOT_LOADER',\n    value: function handleTimeSelected__REACT_HOT_LOADER(e) {\n      // const appointmentDate = moment().format(DATE_PARAM_FORMAT);\n      // this.props.selectAppointmentDate({ appointmentDate });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n```\n. ",
    "Kitanotori": "That means transpiling ES6 to ES5, which seems like a temporary fix, as there shouldn't be need for such transpilation, although it doesn't matter much either as it happens only in dev mode.\nI was able to get the code working by adding transform-class-properties and transform-es2015-classes (the plugins have to be in correct loading order also):\n```\n{\n    \"presets\": [\"stage-2\", \"react\"],\n    \"env\": {\n        \"development\": {\n            \"plugins\": [\n                \"transform-class-properties\",\n                \"transform-es2015-classes\",\n                \"react-hot-loader/babel\"\n            ]\n        }\n    }\n}\n```. Anyway, thanks for quick reply. Spent so many hours today trying to find solution. Also I don't mind the workaround as it doesn't affect the production bundle. Hope you can find solution (the issue seems to have been open already 4 months ;)). https://github.com/gaearon/react-hot-loader/issues/514#issuecomment-299716674 fixed it for me also.\nI wonder if there's a way to get rid of the require, as I'm using 'import' everywhere in my app, and I prefer to keep the syntax uniform?. ",
    "sathishkumarsoundharajan": "@calesce Can you please take a look into it, if you have time. It should be some configuration issue as i am not getting error while running i am not able to figure it out, \nNote: This was working on one another system.. It is there https://github.com/bboysathish/repro-hot-loading/blob/master/configuration/webpack/dev.js#L73 @alex-shamshurin . @calesce Now that i have added those 2 plugins, still i am not able to see HMR in console \nhttps://github.com/bboysathish/repro-hot-loading/blob/master/configuration/webpack/dev.js#L73-L74. @alex-shamshurin Have you tried forking my repo and run from your local ? . @calesce I don't think it is error on webpack. How can i narrow down it is webpack or RHL ? i can open a same issue in webpack repo also. . @alex-shamshurin  & @calesce Found the issue, removing reload=true from webpack-hot-client makes the RHL working https://github.com/bboysathish/repro-hot-loading/commit/0fb699e9e62be5cd69fa5ce1c93146c6982acdcc . ",
    "alex-shamshurin": "This is something wrong with webpack configuration there. new webpack.HotModuleReplacementPlugin() is missing, besides,  I do not see that HMR is enabled in console.. Me too... Something is totally wrong.. Yes, I've done it just before write here. The error is not related with RHL, but probably with webpack itself. Anyway  it must print \"[HMR] connected\" even without RHL at all. But I do not see it. . @bboysathish I have tried already but it doesn't help. Anyway, you should first ensure that you see \"[HMR] connected\". var hotMiddlewareScript             = 'webpack-hot-middleware/client?http://localhost:3000&path=/__webpack_hmr&timeout=20000&reload=true';. if (module.hot) {\n  console.log(\"IN MODULE.HOT\");\n  module.hot.accept('./App.jsx', () => {\n    const NextRootContainer = require('./App.jsx').default;\n    renderClient(NextRootContainer, store, routes, history, onUpdate);\n  })\n}\nconsole.log() never happens.. Yes I'll post the whole thing later, but module.hot is not false on page reloading. But it's false when I make some changes. Instead I get this\nprocess-update.js:81[HMR] The following modules couldn't be hot updated: (Full reload needed)\nThis is usually because the modules which have changed (and their parents) do not know how to hot reload themselves. \nprocess-update.js:128[HMR] Reloading page. Yep, tomorrow I'll do it. Sorry for 'tomorrow'. Finally, this is a repo https://github.com/alex-shamshurin/react-hot-loader-issue\npackage,json is a little big and is almost from real project.. Any update?. Up!. ",
    "rozzzly": "@alex-shamshurin module.hot is falsy??\ncan you give us the result of the following?\n```js\nconst log =  (str) => (\n    console.log(\n        typeof str === 'object' \n            ? JSON.stringify(str, null, '\\t')\n            : str\n);\nlog(module);\nlog(process.env);\n```. ",
    "awv-inf": "Certainly, https://gist.github.com/awv-inf/257464c57fd19b656858c6ffd5a87c91\nThe babel config is in the first blob. It applies to env.dev only, where react-hot-loader is inlined.. This worked indeed, thanks! With the downside of course that now we have transpiled classes. Is this a browser bug or will it get fixed in RHL?. ",
    "Infonautica": "No, cuz i used yours boilerplate. Boilerplate has an idea of sharing static files, but i cant implement it. It would be awesome, if you show me how to use static files in this boilerplate, thanks. ",
    "agrcrobles": "Great, sure, it is done.. ",
    "cia48621793": "It was all clear now, after countless trial and error: I had merely forgot about the --hot option for webpack-dev-server. Silly me.. ",
    "omerts": "@calesce Thanks for the answer.\nIf AppContainer causes deep-updated regardless of hot updates, this is kind of interfering with the \"real\" way react works, and can introduce unexpected behavior when react-hot-loader is not used (like in production builds). . ",
    "aledoroshenko": "Guys, did i get it right - when in AppContainer, and non-production more (NODE_ENV=development) - app will always re-render?\nI'm trying this with Redux, and on test app when i dispatch action in some inner component that don't update store - whole app re-renders. And as i see, it could be react-hot-loader business - when i'm setting NODE_ENV=development or remove AppContainer - dispatched action don't cause full re-render. Could it be it?. ",
    "kevin-hendrickx": "full rerender also happening for me when calling reactDOM.render() multiple times.. ",
    "asgerhallas": "We've also run into this issue. Is there any chance this will be fixed? I will gladly help out - but would like to know in advance if there's some known road blocks ahead, something I should know or if it's a \"by design/won't fix\" kind of issue :) . ",
    "marbemac": "Chiming in here, we use nextjs, which in turn uses react-hot-loader. This issue has caused bugs in production for us a couple of times that were not caught in development. We've only just now traced it back to shouldComponentUpdate firing in production but not development, leading to hard to catch bad behavior.\nAny chance anybody is looking at this? @asgerhallas did you end up getting started or no?. ",
    "Orbyt": "@calesce Then the walkthrough is incorrect. It mentions the following for the entry array:\njs\nentry: [\n  'webpack-dev-server/client?http://0.0.0.0:3000', // WebpackDevServer host and port\n  'webpack/hot/only-dev-server', // \"only\" prevents reload on syntax errors\n  './scripts/index' // Your app\u02bcs entry point\n]\nbut uses the server.js from this boilerplate which itself uses webpack-hot-middleware.\nI went ahead and changed my webpack.config.js to the following:\njs\nentry: [\n    'webpack-hot-middleware/client',\n    path.resolve(__dirname, \"app/index.jsx\")\n  ],\nUpon running npm run watch and then npm run start, the application loads, but prints the following to the console:\n\nGET file:///__webpack_hmr net::ERR_FILE_NOT_FOUND\n\nEDIT: After reading over this issue:, I've modified my entry array to the following:\njs\nentry: [\n    'webpack-hot-middleware/client?path=http://localhost:8080/__webpack_hmr',\n    path.resolve(__dirname, \"app/index.jsx\")\n  ],\nThe app loads, no errors are printed, but React reloading is still not working.. As of now I am not using react-hot-loader. My project still has live reloading, but only works for a select few files. The issue is noted here: http://stackoverflow.com/questions/41368745/hot-reload-in-electron-react-application. ",
    "lingz": "I can confirm the same problem with:\nThe URL's scheme must be either 'http:' or 'https:'. 'file:' is not allowed.\nwhen using webpack-dev-server --hot --inline with electron. The simple solution was to make sure when webpack-dev-server was running, that I opened the localhost URL instead of file:\n// and load the index.html of the app.\n  if (process.env.NODE_ENV == \"production\") {\n    win.loadURL(url.format({\n      pathname: path.join(__dirname, 'index.html'),\n      protocol: 'file:',\n      slashes: true\n    }));\n  } else {\n    win.loadURL(\"http://localhost:3000\");\n  }. ",
    "mkawalec": "I'm getting the same error in phonegap. It seems to stem from the fact that / urls are defaulted to a file:// protocol. ",
    "didierfranc": "Solved https://github.com/didierfranc/redux-react-starter/commit/e66ab1f3e5be6558f537632529c3e7a5b054b813\nIt seems that render should be equal here\nrender()\nand\nmodule.hot.accept('../src', render)\nI did not want to have <AppContainer /> in my prod bundle so I needed to split that, the solution is : \nif (!module.hot) render(<Root />, document.querySelector('react')) \nat the root of my project, if you have better solution I'll take it !. ",
    "ianks": "@didierfranc I tried this and although the error is gone, hot reloading is not working. Did you experience this at all?. > Move any setState() that you are doing in componentDidMount() to the constructor of your component class and that should make your problem go away.\nThis will cause another re-rendering (which is fine), it should not trigger a re-mount.. @wellyshen can you post an example of hot module replacement with routes.js. ",
    "Koenkk": "@penx thanks! It solved the problem in my case. \ud83d\ude04 . That issue is about >= 2 levels of HoC. If I understand correctly my demo has only 1 level of HoC: https://github.com/Koenkk/react-hot-loader-problem/blob/master/app/App.js#L18. This indeed solves the problem, thanks @theKashey !\nFor future reference, I pushed the fix to my repository: https://github.com/Koenkk/react-hot-loader-problem. ",
    "edorivai": "Just leaving a note for fellow Typescript googlers. A TS equivalent of @penx's babel solution would be:\n// tsconfig.json\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\"\n    }\n}. ",
    "darajorjor": "@penx thanks! you saved my week!. ",
    "vkosovskikh": "Same problem with version 4.0.0-beta.18 of react-hot-loader. Error occurs when I save some changes on component and change route by clicking a button. Any help?\n.babelrc:\n```\npresets: [\n  ['es2015', { modules: false }],\n  'stage-0',\n  'react'\n],\nplugins: [\n  'react-hot-loader/babel'\n]\n````\n\n. @theKashey seems solved, ty. ",
    "ivnkld": "@theKashey had the same issue just now with version 4.0.0-beta.21, updating for 4.0.0-beta.22 solved the problem. ",
    "AlwaysAwake": "Same here. I've tried many different ways but still don't know how to solve this warning.. ",
    "Razinsky": "Same thing here. I have used the exact same setup that your example https://github.com/calesce/react-hot-loader-examples and still I get that error.\nWarning: [react-router] You cannot change <Router routes>; it will be ignored. ",
    "scisci": "I got the same thing.\nI realized module.hot.accept is never called unless I directly edit the file that is listed as a dependency. However, if I edit a dependency of that dependency it doesn't get called.. Nevermind, I figured out what my issue was, but not sure if its related to these other ones. For me, I had to make sure there was no import path that made it from the modified component to the index.js file. If the import path ever makes it to the root, then it will not perform a hot replace because it thinks the whole page needs reloading.. @amoreira, if you can't remove the import path at index.js, then you have to split up your files in a different way, so the component you want to hot reload, is not imported in index.js. . ",
    "amoreira": "@scisci I have the same problem here. Do you know how I can resolve without removing import path at the same level as index.js? @calesce could you take a look at this issue?. ",
    "raarts": "Well I think this is the wrong way to do it, as following the readme as it is, will lead to failure, and this will lead to bad user experience.  So there.. Right. My sincere apologies. (Sits in a corner with a brown bag over his head). \nI use sinopia to cache npm downloads, which works so well, that I entirely forget about using it, and apparently sinopia had 3.0.0-beta cached, and thus sent me that version.\nI apologise for my grumpiness, it was entirely unwarranted. Thanks for all the good work.. ",
    "joetidee": "No, I do not.. It would be difficult to share this project, but here is my webpack.conf.js file:\n```\nconst path = require('path');\nconst merge = require(\"webpack-merge\");\nconst webpack = require(\"webpack\");\nconst TARGET = process.env.npm_lifecycle_event;\nconst PATHS = {\n    app: path.join(__dirname, '/client/src/app.jsx'),\n    build: path.join(__dirname, '/client/dist'),\n    test: path.join(__dirname, 'tests')\n};\nconst common = {\n    entry: [\n        PATHS.app\n    ],\n    output: {\n        path: PATHS.build\n    },\n    module: {\n        loaders: [{\n            test: /.js?$/,\n            loaders: ['babel'],\n            include: path.join(__dirname, '/shared')\n        },{\n            test: /.jsx?$/,\n            loaders: ['react-hot','babel?' + JSON.stringify({\n                presets: [\"es2015\", \"stage-0\", \"react\"]\n            })],\n            include: path.join(__dirname, '/client/src')\n        },{\n            test: /.less$/,\n            loaders: ['style', 'css', 'less']\n        },\n        {\n            test: /.ico$/,\n            loader: \"file-loader\"\n        },\n        {\n            test: /.png$/,\n            loader: \"url-loader?limit=100000\"\n        },\n        {\n            test: /.jpg$/,\n            loader: \"file-loader\"\n        },\n        {\n            test: /.(woff|woff2)(\\?v=\\d+.\\d+.\\d+)?$/,\n            loader: 'url?limit=10000&mimetype=application/font-woff'\n        },\n        {\n            test: /.ttf(\\?v=\\d+.\\d+.\\d+)?$/,\n            loader: 'url'\n        },\n        {\n            test: /.eot(\\?v=\\d+.\\d+.\\d+)?$/,\n            loader: 'file'\n        },\n        {\n            test: /.svg(\\?v=\\d+.\\d+.\\d+)?$/,\n            loader: 'url?limit=10000&mimetype=image/svg+xml'\n        },{\n            test: /.json$/,\n            loader: \"json-loader\"\n        },{\n            test: /.css$/,\n            loaders: ['style', 'css']\n        }]\n    },\n    plugins: [\n        new webpack.ProvidePlugin({\n            \"$\":\"jquery\",\n            \"jQuery\":\"jquery\",\n            'global.jQuery': 'jquery'\n        }),\n        new webpack.optimize.OccurenceOrderPlugin(),\n        new webpack.DefinePlugin({ 'typeof window': '\\\"object\\\"' })\n    ],\n    resolve: {\n        extensions: ['', '.js', '.jsx', '.less', '.css'],\n        alias: {\n            'jquery-ui': 'jquery-ui-dist/jquery-ui.js'\n        }\n    }\n};\n// Default config.\nif(TARGET === 'start' || TARGET){\n    module.exports = merge(common, {\n        devtool: 'eval-source-map',\n        entry: [\n            'eventsource-polyfill',\n            'webpack-hot-middleware/client',\n            'webpack/hot/only-dev-server',\n            'babel-polyfill'\n        ],\n        output: {\n            filename: 'app.js',\n            publicPath: '/public/'\n        },\n        plugins: [\n            new webpack.HotModuleReplacementPlugin(),\n            new webpack.NoErrorsPlugin(),\n            new webpack.DefinePlugin({\n                'process.env': {\n                    'NODE_ENV': JSON.stringify('development')\n                }\n            })\n        ],\n        resolve: {\n            root: path.resolve('./client/src')\n        },\n        watch: true\n    });\n}\n// Tests config.\nif(TARGET === 'test' || TARGET === 'tdd'){\n    module.exports = merge(common, {\n        devtool: 'inline-source-map',\n        resolve: {\n            alias: {\n                'app': PATHS.app\n            }\n        },\n        module: {\n            preLoaders:[\n                {\n                    test: /.jsx?$/,\n                    loaders: ['isparta-instrumenter'],\n                    include: PATHS.app\n                }\n            ],\n            loaders: [\n                {\n                    test: /.jsx?$/,\n                    loaders: ['babel?cacheDirectory'],\n                    include: PATHS.test\n                }\n            ]\n        }\n    });\n}\n// Build config.\nif(TARGET === 'build' || TARGET === 'stats'){\n    var CompressionPlugin = require('compression-webpack-plugin');\n    const HtmlWebpackPlugin = require('html-webpack-plugin');\n    const CleanPlugin = require('clean-webpack-plugin');\n    const ExtractTextPlugin = require('extract-text-webpack-plugin');\n    const Visualizer = require('webpack-visualizer-plugin');\n    //const pkg = require(\"./package.json\");\nmodule.exports = merge(common, {\n    entry: [\n        /*vendor: Object.keys(pkg.dependencies).filter(function (v) {\n         return v;\n         }),*/\n    ],\n    module: {\n        loaders: [\n            {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract('style', 'css')\n            }\n        ]\n    },\n    output: {\n        filename: 'app.[chunkhash].js',\n        /*filename: '[name].js',*/\n        publicPath: 'http://auditor.tidee.com/public/'\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            'process.env': {\n                'NODE_ENV': JSON.stringify('production')\n            }\n        }),\n        new webpack.optimize.DedupePlugin(),\n        new webpack.optimize.UglifyJsPlugin({\n            compress: {\n                warnings: false\n            }\n        }),\n        /*new webpack.optimize.AggressiveMergingPlugin(), //Merge chunks*/\n        new CompressionPlugin({\n            asset: \"[path].gz[query]\",\n            algorithm: \"gzip\",\n            test: /\\.js$|\\.css$|\\.html$/,\n            threshold: 10240,\n            minRatio: 0.8\n        }),\n        new HtmlWebpackPlugin({\n            template: 'node_modules/html-webpack-template/index.ejs',\n            title: 'Tidee',\n            appMountId: 'app',\n            inject: false\n        }),\n        new CleanPlugin(path.join(__dirname, '/client/dist')),\n        new ExtractTextPlugin('[name].[chunkhash].css'),\n        new Visualizer({\n            filename: './statistics.html'\n        })\n    ],\n    resolve: {\n        root: path.resolve('./client/dist')\n    }\n});\n\n}\n```. No, I did not solve my issue :(. No I am not - should I be?. ",
    "jamespantalones": "@joetidee did you ever get this solved? having exact same issue. @joetidee  one more question... are you using browser sync for dev server by chance?. ",
    "DPangerl": "Having the same issue using webpack --watch.\nOn every file update, [hash].hot.update.js and [hash].hot.update.json is written in my output folder\n. ",
    "weichenghsu": "@DPangerl  any solution so far?\n. ",
    "sejo2016": "having this issue too,any solution for it?. ",
    "ryandhaase": "+1. ",
    "cliffordfajardo": "I was using the WriteFilePlugin and I excluded the hot files thanks to eisisig 's comment\njs\n        new WriteFilePlugin({\n          test: /^(?!.*(hot)).*/,\n        }),\n. ",
    "skrzepij": "Those HMR chunks are created by HotModuleReplacementPlugin when we use --watch flag running webpack:\nwebpack -d --watch\nThe best way I found till now is to define specific folder and file for those chunks. We can do this in the output section, for example:\noutput: {\n    path: path.join(root, \"dist\"),\n    filename: \"bundle.js\",\n    hotUpdateChunkFilename: 'hot/hot-update.js',\n    hotUpdateMainFilename: 'hot/hot-update.json'\n}\nAfter this change, we will have only those two files created. So we can simply add them (or whole folder) to the .gitignore.\nI know It's not the best solution, but I didn't found anything better for now.. ",
    "eybarta": "@skrzepij beats having a million hot.update json files in my dist folder :) thx!. ",
    "johnstew": "@skrzepij this is what I needed, thank you!!. ",
    "ShaojieLiu": "@skrzepij  you save my folder, man. ",
    "danialkalbasi": "This is happening when file changes watch by both webpack and the webpack dev server. webpack --watch will generate the files as pointed in their doc, and that's normal. \nIn order to fix this, you need to turn off the webpack watch and only let the dev server watch the file changes. Hope it helps!\noutput: {\n    filename: '[name]-bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    library: 'libName',\n    publicPath: '/',\n},\nwatch: false,\n    watchOptions: {\n    ignored: /node_modules/,\n},. ",
    "remi2j": "@skrzepij I'm using your solution but when I edit a file, I get an infinite loop of [HMR] Updated modules: of that file.\nAny idea what my cause this? I works fine otherwise. ",
    "MadOgre": "@remi2j To me this happened when I forgot to include [hash] in the filename.. I feel like there still needs to be a better solution for this. A plugin perhaps.. ",
    "Absvep": "Any solution/plugin yet? Best regards. @andrewl64 in webpack config file :). ",
    "Kimel1": "Same problem\nWin10 x64. ",
    "mutsys": "I just ran into this same problem today as well, but I don't think it is actually the fault of RHL. It only seems to occur when RHL tries to update a module and is unable to do so. It does produce a warning stating something to that affect. Once that happens, calls to methods of React.Component start to produce errors similar to those reported by @ianks. If I perform a full refresh of the browser, forcing a proper update of the modules reporting the errors, the errors go away and everything then works as expected.\nThe follow up then is, what would prevent RHL from being able to being able to update a module and what should I be doing in order to make sure my components don't choke RHL?\nMore info: upon closer inspection, the issue is limited to methods called on a ref that is a pointer to a component that has been unmounted by RHL. It appears that assigning a ref to a variable results in a pointer to the original component before it has been wrapped by RHL. After an update, the variable now points to an unmounted component and calling any of its methods that could result in a re-rendering produce an error message and the expected re-rendering does not take place.  Here is a sample error:\nWarning: forceUpdate(...): Can only update a mounted or mounting component. This usually means you called forceUpdate() on an unmounted component. This is a no-op. Please check the code for the ImpulseGraph component.\n. @ianks : this is not a problem with RHL, you are stepping on your own feet here and causing this to happen.  The docs for componentDidMount() :\n\nSetting state in this method will trigger a re-rendering.\n\nhttps://facebook.github.io/react/docs/react-component.html#componentdidmount\nMove any setState() that you are doing in componentDidMount() to the constructor of your component class and that should make your problem go away.\nBTW, you probably want to review your webpack config. It seems to contain a number of errors as well.\n. @Meeeeow You should not be calling setState in a constructor. Instead, you should just set a value for the state property in the usual way:\n```\nexport class MyComponent extends React.Component {\nconstructor(props: MyComponentProps) {\n    super(props);\n    this.state = {\n        // whatever is required for your component's state\n    };\n}\n\n}\n``. @aikoventypingsproperty added topackage.jsonnow. Thank you for pointing me to@types/webpack-env`, greatly appreciated. Still getting my feet wet in the type declaration labyrinth...\n. @dcosson I don't know if that warning message is the cause of your issue but as it just so happens, I found a work around for that tonight.\nproduces the warning message\n```\nimport App from \"./app\";\nconst renderRouterWithAppContainer = () => {\n    render((\n        \n\n\n\n\n    ),  document.getElementById(\"app\"));\n};\nrenderRouterWithAppContainer();\nif (module.hot) {\n    module.hot.accept(\"./app\", () => renderRouterWithAppContainer());\n}\n```\ndoes not produce the warning message\n```\nimport App from \"./app\";\nconst router = (\n    \n\n\n);\nconst renderRouterWithAppContainer = () => {\n    render((\n        \n            { router }\n        \n    ),  document.getElementById(\"app\"));\n};\nrenderRouterWithAppContainer();\nif (module.hot) {\n    module.hot.accept(\"./app\", () => renderRouterWithAppContainer());\n}\n```\nIn my limited experience so far, it seems that RHL is kind of touchy when React Router is in the mix. What I have observed is that it only seems to work when <AppContainer/> is the parent of <Router/>. Reversing that parent/child ordering always seems to result in failure.\n. ",
    "bradennapier": "I am having a similar issue but dont do setState in the component.  When I have the 'react-hot-loader/babel' preset set any of my onMouseEnters that trigger a setState will create this error.  Commenting it out fixes it .. Alright - had to add an exclude specifically for that package in my babel-loader for anyone else that runs into this!. When I think about this, I believe I remember an issue from way back when from @gaearon around why the fn's need to remain in the prototype.  Having to do with the possibility of scheduled timers and such expecting them to exist.\nSo perhaps we just need to detect if shouldComponentUpdate is removed and remove it from the ProxyComponent properly? \nCreated PR #1091 . This is merged - see #1091 . Changing to a branch to fit within Contributor guidelines. That was my original method of doing it but I ran across an issue from @gaearon which stated that the previous methods need to be preserved incase there is something scheduled to call the previous functions.  So while removing a lifecyle method like shouldComponentUpdate is safe, removing all methods would not be.\nI actually have a version that does remove them all as well.\nAlthough I can't seem to find that issue now I am definitely positive I read it since that is when I changed to only removing from a whitelist.. Ah nevermind, on second look it was #1 which was about Proxying when a timer is set on a changed function.  So yes, seems dropping all previous methods is the better path.\nMy method was to find the changes from one generation to the other by iterating the previous prototype and removing any methods which don't exist any longer (after filtering with the blacklisted methods and PROXY prefix).\nIt seems that may be preferable over completing rebuilding the proxy on every pass as that should actually run into the issues stated in #1 . \nIf you'd like I can restore that methodology unless you have a plan for solving this in a better manner.. Something along these lines in checkHotReplacement\njavascript\ngetOwnKeys(Object.getPrototypeOf(ProxyComponent.prototype)).filter(v => (\n            !v.startsWith(PREFIX) &&\n            !blackListedClassMembers.includes(v)\n          )).forEach(methodName => {\n            if (!has.call(NextComponent.prototype, methodName)) {\n              delete ProxyComponent.prototype[methodName]; \n            }      \n          })\nCould add another filter to filter only functions similar to fakePrototype does.\nI originally wanted to use defineProxyMethods but had issues there since we already called setPrototypeOf on the ProxyComponent by that time.\njavascript\nconst classHotReplacement = () => {\n        checkLifeCycleMethods(ProxyComponent, NextComponent)\n        if (proxyGeneration > 1) {\n          getOwnKeys(Object.getPrototypeOf(ProxyComponent.prototype)).filter(v => (\n            !v.startsWith(PREFIX) &&\n            !blackListedClassMembers.includes(v)\n          )).forEach(methodName => {\n            if (!has.call(NextComponent.prototype, methodName)) {\n              delete ProxyComponent.prototype[methodName]; \n            }\n          })\n        }\n        Object.setPrototypeOf(ProxyComponent.prototype, NextComponent.prototype)\n        defineProxyMethods(ProxyComponent, NextComponent.prototype)\n        if (proxyGeneration > 1) {\n          injectedMembers = mergeComponents(\n            ProxyComponent,\n            NextComponent,\n            InitialComponent,\n            lastInstance,\n            injectedMembers,\n          )\n        }\n      }. @theKashey I have modified it to remove all previous methods as well as added the function filteredPrototypeMethods that fakeBasePrototype also calls to get any whitelisted methods.\nIf I\u2019m wrong and just missed something the same code should work in the defineMethods function but I\u2019m quite sure that\u2019s the first place I tried.  I wouldn\u2019t be able to test for awhile. \nI also tried to follow the general strategies used in the lib to handle certain checks and re-use whatever I could along the way.\nIf it ends up requiring extra tests i will look into that later as I am about to take off for Prague / devcon4.\ntl;dr\nChanged to \njavascript\nif (proxyGeneration > 1) {\n  filteredPrototypeMethods(ProxyComponent.prototype).forEach(methodName => {\n     if (!has.call(NextComponent.prototype, methodName)) {\n        delete ProxyComponent.prototype[methodName]\n     }\n  })\n}\nand filteredPrototypeMethods\njavascript\nconst filteredPrototypeMethods = Proto =>\n  Object.getOwnPropertyNames(Proto).filter(prop => {\n    const descriptor = Object.getOwnPropertyDescriptor(Proto, prop)\n    return (\n      descriptor &&\n      !prop.startsWith(PREFIX) &&\n      !blackListedClassMembers.includes(prop) &&\n      typeof descriptor.value === 'function'\n    )\n  }). Yep working well on my end! Look forward to having it merged.  I\u2019ve realized this has been causing shadow issues for my project for awhile which I never actually attributed to RHL before for whatever reason \ud83d\ude07. ",
    "EvHaus": "I just run into the same Can only update a mounted or mounting component. warning but I'm not doing any setState calls in componentDidMount. For me the error occurred after I removed transform-es2015-classes from my Babel plugins (so that I'm not outputting full ES6 classes).\nThe error was caused by the fact that I still had react-hot-loader/babel in my Babel configuration which appears to be only needed if you're transpiling ES2015 classes. After I removed react-hot-loader/babel from my Babel config -- the error went away.\nNot sure if this is the same problem as you're having -- but thought I'd share in case others run into this.\n. I think this issue is still relevant since redbox-react is a dependency of react-hot-loader. The dependency should be upgraded to 1.3.6 to fix the warnings.. ",
    "impaler": "I also go the setState error with webpack & typescript. I noticed removing the \"react-hot-loader/patch\" from my webpack entry stopped the error.\nIf your using typescript and changing the tsconfig.json compilerOptions -> target to es5 seems to workaround the error aswell.. ",
    "Meeeeow": "Same issue, move setState to constructor did not work. @mutsys \nYou says: \n\nMove any setState() that you are doing in componentDidMount() to the constructor of your component class and that should make your problem go away.\n\nMy component will send XHR request to load data and set loading status in state, i should use this.state = {} in constructor or place setState to somewhere else?. Following code:\njs\n['foo', 'bar', 'barfoo'].map((method) => {\n  this[method] = ...\n})\nwas transformed to\njs\n['foo', 'bar', 'barfoo'].map((method) => {\n  this.method = ...\n}). ",
    "smilkobuta": "@impaler Thank you! I was in a same situation but solved by removing the \"react-hot-loader/patch\" from entry. \n\nI also go the setState error with webpack & typescript. I noticed removing the \"react-hot-loader/patch\" from my webpack entry stopped the error.\nIf your using typescript and changing the tsconfig.json compilerOptions -> target to es5 seems to workaround the error aswell.. \n",
    "aikoven": "@types/webpack-env is what you're looking for.. Also, consider adding this to package.json:\njs\n\"typings\": \"./index.d.ts\",\nThis would allow TypeScript to discover typings automatically when you import \"react-hot-loader\".. ",
    "francoislaberge": "This gif shows it takes 2s + to reload from hitting save to change appearing. Notice when the blue dot disappears and the s appears on the right\n\n. ",
    "BirdLeeSCUT": "This is mostly the cost of compiler side( xx-loader), not the React Hot Loader.\nWhen I use webpack 2.2 + typescript (at-loader) + react, the compiling time can reducer to less then 700 ms, but the web page can update just in an instant after recompilation.\n\n. ",
    "icek": "Nevermind, here is a quick workaround:\n```jsx\ndelete AppContainer.prototype.unstable_handleError;\nReactDOM.render(\n    \n\n,\n    rootEl\n);\n```\nand same error in console:\n\n. ",
    "jtomaszewski": "Same here. Thanks for the workaround @icek , it works for me for now.\nI think if redbox would show the error AND log it in the console at the same time, would be okay. Could be switched on/off with a prop.. ",
    "AlexKvazos": "Can't we make it so that Redbox doesn't stop the error from logging into the console with proper sourcemaps?\nEdit: suggested originally by @jtomaszewski . I don't think removing redbox is the fix, more likely we have to improve sourcemaps so that redbox can show useful information.. ",
    "vincent-ly": "@icek Thanks for the quick fix!\n. ",
    "jeswin": "@icek The workaround saved my day. The red box is a poor developer experience compared to full call stack information in the console.. ",
    "twig-openlearning": "Workaround saved my sanity. I don't know why we're forced to use something like RedBox that provides little benefit.. ",
    "ThisIsRuddy": "Please merge :(. \u2764\ufe0f. ",
    "montogeek": "@calesce It is ok to merge it?. Released under 3.0.0-beta.7, run npm i -D react-hot-loader@next to get it. I merged the original PR against the wrong branch, so, I had to revert it. Sorry, new contributor mistake!. Thanks for the contribution @andrerpena \ud83d\udc83 !. Add this to your configuration:\nhttps://webpack.js.org/guides/production/#node-environment-variable\njs\nplugins:[\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n  ]. @alasdairhurst From https://webpack.js.org/plugins/define-plugin/\n\nNote that because the plugin does a direct text replacement, the value given to it must include actual quotes inside of the string itself. Typically, this is done either with either alternate quotes, such as '\"production\"', or by using JSON.stringify('production').\n\nIn your case you could use '\"production\"', but that could confuse somebody. Can you try using this?\n// Webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./container/App', () => {\n    render(App)\n  })\n}\nDo not require it again\n. ",
    "iDuuck": "A quick heads up. I just stumbled (out of curiousity) over this error: #462 and if I am adding the delete command everything is working again. But there must be an fix for this without this line, shouldn't it?\n. ",
    "adamchenwei": "Sound stupid.... but restart the webpack build help the react somehow start throwing the correct error.. ",
    "christophehurpeau": "@calesce Thank you for your response ! I'll try to do a simple test example tomorrow. @calesce https://github.com/christophehurpeau/react-hot-loader-test. @calesce yes indeed thanks for your answer !. ",
    "nikolaipaul": "@vivaxy what are you using instead of react-router? I'm hitting the same problem.. stateless components do not work with react-hot-loader 1.3.1\nTry the newer version 3. It's still beta though.. ",
    "bjudson": "Having the same problem with React Router v3.0.2 (Webpack 2.2.1, react hot loader 3.0.0-beta.6). I also see the warning:\nWarning: [react-router] You cannot change <Router routes>; it will be ignored. @vivaxy @nikolaipaul this fixed my issue, have you tried it? https://github.com/gaearon/react-hot-loader/pull/240#issuecomment-258614348\ni currently have:\n```\nrenderApp(Root)\nif (module.hot) {\n    module.hot.accept(() => {\n        renderApp(Root)\n    })\n}\n```\nrather than module.hot.accept('./containers/root', () => {. Not too concerned about the warning, as long as it works :)\nI am using react-router, and above fix worked for me. Not really sure react-router was my problem though.. ",
    "andyearnshaw": "I've had the same issue without react-router.  @bjudson's fix worked for me, are there any downsides to using this?. @wkwiatek that doesn't seem to be the problem for me.  This is my .babelrc file:\n{\n    presets: ['react', 'stage-0'],\n    plugins: ['react-hot-loader/babel', 'transform-es2015-modules-commonjs']\n}\nbabel-jest requires the module stuff to be present, which is why I added transform-es2015-modules-commonjs.  If I remove it, webpack compiles but it still doesn't hot reload.  I'm a little busy with work this week so I'm not sure when I will have the time to duplicate the repo and trim it into a repro.\n\nIn case of code from @akoskm and @bjudson (#240 (comment)) it should not be needed as the path says to webpack which code should be allowed to hot update. If you remove that path, then every change from outside will also cause hot update instead of full reload which potentially can have unexpected results.\n\nThis makes it still sound like a bug.  If you provide a path it doesn't update, if you don't provide a path it updates.  Whether the issue is with webpack or react-hot-loader, I don't know.\n. ",
    "IgorGee": "I didn't have react-router installed at all while implementing react-hot-loader.\n@bjudson's solution worked for me.\nI think this issue should be reopened @wkwiatek.. @wkwiatek sure, here ya go: react-boilerplate\nEdit: To reproduce:\nreplace line 17\nif (module.hot) module.hot.accept('./components/App', () => render(App))\n\nand then try to change any text within App or Title\n. Thanks @wkwiatek, that .babelrc fix did the trick.\nFor anyone writing their webpack config in ES6, this babel configuration won't run your webpack config. I solved it by moving my webpack files into a separate directory with its own .babelrc.. @wkwiatek, I've added a slight bit of complexity to my boilerplate and it goes back to the same behavior originally posted. But I do have additional information. All I've done is add a Root component as a parent to the Component I'm rendering.\nreact-boilerplate\n\nIf I change any text within the scenes/Home/index.js file, I get the 'Actual Behavior' @vivaxy originally posted.\nIf I change anything within the components/Root/ directory, the whole page gets refreshed.\nAgain, the if (module.hot) module.hot.accept(() => render(Home)) modification fixes the issue and behaves as expected.. \n",
    "tsdexter": "thank you @bjudson I spent hours trying to make HMR work again - your comment seems to have fixed it for now. . ",
    "nukeop": "@bjudson - I spent like two days getting it to work before finding your comment, you're a lifesaver.. ",
    "nihiluis": "my hot reload works now. but only once. after that the state in all components below Root is lost. any idea why?\njs\nif (module.hot) {\n    module.hot.accept(() => {\n        const NewRoot = require('./containers/Root').default;\n        ReactDOM.render(\n            <AppContainer>\n                <NewRoot store={store} history={history} />\n            </AppContainer>,\n            document.getElementById('root')\n        );\n    });\n}. It works now. I don't know why. Only restarted PC maybe?. https://github.com/reactjs/react-redux/issues/636\npossibly related. somehow disappeared. ",
    "genomics-geek": "Thanks @bjudson  - This resolved my issue as well. I am having a similar issue. What was your typo?. ",
    "Panoplos": "@bjudson That was exactly the problem!! Wow, I think a lot of the boilerplate samples need to be updated to reflect this. I wasted half a day chasing down this issue.. Issue #666 ... coincidence? Because this one is certainly a beast!!\nIn order to comply, I would have to unwrap every single component that uses connect or recompose.\nCan someone explain why this is not supported, as the composed components are not changing in most cases?. ",
    "hugorodrigues": "I believe you have to use the v3 (beta) to use webpack2.\nCheck this guide https://webpack.js.org/guides/hmr-react/. That guide specifically ask you to install react-hot-loader@3.0.0-beta.6and it will probably break if you install something less-than 3. You can install the react-hot-loader@next tho, which is the branch that always contain the latest 3.0 (beta) release.. ",
    "w-": "thanks @hugorodrigues . I checked out the link but it doesn't seem to specify anything about v3 explicitly?\nare the docs on that page assuming v3 ?. ah ok. i totally did not read the line in the guide talking about installing via npm.\nthanks. Ok so i finally found the time to get this working. kind of. the remaining issue is that if there is an error, the hot reload breaks again with this error in console\n\nIgnored an error while updating module\n\nThis happens even after you fix the error.\nIf anyone knows what else I'm doing wrong here and can provide guidance please help.\n------------ REFERENCE ---------------------------------------------------\nFor those seeing this post and looking for answers, the guide @hugorodrigues  references above is  correct. Here are some specific things I had to pay special attention to:\n1. Make sure your webpack-dev-server AND webpack are both updated. at time of writing this is what i've got\njson\n\"react-hot-loader\": \"^3.0.0-beta.6\",\n\"webpack-dev-server\": \"^2.3.0\",\n\"webpack\": \"^2.2.1\",\n2. in the webpack config for entry, 'react-hot-loader/patch' needs to be the first item.\nhttps://webpack.js.org/guides/hmr-react/#webpack-config\n3. if you are using babel but not a .babelrc file (i.e. you define your babel-loader settings in webpack config, this is how mine looks. pay specific attention to the first preset\njs\n {\n        test: /\\.js[x]*$/,\n        exclude: /(node_modules|bower_components)/,\n        use:[               \n              {loader: 'babel-loader',\n               options: {presets: [['es2015', {'modules': false}],\n                                   'react', ],\n                         plugins: ['transform-decorators-legacy',\n                                    'babel-plugin-transform-class-properties',\n                                    'react-hot-loader/babel'],\n                        },\n              },\n        ]    \n }\n4. For each of my react applications have to add the code as described here:\nhttps://webpack.js.org/guides/hmr-react/#code\n. @wkwiatek no worries. I hope it helps.\n\nI'm going to close the issue right now as RHL 1.x is not going to work with webpack 2. However, you can switch to v3 (currently in beta).\n\nIn case it wasn't clear, I did switch to the v3. (i did npm install webpack@next as per the guide).\nSome feedback, my current experience was that existing documentation wasn't clear regarding RHL 1.x not working with webpack 2 and the migration path was not obvious (at least to me) even after going through available docs.\n. ",
    "fijiwebdesign": "Note: I had to add this before rendering the component for stateless components to always reload with HMR. \nif (module.hot) {\n   module.hot.accept()\n }. ",
    "earnubs": "If you also need to update state this gist might be helpful https://gist.github.com/earnubs/c566cf6e3d85e5655907a876379c0d84. ",
    "adipascu": "If you use react-hot-loader/babelor react-hot-loader/webpack on all jsx files it could only add the import into files that contain react components.. Hi @joy-yu \nFrom the documentation I see that module.hot.accept requires a string as the first parameter.\nI think the readme example is correct.\n. @joy-yu You are not using the api as designed but it is still working. \nI noticed that the documentation from https://webpack.js.org/api/hot-module-replacement/#accept is a bit different than the source code. If the first parameter is a function, it accepts the current module (main.js in your case).\nTry replacing the call with module.hot.accept(() => { }), you can notice that it still works.\nI am not sure what is the underlying issue here. Try to make a smaller sscce that is easier to check and debug.\n. ",
    "sontek": "I figured this out.  You need to include the polyfills BEFORE patch.  I was following the docs that it should be the first thing in the entry but it should be the first thing AFTER babel-polyfill. @peter-mouland Yeah, thats actually what we've been doing.  We are trying to stop doing that. The reason is because we want to have our developers run the selenium tests on their codebase before sending the code up for review.  Currently they just push up and let the CI server run it because they can't run it against their dev instance.\nThey can't just do yarn run selenium because then it has to spin up a whole new instance of the apps and run webpack and all that which takes forever.  We want them to be able to target their already running and already compiled site.. ",
    "arjun810": "Had the same issue, but moving it after babel-polyfill makes phantomjs die for me now.. ",
    "msathis": "Sure. Will create a minimal reproducible repo.. This was an issue with webpack-hot-middleware. After removing it, this issue isnt occurring any more.. ",
    "dKab": "Upadating react-hot-loader to @next tag resolved the issue. No errors in console now.. http://giphy.com/gifs/26xBBgDwvWc4wjzeE here's animation of described behavior. Ok, so apparently something was wrong with my server setup because when a I tweaked a few things it  finally worked. Thanks!. ",
    "jainprash": "@dKab - Can you let us know, what did you tweak to fix it. I am facing the same issue, with exact same setup as you had ( webpack-middleware integrated with node) . The console log is correclty reflected, but browser does not refresh automatically.. ",
    "aguynamedben": "+1. I'm a noob to React and found this error message to be very frustrating until I found this ticket, saw @mattkrick's description of stateless components, and read this article references in the Redux docs that explains the difference between Presentational and Container components.\nIf it helps to understand the pain for a noob, here's the wrong thing I was doing that probably isn't uncommon when somebody is working on their first React project.\nAdding to routes.js but forgetting to import the new container component\n```js\n/ eslint flowtype-errors/show-errors: 0 /\nimport React from 'react';\nimport { Switch, Route } from 'react-router';\nimport App from './containers/App';\nimport HomePage from './containers/HomePage';\nimport CounterPage from './containers/CounterPage';\nimport SearchPage from \"./containers/SearchPage\";\n// Here I should be importing LoginPage since it's used below, but I didn't!\nexport default () => (\n  \n\n\n\n\n\n\n\n);\n```\nThere was one other similar time I ran into it, where I was using a variable I failed to import, but I forgot exactly where.\nThanks for the work you do on this project! Just trying to help and give a noob's perspective.. ",
    "innerdaze": "@calesce that's not a difference :). ",
    "abzfarah": "+1 \nconfused as well. ",
    "AntonioRedondo": "I understand that react-hot-loader makes a per-component hot reload rather than a full-page refresh and that it pairs nicely with webpack-dev-server. But if you're using webpack-hot-middleware with your own Express server, why would you like to also use react-hot-loader if webpack-hot-middleware already implements per-component hot reload?. ",
    "eugeniaguerrero": "+1\n@calesce I'd love to understand why, like @AntonioRedondo mentioned, you'd also use react-hot-loader if webpack-hot-middleware already implements per-component hot reloads?. ",
    "jordilondoner": "@AntonioRedondo after researching a bit on the matter, it looks to me that react-hot-loader adds some extra features on the mix if you are using React and or Redux such as keep the component state upon hot reloading and it also facilitates the use of some other specific Redux dev tools whereas webpack-hot-middleware takes care only of hot reloading a module. I have to say though that the whole thing feels rather confusing.. ",
    "orpheus": "So you don't need to use webpack-hot-middleware to use react-hot-loader? \nIf I were to use just react-hot-loader, what would the setup be like? Do I need to use the HMR plugin still?. ",
    "dpoint01": "+1 to @Always-Sunny's question. Should we be using  react-hot-loader in combination with webpack-hot-middleware or instead of?. ",
    "ajGingrich": "@dpoint01 I believe it is in combination but I currently working on setting something up myself. \n\nThis module is only concerned with the mechanisms to connect a browser client to a webpack server & receive updates. It will subscribe to changes from the server and execute those changes using webpack's HMR API. Actually making your application capable of using hot reloading to make seamless changes is out of scope, and usually handled by another library.\nIf you're using React then some common options are react-transform-hmr and react-hot-loader.\n\nfrom webpack-hot-middleware readme. ",
    "chshouyu": "In my project, I use webpack-hot-middleware with react-hot-loader on my own express server, when I totally remove react-hot-loader, I found it actually behave the same result.. ",
    "chenfanggm": "I can't get react-hot-loader work together with webpack-hot-middleware.\nAnyone has successful example to share?. ",
    "kvn1351": "Why does this have to be so damn complicated? And why isn't this written on one and the same doc page?. ",
    "fatfatson": "@jordilondoner could you give some example for what could not be done when only use webpack-hot-middleware? I found it nearly does all the things of hot update I want, I don't know whether I need still put react-hot-loader to my config.. @theKashey I have made a express server and use only webpack-hot-middleware(&webpack-dev-middleware) but without react-hot-loader,  my react component(&mobx store) is already get hot updated.\nso what's the purpose of react-hot-loader? is it really necessary?. ",
    "AndrejGajdos": "I would also like to know if react-hot-loader makes sense alongside webpack-hot-middleware.. @theKashey thanks. ",
    "Umbrellagun": "Agreed that this is all not as clear as it should be. There's still a mountain of dependencies to install (used to be larger) and the configuration for any direction you went was (is still) heavy. A notably unclear/confusing part of this is how react-hot-loader and webpack-hot-middleware interact with each other when it comes to the script that should run. For react-hot-loader the docs say you should use \"webpack-dev-server --hot\", but my understanding is that if you use webpack-hot-middleware, you are no longer using webpack-dev-server. But there are no comments that I found about this.. It seems like react-hot-loader forces you to use webpack-dev-server. But my understanding is that one of the reasons you might use webpack-hot-middleware is to specifically not use webpack-dev-server so you can instead use your own server file instead of running two servers. Am I off base?. ",
    "BerndWessels": "The problem actually comes from the update from redux 5.0.2 to redux 5.0.3.. @calesce For me it looks like the store becomes disconnected somehow - components don't break - actually after some more digging in 5.0.2 there is a weird effect that after the 1st hmr the state is still fine but after the 2nd hmr and then ongoing it becomes like a toggle where only every other state change is reflected by connected components. in 5.0.3 its completely broken/the components seem to be connected to a state that is not modified by actions anymore - or actions do not modify the state that is connected to the components.\nThere is a very simple demo repo you can find here.\nI also noticed that hmr with react-hot-loader 3.0.0-beta.6 became a bit flaky/unreliable. So sometimes hmr just doesn't work until a full page reload and such things. But that might not be related to the react-redux problem which can reliably be reproduced.. @theKashey I am confused now :(\nWhat is the solution to hot-loading and hooks for create-react-app ? react-app-rewired ?\nI really want to avoid to use a forked react-dom if possible.. ",
    "petetnt": "Edit: Disregard most of this, it seems to have come back with beta.5 too\nNot sure if it's related, but I think the issue is not with react-redux but with react-hot-loader:  tried with different options and the following happens:\nreact-hot-loader@3.0.0-beta.5, react-redux 5.0.3\n\nHot reloading works as expected\n\nreact-hot-loader@3.0.0-beta.6, react-redux 5.0.3\n\nLoading the page fails with\n\nUncaught TypeError: Cannot read property 'shape' of undefined\n    at eval (eval at ./node_modules/react-redux/es/utils/PropTypes.js (main.js:5650), <anonymous>:7:73)\n    at Object../node_modules/react-redux/es/utils/PropTypes.js (main.js:5650)\n    at __webpack_require__ (main.js:660)\n    at fn (main.js:84)\n    at Object.eval (eval at ./node_modules/react-redux/es/components/Provider.js (main.js:5570), <anonymous>:3:75)\n    at eval (eval at ./node_modules/react-redux/es/components/Provider.js (main.js:5570), <anonymous>:73:30)\n    at Object../node_modules/react-redux/es/components/Provider.js (main.js:5570)\n    at __webpack_require__ (main.js:660)\n    at fn (main.js:84)\n    at eval (eval at ./node_modules/react-redux/es/index.js (main.js:5642), <anonymous>:1:79) \nreact-hot-loader@3.0.0-beta.6, react-redux 5.0.2\n\nLoading the page fails with:\n\nUncaught TypeError: Cannot read property 'shape' of undefined\n    at eval (eval at ./node_modules/react-redux/es/utils/storeShape.js (main.js:5666), <anonymous>:5:105)\n    at Object../node_modules/react-redux/es/utils/storeShape.js (main.js:5666)\n    at __webpack_require__ (main.js:660)\n    at fn (main.js:84)\n    at Object.eval (eval at ./node_modules/react-redux/es/components/Provider.js (main.js:5570), <anonymous>:4:76)\n    at eval (eval at ./node_modules/react-redux/es/components/Provider.js (main.js:5570), <anonymous>:75:30)\n    at Object../node_modules/react-redux/es/components/Provider.js (main.js:5570)\n    at __webpack_require__ (main.js:660)\n    at fn (main.js:84)\n    at eval (eval at ./node_modules/react-redux/es/index.js (main.js:5642), <anonymous>:1:79)\nreact-hot-loader@3.0.0-beta.5, react-redux 5.0.2\n\nHMR works just fine\n\nI tried to debug the issue but only change I can think of is https://github.com/gaearon/react-hot-loader/issues/396 \ud83e\udd14 . ",
    "pisrael": "For me, the problem was with react-redux. I was using version 5.05 of react-redux, went back to version 4.4.8 and it solved the issue. I'm not using react-hot-loader.\nThe project uses typescript. The @types/react-redux version refers to version 4, no idea if that could be affecting the compilation by somehow providing wrong types of the lib, as going back to version 4 solved the issue I did not try to remove @types/react-redux to test this hypothesis.\n. ",
    "und3fined": "Now it work.  You can clone the repo and test.\nI change\n```\nimport App from './App';\nconst rootEl = document.getElementById('root');\nconst render = (Component: any) => {\n    ReactDOM.render(, rootEl)\n};\nrender(App);\nif (module.hot) {\n    module.hot.accept('./App', () => render(App))\n}\n```\nto\n```\nimport App from './App';\nconst rootEl = document.getElementById('root');\nconst render = (Component: any) => {\n    ReactDOM.render(, rootEl)\n};\nrender(App);\nif (module.hot) {\n    module.hot.accept('./App', () => {\n    // I do not know why!\n    // if without this line, the hot reload not work!!!\n    // no document for this issue.\n    const NextApp = require(\"./App\").default;\n\n    // You can use 'App' or 'NextApp'\n    render(NextApp);\n});\n\n}. ",
    "izhaknys": "This is odd!\nThis actually goes against the docs.\nSo I wonder if the docs are wrong?. Could be related to https://github.com/gaearon/react-hot-loader/issues/514#issuecomment-288482049. I'm having the same issue, albeit using a different config than yours.\nFor all the debugging I've done, it seems that awesome-typescript-loader might have something to do with it.\nWhen comparing the updates (the added sources on the source tab in chrome) between babel-loader and awesome-typescript-loader (that uses babel), they are similar with one exception.\nThis is babel-loader:\n```\nvar _temp = function () {\n  if (typeof REACT_HOT_LOADER === 'undefined') {\n    return;\n  }\nREACT_HOT_LOADER.register(Root, 'Root', '/Users/roey/Development/react-hot-loader-minimal-boilerplate/src/containers/Root.tsx');\nREACT_HOT_LOADER.register(_default, 'default', '/Users/roey/Development/react-hot-loader-minimal-boilerplate/src/containers/Root.tsx');\n}();\n```\nAnd this is awesome-typescript-loader:\n```\nvar _temp = function () {\n  if (typeof REACT_HOT_LOADER === 'undefined') {\n    return;\n  }\nREACT_HOT_LOADER.register(Root, \"Root\", \"/Users/roey/Development/react-hot-loader-minimal-boilerplate/src/containers/Root.tsx\");\n}();\n```\nSo as you can see, the latter is missing the 'default' export, which could be the source of the problem.. I managed to get it to work by setting useTranspileModule to true in the awesome-typescript-loader.\nYou'd also need to set in tsconfig.json:\n\"jsx\": \"preserve\", . Forgot to mention (`tsconfig.json`):\n\n    \"module\": \"none\",\n\nAs for jsx - that error makes sense since if it is not tsc that transpiles them, what will? In my setup I'm using babel.\n. Here's the setup that works for me:\nUsing react-hot-loader-minimal-boilerplate\ntsconfig.json:\njson\n{\n    \"compilerOptions\": {\n        \"outDir\": \"./dist/\",\n        \"sourceMap\": false,\n        \"noImplicitAny\": true,\n        \"isolatedModules\": true,\n        \"module\": \"none\",\n        \"target\": \"es6\",\n        \"jsx\": \"preserve\",\n        \"moduleResolution\": \"node\"\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\nserver.js:\n```javascript\nvar path = require('path');\nvar webpack = require('webpack');\nvar express = require('express');\nvar config = require('./webpack.config');\nvar app = express();\nvar compiler = webpack(config);\napp.use(require('webpack-dev-middleware')(compiler, {\n  publicPath: config.output.publicPath\n}));\napp.use(require('webpack-hot-middleware')(compiler));\napp.get('*', function(req, res) {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\napp.listen(3000, function(err) {\n  if (err) {\n    return console.error(err);\n  }\nconsole.log('Listening at http://localhost:3000/');\n});\n```\nwebpack.config.js:\n```javascript\nconst webpack = require('webpack')\nconst path = require('path')\nmodule.exports = {\n  devtool: 'source-map',\nentry: {\n    'app': [\n      'babel-polyfill',\n      'react-hot-loader/patch',\n      'webpack-hot-middleware/client',\n      './src/index'\n    ]\n  },\nresolve: {\n        extensions: [ '.ts', '.tsx', '.js', '.jsx' ]\n  },\noutput: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/',\n    filename: '[name].js'\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  module: {\n    rules: [\n      {\n        test: /.tsx$/,\n        exclude: /node_modules/,\n    loader: 'awesome-typescript-loader',\n    query: {\n        useTranspileModule: true,\n        useBabel: true,\n        useCache: true,\n    }\n  }\n]\n\n}\n}\n```\n.babelrc:\njson\n{\n  \"presets\": [\n      [\"es2015\", {\"modules\": false}],\n      \"react\"\n  ],\n  \"plugins\": [\n    \"react-hot-loader/babel\"\n  ]\n}. ",
    "mcrawshaw": "@wkwiatek @calesce anything holding this back?. ",
    "alexilyaev": "Guys, please merge this, or add an option to disable the RedBox (ideally an RedBox opt-in option).\nThis is a long standing issue and it's annoying.\nThe way it is now, it forces us to add a hacky line when using AppContainer:\ndelete AppContainer.prototype.unstable_handleError;\nor set a custom errorReporter, based on:\nhttps://github.com/gaearon/react-hot-loader/blob/master/docs/TipsAndTricks.md\nBoth of which should not be something a developer needs to think about when trying to setup hot-reloading, especially since it's a complicated process as it is.. Is <AppContainer>  really needed?\nRemoving it solves the issue for me.\nLooks like it's using:\njs\n      // Force-update the whole tree, including\n      // components that refuse to update.\n      deepForceUpdate(this);\nI guess it was added to solve some edge cases.\nBut it's not logical that other components get re-rendered when we change only 1 component.. @th3fallen Actually it did not work, for some reason thought it did.\nCan we help in a any way?\nSome direction would be nice.. Did some more tests...\nhttps://github.com/alexilyaev/react-es6-starter/tree/hmr-test (hmr-test branch)\nLooks like I had the new ModuleConcatenationPlugin enabled and it screwed things up.\nAfter commenting it out, things work as expected.\nThere's s counter in Root, changing some text in Hello does not re-render Root, only Hello.. Still an issue.\nI've upgraded to latest versions of React, react-hot-loader and MobX.\n\nStill causes a remount when changing something in render\nExceptions in componentWillUnmount still cause a page reload\nAlso, if I remove @inject and leave only @observer, the HMR doesn't work at all (meaning, changing something in render does not hot-reload the component or anything)\n\nI do get something new if I comment out the throw I have in componentWillUnmount and change something in render:\n```\npatch.dev.js:138 React Hot Loader: this component is not accepted by Hot Loader. \nPlease check is it extracted as a top level class, a function or a variable. \nClick below to reveal the source location: \n \u0192 Navigator() {\n    __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this, Navigator);\nvar _this = __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_possibleConstructor\u2026\n\n```\nThe Navigator component looks fine though:\n```\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\n@inject('todos')\n@observer\nclass Navigator extends React.Component {\n  constructor() {\n    super();\nconsole.log('Navigator: constructor');\n\n}\ncomponentWillUnmount() {\n    console.log('Navigator: componentWillUnmount');\n    // throw new Error('123');\n  }\nrender() {\n    return (\n      \n\n          Dynamo 1234566786\n        \n\n    );\n  }\n}\nexport default Navigator;\n```\nIf I ditch the decorators and use them directly:\n\nexport default inject('todos')(Navigator); - Works as expected, without the patch.dev.js:138 error\n\nexport default inject('todos')(observer(Navigator)); - Does not hot-reload at all. @theKashey I've updated the repo with v4.0.0-beta.6 and updated the missing parts based on the instructions in getting-started:\n\n\nAdded <AppContainer>\n\nProper use of module.hot.accept\n\nI've also tried your example wrapping hot around Routes (with and w/o).\nThe test repo link again:\nhttps://github.com/alexilyaev/react-hmr-uncaught-error\nResults\nAfter changing 123 in navigator.js > render:\n\nI don't get the warning anymore (yay!)\nBut, the component is re-mounted (or something), twice! I see:\n```diff\nRoot render\nNavigator: constructor\nHello: constructor\nRoot render\nNavigator: constructor\nNavigator: constructor\nRoot render\n```\ncomponentWillUnmount was not called at all, how can that be if the constructor was called?\nWrapping Routes with hot(module)\nSuppressed componentWillUnmount call somehow\nDoesn't help with the re-mounting\n\nContinued...\n\nRemoving the decorators above Navigator (leaving plain class), even weirder:\n\ndiff\nRoot render\nNavigator: constructor\nHello: constructor\n+ Navigator: constructor\n+ Navigator: constructor\n+ Navigator: constructor\n+ Navigator: constructor\n+ Root render\n+ Root render\n- When not wrapping Routes with hot(module), componentWillUnmount is called and the throw is shown in the console as expected (does not reload the page as it originally did \ud83d\udc4d). Ahm, for a second I got confused as what was I expecting from RHL in the first place.\nSo I watched Dan Abramov's talk on Hot Reloading with Time Travel again.\nThe key points, in my words:\n\nRHL proxies the methods of the component, so when you change something in render, it just calls the new render\nThe component does not re-mount, does not lose it's state\n\nWasn't that the whole point of RHL? (besides not reloading the whole page)\nAs it is now, the component does remount, and I would lose component state.. @neoziro Oh, I stand corrected, constructor and render do run again but without a remount, I'll some more tests.\nBut this is true only with the hot(module) wrapping around Routes, without it it does remount.\nWill post some more test results soon.. ## Good News\nI've updated the repo to have running counters:\n- Hello - Has a React state counter (by setInterval in componentDidMount)\n- Navigator - Has a MobX @observable counter (by setInterval in componentDidMount)\nResults\n\nWith hot(module) around Routes, everything works as expected, changes in any of the components does not re-mount anything and both counters continue running.\nWithout it, Hello and Navigator gets re-mounted, the React state is reset (obviously) and MobX state doesn't (since it's in a separate module).\nInteresting finds:\nRemoving <AppContainer> and the module.hot.accept in Root.js, everything still works \ud83d\ude2e \nRemoving react-hot-loader/patch from webpack.config.js > entry, still works\n\nConclusions\n\nAs far as I'm concerned, this issue is fixed and the latest RHL supports MobX decorators just fine.  \nIs <AppContainer> and module.hot.accept in Root.js still needed? react-hot-loader/patch?\nWrapping Routes with hot(module) is not documented I think, and without it it doesn't work. Oh cool, what a relief \ud83d\ude0a.\n\nClosing.\nThanks for the support.. ",
    "robinvenneman": "Also having some trouble with the HMR sometimes not working but I've tried to reproduce this with a clean react-hot-boilerplate setup and adding the react-portal modal, seems to work. \n@ryanheathers did you see anything in the console similar to Ignored an update to unaccepted module ...? The issue might also be caused by something else, not by ReactDOM.unstable_renderSubtreeIntoContainer. @ryanheathers if that is the case then it can be fixed by adding that module to the module.hot.accept([]) array.. ",
    "ryanheathers": "@robinvenneman yep, I've seen console messages similar to that. The root cause is still a mystery to me and unfortunately solving it hasn't been a priority right now. Will try to dig in further at some point.. ",
    "SidKwok": "Fount the solution in this issue.. Thanks for your feedback! It sounds reasonable to use different file in development, but it's a little bit annoying to do that. Hope there will be a better way to solve this rhl-and-code-split situation.. vue-hot-api doesn't seem to have such issue, maybe it's not related to webpack?\nYou can use vue-cli to start a new project to test its async-component.. @theKashey Thanks a lot! Both deps solve this issue!\nI will try react-hot-component-loader in my project.. import 'babel-polyfill' in entry file?. Not only IE10, but lots of android(4.4, it's still a common used version in China) browsers don't support these syntax.. ok, I\u2019ll try it. But where is v3 branch?. ",
    "SystemParadox": "I started upgrading to v3 and ran into a similar issue with our popup system. When we call renderPopup(<FooPopup />), it adds a separate div with its own react tree. The popups are totally independent - the original page retains no state to say that the popup is open, so re-rendering the page does not re-render the popup.\nThis works fine with v1, but I can't think how to make this work with v3 when the component is imported in one module (the page) and rendered in another (the popup manager).. ",
    "Aghassi": "@theKashey Sorry to post on a closed post, but will this issue been addressed in the future since it use to be supported? I've looked through the docs and commits and don't seem to see anything. If it isn't supported, is there a recommended alternative for users who require this functionality?. @theKashey Sure, let me try and define the problem set.\nIn https://github.com/gaearon/react-hot-loader/blob/v1.0.6/CHANGELOG.md#106 there was a change that allowed you to specify the root component in environments where React is standalone (this means external to the webpack bundle, or loaded by some other entity). In our use case, we have a Require base system that loads our webpack bundle into the browser as well as React. This means that the bundle is not in charge of knowing the render cycle for something like a hot reload. If we use hot reload as is, the server (which is not local, it is remote) will not know how to respond to the reload request, resulting in nothing happening.\nEssentially, I'm looking for a way to remedy this given that v3 and v4 don't seem to support the Injection class anymore. The method that the original author provided is similar to what we used, hence why I posted in this thread.. @theKashey That looks promising! I assume that goes in the file that is bundled and I just do the normal hot(module)(component) syntax? Or is there more to it? Documentation is a bit sparse (I\u2019m happy to contribute back my findings so others can leverage it).. ",
    "jeud": "Finally I have fixed it, thanks. @ambethia, this configuration is working for me\nTerminal\nnpm install react-hot-loader@next\n\nwebpack.config.js\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nmodule.exports = {\n    entry: './entry.js',\n    devServer: {\n        inline: true\n        hot: true,\n    },\n    module: {\n        loaders: [\n            {\n                test: /.js?$/,\n                loader: 'babel-loader?cacheDirectory',\n                exclude: /(node_modules)/\n            }\n        ]\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n    ]\n}\n```\nentry.js\n...\nif (module.hot) {\n    module.hot.accept()\n}\n\n.babelrc\n{\n    presets: ['stage-0', 'es2015', 'react'],\n    plugins: ['react-hot-loader/babel']\n}. @ambethia i'm using webpack 2.x but I still prefer to setup the loader using webpack 1.x syntax style. ",
    "MmtBkn": "I was just setting up new project. I had same problem and accept() solved it. \nIt also works without [\"env\" , {modules : false}], is it safe?. ",
    "perrywang": "known issue not support functional components. Resolved.. ",
    "kilpatty": "I have this exact same issue occurring currently - Although I'm not entirely sure that this is an issue.. ",
    "HeyHugo": "I think the behaviour is the entire path of components not the whole tree. If so I think I've got the same issue. All parent components up to the root are being renewed when a \"leaf\" component is updated for me.. I'm experiencing the same problem.\nI've got a project where components that has state injected from the store will not reload and the same goes for all child components to those components.\nHowever components without store connection or ancestors reloads just fine.\nVersions: \n- node 7.6.0\n- react-redux@5.0.3\n- redux@3.6.0\n- react-hot-loader@3.0.0-beta.6\n- webpack@2.2.1\n- webpack-dev-server@2.4.1\n. I got this working now. There were two things I needed to change.\nFirst I was wrapping the App component in with redux's \\<Provider> I moved it inside App instead.\nand then I tried what someone suggested here https://github.com/webpack/webpack-dev-server/issues/100#issuecomment-271146394\n..and re-imported the App component inside if (module.hot) {...}\nLike this:\n// Hot Module Replacement API\nif (module.hot) {\n  const NextApp = require('components/App').default;\n  module.hot.accept('components/App', () => { render(NextApp) })\n}. ",
    "Judahmeek": "Isn't this due to https://github.com/gaearon/react-hot-loader/blob/master/src/AppContainer.dev.js#L36 ?. ",
    "SamHH": "I'm experiencing the same issue, though it's possible it's a configuration issue. I'm using Webpack's code splitting to split each route in the app, if that's pertinent.. In-case this helps anyone:\nMy issue, as discovered by someone else in another thread, was that I was using React Router 3 with async routes. Moving to RR4 - sync, at least - appears to have solved it for me.. ",
    "villanuevawill": "@calesce Also seeing this issue... I'd love to get an answer here... I can upload an example if you need it, but it sounds like it is affecting multiple people.\nIs this the intended behavior or not?. ",
    "vojty": "Same issue here, I have:\nreact-hot-loader\": \"3.0.0-beta.6\"\nin babel.js\n...\n\"plugins\": [\n      \"react-hot-loader/babel\"\n]\n...\nin webpack.config.js\n...\n'react-hot-loader/patch',\n'webpack/hot/dev-server',\n`webpack-hot-middleware/client?${root}`,\n'entry.js'\n...\nin app.jsx\n```\nfunction renderApplication(RootComponent) {\n    ReactDOM.render(\n        \n\n\n\n\n\n,\n        document.getElementById('app')\n    );\n}\nif (module.hot) {\n    module.hot.accept('./components/Root', () => {\n        renderApplication(Root);\n    });\n}\n```\nTree A -> B -> C\nIf I edit C, always the whole tree is updated and components are remounted, but redux state is kept and fine. After some investigation I found out that this works:\nA is root component\nexport default injectIntl(A);\nbut this does not:\nexport default connect(rootSelector, dispatchToProps)(injectIntl(A));\nthis issue looks similar https://github.com/gaearon/react-hot-loader/issues/513. it works, thanks! :). ",
    "linsmalldragon": "@vojty @gaearon  What can i do to avoid this issue instead of compose? . my redux version:\n\"react-dom\": \"^15.4.2\",\n\"react\": \"^15.4.2\",\n\"redux\": \"^3.6.0\"\n\"react-redux\": \"^5.0.1\"\n\"webpack\": \"^2.2.0\", \n \"webpack-dev-server\": \"^2.2.0\". ",
    "cjnaude": "I'm also experiencing this issue. Is this intended behaviour?. I fixed my issue with the help of this link (look at the answer by Armour).\nI had this code originally:\nif (module.hot) {\n  module.hot.accept();\n}\nwhich I then replaced with:\nif (module.hot) {\n  module.hot.accept(\"./components/Root\", () => {\n    const Next = require(\"./components/Root\").default;\n    render(<Next />);\n  });\n}\nWorks perfectly now!\n. @theKashey Apologies. I'm using .NET Core, and it seems half my problems are stemming from the fact that the hot module reloading is being configured using the \"UseWebpackDevMiddleware\" method of the IApplicationBuilder (no config in webpack itself). I've not been able to find much documentation on this, so I'm just happy to have something that works. But I completely agree with you, I need to update to webpack 3 and move over my HMR config. Apologies for posting an obsolete answer.. ",
    "jamesmfriedman": "Having the same problem. Have a vanilla setup from eject create-react-app and doing the minimum in the migration guide. Everytime I change a css class, the entire tree re-renders. Losing my mind over here :( . Ok, nightmare scenario related to HOC. I had written something a bit differently than I usually do... \n```javascript\n// This anonymous example DOES NOT work with react-hot-loader\nexport const Component = connect(stateToProps)(class extends React.Component {\n...\n})\nexport default Component\n```\n```javascript\n// this example DOES work\nclass Component extends React.Component {\n...\n})\nexport default connect(stateToProps)(Component)\n```\n. A little bit of documentation would\u2019ve gone a long way for me. I found a few different posts about issues with HOC but they were more about why they were an issue and not how to avoid the problem. \nFor me, a few simple good and bad examples would have been super helpful! \nHappy it\u2019s working again. The 4 hours of troubleshooting has already been regained in time saved from RHL. \nSent from my iPhone\n\nOn Sep 21, 2017, at 6:38 AM, Greg Berg\u00e9 notifications@github.com wrote:\n@theKashey we should document it..\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I am also having this problem :(. @thtliife your suggestion did not solve it for me. I currently only have webpack's module alias defined. I tried adding in the babel-module-resolver but that didn't change anything.. Lots and lots of troubleshooting later... it appears react-hot-loader is fickle when using other babel environment presets. When using the \"env\" preset and targeting older browsers, I couldnt get it to reload. The only change I finally made was using the \"latest\" preset and setting es2015 modules to false as suggested in the react-hot-loader minimal example. Sigh of relief...\n\n{\n  \"presets\": [\n    [\n      \"latest\", {\n        \"es2015\": {\n          \"modules\": false\n        }\n      }\n    ],\n    \"react\"\n  ],\n  \"plugins\": [\n    \"transform-object-rest-spread\",\n    \"react-hot-loader/babel\"\n  ]\n}. ",
    "joshjg": "I'm experiencing this issue (not using react router, any version). @neoziro Do we know what the underlying cause was?. @theKashey \n\nasync components will reconcile them self. No need to mark components as hot - they are all hot\n\nRunning beta.21, this doesn't seem to be the case. Unless I wrap the async component with hot(module) any change causes it to reload completely.. 1. Basically the following:\ncomponentDidMount() {\n    import(\n        /* webpackChunkName: \"[request]\" */\n        `modules/${someDynamicValue}`\n    ).then(({ default: Component }) => this.setState({ Component }));\n}\nAnd webpack handles the rest.\n\n\nI don't see any additional output when using that. . Correct, I have the root component on the top level wrapped with hot(module). Changing something in the async child causes this root to reload (unless I wrap the async child with hot(module) as well).. The loader component is the one that unmounts. None of its ancestors unmount.. ```js\nclass ModuleLoader extends React.Component {\n    static propTypes = {\n        moduleId: PropTypes.string.isRequired,\n        moduleName: PropTypes.string.isRequired\n    };\nstate = { Component: null };\ncomponentDidMount() {\n    this.mounted = true;\nimport(\n    /* webpackChunkName: \"[request]\" */\n    `modules/${this.props.moduleName}/src`\n).then(({ default: Component }) => {\n    if (this.mounted) {\n        this.setState(() => ({ Component }));\n    }\n});\n\n}\ncomponentWillUnmount() {\n    this.mounted = false;\n}\nrender() {\n    const { Component } = this.state;\nif (Component) {\n    return <Component {...this.props}/>;\n}\n\nreturn <Placeholder/>;\n\n}\n}\n```. FYI - beta 22 did not fix this issue. @theKashey Couple things\n\n\nI messed up my babel config - this was causing the unmounts. After fixing this, the loader no longer unmounts, but instead the async child never updates.\n\nI tried using setConfig({ logLevel: 'debug' }) (instead of debug: true) and found the following error:\nReact-hot-loader: reconcilation failed due to error TypeError: Cannot read property 'children' of undefined\n    at eval (react-hot-loader.development.js:978)\nWhich is this line: https://github.com/gaearon/react-hot-loader/blob/next/src/reconciler/hotReplacementRender.js#L125. Yes, I use that pattern all over.. Fixes the error I was seeing, but the end result (for me) is the same - the async child does not update. \n",
    "chbinghu": "@HeyHugo Thank for the solution! It works well!. ",
    "yjkogan": "I did not need to move the Provider into the app but re-importing directly inside the accept seemed to fix things. @HeyHugo it looks like you may have a typo doing the require before module.hot.accept? The issue you link to does the require inside, ala\njs\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const App = require('./App').default;\n    render(App);\n  });\n}\nI fought with this a long while, so for anyone else here's the basics of my setup for react / redux / react-router v4.\n```js\n// index.js (the entrypoint for webpack)\nrequire('../css/index.scss');\nrequire.context('../images', true, /^.\\//);\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { Provider } from 'react-redux';\nimport { compose, createStore } from 'redux';\nimport persistState from 'redux-localstorage';\nimport rootReducer from './state';\nconst enhancer = compose(\n  persistState('settings'),\n);\nconst initialState = undefined; // eslint-disable-line no-undefined\nconst store = createStore(rootReducer, initialState, enhancer);\nimport App from './App';\nconst rootEl = document.getElementById('Root');\n// Render the main component into the dom\nconst render = (Component) => {\n  ReactDOM.render(\n    \n\n\n\n,\n    rootEl\n  );\n};\nrender(App);\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const App = require('./App').default;\n    render(App);\n  });\n}\n```\n```js\n// App.jsx\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavigationRoute from 'routes/NavigationRoute';\n// Render the main component into the dom\nexport default class App extends React.Component { //eslint-disable-line react/require-optimization\n  render() {\n    return (\n      \n\n\n    );\n  }\n}\n```\n```js\n// NavigationRoute.jsx (simplified)\nimport React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport Header from 'components/Header';\nimport EmergencyRoute from 'routes/EmergencyRoute';\nimport MapRoute from 'routes/MapRoute';\nimport MoreRoute from 'routes/MoreRoute';\nclass NavigationRoute extends React.Component {\n  shouldComponentUpdate() {\n    return true;\n  }\nrender() {\n    return (\n      \n\n\n\n\n\n\n\n\n\n\n    );\n  }\n}\nNavigationRoute.propTypes = {};\nexport default NavigationRoute;\n```. ",
    "davecranwell": "I'm getting this too (see my mistakenly reported ticket here: https://github.com/webpack/webpack/issues/4703)\nIs this if(module.hot) thing the solution, or just a hack? Given that none of the webpack docs indicate this is necessary, they should at least be updated if so.. ",
    "Albert-Gao": "@HeyHugo Hi. Thanks for the solution. If you reimport that module, in if (module.hot), it works, but it seems that the page is doing a force reloading, and all the redux state gets lost. So you sure, in your case, it's an HMR rather than a page reload? Thanks :). Any updates on this?\nI have the same issue.\nand posted an issue here: https://github.com/reactjs/react-redux/issues/787\nHas the steps to reproduce it.. @neoziro Thanks for the reply. My bad, I forgot to wrap the <AppContainer>..... Now everything works. But still curious, when I don't add the <AppContainer>, how could the <App> get the HMR?. @neoziro Thanks for the answer. However, I don't know if my case matches the OP's case or not.\n Seems so according to the symptoms. Consider it's already been a long time without any code to reproduce the issue, I think you can safely close this :). ",
    "qskane": "@HeyHugo  It is works for me  , thanks \nconst NextApp = require('components/App').default;\n  module.hot.accept('components/App', () => { render(NextApp) })\nBTW , when  i use lazy loading , this is still not work for me . ",
    "eric-leihe": "For my case, it was caused by the .babelrc configuration. You need to config the babel to disable module transformation. I do the set as below:\n{\n    \"presets\": [\n        [\"env\", { \"modules\": false }]\n    ]\n}\nThen the reload works well.. ",
    "lucksp": "@ehe888 your comment solved my issue of my Home component not updating in the DOM/reloading the updated file into sources.  The HMR console logging says \"successful\" but it never updated since source file was not being refreshed.\nCan you explain this more?  i am new to Webpack & babel configs.  This is my updated .babelrc file:\n{\n  \"presets\": [[\"env\", { \"modules\": false }], \"react\", \"stage-1\"],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}. ",
    "Derek-X-Wang": "@izhaknys \nThanks a lot for the tips.\nBut I still cannot get it work. \nMy current tsconfig.json is\n{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist/\",\n    \"sourceMap\": true,\n    \"noImplicitAny\": true,\n    \"module\": \"commonjs\",\n    \"target\": \"es5\",\n    \"jsx\": \"react\"\n  },\n  \"awesomeTypescriptLoaderOptions\": {\n    \"useTranspileModule\": true\n  },\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\nMaking \"jsx\": \"preserve\" will cause the loader unable to parse react component.\nerror:\n\nHowever, with \"jsx\": \"react\", react-hot-loader still doesn't work.\nReproducible Demo\ndemo\nAlso, I had tried ts-loader. Its will cause an automatic page refresh which is strange. \n. Thanks a lot for your patient answer!\nIt may be a good idea to open an issue at awesome-typescript-loader.\nIf awesome-typescript-loader is fixed, the setup will be a lot easier.\n. Hi @wkwiatek,\nizhaknys' solution is more like a walkaround.  However, this issue probably has more things to do with awesome-typescript-loader than react-hot-loader.. ",
    "autozimu": "I came across the same issue recently and finally figured a way out.\nJust replace the update part in index.tsx (essentially one line change):\ntypescript\ndeclare var module: any;\ndeclare var require: any;\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => {\n      require(\"./containers/Root\");   // THIS IS IT!\n      render(Root);\n  })\n}. ",
    "rodogir": "@autozimu thanks for the hint!\nFor my setup this works:\njs\nif (module.hot) {\n  module.hot.accept(\"./containers/Root\", () => {\n    render(require(\"./containers/Root\").default);\n  });\n}\nI'm using awesome-typescript-loader without babel. \nHere my tsconfig.json compilerOptions:\njson\n{\n    \"outDir\": \"./dist\",\n    \"sourceMap\": true,\n    \"noImplicitAny\": true,\n    \"module\": \"commonjs\",\n    \"target\": \"es5\",\n    \"jsx\": \"react\"\n}. ",
    "rroslaniec": "https://github.com/webpack/webpack-dev-server/issues/100#issuecomment-283343053. ",
    "sunquan1991": "Having a similar issue with a similar environment:\n1. react-hot-loader v3.0.0-beta.6\n2. react-router v4.0.0\n3. webpack v2.2.1\n4. react v15.4.2\n5. redux v3.6.0\n6. webpack-dev-server v2.4.2\nAll things look good when I make a change:\nUpdates are logged in console like\n[HMR] Updated modules:\n[HMR]  - ./components/Base.js\n[HMR] App is up to date.\nhot-update.js is loaded\nBut the DOM is never updated. \nAnd my code is very similar to this demo except I run the dev server with babel-node server.js. @rpoitras \nI get it working now. My problem is that I didn't render my component correctly.\nI changed it from\njs\nconst element = (\n  <AppContainer errorReporter={consoleErrorReporter}>\n    ...\n  </AppContainer>\n)\nif (module.hot) {\n  module.hot.accept(\"components/Base\", () => { \n    ReactDOM.render(element, document.getElementById(domNodeId))\n  })\n}\nto\njs\nconst renderApp = Component => {\n  const element = (\n    <AppContainer errorReporter={consoleErrorReporter}>\n      ...\n    </AppContainer>\n  )\n  ReactDOM.render(element, document.getElementById(domNodeId))\n}\nif (module.hot) {\n  module.hot.accept(\"components/Base\", () => { renderApp(App) })\n}\nAnd injectTapEventPlugin() shall be moved out of the component that should be hot updated.\nBut these seem fine on your branch. But your entry files are a bit different from those working boilerplates. Try to put react-hot-loader/patch, webpack-dev-server/client?http://localhost:8080, webpack/hot/only-dev-server before your source entry file in the same chunk\nYou can try to follow this demo (the most helpful one AFAIC) as much as possible.\nI guess everyone did something wrong differently. But the actual problem here is the logging. It would be nice if it's possible to log some errors in such situations.. @rpoitras\nOne way to debug this is to first setup a very minimal implementation like a Hello World. Make it work first and then implement with your actual app.\n(actually we are not supposed to discuss usage issue here, the issue with this package is the meaningless logging). @Anima-t3d \nThat usually means there's something wrong with your .babelrc. You need to disable modules transpiling effectively.\n@rpoitras At least you need to replace \"airbnb\" with [\"airbnb\", {\"modules\": false}] in your .babelrc (or just copy and paste .babelrc from one of the demo if it's okay for you). ",
    "rpoitras": "Thanks for the suggestion @retroalgic.  I just tried it.  But the behaviour remained the same.  I'll look closer at the demo you linked.  Maybe I'll see something.. @retroalgic \nI tried many variations on the HMR setup between webpack config and cmd line.  Settled with the webpack configuration style.  Still no luck.  I don't see anything in the bare-minimum demo that helps me.\nI have basically the same setup in both the react-router 3.0.2 and react-router 4.0.0 branches.\n```javascript\n// in webpack.config.js\nwebpackConfig.entry = {\n    js: env.prod ? [\n      'babel-polyfill',\n      PATHS.app  // main index.js app entry point\n    ] : [\n      'react-hot-loader/patch',\n      'webpack-dev-server/client?http://' + HOST + ':' + DEV_SERVER_PORT,\n      'webpack/hot/only-dev-server',\n      'babel-polyfill',\n      PATHS.app\n    ],\n...\nwebpackConfig.plugins = [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin(),\n...\nwebpackConfig.devServer = {\n    hot: true,\n...\n// package.json\n...\n\"scripts\": {\n    \"start\": \"webpack-dev-server --host 0.0.0.0 --progress --env.dev --watch-poll\",\n...\n``. @retroalgic thanks, my.babelrchas themodules: false`\n@Anima-t3d I've tried that before with no luck.  But I thought I don't recall using that implementation with a setup that included react-router-4.  And voila, it works!!! \ud83e\udd47 \nStill does not work with react-router-3 on my setup.  But that's fine with me.  I'll keep moving the ball ahead and move to v4.\nThank both of you so much.  I've spent countless hours trying to get this to work.. This can be closed, example in this working demo\n. @Anima-t3d I'm using:\njavascript\n{\n  \"presets\": [\n    \"airbnb\",\n    [\"es2015\", {\"modules\": false}],\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": [\n    \"transform-class-properties\",\n    \"react-hot-loader/babel\"\n  ]\n}. Ah, I saw it with es2015 and missed @retroalgic was pointing out to add it to airbnb.  Thanks @wkwiatek for getting me to open my eyes. \ud83d\udc4d . ",
    "Anima-t3d": "I had the same issue. I solved it by requiring the module again as described here:\njavascript\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        const NextApp = require('js/App').default;\n        ReactDom.render(\n           ...\n. @rpoitras This is my .babelrc:\n{\n    \"presets\": [\n        [\"es2015\", {\"modules\": false}],\n        \"react-native\",\n        \"stage-0\"\n    ],\n    \"plugins\": [\n        \"react-hot-loader/babel\",\n        \"transform-class-properties\",\n        \"transform-es2015-spread\"\n    ]\n}. ",
    "vraa": "Able to get it working by requiring the module again:\n// Webpack Hot Module Replacement API\nif (module.hot) {\n    module.hot.accept('./containers/app', () => {\n        require(\"./containers/app\");\n        app.render(AppContainer);\n    })\n}\nHowever, the changes do not get applied on the fly. I need to go back to a different component and then come back to a changed component to see the changes. Anyway, this is way better than a full page refresh and losing the entire application state. Thanks to @Anima-t3d for the tip.. ",
    "kud": "My pleasure. ;). Related https://github.com/gaearon/react-hot-loader/issues/242. Neither\njavascript\nexport default {\n  \"presets\": [\n    [\"env\", {\n      \"es2015\": {\n        \"modules\": false\n      }\n    }],\n    \"react\"\n  ],\n  \"plugins\": [\n    [\"import\", { \"libraryName\": \"antd\" }],\n    \"transform-class-properties\",\n    \"transform-object-rest-spread\",\n    \"react-hot-loader/babel\",\n  ],\n}\nnor\njavascript\nexport default {\n  \"presets\": [\n    [\"env\", { \"modules\": false }],\n    \"react\"\n  ],\n  \"plugins\": [\n    [\"import\", { \"libraryName\": \"antd\" }],\n    \"transform-class-properties\",\n    \"transform-object-rest-spread\",\n    \"react-hot-loader/babel\",\n  ],\n}\nwork here with \njavascript\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    // const NextApp = require('./App').default\n    // render(NextApp)\n    render(App)\n  })\n}. ",
    "oshalygin": "It's been three days gents, if there's something wrong with the PR feel free to comment :). ",
    "theduke": "PS: I've also tried to disable the tslint-loader. \nNo effect.. @seamc so this setup is working for you?\n. ",
    "thomhos": "Hi,\nJust checking in with the exact same thing happening :(. ",
    "seamc": "My local, minimal boilerplate contains a few visible changes from your current setup.  I pulled config settings from the @next's  babel migration recommendations.  Outside of that and of note, I use awesome-typescript-loader.  \npackage.json\njavascript\n  \"devDependencies\": {\n    \"awesome-typescript-loader\": \"3.1.2\",\n    \"babel-core\": \"^6.24.0\",\n    \"babel-loader\": \"6.4.1\",\n    \"babel-preset-es2015\": \"^6.24.0\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-stage-0\": \"^6.22.0\",\n    \"react-hot-loader\": \"next\",\n    \"typescript\": \"2.2.2\",\n    \"webpack\": \"^2.3.2\",\n    \"webpack-dev-server\": \"^2.4.2\"\n  },\nwebpack.config.js\njavascript\nmodule.exports = {\n  entry: [\n      'babel-polyfill',\n      'react-hot-loader/patch',\n      './src/index.tsx',\n  ],\n...\njavascript\nmodule: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: [\n          'react-hot-loader/webpack', 'babel-loader', 'awesome-typescript-loader'\n        ],\n        exclude: /node_modules/,\n      },\n    ],\n  }\ntsconfig.json\njavascript\n{\n    \"compilerOptions\": {\n        \"module\": \"es6\",\n        \"target\": \"es6\",\n        \"lib\": [\"es6\", \"dom\"],\n        \"moduleResolution\": \"node\",\n        \"sourceMap\": true,\n        \"jsx\": \"preserve\",\n        \"rootDir\": \"src\",\n        \"allowSyntheticDefaultImports\": true\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ]\n}\n.babelrc\njavascript\n{\n  \"presets\": [[\"es2015\", { \"modules\": false }], \"stage-0\", \"react\"],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\n. Yeah, here's a repo https://github.com/seamc/rhl-tsx-boilerplate. ",
    "DickyT": "@seamc thank u for the demo, do u think this problem can be solved without babel?. finally i solved this https://github.com/DickyT/react_hot_loader_typescript_boilerplate. ",
    "dizel3d": "@theduke I don't no why, but you must explicitly require new App component and put it into startApp argument in accept callback. I've fixed your example. Check it out, please.\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { AppContainer } from \"react-hot-loader\";\nimport App from \"./components/app/App\";\nfunction startApp(App) {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById(\"app-root\"),\n  );\n}\nstartApp(App);\nif (module.hot) {\n  module.hot.accept(\"./components/app/App\", () => { alert(\"accept\"); startApp(require(\"./components/app/App\").default); } );\n}\n```\nI had the same problem. So I took react-hot-boilerplate and transformed it into typescript with minimal changes. Then hot-reloading stopped working anymore. Everything was fine in console, but changes weren't happening on page actually.\n\nThen I fixed the issue like this. But I really don't understand roots of the problem. Does anyone know?\n. Further to my previous comment I found the issue. In case of Typescript __REACT_HOT_LOADER__.register isn't invoked for default. I've compared result bundles of equivalent TS and JS sources:\n\nIt looks like a bug in react-hot-loader.. I added a test to reproduce the issue.. ",
    "jetpack3331": "@seamc way is working . ",
    "Kaijun": "@dizel3d  you saved my day! i don't know why it works, and i'm also wondering why the others don't need it indeed.... ",
    "Kledal": "@dizel3d \nIt is because of typescript and the default export. If you export the App without default and import it like this, it works without the require and .default :\njs\nimport {App} from \"./components/app/App\";\n. ",
    "sjy": "One general workround: \njavascript \nif (module.hot) {\n      // accept all changes, evaluate the whole js file\n      module.hot.accept();\n      render(Root);\n}\nrelated https://github.com/gaearon/react-hot-loader/issues/413\n. ",
    "Place1": "I just had this problem, here's what I ad to use to fix it:\n```\nconst mount = document.getElementById('mount');\nconst render = (Component: any) => {\n  ReactDOM.render(, mount);\n}\nrender(App);\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    render(require('./App').default); // the .default is important\n  });\n}\n```\nI found that just doing render(require('./App')); resulted in a full page reload, but doing render(require('./App').default); gave me the hot-reloading goodness I was expecting!. ",
    "nranas": "I experienced a similar issue where the hot reloading worked the first time after I started the dev server but every subsequent change triggered a full reload since the root component (index.tsx) wasn't accepted. When I switched to awesome-typescript-loader instead of ts-loader it started working with the exact same config.. ",
    "charlieharris1": "If you implement one of the fixes above and are still seeing full reloads React Router V3 may be the cause.. ",
    "olee": "I noticed the same issue as https://github.com/gaearon/react-hot-loader/issues/525#issuecomment-300247983 - default exports are NOT registered (most of the time?) and because of that hot reloading for those components does not work.\nSo this does not work:\n```ts\nimport * as React from 'react';\nimport { withStyles, WithStyles } from 'material-ui/styles';\nconst styles = {...};\nexport const MyComponent: React.SFC> = () => Hello world!;\nexport default withStyles(styles)(MyComponent);\n```\nHowever this one works:\nts\nconst MyStyledComponent = withStyles(styles)(MyComponent);\nexport default MyStyledComponent ;\nMaybe someone could a loader or something that detects those kind of e default export where an expression is used and rewrite them so they use a temporary const?\nEDIT: Also the tag \"fixed in next\" is wrong - I just tried upgrading and can confirm it does NOT work:\njs\nvar styles = function styles(theme) {\n  return {...};\n};\nexports.default = _styles_1.withStyles(styles)(exports.AppLayout); \n(function () {\n  var reactHotLoader = __webpack_require__(\"./node_modules/react-hot-loader/patch.js\").default;\n  var leaveModule = __webpack_require__(\"./node_modules/react-hot-loader/patch.js\").leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n  reactHotLoader.register(styles, \"styles\", \"D:\\\\dev\\\\web\\\\haushalt-tracker\\\\src\\\\components\\\\core\\\\AppLayout.tsx\");\n  leaveModule(module);\n})();\nThe default export is not registered.\nEDIT 2:\nOk this is interesting - even though no register call for the default export is generated, hot reloading seems to work. So I guess switching to react-hot-loader@next solves this problem.\nEDIT 3:\nOk - it does not work correctly - it just does not display a warning any more it seems.\nWhen I try the fixed version, my component is correctly updated while keeping it's state.\nIf I try it without the const fix with @next version, it kills the state (which it does not otherwise).\nSo this issue needs to be fixed in v3 AND v4.. ",
    "andrewdavidcostello": "Just in case someone has the same issue I was having. If you target ES6 with Typescript then apply the hot reload loader it won't work as if messes with the scope of the classes, not sure on the underlying issue.\nloaders: [\n    \"react-hot-loader/webpack\",\n        \"ts-loader\"\n],\nDoes not work.\nloaders: [\n    \"react-hot-loader/webpack\",\n    {\n        loader: \"babel-loader\",\n        query: {\n            presets: [\n                ['es2015', { 'modules': false }]\n            ]\n        }\n    },\n    \"ts-loader\"\n],\nDoes work and retains the state.. ",
    "cyberhck": "JavaScript\nif (appConfig.env === \"development\" && (module as any).hot) {\n  (module as any).hot.accept(\"./rootReducer\", () => {\n    store.replaceReducer((require(\"./rootReducer\").default));\n  });\n}\nThat's how I did that.\n@wkwiatek . Additional info: I had something like the following:\n```JavaScript\nconst composeEnhancers = (appConfig.env !== \"production\" &&\n  typeof window === \"object\" &&\n  window.REDUX_DEVTOOLS_EXTENSION_COMPOSE) || compose;\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n  applyMiddleware(...middlewares)\n));\nif (appConfig.env === \"development\" && (module as any).hot) {\n  (module as any).hot.accept(\"./rootReducer\", () => {\n    store.replaceReducer((require(\"./rootReducer\").default));\n  });\n}\n```\nThen I went ahead and disabled my redux-devtools browser extension, and it works as expected. Although, I don't want to disable those, right now I'm waiting for a confirmation if I can post the code online, does the additional information point to any direction?\nThanks in advance.. looks like this is due to: gaearon/redux-devtools#304 as a work around I did:\nJavaScript\nconst composeEnhancers = (appConfig.env !== \"production\" &&\n  typeof window === \"object\" &&\n  (typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === \"function\") &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({shouldHotReload: false})) || compose;\nBut I'm not sure if shouldHotReload is intended to be used in some other way.. ",
    "ncphillips": "I am also experiencing this. \nThe problem is in the hot loader code of my app, it's getting transpiled to this.\njavascript\nif (true) {\n    module.hot.accept(\"./js/components/Root.tsx\"\"./js/components/Root.tsx\", function () {\n    var NextRoot = __webpack_require__(\"./js/components/Root.tsx\").App;\n    renderApp(NextRoot);\n    });\n}\nEDIT: This is happening with both awesome-typescript-loader and ts-loader which makes me think they're not responsible. @dknlinh this wasn't a react-hot-loader issue for me, it was a webpack issue\nI had both --hot and the HMR plugin in play. ",
    "Ziriax": "We encounter the same issue when compiling with Typescript 2.3, when the actionCreator in the module below is exported and used:\n```\nexport interface Action {\n    type: T;\n    payload: P;\n}\nexport function actionCreator>(type: A[\"type\"]): (payload: A[\"payload\"]) => A {\n    return payload => ({type, payload}) as A;\n};\n``\nWhen theactionCreator` is moved to the module that uses it, the problem does not occur.\nMaybe that helps. . ",
    "heaplabs": "Any updates on this one ?. @neoziro Thanks, you are right, it was a transpilation error.. ",
    "rohannair": "...Nope this one is definitely on me.. I had a typo, it wasn't a real bug.. ",
    "stphnlngdncoding": "I failed to import AppContainer from 'react-hot-loader' and pass in the Provider component as a child.. ",
    "nupurgrover": "I have a similar setup for the webpack-dev-server with a proxy, and the exact same thing is happening - different hashes for chunks, and a 404 error while trying to load the hot-update.json. I was able to fix this in my development environment by correcting my output.publicPath and devServer.publicPath and adding devServer.contentBase. @unsafePtr I am almost certain that you need to take a second look at your configuration.. @YvesHenri \nI set output.publicPath in my baseConfig - \nconst baseConfig = {\n  entry: ['./application/scripts/index.jsx'],\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/',\n  },\n// remaining configuration\nThe config for the dev-server is \n```\nconst devConfig = {\n  entry: ['react-hot-loader/patch', 'webpack-dev-server/client?https://localhost:8088', 'webpack/hot/only-dev-server'],\n  devServer: {\n    port: 8088,\n    publicPath: '/',\n    contentBase: path.resolve(__dirname, 'dist'),\n    proxy: {\n      '/api': {\n        secure: false,\n        target: 'http://localhost:8080',\n      },\n    },\n    historyApiFallback: {\n      index: 'views/index.html',\n    },\n    hot: true,\n  },\n// remaining configuration\n};. ",
    "YvesHenri": "@nupurgrover Could you please post a sample of your dev config? I'm facing pretty much the very same issue.. ",
    "Alex-ray": "@gaearon can I help with this in anyway? Lmk \ud83d\ude42 (thanks for all you do man!). ",
    "rjdestigter": "Having the same issue here. What I noticed was that in componentDidMount the component instance is different from the instance in the constructor and render function.\n```\nclass MyComponent extends React.Component {\n  constructor (props) {\n    super(props)\nthis.onRef = this.onRef.bind(this)\nwindow.constructorInst = this\n\n}\ncomponentDidMount () {\n    window.didMountInst = this\n  }\nshouldComponentUpdate () {\n    return false\n  }\nonRef (node) {\n    window.refInst = this\n    this.node = node\n  }\nrender () {\n    this.renderInst = this\n    return (\n      \n    )\n  }\n}\n```\nAfter rendering:\nconstructorInst === refInst // true\nconstructorInst === didMountInst // false\nrefInst === didMountInst // false\ndidMountInst === renderInst // true\nThe instance of componentDidMount differs from the contructor's and onRef's instance. this.node is undefined incomponentDidMount\nrender and componentDidMount share the same component instance.. ",
    "luigi-rosso": "Seeing this same issue. \nHas anyone found a workaround? It seems like the props and state object references are identical within the two different component objects.. I think I found a workaround, this issue seems to be caused by the proxying logic in react-proxy. One trick is to store an object to hold your references, this will get copied to the proxy by react-proxy and will be available in the proxy version of \"this\".\n```\nconstructor(props)\n{\n    super(props);\n    this.myRefs = {};\n    this.setMyRef = this.setMyRef.bind(this);\n}\ncomponentDidMount()\n{\n    console.log(this.myRefs.div); // <-- Not null!\n}\nsetMyRef(ref)\n{\n    this.myRefs.div = ref;\n}\nrender()\n{\n    return ;\n}\n```. Even easier way is to make sure your function bindings are done in componentWillMount:\n```\nconstructor(props)\n{\n    super(props);\n    // Do not bind here, \"this\" will get proxied.\n}\ncomponentWillMount()\n{\n    // Proxy \"this\" is now available. Bind here.\n    this.setMyRef = this.setMyRef.bind(this);\n}\ncomponentDidMount()\n{\n    console.log(this.div); // <-- Not null!\n}\nsetMyRef(ref)\n{\n    this.div = ref;\n}\nrender()\n{\n    return ;\n}\n```. ",
    "frankwallis": "I have resolved this issue in my code, so feel free to merge or close as you see fit, many thanks.. webpack-serve is dead now. Long live webpack-dev-server :-). ",
    "rockchalkwushock": "Closing. I was mistake with the use of propTypes in the package. Issue was coming from redbox-react not this package.. @simonkberg thanks for catching the typo that led to the wrong package being installed. The packages is using propTypes; but only in AppContainer.dev.js as I saw. Maybe I am misunderstanding it's use in that file? Can you elaborate on what you mean by:\n\nthis package isn't using React.PropTypes.\n\nI just want to understand where I was mistaken. Many thanks for the feedback; I'm new to doing this stuff \ud83d\udc4d . @simonkberg Thanks for the explanation and information on the subject. I was unaware that you could use propTypes as a static property and create your own validation using it. Very cool! Thanks for following up with me! Closing.. @ReactGirl \nI will take a look at your issue and answer back this evening if this is still persisting.. @lxe \nThe below examples should get you up and running with v4.6.3. I removed the typescript integrations since I use that as well. This should work though.\njavascript\n// babel.config.js\nmodule.exports = {\n  // ... other presets and plugins\n  plugins: [\"react-hot-loader/babel\"]\n}\n```javascript\n// webpack.config.js\nconst { resolve } = require('path')\nconst webpack = require('webpack')\nmodule.exports = {\n  mode: 'development',\n  // Entry point for build.\n  entry: ['./index.js'],\n  // Output to './public'.\n  output: {\n    filename: 'bundle.js',\n    path: resolve(__dirname, 'public'),\n    publicPath: '/',\n  },\n  // Development server.\n  devServer: {\n    contentBase: './public',\n    hot: true,\n    port: 8080,\n  },\n  module: {\n    rules: [\n      {\n        exclude: /node_modules/,\n        test: /.(js|jsx)$/,\n        use: ['babel-loader'],\n      }\n    ],\n  },\n  resolve: {\n    extensions: ['*', '.js', '.jsx', '.json'],\n  },\n  plugins: [\n    // Hot reloading.\n    new webpack.HotModuleReplacementPlugin(),\n  ],\n}\n```\n```javascript\n// Entry point of application\nimport React from 'react'\nimport { hot } from 'react-hot-loader/root'\nconst App = () => Hello World\nexport default hot(App)\n``. @Mknight492 [here](https://codybrunner.blog/2019-01-19/building-a-react-project-from-scratch-with-type-script/) is a post from my blog on how to setup a React project with TS and hot reloading based on the latest version ofreact-hot-loader`. There is a link in the article to a repository as well. Hope this helps you out!. @theKashey thanks for the input I appreciate it. I wasn't aware of point one and I'm still relatively new to TS land so I'm learning new things there everyday.. ",
    "reintroducing": "Yeah, I think this needs to be re-opened. Seeing this as well and I think this is the last item that needs to be updated in my project(s) to use prop-types but its hard to tell because it doesn't tell you exactly where its being used still.. Can we get this merged in please? The warnings are quite annoying, especially when trying to pinpoint what other packages may be causing warning as well. They never go away, no matter how much updating i do, because this is still present.. Thank you Fernando and Dan, much appreciated.. What happened? :(. I actually reverted back to using the syntax pre-v4 update of not using the hot HOC rather the if (module.hot) { checks in my main file as well as in the store and that fixed the issue. That being said, I'd prefer using the suggested hot HOC if I can find a way around the store issue above.\nIs that possible with the HOC?. @theKashey you are absolutely correct, this project has a rather complex setup in separating mobile and desktop bundles with different entries while still trying to share as many components as possible. I abstracted out the components further and put the hot HOC lower in the \"stack\" and it works as expected without the need for the if (module.hot) { syntax. Thank you very much for pointing that out, much appreciated.. ",
    "simonkberg": "I just had another look, and this package isn't using React.PropTypes. The deprecation warning comes from react-redbox which is a dependency in this package.. @rockchalkwushock no worries, it's great that you're contributing! I came here looking into where I got my own deprecation warnings from :)\nSo, let me try to explain: there are propTypes defined here as a static property on the AppContainer component. However, no actual proptypes from the react package are used - it's just a function here doing a manual validation of the children prop.\nWhat has been deprecated is accessing PropTypes from the react package, so this component actually doesn't contain any deprecated code, as it doesn't use React.PropTypes, but defines its own validation function.\nIn the stack trace of the deprecation warning, it looks like the error comes from this module, but they are actually from react-redbox, which this package is using. So the problem could only be resolved there.. Oh, btw, it seems like a new version of react-redbox fixing this has already been released: https://github.com/commissure/redbox-react/releases. Thanks for reviewing. Pushed an update where I set warnings: true on default props and pass it on to RHL.warning. Let me know if this is what you had in mind, or if I should rather keep AppContainer as it was and put the default on hooks in patch.dev instead. No problem at all! Adjusted accordingly. This is not the correct package, should be prop-types (v15.5.4). ESLint tried to tell you you were importing a non-existing package :). ",
    "blaremc": "Same problem. ",
    "piotrwitek": "@jdolle I confirm the same issue.\nWhen I switch to module: \"commonjs\" and rerequire main app.js on reload everything works fine, but when I switch to module: \"es2015\" then the state is lost as you say. ",
    "avivshafir": "@jdolle @piotrwitek I just encountered the same issue also.... ",
    "jtmthf": "Has anyone else tried piping the output through Babel. I have TypeScript compile to es2015 and then use Babel to transpile to es5 and React-Hot-Loader works in this configuration.. ",
    "cybrown": "I have the same issue with the files generated by typescript, but then processed by babel with {modules: false}.\nIt must be an issue with the es2015 modules and not a typescript specific issue.\nI've tried react-hot-loader 3.0.0-beta.7.. ",
    "reactima": "Bouncing back to   \"react\": \"~15.5.0\", \"react-dom\": \"~15.5.0\" solved the issue. ",
    "chrisblossom": "PureComponent works for me after I followed all of the migration-to-30 steps.\nI was missing <AppContainer>. @drcmda did you find the issue?. I think the issue is that you are using babel-preset-latest with babel-preset-env. Remove latest and see what happens. Regardless, I'm pretty sure you don't want to use those presets together.. Can you put up a minimal example repo?. HMR fixed in PR https://github.com/zhenyulin/hangman/pull/3\nCould be of help for others as well if they look at the commits.. @zhenyulin I think you misunderstand what was causing your HMR issues. If you'd like, I can go through all the commits I made with you on Discord or Skype chat. On your fixed PR you happened to copy the essential fixes from my PR that were causing the issue. One major being your nodemon setup.\nFor others having issues, babel-preset-flow does not have any issues with HMR that I am aware of..I use this in my projects without issue (which is included by react by default). Also, modules work as expected as described here.\n. @zachasme Glad you got everything working! Good idea to close this issue if everything is fixed?. ",
    "0x80": "I was having a similar issue when I came across this, but eventually I solved it by changing my devtool setting in the webpack config. You could try setting it to eval and see if that helps.. ",
    "sebinsua": "I think I have this problem. Did you find a solution?\n. ",
    "jediofthecode": "I am also having this issue and cannot seem to solve it.. ",
    "thtliife": "@dethstrobe @sebinsua @jediofthecode \nI was having this issue also, but have since resolved it.\nI had aliased a folder as Parts in my web pack.config.js as below\njavascript\nresolve: {\n    extensions: ['.js', '.jsx'],\n    alias: { Parts: path.resolve(__dirname, 'src', 'parts') }\n  }\nThis broke my hot reloading when I used the following in my main entry point \n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from 'Parts/root';\nconst render = Component => {\n  ReactDOM.render(\n    < AppContainer >\n      \n,\n    document.getElementById('root')\n  );\n};\nrender(Root);\nif (module.hot) {\n  module.hot.accept('./parts/root', () => {\n    render(Root);\n  });\n}\n```\nThe issue I found was that the module.hot.accept function then received 'Parts/root' as its parameter.\nSo to resolve the issue, I changed that part of the code to have 'Parts/root' as its parameter like below\n```diff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport Root from 'Parts/root';\nconst render = Component => {\n  ReactDOM.render(\n    < AppContainer >\n      \n,\n    document.getElementById('root')\n  );\n};\nrender(Root);\nif (module.hot) {\n-  module.hot.accept('./parts/root', () => {\n+  module.hot.accept('Parts/root', () => {\n    render(Root);\n  });\n}\n``\nThat solved it for me..  > So, this is related to webpacks HMR, not react-hot-loader?\n@theKashey\nI believe so... I am using react-hot-loader, however, I believe the module.hot.accept() function is from webpack HMR. \nThe thing is, at least in my case, it was not a bug at all, but merely that I was using it incorrectly. \nIf that is the case for the other people in this issue, then they can now solve their problem, and this issue can be closed....\n. ",
    "ThiagoMiranda": "Hi\nI'm trying to copy exactly the same example here:\nhttps://webpack.js.org/guides/hot-module-replacement/\nBut it's not working. \njavascript\n  if(module.hot) {\n      module.hot.accept('./print.js', () => {\n          console.log(printMe.toString())\n          document.body.removeChild(element);\n          element = dasCouve();\n          document.body.appendChild(element);\n      });\n  }\nMy printMe function is not updated and the module.hot.accept listener is only fired once no matter how many changes I make in the print.js file.  In the network tab from Chrome I can see the new print.js being received:\n\nMy webpack.config.js:\n```javascript\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: {\n      app: './src/index.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  devtool: 'inline-source-map',\n  devServer: {\n    port: 3000,\n    host: '0.0.0.0',\n    hot: true,\n    contentBase: './dist'\n  },\n  module: {\n      rules: [\n          {\n              test: /.js$/,\n              use: 'babel-loader'\n          },\n          {\n              test: /.css$/,\n              use: [\n                  'style-loader',\n                  'css-loader'\n              ]\n          }\n      ]\n  },\n  plugins: [\n      new HtmlWebpackPlugin({\n          title: 'Output Management'\n      }),\n      new webpack.HotModuleReplacementPlugin()\n  ]\n};\n```\nAm I missing something? Thanks\n@theKashey . @theKashey \nIt didn't work. Now the console indeed shows me the name of the plugin but it remains the old code.\nMy .js is:\n```javascript\nimport printMe from './print.js';\nimport './style.css';\nconst dasCouve = () => {\n    const element = document.createElement('div');\n    const btn = document.createElement('button');\nbtn.innerHTML = 'Clique aqui!!';\nbtn.onclick = printMe;\nelement.innerHTML = ['Sambatech', 'webpack', 'Babel '].join(' ');\n\nelement.appendChild(btn);\nreturn element;\n\n}\nlet element = dasCouve();\ndocument.body.appendChild(element);\nif(module.hot) {\n      module.hot.accept('./print.js', () => {\n          console.log('Aceitando a mudan\u00e7a do printMe as');\n          console.log(printMe.toString()) //Shows me always the same code from the first refresh\n          document.body.removeChild(element);\n          element = dasCouve();\n          document.body.appendChild(element);\n      });\n  }\n```. ",
    "guilima": "I guess the plugins order in .babelrc is important too. This should resolve the issue:\njson\n\"plugins\": [\n    [\"module-resolver\", {\n      \"root\": [\"./client\"],\n      \"alias\": {\n        \"Shared\": \"shared\",\n        \"Schemas\": \"schemas\",\n        \"Utilities\": \"utilities\"\n      }\n    }],\n    \"react-hot-loader/babel\"\n ]. ",
    "philiiiiiipp": "I think you are missing  in between.. I am wondering if this is related to this bug, but when I am running my app with hot reloading and v4, all css seems to get reapplied the moment I start interacting with components.\nYou can reproduce this by changing css in the inspector before interacting with your app.\n. ",
    "MaxInMoon": "@kud did you try this?\nrenderA = () => {\n  return (<div />)\n}. ",
    "jljorgenson18": "I ran into a similar issue awhile ago and I think it had something to do with a babel transform. I would suggest disabling transform-class-properties and seeing if that fixes it.. ",
    "alexandernanberg": "I think it might be because of the order of your babel plugins. Try to move the react-hot-loader last in the array. \njavascript\nexport default {\n  \"presets\": [\n    [\"env\", { \"modules\": false }],\n    \"react\"\n  ],\n  \"plugins\": [\n    \"transform-class-properties\",\n    \"transform-object-rest-spread\",\n    \"react-hot-loader/babel\"\n  ],\n}\nI have a similar setup and that works for me, although all of my babel config is inside .babelrc \ud83d\ude04 \n. Added that to my webpack config but I still seem to get the dependencies in my bundle. Anyone else seeing this as well or am I doing something wrong in my config?. @starandtina Not sure, my guess is that some module accidentally broke tree shaking or was not reading the env variable correctly. I've not seen this problem for a while now though. ",
    "martinkadlec0": "Hi, I also had a similar issue. In my case I was using the babel-preset-latest, but I think it will be the same thing for the env preset. Originally I had this in my babelrc:\njavascript\n\"presets\": [\n  [\"latest\", {\n    \"modules\": false\n  }]\n]\nwhich did not work, because the options are not passed to individual \"subpresets\". I had to replace it with this to make it work.\njavascript\n\"presets\": [\n  [\"latest\", {\n    \"es2015\": {\n      \"modules\": false\n    }\n  }]\n]\nSince I am not the only one to run into this issue, it might be worth mentioning it in the webpack2 note in the migration guide :). ",
    "slmgc": "I can confirm that setting ['env', {'modules': false }] solves the issue.. @kud you need to remove the duplication of presets settings in your .babelrc/babel.config.js, that should solve the issue for you.. ",
    "elitvinchuk": "```\n//.babelrc\n{\n  \"presets\": [\n    [\"es2015\", { \"modules\": false }],\n    \"stage-0\",\n    \"react\"],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\n// webpack.config.js\n...\nmodule: {\n    rules: [{\n      test: /.js$/,\n      use: ['babel-loader']\n    }]\n  }\n...\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './App'\nconst render = Component => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('app')\n  )\n}\nrender(App)\nif (module.hot) {\n  module.hot.accept('./App', () => { render(App) })\n}\n```\nworked for me\n\"react-hot-loader\": \"next\",\n\"webpack\": \"^3.0.0\". ",
    "Hokkaidosunny": "add option babelrc:  false to your babel.config.js to disable the .babelrc file in your root folder. ",
    "josser": "I've managed to work this only when fixed this three things: \n\nNo .babelrc in root folder or babelrc: false in options for babel-loader\nCorrect place for 'modules': false is: \n'presets': [\n        ['env', {\n            'modules': false,\n                 'targets': { ... }\n            }]\n    ]\nreact-hot-loader/babel plugin is placed after all other plugins in the list of plugins for babel-loader options.  . \n",
    "satiewaltz": "Getting this error as well after running a yarn upgrade. \nNot sure what could cause this, but I'll update this issue if I find anything. . @ddydeveloper I ended up fixing this by:\n1. Deleting node_modules.\n2. Updating all packages on my package.json.\n2. Running yarn install.\n3. Then lastly yarn check.\nI believe this issue was caused by a recent update by one of the packages that react-hot-loader/patch uses.\n. @ddydeveloper I took a look at your repository for a moment:\nIt seems that you have  \"react-hot-loader\": \"^1.3.1\", in your package.json,\ninstead of \"react-hot-loader\": \"next\".\nnext branch contains the latest working version of react-hot-loader 3, you should be using that.. @ddydeveloper You had \"^1.3.1\" in your package.json. This gets an old version of react-hot-loader (V1) instead of V3. \nReact Hot Loader V1 is now deprecated and is expected to break. The most current version of React Hot Loader is V3, and is on the next branch. Its the one you should be using.\nIf you install React Hot Loader via npm install react-hot-loader it will get the deprecated version instead of the newest one.\nnpm install react-hot-loader@next is the command that should be ran with this library until V3 becomes master branch.\nLikely yarn changed your version of React Hot Loader - which is why it was working a while ago. Deleting node-modules removes any potential overwrites and reinstalling gets you the latest version.. Feel free to close this issue if things work well for you!. ",
    "ddydeveloper": "@satiewaltz , Your solution is works, thanks a lot! By I don't understand, why it worked two weeks ago, before install and check yarn? Could you explain, please? . Thanks for explanation, it is very useful information! Close the issue.. ",
    "codrex": "thanks man. ",
    "hassanamin994": "For people coming here in the future, you can run npm install --save-dev react-hot-loader@^3 for v3 . ",
    "SaphuA": "Finally got around to creating a sample project. Check it out here: https://github.com/SaphuA/DynamicReactHotReloading\nAs shown in the sample above, the issue happens when using dynamic rewritten components:\nhttps://github.com/SaphuA/DynamicReactHotReloading/blob/master/main.ts#L28. ",
    "maciej-gurban": "@neoziro The link you posted is dead (404s)\nEdit: I'm also using v4.0.0 and dynamic import doesn't seem to fully work as expected there either. Changes made are always 1 behind the current state. This happens only for modules imported dynamically.. Thanks. It does work indeed this way. I tried wrapping my react-loadable component with hot(), but no dice. I guess it'd need to be baked into that component to work.. ",
    "robertklep": "I'm running into the same issue, and it's related to preact-compat: developit/preact-compat#392. ",
    "yexingxia": "I got the same error, cause i applied the HotModuleReplacementPlugin twice. 1. with --hot and 2. in plugins\nHope to help. ",
    "Opty1712": "@yexingxia thank you, it helps!. ",
    "zhanghj819": "@yexingxia thank you, it helps!!!. ",
    "Sirotyann": "@yexingxia thanks !!! . ",
    "cdaringe": "still doing full refreshes on me with these changes, but i am using webpack@latest (v3.x). this implementation still triggers a full refresh for me, vs component swap. ",
    "kambing86": "sorry, found the code issue and is not a bug. ",
    "zation": "Seems we got the same problem, https://github.com/gaearon/react-hot-loader/issues/592, my project is here: https://github.com/zation/react-admin-starter. ",
    "starandtina": "@drcmda @chrisblossom  I had encountered the same issue with you, any comments?. @alexandernanberg Do you know the root cause and fix that?. @alexandernanberg Thanks! I had removed RHL in order to avoid the issue. :). The related issue: https://github.com/gaearon/react-hot-loader/issues/602 https://github.com/gaearon/react-hot-loader/issues/579. @theKashey Yes, I build it with the command below:\nShell\nNODE_ENV=production webpack -p --hide-modules --config ./build/webpack.prod.js\n. @theKashey Sure!\nHere is the webpack.base.js\n```JavaScript\nconst webpack = require('webpack')\nconst path = require('path')\nconst config = require('./config')\nconst { entry, host, port, utils_paths: paths } = config\nconst plugins = [\n  // plugin for passing in data to the js, like what NODE_ENV we are in.\n  new webpack.DefinePlugin(config.globals),\n  new webpack.optimize.CommonsChunkPlugin({\n    names: ['common', 'vendor', 'manifest'],\n    minChunks: 2,\n  }),\n  new webpack.NoEmitOnErrorsPlugin(),\n]\nconst output = {\n  path: paths.dist(),\n  filename: '[name].js',\n  chunkFilename: '[name].js', // Don\u2019t use [chunkhash] or [hash] in development since this will increase compilation time.\n  publicPath: http://${host}:${port}/,\n}\nconst resolve = {\n  extensions: ['.js', '.jsx', '.css', '.less'],\n  modules: [\n    paths.src(),\n    'node_modules',\n    path.join(__dirname, '../node_modules'),\n  ],\n}\nconst resolveLoader = {\n  moduleExtensions: ['-loader'],\n}\nconst moduleForWebpack = {\n  exprContextCritical: false,\n  rules: [\n    {\n      test: /.jsx?$/,\n      exclude: /node_modules/i,\n      loader: 'babel-loader',\n      options: {\n        cacheDirectory: true,\n        presets: [\n          [\n            'env',\n            {\n              targets: {\n                browsers: ['last 2 versions', 'ie >= 11'],\n              },\n              loose: false,\n              useBuiltIns: true,\n              modules: false,\n              debug: true,\n            },\n          ],\n          'stage-2',\n          'react',\n        ],\n        plugins: ['transform-runtime'],\n      },\n    },\n    {\n      test: /.woff(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        // Limit at 8k. Above that it emits separate files\n        limit: 8000,\n        // url-loader sets mimetype if it is passed.\n        // Without this it derives it from the file extension\n        mimetype: 'application/font-woff',\n        // Output below fonts directory\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.woff2(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        mimetype: 'application/font-woff2',\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.otf(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        mimetype: 'font/opentype',\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.ttf(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        mimetype: 'application/octet-stream',\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.eot(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.svg(\\?.)?$/,\n      loader: 'url-loader',\n      options: {\n        limit: 8000,\n        mimetype: 'image/svg+xml',\n        name: 'fonts/[name].[hash:8].[ext]',\n      },\n    },\n    {\n      test: /.(png|jpg|gif)$/,\n      loader: 'url-loader',\n      options: {\n        limit: 2000,\n        name: 'images/[name].[hash:8].[ext]',\n      },\n    },\n  ],\n}\nmodule.exports = {\n  devtool: 'source-map',\n  entry,\n  output,\n  resolve,\n  plugins,\n  resolveLoader,\n  module: moduleForWebpack,\n}\n```\nHere is the webpack.prod.js which would inherit from webpack.base.js\n```JavaScript\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin')\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst WebpackChunkHash = require('webpack-chunk-hash')\nconst SWPrecacheWebpackPlugin = require('sw-precache-webpack-plugin')\nconst InlineManifestWebpackPlugin = require('inline-manifest-webpack-plugin')\nconst ResourceHintWebpackPlugin = require('resource-hints-webpack-plugin')\nconst baseConfig = require('./webpack.base')\nconst { plugins, output } = baseConfig\nconst { postcss, utils_paths: paths } = require('./config')\n// prettier-ignore\nplugins.push(\n  new UglifyJSPlugin({\n    sourceMap: true,\n  }),\n  // extracts the css from the js files and puts them on a separate .css file. this is for\n  // performance and is used in prod environments. Styles load faster on their own .css\n  // file as they dont have to wait for the JS to load.\n  new ExtractTextWebpackPlugin({\n    filename: '[name].[contenthash:8].css',\n    allChunks: true,\n  }),\n  new WebpackChunkHash({\n    algorithm: 'md5',\n  }),\n  // DO NOT use it as it won'd update the chunkhash for manifest\n  // See https://github.com/erm0l0v/webpack-md5-hash/issues/9\n  // But it could be resolved by not setting dontCacheBustUrlsMatching\n  new HtmlWebpackPlugin({\n    favicon: paths.src('static/favicon.ico'),\n    inject: true,\n    chunksSortMode: 'dependency',\n    filename: 'index.html',\n    template: paths.src('index.html'),\n    minify: {\n      collapseWhitespace: true,\n      minifyJS: true,\n      minifyCSS: true,\n    },\n    prefetch: false,\n  }),\n  new ResourceHintWebpackPlugin(),\n  new InlineManifestWebpackPlugin({\n    name: 'webpackManifest',\n  }),\n  // Generate a service worker script that will precache, and keep up to date,\n  // the HTML & assets that are part of the Webpack build.\n  new SWPrecacheWebpackPlugin({\n    cacheId: 'web-ui',\n    mergeStaticsConfig: true,\n    staticFileGlobs: [paths.dist('promise.min.js')],\n    // By default, a cache-busting query parameter is appended to requests\n    // used to populate the caches, to ensure the responses are fresh.\n    // If a URL is already hashed by Webpack, then there is no concern\n    // about it being stale, and the cache-busting can be skipped.\n    // dontCacheBustUrlsMatching: /.\\w{8}./,\n    filename: 'service-worker.js',\n    logger(message) {\n      if (message.indexOf('Total precache size is') === 0) {\n        // This message occurs for every build and is a bit too noisy.\n        return\n      }\n      console.log(message) // eslint-disable-line\n    },\n    // minify: true,\n    // For unknown URLs, fallback to the index page\n    navigateFallback: '/',\n    // Ignores URLs starting from /download (useful for downloading tagRead)\n    navigateFallbackWhitelist: [/^(?!\\/(download|web-ui)).*/],\n    // Don't precache sourcemaps (they're large) and build asset manifest:\n    staticFileGlobsIgnorePatterns: [/.map$/, /index.html/],\n  })\n)\nbaseConfig.module.rules.push({\n  test: /.(less|css)$/,\n  use: ExtractTextWebpackPlugin.extract({\n    fallback: 'style-loader',\n    use: [\n      {\n        loader: 'css-loader',\n        options: {\n          minimize: false,\n          sourceMap: true,\n          autoprefixer: false,\n        },\n      },\n      {\n        loader: 'postcss-loader',\n        options: {\n          plugins: postcss,\n          sourceMap: true,\n        },\n      },\n      {\n        loader: 'less-loader',\n        options: {\n          sourceMap: true,\n        },\n      },\n    ],\n    publicPath: '/',\n  }),\n})\nconst config = Object.assign(baseConfig, {\n  // If you load a page without dev tools opened, there is no http request for source maps.\n  // http://stackoverflow.com/questions/23848364/performance-impact-of-using-css-javascript-source-maps-in-production\n  // devtool: null,\n  output: Object.assign(output, {\n    filename: '[name].[chunkhash:8].js', // Use [chunkhash] to add a content-dependent cache-buster to each file.\n    chunkFilename: '[name].[chunkhash:8].js', // Use [chunkhash] to add a content-dependent cache-buster to each file.\n    publicPath: '/',\n  }),\n  plugins,\n})\nmodule.exports = config\n```\nFor the config.js\n```JavaScript\nconst fs = require('fs')\nconst path = require('path')\nconst cssnano = require('cssnano')\nconst postcssCustomMedia = require('postcss-custom-media')\nconst postcss = () => [\n  postcssCustomMedia,\n  cssnano({\n    autoprefixer: {\n      add: true,\n      remove: true,\n      browsers: ['last 2 versions', 'ie 11'],\n    },\n    discardComments: {\n      removeAll: true,\n    },\n    discardUnused: false,\n    mergeIdents: false,\n    reduceIdents: false,\n    safe: true,\n    sourcemap: true,\n    zindex: false,\n  }),\n]\nconst config = {\n  verbose: false,\n  // https://webpack.js.org/configuration/stats/\n  stats: {\n    colors: true, // Add console colors\n    chunks: false,\n    chunkModules: true,\n    modules: false,\n    reasons: false,\n    warnings: false,\n  },\n  env: process.env.NODE_ENV || 'development',\n// ----------------------------------\n  // Project Structure\n  // ----------------------------------\n  path_base: process.cwd(),\n  dir_src: 'src',\n  dir_dist: 'dist',\n  // ----------------------------------\n  // Server Configuration\n  // ----------------------------------\n  host: process.env.HOST || 'localhost',\n  port: process.env.PORT || 3000,\n// ----------------------------------\n  // Compiler Configuration\n  // ----------------------------------\n  vendor: [\n    'active.css',\n    'classnames',\n    'immutable',\n    'prop-types',\n    'query-string',\n    'react',\n    'react-aaui',\n    'react-dom',\n    'react-hot-loader',\n    'react-redux',\n    'react-responsive',\n    'react-router-dom',\n    'react-router-redux',\n    'redux',\n    'redux-thunk',\n    'reselect',\n    'tempest.js',\n  ],\n  common: [\n    // shared components\n    'shared/components',\n// shared constants\n'shared/constants',\n\n// shared containers\n'shared/containers',\n\n// shared middlewares\n'shared/middlewares',\n\n// shared ducks\n'shared/ducks',\n\n// entities reducer\n'shared/ducks/entities',\n\n// shared utils\n'shared/utils',\n\n],\n  postcss,\n}\n// ------------------------------------\n// Utilities\n// ------------------------------------\nconst resolve = path.resolve\nconst base = (...args) =>\n  Reflect.apply(resolve, null, [config.path_base, ...args])\nconfig.utils_paths = {\n  base: base,\n  src: base.bind(null, config.dir_src),\n  dist: base.bind(null, config.dir_dist),\n}\nconfig.entry = {\n  vendor: config.vendor,\n  common: config.common,\n  app: [config.utils_paths.src('index.js')],\n}\nconfig.globals = {\n  'process.env': {\n    NODE_ENV: JSON.stringify(config.env),\n  },\n  NODE_ENV: config.env,\n  DEV: config.env === 'development',\n  PROD: config.env === 'production',\n  TEST: config.env === 'test',\n}\nmodule.exports = config\n``\n. @theKashey BTW, I had used the uglifyjs-webpack-plugin@1.0.1 and just enable thesourceMap`.\nnew UglifyJSPlugin({\n    sourceMap: true,\n  })\nIs there any other configuration I had missed?\n. @theKashey I had tried that yesterday but it still didn't work.\nI suspect that it's caused by the module.hot which would stop dead code elimination,  so I do two experiments. Adding NamedModulesPlugin for demo purpose.\nJavaScript\nif (!module.hot || process.env.NODE_ENV === 'production') {\n  module.exports = require('./index.prod')\n} else {\n  module.exports = require('./index.dev')\n}\nBefore removing module.hot:\n\nAfter removing module.hot:\n\nApparently, it would remove the index.dev.js, AppContainer.dev.js and other dependencies of react-hot-loader after removing module.hot from the if statement.. @neoziro new webpack.HotModuleReplacementPlugin() is only included in webpack.dev.js so you don't see as I had just pasted webpack.prod.js.. ",
    "zhenyulin": "@chrisblossom tried remove the babel-preset-latest, it still has the same problem.. @chrisblossom I created the problem while upgrading Webpack and React Hot Loader for an experimental boilerplate repo I have. You can find the current situation under the dev branch of Hangman. Thank you very much.. HMR fixed in another PR https://github.com/zhenyulin/hangman/pull/2\ndisable module feature in babel-preset may constraint some server-side babel-node behaviour, so probably it is better to do const HotApp = require('./App).default on the client side without webpack module feature support\n@chrisblossom 's PR provides a more production ready solution by separating the babelrc setting on client side and server side. @chrisblossom thanks for this. Undoubtedly, you've provided a very good solution towards the problem, which helps me to find out the minimum change I need to make to fix the issue. Further babel-preset-env used in your solution is a more robust preset, as babel-preset-latest is being deprecated.\nI hope my PR here will help others upgrade to Webpack 2 and React-hot-loader 3 on express, in a easier way. In fact, I've created a new repo to recreate the status with minimum code. https://github.com/zhenyulin/minimal-express-webpack2-rhl3\nHope this helps more who are upgrading.. @chrisblossom tested in the recreated env babel-preset-flow isn't causing the problem, it might be with something else together on the previous repo. It turns out that you don't actually need react-hot-loader, webpack-hmr works for most of the cases, https://hackernoon.com/hot-reload-all-the-things-ec0fed8ab0. @amannn I've later produced a new boilerplate that hot reload both client side and server side, without using react-hot-loader;\nhttps://github.com/zhenyulin/ultimate-hot-boilerplate\nHope this helps.. ",
    "amannn": "I had an issue with the handling of runtime errors with webpack-hot-middleware. The overlay was never shown and the app didn't recover.\nI noticed that webpack-dev-server does a full reload when an error happens. I added that to index.js in order to get that working:\njs\nif (module.hot) module.hot.accept('./App', () => {\n  try {\n    render(App)\n  } catch (e) {\n    location.reload();\n  }\n});\nI tried the reload option of webpack-hot-middleware but that didn't work for me. So the snippet above is what I'm using now.\nI'm using the currently latest versions of all dependencies. Maybe this is helpful to somebody who has the same issue. Or did somebody get this working without the try / catch?. @zhenyulin interesting boilerplate! But it seems not to handle runtime errors gracefully as far as I can tell (given you want to cover that anyway).. ",
    "egorovli": "Ok, I've created a simplified repo of my project: https://github.com/egorovli/react-hmr-test\nVideo of hot updates not applied: https://www.dropbox.com/s/uuav7tpz9d1l35s/HMR%20Not%20Working.mov?dl=0\n. This one is related: https://github.com/webpack/webpack-dev-server/issues/100\nI managed to fix the issue by changing\njavascript\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => render(Root));\n}\nto\njavascript\nif (module.hot) {\n  module.hot.accept('./containers/Root', () => render(require('./containers/Root').default));\n}\nNot sure if it's an intended behavior. https://github.com/gaearon/react-hot-boilerplate and https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate both use this syntax, as well as official docs https://github.com/gaearon/react-hot-loader/tree/master/docs:\njavascript\nif (module.hot) module.hot.accept('./App', () => render(App));. Or you can use:\njavascript\nif (module.hot) {\n  module.hot.accept();\n}\nBut in my case this was throwing errors about store. In non-redux environment, like mobx, it works fine.. ",
    "chrisregner": "Another case that may cause this is not having the react-hot-loader/babel babel plugin as the first element of array in the config file. @gaearon, is this behavior normal? If so I'd like to make a PR on documentation so that fewer people get tripped over this (I kinda spent plenty of time just because of this).. ",
    "vladimirdh": "@egorovli this also works for me, with react v16 and webpack v3. ",
    "yuqingc": "@egorovli Thanks so much for your solution. I solved this problem with the help of your require and default solution. Do you know how that happened? Is there some error about the babel config?. ",
    "yofi2tofi": "@egorovli thank you so muck. I don't know why, but i had wrong behavior when set code like of. doc. ",
    "dangdennis": "Wow @egorovli \nI entered a new project recently, and noticed that our HMR wasn't working properly. No idea why, thought it might've been the way browsersync was set up.\nRegardless, simply using\nif (module.hot) {\n  module.hot.accept();\n}\ndid the trick. Still haven't figured out why though.. ",
    "tommyalvarez": "@egorovli your solution also worked for me. Using React 16.3 and webpack v4.  . ",
    "moustacheful": "I'm having a similar issue as you describe, not 100% if it's the same though, as in my particular case the redux-connected component will not update by itself ever.\nRedux-connected components will not update until their state changes explicitly, whereas vanilla components will update just fine. \n. ",
    "iframeskills": "Having the same exact issue; if not wrapped by connect method of react-redux hot module reloading works perfectly.\nWhen react-redux connect method is used, HMR logs say the app is updated but the components do not actually update at all.. ",
    "jgfet": "Yep hmr-react is nowhere to be found not even on waybackmachine\nhttps://webpack.js.org/guides/hmr-react/ -\nYou can also check out a great webpack guide to React hot module replacement.. ",
    "hengkx": "https://github.com/gaearon/react-proxy\nimport { createProxy, getForceUpdate } from 'react-proxy';. ",
    "manubamba": "is the project dead?. ",
    "skipjack": "@manubamba yeah idk it kind of seems that way. Unfortunate if it is because the beta has been working great, definitely an improvement over babel-preset-react-hmre.. @loris I agree, though this issue is similar to #650 (and potentially some others) so maybe it was closed in favor of that one? BTW I'm seeing this issue with react-redux connected components as well so I don't think it's specific to react-refetch but more to HoC components in general.. Just in case anyone else runs into this -- I ran into this error when duplicate copies of react were included in a site. This can happen for a variety of reasons including when a package is npm linked that also has react installed.. @theKashey I'm experiencing this issue too, it's being thrown on a ton of components. I don't fully understand all your points though...\n\nEnable debug mode. setConfig({debug: true}). Maybe it will shed some light (probably not).\n\nI understand this point based on this.\n\nDouble check that this warning is just a warning. Ie react-hot-loader working correctly.\n\nAs far as I could tell the loader still worked fine from a functionality standpoint, however maybe I'm missing something about this question.\n\nAnd what is you actually changing. Why something got unmount?\n\nI'm not sure what you mean by this, but...\n\nOne of the components with children in the tree unmounts.\nA varied amount of errors are thrown for components that don't contain any setState, replaceState, or forceUpdate calls.\n\nHope this helps. Not sure how much else I can dig into this but if needed I might be able to supply a reproducible example. Reverting to 4.0.0-beta.19, as mentioned by @fwh1990, does fix the issue.. > Is it expected behaviour? Something is unmounting cos it should do it, or it is a bug?\nYes, the unmounting is expected. Occurs when changing routes via react-router (at least in my case).\n\nRHL converts all the components into the Stateful components, and also call .forceUpdate on them. So - you can have stateful error on stateless component.\n\nYeah that would explain it. That sounds more like a \"this package\" issue rather than something a consumer of the package is doing wrong.. ",
    "milooy": "Same happens here.\n.babelrc\njson\n{\n  \"presets\": [\n    [\"es2015\", {\"modules\": false}],\n    \"stage-2\",\n    \"react\"\n  ],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\napp.js\n```js\nlet combinedReducers = combineReducers({ ...reducers, routing: routerReducer, form: formReducer });\nlet store, DevTools;\nif (isProduction) {\n  store = createStore(combinedReducers, applyMiddleware(ReduxPromise));\n} else {\n  DevTools = createDevTools(\n    \n\n\n  );\n  store = createStore(\n    combinedReducers,\n    DevTools.instrument(),\n    applyMiddleware(ReduxPromise)\n  );\n}\nconst history = syncHistoryWithStore(browserHistory, store);\nimport render from './router.js'\nlet container = document.getElementById('mount');\nif (module.hot) {\n  module.hot.accept('./reducers', () => {\n    const nextReducers = require('./reducers');\n    const nextRootReducer = combineReducers({\n      ...nextReducers,\n      routing: routerReducer,\n      form: formReducer\n    });\n    store.replaceReducer(nextRootReducer);\n  });\n}\nrender({ store, history, container });\nif (module.hot) {\n  module.hot.accept('./router', () => {\n    const newRender = require('./router').default;\n    newRender({ store, history, container });\n  });\n}\n```\nrouter.js - Router version\njs\nexport default function render({ store, history, container }) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <Route path=\"/\" component={App}>\n          <IndexRoute component={Home}/>\n          <Route path=\"retailerShipping\" component={RetailerShipping}/>\n        </Route>\n      </Router>\n    </Provider>,\n    container\n  );\n}\nrouter.js : simple version\njs\nexport default function render({ store, history, container }) {\n  ReactDOM.render(\n    <Provider store={store}>\n      <div>\n        <h1>HOT</h1>\n        <MyTest mainName=\"Jay\">JAJAJA</MyTest>\n      </div>\n    </Provider>,\n    container\n  );\n}\nIn case of simple version, the hot reloading works \nbut in router version, it causes warning message and hot reload doesn't work\n\n. ",
    "TAGC": "Actually sorry, I don't think the initialisation of AppContainer is relevant. It's pretty normal for React components to ignore those last two arguments. I guess AppContainer just jumped out at me because it's the first container to get instantiated (i.e. first to trip the breakpoint), and the way it ignores those two arguments initially looks like a bug.\nI should be looking at the same callstack except for when my own ConnectionPane component is being constructed, not AppContainer.. I'll close this for now because I don't think it's a react-hot-loader issue.. Worked around this issue as I commented in facebook/react#10012.. ",
    "ryancole": "I'm also experiencing this issue, using beta 7. \nI don't have my project handy at the moment to rattle off version numbers, but they're likely similar to the others in this thread. I just wanted to reply to add to the list of folks experiencing the issue.\nEdit: It's definitely something related to react hot loader. I tried using specific, older versions of the beta and the error exists at all versions. If I remove react hot loader entirely everything works as expected. After looking at some of the release notes related to the beta releases, react hot loader appears to do a lot of things related to babel transforms and class properties, etc. There's just most likely some clash between what react hot loader is applying and what babel intends, or what react expects, etc.. ",
    "torrac12": "I fixed it with add transform-es2015-classes in my .babelrc.\nI used to use babel-loader handle es6 compile\uff0cand there is no error. When I remove it\uff0cit warning can not setState on a unmount component\u3002And when i import transform-es2015-classes, it works again.  So is there difference between the native es6 class from babel transformed class?. ",
    "bspies-work": "Running into the same issue in our code. Have a simple input field for a zip code with an event handler like so: \njavascript\nhandleChange = (value) => {\n     if (!this.state.zipChanged) {\n          this.setState({ zipChanged: true });\n     }\n}\nRemoving 'react-hot-loader/babel' from the babel loader fixes the issue, but breaks hot reloading. We are using the react, env, stage-2 presets, and transform-decorators-legacy plugin with the babel (v 6.24.1) loader. Env gives us:\n  transform-es2015-function-name {\"edge\":15}\n  transform-exponentiation-operator {\"ios\":10}\n  transform-async-to-generator {\"ios\":10}\nI have created a simpler project that reproduces this issue here: https://github.com/bspies-work/react-hot-load\n. ",
    "noinkling": "My temporary solution has been to remove react-hot-loader/patch from my webpack entrypoint (and leave everything else as-is). As far as I can tell, hot-reloading still works, it just doesn't retain component state. It also complains in the console on page load but I can live with that.. @fabriceci Likely because \"latest\" (which is no longer recommended, in favor of the \"env\" preset) includes transform-es2015-classes, while \"stage-2\" doesn't. See a couple of the comments further up.. I have no idea. notifyNestedSubs isn't defined by me, it seems to be a react-redux internal thing. I'm also not currently using .bind anywhere in my code.\nI will try and reproduce when I get the chance (it might be tough because of the complexity of the app).. @theKashey \nI can confirm the first error was fixed in beta 4.\nIt looks like you already know what's going on with notifyNestedSubs, but just in case it's still helpful, debugging reveals that:\n\nBoth prevAttr and nextAttr are bound, and have a .length of 0\nThere is no notifyNestedSubs on ProxyComponent.prototype\n\n\nintroduce fixtures - a way to force-patch one classes and ignore others (leads to hell).\n\nSince the connect HoC from react-redux is extremely common, would this be so bad?\nOut of interest I tried modifying react-redux to use an anonymous function with closure (instead of .bind), the error disappeared but the component still didn't re-render.\nIf this isn't easily fixable, would it be possible to force RHL to fall back to basic HMR behaviour when it encounters this situation? Sure you lose component state, but it's better than no re-render at all.. ",
    "fabriceci": "I faced the same error, what a headache. I finally solved this, replacing the \"stage-2\" preset by \"latest\" in the babel.rc file. (Maybe someone can explain why this solve the problem !?)\nBefore (bug) :\n\"presets\": [\n    \"stage-2\",\n    \"react\"\n  ]\nAfter:\n\"presets\": [\n    [\n      \"latest\", {\n        \"es2015\": {\n          \"modules\": false\n        }\n      }\n    ],\n    \"react\"\n  ]\n. @noinkling thanks for you answer.\nI changed my presets to :\n\"presets\": [\n    \"stage-2\",\n    \"react\",\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\"chrome > 55\"]\n        },\n        \"loose\": true,\n        \"modules\": false\n      }\n    ]\n  ]\nI notice \"Transform-es2015-classe\" is included by the \"env preset\" only if it fits the browser's target config. With my config above, I'm forced to add the plugin manually. But, for exemple, if you target IE11, the plugin will be applied by the \"env preset\" automatically (so no need to add it manually).\ntransform-es2015-classes {\"ie\":\"11\"}`\nIt seems illogical to have to add the plugin if the env preset said you don't need it.\n. ",
    "ravenscar": "I am not transpiling ES6 classes down to ES5 and am also having this problem using react-hot-loader.\nI think the issue is with the react-hot-loader/patch not playing well with native ES6 classes when the bind() is done in the constructor.\nIf I examine the this value in the constructor() vs in componentWillMount() it is different. I expect the constructor has the original component and the componentWillMount() has the proxy created by react-hot-loader/patch. The proxy ends up being mounted by react.\nWhen setState() is called in the bound function, it calls it on the original component, which is not mounted, rather than the proxy.\nThis definitely seems like an issue with the react-hot-loader/patch code, however most people are not noticing it as they are compiling ES6 classes down to ES5.\nfixes:\n- Compile down to ES5\n  - pro: works as it used to\n  - con: using es5\n- Remove react-hot-loader/patch from webpack config.\n  - pro: es6 hotloading of components will work\n  - con: components not proxied, so state is lost\n- Don't bind in constructor\n  - con: have to bind/use arrow functions at point of passing to other components (performance/antipattern)\n  - con: may cause problems with event subscriptions that cause renders\n- Bind in componentWillMount() instead of constructor\n  - con: non-standard so may cause other problems down the line.\nI'm going to compile down to ES5 until react-hot-loader/patch works with native ES6 classes, as I think it's the safest option.. ",
    "HHogg": "Just another confirmation, we had this issue from binding methods in the constructor. With the same error and also loosing context for those components.\nWarning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op.\nUsing babel-plugin-transform-es2015-classes also fixed the issue.\n. ",
    "victorandree": "We have encountered the same errors as @HHogg on a TypeScript project (target ES2017 in dev, so it doesn't compile classes) with React 15.6.2 and react-hot-loader 3.1.1.\nWe don't bind methods in the constructor but in the class body,\n```\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: 'Hello' };\n  }\npublic render() {\n    return {this.state.message};\n  }\nprivate updateState = () => {\n    this.setState({ message: 'New state' });\n  }\n}\n```\nReverting to 3.0.0-beta.7 solves the issue for us.. ",
    "ivanwolf15": "Same issue here.\nI removed the options in the babel loader in order to add the query. Then add AppContainer to the root index.js including the module.hot stuff.\nIt worked for me.. ",
    "jonathanphz": "Hey @ivanwolf15  can you explain a bit the changes you made to get this to work?\nCan you provide the code you changed here? Been dealing with this for days now.\nThanks\n. Hey @wangsongiam thanks so much for this - I was able to figure it out slowly a few days ago. \nBTW - I love your editor. Is that vim using Hyper? . Just tried following along the docs in here: https://github.com/gaearon/react-hot-loader/tree/master/docs#migrating-from-create-react-app\nUsing a fresh install of CRA and react-hot-loader@next.\nWhen attempting to yarn start I get this error:Provided options and query in use\nerror Command failed with exit code 1.. ",
    "wangsongiam": "Hi @jonathanphz If you are still trying to figure this out, I created a repo to show you how. create-react-app-with-hot-loader. @jonathanphz thanks! It's Neovim on iTerm, you can check my config repo for all the details. . ",
    "Grimones": "Same issue here. Using latest RHL and CRA.\nfollowed https://github.com/gaearon/react-hot-loader/tree/master/docs#migrating-from-create-react-app\nstill reloads page.\nI Also have cloned https://github.com/wangsongiam/create-react-with-hot-loader and made fresh install. Added simple counter and the counter resets on code change, obviously page refreshes.\nTried to use\nrequire.resolve('webpack-dev-server/client') + '?/',\nrequire.resolve('webpack/hot/dev-server'),\nIn console shows [HMR] Waiting for update signal from WDS... but no [WDS] Hot Module Replacement enabled.\nI think this is better than silence from HMR when using require.resolve('react-dev-utils/webpackHotDevClient'). Or it isn't related to this?\n. @neoziro \nHi! You can close this issue. I can confirm that current migration guide is working properly with fresh CRA.\nHere is the repository https://github.com/Grimones/cra-rhl\nThe diff\nhttps://github.com/Grimones/cra-rhl/commit/f9f7b67568f6e8d9f3a8d3293422a9f4d5d2c28a. Whoops. I apologize, i have missed babel loader. I will try now to eject and add babel loader and also will try https://github.com/cdharris/react-app-rewire-hot-loader.\nI think you should decline this PR. Where i can write you about results? May be there is an issue with progress on v4 (i saw one but it is closed now)?. Okay.\nI have forgot to mention that despite i've forgotten to add babel loader it was working fine.\nSo, i have ejected cra and added babel. As expected - it is working.\nBranch https://github.com/Grimones/cra-rhl/tree/react-hot-loader%40next\nAs you asked i have installed react-app-rewire-hot-loader\nAnd it is working\nCommit https://github.com/Grimones/cra-rhl/commit/4ed74af2dc649301695f67df05a12f210fb7820c\nAlso i have tried to add 3 hocs. TestComponent and HOCs have their own state with counter.\nCommit https://github.com/Grimones/cra-rhl/commit/632e93d30a332e3533398e79feacefca0edfbe81\nI have read react-stand-in and Known limitations and side effects and i guess that it is expected behaviour. See logs below.\nWhen adding first hoc to the TestComponent i get \n```js\nReact-hot-loader: a _class6 was found where a Component was expected.\n          function _class6() {\n      var _ref3;\n  var _temp3, _this5, _ret3;\n\n  _classCallCheck(this, _class6);\n\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return _ret3 = (_temp3 = (_this5 = _possibleConstructorReturn(this, (_ref3 = _class6.__proto__ || Object.getPrototypeOf(_class6)).call.apply(_ref3, [this].concat(args))), _this5), _this5.state = {\n    counter: 0\n  }, _temp3), _possibleConstructorReturn(_this5, _ret3);\n}\n\nflow.forEach | @ | hotReplacementRender.js:177\n-- | -- | --\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:168\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | ./node_modules/react-hot-loader/lib/reconciler/hotReplacementRender.js.exports.default | @ | hotReplacementRender.js:190\n\u00a0 | componentWillReceiveProps | @ | AppContainer.dev.js:57\n\u00a0 | callComponentWillReceiveProps | @ | react-dom.development.js:6389\n\u00a0 | updateClassInstance | @ | react-dom.development.js:6575\n\u00a0 | updateClassComponent | @ | react-dom.development.js:7848\n\u00a0 | beginWork | @ | react-dom.development.js:8225\n\u00a0 | performUnitOfWork | @ | react-dom.development.js:10224\n\u00a0 | workLoop | @ | react-dom.development.js:10288\n\u00a0 | callCallback | @ | react-dom.development.js:542\n\u00a0 | invokeGuardedCallbackDev | @ | react-dom.development.js:581\n\u00a0 | invokeGuardedCallback | @ | react-dom.development.js:438\n\u00a0 | renderRoot | @ | react-dom.development.js:10366\n\u00a0 | performWorkOnRoot | @ | react-dom.development.js:11014\n\u00a0 | performWork | @ | react-dom.development.js:10967\n\u00a0 | requestWork | @ | react-dom.development.js:10878\n\u00a0 | scheduleWorkImpl | @ | react-dom.development.js:10732\n\u00a0 | scheduleWork | @ | react-dom.development.js:10689\n\u00a0 | enqueueForceUpdate | @ | react-dom.development.js:6250\n\u00a0 | ./node_modules/react/cjs/react.development.js.Component.forceUpdate | @ | react.development.js:255\n\u00a0 | getInstances.forEach.inst | @ | utils.dev.js:33\n\u00a0 | setTimeout | @ | utils.dev.js:33\n\u00a0 | setTimeout (async) | \u00a0 | \u00a0\n\u00a0 | updateInstances | @ | utils.dev.js:33\n\u00a0 | sourceModule.hot.addStatusHandler.status | @ | utils.dev.js:45\n\u00a0 | hotSetStatus | @ | bootstrap\u00a0f21f7b7\u2026:201\n\u00a0 | hotApply | @ | bootstrap\u00a0f21f7b7\u2026:547\n\u00a0 | (anonymous) | @ | bootstrap\u00a0f21f7b7\u2026:288\n\u00a0 | Promise resolved (async) | \u00a0 | \u00a0\n\u00a0 | hotUpdateDownloaded | @ | bootstrap\u00a0f21f7b7\u2026:287\n\u00a0 | hotAddUpdateChunk | @ | bootstrap\u00a0f21f7b7\u2026:264\n\u00a0 | webpackHotUpdateCallback | @ | bootstrap\u00a0f21f7b7\u2026:7\n\u00a0 | (anonymous)\n```\nAnd TestComponent is refreshed, counter starts from beginning.\nThis is what i get when i add second HOC\n```js\nReact-hot-loader: a _class4 was found where a Component was expected.\n          function _class4() {\n      var _ref2;\n  var _temp2, _this3, _ret2;\n\n  _classCallCheck(this, _class4);\n\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = _class4.__proto__ || Object.getPrototypeOf(_class4)).call.apply(_ref2, [this].concat(args))), _this3), _this3.state = {\n    counter: 0\n  }, _temp2), _possibleConstructorReturn(_this3, _ret2);\n}\n\nflow.forEach | @ | hotReplacementRender.js:177\n-- | -- | --\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:168\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | ./node_modules/react-hot-loader/lib/reconciler/hotReplacementRender.js.exports.default | @ | hotReplacementRender.js:190\n\u00a0 | componentWillReceiveProps | @ | AppContainer.dev.js:57\n\u00a0 | callComponentWillReceiveProps | @ | react-dom.development.js:6389\n\u00a0 | updateClassInstance | @ | react-dom.development.js:6575\n\u00a0 | updateClassComponent | @ | react-dom.development.js:7848\n\u00a0 | beginWork | @ | react-dom.development.js:8225\n\u00a0 | performUnitOfWork | @ | react-dom.development.js:10224\n\u00a0 | workLoop | @ | react-dom.development.js:10288\n\u00a0 | callCallback | @ | react-dom.development.js:542\n\u00a0 | invokeGuardedCallbackDev | @ | react-dom.development.js:581\n\u00a0 | invokeGuardedCallback | @ | react-dom.development.js:438\n\u00a0 | renderRoot | @ | react-dom.development.js:10366\n\u00a0 | performWorkOnRoot | @ | react-dom.development.js:11014\n\u00a0 | performWork | @ | react-dom.development.js:10967\n\u00a0 | requestWork | @ | react-dom.development.js:10878\n\u00a0 | scheduleWorkImpl | @ | react-dom.development.js:10732\n\u00a0 | scheduleWork | @ | react-dom.development.js:10689\n\u00a0 | enqueueForceUpdate | @ | react-dom.development.js:6250\n\u00a0 | ./node_modules/react/cjs/react.development.js.Component.forceUpdate | @ | react.development.js:255\n\u00a0 | getInstances.forEach.inst | @ | utils.dev.js:33\n\u00a0 | setTimeout | @ | utils.dev.js:33\n\u00a0 | setTimeout (async) | \u00a0 | \u00a0\n\u00a0 | updateInstances | @ | utils.dev.js:33\n\u00a0 | sourceModule.hot.addStatusHandler.status | @ | utils.dev.js:45\n\u00a0 | hotSetStatus | @ | bootstrap\u00a0f21f7b7\u2026:201\n\u00a0 | hotApply | @ | bootstrap\u00a0f21f7b7\u2026:547\n\u00a0 | (anonymous) | @ | bootstrap\u00a0f21f7b7\u2026:288\n\u00a0 | Promise resolved (async) | \u00a0 | \u00a0\n\u00a0 | hotUpdateDownloaded | @ | bootstrap\u00a0f21f7b7\u2026:287\n\u00a0 | hotAddUpdateChunk | @ | bootstrap\u00a0f21f7b7\u2026:264\n\u00a0 | webpackHotUpdateCallback | @ | bootstrap\u00a0f21f7b7\u2026:7\n\u00a0 | (anonymous)\n```\nTestComponent and HOC gets refreshed\nAnd when i add the third HOC \n```js\nReact-hot-loader: a _class2 was found where a Component was expected.\n          function _class2() {\n      var _ref;\n  var _temp, _this, _ret;\n\n  _classCallCheck(this, _class2);\n\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n    counter: 0\n  }, _temp), _possibleConstructorReturn(_this, _ret);\n}\n\nflow.forEach | @ | hotReplacementRender.js:177\n-- | -- | --\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:168\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | ./node_modules/react-hot-loader/lib/reconciler/hotReplacementRender.js.exports.default | @ | hotReplacementRender.js:190\n\u00a0 | componentWillReceiveProps | @ | AppContainer.dev.js:57\n\u00a0 | callComponentWillReceiveProps | @ | react-dom.development.js:6389\n\u00a0 | updateClassInstance | @ | react-dom.development.js:6575\n\u00a0 | updateClassComponent | @ | react-dom.development.js:7848\n\u00a0 | beginWork | @ | react-dom.development.js:8225\n\u00a0 | performUnitOfWork | @ | react-dom.development.js:10224\n\u00a0 | workLoop | @ | react-dom.development.js:10288\n\u00a0 | callCallback | @ | react-dom.development.js:542\n\u00a0 | invokeGuardedCallbackDev | @ | react-dom.development.js:581\n\u00a0 | invokeGuardedCallback | @ | react-dom.development.js:438\n\u00a0 | renderRoot | @ | react-dom.development.js:10366\n\u00a0 | performWorkOnRoot | @ | react-dom.development.js:11014\n\u00a0 | performWork | @ | react-dom.development.js:10967\n\u00a0 | requestWork | @ | react-dom.development.js:10878\n\u00a0 | scheduleWorkImpl | @ | react-dom.development.js:10732\n\u00a0 | scheduleWork | @ | react-dom.development.js:10689\n\u00a0 | enqueueForceUpdate | @ | react-dom.development.js:6250\n\u00a0 | ./node_modules/react/cjs/react.development.js.Component.forceUpdate | @ | react.development.js:255\n\u00a0 | getInstances.forEach.inst | @ | utils.dev.js:33\n\u00a0 | setTimeout | @ | utils.dev.js:33\n\u00a0 | setTimeout (async) | \u00a0 | \u00a0\n\u00a0 | updateInstances | @ | utils.dev.js:33\n\u00a0 | sourceModule.hot.addStatusHandler.status | @ | utils.dev.js:45\n\u00a0 | hotSetStatus | @ | bootstrap\u00a0f21f7b7\u2026:201\n\u00a0 | hotApply | @ | bootstrap\u00a0f21f7b7\u2026:547\n\u00a0 | (anonymous) | @ | bootstrap\u00a0f21f7b7\u2026:288\n\u00a0 | Promise resolved (async) | \u00a0 | \u00a0\n\u00a0 | hotUpdateDownloaded | @ | bootstrap\u00a0f21f7b7\u2026:287\n\u00a0 | hotAddUpdateChunk | @ | bootstrap\u00a0f21f7b7\u2026:264\n\u00a0 | webpackHotUpdateCallback | @ | bootstrap\u00a0f21f7b7\u2026:7\n\u00a0 | (anonymous)\n```\nAnd again all of them gets refreshed.\nFinally when all HOCs are set i'm able to modify render method in HOCs and TestComponent without refreshing them and loosing state. On modifying lifecycle methods i get \n```js\nReact-stand-in: You did update _class6 s lifecycle method \u0192 componentDidMount() {\n        var _this6 = this;\n    this.interval = setInterval(function () {\n      _this6.setState(function (prevState) {\n        return {\n          counter: prevSt\u2026 . Unable to repeat\n\nstack_frame_overlay_proxy_console | @ | index.js:2177\n-- | -- | --\n\u00a0 | _reactUtils.reactLifeCycleMethods.forEach.key | @ | inject.js:84\n\u00a0 | checkLifeCycleMethods | @ | inject.js:82\n\u00a0 | update | @ | createClassProxy.js:131\n\u00a0 | ./node_modules/react-hot-loader/lib/reconciler/proxies.js.exports.updateProxyById | @ | proxies.js:51\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:173\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:175\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:175\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:160\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | next | @ | hotReplacementRender.js:151\n\u00a0 | flow.forEach | @ | hotReplacementRender.js:168\n\u00a0 | hotReplacementRender | @ | hotReplacementRender.js:139\n\u00a0 | ./node_modules/react-hot-loader/lib/reconciler/hotReplacementRender.js.exports.default | @ | hotReplacementRender.js:190\n\u00a0 | componentWillReceiveProps | @ | AppContainer.dev.js:57\n\u00a0 | callComponentWillReceiveProps | @ | react-dom.development.js:6389\n\u00a0 | updateClassInstance | @ | react-dom.development.js:6575\n\u00a0 | updateClassComponent | @ | react-dom.development.js:7848\n\u00a0 | beginWork | @ | react-dom.development.js:8225\n\u00a0 | performUnitOfWork | @ | react-dom.development.js:10224\n\u00a0 | workLoop | @ | react-dom.development.js:10288\n\u00a0 | callCallback | @ | react-dom.development.js:542\n\u00a0 | invokeGuardedCallbackDev | @ | react-dom.development.js:581\n\u00a0 | invokeGuardedCallback | @ | react-dom.development.js:438\n\u00a0 | renderRoot | @ | react-dom.development.js:10366\n\u00a0 | performWorkOnRoot | @ | react-dom.development.js:11014\n\u00a0 | performWork | @ | react-dom.development.js:10967\n\u00a0 | requestWork | @ | react-dom.development.js:10878\n\u00a0 | scheduleWorkImpl | @ | react-dom.development.js:10732\n\u00a0 | scheduleWork | @ | react-dom.development.js:10689\n\u00a0 | enqueueForceUpdate | @ | react-dom.development.js:6250\n\u00a0 | ./node_modules/react/cjs/react.development.js.Component.forceUpdate | @ | react.development.js:255\n\u00a0 | getInstances.forEach.inst | @ | utils.dev.js:33\n\u00a0 | setTimeout | @ | utils.dev.js:33\n\u00a0 | setTimeout (async) | \u00a0 | \u00a0\n\u00a0 | updateInstances | @ | utils.dev.js:33\n\u00a0 | sourceModule.hot.addStatusHandler.status | @ | utils.dev.js:45\n\u00a0 | hotSetStatus | @ | bootstrap\u00a0f21f7b7\u2026:201\n\u00a0 | hotApply | @ | bootstrap\u00a0f21f7b7\u2026:547\n\u00a0 | (anonymous) | @ | bootstrap\u00a0f21f7b7\u2026:288\n\u00a0 | Promise resolved (async) | \u00a0 | \u00a0\n\u00a0 | hotUpdateDownloaded | @ | bootstrap\u00a0f21f7b7\u2026:287\n\u00a0 | hotAddUpdateChunk | @ | bootstrap\u00a0f21f7b7\u2026:264\n\u00a0 | webpackHotUpdateCallback | @ | bootstrap\u00a0f21f7b7\u2026:7\n\u00a0 | (anonymous)\n```\nAnd nothing happens, any reload or loosing state.. Yes, I can confirm that react-app-rewire-hot-loader works without ejecting\nhttps://github.com/Grimones/cra-rhl/commit/4ed74af2dc649301695f67df05a12f210fb7820c. OMG \ud83d\ude1e\nI was cleaning up my repositories. I thought that it was a showcase for an issue and deleted it. I apologize.\nMay be it will be better to add cra example and cra + react-app-rewire-hot-loader here?\n. Thanks for the explanation. Considering the progress with v4 i believe that you will find out how to detect that changes :). ",
    "Somebi": "Problem still persists. ",
    "kimjuny": "problem solved, solutions are in the min-repo. ",
    "smikitky": "I think this is a duplicate of #313. This occurs when you are targeting only at recent browsers with native class support. To work around this, try manually enabling transform-es2015-classes plugin in your .babelrc.. ",
    "coboltDE": "@smikitky your comment saved my life! \nAfter upgrading my react app from es2015 to env (targeting latest 2 versions of chrome in order to get async calls working) my app stopped working for the exact reason @ibyh described. \nThank you!. ",
    "caravinci": "Just realised this has also been the case for me (over what now seems to have been months), except that I never seem to get redbox at all anymore. Is this a removed feature on the latest versions? or maybe my setup has just been broken for a while?. ",
    "ccoffey": "The more I look into this, the more I think its a webpack issue. Closing now because I no longer think this has anything to do with react-hot-loader.. ",
    "mhaagens": "I don't get the [HMR] Cannot apply update. Need to do a full reload! error, but I had the same problem and once I removed inject from MobX the component stopped remounting on change.\nWish there was a way to use inject with HMR though.. Same thing happens with withRouter from React Router. Remount instead of replacing.. ",
    "cristianfraser": "Is there any update on this?. ",
    "lucasmotta": "@alexandernanberg I am having the same issue on my production bundle. Even thou I've the NODE_ENV set to production, it seems like react-hot-loader is bundling its dependencies (like the redbox-react).. ",
    "mingzepeng": "I have the same issue .\nI have add \nnew webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\nin my webpack production config ,and use cross-env to set the NODE_ENV=production. I have resolve this issue\uff0cwhile  I  update all packages and resolve it\nhttps://github.com/bestsuperdev/react-less-boilerplate2\nwindows10\nnode v8.1,3\nnpm v5.0.3\n . ",
    "lostpebble": "Having the same issue here. A temporary solution would be to have two entry files, one for production and one for dev (hot reloading):\nentryProd.tsx\n```\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(, document.getElementById(\"root\"));\n```\nentryDev.tsx\n```\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { AppContainer } from \"react-hot-loader\";\nimport App from \"./App\";\nconst render = Component => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById(\"root\")\n  );\n};\nif (module.hot) { module.hot.accept(\"./App\", () => { render(App); }); }\n```\nIn Webpack config:\nentry: {\n    \"app\": process.env.NODE_ENV !== \"production\"\n      ? [\"react-hot-loader/patch\", \"./src/_frontend/entryHot.tsx\"]\n      : [\"./src/_frontend/entryProd.tsx\"],\n  },\nObviously not ideal if your entry files contain a lot of other logic (can try put that into a common file required in both maybe), but a way forward for now at least.. ",
    "tasiov": "I am also having this issue and would prefer not to have two entry files for each of my applications.. ",
    "davidhouweling": "@alexanderchr I believe the issue is that you've got react-hot-loader/patch as part of your entry for both your dev and prod builds in your webpack.config.js. You should not include it in your prod build, so really that line should be conditional. Hopefully that resolves your issue (and others).. ",
    "alasdairhurst": "What's the reason JSON.stringify('production') is used? It seems redundant.. @neoziro can you answer the question I have above? Why not just this?\nplugins:[\n  new webpack.DefinePlugin({\n    'process.env.NODE_ENV': 'production'\n  })\n]. ",
    "polonel": "Same issue for me. I would like to not have two entry points. Any suggestions?. ",
    "merksam": "Maybe it will be helpful. I had the same issue and it was because in my .babelc was plugin\n\"react-hot-loader/babel\". After I removed this list it's fixed. I needed it just for building project and not developing so it's okay for me. I think it's question about production .babelrc file.. ",
    "LA1CH3": "I'm not using the babel plugin and still experience this issue. My only solution currently is to create separate dev and prod entry points. . ",
    "lili21": "Still have the issue.. Thanks for that.. still have the issue. \nI'm using react-hot-loader@4.3.3\n. https://github.com/lili21/react-hot-loader-demo. I think mode: production already did that for me.. js\nnew webpack.DefinePlugin({\n     'process.env.NODE_ENV': JSON.stringify('production')\n })\ndoesn't work for me.\nNODE_ENV=production webpack --config webpack.prod.js works.. ",
    "ganxunzou": "cross-env NODE_ENV=production npm run babel is ok. ",
    "pats": "@ganxunzou nope, doesn't work for me, still have the issue,\n. Still, providing NODE_ENV=production doesn't work, . ",
    "ktunkiewicz": "This code is added by react-hot-loader/babel.\nIn my case I solved this by conditionally adding/removing the babel plugin depends on the ENV.\nIMHO this behaviour should be changed, and if babel plugin detects production environment it should simply not load.. Ah, sorry. OK, makes sense now. Didn't read the sources, just saw a bunch of code there and assumed it is similar to the dev one.... ",
    "mqliutie": "I have the same problem. Hot load mode is not used in both development mode and production mode.\nIn doc, when the mode is set production Sets process.env.NODE_ENV on DefinePlugin to value production. \nSo I think we don't need set process.env.NODE_ENV.\nBut how can I remove the __REACT_HOT_LOADER__ code?\n\n. I have found the reason that in my project I have import third part UI component. They bundle incorrectly. ",
    "bboydflo": "\nThis code is added by react-hot-loader/babel.\nIn my case I solved this by conditionally adding/removing the babel plugin depends on the ENV.\nIMHO this behaviour should be changed, and if babel plugin detects production environment it should simply not load.\n\ndid the same and it works! thanks\nas an example here is my .babelrc.js\n```js\nmodule.exports = api => {\n  const plugins = [\"@babel/plugin-syntax-dynamic-import\"];\n// inject react-hot-loader babel plugin in development only\n  if (api.env(\"development\")) {\n    plugins.unshift(\"react-hot-loader/babel\");\n  }\n  return {\n    presets: [\n      [\n        \"@babel/preset-env\",\n        {\n          modules: false,\n          useBuiltIns: \"usage\"\n        }\n      ],\n      \"@babel/preset-react\"\n    ],\n    plugins\n  };\n};\n```\nand here is my relevant part in webpack.config.js\njs\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        use: \"babel-loader\",\n        exclude: /node_modules/\n      }\n    ]\n  }\nthis is how I run my build process in package.json:\njs\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --hot --env development\"\n  }. ",
    "mikeshukshin": "+1. ",
    "initialdmg": "i encounterd this problem, too. @aga5tya thanks!  When i got this error, i was using react-redux v3.0.5 that is not quite compatible with react-hot-loader v3. This afternoon, i updated react-redux to v4, and the error was gone. So i guess that might was caused by react-redux.. ",
    "aga5tya": "@initialdmg I still don't know what causes the issue, but refactoring to the way react-universally loads client and server entrypoint worked for me. Give it a shot.\nhttps://github.com/ctrlplusb/react-universally/blob/master/client/index.js. ",
    "viridia": "OK that's good to know - it means one less thing to check.\nYeah my devServer uses the same config object as the regular build; only the 'entry' property is changed.. Well, I am stumped. I've been trying to get react-hot-loader to work in my project for about 4 months now, and I've checked and double-checked everything I can think of. I've got the right babel plugins, the right entry points in the webpack config (as far as I can tell), using AppContainer and module.hot, and I still get the same \"It appears that \"react-hot-loader/patch\" did not run immediately before the app started\" error. It used to work really well, but about 4 months ago it broke. I've been able to get react-hot-loader to work in other, smaller projects but not this one.. Yeah, I figured it out, and it has nothing to do with 'external'. Basically I wanted to be able to import my project sources using absolute paths (import Stuff from \"components/Stuff.jsx\") and so I added a resolve.modules entry for my source files:\nresolve: {\n  modules: [\n    path.resolve(__dirname, 'src'),\n    path.resolve(__dirname, 'node_modules'),\n    path.resolve(__dirname, 'src/media/icons'),\n  ],\n},\nTurns out this is what broke react-hot-loader. Removing the 'src' entry and everything works fine.. ",
    "defr0zen": "Thanks, works excellent for me with beta.5. ",
    "Philin-Anton": "When can we expect a merger?. ",
    "bmperrea": "This error is stopping me from using react-hot-loader with my webpack 3 config.. This fixed my issue -- oops \ud83d\udc4d . ",
    "teologov": "@bmperrea As a temporary workaround, you can install manually the latest version of source-map module in the node_modules/react-hot-loader.. > can you just try to use read-hot-loader@next (aka version 3) ?\n@theKashey It requires migration to React Router v4, so not yet : /. ",
    "Aranir": "@theKashey thank you for your explanation!\nSo I will close this issue as its not really related to the react-hot-loader directly.\n. ",
    "MikeDevice": "Yes, I understand what you are talking about. Thanks! But I think it's not a good idea to change source code because hot loader not working. I think, it's not a good way to adjust the code for developer tools.. ",
    "zeakd": "You can see that rotating logo is refreshed. it's wrong implementation. Please refer to my pull request #576 . ",
    "lekhnath": "After hours of hair pulling struggle :) I finally figured out the actual issue and it is not directly related to either Webpack or React Hot Loader or React Router or any other library at least for now at least for me.  When using HTML5 push state to manipulate browsers history WE MUST PROVIDE <base> tag in our html head section. After providing <base href=\"/\" /> to the head section of my html, HMR works like a charm even in nested routes. Yay!!!\n```\n<!DOCTYPE html>\n\n\n  THIS TINY LITTLE THING \n\nHello React!\n\n\n\n\n\n\n```. @leidegre Sorry, I've no idea why it worked. That's why even the issue is resolved I've not closed this.. ",
    "rhostem": "@lekhnath I had same issue. Your solution greatly works well!! Thank you.. ",
    "jasonrhaddix": "@lekhnath Confirming this solution worked for me. Thanks for saving me hours of debugging!. ",
    "awthwathje": "This solution works because typically you have your main script imported like this:\n<script type=\"text/javascript\" src=\"main.js\"></script></body>\nWell, basically Webpack handles writing this to HTML.\nAnd if you try to navigate to some deeply nested routes, such as https://yoursite.tld/one/two without <base href=\"/\"> in your <head> this big main.js script is tried to be imported from https://yoursite.tld/one/two/main.js and in fact it is in https://yoursite.tld/main.js.\nIn fact, you can mitigate this issue even without <base> tag, if you manage to import your script this way:\n<script type=\"text/javascript\" src=\"/main.js\"></script></body>\nNote the leading slash before main.js.. ",
    "pdgehrke": "Same Issue With:\nwebpack 4.8.3 \nreact router dom 4.2.2 \nI had the same Issue, but @lekhnath solution would flash the correct page and then load the default homepage instead. However adding \"publicPath:'/'\" to my Webpack module.exports output solved the issue perfectly for me. Now all of my deep links and params work as expected. \nThe Router\n<BrowserRouter>\n      <Switch>\n          <Route path=\"/password_resets/:resetToken\" render={props =>\n               <PasswordReset {...this.props} />\n                    }/> \n      </Switch>\n</BrowserRouter>\nThe Solution publicPath: '/' in webpack.config.js:\nmodule.exports = {\n    output: {\n        path: path.resolve('web'),\n        filename: 'js/bundle.js',\n        publicPath: '/'\n    },...\nAlso use historyApiFallback: true\ndevServer: {\n        historyApiFallback: true\n    },.... ",
    "Ganpatkakar": "I am Facing similar issue with my website also, I have tried the solution provided by @lekhnath to put the base url as <base href=\"/\">, it actually solved my issue for localhost but its still giving issue with my real website.\nI have also tried Solution suggested by @pdgehrke to put \ndevServer: {\n   historyApiFallback: true\n}\nand \nmodule.exports = {\n    output: {\n        path: path.resolve('web'),\n        filename: 'js/bundle.js',\n        publicPath: '/'\n    }\nBut its still not solving my issue, can anyone suggest where i am going wrong or you can help me out with this.\nThanks\n. ",
    "shchypylov": "\nAfter hours of hair pulling struggle :) I finally figured out the actual issue and it is not directly related to either Webpack or React Hot Loader or React Router or any other library at least for now at least for me. When using HTML5 push state to manipulate browsers history WE MUST PROVIDE <base> tag in our html head section. After providing <base href=\"/\" /> to the head section of my html, HMR works like a charm even in nested routes. Yay!!!\n<!DOCTYPE html>\n<html>\n    <head>\n        <base href=\"/\" /> <!-- THIS TINY LITTLE THING -->\n        <meta charset=\"UTF-8\" />\n        <title>Hello React!</title>\n    </head>\n    <body>\n        <div id=\"root\"></div>\n        <script src=\"/main.bundle.js\"></script>\n    </body>\n</html>\n\nGod bless you!. ",
    "alex-mironov": "@theKashey thank you for a prompt answer and sorry for posting it here :(\nps: it doesn't work with webpack-dev-server either. I updated the script to use \n\"cross-env NODE_ENV=development webpack-dev-server --port 3000 --hot --host 0.0.0.0 --config ./internals/webpack/webpack.dev.babel.js\",  and removed \"webpack-hot-middleware/client?reload=true\", from entry. it still doesn't work.. will dig into it. ",
    "joshuapaling": "Closing as this is already reported in https://github.com/gaearon/react-hot-loader/issues/615. ",
    "marcellomontemagno": "Hi @theKashey, thanks for your reply, I'm not sure I understood the impediment there, in the demo I posted the component that is not replaced is transpliled by babel.\nI'm not trying to make RHL work for all the files, I'm not expecting it to replace components present in \"node_modules\" or DLLs and I don't rely on it for business logic, as you said everything must work even without it. \nWhat I'm telling is that if the source code of the RHL library is part of the DLLs it fails to work silently and only in some \"border case\" like the shouldComponentUpdate returning false.\nIf some Impediment is present preventing RHL to work properly when included as a DLL it would be enough to print a warning saying to remove RHL from the DLLs (or to signal the root cause of the problem) to consider this issue closed for me.\nI opened this issue so that somebody else having the same problem might find it and lose less time than me trying to identify the cause.\nI understand that there are thousand of possible configurations achievable with webpack and that DLLs might also be a border case so I expect this issue to have low priority.. ",
    "Kannnnng": "same question\u2026\u2026. @theKashey Thanks for your help~\nI have already added NamedModulesPlugin to the plugins array, and here is the code in my webpack.config.js\nif (process.env.NODE_ENV === 'production') {\n    .......\n} else {\n    plugins = [\n        ......\n        /* \u5728\u7ec4\u4ef6\u70ed\u52a0\u8f7d\u7684\u65f6\u5019\u663e\u793a\u66f4\u65b0\u7684\u7ec4\u4ef6\u540d\u800c\u4e0d\u662f\u539f\u672c\u7684\u7ec4\u4ef6 ID */\n        new webpack.NamedModulesPlugin(),\n        ......\n    ]\n}\nAnd I have also added react-hot-loader/patch to the entry, here is the code in my webpack.config.js\nif (process.env.NODE_ENV === 'production') {\n    .......\n} else {\n    entry = {\n        app: [\n            // 'babel-polyfill',\n            'react-hot-loader/patch',\n            path.resolve(APP_PATH, 'index.js'),\n        ],\n    }\n    ......\n}\nI have done what you said. But this problem still exists. Do you know what's going on?. @theKashey Yes, I did that. The code is in app/index.js.\n```\nconst render = (Component) => {\n    ReactDOM.render(\n        \n\n\n\n\n\n,\n        document.getElementById('app')  // eslint-disable-line\n    )\n}\nrender(Routes)\nif (module.hot) {\n    module.hot.accept('./routes', () => {\n        render(Routes)\n    })\n}\n```. @theKashey Oh sorry, I forgot pushing my repository address. Here is the Project.\nThere are some Chinese comments in the code. You can ignore them.. @theKashey Really? The configuration file is webpack.config.js, and I import the React-hot-loader in app/index.js.\nOh, please note that the branch is develop.v2 rather than master.. @theKashey I add the react-hot-component-loader to my code but another problem arises. This error occurred in react-hot-component-loader/src/index.js.\nERROR in ./~/.1.0.1@react-hot-component-loader/src/index.js\nModule parse failed: /Users/kang/Documents/Project/React-demo/node_modules/.1.0.1@react-hot-component-loader/src/index.js Unexpected token (61:8)\nYou may need an appropriate loader to handle this file type.\n|     if (AsyncComponent) {\n|       return (\n|         <AppContainer>\n|           <AsyncComponent {...this.props} />\n|         </AppContainer>\n @ ./app/routes.js 8:0-49\n @ ./app/index.js\n @ multi ./~/.2.4.5@webpack-dev-server/client?http://localhost:9000 webpack/hot/dev-server react-hot-loader/patch ./app/index.js\nIt told me that I need an appropriate loader to handle this file type. But I have used babel-loader for all the JS files. I can not figure out where it was wrong......\nBy the way, it seems that the root of the problem was not react-loadable. Even if I do not use react-loadable, the problem still exists.. @theKashey Are you running my project? Why is the problem still exists when I run my project after I remove react-loadable and react-router....... @theKashey It does not work for me......so sad......\nI have removed irrelevant code as much as possible. But this bug fell in love with me. I can not get rid of it......Orz. OH MY GOD! I find the root of this problem!\nThe reason is that I use the latest React syntax in my React components. In my code, I am writing my components like this:\n```\nclass Test extends React.Component {\n  static propTypes = {\n    ......\n  }\nstatic defaultProps = {\n    ......\n  }\nconstructor(props) {\n    super(props)\nthis.state = {\n  ......\n}\n\n}\nhandleOnClickliked = () => {\n    ......\n  }\nrender() {\n    ......\n  }\n}\n```\nPlease note this code: static propTypes = {} and static defaultProps = {}. It belongs to ES7, and it needs to use the babel-preset-stage-0 for transcoding. But it can not be transcoded when add the \"plugins\": [\"react-hot-loader/babel\"] to the .babelrc. So if I write code like this:\n```\nclass Test extends React.Component {\nconstructor(props) {\n    super(props)\nthis.state = {\n  ......\n}\n\n}\nhandleOnClickliked = () => {\n    ......\n  }\nrender() {\n    ......\n  }\n}\nTest.propTypes = {\n  ......\n}\nTest.defaultProps = {\n  ......\n}\n```\nThis works fine! So I think that the reason of this problem is react-hot-loader/babel can not handle ES7!. @theKashey Oh yes. The wrong code is not here. This morning I reused the static class method and it works fine. And the problem is really about the react-loadable. You are right!\nBut how to fix that? I use react-hot-component-loader that you suggested but there was a mistake mentioned above......:(. @theKashey Aha, You updated this tool yesterday. I did not even notice that. Want to cry......\nBut there are two problems about react-hot-component-loader.\nWarning: Accessing PropTypes via the main React package is deprecated. Use the prop-types package from npm instead.\n```\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\n[HMR] Checking for updates on the server...\n[HMR] unexpected require(./app/containers/Home/index.js) from disposed module ./app/routes.js\n[HMR] Updated modules:\n[HMR]  - ./app/components/DiscussionBottomToolBar/index.js\n[HMR]  - ./app/containers/Home/index.js\n[HMR]  - ./app/routes.js\n[HMR] App is up to date.\n```\nThe first is easy to fixed.\nThe second warning arised when the hot update is complete. This seems to be a general problem.. @theKashey It works fine for me now! Thanks a lot for your help.  Your work is so outstanding!. ",
    "sorenhoyer": "@neoziro @theKashey This seems to still be an issue. Any chance we could re-open this issue, until a section has been added to the docs?. ",
    "ConneXNL": "Seems like hot reloading just no longer works the moment I add a DLL (even if the DLL only contains a harmless module like \"classnames\").\nEdit: Looks like this specific issue of nothing happening was related to DLLPlugin itself. Somehow I have to use --inline in webpack-dev-server to bootstrap the HotModuleLoading. Still need to test with react-hot-loader though.. @theKashey Looks like my above comment  was related to DLLPlugin itself. Somehow I have to use --inline in webpack-dev-server to bootstrap the HotModuleLoading. Still need to test with react-hot-loader though.\nOk, for me things are working using the latest versions of webpack, webpack-dev-server and react-hot-loader.\nUnlike OP I am defining the modules in the DLL by hand.. ",
    "foisonocean": "@theKashey I use webpack.DefinePlugin:\njs\nnew webpack.DefinePlugin({\n  'process.env': {\n    'NODE_ENV': JSON.stringify('production'),\n  },\n}),. @theKashey I think react-hot-loader/babel plugin is auto removed in production mode.. @theKashey \nhttps://github.com/gaearon/react-hot-loader/blob/7ab86ed2daeffe334e453456f25a9a0b27fadec6/src/babel/index.js#L96-L99. @theKashey \nThis is my npm build script:\njson\n{\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production webpack --config webpack.config.prod.js\"\n  }\n}. @theKashey \n```js\n// webpack.config.base.js\nconst { resolve } = require('path');\nconst webpack = require('webpack');\nconst config = {\n  entry: {\n    app: [\n      './src/index.jsx',\n    ],\n  },\noutput: {\n    path: resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n  },\nmodule: {\n    rules: [\n      {\n        test: /.jsx?/i,\n        use: [\n          'cache-loader',\n          'babel-loader',\n        ],\n        exclude: /node_modules/,\n      },\n      {\n        test: /.scss/i,\n        use: [\n          'style-loader',\n          'css-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\nplugins: [\n    new webpack.DefinePlugin({\n      'process.env': {\n        'NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n      },\n    }),\nnew webpack.optimize.CommonsChunkPlugin({\n  name: 'vendor',\n  minChunks (module) {\n    // a module is extracted into the vendor chunk if...\n    return (\n      // it's inside node_modules\n      /node_modules/.test(module.context)\n    );\n  }\n}),\n\n],\n};\nmodule.exports = config;\n```\n```js\n// webpack.config.prod.js\nconst { resolve } = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst baseConfig = require('./webpack.config.base');\nconst config = merge(baseConfig, {\n  devtool: false,\noutput: {\n    filename: '[name].[chunkhash:8].js',\n  },\nmodule: {\n    rules: [\n      {\n        test: /.css/i,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: {\n            loader: 'css-loader',\n            options: { minimize: true },\n          },\n        }),\n      },\n    ],\n  },\nplugins: [\n    new webpack.optimize.ModuleConcatenationPlugin(),\nnew webpack.optimize.UglifyJsPlugin({\n  compress: {\n    warnings: false,\n  },\n  output: {\n    comments: false,\n  },\n  sourceMap: false,\n}),\n\nnew ExtractTextPlugin({\n  filename: '[name].[contenthash:8].css',\n  allChunks: true,\n}),\n\nnew HtmlWebpackPlugin({\n  filename: resolve(__dirname, './dist/index.html'),\n  template: 'index.html',\n  inject: true,\n  minify: {\n    removeComments: true,\n    collapseWhitespace: true,\n    removeAttributeQuotes: true,\n  },\n  chunksSortMode: 'dependency'\n}),\n\n],\n});\nmodule.exports = config\n```\nNPM build scripts:\njson\n{\n  \"scripts\": {\n    \"build\": \"cross-env NODE_ENV=production webpack --config webpack.config.prod.js\"\n  }\n}. @theKashey \nThanks. I solved my problem by remove cache-loader in production mode.. ",
    "ipostol": "from my package.json > \"webpack\": \"^3.5.5\". ",
    "peteruithoven": "That's an assumption?\nIf I'm working on style (css etc) I don't need the console to be open and\nor I'm using a different panel.\nOn Sep 17, 2017 16:35, \"Greg Berg\u00e9\" notifications@github.com wrote:\n\nYou can follow the loading progression in console. Usually you have it\nopened when you develop. I think this is not useful to add a visual\nindicator on the page.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/633#issuecomment-330057040,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAf7ygKLFb3gQVeSyMSdyffSP8rqpLdmks5sjTwqgaJpZM4PXJNv\n.\n. \n",
    "MAPESO": "it seems there is a small problem with node 6 and 7. Error comes from travis.. @neoziro  How can we do that? to update the dependencies. @neoziro If this theme does not reach an end, the best thing would be to close it \ud83d\ude04 . ",
    "eliseumds": "@neorizo I was wondering whether there's a new convention to solve this kind of issue. Should components make sure to register themselves on both willMount and didMount?. ",
    "KidkArolis": "I have diffed the bundle.js produced in both modes and here is a comparison of individual module:\nreact-hot-loader/babel\n```js\n{\n  //\n  \"./src/Layout.js\":\n  //\n    (function(module, webpack_exports, webpack_require) {\n\"use strict\";\n/* harmony export (immutable) */\n__webpack_exports__[\"a\"] = Layout;\n/* harmony import */\nvar __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(\"./node_modules/react/react.js\");\n/* harmony import */\nvar __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\nfunction Layout(_ref) {\n  var children = _ref.children;\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'div',\n    null,\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'h1',\n      null,\n      'Hello, world!'\n    ),\n    children\n  );\n};\n\nvar _temp = function() {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Layout, 'Layout', '/Users/karolis/Desktop/react-hot-boilerplate/src/Layout.js');\n}();\n\n;\n\n/***/\n\n})\n}\n```\nreact-hot-loader/webpack\n```js\n{\n  //\n  \"./src/Layout.js\":\n  //\n    (function(module, webpack_exports, webpack_require) {\n\"use strict\";\n/* WEBPACK VAR INJECTION */\n(function(process, module) { /* harmony export (immutable) */\n  __webpack_exports__[\"a\"] = Layout;\n  /* harmony import */\n  var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(\"./node_modules/react/react.js\");\n  /* harmony import */\n  var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\n  function Layout(_ref) {\n    var children = _ref.children;\n\n    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      null,\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'h1',\n        null,\n        'Hello, world!'\n      ),\n      children\n    );\n  }\n\n  ;\n  (function register() { /* react-hot-loader/webpack */\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n        return;\n      }\n      if (typeof module.exports === 'function') {\n        __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/karolis/Desktop/react-hot-boilerplate/src/Layout.js\");\n        return;\n      }\n      for (var key in module.exports) {\n        if (!Object.prototype.hasOwnProperty.call(module.exports, key)) {\n          continue;\n        }\n        var namedExport = void 0;\n        try {\n          namedExport = module.exports[key];\n        } catch (err) {\n          continue;\n        }\n        __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/karolis/Desktop/react-hot-boilerplate/src/Layout.js\");\n      }\n    }\n  })();\n  /* WEBPACK VAR INJECTION */\n}.call(__webpack_exports__, __webpack_require__(\"./node_modules/node-libs-browser/node_modules/process/browser.js\"), __webpack_require__(\"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n/***/\n\n})\n}\n```. @theKashey - did you try to reproduce the issue with my example? The feature is not working as advertised... I'm test driving the new version. Seems to work ok for the most part.\nIn one place I'm getting:\nreact-hot-loader.development.js:1534 Uncaught TypeError: oldType[UNWRAP_PROXY] is not a function\n    at compareComponents (react-hot-loader.development.js:1534)\n    at hotComponentCompare (react-hot-loader.development.js:1558)\n    at reconcileSingleElement (react-dom.development.js:13743)\n    at reconcileChildFibers (react-dom.development.js:13825)\n    at reconcileChildren (react-dom.development.js:14200)\n    at updateFunctionComponent (react-dom.development.js:14341)\n    at beginWork (react-dom.development.js:15196)\n    at performUnitOfWork (react-dom.development.js:17941)\n    at workLoop (react-dom.development.js:17981)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:149)\nWhy could that be? I could try to compile a reproducable example, but pretty tricky to extract from the code.. Ok, I think it's happening specifically when I wrap my import like this:\nWorks:\njs\nimport SomeComponent from 'pages/SomeComponent'\nconst App = () => (\n  <SomeComponent />\n)\nexport default hot(App)\nDoes not work:\n```js\nconst SomeComponent = ac(() => import('pages/SomeComponent'))\nconst App = () => (\n  \n)\nexport default hot(App)\nfunction ac (importComponent) {\n  return function Component (props) {\n    const [C, setComponent] = useState()\n    useEffect(() => {\n      importComponent().then(setComponent)\n    }, [])\n    return C ?  : null\n  }\n}\n```\nI guess it's a bit fancy, but I'm trying to load my pages async. But I'm getting that error from the previous comment.. If I use react-loadable instead, I don't get that error. But now, whenever I save a file, it updates but only shows an old version, from the previous save, not the last save. Very strange.. Ok, fwiw, if I lazy load components using React.lazy everything works great. Apologies for the noise on already heavy thread, should have opened a separate issue.\nHaving said that, would be interesting to understand why that bit of code above throws oldType[UNWRAP_PROXY] is not a function, might lead to some bugfix.. ",
    "Dwlad90": "+1. ",
    "mymtw": "@gaearon 3.x still in beta, I didn't want to use it. Currently It looks like further development of React 16 is meaningless, while his ecosysyem not ready to use him. ",
    "noahgrant": "hi @gaearon (love your work and thank you!), i actually don't want to upgrade to 3.x because it requires so many other changes to our codebase (for example, figuring out how to appropriately adding module.hot blocks to our code splits (we don't use React Router), the fact that we use decorators exclusively in the way that doesn't work with RHL, etc etc). we have been thrilled with 1.x, but would also like to upgrade to react 16; the problem is that not having a RHL on-par with react 15 would be a blocker for upgrading because of RHL's incredible productivity benefits.\nthat said, i'd happily fork 1.x and make minor modifications if that were all that was necessary to fix the ReactMount issues. if you might be able to point me in the right direction or give any tips, that would be greatly appreciated. thank you!. thanks @theKashey, but i'm not actually looking to upend my existing infrastructure to support different tools. my issue is really that i can't keep using RHL 1.3 when upgrading to react, and, tbh, our existing 1.3 usage is the smoothest dev experience. if there's a way that i can easily replace the mounting function (./lib/Mount) with something for react 16, that would be really wonderful. if it's not too involved, i can try to take that on myself.\nupgrading to RHL 3.x, i'm seeing all kinds of odd behavior, like updates navigating back to a previous SPA route, component proxies copying over components but leaving their props as undefined (which then errors), and updating in place once but then reloading on additional updates. in general, 1.3x is such a better dev experience that i'm not sure we can update to react 16 without it.  is there another exposed internal from React 16 that can replace lib/Mount?\nthank you for your time!. i think we might be misunderstanding each other a bit. v3 is unusable for me right now for a few reasons\u2014one is the binding issue after transpiling only to modern browsers. but another reason is simply that our app architecture doesn't easily work with the things v3 requires:\n\n\nwe depend on shouldComponentUpdate when we update pages (we don't use React Router) to show a loader over the previous page. this isn't possible when our top component is rendered as children (where no diff/sCU happens, in this case via AppContainer).\n\n\nwe use require.ensure for code splitting, and while i have gotten it to work a little bit with webpack HMR, it has caused some issues with hot reloader.\n\n\nnot to mention i'm just getting very inconsistent behavior from reloading, like when it hot reloads once and then refreshes on the next save. so, now back to your other point:\n\nBehavior of v1 is very, very bad.\n\nthis is not my experience\u2014in fact, relative to the issues i highlighted above, i will gladly take any of v1's shortcomings. v3 is impossible to use right now, and v1 seems to fail only because it doesn't know how to mount in react 16. if there is a modestly easy way to plug in a ReactMount equivalent to v1, i would much, much rather do that, since there are mega issues with v3 (at least, it seems, when not using a fairly strict architecture), and it also seems like there isn't much development on it (some of those major open issues have been open for over a year).\nso, given this, how can we replace ReactMount in v1?\nthank you again for your time!. thanks, @theKashey. to be honest, i'm not sure i understood the statements that were written in your PS above, but unless i can use v3 with un-transpiled es6, it doesn't matter. i'll try to work on it at some point. in the meantime, i think i'll have to stay on React v15.... For posterity, I ended up really hacking together a solution to use v1 with React 16.\n\nI forked the RHL repo and removed all ReactMount references.\nIn my app logic, I exposed my root component to the global scope:\n\njs\nif (process.env.NODE_ENV !== 'production') {\n  window.rootComponent = myRootComponent;\n}\n\nin RHL v1's index.js, require in react-deep-force-update v1 here\nin RHL v1's index.js, replace this line with:\n\njs\n'deepForceUpdate(React)(window.rootComponent);',\nThis isn't optimal, of course, but has allowed us to maintain the productivity benefits of RHL (v1) while also being able to upgrade to React 16. Just wanted to post here in case other people are having the same problems.. ",
    "robwierzbowski": "I have the same error on a minimal project using:\n\"react\": \"^16.0.0\",\n\"react-dom\": \"^16.0.0\",\n\"react-hot-loader\": \"^3.0.0-beta.7\"\nThe stack trace leads to the HotContainer component, double checked everything works when commenting it out.\nChecked that this error throws on both dev and prod versions. . OK, I tracked down the issue. The new docs are for master, BUT it seems the beta-7 release I get from npm install --save react-hot-loader@next installs a version with the earlier API:\npackage.json:\n\"dependencies\": {\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"react-hot-loader\": \"^3.0.0-beta.7\"\n  },\nInstalled module:\n\n\n@ciaoben: Using the <AppContainer> element instead of <HotContainer> fixed my issue.. Did you add the Babel preset, entry file, and wrapper code?. In your configuration here:\nif (module.hot) {\n     module.hot.accept('./index.js', () => {\n       render(\n         <Provider store={store}>\n           <Router history={history}>{routesToRender}</Router>\n         </Provider>\n       )\n     })\n   }\nYou're not wrapping with the <AppContainer>. That might have something to do with it.\nThe suggested pattern uses the container in both the render and the reloader: \n```\nconst render = (Component) => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('root'),\n  );\n};\nrender(App);\nif (module.hot) {\n  module.hot.accept('./components/App', () => { render(App); });\n}\n```. The closing of this issue could be updates to the mismatched element name / documentation. Let's make sure the maintainers see so other people don't run into the same issue \ud83d\ude42. Sure. \nUsing v4 beta 15, Webpack 3, webpack dev server.\nConfig contained the following (sorry, cannot share complete, it's from work): \n```\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    ew ExtractTextPlugin({\n      filename: 'style.css',\n    }),\nnew HtmlWebpackPlugin({\n  template: './dev/index.html',\n}),\n\n],\nmodule: {\n    rules: [\n      {\n        test: /.jsx?$/,\n        exclude: /node_modules/,\n        loaders: ['babel-loader'],\n      },\n  },\n```\nHMR + RHL were doing full reloads on change for every module except the ones I exported with export default hot(module)(MyModule). Those reloaded in place.\nAfter removing ExtractTextPlugin, I only needed to add export default hot(module)(App) to the root component for hot module reloading of every component.\nI removed ExtractTextPlugin based on this comment: https://github.com/gaearon/react-hot-loader/issues/687#issuecomment-338857271.\n. ",
    "ciaoben": "@robwierzbowski thanks, now the error is gone. But every chance triggers a full reload.. \ud83d\ude16. @robwierzbowski \nThanks for the help, here my situation:\n```\n// webpack.config.js\n  entry: ['react-hot-loader/patch', './src/index.js'],\n ....\n use: [{ loader: 'babel-loader', options: { plugins: ['lodash'] } }]\n// package.json\n     \"babel\": {\n         \"presets\": [\n            [\n                \"es2015\",\n                {\n                    \"modules\": false\n                }\n            ],\n             \"react\",\n             \"stage-2\"\n         ],\n       \"plugins\": [\"lodash\", \"recharts\", \"react-hot-loader/babel\"]\n     },\n``\nI suspect that has something to do onreact-router` v2 and how I use it... If notice something wrong in my config please tell me, anyway I think this specific issue can be closed!. ",
    "colinrcummings": "Found the same. I'm doing import { AppContainer as HotContainer } from 'react-hot-loader' for the time being.. Are folks married to the name AppContainer here? In Redux applications, I sometimes have a top-level App component that, after being connected to the store via react-redux, is named AppContainer by way of convention. While this connected App component isn't imported in the app.js entry point where HMR is configured (Root is), it is imported one level down in the Root component where it's wrapped inside the Provider.  HotContainer feels cleaner in this respect. Thoughts?. Thanks, @Fer0x. Will these steps still be required once this PR lands in master?. ",
    "randomvasya": "It does not matter what the container will be called. The main thing is that the description (in this case - the migration manual) should clearly describe this and contain only up-to-date information. If I do not like the name, I use import { member as alias } from \"module-name\";. ",
    "FedeG": "Related with https://github.com/gaearon/react-hot-loader/issues/647. ",
    "alexanderwhatley": "Sorry, I'm not understanding what the migration to version 3.0 has to do\nwith my question? Could you go into a bit more detail please?\n\u1427\nOn Sat, Sep 30, 2017 at 3:02 PM, Greg Berg\u00e9 notifications@github.com\nwrote:\n\nYou should refer to https://github.com/gaearon/\nreact-hot-loader/tree/master/docs#migration-to-30\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/649#issuecomment-333329085,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANiP1m0xjr97cherpiuo4c_1VzsIQAJrks5snpBUgaJpZM4PppsC\n.\n. Apologies, I don't think the OP was clear. I am using the example code from https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate to start out, which is one of the recommended examples for react-hot-loader. The code does all four of the things you mentioned already, and hot reloading works fine. However, when I made the modifications that I mentioned in the OP, such as switching the server to Flask, and slightly changing package.json, the hot reloading stopped working. I am trying to figure out why, and how to fix these issues. . @neoziro, Do you think you could reopen this issue, since there doesn't seem to be a solution yet?. Hmm, I changed the \"start:...\" to \"scripts\": {\"start\": \"webpack-dev-server --hot --inline --progress\"}, but the problem persists. I'll take a look at webpack-dev-server proxy mode. Also, @gaearon, do you have any idea what could be wrong here? . Sorry, I'm not following. The fact that hot reloading works with node, but not with flask seems to indicate that this does have something to do with react-hot-loader, doesn't it? \n\nI modified my webpack configuration file to use webpack proxying (on port 8080), but hot reloading still does not work. How exactly do I configure it properly:\n```\nconst webpack = require('webpack')\nconst path = require('path')\nmodule.exports = {\n    devtool: 'source-map',\n    entry: {\n        'app': [\n            'babel-polyfill',\n            'react-hot-loader/patch',\n            './src/index'\n        ]\n    },\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].js'\n    },\n    module: {\n        rules: [\n            { test: /.js$/, exclude: /node_modules/, loader: 'babel-loader' }\n        ]\n    },\n    devServer: {\n        proxy: {\n        \"/\": \"http://localhost:8080\"\n        }\n    }\n}\n```\nThanks for your help. . Hmm, it still doesn't work. If it isn't too much trouble for you, do you think you could try to replicate the problem on your end? It should be quick.\n\n\nClone the repository https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate and run 'npm run dev' and verify that hot reloading works by changing the text in the file src/containers/Root.js.\n\n\nTo enable the flask server, stop the npm server, and create a file app.py with the following code:\n\n\n```\nfrom flask import Flask, render_template\napp = Flask(name, static_url_path='',\n            template_folder='', static_folder='dist')\n@app.route('/')\ndef main():\n  return render_template('index.html')\nif name == 'main':\n  app.run(debug=True, reloader_type='stat', port=8080)\n```\nChange package.json to the following:\n{\n    \"scripts\": {\"start\": \"webpack-dev-server --hot\"},\n    \"name\": \"react-hot-loader-minimal-boilerplate\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate.git\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"bugs\": {\n        \"url\": \"https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate/issues\"\n    },\n    \"homepage\": \"https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate#readme\",\n    \"dependencies\": {\n        \"react\": \"^15.4.2\",\n        \"react-dom\": \"^15.4.2\",\n        \"react-router-dom\": \"^4.2.2\"\n    },\n    \"devDependencies\": {\n        \"babel-core\": \"^6.23.1\",\n        \"babel-loader\": \"^6.3.2\",\n        \"babel-polyfill\": \"^6.23.0\",\n        \"babel-preset-latest\": \"^6.22.0\",\n        \"babel-preset-react\": \"^6.23.0\",\n        \"react-hot-loader\": \"^3.0.0-beta.6\",\n        \"webpack\": \"^2.2.1\",\n        \"webpack-dev-server\": \"^2.4.1\"\n    }\n}\nChange webpack.config.js to the following:\n```\nconst webpack = require('webpack')\nconst path = require('path')\nmodule.exports = {\n    devtool: 'source-map',\n    entry: {\n        'app': [\n            'babel-polyfill',\n            'react-hot-loader/patch',\n            './src/index'\n        ]\n    },\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: '[name].js'\n    },\n    module: {\n        rules: [\n            { test: /.js$/, exclude: /node_modules/, loader: 'babel-loader' }\n        ]\n    },\n    devServer: {\n                \"hot\": true,\n        proxy: {\n        \"/\": \"http://localhost:8080\"\n        }\n    }\n}\n```\n\nStart the flask server (python app.py) and Webpack (webpack -w), and modify src/containers/Root.js to see if hot reloading works. For the record, I wasn't able to get reloading working even when I manually closed and restarted the server. I could only get the changes to show through hard-refresh Ctrl-F5 on the browser. \n. \"hot\" is not under proxy, it is under devServer (https://webpack.js.org/configuration/dev-server/#devserver-hot).\n\nThe fact that hot reloading is not working under my configuration could indicate either a potential bug, or perhaps something in the library that could be improved to make it easier to use. I understand that you're busy, but could you at least reopen this issue, so that someone else could maybe take a look and try replicating? Thanks. . Thanks @mrwillis, I will give that a try. When you say \"api requests starting with /api\", are you referring to the Flask routes?. Hi @mrwillis, I was able to get hot reloading with dev server working! Thanks for your help! How do you do the hot reloading in production mode though? . Hmm, so how do I update the web pages without a hard refresh? With the current setup, using Flask and 'webpack -w' to make the bundle, the old version of the webpage gets cached, and does not change until I do a hard refresh. . @mrwillis?. ",
    "mrwillis": "There is no dependence on Flask or any backend in this library. I think you may have this a bit confused. In development, you have the webpack-dev-server which serves two files index.html and main.js. With just the basic set-up, it assumes NO backend API. It looks like here you are trying to use Flask to also serve index.html and main.js (although I see no code right now that additionally serves main.js) This will not work. You cannot use both webpack-dev-server and Flask. You have to use webpack-dev-server. The only use for Flask is to proxy API requests and it looks like now you are not even using webpack-dev-server because you are running webpack -w. \nI suggest doing this instead:\n\nUse webpack-dev-server like in the example. Copy exactly the example. \nSet up your flask server to target HOST = 0.0.0.0 \nEnable proxy mode as below to route your api requests starting with /api to localhost:5000\n\nHere is an example config for the dev server with proxy mode(I am using Flask for an API server in project). It has socket.io also, you may not need that. \njavascript\n  devServer: {\n    hot: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        pathRewrite: {'^/api': ''}\n      },\n      '/socket.io': {\n        target: 'http://localhost:5000',\n        ws: true\n      }\n    },\n    historyApiFallback: true,\n    contentBase: resolve(__dirname, 'public'),\n    port: 8881,\n    publicPath: '/',\n    host: '0.0.0.0',\n    overlay: {\n      warnings: true,\n      errors: true\n    },\n    watchContentBase: true,\n    watchOptions: {\n      poll: true\n    }\n  },\n. Indeed. So anything ending with */api will get routed to localhost:5000 (usually it would get routed to localhost:5000/api but I specified in the above config a pathRewrite: {'^/api': ''}. Hopefully that is clear. Here is a snippet in my actual app with the above config.\nFlask endpoint:\n```python\n@app.route('/etf-static-info', methods=['POST'])\n@login_required\ndef get_static_data():\n    requestedEtf = request.get_json()['etf']\nstatic_info = queries.get_static_data(requestedEtf, utils.get_last_trading_day())\n\nreturn jsonify(static=static_info)\n\n```\nAnd the call in JS:\njavascript\nfetch('/api/etf-static-info', {\n      credentials: 'same-origin',\n      method: 'POST',\n      body: JSON.stringify({\n        etf: etf\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(handleFetchErrorMiddleware).then(r => r.json())\n. @alexanderwhatley There is no hot reloading in production. All of this is just for development. You don't need to hot reload anything. In production, you use webpack to bundle main.js and then all you're doing is hosting the bundled index.html and main.js on a web server. A popular set-up for instance using Flask is using nginx as a reverse proxy, hosting main.js and index.html, and then 'reverse proxying' any API requests to a gunicorn server. . ",
    "hbrannan": "Thanks all for indulging the discussion despite it not being quite RHL related. I am also new to a mixed Flask/ React setup & had similar questions. @mrwillis had some responses that pointed me towards the right questions. \nSince this thread still comes up p high on a google search, I think it may be useful to point others with similar questions about setting up React HMR w/ a Flask server to this article on The Missing Manual to React Hot Loader.\nIt's focused on a different implementation, but the article helps clarify hot module & proxying concepts, and ultimately shows you how to sync HMR and the webpack-dev-server with a Flask app by just proxying everything. . ",
    "mateoKaradza": "Still running into this issue, even after using extra-hoc babel plugin and manually extracting HoCs into separate components\nPackage.json: https://github.com/blazing-edge-labs/admin-playground/blob/master/package.json\nComponent with HoCs: https://github.com/blazing-edge-labs/admin-playground/blob/master/src/modules/Examples/Profile/Edit/index.js. Here are the errors I get:\n```\nReact Hot Loader: this component is not accepted by Hot Loader. \nPlease check is it extracted as a top level class, a function or a variable. \nClick below to reveal the source location: \n \u0192 Connect(props, context) {\n        _classCallCheck(this, Connect);\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.version = version;\n \u2026\n\n```\n```\nReact Hot Loader: this component is not accepted by Hot Loader. \nPlease check is it extracted as a top level class, a function or a variable. \nClick below to reveal the source location: \n \u0192 Form() {\n          var _ref;\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Form);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)\u2026\n\n```. @theKashey thanks for taking a look\nHere is the HotContainer for the app: https://github.com/blazing-edge-labs/admin-playground/blob/master/src/index.js#L12\nThere are no errors in the console because I downgraded version of React Hot Loader, latest version was broken for me, I'd get a message in console saying that the component was updated, but it didn't affect loaded app in the browser (any component). I switched to an older version and now it works fine.\nIssue with redux-form is with its initialValues prop. After hot reload, the forms gets re-rendered and it doesn't reload initial values. I saw latests PRs and there was a fix where such functionality can be disabled in development mode, looking forward to test it once they release next version.. ",
    "transcranial": "https://github.com/quangbuule/extract-hoc solved this issue for me for react-apollo and react-redux HOCs. Would be great if this was integrated somehow.. ",
    "AaronFriel": "Correction: it looks like the tarball and version hasn't been updated since some key fixes were implemented over the past few months.\n@gaearon, is there a reason these fixes aren't being published?. How long does it take to publish a new version? (Honestly asking, I'm not familiar with the NPM publishing process.). > It is not necessary to remove PropTypes because they will not be included in production. \nWell that's neat, but what about the people running react-hot-loader in development? The current situation is that it will throw an uncaught exception and redbox or stop rendering because the PropTypes export was removed in React 16: React.PropTypes is undefined. Merely defining PropTypes with React.PropTypes methods now results in errors. I've submitted an alternate patch to continue using PropTypes with the prop-types package, but they were deprecated.. I don't understand, you closed #653 and closed this issue saying, quote:\n\nLet's focus on #652.\n\nIs this project dead?. I can certify that this build does work, and it is the tests that are out of date and depend on deprecated React features. That's what this and #652 are about.. You're jerks, I'm out.. I respectfully decline, he is acting like a jerk, and it's behavior like his which pushes people out of OSS.. I'm sorry, I retract that and I'll edit it to clarify that he is acting like a jerk. And this is beyond technical disagreement, he closed #652 and #653. The latter he closed, saying we'll focus on #652, which remains closed even after I clarified why I submitted it.\nHe left needling comments on #654 that demonstrated:\n\nHe did not read the commits in the PR, see: https://github.com/gaearon/react-hot-loader/pull/654#discussion_r143324852.\nThat I had to re-implement functionality he removed in #639, see: https://github.com/gaearon/react-hot-loader/pull/654#discussion_r143324873\nTests already throw errors in the console, as demonstrated by #657, but he applies a double standard to PRs from others: https://github.com/gaearon/react-hot-loader/pull/654#pullrequestreview-67827427\n. 1. Patches to make React-Hot-Loader work cross-platform require a semver bump even though 3.0 hasn't been released yet? Wait, why did you merge HotContainer then? (See 2.)\n@Neoziro is externalizing responsibilities to make fixes to things he changed. He merged #639, and because I'm submitting patches it's my responsibility to fix other things?\nYou're right, but on Windows even on master I get many, many errors. I haven't had a clean test suite run yet. I can understand why you would want contributors to update your test suite, but again, I think you're just externalizing issues instead of accepting patches to Make Things Work.\n\nNote the double standard, @gaearon. Greg will merge patches that break semver and make existing documentation wrong, but others cannot. Then, when I submit a PR, it's my responsibility to add shims to fix his semver breakage? Why is that my responsibility?\nThis externalizing of responsibility and increasing the burden for accepting patches is unacceptable in an OSS project, and it's bad behavior. It's goalpost moving in terms of requiring ever higher burdens on contributors who want to submit fixes, and it means people like me get frustrated and decide to take our ball and go home.\nI didn't want to spend several hours understanding the test harnesses you built and learning new tools, I wanted to submit patches that enable code to even work. The test harness is totally broken on React 16, and apparently it's my job to fix that too.\n. The unreasonableness continues. @gaearon, I do not think @neoziro is even thoroughly reading any commits. There is no reasonable way for me to produce a JavaScript test for dc1daaa61bddf51a2f1fa0a35d533ceadba44055. It's a platform issue, explained in the commit.. \n. It honestly makes me mad that I even had to download some gif screencast software to produce that silly artifact. This is the second time @neoziro has nitpicked that commit without quite reading what I've written in the commit.\nAnd it makes me mad that he's placing demands on other people to adhere to semver but his own PRs do not. He can change the features and leave the repository in a broken, mismatched docs and API state for weeks and he can foist the responsibility of correcting this on the first person to make a serious effort to get the project to target the release version of React. Sorry, \"the tests are broken\" is an unhelpful critique when of course they're broken, nothing worked on React 16 until I submitted my first patch.\nPeople that treat others trying to contribute fixes so poorly are why so many give up on contributing to open source projects. He's a jerk, and that's fine, I'm a jerk too and that's why I'm more willing to call him out for it and to metaphorically take my ball and go home. Lots of people are jerks in OSS, and some of them are really good at it (e.g.: Linus Torvalds). Even the good ones sometimes they need to be called jerks, hopefully so they're less so the next time. Nobody, with or without a title, gets to be above reproach and go without being called a jerk when they act like one.. > Regarding your gif, it is more a npm issue rather than a react-hot-loader issue. I suggest you to replace \"build\" script in \"package.json\" by:\nI know how to run the babel script manually, I am trying to submit a patch to make it so that no one else has to do this if they develop on Windows. The .bin path as far as I know is an implementation detail, and I can't recall where, but I remember reading advice that that Node scripts should not depend on them any longer.\n\nMy thinking is that on Windows, current path has priority over build path.\n\n\ud83e\udd26\u200d\u2642\ufe0f\nI said that in my commit.\n. From my own Travis logs:\n\nconsole.error node_modules/jest-mock/build/index.js:660\n     React Hot Loader: Yeezy in /wow/test.js will not hot reload correctly because test.js uses  during module definition. For hot reloading to work, move Yeezy into a separate file and import it from test.js.\n   console.error node_modules/jest-mock/build/index.js:660\n     React Hot Loader: this component is not accepted by Hot Loader. \n     Please check is it extracted as a top level class, a function or a variable. \n     Click below to reveal the source location: \n      function () {return _react2.default.createElement('div', null, '123');}\n   console.error node_modules/jest-mock/build/index.js:660\n     React Hot Loader: Yeezy in /wow/test.js will not hot reload correctly because test.js uses  during module definition. For hot reloading to work, move Yeezy into a separate file and import it from test.js.\n   console.error node_modules/jest-mock/build/index.js:660\n     React Hot Loader: this component is not accepted by Hot Loader. \n     Please check is it extracted as a top level class, a function or a variable. \n     Click below to reveal the source location: \n      function () {return _react2.default.createElement('div', null, '123');}. https://github.com/gaearon/react-hot-loader/pull/639\n\nYou're literally the person who deleted AppContainer?. https://github.com/gaearon/react-hot-loader/pull/654/commits/dc1daaa61bddf51a2f1fa0a35d533ceadba44055. ",
    "drcmda": "Not sure if related but updating to 3.0.0 from beta7 crashes my app as well. I have tried to track it down and it seems to complain about one of my classes, but it's hard to tell what's going on. Going back to beta7 or removing react-hot-loader immediately makes it work again.\n\n. @neoziro saw it too late, thanks for everything!. @neoziro  Would it be possible to release a quick revert to where beta.7 was? . ",
    "sahil290791": "@neoziro will it break anything if included in production? Please correct me if I am wrong, I can see that this depends on module.hot. Does it read this from webpack config? . ",
    "vorlov": "Same for me. ",
    "switz": "I fixed this for the time being by locking the package version to 3.0.0-beta.7.. ",
    "iEchoic": "This is happening to me as well. @switz' fix does work, but that version does not have React 16 compatibility, so we can't take that version either. Any suggestions to fix this on React 16?. ",
    "oliviertassinari": "I have noticed the same behavior today. For instance, I have 6 components raising this warning. Some of those components are userland, some are coming from redux-form, react-redux, Material-UI. \nI have upgraded recently to react-hot-loader-3.0.0. I will rollback to the previous version to see if that help.. I confirm, @loris see if react-hot-loader@3.0.0-beta.7 fix your issue.. I'm using np with my projects. Maybe that can help.. @neoziro Is using Lerna, now we have yarn workspace, still relevant?. Would it also explain why I see a warning anytime is use getDerivedStateFromProps()?\nI'm assuming react-hot-loader is hijacking the components and add componentWillReceiveProps.\n\n. @neoziro Thanks for the heads-up! My issue was with Next.js (using webpack v3). But don't worry about it. I think it's already tracked in #918. . ",
    "anamanaguchi": "@neoziro, is there an option to disable this warning? ;). ",
    "loris": "Not sure why the issue has been closed. Warnings are not the problem, the fact that reloading is not happening is. Using react-refetch in a component will make any children unreloadable.. Any updates on this one @neoziro? Using React with HoC like redux seems like a very common setup, so currently RHL is broken for most people. @neoziro Thanks! Just installed next on our project and can confirm our components (event the ones exported with multiple HOCs) are properly hot reloaded!. ",
    "Iuriy-Budnikov": "I have the same issue with connect. I got it after update from 3.0.0-beta.7 to v 3.1.1. Something wrong with HOC. ",
    "nathanqueija": "I am having the same issue with connect. The warnings reaches to the number of 8000.\nSometimes chrome chrashes because it ran out of memory.. \n20000 > warnings\n. ",
    "vanderhoop": "Encountered the same. reverting to 3.0.0-beta.7 did the trick.. ",
    "luisherranz": "Exactly the same here. I also went back to beta 7.. ",
    "JustFly1984": "I'm also experiencing an issue with hot reloading and connected components:\n\n. Sorry to bug you out, but I have issues with <StictMode />  in gatsby v2. it has react-hot-loader@4.3.12 in dependencies, and I'm using it for example in my attempt to make new google maps api for React. I need to test it with SSR, and at the same time to test it in strict mode. It seems like I can't do both at the same time.. Should I make new issue? I've made an issue in gatsby: https://github.com/gatsbyjs/gatsby/issues/10179. ",
    "jcrben": "~~I believe that there's a bug here where the warning fires even if the component actually is reloaded - because it's a child component in the same file. I'll see about posting a reproducible case, but can't promise it...~~ nevermind, I'm using a dated version from a starter kit, will see what happens if I upgrade. ",
    "cescoferraro": "reverting back to beta7 indeed solves the warning issues. But, Is there anyone else having issues with HMR a redux store. I keep getting the Provider  does not support changing store on the fly warning on each first hot-reload. ",
    "Stanko": "@neoziro thanks! I just tried next and it seems issue is fixed, but it is giving me another error, sorry if it is unrelated!\nReact-stand-in: Updated class  Connect(People) contains native or bound function  notifyNestedSubs \u0192 notifyNestedSubs() {\n    this.listeners.notify();\n  } . Unable to reproduce, use arrow functions instead.. ",
    "HosseinAgha": "@neoziro Could make a release? the warning is very annoying. Thanks. . ",
    "goto-bus-stop": "Yep, done!\nOn 15 October 2017 19:39:30 CEST, \"Greg Berg\u00e9\" notifications@github.com wrote:\n\nThanks, can you make ESLint happy please?\n-- \nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/gaearon/react-hot-loader/pull/671#issuecomment-336727838\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.. ",
    "sachinrekhi": "Took a stab at adding details on this to the README.. ",
    "KingBarbarian": "Try using the following code,but still won't do\nif (module.hot) {\n  const NextApp = require('@/routers').default;\n  module.hot.accept('@/routers', () => { render(NextApp) })\n}. @theKashey It doesn't respond\nReactDOM.render(\n    <AppContainer>\n      <Provider store={configureStore()}>\n        <Component />\n      </Provider>\n    </AppContainer>,\n    document.getElementById(\"app\")\n  );. ",
    "pedroabreu": "You seem to be missing react-hot-loader/babel as a babel plugin\nhttps://github.com/gaearon/react-hot-loader#getting-started. ",
    "nloding": "I am having the same issue. If I run react@15.6.2 with react-dom@15.6.2, it works just fine; if I update those to 16.0.0, I get the same scenario as above. The console shows no errors or warnings, nor does the webpack output, and it says App is up to date but nothing changes. My project is based off react-slingshot and my package.json and webpack.config.dev.js match what is available in react-slingshot on this commit: https://github.com/coryhouse/react-slingshot/commit/70850e3fe0ea9d746c14554774c5454ce1da7951, with the exception of updating react-hot-loader to 3.1.3 (though 3.0.0-beta.6 fails also)\nFor now, I'm rolling back to react v15 but would love to update to v16!. I totally admit that I don't speak webpack or babel, but react-slingshot is using babel, and using babel-loader for jsx files, not react-hot-loader/webpack per the documentation. I don't think it's using RHL's webpack plugin ...\n{\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        use: ['babel-loader']\n      },\nI'll see if I can trim my code down to something I can share and still replicate the issue.. @theKashey true, there is no plugin in the babel config. I've added it to mine and it still doesn't work. I'm not sure why it isn't related, as I'm seeing the exact same issue. The console outputs [HMR] App up to date and lists the updated module, but nothing is actually updated. But only when I'm using react@16.0.0, it works fine with react@15.6.2. Is it not related because the configs are slightly different? The behavior I'm seeing is the same. I'm happy to open a separate issue if needed.. Here's my deps:\n\"dependencies\": {\n    \"aphrodite\": \"~1.2.3\",\n    \"axios\": \"~0.16.2\",\n    \"bootstrap\": \"~4.0.0-beta\",\n    \"immutable\": \"~3.8.1\",\n    \"lodash\": \"~4.17.4\",\n    \"moment\": \"~2.18.1\",\n    \"object-assign\": \"~4.1.0\",\n    \"oidc-client\": \"~1.3.0\",\n    \"prop-types\": \"15.5.10\",\n    \"react\": \"15.6.2\",\n    \"react-bootstrap-typeahead\": \"~2.0.0\",\n    \"react-dom\": \"15.6.2\",\n    \"react-moment\": \"~0.6.5\",\n    \"react-quill\": \"~1.1.0\",\n    \"react-redux\": \"~5.0.5\",\n    \"react-router-dom\": \"4.2.2\",\n    \"react-router-redux\": \"5.0.0-alpha.6\",\n    \"reactstrap\": \"~4.8.0\",\n    \"redux\": \"~3.6.0\",\n    \"redux-form\": \"~7.0.4\",\n    \"redux-oidc\": \"~3.0.0-beta.14\",\n    \"redux-thunk\": \"~2.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"7.1.4\",\n    \"babel-cli\": \"6.24.1\",\n    \"babel-core\": \"6.25.0\",\n    \"babel-eslint\": \"7.2.3\",\n    \"babel-jest\": \"20.0.3\",\n    \"babel-loader\": \"7.1.1\",\n    \"babel-plugin-transform-react-constant-elements\": \"6.23.0\",\n    \"babel-plugin-transform-react-remove-prop-types\": \"0.4.6\",\n    \"babel-polyfill\": \"6.23.0\",\n    \"babel-preset-env\": \"1.6.0\",\n    \"babel-preset-react\": \"6.24.1\",\n    \"babel-preset-react-hmre\": \"1.1.1\",\n    \"babel-preset-stage-1\": \"6.24.1\",\n    \"browser-sync\": \"2.18.12\",\n    \"chalk\": \"2.0.1\",\n    \"concurrently\": \"3.5.0\",\n    \"connect-history-api-fallback\": \"1.3.0\",\n    \"copy-webpack-plugin\": \"4.2.3\",\n    \"coveralls\": \"2.13.1\",\n    \"css-loader\": \"0.28.7\",\n    \"enzyme\": \"3.0.0\",\n    \"enzyme-adapter-react-16\": \"1.0.0\",\n    \"eslint\": \"4.2.0\",\n    \"eslint-plugin-import\": \"2.7.0\",\n    \"eslint-plugin-react\": \"7.3.0\",\n    \"eslint-watch\": \"3.1.2\",\n    \"extract-text-webpack-plugin\": \"3.0.1\",\n    \"file-loader\": \"0.11.2\",\n    \"history\": \"4.6.0\",\n    \"html-webpack-plugin\": \"2.29.0\",\n    \"identity-obj-proxy\": \"3.0.0\",\n    \"jest\": \"20.0.4\",\n    \"jest-cli\": \"20.0.4\",\n    \"json-loader\": \"0.5.4\",\n    \"mockdate\": \"2.0.1\",\n    \"node-sass\": \"4.5.3\",\n    \"opn-cli\": \"3.1.0\",\n    \"postcss-loader\": \"2.0.6\",\n    \"prompt\": \"1.0.0\",\n    \"prop-types\": \"15.5.10\",\n    \"raf\": \"3.3.2\",\n    \"react-hot-loader\": \"3.1.3\",\n    \"react-test-renderer\": \"16.0.0\",\n    \"redux-immutable-state-invariant\": \"2.0.0\",\n    \"replace\": \"0.3.0\",\n    \"rimraf\": \"2.6.1\",\n    \"sass-loader\": \"6.0.6\",\n    \"style-loader\": \"0.19.0\",\n    \"url-loader\": \"0.5.9\",\n    \"webpack\": \"3.1.0\",\n    \"webpack-bundle-analyzer\": \"2.8.2\",\n    \"webpack-dev-middleware\": \"1.11.0\",\n    \"webpack-hot-middleware\": \"2.18.2\",\n    \"webpack-md5-hash\": \"0.0.5\"\n  },\nIf I update react and react-dom to 16.0.0 or higher, it fails; it works with the versions you see above.. At this point it seems like HMR is swallowing some sort of error. Is there any way to increase the verbosity, or get some additional debugging statements out of it? If I throw a console.log in the module.hot.accept callback, it doesn't get called with v16 but does with v15, for instance.. Do I need to look at webpack-hot-middleware then, if it's not RHL?. @neoziro will do, thanks. I'll update next week and report a new bug if issues persist.. ",
    "liuliangsir": "After upgrading react hot loader to v4, to my surprise, i find that the same issue has been resolved. Not sure if react hot loader has make some underlying changes.. ",
    "adc17": "@selbekk does this mean a. react-hot-loader only works if you serve your static files from /? Or does it mean b. you have to declare the location of your static files at output.publicPath? \nThe first time I read the readme, it sounded like you meant a, but now I've read your comment, it sounds more like you mean b.. @selbekk Thanks for clarifying, that's good news! \nI think your points are \"don't forget to set it\", and \"don't forget the trailing slash\". \nFacebook's CRA has this: Webpack uses publicPath to determine where the app is being served from. It requires a trailing slash, or the file assets will get an incorrect path.\nPerhaps something along those lines to explain how it works, plus \"so remember to set output.publicPath with a trailing slash in your webpack config\".. ",
    "selbekk": "@adc17 - I see what you\u2019re saying. I definitely meant B - do you have any suggestions as to how we can change the wording? I\u2019d be more than happy to create a new pull request! :-) . @theKashey it won't work because the hot reloader tries to fetch the reload from the relative path instead of the absolute path, where they are made available.. ",
    "GiancarlosIO": "@neoziro I try with that but it still can't reload the styled components\n\n. I will close this issue because its a bug in styled-components 2.2.1 package. I have to use the 2.2.0. @MrKou47 mmmm what? :thinking: . ",
    "MrKou47": "Maybe your shouldn't use extract-text-webpck-plugin in the dev environment;. @geco  emmm.... Before I do not know I can not use extract-text-webpck-plugin in development environment. So my component's style can't hot reload. Then i remove this plugin and it works ok.\nYou can see this issue RHL can't reload currently when i modify component'style used css-module. My mistakes. I didn't know that ExtractTextPlugins can only be used in production environment. If i remove ExtractTextPlugins, RHL works prefect!. ",
    "johnnyreilly": ":smile:. Pleasure!. Hey all!\nMaintainer of ts-loader here.  I've just been checking out v4 of this mighty fine project and discovered that with v4 I need to start using babel:\n\nWhen using TypeScript, Babel is not required, but React Hot Loader will not work without it.\n\nWith v3 I didn't need to which I liked.  Would you be able to clarify why babel is needed with v4 please?  If it's the only game in town that's cool - but if there's a way I can stick with just my TypeScript + core-js flow I'd love to.  \nIf babel has to be in the mix I want to keep it as targeted as possible.  I maintain a react-hot-loader example in the ts-loader repo so I'd like to provide a good boilerplate for people wondering how to use ts-loader with react-hot-loader.\nI'd love to understand the limitation if you're up for explaining! \ud83c\udf3b . Hey @theKashey!\nThanks for that; super interesting context. I've a bunch of questions off the back of what you've said:\n\n\nSo I can live without Babel, but from what you've said it sounds like I'll lose the ability to debug arrow functions in components. eg. onClick etc. That's a bit of a bind (see what I did? JavaScript jokes :smile: ) as I debug those a lot.\n\n\nIf I was emitting classes from my TypeScript (say having an emit target of es2015 instead of es6) would I be fine without Babel? I'm not in that position now because of IE 11 but that day will one day come.\n\n\nWhat's the minimum Babel usage I have to have in place? My guess is that I need to have TypeScript emitting es2015 and that's me done. Is that right?\n\n\nI didn't realize import order was significant when it came to RHL. Can you tell me more about this please?\n\n\nAs far as I can tell RHL v3 allows me to successfully hot module reload without babel in the mix.  Debugging arrow functions seems fine as well.  That being the case, what's the advantage of v4 over v3? Is it essentially down to this:\n\n\n\nAnd later we drop thousand lines from proxy, and just rely on this 3 lines long method.\n\nTrying to do a cost / benefit on:\n\nliving with v3 and keeping Babel out of the pipeline \n\nvs \n\nlatest and greatest RHL but with Babel so slower build.. > There is nothing you could do, but there is something that could be changed in the RHL's internals.\nThats is not an easy task, and we specially did not do it, as long it... you know.. hacks :)\n\n@theKashey I would :heart: that to happen!\nQuestion on this:\n\nThe only thing one need - set a custom property on each \"spotted\" class, to wrap .bind with some custom hook (like React-Hot-Loader v1-2-3 did, actually), everything else ProxyComponent can handle.\n\nWould that work for arrow functions as class members? eg\n```\nexport class SomeClass extends React.Component {\n// arrow function as class member; shorter than using `bind` in the constructor\nanArrowFunctionThatsWhatIAm = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    // do stuff\n};\n\nrender() {\n  // ...\n}\n\n}\n```. That's a shame :-(. ",
    "AndrewRayCode": "Should this be reflected in the readme, that the fundamental strategy conflicts with non-react code? Not trying to be an ass, but since dan is pointing people to this library, the readme doesn't give any indication about that status (I don't know if \"experimental\" is the right word?). It took me by surprise. ",
    "harshes53": "Hi @neoziro, \nis there a way to bypass  RHL patch when using typescript and targeting ES6?\nThanks!. @theKashey thanks! \nFYI I don't have any babel usage in my project.. so trying to figure out how to use RHL with TS and ES6 target.. ",
    "fwh1990": "Using setState() in callback method will cause a warning by react,\n (Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component.)\nJust happened when my code like :  export default connect(mapState2Props)(xxxComponent). And I bind my callbackFunction in constructor already(this.handleCallback = this.handleCallback.bind(this);).\nBut, if I write my code by decorator : \n@connect() \nexport class xxxComponent extend React.Component {}\nThe warning upon will be gone. However, component's lifecycle will refresh when I change my code, it means that each component will trigger componentWillMount again.\nHow to fix?. And now , I have to disable rhl, sadly.  By the way, I am using react 16.2, and only support chrome 56+, it means, I didn't transform es6 to 5.. I got the same error message:\n```js\nReact-stand-in: Updated class  Connect(SomeContainer) contains native or bound function\nnotifyNestedSubs \u0192 notifyNestedSubs() {\n    this.listeners.notify();\n  } . Unable to reproduce, use arrow f\n```\nBut rhl still worked.\nAnd could you tell me how to replace redux-reducer now ?. I found that rhl still worked even if I remove babel-plugin: react-hot-loader/babel from .babelrc,\nJust occur error message but make no difference\n```js\nReact-stand-in: Updated class  Connect(HeaderComponent) contains native or bound function  notifyNestedSubs \u0192 notifyNestedSubs() {\n    this.listeners.notify();\n  } . Unable to reproduce, use arrow functions instead.\n```. conflict with decorator by antd\nhttps://ant.design/components/form/#Form.create(options)\n```js\n@hot(module)\n@Form.create()\n@connect()\nexport class SomeComponent extends Component {}\n```\ncatch error when I change some code everytime.\n```js\nUncaught TypeError: this.getForm is not a function\n    at ProxyComponent.render (createBaseForm.js:501)\n    at ProxyComponent.render (createClassProxy.js:70)\n    at render (hotReplacementRender.js:98)\n    at hotReplacementRender (hotReplacementRender.js:134)\n    at next (hotReplacementRender.js:151)\n    at flow.forEach (hotReplacementRender.js:175)\n    at Array.forEach ()\n```\nantd version:  3.0.3\nrhl    version:  beta4\nAny idea?. Open chrome devTools, switch to Elements\nhtml\n<div id=\"root\">\n  \"0\"\n  \"1\"\n  \"2\"\n</div>\nI just realize my root-component method AppComponent.render looks like:\njs\nrender() {\n   return [\n     <A key=\"axxx\" />,\n     <B key=\"bxxx\" />,\n     <C key=\"cxxx\" />,\n  ];\n}\nReturn elements[] is legal in React16+\nAny relation?. js\nReactDOM.render(\n  <Provider store={store}>\n    <AppComponent />\n  </Provider>,\n  document.getElementById('root')\n);. When I reduce array to 2 items, the render message turn to:\nhtml\n<div id=\"root\">\n  \"0\"\n  \"1\"\n</div>. You may try to test react-loadable package.. And then I got more message\njs\nReact-Hot-Loader: error detected while loading ./src/components/app/App.tsx\nApp.tsx is a root component in my project. I use @babel/preset-typescript to compile ts code.. You should know that the error message only appear at first time. And no side effect happened, the RHL can work as usual.. Error from webpack\njs\nmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);. When I remove webpack.DllReferencePlugin(...) from my webpack config. The error gone.\nAnd it's impossible to remove this plugin for me, because hot-reload is too slow without dll.js. I have added hard-source-webpack-plugin in webpack config, but nothing changed. Am I need to input some options into this plugin?. > Remove DLL plugin and use only Hard one - and you shall get the same good speed.\nYeah, I have the same speed now. Thank you very much.. > What is react-dom version then?\n16.7.0. I didn't solve this problem by adding package @hot-loader/react-dom@16.7.0.. By the way. I import ReactDOM in my ParentComponent.tsx file. Yeah, it's a  parent class.. Never mind. I removed the code from my project. It's unnecessary now. However, a little pity, :). ",
    "tzvipm": "I'm having the same issue. I didn't find the babel plugin in time, so I wrote my own (babel-plugin-decompose) that's pretty rudimentary, but it works in my case, because all my exported composes are default exports.\nTo clarify, using my babel plugin didn't fix the issue, despite using the step-by-step approach to exporting a component with multiple HOCs.. ",
    "Tsourdox": "Which version was this fixed in? The \"next\" link goes to a 404 page.. @user905 I have the same issue, did you manage to fix the issue? Could you share what changes you made?. @theKashey thx for responding! I'm still kind of lost looking at my webpack.config file. I've read your readme file, but unsure if I should look at \"migrating from v3\" or \"Typescript\". I've tried some implementations but without any luck.\nI haven't found where and how your webpack loader is used. The only reference to 'react-hot-loader' is this: \nimport { AppContainer } from 'react-hot-loader';\n(As I've understood the AppContainer syntax will work as before but can be replaced with the new hoc syntax, correct?)\nNow, how do I \"remove\" your webpack loader?\nThis is what the webpack.config file looks like from the dotnet template we are using:\n(any help would be greatly appreciated)\n```\nconst path = require('path');\nconst webpack = require('webpack');\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;\nconst merge = require('webpack-merge');\nmodule.exports = (env) => {\n    const isDevBuild = !(env && env.prod);\n// Configuration in common to both client-side and server-side bundles\nconst sharedConfig = () => ({\n    mode: isDevBuild ? 'development' : 'production',\n    stats: { modules: false },\n    resolve: { extensions: ['.js', '.jsx', '.ts', '.tsx'] },\n    output: {\n        filename: '[name].js',\n        publicPath: '/dist/' // Webpack dev middleware, if enabled, handles requests for this URL prefix\n    },\n    module: {\n        rules: [\n            { test: /\\.(tsx|ts)$/, include: /app|material-ui-component-package/, use: 'awesome-typescript-loader?silent=true' },\n            { test: /\\.(png|jpg|jpeg|gif|svg|eot|woff2|woff|ttf)$/, use: {\n                loader: 'url-loader',\n                options: {\n                    limit: 25000\n                }\n            } }\n        ]\n    },\n    plugins: [new CheckerPlugin()]\n});\n\n// Configuration for client-side bundle suitable for running in browsers\nconst clientBundleOutputDir = './wwwroot/dist';\nconst clientBundleConfig = merge(sharedConfig(), {\n    entry: { 'main-client': './app/boot-client.tsx' },\n    module: {\n        rules: [\n            { test: /\\.css$/, use: [\n                MiniCssExtractPlugin.loader,\n                isDevBuild ? 'css-loader' : 'css-loader?minimize'\n            ] },\n            { test: /\\.scss$/, use: [\n                MiniCssExtractPlugin.loader,\n                isDevBuild ? 'css-loader' : 'css-loader?minimize',\n                'sass-loader'\n            ] }\n        ]\n    },\n    output: { path: path.join(__dirname, clientBundleOutputDir) },\n    plugins: [\n        new MiniCssExtractPlugin({\n            // Options similar to the same options in webpackOptions.output\n            // both options are optional\n            filename: \"site.css\",\n            chunkFilename: \"[id].css\"\n        }),\n        new webpack.DllReferencePlugin({\n            context: __dirname,\n            manifest: require('./wwwroot/dist/vendor-manifest.json')\n        })\n    ].concat(isDevBuild ? [\n        // Plugins that apply in development builds only\n        new webpack.SourceMapDevToolPlugin({\n            filename: '[file].map', // Remove this line if you prefer inline source maps\n            moduleFilenameTemplate: path.relative(clientBundleOutputDir, '[resourcePath]') // Point sourcemap entries to the original file locations on disk\n        })\n    ] : [\n        // Plugins that apply in production builds only\n    ])\n});\n\n// Configuration for server-side (prerendering) bundle suitable for running in Node\nconst serverBundleConfig = merge(sharedConfig(), {\n    resolve: { mainFields: ['main'] },\n    entry: { 'main-server': './app/boot-server.tsx' },\n    plugins: [\n        new webpack.DllReferencePlugin({\n            context: __dirname,\n            manifest: require('./app/dist/vendor-manifest.json'),\n            sourceType: 'commonjs2',\n            name: './vendor'\n        })\n    ],\n    output: {\n        libraryTarget: 'commonjs',\n        path: path.join(__dirname, './app/dist')\n    },\n    target: 'node',\n    devtool: 'inline-source-map'\n});\n\nreturn [clientBundleConfig, serverBundleConfig];\n\n};\n```\n. But what did you mean by:\n\njust remove our webpack loader.\n\nAs far as I've understood the webpack loader was part of you library in v3 and removed in v4, is this correct?\nJust to clarify we are migrating from v3 to v4, in order to get multiple hoc support.. Good, then I've understood that part. What I don't understand is which part of my configuration, for RHL v3, that is trying to use the webpack loader module. Was this normally done (for v3) in the webpack.config file or from a separate package or loader?\nThx for helping me, really appreciated \ud83d\ude4f. Found this, seems to be the problem :) https://github.com/aspnet/JavaScriptServices/issues/1585. @user905 check out the aspnet issue for more info about how to update!. ",
    "joy-yu": "@adipascu I have created a repository here \nNote the code at src/main.js line 28. React hot load now is invalid. . @adipascu Thank you for your explanation.I didn't do enough research about the accept api before.\nAnd I create a new simple repo here. It just refer to the readme.md and the hot load is still invalid.. ",
    "binarykitchen": "The latest one, 3.1.1. Think I figured it out myself. It's actually a webpack HMR issue itself. Sorry.. ",
    "thibautRe": "I've had that issue for a while too, it seems like it's because of the render method of AppContainer : if you don't pass an errorReporter prop, then the render method will just log the error but still re-render the children.\nNow I'm not sure of what would be an appropriate behavior (maybe just logging the error and returning null but this might have some side-effects).\nIf we can agree on a proper behavior, I can submit a PR.\nIn the meantime, you can follow these steps, they should fix the issue since the render method returns the custom error reporter box.. Yes that sounds actually like a better behavior. Although I would argue that this logic should live in shouldComponentUpdate instead of componentDidCatch, since you're not 100% sure that this.state is up-to-date (this.setState being asynchronous). ",
    "niba": "Current behaviour can be confusing for a people who recently upgraded to the latest version. I've spent a few hours trying to figure out what's hapenning. We should at least add some information in console or somewhere to warn users that this can happen if they don't provide error reporter.. ",
    "mildrenben": "RHL does work with env though. I'm using it right now. It only works with modules: false.\n. ",
    "coffenbacher": "There's a typo here, missing ] in the first line\n{\n  \"presets\": [[\"env\", { \"modules\": false }],\n  \"plugins\": [\"react-hot-loader/babel\"]\n}. ",
    "ioanungurean": "@theKashey Thank you! You are right! \ud83d\udcaf . ",
    "NeekSandhu": "Extremely relevant #714. Well AFAIK the goal is to deliver the best developer experience ever, the end user that is.\nWith that in mind, I'd prefer as a user myself, to not have to manually tinker with the tooling to get it \"working\".\nAnd again, I sincerely want to take RHL to the next level (in terms of features and stability) and I am more than happy to send a PR (proof of concept) if this gets a green light.. ",
    "verydanny": "Figured out issue #2, forgot to specify \"modules\": false in my .babelrc. Nevermind. Fixed it. Move { hot } before React.. ",
    "JasonBoy": "@verydanny does \"modules\": false work for you?, I tried both v3 & v4, still a state change does not affect on page, yet the console says the App is up to date,\nbut when I switch back to plain HMR without RHL, it works \ud83d\ude05 .\nafter looking at the #700 , RHL does not support env preset,\nmy .babelrc configuration:\njson\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\"> 1%\", \"last 5 versions\"]\n        },\n        \"loose\": true,\n        \"modules\": false\n      }\n    ],\n    \"react\"\n  ],\n  \"plugins\": [\n    \"react-hot-loader/babel\",\n    \"transform-class-properties\",\n    \"transform-runtime\",\n    \"transform-es2015-modules-commonjs\",\n    \"transform-object-rest-spread\"\n  ],\n  \"comments\": false\n}. ",
    "a7madgamal": "remove any hot thing from webpack config\nmore details please :). how to fix it then?. ",
    "007sair": "HMR does not work when I click a button, The button is like this: \nhtml\n<a href=\"javascript:;\" @click=\"start\">Click!</a>\nDelete the href attribute, HMR is working now.\nI hope this is useful to you.\n. ",
    "adamtal3": "\nDid you wrap all the things with AppContainer?\n\nI have the AppContainer around my root component.\n\nWhat does React Transform HMR doing here?\n\nDon't know. I have babel-plugin-react-transform in my devDependencies.\nThis is my .babelrc file:\njson\n{\n  \"env\": {\n    \"development\": {\n      \"presets\": [\"react-hmre\"],\n      \"plugins\": [\n        \"transform-react-display-name\",\n        \"transform-decorators-legacy\",\n        \"react-hot-loader/babel\"\n      ],\n      \"compact\": false\n    },\n    \"test\": {\n      \"plugins\": [\"transform-decorators-legacy\"],\n      \"compact\": false\n    },\n    \"production\": {\n      \"plugins\": [\n        \"transform-decorators-legacy\",\n        \"transform-react-remove-prop-types\",\n        \"transform-react-constant-elements\",\n        \"transform-flow-strip-types\",\n        \"transform-react-inline-elements\"\n      ],\n      \"compact\": true\n    }\n  },\n  \"presets\": [\"es2015\", \"react\", \"stage-2\"]\n}\nThis is my render function:\njavascript\nimport { AppContainer } from 'react-hot-loader'\nimport Root from './app/Root/RootContainer';\n...\n  ReactDOM.render(\n    <AppContainer>\n        <Root history={() => history} store={() => store} routes={() => routes} />\n    </AppContainer>,\n    document.getElementById('app')\n  );. @theKashey Thanks.\nAny idea how I can understand why it doesn't re-render?\nI tried debugging the patching of the file but didn't see where it calls for a render.. I don't re-require the App on module hot update. Should I? Everything somehow worked perfectly with react 15.6..\nI tried adding \"{ \"modules\": false }\" to the env preset in my babel file but it fails with Missing class properties transform.\nIsn't  \"presets\": [ [\"env\", { \"modules\": false }] ] what you meant? Am I missing something?. Seems that simply adding a module.hot.accept(); solved the issue for me.\n@theKashey - Thanks a lot for the help. Tell me if I should of done anything differently (if it works now, should I require the root container anyway?).. ",
    "fenok": "It's not about losing state. It's about RHL saying the app is up-to-date when it's not.. Awesome, thank you!. ",
    "okonet": "@neoziro any ETA? Can the master branch be tested?. Please let me know as I can help testing it. . Can confirm it's working with electron 1.8.2 beta! \ud83d\udc4f . ",
    "rllola": "@okonet I still have the issue. Could you tell me what you used to test it ?\nCould you tell me if it is working also for you with this setup : https://github.com/rllola/hmr-example-issue ?. @neoziro Thanks ! It is working now. . I have done a little bit more research on it.\nI am using electron-forge and I tried to generate a new project using react template. It use by default the v3.0.0 version. It works great.\nI updated to version v4.0.0-beta.13 and did the modification to use hot(module)(App) and now it is not working.\nWhen I am activating the debug for electron-compile:require-hook I have the Got HMR signal! message but no modification.\nCould it be linked to babel's react-hot-loader/babel plugin ?. Here the example repo : https://github.com/rllola/hmr-example-issue-2\nI hope it will help.. @theKashey Are you using webstorm ? I do receive the signal everytime I make a modification. . I was wondering if it wasn't linked to this : https://github.com/gaearon/react-hot-loader/issues/343\nOne of my colleagues had this problem with webstorm\nHere the working branch with v3 (unfortunately it was broking instanceof and we were waiting for v4 which fix it) : https://github.com/rllola/hmr-example-issue-2/tree/v3. I confirm it is working.\nI am closing this issue then. Thank you.. ",
    "codecov-io": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (lerna@755407b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nlerna    #723   +/-\n=======================================\n  Coverage         ?   70.2%         \n=======================================\n  Files            ?      12         \n  Lines            ?     386         \n  Branches         ?      79         \n=======================================\n  Hits             ?     271         \n  Misses           ?      93         \n  Partials         ?      22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-stand-in/test/helper.js | 100% <\u00f8> (\u00f8) | |\n| testConfig/setupTests.js | 100% <\u00f8> (\u00f8) | |\n| packages/react-hot-loader/src/AppContainer.dev.js | 72% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 755407b...a533170. Read the comment docs.\n. # Codecov Report\nMerging #725 into next will increase coverage by 0.88%.\nThe diff coverage is 83.11%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #725      +/-\n=========================================\n+ Coverage   70.2%   71.09%   +0.88%   \n=========================================\n  Files         12       12            \n  Lines        386      422      +36   \n  Branches      79       96      +17   \n=========================================\n+ Hits         271      300      +29   \n- Misses        93      101       +8   \n+ Partials      22       21       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/utils.dev.js | 16.66% <0%> (-0.58%) | :arrow_down: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <10%> (-5.35%) | :arrow_down: |\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <100%> (+6.04%) | :arrow_up: |\n| packages/react-hot-loader/src/patch.dev.js | 85.71% <100%> (+1.33%) | :arrow_up: |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 95% <87.5%> (-5%) | :arrow_down: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 77.18% <97.72%> (+1.39%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cf60f1e...55dbd54. Read the comment docs.\n. # Codecov Report\nMerging #726 into next will increase coverage by 0.33%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #726      +/-\n==========================================\n+ Coverage   71.09%   71.42%   +0.33%   \n==========================================\n  Files          12       12            \n  Lines         422      420       -2   \n  Branches      132       89      -43   \n==========================================\n  Hits          300      300            \n- Misses         89       93       +4   \n+ Partials       33       27       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/utils.dev.js | 17.85% <0%> (+1.19%) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 77.18% <0%> (\u00f8) | :arrow_up: |\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 251b68b...7c05931. Read the comment docs.\n. # Codecov Report\nMerging #727 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #727   +/-\n=======================================\n  Coverage   75.57%   75.57%         \n=======================================\n  Files          12       12         \n  Lines         434      434         \n  Branches      103      109    +6   \n=======================================\n  Hits          328      328         \n+ Misses         89       86    -3   \n- Partials       17       20    +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 068de59...4be6f79. Read the comment docs.\n. # Codecov Report\nMerging #729 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #729   +/-\n=======================================\n  Coverage   71.42%   71.42%         \n=======================================\n  Files          12       12         \n  Lines         420      420         \n  Branches       89      128   +39   \n=======================================\n  Hits          300      300         \n+ Misses         93       87    -6   \n- Partials       27       33    +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 77.18% <0%> (\u00f8) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3089850...1c914b9. Read the comment docs.\n. # Codecov Report\nMerging #735 into next will increase coverage by 4.14%.\nThe diff coverage is 91.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #735      +/-\n==========================================\n+ Coverage   71.42%   75.57%   +4.14%   \n==========================================\n  Files          12       12            \n  Lines         420      434      +14   \n  Branches       92      105      +13   \n==========================================\n+ Hits          300      328      +28   \n+ Misses        102       87      -15   \n- Partials       18       19       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.73% <91.89%> (+10.54%) | :arrow_up: |\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <0%> (\u00f8) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73ba25b...357ae04. Read the comment docs.\n. # Codecov Report\nMerging #736 into next will not change coverage.\nThe diff coverage is 50%.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #736   +/-\n=======================================\n  Coverage   75.57%   75.57%         \n=======================================\n  Files          12       12         \n  Lines         434      434         \n  Branches       88      140   +52   \n=======================================\n  Hits          328      328         \n+ Misses         90       85    -5   \n- Partials       16       21    +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/AppContainer.dev.js | 72% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/patch.dev.js | 85.71% <100%> (\u00f8) | :arrow_up: |\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <0%> (\u00f8) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.73% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5c81655...4e2442f. Read the comment docs.\n. # Codecov Report\nMerging #739 into next will increase coverage by 0.26%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nnext    #739      +/-\n=========================================\n+ Coverage   75.34%   75.6%   +0.26%   \n=========================================\n  Files          12      13       +1   \n  Lines         434     451      +17   \n  Branches       99     136      +37   \n=========================================\n+ Hits          327     341      +14   \n- Misses         90      92       +2   \n- Partials       17      18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/patch.dev.js | 85.71% <\u00f8> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.73% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/patch.js | 100% <0%> (\u00f8) | |\n| packages/react-hot-loader/src/AppContainer.dev.js | 73.68% <0%> (+5.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 378b677...f981764. Read the comment docs.\n. # Codecov Report\nMerging #740 into next will decrease coverage by 0.23%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #740      +/-\n==========================================\n- Coverage   75.57%   75.34%   -0.24%   \n==========================================\n  Files          12       12            \n  Lines         434      434            \n  Branches       96       92       -4   \n==========================================\n- Hits          328      327       -1   \n- Misses         87       91       +4   \n+ Partials       19       16       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/AppContainer.dev.js | 68.18% <\u00f8> (-3.82%) | :arrow_down: |\n| packages/react-hot-loader/src/patch.dev.js | 85.71% <\u00f8> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.73% <100%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/utils.dev.js | 22.58% <80%> (+4.72%) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4152093...4f079c6. Read the comment docs.\n. # Codecov Report\nMerging #741 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #741   +/-\n=======================================\n  Coverage   75.57%   75.57%         \n=======================================\n  Files          12       12         \n  Lines         434      434         \n  Branches       96      126   +30   \n=======================================\n  Hits          328      328         \n- Misses         87       88    +1   \n+ Partials       19       18    -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ages/react-hot-loader/src/reconciler/reactUtils.js | 84.61% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.73% <0%> (\u00f8) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4152093...88b6946. Read the comment docs.\n. # Codecov Report\nMerging #742 into next will increase coverage by 0.42%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #742      +/-\n=========================================\n+ Coverage   75.4%   75.82%   +0.42%   \n=========================================\n  Files         13       14       +1   \n  Lines        435      455      +20   \n  Branches      89       96       +7   \n=========================================\n+ Hits         328      345      +17   \n  Misses        90       90            \n- Partials      17       20       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 95.83% <100%> (+0.83%) | :arrow_up: |\n| packages/react-hot-loader/src/logger.js | 66.66% <66.66%> (\u00f8) | |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.2% <75%> (-0.53%) | :arrow_down: |\n| ...es/react-hot-loader/src/reconciler/reactHydrate.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af8bd4b...ca1fc81. Read the comment docs.\n. # Codecov Report\nMerging #743 into next will increase coverage by 1.8%.\nThe diff coverage is 67.64%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #743     +/-\n=========================================\n+ Coverage   75.82%   77.62%   +1.8%   \n=========================================\n  Files          14       15      +1   \n  Lines         455      447      -8   \n  Branches      131      106     -25   \n=========================================\n+ Hits          345      347      +2   \n+ Misses         88       76     -12   \n- Partials       22       24      +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/patch.dev.js | 100% <100%> (+14.28%) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 86.66% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/AppContainer.dev.js | 70% <100%> (+1.81%) | :arrow_up: |\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 55.76% <100%> (\u00f8) | |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 97.91% <100%> (+2.08%) | :arrow_up: |\n| packages/react-hot-loader/src/logger.js | 22.22% <22.22%> (-44.45%) | :arrow_down: |\n| packages/react-hot-loader/src/utils.dev.js | 75% <50%> (+52.41%) | :arrow_up: |\n| packages/react-hot-loader/src/reactHotLoader.js | 66.66% <66.66%> (\u00f8) | |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 86.88% <86.66%> (-0.33%) | :arrow_down: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f2de0c...94b8ddf. Read the comment docs.\n. # Codecov Report\nMerging #744 into next will increase coverage by 0.71%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #744      +/-\n==========================================\n+ Coverage   75.82%   76.53%   +0.71%   \n==========================================\n  Files          14       14            \n  Lines         455      456       +1   \n  Branches      131      100      -31   \n==========================================\n+ Hits          345      349       +4   \n+ Misses         88       85       -3   \n  Partials       22       22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 89.01% <66.66%> (+1.8%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f2de0c...a26ce77. Read the comment docs.\n. # Codecov Report\nMerging #746 into next will increase coverage by 0.02%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #746      +/-\n==========================================\n+ Coverage   78.02%   78.04%   +0.02%   \n==========================================\n  Files          15       15            \n  Lines         446      451       +5   \n  Branches      139      107      -32   \n==========================================\n+ Hits          348      352       +4   \n- Misses         74       75       +1   \n  Partials       24       24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.7% <87.5%> (-0.22%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a89c160...f901192. Read the comment docs.\n. # Codecov Report\nMerging #747 into next will increase coverage by 0.39%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #747      +/-\n==========================================\n+ Coverage   77.62%   78.02%   +0.39%   \n==========================================\n  Files          15       15            \n  Lines         447      446       -1   \n  Branches       92      106      +14   \n==========================================\n+ Hits          347      348       +1   \n+ Misses         79       74       -5   \n- Partials       21       24       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.91% <100%> (+1.02%) | :arrow_up: |\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 55.76% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4cd081b...95a9e79. Read the comment docs.\n. # Codecov Report\nMerging #748 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #748   +/-\n=======================================\n  Coverage   77.62%   77.62%         \n=======================================\n  Files          15       15         \n  Lines         447      447         \n  Branches       92       92         \n=======================================\n  Hits          347      347         \n  Misses         79       79         \n  Partials       21       21\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4cd081b...c36879f. Read the comment docs.\n. # Codecov Report\nMerging #751 into next will increase coverage by 2.9%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #751     +/-\n=========================================\n+ Coverage   78.04%   80.95%   +2.9%   \n=========================================\n  Files          15       15           \n  Lines         451      441     -10   \n  Branches       92      124     +32   \n=========================================\n+ Hits          352      357      +5   \n+ Misses         82       67     -15   \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/patch.dev.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 60.37% <100%> (+4.6%) | :arrow_up: |\n| packages/react-hot-loader/src/reactHotLoader.js | 100% <100%> (+33.33%) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.17% <100%> (+0.47%) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 87.5% <100%> (+0.83%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6495932...53ba77f. Read the comment docs.\n. # Codecov Report\nMerging #752 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #752   +/-\n=======================================\n  Coverage   80.95%   80.95%         \n=======================================\n  Files          15       15         \n  Lines         441      441         \n  Branches      128      127    -1   \n=======================================\n  Hits          357      357         \n+ Misses         67       66    -1   \n- Partials       17       18    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 60.37% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b222062...3038538. Read the comment docs.\n. # Codecov Report\nMerging #754 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #754   +/-\n=======================================\n  Coverage   80.95%   80.95%         \n=======================================\n  Files          15       15         \n  Lines         441      441         \n  Branches       91       92    +1   \n=======================================\n  Hits          357      357         \n+ Misses         67       66    -1   \n- Partials       17       18    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 60.37% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 833ba4b...0ea81c5. Read the comment docs.\n. # Codecov Report\nMerging #759 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #759   +/-\n=======================================\n  Coverage   80.95%   80.95%         \n=======================================\n  Files          15       15         \n  Lines         441      441         \n  Branches       93      135   +42   \n=======================================\n  Hits          357      357         \n+ Misses         69       66    -3   \n- Partials       15       18    +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.17% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57c47c1...a37066c. Read the comment docs.\n. # Codecov Report\nMerging #761 into next will increase coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #761      +/-\n==========================================\n+ Coverage   80.95%   81.03%   +0.08%   \n==========================================\n  Files          15       16       +1   \n  Lines         441      443       +2   \n  Branches       93      132      +39   \n==========================================\n+ Hits          357      359       +2   \n+ Misses         69       66       -3   \n- Partials       15       18       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/prod/patch.prod.js | 100% <\u00f8> (\u00f8) | |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.17% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57c47c1...b1d6d05. Read the comment docs.\n. # Codecov Report\nMerging #766 into next will increase coverage by 0.64%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #766      +/-\n==========================================\n+ Coverage   81.03%   81.68%   +0.64%   \n==========================================\n  Files          16       18       +2   \n  Lines         443      475      +32   \n  Branches       86      103      +17   \n==========================================\n+ Hits          359      388      +29   \n- Misses         70       71       +1   \n- Partials       14       16       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/patch.dev.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.17% <100%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/hot.dev.js | 88.46% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/hotModule.js | 100% <100%> (\u00f8) | |\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 60.37% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 97786f5...3227818. Read the comment docs.\n. # Codecov Report\nMerging #767 into next will decrease coverage by 0.4%.\nThe diff coverage is 65.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #767      +/-\n==========================================\n- Coverage   81.68%   81.27%   -0.41%   \n==========================================\n  Files          18       23       +5   \n  Lines         475      502      +27   \n  Branches       99      141      +42   \n==========================================\n+ Hits          388      408      +20   \n+ Misses         72       69       -3   \n- Partials       15       25      +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/patch.dev.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/hot.dev.js | 88.46% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/AppContainer.dev.js | 70% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/reactHotLoader.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80% <100%> (-7.5%) | :arrow_down: |\n| ...hot-loader/src/internal/stack/hydrateFiberStack.js | 100% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/global/generation.js | 100% <100%> (\u00f8) | |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <4.54%> (\u00f8) | |\n| testConfig/setupTests.js | 71.42% <66.66%> (-28.58%) | :arrow_down: |\n| ...ges/react-hot-loader/src/internal/getReactStack.js | 90% <88.88%> (+29.62%) | :arrow_up: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9738c7...92d3166. Read the comment docs.\n. # Codecov Report\nMerging #776 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #776   +/-\n=======================================\n  Coverage   81.27%   81.27%         \n=======================================\n  Files          23       23         \n  Lines         502      502         \n  Branches      142      138    -4   \n=======================================\n  Hits          408      408         \n- Misses         70       74    +4   \n+ Partials       24       20    -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30a6f0...b3cef81. Read the comment docs.\n. # Codecov Report\nMerging #778 into next will increase coverage by 1.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #778      +/-\n==========================================\n+ Coverage   81.27%   82.42%   +1.15%   \n==========================================\n  Files          23       23            \n  Lines         502      535      +33   \n  Branches      142       97      -45   \n==========================================\n+ Hits          408      441      +33   \n- Misses         70       75       +5   \n+ Partials       24       19       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 94.54% <0%> (-3.38%) | :arrow_down: |\n| packages/react-hot-loader/src/global/modules.js | 81.81% <0%> (-1.52%) | :arrow_down: |\n| packages/react-hot-loader/src/global/generation.js | 100% <0%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80.95% <0%> (+0.95%) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 90.73% <0%> (+2.55%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30a6f0...c7220f5. Read the comment docs.\n. # Codecov Report\nMerging #781 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #781   +/-\n=======================================\n  Coverage   81.27%   81.27%         \n=======================================\n  Files          23       23         \n  Lines         502      502         \n  Branches      142      146    +4   \n=======================================\n  Hits          408      408         \n+ Misses         70       69    -1   \n- Partials       24       25    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d30a6f0...b837d8c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (indeterminateComponent@32fa466). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@                    Coverage Diff                    @@\nindeterminateComponent     #785   +/-\n=========================================================\n  Coverage                          ?   81.92%         \n=========================================================\n  Files                             ?       23         \n  Lines                             ?      509         \n  Branches                          ?      102         \n=========================================================\n  Hits                              ?      417         \n  Misses                            ?       74         \n  Partials                          ?       18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 90.5% <100%> (\u00f8) | |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 94.54% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/reactHotLoader.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32fa466...dee2f6b. Read the comment docs.\n. # Codecov Report\nMerging #788 into next will increase coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #788      +/-\n==========================================\n+ Coverage   81.46%   81.66%   +0.19%   \n==========================================\n  Files          23       23            \n  Lines         518      518            \n  Branches      138      102      -36   \n==========================================\n+ Hits          422      423       +1   \n  Misses         75       75            \n+ Partials       21       20       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.82% <0%> (\u00f8) | :arrow_up: |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 96.36% <0%> (+1.81%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d301647...d8239b5. Read the comment docs.\n. # Codecov Report\nMerging #792 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #792   +/-\n=======================================\n  Coverage   81.66%   81.66%         \n=======================================\n  Files          23       23         \n  Lines         518      518         \n  Branches      106      107    +1   \n=======================================\n  Hits          423      423         \n- Misses         73       76    +3   \n+ Partials       22       19    -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f23e93...2d262f4. Read the comment docs.\n. # Codecov Report\nMerging #793 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #793   +/-\n=======================================\n  Coverage   81.66%   81.66%         \n=======================================\n  Files          23       23         \n  Lines         518      518         \n  Branches      106       98    -8   \n=======================================\n  Hits          423      423         \n- Misses         73       76    +3   \n+ Partials       22       19    -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.82% <0%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f23e93...ef930db. Read the comment docs.\n. # Codecov Report\nMerging #797 into next will increase coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #797      +/-\n==========================================\n+ Coverage   81.66%   81.85%   +0.19%   \n==========================================\n  Files          23       23            \n  Lines         518      518            \n  Branches      102      143      +41   \n==========================================\n+ Hits          423      424       +1   \n+ Misses         77       69       -8   \n- Partials       18       25       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 89.36% <0%> (+0.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 624990c...5f3a848. Read the comment docs.\n. # Codecov Report\nMerging #798 into next will increase coverage by 3.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #798      +/-\n==========================================\n+ Coverage   81.66%   84.74%   +3.08%   \n==========================================\n  Files          23       22       -1   \n  Lines         518      472      -46   \n  Branches      102       98       -4   \n==========================================\n- Hits          423      400      -23   \n+ Misses         77       55      -22   \n+ Partials       18       17       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.82% <0%> (\u00f8) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 80.95% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 624990c...95a1aea. Read the comment docs.\n. # Codecov Report\nMerging #800 into next will increase coverage by 0.28%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #800      +/-\n==========================================\n+ Coverage   84.95%   85.23%   +0.28%   \n==========================================\n  Files          22       22            \n  Lines         472      481       +9   \n  Branches      129      133       +4   \n==========================================\n+ Hits          401      410       +9   \n- Misses         53       59       +6   \n+ Partials       18       12       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 92.3% <100%> (+11.35%) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.54% <90%> (-0.83%) | :arrow_down: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8802f03...7923d79. Read the comment docs.\n. # Codecov Report\nMerging #802 into next will decrease coverage by 0.66%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #802      +/-\n==========================================\n- Coverage   84.85%   84.18%   -0.67%   \n==========================================\n  Files          22       22            \n  Lines         482      487       +5   \n  Branches       85      123      +38   \n==========================================\n+ Hits          409      410       +1   \n- Misses         63       64       +1   \n- Partials       10       13       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/hot.dev.js | 77.41% <16.66%> (-11.05%) | :arrow_down: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 92.3% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.56% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee547c7...559d337. Read the comment docs.\n. # Codecov Report\nMerging #803 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #803   +/-\n=======================================\n  Coverage   84.95%   84.95%         \n=======================================\n  Files          22       22         \n  Lines         472      472         \n  Branches      129      129         \n=======================================\n  Hits          401      401         \n  Misses         53       53         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8802f03...78310fa. Read the comment docs.\n. # Codecov Report\nMerging #805 into next will decrease coverage by 0.35%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #805      +/-\n==========================================\n- Coverage   84.95%   84.59%   -0.36%   \n==========================================\n  Files          22       22            \n  Lines         472      474       +2   \n  Branches      129       95      -34   \n==========================================\n  Hits          401      401            \n- Misses         53       57       +4   \n+ Partials       18       16       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 88.42% <83.33%> (-0.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8802f03...8e25a76. Read the comment docs.\n. # Codecov Report\nMerging #810 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #810   +/-\n=======================================\n  Coverage   84.31%   84.31%         \n=======================================\n  Files          23       23         \n  Lines         491      491         \n  Branches      107      101    -6   \n=======================================\n  Hits          414      414         \n- Misses         61       62    +1   \n+ Partials       16       15    -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 92.3% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0faea73...de3d864. Read the comment docs.\n. # Codecov Report\nMerging #813 into next will decrease coverage by 0.21%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext    #813      +/-\n=========================================\n- Coverage   84.31%   84.1%   -0.22%   \n=========================================\n  Files          23      23            \n  Lines         491     497       +6   \n  Branches      135     145      +10   \n=========================================\n+ Hits          414     418       +4   \n  Misses         60      60            \n- Partials       17      19       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/global/modules.js | 76.47% <88.88%> (-5.35%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 843cd5d...1ba537a. Read the comment docs.\n. # Codecov Report\nMerging #814 into next will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #814      +/-\n==========================================\n+ Coverage   84.31%   84.38%   +0.06%   \n==========================================\n  Files          23       23            \n  Lines         491      493       +2   \n  Branches      135      138       +3   \n==========================================\n+ Hits          414      416       +2   \n+ Misses         60       59       -1   \n- Partials       17       18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.17% <100%> (-0.39%) | :arrow_down: |\n| packages/react-hot-loader/src/logger.js | 11.11% <0%> (-11.12%) | :arrow_down: |\n| packages/react-hot-loader/src/AppContainer.dev.js | 80% <0%> (+10%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 843cd5d...e1d99f5. Read the comment docs.\n. # Codecov Report\nMerging #815 into next will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext    #815      +/-\n=========================================\n+ Coverage   84.16%   84.3%   +0.13%   \n=========================================\n  Files          23      23            \n  Lines         499     497       -2   \n  Branches      101     144      +43   \n=========================================\n- Hits          420     419       -1   \n+ Misses         63      58       -5   \n- Partials       16      20       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/AppContainer.dev.js | 83.33% <100%> (+3.33%) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 92.3% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/global/modules.js | 76.47% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.17% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d179afe...0fc6534. Read the comment docs.\n. # Codecov Report\nMerging #818 into next will increase coverage by 0.54%.\nThe diff coverage is 96%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #818      +/-\n=========================================\n+ Coverage   84.3%   84.85%   +0.54%   \n=========================================\n  Files         23       23            \n  Lines        497      515      +18   \n  Branches     103      144      +41   \n=========================================\n+ Hits         419      437      +18   \n+ Misses        59       58       -1   \n- Partials      19       20       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/global/modules.js | 74.19% <100%> (-2.28%) | :arrow_down: |\n| packages/react-hot-loader/src/hot.dev.js | 91.42% <93.33%> (+14%) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.17% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 181bf59...e292f99. Read the comment docs.\n. # Codecov Report\nMerging #822 into next will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #822      +/-\n==========================================\n+ Coverage   84.85%   84.92%   +0.06%   \n==========================================\n  Files          23       23            \n  Lines         515      504      -11   \n  Branches      129      140      +11   \n==========================================\n- Hits          437      428       -9   \n+ Misses         59       56       -3   \n- Partials       19       20       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 97.72% <\u00f8> (+1.36%) | :arrow_up: |\n| packages/react-hot-loader/src/utils.dev.js | 100% <100%> (+25%) | :arrow_up: |\n| ...ckages/react-hot-loader/src/internal/reactUtils.js | 92.3% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f2e01f...b51f1c1. Read the comment docs.\n. # Codecov Report\nMerging #823 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #823   +/-\n=======================================\n  Coverage   84.92%   84.92%         \n=======================================\n  Files          23       23         \n  Lines         504      504         \n  Branches      140       91   -49   \n=======================================\n  Hits          428      428         \n- Misses         56       61    +5   \n+ Partials       20       15    -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.17% <0%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6508461...55cbb56. Read the comment docs.\n. # Codecov Report\nMerging #826 into next will increase coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nnext   #826      +/-\n========================================\n+ Coverage   84.92%    85%   +0.08%   \n========================================\n  Files          23     23            \n  Lines         504    507       +3   \n  Branches      140    137       -3   \n========================================\n+ Hits          428    431       +3   \n- Misses         56     60       +4   \n+ Partials       20     16       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/utils.dev.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6508461...8852ba4. Read the comment docs.\n. # Codecov Report\nMerging #829 into next will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nnext   #829      +/-\n========================================\n+ Coverage   84.92%    85%   +0.08%   \n========================================\n  Files          23     23            \n  Lines         504    507       +3   \n  Branches      140    147       +7   \n========================================\n+ Hits          428    431       +3   \n  Misses         56     56            \n  Partials       20     20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/utils.dev.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6508461...1401ea7. Read the comment docs.\n. # Codecov Report\nMerging #830 into next will increase coverage by 1.2%.\nThe diff coverage is 94.28%.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #830     +/-\n=======================================\n+ Coverage    85%   86.21%   +1.2%   \n=======================================\n  Files        23       25      +2   \n  Lines       507      573     +66   \n  Branches     96      151     +55   \n=======================================\n+ Hits        431      494     +63   \n- Misses       61       62      +1   \n- Partials     15       17      +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/reactHotLoader.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/utils.dev.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 100% <100%> (+2.27%) | :arrow_up: |\n| packages/react-hot-loader/src/reconciler/index.js | 100% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/AppContainer.dev.js | 84.21% <100%> (+0.87%) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.72% <92%> (+0.54%) | :arrow_up: |\n| ...es/react-hot-loader/src/reconciler/proxyAdapter.js | 94.44% <93.93%> (\u00f8) | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2b7c3c...d3e213b. Read the comment docs.\n. # Codecov Report\nMerging #833 into next will decrease coverage by 0.16%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@           Coverage Diff            @@\nnext     #833      +/-\n========================================\n- Coverage    85%   84.84%   -0.17%   \n========================================\n  Files        23       25       +2   \n  Lines       507      528      +21   \n  Branches     96      147      +51   \n========================================\n+ Hits        431      448      +17   \n- Misses       61       64       +3   \n- Partials     15       16       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/reactHotLoader.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/logger.js | 11.11% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/config.js | 100% <100%> (\u00f8) | |\n| .../react-hot-loader/src/reconciler/standInAdapter.js | 100% <100%> (\u00f8) | |\n| packages/react-hot-loader/src/utils.dev.js | 85.71% <50%> (-14.29%) | :arrow_down: |\n| ...ackages/react-hot-loader/src/reconciler/proxies.js | 92.45% <87.5%> (-5.28%) | :arrow_down: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.17% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2b7c3c...27a5868. Read the comment docs.\n. # Codecov Report\nMerging #837 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@         Coverage Diff         @@\nnext   #837   +/-\n===================================\n  Coverage    85%    85%         \n===================================\n  Files        23     23         \n  Lines       507    507         \n  Branches    144    139    -5   \n===================================\n  Hits        431    431         \n- Misses       56     63    +7   \n+ Partials     20     13    -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-hot-loader/src/global/modules.js | 74.19% <0%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d72a9dd...353e182. Read the comment docs.\n. # Codecov Report\nMerging #842 into next will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #842   +/-\n=======================================\n  Coverage   86.21%   86.21%         \n=======================================\n  Files          25       25         \n  Lines         573      573         \n  Branches       95      153   +58   \n=======================================\n  Hits          494      494         \n+ Misses         68       59    -9   \n- Partials       11       20    +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...es/react-hot-loader/src/reconciler/proxyAdapter.js | 94.44% <100%> (\u00f8) | :arrow_up: |\n| ...ot-loader/src/internal/stack/hydrateLegacyStack.js | 8.69% <0%> (\u00f8) | :arrow_up: |\n| packages/react-hot-loader/src/global/modules.js | 74.19% <0%> (\u00f8) | :arrow_up: |\n| ...-hot-loader/src/reconciler/hotReplacementRender.js | 87.72% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d29f484...a824ddb. Read the comment docs.\n. # Codecov Report\nMerging #844 into next will decrease coverage by 0.09%.\nThe diff coverage is 37.5%.\n\n\n```diff\n@@            Coverage Diff            @@\nnext     #844     +/-\n=========================================\n- Coverage   86.21%   86.12%   -0.1%   \n=========================================\n  Files          25       30      +5   \n  Lines         573      598     +25   \n  Branches      141      139      -2   \n=========================================\n+ Hits          494      515     +21   \n- Misses         59       67      +8   \n+ Partials       20       16      -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/internal/reactUtils.js | 84.61% <\u00f8> (\u00f8) | |\n| src/internal/stack/hydrateLegacyStack.js | 0% <\u00f8> (\u00f8) | |\n| src/hot.dev.js | 91.42% <\u00f8> (\u00f8) | |\n| src/proxy/constants.js | 100% <\u00f8> (\u00f8) | |\n| src/reconciler/proxyAdapter.js | 94.44% <\u00f8> (\u00f8) | |\n| src/internal/stack/hydrateFiberStack.js | 100% <\u00f8> (\u00f8) | |\n| src/reactHotLoader.js | 100% <\u00f8> (\u00f8) | |\n| src/AppContainer.prod.js | 100% <\u00f8> (\u00f8) | |\n| src/global/modules.js | 100% <\u00f8> (\u00f8) | |\n| test/proxy/helper.js | 100% <\u00f8> (\u00f8) | |\n| ... and 39 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf519d4...15200cc. Read the comment docs.\n. # Codecov Report\nMerging #849 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #849   +/-\n=======================================\n  Coverage   86.12%   86.12%         \n=======================================\n  Files          30       30         \n  Lines         598      598         \n  Branches      139      139         \n=======================================\n  Hits          515      515         \n  Misses         67       67         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7580552...801ebcd. Read the comment docs.\n. # Codecov Report\nMerging #853 into next will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #853   +/-\n=======================================\n  Coverage   86.86%   86.86%         \n=======================================\n  Files          30       30         \n  Lines         609      609         \n  Branches      145      145         \n=======================================\n  Hits          529      529         \n  Misses         65       65         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/utils.js | 78.04% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 963677f...fd225c8. Read the comment docs.\n. # Codecov Report\nMerging #857 into next will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #857      +/-\n==========================================\n+ Coverage   86.86%   86.97%   +0.11%   \n==========================================\n  Files          30       30            \n  Lines         609      622      +13   \n  Branches      145      147       +2   \n==========================================\n+ Hits          529      541      +12   \n  Misses         65       65            \n- Partials       15       16       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 98.88% <100%> (+0.06%) | :arrow_up: |\n| src/proxy/constants.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 84.61% <100%> (-0.6%) | :arrow_down: |\n| src/reconciler/proxyAdapter.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/global/generation.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99da77b...e000cb8. Read the comment docs.\n. # Codecov Report\nMerging #859 into next will increase coverage by 0.24%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #859      +/-\n==========================================\n+ Coverage   86.97%   87.22%   +0.24%   \n==========================================\n  Files          30       30            \n  Lines         622      634      +12   \n  Branches      147      149       +2   \n==========================================\n+ Hits          541      553      +12   \n  Misses         65       65            \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.01% <100%> (+0.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8fa1d42...b93d6e0. Read the comment docs.\n. # Codecov Report\nMerging #861 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #861   +/-\n=======================================\n  Coverage   86.97%   86.97%         \n=======================================\n  Files          30       30         \n  Lines         622      622         \n  Branches      147      147         \n=======================================\n  Hits          541      541         \n  Misses         65       65         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8fa1d42...1a06535. Read the comment docs.\n. # Codecov Report\nMerging #862 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #862   +/-\n=======================================\n  Coverage   86.97%   86.97%         \n=======================================\n  Files          30       30         \n  Lines         622      622         \n  Branches      147      147         \n=======================================\n  Hits          541      541         \n  Misses         65       65         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 572e803...3e60400. Read the comment docs.\n. # Codecov Report\nMerging #863 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #863   +/-\n=======================================\n  Coverage   86.97%   86.97%         \n=======================================\n  Files          30       30         \n  Lines         622      622         \n  Branches      147      147         \n=======================================\n  Hits          541      541         \n  Misses         65       65         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 572e803...de9864f. Read the comment docs.\n. # Codecov Report\nMerging #864 into next will increase coverage by 1.46%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #864      +/-\n==========================================\n+ Coverage   86.97%   88.43%   +1.46%   \n==========================================\n  Files          30       30            \n  Lines         622      692      +70   \n  Branches      147      159      +12   \n==========================================\n+ Hits          541      612      +71   \n+ Misses         65       64       -1   \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 100% <0%> (+1.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ffe0035...f436621. Read the comment docs.\n. # Codecov Report\nMerging #868 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #868   +/-\n=======================================\n  Coverage   87.22%   87.22%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      149      149         \n=======================================\n  Hits          553      553         \n  Misses         65       65         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a36c4d3...f1108ba. Read the comment docs.\n. # Codecov Report\nMerging #870 into next will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nnext     #870   +/-\n=======================================\n  Coverage   87.22%   87.22%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      149      149         \n=======================================\n  Hits          553      553         \n  Misses         65       65         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.01% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a36c4d3...a429374. Read the comment docs.\n. # Codecov Report\nMerging #871 into next will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext     #871      +/-\n==========================================\n+ Coverage   87.22%   87.38%   +0.15%   \n==========================================\n  Files          30       30            \n  Lines         634      634            \n  Branches      149      148       -1   \n==========================================\n+ Hits          553      554       +1   \n+ Misses         65       64       -1   \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 85.31% <100%> (+0.69%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b13ed1...df21426. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@dd24b52). Click here to learn what that means.\nThe diff coverage is 87.6%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #876   +/-\n=========================================\n  Coverage          ?   87.38%         \n=========================================\n  Files             ?       30         \n  Lines             ?      634         \n  Branches          ?      148         \n=========================================\n  Hits              ?      554         \n  Misses            ?       64         \n  Partials          ?       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/AppContainer.prod.js | 100% <\u00f8> (\u00f8) | |\n| src/internal/stack/hydrateLegacyStack.js | 0% <0%> (\u00f8) | |\n| src/reactHotLoader.js | 100% <100%> (\u00f8) | |\n| src/reconciler/proxyAdapter.js | 100% <100%> (\u00f8) | |\n| src/hot.prod.js | 100% <100%> (\u00f8) | |\n| src/internal/constants.js | 100% <100%> (\u00f8) | |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | |\n| src/utils.dev.js | 100% <100%> (\u00f8) | |\n| src/global/generation.js | 100% <100%> (\u00f8) | |\n| src/reconciler/index.js | 100% <100%> (\u00f8) | |\n| ... and 20 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd24b52...34077b7. Read the comment docs.\n. # Codecov Report\nMerging #878 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #878   +/-\n=======================================\n  Coverage   87.38%   87.38%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      148      148         \n=======================================\n  Hits          554      554         \n  Misses         64       64         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b36b842...38586ae. Read the comment docs.\n. # Codecov Report\nMerging #883 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #883   +/-\n=======================================\n  Coverage   87.38%   87.38%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      148      148         \n=======================================\n  Hits          554      554         \n  Misses         64       64         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca244d7...74d1587. Read the comment docs.\n. # Codecov Report\nMerging #885 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #885   +/-\n=======================================\n  Coverage   87.38%   87.38%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      148      148         \n=======================================\n  Hits          554      554         \n  Misses         64       64         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cde1588...1a80140. Read the comment docs.\n. # Codecov Report\nMerging #888 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #888   +/-\n=======================================\n  Coverage   87.38%   87.38%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      148      148         \n=======================================\n  Hits          554      554         \n  Misses         64       64         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/hot.dev.js | 91.42% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a73499b...68e1e40. Read the comment docs.\n. # Codecov Report\nMerging #889 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #889      +/-\n==========================================\n+ Coverage   87.38%   87.42%   +0.03%   \n==========================================\n  Files          30       30            \n  Lines         634      636       +2   \n  Branches      148      149       +1   \n==========================================\n+ Hits          554      556       +2   \n  Misses         64       64            \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 85.31% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 99.03% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b639bc6...33f2376. Read the comment docs.\n. # Codecov Report\nMerging #906 into master will not change coverage.\nThe diff coverage is 25%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #906   +/-\n=======================================\n  Coverage   87.38%   87.38%         \n=======================================\n  Files          30       30         \n  Lines         634      634         \n  Branches      148      148         \n=======================================\n  Hits          554      554         \n  Misses         64       64         \n  Partials       16       16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/logger.js | 22.22% <25%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b639bc6...87ad586. Read the comment docs.\n. # Codecov Report\nMerging #914 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #914   +/-\n=======================================\n  Coverage   87.42%   87.42%         \n=======================================\n  Files          30       30         \n  Lines         636      636         \n  Branches      149      149         \n=======================================\n  Hits          556      556         \n  Misses         64       64         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c420fee...d3b91de. Read the comment docs.\n. # Codecov Report\nMerging #915 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #915      +/-\n=========================================\n+ Coverage   87.42%   87.5%   +0.07%   \n=========================================\n  Files          30      30            \n  Lines         636     640       +4   \n  Branches      149     149            \n=========================================\n+ Hits          556     560       +4   \n  Misses         64      64            \n  Partials       16      16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.06% <100%> (+0.02%) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c420fee...f3a1a68. Read the comment docs.\n. # Codecov Report\nMerging #916 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #916   +/-\n=======================================\n  Coverage   87.42%   87.42%         \n=======================================\n  Files          30       30         \n  Lines         636      636         \n  Branches      149      149         \n=======================================\n  Hits          556      556         \n  Misses         64       64         \n  Partials       16       16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c420fee...83bfd40. Read the comment docs.\n. # Codecov Report\nMerging #919 into master will increase coverage by 0.3%.\nThe diff coverage is 76.92%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #919     +/-\n========================================\n+ Coverage    87.5%   87.8%   +0.3%   \n========================================\n  Files          30      30           \n  Lines         640     648      +8   \n  Branches      149     151      +2   \n========================================\n+ Hits          560     569      +9   \n  Misses         64      64           \n+ Partials       16      15      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/utils.js | 78.04% <\u00f8> (\u00f8) | :arrow_up: |\n| src/internal/stack/hydrateLegacyStack.js | 0% <0%> (\u00f8) | :arrow_up: |\n| src/internal/stack/hydrateFiberStack.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 87.94% <100%> (+2.62%) | :arrow_up: |\n| src/proxy/createClassProxy.js | 99.09% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 10a320c...253e452. Read the comment docs.\n. # Codecov Report\nMerging #921 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #921   +/-\n======================================\n  Coverage    87.5%   87.5%         \n======================================\n  Files          30      30         \n  Lines         640     640         \n  Branches      149     149         \n======================================\n  Hits          560     560         \n  Misses         64      64         \n  Partials       16      16\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8532df...cf6d26e. Read the comment docs.\n. # Codecov Report\nMerging #927 into master will increase coverage by 0.16%.\nThe diff coverage is 93.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #927      +/-\n==========================================\n+ Coverage    87.8%   87.96%   +0.16%   \n==========================================\n  Files          30       30            \n  Lines         648      665      +17   \n  Branches      151      154       +3   \n==========================================\n+ Hits          569      585      +16   \n- Misses         64       65       +1   \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/internal/stack/hydrateLegacyStack.js | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reconciler/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/internal/stack/hydrateFiberStack.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/hot.dev.js | 91.42% <\u00f8> (\u00f8) | :arrow_up: |\n| src/proxy/transferStaticProps.js | 94.44% <\u00f8> (\u00f8) | :arrow_up: |\n| src/AppContainer.dev.js | 82.35% <100%> (-1.86%) | :arrow_down: |\n| src/reconciler/proxyAdapter.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 99.13% <100%> (+0.03%) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 88.53% <88.88%> (+0.59%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36e8ac7...4f17b94. Read the comment docs.\n. # Codecov Report\nMerging #929 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #929   +/-\n======================================\n  Coverage    87.8%   87.8%         \n======================================\n  Files          30      30         \n  Lines         648     648         \n  Branches      151     151         \n======================================\n  Hits          569     569         \n  Misses         64      64         \n  Partials       15      15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36e8ac7...22a1e09. Read the comment docs.\n. # Codecov Report\nMerging #931 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #931   +/-\n======================================\n  Coverage    87.8%   87.8%         \n======================================\n  Files          30      30         \n  Lines         648     648         \n  Branches      151     151         \n======================================\n  Hits          569     569         \n  Misses         64      64         \n  Partials       15      15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fa22392...4120083. Read the comment docs.\n. # Codecov Report\nMerging #937 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #937   +/-\n=======================================\n  Coverage   87.96%   87.96%         \n=======================================\n  Files          30       30         \n  Lines         665      665         \n  Branches      154      154         \n=======================================\n  Hits          585      585         \n  Misses         65       65         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 75.47% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 948138a...8a6f69d. Read the comment docs.\n. # Codecov Report\nMerging #939 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #939      +/-\n==========================================\n+ Coverage   87.96%   88.11%   +0.14%   \n==========================================\n  Files          30       30            \n  Lines         665      673       +8   \n  Branches      154      155       +1   \n==========================================\n+ Hits          585      593       +8   \n  Misses         65       65            \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.18% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1ec9ec2...a84dcd0. Read the comment docs.\n. # Codecov Report\nMerging #941 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #941   +/-\n=======================================\n  Coverage   88.11%   88.11%         \n=======================================\n  Files          30       30         \n  Lines         673      673         \n  Branches      155      155         \n=======================================\n  Hits          593      593         \n  Misses         65       65         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 31282f6...609e83b. Read the comment docs.\n. # Codecov Report\nMerging #943 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #943   +/-\n=======================================\n  Coverage   88.11%   88.11%         \n=======================================\n  Files          30       30         \n  Lines         673      673         \n  Branches      155      155         \n=======================================\n  Hits          593      593         \n  Misses         65       65         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 88.53% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c406a8...a2f6e04. Read the comment docs.\n. # Codecov Report\nMerging #946 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #946   +/-\n=======================================\n  Coverage   88.11%   88.11%         \n=======================================\n  Files          30       30         \n  Lines         673      673         \n  Branches      155      155         \n=======================================\n  Hits          593      593         \n  Misses         65       65         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9c406a8...90cd663. Read the comment docs.\n. # Codecov Report\nMerging #948 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #948   +/-\n=======================================\n  Coverage   88.11%   88.11%         \n=======================================\n  Files          30       30         \n  Lines         673      673         \n  Branches      155      155         \n=======================================\n  Hits          593      593         \n  Misses         65       65         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b297233...0033dfc. Read the comment docs.\n. # Codecov Report\nMerging #950 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #950      +/-\n==========================================\n+ Coverage   88.11%   88.13%   +0.01%   \n==========================================\n  Files          30       30            \n  Lines         673      674       +1   \n  Branches      155      156       +1   \n==========================================\n+ Hits          593      594       +1   \n  Misses         65       65            \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 75.92% <100%> (+0.45%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 949f859...7819c71. Read the comment docs.\n. # Codecov Report\nMerging #955 into master will decrease coverage by 2.07%.\nThe diff coverage is 40%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #955      +/-\n==========================================\n- Coverage   88.73%   86.65%   -2.08%   \n==========================================\n  Files          30       31       +1   \n  Lines         772      802      +30   \n  Branches      184      189       +5   \n==========================================\n+ Hits          685      695      +10   \n- Misses         72       89      +17   \n- Partials       15       18       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 93.1% <0%> (-6.9%) | :arrow_down: |\n| src/reconciler/hotReplacementRender.js | 83.51% <11.11%> (-3.65%) | :arrow_down: |\n| src/adapters/preact.js | 25% <25%> (\u00f8) | |\n| src/utils.dev.js | 87.5% <50%> (-12.5%) | :arrow_down: |\n| src/proxy/createClassProxy.js | 97.22% <66.66%> (-2.05%) | :arrow_down: |\n| src/internal/getReactStack.js | 87.5% <80%> (+1.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5d57ee...7fcd04c. Read the comment docs.\n. # Codecov Report\nMerging #957 into master will increase coverage by 0.29%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #957      +/-\n==========================================\n+ Coverage   88.11%   88.41%   +0.29%   \n==========================================\n  Files          30       30            \n  Lines         673      673            \n  Branches      155      155            \n==========================================\n+ Hits          593      595       +2   \n+ Misses         65       64       -1   \n+ Partials       15       14       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 89.8% <100%> (+1.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 949f859...7e80881. Read the comment docs.\n. # Codecov Report\nMerging #958 into master will increase coverage by 0.47%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #958      +/-\n=========================================\n+ Coverage   88.42%   88.9%   +0.47%   \n=========================================\n  Files          30      30            \n  Lines         674     739      +65   \n  Branches      156     173      +17   \n=========================================\n+ Hits          596     657      +61   \n- Misses         64      68       +4   \n  Partials       14      14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/babel.dev.js | 94.64% <100%> (\u00f8) | |\n| babel.js | | |\n| src/proxy/inject.js | 77.27% <0%> (+1.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ebb809...806d526. Read the comment docs.\n. # Codecov Report\nMerging #961 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #961   +/-\n=======================================\n  Coverage   88.42%   88.42%         \n=======================================\n  Files          30       30         \n  Lines         674      674         \n  Branches      156      156         \n=======================================\n  Hits          596      596         \n  Misses         64       64         \n  Partials       14       14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ebb809...c3b783d. Read the comment docs.\n. # Codecov Report\nMerging #963 into master will decrease coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #963      +/-\n==========================================\n- Coverage   88.42%   88.33%   -0.09%   \n==========================================\n  Files          30       30            \n  Lines         674      686      +12   \n  Branches      156      163       +7   \n==========================================\n+ Hits          596      606      +10   \n- Misses         64       66       +2   \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 77.27% <0%> (+1.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3e1208...ac53309. Read the comment docs.\n. # Codecov Report\nMerging #965 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #965   +/-\n=======================================\n  Coverage   88.42%   88.42%         \n=======================================\n  Files          30       30         \n  Lines         674      674         \n  Branches      156      156         \n=======================================\n  Hits          596      596         \n  Misses         64       64         \n  Partials       14       14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3e1208...ff11275. Read the comment docs.\n. # Codecov Report\nMerging #967 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #967   +/-\n=======================================\n  Coverage   88.99%   88.99%         \n=======================================\n  Files          30       30         \n  Lines         727      727         \n  Branches      166      166         \n=======================================\n  Hits          647      647         \n  Misses         66       66         \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 89.8% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b22f37e...a6bbd40. Read the comment docs.\n. # Codecov Report\nMerging #968 into master will decrease coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #968      +/-\n==========================================\n- Coverage   88.99%   88.84%   -0.16%   \n==========================================\n  Files          30       31       +1   \n  Lines         727      744      +17   \n  Branches      166      174       +8   \n==========================================\n+ Hits          647      661      +14   \n- Misses         66       69       +3   \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 89.93% <100%> (+0.12%) | :arrow_up: |\n| babel.js | 66.66% <0%> (\u00f8) | |\n| src/proxy/inject.js | 77.27% <0%> (+1.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b22f37e...24b3a76. Read the comment docs.\n. # Codecov Report\nMerging #970 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #970      +/-\n==========================================\n+ Coverage   89.02%   89.06%   +0.04%   \n==========================================\n  Files          30       30            \n  Lines         729      741      +12   \n  Branches      166      168       +2   \n==========================================\n+ Hits          649      660      +11   \n- Misses         66       67       +1   \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.25% <100%> (+0.07%) | :arrow_up: |\n| src/proxy/utils.js | 75.6% <0%> (-2.44%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 323389a...f11b187. Read the comment docs.\n. # Codecov Report\nMerging #971 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #971   +/-\n=======================================\n  Coverage   89.06%   89.06%         \n=======================================\n  Files          30       30         \n  Lines         741      741         \n  Branches      168      168         \n=======================================\n  Hits          660      660         \n  Misses         67       67         \n  Partials       14       14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5c05e7...64b6870. Read the comment docs.\n. # Codecov Report\nMerging #972 into master will increase coverage by 0.94%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #972      +/-\n==========================================\n+ Coverage   89.06%   90.01%   +0.94%   \n==========================================\n  Files          30       30            \n  Lines         741      801      +60   \n  Branches      168      182      +14   \n==========================================\n+ Hits          660      721      +61   \n+ Misses         67       66       -1   \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 75.92% <\u00f8> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 99.48% <0%> (+0.22%) | :arrow_up: |\n| src/proxy/utils.js | 78.04% <0%> (+2.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b38d7b3...a440b6d. Read the comment docs.\n. # Codecov Report\nMerging #973 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #973   +/-\n=======================================\n  Coverage   89.06%   89.06%         \n=======================================\n  Files          30       30         \n  Lines         741      741         \n  Branches      168      168         \n=======================================\n  Hits          660      660         \n  Misses         67       67         \n  Partials       14       14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 973a0e0...4c773c2. Read the comment docs.\n. # Codecov Report\nMerging #974 into master will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #974      +/-\n=========================================\n+ Coverage   89.06%   89.2%   +0.13%   \n=========================================\n  Files          30      30            \n  Lines         741     741            \n  Branches      168     169       +1   \n=========================================\n+ Hits          660     661       +1   \n+ Misses         67      66       -1   \n  Partials       14      14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 99.25% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/inject.js | 77.77% <0%> (+1.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa15b48...b121705. Read the comment docs.\n. # Codecov Report\nMerging #975 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #975      +/-\n==========================================\n+ Coverage    89.2%   89.21%   +0.01%   \n==========================================\n  Files          30       30            \n  Lines         741      742       +1   \n  Branches      169      170       +1   \n==========================================\n+ Hits          661      662       +1   \n  Misses         66       66            \n  Partials       14       14\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/AppContainer.dev.js | 83.33% <100%> (+0.98%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d81aa67...23f3660. Read the comment docs.\n. # Codecov Report\nMerging #976 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #976   +/-\n=======================================\n  Coverage   89.21%   89.21%         \n=======================================\n  Files          30       30         \n  Lines         742      742         \n  Branches      170      170         \n=======================================\n  Hits          662      662         \n  Misses         66       66         \n  Partials       14       14\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a352cbb...c1ab695. Read the comment docs.\n. # Codecov Report\nMerging #977 into master will decrease coverage by 0.48%.\nThe diff coverage is 81.08%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #977      +/-\n==========================================\n- Coverage   89.21%   88.73%   -0.49%   \n==========================================\n  Files          30       30            \n  Lines         742      772      +30   \n  Branches      170      184      +14   \n==========================================\n+ Hits          662      685      +23   \n- Misses         66       72       +6   \n- Partials       14       15       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 99.26% <100%> (\u00f8) | :arrow_up: |\n| src/internal/reactUtils.js | 90.9% <100%> (+6.29%) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 87.15% <69.56%> (-2.79%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0584e27...56fdd05. Read the comment docs.\n. # Codecov Report\nMerging #981 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #981   +/-\n=======================================\n  Coverage   88.73%   88.73%         \n=======================================\n  Files          30       30         \n  Lines         772      772         \n  Branches      184      184         \n=======================================\n  Hits          685      685         \n  Misses         72       72         \n  Partials       15       15\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f68d5fa...87fc498. Read the comment docs.\n. # Codecov Report\nMerging #982 into master will increase coverage by 0.11%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #982      +/-\n==========================================\n+ Coverage   88.73%   88.84%   +0.11%   \n==========================================\n  Files          30       30            \n  Lines         772      789      +17   \n  Branches      184      188       +4   \n==========================================\n+ Hits          685      701      +16   \n- Misses         72       73       +1   \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 87.75% <0%> (+0.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca047a3...769a2e8. Read the comment docs.\n. # Codecov Report\nMerging #983 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #983   +/-\n=======================================\n  Coverage   88.73%   88.73%         \n=======================================\n  Files          30       30         \n  Lines         772      772         \n  Branches      184      184         \n=======================================\n  Hits          685      685         \n  Misses         72       72         \n  Partials       15       15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 87.15% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca047a3...b0e2b5b. Read the comment docs.\n. # Codecov Report\nMerging #990 into master will not change coverage.\nThe diff coverage is 50%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #990   +/-\n=======================================\n  Coverage   88.73%   88.73%         \n=======================================\n  Files          30       30         \n  Lines         772      772         \n  Branches      184      185    +1   \n=======================================\n  Hits          685      685         \n+ Misses         72       71    -1   \n- Partials       15       16    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 77.77% <50%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5d57ee...111d56e. Read the comment docs.\n. # Codecov Report\nMerging #992 into master will decrease coverage by 0.13%.\nThe diff coverage is 76%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #992      +/-\n==========================================\n- Coverage   86.65%   86.51%   -0.14%   \n==========================================\n  Files          31       31            \n  Lines         802      816      +14   \n  Branches      189      192       +3   \n==========================================\n+ Hits          695      706      +11   \n- Misses         89       91       +2   \n- Partials       18       19       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils.dev.js | 90.9% <100%> (+3.4%) | :arrow_up: |\n| src/reactHotLoader.js | 93.93% <100%> (+0.83%) | :arrow_up: |\n| src/utils.prod.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 82.19% <53.84%> (-1.32%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ec2521...f5600e2. Read the comment docs.\n. # Codecov Report\nMerging #994 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #994   +/-\n=======================================\n  Coverage   86.65%   86.65%         \n=======================================\n  Files          31       31         \n  Lines         802      802         \n  Branches      189      189         \n=======================================\n  Hits          695      695         \n  Misses         89       89         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ec2521...32ccc09. Read the comment docs.\n. # Codecov Report\nMerging #996 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #996   +/-\n=======================================\n  Coverage   86.65%   86.65%         \n=======================================\n  Files          31       31         \n  Lines         802      802         \n  Branches      189      189         \n=======================================\n  Hits          695      695         \n  Misses         89       89         \n  Partials       18       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ec2521...a30db26. Read the comment docs.\n. # Codecov Report\nMerging #1002 into master will increase coverage by 1.11%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1002      +/-\n==========================================\n+ Coverage   86.51%   87.62%   +1.11%   \n==========================================\n  Files          31       31            \n  Lines         816      962     +146   \n  Branches      192      254      +62   \n==========================================\n+ Hits          706      843     +137   \n- Misses         91      101      +10   \n+ Partials       19       18       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/inject.js | 77.58% <80%> (-0.2%) | :arrow_down: |\n| src/reconciler/proxies.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 96.22% <0%> (+2.28%) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 86% <0%> (+3.8%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7d7577...5bfd8cf. Read the comment docs.\n. # Codecov Report\nMerging #1003 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1003      +/-\n=========================================\n+ Coverage   86.65%   86.7%   +0.04%   \n=========================================\n  Files          31      31            \n  Lines         802     805       +3   \n  Branches      189     189            \n=========================================\n+ Hits          695     698       +3   \n  Misses         89      89            \n  Partials       18      18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/babel.dev.js | 94.91% <100%> (+0.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ec2521...e90a25c. Read the comment docs.\n. # Codecov Report\nMerging #1005 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1005      +/-\n==========================================\n+ Coverage   86.51%   86.52%   +0.01%   \n==========================================\n  Files          31       31            \n  Lines         823      824       +1   \n  Branches      193      193            \n==========================================\n+ Hits          712      713       +1   \n  Misses         92       92            \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.22% <100%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 94.11% <100%> (+0.17%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9aa07e...586dd78. Read the comment docs.\n. # Codecov Report\nMerging #1006 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1006   +/-\n=======================================\n  Coverage   86.51%   86.51%         \n=======================================\n  Files          31       31         \n  Lines         823      823         \n  Branches      193      193         \n=======================================\n  Hits          712      712         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4e39a68...09d6d44. Read the comment docs.\n. # Codecov Report\nMerging #1011 into master will decrease coverage by 0.41%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1011      +/-\n==========================================\n- Coverage   86.52%   86.11%   -0.42%   \n==========================================\n  Files          31       31            \n  Lines         824      828       +4   \n  Branches      193      195       +2   \n==========================================\n  Hits          713      713            \n- Misses         92       94       +2   \n- Partials       19       21       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/hot.dev.js | 82.05% <42.85%> (-9.38%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9adfb9b...e9a47a2. Read the comment docs.\n. # Codecov Report\nMerging #1012 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1012   +/-\n=======================================\n  Coverage   86.52%   86.52%         \n=======================================\n  Files          31       31         \n  Lines         824      824         \n  Branches      193      193         \n=======================================\n  Hits          713      713         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9adfb9b...df88b01. Read the comment docs.\n. # Codecov Report\nMerging #1014 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1014      +/-\n==========================================\n+ Coverage   86.52%   86.54%   +0.01%   \n==========================================\n  Files          31       31            \n  Lines         824      825       +1   \n  Branches      193      193            \n==========================================\n+ Hits          713      714       +1   \n  Misses         92       92            \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.24% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8a36e7...ba10324. Read the comment docs.\n. # Codecov Report\nMerging #1015 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1015   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.24% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/inject.js | 77.58% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8189dd4...605da10. Read the comment docs.\n. # Codecov Report\nMerging #1017 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1017   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d77a729...10ae07d. Read the comment docs.\n. # Codecov Report\nMerging #1019 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1019   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 75d07d6...17412d6. Read the comment docs.\n. # Codecov Report\nMerging #1028 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1028   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acb748b...4a0830c. Read the comment docs.\n. # Codecov Report\nMerging #1029 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1029   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acb748b...fac1d29. Read the comment docs.\n. # Codecov Report\nMerging #1030 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1030   +/-\n=======================================\n  Coverage   86.54%   86.54%         \n=======================================\n  Files          31       31         \n  Lines         825      825         \n  Branches      193      193         \n=======================================\n  Hits          714      714         \n  Misses         92       92         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acb748b...ff94e68. Read the comment docs.\n. # Codecov Report\nMerging #1031 into master will increase coverage by 0.13%.\nThe diff coverage is 95.23%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1031      +/-\n==========================================\n+ Coverage   86.54%   86.68%   +0.13%   \n==========================================\n  Files          31       31            \n  Lines         825      826       +1   \n  Branches      193      191       -2   \n==========================================\n+ Hits          714      716       +2   \n+ Misses         92       91       -1   \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/utils.js | 71.42% <\u00f8> (-4.19%) | :arrow_down: |\n| src/proxy/inject.js | 77.58% <\u00f8> (\u00f8) | :arrow_up: |\n| src/internal/reactUtils.js | 92.3% <100%> (+1.39%) | :arrow_up: |\n| src/proxy/createClassProxy.js | 97.24% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 82.98% <92.3%> (+0.79%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e07c06...ec8083c. Read the comment docs.\n. # Codecov Report\nMerging #1033 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1033      +/-\n==========================================\n+ Coverage   86.68%   86.71%   +0.03%   \n==========================================\n  Files          31       31            \n  Lines         826      828       +2   \n  Branches      191      191            \n==========================================\n+ Hits          716      718       +2   \n  Misses         91       91            \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reactHotLoader.js | 94.28% <100%> (+0.16%) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d0f8c5...6af3883. Read the comment docs.\n. # Codecov Report\nMerging #1035 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1035   +/-\n=======================================\n  Coverage   86.71%   86.71%         \n=======================================\n  Files          31       31         \n  Lines         828      828         \n  Branches      191      191         \n=======================================\n  Hits          718      718         \n  Misses         91       91         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 960fd35...890129d. Read the comment docs.\n. # Codecov Report\nMerging #1038 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1038   +/-\n=======================================\n  Coverage   86.71%   86.71%         \n=======================================\n  Files          31       31         \n  Lines         828      828         \n  Branches      191      191         \n=======================================\n  Hits          718      718         \n  Misses         91       91         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f60ce5...aa467f1. Read the comment docs.\n. # Codecov Report\nMerging #1046 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1046   +/-\n=======================================\n  Coverage   86.71%   86.71%         \n=======================================\n  Files          31       31         \n  Lines         828      828         \n  Branches      191      191         \n=======================================\n  Hits          718      718         \n  Misses         91       91         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca3efeb...e5937d7. Read the comment docs.\n. # Codecov Report\nMerging #1052 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1052      +/-\n==========================================\n+ Coverage   86.71%   86.79%   +0.07%   \n==========================================\n  Files          31       31            \n  Lines         828      833       +5   \n  Branches      191      192       +1   \n==========================================\n+ Hits          718      723       +5   \n  Misses         91       91            \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reactHotLoader.js | 94.44% <100%> (+0.15%) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 83.07% <100%> (+0.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca3efeb...cf165a6. Read the comment docs.\n. # Codecov Report\nMerging #1054 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1054      +/-\n==========================================\n+ Coverage   86.79%   86.85%   +0.06%   \n==========================================\n  Files          31       31            \n  Lines         833      837       +4   \n  Branches      192      194       +2   \n==========================================\n+ Hits          723      727       +4   \n  Misses         91       91            \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 83.41% <100%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 151e4e4...322e746. Read the comment docs.\n. # Codecov Report\nMerging #1062 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1062   +/-\n=======================================\n  Coverage   86.85%   86.85%         \n=======================================\n  Files          31       31         \n  Lines         837      837         \n  Branches      194      194         \n=======================================\n  Hits          727      727         \n  Misses         91       91         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cad8f5...ba46aba. Read the comment docs.\n. # Codecov Report\nMerging #1073 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1073   +/-\n======================================\n  Coverage    86.9%   86.9%         \n======================================\n  Files          31      31         \n  Lines         840     840         \n  Branches      194     194         \n======================================\n  Hits          730     730         \n  Misses         91      91         \n  Partials       19      19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d6ca2bb...af2376e. Read the comment docs.\n. # Codecov Report\nMerging #1081 into master will increase coverage by 0.28%.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1081      +/-\n==========================================\n+ Coverage    86.9%   87.18%   +0.28%   \n==========================================\n  Files          31       32       +1   \n  Lines         840      874      +34   \n  Branches      194      206      +12   \n==========================================\n+ Hits          730      762      +32   \n- Misses         91       93       +2   \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/babel.prod.js | 94.11% <94.11%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 696da9b...f7b922c. Read the comment docs.\n. # Codecov Report\nMerging #1084 into master will decrease coverage by 0.73%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1084      +/-\n==========================================\n- Coverage   87.09%   86.35%   -0.74%   \n==========================================\n  Files          32       32            \n  Lines         891      938      +47   \n  Branches      213      229      +16   \n==========================================\n+ Hits          776      810      +34   \n- Misses         95      107      +12   \n- Partials       20       21       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/internal/reactUtils.js | 94.28% <100%> (+1.97%) | :arrow_up: |\n| src/proxy/createClassProxy.js | 97.35% <100%> (+0.01%) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 76.11% <57.69%> (-12.26%) | :arrow_down: |\n| src/reconciler/hotReplacementRender.js | 83.33% <77.58%> (-0.09%) | :arrow_down: |\n| src/internal/stack/hydrateFiberStack.js | 92.85% <0%> (-7.15%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 57eaf30...f0b91e3. Read the comment docs.\n. # Codecov Report\nMerging #1086 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1086   +/-\n======================================\n  Coverage    86.9%   86.9%         \n======================================\n  Files          31      31         \n  Lines         840     840         \n  Branches      194     194         \n======================================\n  Hits          730     730         \n  Misses         91      91         \n  Partials       19      19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/global/modules.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 696da9b...00e5aed. Read the comment docs.\n. # Codecov Report\nMerging #1090 into master will increase coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1090      +/-\n=========================================\n+ Coverage    86.9%   87.1%   +0.19%   \n=========================================\n  Files          31      31            \n  Lines         840     845       +5   \n  Branches      194     196       +2   \n=========================================\n+ Hits          730     736       +6   \n+ Misses         91      90       -1   \n  Partials       19      19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.33% <100%> (+0.09%) | :arrow_up: |\n| src/proxy/utils.js | 74.28% <0%> (+2.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21cfe37...2a6a8bb. Read the comment docs.\n. # Codecov Report\nMerging #1091 into master will increase coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1091      +/-\n=========================================\n+ Coverage    86.9%   87.1%   +0.19%   \n=========================================\n  Files          31      31            \n  Lines         840     845       +5   \n  Branches      194     196       +2   \n=========================================\n+ Hits          730     736       +6   \n+ Misses         91      90       -1   \n  Partials       19      19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.33% <100%> (+0.09%) | :arrow_up: |\n| src/proxy/utils.js | 74.28% <0%> (+2.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21cfe37...08f7457. Read the comment docs.\n. # Codecov Report\nMerging #1093 into master will decrease coverage by 0.04%.\nThe diff coverage is 96.15%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1093      +/-\n==========================================\n- Coverage   87.37%   87.33%   -0.05%   \n==========================================\n  Files          32       32            \n  Lines         879      884       +5   \n  Branches      208      209       +1   \n==========================================\n+ Hits          768      772       +4   \n- Misses         92       93       +1   \n  Partials       19       19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/babel.prod.js | 92.3% <96.15%> (-1.81%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d8763d...281fda1. Read the comment docs.\n. # Codecov Report\nMerging #1096 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1096   +/-\n=======================================\n  Coverage   87.33%   87.33%         \n=======================================\n  Files          32       32         \n  Lines         884      884         \n  Branches      209      209         \n=======================================\n  Hits          772      772         \n  Misses         93       93         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83a4961...feec7bb. Read the comment docs.\n. # Codecov Report\nMerging #1097 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1097   +/-\n=======================================\n  Coverage   87.33%   87.33%         \n=======================================\n  Files          32       32         \n  Lines         884      884         \n  Branches      209      209         \n=======================================\n  Hits          772      772         \n  Misses         93       93         \n  Partials       19       19\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83a4961...4635ede. Read the comment docs.\n. # Codecov Report\nMerging #1098 into master will decrease coverage by 0.23%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1098      +/-\n==========================================\n- Coverage   87.33%   87.09%   -0.24%   \n==========================================\n  Files          32       32            \n  Lines         884      891       +7   \n  Branches      209      213       +4   \n==========================================\n+ Hits          772      776       +4   \n- Misses         93       95       +2   \n- Partials       19       20       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 88.37% <66.66%> (-6.08%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83a4961...b0ec7d5. Read the comment docs.\n. # Codecov Report\nMerging #1100 into master will increase coverage by 0.2%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1100     +/-\n=========================================\n+ Coverage   86.35%   86.56%   +0.2%   \n=========================================\n  Files          32       32           \n  Lines         938      945      +7   \n  Branches      229      231      +2   \n=========================================\n+ Hits          810      818      +8   \n+ Misses        107      106      -1   \n  Partials       21       21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 83.65% <100%> (+0.32%) | :arrow_up: |\n| src/internal/reactUtils.js | 94.28% <100%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 78.57% <66.66%> (+2.45%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 62f9ccd...5f362ad. Read the comment docs.\n. # Codecov Report\nMerging #1101 into master will decrease coverage by 1.11%.\nThe diff coverage is 69.44%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1101      +/-\n==========================================\n- Coverage   86.56%   85.44%   -1.12%   \n==========================================\n  Files          32       33       +1   \n  Lines         945     1010      +65   \n  Branches      231      254      +23   \n==========================================\n+ Hits          818      863      +45   \n- Misses        106      117      +11   \n- Partials       21       30       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reconciler/proxies.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 97.45% <100%> (+0.1%) | :arrow_up: |\n| src/utils.dev.js | 92.3% <100%> (+1.39%) | :arrow_up: |\n| src/internal/stack/hydrateFiberStack.js | 93.33% <100%> (+0.47%) | :arrow_up: |\n| src/reconciler/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils.prod.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 60.55% <31.25%> (-18.03%) | :arrow_down: |\n| src/reconciler/hotReplacementRender.js | 86.95% <53.84%> (+3.3%) | :arrow_up: |\n| src/AppContainer.dev.js | 80.95% <66.66%> (-2.39%) | :arrow_down: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9024559...7c0f9a0. Read the comment docs.\n. # Codecov Report\nMerging #1105 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1105   +/-\n=======================================\n  Coverage   86.56%   86.56%         \n=======================================\n  Files          32       32         \n  Lines         945      945         \n  Branches      231      231         \n=======================================\n  Hits          818      818         \n  Misses        106      106         \n  Partials       21       21\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e9f8e9a...fd30cb3. Read the comment docs.\n. # Codecov Report\nMerging #1108 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1108   +/-\n=======================================\n  Coverage   85.44%   85.44%         \n=======================================\n  Files          33       33         \n  Lines        1010     1010         \n  Branches      254      254         \n=======================================\n  Hits          863      863         \n  Misses        117      117         \n  Partials       30       30\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d471c2a...3b10138. Read the comment docs.\n. # Codecov Report\nMerging #1110 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1110      +/-\n==========================================\n+ Coverage   85.44%   85.48%   +0.04%   \n==========================================\n  Files          33       33            \n  Lines        1010     1013       +3   \n  Branches      254      254            \n==========================================\n+ Hits          863      866       +3   \n  Misses        117      117            \n  Partials       30       30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/babel.dev.js | 95.38% <100%> (+0.22%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d471c2a...ae25a3e. Read the comment docs.\n. # Codecov Report\nMerging #1113 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1113   +/-\n=======================================\n  Coverage   85.44%   85.44%         \n=======================================\n  Files          33       33         \n  Lines        1010     1010         \n  Branches      254      254         \n=======================================\n  Hits          863      863         \n  Misses        117      117         \n  Partials       30       30\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 14b32d9...5f4b585. Read the comment docs.\n. # Codecov Report\nMerging #1114 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1114   +/-\n=======================================\n  Coverage   85.44%   85.44%         \n=======================================\n  Files          33       33         \n  Lines        1010     1010         \n  Branches      254      254         \n=======================================\n  Hits          863      863         \n  Misses        117      117         \n  Partials       30       30\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d16db24...57359f5. Read the comment docs.\n. # Codecov Report\nMerging #1116 into master will decrease coverage by 0.55%.\nThe diff coverage is 35.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1116      +/-\n==========================================\n- Coverage   85.44%   84.89%   -0.56%   \n==========================================\n  Files          33       33            \n  Lines        1010     1026      +16   \n  Branches      254      258       +4   \n==========================================\n+ Hits          863      871       +8   \n- Misses        117      121       +4   \n- Partials       30       34       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/proxy/createClassProxy.js | 97.41% <\u00f8> (-0.04%) | :arrow_down: |\n| src/reconciler/utils.js | 92.85% <\u00f8> (\u00f8) | :arrow_up: |\n| src/global/generation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/proxyAdapter.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reactHotLoader.js | 56.77% <13.79%> (-3.78%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f67953...2367308. Read the comment docs.\n. # Codecov Report\nMerging #1117 into hooks-fix-6-12 will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@               Coverage Diff               @@\nhooks-fix-6-12    #1117   +/-\n===============================================\n  Coverage           84.89%   84.89%         \n===============================================\n  Files                  33       33         \n  Lines                1026     1026         \n  Branches              258      258         \n===============================================\n  Hits                  871      871         \n  Misses                121      121         \n  Partials               34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2367308...c45656c. Read the comment docs.\n. # Codecov Report\nMerging #1122 into master will decrease coverage by 0.83%.\nThe diff coverage is 64.03%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1122      +/-\n==========================================\n- Coverage   84.89%   84.05%   -0.84%   \n==========================================\n  Files          33       37       +4   \n  Lines        1026     1154     +128   \n  Branches      258      281      +23   \n==========================================\n+ Hits          871      970      +99   \n- Misses        121      143      +22   \n- Partials       34       41       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.dev.js | 92.3% <\u00f8> (\u00f8) | :arrow_up: |\n| src/configuration.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/proxy/createClassProxy.js | 97.48% <100%> (+0.06%) | :arrow_up: |\n| src/global/modules.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/index.dev.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/global/generation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/hotReplacementRender.js | 86.95% <100%> (\u00f8) | :arrow_up: |\n| src/AppContainer.dev.js | 88.46% <100%> (+7.5%) | :arrow_up: |\n| src/reactHotLoader.js | 81.66% <33.33%> (+24.88%) | :arrow_up: |\n| src/reconciler/fiberUpdater.js | 35.29% <35.29%> (\u00f8) | |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef001dc...ca92718. Read the comment docs.\n. # Codecov Report\nMerging #1124 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1124   +/-\n=======================================\n  Coverage   84.89%   84.89%         \n=======================================\n  Files          33       33         \n  Lines        1026     1026         \n  Branches      258      258         \n=======================================\n  Hits          871      871         \n  Misses        121      121         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef001dc...e97e3c5. Read the comment docs.\n. # Codecov Report\nMerging #1124 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1124   +/-\n=======================================\n  Coverage   84.89%   84.89%         \n=======================================\n  Files          33       33         \n  Lines        1026     1026         \n  Branches      258      258         \n=======================================\n  Hits          871      871         \n  Misses        121      121         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef001dc...e97e3c5. Read the comment docs.\n. # Codecov Report\nMerging #1128 into master will decrease coverage by 1.54%.\nThe diff coverage is 18.18%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1128      +/-\n==========================================\n- Coverage   84.05%   82.51%   -1.55%   \n==========================================\n  Files          37       37            \n  Lines        1154     1155       +1   \n  Branches      281      281            \n==========================================\n- Hits          970      953      -17   \n- Misses        143      157      +14   \n- Partials       41       45       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/errorReporter.js | 42.85% <18.18%> (-48.32%) | :arrow_down: |\n| src/hot.dev.js | 86% <0%> (-2%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 65d70a8...26dc92b. Read the comment docs.\n. # Codecov Report\nMerging #1129 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1129   +/-\n=======================================\n  Coverage   84.05%   84.05%         \n=======================================\n  Files          37       37         \n  Lines        1154     1154         \n  Branches      281      281         \n=======================================\n  Hits          970      970         \n  Misses        143      143         \n  Partials       41       41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 65d70a8...2a0e275. Read the comment docs.\n. # Codecov Report\nMerging #1133 into master will decrease coverage by 0.39%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1133     +/-\n=========================================\n- Coverage   84.05%   83.66%   -0.4%   \n=========================================\n  Files          37       37           \n  Lines        1154     1157      +3   \n  Branches      281      282      +1   \n=========================================\n- Hits          970      968      -2   \n- Misses        143      148      +5   \n  Partials       41       41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/componentComparator.js | 8.88% <0%> (\u00f8) | :arrow_up: |\n| src/hot.dev.js | 80.39% <100%> (-7.61%) | :arrow_down: |\n| src/errorReporter.js | 88.88% <50%> (-2.29%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 65d70a8...b8c7d6f. Read the comment docs.\n. # Codecov Report\nMerging #1134 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1134   +/-\n=======================================\n  Coverage   83.46%   83.46%         \n=======================================\n  Files          37       37         \n  Lines        1161     1161         \n  Branches      284      284         \n=======================================\n  Hits          969      969         \n  Misses        151      151         \n  Partials       41       41\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b153755...09e40f8. Read the comment docs.\n. # Codecov Report\nMerging #1136 into master will decrease coverage by 0.61%.\nThe diff coverage is 26.31%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1136      +/-\n==========================================\n- Coverage   83.46%   82.84%   -0.62%   \n==========================================\n  Files          37       37            \n  Lines        1161     1172      +11   \n  Branches      284      289       +5   \n==========================================\n+ Hits          969      971       +2   \n- Misses        151      156       +5   \n- Partials       41       45       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/hotReplacementRender.js | 86.95% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/componentComparator.js | 9.25% <18.75%> (+0.37%) | :arrow_up: |\n| src/reconciler/proxies.js | 97.67% <50%> (-2.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a045f57...275ea30. Read the comment docs.\n. # Codecov Report\nMerging #1142 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1142   +/-\n=======================================\n  Coverage   82.84%   82.84%         \n=======================================\n  Files          37       37         \n  Lines        1172     1172         \n  Branches      289      289         \n=======================================\n  Hits          971      971         \n  Misses        156      156         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 17a68ae...6f829a0. Read the comment docs.\n. # Codecov Report\nMerging #1155 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1155   +/-\n=======================================\n  Coverage   82.84%   82.84%         \n=======================================\n  Files          37       37         \n  Lines        1172     1172         \n  Branches      289      289         \n=======================================\n  Hits          971      971         \n  Misses        156      156         \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/AppContainer.prod.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 015fcf0...11ee7b7. Read the comment docs.\n. # Codecov Report\nMerging #1156 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1156   +/-\n=======================================\n  Coverage   82.84%   82.84%         \n=======================================\n  Files          37       37         \n  Lines        1172     1172         \n  Branches      289      289         \n=======================================\n  Hits          971      971         \n  Misses        156      156         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 015fcf0...3a5b0db. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1157   +/-\n=======================================\n  Coverage   82.84%   82.84%         \n=======================================\n  Files          37       37         \n  Lines        1172     1172         \n  Branches      289      289         \n=======================================\n  Hits          971      971         \n  Misses        156      156         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73068c7...4d36cbc. Read the comment docs.\n. # Codecov Report\nMerging #1164 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1164   +/-\n=======================================\n  Coverage   82.84%   82.84%         \n=======================================\n  Files          37       37         \n  Lines        1172     1172         \n  Branches      289      289         \n=======================================\n  Hits          971      971         \n  Misses        156      156         \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/internal/reactUtils.js | 91.89% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 73068c7...143e905. Read the comment docs.\n. # Codecov Report\nMerging #1165 into master will increase coverage by 0.14%.\nThe diff coverage is 89.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1165      +/-\n==========================================\n+ Coverage   82.84%   82.99%   +0.14%   \n==========================================\n  Files          37       37            \n  Lines        1172     1188      +16   \n  Branches      289      297       +8   \n==========================================\n+ Hits          971      986      +15   \n- Misses        156      157       +1   \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/fiberUpdater.js | 35.29% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reconciler/proxyAdapter.js | 82.14% <0%> (\u00f8) | :arrow_up: |\n| src/babel.dev.js | 95.52% <100%> (+0.36%) | :arrow_up: |\n| src/proxy/utils.js | 75% <100%> (+0.71%) | :arrow_up: |\n| src/errorReporter.js | 81.57% <100%> (+0.49%) | :arrow_up: |\n| src/internal/getReactStack.js | 90% <100%> (+0.52%) | :arrow_up: |\n| src/AppContainer.dev.js | 85.71% <66.66%> (-2.75%) | :arrow_down: |\n| src/internal/reactUtils.js | 93.02% <0%> (+1.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a429d4...4b02767. Read the comment docs.\n. # Codecov Report\nMerging #1170 into master will decrease coverage by 0.63%.\nThe diff coverage is 72.91%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1170      +/-\n==========================================\n- Coverage   82.91%   82.27%   -0.64%   \n==========================================\n  Files          37       37            \n  Lines        1182     1241      +59   \n  Branches      293      305      +12   \n==========================================\n+ Hits          980     1021      +41   \n- Misses        157      176      +19   \n+ Partials       45       44       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/configuration.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/reconciler/componentComparator.js | 9.25% <0%> (\u00f8) | :arrow_up: |\n| src/internal/stack/hydrateLegacyStack.js | 0% <0%> (\u00f8) | :arrow_up: |\n| src/AppContainer.dev.js | 74.19% <0%> (-11.53%) | :arrow_down: |\n| src/global/generation.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/internal/stack/hydrateFiberStack.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/reconciler/proxies.js | 97.72% <100%> (+0.05%) | :arrow_up: |\n| src/internal/reactUtils.js | 92.3% <100%> (+0.41%) | :arrow_up: |\n| src/reconciler/fiberUpdater.js | 38.88% <100%> (+3.59%) | :arrow_up: |\n| src/proxy/constants.js | 100% <100%> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 75b5fd3...02d1725. Read the comment docs.\n. # Codecov Report\nMerging #1174 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1174   +/-\n=======================================\n  Coverage   82.91%   82.91%         \n=======================================\n  Files          37       37         \n  Lines        1182     1182         \n  Branches      293      293         \n=======================================\n  Hits          980      980         \n  Misses        157      157         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 75b5fd3...a7c5ae2. Read the comment docs.\n. # Codecov Report\nMerging #1186 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1186   +/-\n=======================================\n  Coverage   82.22%   82.22%         \n=======================================\n  Files          37       37         \n  Lines        1249     1249         \n  Branches      309      309         \n=======================================\n  Hits         1027     1027         \n  Misses        177      177         \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reactHotLoader.js | 78.12% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1a9bd7...7ef4d2c. Read the comment docs.\n. # Codecov Report\nMerging #1187 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1187   +/-\n=======================================\n  Coverage   82.22%   82.22%         \n=======================================\n  Files          37       37         \n  Lines        1249     1249         \n  Branches      309      309         \n=======================================\n  Hits         1027     1027         \n  Misses        177      177         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1a9bd7...1ad57dc. Read the comment docs.\n. # Codecov Report\nMerging #1190 into master will decrease coverage by 0.13%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1190      +/-\n==========================================\n- Coverage   82.22%   82.09%   -0.14%   \n==========================================\n  Files          37       37            \n  Lines        1249     1251       +2   \n  Branches      309      309            \n==========================================\n  Hits         1027     1027            \n- Misses        177      179       +2   \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reactHotLoader.js | 75.75% <0%> (-2.37%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d6bffda...7942d26. Read the comment docs.\n. # Codecov Report\nMerging #1193 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1193   +/-\n=======================================\n  Coverage   82.22%   82.22%         \n=======================================\n  Files          37       37         \n  Lines        1249     1249         \n  Branches      309      309         \n=======================================\n  Hits         1027     1027         \n  Misses        177      177         \n  Partials       45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d6bffda...e3399dc. Read the comment docs.\n. # Codecov Report\nMerging #1195 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1195   +/-\n=======================================\n  Coverage   82.09%   82.09%         \n=======================================\n  Files          37       37         \n  Lines        1251     1251         \n  Branches      309      309         \n=======================================\n  Hits         1027     1027         \n  Misses        179      179         \n  Partials       45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/reconciler/proxies.js | 97.72% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 03829b1...781557a. Read the comment docs.\n. \n",
    "zerobias": "Dirty hack\njs\nfunction ignoreHotLoaderErrors(...methods) {\n  const originalErrorLog = console.error.bind(console)\n  function error(...args) {\n    if (args.length >= 5 && methods.indexOf(args[4]) > -1) {\n      return undefined\n    }\n    originalErrorLog(...args)\n  }\n  console.error = error\n}\nignoreHotLoaderErrors('notifyNestedSubs'). ",
    "samuelcastro": "I also can assure that react-app-rewire-hot-loader works without ejecting.. ",
    "eytanronen": "create-react-app react 16.7 alpha 2, not working without ejecting, getting the hooks error message.. ",
    "wdvvgy": "Of course.\ndon't working.. . @theKashey Thank you for this.\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { AppContainer } from 'react-hot-loader'\nconst render = Component => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('root'),\n  )\n}\nrender(App)\n// Webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./containers/App', () => {\n      const NextApp = require('./containers/App').default;\n      render(NextApp)\n  })\n}\n```. ",
    "JounQin": "It doesn't throw error anymore, however, it could not hot reload neither.\nMy usage code: https://github.com/JounQin/react-study/blob/master/src/entry-client.js. @theKashey I've set Hot-Module-Replacement correctly and it works on v4.0.0-beta.7 but not on >=v4.0.0-beta.8.. transpileOnly: true with ts-loader will also works.. ",
    "likun7981": "\nWithout code splitting\n  The v3.1.3 and v4.0.0-beta.11 are working good\nWith code splitting\n  The v3.1.3 and v4.0.0-beta.11 are hot reload and reset the component state\n~~The v4.0.0-beta.11 version will refresh the page~~\n~~The v3.1.3 is not refresh the page , only hot reload and reset the component state~~. please try https://github.com/likun7981/test-rhl. @neoziro     thank you for you answer,  my Bundle component is wrong,   I fork it from https://reacttraining.com/react-router/web/guides/code-splitting.  it is work use your loadable-components, Thanks again. \n",
    "apostolos": "@likun7981 Wrap your default export with hot(module) and it should work:\njs\nimport { hot } from 'react-hot-loader';\nexport default hot(module)(Counter);. Many thanks!\nRHL v4 now in production here: https://www.lwjgl.org/. ",
    "SuhairZain": "@theKashey Hey,\nIs there an update on this? We were looking to migrate from v3 to v4 because of an issue with setState. But doing so would break our production build with uglify.. ",
    "DevanB": "Ahh, okay. Thanks!\nI'll submit a PR to update the README, if you'd like @neoziro \nIt stinks a TS user must use Babel to take advantage of RHL (or use the older, harder to setup 3.x version).. It appears adding a .babelrc with either of the configurations mentioned doesn't work. I was able to find the issue. I had to change my tsconfig.json from module: \"esnext\" to module: \"commonjs\" to bypass one import error. However, additional errors have appeared around imports now, and I have to support Babel understanding my custom module paths.\nI believe that adding babel-loader on top of ts-loader (or awesome-typescript-loader) is too much. There is no difference between Babel and TypeScript (besides being two different tools) except for that it has been chosen to support only Babel. I have to run my code through two processes (ts-loader and babel-loader) and support two configurations, which only adds complexity and time. Why not support a situation where you don't need to add babel-loader to a working TypeScript setup just to have RHL? It would be extra work, but would allow support for everyone writing JS and TS without added complexity and questions.. >But your problem is not a problem. If you will ever google it, or provide the real error here - you will understand how to solve it\n\n...\nOne line! \n\nNow I understand that you aren't very friendly, understanding, or sympathetic (things I assume @gaearon would want to happen in his projects) and I personally won't be advocating for this project anymore.\nThank You.. ",
    "joeldenning": "\ud83d\udc4d thanks! Upgrading worked.. ",
    "chrisabrams": "@theKashey What JS error? First example works just fine for me. The issue I have is that I don't know what the component is going to be, so I need to put it inside a function. I can't export default it directly as it might be wrapped by another component. I was hoping that I could do something such as:\n```\nexport default function renderHot(Component) {\nreturn hot(module)(Component)\n\n}\n```\nwhich would make it hot on the fly. That does not work though. To be more clear:\nThis works:\n```\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nconst AppC = () => Hello World!! 10\nconst HotApp = hot(module)(AppC)\nexport default function App() {\nreturn HotApp\n}\n```\nThis does not work:\n```\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nconst AppC = () => Hello World!! 10\nexport default function App() {\nreturn hot(module)(AppC)\n}\n```\nWhat specifically makes hot being called inside a function cause [HMR] The following modules couldn't be hot updated: (Full reload needed)?. Maybe I should rephrase my question..how would I correctly place a component inside another component for hot reload, but I don't know what the inner component is going to be? The below code does not hot reload, but is a basic idea of what I am trying to achieve. I don't know what component is going to be rendered until run-time.\n```\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nexport default function App(Component) {\nconst Layout = () => {Component}\n  return hot(module)(Layout)\n}\n```\n  . Thanks @neoziro, @theKashey I tried to follow the example provided but I cannot get the hot module function exported to return a component function/class. React continues to complain that it is returning an object :O\nI have created a sample repo with three files outlining what I am trying to do: https://github.com/chrisabrams/sandbox-hot-reload\nThe src directory contains the three files.. I tried placing a console.log inside the function that is passed into hot(module) but the console.log did not fire. Now I'm trying to figure out if that function is being executed or something else is being returned.. When I check the typeof WrappedComponent here it is a function, what would cause React to then error and say that it's actually an object in the app here? All the function is doing is returning whatever hot module returned.\n  . The challenge for me is that hot(module)(func) returns a class called ExportedComponent which requires new which then causes the object to be returned. If I try to use the return of the hot module export without new then the console complains that ExportedComponent requires new even if I'm trying to inject it into React directly.. To sum up my comments:\nWhy does this error with Uncaught Error: Objects are not valid as a React child (found: object with keys {props, context, refs, updater}). If you meant to render a collection of children, use an array instead.?\n```\nexport default hot(module)(function renderHot(Component) {\nconst Wrapped = () => Component\nreturn Wrapped\n})\n```\nBut this works?\n```\nexport default function renderCold(Component) {\nconst Wrapped = () => Component\nreturn Wrapped\n}\n```. I followed your first example exactly so I'm not sure why you are saying I can't do that anymore. I just want to pass a component inside the function, and have that function return a component which is hot.\nI don't think that the v3/advanced way will work because I don't know what component I'll be wrapping, aka, I can't supply that component path in the if(module.hot) statement because I don't know where the component will be coming from.. Thanks. What I'm working on, I don't really know what the top most level component will be. I can create a wrapping component, but then that brings back to the issue you are describing where I would still need to wrap the second level component, which I won't know. I was able to get it working by wrapping the theme itself, that's good enough for now. Thanks for your help I'm sure I'll comment again when I come across a more advanced case.. ",
    "humam-nameer-10p": "Any example of how to make it work with redux connect() ?\n```\nExample:\nexport default connect(mapStateToProps)(App)\n``` \nOnly App.js and Index.js is hot-reloading rest doesnot.. ",
    "bwlt": "The problem is that in that case I didn't changed the index.tsx file insted the Root.jsx component, so the reason displayed seems to not reflect my use case.\nBTW I have created a next branch on the reproducible demo which use the react-hot-loader@next version.\nI have noticed that it works correctly only if I use awesome-typescript-loader instead of ts-loader. Where I can find more informations on this?. @JounQin setting transpileOnly: true did the job. Thank you.\nFor making the TypeScript check works again I have used fork-ts-checker-webpack-plugin.\nThe faster build section is very clear how to set up properly the loader.\nI confirm that the bug can be considered solved for the react-hot-loader@next version with additional configuration of the ts-loader. I have updated the demo on both branches (the one for react-hot-loader and the one for react-hot-loader@next) and it worked on both versions.. ",
    "YueminHu": "~~the reason why is bug appear is that react-hot-loader/babel plugin didn't transpile the code inside the if (module.hot) {/* code */ }.~~\n~~the plugin should transform the code into this:~~\njavascript\nif (true) {\n  module.hot.accept(\"./src/App.js\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ __WEBPACK_IMPORTED_MODULE_3__App__ = __webpack_require__(\"./src/App.js\"); (function () {\n    console.log(\"unique id!\");\n    render(__WEBPACK_IMPORTED_MODULE_3__App__[\"default\"]);\n  })(__WEBPACK_OUTDATED_DEPENDENCIES__); });\n}\n;\n~~instead we got this( through typescript loader):~~\nif (true) {\n    module.hot.accept(\"./src/Hello.tsx\", function () {\n        console.log(\"unique id!\");\n        // no transform! still using the cached module from last require!\n        render(\"./src/Hello.tsx\"));\n    });\n}\n; \n~~my thoughts is that the ts-loader changed the code, leading it unrecognizable to the babel plugin, thus no further transform.~~\nso, changing your code to manually require the refreshed module should do the trick. \njs\nif (module.hot) {\n  module.hot.accept(\"./Hello\", () => {\n    console.log(\"unique id!\");\n    // Hello = require(\"./Hello\").Hello;\n    // \u5751: tsc\u8f6c\u51fa\u6765\u7684js, react-hot-loader/babel\u63d2\u4ef6\u4e0d\u8ba4, \u9700\u8981\u624b\u52a8\u91cd\u65b0require\u4e00\u904d\n    render(require(\"./Hello\").Hello);\n  });\n}\ncredit @Riokai. @theKashey I think I  get your idea. so the webpack transpiled the imports into requires, (which, in this case, it didnt), what's the good of babel plugin anyway? thanks!. ",
    "derekclair": "@gaearon the boilerplate was fantastically helpful. I did some additional experimenting (in an effort to get a ts+js configuration) that also worked nicely with styled-components and most importantly Jest. I couldn't have done it without this as a starting point. Here's the results if my work is of any help to anyone else: https://github.com/basement-lab/scratchpad-typescript/ . ",
    "escsun": "Yeah i too have this bug, i use IE11 for testing CSS styles, i dont need RHL in IE11, maybe u can check it by try...catch. ",
    "Palid": "Issue still wasn't fixed - https://github.com/gaearon/react-hot-loader/pull/778/files#diff-647d447b1f1e195dc7d32858c321f74bR57 this line is still evaluated in IE11, which throws the whole block.\nThe quick&dirty fix:\n```\nvar proxyClassCreator;\nif (doesSupportClasses) {\n  var ES6ProxyComponentFactory = eval('\\n(function(InitialParent, postConstructionAction) {\\n  return class ProxyComponent extends InitialParent {\\n    constructor(props, context) {\\n      super(props, context)\\n      postConstructionAction.call(this)\\n    }\\n  }\\n})\\n');\n  proxyClassCreator = exports.proxyClassCreator = ES6ProxyComponentFactory;\n} else {\n  var ES5ProxyComponentFactory = function ES5ProxyComponentFactory(InitialParent, postConstructionAction) {\n    function ProxyComponent(props, context) {\n      InitialParent.call(this, props, context);\n      postConstructionAction.call(this);\n    }\n    ProxyComponent.prototype = Object.create(InitialParent.prototype);\n    Object.setPrototypeOf(ProxyComponent, InitialParent);\n    return ProxyComponent;\n  };\n  proxyClassCreator = exports.proxyClassCreator = ES5ProxyComponentFactory;\n}\n```. ",
    "mopduan": "Thanks for your reply! I will try to research it. . ",
    "bennidhamma": "Hey y'all. I'm using react 16, react-jss, React Loadable, running webpackdevserver via the node API.\nThe basic behavior is that I'm using React Loadable to async load the top level components at each route level. The initial load works, and then when I navigate back and forth between two pages, this error was cropping up, but it was in a somewhat deep place in the component tree, which seemed a little odd.\nIf you like, I can dig a little more and inspect, but this did clear up the problem I was having.\nHere is how I'm loading webpack dev server on the server:\n``\nconst done = () => {\n  if (isBuilt) {\n    return\n  }\n  Loadable.preloadAll().then(() => {\n    app.listen(port, () => {\n      isBuilt = true\n      console.log(Server running on port ${port} ${isProd ? '(production)' :\n        '(development)'}`.magenta);\n  })\n}\nconst webpack = require('webpack')\n  const [serverConfig, clientConfig] = require('../../webpack.config.babel')\n  webpack([serverConfig], (err, stats) => {\n    const compiler = webpack([clientConfig, serverConfig])\n    const clientCompiler = compiler.compilers[0]\n    const publicPath = clientConfig.output.publicPath\n    const options = { publicPath, stats: { colors: true } }\napp.use(webpackDevMiddleware(compiler, options))\napp.use(webpackHotMiddleware(clientCompiler))\napp.use(webpackHotServerMiddleware(compiler))\n\ncompiler.plugin('done', done)\n\n})\n```\nAnd here is how I'm loading react-hot-loader on the client:\n```\nconst wrapApp = AppComponent =>\n  (\n\n\n\n\n\n)\nLoadable.preloadReady().then(() => {\n  ReactDOM.hydrate(wrapApp(hot(module)(App)), rootEl)\n})\n```\nHere is my package.json - note that it's even messier than usual because of this current refactor:\n\"dependencies\": {\n    \"babel-plugin-transform-runtime\": \"6.23.0\",\n    \"babel-polyfill\": \"6.23.0\",\n    \"bootstrap\": \"4.0.0-alpha.6\",\n    \"classnames\": \"2.2.5\",\n    \"clipboard-js\": \"^0.3.5\",\n    \"colors\": \"^1.1.2\",\n    \"common-tags\": \"1.4.0\",\n    \"concurrently\": \"3.5.0\",\n    \"datauritoblob\": \"^1.0.0\",\n    \"draft-js\": \"^0.10.2\",\n    \"draft-js-export-markdown\": \"github:themaven-net/draft-js-export-markdown#fee014c47462c1f16791ef7d23e3c15454594309\",\n    \"draft-js-utils\": \"^1.2.0\",\n    \"express\": \"4.15.3\",\n    \"history\": \"4.6.3\",\n    \"hls.js\": \"0.7.10\",\n    \"immutable\": \"3.8.1\",\n    \"intersection-observer\": \"0.3.2\",\n    \"isomorphic-fetch\": \"2.2.1\",\n    \"jquery\": \"3.2.1\",\n    \"marked\": \"0.3.6\",\n    \"material-ui\": \"^0.20.0\",\n    \"material-ui-chip-input\": \"^0.18.5\",\n    \"mdi\": \"2.0.46\",\n    \"mobile-detect\": \"1.3.6\",\n    \"modernizr\": \"3.5.0\",\n    \"moment\": \"2.18.1\",\n    \"ms\": \"2.0.0\",\n    \"nuka-carousel\": \"^3.0.0\",\n    \"postcss-modules\": \"0.8.0\",\n    \"prop-types\": \"^15.5.10\",\n    \"react\": \"^16.0.0\",\n    \"react-cookie\": \"^0.4.8\",\n    \"react-dom\": \"^16.0.0\",\n    \"react-draft-wysiwyg\": \"themaven-net/react-draft-wysiwyg#2203c9fc0bee028daea70428ee23fba085d5df2d\",\n    \"react-helmet\": \"5.1.3\",\n    \"react-hot-loader\": \"next\",\n    \"react-instagram-embed\": \"github:themaven-net/react-instagram-embed#2b7a13fe93716599dafeb197f72658a7a7b5ed9e\",\n    \"react-js-pagination\": \"2.1.0\",\n    \"react-jss\": \"^8.2.1\",\n    \"react-jw-player\": \"^1.16.0\",\n    \"react-loadable\": \"^5.3.1\",\n    \"react-portal\": \"^3.1.0\",\n    \"react-redux\": \"5.0.5\",\n    \"react-router\": \"4.1.1\",\n    \"react-router-dom\": \"4.1.1\",\n    \"react-router-redux\": \"4.0.8\",\n    \"react-sortable-hoc\": \"^0.6.8\",\n    \"react-soundcloud-widget\": \"github:themaven-net/react-soundcloud-widget#815a3df3a6a61206ee452a00f71f691f1d7ecd48\",\n    \"react-sparklines\": \"^1.7.0\",\n    \"react-stripe-checkout\": \"2.4.0\",\n    \"react-timeago\": \"^3.4.3\",\n    \"react-transition-group\": \"^2.2.0\",\n    \"react-twitter-widgets\": \"^1.6.1\",\n    \"react-visibility-sensor\": \"^3.10.1\",\n    \"react-widgets\": \"4.1.1\",\n    \"react-widgets-moment\": \"^4.0.2\",\n    \"react-youtube\": \"^7.4.0\",\n    \"redux\": \"3.7.1\",\n    \"redux-saga\": \"0.15.4\",\n    \"resize-observer-polyfill\": \"^1.5.0\",\n    \"scroll-into-view-if-needed\": \"1.1.0\",\n    \"serialize-javascript\": \"1.3.0\",\n    \"tether\": \"1.4.0\",\n    \"urijs\": \"1.18.2\",\n    \"write-file-webpack-plugin\": \"^4.2.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"6.24.1\",\n    \"babel-core\": \"6.25.0\",\n    \"babel-eslint\": \"^7.2.3\",\n    \"babel-loader\": \"7.1.2\",\n    \"babel-plugin-dynamic-import-node\": \"^1.2.0\",\n    \"babel-plugin-flow-react-proptypes\": \"3.4.1\",\n    \"babel-plugin-module-resolver\": \"2.7.1\",\n    \"babel-plugin-react-transform\": \"2.0.2\",\n    \"babel-plugin-transform-decorators-legacy\": \"1.3.4\",\n    \"babel-plugin-transform-postcss\": \"0.2.0\",\n    \"babel-preset-env\": \"1.5.2\",\n    \"babel-preset-es2015\": \"6.24.1\",\n    \"babel-preset-flow\": \"6.23.0\",\n    \"babel-preset-react\": \"6.24.1\",\n    \"babel-preset-react-hmre\": \"1.1.1\",\n    \"babel-preset-stage-0\": \"6.24.1\",\n    \"better-npm-run\": \"0.0.15\",\n    \"chai\": \"4.0.2\",\n    \"clean-webpack-plugin\": \"^0.1.17\",\n    \"continuation-local-storage\": \"^3.2.1\",\n    \"css-loader\": \"0.28.4\",\n    \"enzyme\": \"^2.9.1\",\n    \"enzyme-redux\": \"^0.1.6\",\n    \"eslint\": \"^4.11.0\",\n    \"eslint-config-airbnb\": \"^15.0.2\",\n    \"eslint-plugin-compat\": \"^1.0.4\",\n    \"eslint-plugin-flowtype\": \"^2.35.1\",\n    \"eslint-plugin-import\": \"^2.6.1\",\n    \"eslint-plugin-jsx-a11y\": \"^5.1.1\",\n    \"eslint-plugin-react\": \"^7.1.0\",\n    \"extract-text-webpack-plugin\": \"3.0.x\",\n    \"file-loader\": \"0.11.2\",\n    \"flow-bin\": \"0.49.1\",\n    \"ignore-styles\": \"5.0.1\",\n    \"jsdom\": \"11.0.0\",\n    \"json-loader\": \"0.5.4\",\n    \"karma\": \"^1.7.1\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-mocha-reporter\": \"^2.2.4\",\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^2.0.4\",\n    \"less\": \"2.7.2\",\n    \"less-loader\": \"2.2.3\",\n    \"mocha\": \"^3.5.3\",\n    \"node-sass\": \"4.5.3\",\n    \"nodemon\": \"1.11.0\",\n    \"phantomjs-polyfill\": \"0.0.2\",\n    \"phantomjs-prebuilt\": \"2.1.14\",\n    \"piping\": \"1.0.0-rc.4\",\n    \"pm2\": \"2.5.0\",\n    \"postcss\": \"6.0.4\",\n    \"postcss-loader\": \"2.0.6\",\n    \"prejss-styles-loader\": \"^1.0.0\",\n    \"react-addons-test-utils\": \"15.6.0\",\n    \"react-test-renderer\": \"^15.6.1\",\n    \"react-transform-catch-errors\": \"1.0.2\",\n    \"react-transform-hmr\": \"1.0.4\",\n    \"redbox-react\": \"1.4.2\",\n    \"rimraf\": \"2.6.1\",\n    \"sass-loader\": \"6.0.6\",\n    \"style-loader\": \"0.18.2\",\n    \"uglifyjs-webpack-plugin\": \"1.1.1\",\n    \"url-loader\": \"0.5.9\",\n    \"webpack\": \"^3.10.0\",\n    \"webpack-after-chunk-hash-plugin\": \"^1.0.0\",\n    \"webpack-bundle-analyzer\": \"2.8.2\",\n    \"webpack-dev-middleware\": \"^2.0.3\",\n    \"webpack-dev-server\": \"^2.8.2\",\n    \"webpack-hot-middleware\": \"^2.21.0\",\n    \"webpack-hot-server-middleware\": \"^0.3.1\",\n    \"webpack-manifest-plugin\": \"^1.3.2\",\n    \"webpack-node-externals\": \"^1.6.0\"\n  },\n  \"engines\": {\n    \"node\": \"8.9.1\"\n  }. Here is an example of the error:\nhotReplacementRender.js?845e:132 Uncaught TypeError: Cannot read property 'type' of null\n    at children.children.map (hotReplacementRender.js?845e:132)\n    at Array.map (<anonymous>)\n    at mapChildren (hotReplacementRender.js?845e:122)\n    at children.children.map (hotReplacementRender.js?845e:129)\n    at Array.map (<anonymous>)\n    at mapChildren (hotReplacementRender.js?845e:122)\n    at mergeInject (hotReplacementRender.js?845e:149)\n    at flow.forEach (hotReplacementRender.js?845e:193)\n    at Array.forEach (<anonymous>)\n    at hotReplacementRender (hotReplacementRender.js?845e:166). @theKashey, As I don't ever export AppComponent, I'm not sure how to translate this instruction.\nHMR is working as I've configured it, with the exception of this issue with deeply nested elements somehow being null in this hotReplacementRender method. Do you think the way I am using hot could be related to the null children in the hotReplacementRender method?\nGreat discussion, and I'm happy to poke around a bit more, but is there anything really objectionable about the PR? Seems like a pretty basic, safe assertion to make.... Thanks Anton. I'll try pulling it out into a separate file and see if that\nclears things up.\nOn Wed, Jan 10, 2018, 14:44 Anton notifications@github.com wrote:\n\nLoadable.preloadReady().then(() => {\n  ReactDOM.hydrate(wrapApp(hot(module)(App)), rootEl) <---\n})\nYou have to move App to the external module, and use hot to make that\nmodule hot.\nWe are not 100% sure why it is impossible to mix hot and react-dom/render\nin one file, but it is impossible, actually resulting some problems with\nreconciler.\nAnd there are no problems with PR. We just want to know how you get the\nerror, and why we dont get it before.\nAnyway - hotReplacementRender already got a code, about removing nulls\nfrom \"first\" children level. It sounds ok that we also should filter out\nnested children.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/pull/774#issuecomment-356762594,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAS6MPQrFYMHMmliIPcMZdsiJL8uZoXdks5tJT1GgaJpZM4RYscM\n.\n. OK, so I pulled AppComponent to it's own file:\n\n```js\n...\nconst WrappedApp = () =>\n  (\n\n\n\n\n\n)\nexport default hot(module)(WrappedApp)\n```\nAnd here is client/index.js:\n```js\nimport 'babel-polyfill'\nimport AppComponent from 'client/AppComponent'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Loadable from 'react-loadable';\nimport 'helpers/ArrayHelper'\nconst rootEl = document.getElementById('content')\nLoadable.preloadReady().then(() => {\n  ReactDOM.hydrate(, rootEl)\n})\n```\nNow, I get this error:\n```\n[HMR] bundle rebuilt in 5273ms\nprocess-update.js?e13e:41 [HMR] Checking for updates on the server...\nwarning.js?0c47:10 The previous state received by the reducer has unexpected type of \"Null\". Expected argument to be an object with the following keys: \"accessBehavior\", \"auth\", \"authorProfiles\", \"avatar\", \"channel\", \"channelGroups\", \"channelSettings\", \"channelUsers\", \"config\", \"conversation\", \"conversationModeration\", \"conversationStream\", \"conversationSummaries\", \"createConversation\", \"createMessage\", \"directMessages\", \"editMessage\", \"editStory\", \"findUsers\", \"log\", \"media\", \"membershipDefinitions\", \"messageModeration\", \"messageReaction\", \"messageReviewList\", \"messageSearch\", \"navigation\", \"notifications\", \"roomSettings\", \"streamSort\", \"time\", \"userAccountActions\", \"userEvents\", \"userModeration\", \"userModerationHistory\", \"userProfile\", \"userSettings\", \"userSuggestions\", \"userWelcome\"\nwarning @ warning.js?0c47:10\ncombination @ combineReducers.js?c79d:110\ncomputeNextEntry @ VM45220:2\nrecomputeStates @ VM45220:2\n(anonymous) @ VM45220:2\ndispatch @ createStore.js?6413:165\ncreateStore @ createStore.js?6413:240\n(anonymous) @ VM45220:3\n(anonymous) @ VM45220:3\n(anonymous) @ VM45220:2\n(anonymous) @ applyMiddleware.js?be0b:28\n(anonymous) @ VM45220:2\ncreateStore @ createStore.js?6413:51\ncreate @ create.js?32ee:31\n(anonymous) @ AppComponent.js?20a6:36\n(anonymous) @ 1555:218\n(anonymous) @ http://[::1]:3000/dist/main.js:8048\nwebpack_require @ http://[::1]:3000/dist/bootstrap.js:713\nhotApply @ http://[::1]:3000/dist/bootstrap.js:637\ncb @ process-update.js?e13e:66\n(anonymous) @ process-update.js?e13e:82\nPromise.then (async)\ncheck @ process-update.js?e13e:81\nmodule.exports @ process-update.js?e13e:42\nprocessMessage @ client.js?07e4:251\nhandleMessage @ client.js?07e4:131\nhandleMessage @ client.js?07e4:94\nprocess-update.js?e13e:114 [HMR] Updated modules:\nprocess-update.js?e13e:116 [HMR]  - ./src/components/ChannelBar/ChannelBar.js\nprocess-update.js?e13e:116 [HMR]  - ./src/containers/App/App.js\nprocess-update.js?e13e:116 [HMR]  - ./src/client/AppComponent.js\nprocess-update.js?e13e:116 [HMR]  - ./src/containers/index.js\nprocess-update.js?e13e:116 [HMR]  - ./src/routes.jsx\nprocess-update.js?e13e:116 [HMR]  - ./src/components/UserAccountActions/MaybeRenderActionModal.js\nprocess-update.js?e13e:116 [HMR]  - ./src/components/RoomBar/RoomBar.js\nprocess-update.js?e13e:116 [HMR]  - ./src/containers/Channel/Channel.js\nprocess-update.js?e13e:116 [HMR]  - ./src/containers/Channel/LoadableChannel.js\nprocess-update.js?e13e:121 [HMR] App is up to date.\nlogger.js?b2d4:29 React-hot-loader: fatal error caused by  \u0192 Router() {\n    var _temp, _this, _ret;\n_classCallCheck(this, Router);\n\nfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n  args[_key] = arguments[_ke\u2026  - no instrumentation found.  Please require react-hot-loader before React. More in troubleshooting.\n\nerror @ logger.js?b2d4:29\nflow.forEach @ hotReplacementRender.js?845e:199\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nexports.default @ hotReplacementRender.js?845e:226\ncomponentWillReceiveProps @ AppContainer.dev.js?ce78:47\ncallComponentWillReceiveProps @ react-dom.development.js?cada:6389\nupdateClassInstance @ react-dom.development.js?cada:6575\nupdateClassComponent @ react-dom.development.js?cada:7848\nbeginWork @ react-dom.development.js?cada:8225\nperformUnitOfWork @ react-dom.development.js?cada:10224\nworkLoop @ react-dom.development.js?cada:10288\ncallCallback @ react-dom.development.js?cada:542\ninvokeGuardedCallbackDev @ react-dom.development.js?cada:581\ninvokeGuardedCallback @ react-dom.development.js?cada:438\nrenderRoot @ react-dom.development.js?cada:10366\nperformWorkOnRoot @ react-dom.development.js?cada:11014\nperformWork @ react-dom.development.js?cada:10967\nrequestWork @ react-dom.development.js?cada:10878\nscheduleWorkImpl @ react-dom.development.js?cada:10732\nscheduleWork @ react-dom.development.js?cada:10689\nenqueueForceUpdate @ react-dom.development.js?cada:6250\nComponent.forceUpdate @ react.development.js?99ee:255\ngetInstances.forEach.inst @ hot.dev.js?783d:32\nsetTimeout @ hot.dev.js?783d:32\nsetTimeout (async)\nupdateInstances @ hot.dev.js?783d:32\nsourceModule.hot.addStatusHandler.status @ hot.dev.js?783d:44\nhotSetStatus @ http://[::1]:3000/dist/bootstrap.js:232\nhotApply @ http://[::1]:3000/dist/bootstrap.js:581\ncb @ process-update.js?e13e:66\n(anonymous) @ process-update.js?e13e:82\nPromise.then (async)\ncheck @ process-update.js?e13e:81\nmodule.exports @ process-update.js?e13e:42\nprocessMessage @ client.js?07e4:251\nhandleMessage @ client.js?07e4:131\nhandleMessage @ client.js?07e4:94\nhotReplacementRender.js?845e:200 Uncaught Error: React-hot-loader: wrong configuration\n    at flow.forEach (hotReplacementRender.js?845e:200)\n    at Array.forEach ()\n    at hotReplacementRender (hotReplacementRender.js?845e:166)\n    at next (hotReplacementRender.js?845e:182)\n    at flow.forEach (hotReplacementRender.js?845e:204)\n    at Array.forEach ()\n    at hotReplacementRender (hotReplacementRender.js?845e:166)\n    at next (hotReplacementRender.js?845e:182)\n    at flow.forEach (hotReplacementRender.js?845e:204)\n    at Array.forEach ()\nflow.forEach @ hotReplacementRender.js?845e:200\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nnext @ hotReplacementRender.js?845e:182\nflow.forEach @ hotReplacementRender.js?845e:204\nhotReplacementRender @ hotReplacementRender.js?845e:166\nexports.default @ hotReplacementRender.js?845e:226\ncomponentWillReceiveProps @ AppContainer.dev.js?ce78:47\ncallComponentWillReceiveProps @ react-dom.development.js?cada:6389\nupdateClassInstance @ react-dom.development.js?cada:6575\nupdateClassComponent @ react-dom.development.js?cada:7848\nbeginWork @ react-dom.development.js?cada:8225\nperformUnitOfWork @ react-dom.development.js?cada:10224\nworkLoop @ react-dom.development.js?cada:10288\ncallCallback @ react-dom.development.js?cada:542\ninvokeGuardedCallbackDev @ react-dom.development.js?cada:581\ninvokeGuardedCallback @ react-dom.development.js?cada:438\nrenderRoot @ react-dom.development.js?cada:10366\nperformWorkOnRoot @ react-dom.development.js?cada:11014\nperformWork @ react-dom.development.js?cada:10967\nrequestWork @ react-dom.development.js?cada:10878\nscheduleWorkImpl @ react-dom.development.js?cada:10732\nscheduleWork @ react-dom.development.js?cada:10689\nenqueueForceUpdate @ react-dom.development.js?cada:6250\nComponent.forceUpdate @ react.development.js?99ee:255\ngetInstances.forEach.inst @ hot.dev.js?783d:32\nsetTimeout @ hot.dev.js?783d:32\nsetTimeout (async)\nupdateInstances @ hot.dev.js?783d:32\nsourceModule.hot.addStatusHandler.status @ hot.dev.js?783d:44\nhotSetStatus @ http://[::1]:3000/dist/bootstrap.js:232\nhotApply @ http://[::1]:3000/dist/bootstrap.js:581\ncb @ process-update.js?e13e:66\n(anonymous) @ process-update.js?e13e:82\nPromise.then (async)\ncheck @ process-update.js?e13e:81\nmodule.exports @ process-update.js?e13e:42\nprocessMessage @ client.js?07e4:251\nhandleMessage @ client.js?07e4:131\nhandleMessage @ client.js?07e4:94\nreact-dom.development.js?cada:9747 The above error occurred in the  component:\n    in AppContainer (created by HotExportedWrappedApp)\n    in HotExportedWrappedApp\nConsider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.\n```\nany ideas?. tried that, but still doesn't work:\n```js\nimport 'react-hot-loader'\nimport 'babel-polyfill'\nimport AppComponent from 'client/AppComponent'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Loadable from 'react-loadable';\nimport 'helpers/ArrayHelper'\nconst rootEl = document.getElementById('content')\nLoadable.preloadReady().then(() => {\n  ReactDOM.hydrate(, rootEl)\n})\n```\n:(. I think I may be seeing something similar.. should MyComponent be Hello in this example?. \ud83d\ude06. ",
    "taion": "Yeah \u2013 let me see if I can monkeypatch my way out of this. This is sort of a stupid edge case anyway. . This appears to work:\n```js\nimport Relay from 'react-relay/classic';\nif (DEV) {\n  const createRelayContainer = Relay.createContainer;\nRelay.createContainer = (...args) => {\n    const Container = createRelayContainer(...args);\n    Container.prototype.isReactComponent = {};\nreturn Container;\n\n};\n}\n```\nCan you reliably distinguish such constructors from normal functional components though? They seem to look much the same from the outside.. I amended the issue title. It turns out Relay Modern also uses this approach for its containers. Also, Relay Modern is not so easy to monkey-patch in the same way because of the way it does its exports.. Thanks!. This might well work, but I'm not totally sure it's correct. This is essentially using a new component instance for every render. It seems inefficient and the semantics aren't quite correct.\nIs there any way to figure out that these things aren't really functional components, and are instead just weird class components?. Alternatively, I'm not sure anybody other than Relay Classic uses this pattern, so you could just sniff for getFragment in isReactClass.. @theKashey \nDo you have code up for https://github.com/gaearon/react-hot-loader/pull/778#discussion_r160875826?\nI wonder if it'd be possible to use the same indeterminate trick here. In the functional case, return a function that returns the class if InitialComponent is functional.\nEasier to show with code than words.. Something like:\n```js\nlet ProxyComponent;\nif (isFunctionalComponent) {\n  ProxyComponent = (props, context) => {\n    // This will only get called for the initial mount.\n    const result = InitialComponent(props, context);\n    if (!React.isValidElement(result)) {\n      // This is something weird like a Relay container, where a non-class\n      // constructor returns a component instance. We can't proxy this, so just\n      // pass it through as-is.\n      return result;\n    }\nreturn proxyFunctionalComponent(InitialComponent);\n\n};\n}\n```. @theKashey \nDue to time zone difference I can't code this up right now, but I'll try something out tomorrow. I think ProxyComponent can use the same trick as in ContainerConstructor where it can be a function returns a component instance.\nAs in the sandbox I linked, for all intents and purposes, this behaves the same as if you used a class component in the first place. It just provides an extra hook to e.g. return a component instance in something like the Relay case.. @theKashey Can you clarify what you mean when you say \"functional components\" here? In the case here, there are no functional components involved. There are only stateful class components.. @theKashey I opened https://github.com/gaearon/react-hot-loader/pull/785 with an implementation of https://github.com/gaearon/react-hot-loader/pull/778#issuecomment-356845557. This is similar to the current implementation, but avoids the extra wrapper component instance in the indeterminate case. It comes at the cost of calling stateless functional components twice on the initial render, but the code is a lot simpler, and stateless functional components ought to be pure anyway.. I added the caching as described to avoid calling a functional component twice on the initial render. The tests now pass as-is, except the no-op call in the indeterminate component case is gone.. cc @ctrlplusb \nIs it impossible to patch react-tree-walker to handle this case? It seems like it'd be a pretty odd limitation of react-tree-walker to not work with Relay at all.. Async is hard \\:\nStill, these trees seem traversable. Just another branch to handle for functional components.. I'm still not sure this is a reasonable default, though. For example, if you look at npm, react-relay gets ~8x as many downloads a month as react-async-bootstrapper (88k v 11k).\nAs such, if this is working around a bug in react-async-bootstrapper anyway, then it probably shouldn't be the default behavior.. That's pretty reasonable.\nI guess the only other factor is that Relay is an official Facebook thing. I dunno. Good point on being able to catch and log on errors w/Relay though.. What happened?. This seemed like a pretty minimal diff, though. I was quibbling a bit regarding the default behavior, but this seemed like a pretty good and reasonable change.. RHL doesn't do anything without module.hot, which can't possibly be defined in Jest, right?\nI guess the alternative is to look for NODE_ENV as test?\nGiven the set of tools that this behavior has the potential to break, though, I guess I'm reluctantly moving toward the view that we Relay users should suffer the pain here \ud83d\ude14. @theKashey \nI'm back with more \"fun\" on weird React features used in Relay.\nRelay now does this: https://github.com/facebook/relay/commit/0573d773af1632dd70b03311cfc30c9b5eb4c0e6\nSo... we need to also lazily proxy over getDerivedStateFromProps. Sigh.. Sorry, tests forthcoming! Wanted to get the PR up to point people at what was happening.. Updated the test case to cover this.. Yup, this is the only change. I\u2019m not 100% sure that my use of transferStaticProps there is correct, but it\u2019s probably okay. At least, it fixes the problem I see. . I'm not sure this is right. I don't think we should e.g. be creating a new Relay component instance every time in render. And anyway this should use this as context as above.. This isn't right though. \\:\nConstructing a new instance of the component is unlikely to work in the general case.\nMaybe just throw an error here and tell the user to install their own monkeypatch per https://github.com/gaearon/react-hot-loader/issues/775#issuecomment-356508850?. I'm not sure this is right. Per https://github.com/facebook/react/blob/e6e393b9c5221bfb1a5ddcc7221c42e96ab3baca/packages/react-reconciler/src/ReactFiberBeginWork.js#L446-L450, the \"indeterminate component\" logic seems to only get run for the initial mount.\nThis logic will actually construct a new component instance on every render call, which doesn't seem like what we want.\nWe shouldn't be creating new class instances if we can help it at all.. I had to read this a few times to figure out what this was doing. It's not exactly wrapping this with a stateless functional component \u2013 it's more like rewrapAsIndeterminate.. Maybe the answer is to cache result in this case? It shouldn't invalidate, I don't think.. Are you sure about that? The snippet above has this check:\njs\n    invariant(\n      current === null,\n      'An indeterminate component should never have mounted. This error is ' +\n        'likely caused by a bug in React. Please file an issue.',\n    );\nSo I believe this logic only gets applied at initial mount?. This isn't a standard functional component, though. In this case, the return value is not a React element \u2013 it's a React component instance.\nAs such, it goes through that \"indeterminate\" code path, and React realizes that this is actually a class component.. @theKashey \nTake a look at this CodeSandbox: https://codesandbox.io/s/6wz0or0rqk\nThis is not exactly a stateless functional component. It gets resolved as a normal class-based component.\nIn the first set of commands, if you look at the console output, you'll see FooConstructor is only called once, while Foo.render is called 3 times. If you look at https://6wz0or0rqk.codesandbox.io/ with React Dev Tools, you'll see that a single FooConstructor component gets mounted, and it is a full-fledged class component with state and everything.\nBy contrast, if you uncomment out the render calls with the proxy, you'll see that:\n- The component tree is different\n- FooConstructor gets called 3 times instead of just 1 time\nSo it's not the same. But in both these cases, no stateless functional components are getting rendered.. i.e.\n\nFor\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nclass Foo extends React.Component {\n  constructor(props, context) {\n    super(props, context);\nthis.state = {\n  foo: 'bar',\n};\n\n}\nrender() {\n    console.log('foo');\n    return foo;\n  }\n}\nfunction FooConstructor(props, context) {\n  console.log('foo constructor');\n  return new Foo(props, context);\n}\nReactDOM.render(, document.getElementById('root'));\nReactDOM.render(, document.getElementById('root'));\nReactDOM.render(, document.getElementById('root'));\n```\nThere are no stateless functional components involved here.. I'm not sure if this check was related to the indeterminate component handling, or if it was there for some other reason. Tests seem to pass without it.. As noted, we end up calling functional components twice now. We could cache the initial result if you want, though.. Technically we could use the older ways of proxying this here. Maybe this should be a FIXME or a TODO. I've never seen this pattern get used outside of Relay, and you can't really hot-reload Relay containers in a useful way anyway, because the queries are static.. yeah... it's just a laziness thing. i think one of the old versions of RHL had a proxy strategy that worked on instances (maybe?), but it's not really worth it since relay queries are static anyway, and nobody else uses this pattern. I believe it\u2019s because Relay containers are relatively expensive to create, and idiomatic Relay code puts a container around nearly every component. Given that, my guess is that it\u2019s an optimization to improve startup time. \nI think that\u2019s also why nobody else uses this pattern, and why we don\u2019t really have to worry about it. Unless you\u2019re building static container classes everywhere, there\u2019s no point to using it. . A container class around every component class, I mean. In Relay, nearly every component is a smart component, sort of. . Note that this is against the indeterminateComponent feature branch, not next.\nUntil this gets released, you can still use this monkeypatch, though you'd need to do a bit more complicated stuff with modules for modern/compat than for classic/legacy: https://github.com/gaearon/react-hot-loader/issues/775#issuecomment-356508850.. You may need to do an explicit hasOwnProperty check here. Imagine if the functional component returns null or something \u2013 then this check will fail. That's why I had the explicit hasInitialResult earlier.. Sorry, I may not have explained correctly in the comments. This code path only gets hit for normal functional components. When the proxies component actually returns a React instance, we don\u2019t hit this code path. The initial result is instead the initial return value from a normal functional component. . See https://github.com/gaearon/react-hot-loader/commit/f27db13ffbfd8f2ab753b94a6384a2b21ca55146. This affected the test results for SFCs. . I can PR a fix and add a regression test.. This is a slightly clearer name, I think, since it's what we're actually checking for here.. I hope this is correct. Otherwise we should change this to use safeDefineProperty as well.. This test looks silly, but it does in fact catch the regression.. ",
    "aminland": "@taion can you try this: #776 \nMy issue was an error being thrown on Relay Modern, not classic. I spent the better part of the last 6 hours trying to figure out wtf was going on lol... I'm think the same hack might fix both though...\n  . So I think this is actually the right way to do it. See here: https://github.com/facebook/react/blob/e6e393b9c5221bfb1a5ddcc7221c42e96ab3baca/packages/react-reconciler/src/ReactFiberBeginWork.js#L476-L487\nYou can see that the reason you can mount simple functions that return component classes and not actual elements, is because if there is no Component.prototype.isReactClass set, React will first call it, then check if it just an object with a render func, in which case it will proceed with the regular lifecycle.\nSince we're wrapping all non-compontents as components, any component factories that normally work in react will proceed to break, since react will no-longer check for the render method... Let me know if that makes sense.... Didn't notice someone made an issue for this already (#775 ). Did you try it by using actual react states? i.e. is this a MobX specific issue?. Random question: why can't we just wrap functional components separately (not as a react component), and then only create a proxy for it's results if it generates a valid react component? \nIf it's returning an element or anything else we don't really need to care. This would also be much simpler, and probably add less overhead.... +1 on that last point keeping functions as functions, probably the only way that will work in most cases (save for a function storing state in its scope or at module level). See this sandbox: https://codesandbox.io/s/jl3267871y. Can this be merged and released then?. ",
    "michaeltrim": "So the store is getting recreated as per your suggestion for checking this. The store is created in index.js which is the entry point for the webpack-dev-server - is this correct? I think I'm missing something obvious in how this should be configured. My App component is marked for hot-reload export default hot(module)(App)- the App component is the container wraps the routes\n<App>\n    <Switch>\n      <Route path=\"/home\" component={HomePage} />\n        ...\n    </Switch>\n  </App>\nTo confirm I am getting a full page reload when any file is changed. ",
    "anthonator": "This sounds similar to what I'm seeing as well.\nHere's what I've got:\ncreateStore.js\n```js\nimport { applyMiddleware, createStore } from 'redux';\nimport withDevTools from './withDevTools';\nimport middleware from '../../redux/middleware';\nimport rootReducer from '../../redux';\nexport default function (state = {}) {\n  let enhancer = applyMiddleware(...middleware);\nenhancer = withDevTools(enhancer);\nconst store = createStore(rootReducer, state, enhancer);\nif (module.hot) {\n    module.hot.accept('../../redux/index', () => {\n      const nextReducer = require('../../redux/index').default; // eslint-disable-line global-require\n  store.replaceReducer(nextReducer);\n});\n\n}\nreturn store;\n}\n```\nindex.jsx (entry point)\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Root from './Root';\nrender(, document.getElementById('root'));\n```\nRoot.jsx\n```js\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nimport createStore from './lib/redux/createStore';\n// components\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nconst store = createStore();\nfunction Root() {\n  return (\n    \n\n\n  );\n}\nexport default hot(module)(Root);\n```\nApp.jsx\n```js\nimport React from 'react';\nexport default function () {\n  return (\n    Hello, world!!!!!!!\n  );\n}\n```\nAs you can see, it's very simple. Whenever I update App.jsx my store resets and I see the following warning:\nwarning.js:10 <Provider> does not support changing `store` on the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically. See https://github.com/reactjs/react-redux/releases/tag/v2.0.0 for the migration instructions.. Using react-hot-loader-4.0.0-beta.21. @theKashey thanks! \u2764\ufe0f . (\u256f\u00b0\u0414\u00b0\uff09\u256f\ufe35\u253b\u2501\u253b. ",
    "thiagodebastos": "@theKashey am I required to export every module that I want hot-reloaded this way?\nexport default hot(module)(App);\nI never had to do this before, everything worked fine using the usual <AppContainer> method. Has something changed in the beta?\n. Thanks for the quick response, I appreciate it. That makes sense! I've got it sorted now :) . ",
    "panuta": "@theKashey I'm experiencing the same problem with @anthonator, Can you please elaborate more when you said \"don't re-create store\" and what's the right way doing it?. ",
    "redroot": "@theKashey thanks for replying, I added that module and the first line of the warning becomes Ignored an update to unaccepted module ./src/app/redux/modules/products.ts -> ./src/app/redux/sagas.ts -> ./src/client.tsx -> 0\nThe strange is this works is the exact same setup in another project but without Typescript, I can't work out how to find out why that file is unaccepted. Ah interesting, both sagas.ts and reducers.ts import products.ts, so because sagas.ts is missing, it's not working ... I'll investigate that. Closing as the above didn't work either and I can't prove it is RHL. ",
    "swASO": "yes, can reproduce it with react states. ups! changed it but can still reproduce it . sure \nconfigs.zip\n. \n\n\n. ",
    "seanlarge": "Hi, I'm using react hot loader v4.2.0 and I have this issue. basically, I'm on a given route, hot reloader refreshes the page and all the state is gone. component crashes...any workarounds? thanks! . ",
    "aaronjensen": "Maybe I was doing it wrong, but the setup I had from RHL3 didn't work. I was doing this in my src/index:\n```js\n// @flow\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport Redbox from 'redbox-react'\nimport { getRoot } from '@@common'\nimport App from '@@app-ui/components/App'\nimport type { Config } from '@@app-ui/config'\nconst CustomErrorReporter = ({ error }) => \nconst render = (Component, config: Config) => {\n  ReactDOM.render(\n    \n\n,\n    getRoot(),\n  )\n}\nlet storedConfig: void | Config\nexport const startApp = (config: Config) => {\n  storedConfig = config\n  render(App, config)\n}\nif (module.hot) {\n  module.hot.accept('@@app-ui/components/App', () => {\n    if (storedConfig) {\n      render(App, storedConfig)\n    }\n  })\n}\nexport default startApp\n```\nIt'd be handy if there was a way to pass the errorReporter into the hot higher order component. RedBox works, but react-hot-loader does not. It doesn't refresh the page, but it blows away the render tree\n. Sorry, to be clear by \"blows away the render tree\" what I meant was that it rerenders from scratch, scrapping any previous state. I'll see if I can put a repro together, though after trying w/ the webpack-modern example I couldn't reproduce what I'm seeing so I'll try and debug a little further on my repo first.. I've got @hot-loader/react-dom installed and aliased and the config set up, but I get this when a hot load happens:\n```\nwarning @ browser.js?e834:49\nrouterWarning @ routerWarning.js?437b:21\nRouter_componentWillReceiveProps @ Router.js?9ebe:113\ncallComponentWillReceiveProps @ index.dev.js?2e06:12678\nupdateClassInstance @ index.dev.js?2e06:12888\nupdateClassComponent @ index.dev.js?2e06:14379\nbeginWork @ index.dev.js?2e06:15203\nperformUnitOfWork @ index.dev.js?2e06:17941\nworkLoop @ index.dev.js?2e06:17981\nrenderRoot @ index.dev.js?2e06:18067\nperformWorkOnRoot @ index.dev.js?2e06:18958\nperformWork @ index.dev.js?2e06:18870\nperformSyncWork @ index.dev.js?2e06:18844\nrequestWork @ index.dev.js?2e06:18713\nscheduleWork @ index.dev.js?2e06:18522\nenqueueForceUpdate @ index.dev.js?2e06:12466\nComponent.forceUpdate @ react.development.js?72d0:390\n(anonymous) @ react-hot-loader.development.js?c2cb:1942\n(anonymous) @ react-hot-loader.development.js?c2cb:1941\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js?c2cb:1935\n(anonymous) @ react-hot-loader.development.js?c2cb:1957\nhotSetStatus @ customer.js:248\nhotApply @ customer.js:630\ncb @ process-update.js?e135:66\n(anonymous) @ process-update.js?e135:82\nPromise.then (async)\ncheck @ process-update.js?e135:81\nmodule.exports @ process-update.js?e135:42\nprocessMessage @ client.js?fec9:268\nhandleMessage @ client.js?fec9:136\nhandleMessage @ client.js?fec9:99\n15:02:50.533 index.dev.js?2e06:18812 Uncaught TypeError: scheduler.unstable_shouldYield is not a function\n    at shouldYieldToRenderer (index.dev.js?2e06:18812)\n    at performAsyncWork (index.dev.js?2e06:18821)\n    at flushFirstCallback (scheduler.development.js?3069:128)\n    at flushWork (scheduler.development.js?3069:230)\n    at idleTick (scheduler.development.js?3069:569)\n```\nAny hints?. @theKashey thank you, I had an extra scheduler due to react-test-renderer and two versions of react (thanks to an older package incorrectly making react a dependency). Also, if you're using enzyme, you may need to add this to your package.json (assuming yarn):\n\"resolutions\": {\n    \"react-test-renderer\": \"^16.7.0-alpha.2\"\n  }\nOtherwise you could end up with two versions of react-test-renderer which could leave you with two versions of scheduler.\nI no longer get the error, but hot reloading does not work. I see the modules update in the console, but React does not rerender.\nTo confirm:\n\nI am not using the babel plugin\nI am using @hot-loader/react\n\nThis is my setConfig:\n    ```\n    import { setConfig } from 'react-hot-loader'\n    import ReactDOM from 'react-dom'\nsetConfig({\n  ignoreSFC: !!ReactDOM.setHotElementComparator,\n  pureSFC: true,\n  pureRender: true,\n})\n```\n4.ReactDOM.setHotElementComparatoris defined\n5.hot(module)(...)` wraps a class component\n\n\nIs there anything I'm missing or wrong? I'm sorry if it's something obvious I missed...\nedit\nIf I add the babel plugin back in, it works, but I often get a \"cold component ... has been updated\" error. Maybe I misunderstood this thread.... FYI, aliasing react-dom to @hot-loader/react-dom appears to break React Router v3, at least for us.. > @aaronjensen - could you shed some light? What(How?) is broken?\n@theKashey sorry, I haven't had a chance to dig into it yet. Some of the routes were not working at all. Some did, others didn't. The url would change, but the router would not render the appropriate page.\nI'll try and debug a little soon. AFAICT, this is the minimum repro for the problem:\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router, Route, Link, browserHistory } from 'react-router'\nconst PageA = () => (\n  \n    Page A toggle\n  \n)\nconst PageB = () => (\n  \n    Page B toggle\n  \n)\nconst Routes = () => (\n  \n\n\n\n)\nReactDOM.render(, document.getElementById('app'))\n```\nVisit /page-a then click the toggle link. That will take you to /page-b which will render. Click toggle again and it will change the location, but not the content.\nIf the alias @hot-loader/react-dom alias is commented out, it works as expected and you can toggle between both back and forth.. @theKashey thank you. I was able to get it to work, though I had to replace react-loadable with React.lazy as I had the same problem w/ components created via react-loadable.\nFor anyone who is in a similar situation, it doesn't seem like React.lazy works w/ react-router 3, so I did this:\n```ts\nimport * as React from 'react'\n// React router v3 does not appear to support React.lazy components directly, so\n// we wrap them in another component.\nconst load = (loader: () => Promise) => {\n  const Component = React.lazy(loader)\n  return (props: any) => \n}\nexport default load\n```. > \"The same problem\" - one component rendered instead on another?\nYes, that's correct afaict. I haven't tried to create a minimum repro, but I'd guess separating page a and b into separate modules and using react-loadable above would do so.\nThis was what my load function looked like:\n```ts\nimport * as React from 'react'\nimport IconLoading from 'components/icons/loading'\nimport Loadable from 'react-loadable'\nconst load = (loader: () => Promise) =>\n  Loadable({\n    loader,\n    // eslint-disable-next-line react/prop-types\n    loading: ({ pastDelay }) => (pastDelay ?  : null),\n    delay: 300,\n  })\nexport default load\n```\nThen I'd do something like:\nconst PageA = load(() => import('./pagea.js'))\nIf that's not enough, please let me know and I'll see if I can come up w/ a repro.\nThanks!\n. ",
    "TheAifam5": "So I wrote also my own \"RedBox\" and after update to the new version, does not work anymore.\nAlso I set the RHL log level to debug but that does not help (no info).\nEDIT:\nNevermind, Works everything.\nThe problem was in Webpack configuration.\nI forgot to add \"HotModuleReplacementPlugin\" (i removed it because wanted to configure everything from scratch).\nSo @aaronjensen , please check your webpack configuration :D\n\nEDIT 2:\nI seen that problem with ts-loader, that does not refresh the page or anything after adding error in code. So I moved again to the ATS and now works like should be.\n. ",
    "kkomaz": "Thank you I must've been following an old tutorial and didn't wrap with the AppContainer.  Works fine now.  Closing.. ",
    "benbayard": "Hey @theKashey what do you mean ie set the target for env preset.?\nWe are using transform-class-properties, which I believe is doing the additional transformation this isn't expecting. . Also, that code looks to work, so yay!. Thanks! After updating to the newest build, our problem has also been fixed so I am going to close. Thank you @theKashey \ud83d\udc4d . ",
    "opr": "Hi there I am also having this issue, I have checked dead code elimination is working\nProof is here:\nsee line 13 of https://github.com/opr/spooky/blob/281f9962b4b19b29fae1dca5dc45212e56e78fa8/assets/js/modules/index.js\nand see this (not uglified) https://github.com/opr/spooky/blob/281f9962b4b19b29fae1dca5dc45212e56e78fa8/assets/js/dist/spooky.js\nand also see this (uglified) https://github.com/opr/spooky/blob/281f9962b4b19b29fae1dca5dc45212e56e78fa8/assets/js/dist/spooky.min.js\nfor evidence of dead code elimination working.\nHere is my webpack.config\nhttps://github.com/opr/spooky/blob/281f9962b4b19b29fae1dca5dc45212e56e78fa8/webpack.production.config.js\nThanks!. Hi @theKashey thanks for your response\nI made the change you suggested to the webpack.DefinePlugin.\nhttps://github.com/opr/spooky/blob/109ccb46ee3a316be471b0cc68acb4c9cfb1423a/webpack.production.config.js\nI looked inside the uglified bundle and could not find that string - this is the uglified bundle again for reference: https://github.com/opr/spooky/blob/109ccb46ee3a316be471b0cc68acb4c9cfb1423a/assets/js/dist/spooky.min.js\nIf you observe line 11 here:\nhttps://github.com/opr/spooky/blob/109ccb46ee3a316be471b0cc68acb4c9cfb1423a/assets/js/react/TestInput/TestInput.jsx\nyou will see I have tested the environment is being set correctly. Inside the uglified bundle I can still see paths and I can also see my \"BANANAS\" test.\n(Please don't worry about the non-uglified bundle as I am not using the DefinePlugin there)\nI hope this provides more information.. I have discovered that my problem was the same as https://github.com/gaearon/react-hot-loader/issues/602#issuecomment-315251323\nThank you for the help and apologies for missing this!\n(PS what do you mean that I have 2 versions of react?). ",
    "Sakots2499": "Only. #995. #953. 2018-07-14T19:27:18.684Z] [info] Bitcoin.com Wallet v4.12.2 #bc326e8. gotoon. [HMR] unexpected require(./src/generated/AppQuery.graphql.js) from disposed module ./src/App.js #1032. ",
    "M7Dev": "I can confirm that what @theKashey 's saying resolves the issue. Setting --env.mode itself won't do the trick and you have to set the webpack.DefinePlugin (env) to production. \n```javascript\n// Npm script\n\"webpack --env.mode production\"\n// Webpack config\nmodule.exports = (env) => {}\n// In Webpack config plugins\nnew webpack.DefinePlugin({\n  'process.env.NODE_ENV': JSON.stringify(env.mode),\n}),\n```\nIt seems that process.env.NODE_ENV must be set exactly like it's typed, as process.env won't suffice. Also important that the env.mode is stringifyed.\nThanks @theKashey.. ",
    "rflmyk": "I'm have the same problem, I try use workaround @M7Dev but... dont work for me, i'm using:\n...\n    \"webpack\": \"4.26.0\",\n    \"webpack-dev-server\": \"^3.1.10\",\n    \"react-hot-loader\": \"^4.3.12\"\nSomeone has a workaround or fix for that?\n. Just it, work for me, but I using a solution a litle diferent, take a look:\non my webpack.config.js I have \nconst IS_DEV = (argv.mode === 'development');\nto check mode.\nI create a:\n```\n        ...\n    const BABEL_PLUGINS = [\n        'lodash',\n        '@babel/plugin-syntax-dynamic-import',\n        '@babel/plugin-transform-react-jsx',\n        'transform-class-properties',\n        '@babel/plugin-proposal-object-rest-spread',\n        '@babel/plugin-transform-runtime',\n        '@babel/plugin-syntax-async-generators',\n        '@babel/plugin-transform-regenerator',\n    ];\nIS_DEV && BABEL_PLUGINS.push('react-hot-loader/babel');\n    ...\n\n```\nAnd below I do it:\n...\n        {\n            loader: 'babel-loader',\n            options: {\n                compact: true,\n                presets: [\n                    '@babel/preset-env',\n                    '@babel/preset-react'\n                ],\n                plugins: BABEL_PLUGINS\n            }\n        }\n      ....\nNow work very well ;) tnks @davincho . Same when I import hot before react this error happen. There are a clear documentation about that?\nFor example:\nimport { hot } from 'react-hot-loader'\n import React, { Component  } from 'react'\nA important details is that I using Redux too.. Cool, but do you can see a work around for while?. ",
    "davincho": "My issue was that https://github.com/gaearon/react-hot-loader/blob/master/babel.js was using the dev version even when building for production.\nSo it was not about setting up webpack.DefinePlugin correctly, but making sure babel is aware as well, like NODE_ENV=production webpack --config webpack.prod.js. ",
    "timneutkens": "\ud83d\udcaf thanks!. This still happens when using Next.js: https://github.com/zeit/next.js/issues/4299\nThe latest version of react-hot-loader does fix the error when using Fragments though. . @thekashey seems like there\u2019s still an issue where the component gets remounted after componentdidupdate and returning null in render. Do you have any idea how to fix that? I\u2019m checking it out myself too, but you\u2019re definitely more known with the codebase. Another solution to the problem we're having with styles-jsx is to remove the extra componentWillUpdate. > Meanwhile - could you double check that\nSince:\nif (isReactClass(instance) && instance.componentWillUpdate) {\n        // Force-refresh component (bypass redux renderedComponent)\n        instance.componentWillUpdate(nextProps, instance.state)\n      }\nis still called the result is the same. The code is located here: https://github.com/zeit/styled-jsx/blob/master/src/style.js#L26-L28. Awesome @theKashey \ud83c\udfc6 \u2764\ufe0f \n\nprobably we should call this method with unchanged props\n\nYeah so this is what was done before (in rhl 3 / 4.0.0/4.0.1), I'll check your branch \ud83d\udc4d .  #968 fixes this issue.. Verified that this solves the issue we were seeing. Thanks @theKashey \ud83d\ude4f . Thank you very much @theKashey \ud83d\udc4d\ud83d\ude4c Waiting on this to release Next.js 6.0.1 \ud83d\ude4f . Sounds very similar to #928. I wonder if there's a better way to do this. cc @hzoo @loganfsmyth\n. Specifically @theKashey has to keep adding this https://github.com/gaearon/react-hot-loader/blob/8a6f69d8c32ce588bf0f84d676134800540f5c5e/src/proxy/inject.js#L146-L156. Solves the issue we had.. ",
    "bmathews": "Found a related comment: https://github.com/gaearon/react-hot-loader/issues/794#issuecomment-357669768\nFeel free to close this if you'd like to track it there. . Thanks! \nFor anyone following, I believe you have to manually add/pin \"react-stand-in\": \"4.0.0-beta.13\" in your package.json, otherwise even react-hot-loader@4.0.0-beta.13 will still get beta.14 of react-stand-in, which is where this issue comes from. . ",
    "insin": "Nice, thank you!. It works beautifully, thanks: I can now externalise all the react-hot-loader config I need, so I don't  need to install development-only dependencies in my app, or runtime dependencies in my development config \ud83d\udc4d . No, I use react-hot-loader-loader to add the hot call to the main app module only when serving the app in development mode. \nThe react-hot-loader dependency is managed by nwb, so with this change in place I can now point to the absolute path to the react-hot-loader/babel plugin and alias react-hot-loader in my Webpack config so the generated code can resolve it: https://github.com/insin/nwb/blob/58ab23b8a30d0f3d5f870ba2d78436b4c0e8f226/src/react/index.js#L114-L139. One weird thing I've noticed is that if I create a runtime error in a component's render() method the error boundary doesn't handle it during HMR patching, but it does if I refresh the page to render from scratch.\nImmediately after adding {nonexistent.object} to the render() method of a simple App component in src/App.js, which is exporting hot(module)(App):\n\nAfter refreshing the page, the error boundary works and my configured errorReporter is rendered:\n\n. If errorReporter is going away and the user has to provide their own error boundary, how will they know when to clear the error after it's been fixed when HMR is performed? It looks like AppContainer is currently doing some work with react-hot-loader internals to manage that.. ",
    "launchriot": "I guess my issue is that \nimport App from \"./containers/App\" results in an error because ./containers/App is a scala file which is not the same syntax as JS. Is there a way to run module.hot.accept using (in my example) <MyApp/>? What is the App container needed for?. I guess I could just run it as \nif (module.hot) {\n      module.hot.accept();\n    }\n. What do you mean by \"Usually you can't just accept the change\"?\nIt is a foo.scala.html file, but within the file there is scala syntax, like\n```\n@()(implicit foo: Foo, bar: Bar)\n@main(Foo(\"home.title\")) {\n    \n}\n```\nand it thrown a syntax error, but I can't make changes to this file.\n(Thanks for your time/help.). ",
    "xiaoouLi": "@theKashey thank you for your answer. \nI already configured react-hot-loader in webpack.config.js, like this:\n```js\nconst webpack = require('webpack');\nconst path = require('path');\nconst config = {\n  entry: [\n    'webpack-dev-server/client?http://localhost:8080', // \u662f\u4e0d\u662f\u53ef\u4ee5\u53bb\u6389server\n    // 'webpack/hot/dev-server',\n    'react-hot-loader/patch',\n    './app/src/js/main.js'\n  ],\n  devServer: {\n      hotOnly: true\n  },\n  devtool: 'source-map',\n  module: {\n    loaders: [{\n      test: /.jsx?$/,\n      exclude: /(node_module|bower_components)/,\n      loader: 'babel-loader',\n      query: {\n        presets: ['react', 'es2015', 'stage-0'],\n        // presets: ['react', 'es2015', 'stage-0', 'react-hmre'],\n        plugins: ['transform-decorators-legacy', 'react-hot-loader/babel'],\n      },\n    },\n    {\n      test: /.css$/, // Only .css files\n      loader: 'style-loader!css-loader?modules&localIdentName=[name]---[local]---[hash:base64:5]', // Run both loaders\n    },\n    {\n      test: /.(png|svg)(\\?v=[0-9].[0-9].[0-9])?$/,\n      loader: 'url-loader',\n    }],\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production'),\n      },\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n  ],\n  output: {\n    filename: './prod/reactapp.js',\n    publicPath: '/', // why\n},\n};\nmodule.exports = config;\n```\nWhile it's still not working. \nI tried with react-transform-hmr before which worked without triggering component unmounted, but I saw react-transform-hmr is deprecated so that I'm replacing it with react-hot-loader now...\nIs there anything wrong in the webpack.config.js?\nThanks!!!\n. @theKashey Still doesn't work.\nI guess it's probably wrong with this part:\n```js\nconst\n  middleware = applyMiddleware(thunk),\n  store = createStore(reducer, middleware),\n  render = (DialogComponent, RouterComponent) => {\n    ReactDOM.render(\n      \n\n\n\n    </div>\n    </AppContainer>\n  </Provider>\n, document.getElementById('reactapp-content'));\n\n};\nslc.react = function () {\n  render(DialogComponent, RouterComponent);\n};\nif(module.hot) {\n  module.hot.accept('./RouterComponent', function() {\n    const newRouterComponent = require('./RouterComponent').default;\n    const newDialogComponent = require('./DialogComponent').default;\n    render(newDialogComponent, newRouterComponent);\n  });\n  module.hot.accept('./DialogComponent', function() {\n    const newRouterComponent = require('./RouterComponent').default;\n    const newDialogComponent = require('./DialogComponent').default;\n    const Runinfo = require('./common/components/runInfo/RunInfo').default;\n    render(newDialogComponent, newRouterComponent);\n  });\n}\n```\nIs it because I'm re-rendering a composite component so that the element.type is the object the component?\nBig THANKS :dancing_men: . Ignore the part above if(module.hot)...Have no idea why the format got weird.... It's \"DialogComponent\" which is the updated one.. The thing is on the current page only DialogComponent is rendered. Then I updated a file which is a child component of DialogComponent. \nI add module.hot.accept handler in my main.js file to catch all updates and then re-render the two components that can have updates.\nI guess there is something to do with re-rendering DialogComponent in the hot.accept handler\n. Yeah, it's still the component class itself instead of a proxy. (I compared it with the result of react-transform-hmr, and then I know what you mean by \"proxyComponent\").\nhmm... I think there is something wrong with my config file, cause react-proxy package is not loaded at all which is loaded for the case of react-transform-hmr. . BTW, there is no react-proxy dependency for version 4. I downgraded RHL back to 3 again. . OK, problem solved. \nVery stupid issue: My webpack is under production env...That's why HMR is disabled!!! \nThanks @theKashey for your great help!!!. ",
    "eXaminator": "Was this error somehow reintroduced? I'm seeing this exact behaviour and error with 4.3.2. All I did was exactly what is documented in the readme. It's a big application with a small (lazy loaded) react part, so it might be something in my general setup. But it is strange that it works on the first change but mot the second.. I'm on a trip right now, so I'll check once I'm back at work in about a\nweek!\nmeds notifications@github.com schrieb am Fr., 15. Juni 2018, 08:21:\n\n@eXaminator https://github.com/eXaminator I am having the problem too!\nMy app is much more simple, I followed the documentation and every second\ncomponent change I get a fullscreen reload..\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/820#issuecomment-397535871,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACoY_ObsZGt1WhH1_KaNE3zbo4f-CE4-ks5t82BIgaJpZM4Rsqru\n.\n. \n",
    "meds": "@eXaminator I am having the problem too! My app is much more simple, I followed the documentation and every second component change I get a fullscreen reload..\nI tried installing 4.0.0-beta.18 to see if it would help but no luck...\nMy console when doing a successful hot reload::\n\nlogger.js:30 React-stand-in:, Non-controlled class Connect(Home) contains a new native or bound function  setWrappedInstance \u0192 setWrappedInstance(ref) {\n        this.wrappedInstance = ref;\n      } . Unable to reproduce\nwarn @ logger.js:30\n(anonymous) @ inject.js:52\nmergeComponents @ inject.js:39\nupdate @ createClassProxy.js:226\nupdateProxyById @ proxies.js:57\nregister @ reactHotLoader.js:26\n(anonymous) @ index.tsx:37\n(anonymous) @ index.tsx:37\n./src/pages/Home/index.tsx @ index.tsx:37\nwebpack_require @ bootstrap 51541fad94f0e298afc9:678\nfn @ bootstrap 51541fad94f0e298afc9:88\n(anonymous) @ App.css?ec41:26\n./src/App.tsx @ App.tsx:31\nwebpack_require @ bootstrap 51541fad94f0e298afc9:678\nhotApply @ bootstrap 51541fad94f0e298afc9:607\n(anonymous) @ bootstrap 51541fad94f0e298afc9:289\nPromise.then (async)\nhotUpdateDownloaded @ bootstrap 51541fad94f0e298afc9:288\nhotAddUpdateChunk @ bootstrap 51541fad94f0e298afc9:265\nwebpackHotUpdateCallback @ bootstrap 51541fad94f0e298afc9:7\n(anonymous) @ 0.51541fad94f0e298afc9.hot-update.js:1\nlogger.js:30 React-stand-in: Updated class  Connect(Home) contains native or bound function  notifyNestedSubs \u0192 notifyNestedSubs() {\n    this.listeners.notify();\n  } . Unable to reproduce, use arrow functions instead. (arity: 0/0, proto: no\nwarn @ logger.js:30\n(anonymous) @ inject.js:55\nmergeComponents @ inject.js:39\nupdate @ createClassProxy.js:226\nupdateProxyById @ proxies.js:57\nregister @ reactHotLoader.js:26\n(anonymous) @ index.tsx:37\n(anonymous) @ index.tsx:37\n./src/pages/Home/index.tsx @ index.tsx:37\nwebpack_require @ bootstrap 51541fad94f0e298afc9:678\nfn @ bootstrap 51541fad94f0e298afc9:88\n(anonymous) @ App.css?ec41:26\n./src/App.tsx @ App.tsx:31\nwebpack_require @ bootstrap 51541fad94f0e298afc9:678\nhotApply @ bootstrap 51541fad94f0e298afc9:607\n(anonymous) @ bootstrap 51541fad94f0e298afc9:289\nPromise.then (async)\nhotUpdateDownloaded @ bootstrap 51541fad94f0e298afc9:288\nhotAddUpdateChunk @ bootstrap 51541fad94f0e298afc9:265\nwebpackHotUpdateCallback @ bootstrap 51541fad94f0e298afc9:7\n(anonymous) @ 0.51541fad94f0e298afc9.hot-update.js:1\n\nand when doing an unsuccessful one:\n\nindex.cjs.js:125 \nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\nFor the module builds, these are available in the following manner\n(replace  with the name of a component - i.e. auth, database, etc):\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/');\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/';\n./node_modules/firebase/dist/index.cjs.js @ index.cjs.js:125\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n(anonymous) @ reducer.ts:63\n./src/redux/sagas.ts @ sagas.ts:59\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n(anonymous) @ sagas.ts:59\n./src/redux/store.ts @ store.ts:18\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n(anonymous) @ App.css?ec41:26\n./src/App.tsx @ App.tsx:31\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n./src/index.tsx @ index.tsx:1\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n0 @ request.ts:54\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\nindex.js:2178 Warning: Unsafe legacy lifecycles will not be called for components using new component APIs.\nModal uses getDerivedStateFromProps() but also contains the following legacy lifecycles:\n  componentWillReceiveProps\n  componentWillUpdate\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks\nstack_frame_overlay_proxy_console @ index.js:2178\nprintWarning @ warning.js:33\nwarning @ warning.js:57\nconstructClassInstance @ react-dom.development.js:11373\nupdateClassComponent @ react-dom.development.js:13036\nbeginWork @ react-dom.development.js:13715\nperformUnitOfWork @ react-dom.development.js:15741\nworkLoop @ react-dom.development.js:15780\nrenderRoot @ react-dom.development.js:15820\nperformWorkOnRoot @ react-dom.development.js:16437\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nscheduleRootUpdate @ react-dom.development.js:16663\nupdateContainerAtExpirationTime @ react-dom.development.js:16690\nupdateContainer @ react-dom.development.js:16717\n./node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render @ react-dom.development.js:17000\n(anonymous) @ react-dom.development.js:17140\nunbatchedUpdates @ react-dom.development.js:16557\nlegacyRenderSubtreeIntoContainer @ react-dom.development.js:17136\nrender @ react-dom.development.js:17195\n./src/index.tsx @ index.tsx:7\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n0 @ request.ts:54\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\nindex.js:2178 Warning: Unsafe legacy lifecycles will not be called for components using new component APIs.\nButtonBase uses getDerivedStateFromProps() but also contains the following legacy lifecycles:\n  componentWillReceiveProps\n  componentWillUpdate\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks\nstack_frame_overlay_proxy_console @ index.js:2178\nprintWarning @ warning.js:33\nwarning @ warning.js:57\nconstructClassInstance @ react-dom.development.js:11373\nupdateClassComponent @ react-dom.development.js:13036\nbeginWork @ react-dom.development.js:13715\nperformUnitOfWork @ react-dom.development.js:15741\nworkLoop @ react-dom.development.js:15780\nrenderRoot @ react-dom.development.js:15820\nperformWorkOnRoot @ react-dom.development.js:16437\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nscheduleRootUpdate @ react-dom.development.js:16663\nupdateContainerAtExpirationTime @ react-dom.development.js:16690\nupdateContainer @ react-dom.development.js:16717\n./node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render @ react-dom.development.js:17000\n(anonymous) @ react-dom.development.js:17140\nunbatchedUpdates @ react-dom.development.js:16557\nlegacyRenderSubtreeIntoContainer @ react-dom.development.js:17136\nrender @ react-dom.development.js:17195\n./src/index.tsx @ index.tsx:7\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\nfn @ bootstrap fb00d4a6edd6f1b9cd31:88\n0 @ request.ts:54\nwebpack_require @ bootstrap fb00d4a6edd6f1b9cd31:678\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\n(anonymous) @ bootstrap fb00d4a6edd6f1b9cd31:724\ncontent_script.js:24 initializing Content Script message listener. I found the cause of the problem in my case, in app.tsx I was initializing firebase in the global scope. When I moved it into 'onComponentDidMount()' my issue was resolved.. \n",
    "njgraf512": "Having the same problem. Any suggestions would definitely be appreciated.. ",
    "leanbalma": "Thank you. Sorry about that.. Right. I have to include the yarn.lock file too :) Fixed.\nThanks.. ",
    "omnikron": "@theKashey yeah, I thought that was the case. I didn't actually know we were using it, it was added before I started on the project and not documented anywhere.  I thought I would make an issue partially just to make it googleable for any other lost souls, because this took up nearly a whole day!. @theKashey oh sorry. I'll base off next branch.. @theKashey new PR in #826. Maybe you should update your contribution guidelines, I don't think I saw that anywhere.. @neoziro done. ",
    "YouHusam": "@theKashey I ran codemod but it broke 90 unit tests.\nThank you very much. Please note createReactClass was added in react 16 because they deprecated React.createClass maybe something changed there. @theKashey Looks like that's the problem, it's working but I was testing in a bound function. Thank you very much for your time. ",
    "wordofchristian": "Is there no may to make it do a full reload when a bound function changes? Right now it just reports a replacement but is not updated which is not ideal.. > ... but still encouraging you to use codemod to level up your code.\nI hear you. We currently have a lot of code using some legacy mixins that can't be codemoded away. We are in the process of migrating these components but it takes time. Thank you for re-opening this. If you can point me in the right direction perhaps I can help.. ",
    "SleepWalker": "@theKashey, the error is here:\nhttps://github.com/ctrlplusb/react-tree-walker/blob/master/src/index.js#L78\nIt uses react Children API. So ProxyComponent is not a valid Component for react. A valid react element should have .$$typeof property. This is the thing, react validates in Children.count method:\nhttps://github.com/facebook/react/blob/b77b12311f0c66aad9b50f805c53dcc05d2ea75c/packages/react/src/ReactChildren.js#L124-L128\nIt can not determine, that this is a react element and tries to proceed with iteration, which is not possible.\nOr do you mean, that ProxyComponent should not appear in React tree as a child and react-tree-walker improperly traverses that tree?. Thank you for detailed info @theKashey!. ",
    "wKovacs64": "Thanks for all your work on RHL4, it's looking great.\nI don't know about Relay or RAC, but I was waiting for this PR to land to fix Enzme shallow rendering of SFC's when using the babel plugin. Maybe I'm just doing something wrong, but this PR fixes it for me.\n~~Simple repro based on RHL's webpack example: https://github.com/wKovacs64/rhl4-enzyme~~ [nuked as of 4.0.0-beta.23]\nAm I missing something obvious for this to work? Should I open a new issue? Thanks again.. RHL should disable itself under Jest, or am I responsible for disabling it? In my real project, I currently only load the Babel plugin when env is development as a workaround for this issue, but I assumed that was a bit of a hack. Thanks for looking, let me know if I dorked something up!. I guess the Babel plugin being active without module.hot is what's behaving unexpectedly then (differently than RHL3, anyway). Should my demo repo work as-is, or should I disable Babel plugin when NODE_ENV=test?. No sweat, hope you didn't rush on my account. I just thought I just missed an answer in the discussion (I can be a little dense). \ud83d\ude04 . Sweet, thanks!. ",
    "inspiraller": "My babel.rc file:\njavascript\n{\n  \"presets\" : [\"es2015\", \"stage-0\", \"react\"],\n  \"plugins\": [\n    \"add-module-exports\",\n    \"transform-es2015-modules-umd\",\n    \"react-hot-loader/babel\",\n    \"transform-do-expressions\",\n    \"transform-object-rest-spread\"\n  ]\n}\nMy package,json looks like this:\njavascript\n{\n  \"name\": \"example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A vanilla setup\",\n  \"private\": true,\n  \"author\": \"Steve Tomlin\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"autoprefixer\": \"^7.2.5\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-eslint\": \"^8.2.1\",\n    \"babel-jest\": \"^22.1.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-plugin-transform-do-expressions\": \"^6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"case-sensitive-paths-webpack-plugin\": \"^2.1.1\",\n    \"chunk-manifest-webpack-plugin\": \"^1.1.2\",\n    \"copy-webpack-plugin\": \"^4.3.1\",\n    \"css-loader\": \"^0.28.9\",\n    \"dotenv\": \"^5.0.0\",\n    \"draft-js\": \"^0.10.5\",\n    \"enzyme\": \"^3.3.0\",\n    \"enzyme-adapter-react-16\": \"^1.1.0\",\n    \"enzyme-matchers\": \"^4.1.1\",\n    \"eslint\": \"^4.16.0\",\n    \"eslint-config-airbnb\": \"^16.1.0\",\n    \"eslint-loader\": \"^1.9.0\",\n    \"eslint-plugin-import\": \"^2.8.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.3\",\n    \"eslint-plugin-promise\": \"^3.6.0\",\n    \"eslint-plugin-react\": \"^7.6.1\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"file-loader\": \"^1.1.6\",\n    \"history\": \"^4.7.2\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"isomorphic-fetch\": \"^2.2.1\",\n    \"jest\": \"^22.1.4\",\n    \"jest-enzyme\": \"^4.1.1\",\n    \"jest-enzyme-matchers\": \"^1.0.0\",\n    \"jest-sonar-reporter\": \"^1.3.0\",\n    \"json-server\": \"^0.12.1\",\n    \"lodash\": \"^4.17.4\",\n    \"moment\": \"^2.20.1\",\n    \"node-sass\": \"^4.7.2\",\n    \"normalizr\": \"^3.2.4\",\n    \"object-assign\": \"^4.1.1\",\n    \"open\": \"^0.0.5\",\n    \"postcss-loader\": \"^2.0.10\",\n    \"promise\": \"^8.1.1\",\n    \"prop-types\": \"^15.6.0\",\n    \"react\": \"^16.2.0\",\n    \"react-addons-test-utils\": \"^15.6.2\",\n    \"react-dom\": \"^16.2.0\",\n    \"react-hot-loader\": \"^3.1.3\",\n    \"react-redux\": \"^5.0.6\",\n    \"react-router\": \"^4.2.0\",\n    \"react-router-dom\": \"^4.2.2\",\n    \"react-router-redux\": \"^4.0.8\",\n    \"react-test-renderer\": \"^16.2.0\",\n    \"react-transition-group\": \"^1.2.1\",\n    \"redux\": \"^3.7.2\",\n    \"redux-actions\": \"^2.2.1\",\n    \"redux-devtools\": \"^3.4.1\",\n    \"redux-devtools-dock-monitor\": \"^1.1.3\",\n    \"redux-devtools-log-monitor\": \"^1.4.0\",\n    \"redux-mock-store\": \"^1.5.1\",\n    \"redux-testkit\": \"^1.0.6\",\n    \"redux-thunk\": \"^2.2.0\",\n    \"redux-xhr-middleware\": \"^0.7.3\",\n    \"require\": \"^2.4.20\",\n    \"rimraf\": \"^2.6.2\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.20.1\",\n    \"stylelint\": \"^8.4.0\",\n    \"stylelint-config-standard\": \"^18.0.0\",\n    \"stylelint-scss\": \"^2.2.0\",\n    \"stylelint-webpack-plugin\": \"^0.10.1\",\n    \"svgo\": \"^1.0.4\",\n    \"universal-cookie\": \"^2.1.2\",\n    \"url-loader\": \"^0.6.2\",\n    \"webpack\": \"^3.10.0\",\n    \"webpack-chunk-hash\": \"^0.5.0\",\n    \"webpack-dev-server\": \"^2.11.1\"\n  },\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --config ./webpack.config.dev.js --inline\",\n  }\n}. This is the generated output:\nusing UglifyJsPlugin.\njavascript\nwebpackJsonp([0],{153:function(n,t,e){var o,i,s;!function(c,r){i=[e(154)],o=r,void 0!==(s=\"function\"==typeof o?o.apply(t,i):o)&&(n.exports=s)}(0,function(){\"use strict\";console.log(\"something\")});!function(){\"undefined\"!=typeof __REACT_HOT_LOADER__&&__REACT_HOT_LOADER__.register(myVariable,\"myVariable\",\"c:/myapp/src/index.js\")}()},154:function(n,t,e){n.exports=e(155)},155:function(n,t,e){\"use strict\";n.exports=e(156)},156:function(n,t,e){\"use strict\"}},[153]);\nWithout uglify:\n```javascript\nwebpackJsonp([0],{\n// 153:\n// (function(module, exports, webpack_require) {\nvar WEBPACK_AMD_DEFINE_FACTORY, WEBPACK_AMD_DEFINE_ARRAY, WEBPACK_AMD_DEFINE_RESULT;(function (global, factory) {\n  if (true) {\n    !(WEBPACK_AMD_DEFINE_ARRAY = [webpack_require(154)], WEBPACK_AMD_DEFINE_FACTORY = (factory),\n                WEBPACK_AMD_DEFINE_RESULT = (typeof WEBPACK_AMD_DEFINE_FACTORY === 'function' ?\n                (WEBPACK_AMD_DEFINE_FACTORY.apply(exports, WEBPACK_AMD_DEFINE_ARRAY)) : WEBPACK_AMD_DEFINE_FACTORY),\n                WEBPACK_AMD_DEFINE_RESULT !== undefined && (module.exports = WEBPACK_AMD_DEFINE_RESULT));\n  } else if (typeof exports !== \"undefined\") {\n    factory(require('react-hot-loader/patch'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.patch);\n    global.index = mod.exports;\n  }\n})(this, function () {\n  'use strict';\nvar myVariable = 'something';\n  console.log(myVariable);\n});\n;\nvar _temp = function () {\n  if (typeof REACT_HOT_LOADER === 'undefined') {\n    return;\n  }\nREACT_HOT_LOADER.register(myVariable, 'myVariable', 'c:/myapp/src/index.js');\n}();\n;\n/***/ }),\n// 154:\n// (function(module, exports, webpack_require) {\nmodule.exports = webpack_require(155)\n/***/ }),\n// 155:\n// (function(module, exports, webpack_require) {\n\"use strict\";\n/ eslint-disable global-require /\nif (true) {\n  module.exports = webpack_require(156);\n} else {\n  module.exports = require('./patch.dev');\n}\n/***/ }),\n// 156:\n// (function(module, exports, webpack_require) {\n\"use strict\";\n/ noop /\n/***/ })\n},[153]);\n//# sourceMappingURL=app.57d88755b5abecdf79ae.js.map. @theKashey  - thanks. \nI submitted this also to babel. They have provided a solution which resolves transform-es2015-modules-umd as you have said, but allows me to keep react-hot-loader/patch in index.js\nhttps://github.com/babel/babel/issues/7325\nThis works.\nthank you for all your help.\n. ",
    "scefali": "\nRHL does not cover this case, as long this is just a HRM setup issue. Look like module.hot.accept('./reducer'does not work.\n\nOK so you're saying the problem is how I configured the HRM on the server running Webpack rather than RHL on the client, yes?. >RHL is only about React and React Components. Everything else is generic Hot-module-replacement and you have to handle it by yourself. As I can see, you configured it correctly, and it should work.\nRight. I need to take this to the HMR issue page.\n\nIt seems that module.hot.accept('./reducer', () => { was not got executed. Are you sure, that ENV is local?\n\nYes, I confirmed it.\n. ",
    "fnpen": "\nYou may try to test react-loadable package.\n\nHave the same problem.. I'm using react-loadable@5.3.1\nreact-hot-loader@4.0.0-beta.19 is working nice.\nIf react-hot-loader@4.0.0-beta.21:\n```\nWarning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.\nPlease check the code for the loading component.\n```\nIf react-hot-loader@4.0.0-beta.20:\ninvariant.js:42 Uncaught Error: HotExportedApp(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\nWhat can I do?\n. @theKashey I can make repo with code to help reproduce it. Do you need it?. @theKashey https://github.com/fnpen/react-hot-loader-mount-bug\nNot working with clean create-react-app + react-hot-loader@4.0.0-beta.21. (without redux, router and etc.)\nRun yarn start and press button.. @theKashey @thibautRe\nhttps://github.com/gaearon/react-hot-loader/blob/dd24b52a6d1c52210ca919a548d05764df7cdff1/src/AppContainer.dev.js \n```\nshouldComponentUpdate(prevProps, prevState) {\n    // Don't update the component if the state had an error and still has one.\n    // This allows to break an infinite loop of error -> render -> error -> render\n    // https://github.com/gaearon/react-hot-loader/issues/696\n    if (prevState.error && this.state.error) {\n      return false\n    }\nreturn true\n\n}\n```\nAlways true? Or need check change?. @neoziro @theKashey  thanks!. @theKashey solved for example. But error exists in my app with redux / react-router. I will try extract the reason to my example.. Nice! I'm waiting this fix. . ",
    "FallOutChonny": "Hello, first of all I would like to thank you guys for maintaining this project.\nI update RHL to 4.0.0-beta.22 and have similar problem, project used:\nreact - 16.2.0 with SSR\nstyled-components - 3.1.6\nreact-loadable - 5.3.1\nbabel - 7.0.0-beta.38\nwebpack - 3.10.0\nWhen I edit file and save changes, terminal shows\n\nand developer tools shows\n\nOr I don't edit file, just change the route, developer tools shows a lot of warning messages\n\nHot-reload is ok, but the warning message looks a bit annoying.\nCould you please help me? Thank you.\n. ",
    "cyrilwanner": "I also have the same issue in beta.22 (\"Can only update\" but without the children error FallOutChonny has). React-hot-loader still works as expected, there are just these additional warnings.\nI've setup an example project with loadable-components as I also have this in my real project, if it helps you debugging the cause: https://github.com/cyrilwanner/react-hot-loader-bug (follow the steps in the readme to reproduce the bug).\nPlease tell me if I can provide additional information/help.. ",
    "humulus": "temporary solution\nif (process.env.NODE_ENV !== 'production') {\n  Object.defineProperty(ClassObject, 'displayName', {\n    set: function (val) {\n      this.__displayName = val\n    }\n  });\n}\nI still think that createClassProxy should support static get displayName\n. ",
    "brianlmacdonald": "Can I give this a shot?. @neoziro got CI passing. Closed #847 because I accidentally committed React 16 as a dependency after running CI.  PR #849 fixes that.. Whoops! Wrong branch . @theKashey I added the bootstraps script and lerna, and removed the postinstall script.. I wasn't sure of which version to put in the lerna.json, so that may be incorrect.. ",
    "thomasthiebaud": "I will try that, thanks a lot for the ideas . @neoziro Is there a way to do it ? Can I update on next ?. ",
    "yuri-sakharov": "I will try.. ",
    "AndyBarron": "I have repro for this, but it's causing my Jest snapshot tests to return null instead of the proper object. Confirmed that going from 4.0.0-beta.21 to 4.0.0-beta.22 causes it (and rolling back fixes it).\nNode version: 8.9.4\nNPM version:  5.6.0\nOS: Ubuntu 16.04 (Windows Subsystem for Linux on Windows 10)\nTest frameworks: Jest 22.2.2 / Enzyme 4.17.0 / jest-enzyme 4.2.0. Alright, I'll see if I can throw together a minimal example when I can. Unfortunately, it's in a private repo atm. I will pull out the relevant bits.. ",
    "kunal-mandalia": "+1 we've had to disable react-hot-loader as a result. I flagged this issue with react-mapbox-gl at https://github.com/uber/react-map-gl/issues/461. ",
    "jakub-astrahit": "@theKashey Ok, thanks. What do you mean by \"extracting routes\"? Is there any documentation on this where I can see what to fix in the code please? I tried using <Router key={Math.random()} /> as a workaround but it didn't work.. No, I ended up not using hot reload.. ",
    "bamboooooo": "Have you solved the problem, please? I have the same problem.. ",
    "hermanomark": "I'm also encountering this problem, sometimes it fixes itself when I restart my machine. But it's really bugging me not to fix this.\nthis is related: https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#npm-start-doesnt-detect-changes\nand this: https://github.com/webpack/webpack-dev-server/issues/875. ",
    "iamstarkov": "@theKashey the claim \"it just works\" was in the docs before. it didnt \"just work\". Trust me, i would like it to (cssinjs/react-jss#117).\nthe problem is still in debugging it. How did you verify that it works with any possible HoC/component/etc? can it be put in words? can some RHL/dev file be created with integration/test helpers in order to test components against RHL and verify it would works with them?\nanother situation. What if RHL doesnt work with my obscure HoC (it will eventually happens)? Or if RHL does work, but not in a way i would expect it to?\nabout the detailed documentation:\n it will help with onboarding to the project for newcomers.\n thus it will help community developers to know how it works and help out with pull-requests.\nabout rhl/dev or some kind of integration/test helpers:\n it will allow RHL to create \"Canary in the Goldmine\" for approach for continuous releases to ensure top (3/5/10/N) HoCs didnt break with the new pull-request.\n community developers will be able to reduce cognitive load and stress, because with those integration/test helper they will be able to ensure their HoCs work.\n. @theKashey thanks for this. ",
    "moondef": "@theKashey done. ",
    "blittle": "Confirmed on node v9.3.0. ",
    "frehner": "Looks like that does resolve it. Thank you!. ",
    "pristas-peter": "All i do is import {hot} from 'react-hot-loader';. The bug is just a side effect of that.\n. ",
    "WickedSik": "Babel.js\njavascript\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": [\n    \"syntax-dynamic-import\",\n    \"transform-decorators-legacy\",\n    \"transform-object-rest-spread\",\n    \"react-hot-loader/babel\"\n  ],\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\n        \"transform-decorators-legacy\",\n        \"transform-object-rest-spread\",\n        \"istanbul\"\n      ]\n    }\n  }\n}. I did a little test.\nOld:\njavascript\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default hot(module)(App)\nNew:\njavascript\nif(module.hot) {\n  module.hot.accept();\n}\nexport default App\nThis does compile well (I presume module.hot doesn't exist), and runs on the page, but modules aren't reloaded.. ",
    "Sunshine168": "thx !. ",
    "vilic": "I would suggest to use tsconfig.json with module option set to esnext, then have babel to transform modules with transform-es2015-modules-commonjs. Thus the user can take the advantages of allowSyntheticDefaultImports and babel interop require, so that they don't have to use import wildcard everywhere.. ~~Can we just use babel to transpile TypeScript, and do type checking with something else asynchronously?~~\nDoesn't look like a good idea, just didn't think of the limitations transpiling TypeScript using babel.. ",
    "PetrShypila": "Does anyone know if I can target TS to ES5 directly with react-hot-loader? I see in examples TS targets ES2015 which then will be transformed to ES5 with babel-loader.. ",
    "RomanGotsiy": "Here is the minimal babel config I ended up with:\njs\n{\n  loader: 'babel-loader',\n  options: {\n    plugins: [\n      '@babel/plugin-syntax-typescript',\n      '@babel/plugin-syntax-decorators',\n      '@babel/plugin-syntax-jsx',\n      'react-hot-loader/babel',\n    ],\n  },\n}\nI put it BEFORE ts-loader. Works fine for me but the build is noticeably slower.. > The only thing one need - set a custom property on each \"spotted\" class, to wrap .bind with some custom hook (like React-Hot-Loader v1-2-3 did, actually), everything else ProxyComponent can handle.\n@theKashey could you go into more details on this? I would be happy to remove babel from my pipeline and node_modules. Seems that TypeScript plugins can't do it (at least right now):\n\nUPD: but it seems to be possible with Custom Transformers which I was not aware of but seems ts-loader supports it.\nI think @johnnyreilly can tell more about this. ",
    "evenfrost": "I was getting a hell lot of TS errors with the preferred config from README because with it the code is compiled first by Babel, and by TypeScript after, and TypeScript compiler goes nuts on 'babelified' code.\nWorking config for me (you must put babel-loader before ts-loader in config, but, due to webpack's reversed loaders order, it gets executed after):\njs\n      {\n        test: /\\.ts|\\.tsx$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: 'babel-loader',\n            options: {\n              plugins: [\n                '@babel/plugin-syntax-typescript',\n                '@babel/plugin-syntax-decorators',\n                '@babel/plugin-syntax-jsx',\n                'react-hot-loader/babel',\n              ],\n            },\n          },\n          {\n            loader: 'ts-loader',\n          },\n        ],\n      },. @theKashey Nope, I have no .babelrc and am getting errors like this:\n```bash\nERROR in /.../components/ClientListItem.tsx\n./client/components/ClientListItem.tsx\n[tsl] ERROR in /.../components/ClientListItem.tsx(63,36)\n      TS7006: Parameter 'key' implicitly has an 'any' type.\nERROR in /.../components/ClientListItem.tsx\n./client/components/ClientListItem.tsx\n[tsl] ERROR in /.../components/ClientListItem.tsx(63,41)\n      TS7006: Parameter 'code' implicitly has an 'any' type.\n``\nI assume that type checking happens after Babel compiles the code as I see no such lines in ClientListItem.tsx and VS Code doesn't output such errors. It looks like transpiledkeyprop gets checked (which makes sense), not sure about thecode` though.. @sarink 'Preferred way' wasn't working for me as well, so I've ended up with this.. ",
    "AndyCJ": "A hacky, but possibly easy to implement way of handling this problem is using //@ts-ignore to suppress the warnings.\ni.e.\ntypescript\n// @ts-ignore\n__reactstandin__regenerateByEval(key, code) {\n// @ts-ignore\n    this[key] = eval(code);\n}\nI've never found a good source of documentation for //@ts-ignore, but the announcement blog post skims over it:\n\nThese comments are a light-weight way to suppress any error that occurs on the next line. \n\nUnfortunately you can't block specific errors at the moment, only all errors.. I don't know anything about babel, so I can't comment on that.\nThanks for updating the example project to show using babel 7. I struggled a little on the weekend with the differences between the documentation showing babel 7, and the example using babel 6, before hitting the \"invalid\" typescript issue.\nI got there in the end by guessing which packages I needed to grab/update, so having that in the example should make things smoother for others who haven't had much exposure to babel.\nYou guys are very active and responsive on this project. It doesn't mean much, but I'm personally very impressed!\nThank you for all your time and effort.. ",
    "DDzia": "@theKashey, do you can provide your configs(webpack.config.js, tsconfig.json, package.json(for versioni))?. ",
    "linmodev": "@theKashey  Is there a way to use it without babel now? Both ts-loader and babel are compiler. I believe most people think that ts-loader and babel are redundant at the same time, and many people are forced to do so.. ",
    "Schlesiger": "I tried individually using the babel maintained plugins from that preset to optimize my bundles. I was testing with the ^7.0.0-beta.0 releases.\nI was able to use @babel/plugin-transform-react-constant-elements in both development and production without apparent impact to react-hot-loader. It didn't \"freeze\" or \"reload\" my state on component updates. However, it is recommended in the documentation to only deploy in production due to making \"warning messages more cryptic\".\nI did have trouble with @babel/plugin-transform-react-inline-elements breaking react-hot-loader in development. The plugin also seems to break component libraries. If I shared a production build of a component built with @babel/plugin-transform-react-inline-elements, it would break react-hot-loader for those downstream users.\nThat being said, the console errors were about components unrelated to my project. If I tried a simple demo with no component dependencies; everything worked properly. I started bringing in the components that were listed in the errors into the small demo project; trying to make it break. I couldn't. I'm not sure at what combination of @babel/plugin-transform-react-constant-elements and the component tree breaks react-hot-loader.\nThat is why I'm not 100% confident in these findings, but I know if I don't use @babel/plugin-transform-react-inline-elements, everything works normally.. ",
    "evan-scott-zocdoc": "Actually now that I'm looking at this project's index file, I'm not sure if #1 and #2 can be done due to the dynamic require... unfortunately there isn't a package.json way to distinguish between prod vs dev builds at the moment.\n#3 should still happen though.. There is some code left around though because the index exports AppContainer and such. The user might be only using the \"hot\" HOC and the AppContainer placeholder code could then be dead code eliminated.. @theKashey only for dev: https://github.com/gaearon/react-hot-loader/blob/master/src/hot.prod.js\nSince the prod index file pulls in code from all three files, without the above changes, the placeholder code in AppContainer.prod.js will not be dead code eliminated properly in the case of a consumer only using hot.. I'm happy to send a PR if you're in agreement. ",
    "TaurusWood": "@theKashey , thank u resolve my problem. But I Don't know why I add aliasto solve it\uff1f\nIn webpack documents about Resolve.alias\uff0cIt only explains:\n\n\n\nCreate aliases to import or require certain modules more easily.\n\n\n\nbut What did Resolve.alias do\uff0cWhat is the difference between Resolve.alias and webpack's default parsing path?. ",
    "TrevorBurnham": "So, I have a use case that looks like this:\n```jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {thing: props.defaultThing};\n  }\ncomponentWillMount() {\n    this._transformedThing = transform(this.state.thing);\n  }\ncomponentWillUpdate(nextProps, nextState) {\n    this._transformedThing = transform(nextState.thing);\n  }\n}\n```\nI want a test case in my app to confirm that, if I make changes to MyComponent in a dev environment where RHL is in use, then the instance variable will reflect the preserved state. Something along the lines of:\n```jsx\nimport { shallow } from 'enzyme';\nconst wrapper = shallow();\nexpect(wrapper.instance()._transformedThing).toEqual(transform(\"foo\"));\nwrapper.setState({thing: \"bar\"});\nexpect(wrapper.instance()._transformedThing).toEqual(transform(\"bar\"));\n// Now simulate MyComponent being replaced by RHL with a new component\n// with the same implementation...\nexpect(hotReplacedWrapper.state(\"thing\")).toBe(\"bar\");\nexpect(hotReplacedWrapper.instance()._transformedThing).toEqual(transform(\"bar\"));\n```\nUnfortunately, I can't think of any way to simulate a component instance's state being altered between the execution of its constructor() and componentWillMount(), as RHL does.. I was hoping to have a test such that, when I upgrade my project's dependencies (e.g. bumping react or react-hot-loader to the latest version), it would confirm that my component will still behave as expected when hot-replaced. I realize that it's a little esoteric for a project to have test coverage for dev-mode behavior, but I'd worry otherwise that the dev-mode behavior might change.\nI'd feel less of a need for such a test if the react-hot-loader documentation were more explicit about how it preserves state in terms of the component lifecycle. Please tell me if this is an accurate description:\n\nWhen ComponentA is replaced by ComponentB, the following occurs:\n1. All ComponentA instances are unmounted (componentWillUnmount())\n2. A ComponentB instance is created for each unmounted ComponentA instance (constructor())\n3. The state from each ComponentA instance is transferred to its corresponding ComponentB replacement\n4. All ComponentB instances are mounted (componentWillMount()). Ah, I see. Thanks, that's a useful clarification. Somehow I'd been under the impression that react-hot-loader was unmounting the changed components and mounting their replacements.. \n",
    "apieceofbart": "Thanks, maybe I'm missing something. If you need any help, let me know.. @theKashey  I'm sorry but I don't see this fixing my example even when installing RHL ver 4.3.3. @theKashey Btw,  I don't this is necessarily a bug - I think it's ok to tell people RHL only makes sense in development so they should remove it from production code. I think you just need to communicate it clearly in docs.. @EddyVinck yeah, that's what I was trying to write in issue description. I think you could also leave it in .babelrc just mark it as \"dev\" setting only:\n{\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\n        \"react-hot-loader/babel\"\n      ],\n    }\n  }\n}. ",
    "czebe": "We're experiencing the same problem while setting up a new webpack4 build config.. ",
    "EddyVinck": "I was also getting this error. I noticed that removing \"react-hot-loader/babel\" from my .babelrc file's plugins got rid of the error, however this removed my HMR which is obviously not ideal.\nI then checked the documentation for babel-loader and noticed you can add plugins in your Webpack config as well.\nSo I tried adding the plugin in my Webpack config...\njs\n// webpack.config.js\n{\n   test: /\\.jsx?$/,\n   loader: 'babel-loader',\n   exclude: '/node_modules/',\n+  options: {\n+    plugins: ['react-hot-loader/babel'],\n+  },\n},\nAnd this worked! \nI can now have HMR when using the Webpack development server and react-hot-loader is no longer included in my production build (it is not included in webpack.prod.js) which gets rid of the error!. ",
    "creatorrr": "Could be caused by a circular dependency. Similar error and response from @ljharb on this issue\n\nThat usually happens when you're extending something that's a circular dependency. I'd recommend updating enzyme first, before upgrading React - that way you'll know for sure which thing caused the breakage.\n\n. ",
    "jshthornton": "I think this is a pretty bad way to support this functionality. Any existing library that uses types is now broken due to this, and asking libraries to use this tool just for type checking is going to create more issues than it solves.. ",
    "1pete": "Interesting, I try to reproduce with small project, only 1kb size increased. But my big project really got 18kb increased. Seem like it's not from this lib, I'll close this and investigate deeper.\nSorry for the inconvenience.. ",
    "user905": "What is the greatest version of the hotloader that works with webpack? I am receiving the same error with \"^3.0.0-beta.7\". Thank you. Can you point me to instructions on how to update?. I needed to get up and running and am too inexperienced in web development to slog through debugging issues when updating one package to the next. My action was to stick with the working defaults shipped with the template, including using Bootstrap 3.3.7. . ",
    "s-h-a-d-o-w": "Of course. I'll get on it as soon as I've figured out whether I can or can't improve electron-compile's HMR. (At least on my machine and in my scenario, it already works.). > as I remember it is how Electron's HMR works\nElectron doesn't do any HMR itself, electron-compile does. It could be optimized but the people in charge of the project feel that it doesn't need to be.\nAnd so I switched to simply using webpack, setting up my own config. It's really no different from your regular web project.. Hm... I didn't see that and you're obviously right for consistency's sake.\nHowever, I would like to point out that the official way of spelling \"webpack\" is indeed with a lower-case w in the beginning: https://webpack.js.org/concepts/\nSo it seems to me that instead, all occurrences of \"Webpack\" in the rest of the README should be changed.. ",
    "chenders": "FWIW, we have strict CSP rules in dev environments to eliminate any CSP-related surprises when we move to QA/staging/prod environments. (I'm running into this problem as well.). ",
    "swashata": "Had just this issue right now. I am very new to react, just started and had to scratch my head (like a lot) to understand this isn't coming from mine, rather the hot loader \ud83d\ude01 . I will be waiting for an update.. Here's my two cents. I have followed the instruction and it is just working good with React 16.3.\nFoo.jsx\n```js\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nimport PropTypes from 'prop-types';\nclass Foo extends React.PureComponent {\n    static propTypes = {\n        categories: PropTypes.arrayOf(PropTypes.number),\n    };\nstatic defaultProps = {\n    categories: [],\n};\n\nstate = {\n    foo: 'Bar',\n};\nrender() {\n    return (\n        <div className=\"foo-container\">{this.state.foo}</div>\n    );\n}\n\n}\nexport default hot(module)(Foo);\n```\nThe only difference is that I haven't made an export hot, while connecting it with the store. I am using Redux though and my App.jsx looks different.\nApp.jsx\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Foo from './Foo';\nimport store from './store';\nconst Root = (\n    \n\n\n);\nrender(Root, document.getElementById('foo-app'));\n```\nAnd to have hot reloading within the store,\nstore.js\n```js\nimport { createStore } from 'redux';\nimport rootReducers from './reducers/rootReducers';\n// Create the store\nconst store = createStore(\n    rootReducers,\n    / eslint-disable no-underscore-dangle /\n    // Add devtool in an isomorphic way\n    typeof window !== 'undefined' &&\n        window.REDUX_DEVTOOLS_EXTENSION &&\n        window.REDUX_DEVTOOLS_EXTENSION()\n    / eslint-enable /\n);\n// webpack hot middleware support\nif (module.hot) {\n    module.hot.accept('./reducers/rootReducers', () => {\n        / eslint-disable global-require /\n        const nextRootReducers = require('./reducers/rootReducers').default;\n        / eslint-enable /\n        store.replaceReducer(nextRootReducers);\n    });\n}\n// export the store\nexport default store;\n```\nAnd all these setup works with webpack dev middle and webpack hot middleware. Since I am developing a WP plugin, I couldn't use Webpack Dev server directly. So I used the middlewares inside browsersync (all connected with a simple gulp task).\ngulpfile.js\n```js\nconst gulp = require('gulp');\nconst browserSync = require('browser-sync').create();\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\nconst webpackHotMiddleware = require('webpack-hot-middleware');\n// Get the function for creating varying config\nconst webpackConfig = require('./config/webpack.config');\n// Our local config\nconst localConfig = require('./config/local.config');\ngulp.task('serve', () => {\n    const config = webpackConfig('development', localConfig);\n    const webpackBundler = webpack(config);\n    const devMiddleware = webpackDevMiddleware(webpackBundler, {\n        noInfo: true,\n        publicPath: config.output.publicPath,\n        stats: { colors: true },\n    });\n    const devHotMiddleWare = webpackHotMiddleware(webpackBundler);\n    browserSync.init({\n        logLevel: 'info',\n        port: localConfig.port,\n        ui: localConfig.ui,\n        debugInfo: true,\n        proxy: {\n            target: localConfig.proxy,\n            // Middleware for webpack hot reload\n            middleware: [\n                // converts browsersync into a webpack-dev-server\n                devMiddleware,\n                // hot reload JS\n                devHotMiddleWare,\n            ],\n        },\n        host: localConfig.host,\n        open: false,\n        notify: localConfig.notify,\n        background: true,\n    });\n// Full reload on php changes\ngulp.watch(PATHS.php.src).on('change', browserSync.reload);\n// JS & CSS will be handled by webpack on the go\n\n});\n```\nThe codes are stripped down so those are missing some imports.\nI hope the concepts and codes above helps @elisherer to debug your issue. I don't think it has anything to do with react-hot-loader rather how you have implemented it.\nAlso, I guess you do have the \"react-hot-loader/babel\" plugin in your .babelrc file?. ",
    "jaydenseric": "@gaearon can this please be elevated from an \"enhancement\" to a \"bug\"? Current stable React is meant to be supported according to peer deps, yet here is the sort of console output we have to ignore:\n\nThese false positives are a big confusion and obfuscate real warnings that are really helpful in this period of learning and transition to the new component API. This issue will affect the DX for a lot of people; react-hot-loader has nearly half a million installs/wk and is a dependency of Next.js.\nIs there something blocking https://github.com/gaearon/react-hot-loader/pull/927?. ",
    "mvestergaard": "4.1.0 got rid of warnings related to componentWillReceiveProps, which is great.\nHowever there still seems to be the same issue related to componentWillUpdate.\nHere's a warning i receive while using https://github.com/reactjs/react-modal. It does not as far as I can tell implement componentWillUpdate, so I'm assuming it's coming from the proxy.\n```\nWarning: Unsafe legacy lifecycles will not be called for components using new component APIs.\nModal uses getSnapshotBeforeUpdate() but also contains the following legacy lifecycles:\n  componentWillUpdate\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks\n``. @theKashey I think you misunderstood. It's not related tocomponentWillReceiveProps.  \nTheModalcomponent usesgetSnapshotBeforeUpdate`, see: https://github.com/reactjs/react-modal/blob/master/src/components/Modal.js#L123\nBut does not use componentWillUpdate, however the above warning appears.. @gaearon Here you go https://github.com/mvestergaard/rhl918repro. If you disable react-hot-loader in .babelrc the warning is gone.. @theKashey my issue was resolved with 4.1.1, thank you.. ",
    "elisherer": "I'm working with React 16.3 and the HMR is broken in 4.1.0 and 4.1.1.\nChanging even a simple string inside a div won't appear in the browser after module updates (in my case a function component, didn't check a class one).\nrolling back to RHL 4.0.1 brings back the HMR.. You caught me unprepared, it might take me a lot of time. My project is not small, but it doesn't use anything special either.\nSome code I use:\npackage.json\njson\n  \"scripts\": {\n    \"start\": \"webpack-serve\",\n.babelrc\njson\n{\n  \"presets\": [\n    \"@babel/preset-flow\",\n    \"@babel/preset-react\",\n    [\"@babel/preset-env\", { \"modules\": false }]\n  ],\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-properties\",\n    \"@babel/plugin-proposal-object-rest-spread\",\n    \"@babel/plugin-syntax-dynamic-import\"\n  ],\n  \"env\": {\n    \"test\": {\n      \"plugins\": [\n        \"@babel/plugin-transform-modules-commonjs\"\n      ]\n    },\n    \"development\": {\n      \"plugins\": [\n        \"react-hot-loader/babel\"\n      ]\n    },\n    \"production\": {\n      \"plugins\": [\n        \"@babel/plugin-transform-react-constant-elements\",\n        \"@babel/plugin-transform-react-inline-elements\",\n        \"babel-plugin-transform-react-pure-class-to-function\",\n        \"babel-plugin-transform-react-remove-prop-types\"\n      ]\n    }\n  }\n}\nApp.js\n```js\n...\nlet exportedApp = App;\nif (DEV) {\n  const { hot }  = require('react-hot-loader');\n  exportedApp = hot(module)(App);\n}\nexport default connect(mapStateToProps)(exportedApp);\n```\nindex.js\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nimport { Provider } from './store'; // store made with the new Context API\nconst appElement = document.getElementById('root');\nrender(\n  \n\n\n, appElement);\n``. @theKashey, Sorry, I don't get any debug info besides the regular logs:\n![image](https://user-images.githubusercontent.com/1045347/39060517-3ba53942-44ca-11e8-9de2-bfb49a312916.png)\n. ill try to create a repro repo asap. It has something to do with me usingreact-waterfall` which isn't doing anything wrong (from my perspective).\nCheck it out on: https://github.com/elisherer/react-hot-loader-repro918\nI added examples of:\n Class component\n Function component\n Pure Class component\n Consumer Class component\n Consumer Function component\n Consumer Pure Class component\n Children as a Function component\n Consumer \"Connected\" component\n Connected Children as a Function component\n Component in a portal (modal)\nAll is working well besides the react-waterfall example.\nreact-waterfall is a mixture of the above and still manages to break, I added the library's source into the repo so you could fiddle with it. \nI Couldn't get it to work.\nMaybe I should open another issue, since it doesn't relate to @mvestergaard's issue.. @theKashey, I managed to recreate the problem without react-waterfall (I removed it from my repo)\nSee:\nhttps://github.com/elisherer/react-hot-loader-repro918/blob/master/src/components/FunctionConsumerPureClassComponent.js. ",
    "swrobel": "@theKashey this is still open despite being listed as fixed in the 4.1.0 release notes. Is there a commit that fixed it?. ",
    "CalinaCristian": "Since from the next major release, react will deprecate componentwillmount, this workaround will no longer be valid. . ",
    "nonoroazoro": "@theKashey Yeah really? Maybe I made mistakes some where.  I'm really appreciate if you have time to help checking the code!\nHere's it: https://github.com/nonoroazoro/typescript-react-boilerplate\nYou can run npm i && npm run dev to start the app at localhost:8080.\nI've put a button on the page, you can click it and then modify App.tsx to reproduce the result. You'll find that the value of the state is lost right after the update.. @neoziro Thanks anyway!. @theKashey Got it. I'll try this and wait for your good news. Thanks again for helping me understanding this issue~ \ud83d\ude38 \nYou're right, it's worked!!! \ud83d\ude06 . Yep, I'll do it :). @pleerock  Yes it worked~ and I've put some comments about the HMR in my source code.\n@theKashey Thanks again! :smile:  Actually I've already seen this api while I'm searching for the register function. The reason why I didn't use hot is because I got a using private name 'App' error from TypeScript compiler, and I didn't find a proper solution :sob: \nScreenshot:\n. ~~export class App did solve the problem, but I don't quite like it... haha~~. @theKashey I finally solved the using private name 'App' error by applying hot as Decorators:\njavascript\n// Add hook to auto re-render the root component.\n@hot(module)\nexport default class App extends PureComponent\n{\n    render()\n    {\n        return (\n            <div className={styles.app}>\n                <Counter />\n            </div>\n        );\n    }\n}\nIn addition, it also solved the state lost problem... I can safely remove the register api from my index.ts file now.\nIt's perfect! I love this hot api, thanks a lot for your great work! \ud83d\ude04 . ",
    "pleerock": "@nonoroazoro did you get it working? Im interested in this issue as well.. Would be great to support this out of the box, there are lot of people using typescript that will face this problem. ",
    "jackwilsdon": "I did a bit of investigative work into this, and it seems that this is due to how class properties work and how we access the render method of a component on hot reload.\nBabel converts class properties to look something like this;\nJavaScript\nfunction Example() {\n  this.render = function() {\n     return \"Hello, example!\";\n  };\n}\nWhich does not put the method on the prototype. The issue is that we try and call the render method on the prototype here;\nhttps://github.com/gaearon/react-hot-loader/blob/10a320c9cb6c0c852737f9e1b6b57d177dfe4007/src/proxy/createClassProxy.js#L150-L158\nI'm not sure if there is a solution to this or whether we should just add a warning about it, as it doesn't seem like you can re-bind the context of an arrow function.. Here's a codemod to change class property render methods into class methods for the meantime.. I guess there's no solution for this then. Cheers :+1:. @neoziro Should this be re-opened if it was a mis-click? :stuck_out_tongue: . @Deadly0 it works fine for classes, it just fails with class property render methods;\n```JavaScript\nclass MyComponent extends React.Component {\n  render() {\n    return \"This will hot reload fine!\";\n  }\n}\nclass MyOtherComponent extends React.Component {\n  render = function() {\n    return \"This will fail to hot reload!\";\n  }\n}\n```. ",
    "Deadly0": "There is no solution for this issue at all? react-hot-loader not working for classes and it's no way to fix it?. ",
    "qyjandroid": "@theKashey \nerror:\n\n\n\n. ",
    "Fer0x": "Steps to use this PR (for webpack users):\n\nAdd dependency with \"react-hot-loader\": \"gaearon/react-hot-loader#927/head\" in package.json.\nAdd to scripts directory in package.json following line:\n\"postinstall\": \"(cd node_modules/react-hot-loader && yarn && yarn build)\"\nFinally, in your webpack config, add this to resolve.alias section:\nreact: './node_modules/react' . @theKashey what about release 5.x major version? 4.x will remain for React 15. \n",
    "EmpireJones": "@theKashey - awesome, thanks! I can confirm that building without the code transpiled for older browsers fixes it. I'd prefer to have my development setup mirror production, so this change will be helpful. \nThanks again!. ",
    "dcflow": "Using both webpack HMR and the babel plugin for the react-hot-loader causes the component to be updated twice thus calling the render method again.. ",
    "zlk89": "Thanks, I am able to get it working by using express, instead of webpack-dev-server. In case anyone might need, I have push a new branch which is using express and working: https://github.com/zlk89/react-hot-loader-clear/tree/express. ",
    "micimize": "I don't see why putting babel before typescript should be considered preferable. If you pass the typescript es6 output to babel, babel will then compile that toes5. If you want to also have a separate standalone tsc task, you can just use cli flags to override.\nI don't know much about @babel/plugin-syntax-typescript, but even if it has 100% parity with typescript@latest syntax, we can probably assume it lags behind @next. Either way, by the time the babel-first config gets to the typescript loader, it's already been stripped of all typescript-relevant syntax, so you might as well just remove it.. the preset here depends on @babel/plugin-transform-typescript, which among other things doesn't support namespaces. I think the syntax-typescript the previous babel-only setup used has the same problem (they don't say explicitly).\nFor some people the performance is worth the trade-off, but it should be noted. I personally wasn't able to get a functioning typescript-first config with my environment, I think because of allowSyntheticDefaultImports or some other setting.. ",
    "sarink": "@theKashey doesn't the function get magically bound in the constructor, which can't be hot-reloaded?\nFor the record, I'm talking about a function like this:\nclass MyComponent extends React.Component {\n  handleClick = (event) => {\n    // add a console.log here and hit save, then click the div, there is no log output\n  }\n  render() {\n    return <div onClick={this.handleClick}>click me</div>;\n  }\n}\nIn any case, the new event handler is not injected, and my code also does not do a full-reload.\nMy setup, if it's relevant:\n// webpack.config.js\nconst rhlBabelLoader = {\n  loader: 'babel-loader',\n  options: {\n    plugins: [\n      'babel-plugin-syntax-typescript',\n      'babel-plugin-syntax-decorators',\n      'babel-plugin-syntax-jsx',\n      'react-hot-loader/babel',\n    ],\n  },\n}\nconst tsLoader = 'ts-loader';\nmodule.exports = {\n    rules: [\n      {\n        test: /\\.(j|t)sx?$/,\n        exclude: [path.resolve(__dirname, 'node_modules')],\n        use: isProd ? [tsLoader] : [rhlBabelLoader, tsLoader],\n      },\n// index.tsx\nconst store:IStore = createStore(reducer, composeEnhancers(applyMiddleware(...middleware)));\nconst content = (\n  <Provider store={store}>\n    <RouterContainer />\n  </Provider>\n);\nconst dest = document.getElementById('root');\nReactDOM.render(content, dest);\n// RouterContainer.tsx\nclass RouterContainer extends React.Component {\n  ...\n}\nconst ConnectedRouterContainer = connect<IStoreProps, IDispatchProps>(mapStateToProps, mapDispatchToProps)(RouterContainer);\nconst HotConnectedRouterContainer = hot(module)(ConnectedRouterContainer);\nexport default HotConnectedRouterContainer;. ",
    "fspoettel": "Thank you for taking the time @theKashey! I tested your workaround when running into the same problem and it works. It forces <Component /> to either be instantiated with all required props or not have any required props however (assuming PropTypes are used), otherwise a propType warning will be thrown. Instantiating components for equality checks also raises performance concerns.\nCould it be enough to compare string representations of the functions in the particular case of React components? I am not sure whether this approach has drawbacks, it worked in a quick test.\njs\nnode.type.toString() === Component.toString()\nEither way, thank you for providing a working solution to the problem!\n. ",
    "baldurh": "I\u2019m using 4.0.1 and it works fine. Wanted to update to the latest version and ran into some issues with hot reloading. I have an example where I have nested PureComponents and changes aren\u2019t being reloaded in a nested PureComponent. However, if I change it\u2019s parent to Component it starts to work.. For completeness:\n<AsyncRouteComponent>\n  <HotHOC>\n    <PureComponent>\n      <Fragment>\n        <Component>\n          <PureComponent>\n            <PureComponent>\n              <PureComponent>\n                <PureComponent> // Change this one to Component and it starts working\n                  <PureComponent>\n                    <PureComponent /> // <- does not hot reload\n                  </PureComponent>\n                </PureComponent>\n              </PureComponent>\n            </PureComponent>\n          </PureComponent>\n        </Component>\n      </Fragment>\n    </PureComponent>\n  </HotHOC>\n</AsyncRouteComponent>. Yeah this wasn\u2019t totally correct. Sorry.\nIt\u2019s pretty much just stopping at that one component.\nThat Row component is Pure and the props that are passed to it do not change before and after hot reloading so it does not trigger a re-render. If I change one of the props to a new random value generated on each render it starts working again. So it seems the force update is broken.\nJSX\n<AsyncRouteComponent>\n  <HotHOC>\n    <PureComponent>\n      <Fragment>\n        <Component>\n          <PureComponent> // this works? Yes\n            <PureComponent> // this works? Yes\n              <PureComponent> // this works? Yes\n                <PureComponent_Row> // **Everything stops here** Change this one to Component and it starts working (and \"this works?\")\n                  <PureComponent> // this works? No\n                    <PureComponent /> // <- does not hot reload (BUT ONLY THIS!) No\n                  </PureComponent>\n                </PureComponent_Row>\n              </PureComponent>\n            </PureComponent>\n          </PureComponent>\n        </Component>\n      </Fragment>\n    </PureComponent>\n  </HotHOC>\n</AsyncRouteComponent>. The only thing I can think of is that the props that are being passed into PureComponent_Row don\u2019t change so it does not re-render on its own. Something needs to force it to re-render I guess.. OK I tracked down my issue. This seems to have something to do with our use of lodash\u2019s memoize function. When I do logLevel: 'debug'. I get the error: resolver is not defined after hot-reload. If I remove all calls to memoize it is fixed. See #984. Actually, I believe the issue I reported earlier in this thread is fixed in 4.2.0 and #984 is a new one.. If I move all the memoized methods to another file this seems to work alright. I\u2019m gonna try to create a simple setup that reproduces the problem.. I cannot confirm this is fixed. 4.3.0 seems to have introduced new issues. Now, even if I remove the memoized methods from the class the reconciliation fails. That was enough to get everything working on 4.2.0. Now I don\u2019t get this particular error but still nothing gets hot-reloaded.\nSorry I haven\u2019t had time to create the test setup yet.. I think I might have found what is wrong on my end though I don\u2019t understand it completely \ud83d\ude48\nFirst, my comment above is wrong. I looked more into this and now I see that with 4.3.0 I no longer get the error reported in this issue: reconcilation failed due to error ReferenceError: resolver is not defined. So this issue is resolved \ud83d\udc4d\ud83c\udffb\nWhat I believe is the issue on my end is the memoized function is being used as a prop to a child component which had the changed component lower in the tree. So it seems the child component was still getting the same function passed as prop after the hot reload which then effectively stopped the re-rendering since it was a pure component.\nPerhaps there is something else in play here as I have not been able to reproduce this in a simple app created from create-react-app (but that uses webpack 3.8 but we have webpack 4.7). We have a few HOCs and a custom made async component loader etc which might be disrupting the process. I\u2019ve worked around the problem by refactoring the function so it no longer needs to be memoized. If this continues to be a problem for us I will try to create a simplified version of our own app to pinpoint this. I tried to do that but gave up after a while because of our complex setup.. ",
    "IMalyugin": "@theKashey , PureComponent does not get updated if it's located after the 16.3 Context.Provider, is this a known issue?\n\"react\": \"^16.3.2\",\n\"react-dom\": \"16.3.2\",\n\"react-hot-loader\": \"^4.2.0\",\nHere's the smallest configuration reproducing this:\n```\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nconst Context = React.createContext();\nclass Component extends React.PureComponent {\n  render() {\n    return 'This Does not get updated';\n  }\n}\nconst App = () => (\n  \n\n\n\n);\nexport default hot(module)(App);\n```. @theKashey , as I mentioned, I am already using 4.2.0, just before updating from 4.1.2, context blocked updates in nested components, now they work well, but PureComponents stop updating if located after context block.. No errors in console and in my app, I've got proper provider with value, consumer children while pure components are actually redux connected components.\nI've just been reducing the structure required to reproduce this till I got down to the above.\nShould add example as a test case for TDD and see for yourself :). @theKashey , yes, with logLevel = 'debug' it throws value of undefined error, except it's not caused by no value passed to context, as it still fires even with this code. It's given default value, value, and even consumer.\n```\nimport React from 'react';\nimport { hot, setConfig } from 'react-hot-loader';\nsetConfig({ logLevel: 'debug' });\nconst Context = React.createContext('default');\nclass Component extends React.PureComponent {\n  render() {\n    return 'This Does not get updated';\n  }\n}\nconst App = () => (\n  \n\n\n        {val => val}\n      \n\n\n\n);\nexport default hot(module)(App);\n```. @theKashey Yep, it's all fixed now, thanks :). I'm using both RHL AppContainer and hot reload merged into a new hoc. So any error generated within would be caught, problem is, RHL produces warning on hr instead. If I update page its error, and its caught.. Hmm, weird, gotta have a closer look at in my case, because I am catching errors with redbox and I see no errors at all. But I do see quite a few warnings from logger.\nIt could be related to the fact that I get multiple errors, but that does not explain why first error does not get shown.\nHere's how it looks like:\n```\n/*\n * HOC that provides\n * HotModuleReload + ErrorBoundary\n * the actual highest parental module must be passed for HMR to work\n /\nexport const withHMR = module => (\n  (WrappedComponent) => {\n    const HMRProvider = props => (\n      \n\n\n    );\nreturn hot(module)(HMRProvider);\n\n}\n);\n```\nAppContainer is located underneath hot, so it should catch error.\n. Issue persists, but I've yet had enough time to isolate it, to figure out the cause. I'll do it as soon as I can.. Okay, I reproduced it in a simple test case, happens to be quite on a large scale:\nAny runtime error in a PureComponent does not cause HMR to fire update.\n```\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nclass TestPure extends React.PureComponent {\n  render() {\n    // return IAmBroken; // non existing variable, uncomment to see result\n    return 'IAmPure';\n}\n}\nconst App = () => (\n  \n);\nexport default hot(module)(App);\n```\nThis also applies to any components nested in PureComponent. So, provided people use redux connected components or just PureComponents, this issue completely turns off RHL runtime error capturing.. @theKashey any update on this?. Awesome! Can't wait for the new release :). ",
    "Verikon": "I've experienced something very similar when I'm using a React.Fragments. Everything hot reloads until the third or forth Fragment - then it halts. If unrelated I'll file another ticket but thought I'd first mention it here.. @theKashey - I think you deserve a little more than some dribble that something looks like it may not work. I should be able to get you a much cleaner test case soon - or confirmation that I'm on drugs ;)\n. ",
    "MrZhang123": "@theKashey Thanks for you response , i will try it later\ud83d\ude04. @theKashey Hi, when i remove the react hot load , the webpack HMR can work , but add the react hot load, those component use redux can't hot reload , i add config in redux store like this \nJS\n  if (process.env.NODE_ENV === 'development') {\n    if (module.hot) {\n      module.hot.accept('../reducers/index.js', () => {\n        store.replaceReducer(require('../reducers/index.js').default)\n      })\n    }\n  }\nchange the those use redux component , save code, it doesn't change , and console the log\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\n[HMR] Checking for updates on the server...\n[HMR] Updated modules:\n[HMR]  - ./src/views/Content/Home/index.js\n[HMR] App is up to date.. @theKashey Sorry for that i didn't describe my question clearly.\nI expect use react-hot-reload and webpack HMR for my react project to get better development experience , I use webpack HMR , when i change those component that associated redux , the page refresh , so I add react-hot-reload.\nAccording to some article add react-hot-reload need config redux store , so i config store like this:\n```js\nimport { createStore, applyMiddleware } from 'redux'\nimport reducers from '../reducers'\nimport middleware from '../middleware'\nconst initialState = {}\nconst configureStore = () => {\n  // applyMiddleware(thunk, middleware)\n  let enhancer = applyMiddleware(...middleware)\nconst store = createStore(reducers, initialState, enhancer)\nif (process.env.NODE_ENV === 'development') {\n    if (module.hot) {\n      module.hot.accept('../reducers/index.js', () => {\n        // const nextReducer = combineReducers(require('../reducers'))\n        // store.replaceReducer(nextReducer)\n        store.replaceReducer(require('../reducers/index.js').default)\n      })\n    }\n  }\n  return store\n}\nexport default configureStore\n```\nBut it's don't work . I change the component those use redux , the app not change.\nDo i need config the redux store when i use react-hot-reload ? how to config ? I don't find how to config in react-hot-reload docs\ud83d\ude05\nMy project: https://github.com/MrZhang123/Web_Project_Build/tree/master/react-webpack. @theKashey  I use react hot loader v4.1.2 , I find in docs that v4 add hot to get hot load , just add hot(module)(App) in root component . I think it means if I do this , the whole app component will hot reload . In fact , it's not , it just let root component get hot load . Does that means hot(module)(App) just can let component that add this code get hot load ? I want to whole react component get hot load , how to do this ?. @theKashey Thanks you response . I find that if I use react router (v4),  the hot loader not work , so maybe react router cause this problem.. @theKashey you means if I want all component have hot reload , I need to add hot(module)(componentName) for all component ? . @theKashey ok, I understand , thanks for your reply \ud83d\ude04. ",
    "Cherdinand": "@MrZhang123 actually i had the same proplem that I need to add hot(module)(componentName) for all component if I want all component have hot reload. So i would like to know how you fix it? thanks. Sry, i make a mistake that send hot:true and --hot at the same time, when i remove one of them, it works fine.. ",
    "hannadrehman": "I have a strange behavior.  when i first save changes webpack compilation is successful and I see console updates in my browser with related network calls for the updated files, but my view is not updated.\nif i make more changes and save. the previously updated changes reflect in the view.  has anyone faced similar issue ?. ",
    "ryami333": "I'm seeing the same thing as described above. Successful compile, successful network calls for the new chunk, happy looking console log entries... but component does not re-render. I'm using latest version of react-hot-loader, webpack, webpack-dev-server. Have tried both the AppContainer and hot approaches, following the Readme to the very letter, but no still no luck.. ",
    "pcmaffey": "Getting the same problem as @ryami333, and debug outputs React-hot-loader: unable to merge...\nI'm guessing its related to https://github.com/gaearon/react-hot-loader/pull/963.\nUPDATE:\nIndeed, I just switched from react-loadable to https://github.com/theKashey/react-imported-component and RHL now works.  . Sure- Using the same HMR config as in the webpack docs... with babel plugins \"react-hot-loader/babel\" \"syntax-dynamic-import\". Using RHL 4.3.4, and the hot(module) method.\nHad this same experience--with react-loadable:\n\nSuccessful compile, successful network calls for the new chunk, happy looking console log entries... but component does not re-render. I'm using latest version of react-hot-loader, webpack, webpack-dev-server.\n\nOnly thing I would add is that css changes did re-render. Components did not. \nSwitching to react-imported-component (only change) fixed it.. ",
    "ArtemBernatskyy": "Yeah. In this case, I realized that the issue was with React-Redux and as I downgraded from v6.0.0 to v5.1.1, it started working.\nSource: https://github.com/gaearon/react-hot-loader/issues/1049#issuecomment-451282865. ",
    "nwoltman": "No problem! Great to see that you got a fix ready so quickly \ud83d\ude03 . Fixed in version 4.1.3 \ud83c\udf89 . ",
    "DorianBlues": "in v4, when I change the method in some components, the hot reload not work, but if I change its parent components methods which as props pass to it, the hot reload worked fine. I wonder is this the same problem above\uff1f. ",
    "yangmingshan": "In our application, update a non-React module will cause page reload (not hot reload). Is this a right behavior? Or I'm using the wrong way.\nreact-hot-loader 4.1.2\nnode 9.11.1\nchrome 66\nmacOS 10.13.4. Our async-loader was written by myself, But I found the solution in react-imported-component. \nUse hot wrap the root component, async-loader reload async component after root component updated. No need to wrap async component's export.\nI'm not sure it's the right way, but it works. Thank you.. ",
    "mike1808": "@theKashey can you say how we can help with development to fix this issue?. ",
    "Alek-S": "The client project I am on observed the same error described above starting last week, which led to us needing to downgrade the hot-reloader version.. ",
    "oraricha": "@theKashey If you install RHL in a demo app, using npm, and look at line 1440 in react-hot-loader.development.js, you'll see what I'm talking about.. Sure, reactLifecyclesCompat is the polyfill function itself, instead of being an objet as the code assumes.\nIf I change the dist code from reactLifecyclesCompat.polyfill(AppContainer) to reactLifecyclesCompat(AppContainer) the code runs as expected, like I mention in the issue.. ",
    "chyzwar": "In my case there is conflict with material-ui@1.0.0-beta.37 that use reactLifecyclesCompat v1.. Honestly, I do not know. From what I can see my deps tree look this:\n\nnode_modules\nreact-lifecycle-compact-v1 (required by material-ui)\nreact-hot-loader\nreact-lifecycle-compact-v2\n\n\n\nI think that it might be a bug in webpack or misconfiguration on my side. I use webpack 4.6.0 with mostly standard settings.  . ",
    "brendonco": "@max-mykhailenko did that, didnt work. still getting the error:\nUncaught TypeError: reactLifecyclesCompat.polyfill is not a function\n    at eval (react-hot-loader.development.js:1398). ",
    "larsnystrom": "I can confirm that changing reactLifecyclesCompat.polyfill(AppContainer) to reactLifecyclesCompat(AppContainer) solves this issue.\nI have react-lifecycles-compat@v1 installed in my root node_modules and v3 installed in react-hot-loader/node_modules. So if the problem is that v1 is used instead of v3, then it appears this is a bug in webpack, right? I'm using webpack@4.8.3 right now.\n. ",
    "sibelius": "does this work with https://github.com/jamiebuilds/react-loadable?. do I need new webpack.HotModuleReplacementPlugin(), on my plugins?\nhow can I check which files are beeing hot reloaded?. there are some debug flags on hot reload module \n\nit is hot reloading all my files, when I change a single file\nhere https://github.com/webpack-contrib/webpack-hot-client/blob/master/lib/client/hot.js#L75 just show 1 file that I've changed\nhere https://github.com/webpack-contrib/webpack-hot-client/blob/master/lib/client/hot.js#L89 shows a list of all files that will the hot reload (15k files)\nnot sure if this is a bug on my code or webpack or webpack-hot-client or react-hot-loader.\nwe notice that we have some cyclic dependencies, not sure if this could cause some trouble\nwebpack-dev-server provides a faster hot reload than webpack-serve. I think the bug is on webpack hot module replacemente\nwe moved to parcel and worked well with the same react-hot-loader config. I prefer to use babel 7 to compile typescript. where can we add a failing test?. about a real unit test. I've made it here https://github.com/sibelius/react-hot-loader-codemod\nlet me know if you want to bring this code to this repo or add this to readme. ",
    "hedikasmanto": "Hi, I have found this issue too. Here is console.log while logLevel : debug\n```\nreact-hot-loader.development.js:89 React-hot-loader: reconcilation failed due to error TypeError: a.filter is not a function\n    at filterNullArray (react-hot-loader.development.js:990)\n    at eval (react-hot-loader.development.js:1147)\n    at Array.reduce ()\n    at transformFlowNode (react-hot-loader.development.js:1145)\n    at hotReplacementRender (react-hot-loader.development.js:1187)\n    at next (react-hot-loader.development.js:1204)\n    at eval (react-hot-loader.development.js:1236)\n    at Array.forEach ()\n    at hotReplacementRender (react-hot-loader.development.js:1192)\n    at next (react-hot-loader.development.js:1204)\nwarn @ react-hot-loader.development.js:89\nhotReplacementRender$1 @ react-hot-loader.development.js:1265\nreconcileHotReplacement @ react-hot-loader.development.js:1272\nrenderReconciler @ react-hot-loader.development.js:1286\nasyncReconciledRender @ react-hot-loader.development.js:1294\nproxiedRender @ react-hot-loader.development.js:585\nfinishClassComponent @ react-dom.development.js:8389\nupdateClassComponent @ react-dom.development.js:8357\nbeginWork @ react-dom.development.js:8982\nperformUnitOfWork @ react-dom.development.js:11814\nworkLoop @ react-dom.development.js:11843\nrenderRoot @ react-dom.development.js:11874\nperformWorkOnRoot @ react-dom.development.js:12449\nperformWork @ react-dom.development.js:12370\nperformSyncWork @ react-dom.development.js:12347\nrequestWork @ react-dom.development.js:12247\nscheduleWorkImpl @ react-dom.development.js:12122\nscheduleWork @ react-dom.development.js:12082\nenqueueForceUpdate @ react-dom.development.js:6682\nComponent.forceUpdate @ react.development.js:256\n(anonymous) @ react-hot-loader.development.js:1454\n(anonymous) @ react-hot-loader.development.js:1453\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1447\n(anonymous) @ react-hot-loader.development.js:1469\nhotSetStatus @ index.1805021233.bundle.js:203\nhotApply @ index.1805021233.bundle.js:552\n(anonymous) @ index.1805021233.bundle.js:290\nPromise.then (async)\nhotUpdateDownloaded @ index.1805021233.bundle.js:289\nhotAddUpdateChunk @ index.1805021233.bundle.js:266\nwebpackHotUpdateCallback @ index.1805021233.bundle.js:8\n(anonymous) @ 0.c2c184befe30004ade89.hot-update.js:1\n```\nvar filterNullArray = function filterNullArray(a) {\n  if (!a) return [];\n  return a.filter(function (x) {\n    return !!x;\n  });\n};\nI think filterNullArray will throw error if a is not null and is not array too. . ",
    "b12k": "Just find out that the problem is in order of component \"decorators\".\nconnect(mapStateToProps, mapDispatchToProps)(hot(module)(HomeSearchForm))\nSeems to work.\nAlso this component is used it other component which is also \"hot\".\nAnd I find out that \"connected\" components in order to be re-rendered after changes MUST be decorated with \"hot\".. ",
    "hhaidar": "@akhayoon @b12k upgrading to 4.5.2 worked for us.. ",
    "borm": "I had to return to react-transform-hmr, and right now it worked fine with react 16.3.2. nope, i ask you only about provide example how we should correct use it with react-redux. ",
    "renchap": "React 16.3 adds an easy way to setup ref forwarding, but you can do it manually so it still works with older React versions. The ref forwarding RFC gives examples of how it has been implemented before React 16.3.. Yes. Maybe implementing it manually using something like componentRef would work for now, and switch to a proper forwarded ref once support React < 16.3 is no longer required (probably once React 17 is released)?. PR with my proposed fix here: #1128. After some experiments, this might break things as initErrorOverlay may be called multiple times and DOMContentLoaded is only called once.\nI changed my PR to only defer the init after DOMContentLoaded if document.body does not exist, otherwise it runs immediately.. Closing as this has been fixed by another PR. ",
    "knoopx": "I get ProxyComponent not only on the root component but on all children. This is a pain point because development/production environments behave differently, so I have to rely into the deprecated findDOMNode in order to get proper DOM references instead of being able to just use the ref prop.. ",
    "brentertz": "WOPS!. ",
    "romanlex": "when will release 4.1.4? :). ",
    "Kaishiyoku": "Same issue here with this5 - when will this fix be released?. ",
    "MaskaZan": "@theKashey \n\nAs far as I know - RHL should not change the method, if regeneration fails. Are you sure about \"lost\"?\n\nIt is obvious that RHL calls toString of method to generate REACT_HOT_LOADER_SANDBOX and loses closure of the method\nYes, there all right with universal-handler when I add module.hot.accept to constructor: \n```\nclass SomeForm extends React.Component {\n   constructor() {\n      super()\n      this.state = { login: '' }\n      this.handle = handle(this)\n  if (module.hot) {\n     module.hot.accept('./universal-handler', () => {\n        this.handle = handle(this)\n     })\n  }\n\n}\n//...\n```\nBy the way, it would be cool to implement the hot method for calling after hot reload of non-component modules: \n```\nimport handle from './universal-handler'\nclass SomeForm extends React.Component {\n   constructor() {\n      super()\n      this.state = { login: '' }\n      this.handle = handle(this)\n   }\nhot() {\n      / required from non-component module ./universal-handler /\n      this.handle = handle(this)\n   }\nrender() {\n      return (\n         \n\n\n      )\n   }\n}\nexport default hot(module)(SomeForm)\n. @theKashey Thanks | \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u044b :). Ugly working example:\nimport { hot } from 'react-hot-loader'\nimport handle from './universal-handler'\nclass SomeForm extends React.Component {\n   constructor() {\n      super()\n      this.state = { login: '' }\n      this.handle = handle(this)\n  if (module.hot) {\n     module.hot.accept('./universal-handler', () => {\n        this.handle = handle(this)\n     })\n  }\n\n}\nrender() {\n      if (module.hot) {\n         //recalc every render\n         this.handle = handle(this)\n      }\n  return (\n     <form>\n        <input\n           type='text'\n           name='login'\n           value={this.state.login}\n           onChange={this.handle}\n        />\n     </form>\n  )\n\n}\n}\nexport default hot(module)(SomeForm)\n``. I got the same error usingcomponentDidUpdateIsn'tcomponentWillRecieveProps` not recomended?. ",
    "brainkim": "Probably related: https://github.com/gaearon/react-hot-loader/issues/984\nUsing lodash functions like throttle, or debounce (and probably any higher-order functions) to set instance methods i.e.\njavascript\nclass MyComponent extends React.Component {\n   /* other stuff */\n  parse = _.debounce(() => { parser.parse(this.props.content) });\n}\nwill throw a ReferenceError in a function called REACT_HOT_LOADER_SANDBOX.\n. Is there a specific reason hot-reloading is so broken for these common React use-cases (i.e. setting instance methods with higher-order-functions)? Is there a way to opt out of hot-reloading methods entirely? Considering my (and probably most people\u2018s) main use-case for hot reloading is to make small style tweaks, I feel it\u2019s so oblivious to cause components to throw random ReferenceErrors just so component methods aren\u2019t stale. I would gladly reload the page to update my component methods in normal development; I\u2019m not trying to demo a hot-reload tool at a React conference. It looks like there\u2018s a whole class of bugs besides the ones mentioned here (e.g. https://github.com/gaearon/react-hot-loader/issues/969) caused by not copying over the scope of methods. Maybe a solution might be to put the REACT_HOT_LOADER_SANDBOX function in a try catch block and defer to the original method if an error is thrown?\nSorry for the drive-by complaining, I\u2018ve just found this bug to be so annoying for the past few days. Don\u2019t have to bandwidth to debug/fix this either \ud83d\ude03  so this probably just comes across as entitled gassing. But if this is new behavior introduced by someone trying to optimize components to be even more hot-reload-y I\u2018d strongly urge y\u2018all to roll that baby back cuz it\u2018s unnecessary and broken.. ",
    "Oblosys": "I think I also ran into this problem with my lifecycle visualizer. I'll include the code, so you have another example. I use an HOC that passes a closure as a prop to the wrapped component, more or less like this:\n```jsx\nexport const wrap = (ComponentToWrap) => {\n  return class Wrapper extends React.Component {\n    constructor(props) {\n      super(props);\n  const x = 42;\n  this.SFC = () => <div>{x}</div>;\n}\n\nrender() {\n  return <ComponentToWrap SFC={this.SFC}/>;\n}\n\n}\n};\n```\nWhen editing the wrapped component, this fails on a hot reload with:\nVM497:11 Uncaught ReferenceError: x is not defined\n    at eval (eval at __reactstandin__regenerateByEval (bundle.js:38138), <anonymous>:11:9)\n    at ProxyFacade (bundle.js:27962)\n    at mountIndeterminateComponent (bundle.js:22979)\n    at beginWork (bundle.js:23418)\n    at performUnitOfWork (bundle.js:25448)\n    at workLoop (bundle.js:25487)\n    at HTMLUnknownElement.callCallback (bundle.js:9807)\n    at Object.invokeGuardedCallbackDev (bundle.js:9845)\n    at invokeGuardedCallback (bundle.js:9894)\n    at replayUnitOfWork (bundle.js:24901)\nThe problem was introduced by PR #950. Before that, editing the wrapped component was no problem, and when editing the HOC, changes to x would not be picked up by the hot reload (which was fine by me) but there were no crashes.. ",
    "bbenezech": "In my app with 4.2.0, components nested in context Providers lose their state when hot reloading happens.\nIs this expected atm? (-> basic support)\nThank you very much for the awesome support.. ",
    "NervosaX": "When making changes in my react component, inside a context provider, I get errors on this line:\nhttps://github.com/gaearon/react-hot-loader/commit/56fdd05a948a81624d80c1afa3b420b1c952cda7#diff-56f32a77d9820e3b9dc60ca87529a61cR341\nsaying that props is undefined on the child variable. Changing this to nextProps seems to solve the issue.\njavascript\nif (isContextProvider(child)) {\n  extraContext = new Map(extraContext);\n  extraContext.set(getContextProvider(child.type), child.nextProps.value);\n  childName = 'ContextProvider';\n}. @theKashey All good, I'll use my hack until then. Good luck!. Looks like 4.3.0 fixes this issue, can probably close this ticket now!. ",
    "Hzy0913": "@theKashey \n.babelrc\njavascript\n{\n  \"presets\": [\n    [\"env\", {\n      \"modules\": false,\n      \"targets\": {\n        \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n      }\n    }],\n    \"react\",\n    \"es2015\",\n    \"stage-0\"\n  ],\n  \"plugins\": [\"transform-runtime\", \"transform-decorators-legacy\", \"react-hot-loader/babel\"]\n}\nrouter\n```javascript\nimport React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {hot} from 'react-hot-loader';\nimport App from '../containers/app';\nimport Docs from '../containers/docs';\nconst Router = ({component: Component, children, ...rest}) => (\n   (\n      {children}\n    )}\n  />\n);\nconst Root = () => (\n \n\n\n\n\n\n\n\n\n);\nexport default hot(module)(Root);\n```\nwebpack\njavascript\n  devServer: {\n    hot: true,\n    inline: true,\n    contentBase: false,\n    compress: true,\n    host: HOST || config.dev.host,\n    port: PORT || config.dev.port,\n    open: config.dev.autoOpenBrowser,\n  }\n. @theKashey \nwhen i change the state will not trigger hot-reload,  but modify the jsx or css is normal working. . @theKashey\nemmm...  the \"state\" of react. OK, thank you for your answer\ud83d\ude0a. ",
    "stnwk": "Doesn't work for me either :(. ",
    "nick13jaremek": "@theKashey Thank you for the clarification.\nI was following instructions from a book to enable hot-reloading on the styling of a Button component, as outlined in my previous comment.\nHowever, due to a personal typo, I noticed that the style variable in the Button component must be outside the Button class definition. Then, changing this style variable would update the component styling, while persisting its state. I achieved so after fixing the typo. \nMy apologies for not noticing the typo earlier. Now it all makes sense based on your response.\n. ",
    "ljharb": "It wouldn\u2019t be reasonable to ask components that need to not be hot, to add a dep on react-got-loader.\nAny mechanism for this should be something that doesn\u2019t require adding this dep.. @thekashey yes, that\u2019s true. But if hot loader won\u2019t choose to be safe out of the box, then it seems right to offer an output that minimally inconveniences third parties.. ",
    "balciseri": "clone https://github.com/balciseri/RHL-bug\nrun yarn\nrun yarn start\nnavigate to http://localhost:3001/\nnow open `.\\client\\components\\App.jsx\ntry to modify the string <p>Modify me and save!</p>\nConsole output:\n\n```\n[HMR] bundle rebuilding\nclient.js:242 [HMR] bundle rebuilt in 487ms\nprocess-update.js:41 [HMR] Checking for updates on the server...\nprocess-update.js:114 [HMR] Updated modules:\nprocess-update.js:116 [HMR]  - ./client/components/App.jsx\nprocess-update.js:121 [HMR] App is up to date.\nreact-hot-loader.development.js:159 React-hot-loader: reconcilation failed due to error ReferenceError: areArgumentsShallowlyEqual is not defined\n    at ProxyComponent.eval [as testSelector] (eval at __reactstandin__regenerateByEval (App.jsx:22), :9:5)\n    at ProxyComponent.render (App.jsx:15)\n    at ProxyComponent.hotComponentRender (react-hot-loader.development.js:608)\n    at render (react-hot-loader.development.js:1112)\n    at hotReplacementRender (react-hot-loader.development.js:1241)\n    at next (react-hot-loader.development.js:1259)\n    at react-hot-loader.development.js:1323\n    at Array.forEach ()\n    at hotReplacementRender (react-hot-loader.development.js:1246)\n    at next (react-hot-loader.development.js:1259)\nwarn @ react-hot-loader.development.js:159\nhotReplacementRender$1 @ react-hot-loader.development.js:1352\nreconcileHotReplacement @ react-hot-loader.development.js:1359\nrenderReconciler @ react-hot-loader.development.js:1373\nasyncReconciledRender @ react-hot-loader.development.js:1381\nproxiedRender @ react-hot-loader.development.js:615\nfinishClassComponent @ react-dom.development.js:13085\nupdateClassComponent @ react-dom.development.js:13047\nbeginWork @ react-dom.development.js:13715\nperformUnitOfWork @ react-dom.development.js:15741\nworkLoop @ react-dom.development.js:15780\nrenderRoot @ react-dom.development.js:15820\nperformWorkOnRoot @ react-dom.development.js:16437\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nVM400:9 Uncaught ReferenceError: areArgumentsShallowlyEqual is not defined\n    at ProxyComponent.eval [as testSelector] (eval at __reactstandin__regenerateByEval (App.jsx:22), :9:5)\n    at ProxyComponent.render (App.jsx:15)\n    at ProxyComponent.hotComponentRender (react-hot-loader.development.js:608)\n    at ProxyComponent.proxiedRender (react-hot-loader.development.js:616)\n    at finishClassComponent (react-dom.development.js:13085)\n    at updateClassComponent (react-dom.development.js:13047)\n    at beginWork (react-dom.development.js:13715)\n    at performUnitOfWork (react-dom.development.js:15741)\n    at workLoop (react-dom.development.js:15780)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:100)\n(anonymous) @ VM400:9\nrender @ App.jsx:15\nhotComponentRender @ react-hot-loader.development.js:608\nproxiedRender @ react-hot-loader.development.js:616\nfinishClassComponent @ react-dom.development.js:13085\nupdateClassComponent @ react-dom.development.js:13047\nbeginWork @ react-dom.development.js:13715\nperformUnitOfWork @ react-dom.development.js:15741\nworkLoop @ react-dom.development.js:15780\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\nreplayUnitOfWork @ react-dom.development.js:15194\nrenderRoot @ react-dom.development.js:15840\nperformWorkOnRoot @ react-dom.development.js:16437\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nreact-dom.development.js:14113 The above error occurred in the  component:\n    in App (created by HotExportedApp)\n    in AppContainer (created by HotExportedApp)\n    in HotExportedApp\nReact will try to recreate this component tree from scratch using the error boundary you provided, AppContainer.\nlogCapturedError @ react-dom.development.js:14113\nlogError @ react-dom.development.js:14152\ncallback @ react-dom.development.js:14838\ncallCallback @ react-dom.development.js:10764\ncommitUpdateQueue @ react-dom.development.js:10808\ncommitLifeCycles @ react-dom.development.js:14264\ncommitAllLifeCycles @ react-dom.development.js:15342\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\ncommitRoot @ react-dom.development.js:15481\ncompleteRoot @ react-dom.development.js:16496\nperformWorkOnRoot @ react-dom.development.js:16440\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nreact-hot-loader.development.js:166 ReferenceError: areArgumentsShallowlyEqual is not defined\n    at ProxyComponent.eval [as testSelector] (eval at __reactstandin__regenerateByEval (App.jsx:22), :9:5)\n    at ProxyComponent.render (App.jsx:15)\n    at ProxyComponent.hotComponentRender (react-hot-loader.development.js:608)\n    at ProxyComponent.proxiedRender (react-hot-loader.development.js:616)\n    at finishClassComponent (react-dom.development.js:13085)\n    at updateClassComponent (react-dom.development.js:13047)\n    at beginWork (react-dom.development.js:13715)\n    at performUnitOfWork (react-dom.development.js:15741)\n    at workLoop (react-dom.development.js:15780)\n    at renderRoot (react-dom.development.js:15820)\nerror @ react-hot-loader.development.js:166\ncomponentDidCatch @ react-hot-loader.development.js:1455\ncomponentDidCatch @ react-hot-loader.development.js:568\ncallback @ react-dom.development.js:14839\ncallCallback @ react-dom.development.js:10764\ncommitUpdateQueue @ react-dom.development.js:10808\ncommitLifeCycles @ react-dom.development.js:14264\ncommitAllLifeCycles @ react-dom.development.js:15342\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\ncommitRoot @ react-dom.development.js:15481\ncompleteRoot @ react-dom.development.js:16496\nperformWorkOnRoot @ react-dom.development.js:16440\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nVM402:9 Uncaught ReferenceError: areArgumentsShallowlyEqual is not defined\n    at ProxyComponent.eval [as testSelector] (eval at __reactstandin__regenerateByEval (App.jsx:22), :9:5)\n    at ProxyComponent.render (App.jsx:15)\n    at ProxyComponent.hotComponentRender (react-hot-loader.development.js:608)\n    at ProxyComponent.proxiedRender (react-hot-loader.development.js:616)\n    at finishClassComponent (react-dom.development.js:13085)\n    at updateClassComponent (react-dom.development.js:13047)\n    at beginWork (react-dom.development.js:13715)\n    at performUnitOfWork (react-dom.development.js:15741)\n    at workLoop (react-dom.development.js:15780)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:100)\n(anonymous) @ VM402:9\nrender @ App.jsx:15\nhotComponentRender @ react-hot-loader.development.js:608\nproxiedRender @ react-hot-loader.development.js:616\nfinishClassComponent @ react-dom.development.js:13085\nupdateClassComponent @ react-dom.development.js:13047\nbeginWork @ react-dom.development.js:13715\nperformUnitOfWork @ react-dom.development.js:15741\nworkLoop @ react-dom.development.js:15780\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\nreplayUnitOfWork @ react-dom.development.js:15194\nrenderRoot @ react-dom.development.js:15840\nperformWorkOnRoot @ react-dom.development.js:16437\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nreact-dom.development.js:14113 The above error occurred in the  component:\n    in App (created by HotExportedApp)\n    in AppContainer (created by HotExportedApp)\n    in HotExportedApp\nConsider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.\nlogCapturedError @ react-dom.development.js:14113\nlogError @ react-dom.development.js:14152\nupdate.callback @ react-dom.development.js:14809\ncallCallback @ react-dom.development.js:10764\ncommitUpdateQueue @ react-dom.development.js:10808\ncommitLifeCycles @ react-dom.development.js:14283\ncommitAllLifeCycles @ react-dom.development.js:15342\ncallCallback @ react-dom.development.js:100\ninvokeGuardedCallbackDev @ react-dom.development.js:138\ninvokeGuardedCallback @ react-dom.development.js:187\ncommitRoot @ react-dom.development.js:15481\ncompleteRoot @ react-dom.development.js:16496\nperformWorkOnRoot @ react-dom.development.js:16440\nperformWork @ react-dom.development.js:16358\nperformSyncWork @ react-dom.development.js:16330\nrequestWork @ react-dom.development.js:16230\nscheduleWork$1 @ react-dom.development.js:16096\nenqueueForceUpdate @ react-dom.development.js:11222\n./node_modules/react/cjs/react.development.js.Component.forceUpdate @ react.development.js:291\n(anonymous) @ react-hot-loader.development.js:1542\n(anonymous) @ react-hot-loader.development.js:1541\nsetTimeout (async)\nupdateInstances @ react-hot-loader.development.js:1535\n(anonymous) @ react-hot-loader.development.js:1557\nhotSetStatus @ bootstrap:206\nhotApply @ bootstrap:587\ncb @ process-update.js:66\n(anonymous) @ process-update.js:82\nPromise.then (async)\ncheck @ process-update.js:81\n./node_modules/webpack-hot-middleware/process-update.js.module.exports @ process-update.js:42\nprocessMessage @ client.js:268\nhandleMessage @ client.js:136\nhandleMessage @ client.js:99\nreact-dom.development.js:16419 Uncaught ReferenceError: areArgumentsShallowlyEqual is not defined\n    at ProxyComponent.eval [as testSelector] (eval at __reactstandin__regenerateByEval (App.jsx:22), :9:5)\n    at ProxyComponent.render (App.jsx:15)\n    at ProxyComponent.hotComponentRender (react-hot-loader.development.js:608)\n    at ProxyComponent.proxiedRender (react-hot-loader.development.js:616)\n    at finishClassComponent (react-dom.development.js:13085)\n    at updateClassComponent (react-dom.development.js:13047)\n    at beginWork (react-dom.development.js:13715)\n    at performUnitOfWork (react-dom.development.js:15741)\n    at workLoop (react-dom.development.js:15780)\n    at renderRoot (react-dom.development.js:15820)\n</details>. Thanks for the fast answers. I tought the same after reading https://github.com/gaearon/react-hot-loader/issues/978.\nI'm not quite sure where to put Try/Catch or Errorboundary dho ( i tried in different places but it still just errors out).\nAre there any \"ugly\" tricks to make this work until a fix is found?. Great!\nIn the meanwhile I did as you said and it works, so the problems are really mostly just in the constructor \ud83d\ude2e\nFrom:\nclass App extends React.Component {\n  state = {\n    count: 0\n  };\ntestSelector = createSelector(state => state.count, count => Count is: ${count});\nrender() {\n    const testSelector = this.testSelector(this.state);\n    return (\n      \n{testSelector}\nModify me and saves!\n\n    );\n  }\n}\nto\nclass App extends React.Component {\n  state = {\n    count: 0\n  };\n  componentWillMount() {\n    this.testSelector = createSelector(\n      state => state.count,\n      count => Count is: ${count}\n    );\n  }\nrender() {\n    const testSelector = this.testSelector(this.state);\n    return (\n      \n{testSelector}\nModify me and saves!!\n\n    );\n  }\n}\n``` . I can confirm this fixed my reselect issues.\nThanks a lot. ",
    "crazyx13th": "ok found the popblem... because of the install method you define (this char (I never use this) )\n\nbecause than he install v49 (see https://github.com/babel/babel/issues/8049)\n\nthe best whould be to push a package-lock.json too inside your examples, than everyone have the same versions (submodules too)\nsolution:\n- delete node_modules folder\n- just remove all ^ characters from package.json\n- replace all beta46 to 47\n- npm i\nthan you have the latest working version 47\njson\n{\n  \"name\": \"hot-typescript\",\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --hot\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"7.0.0-beta.47\",\n    \"@babel/plugin-syntax-decorators\": \"7.0.0-beta.47\",\n    \"@babel/plugin-syntax-jsx\": \"7.0.0-beta.47\",\n    \"@babel/plugin-syntax-typescript\": \"7.0.0-beta.47\",\n    \"awesome-typescript-loader\": \"3.4.1\",\n    \"babel-loader\": \"8.0.0-beta.2\",\n    \"html-webpack-plugin\": \"2.30.1\",\n    \"typescript\": \"2.6.2\",\n    \"webpack\": \"3.10.0\",\n    \"webpack-dev-server\": \"2.9.7\"\n  },\n  \"dependencies\": {\n    \"@babel/preset-env\": \"7.0.0-beta.47\",\n    \"@types/react\": \"16.0.31\",\n    \"@types/react-dom\": \"16.0.3\",\n    \"react\": \"16.2.0\",\n    \"react-dom\": \"16.2.0\",\n    \"react-hot-loader\": \"4.1.2\"\n  }\n}\nthx!\nGreetings\ncrazyx13th\n. ok, sorry my fault... you using yarn (yarn.lock). on friday at the end of the day I was thinking the errors are normal \"any-problems\" But today I wonder where these errors come from :-/ \nkey?, code? ...\n\nthx!. ",
    "DingoEatingFuzz": "Cold components sounds awesome! Sounds like the blacklist feature I was looking for \ud83d\ude04 . Interesting. I'll try to make a repro repo.. ",
    "alozytskyi": "@theKashey not fixed by default in v4.3.0. Also error points not to a library but to the one of constructors of a component, so I'm unsure how excluding a component from hot reloading would help. It'd be the same as disabling the hot loader entirely, because it crashes randomly with different classes.. ",
    "hustKiwi": "I met the same error when upgrading from 4.3.12 to the latest 4.6.3. Everything seems to be fine at version 4.3.12 even though my project is using react 16.6.3.. ",
    "xinggangling": "nice. \u6211\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898. \n. ",
    "embiem": "Thanks for responding so quickly! <3. ",
    "kkseven07": "Updated the issue, what else I should show? Everything worked with RHL 1.2.9, I know that its pretty old version. I added export default hot(module)(Root) to my root component according to documentation with v4.. It didnt help, babel loader requires installed babel-core. Or is there smth i'm doing wrong?. ",
    "kroko": "Morning. That was fast, thanks! \ud83d\ude04 . ",
    "RonanQuigley": "Thanks for the clarification. \nPerhaps I'm misunderstanding how react & hot reloading works here, but why should every single component need to be updated below a child component if it's a basic style change like changing a colour? \nYeah, if it's not a bug, it's still an insane performance hit. This is what happens when I change just the width of a div in one component in my current project:\n\nYour \"force render components 2 or more times\" bit might explain then when this is happening in my current application. Is there anyway to get around this performance problem? At the least, as you said, both applications should not be re-rendered. This also extends to applications rendered in separate react containers.\n\nSo - everything here, except secondary Application re-render is not a bug, and even not bound to RHL, cos the \"size\" of update comes from webpack.\n\nI'm not sure what you mean by this, could you be more specific?\nEDIT\nJust to add, I've noticed that this issue is also compounded with higher order components. Each additional one creates an additional call to render.. Tried adding the logger in my app, but there's no real difference in the output. That could just mean there is nothing to log via debug though. The only time I can ever get debug logging info is if I were to remove some of the apps from the container by just commenting them out. I'll get something like this:\n```\nreact-hot-loader.development.js:168 React-hot-loader: a withState(WithStyles(Charts)) was found where a Component was expected.\n          class withState extends _react.PureComponent {constructor(...args) {var _temp;return _temp = super(...args), _defineProperty(this, \"state\",\n  {\n    value: 0 }), _defineProperty(this, \"onChange\",\n\n\n  (event, value) => {\n    this.setState({ value });\n  }), _temp;}\n\nrender() {\n  const props = _extends({}, this.props);\n  const { value } = this.state;\n\n  return (\n    _react.default.createElement(WrappedComponent, _extends({\n      value: value,\n      onChange: this.onChange },\n    props)));\n\n\n} // @ts-ignore\n__reactstandin__regenerateByEval(key, code) {// @ts-ignore\n  this[key] = eval(code);}}\n\n```\nBut I don't think that has anything to do with the problem. \n\nBut that will update ALL components below hot. Or just all, if you have a single hot.\n\nYes but that doesn't explain why it happens \ud83d\ude04  \nMy understanding is that react updates only what needs to be updated in the tree i.e. this is what is happening in my large app I'm working on: \n\nI'm just doing a simple style change and only the elements which are effected by that change update in the tree at least..... \nSo would this issue happen even without react-hot-loader? \n\nAbout this behavior - no. About performance problem - might be.\n\nHmm okay then what has your strategy been when developing apps that use arrays of child components? Has this been an issue you've come up against before?\n. I think I'm misunderstanding what you're asking here, but I mean literally all I'm doing is commenting out a set of components, so I don't see why that could be related to this problem? This is the code I was commenting parts out:\n<React.Fragment>\n    <CssBaseline />\n    // this was commented out and the warning shows up\n    {/* <div className={classes.topChartsContainer}>\n        <div id=\"artists\" className={artists}>\n            <Charts {...childProps.artists} />\n        </div>\n        <div id=\"tracks\" className={tracks}>\n            <Charts {...childProps.tracks} />\n        </div>\n    </div>*/}\n    <div id=\"audio-features-container\">\n        <Pie {...childProps.key} />\n        <Pie {...childProps.mode} />\n        <Polar {...childProps.average} />\n    </div>\n</React.Fragment>\n I do have a HOC for managing state like so:\n```\nexport default function(WrappedComponent) {\n    class withState extends PureComponent {\n        static propTypes = {\n            classes: PropTypes.object\n        };\n    state = {\n        value: 0\n    };\n\n    onChange = (event, value) => {\n        this.setState({ value });\n    };\n\n    render() {\n        const { ...props } = this.props;\n        const { value } = this.state;\n\n        return (\n            <WrappedComponent\n                value={value}\n                onChange={this.onChange}\n                {...props}\n            />\n        );\n    }\n}\n// withState.displayName = `withState(${getDisplayName(WrappedComponent)})`;\nreturn withState;\n\n}\n```\nI commented out the displayName code as I thought that was what you were referring to as causing the bug in your post. But it makes no difference. \n\nI need childType and stackChild.type. They are not swappable as long got different names, but are they actually the same, or RHL \"render\" process go wrong?\n\nI don't know what you mean here, sorry. . Sure, but what about the other issue? Maybe connected or separate?. Hmm well in this case it's not. My webpack rebuilds currently take around half a second. If I use all apps the hot reloading react on the client is about double that. Commenting out child components brings that down. ",
    "RyanCCollins": "Forgive me for hijacking this issue, but I feel I have a related issue.\nI'm working in a rather large-scale react application for my job.  We are using react-hot-loader and it has been not working for a long time (fully reloads the browser on each update).  For each of our module folders (Screens, Components, etc.) we export the modules in that directory in a root index.js file and then re-import them across our application's features.\nThe only thing that I've found that fixes our hot-reloading is adding the hot HOC to any module I want to hot reload.  For example, I've added them to our Screens in one of our features and those screens will now hot reload.  We have hundreds (maybe even close to thousands) of modules/components, so it would not at all be feasible to have to go add the HOC to every component.  Furthermore, it seems that our non-component files will not hot reload either (selectors, utils, reducers, etc.)  Is this expected behavior in RHL?  Is there anything else we can do that will make RHL \"Just Work\" for our application?. I am seeing this as well.  Is there a setting to hide this error from the console?. ",
    "mnemanja": "this is a reference to the react component in which the method resides and it tries to access it.\nI do not think I'm doing anything wrong react-wise. How can this be fixed?. I can confirm that it's been fixed with v4.3.3.. ",
    "newerik": "I tried to import core-js/es6/weak-map in the file where I import react-hot-loader, but it still causes error in IE 9 and IE 10.\nIn a hope that I gave a hint, was someone able to make it work in the mentioned legacy browsers?. Found the problem!\nI had react-hot-loader/patch included in the Webpack config.\nhttps://github.com/gaearon/react-hot-loader#no-patch-required\nUsing Webpack v4.20.2 and react-hot-loader v4.3.12 by the way.\nOnce I removed it, the application started to work without error in IE 9 and IE 10. No need to import core-js/es6/weak-map polyfill!\nreact-hot-loader is imported only in the entry index.js file and added in .babelrc like in the documentation:\nhttps://github.com/gaearon/react-hot-loader#getting-started. ",
    "DiscoDancer": "upd: fixed by removing all ^ in package.json. @theKashey Hi, I can do. Also since the last change of @types/react in ts example constructor should be changed as well. https://github.com/DefinitelyTyped/DefinitelyTyped/issues/26898 . But with babel issue I am not sure, that removing ^ symbols is a good approach.  What do you think?. Completely deleted NodeJS and npm (including removing all caches and global packages), then installed the latest stable NodeJS and manually updated npm to the latest.\nAnd now it works with no issues.  . ",
    "Akuukis": "Makes sense. Should we add warning to README and merge, or leave this PR until babel 7 becomes stable?\n. @theKashey are we good to proceed?. ",
    "dminkovsky": "Update: hot reloading seems to be working well. I get this warning in general, though, for various relay queries that got compiled by the relay compiler into the form above, with the require().. @theKashey thanks for your response. Yes, I've observed sometimes some old code is left unreplaced after a reload. It seems like a reload replaces code, but then code that was replaced by a prior reload gets \"unreplaced.\" It's odd. I'm still observing it as I develop.\nI do get the \"unexpected require($relayQuery) from disposed module\" warning not just for the hot App module but for modules in general that have these Relay compiler requires.\nAnyway, this current setup is still a big improvement for me over my 3.0.0 configuration, which wasn't configured properly to retain state. Wondering what the issue is though.. Is that a problem or should I close the issue?. It seems to be working very well. Thank you.. @theKashey Haha! I updated to v3 at around the same time it reached its end too :). Very good. Makes sense, thank you again. It's been very fun seeing individual functions swapped out. . ",
    "ludwigbacklund": "Would be cool to have this fixed! \ud83d\ude07. ",
    "codejamninja": "You can ignore just this error using the ignore-warnings npm module.\nhttps://www.npmjs.com/package/ignore-warnings\n```js\nimport ignoreWarnings from 'ignore-warnings';\nignoreWarnings('error', [\n  'reconciliation failed could not dive into'\n]);\n```\n. Ok, I'll pull it out of the server side. Thanks, that worked. ",
    "daviddelusenet": "I'm getting this error since I've upgraded to Styled Components V4.. It trashes my console and the hot reloading also stops working. \nMore people are having the same problem: https://spectrum.chat/thread/1f4aaadf-8d9e-4d36-b7ff-2f58c756ab9a. @theKashey thanks for the quick response! \nI removed my @types/react-hot-loader dependency, removed my node_modules folder and ran npm install.\nHowever, the error is still there.. Yes, I think it was a tsconfig.json setting. When I added:\n\"moduleResolution\": \"node\"\nThe errors went away!. ",
    "danielbayerlein": "@probablyup Do you have any idea if this is due to @styled-components?. ",
    "probablyup": "@philiiiiiipp the reapplying css thing is a known bug that will be fixed shortly: https://github.com/styled-components/styled-components/pull/2188\nAs far as HMR goes, I'm not sure. Does RHL have any compat issues with React.forwardRef? That and using the new context implementation is the only real change that would affect HMR in v4.. ",
    "thomasbertet": "@theKashey Is this considered fixed with latest release ? ie. 4.6.0 ? \nI still see this error and was wondering if its on my side the issue or if this is still work to do on this. \nThanks for your help & work on this library, we all appreciate what you do. . ",
    "UselessPickles": "Is there any estimate for when this will be done? I am currently trying to upgrade a project from Webpack 3 to Webpack 4 (and React Hot Loader 3 -> 4). This new requirement to use Babel for TS is a major hurdle because Babel has some limitations with processing TS. \nSpecifically, Babel does not support namespaces, and this project uses namespaces. Changing the project to not use namespaces is not practical. Therefore, I simply cannot use Babel to process my Typescript code, and I cannot use React Hot Loader :(\nEven if there wasn't this issue with namespaces, it's quite obnoxious to setup babel to process Typescript for the sole purpose of React Hot Loader when nothing else about this project requires Babel.. While waiting for progress on this issue, I've been trying to get webpack 4 + typescript + react-hot-loader working in my project by using babel with minimal configuration to process the output of ts-loader. So the loaders for my .ts/.tsx files looks a bit like this:\nts\n{\n    use: [\n        {\n            loader: \"babel-loader\",\n            options: {\n                cacheDirectory: true,\n                babelrc: false,\n                plugins: [\"react-hot-loader/babel\"]\n            }\n        },\n        {\n            loader: \"ts-loader\",\n            options: {\n                transpileOnly: true,\n                compilerOptions: {\n                    sourceMap: isSourceMap,\n                    isolatedModules: true,\n                    noEmitOnError: false\n                }\n            }\n        }\n    ]\n}\nBut I can't get HMR to work for react components. \nAfter enabling debug logging, I see output like this in the console:\n\nreact-hot-loader.development.js?c2cb:181 React-hot-loader: unable to merge  (3)\u00a0[{\u2026}, {\u2026}, {\u2026}] and children of  {type: \"div\", children: Array(2), instance: {\u2026}}\nreact-hot-loader.development.js?c2cb:181 in Component (6)\u00a0[{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}]\n\nSo clearly, react-hot-loader is trying to apply the hot updates, but can't for some reason (the reason is not specified in plain human readable text, and I don't know how to analyze the complex structures in the logs to determine the reason).\nI am using the hot HOC for the top-level \"App\" component of my application, and the hot() version of the component is the one that is exported and rendered.\nMy suspicion is that my problem is caused by the use of 3rd party react components from node_modules that are NOT processed through babel (and therefore not processed by react-hot-loader). Do I have to process all node_modules code (or at least all react component code) through the babel plugin to get HMR working properly?. Nevermind; I setup my project to run ALL node_modules code through babel, and I still have the problem. So my problem is unrelated to this issue. I'll create a new issue if I can narrow it down to something more specific than, \"I can't get HMR to work\" (it seems to be a limitation/bug related to some 3rd party react components; some hot react updates DO work just fine, but updates to my components that are presented within a BlueprintJS Dialog do not hot update correctly, for example).. > Could be React 15 portals. They are breaking normal update processing\nThat seems likely. I only seem to encounter this problem when making code changes to a component that is rendered within a component that uses a portal.\nAre there any feasible plans to make react-hot-loader work better with Portals, or is this an unfortunate limitation we're stuck with forever?\nAnd back on topic... any news on reimplementing a webpack loader so that Babel is not required?. Could you clarify how the webpack plugin \"is not compatible with class-based components\"? (quote from the README section about the webpack plugin) \nI assume a \"class-based component\" is any component that is a class that extends React.Component?\nWhat incorrect behavior will I experience with the webpack plugin if my project uses class-based components?. Thanks for the explanation. I think it would be helpful to add an explanation like this to the README.. ",
    "HeavenSky": "\u521a\u521a\u505a\u7684\u603b\u7ed3\u4f60\u770b\u770b \nhttps://github.com/HeavenSky/webpack-frames#react-hot-loader-4x\n\u7b2c\u56db\u6761 \u542f\u52a8\u547d\u4ee4\u4f7f\u7528 --hot, \u914d\u7f6e\u5c31\u4e0d\u8981\u7528 HotModuleReplacementPlugin\n\u4e0b\u9762\u662f\u6284\u7684 https://segmentfault.com/a/1190000012814005 \u4f60\u53ef\u4ee5\u5bf9\u7167\u6392\u9519\nUncaught RangeError: Maximum call stack size exceeded\n\u5f53\u4f7f\u7528WebpackDevServer CLI\u6807\u5fd7--hot\u65f6\uff0c\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528HotModuleReplacementPlugin()\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u5b83\u4eec\u662f\u4e92\u65a5\u7684\uff0c\u4f46\u662f\u6240\u671f\u671b\u7684\u6548\u679c\u5c06\u9002\u7528\u4e8e\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\n. change stack.children.push into (stack.children||[]).push can work fine. why not try to Compatible with this. @theKashey.  @theKashey\nMy temporary solution is\njs\nconst F = \"node_modules/react-hot-loader/dist/react-hot-loader.development.js\";\nif (fs.existsSync(dir(F))) {\n    let str = fs.readFileSync(dir(F), \"utf-8\");\n    str = str.replace(/stack.children.push/g, '(stack.children||[]).push');\n    fs.writeFileSync(dir(F), str, \"utf-8\");\n}\n. @theKashey   I got it.   Thanks very much for your patient answer.. ",
    "SamMorrowDrums": "I should mention I did try running a find replace for babel-plugin-external-helpers -> @babel/external-helpers\" but it didn't do the trick.. @theKashey  Thanks for response. Well when I add the Babel plugin to my webpack 4 build (with Babel 7) I get this error:ReferenceError: [BABEL] app/app.js: Unknown option: .visitor.` I understand that the dev-deps don't matter, but my build works until I use this plugin - so something isn't working with Babel 7 as far as I can tell.\nIt's an experimental branch for me, so I'm not in a rush - but I don't know yet what is causing the bug - as I say, the build works just fine without the presets: ['react-hot-loader/babel'], in the babel loader.. OK  I'll close for now - if I find the issue I'll comment, but it's strange that it's only when this plug-in is active that I get the error - so not sure what part of the config is messing with things.. As Was the case for me, it only encounters this issue with RHL so I'm not\nsure where to start debugging if it's not related to RHL. It seems crazy\nthat it would only happen with this lib, but that it would simultaneously\nbe unrelated.\nOn Wed, 29 Aug 2018, 23:55 Anton Korzunov, notifications@github.com wrote:\n\n@thcolin https://github.com/thcolin - and only with RHL enabled? Have\nyou updated babel loader to match version 7?\nYou can also use yarn resolutions to force babel-core to point to version\n7 bridge, \"fixing\" all the not yet migrated tools.\nI am afraid, but there is nothing we could fix on our side.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/gaearon/react-hot-loader/issues/1043#issuecomment-417133296,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AElqXqKKbbTSKcNS2hsOnx1MF4IqTcXgks5uVxvGgaJpZM4VylFW\n.\n. @theKashey yep! As OP I am extremely happy to report that I can now use react hot loader with Babel 7. Thanks for the hard work. I'll close this, as I think that other issues can be reported separately, and there is already a PR up for some final work!. I was about to say the same basically. If npm\n\nnpm cache-clear --force\nrm -r node_modules\nrm package-lock.json \nnpm install\n\nI also set cache to false, then build and then added back cache directory\nand it all worked for me.\n. ",
    "petermikitsh": "It appears some changes might be needed. I'm using Babel 7 (7.0.0-rc.1) and react hot loading is broken. . ",
    "thcolin": "Got same issue with @babel/core^7.0.0 and webpack^4.17.1\nModule build failed (from ./node_modules/babel-loader/lib/index.js):\nReferenceError: [BABEL] ./src/index.js: Unknown option: .visitor.. I tried 4.3.7 and got same issue, here's my babel config : \n{\n  \"presets\": [\"@babel/env\", \"@babel/react\", \"react-hot-loader/babel\"] \n}\nwith my package.json : \njson\n{\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.1\",\n    \"@babel/preset-env\": \"^7.0.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-jest\": \"^23.6.0\",\n    \"babel-loader\": \"^8.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"react-hot-loader\": \"^4.3.7\",\n    \"webpack\": \"^4.18.1\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-server\": \"^3.1.8\"\n  }\n}. Sorry \ud83d\ude22 \n[BABEL] src/index.js: Unknown option: .visitor.\nWill try to give you a codesandbox later today. ",
    "villesau": "This is what we started to get after updating to babel 7, and only after adding RHL to babelrc:\n```\nfe-unit-tests_1   | Module build failed: TypeError: Cannot read property 'push' of null\nfe-unit-tests_1   |     at PluginPass.ExportDefaultDeclaration (/frontend/node_modules/react-hot-loader/dist/babel.development.js:83:36)\nfe-unit-tests_1   |     at newFn (/frontend/node_modules/@babel/traverse/lib/visitors.js:193:21)\nfe-unit-tests_1   |     at NodePath._call (/frontend/node_modules/@babel/traverse/lib/path/context.js:53:20)\nfe-unit-tests_1   |     at NodePath.call (/frontend/node_modules/@babel/traverse/lib/path/context.js:40:17)\nfe-unit-tests_1   |     at NodePath.visit (/frontend/node_modules/@babel/traverse/lib/path/context.js:88:12)\nfe-unit-tests_1   |     at TraversalContext.visitQueue (/frontend/node_modules/@babel/traverse/lib/context.js:118:16)\nfe-unit-tests_1   |     at TraversalContext.visitSingle (/frontend/node_modules/@babel/traverse/lib/context.js:90:19)\nfe-unit-tests_1   |     at TraversalContext.visit (/frontend/node_modules/@babel/traverse/lib/context.js:146:19)\nfe-unit-tests_1   |     at Function.traverse.node (/frontend/node_modules/@babel/traverse/lib/index.js:94:17)\nfe-unit-tests_1   |     at traverse (/frontend/node_modules/@babel/traverse/lib/index.js:76:12)\n```. @theKashey No luck here either:\n15:30:38 [Frontend tests] fe-unit-tests_1   | Module build failed: TypeError: Cannot read property 'push' of undefined\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at PluginPass.ExportDefaultDeclaration (/frontend/node_modules/react-hot-loader/dist/babel.development.js:83:30)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at newFn (/frontend/node_modules/@babel/traverse/lib/visitors.js:193:21)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath._call (/frontend/node_modules/@babel/traverse/lib/path/context.js:53:20)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath.call (/frontend/node_modules/@babel/traverse/lib/path/context.js:40:17)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath.visit (/frontend/node_modules/@babel/traverse/lib/path/context.js:88:12)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visitQueue (/frontend/node_modules/@babel/traverse/lib/context.js:118:16)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visitSingle (/frontend/node_modules/@babel/traverse/lib/context.js:90:19)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visit (/frontend/node_modules/@babel/traverse/lib/context.js:146:19)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at Function.traverse.node (/frontend/node_modules/@babel/traverse/lib/index.js:94:17)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at traverse (/frontend/node_modules/@babel/traverse/lib/index.js:76:12). @theKashey works for me, thanks! :) Can you shed light on what was the culprit? I'm just curious.. @theKashey @loganfsmyth you asked for repro, here is pretty much smallest one I came up with: https://github.com/villesau/react-hot-loader-error. @theKashey In this case, looks like that. Hard to say what caused it as react-hot-loader, babel and babel-plugin-rewire has changed recently. reason might be some of them, or combination.\n\nWhy not to use jest, rewiremock, proxyquire, mockery or td instead?\n\nLegacy reasons, we have complicated test suite with 7.5k tests relying on this approach. And it works decently anyways.. @theKashey latest release fixed my issue, thanks a lot!. Do you have any vision what could cause the throwing? I could try to reduce the repro based on that. In our case: Everything worked fine in browser, and when running mocha tests. But when running our older test suite using karma/jasmine/headless chrome stack, following error happened:\n15:30:38 [Frontend tests] fe-unit-tests_1   | Module build failed: TypeError: Cannot read property 'push' of undefined\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at PluginPass.ExportDefaultDeclaration (/frontend/node_modules/react-hot-loader/dist/babel.development.js:83:30)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at newFn (/frontend/node_modules/@babel/traverse/lib/visitors.js:193:21)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath._call (/frontend/node_modules/@babel/traverse/lib/path/context.js:53:20)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath.call (/frontend/node_modules/@babel/traverse/lib/path/context.js:40:17)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at NodePath.visit (/frontend/node_modules/@babel/traverse/lib/path/context.js:88:12)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visitQueue (/frontend/node_modules/@babel/traverse/lib/context.js:118:16)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visitSingle (/frontend/node_modules/@babel/traverse/lib/context.js:90:19)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at TraversalContext.visit (/frontend/node_modules/@babel/traverse/lib/context.js:146:19)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at Function.traverse.node (/frontend/node_modules/@babel/traverse/lib/index.js:94:17)\n15:30:38 [Frontend tests] fe-unit-tests_1   |     at traverse (/frontend/node_modules/@babel/traverse/lib/index.js:76:12)\nUnfortunately I'm not able to share example, but if someone could shed light to potential issue, I could perhaps try to reduce one. Otherwise we have babel 7.0.0 and webpack 3.2.0 with various plugins.\nChanges in this PR works fine (assuming code is same as linked into issue).\nPS. Would love to see this merged :)\nE: repro: https://github.com/gaearon/react-hot-loader/issues/1043#issuecomment-421389043. ",
    "sungwoncho": "I am able to reproduce the error Unknown option: .visitor using react-hot-loader 4.3.11, babel 7.1.0 and webpack 4.19.1 (all latest). Any ideas?. ",
    "againksy": "same here\n    \"webpack\": \"^4.20.2\",\n    \"webpack-cli\": \"^3.1.1\",\n    \"webpack-dev-middleware\": \"^3.4.0\",\n    \"webpack-hot-middleware\": \"^2.24.2\",\n    \"react-hot-loader\": \"^4.3.11\",\n    \"babel-loader\": \"^8.0.0-beta.0\",\n. ",
    "martinhorsky": "Everyone who have Unknown option: .visitor error message it is because you put 'react-hot-loader/babel' to presets instead of plugins. Check it.. ",
    "deezone": "For a little more clarity, @martinhorsky is pointing to:\n\n.bablerc\n{\n  \"plugins\": [\"react-hot-loader/babel\"]\n}\nrather than:\n{\n  \"presets\": [\"react-hot-loader/babel\"]\n}\n\nReference:\nhttps://www.npmjs.com/package/react-hot-loader#getting-started. ",
    "eyal-perry-coralert": "I guess a simple checksum of module code will do just fine, when defaultProps is defined and not an empty object on the component. ",
    "chuckdries": "Can we at least show some kind of message to indicate this is the case? I thought I had a mistake in my code, not that the hot loader wasn't working.. ",
    "simonssspirit": "It is a Visual Studio solution.\nIt requires npm install and then starting the solution via Visual Studio.. ",
    "shahzaibkhalid": "@theKashey In my case, I'm getting the same error and connected components (i.e. dumb components) are not hot-loaded.\nreact-hot-loader: 4.6.3. Yeah. In this case, I realized that the issue was with React-Redux and as I downgraded from v6.0.0 to v5.1.1, it started working.. ",
    "wenjoy": "\nYeah. In this case, I realized that the issue was with React-Redux and as I downgraded from v6.0.0 to v5.1.1, it started working.\n\nThanks buddy, you save my day.. ",
    "asyncmax": "Thanks for taking time to investigate and fix this problem. I will try your fix on the original, bigger repo and let you know what I have found.. ",
    "knightjdr": "With jest 20.0.4 I had to use babel-jest 21.0.0. Even 21.2.0 produced this error.. ",
    "ItamarShDev": "Sorry, my bad.\nI am using react and mobx\nwhenever I change some code in a store, its not hot loaded, and i need to refresh to see the changes to the code.\nI dont know if its a bug or its just how it should work with MobX.\nchanging code in the React code works perfectly. Thank you!. ",
    "htulipe": "I'm not sure to understand what you mean. What's the babel prop plugin and how does it relates to my reactHotLoader.register problem ?. I'm using Babel 7 by the way.. Okay so I found my issue, NODE_ENV was actually no set at the Node process level but only injected via Webpack. Properly setting NODE_ENV fixes the issue, my bad...  \ud83e\udd2d\nAnd thanks for the work on RHL!. ",
    "Laassari": "but index.js is not exporting anything, it's only responsible for rendering App.js to the DOM. ",
    "vimalraj9423": "Yes I fixed it . ",
    "Zdend": "It might take me some time to assemble a reproducible repo. However I set a breakpoint where the warning is and these are the values - not sure whether it will be useful at all.\nCode for defaultProps can be found here https://github.com/acdlite/recompose/blob/master/src/packages/recompose/defaultProps.js\n\n. Thanks for taking the time! I'll most likely try to wrap every async component in hot(module) as it clears out undefined in the Updated modules list and solves the warning, it's just a little bit cumbersome to do it for every async component.\n11:50:00.895 console.js:35 [HMR] Updated modules:\n11:50:00.895 console.js:35 [HMR]  - ./src/scripts/apps/enb/modules/api-connector/index.js\n11:50:00.896 console.js:35 [HMR]  - undefined\n11:50:00.896 console.js:35 [HMR]  - undefined\n11:50:00.897 console.js:35 [HMR]  - undefined. The reason why I enabled logging in the first place was to find out why Updated modules are undefined as I was getting a pretty long list of undefined. I'm not sure whether it's related to the first issue with the warning but if I wrapped it with hot it actually solved the undefined logging so I thought that I must be doing something right :-). Thanks man, it seems to be related to webpack-hot-middleware - I'll continue my investigation over there. https://github.com/webpack-contrib/webpack-hot-middleware/issues/306. ",
    "LightGlobal": "thank you. ",
    "tarasbilozir": "Oh, sorry. This issue is about IE 10. Updated description.. I think this solution is good enough.. Thank you, bye :). ",
    "kylepotts": "^^^ agreeded\nError:  from UglifyJs\nUnexpected token: name (evalAllowed). Yep I am getting similar errors as well.\nI believe it was https://github.com/gaearon/react-hot-loader/pull/1073 and which made this breaking change. . ",
    "tombarton": "Uglify is bulking on the ES6.. ",
    "paumonnu": "\nYou are using a few tricky babel plugins, which \"should be enabled only in production\".\nTo be more concrete - https://babeljs.io/docs/en/next/babel-plugin-transform-react-inline-elements - inlines React.createElement, as result RHL could not override it.\n\nThank you! that was it. Didn't know you can't use that plugin on development. Been using it for months to skip typing \"key\" tag on iterators. Will have to add key tags on all code from now on.. ",
    "justinmwarner": "I will take a look at this and close this issue.  I haven't found anything obvious yet, so not sure what the cause is. Will update here if anything is found.  Thanks!. ",
    "mjhoffm2": "Here is a demo: https://github.com/mjhoffm2/react-demo/tree/2bbdb5bc95e4f322c41ea6ca3150b43309286a81/node\nYou should just be able to clone it, go to the 'node' folder, run 'npm install' and 'npm run dev'.  React Hot Loader seems like it is working just fine until it tries to hot reload something with an error.  For example, adding some random words at the bottom of the Counter.tsx component will break it.  Things like TypeScript errors are recoverable.. This works great, thanks!. ",
    "mattcarlotta": "Any updates on this? Would like to implement this into a boilerplate I've built, but with the inability to resume past an error (without a refresh), this module seems rather limited in usage.. ",
    "rockmandash": "@theKashey OK, I understand.\nThank you.. ",
    "edmorley": "Hi!\nI don't see any change in the babel output when using default exports. Is this expected?\neg:\n```js\nimport React from 'react'\nimport { hot } from 'react-hot-loader'\nconst App = () => Hello World!\nexport default hot(module)(App)\n``. Yup, this is withNODE_ENV=production, and webpack modeproduction`.. I've updated the testcase repository to RHL 4.6.1 - the issue still reproduces on the latest version.. Many thanks!. Hi! Thank you for your reply.\n\nthe latest-latest version it not yet published.\n\nYeah I realise it isn't, which is why I used a build from master (see the issue description).\n\nThere is no way to code split something you did not import. And with latest babel plugin updates you will not import RHL in normal use case.\n\nThis is not the case - see the repo linked in the issue description. Specifically this part:\n\nWhilst #1093 definitely helped, there is still RHL code in the bundle output:\nedmorley/testcase-react-hot-loader-sideEffects@92d3902#diff-6ca863eb505df8653ce3c20b340ba580R4636\n\nIf it's not expected for there still to have been imported code, then perhaps there is another bug remaining after #1093? And if that bug is fixed, then we won't need #1096 to work around it?\n. @smelukov hi! The changes in #1093 definitely helped, but I still see some RHL code left in the production bundle using a custom RHL build from master:\nhttps://github.com/edmorley/testcase-react-hot-loader-sideEffects/commit/92d39025ad45cc6350f968b10cb2b54b8d706fb8#diff-6ca863eb505df8653ce3c20b340ba580R4636\nIs this expected? Could it be resolved via the prod babel plugin (src/babel.prod.js) rather than needing to use \"sideEffects\": false? :-). Hi!\nI think there might be a bit of confusion here as to what the sideEffects property is - I think it doesn't do what you think it does? Anyway, let's first see if there is a way to fix the babel plugin to remove the leftover parts of RHL in production, that way this PR isn't needed after all.\nSee the reply in #1095 (let's move the discussion over there).. Many thanks!. I might have a chance to open a PR in a week or two, but quite a few other things pending at the moment :-). Hi! I'm possibly mis-reading this, but should this instead be (!jsFeaturesPresent || !evalAllowed) ?. ",
    "zhangwilling": "what's the difference between hot(module)(Main)  and hot(App) in the docs? \ni use \nimport { hot } from 'react-hot-loader/root'\nconst App = () => <div>Hello World!</div>\nexport default hot(App)\nthis got  error:  Cannot read property 'i' of undefined\nerror happen here :  exports.hot = hot(Object.assign({ id: parent.i }, parent))\nbut \nimport { hot } from 'react-hot-loader'\nconst App = () => <div>Hello World!</div>\nexport default hot(module)(App)\nit's ok. thx for your response, i am a little busy, i will try some experiments at this weekend, then i would give you the demo.. ",
    "stephtr": "\nthis got error: Cannot read property 'i' of undefined\n\nIs it possible that you are using both, HotModuleReplacementPlugin and webpack-dev-server --hot?. ",
    "andfelzapata": "PR https://github.com/gaearon/react-hot-loader/pull/1086. ",
    "atombender": "Not sure what you mean by registering. The component that made me discover this issue isn't the top level one, but it's embedded two levels down or so from the root.. I see. The component in question is within two HOCs:\n```javascript\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nexport default withRouter(\n  connect(state => ({\n    loginSessionState: state.loginSession,\n    feeds: state.feeds.models\n  }))(\n    class GlobalNavigation extends React.Component {\n      // ...\n    }));\n```. Indeed. I haven't had time to go back to this issue, but it's bit me several times recently, and I'd like to see it fixed. \nA stupid but very effective fix would be to revert to a string equality check if the combined size of the strings exceeds a certain number. The danger of false positives is moot when you can't even get a result. \nLevenshtein has different complexities depending on what algorithm is used. I doubt the one used here is O(n), not just because that's difficult to achieve, but also because clearly the performance drop we are seeing isn't linear.\nThe matrix method, which requires n * m bytes of space to hold the matrix, is the cheapest, as good as O(n + m), I believe. \nBut if you're only interested in checking if the distance exceeds a specific number, and you only need an approximation, there is a much faster algorithm, which should be O(n^(1+d)) in time, where d is the maximum distance. No idea if anyone has implemented in JS. \n. ",
    "VinSpee": "Hi! I'm seeing some 100% CPU issues as well when hot-reloading.. ",
    "meinders": "I'm experiencing something similar here (react-hot-loader@4.3.12), but on a component that shouldn't be 'hidden' as far as I can tell, since it's a default export:\njavascript\nexport default class PropertyPage extends React.Component\n{\n    render()\n    {\n        // about 52k of code (after babel/webpack)\n    }\n}\nWhen reloading, haveTextSimilarity calculates the Levenshtein distance on the old and new code of the render function (why?). Both strings are about 52k characters long (non-minified).\nFrom what I read the Levenshtein distance is not O(n) but O(n^2). I did a quick benchmark with two variations of a random string, 52k characters long, with a Levenshtein distance of 1. This takes 45 seconds, run from Node.\nIt doesn't seem like a good idea to use such a costly function when hot reloading large pieces of code.. ",
    "kromit": "I can confirm that it is not linear. I have a large form that takes 6.5 seconds to check with haveTextSimilarity. Any half of the same form is almost instantly re-rendered. \nThinking about about removing RHL entirely and go the webpack HMR way.. ",
    "bkniffler": "Partially related\nhttps://github.com/facebook/react/issues/13972. ",
    "simmo": "Yes I've just seen the same. I tried removing my hot(module)(App) equivalent  but also required removing babel plugin to get hooks to work.. ",
    "harisvsulaiman": "This could be a workaround https://github.com/gatsbyjs/gatsby/issues/9489#issuecomment-433872202. ",
    "loganfromlogan": "Using setConfig({ pureSFC: true }) does it for me. Even though I get the error below, it still hot-reloads even the components using hooks.\n```console\nindex.js:1452 React-hot-loader: reconciliation failed could not dive into [ \u0192 children(props) {\n          var child = _children(item, state, i);\n      return child ? child(props) : null;\n    } ] while some elements are still present in the tree.\n\n```\n. ",
    "joepie91": "\nv4.5.0(next) solves most of 16.6/16.7 issues and could handle anything if you will got your node_modules processed by our webpack-loader.\n\nWhat is the loader doing that can't be handled from this module? I'm not using Webpack (and I'm sure that there are plenty others who also don't), so if a Webpack loader is required for these issues to be fixed, they would still be effectively unfixed for everybody else.. ",
    "ooloth": "Using setConfig to enable hooks support (e.g. like the latest version of Gatsby)...\n```js\nimport { setConfig } from \"react-hot-loader\"\nsetConfig({\n   ignoreSFC: true,\n   pureRender: true,\n })\n```\n...appears to trigger some new forwardRef errors (e.g. with some react-spring components):\n```sh\nWarning: Function components cannot be given refs. Attempts to access this ref will fail.\nCheck the render method of AnimatedComponent.\n```\nEverything still works, though, so just checking if these errors can be safely ignored.\n(See this issue for more details.). @theKashey Sorry I left that out! It's with 4.5.1, which is the version used in Gatsby 2.0.62.. @theKashey You rock.. ",
    "digitaltopo": "EDIT: Got this working, solution at bottom\nNOT getting HMR to work with hooks:\n\nTried to follow the instructions in readme pretty closely, since was expecting hooks to be supported...\nHere's a repo to reproduce: https://github.com/digitaltopo/webpack-4-simple-boilerplate/tree/react-alpha\nStacktrace:\n```\nUncaught TypeError: Object(...) is not a function\n    at Test (test.js:22)\n    at mountIndeterminateComponent (react-dom.development.js:14812)\n    at beginWork (react-dom.development.js:15317)\n    at performUnitOfWork (react-dom.development.js:18151)\n    at workLoop (react-dom.development.js:18191)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:150)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:200)\n    at invokeGuardedCallback (react-dom.development.js:257)\n    at replayUnitOfWork (react-dom.development.js:17438)\n    at renderRoot (react-dom.development.js:18310)\n    at performWorkOnRoot (react-dom.development.js:19166)\n    at performWork (react-dom.development.js:19078)\n    at performSyncWork (react-dom.development.js:19052)\n    at requestWork (react-dom.development.js:18921)\n    at scheduleWork (react-dom.development.js:18730)\n    at scheduleRootUpdate (react-dom.development.js:19398)\n    at updateContainerAtExpirationTime (react-dom.development.js:19426)\n    at updateContainer (react-dom.development.js:19483)\n    at ReactRoot.render (react-dom.development.js:19775)\n    at eval (react-dom.development.js:19915)\n    at unbatchedUpdates (react-dom.development.js:19281)\n    at legacyRenderSubtreeIntoContainer (react-dom.development.js:19911)\n    at render (react-dom.development.js:19981)\n    at eval (index.js:21)\n    at Module../src/index.js (main.js:1417)\n    at webpack_require (main.js:724)\n    at fn (main.js:101)\n    at eval (webpack:///multi_(:8080/webpack)-dev-server/client?:3:18)\n    at Object.0 (main.js:1428)\n    at webpack_require (main.js:724)\n    at main.js:791\n    at main.js:794\nTest @ test.js:22\nmountIndeterminateComponent @ react-dom.development.js:14812\nbeginWork @ react-dom.development.js:15317\nperformUnitOfWork @ react-dom.development.js:18151\nworkLoop @ react-dom.development.js:18191\ncallCallback @ react-dom.development.js:150\ninvokeGuardedCallbackDev @ react-dom.development.js:200\ninvokeGuardedCallback @ react-dom.development.js:257\nreplayUnitOfWork @ react-dom.development.js:17438\nrenderRoot @ react-dom.development.js:18310\nperformWorkOnRoot @ react-dom.development.js:19166\nperformWork @ react-dom.development.js:19078\nperformSyncWork @ react-dom.development.js:19052\nrequestWork @ react-dom.development.js:18921\nscheduleWork @ react-dom.development.js:18730\nscheduleRootUpdate @ react-dom.development.js:19398\nupdateContainerAtExpirationTime @ react-dom.development.js:19426\nupdateContainer @ react-dom.development.js:19483\nReactRoot.render @ react-dom.development.js:19775\n(anonymous) @ react-dom.development.js:19915\nunbatchedUpdates @ react-dom.development.js:19281\nlegacyRenderSubtreeIntoContainer @ react-dom.development.js:19911\nrender @ react-dom.development.js:19981\n(anonymous) @ index.js:21\n./src/index.js @ main.js:1417\nwebpack_require @ main.js:724\nfn @ main.js:101\n(anonymous) @ client:3\n0 @ main.js:1428\nwebpack_require @ main.js:724\n(anonymous) @ main.js:791\n(anonymous) @ main.js:794\nreact-dom.development.js:16014 The above error occurred in the  component:\n    in Test (created by App)\n    in div (created by App)\n    in App (created by HotExportedApp)\n    in AppContainer (created by HotExportedApp)\n    in HotExportedApp\nReact will try to recreate this component tree from scratch using the error boundary you provided, AppContainer.\n```\nVersions:\n\"react\": \"^16.7.0-alpha.2\"\n \"react-hot-loader\": \"^4.6.3\"\n\"@hot-loader/react-dom\": \"^16.7.0\",\n \"webpack\": \"^4.28.1\",\n\nUsing react-hot-loader/babel in .babelrc\nResolving 'react-dom': '@hot-loader/react-dom' alias in webpack.config.js (confirmed it's loading: React-Hot-Loader: react-\ud83d\udd25-dom patch detected. You may use all the features. printed in console)\n\nHere's how I've set my app up:\nindex.js (root entry)\n```\nimport React from 'react';\nimport {setConfig} from 'react-hot-loader';\nimport {render} from 'react-dom';\nimport App from './core/App';\n// Configure RHL\nsetConfig({\n    //pureSFC: true\n    ignoreSFC: true, // RHL will be completely disabled for SFC\n    pureRender: true // RHL will not change render method\n});\nrender(, document.getElementById('root'));\n```\nI've also tried without setConfig and with different options enabled/disabled, but always have the same result...\nApp.js:\n```\nimport React from 'react';\nimport {hot} from 'react-hot-loader/root';\nimport Test from '../components/test';\nconst App = () => (\n    \nHello React World!\n\n\n);\nexport default hot(App);\n```\nTest.js:\n```\nimport React, {useState} from 'react';\nconst Test = () => {\n    // Declare a new state variable, which we'll call \"count\"\n    const [count, setCount] = useState(0);\nreturn (\n    <div>\n        <h2>Test useState hook Functional Component</h2>\n        <p>You clicked {count} times</p>\n        <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n);\n\n};\nexport default Test;\n``\nIf I removeuseState` everything works and it hot reloads. \nHere's what the transpiled component code looks like:\n```\nvar Test = function Test() {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\nreturn react__WEBPACK_IMPORTED_MODULE_0default.a.createElement(\"div\", null, react_WEBPACK_IMPORTED_MODULE_0_default.a.createElement(\"h2\", null, \"Test useState hook Functional Component\"), react__WEBPACK_IMPORTED_MODULE_0default.a.createElement(\"p\", null, \"You clicked \", count, \" times\"), react_WEBPACK_IMPORTED_MODULE_0_default.a.createElement(\"button\", {\n    onClick: function onClick() {\n      return setCount(count + 1);\n    }\n  }, \"Click me\"));\n};\nvar _default = Test;\n/ harmony default export / webpack_exports[\"default\"] = (_default);\n;\n```\nWould appreciate any help!\nEDIT:\nLooks like I was able to get everything working using:\n\nreact & react-dom @ 16.8.0-alpha.0\nreact-hot-loader/babel babel plugin\nreact-hot-loader/webpack loader in webpack, instead of (without) @hot-loader/react-dom package (this only goes up to 16.7.0-alpha.x)\nDidn't need to use any setConfig for react-hot-loader\n\nHot reloading should work in my demo repo for anyone interested: https://github.com/digitaltopo/webpack-4-simple-boilerplate/tree/react-alpha. ",
    "skarjalainen": "This file:\nhttps://github.com/gaearon/react-hot-loader/blob/master/src/proxy/createClassProxy.js\nUses string method that IE11 does not support:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nI see error in IE11 console:\nSCRIPT438: Object doesn't support property or method 'startsWith'. ",
    "rgllm": "Hi @theKashey, any updates on this? Thanks.. Hi @theKashey,\njust tested 4.4.0-1 (beta) and I confirm the issue is solved. However, it gives another error related to the Polyfill.\nConsole print.\n. Following on, @theKashey do you have any time expectations to solve this?. ",
    "joacim-boive": "Any updates? :). Works great so far! :). Ok, so I did some further investigation and the SourceMaps for Create React App is actually working - sort of.\nWhat threw me of was that the catalog tree was closed on reload and that the appearance of the \"new\" file: C:/Users/jobo15/IdeaProject/cra/src appeared. The existing file doesn't see the code update, only this new file contains the code update but it ends up incorrectly in the source tree.\nOk, so after mocking about in my real repo I now have sourcemaps working and updating as expected.\nUntil I reload... >:-( Then I only see the changed file(s) that came with the hot reload. If I look at the .map-file it only contains code for the last code change and not the entire codebase of the bundle.\nIf I could get the entire code base included in the source maps it would now work as expected. But currently the only way to get it to work again is to restart webpack so it generates a new sourcemap. That works until I make a code change and round and round we go.\nI realize that this description is a bit(?) confusing by now but any input would be appreciated. :)\nHere's how it looks after a fresh build with no code changes or hot reloads:\n\nHere's how it looks after a code change, following a hot reload:\n\nHere's how the sourcemap looks like after a hot-reload: (/js/bundle.app.c03b40f4dd1285fea8cb.js.map)\nAs you can see it's much to small and this is my actual problem.\n{\"version\":3,\"sources\":[\"..\\\\./Footer.jsx\"],\"names\":[\"Footer\",\"react__WEBPACK_IMPORTED_MODULE_3___default\",\"a\",\"createElement\",\"style\",\"background\",\"color\",\"padding\",\"__source\",\"fileName\",\"_jsxFileName\",\"lineNumber\",\"__self\",\"this\",\"Component\",\"__webpack_exports__\"],\"mappings\":\";;;;;4lGAEMA,yPAQE,OAAOC,2CAAAC,EAAAC,cAAA,UAAQC,MAND,CACVC,WAAY,QACZC,MAAO,QACPC,QAAS,MAGNC,SAAA,CAAAC,SAAAC,aAAAC,WAAA,IAAAC,OAAAC,MAAA,0JARMC,uDAYNd,kCAAAe,oBAAA,+RAZTf\",\"file\":\"app.54d389428a767bd1d15f.hot-update.js\",\"sourcesContent\":[\"import React, { Component } from 'react';\\r\\n\\r\\nclass Footer extends Component {\\r\\n    render() {\\r\\n        const style = {\\r\\n            background: 'green',\\r\\n            color: 'white',\\r\\n            padding: '1%',\\r\\n        };\\r\\n\\r\\n        return <footer style={style}>This is a footer2</footer>;\\r\\n    }\\r\\n}\\r\\n\\r\\nexport default Footer;\\r\\n\"],\"sourceRoot\":\"\"}. I got it working by following these steps:\nAdd, to your webpack config:\nnew webpack.SourceMapDevToolPlugin({\n                    filename: 'js/bundle.app.[hash].js.map',\n                    append: '//# sourceMappingURL=[url]',\n                    moduleFilenameTemplate: path.relative(app.buildCatalog, '[resourcePath]'), // Point sourcemap entries to the original file locations on disk\n                }),\n[hash] is the key here, otherwise the browser caches the sourcemap.\nSetup a Workspace in Chrome Dev Tools and map the source files:\nhttps://developers.google.com/web/tools/chrome-devtools/workspaces/\nNow sourcemaps are dynamically updated and works even after a full reload - at least for me. ;). ",
    "pfftdammitchris": "Great find! This definitely should be the reason why my app on IE is getting this error.. ",
    "jimmyn": "I'm facing the same issue, is there any workaround?. @theKashey Is this in npm? I'm still getting \nWarning: Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?. ",
    "PutziSan": "I'm sorry, but I don't understand what safetyNet controls exactly. Do I have to use safetyNet: true to make it work for mjs files? And what else does that do?. ",
    "chenhebing": "\nThat's one of the rules of React-Hot-Loader - it preserves state. And don't change the past. Initial state value, you may set in the constructor, is the past.\nThat's the goal.\n\nok, thx!. > That's one of the rules of React-Hot-Loader - it preserves state. And don't change the past. Initial state value, you may set in the constructor, is the past.\n\nThat's the goal.\n\nI update code to:\n```js\nimport React, { Component } from 'react';\nimport { className } from './index.css';\nexport default class Home extends Component {\n    constructor (props) {\n        super(props);\n        this.initCount = 1;\n        this.state = {\n            count: 0\n        };\n    }\n    handleClick () {\n        this.setState({\n            count: this.state.count + 2\n        });\n    }\nrender () {\n    return (\n        <div className={className}>\n            <button type=\"button\" onClick={this.handleClick.bind(this)}>+</button>\n            <span>{this.state.count + this.initCount}</span>\n        </div>\n    );\n}\n\n}\nIt is worked. But if code is liked this:js\nimport React, { Component } from 'react';\nimport { className } from './index.css';\nexport default class Home extends Component {\n    constructor (props) {\n        super(props);\n        this.constData = {\n            initCount: 1\n        };\n        this.state = {\n            count: 0\n        };\n    }\n    handleClick () {\n        this.setState({\n            count: this.state.count + 2\n        });\n    }\nrender () {\n    return (\n        <div className={className}>\n            <button type=\"button\" onClick={this.handleClick.bind(this)}>+</button>\n            <span>{this.state.count + this.constData.initCount}</span>\n        </div>\n    );\n}\n\n}\n```\nIt is not worked. \nThis is for improving performance?. ",
    "mrtnbroder": "I don't exactly get why is it recommended to have hot also in production? To me it sounds more like \"it doesn't matter if you have hot in production or not, as it will be removed anyway\".. ",
    "DinerIsmail": "@theKashey can you please detail that a bit more? How do you know that it disables webpack module concatenation? Also, did you mean that happens when we use the plugin in production config (i.e. in babelrc setting \"react-hot-loader/babel\" in the general section, and not just in env.development.plugins)?. ",
    "BabkinAleksandr": "That's OK. I just had typescript error while using react-hot-loader with react hooks. So, problem is solved, that's what I need.. ",
    "driskell": "Further investigation it might be related to process.env.NODE_ENV not being picked up in the babel part, as the development one is what adds in the extra code.. @theKashey the DefinePlugin (I\u2019m using webpack 3) only performs a replace in generated code and doesn\u2019t actually set NODE_ENV of the webpack process itself.\nThis means that without running webpack with NODE_ENV=production the Babel code for React hot loader does not use the production version and so it appends the above code snippet and brings in React.\nI\u2019ve been trying to work out what I should be doing. I thought perhaps it is because I do not use webpack \u201c-p\u201d and give my own Uglify webpack plugin version but even that does not set NODE_ENV within the webpack environment - only in the generated code.\nAt the moment my workaround is to manually set it inside my webpack.prod.js config file at the top. Or to prefix my webpack run on the command line with NODE_ENV=.\nAt the moment I\u2019m wondering if it\u2019s missing documentation that when using React hot loader you need to run webpack in this way or if I\u2019ve completely messed up my investigation but I haven\u2019t yet had time to do a full end to end check and comparison.. > Please sure that you are not just providing some settings for webpack, but have NODE_ENV set as a real env variable during the build.\nYes this is what I am missing for sure.. @thekashey\nI could not find any documentation for this so I might raise a pull request to document it. Or am I not looking in the right place? Thanks for the hints so far - appreciate it.. @theKashey Yes I was going to. But my concern is this is documented somewhere and it just needs linking up. Specifically you were able to suggest the solution pretty accurately so I wondered if you\u2019d seen it documented somewhere? If not I will raise a PR with full details that when using React-hot-loader/Babel then webpack production build must be run with NODE_ENV set.\nThough in all honesty... I do wonder if there\u2019s a way to rewrite the Babel loader such that the same code is written for both development and production builds and references NODE_ENV in such a way that optimisation will strip the code out and have the same effect as if hot() was never there or removed. That seems a nice challenge to me and means you don\u2019t need to change how you run webpack and the bundle reduces in size in the exact same way it does with React - and it\u2019s already well documented to use DefinePlugin to reduce bundle size in production.. Thanks - there is work to do - my goal was to solicit feedback on the concept. Do you think the concept is fine?. ",
    "loveky": "Yes, the resolve.alias way is more straightforward and simpler. Thanks for the advice.  . Yes, that's what I did at the very first. Then I found the snapshot test failed because __dirname varies in different environment.\n\nSo I make it and exports that I can mock it in the tests.\nAny suggestion on how to do it in a better way? :). ",
    "BetterCallSky": "@theKashey \nShould I also use<AppContaner />? In readme, it's mentioned to use only hot(..).  Here https://github.com/gaearon/react-hot-loader#migrating-from-v3. @theKashey thanks! \nOne small thing. I can see below error when there is any runtime error. Is it expected or it should be displayed only during hot updates? \n\n. ",
    "larkintuckerllc": "FYI.. The key to making this work for me was to realize that the Babel configuration can be a JavaScript file.  Have a working solution at: webpack-scratch-box-js\n. ",
    "jgoux": "@theKashey Could you make a patch release? I need this to try storybook with hooks. \ud83d\ude38 \ud83c\udfa3 . Awesome, thank you! \ud83d\udc4f . ",
    "deftomat": "Thanks! Looks like it works.. ",
    "rbdrenn": "No problem. I updated the test repo to 4.6.0 but unfortunately the issue persists.. ",
    "Wedvich": "I'm seeing the same issue with using connect as a decorator on 4.3.12, and the issue is still there after upgrading to 4.6.0. So I tried adding hot to my connected component too, but it still fails:\njs\n@connect()\nclass Thing extends Component { /**/ }\nexport default hot(module)(Thing);\nSo this seems to suggest it's an ordering problem of some sorts: calling hot with the connect'ed component as input fails. Using a helper function that flips the order works, even as a decorator:\n```js\nconst hotConnect = (...connectArgs) =>\n  (component) =>\n    connect(...connectArgs)(hot(module)(component));\n@hotConnect()\nexport default class Thing extends Component { /**/ }\n```\nI'm a bit confused myself as to what's the best practice - if hot should be used on every connected component, or if it's sufficient to only apply it to my root component. When using connect as a decorator only the former works - however, when not using decorators, it works fine with the latter.. Allright, good to know!\nJust for the record, using the new root/hot from 4.6.0 on my root component had no effect, and I still need my hotConnect workaround.. ",
    "markerikson": "I've got other priorities at the moment, but if someone wants to investigate this further and file a PR, we can look at it.. ",
    "davewthompson": "I will try and put one together; I am not allowed to put any of 'work' code here.. ",
    "ajiejot": "Already solved, I put  after the\nReactDOM.render()\nmodule.hot.accept();\n. > You probably did something wrong. Please read first page of our Readme (and update to 4.6.0)\nHi, as I in the first page, I module.hot.accept() and it's working. \nAre there any difference with what I've done??\n```\n// main.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './containers/App'\nconst render = Component => {\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('root'),\n  )\n}\nrender(App)\n// webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./containers/App', () => {\n    // if you are using harmony modules ({modules:false})\n    render(App)\n    // in all other cases - re-require App manually\n    render(require('./containers/App'))\n  })\n}\n```. > This is from v3 era - now we encourage you to use \u2018hot\u2019 from \u2018react-hot-loader/root\u2019 which has absolutely different semantic and even should be used in different file (in App)\nNoted, thank you so much.. ",
    "nfm": "@theKashey I can confirm this issue is still happening on 4.6.1. document is defined, but document.body isn't necessarily present at the time the script runs. @renchap's PR looks appropriate but will need to incorporate your change from 40e3ff2e5279468e2a6b39bc31299c47184e6935.. Thanks @theKashey, I can confirm 4.6.2 resolves this issue :heart: . ",
    "relign": "If the code is running inside a web worker, document is undefined, how to do ?? @renchap . Thanks very much~~ @theKashey \nwhen will the fix version be released?\n. This PR slove the issue.\nhttps://github.com/gaearon/react-hot-loader/pull/1128. web worker don't have document . ",
    "wasong": "Works with 4.6.1! Thanks!. ",
    "niekert": "Ah that makes sense. Maybe composing hocs with memo is a bad idea in general?\nThe hot reloading of a component that uses memo in 4.0.0 does seem to work for me though. What is the difference now that rhl is \"aware\" of React.memo? :). Can confirm that it works now \ud83d\ude4f\nThank you for fixing this so quickly!. ",
    "ffan0811": "Oh I just checked the README. my bad. and thank you for the reply! :). ",
    "ReactGirl": "Any ideas?. @theKashey I know it can be time consuming, but just looking on the code below, do you see something wrong on App.js or webpack config?\n /* ...imports */\n interface IState {}\n interface IProps {}\n class App extends Component<IProps, IState> {\n   render() {\n     return (\n       <BrowserRouter>\n         <div className=\"wrapper\">\n           <Route path={`${PATH}`} exact component={Homepage} />\n         </div>\n      </BrowserRouter>\n    )\n  }\n}\n export default hot(module)(App)\n\nWebpack:\nhttps://github.com/ReactGirl/nexter/blob/master/config/webpack.config.dev.js\nThe full code is here, and it is very basic, as it is basically a setup boilerplate:\nhttps://github.com/ReactGirl/nexter. Ok. So the correct answer is: \nDo not use Create-React-App for the same creator of react-hot-loader if you want to use typescript because the webpack configuration after ejected is too complex.\nLets close the issue and pretend nothing happened.\n. @rockchalkwushock It still persisting. Thanks.. ",
    "shirleyyu001": "@theKashey Thank you very much!. > hot is not passing refs down the tree. Partially due to React 15 we still have to support.\n\nPlease consider hot-components, as independent applications roots (they are) and do not \"ref\" them.\n\nthank you very much!. ",
    "felipediogo": "I think I can help you reproduce that, in a poc that I'm using, if a start typing like crazy in my Component it gives me the error above. Maybe it's trying to update the state too many times, I'm not really sure.\nhttps://github.com/felipediogo/contracts-ui\nI'm using React-Qull as a text editor, I'm not sure if it's related or not, but I think its not.\nIf you need anything to help you reproduce, please let me know.. ",
    "Mknight492": "rockchalkwushock any chance you could also include a copy with your typescript integrations as \nwell?. ",
    "erezcohen": "@theKashey - why do you say not to add HotModuleReplacementPlugin?\nThe readme here points to https://webpack.js.org/guides/hot-module-replacement/#enabling-hmr where it clearly says to add it. Maybe a clarification should be added in the readme?\nIf I remove the HotModuleReplacementPlugin I get an error \"[HMR] Hot Module Replacement is disabled.\" and the app does not load at all.\nIf I do add it the app loads but but then does a full page reload on code changes.\nI pass hot: true as option to the server since I use the dev server API.\n(This last note probably deserves its own issue but the question remains). ",
    "dkrutsko": "Confusing indeed. So just to confirm. We add react-hot-loader/babel to .babelrc AND do one of the three mentioned? webback plugin, hot-loader/react-dom or nothing. Because the babel patch has nothing to do with patching react-dom? correct?. ",
    "miloofcroton": "@theKashey \nWhat are the expected errors if we just use the babel-loader and the react-hot-loader babel plugin? I'm getting hot reloading working, and I haven't patched anything...\nThis is under the webpack plugin header:\n\nWe recommend to use babel plugin, but there are situations when you are unable to use it\n\nSeems like the babel plugin is in fact an alternative to the webpack plugin, or it is at least the webpack plugin is potentially optional.. ",
    "matt-tingen": "In addition to the README being unclear, the error message here implies that the babel plugin is not required when the webpack plugin is used.. ",
    "RaleighY": "it is ok after i update react & react-dom to 16.8.0-alpha.1. ",
    "mohsinulhaq": "But this needs to happen on client side at runtime right?. I want to disable it from webpack/babel config side. Hi, your solution worked. But I see that nothing renders on componentDidCatch now. I am using redbox-react. Earlier redbox-react used to work on error. Now it seems RHL just turned off rendering anything on error. It just unmounts till the nearest error boundary.. Thanks @theKashey ! Closing this issue.. ",
    "jeremym": "@theKashey -- I don't believe the issue @mohsinulhaq is having can be solved the way you suggest without a change to AppContainer.dev.js.  Meaning: the AppContainer class already has a componentDidCatch method on it (making it a react error boundary), so trying to add another Error Boundary in the chain will not catch an error that has already been caught.\nhttps://github.com/gaearon/react-hot-loader/blob/f15b108cfac2aa6b8f98496b1e3103a4ad1c9e9c/src/AppContainer.dev.js#L39. @theKashey - when I happened upon that bug, commented, and saw your quick response last week, I was sure it would fix the issue I was having.  So, ME TOO!  :-) . ",
    "shapkarin": "oh... I see.. so in my way I trying to make routes hot also. I'll try that, thanks. @theKashey can't understand what's wrong, I move to other file and now I see logs that all update but at browser I don't see any changes.... I use \"react-redux\": \"^6.0.0\" \nBut how to figure out ?. hmm. 5.1.1 works fine. oh... \ud83d\ude1e . ",
    "ANDEMEN": "\nWhy you need React-Hot-Loader then?\n\nSome of pages used react, and some simple page didn't. and they are in one project.. > Ok. Got the point. Probably that\u2019s easy to fix.\nSo, what should i do to fix this problem\uff1f. ",
    "clicktronix": "@theKashey Thank you very much! did not notice in the import part /root. My fault, I will be more attentive. It all worked.. ",
    "nosilleg": "Fair question. Enum is also called \"enumerated type\". It's a data type that has a fixed number of accepted values usually defined at creation. If you try to assign, delete or modify a property you get a TypeError (depending on the language). If you try to access a property that doesn't exist then you also get an error.\nEnums are not part of ecmascript, but ecmascript has Proxy which allows the creation of enums in the language.\nThere are various libraries to create them (see npm), and TypeScript has its own, but different, implementation.\nWhen the utils in RHL try to access non-existent properties in enums it causes the error to be thrown and breaks the app.\nThis wasn't an issue in an older major version of RHL, but I'm upgrading and ran into this issue.. Thank you for the merge!  And yes, it does fix our issue.\nTo answer your question: The components themselves are not enums.  Instead our Redux store has action types that are enums, as opposed to the usual \"constants\" (while still being const variables).  \nThis is where RHL gets involved and tries to figure out the types of the action types, but in doing so was accessing non-existent properties.. ",
    "reaysawa": "Thanks for the help. I found out there were some problems:\n\nwebpack-dev-server was not being initialized with hot: true by default, even with --hot\nwebpack-dev-server wasn't detecting file changes, so I changed it to poll and it got to pick up the changes\n\nhot: true,\n    inline: true,\n    watchOptions: {\n      poll: 1000,\n      aggregateTimeout: 500,\n      ignored: ['node_modules', 'dist']\n    }\nI modified only those options in and it seems to be functional now:\n\u2139 \uff62wdm\uff63: Compiling...\n\u2139 \uff62wdm\uff63: Hash: e856fe0cc291b2af3414\nVersion: webpack 4.29.0\nTime: 235ms\nBuilt at: 2019-01-27 19:51:58\n                                 Asset       Size       Chunks             Chunk Names\n  779d8ca1724a2a70d292.hot-update.json   45 bytes               [emitted]\napp.779d8ca1724a2a70d292.hot-update.js   5.08 KiB          app  [emitted]  app\n                                app.js   1.33 MiB          app  [emitted]  app\n  bc7c09ac0945b1792c1a.hot-update.json   44 bytes               [emitted]\n                            index.html  394 bytes               [emitted]\n                        runtime~app.js   74.2 KiB  runtime~app  [emitted]  runtime~app\n + 1 hidden asset\nEntrypoint app = runtime~app.js vendor.js app.js app.779d8ca1724a2a70d292.hot-update.js\n[./src/components/HelloReact/index.js] 2.78 KiB {app} [built]\n    + 434 hidden modules\nChild html-webpack-plugin for \"index.html\":\n                                   Asset      Size  Chunks             Chunk Names\n    bc7c09ac0945b1792c1a.hot-update.json  44 bytes          [emitted]\n     + 1 hidden asset\n    Entrypoint undefined = index.html\n       4 modules\n\u2139 \uff62wdm\uff63: Compiled successfully.\nAnd I see in the console:\n[HMR] Checking for updates on the server...\n[HMR] Updated modules:\n[HMR]  - ./src/components/HelloReact/index.js\n[HMR]  - ./src/containers/Root.js\n[HMR] App is up to date.\nHowever, I'm not seeing the changes actually being reflected in the DOM tree or the state (inspected via devtools).\nIf I remove hot:true from the configuration file, each change makes the page reload and it correctly updates the page.. The final step was to set \n```\nimport { setConfig } from 'react-hot-loader'\nsetConfig({\n  ignoreSFC: true, // RHL will be completely disabled for SFC\n  pureRender: true, // RHL will not change render method\n})\n```\nAlthough I'm still getting errors in the console\nReact-hot-loader: Cold component Root at RHL./src/containers/Root.js has been updated\nWhich is mentioned in the README\n\nIf you will update cold component React-Hot-Loader will complain (on error level), and then React will cold-replace Component with a internal state lose.\nReach-Hot-Loader: cold element got updated\n\n\nBut I'll just ignore those errors for now. Will post here if I manage to fix them.. @theKashey thanks for the help, I have some other questions related to that so I'll open another issue. ",
    "concefly": "I met the same problem\nhttps://github.com/gaearon/react-hot-loader/compare/v4.6.3...v4.6.4#diff-66ea0cdc3989360adbd4955babda95e0R46\nShould we make an empty check?\n\n. ",
    "luangjokaj": "Same problem! \nhttps://github.com/luangjokaj/react-ssr-boilerplate. ",
    "demkovych": "+1. ",
    "blinkzz": "Same. 4.6.5 - still same error\nHow simple version bump should have fixed this?. Yeap, that was an issue with npm cache, even after node_modules clean install.\nThanks for clue and quickfix. ",
    "lyboy2012": "+1. ",
    "gmsorrow": "+1. ",
    "thecorsair": "v4.6.5 fixed\n. ",
    "hubgit": "This might be the same as https://github.com/facebook/react/issues/14257 ?. ",
    "murbanowicz": "This is the repo with replicated issue: https://github.com/murbanowicz/rhl-issue. ",
    "otakustay": "Is this feature going to help removing the import and call of hot function in root component?. ",
    "trusktr": "Hmmm, I ran delete window.reactHotLoaderGlobal, and then the retainer stack changed to the following (notice the yellow highlights):\n\nMaybe this is not related to react hot loader then.. How can I ensure that in production there's no react-hot-loader stuff imported at all?. > ReactHotLoader global variable should not exists.\nDid you mean the reactHotLoaderGlobal variable?. ",
    "SirUppyPancakes": "Ah I just looked at the generated JS code and realized that I wasn't exporting hot properly. I think it's working properly now! I'll do some more testing to be sure and post back here later tonight.. Alright everything is working fine after fixing my code. Here is how you do the F# equivalent of the JavaScript code in the docs:\nIn your root component...\n```\nlet private hot: obj -> obj = import \"hot\" \"react-hot-loader/root\"\nlet Component = hot <| fun () -> React.ofType { input = obj(); output = obj() } []\n``\nHere, my root component is a class-component calledMain. TheReact.ofTypegenerates theReact.createComponentcall. I also importhothere. This is a must, and you CANNOT wrap it as a utility function in some other file (which is pretty standard Fable/F# practice), since I'm guessing it implicitly grabs a reference to the enclosingmodule. The reason I useobjas the type is because Fable does not have a unifying type to refer to a \"react component\". A react component is either a function type (returningReactElement) or aComponentClass, so it's easier to just use obj and get on with it. Fable will generate theexportneeded for theComponent` variable, since it is a top-level binding.\nIn your top-level rendering file (application entry point)...\nReactDom.render(React.createElement(Main.Component, obj(), []), Browser.document.getElementById \"app_container\")\nHere, we use the standard render function and use React.createElement on our hot exported root component.\nIt is vital as well that you do not combine these two files. RHL throws a warning/error in the console if you try to use the result of hot directly instead of simply exporting it like above.\nI will be putting in a PR with Fable to get the loader babelOptions.filename added and this setup should work very nicely.\nAs a side note, it would be very helpful if the RHL docs (in the spot where it mentions the old-style hot(module)(component) function), also mentioned that you MUST have hot in the same file as where you call it, and not wrap it up in some other utility file, since it implicitly captures module during import (though this does only really come into play with transpiled languages TBH).\nCheers! \ud83c\udf89 . ",
    "astatsuya": "\nIs it webpack based?\n\nYes, ver 4.29.3\nThis is my package.json\n`\n{\n  \"name\": \"webpackori\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --hot --mode development --open | json-server --watch db.json \",\n    \"build\": \"webpack --config webpack.config.js\",\n    \"eslint\": \"eslint \\\"src//*.{js,jsx}\\\"\",\n    \"stylelint\": \"stylelint src//.\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\",\n    \"react\": \"^16.8.1\",\n    \"react-dom\": \"^16.8.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^8.0.5\",\n    \"css-loader\": \"^2.1.0\",\n    \"eslint\": \"^5.13.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-config-prettier\": \"^4.0.0\",\n    \"eslint-plugin-import\": \"^2.16.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.2.1\",\n    \"eslint-plugin-prettier\": \"^3.0.1\",\n    \"eslint-plugin-react\": \"^7.12.4\",\n    \"file-loader\": \"^3.0.1\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"husky\": \"^1.3.1\",\n    \"json-server\": \"^0.14.2\",\n    \"lint-staged\": \"^8.1.3\",\n    \"node-sass\": \"^4.11.0\",\n    \"prettier\": \"1.16.4\",\n    \"react-hot-loader\": \"^4.6.5\",\n    \"sass-loader\": \"^7.1.0\",\n    \"style-loader\": \"^0.23.1\",\n    \"stylelint\": \"^9.10.1\",\n    \"stylelint-config-prettier\": \"^4.0.0\",\n    \"stylelint-config-standard\": \"^18.2.0\",\n    \"stylelint-prettier\": \"^1.0.6\",\n    \"stylelint-scss\": \"^3.5.3\",\n    \"url-loader\": \"^1.1.2\",\n    \"webpack\": \"^4.29.3\",\n    \"webpack-cli\": \"^3.2.3\",\n    \"webpack-dev-server\": \"^3.1.14\"\n  },\n  \"resolutions\": {\n    \"ajv\": \"6.8.1\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \".{js,jsx}\": [\n      \"eslint\",\n      \"git add\"\n    ],\n    \".{css,scss}\": [\n      \"stylelint\",\n      \"git add\"\n    ]\n  }\n}\n`. This is my repository that I'm using RHL.\nhttps://github.com/astatsuya/webpackori. ",
    "dkadrios": "Ran into the same issue.  Removing react-hot-loader/babel from .babelrc does indeed seem to resolve things, but I wonder what is the consequence of doing so?. ",
    "kog-7": "I also encountered the same problem, if i remove react-hot-loader/babel,i can't use this hot again,how to solve? \nError as follows\n`updateFunctionProxyById\n./node_modules/react-hot-loader/dist/react-hot-loader.development.js:1034\n  1031 | \n  1032 | var updateFunctionProxyById = function updateFunctionProxyById(id, type, updater) {\n  1033 |   // Remember the ID.\n\n1034 |   idsByType.set(type, id);\n  1035 |   var proxy = proxiesByID[id];\n  1036 |   if (!proxy) {\n  1037 |     idsByType.set(type, id);`. thanks\uff0clooking forward to. \n",
    "diondirza": "@theKashey I still got this error on my end with v4.7.1\n\nreact.development.js:188 Warning: Rendering  is not supported and will be removed in a future major release. Did you mean to render  instead?\n\nbecause I had context which destruct a consumer like this\nconst LocaleConsumer = LocaleContext.Consumer;.\nDemo \nhttps://codesandbox.io/s/6xpmnnl81n\n. ",
    "spand": "@natew Would love to see the new config :-). ",
    "borisding": "Hi!\nI'm having same message after applying https://github.com/gaearon/react-hot-loader#webpack-plugin for my SSR project.. > ```js\n\nvar evalAllowed = false;\n  try {\n    eval('evalAllowed = true');\n  } catch (e) {\n    // eval not allowed due to CSP\n  }\n// RHL needs setPrototypeOf to operate Component inheritance, and eval to patch methods\n  var jsFeaturesPresent = typeof window !== 'undefined' && !!Object.setPrototypeOf;\nif (!jsFeaturesPresent || !evalAllowed) {\n    // we are not in prod mode, but RHL could not be activated\n    console.warn('React-Hot-Loader is not supported in this environment.');\n    ....\n  }\n```\nSo, which variable - jsFeaturesPresent or evalAllowed is falsy?\n\nIt's showing\njsFeaturesPresent: false\nevalAllowed: true. ",
    "taikn": "Same here jsFeaturesPresent: false,typeof window is undefined. ",
    "badtant": "I'm starting my dev server like this\n```\nvar WebpackDevServer = require('webpack-dev-server');\nvar webpack = require('webpack');\nvar config = require('./webpack.config.dev.js');\nvar port = 9090;\nvar compiler = webpack(config);\nvar server = new WebpackDevServer(compiler, {\n    disableHostCheck: true,\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    hot: true,\n    quiet: true,\n    publicPath: config.output.publicPath\n});\nserver.listen(port, function serverListen() {\n    console.log('==> Webpack dev server running on port %s', port);\n});\n```\nSo I realized i should put HotModuleReplacementPlugin back.\nBut still no updates. My console:\nReact-Hot-Loader: react-\ud83d\udd25-dom patch is not detected. React 16.6+ features may not work.\n[WDS] Hot Module Replacement enabled.\n[WDS] App updated. Recompiling...\n[WDS] App hot update.... Progress:\n1. I put back webpack/hot/only-dev-server\n2. Moved export default hot to first component below ErrorBoundary\nAnd now it's working :). ",
    "pungggi": "I setup a repo for reproduction\nhttps://github.com/pungggi/rhl\nsee Branch hotload4_6 this uses the latest packages with react hot loader ^4.6.0\nDoes not work even with patch  applied.. sorry no this does not work either, (I was still in the old branch).. https://github.com/gatsbyjs/gatsby/pull/10455 somehow related?. ",
    "buzinas": "@pungggi why was this issue closed? How can I make react-hot-loader work with react-easy-state?. Btw, I'm not using gatsby, but react-static. Everything hot reloads correctly until I wrap my component with view, then it stops reloading.. ",
    "kontrollanten": "lodash.merge haven't been updated. Isn't webpack tree shaking off the other parts when we just import lodash/merge?. When I run the tests locally at node 8.15.1 everything passes, so it seems to be a flaky test.. ",
    "dominykas": "It seems the master build failed on node 8 - can someone re-run that please, so that this gets published? (it passed on node 10, so is this a flaky test or smth?). ",
    "GuillaumeCisco": "Thanks @theKashey, it somehow reassures me.\nCan you link me to the known issue.. ",
    "NawarA": "How I do disable this wonderful library from constantly throwing, even though its working correctly?. ",
    "ahutchings": "Thanks for the quick reply. This incompatibility needs to be expressed somewhere. Does the overall project still support React 16.3? \nIf yes, then we probably just need a note in the documentation that the webpack plugin only supports react and react-dom 16.8.0 and above.\nIf no, then the peerDependencies in package.json need an update, which would be a breaking change and require a major version bump for react-hot-loader.\nLet me know what you'd like to do and I can try to put a PR together.. Thanks @theKashey! I tested 4.8.0 against react & react-dom@16.3.2 and confirmed those versions are working again, so I think this issue can be closed.. ",
    "Taraluktus": "Not sure if it's the version as we're seeing it also with React 16.8.4 and all other packages (RHL, Webpack etc.) up-to-date. ",
    "bulby97": "It was because of react-test-renderer version. Fixed right now.. ",
    "elsassph": "Thanks,\nI was looking at the generated code but found really weird the eval injection. Also I was wondering whether that was blanket registering all the exports.\nAside from that thanks for pointing out the react-proxy alternative. Never had issues for the latter but happy to use a more actual one.\nLong term it may be an option to use Babel but I can't swap it atm, and surely I don't feel like pulling a second JS transpiler and double the JS processing \"just\" to add a few code tweaks which TS is now able to do natively since around 2.4.\nWell I'll have a go at a transformer then :). I'm thinking the arrow functions fields could be rewritten before generation into bound prototype functions which the proxy can update.\n. ",
    "liiiku": "\nCould you be a bit more concrete?\nAll my tests - unit, manual, and just daily work experience with RHL - are green.\n\nIt's my code's writing errors that make it ineffective. There's no problem now. Thank you very much\uff01. ",
    "Mykybo": "My setup is as follows:\njs\nplugins: [new webpack.HotModuleReplacementPlugin()],\nand\njs\n{\n  test: /\\.(js|jsx)$/,\n  loader: 'babel-loader',\n  exclude: /(node_modules)/,\n  options: {\n    cacheDirectory: true,\n    plugins: ['react-hot-loader/babel'],\n  },\n},\nI have tried using the disableHotRenderer and it didn't fix the problem.. ",
    "laurentnguyen": "Forgot to close the require: require('./containers/rootContainer.js');\n. ",
    "tko": "ReactDOM.render probably\n. ",
    "jupl": "With ComponentClass<AppContainerProps> at the end the children property is already included.\n. ",
    "developit": "better to use preact.options.vnode here.. ",
    "just-boris": "This code snippet and the one above are identical. Is this expected or that was supposed to be something else?. ",
    "eps1lon": "Looks like some noise from a different yarn version. I used yarn@1.13.0. It's using the exact string from the package.json not just a matching semver range.. "
}