{
    "kornelski": ".unx is redundant. Just use regular one.\n. I'm relying on some C99 features, so I think the switch is needed. Does -std=gnu99 work for you?\nI'll fix mergesort, as this is probably a BSD extension.\n. Fixed\n. Thanks, that's very helpful!\nUnfortunately I can't merge those changes, because they're not compatible with non-Windows systems. I've added bunch of comments to your commits. Can you fix those issues? Then I'd be able to merge your changes and it will be easier to maintain them.\n. Thanks!\n. @UnderCooled I've tweaked the \"GNU\" Makefile. Does it work under FreeBSD now?\n. Yea, I'm hoping I can merge them all into one file, as maintaining three makefiles is kind of a pain.\nIs gmake the default, or does it need a note in INSTALL/README files?\nAnother idea, does hiding of GNU stuff work?\n```\nif 0\nifdef USE_SSE\nSSEFLAG=-DUSE_SSE=$(USE_SSE)\nendif\nendif\n``\n. Thanks. Fixed in 14f67c867\n. I've removed inclusion ofsetjmp.h`. I wonder which OS is going to break this time ;)\n. @BonsaiDen can you compile the latest version?\n. Thanks. \nBuilding of the man page wasn't a bad idea, but I'm not sure how portable all this is, e.g. the PREFIX variable is already a fudge to allow different installation path on FreeBSD.\n. -f -ext .png will have the intended effect. \n. Fixed in b526af94ca3c116239739b8e2ec194bad54926f8. I thought /usr/X11 was unnecessary, since I somehow have /usr/local/lib/libpng.dylib, but I don't know how it got there :)\nThanks!\n. Is this happening in your build, or the one I've provided on http://pngquant.org?\nDoes it happen with every image, or only certain images/sizes?\nDoes it happen when you run pngquant with -s 10?\n. Does it happen with 1.7.2? (it has new hashing algorithm and fix for small images)\n. I've fixed a crashing bug in 82d4037d3 (released as 1.7.4). Please check the latest version.\n. The image you've linked to has 256 colors already. Are you sure that's the right one?\n. I'm sorry, I'm unable to reproduce the problem. Are you able to compile pngquant yourself? I have a newer version of histogram code, but I don't have any Windows machine.\n. You might need gcc (mingw). I'm not sure whether Microsoft compiler supports modern C.\nHere's a guide:\nhttps://raw.github.com/neogic/improved-pngquant-mingw/master/INSTALL\n. Excellent, in that case I've deleted it, and added support for __WIN32__ define which hopefully is set by default.\n. Excellent, thank you!\n. Possibly fixed in 12cfc4093ab4b1e93f62660e1a19a54a502fb358\n. Possibly. Apparently there's an off-by-one error in contrast/edge detection, so until I find it, I prefer to play it safe. In 3px there isn't much room for edges anyway.\n. I've built tarball for 1.7.3 manually with appropriate subdir. I hope I'll remember to automate it appropriately (@craigbarnes' make is gone)\n. Thanks. I think it's a very good idea to migrate to standard option syntax. However, I'm worried that it breaks backward compatibility. \nIt's very likely that people have scripts using options with a single hyphen, and pngquant shouldn't suddenly start rejecting those. For a while both -foo and --foo should be supported to help people migrate.\nWith standard behavior joining of multiple single-letter options is allowed, e.g. -v -f should be same as -vf. Currently pngquant's homegrown argument parsing doesn't allow that.\nDo you know if it would be possible to use a standard library call for argument parsing (getopts_long or similar) and still support \"legacy\" pngquant option switches?\n. This tool is over 10 years old, and I'd like newer version to be included in Debian, so I think a sudden breaking change is not appropriate.\nWould you be able to change pngquant to use getopt and keep existing options with a warning? (I suppose you'd have to preprocess argc/argv to fix single-hyphen names)\n. Thanks. I've applied those patches.\nI've noticed small issue: options are compared using str*n*cmp, so they allow prefix. -nof option used to be equivalent to -noforce. \nWith the extra hyphen now --no is ambiguous. I'm going to drop that prefix support completely and use exact strcmp for options \u2026unless that prefix handling was a standard behavior?\n. @craigbarnes Sorry for the delay. I've cherry-picked your makefile fix.\nPackage for Fedora would be awesome. I can host it on pngquant.org. Can you create a script for building the package? Stupid question, but is it possible to \"cross-build\" such package using Ubuntu?\n. I've verified it compiles on CentOS 6.3:\nyum install make gcc libpng-devel && make\nand the RPM provided on pngquant.org works fine.\n. Added, thanks!\n. Please try latest master and run:\n./configure && make\nIt should now be much smarter about detecting libpng\n. Instead of using it as CGI directly, take uploads with some server-side scripting (PHP/Perl/Python or other C CGI) and spawn pngquant as a subprocess (e.g. you can stream image in/out via proc_open() or if you're using temp files system() will work too).\nIf you specify \"-\" as the filename the program will accept image on stdin and return result to stdout. \nMaybe ask tinypng.org creators how they're doing it.\n. For recursive conversion see http://stackoverflow.com/a/9649214\n. I'm unable to reproduce the problem. Here's the image generated with pngquant 1.7.2:\nhttp://geekhood.net/y1mv33d-M6voKP2-CG25ZhaFuDm95Ie652kRBK3dX6f-jz3lBvL0LfJ-u8Csyrzm6tlDa_duc1oxEYz4ADRHDwb5ZWgDIubEHGOcw2HH8cSkvQ-fs8.png\nand semitransparency is preserved even in 16 colors:\nhttp://geekhood.net/y1mv33d-M6voKP2-CG25ZhaFuDm95Ie652kRBK3dX6f-jz3lBvL0LfJ-u8Csyrzm6tlDa_duc1oxEYz4ADRHDwb5ZWgDIubEHGOcw2HH8cSkvQ-16.png\n. Unfortunately I don't have access to a Windows machine, so I'm unable to provide up-to-date Windows executables.\nThe latest version uses getopt_long, so I think you may need to have Cygwin installed to compile/run it (but it's been quite a while since I've compiled anything for Windows).\n. @BlackDragonHunt Excellent! Could you share the executable, so I could update pngquant.org?\n. Thanks!\n. Do you get a crash report? What CPU do you have?\nDo you have those libraries on your system?\n/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)\n/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa (compatibility version 1.0.0, current version 19.0.0)\n/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 169.3.0)\n/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\n/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices (compatibility version 1.0.0, current version 45.0.0)\n/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 945.11.0)\n/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1187.34.0)\n. Indeed, it requires loader from 10.7+.\nFor now use binary from http://pngmini.com ImageAlpha.app/Contents/Resources/pngquant\n. That's an unintentional side-effect of an intentional change \u2014 the new version tries to prevent very different colors from being used for dithering.\nCan you upload the original image so I can use it in tests?\n. Hopefully fixed on master (1.8.4):\n\n. You seem to have an outdated version of gcc (and probably everything else given it's an 8-year-old OS beyond its end-of-life :)\nYou can work around it by changing all occurrences of [static clrs] in mediancut.c with [].\n. TinyPNG has an API.\nIf you want to develop your own service like this, get executable/package from pngquant.org and e.g. https://github.com/papandreou/node-pngquant\nIf you're just building a website then I recommend GUI programs listed on http://pngquant.org/\n. Can you upload 24 bit version?\n. I've looked into it, and overall it's a tough issue to fix. The change that made this case worse improves several other images. \nI'll probably crack the problem eventually, but in the meantime if you need workaround - add noise to the area that lacks dithering.\n. Patch applied 35d8cdade. Thanks!\n. Thanks for pointing out the issues! I've fixed the bug and the leak.\nAre you sure optreset is portable? In BSD man it's documented as non-POSIX extension.\nI hope that the the proper library interface will eliminate need to hack pngquant.c. What do you think about that API?\n. Oops, I shouldn't be doing quick late night fixes. Fixed the fix :)\nI see your point about need for a high-level interface. I'll think what I can do about it.\n. What version of libpng do you have?\n. I've tested suse 10 and it has only libpng 1.2 available, which is too old to handle such large image. The bug is in libpng 1.2\nDo this:\n\ncd ..\nwget http://prdownloads.sourceforge.net/libpng/libpng-1.6.2.tar.gz?download\ntar xzf libpng-1.6.2.tar.gz\nmv libpng-1.6.2 libpng\ncd libpng/\nmake -f scripts/makefile.gcc\n\nrecompile pngquant, and it will work fine with the image.\n./pngquant -h should be reporting Compiled with libpng 1.6.2.\n. Ask Slicy to integrate pngquant library :)\nIf you run pngquant on image that is already paletted it won't degrade it (except when you use --quality option to deliberately lower the quality). \nIt will recompress it, so md5 might change.\n. I can't elegantly check whether file has been processed with pngquant already (I don't want to add any extra chunks to PNG files or keep database of them).\nWhat I think would be useful is to ignore _.fs8.png and .or8.png files when their .png version is specified as argument. This way pngquant *.png run multiple times wouldn't create _.fs8.fs8.fs8.fs8.png etc.\n@rolftimmermans that's an interesting suggestion. But what if somebody had 256-color images and wanted to reduce them further? e.g. down to 64 colors. For grayscale images or transparency masks that's reasonable optmization.\n. --skip-if-larger should handle that well enough now.\n. I must have misapplied that patch. Fixed in 5f789c8a67\n. Fixed in d047e9e0fc\n. In the documentation I don't see any information about PNG-specific \nmetadata to preserve.\nIs this only about preserving 9.png extension?\nCould you give me an example unoptimized 9-patch file and how pngquant \nchanges it?\n. As far as I understand, pngquant already does that. Can you give me an example of a file where these colors are not preserved?\n. To help resolve this issue:\n- Please attach source RGBA image that doesn't get converted properly.\n- Please explain exactly what you mean by \"corrupted\"\u2014which colors/pixels are wrong, what they should be. Screenshots and examples of images that are converted correctly would be useful.\n. That's very helpful. I'll see if I can copy the extra chunk.\n. Fixed in 2e7cf0a1aad9aae5f6d68d6c7f3979e2abfa128f\n. Oh, bugger. png_set_unknown_chunks works with libpng 1.7, but not 1.5 :(\n. I've been changing this back and forth. It seems that there is no single order that works on all platforms :(\n. I've added -lm before and after. f01f70704b\n. That's a nice catch. I suspect it's caused by quality option that first \nremaps to 256 colors and uses that as the best guess later after palette is \nreduced to lower number of colors.\nThat's performance sensitive part of the code so I'm not sure if it's \nbetter to check if guessed index is in bounds in nearest_search or whether \nto ensure guesses are in valid range earlier.\n. It doesn't matter how the value is \"corrected\", because the guess was out of date already (was for previous, bigger palette). You can set it to 0, as that will be simplest.\nCorrecting it in nearest_search might hurt performance (it'd be re-checked twice for every pixel of the image, and thousands of times in every Voronoi iteration).\nSince palette size reduction is rare and only done in one place: in find_best_palette() I think it'd be best to detect palette size reduction there and fix all hist->achv[].likely_colormap_index that are out of bounds when needed.\n. That's unintended. The intended behavior is that dominant flat surfaces should get their own palette entry and dithering should be applied only where it's clearly needed.\nI thought that much of unnecessary dithering wouldn't happen, so I haven't been paying close attention to this problem. \nI've tried to find a specific commit when I broke it, but size of that file goes up an down all over the place...\nAt least those commits inflate it:\ne986ae8eeed622a7dea72e648139c7a013305986, 49e34a6a7b88ef65272f749df38aa86ca7d4514c, 006c8826ee3d70e1dc17d2feb78c7c40448cda43, and 68f41956c61ec9694199ea1d67316b89198deb4f\nwhich is a bummer, because those changes should improve overall quality, reduce memory usage and increase speed. Hopefully regression is due to a bug in those changes, rather those changes in principle.\n. Haha, it's worse. Size of that file depends on order of colors in the histogram, and the order is pseudorandom.\nIn pam.c if I change\nhash = px.l % hash_size;\nto\nhash = (px.l ^ 0xB55BB55BU) % hash_size;\nsize of file may jump from 67KB to 138KB. It's most likely due to a bug in hist_item_sort_range.\n. Possible cause of this has been fixed in master\n. It looks like error from imprecisely selected colors accumulates, so I've tried to make selection more precise, and error accumulate less.\nOn average (tested on 1200 images) in 2.0.0 palettes are better and file sizes are smaller, but in both cases there are notable outliers.\n. The remaining issue is lack of precision in color lookup. Try with this change:\nhttps://github.com/pornel/pngquant/commit/0adce75001ab2fdb577d3b1ed4c705899a837ead\nIt makes pngquant 80%-200% slower, but prevents patches of rough dithering from appearing. \nI think the fix for it would be implementation of proper VP-tree search: http://ceur-ws.org/Vol-256/submission_12.pdf \n. I think it's been fixed since. I can't reproduce distortions on these two images.\n. Hmm, that's odd. libgcc should have at least _vsnprintf :/  pow/powf should be in libm, and apparently GCC and VC don't cooperate here :(\nTry modifying lib/Makefile. Change:\n$(STATICLIB): $(OBJS)\nto\n$(STATICLIB): $(OBJS) libgcc.a\nensuring that libgcc.a is in the same (lib/) directory. If cygwin has libm.a, then add that too.\nI've also tried to provide a DLL version, but haven't tested it. Try:\ncd lib/\nmake dll\nand see if that builds.\n. another option\ncd lib/\nmake clean\nmake CFLAGSADD=-mno-cygwin\nor link with cygwin1.dll. \n. It seems that linking with \"./lib/libgcc.a\" at least fixes __alloca. \nHave you tried linking with cygwin1.dll as well? \nIf that fails, then try MinGW. I know that MinGW with libgcc.a worked for IrfanView.\n. Any luck with this? Maybe @cssignet could advise?\n. Great!\n. I've made some changes that allow the C99 code to be compiled with a C++ compiler (tested clang) \nCan you try whether this can be compiled using VC++? https://github.com/pornel/pngquant/tree/cpp (rename all .c files to .cpp if needed)\n. You're right, previous fix wasn't fixing anything :)\nlikely_colormap_index can be set to anything within the palette, because if the guess is wrong (greater than nearest_other_color_dist[likely_colormap_index]) then it will be ignored.\n. Well spotted, thanks!\n. Should I special-case .PNG or do you think this should be done in general? pngquant --force --ext=.img -- file.img?\nalso, perhaps I should add -o (output file) option instead?\n. Fixed 057eb1ee9e9890a74ea363ae367df16feaa4742b\n. It looks like your compiler doesn't have Cocoa headers in search path. I'm not sure how to make that work, because clang on my system (with xcode commandline tools) doesn't require any extra arguments to see CoreGraphics headers.\nCan you compile this?\nclang -c rwpng_cocoa.m -o rwpng_cocoa.o -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -I/usr/local/include -I/opt/X11/include\n#import is the preferred method of inclusion in Objective-C, and methods that rwpng_cocoa.m uses are part of CoreGraphics, so I think this line is correct.\nThe change in saturation is due to color profile support in Cocoa. With stock libpng pngquant can't support color profiles, and dropping of color profiles often increases saturation. With Cocoa it loads images as sRGB and saves them tagged as sRGB, so the less saturated version is actually more accurate representation of the image.\nI've rebuilt the executables with -mmacosx-version-min=10.6 passed to the linker. Did that fix the problem on 10.7?\n. I've previously only specified OS version in compiler flags, rather than linker flags.\nIt's odd, but it seems that OS X doesn't have public libpng. I'm haven't checked whether X11 lib directory exists on stock OS X. If it doesn't, then compilation will fail.\n. Do you have png.h anywhere else? (locate /png.h or find / -name png.h)\n. Yeah, so that's a pretty sad state. Cocoa has lousy support for saving PNG, so I can't do much without libpng anyway. \n. The Mac binaries on pngquant.org are statically linked and don't require external libpng.\nInclusion of png.h in pngquant repository would be controversial.\n. Thanks. Those are pretty-specific ifs. Could they be generalized a bit? I think egrep can be safely changed to grep for all platforms.\nWould -lpng work in sunos if include path for libraries was /opt/local/lib/libpng15?\n. It looks like you have pngquant executable that is not compatible with your \nLinux distribution or version of the distribution.\nThis could happen if you compiled it on another machine and copied the \nbinary to different flavor of Linux.\nDelete this executable and try installing package from pngquant.org website \nor compile it yourself.\n. Thanks for explanation @erasmospunk\n. I've responded in the original thread. \n. MAKEFLAGS is a mess, unfortunately. When you use multiple options it will omit - from the first one. It's expected to be used like this.\nI've had MKFLAGS without a dash before, but that didn't work when invoked from CMake (it was passing j and expected the dash to be there).\nI can't just remove the variable \u2014 I need it to support parallel compilation and library build with/without SSE.\n\nI can swap -D for mkdir. \n. It took a while, but now that I've got multiscale dssim that works well on dithered images I was able to test this objectively, and it did not improve quality overall.\nI can't reproduce bugs mentioned in the issue #40, so hopefully these changes are not necessary any more.\nAlso I've made --float take argument with amount of dithering, so you can use --float=0.5 when an image is dithered too much.\n. Lack of dithering in the shadow is sort-of by design, the dithering algorithm avoids dithering 2-pixel wide areas.\n|'m aware of one oddity with remapping #147\n. Fixed. Thanks for reminding me.\n. Can you attach original file so I can reproduce the problem?\nWhat version of pngquant are you using?\nWhen you run pngquant with no arguments, do you get \"Compiled with Apple Cocoa image reader.\"?\n. I wonder whether that's a bug Preview/QuickLook. Notice that thumbnail in the Preview sidebar is displayed correctly:\n\n. OS X doesn't ship with libpng (it used to be bundled with X11). You can install it via homebrew: brew install libpng\n. Reported to Apple: http://openradar.appspot.com/radar?id=5816203910053888\nrdar://15355456\n. Confirmed OS X bug, duplicate of rdar://15303483\n. The issue reported in this bug has been fixed on OS X 10.9.2. It was due to gamma correction being applied twice.\n. Can you run mkdir -p $(dirname \"$output_file\") before running pngquant?\n. Maybe I misunderstood the problem\u2026 ImageMagick seems to require destination directory to exist:\n$ convert test.png /tmp/idontexist/output.jpg\nconvert: unable to open image `/tmp/idontexist/output.jpg': No such file or directory @ error/blob.c/OpenBlob/2643.\n. Can you upload an image that would benefit from this?\nTo some extent pngquant already does this, as it applies different weight to edges and noisy areas of the image. I could add option to take arbitrary image mask that marks which areas of the image are most important. Would you use such feature?\n. I see. In that case pngquant is pretty smart already and will avoid putting too much weight on anti-aliasing of text \u2014 specifying of areas of interest won't help much.\nI think compression could be improved a bit if pngquant was lossy beyond limiting number of colors in the palette, but this could be done mostly automatically (but it's much more complicated, maybe I'll implement it\u2026 someday).\nIf you know coordinates of photos in the picture you may get best results if you cut photos out and store them as JPEG, and the rest as PNG (with photos blacked out).\nIf you can use any format, then check out DjVu format which already does this kind of text-vs-photo separation automatically.\n. Yes, please attach the image. \n. This is a bug in libpng 1.2. If you can, please recompile pngquant with libpng 1.5 or later.\nI've changed pngquant to warn against this and disabled support for low depths when using >4-year-old libpng.\n. That seems to be specific to old libpng 1.2 used in Debian. \npng_expand does \npng_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);\nand png_set_expand_gray_1_2_4_to_8\npng_ptr->transformations |= PNG_EXPAND;\nI need tRNS converted to alpha as well. Have you tested it on <8 bit with transparency?\n. @mdonoughe pngquant blends colors using float, and x86 version uses lower-precision SSE operations, so tiny difference is expected.\nBTW: do you know NEON? Speed of ARM version could be improved a lot.\n. I've merged fix for mempool pointer arithmetic - thanks for the fix.\nI haven't changed png_expand, as I believe it's just hiding a bug in libpng 1.2. Instead I'll try to make Debian package use libpng 1.5+.\n. Thanks for the report.\nThis file has a very unusual way of setting transparency, it's not an RGBA file, but an RGB file with a single transparent color (tRNS  0x00FF00FF00FF).\nI've added support for this type in the latest version.\n. Done.\n. I've re-uploaded the site. Please try again.\n. (edit: actually, nevermind the backtrace \u2014\u00a0in all cases pointer comes from malloc)\n. OK, so the assertion fails, because malloc() doesn't provide 16-byte-aligned memory. I guess I've been just lucky so far :(\nThat's a bit of a drag, as I'll have to create my own malloc/free wrappers for proper alignment.\n. Segfault is a correct reaction :) If it doesn't segfault, it may be doing slower memory reads.\nTry that: https://github.com/pornel/pngquant/commit/bcafd539ee91907fc25422be35c8a09a80ff6352\n. eh, 1999 standards are too new for C :)\nIf you feel like writing 16-byte aligned malloc/free, then check out defaults set in liq_attr_create_with_allocator() :)\ne.g. allocate 16 bytes more, shift start of the buffer as neccessary and put offset to the real start at buffer[-1].\n. OK, I'll fix that later.\n. Please check align branch:\nhttps://github.com/pornel/pngquant/tree/align\n. Unfortunately it's non-standard. There's also posix_memalign, memalign, aligned_alloc and a bunch of others, but in practice you can't rely on anything except malloc().\n. Yes, that message was a hack using lib's private header, and as you've found that doesn't work well, so I've removed it altogether.\n. The idea is that you can quantize once and then generate dithered and non-dithered versions of the image from it.\n. Also, it's awesome that you're writing it. Thanks!\n. I see you're storing dithering level in your object and setting it when getting the result \u2014 that makes perfect sense.\nThe connection between speed and dithering quality is maintained regardless whether you set dithering level or not, so you can set it anyway.\nIn the library the default level is 0, which in retrospect isn't that useful. You could have a default of 0.5 or 1 in your library.\n. Sweet, thanks! I'll try to find time to integrate it this weekend.\n. Yay, it works. Thanks!\nmake USE_LCMS=1\navailable on master\n. That's great. Added in a961cab494478073715026919a3b52562b6a899e\n. Yeah, that's required. Thanks. 5d0306bfb7c8ab891504afbead41b86c52fbf235\n. Are there any files like this in the wild? Is any popular software producing them?\nI think given that pngquant got away with not supporting any profiles at all, leaving out some edge cases isn't too bad :)\nEspecially gray - why would anybody even care to do that? Is it just gamma, or does it convert to non-gray profile due to whitepoint/color temperature?\n. Informing user about color profile used would be a nice thing. Let's brag about doing the right thing (and avoid users wondering why pngquant output looks different from profile-ignorant tools :)\n. Oops, this (a93580f64630b245c1fbf1eff7d855baad3cd7d6) crashes gcc :(\nsh\ngcc-4.9 -Wall -Wno-unknown-pragmas -I. -I/usr/local/include/ -I/usr/include/ -DNDEBUG -O3 -ffast-math -funroll-loops -fomit-frame-pointer -std=c99 -fopenmp -I/usr/local/Cellar/little-cms2/2.5/include  -DUSE_LCMS=1   -c -o rwpng.o rwpng.c\nrwpng.c: In function 'rwpng_read_image24_libpng._omp_fn.0':\nrwpng.c:495:1: internal compiler error: Segmentation fault: 11\n }\n. Regarding printf, maybe return that information in mainprog_ptr and print from pngquant.c?\n. I've crashed it few more times, looks like this bug, so I'll update my gcc: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59917\n. Yup, works with the latest.\n. I've tested pngquant with libpng1.6 and 1.7, and it turns out libpng detects bad iCCP chunks and drops them, and that seems to be a quite common occurrence!\n\nlibpng warning: iCCP: Not recognizing known sRGB profile that has been edited\nlibpng warning: iCCP: known incorrect sRGB profile\n\nSo support for cHRM + gAMA would be useful indeed.\n. It's good. I like that you've also hidden unnecessary message about the gamma.\n. It is a problematic interface indeed.\nMost functions return liq_error, but this one can't as it needs to return liq_result*. Returning a result and then a liq_error* via pointer argument seems a bit inelegant. \nI could return liq_result even when quantization was done, but had too low quality. The upside would be that you could run liq_get_quantization_quality(result) and see how bad it failed.\nYou'd have to use extra function to test actual success, like liq_is_quality_good_enough(result) or maybe liq_get_remapping_status(result) with error code. In any case liq_write_remapped_image() would fail with some specific error code.\nAnother option is to keep that interface as-is, but replace/expand callback for logging. In addition to getting opaque textual messages it could be getting specific status codes for every tiny problem the library has encountered.\n. BTW: there's a bug if you make the library use SSE on systems that don't return 16-byte aligned memory from malloc(): #66 \nI'm working on a fix for that\n. I've used log to output more information about invalid arguments (it's seen only when documented-as-invalid arguments are passed, so it won't affect normal usage of the library):\nhttps://github.com/pornel/pngquant/commit/0bff7fb8e4807d8e5b5778cdb8d7e3c2cf524cbe\nStill thinking about improving liq_quantize_image\n. I'm thinking about changing the API of liq_get_quality(). Is it going to break your stuff?\nhttps://github.com/pornel/pngquant/commit/baff45b1ddc215d5965a8c759129d58daf41713d\n. There's a new liq_image_quantize that exposes the error.. Good point, thanks for the PR.\n. FYI, I've noticed that the getters would have to check their pointers - 85b6fe3b757b146411f53c70425b17d267533a0f\nOTOH without passing values by pointer there's only one thing to check, so there's no need for different status codes. In the end I've decided to make getters consistent with already existing ones that return -1 on failure: 0245341406506b2835b66c50343df84033ff8082\n. That was a bug in older version, and it surfaces only if you create a debug build.\nRecompile with -DNDEBUG (default if you use make) and/or use version 2.0.2\n. And typos fixed too, thanks :)\nBut I'm not quite sold on quantize_2 and LIQ_HISTOGRAM_FAILED. Can you remove them from this pull request? (git push 350226e:master -f)\n. Thanks\n. It always returns true if the pointer is valid. It doesn't care what it actually reads.\nIf the pointer is invalid and causes segfault, this function will crash.\nIt's intended to catch invalid pointers early, e.g. if you call liq_image_create_rgba_rows(\u2026, (void*)0xDEADBEEF, \u2026); it will crash there immediately, instead of letting the library crash somewhere else where you'd wonder what went wrong.\n. I've added comment in the source\n. Can do, thanks.\n. I'd love to optimize pngquant further. Could you show me some specific changes I could make?\n. What you're saying is a good advice in general, but I don't think it applies to pngquant currently, e.g. all performance-critical allocations are already done via memory pool.\nThe nearest_search algorithm is based on a concept of vantage point tree, but flattened to eliminate cache misses. At this point it's mainly limited by branch mispredictions. If you could find any way speedup there (that doesn't worsen accuracy) that would be fantastic.\n. Like I've said before that routine is already very heavily optimized. It has been carefully tuned and it uses SSE intrinsics (basically assembly) for the critical parts. There is no memory allocation in there (other than stack, which is cheap and might be optimized out).\nIf you're compiling on 32-bit x86 make sure to compile with USE_SSE=1, since by default I only use it on x86_64.\nAlso keep in mind that pngquant has a speed setting, so use higher speed settings on low-powered hardware.\nI'm not going to support CPUs without FPU. AFAIK ARM chips in today's mobiles are all with FPU, and if you're running it on something primitive like Nintendo DS, then you'll have to use pngquant 1.0 or pngnq.\n. I can't reproduce it on my cpu, but I agree that in general exact comparison is bad, so I've added the epsilon.\n. Yup, that's much cleaner. \n&(int){0} is a pointer to a temporary int, like &somevar, but without a temp variable.\n. Are you sure SSE doesn't make any difference? It should reduce floating-point precision from 64/80-bit to 32-bit.\nSome difference with OpenMP is expected, because operations are not performed in the same order, and floating-point isn't exactly associative.\nHowever, there might be one thread-unsafe operation in there. Try this:\n``` diff\ndiff --git i/lib/viter.c w/lib/viter.c\nindex a271f2a..88b11c6 100644\n--- i/lib/viter.c\n+++ w/lib/viter.c\n@@ -79,7 +79,7 @@ LIQ_PRIVATE double viter_do_iteration(histogram hist, colormap const map, cons\n     viter_update_color(achv[j].acolor, achv[j].perceptual_weight, map, match, omp_get_thread_num(), average_color);\n\n\nif (callback) callback(&achv[j], diff);\n\n//if (callback) callback(&achv[j], diff);\n     }\nnearest_free(n);\n``\n. Thanks for testing this. To me it looks like a difference small enough that it can be blamed on floating-point quirks exposed by non-deterministic operation.\n. oh wow, I didn't suspect that floating point rounding would be that visible in a \"simple\" case. Thanks for fixing this.\n. What compiler switch do you have in mind? I know-ffast-math` allows compiler to do unsafe float optimizations, but I think that's a desirable behavior overall.\n\n\nDo you get different color order from mediancut() or the final one after sort_palette()? If it's the latter, then colors are sorted by estimated popularity which may suffer from same kind of rounding errors.\n. Does changing viter_state https://github.com/pornel/pngquant/blob/master/lib/viter.h to use doubles fix the problem for you?\n. Great. I feared that larger viter_state wouldn't fit in the cache and impact performance.\n. Does this make a difference? https://github.com/pornel/pngquant/commit/9dfc899ec21dfcd8eec2516ec4094147ea0f6243\n. Also, while you're benchmarking, can you have a look at this? https://github.com/pornel/pngquant/commit/7b60219b72d38807aa268d437f103b54f91c69bd\nThis is the hottest loop in the entire program and I thought that removing a condition would make that faster, but in my tests it's actually slower in clang!\n. Thanks for checking that out. I'll try to change the structure as suggested by the compiler.\n. Great!\n. I'd rather be careful with unusual compiler flags. The project doesn't have a ./configure script to auto-detect such things properly (and I'm not sure if going there is a good idea), so unfortunately it has to work out of the box with most setups.\nTo make things worse on OS X clang 3.4 is already the default version, it makes it a hard error, and replaces the gcc command.\n. Yeah, the Makefile starts to look like a ./configure script (along with the search for libpng/zlib), and that's ugly. Would you refactor this into a real configure script? #87\n. Re https://github.com/pornel/pngquant/issues/80#issuecomment-40143858 - I've refactored some structures on master. Does ICC still complain about struct optimizations?\n. Oh wow, this is a bizarre regression, especially that colormap isn't used that much.\nI've been assuming that alignment attribute on f_pixel would be inherited by all structures that use it, but maybe not. I've sprayed the code with alignment attributes: https://github.com/pornel/pngquant/tree/aligns\nDoes that help?\n. So 17071a9 should be reverted?\n. Can you test with __assume_aligned(0,16) (everywhere where f_pixel is read in nearest_search) like icc suggests?\n. No, unfortunately the algorithm requires histogram of the source images, and in practice that is impossible to generate without loading the whole image first.\n. Thanks\n. Thank you.\nI've picked some of the changes and added them to the master branch - declarations for inlining, SSE2 fix, braces.\nOther changes affect readability of the code or performance in other compilers, so I've kept them in the msvc branch: https://github.com/pornel/pngquant/tree/msvc\nDo variable-length arrays work in MSVC when you rename files to .cpp?\nShould I add #define cpuid(f,a,b,c,d) __cpuid(f,a,b,c,d)? Is MSVC function compatible with the asm fragment in pngquant?\nDoes the braces around if/for/while rule apply in all cases? Does this compile?\nWhat's the performance impact of volatile and unaligned reads? Should I just disable SSE when using MSVC?\n. I've changed ALWAYS_INLINE macro to be compatible.\nLoss of variable length arrays is unfortunate, especially that the library is not supposed to use raw malloc(), but allow a user-supplied function or a wrapper that returns SSE-aligned memory. It's not unfixable, these could be changed to the right wrapper function or made fixed size, but it replaces clean very efficient code with cruft :(\nThe code uses RGBA layout for 8-bit bitmaps and ARGB layout for float pixels, because alpha first is easier to work with in SSE. That is tricky, so I'm avoiding initializers that depend on the field order {{px.rgba.r, px.rgba.g, px.rgba.b, px.rgba.a}}.\nYou're right about C++. I've made a mistake of testing only with LLVM and it turns out it doesn't care and accepts mix of everything. I've removed C++isms from the MSVC branch.\n. Hopefully relevant changes from this pull request are on the msvc branch. \nI couldn't test them properly due to being inept at configuring VS :) #151 \n. Thanks\n. Does the latest master compile on Windows?\n. 17071a977fc96d8ed760e2c56e2525a619675f01\n. Unfortunately @AMoo-Miki is right, it's not really in the C99 standard, so I guess I should fix it.\n. Yes, it's to be able to easily add flags like -g  without having to specify \nall other CFLAGS.\nSame for CFLAGSOPT. I'm open to suggestions if there's a better way to do it.\nVERSION lagging is a bug. My intention is to keep pngquant and liq versions \nin sync. Maybe the authoritative version can live in a variable?\nThanks for looking into it.\n\nregards, Kornel\nOn 15 April 2014 21:25:38 pdknsk notifications@github.com wrote:\n\nWhat's the purpose of CFLAGSADD? Is this just to run make \nCFLAGSADD=-extra? And is there any particular reason why VERSION \nof the lib stays at 2.0.0? Should it be kept separate?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/pngquant/issues/87#issuecomment-40529765\n. That doesn't look like a typo to me. The flag is needed to make linker emit \nbackwards-compatible instructions.\n\n\nregards, Kornel\nOn 15 April 2014 22:06:27 pdknsk notifications@github.com wrote:\n\nLDLAGS += -mmacosx-version-min=10.6\nThat's a typo I guess, so it probably doesn't have any effect.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/pngquant/issues/87#issuecomment-40534369\n. Nice!\n\nmake seems to treat include target as a dependency, so this works:\nmake\nconfig.mk:\n    ./configure\n. I think if [ \"$(pkg-config --exists libpng; echo $?)\" == 0 ]; then can be simplified to if pkg-config --exists libpng;\n. On my OS X machine pkg-config --exists zlib doesn't find anything, but there's /usr/include/zlib.h, so a fallback would be useful\n. Pushed some tweaks\n. sh\nPNG_STATIC=$(find $LIBPNG_DIR -type f -name libpng\\*.a 2>/dev/null)\nthis might need | head -1 or such, as otherwise it'll go wrong if multiple files match (I do have 2 versions of libpng)\nto clarify: I'm assuming --libpng-dir=/usr or such, not custom donwload\n. Thanks. I'll add OS X-specific checks for zlib, etc.\n. OK, I'm done. Rebase at will :)\n. That's good work. Thank you.\n. The trick is in unknown :)\nThe tEXt chunk is defined to contain key-value pairs of textual metadata and nothing to do with pixels. Try using a private chunk identifier instead of a reserved one?\n. No idea what the compiler wants here. Does f200f7929eb92077264e5080b7168552c0c20712 help?\n. Looks like a bug/quirk in the gold linker. In this case the program will work with any alignment of these strings, so it shouldn't matter.\n. OK\n. Please check if the addition of fflush() helps\n. Might be fixed in d551e1058675bc6e3ee55ce3c17574672dda388c\nI know errors aren't buffered, so they can be out of order still\n. Does the npm package have libpng as a dependency? \nYou need to install libpng one way or another, e.g. brew install libpng\n. In that regard pngquant hasn't chaged - it always required libpng to be installed somehow.\nIn 10.8 Apple happened to ship (maybe accidentally) libpng as part of X11, but they've dropped X11 support in 10.9 and no longer ship usable copy of libpng.\nI'm not the author of the npm package, so I don't know what it's doing exactly.\n. Thanks\n. That's a nice idea!\nHowever, rather than checking that for every pixel in pam_computeacolorhash you could just check it once per color in pam_acolorhashtoacolorhist (see PAM_ADD_TO_HIST macro)\n. In both cases when importance_map is used the total weight is not exactly equal to number of pixels (can be 0.5 to 1.5 of total weight), but I think that's fine (the limit is arbitrary anyway).\nIf you make pam_acolorhashtoacolorhist aware of total surface area (maybe passed in via field in struct acolorhash_table?), then it should be able to limit relative to max area in exactly the same way.\n. Excellent!\n. Expansion of * is not handled by pngquant, but by the shell. I'm not sure what \"DOS\" wants, but in bash it'd be:\nsh\npngquant -- \"folder with spaces\"/*.png\nor\nsh\npngquant -- folder\\ with\\ spaces/*.png\n. That's expected, as pngquant saves files using vanilla libpng. Would you be able to change it to use, e.g. lodepng and 7zip instead?\n. I don't think bruteforcing of compression parameters like optipng does is appropriate for pngquant \u2014 it's too slow and it's duplicating (or creating an unnecessary dependency on) another tool.\nIf anything, I'd rather use another zlib/png writing implementation that's more efficient, but still relatively fast.\n. Interlacing makes files larger, so I don't support it.\nImage converted with pngquant should load fully quicker than a \nhalf-resolution preview of interlaced truecolor version :)\n. If you want interlace, I suggest postprocessing images with OptiPNG -i 1 option. \nKeep in mind that non-progressive images still give feedback during loading, they just partially load from top to bottom, so users still see progress.\n. compiling with -static-libgcc may help\n. How about pngquant? :)\n. If you mean testing like unit tests, then unfortunately I don't have anything like that. If you'd like to contribute it, it'd be great!\nIf you want to check whether your binary produces valid results, then you could compare results with output of official pngquant binaries. Don't expect to get bitwise identical results \u2014 there may be minor differences caused by different floating point and openmp optimizations.\nTo sanity-check output from pngquant I track quality of images with https://github.com/pornel/dssim\n. Here's a simple example app in C:\nhttps://github.com/ImageOptim/libimagequant/blob/f54d2f1a3e1cf728e17326f4db0d45811c63f063/example.c\nand C#:\nhttps://github.com/ImageOptim/libimagequant/blob/f54d2f1a3e1cf728e17326f4db0d45811c63f063/libimagequant.cs\nand a fancier example in Rust:\nhttps://github.com/ImageOptim/gifski/blob/418de5ab90973f41901e0d55a67e7c199d359ada/src/lib.rs#L133-L157. It's interesting that a different number of colors is found in the images. \nIf you're using the official binary, then it's using Cocoa to read the images, so the image is subjected to alpha premultiplication and color profile conversion that may be slightly different between versions of OS X indeed.\nAre you able to build the binary yourself? Try: ./configure --without-cocoa && make and see if that gives you more consistent results.\n. OK :)\n. pngquant can be made to work with lodepng, which is a smaller and more modern codebase, so may be easier to compile.\n. What's the error? Sorry, I'm on a mobile connection and jsfiddle site is too large to load.. missing function: liq_attr_create - looks like it's not linking libimagequant.a properly.\nBTW: for web use you probably should not try to build pngquant, since pulling libpng and zlib is probably going to be difficult, wasteful and unnecessary.\nOnly build the library:\nhttps://github.com/ImageOptim/libimagequant\nand use canvas to get raw pixels.. canvas.getImageData() returns a matrix of pixels that is the same format as expected by liq_image_create_rgba()\nI don't know how emscripten will tolerate difference between \"saturating\" and \"raw\" 8-bit typed arrays, so in the worst case you may need to make a copy.\nBrowsers can't save PNG8 though, so for this you might need to compile a library. I recommend lodepng, since it's all in just 1 file.. The first argument is settings from https://pngquant.org/lib/#liq_attr_create\nThe function liq_image_create_rgba doesn't optimize anything. It just explains to the library where the pixels are and how big is the image you want to optimize.\nPalette generation and remapping are separate steps. See example code at  https://pngquant.org/lib/\n```c\ninclude \"libimagequant.h\"\nliq_attr attr = liq_attr_create();\nliq_image image = liq_image_create_rgba(attr, example_bitmap_rgba, width, height, 0);\nliq_result *res;\nliq_image_quantize(image, attr, &res);\nliq_write_remapped_image(res, image, example_bitmap_8bpp, example_bitmap_size);\nconst liq_palette *pal = liq_get_palette(res);\n// Save the image and the palette now.\nfor(int i=0; i < pal->count; i++) {\n    example_copy_palette_entry(pal->entries[i]);\n}\n// You'll need a PNG library to write to a file.\nexample_write_image(example_bitmap_8bpp);\n```. For lodepng it'll be something like this\n```c\n    LodePNGState state;\n    lodepng_state_init(&state);\nfor(int i=0; i < num_palette; i++) {\n   lodepng_palette_add(&state.info_png.color, palette[i].r, palette[i].g, palette[i].b, palette[i].a);\n   lodepng_palette_add(&state.info_raw, palette[i].r, palette[i].g, palette[i].b, palette[i].a);\n}\n\nstate.info_raw.colortype = LCT_PALETTE;\nstate.info_raw.bitdepth = 8;\nstate.info_png.color.colortype = LCT_PALETTE;\nstate.info_png.color.bitdepth = 8;\nstate.encoder.auto_convert = 0;\n\nlodepng_encode(buf, outsize, indexed_data, width, height, &state);\n\n. `example_bitmap_8bpp` is a 1-byte-per-pixel remapped bitmap that uses the palette. You need to allocate and free it.. I've pushed a fix for this to master. Let me know if that solves it.\n.\n gcc pngquant.o rwpng.o -static -static-libgcc -o pngquant\n```\nHow did you get that command? It doesn't look like anything produced by configure && make\n. Can you paste contents of your config.mk?\n. If you override LDFLAGS then you're responsible for linking all the libraries yourself, including png, zlib, m, and imagequant.\nif you do ./configure LDFLAGS=-static -static-libgcc it'll append necessary flags to yours.\nHowever, I don't think static linking of libpng will work, since configure looks for a dynamic library.\n. I guess behavior of LDFLAGS depends on how configure and makefile are implemented. I'm not sure what is the best approach - give full control (and let it break) or force it to include flags I think are right\u2026\nThe earlier fix will be in the next release\n. No, libimagequant is modern C, but not C++.\nWith small changes it could be compiled as C++ in clang, because clang is very forgiving and ignores incompatibilities, but a proper C++ compiler should reject libimagequant.c.\n. How did you get cpp extension? In the official tarballs I only see .c\n. size_t is part of C stdlib so you shouldn't need anything special to get it (other than use C, not C++)\n. Thanks\n. Thank you\n. For ARGB444 use --posterize=4. For RGB565 --posterize=3 will work, but leave one bit of green unused.\n. The option is in the readme and the manpage. I've updated the built-in help. 554add4dbf1568ac768edcf60a6e4fe6bcdbc989\n. In this particular case I'm afraid you won't see improvement with pngquant, because after posterization that image has only 145 colors anyway, so there's nothing to improve in the quantization step.\n. If you use just the libimagequant (only using files in lib/) then it won't require libpng, but the library itself doesn't have PNG-writing ability (it gives you pixels + palette and that's it). \nIt will be up to you how you generate the file. It's relatively easy using http://lodev.org/lodepng/ for example.\nVS may have trouble compiling modern C, so see the msvc branch https://github.com/pornel/pngquant/tree/msvc and https://github.com/pornel/pngquant/pull/83 for workarounds for MSVC.\n. If libpng works for you already, then that's great.\n. An example is here:\nhttps://github.com/ImageOptim/libimagequant/blob/f54d2f1a3e1cf728e17326f4db0d45811c63f063/example.c. If you run pngquant with -v argument it'll give you progress of the slowest color selection step.\n. Thanks, I've updated the msvc branch. Let me know if it compiles (e.g. there are new variable-size arrays in pam.c)\n. I'm not sure if I understand. Is the problem caused by --skip-if-larger not skipping files? Can you provide me an example file that is not skipped?\n. Thanks, that was buggy indeed cb30c8a12859d8c591275bc44271d2a29c61b461\nPlease try version form master.\n. If you literally execute brew install libpng it should work.\n. That's odd. What do you get when you run pkg-config libpng --libs?\n. That looks like a problem with macports installation (perhaps you've skipped changing of PATH when installing?)\nI've added macports' paths as a fallback in the ./configure script. Please let me know if that helps.\n. That's output from your script, and I don't know how it uses pngquant, so it's hard for me to investigate. Can you show me how you're invoking pngquant? Can you send me an image that causes the error?\n. Thanks. I've found the bug. It's a bit tricky to fix, so I'll do that later.\n. Sorry, I'll see if I can fix it this weekend.\nFor now use latest stable version.\nWhen file is skipped, pngquant returns with status 98. You can use this as a work around:\nsh\ncp image backup\npngquant --skip-if-larger \u2026yadayada\u2026 || cp backup image\n. I've tweaked it again in master. Please try now.\n. I can't reproduce it any more, so hopefully it's been fixed in 8b9f0e3e709dc8a2fe951547e6a76bd5986a9384\n. There's very little value in handling of these errors \u2014 if the system can't allocate 16 bytes at this point, it certainly won't be able to allocate many more megabytes needed for the tool to continue.\nPlus, on many modern systems malloc() actually never fails in practice: when RAM runs out, the OS uses swap space, and when swap runs out it starts killing processes (or more often just everything starts crashing so bad that the system reboots).\n. That would be over-engineering. It doesn't make sense to write dozens of lines of code in anticipation of a situation that will never happen, and still be unable to do anything useful in that case.\n. Could you remove the &> /dev/null bit from line 224 and see what error it generates? \n. Uhh, that does look like the compiler is broken. \nCould you find a combination of options that makes it produce executable from just int main(){}?\ngcc -xc -std=c99 <(echo \"int main(){}\") -o /dev/null\n. So is it the <() construct causing problems?\nIf you change https://github.com/pornel/pngquant/blob/a76b06d283eae0379d4eee47cc57a5630dd52b08/configure#L224 to:\nsh\nif ! { echo \"int main(){}\" | \"$CC\" -xc -std=c99 -o /dev/null - &> /dev/null }; then\ndoes it complete successfully?\n. Great! Thanks for your help.\nPlease check if the latest version fixes the problem for you.\n. It should run just fine. \nThe speed depends on size of images you're processing. If it's too slow, you can use http://pngquant.org/lib/#liq_set_speed\n. Thanks\n. You need to ask Pinterest to improve support for indexed PNG format (PNG with PLTE and tRNS chunks).\nAlso try \"blurizer\" and \"posterizer\" options of ImageAlpha.\n. I appreciate the concern, but for people who want to use historical versions we've got git history, so it's fine to just overwrite it. \n. For the record, the up to date spec (as of 2.3.3) is here https://github.com/pornel/pngquant/blob/master/pngquant.spec\n. Yes, indeed. Please test version from master (not released yet, I'm going to release it in a couple of weeks)\n. Disabling SSE on 386 makes sense.\nWhat compiler (version) are you using?\n. I've tested with GCC 4.9.1 on OS X and -m32 and it builds fine, so I don't know what the compiler doesn't like here. Sorry.\n. I won't fix this. OS X's handling of PNG resolution is so bad it makes me weep :(\nOS X doesn't read resolution from the file! Instead it adds hidden HFS metadata in the filesystem (xattr).\nDo a test:\nsh\ncat NiceHighResScreenShot.png > Copy.png\nshasum NiceHighResScreenShot.png Copy.png\nYou'll get two files with absolutely identical contents, and one will be displayed as high-res and the other as low-res file.\n. I'm testing on OSX Yosemite and quick look and Preview ignore DPI metadata (they will show you the numbers, but displayed size is wrong unless xattrs are copied)\n. As far as I'm aware pngquant correctly preserves the standard DPI information embedded in PNG files when it's using libpng 1.5+.\nHowever, OS X does not support DPI metadata in PNG. It doesn't write it. It doesn't read it.\nInstead, OS X only uses its own undocumented non-standard hidden HFS-only metadata that gets lost when a file is copied or replaced by a program that isn't Apple's (see my previous comment).\nI really don't want to add special support for OS X's hidden \"this is a screenshot\" flag, because it's a such a stupid and fragile hack. \nPlease file a bug with Apple and ask them to support standard DPI metadata in PNG, or at least extend PNG in a documented way that isn't specific to the proprietary HFS filesystem.\n. By PNG DPI metadata I mean pHYs chunk in the PNG file. Yes, it's different from OS X's extended attribute com.apple.metadata:kMDItemIsScreenCapture that is added to screenshots on HFS disks.\n\nThe numbers are right so why does pngquant change them?\n\nYou see different DPI, but it's not because pngquant changed it, but because OS X does its own magical thing that works only on specially blessed individual instances of files on HFS disks.\nIt's a similar problem to files losing their magic behaviors in Mac OS classic due to resource forks.\nEven creation of perfect byte-by-byte copy of the file's contents will appear to change DPI of the file \u2014 a perfect copy of that file! Changed!\nPlease try to understand exactly what happens here:\nsh\ncat NiceHighResScreenShot.png > Copy.png\nshasum NiceHighResScreenShot.png Copy.png\nIt will take NiceHighResScreenShot.png and create a perfect copy, byte by byte. You'll get two files that are identical.\nYou can verify this with shasum:\n\n448ec5b77971cea91b720c2d132b4e67f5622cd6 NiceHighResScreenShot.png\n448ec5b77971cea91b720c2d132b4e67f5622cd6 Copy.png\n\nWhich is a strong guarantee that the files are absolutely identical.\nAnd yet, Quicklook and Preview will display them at a different size! So even though the file has not changed, the DPI has changed!? Yes, that's how OS X does it! \n. Right, so for a random cat and systems that respect PNG's pHYs chunk you need pngquant that uses libpng 1.5 or higher, and it'll work:\nTake a random cat with DPI 144 via pHYs chunk\nNon-OS X, non-Debian version of pngquant:\n\n./pngquant\npngquant, 2.3.4 (September 2014), by Greg Roelofs, Kornel Lesinski.\n   Compiled with SSE instructions.\n   Using libpng 1.6.12.\n\nsh\n$ ./pngquant /tmp/cat.png\nand you get cat-fs8.png\n that has the right chunk preserved:\n\n. Can you send me an image that has this problem?\n. Thanks. I can't reproduce the problem, but I'm seeing different file size and number of colors in the image. Did I get the right version?\nmd5 of the file I have is 7731ffe06c067e77de2fe19fed112410\nvlcsnap-2014-10-05-12h18m04s61.png:\n  read 549KB file\n  made histogram...99227 colors found\n  selecting colors...3%\n  selecting colors...5%\n  selecting colors...18%\n  selecting colors...20%\n  selecting colors...32%\n  selecting colors...35%\n  selecting colors...47%\n  selecting colors...60%\n  selecting colors...73%\n  selecting colors...86%\n  selecting colors...98%\n  selecting colors...100%\n  moving colormap towards local minimum\n  image degradation MSE=25.948 (Q=31) exceeded limit of 11.334 (65)\nSkipped 1 file out of a total of 1 file.\n. Thanks. It's fixed in master.\n. Unfortunately pngquant assumes the extension is .png. If you use an unusual extension you'll need to use a 3rd party program (I can tell you how to batch rename in bash, but I don't know enough about Windows shell).\n. Please add -v argument and see if you get any errors.\n. OK, I've found it: 422d05f1105d6d1ee0d2702e7f5a18fada6cbf41\nThe file is suspicious, it has gamma chunk with a value that looks like an error. I've made warning about it clear.\n. OK, I've disabled chunk preservation feature in very outdated libpng versions: 4966ee567608a0bf7a162ad77c59eaa839fe485e\n. OK, thanks. I think I'll cherry-pick changes for make shared to build a shared lib, but I don't intend to link it dynamically in pngquant.\n. #138 #146  Done in 6c4649b56b6d639b66755a28395844b62e57eff4\n. I don't support Mac OS X 10.6 any more. Please upgrade to 10.9.\n. I can't reproduce it in the current version: \n. No, the steps are a limitation of the file format. You can control amount of dithering with --floyd=0.5.\n\n. Thanks\n. I've committed a fix for this. Please let me know if it works.\n. Oops. Fixed in 4e0ef01ae670eecc201d33811977ab448601f022\n. Oops :)\n. Please try version on master (e8bbe9f6342fb5022572eb3e2a98651fff3f7a94)\n. I'll leave it at that. These warnings are about libpng failing to declare accurately constness, and I'd rather not make constness in pngquant wrong as well to match that.\n. Thanks for fuzzing it!\nThe crash happens in https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/rwpng.c#L163\nc\nmemcpy(chunk->data, in_chunk->data, in_chunk->size);\nwhere in_chunk is given by libpng, and from the stack trace it looks like the length was completely wrong, so it may be a vulnerability in libpng itself.\n. This is because in your example pngquant is told to keep a chunk that is 32636941 bytes large.\n\nmemcpy (__len=0x1f2000d, __src=, __dest=) \n. Thanks. Hopefully fixed\n. Thanks!\n\nI think having shared lib build is a good idea.\nI don't mind DLL build being separate (it's probably easier for Windows users that way)\nCould you generate sharedobjs by replacement of OBJ? I'd like to avoid specifying same file twice.\nWhy $(subst lib/libimagequant.a,,$(LDFLAGS))?\n. > It seems configure always adds the .a to LDFLAGS\nOh, that may be a mistake. It's needed for pngquant binary, but shouldn't be added to flags of the library itself.\n. Looks good. Thanks!\n. Thanks. \nLocale are troublesome, so I'd rather leave them out of scope, e.g. invalid UTF-8 is allowed on file system level, but not by all locale.\n. Thanks for investigating that. I'll add unlink for Windows.\n. Crontabs require PATH specified. It's not unique to pngquant.\n. The default behavior is equivalent to --quality=0-100 (i.e. try best quality, but accept whatever)\n. Thanks!\n. Please note that libimagequant does not support PNG or any compressed image format at all. It creates raw data that you need to pass to a file-format-specific library.\n. To write a png either copy rwpng.c from pngquant or use http://lodev.org/lodepng/\n. I suspect this is a problem in the way dithering handles overflow. Error diffusion sometimes creates values out of range, and when they're clamped the shade of color changes.\nhttps://github.com/pornel/pngquant/blob/4f492bbc401bdb4fd6509af7c1143e1b3ae84582/lib/libimagequant.c#L1001-1039\n. Try --floyd=0.5. Also test if it happens when some colors have value 255 (i.e. maximum blue or maximum green).\n. Yes.\n. Good news! I've found the cause, and it's due to cleverness in the fast palette search algorithm (actually not related to dithering).\nBad news it's complicated to fix :)\n. This is fixed in ad61aa1b54ea04d660d9a924234fee7f4c16f6ec\n. With version compiled from 1af5327862b7158bbae70571506c74bc44ba2739 I'm getting:\n\nIt looks OK to me?\n. Sorry, I can't help, because this is not related to pngquant tool specifically, but one of the node wrappers/grunt plugins built around it.\n. Try reporting it to author of the grunt plugin you've installed.\n. How are you creating the deb file?\nHave you tried the official one? https://packages.debian.org/jessie/pngquant\n. Closing due to lack of information\n. Dupe of  #140\n. Does cmake generate nice project files that are usable without cmake?\nI don't want to switch pngquant to cmake, so I'd at best use cmake to generate .sln file and discard the cmake file.\n. Yeah. I've tried nuget's libpng a while ago, and it installed headers correctly, but not libraries (or at least I could not figure out how to link with them).. Obsoleted by Rust #166. I know, sorry. I'm sticking to tags being immutable forever, so I'll fix that in 2.4.1.\n. Done\n. I know it's possible, but I consider this inappropriate. Tag is supposed to be a permanent indicator, so nobody has to ever wonder whether they have an \"old tag\" or \"new tag\".\n. thank you\n. BTW, could you help with #151?\n. The error 25 means libpng can't read it, probably because the file is corrupt. There's nothing pngquant can do about it. Load and re-save the image in a graphics program to fix it.\n. I've changed the error message to be more user-friendly though. cb05f5c181d96bfe046422314ba788fea6bc5afd\n. I can't reproduce it. \npngquant 2.3.5 generates file that is 219 bytes large.\nAFAIK TinyPng combines pngquant with optipng. I they may also use the --quality settting to automatically reduce number of colors.\n. OK, I've found it. It's not a bug, it's a feature! :D\nThe file has 19KB of metadata. pngquant with libpng new enough can preserve metadata.\n\n. Run ImageOptim or pngcrush -rem alla that does the removal. \n. Sorry, I'm unable to reproduce the issue. In all browsers I have (Chrome and Safari on OS X as well as Firefox and IE on Windows 10) it displays without the yellow shift.\nThe image doesn't have any color profile information, so theoretically it's undefined and could be interpreted as using monitor's profile. \npngquant interprets unlabelled files as having sRGB gamma 2.2, same as most modern web browsers, and when it writes files it explicitly puts sRGB tag.\nTry ImageOptim or some optimizer that strips metadata from PNG and see if that helps. If so, then your browser is doing some weird color management.\n. Indeed, I'm able to reproduce this.\n--floyd=0.5 usually helps avoid this bug.\n. Fixed in a8598d9cc62414c53543e94ac7f404a01e1bcce3\n. That's cool. Thank you.\n. Oh, I'll have to automate this :)\nAnyway, it's not really wrong, because 2.4.2 binary is identical to 2.4.1, I've only updated copyright notices.\n. There were no code changes between 2.4.1 and 2.4.2, so nothing needs to be updated.\nThe library has a stable ABI since 2.0.0, and I don't plan to break it (I may add new functions in the future).\n. Rust certainly supports Linux, although it may take some time before distros create packages for it:\nhttp://www.rust-lang.org/install.html\nIt also getting musl support, which as far as I understand, allows it to create static binaries that work without glibc, so are compatible with any Linux distro (on x86/x64)\n. Rust is on its way to Fedora and Debian. For platforms without packages it's easy to install and keep up to update via rustup. It can target iOS, Android, *BSD, PPC and MIPS Linux. Not IRIX though.\nCurrently pngquant is annoying on Windows due to poor C support in Visual Studio, POSIX-isms in the code, and need for bash-based configure script. OTOH Rust has very good support for Windows, and Cargo build scripts can be used to hide the pains of C integration.\nFor a while now I've stopped using C for and have been using Rust instead for all new projects, and I'm quite happy with it. \nFor now pngquant works well enough, so I don't feel pressure rewriting it immediately. But if I decide to add any major functionality, I'll probably split libimagequant and pngquant, and rewrite pngquant.c in Rust.\n. I'm already having great results in Rust. Since pngquant and libimagequant are C projects, I think Rust, which does not have GC runtime and can produce pure \"C\" libraries, is a much better fit for this project.. Now cargo run runs pngquant :)\nIt's still all 100% C, but everything is in Cargo packages. Almost builds on Windows, too.\nhttps://crates.io/crates/imagequant-sys\nhttps://github.com/pornel/pngquant/blob/master/Cargo.toml\n. First Rust code has landed!\nThe good news is the whole program builds on Windows out of the box!. See #252. Thank you\n. So you're using the library to remap files to an existing, known palette, rather than to generate a new palette? That's a use-case I haven't thought about.\nIn that case 0 colors in the new palette, or histogram after removal of fixed colors, could happen. I'll see if code can work with that safely.\n. Ok, fixed in 1a744c63a98ce1d611a187d5d32fa800ca73a7eb\n. Gamma correction and color profiles are features of the PNG format, so strictly speaking they can't be disabled, they can just be handled one way or another (e.g. ignored and discarded, or applied). They're not related to palette.\nHandling of color profiles varies depending on how pngquant is built. If it's built without color profile support, or with libpng older than 1.6, then it's going to be erratic and I can't help this.\nsh\n$ pngquant -h\npngquant, 2.5.0 (June 2015), by Greg Roelofs, Kornel Lesinski.\n   Compiled with SSE instructions.\n   Using Apple Cocoa image reader and libpng 1.6.18.\nif it shows \"Using Apple Cocoa image reader\", then color profiles and gamma are handled the same way Preview.app does, and should be OK.\nIf your build doesn't indicate support for color profiles, then color may be off. The solution is to compile pngquant with Cocoa image handling or libcms2.\nIf you still see problems with the Cocoa reader, then that may be a bug \u2014 please post the image that's changing.\n. On Linux you must compile with libcms2 if you want OS X's color profile to be respected. Otherwise Linux version doesn't know what to do with the color profile and discards it.\nThe gamma is always respected, but for OS X's screenshots that's not enough, since OS X relies on embedded monitor's profile.\n. In 2.6 I've improved handling of files without color profiles, but I think in this case the problem is caused by lack of necessary color profile handling in the linux build.\n. Checking unlink would be pointless:\n- if unlink succeeds and rename succeeds, that's a success.\n- if unlink fails and rename fails, that's a failure.\n- if unlink fails, but rename succeeds, that's a success (may happen if the destination file doesn't exist).\n- if unlink succeeds, but rename fails, that's a failure.\nAs you can see, logically result of unlink is not supposed to have influence on result of this function.\n. Oh, I shouldn't allow source and destination to be the same in this case.\n. No, wait, it isn't, because it's written to a temp file first.\n. Is Windows really that broken? read_image calls fclose, so this function shouldn't return until it closes the file.\n. Yes, if somebody helps with #151 \nI'm not using Windows, so I can't do it myself.\n. Does your CMake build use Visual Studio compiler and runtime DLLs? I'm interested in creating static libraries that VS projects like irfanview can use.\n. Oh, OK, that will be very useful then!\n. I've got it working in C#:\nhttps://github.com/pornel/pngquant/blob/msvc/lib/libimagequant.cs\n. OpenMP is optional, so you can probably just delete all lines referring to it. \n@jibsen may know more about that.\n. What changes are in the m version?. I'm working on getting pngquant built via msvc toolchain. The main problem is getting libpng and zlib compiled.\nI've heard nuget can help.\nCan anybody help me how to download/configure/compile/install libpng via nuget, from a script?. I don't think CMake solves the problem of having libpng built. It will fail with missing headers, missing lib, like all the others.. I can't help you with npm modules. Node is a completely different thing. Please ask npm module author about this.. This errors means your DLL is 32-bit and C# program is 64-bit (or the DLL is 64-bit and C# is 32-bit). Build the DLL again with settings to match requirements of C# programs.. The error means you have an old 32-bit-only version of mingw (it could be from an old installation that you have in PATH). Uninstall any 32-bit mingw and make sure only 64-bit mingw is installed and in PATH.\nAlso try this:\nsh\n./configure --extra-cflags=-m64 --extra-ldflags=-m64\n. I now use Rust/Cargo to build it on Windows.\nsh\ncargo build --release\n. Fixed, thanks 63bbb078bc63ee5ae922f22c3b3f441beaf3aabe\n. OK, that function had confusing identity. I've added liq_remapping_quality for reporting actual remapping results, rather than that quirky thing the library uses internally for estimating quality :)\n. Thanks. I've partially merged this in. I'd rather avoid casts, even if that causes a warning.\nI've tried to fix a few more sign conversion errors, but there's a high chance that I've broken something in the process :)\n. Thank you\n. The new version supports color profiles, while the old one was ignoring them and having wrong colors.\nThe new version has more accurate color search and dithering algorithm that doesn't erroneously render flat areas and color streaks.\n. Yes. \nKeep in mind that your file has a cHRM chunk that affects color brightness and saturation. \nThe image from pngquant without color profile support will be closer to how the image is displayed in other programs that don't do proper color management.\nThe image from pngquant with color profile support will be closer to how the image is displayed (and is supposed to be displayed) in other programs that do proper color management.\n. #171\n. @cssignet might know\n. Thank you @cssignet!\n. @petrdiblik yes, that's expected.\n. In previous version it'd say \"compiled with support for color profiles\" and be quiet otherwise. So nothing changed in actual capabilities.\n. I didn't know libpng-config existed. The configure script uses pkg-config.\n. If you put libpng 1.6 in the same directory and compile it, then pngquant's configure will find it and link statically\n. or\nsh\n./configure --with-libpng=$(libpng-config --prefix)\n. Ugghhh. Debian has a serious problem with being stuck with a 10-year-old version of libpng, and they can't upgrade it because some old packages don't support anything newer :(\nSo on Debian specifically you have to compile your own copy of libpng from source (not a package), and then specify that directory in pngquant's configure:\n./configure --with-libpng=/tmp/my/libpng1.6/\nIt'll link statically to it if it finds libpng*.a in there.\n. Try\n./configure --with-libpng=/home/###/src/libpng-1.6.18/\n. Are you using libpng 1.6+?\nDo you get any information in stderr?\nHow large are the images? Are you running multiple processes in parallel?\n. OK, if you're seeing it intermittently when processing lots of files you may simply be running out of memory to decompress so many images at the same time.\npngquant compiled with openmp will nicely run multiple files in parallel, without running too many at the same time.. > So why can't I force it to save a bigger file, but with higher quality?\npngquant is limited by what the PNG format can do. PNG supports 8 and 24/32-bit color modes, and the file size is roughly proportional to number of bits per pixel.\nIf the image doesn't \"fit\" in 8-bit mode (which has a hard limit of 256 colors) the next available mode is 24-bit. So just going from 256 colors to 257 colors is close to increasing file size 3 times! At that point the trade-off between file size and quality becomes rather bad, and pngquant's core algorithm doesn't make much sense for the 24-bit mode anyway, so pngquant gives up instead of forcing square peg into a round hole.\nI've written another tool that tries to make 24/32-bit PNG more compressible:\nhttps://github.com/kornelski/mediancut-posterizer\n. Can you send me (or attach here)  the image that is causing this bug? \nWhich version of pngquant are you using? \n. OK, that one has been fixed indeed.\n. Files generated by pngquant have sRGB chunk (because that's the colorspace that pngquant assumes and optimizes for).\nBrowsers that display it with \"dull\" colors probably support color profiles correctly, and other browsers display it using your monitor's color profile, and your monitor isn't calibrated for sRGB.\nThe images on the website have been optimized with ImageOptim, which strips all metadata including the sRGB chunk.\n. I'm afraid there's no one true good workflow:\n- Lots of tools ignore color profiles, work in unlabelled \"RGB\" without gamma awareness, and end up displaying graphics in monitor's native profile, regardless of what it is. This is technically quite incorrect:\n  - Dark shades will be completely black for some users, and very visible posterized gray for others, and there's nothing you can do about it.\n  - On high gamut monitors colors will be oversaturated, sometimes so much that everything looks like drawn using fluorescent markers. Some users actually like that and Sony even sells phones where this bug is a feature :)\n- The correct behavior is to read color profiles and embed color profiles. The software displaying images is supposed to convert colors to match monitor's profile, so that brightness and saturation of the image is the same everywhere.\nPngquant is trying to balance correctness and compatibility. It reads and writes color profiles where possible, and assumes sRGB for unlabelled images.\nHowever, support for color profiles everywhere is generally weak, so pngquant converts all images to sRGB profile, which is the most common one. The effect is that the image looks the same in all color-profile-supporting software, and in color-ignorant software on sRGB monitors.\n. No, the source image was unlabelled, so its profile would be whatever any software decides (some decide sRGB, some decide monitor's native profile). pngquant assumes sRGB.\n. Are we talking about the same image? I've inspected https://cloud.githubusercontent.com/assets/15492674/10863366/5c3b593c-7fcb-11e5-9963-9aae3d97e515.png and it didn't have any color-related chunks.\n. but yes, ImageMagick shows sRGB anyway, so it's assuming lack of color profile information means sRGB.\n. In 2.6 I've tweaked handling of unlabelled colors. Now images that had no color profile information at all won't get sRGB chunk written, which should keep colors consistent.\n. Please run:\nbash -x ./configure\n. Also please run \nbash -x ./configure\nand share the log so I can debug the problem\n. Thanks, I'll fix it in the next release\n. Fixed in 308afdc5534c0a85ac36c76b8f91723bf3f32349\n. Thanks\n. Does rpm spec need an update?\n. Thanks.\nIt looks good, except the .so.0 file isn't removed on clear.\n. Thank you\n. So this option is actually --skip-if-larger-or-if-quality-dropped-so-much-that-it-may-not-be-worth-filesize-saving, but I had to use a shorter name ;)\nThere's an additional check in pngquant that compares quality loss to filesize reduction, and tries to skip files if drop in quality was bigger than drop in file size.\nYour case is interesting, because it has both big quality drop, and big filesize drop.\nCould you share that image?\n. Thanks for the image. I've tuned logic to allow that conversion d5ab47988bb437a4f2bfdd2ee48b532614896115\n. Thank you\n. OK\n. There is no such option. pngquant supports PNG only, and PNG does not support premultiplied alpha.\nI could add a new input format to libimagequant, but I'd rather not create a new PNG-command-line-switch hybrid format. \n. That exec() looks odd. Are you trying to install it from inside another application?\nDid you get any errors when you ran make or make install? Does running pngquant from command line work?\n. What platforms don't have bash?\n. Thank you for the patches. However, I've decided not to apply them.\nThe systems I usually test on don't have the real sh, so sooner or later I'd accidentally sneak some bash-isms back. The number of gotchas in the bash language scares me, so workarounds for sh on top of that worry me even more.\nAlso, the project already relies on GNU-isms in its Makefiles, so BSD systems will need to deal with the GNU/Linux bias of the project anyway ;)\n. Please see libimagequant: https://pngquant.org/lib/\n. All the optimisation secret sauce is in the library. pngquant executable is an interface for it that adds loading and saving of images. \nrwpng has a bit of logic to load PNG properly with color profiles on any platform, but OTOH its equivalent for OS X is only a few lines of code.\nI'm assuming that if you have an existing C/C++ program for image manipulation, you already have some sort of image I/O implemented, and a C program operates on in-memory bitmaps, rather than file paths.\n. So I think libimagequant is providing the functionality. There is some useful code in rwpng, but it's \"just\" proper reading of PNG files, not quantization. And rwpng is reusable in other projects, e.g. I use it in dssim.\n. Thank you\n. Thanks\n. I think that's a problem of libpng. If the profile is not broken, libpng should fix their detection.\nI've added \"libpng warning: \" prefix to make it clearer it's just a warning, and that libpng is to blame :)\n730f9061589f8e3bb428b9ccd72497e464074576\n. I see. In that case removing the check makes sense indeed.\n. Thank you\n. Yes, as the comment states, it is to make dithering same every time you convert the image.\n. Where does the improved compression come from? Is it because of increased applicability of the sub filter? If so, it may be possible to optimize for that explicitly.\nHave you tried sorting by popularity first, then splitting it in 2-3 bands, and sorting each by band hue/luminance individually? I'm assuming that savings come from sub filter, so it produces low numbers. A mix of popular (low-numbered) colors and low numbers where similarity works could give nice results.\n. That is surprising. AFAIK deflate doesn't care about values, only about their frequency and repetition.\nAre images identical? Maybe remapping step chooses colors differently?\n. --map has a quirk that it ignores palette entries that aren't used in the given image, but apart from that it should use the colors exactly.\nIf map file has fewer than 256 colors, then specify that number of colors. Otherwise pngquant will use extra ones.\nOn libimagequant level you can specify fixed palette colors.\n. That was palette postprocessing that guarantees local optimum for that palette. I've disabled it for the map option: b3e06e6182d725288493783bdcf74210059a83ec\n. BTW: libimagequant API has support for custom palette via https://pngquant.org/lib/#liq_image_add_fixed_color\n. I've tuned dithering to support this case a bit better:\n\n. Yes, please!\n. Are you still interested in this?. Thank you\n. That's a great find. I've changed from max to avg, because it's typical performance was slightly better than max, but I didn't know about such counter-example.\n. I've fudged it a little in fb571dfc74d37598414d27a7105acce1c4f43795\nI'm afraid the root cause is the limitation of median cut.\n. I can't reproduce it with the current libpng (1.6). \nIf you run pngquant (without arguments) and it warns you that your libpng is outdated, then it is outdated and that's the problem. For example, pngquant on Debian stable is buggy and that's Debian's fault (fortunately next version of Debian will finally fix libpng).\n. Please run:\npngquant -h\n\nand report what version of pngquant and libpng you have.. Yeah, so the problem is in buggy libpng 1.2 installed in the system, same as https://github.com/pornel/pngquant/issues/200#issuecomment-221904805\nYou need to install pngquant from a less-horribly-outdated Linux distribution. This is not a bug in pngquant, but a failure of your Linux installation. I can't do anything about it.. For full functionality libpng 1.6 is required (4 years old). For bare minimum not-broken PNG loading and saving libpng 1.4 is required (merely 7 years old). \nYou have libpng 1.2 which is even older and buggier. The bug you're experiencing has already been fixed \u2014 7 years ago.. In pngquant I'm optimizing for MSE of my made-up \"perceptual weight\" of colors, where pixels in \"noisy\" areas get less weight than in smooth areas.\nI'm not optimizing for anything more realistic because better metrics are way more expensive to compute, to the point of being infeasible.\nFile size is not a quality metric, so I still need some quality metric to combine it with (to optimize for \"best quality under xKB\" or \"best quality/filesize ratio\"). \nGzipped file size is also a pain to work with, because it's slow and not monotonic. More precise colors can lead to less dithering, and smaller file size, because dithering compresses poorly.\nI can measure MSE of a palette against histogram cheaply, but e.g. an SSIM metric would require remapping and comparison against full reference, which is orders of magnitude slower. \nMSE is also simple and fast enough to be used in gradient descent. Feedback from SSIM is fuzzy, and for really good results requires complicated pooling. But then the score can't be used in a straightforward way to adjust histogram weights in the gradient descent.\n. Thanks for the test cases.\nI know they're handled well by the LBG algorithm:\n\nbut it again is order of magnitude more expensive. It may be worth to investigate some kind of approximation/hybrid version of it.\n. Thanks\n. I didn't suggest that, because it's very cumbersome in PHP. You will have to use proc_open and pipes.\nOn most servers it won't save you more than 1% of processing time, because cached I/O is quite fast compared to amount of computation needed for compression.\n. On modern systems it's very likely that it won't make any difference at all, and the data would be in RAM at all times, even when you create a temporary file.\nThat's because many Linuxes use tmpfs for /tmp, which stores files in RAM rather than a disk. Even on real disk-backed folders the file may be written to RAM cache first, and never touch the real disk if you delete it soon afterwards (without something calling fsync in between).\n. I don't know much about debs. Does it complain about %{?dist} appended to the version? \nDo you know how the correct package definition should look like?\n. For Requires, etc. I have multiple lines, no commas:\nhttps://github.com/pornel/pngquant/blob/master/pngquant.spec\nIs that correct?\n. There's a new build system now, so I'm closing this.. Previously both zlib and lcms shared a find_library function. These are now separate, custom mechanisms, so I'm concerned about having extra 100 lines of library-specific code.\nDoes it have to be a custom dir? Can it be delegated to pkg-config?\n. I'd rather not extend configure any further, so I'm closing this.. Yes, these are all good ideas. \nA \"flat\" output directory is relatively easy to do.\nRecursive scanning and output to subdirectories are a bit of a pain to implement, because directory-releated functions are not part of the C standard library, and would need special-casing for Windows.\n. Algorithm used by pngquant is not suitable for small number of colors. For 8 colors or less see http://people.eecs.berkeley.edu/~dcoetzee/downloads/scolorq/\n. It looks like you've run into the problem of blending colors in regular RGBA color space, instead of using premultiplied alpha color space.\nThis site has full description of the problem and solutions:\nhttp://www.realtimerendering.com/blog/gpus-prefer-premultiplication/\n. Your image probably has meaningful RGB values with alpha = 0 (equivalent to \"bleeding a texture\" example from the article under \"Weak solutions\"), and conversion clears RGB values of pixels with alpha = 0, because when alpha channel is correctly used, these values are impossible to see.\npngquant works in premultiplied alpha color space and is unable to preserve invisible RGB values.\nThe bleed hack would be very detrimental to quality of PNG8 images, and I don't think it's feasible to have it as part of the image if you care about file size or quality.\nI strongly suggest fixing rendering to use premultiplied alpha. If you can't fix rendering, then you should look into applying the \"bleed\" workaround from the article as a preprocessing step after PNG decompression, but before rendering.\n. It's not possible in pngquant2 (it'd be hard to change, and cause quality regressions), because color model used everywhere is ra, ga, b*a, a, which means pngquant2 throws away RGB values when a=0.\nChanging it to r,g,b,a would make it very inefficient, as pngquant 1.0. Try using pngquant 1.0 (from year 2000) to compare :)\n. Actually, I have an idea - change some transparent pixels to slightly non-transparent (alpha = 1). Adding such nearly-invisible border to things should force pngquant to consider its color (at 1/255th importance).\n. You could write a program that reads a PNG, edits alpha, and saves the PNG. \n. Cool :)\n. 2.7.3 should look like this: \n. I keep versions of pngquant and libimagequant the same.\nThere has been a major change in remapping algorithm between 2.1 and 2.6. It has fixed several bugs, but performance-wise it's probably similar.\nBy default the library is configured to be slow, but maximize quality. If you prefer it to be faster, you can set desired speed:\nhttps://pngquant.org/lib/#liq_set_speed\nIf you're compiling libimagequant yourself, make sure to define NDEBUG, otherwise the library will be 2-3 times slower.\nUse OpenMP if you can. It makes the library a couple of times faster.\n. Thanks for the PR!  OpenMP working is a great news.\nDo you have any suggestions what could be done for getopt?\nCan I consider your contribution licensed under BSD 2-clause license?\n. I see. Thanks!\n. That looks like a compiler bug. The code is using the variables, not string literals, so the compiler is supposed to always give the same address\u2026 \nOr maybe you have 2 copies of the library in one program? (so static symbols are duplicated, but global ones get shadowed/deduplicated and mixed up)\nCan I consider your contributions licensed under the BSD 2-clause license?\n. I'd like to have an option of dual-licensing pngquant.\n. Thank you\n. Thanks :)\n. What do you get when you run\nsh\npkg-config --libs libpng\n?\n. I would not expect changes to LD_LIBRARY_PATH to be needed for linking with libpng.\nIf pkg-config says to use ImageMagick's libs, but they don't work, then I think it's a problem with IM/pkg-config on your system. Maybe you need to run ldconfig?\n. Thanks. I'm aware there's a need for this.\nCurrently the solution is:\n- use the callback version of image creation https://pngquant.org/lib/#liq_image_create_custom to combine images on the fly (assuming they have the same width)\n- save palette before remapping any results (contrary to what the docs say)\n- remap images individually as usual, reusing the liq_result object\n. Improvement to the palette done during remapping is specific to the one image that was remapped. If you want a single palette that is suitable for many images, you can't have it tuned for only one of the images.\n. You can achieve the same by setting speed to a slower setting.\n. I could expose pngquant's histogram to make combining of multiple images easier/lower-mem.\n. I've added Histogram API in 2.8.0\nhttps://pngquant.org/lib/#liq_histogram_quantize. Fortunately grep -Eo is used only for cosmetic reasons. The real problem is that you don't have working libpng or pkg-config on your system.\n. Solaris looks hopelessly broken.\nMaybe another aproach:\n1. Run ./configure on Linux\n2. Copy config.mk to Solaris\n3. Edit config.mk manually to correct settings and paths to libraries\n. You can. The license is for source code and binaries produced from it, but it does not cover images.\n. Thanks\n. Return code 99 means --quality 65-80 could not be met, i.e. the image ended up with quality below 65.\n. If you're passing --quality 65-80 yourself, then either use --quality 0-80 or check status code returned from the executable.\nIf you're using a node library that launches the command for you, then ask the author of the node library to fix this.. This setting is not a property of the image, but an instruction for the conversion, so you can't check what quality an image has (that is not possible without having a second image that is the reference for the quality).\n. Unfortunately, ImageMagick doesn't support PNG8 properly. Use libpng or lodepng for writing proper PNG8.\nIf you have to use ImageMagick, you'll need to trick it: generate 255-color palette image (not 256! ImageMagick has off-by-one error there), then convert the 8-bit palette image back to RGBA image that happens to have only 255 unique colors, and then tell ImageMagick to save RGBA image and hope that it will count colors and guess that the image fits in RGB8, and generate proper RGBA palette for it. That's the instructions I've got on the ImageMagick forum when I've asked.\n. Fixed\n. Thank you. Can I take your code as licensed under the BSD license?\n. Thanks\n. Generally pngquant is not expected to have repeatable results across systems. There are multiple reasons for this, mainly:\n- different version of libpng. You should never use libpng 1.2 \u2014 it's really old and has known bugs affecting pngquant. This affects file size.\n- different floating-point implementation. Compilers, SSE and fast math flags allow computations to give slightly different results, which can snowball into different palette and dithering patterns, sometimes visibly affecting results.\n. I'm measuring quality and file sizes produced by every release, and each release is better on average, so using older version will give you worse results in general.\nFor example all versions older than 2.5 use dithering algorithm with a bug that sometimes causes color streaks.\nIf you're talking about 33% difference on a 1KB file then it's very likely to be caused by different version of libpng, e.g. preserving of metadata will differ depending on pngquant and libpng versions. \n. I don't use any Linux version myself. 1.6 is required for full functionality. 1.4 is partially supported. 1.2 is broken.\n. There are some companies mainly selling pngquant as a service, e.g. TinyPNG, Kraken, Cloudinary, Shortpixel.\nI'm not keeping the full list though. I'm not sure what the purpose of that would be.. @sergiomb2?. Thanks S\u00e9rgio. Download of 2 archives is OK. I'll need to remember to tag both.\nWhat about the build of shared library? Is it OK to keep it as libimagequant.so.0? I don't know what are the rules of SO versioning. Does addition of new functions require changing it to libimagequant.so.1 or such?. Thank you.. Currently you'll have to use another app, like ImageOptim.. OK, I've added --strip option. Thank you!. You can change the input image to have binary transparency.. If you remove semi-transparency before giving the image to pngquant, then pngquant won't waste palette colors on any semi-transparencies. \nBut the big question is why do you even convert PNG to GIF? It makes the file uglier and larger. \n. You should not move the folder or any files to /usr/ yourself. Clone the folder to your home directory or /tmp.\n\ngcc failed to compile anything (make sure it's installed and supports C99)\n\nYou need to install gcc (the package may be called build-essential)\n. Thanks. or just use strcmp?. There's absolutely no overflow possibility here.. Thank you.\nAre you OK with contributing it under the BSD license?. OK :)\n. I don't know exactly why they built it with the buggy libpng. I guess it's might be an unfortunate combination of their policy and backwards-compatibility constraints.\nHowever, Debian testing has finally upgraded libpng, so this problem will go away.. You have 3-year-old version of pngquant with 7-year-old version of libpng. Don't use Debian if you want up-to-date software.\n. Yes\nsh\nconvert \u2026 | pngquant - > file.png. You can use this to optimize in place:\nphp\n<?php system('pngquant --ext=.png --force --quality=85 image.png'); ?>\nPlease be careful when passing filename. If you don't use escapeshellarg(), someone will be able to take over your server by uploading a file with a special filename.. php\n<?php system('pngquant --ext=.png --force --quality=85 ' .  escapeshellarg($image_filename)); ?>. Because the script is more efficient and handles errors.. I'm unable to tell what's wrong here. \"command failed\" and \"exit code 1\" are very generic problems. \nOn failure pngquant usually outputs more informative messages and specific exit codes, so it looks like it's a problem with the node.js package or webpack integration. Perhaps you don't have pngquant installed at all?. Yeah, quality < 50 is going to be brutal. \nPlease note that pngquant reports error intentionally if it can't achieve minimum quality or compression specified. If you're using a wrapper/build system that uses the --quality setting with non-0 minimum value, or --skip-if-larger, it has to be smart enough to recognize error codes 98 and 99 (see man pngquant).\n. Please don't use GitHub tarballs. Official release packages with all files are here:\nhttps://pngquant.org/releases.html. Thanks. I've removed that link. Thanks for the PR.\n. For the unused arguments, there's a __attribute__((warn_unused_result)). Could you add a macro for it, like ones in https://github.com/ImageOptim/libimagequant/blob/c927fa593a181d304caff3f1ccc91c0da0c02608/libimagequant.h#L19,L29 and use it instead of the void cast where possible?\nIt won't work for the win32 function, but it'd be better for the other cases like libpng callbacks.. You have something in your environment/init scripts/server config that sets DYLD_LIBRARY_PATH (or DYLD_FRAMEWORK_PATH) environmental variable to a custom value, which is playing with fire and breaks all JPEG-related software due to peculiarities of Apple's private framework implementation.\nYour option is to find and remove all overrides of library paths, or build a custom version of pngquant without Cocoa support.. Maybe no the entire computer. Just your server config? Maybe print these variables (or see phpinfo()) for a hint where they're set?. Try overwriting it with putenv. If they're literally just black and white, then you may not need quantization. Try optipng or pngcrush. \nOther than that converting and compressing a 12 megapixel image under a second doesn't seem too bad.. This is not related to libpng. Color profiles are handled by lcms2. \nCompilation without Cocoa image reader\nmacOS version uses Cocoa to read images. This adds support for color profiles\nand other image formats as input. ./configure --without-cocoa switches back\nto libpng.\nCompilation with Little CMS 2\n./configure --with-lcms2 && make\n\nEnables support for ICC v2/v4 color profiles when reading images.\nRequires Little CMS library available via pgk-config (e.g. install liblcms2-dev).\n. Could you share the full image?. Thanks. \nIn this case the image has too many gradients/shades of colors, so the dithering seems correct, and --nofs is indeed the solution.. Does it happen with every image?\nWhat options do you use when converting images?. Installation of lcms2 is required, but not sufficient to add support to pngquant. You also have to create your own build of pngquant with lcms2 enabled.\nPlease test it with the latest version from master, and test with multiple images. Please share what configure flags you've used and result of the configure script.\nMake sure you're not using system pngquant package. Best to uninstall it just in case.\nIf the problem happens only with some images, please attach them to the bug report.\n. Yes, you will get this error in all versions between 1.8 and 2.9.1.. Sorry, compiling programs for Windows is such a mess it makes me want to cry, so I rely on others to provide Windows binaries from time to time.\nThe workaround is to always use 256 colors and not use the speed setting.. With lcms2 you get color profile support, and with openmp it's faster on multicore machines.. I'm not sure.\n\n/libpng16.a(png.o): unrecognized relocation (0x2a) in section `.text'\n\nThis could perhaps happen if the static library was compiled for a different OS version, or a different compiler/compiler version.\nIt can probably be solved by compiling libpng from scratch. Get libpng source, extract it as a subdirectory of pngquant, ./configure && make libpng, and then ./configure && make pngquant.\n. Can you share the original image?. Thanks. I'm unable to reproduce it in the latest version. Are you using 2.9?. I'm reluctant to do so. It's fiddly to support it properly, and I don't see the benefit. Unlike libpng, zlib is usually fine on various distributions. If you want completely static executable, then that won't be enough - you'd need to to something with libc, too.. I can't reproduce it in version 2.9. Maybe you have old pngquant?\nIn general it's expected that very low number of colors will look bad, but not that bad. All large areas (like transparent bg) are expected to be very close.. No, libpng/zlib shouldn't affect it.\nDefault build of 2.9.1 (3b84622f74a6073d8cda1879670dececcfbfac1d)\nsh\n./pngquant 30 pineapple-original.png\ngives me this:\n\n. I'm surprised. That sounds completely backwards. That change was meant to prevent the issue you're seeing, not cause it. \nIf you remove that boost = 10 line, you'll get the value for opaque pixels, which is in 0.5-1.5 range, which is much lower, and would make the rest of the algorithm place less importance on preserving the transparency.\nHow are you building it? What settings do you use when you run it? I can't reproduce the problem with your image.\n. Ah, at speed 8 it's totally expected. Just don't use it if you want high quality palette.. merged in 173dda61065f56e5e2c5ed3b8e0a3118005cbd1b. There is a size check before calling rwpng_create_row_pointers\nhttps://github.com/pornel/pngquant/blob/master/rwpng.c#L310. This is expected, especially in simple images. Runs of solid color compress perfectly. OTOH dithering is like noise, so it doesn't compress.\n. I've pushed changes to the build system.\nsh\n./configure --with-libimagequant\nwill search for external library.\nThere are two things Fedora needs to change to make it work: \n\n\n/usr/lib64/libimagequant.so.0 is not found by -L/usr/lib64 -limagequant. It needs a symlink for libimagequant.so.\n\n\nlibimagequant.h must be in /usr/include or use ./configure --with-libimagequant=<dir> and <dir>/include.\n\n\n. Thanks. Fixed in 276f735178c9987226c11c0142ecb9695dca2370. 80f8d935fb75832b1f13199d356cedd5326c949e removes Cocoa reader from C/Makefile toolchain, and it's available only if built via Rust/Cargo.. * If you're getting error about vcruntime140.dll, you need to install Microsoft Visual C++ Redistributable for Visual Studio 2017. Get it from Microsoft's site: https://aka.ms/vs/15/release/vc_redist.x64.exe (https://support.microsoft.com/en-gb/help/2977003/the-latest-supported-visual-c-downloads)\n\nThe binary is for 64-bit Windows only. Unless your computer is more than 12 years old, it's a mistake to use 32-bit anything. Unfortunately, you will have to reinstall Windows to get rid of the the legacy 32-bit version that is artificially limited and unable to run modern programs.\n\n. I've removed use of the DLL. Please download again and see if it works.\nI'm also worried that Windows SmartScreen may be preventing pngquant from writing files. If files don't appear and it quits with \"can't write file.png.tmp\", then it's probably Windows blocking it. I'm not sure what to do about that :(. Please open new issues for performance problems and problems with opening files.. Sorry, I don't build it for 32-bit.\nGiven that the last 32-bit Intel CPU was produced almost 10 years ago, and the last good one is 15 years old, it's really time to stop using 32-bit software.\n. @Furniel  Thanks for the build!\n@pflacson No, 32-bit executables are generally slower on x86. It's definitely the case for pngquant. I don't know about Windows, but on most other OS-es they also harm performance of the entire system, because all system libraries need to be duplicated or emulated for the legacy executables.. On your 32-bit system it won't, because the system pretends your CPU is old and doesn't use it's faster mode of operation.\nOnly if you have x86-64 CPU, and 64-bit operating system on it, and use a 64-bit executable (i.e. everything 64-bit, nothing 32-bit), only then it will unlock a faster mode of operation of your CPU. \n. Please make sure pngquant is in server's PATH or use an aboslute path to the pngquant executable.\nIf you're on a Mac, then it may be broken by DYLD_LIBRARY_PATH #240. There's a hack via --ext .png -f, but I don't plan to expand it. The conversion is lossy, so it should be treated as an export operation, not a (destructive) in-place optimization.. Sorry for trouble. I've uploaded the archive.. This looks mostly like AFL's problem/integration misconfiguration. \n\nmake: *** No rule to make target 'config.mk', needed by 'pngquant.o'.  \n\nthis means ./configure hasn't been run.. Which version are you using?. Thanks. Good to know that these annotations are catching bugs :). Which version do you have? Maybe it's an old one.. pngquant -V should show you the version. pngquant -v too, it's just above all other help text.. Good.. The 2.10.2 only tweaks build for Rust\nYou're not using https://crates.io/crates/imagequant so there are no changes for you. Yes, if that's not a problem for you I'd suggest switching to the Rust build. For now I support both make and Cargo, but I'd prefer to switch fully to Rust long term.. 2.11.2 is the latest. \nWhen I release:\n\nI create a tag in git\nI publish on https://pngquant.org/releases.html\n\nI do not keep https://github.com/pornel/pngquant/releases up to date, so don't pay attention to that.\n. OK, I'll try to update that. This is a bug. The argument should work, but switching to a new argument parsing library removed that ability.\n1 is the default, so you can leave it off.. Fixed 885e8f516822c107af1435d3d87a56d4ff36ee94. Compression depends on image content. Some content may compress better in 24-bit.\nDisabling dithering --nofs may improve compression, but at cost of quality. You can skip these kinds of images with --skip-if-larger option.. Yes, indeed. This is simply not implemented on Windows. I'm more familiar with macOS and there I was able to implement loading of any image type with a few lines of code. \nIn any case, converting JPEG to PNG8 is unlikely to make files look better or be smaller. Try Guetzli or MozJPEG instead.\n. Thanks for the report. The fix is coming.. So it turned out the problem was worse than I expected. I thought the bug was caused by a new argument parsing library, but it wasn't. The cause is due to a fundamental fuck-up in Microsoft's standard library.\nIn 2.10 I've switched from GCC/mingw compiler to Microsoft Visual Studio, naively assuming it would support Windows better than a \"unix\" compiler. But it does not! Microsoft's C compiler does not support Unicode paths in standard C functions. The whole path handling in Microsoft's toolchain is a terrible mess.\nSo Unicode paths won't work on Windows probably until I release pngquant 3.x (replacing file I/O with Rust's which uses the lovely WTF-8 encoding for Windows), which may be in a couple of months.\n. AFAIK pure Rust code handles Unicode filenames fine. MinGW makes Unicode filenames work by adding a compatibility layer to C stdlib that makes char * paths UTF-8.\nThe problem here is that Windows/MSVC itself doesn't support UTF-8 in C stdlib. AFAIK MSVC's C stdlib functions are just an unworkable legacy codepage horror.  It expects programs to use Windows-specific methods to handle non-ASCII paths, but pngquant doesn't have Windows-specific code.\nI plan to avoid this mess by using 100% pure Rust for file I/O. Rust's stdlib handles filenames better than Microsoft's C stdlib.. Oh, that's possible. In Unix world expansion is done by the shell, not the program. I didn't know mingw emulated that, too.. Yup, wildcards is another thing that Microsoft's compiler doesn't automatically do. I'll patch over it in the next release \u2014 #273 \nSorry everyone, I was completely surprised by how many things GCC did for me to make things \"just work\". I expected switching to Microsoft's own compiler to improve Windows support, but it turned out the opposite :(. I've fixed the globs, thery are no longer a problem.\nThe current problem is that fopen from Microsoft's C standard library can't handle non-ASCII characters. . I'm very reluctant to add ugly non-portable code to work around yet another deficiency in Microsoft's C compiler.\nIt took Microsoft only 15 years to add some C99 support, so maybe by 2033 they will add UTF-8 support. \nIn the meantime my plan is to throw away all the C code, so that I don't have to ever touch MSVC again, but I'm busy with higher priority projects right now.. I wonder what is stopping you from using libimagequant API?\npngquant internals are not a stable API and are going to change.. So the not-reinventing-wheel part has been separated into a library, which has a clear, documented stable API.\nThe pngquant.c file is just a CLI command wrapper for the library, and you're hacking undocumented internals of the wrapper in an ad-hoc way.\n. Thanks for the PR, but I'd rather not change it.\nIt's not a robust solution. It would be better to undef SUCCESS or prefix the enum variants to avoid the collision. However, this is a private header, not intended for use by anyone else, and pngquant doesn't include anything that collides currently, so there's no need to change it.. pngquant is not adding the time chunk. It's probably just copied from the input file, which you can disable with --strip.. pngquant will generate broken images if it's compiled with the outdated libpng 1.2. You can check this with pngquant -h.\nAre you using Debian stable? This is most often the cause, they use the buggy libpng library.. What is it incompatible with? You should probably change/fix whatever PNG reader you're using, because the PNG standard requires support for 1/2/4 bpp. If you need a small and working one, I recommend http://lodev.org/lodepng/\nYou can change sample_depth in rwpng.c\n. Speed 0 is identical to leaving the default speed (3). Unfortunately there's no magic bullet here.\n. Done. It is a known problem. Duplicate of #265 . I've seen that error before. I think it's fixed in the latest version.. BTW, running pngquant twice makes image only worse. Bad idea in all cases.. Can you make it actually run the test? (configure with lcms2, make test). --with-lcms2 needs to be set in configure and lcms2-dev installed on the vm. and libpng-dev. The test is failing, because Travis has libpng 1.2, and pngquant works only with 1.4 or later.. Great. Thank you.. The image you've attached is already converted. Can you provide the original?. This image has less than 256 colors already, so there's nothing for pngquant to do with it.. Thanks!\nSo there are two differences:\n\n\nThe new pngquant is able to preseve metadata, and Adobe Photoshop CC added a lot of hidden garbage to the file. Use --strip option to remove it.\n\n\nApart from that image from the new version is 1% larger, but has 20% better quality score (measured with DSSIM). You can use options like --quality=70 && --floyd=0.2 to lower the quality if the default quality is more than you need.. Yes, I can recommend MozJPEG (fast, smallest files) and Guetzli (slow, high quality archival).. There's no such option. You'd have to recompile it without Cocoa reader support.. Yes, that's entirely expected. The versions have tweaks to the algorithm. They also can be compiled with or without support for color profiles, which significantly changes some images.. No, if different versions were to have identical output it would mean it's always the same code that does the same thing, and it would forbid any improvements.\n\n\nSo expect all versions to always generate different (generally better) outputs.\nYou can check whether profiles are enabled by running pngquant -h.. Even the same source code of pngquant can produce different outputs on the same machine, depending on version of your compiler (due to floats, ffast-math setting and use of rand() among others).\nYou can't rely on same output at all.\nYou can use visual comparison tool like DSSIM if you want to ensure output matches some expectation, but you need to accept it's almost random.\n. Thanks for the report.. Fixed in 2.11.7. Please try 2.11.7. Fixed in the next version. Does 2.11.7 work correctly without OpenMP?. Thanks!. Make sure you have pngquant 2.x.\nSome outdated Linux distributions still have pngquant 1.0 from late '90s, which doesn't support the quality option, and has very low quality output.. > Error in `/usr/local/bin/pngquant': malloc(): memory corruption:\nIs there more information printed about this error? That doesn't seem enough to figure out what's happening.\nCan you recompile it with debug assertions and see if it catches anything? (./configure --enable-debug)\nIf debug assertions don't catch, can you run it under lldb/gdb or valgrind?. The underlying libimagequant has a histogram API to support making a shared palette for many images.\nHowever, the pngquant CLI command uses libpng, so it doesn't understand APNG. \nIf you're writing a tool (using C API), then you should be able to combine libimagequant with APNG reading/writing library.\nIf you're only a user of CLI binary, then you'll probably need a 3rd party tool that can convert APNG to and from a single flat PNG filmstrip.\n. Thanks. I wonder how did it work before :D . Whether there's any gain in compression you'd have to compare quality-to-filesize ratio, and not file sizes. It's possible the smaller file is actually worse, because it lost more quality than it saved in file size.\nBut 1% on one image doesn't mean anything. Such differences in compression can be caused by tiny differences in dithering or slightly different color selection.\n. I'm unable to reproduce this issue in Firefox 60.\nBut generally that looks like a Firefox bug. It's a bit surprising, since it worked fine last time I tested it.\nOne image has sRGB-like gAMA chunk, the other has gAMA & sRGB chunks. These are pretty much equivalent and shouldn't give noticeably different rendering.. Color profile handling in pngquant is optional and has 2 separate back-ends, so you will find builds from different sources behave differently in this area. Exact handling of sRGB chunks has also changed between versions.. That's because * is not handled by pngquant. It's replaced by bash. If you launch pngquant directly without bash, there's no support for bash's special wildcard syntax.\nSo either scan files yourself in your wrapper program, or launch bash that runs a script that launches pngquant (but be super careful if you use paths/filenames from untrusted usres, since bash escaping is hard, and any mistakes create arbitrary code execution vulnerabilities).. Yeah, because Windows' cmd.exe is all around awful and doesn't support wildcards, I fake wildcards on Windows only.. Yes, it got renamed. Thanks.. If you're just launching an executable, then GPL applies only to that executable, not your program.. If you redistribute pngquant you've got on GPL, then you still have to comply with GPL regarding pngquant itself, e.g. you can't put it in your application bundle and put it in the App Store.\n. It looks like your system doesn't give you permission to save files in this directory.\n. The image is corrupted.. Oh, that's interesting.. The bleeding is a problem because rendering is not done in premultiplied alpha space: http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/ This is essentially a bug/bad design to use slower and uglier non-associated alpha instead of premultiplied.\npngquant uses premultiplied alpha exclusively, which means:\n\nit does handle blending of transparent colors well\nit's technically incapable of preserving RGB of alpha=0 colors\n\nSo the change you request would be technically very difficult, and seriously harm compression and quality of the output (since precious palette colors would have to be spent on the invisible RGB values).\nI suggest:\n\nFix/configure your engine to use premultiplied alpha\nIf you can't, then add a postprocessing step to images after compression, before rendering, to add the bleed pixels\n\n. I've added workaround for this, but a system without writable tmp boggles my mind... This is a known problem. I've switched to Microsoft's own compiler, and Microsoft's standard C library has this bug.\n265 . Thanks for the report.\nIt's an interesting case, since it exposes weakness in measurement of quality using mean square error. Even a big change to the small area, when averaged with all the perfectly matched background, mathematically still seems \"90%\" accurate.\nI already have some workarounds for such cases, but I'll see if I can tune them better.\nIn the meantime the workaround is to use --quality=65-100, so that pngquant isn't required to drop any colors when not necessary.. Thanks!. Pngquant doesn't add any extra chunks to identify itself. Images generated by pngquant will be in PNG8 format (8-bit indexed) as opposed to 24 or 32-bit variants. \nIf you only convert 24/32-bit PNG files, and skip 8-bit ones, you will get the desired effect.. Yes, you can do that. Instead of input file path specify - and pngquant will read binary from standard input.\nI don't know C#, so I can't help you how to send a file through standard input.. The 1.0 version doesn't support -V :). There is version number printed when you run pngquant -v. Can you post the original unconverted file?. Try adding --strip to remove metadata.\nIf the image has lots of pixels, it may just be that big. Expect 0.5 byte per pixel.. No, sorry. I can't guarantee cross-platform consistency. I don't even guarantee consistency on the same platform.\nSome parts of the algorithm use floating-point math and allow compilers to optimize it imprecisely, so different versions of the code may give slightly different results.\nDifferent platforms use different libraries for handling color profiles, and that's another source of small variations.\n. There is --skip-if-larger option. \nI suppose it would be nice if it was the default, but then such options are usually disabled with --force :/. Hmm, so adding --overwrite might be the solution. 2.12.0 vs 2.12.2 is close enough :) The changes in .1 and .2 were for the build system, so there are no new features, and the changes don't make any difference to the executable once its built.. No, there's no way other than running pngquant -v. --speed 0 is equivalent to the default, since the code is like if (speed) set_speed(speed). speed 0 is an error. The bug here is that the CLI doesn't say \"speed 0 doesn't make sense\" instead of quietly ignoring the invalid value.\n. Oh, sorry. I forgot I've changed the default to 4 in the underlying library, and forgot to update the CLI to match. This is now fixed.\nBTW, pngquant doesn't give any guarantees about bit-exact reproducibility of results. Some algorithms use fast-math floating-point which may be optimized differently by compilers as they wish, and dithering relies on random numbers, which can be generated by libc any way it wants.\n. The easy way is to get an ARM virtual machine/emulator such as QEMU, or Raspberry PI, and compile the code there as a library.\n. Thanks!. Yes. \nYou can call it via Objective C or C bridging header in Swift. \nAdd C files to your project and include the h file. \nCalls are documented here https://pngquant.org/lib\nPlease note that Apple doesn't like GPL in the app store, but you can get AppStore compatible license here https://supso.org/projects/pngquant\n. This is a known problem with Windows #265 . Unfortunately I don't have tests good enough for distribution. \nI test the command using DSSIM and a set of thousands of images, too large and problematic to redistribute. \nThe make test is just tiny fussy hack to ensure command line flags aren't broken. . Does the existing make test work for you? It does depend on LCMS being enabled.. That looks nice. Thanks!. Yes, it'd be great if you could help publishing it.. https://snapcraft.io/pngquant. What you need is: --ext .png --force to overwrite the input file (note the spelling of force). Try installing https://www.microsoft.com/en-gb/download/details.aspx?id=21\nor use https://imageoptim.com/online. It's not possible to know file size without performing the full compression. You can use -o - > /dev/null to throw away the compressed data.. sh\ncat file | pngquant -\nor\npngquant - < file\n. There's no built-in way to do this. \nYou could parse the output from the program and rename the file yourself.. Thank you very much for the fix.. Is this necessary? remap_to_palette() refines the palette (runs one more voronoi iteration).\n. strncmp is inappropriate here, allows any -prefixed name.. This was added in f8a16a93 for #49, so removing it might cause warnings elsewhere :). ",
    "mahonnaise": "Ye, that does the trick, I guess.\nYou should update the INSTALL file accordingly though. Steps 2 and 1 are the wrong way around (libpng depends on zlib), by the way.\n. ",
    "smelchior": "-std=gnu99 works great for the compiling, the linker error still occurs of cause\n. ",
    "UnderCooled": "It works with gmake with a few \"no newline at end of file\" warnings.\nBecause FreeBSD pmake use a C-style condition syntax , I think most of FreeBSD boxes will install gmake package, and it works. So maybe Makefile.freebsd is deprecated?\n. I checked another article about freebsd make , it should be:\n.if 0\nifdef USE_SSE\nSSEFLAG=-DUSE_SSE=$(USE_SSE)\nendif\n.endif\nbut gmake will fail with Makefile:7: *** missing separator.  Stop.\nBTW: freebsd's user default install prefix should be /usr/local , and system-wide libpng package install headers in /usr/local/include/libpng (but gmake seems ok without libpng header).\nGmake is a package, it isn't shipped with OS install.\nMaybe you can note FreeBSD users set PREFIX variable before calling gmake in INSTALL.\n. ",
    "craigbarnes": "Hmm I submitted this too early I think. Closing until it's fixed.\n. The PREFIX?=/usr/local in the FreeBSD Makefile is actually also the standard path for Linux too. It was me who wrote the (non-standard) PREFIX ?= /usr line, originally in my hacky fork, which was then later pulled and merged. As far as I know /usr/local is the standard place to install locally compiled stuff on all UNIX/POSIX/FHS systems and is almost always the default in Makefiles.\n/usr is for OS/distro/packaged stuff but it's usually left up to the downstream packager to substitute /usr/local for /usr as part of their own process. They also generally use the DESTDIR convention to prefix the whole thing with a buildroot path.\n. GitHub's tag tarballs are just wrong. People have mentioned it to them but they think they know best.\nSome people who are sympathetic to this issue seem to be using GitHub's downloads feature, but it requires manual package uploads.\n. I added a make dist target in this commit. Feel free to use or adapt, if it's any use to you.\n. Most distributions don't ship with library headers. You probably have libpng but not the headers.\nTry:\nsu -c 'yum install libpng-devel zlib-devel'\n. Also, @pornel, I've packaged this for Fedora 16 and 17. The packages aren't currently compatible with RedHat/CentOS or any other long-cycle distros but I could fix that and host them somewhere (maybe here), until distros pick up your improved version, if it helps?\n. I'm maintaining a specfile for building RPM packages here.\nIt's not really straight forward to translate to Ubuntu though. Ubuntu uses a different metadata format, different packaging tools and obviously requires building natively on a Ubuntu machine (they use a different libc etc.). I'll ping the old maintainer of pngquant and see if he's interested in updating.\n. I've uploaded an RPM for Fedora 17 x86, in case it's useful in the short term. It can be installed with:\nsudo yum --nogpgcheck install https://github.com/downloads/craigbarnes/packages/pngquant-1.7.2-1.fc17.i686.rpm\nInstead of building for other architectures, I'll just work on getting it into the proper Fedora repos.\nUbuntu's maintainer might in fact be the Debian maintainer, in which case it might be a slow process.\n. You need to install the dev packages for zlib and libpng:\nsudo apt-get install libpng-dev zlib1g-dev\n(not tested, names may be slightly different)\n. ",
    "znerd": "You may want to try pngquant.org\u2026 I think it has that option.\nMet hartelijke groet,\nErnst de Haan\nOp 3 jan. 2012 om 18:30 heeft maxxxtareply@reply.github.com het volgende geschreven:\n\nHi, \nI'm trying to use \"improved-pngquant\" in my build script. I was looking for a way to overwrite old file with a new (compressed) file. \nI found out thru \"-h\" option that there is a -f option but that does not have any effect and I'm still getting default extension \"-fs8\". \nIs there any work around on that?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/improved-pngquant/issues/10\n. \n",
    "pgawle": "\"-f -ext .png\" works perfect. \nThx!\n. ",
    "bfayers": "I don't like to re-open such old issues like this, however this \n-f --ext .png \nno longer works, or atleast I can't get it to. I am running\n pngquant -f --ext .png --quality 65-80 --strip --skip-if-larger vlc_2017-07-08_13-50-41.png vlc_2017-07-08_13-50-41.png \nand the result is error: cannot open .png for reading. ",
    "Agile86": "I build it myself, because some dependencies was wrong on provided debian x64 executable.\nOnly with this image:\nhttp://www.woofiles.com/dl-277996-HwS3a6ye-bug.png\nWith -s 10 it's not segfault.\n. ",
    "Tenzer": "I also experience a seg fault when I try to use pngquant on this file: http://files.tenzer.dk/misc/small-button-overlay.png\nThe error was originally experienced using version 1.7.1, but only if I am using -s 7 or lower. The same is the case with version 1.7.2.\nI am running Arch Linux and have compiled pngquant myself through this AUR package: https://aur.archlinux.org/packages.php?ID=56138\n. ",
    "pbakaus": "Hi,\nI'm facing a similar issue right now. It only happens on this test image: http://dl.dropbox.com/u/351082/pnqquant_seg_fault.png\nSimilar story, only happens when speed is smaller or equals 7. I'm running pngquant 1.7.2 on Mac OS X.\nHope this helps to narrow it down!\nCheers,\nPaul\n. ",
    "sexybiggetje": "Hi, I am having this same (or similar) error on the prebuilt 1.7.2 (February 2012) binary on Windows 7 (64bit machine, 64bit win 7). In our batch of images we have narrowed it down to 3 specific images.\nhttps://www.dropbox.com/s/ziob0dnztmscl7y/pngquant-crash.zip\n-- option -speed 10 doesn't appear to be crashing.\n. ",
    "rtgibbons": "I was getting this error when running pngquant 256 *.png seems to be hanging up on the first image that was 1px wide.\n\npngquant(1179) malloc: * error for object 0x10c300978: incorrect checksum for freed object - object was probably modified after being freed.\n* set a breakpoint in malloc_error_break to debug\n\nCompiling from the repo (showing version 1.7.4) fixed the problem\n. ",
    "HSerg": "A real case - 'pngquanti.exe -verbose -speed 1 254 img.png'. I need to reduce the size of a palette.\n. Able, but I need how-to guide (I do not have a MSVC).\n. pngquant, version 1.7.2 (February 2012), by Greg Roelofs, Kornel Lesinski.\nCompiled with libpng 1.2.37; using libpng 1.2.37.\nCompiled with zlib 1.2.3; using zlib 1.2.3.\n\npngquant.exe -verbose -speed 1 254 img.png\nimg.png:\n  read file corrected for gamma 2.2\n  making histogram...256 colors found\n  selecting colors...3%\n  selecting colors...15%\n  selecting colors...18%\n  selecting colors...30%\n  selecting colors...43%\n  selecting colors...56%\n  selecting colors...69%\n  selecting colors...81%\n  selecting colors...94%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminating opaque tRNS-chunk entries...1 entry transparent\n  mapping image to new colors...MSE=0.013\n  writing 254-color image as img-fs8.png\n\nCompiled via Makefile and -DWIN32. Makefile.w32 is useless.\n. Binary for Windows (v1.7.2) - http://sklabs.ru/tmp/pngquant-1.7.2-w32.zip\n. ",
    "markostamcar": "We just found out it only crashes if \"-s\" is < 8\n. Thanks for your quick reaction, we'll try it ASAP. But, shouldn't the condition be >= 3? Because only 1px and 2px fail.\n. Good point. Thanks.\n. ",
    "fotografi": ". ",
    "jaalto": "Here is patch for the manpage:\n```\ngit remote add jaalto git://github.com/jaalto/improved-pngquant.git\ngit fetch jaalto\ngit diff jaalto/manpage\ngit merge jaalto/manpage\n```\n. On 2012-03-31 08:15, porneL wrote:\n| Thanks. I think it's a very good idea to migrate to standard option\n| syntax. However, I'm worried that it breaks backward compatibility.\n| \n| It's very likely that people have scripts using options with a\n| single hyphen, and pngquant shouldn't suddenly start rejecting\n| those. For a while both -foo and --foo should be supported to\n| help people migrate.\nIf you wish, you can make people to migrate to new syntax by:\ndisplaying a message for every \"old\" option:\n\"-option is obsoleted and will be removed, please migrate to --option\"\nPersonally, I think that's too much work for such a small program. I'd simply\nhave the program exit with message:\n\"unknown option\"\nand have people figure out that the new options are using --long\nformat. It's relatively easy to fix scripts.\n| With standard behavior joining of multiple single-letter options is\n| allowed, e.g. -v -f should be same as -vf. Currently pngquant's\n| homegrown argument parsing doesn't allow that.\n| \n| Do you know if it would be possible to use standard library call for\n| argument parsing (getopts_long or similar) and still support\n| \"legacy\" pngquant option switches?\nThere is GNU option library \"getopt\" that is the \"de facto\" of\nhandling options. See:\nhttp://www.gnu.org/software/libc/manual/html_node/Getopt-Long-Options.html\nMake your code depends on that and your option handling can be greatly\nsimplified.\nJari\n. On 2012-03-31 13:46, porneL wrote:\n|\n| This tool is over 10 years old, and I'd like newer version to be\n| included in Debian, so I think a sudden breaking change is not\n| appropriate.\nHi,\nActually those patches (long options) are planned to be included in\nnext upload to Debian. Any user that has been using old options will\nneed to adjust their scripts.\nI sent the patches here to be included in the official sources.\n| Would you be able to change pngquant to use getopt and keep existing\n| options with a warning? (I suppose you'd have to preprocess\n| argc/argv to fix single-hyphen names)\nOBSOLETING OPTIONS\nI added the check for old options. Please pull from branch:\njaalto/options\nc09d143 2012-04-01  pngquant.c: Check obsolete options\n  da3e76b 2012-03-31  Standard option syntax: -o (short), --option (long)\nGNU GETOPT SUPPORT\nUnfortunately I do not have time to add getopt functionality. But I'm\nsure there is penty of examples about getopt if you Google around.\nThanks for including this to new release,\nJari\n. On 2012-04-01 06:08, porneL wrote:\n| Thanks. I've applied those patches.\n|\n| With the extra hyphen now --no is ambiguous. I'm going to drop\n| that prefix support completely and use exact strcmp for options\n| ...unless that prefix handling was a standard behavior?\nDropping \"no\" prefix sounds good plan to me.\nThanks,\nJari\n. ",
    "domurtag": "I discovered you can install Debian packages on Ubuntu with:\nsudo dpkg -i packagename.deb\nSo there's really no need to compile from source on Ubuntu. Please close this issue.\n\n\nFrom: Craig Barnes reply@reply.github.com\nTo: domurtag domurtag@yahoo.co.uk \nSent: Friday, 20 July 2012, 4:24\nSubject: Re: [improved-pngquant] unable to compile on ubuntu (#19)\nYou need to install the dev packages for zlib and libpng:\nsudo apt-get install libpng-dev zlib1g-dev\n(not tested, names may be slightly different)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/improved-pngquant/issues/19#issuecomment-7121502\n. \n",
    "phbernard": "Warning: on Ubuntu 12.10, the available libpng \"dev\" package is libpng12, which is too old. When you compile the current version of pngquant (2.0) against this lib, pngquant prints a warning and ask to use at least libpng v1.5.\nIt is probably safer to take the latest version of libpng and compile it manually.\n. ",
    "dideler": "Ran into the same issue today. The latest stable release of libpng at the time of writing is libpng 1.6 and is available at http://sourceforge.net/projects/libpng/files/libpng16/1.6.10/.\nOnce extracted, you'll find instructions in the INSTALL file. Installing pngquant worked fine after that. Don't try to install libpng or pngquant while upgrading to Ubuntu 14.04, otherwise it won't work and you'll have to repeat the installation.\npngquant --version\n2.2.0 (April 2014)\n. ",
    "Krack123": "Oh, I didn't even know we could directly launch .exe files from a server.\nSome tests have been successful, thanks.\n. ",
    "hamdshah": "Sorry got the same result by setting the speed to 1. \nPlease close this. And one thing let me know that currently *.png just search inside the folder is there a way to search in nested folders?\n. ",
    "spiderplant0": "Hi, apologies for wasting your time. It turns out that there was nothing wrong with the quantised images after all. I was viewing them in the GIMP and my version of GIMP seems to have a bug where palette images dont display transparency properly (you have to change the image mode to full color to see the image correctly).\nThanks again\n. ",
    "shepherdwind": "ok, I will try compile it, thanks you suggest. Although I do not need use Windows, I should let the people who win user of my tool to work.\n. Very good, thanks.\n. ",
    "pngqu": "Please compile it for Windows 32/64... Thanks in advance, and keep going your amazing projects!\n. ",
    "yukinogatari": "I was able to build the latest pngquant using MinGW simply by moving the -lpng flag to before the -lz flag in the makefile, as suggested here: http://stackoverflow.com/a/2395371\n. [Link removed] Just the exe and copyright notice. I'll take it down once you've got it so you can package it up properly. It appears to be statically linked to libpng and zlib, so it shouldn't need any dll files.\n. ",
    "veikin": "Hi\uff0cHow to compile\uff0cCan you tell me the steps\uff1fThank.\n. ",
    "MarkKahn": "no crash report, just that message Illegal instruction.  I have all those libraries (well the files anyway, not sure how to check versions) and my CPU is an intel i7\n. ",
    "stefounet": "Hi\nSame here with segmentation fault message \nInfos:\nMac Book Air 10.6.8, Core2Duo\nLibraries\n```\n/usr/lib/libz.1.dylib:\n    /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.3)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)\n/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa:\n    /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa (compatibility version 1.0.0, current version 15.0.0)\n    /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1038.29.0)\n    /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData (compatibility version 1.0.0, current version 251.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)\n/usr/lib/libobjc.A.dylib:\n    /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 227.0.0)\n    /usr/lib/libauto.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.9.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.11)\n```\n. It works ! Thanks !\n. ",
    "AiZ": "Here it is, slightly \"anonymized\".\n\nThanks in advance.\nAiZ\n. Thanks a lot!\nCurrent (20130319) github master 1.8.4 Windows 32bit static binary, linked with libpng 1.5.14:\nhttp://aiz.free.fr/pngquant_1.8.4.zip\n. ",
    "ghost": "Original Image:\n\npngquant 1.8\n\npngquant 1.8.3\n\nBoth with --speed 1 option. Same \"effect\" here ;)\n. It's probably because it's UPX compacted. Uncompact with -d command.\n. https://github.com/pornel/pngquant/issues/100\n. Not tested (updated for no dependencies).\nLink: http://css-ig.net/tools/zip/libimagequant_140711.zip\n. Wow, It's really very helpful. Thank you very much...\n. What seems interesting is that the surrounding frames of the same character don't show these errors even though the actual image might be nearly identical:\nNo error:\n\nError, just one frame after:\n\nThat being said, is there anything to be done about this? Or should I just be careful to tweak individual frames that are erroneous by, say, applying a slight noise to the source image and hope that pngquant's processing on that doesn't produce these artifacts?\n. Ah I didn't realize this was an option! Yeah, --floyd=0.5 did the trick! Does this basically indicate how much dithering occurs?\n. Awesome. Thanks for fixing this. :)\n. Hm. I'm still seeing this issue crop up on master. :( In particular, here is an image that always produces the odd color region in between his eyes: http://cld.tiz.ma/image/1z2S2I2S0d02/01_NORMAL_011.png\nThis is the command I'm using:\n./pngquant --force --speed 1 256 ~/Desktop/01_NORMAL/*.png\nWith --floyd=0.5, it's less noticeable, but some frames still exhibit the issue.\n. Interesting. It was the --speed 1 option that was still resulting in the screwed up colors. The default works just fine. Isn't 1 supposed to be the \"best\"? Anyway, thanks for fixing this!\n. it's 2.7.2 - June 2016 with libpng 1.6.23 and zlib 1.2.8 with gcc 6.1.1. it should use the latest openmp implementation. it's barely tested, but should work :\nhttp://css-ig.net/tools/public/pngquant.zip\n. 2.8.0 - http://css-ig.net/tools/public/pngquant.zip\n. just in case it could help, barely tested but it should work\n2.8.2 - http://css-ig.net/tools/public/pngquant.zip\nsame with fast tweaks (should compress a bit better/faster, but less safe probably)\n2.8.2m - http://css-ig.net/tools/public/pngquantm.zip\nedit : i used m for my tests - it uses cloudflares zlib, and some changes like idat max size or critical chunks support only. gains are barely noticeable actually on G1820-2.7ghz, default option:\nhttps://upload.wikimedia.org/wikipedia/fr/d/df/Firefox_2013_logo.png \n659589 bytes - 2.917s - if you compare critical chunks only and idat combined, file is 658579 bytes\n658450 bytes - 2.808s (m). pngquant, 2.5.2 (October 2015) - 3/10/15\nzlib 1.2.8 and libpng 1.6.18\nhttp://css-ig.net/tools/public/pngquant.zip\n. i had to re-compile, so this is with d5ab479\nhttp://css-ig.net/tools/public/pngquant.zip\n. Fair enough :)\nOriginally I looked into leveraging find_library, find_static, find_h, etc. but hit some issues.  I may revisit that approach in the future (or just refactor what I've got now) but for now it works for my purposes.\nWorth noting that the previous functionality should still be there when omitting --with-zlib or --with-lcms2, respectively.\n. Thank you so much.\nHave a nice day  :-)\n. ",
    "mflopez79": "It worked! Thanks mate\nPS: In some companies system updates are so hard to get, so I'm kinda used to work with old crappy stuff :(\n. ",
    "hudsonansley": "sure, here it is (hesitated to do that since it is so much larger than the compressed ones ;-)\n\n. oops, I closed that by accident...\n. ok, that makes sense actually, for us for now we'll stick with 1.8.1, but\nI'll keep that workaround in mind. This compressor was/is very useful for\nus, thanks again!\nRegards,\nHudson\nps- I hope you can solve the problem, and please let me know if you do.\nOn Mon, Jul 15, 2013 at 11:40 PM, porneL notifications@github.com wrote:\n\nI've looked into it, and overall it's a tough issue to fix. The change\nthat made this case worse improves several other images.\nI'll probably crack the problem eventually, but in the meantime if you\nneed workaround - add noise to the area that lacks dithering.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pornel/improved-pngquant/issues/30#issuecomment-21019454\n.\n. \n",
    "mvidiassov": "1) - thank you.\n2)\n    if (!custom_malloc && !custom_free) {\n        custom_malloc = malloc;\n        custom_free = free;\n    } else if (custom_malloc || custom_free) {\n        return NULL; // either specify both or none\n    }\nWhat if both custom_malloc and custom_free are set?\n(!custom_malloc && !custom_free) fails\n(custom_malloc || custom_free) succeeds => NULL results\nmay be you intended it to be\n(!custom_malloc || !custom_free)\n3) \n\nAre you sure optreset is portable?\n\nNo :(\nOK, you are right, no need for you to get into this subtle and unrelated issue.\nI drop this wishlist item.\n\nWhat do you think about that API?\n\nA parent asks a little girl:\n- Do you like the cake?\n- NOO. It is BAAD.\n- What's wrong with it?\n- It is SMAALL.\nI am in quick prototyping mode, in search for a magic bullet to make that damn PNG textures (produced by pre-existing code I do not intend to touch or understand) smaller, so the first step was to call ImageMagick \"convert\" program via \"system\" :(\nThus pngquant fits my needs nicely, but there is a lot of code in pngquant.c and rwpng.c, and to use libimagequant directly I'd have to do almost equivalent amount of work.\nI'd rather try to use the the results of the effort you have already put into pngquant.c and rwpng.c instead of duplicating it (although I confess that calling renamed \"main\" is the ugliest way to do it).\nIt would be nice to have some such high-level API provided by you, enabling someone who used pngquant as a separate utility to migrate to incorporating it as a library without going into additional details.\nIn this imagined case the user fills a structure, equivalent to pngquant command line, calls a \"convert it all\" routine and gets just a success or failure code.\nBut the above is just wishful thinking of an uninformed user.\n. ",
    "horst1": "On SuSE 10.1: ls -l /usr/lib/libpng*\"\n-rw-r--r-- 1 root root 300570 2006-04-23 03:42 /usr/lib/libpng12.a\nlrwxrwxrwx 1 root root     13 2012-04-19 15:36 /usr/lib/libpng12.so -> libpng12.so.0\nlrwxrwxrwx 1 root root     19 2012-03-08 10:02 /usr/lib/libpng12.so.0 -> libpng12.so.0.1.2.8\n-rwxr-xr-x 1 root root 258076 2006-04-23 03:42 /usr/lib/libpng12.so.0.1.2.8\nlrwxrwxrwx 1 root root     10 2012-04-19 15:36 /usr/lib/libpng.a -> libpng12.a\nlrwxrwxrwx 1 root root     11 2012-04-19 15:36 /usr/lib/libpng.so -> libpng.so.3\nlrwxrwxrwx 1 root root     17 2012-03-08 10:02 /usr/lib/libpng.so.3 -> libpng.so.3.1.2.8\n-rwxr-xr-x 1 root root 258072 2006-04-23 03:42 /usr/lib/libpng.so.3.1.2.8\nOn SuSE 11.3: ls -l /usr/lib/libpng*\"\nlrwxrwxrwx 1 root root     11 Mar 22 18:45 /usr/lib/libpng.so -> libpng12.so\nlrwxrwxrwx 1 root root     28 Mar 25 11:55 /usr/lib/libpng.so.3 -> /usr/lib/libpng14.so.14.11.0\nlrwxrwxrwx 1 root root     18 Mar 22 18:45 /usr/lib/libpng12.so -> libpng12.so.0.49.0\nlrwxrwxrwx 1 root root     18 Mar 22 18:45 /usr/lib/libpng12.so.0 -> libpng12.so.0.49.0\n-rwxr-xr-x 1 root root 169956 Mar 30  2012 /usr/lib/libpng12.so.0.49.0\nlrwxrwxrwx 1 root root     19 Mar 22 18:45 /usr/lib/libpng14.so -> libpng14.so.14.11.0\nlrwxrwxrwx 1 root root     19 Mar 22 18:45 /usr/lib/libpng14.so.14 -> libpng14.so.14.11.0\n-rwxr-xr-x 1 root root 169840 Jul 25  2012 /usr/lib/libpng14.so.14.11.0\n. ",
    "rolftimmermans": "It would actually be pretty useful to have an option like --quality that only applies when converting true colour images to palettes. Then when images with palettes are processed the number of colours is not reduced (i.e. maximum quality).\n. @pornel That's a reasonable scenario, but I guess then you would use the regular quality option. Anyway, ultimately I the best solution is probably to keep track of which images were compressed before calling pngquant and not relying on it to guess it for you.\n. What should the behaviour be if the index is out of bounds? Assume the last (valid) index in the palette?\n. Don't think it is entirely solved yet. Trying with: pngquant --quality 0-99 tbwn3p08.png.\nWhat solves it for me is to move the check out of the loop. Here is a test image:\n\n. The latest master is definitely better for the example image! The compressed image size is now only 63KB. Unfortunately that's still larger than 1.8.3 and there is still some subtle dithering in the grey background:\n\nHere's another example image that shows some strange dithering patterns (this is the original):\n\nWhen compressing with the latest master (3df5801), there are very obvious dithering artefacts that appear in the purple background. These come and go depending on the exact crop of the image. Both images were compressed with quality set to 0-99.\n\n. Hmm. I agree that in general the results are better with 2.0 than 1.8.3. But the excessive dithering (which only occurs in a minority of images) is something I haven't seen with 1.8.3, especially not to the point where it becomes visually obvious or distracting. The grey background in the first example image has a perfectly even background with 1.8.3.\nI tested the latest master with the purple image above, and while the dithering looks different it's still quite obvious.\n. Fantastic results for the second (purple) example. Does not make a difference for the dithering in the grey background of the first example. I'm presuming there are two distinct issues here.\n. I just realised I'm not sure if likely_colormap_index can be set to 0 in this situation. What do you think?\nThe difference between this and the previous implementation is that sometimes the number of colours goes up during the iterations, and one of the earlier guesses is chosen as the final palette. That means the guessed index may still be larger than the number of colours in the palette.\n. That's certainly possible; then we'd have to calculate the total weight first before iterating again and saving the weight of the used colours and adjust any excess weight.\n. Yeah, the calculation is somewhat arbitrary. So now the surface area is used to calculate a maximum in pam_acolorhashtoacolorhist. The rows were already present so I added the number of cols in the struct.\n. We maintain a fork that uses CMake to build libimagequant for OS X/Linux/Windows. We chose CMake in favour of a VS project file, because CMake files can be maintained for all platforms. CMake appears to be the least horrible build system that works on Windows and Unix-like OSes.\nIf there's interest in switching to CMake for better Windows compatibility we can contribute the relevant changes. It also includes some changes to the C code similar to those in the msvc branch, which I guess would have to be incorporated somehow into master for this to work well.\nLet me know if there's any interest.\n. CMake generates NMake files. NMake is a standard Makefile-like build tool that ships with and uses the MSVC compiler. There should no difference with a similarly compiled binary produced by Visual Studio, because the toolchain is the same.\nCMake can also generate VS project files, but we find NMake easier to integrate.\n. Wouldn't saving the palette before remapping ignore some improvements to the palette that are made during the remapping stage? Is that intentional?\n. The question, I guess, is: Wouldn't those improvements be necessary for a good quality quantisation of multiple images too, but instead taking all images into account? I understand that this is not possible with the API right now, but I was just wondering what the ideal situation would be.\n. ",
    "michaelbarlow7": "I CONCUR!\n. ",
    "kherink": "this issue is about preserving the image border region which defines the stretchable and content areas of the image:\nThe border is used to define the stretchable and static areas of the image. You indicate a stretchable section by drawing one (or more) 1-pixel-wide black line(s) in the left and top part of the border (the other border pixels should be fully transparent or white).\nI believe this could be solved by keeping the 1 pixel wide frame unmodified and ensuring that pure white, pure black, and clear transparent colors are in the palette.\n. ",
    "psyke83": "pornel,\nI've hooked pngquant (2.0.1) into the Android build of a project I'm associated with (androidarmv6) to preprocess the png files: http://review.androidarmv6.org/#/c/6126/\nIt works great for regular pngs in the build, but I can confirm that it really does break the 9patch files (lots of widgets become corrupted). I'll investigate this some more, but please let me know if you want any specific information to help troubleshoot this issue.\n. Hi pornel,\nUnfortunately, the latest revision doesn't seem to fix the issue. Please download this archive: http://goo.im/devs/psyke83/pngquant-tests/pngquant-test.zip\nIt contains two .apk files: the original Calculator app, the same app the assets optimized using pngquant (the latest revision that I downloaded and compiled today), and two screenshots to illustrate how invalid 9patch images affects the app. In order to see the original or optimized .9.png files, simply rename the .apk files to .zip, and then you can open as normal zip files. The res/drawable-mdpi folder contains the assets that are used for my device (and in the screenshots you see).\nPlease let me know if I can help any further.\n. pornel,\nI had built pngquant against libpng 1.2 (and missed the warning given about the recommended version of 1.5). Given your last comment, I recompiled pngquant with the libpng1.7.0beta33 source and statically linked the libraries into the executable (as I'd prefer to leave libpng maintained by my distribution). It seems that 9patch optimization now works with this binary. Thanks!\n. ",
    "Furniel": "Looks like program must preserve npTc chunks to make compiled 9.pngs work after optimization and preserve 1 pixel borders in not compiled images.\nI attached source of 9.png image, compiled 9.png, optimized image with pngquant and tweakpng info.\n\n\n\n\nUseful info about 9.png images: http://www.curioustech.net/ninepatch.html\n. @pflacson \nHere is 2.10.2 32bit windows version of pngquant(compiled with mingw, uses libpng 1.6.34, zlib 1.2.11 and Little CMS):\npngquant_x86.zip\n. @pflacson \nMade own quick test(tested compression of 40mp image) of my x86 version, my x64 version and official version of pngquant:\nTime of image compression:\n21 sec  - original x64 binary\n15 sec - my own x64 binary\n20 sec - my own x86 binary\nI don't know with what gcc version and optimization flags official binary was compiled, but i used gcc 7 and O3, flto and profile-guided optimization.\nMy x64 binary if you want make own tests:\npngquant_x64.zip\n. @phonphen \nRecompiled my binaries(enabled open mp support - missed that pngquant supports this feature during first compilation. Now binaries can use all cpu cores).\nRemade tests:\nOne image processing:\n21 sec - original x64 binary\n13 sec - my new x64 binary with OMP enabled\n15 sec - my old x64 binary\n17 sec - my new x86 binary with OMP enabled\n20 sec - my old x86 binary\nBatch image processing(set of 10 different images, tested on core i7 with 4 cores and 8 threads):\nerror   - original x64 binary can't find path and for some reason doesn`t work in batch mode\n17 sec - my new x64 binary with OMP enabled\n46 sec - my old x64 binary\n24 sec - my new x86 binary with OMP enabled\n64 sec - my old x86 binary\nNew binaries for tests:\npngquant_x86_omp.zip\npngquant_x64_omp.zip\n. ",
    "tomgidden": "Hmm... as far as I can remember, it should logically be at the end, as libimagequant needs to link to -lm, NOT the other way around.  But I see your point. :-/\nFYI, this was on Ubuntu Precise on a Rackspace Cloud server.\nThanks,\nTom\n. ",
    "mmikkel": "Got this error on Ubuntu 13.10 w/ the latest build, the Makefile seems to have changed between the above and now.\nI was able to compile using\n$ ./configure --extra-ldflags=-lm && make\n. ",
    "jacksonzhuo": "I've add libgcc.a to lib/Makefile, and remove #pragma comment(lib, \"./lib/libgcc.a\"), the errors changes to:\nLinking...\nlibimagequant.a(nearest.o) : error LNK2001: unresolved external symbol __alloca\nlibimagequant.a(libimagequant.o) : error LNK2001: unresolved external symbol __alloca\nlibimagequant.a(pam.o) : error LNK2001: unresolved external symbol __alloca\nlibimagequant.a(viter.o) : error LNK2001: unresolved external symbol __alloca\nlibimagequant.a(mediancut.o) : error LNK2001: unresolved external symbol __alloca\nlibimagequant.a(libimagequant.o) : error LNK2001: unresolved external symbol __f_pow\nlibimagequant.a(pam.o) : error LNK2001: unresolved external symbol __f_pow\nlibimagequant.a(libimagequant.o) : error LNK2001: unresolved external symbol __f_powf\nlibimagequant.a(mediancut.o) : error LNK2001: unresolved external symbol __f_powf\nlibimagequant.a(libimagequant.o) : error LNK2001: unresolved external symbol ___getreent\nlibimagequant.a(libimagequant.o) : error LNK2001: unresolved external symbol _vsnprintf\nDebug/RenderSizeTest.exe : fatal error LNK1120: 5 unresolved externals\nError executing link.exe.\nIn addition, the cygwin  does not have  libm.a.\nI've also tried \nmake CFLAGSADD=-mno-cygwin\nBut the error still occurs.\n. pornel, thanks for you help!\nI complied the library with MinGW, linked with \"libgcc.a\" and \"libmingwex.a\", and it worked.\n. ",
    "jamesstout": "If the file is only going to be a .png or .PNG, then I think you can just have a special case.\n. ",
    "lordi": "I think -o output would be great, especially for scripts. I've always been missing it.\nRight now I'm using\npngquant - < in > out\nbut\npngquant -o out in\nwould be superior because it does not require an extra shell call when calling from another context than shell language.\n. ",
    "kevva": "+1.\n. https://github.com/kevva/pngquant-bin/issues/25\n. ",
    "erasmospunk": "Also I don't know if it is related with this issue but the official CLI builds from http://pngquant.org/ are giving me segmentation fault and \"illegal instruction: 4\" in another machine. Both are using OS X 10.7, it works just fine in 10.8.\n. The -mmacosx-version-min=10.6 did the job, the bin from pngquant.org now works! Before you were using -mmacosx-version-min=10.7?\nI managed to compile rwpng_cocoa.m but I had to change -I/opt/X11/include to -I/usr/X11/include. What happens with Mountain Lion (or Mavericks) that don't have X11 installed by default, the compilation will fail?\nIt also worked by installing with Homebrew libpng and using -I/usr/local/opt/libpng/include.\nRegarding the CoreGraphics.h issue I based on this solution http://stackoverflow.com/a/4173621/1183663, my experience with Objective-C is minimal. Changing #include to #import also worked:\n-#import <CoreGraphics/CoreGraphics.h>\n+#import <ApplicationServices/ApplicationServices.h>\nI don't know why it cannot find CoreGraphics.h by default, I have the latest Xcode and the command line tools installed.\n. Just tested with Mountain Lion with only X Code and indeed it fails to compile. There is a directory /usr/X11/lib folder with a bunch of dylibs (libpng is also there) but no include folder.\nThe solution seems to be to install xquartz or libpng with Homebrew.\n. hmmm, this what I found on the Mountain Lion system:\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/X11/include/libpng15/png.h\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/X11/include/png.h\n. @pornel is right, this is more related to the npm package node-pngquant-bin that bundles the incompatible pngquant binary (I guess the default is for Ubuntu).\nThe problem seems to be that when node-pngquant-bin is being installed and the tests are failing it doesn't recompile correctly.\nTry to execute this in the /path/to/node_modules/grunt-contrib-imagemin/node_modules/pngquant-bin:\nnpm test (you need to have tools like make and npm mocha)\nand post the results.\nAlso take a look here https://github.com/sindresorhus/node-pngquant-bin/issues/2\n. ",
    "sindresorhus": "Nothing on 10.8 (without X11), except for the one i installed with Homebrew...\n. @pornel can you include libpng in the build so people don't have to fetch external dependencies?\n. @lovasoa Nice! Would it make sense to have the libjpeg port in a separate repo? I don't think I would have realized libjpeg were ported too unless you told me. Or maybe just say so in the readme.\n. For anyone looking here. I would also love to see these binaries emscripten compiled to JavaScript:\nhttp://optipng.sourceforge.net/\nhttps://github.com/mozilla/mozjpeg\nhttp://www.lcdf.org/gifsicle/\n. ",
    "eradman": "Thanks for reviewing. When you in cut the next release I'll see if the diff in OpenBSD ports can be trimmed down a bit.\n. ",
    "vmdanilov": "Confirm that spot colors are preserved fine now \ud83d\udc4c\nThough quantization with built-in color profile caused slight color shift on the code highlight. Must be something with color conversion.\nAnother inconsistency is shadow gradient is not dithered even with --floyd=1.\n\n. Think there should be an additional check for the 2-pixel areas to still allow dithering when pixel colors are similar (not edges).\n. The set_rounded_palette is called earlier here, same as without dithering. This way the above mentioned color shift does not occur. Can there be other causes?\n. ",
    "xenophilicibex": "[I also tested with 2.0.0 (March 2013) - both worked fine before Mavericks)\n$ pngquant \npngquant, 2.0.1 (September 2013), by Greg Roelofs, Kornel Lesinski.\n   Compiled with SSE2 instructions.\n   Compiled with libpng 1.5.11; using libpng 1.5.13.\n   Compiled with Apple Cocoa image reader.\n[trimmed the rest]\nBoth of these icons had the same issue:\n\n\n. I think you're right. I just sent the image to someone who was still using Mountain Lion and it rendered correctly for them.\nAlso, I'm not sure if this is relevant or related, but I am unable to build pngquant on Mavericks because:\n```\n./rwpng.h:35:10: fatal error: 'png.h' file not found\ninclude \"png.h\"    / libpng header; includes zlib.h /\n```\nIs that significant? Or did I make a silly mistake?\n. Wow, thanks for reporting it. I appreciate you staying on top of this! \n. ",
    "marcedwards": "I think there\u2019s two issues here:\n1. Incorrect displaying of PNG8 (which I've seen from many sources, not just pngquant).\n2. PNGs with no ICC profile included are now considered to be sRGB by Preview, Safari (version 6 and above) and other apps.\nThe second issue means there will be an sRGB to the correct display profile conversion. Apple\u2019s built-in standard profiles are typically quite close to sRGB, so the conversion is minimal, but definitely still there. At this time, Chrome displays PNGs without conversion, so that might be a better tool to use when comparing images than Preview. \n. Ok, great to know. Thanks.\n. ",
    "ttback": "I wish it was that simple. It actually has a three level file structure, but I already made my code to set everything up for pnguqant to work as is. It still managed to save about 20% of io runtime with the --output change, so thank you for that.The only reason why I try to suggest is that imagemagick doesn't seem to worry about this, so maybe there is already some C code out there that handles this type of operation nicely.\n. never mind. i must have misremembered. Thanks for checking on it. :)\n. I would need to know more about how to embed\" image mask\" into the image. What would I need to do to have images work with this feature? Currently I am thinking more in terms of giving coordinate of bounding boxes as input to pngquant, but you have some better ideas, I am open to explore the options. My toolset is imagemagick and python's Pillow library. Obviously I'm not an expert, so you may have to elaborate a bit on how to take advantage of the feature. \nAs for benefits of having this feature, an easy example that would benefit from this are any publication-related scans, mockups that are found most in traditional media. I am working with some really old archives of scans and \nI currently do not have the domain knowledge to make any available compression tool (imagemagick, pil or pngquant) to distinguish text from photos in a picture. \nCurrently if I run pngquant with quality 1~10, I can get readable text with a compression ratio of 3. (uncompressed/compressed) But the photos will look very zombie-like. I could only get out of the lossy zombie effect with quality above 60, about 60~80 bound. That pushes the compression ratio down to only 1.4. Given the fact that the majority of scans are text, I am thinking that I could have the best of both worlds to keep the compression ratio at around 2.5 without losing much photo quality. I think that would be a win-win situation and makes sense for png compression strategy since text should take less color index than photos, line arts, and drawings. \nA news article today just covered on museum of comic scans: http://news.yahoo.com/comics-lovers-drawn-ohio-museum-153218717.html\nI am sure comic scans can benefit from this as well. \nHere are some results from google search:\nhttp://images4.wikia.nocookie.net/__cb20121008080532/assassinscreed/images/thumb/5/5a/ACi_newspaper.png/800px-ACi_newspaper.png\nhttp://www.google.com/imgres?start=68&sa=X&biw=1920&bih=919&tbm=isch&tbnid=hU3mD1XPEMYnSM:&imgrefurl=http://en.wikipedia.org/wiki/File:BISU_Newspaper_15_March_2012_Issue_257.png&docid=BXtqR-MVuuc3zM&imgurl=http://upload.wikimedia.org/wikipedia/en/7/74/BISU_Newspaper_15_March_2012_Issue_257.png&w=1269&h=2000&ei=5ymBUoP3CrTIsASt54CIBA&zoom=1&ved=1t:3588,r:2,s:100,i:10&iact=rc&page=3&tbnh=187&tbnw=114&ndsp=45&tx=61&ty=71\nhttp://www.google.com/imgres?sa=X&biw=1920&bih=919&tbm=isch&tbnid=AzQ60k7Za4YduM:&imgrefurl=http://rollbacktolls.com/community-newspaper-article-on-mdx-public-meeting-in-kendall/&docid=Sp5DaOLfbcmH4M&imgurl=http://www.rollbacktolls.com/wp-content/uploads/2012/06/Community-Newspaper-PNG-sheet-on-MDX-8000-palms-791x1024.png&w=791&h=1024&ei=lSmBUtbsIqbJsASV8IDgDA&zoom=1&ved=1t:3588,r:91,s:0,i:371&iact=rc&page=3&tbnh=170&tbnw=125&start=68&ndsp=45&tx=90&ty=88\nhttp://media.smashingmagazine.com/wp-content/uploads/2011/09/newspaper-website.png\n. ",
    "davidhedley": "In case you need further detail:\npngquant, 2.0.1 (September 2013), by Greg Roelofs, Kornel Lesinski.\n   Compiled with SSE2 instructions.\n   Compiled with libpng 1.2.49; using libpng 1.2.49.\n. Please see below for the example input and output images\nMany thanks\nDavid\n. \n\n. ",
    "mdonoughe": "I just ran the official Windows 2.0.0 version and my armhf build against PngSuite-2013jan13 and visually the output looks the same between the two, however the image files are slightly different, even if I disable dithering and run them through optipng after. ImageMagick shows that there are actually differences in the values of the pixels but reports very small error levels. It looks like maybe there's a precision difference? Pixels that are between two colors in the palette seem to sometimes go to different palette colors.\nWindows:\n\nLinux:\n\nWindows:\n\nLinux:\n\n. I know of Neon but I have never tried to use it.\n. ",
    "Hello71": "Adjusting options appears to have the same effect. --quality 100-100 works around the issue, but prevents quantization of many other images.\n. Lies.\n!!! Couldn't download 'pngquant-2.0.2-src.tar.bz2'. Aborting.\n!!! Fetch failed for pngquant-2.0.2-src.tar.bz2, can't update Manifest\n. lgtm.\n. soname change is required iff ABI for old programs changes. it is intended to address the issue of \"install old library, compile program, upgrade library (new function takes float instead of int), program silently breaks\". if you do \"install new library, compile program (using new functions), downgrade library (removing new functions)\", then the program will say \"undefined symbol\", no soname required. similar behavior occurs, of course, with \"install old library, compile program using new functions\", then it fails at compile time, no soname required.. actually, that's just what I want for Gentoo: a few images, just to check basic functionality; not some hours-long test suite. I could write it myself, but having it upstream would benefit all distros.. ehm, true, that is an issue.... ",
    "pdknsk": "It doesn't seem very useful.\n```\nProgram received signal SIGABRT, Aborted.\n0xb7fdd424 in __kernel_vsyscall ()\n(gdb) bt\n0  0xb7fdd424 in __kernel_vsyscall ()\n1  0xb7dd8aff in raise () from /lib/i386-linux-gnu/libc.so.6\n2  0xb7ddc083 in abort () from /lib/i386-linux-gnu/libc.so.6\n3  0xb7dd1857 in ?? () from /lib/i386-linux-gnu/libc.so.6\n4  0xb7dd1907 in __assert_fail () from /lib/i386-linux-gnu/libc.so.6\n5  0x0804d6fb in convert_row_to_f ()\n6  0x0804d75b in liq_image_get_row_f ()\n7  0x0804d88c in contrast_maps ()\n8  0x0804f888 in liq_quantize_image ()\n9  0x0804a882 in pngquant_file ()\n10 0x08049ce5 in main ()\n```\n. What's interesting is that clang, GCC and ICC all trigger the same assert in debug mode. In NDEBUG, clang and GCC segfault, but ICC works just fine. Maybe ICC optimises the problem away somehow? I have no clue. It certainly does use SSE, because it's about 30% faster.\n. Works with GCC, but not clang. Without SSE, both report this.\nlibimagequant.c: In function \u2018liq_aligned_malloc\u2019:\nlibimagequant.c:330:5: warning: implicit declaration of function \u2018posix_memalign\u2019 [-Wimplicit-function-declaration]\n     posix_memalign(&ptr, 16, size);\n     ^\nlibimagequant.c:330:5: warning: implicit declaration of function 'posix_memalign' is invalid in C99\n      [-Wimplicit-function-declaration]\n    posix_memalign(&ptr, 16, size);\n    ^\n1 warning generated.\n. Well, that's beyond my C skills. Maybe if you asked me to fix a typo! :)\n. Works very well.\n. Is this actually necessary for non-SSE code? I read up on SSE the other day and noticed these nice and simple fuctions. Works well too.\nc\nvoid* _mm_malloc (size_t size, size_t align)\n\nAllocate size bytes of memory, aligned to the alignment specified in align, and return a pointer to \nthe allocated memory. _mm_free should be used to free memory that is allocated with _mm_malloc.\n\nc\nvoid _mm_free (void * mem_addr)\n\nFree aligned memory that was allocated with _mm_malloc.\n. Thanks!\n\nYou probably have already noticed, but the current version is lcms2 which has full (lcms1 only partial) support for v4 profiles. I couldn't get it to work though. The code is much the same, but it apparently needs different data structures to work on. I'm not sure, but this might be because I still have libpng 1.2 here.\n. With libpng 1.2 I get this warning. Using png_charp works, but then libpng 1.6 complains.\nrwpng.c:248:41: warning: incompatible pointer types passing 'png_bytep *' (aka 'unsigned char **')\n      to parameter of type 'png_charpp' (aka 'char **') [-Wincompatible-pointer-types]\n                                        &ProfileData,\n                                        ^~~~~~~~~~~~\nlcms2 works now.\n. Patch to ignore non-RGB profiles, for the odd PNG with erroneously attached CMYK profile. It happens.\nComment about input and output is adapted from tutorial.\n``` Diff\ndiff -Naur pngquant/Makefile pngquant-lcms/Makefile\n--- pngquant/Makefile\n+++ pngquant-lcms/Makefile\n@@ -62,8 +62,8 @@\n endif\nifdef USE_LCMS\n-CFLAGS += $(shell pkg-config --cflags lcms) -DUSE_LCMS=1\n-LDFLAGS += $(shell pkg-config --libs lcms)\n+CFLAGS += $(shell pkg-config --cflags lcms2) -DUSE_LCMS=1\n+LDFLAGS += $(shell pkg-config --libs lcms2)\n endif\nBUILD_CONFIGURATION=\"$(CC) $(CFLAGS) $(LDFLAGS)\"\ndiff -Naur pngquant/rwpng.c pngquant-lcms/rwpng.c\n--- pngquant/rwpng.c\n+++ pngquant-lcms/rwpng.c\n@@ -36,7 +36,7 @@\n #include \"png.h\"\n #include \"rwpng.h\"\n #if USE_LCMS\n-#include \"lcms.h\"\n+#include \"lcms2.h\"\n #endif\n#ifndef Z_BEST_COMPRESSION\n@@ -253,19 +253,25 @@\n                                         &ProfileLen);\n     cmsHPROFILE hInProfile = cmsOpenProfileFromMem(ProfileData, ProfileLen);\n\n\n\ncmsHPROFILE hOutProfile = cmsCreate_sRGBProfile();\n\n\ncmsHTRANSFORM hTransform = cmsCreateTransform(hInProfile, TYPE_RGBA_8,\n\nhOutProfile, TYPE_RGBA_8,\n\nINTENT_PERCEPTUAL, 0);\n\n// suprisingly, using the same input and output works\ncmsDoTransform(hTransform, mainprog_ptr->rgba_data,\nmainprog_ptr->rgba_data,\nmainprog_ptr->height * mainprog_ptr->width);\n/ ignore non-RGB color profiles /\nif (cmsGetColorSpace(hInProfile) == cmsSigRgbData) {\ncmsHPROFILE hOutProfile = cmsCreate_sRGBProfile();\n+\ncmsHTRANSFORM hTransform = cmsCreateTransform(hInProfile, TYPE_RGBA_8,\nhOutProfile, TYPE_RGBA_8,\nINTENT_PERCEPTUAL, 0);\n+\n/* It is safe to use the same block for input and output, \nwhen both are of the same TYPE. */\ncmsDoTransform(hTransform, mainprog_ptr->rgba_data,\nmainprog_ptr->rgba_data,\nmainprog_ptr->height * mainprog_ptr->width);\n+\ncmsDeleteTransform(hTransform);\ncmsCloseProfile(hOutProfile);\n\n}\n\n\ncmsDeleteTransform(hTransform);\n\ncmsCloseProfile(hOutProfile);\n         cmsCloseProfile(hInProfile);\n     }\n #endif\n```\n. From libpng 1.5 manual.\n\n\nIn png_get_iCCP, the type of \"profile\" was changed from png_charpp\nto png_bytepp, and in png_set_iCCP, from png_charp to png_const_bytep.\n\n``` Diff\ndiff -Naur pngquant/INSTALL pngquant-lcms/INSTALL\n--- pngquant/INSTALL\n+++ pngquant-lcms/INSTALL\n@@ -35,12 +35,12 @@\n On Mac OS X pngquant can use Cocoa framework to load images. This enables\n support for color profiles and other input file formats.\n-##Compilation with Little CMS 1\n+##Compilation with Little CMS 2\n  $ make USE_LCMS=1\n\n-Enables support for ICC v3 color profiles when reading images.\n-Requires Little CMS library available via pgk-config (e.g. install liblcms1-dev).\n+Enables support for ICC v2/v4 color profiles when reading images.\n+Requires Little CMS library available via pgk-config (e.g. install liblcms2-dev).\n##Compilation of libimagequant.a only\ndiff -Naur pngquant/rwpng.c pngquant-lcms/rwpng.c\n--- pngquant/rwpng.c\n+++ pngquant-lcms/rwpng.c\n@@ -243,7 +243,11 @@\n #if USE_LCMS\n     if (png_get_valid(png_ptr, info_ptr, PNG_INFO_iCCP)) {\n         png_uint_32 ProfileLen;\n+#if PNG_LIBPNG_VER < 10500\n+        png_charp ProfileData;\n+#else\n         png_bytep ProfileData;\n+#endif\n         int  Compression;\n         png_charp ProfileName;\n```\n. Set sRGB gamma after successful conversion, otherwise pngquant may gamma correct for a potentially different and false gamma value as read from gAMA chunk. Or in short: the COCOA code does this too.\n``` Diff\ndiff -Naur pngquant/rwpng.c pngquant-lcms/rwpng.c\n--- pngquant/rwpng.c\n+++ pngquant-lcms/rwpng.c\n@@ -277,6 +277,8 @@\n         cmsDeleteTransform(hTransform);\n         cmsCloseProfile(hOutProfile);\n\n+\n+            mainprog_ptr->gamma = 0.45455;\n         }\n     cmsCloseProfile(hInProfile);\n\n```\n. I managed to add OpenMP, after a bit of trial and error. It scales very well. Unfortunately LCMS is already very fast with a single core, so overall speed increase for pngquant is marginal \u2012 about 1-2% at default speed setting.\n``` Diff\ndiff -Naur pngquant/rwpng.c pngquant-lcms/rwpng.c\n--- pngquant/rwpng.c\n+++ pngquant-lcms/rwpng.c\n@@ -250,36 +250,36 @@\n     png_read_end(png_ptr, NULL);\n#if USE_LCMS\n-    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_iCCP)) {\n-        png_uint_32 ProfileLen;\n #if PNG_LIBPNG_VER < 10500\n-        png_charp ProfileData;\n+    png_charp ProfileData;\n #else\n-        png_bytep ProfileData;\n+    png_bytep ProfileData;\n #endif\n-        int  Compression;\n-        png_charp ProfileName;\n-\n-        png_get_iCCP(png_ptr, info_ptr, &ProfileName,\n-                                        &Compression,\n-                                        &ProfileData,\n-                                        &ProfileLen);\n+    png_uint_32 ProfileLen;\n\n\nif (png_get_iCCP(png_ptr, info_ptr, &(png_charp){0}, &(int){0}, &ProfileData, &ProfileLen)) {\n         cmsHPROFILE hInProfile = cmsOpenProfileFromMem(ProfileData, ProfileLen);\n /* ignore non-RGB color profiles */\n if (cmsGetColorSpace(hInProfile) == cmsSigRgbData) {\n     cmsHPROFILE hOutProfile = cmsCreate_sRGBProfile();\n\n-\n         cmsHTRANSFORM hTransform = cmsCreateTransform(hInProfile, TYPE_RGBA_8,\n-                                                        hOutProfile, TYPE_RGBA_8,\n-                                                        INTENT_PERCEPTUAL, 0);\n+                                                          hOutProfile, TYPE_RGBA_8,\n+                                                          INTENT_PERCEPTUAL, \n+#ifdef _OPENMP\n+                                                          cmsFLAGS_NOCACHE);\n+#else\n+                                                          0);\n+#endif\n\n\n/* It is safe to use the same block for input and output,\n\nwhen both are of the same TYPE. */\ncmsDoTransform(hTransform, mainprog_ptr->rgba_data,\nmainprog_ptr->rgba_data,\nmainprog_ptr->height * mainprog_ptr->width);\n\npragma omp parallel for\n\nfor (unsigned int i = 0; i < mainprog_ptr->height; i++) {\n/* It is safe to use the same block for input and output,\nwhen both are of the same TYPE. */\ncmsDoTransform(hTransform, row_pointers[i],\nrow_pointers[i],\nmainprog_ptr->width);\n}     cmsDeleteTransform(hTransform);\n     cmsCloseProfile(hOutProfile);\n\n```\n. There is one feature missing, and that's support for GRAY profiles, which are valid in PNGs. This would require serious code change as pngquant transforms G(A) images to RGBA upon reading. So the image would need to be read as G(A), color corrected, and then transformed to RGBA.\n\n\nSo quite a bit of effort for rare GRAY profiles. Maybe a brief warning about missing support should be added when grayscale images with GRAY profile are read instead.\n. There is another maybe missing feature, that's simple to add, but is quite a few lines and complicates the code slightly. LCMS can build an RGB profile from cHRM and gAMA chunks and use this for color correction.\nThe PNGs affected by this are probably few, because the following conditions need to be met.\n- gAMA && cHRM && !sRGB && !iCCP\n- gAMA or cHRM differ from sRGB default values\nI'm not sure about this.\n. Also, what's your opinion on a general status message for verbose output, indicating a profile and color correction to sRGB.\n. On gAMA and cHRM, such files usually had their iCCP chunk stripped. Most applications seem to color correct this. I have not encountered images with GRAY profile yet. And from what I can tell, the difference is fairly minimal compared to the same image with stripped profile.\nOn the message, I noticed this uses verbose_printf which is in pngquant.c so would need to be imported in some way. Or it could be moved to rwpng.c which is imported by pngquant.c already. I don't know what the best way to do this is.\n. Hmm works fine here. I'll try 4.9 later.\n. I tried 4.9 from this week, works fine.\n. Yep, libpng is quite aggressive with its warnings now, in my opinion perhaps a bit too much. In most cases it's just a warning on read, and only an error on write, with some exceptions.\n. I'm not sure giving me commit ability was a good idea :) It took a commit or two to figure this out.\n. I've got the code but still need to clean it up a bit. Until then, some reference PNGs I made.\nAll images should be displayed the same. If making an RGB profile from gAMA and cHRM is not supported, the colors of the last image are different.\nFirefox supports this, Chrome doesn't, which is not necessarily a bug. It's only a suggestion.\n\nDecoders running on platforms that have a Colour Management System (CMS) can pass the image data, gAMA, and cHRM values to the CMS for display or further processing.\n\nThis is the original file with only sRGB chunk.\n\nThe same file converted to Adobe RGB (1998) with different chunks set.\niCCP\n\ngAMA cHRM\n\n. https://github.com/pornel/pngquant/commit/bde14bbb82d5d8983ff583991e943de6d6ce2862\nPlease review. I made some minor changes to verbose output which you may or may not like.\n. png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB) may be slightly simpler.\nI'm not sure what &(int){0} does though.\nOr how do you like this.\n``` Diff\ndiff -Naur pngquant/rwpng.c pngquant-lcms/rwpng.c\n--- pngquant/rwpng.c\n+++ pngquant-lcms/rwpng.c\n@@ -217,12 +217,10 @@\n /* get source gamma for gamma correction, or use sRGB default */\n\n\ndouble gamma;\nif (!png_get_sRGB(png_ptr, info_ptr, &(int){0}) && png_get_gAMA(png_ptr, info_ptr, &gamma)) {\nmainprog_ptr->gamma = gamma;\n} else {\nmainprog_ptr->gamma = 0.45455;\n}\ndouble gamma = 0.45455;\nif (!png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB))\npng_get_gAMA(png_ptr, info_ptr, &gamma);\n\nmainprog_ptr->gamma = gamma;\npng_set_interlace_handling(png_ptr);\n```\n. I meant results are also inconsistent with SSE enabled.\n\n\nI've run some automated tests on the same image scaled down to different widths.\n250\n01: 21.812 35779\n       openmp_01: 21.812 35779\n          sse_01: 21.812 35779\n   openmp_sse_01: 21.812 35779\n              03: 21.976 35862\n       openmp_03: 21.976 35862\n          sse_03: 21.976 35862\n   openmp_sse_03: 21.976 35862\n              11: 28.206 36512\n       openmp_11: 28.206 36512\n          sse_11: 28.206 36512\n   openmp_sse_11: 28.206 36512\n1000\n01: 21.856 397835\n       openmp_01: 21.857 397945\n          sse_01: 21.856 397811\n   openmp_sse_01: 21.857 397895\n              03: 22.042 398538\n       openmp_03: 22.042 398481\n          sse_03: 22.042 398634\n   openmp_sse_03: 22.042 398585\n              11: 27.344 396298\n       openmp_11: 27.343 396298\n          sse_11: 27.344 396298\n   openmp_sse_11: 27.343 396298\n4000\n01: 22.316 5221981\n       openmp_01: 22.285 5221809\n          sse_01: 22.316 5221884\n   openmp_sse_01: 22.285 5222022\n              03: 22.568 5226275\n       openmp_03: 22.568 5227309\n          sse_03: 22.568 5226443\n   openmp_sse_03: 22.568 5227558\n              11: 26.992 5032495\n       openmp_11: 27.390 5032495\n          sse_11: 26.992 5032495\n   openmp_sse_11: 27.390 5032495\nIn fairness, difference in images at same speed setting is minimal. Incredibly difficult to actually find differing pixels. And even then, it's difficult to decide which is better. Usually it's just dithering in small areas that's randomly different. To better visualise, I made a small programm to show differences. As single BIT, for any difference, and as RGB, for exact difference.\nThe images below show the difference between 03 and openmp_03.\nf_1000_bit.png f_1000_rgb.png f_4000_bit.png f_4000_rgb.png\nAnd repeated, with above patch applied.\n250\n01: 21.837 35844\n       openmp_01: 21.837 35844\n          sse_01: 21.837 35844\n   openmp_sse_01: 21.837 35844\n              03: 22.036 35841\n       openmp_03: 22.036 35841\n          sse_03: 22.036 35841\n   openmp_sse_03: 22.036 35841\n              11: 28.206 36512\n       openmp_11: 28.206 36512\n          sse_11: 28.206 36512\n   openmp_sse_11: 28.206 36512\n1000\n01: 21.809 398562\n       openmp_01: 21.811 398383\n          sse_01: 21.809 398535\n   openmp_sse_01: 21.811 398382\n              03: 22.151 399756\n       openmp_03: 22.150 399689\n          sse_03: 22.151 399767\n   openmp_sse_03: 22.150 399694\n              11: 27.344 396298\n       openmp_11: 27.343 396298\n          sse_11: 27.344 396298\n   openmp_sse_11: 27.343 396298\n4000\n01: 22.405 5214812\n       openmp_01: 22.404 5215325\n          sse_01: 22.405 5214628\n   openmp_sse_01: 22.404 5215558\n              03: 22.303 5206031\n       openmp_03: 22.303 5206149\n          sse_03: 22.303 5205905\n   openmp_sse_03: 22.303 5206239\n              11: 26.992 5032495\n       openmp_11: 27.390 5032495\n          sse_11: 26.992 5032495\n   openmp_sse_11: 27.390 5032495\nf_1000_bit.png f_1000_rgb.png f_4000_bit.png f_4000_rgb.png\n. I have investigated this a bit further. At speed 11 only the reporting differs, but not the image, and the fix is simply to use double precision for remapping_error. Interestingly this moves the new number very close to the original openmp number, and not the non-openmp number, as I had expected. At normal resolutions, it matches the original openmp number. I guess openmp is already more accurate because reduction(+:remapping_error) stores intermediate sums for each processed chunk and adds them up, which apparently reduces floating point error.\n. The bulk of the problem is fixed with a compiler switch that makes MSE sync between openmp and non-openmp (and also between compilers, interestingly). I'll explain later. It reduces image difference too.\n1714  -> 68   (of 1039680)\n23661 -> 8153 (of 719000)\nI wonder if this can be reduced to no different pixels. The culprit is in viter_update_color or viter_finalize I think.\nI gathered [argb] / total each with openmp and without, subtracted and sorted by difference.\n0.0012374280642913\n0.0011468501374578\n0.0011276826453467\n0.0010329440870296\n0.0010226366148883\n...\nInterestingly, some colors are swapped. I think it makes no difference for the image though.\n```\nnon-openmp\n217: 0.9994596546403379 0.5489225212357488 0.1524952966084317 0.2265511860684772\n218: 0.9994251191303992 0.3215055815212389 0.3769411017133303 0.4389205852728239\n```\n```\nopenmp\n217: 0.9994251191303992 0.3215057637679015 0.3769412415189892 0.4389206252172979\n218: 0.9994596296095159 0.5489333871155586 0.1523669085164708 0.2265514645363715\n```\nWhat do you say?\n. Beautiful! :) I have some tables with numbers prepared which I'll post shortly.\n. First an explanation of the tables.\n```\n                  SPEED                                             COMPILER\n\n(S)SE (O)PENMP | MSE CRC32 TIME\n```\ndefault\n```\n       01                      03                      11                GCC\n\n | 21.856 3976321f 10.87 | 22.042 8b769f55  7.31 | 27.344 284b1660  0.88\n\nO | 21.857 e085173c  7.38 | 22.042 2e011309  5.12 | 27.344 284b1660  0.57\n S   | 21.856 b5cfe138  8.73 | 22.042 2b637b2e  5.94 | 27.344 284b1660  0.73\n S O | 21.857 c6f526b7  6.03 | 22.042 2ea59b49  4.25 | 27.344 284b1660  0.49\n   01                      03                      11                ICC\n\n\n | 22.010 9d540393  9.83 | 21.979 0a7faaaa  6.52 | 27.297 f2261bff  0.76\n\nO | 22.009 cd7ff6f6  6.62 | 21.979 9d8e2352  4.56 | 27.297 f2261bff  0.64\n S   | 22.010 9d540393  6.59 | 21.979 b82d7814  4.42 | 27.297 f2261bff  0.55\n S O | 22.009 cd7ff6f6  4.79 | 21.979 9d8e2352  3.35 | 27.297 f2261bff  0.52\n   01                      03                      11              CLANG\n\n\n | 21.860 715e7b6a  9.75 | 22.005 948b963d  6.66 | 27.297 f2261bff  0.80\n\nO | 21.860 6995453f  6.79 | 22.005 f781030b  4.82 | 27.297 f2261bff  0.72\n S   | 21.860 715e7b6a  6.75 | 22.005 948b963d  4.64 | 27.297 f2261bff  0.61\n S O | 21.860 6995453f  4.96 | 22.005 f781030b  3.56 | 27.297 f2261bff  0.54\n```\ndouble\n```\n       01                      03                      11                GCC\n\n | 21.857 15aab7e0 10.87 | 22.042 416f04e5  7.33 | 27.344 284b1660  0.88\n\nO | 21.857 15aab7e0  7.41 | 22.042 416f04e5  5.15 | 27.344 284b1660  0.57\n S   | 21.857 2ad7bed7  8.74 | 22.042 d9ec4b29  5.96 | 27.344 284b1660  0.74\n S O | 21.857 2ad7bed7  6.05 | 22.042 d9ec4b29  4.25 | 27.344 284b1660  0.49\n   01                      03                      11                ICC\n\n\n | 22.011 07f6e2b7  9.87 | 21.978 da012ae7  6.53 | 27.297 f2261bff  0.76\n\nO | 22.011 07f6e2b7  6.67 | 21.978 da012ae7  4.59 | 27.297 f2261bff  0.63\n S   | 22.011 07f6e2b7  6.63 | 21.978 da012ae7  4.45 | 27.297 f2261bff  0.55\n S O | 22.011 07f6e2b7  5.00 | 21.978 da012ae7  3.37 | 27.297 f2261bff  0.56\n   01                      03                      11              CLANG\n\n\n | 21.860 cce3e339  9.79 | 22.005 7179b786  6.62 | 27.297 f2261bff  0.81\n\nO | 21.860 cce3e339  6.80 | 22.005 7179b786  4.75 | 27.297 f2261bff  0.69\n S   | 21.860 cce3e339  6.75 | 22.005 7179b786  4.65 | 27.297 f2261bff  0.61\n S O | 21.860 cce3e339  5.00 | 22.005 7179b786  3.51 | 27.297 f2261bff  0.61\n```\n-fno-reciprocal-math / -prec-div\n```\n       01                      03                      11                GCC\n\n | 21.861 21598ee6 10.94 | 22.005 685964ef  7.40 | 27.297 f2261bff  0.87\n\nO | 21.861 21598ee6  7.36 | 22.005 685964ef  5.13 | 27.297 f2261bff  0.56\n S   | 21.861 5842d639  8.83 | 22.005 b3b6cbb6  6.00 | 27.297 f2261bff  0.73\n S O | 21.861 5842d639  6.04 | 22.005 b3b6cbb6  4.22 | 27.297 f2261bff  0.49\n   01                      03                      11                ICC\n\n\n | 21.860 dbbe76e9  9.24 | 22.005 9225e628  6.26 | 27.297 f2261bff  0.76\n\nO | 21.860 dbbe76e9  6.31 | 22.005 9225e628  4.30 | 27.297 f2261bff  0.65\n S   | 21.860 dbbe76e9  6.12 | 22.005 9225e628  4.19 | 27.297 f2261bff  0.55\n S O | 21.860 dbbe76e9  4.41 | 22.005 9225e628  3.18 | 27.297 f2261bff  0.55\n   01                      03                      11              CLANG\n\n\n | 21.860 cce3e339  9.76 | 22.005 7179b786  6.61 | 27.297 f2261bff  0.81\n\nO | 21.860 cce3e339  6.82 | 22.005 7179b786  4.78 | 27.297 f2261bff  0.67\n S   | 21.860 cce3e339  6.76 | 22.005 7179b786  4.65 | 27.297 f2261bff  0.61\n S O | 21.860 cce3e339  4.98 | 22.005 7179b786  3.62 | 27.297 f2261bff  0.55\n```\nUsing double fixes the difference between openmp and non-openmp, at no performance penalty.\nFurther adding -fno-reciprocal-math and the ICC equivalent -prec-div makes MSE consistent* across compilers.\nAt no performance penalty either, in fact ICC is quite a bit faster. As far as I can tell this isn't because additional precision magically makes the code faster, instead it happens to reduce the number of viter_do_iteration calls in this case. The palette_error sequence is a bit different.\nclang accepts the switch, but it has no effect. From what I have figured out, this is because -ffast-math only has a minimal effect on clang, and reciprocals optimisation in particular isn't supported.\n*GCC MSE at speed 1 is still slightly off.\n. What do you say about the switch? MSE consistency across compilers is not as important, but it also makes GCC output match both ICC and clang at speed 11.\n. https://github.com/pornel/pngquant/commit/9dfc899ec21dfcd8eec2516ec4094147ea0f6243 has no effect.\nhttps://github.com/pornel/pngquant/commit/7b60219b72d38807aa268d437f103b54f91c69bd has no effect on GCC and clang, but makes non-SSE ICC dramatically slower.\n```\n       01                      03                      11                ICC\n\n | 22.011 07f6e2b7 17.91 | 21.978 da012ae7 11.73 | 27.297 f2261bff  1.26\n\nO | 22.011 07f6e2b7  8.72 | 21.978 da012ae7  5.82 | 27.297 f2261bff  0.70\n S   | 22.011 07f6e2b7  6.55 | 21.978 da012ae7  4.39 | 27.297 f2261bff  0.54\n S O | 22.011 07f6e2b7  4.93 | 21.978 da012ae7  3.36 | 27.297 f2261bff  0.54\n```\nProbably a compiler bug. If I had to guess, the simpler code tricks it into some catastrophic optimisation.\nI checked the report, differences listed below don't seem relevant.\nmaster\n```\n\nHPO Vectorizer Report (nearest_search)\nlib/nearest.c(213:69-213:69):VEC:nearest_search:  loop was not vectorized: unsupported loop structure\nlib/nearest.c(226:13-226:13):VEC:nearest_search:  loop was not vectorized: existence of vector dependence\n\nHigh Level Optimizer Report (nearest_search)\n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 213 \n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 226 \nPredicate unswitching Report:\n(Condition and loop line numbers)\n\nCondition at line 230 hoisted from loop at line 226\n```\nnoie6\n``` \nHPO Vectorizer Report (nearest_search)\nlib/nearest.c(211:69-211:69):VEC:nearest_search:  loop was not vectorized: unsupported loop structure\nlib/nearest.c(224:21-224:21):VEC:nearest_search:  loop was not vectorized: unsupported reduction\n\nHigh Level Optimizer Report (nearest_search)\n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 211 \n```\n. It's explained in section 4.5 of the optimization manual by Intel. Seems complicated to implement.\nAnother suggestion that's printed at higher report values is this.\nlib/nearest.c(207:30-207:30):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:30-207:30):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(207:30-207:30):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:30-207:30):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(214:36-214:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(214:36-214:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(214:36-214:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(214:36-214:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(219:26-219:26):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(219:26-219:26):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(219:26-219:26):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(219:26-219:26):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(227:33-227:33):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(227:33-227:33):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(227:33-227:33):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(227:33-227:33):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\n. https://github.com/pornel/pngquant/commit/583798e7c95b8e40b11a44a10bb07dc35a7a48b9 syncs up GCC SSE at speed 11 to both ICC and clang without -fno-reciprocal-math.\n```\n       01                      03                      11                GCC\n\nS   | 21.860 54f3c940  7.06 | 22.005 e14a6438  4.85 | 27.297 f2261bff  0.62\n S O | 21.860 54f3c940  5.01 | 22.005 e14a6438  3.53 | 27.297 f2261bff  0.43\n```\n. 5dae947 syncs ICC and clang.\n```\n       01                      03                      11                ICC\n\nO | 21.860 cce3e339  6.72 | 22.005 7179b786  4.75 | 27.297 f2261bff  0.64\n S O | 21.860 cce3e339  4.65 | 22.005 7179b786  3.34 | 27.297 f2261bff  0.51\n```\nI have GCC synced up too, with SSE enabled anyway.\n```\n       01                      03                      11                GCC\n\nO | 21.857 2ad7bed7  7.22 | 22.042 d9ec4b29  5.01 | 27.344 284b1660  0.56\n S O | 21.860 cce3e339  5.01 | 22.005 7179b786  3.53 | 27.297 f2261bff  0.43\n```\nAs you may notice, non-SSE matches SSE from an earlier post now, before commit 583798e. It's a pretty hopeless case apparently to get 387 FP to match SSE FP with GCC, because of this bug. I'm certainly not interested.\nAnyway, what's the switch? Just -fsigned-zeros is sufficient. I'm not sure exactly why it matters. The only use case I know of is XOR with -0.f to flip the sign on floats. Apparently it effects reciprocal math too, because that switch is no longer required.\nThere is one minor annoyance with the switch. It also requires -fno-associative-math to suppress this warning. Other than that, it has no effect.\nwarning: -fassociative-math disabled; other options take precedence\n. PS. clang accepts both switches but it has no effect. ICC ignores both.\n. I have a better alternative.\n```\n       01                      03                      11                GCC\n\nO | 21.861 460bb747  7.32 | 22.005 ba1d1f2e  5.07 | 27.297 f2261bff  0.56\n S O | 21.860 2b77e7ce  5.05 | 22.005 bf66fb12  3.55 | 27.297 f2261bff  0.43\n   01                      03                      11                ICC\n\n\nO | 21.860 2b77e7ce  6.66 | 22.005 bf66fb12  4.78 | 27.297 f2261bff  0.65\n S O | 21.860 2b77e7ce  4.62 | 22.005 bf66fb12  3.31 | 27.297 f2261bff  0.51\n   01                      03                      11              CLANG\n\n\nO | 21.860 2b77e7ce  6.91 | 22.005 bf66fb12  5.02 | 27.297 f2261bff  0.67\n S O | 21.860 2b77e7ce  5.23 | 22.005 bf66fb12  3.70 | 27.297 f2261bff  0.56\n```\nThis replaces -ffast-math with -fexcess-precision=fast which is really the only switch set by -ffast-math with an impact on performance. As documented in GCC 4.5 release notes.\n\nOn x86 targets, code containing floating-point calculations may run significantly slower when compiled with GCC 4.5 in strict C99 conformance mode than they did with earlier GCC versions. This is due to stricter standard conformance of the compiler and can be avoided by using the option -fexcess-precision=fast; also see below.\n\nThe added benefit is that the difference between non-SSE GCC and SSE GCC is minimal, just 221 different pixels, from 700301 (really) currently. And speed 11 is synced across the board now.\nA minor annoyance is that clang doesn't like the switch so it would need to be made GCC specific. And GCC before 4.5 doesn't know it, not sure how that should be handled. ICC ignores as usual.\nIMO the case is very good! :) What do you say?\n. I have one additional comment, concerning commit 583798e.\nclang only treats unknown command line options as errors as of 3.4, so the GCC check can actually be removed, but this makes clang < 3.4 print a warning. Not sure if this is better.\n\nClang now errors on unknown -m flags (-munknown-to-clang), unknown -f flags (-funknown-to-clang) and unknown options (-what-is-this).\n. It's not the most beautiful piece of code, but it works reliably.\n\n``` Makefile\n-fexcess-precision introduced in GCC 4.5\nifeq ($(shell echo | $(CC) -fexcess-precision=fast -E -o /dev/null - 2>&1), )\nCFLAGS += -fexcess-precision=fast\nendif\n```\nAn alternative which ignores warnings. \n``` Makefile\n-fexcess-precision introduced in GCC 4.5\nifeq ($(shell echo | $(CC) -fexcess-precision=fast -E -o /dev/null - 2>/dev/null; echo $$?), 0)\nCFLAGS += -fexcess-precision=fast\nendif\n``\n. It'll take a while.\n. I have found another-ffast-math` flag which has a performance impact, but only on clang on Linux.\n-fno-math-errno\nOn Mac OS X, this is default.\nAnyway, configure is pretty much ready.\n. Yes, it does. And performance is not so good with SSE and icc. If I read the report correctly, that's because in ee7bef8644ad1bac3fce2c04afef13f1ec19166b it can inline less. I'm attaching report excerpts for nearest_search.\n724b2f41b4e42367d180e58fbde5476151fa58f1\n```\n\nHigh Level Optimizer Report (nearest_search)\nUnknown loop at line #213\nQLOOPS 2/2/0    ENODE LOOPS 2 unknown 1 multi_exit_do 0 do 1 linear_do 1 lite_throttled 0\nLINEAR HLO EXPRESSIONS:  20 / 118 \n\n\nHPO Vectorizer Report (nearest_search)\nlib/nearest.c(213:69-213:69):VEC:nearest_search:  loop was not vectorized: unsupported loop structure\nlib/nearest.c(226:13-226:13):VEC:nearest_search:  loop was not vectorized: existence of vector dependence\nlib/nearest.c(227:33-227:33):VEC:nearest_search:  potential FLOW dependence\n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 213 \n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 226 \n\nScalar Expansion performed in nearest_search at line 226\nlib/nearest.c(207:30-207:30):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:30-207:30):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(207:30-207:30):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:30-207:30):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(214:36-214:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(214:36-214:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(214:36-214:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(214:36-214:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(219:26-219:26):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(219:26-219:26):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(219:26-219:26):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(219:26-219:26):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(227:33-227:33):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(227:33-227:33):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(227:33-227:33):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(227:33-227:33):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\n```\nee7bef8644ad1bac3fce2c04afef13f1ec19166b\n```\n\nHigh Level Optimizer Report (nearest_search)\nUnknown loop at line #206\nQLOOPS 2/2/0    ENODE LOOPS 2 unknown 1 multi_exit_do 0 do 1 linear_do 1 lite_throttled 0\nLINEAR HLO EXPRESSIONS:  20 / 129 \n\n\nHPO Vectorizer Report (nearest_search)\nlib/nearest.c(206:69-206:69):VEC:nearest_search:  loop was not vectorized: unsupported loop structure\nlib/nearest.c(219:13-219:13):VEC:nearest_search:  loop was not vectorized: existence of vector dependence\nlib/nearest.c(220:33-220:33):VEC:nearest_search:  potential FLOW dependence\n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 206 \n\nPoor memory locality: Array of structurese detected\nAdvice: Replacing Array of Structures by Structure of Arrays might help loopnest at lines: 219 \n\nScalar Expansion performed in nearest_search at line 219\nlib/nearest.c(200:30-200:30):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(200:30-200:30):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(207:36-207:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:36-207:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(207:36-207:36):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(207:36-207:36):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(212:26-212:26):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(212:26-212:26):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\nlib/nearest.c(220:33-220:33):CG:nearest_search:  optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads\nlib/nearest.c(220:33-220:33):CG:nearest_search:  call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (16, 0)\n```\nThe results are on configure rebased to the commits.\n724b2f41b4e42367d180e58fbde5476151fa58f1\n```\n       01                      03                      11                GCC\n\n | 21.861 460bb747 10.83 | 22.005 ba1d1f2e  7.34 | 27.297 8a207f14  0.87\n\nO | 21.861 460bb747  7.21 | 22.005 ba1d1f2e  5.05 | 27.297 8a207f14  0.56\n S   | 21.860 2b77e7ce  7.05 | 22.005 bf66fb12  4.85 | 27.297 8a207f14  0.63\n S O | 21.860 2b77e7ce  4.93 | 22.005 bf66fb12  3.53 | 27.297 8a207f14  0.43\n   01                      03                      11              CLANG\n\n\n | 21.860 2b77e7ce  9.74 | 22.005 bf66fb12  6.60 | 27.297 8a207f14  0.81\n\nO | 21.860 2b77e7ce  6.69 | 22.005 bf66fb12  4.84 | 27.297 8a207f14  0.73\n S   | 21.860 2b77e7ce  6.77 | 22.005 bf66fb12  4.66 | 27.297 8a207f14  0.62\n S O | 21.860 2b77e7ce  5.02 | 22.005 bf66fb12  3.60 | 27.297 8a207f14  0.57\n   01                      03                      11                ICC\n\n\n | 21.860 2b77e7ce 10.11 | 22.005 bf66fb12  6.83 | 27.297 8a207f14  0.84\n\nO | 21.860 2b77e7ce  6.67 | 22.005 bf66fb12  4.69 | 27.297 8a207f14  0.64\n S   | 21.860 2b77e7ce  6.18 | 22.005 bf66fb12  4.25 | 27.297 8a207f14  0.57\n S O | 21.860 2b77e7ce  4.51 | 22.005 bf66fb12  3.17 | 27.297 8a207f14  0.60\n```\nee7bef8644ad1bac3fce2c04afef13f1ec19166b\n```\n       01                      03                      11                GCC\n\n | 21.861 460bb747 10.81 | 22.005 ba1d1f2e  7.33 | 27.297 8a207f14  0.87\n\nO | 21.861 460bb747  7.17 | 22.005 ba1d1f2e  5.04 | 27.297 8a207f14  0.56\n S   | 21.860 2b77e7ce  7.04 | 22.005 bf66fb12  4.84 | 27.297 8a207f14  0.63\n S O | 21.860 2b77e7ce  4.94 | 22.005 bf66fb12  3.52 | 27.297 8a207f14  0.43\n   01                      03                      11              CLANG\n\n\n | 21.860 2b77e7ce  9.72 | 22.005 bf66fb12  6.59 | 27.297 8a207f14  0.81\n\nO | 21.860 2b77e7ce  6.75 | 22.005 bf66fb12  4.80 | 27.297 8a207f14  0.66\n S   | 21.860 2b77e7ce  6.84 | 22.005 bf66fb12  4.70 | 27.297 8a207f14  0.62\n S O | 21.860 2b77e7ce  5.10 | 22.005 bf66fb12  3.64 | 27.297 8a207f14  0.58\n   01                      03                      11                ICC\n\n\n | 21.860 2b77e7ce 10.17 | 22.005 bf66fb12  6.86 | 27.297 8a207f14  0.84\n\nO | 21.860 2b77e7ce  6.69 | 22.005 bf66fb12  4.62 | 27.297 8a207f14  0.64\n S   | 21.860 2b77e7ce 14.36 | 22.005 bf66fb12  9.58 | 27.297 8a207f14  1.10\n S O | 21.860 2b77e7ce  7.04 | 22.005 bf66fb12  5.01 | 27.297 8a207f14  0.64\n```\n. Makes no difference. I think this is a compiler bug. I wanted to measure it and enabled debug. Suddenly both have the same (slow) performance, and the debug build of ee7bef8 is a bit faster than the non-debug build.\nPS. This makes me want to build an automated performance regression server. Maybe some day.\n. I forgot that --enable-debug removes -DNDEBUG when I just wanted -g.\n. I ran it through Intel VTune Amplifier. It's free on Linux.\nCPU Time is Poor because it just uses a single core.\n\n\n. \n. On some further tests, the culprit is only 17071a977fc96d8ed760e2c56e2525a619675f01. I had tried ee7bef8644ad1bac3fce2c04afef13f1ec19166b and rewind to 724b2f41b4e42367d180e58fbde5476151fa58f1 before.\n. Makes no difference. I think it should be reverted.\nBy the way, Intel C++ Compiler 15 has a new LLVM based icl compiler for OSX. The beta is free.\n. This regression (or bug) is much improved in ICC 14 SP1 Update 3. It's still about 10% slower. \n. Some interesting slides on the improved report capabilities. Haven't tried it.\n. I cannot reproduce this. Maybe this can be a clue.\nbash\n$ gcc -###\n. What's the purpose of CFLAGSADD? Is this just to run make CFLAGSADD=-extra? And is there any particular reason why VERSION of the lib stays at 2.0.0? Should it be kept separate?\n. Makefile\nLDLAGS += -mmacosx-version-min=10.6\nThat's a typo I guess, so it probably doesn't have any effect.\n. This could turn out a bit complex. I have a stripped down preliminary version, but I couldn't really figure out how to integrate config.mk into Makefile rules. So right now, it only works like this.\nbash\n./configure\nmake\nmake clean\nhttps://github.com/pornel/pngquant/tree/configure\n. --libpng-dir= may need some explanation. The idea here is to download libpng, build it, run pngquant configure, link in statically, and then delete downloaded libpng. So without installing it first. Of course installation works too, then it gets picked up by pkg-config.\n. It's complete now, I think. I can't test Cocoa and making DLLs, but it should work. A few remarks.\nI've moved the SSE logic when not set to configure.\nI've removed --libpng-dir and made it automatic. First, it checks for any of the libraries in the current build directory. If it finds any, it links in static. If not, it checks the system and links in shared. If pkg-config isn't available or the library isn't registered, it tries a few fallback directories.\nTo only build the library, there are two ways.\nmake lib\n./configure --libquant-only\nmake\nThe latter skips libpng and zlib checks.\n. When you think the code is ready, let me know. I'll add it in 2-3 new separate commits. I think it's better than to merge in plenty non-descriptive commits.\n. Made a few more minor changes.\n. Makes no difference. It is caused by this code.\nC\n    if (0 == memcmp(\"iCCP\", in_chunk->name, 5) ||\n        0 == memcmp(\"cHRM\", in_chunk->name, 5) ||\n        0 == memcmp(\"gAMA\", in_chunk->name, 5)) {\n        return 0; // not handled\n    }\nI found it discussed in the gold maling list. It has some sample code further in the thread.\n```\n$ readelf -S rwpng.o\nThere are 11 section headers, starting at offset 0x1f80:\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .symtab           SYMTAB          00000000 000034 000530 10      9  21  4\n  [ 2] .data             PROGBITS        00000000 000564 000000 00  WA  0   0  4\n  [ 3] .bss              NOBITS          00000000 000564 000000 00  WA  0   0  4\n  [ 4] .text             PROGBITS        00000000 000564 000e60 00  AX  0   0 16\n  [ 5] .rodata.str1.4    PROGBITS        00000000 0013c4 0000d0 01 AMS  0   0 16\n  [ 6] .rodata           PROGBITS        00000000 001494 000060 00   A  0   0 32\n  [ 7] .note.GNU-stack   NOTE            00000000 0014f4 000000 00      0   0  1\n  [ 8] .comment          PROGBITS        00000000 0014f4 000017 00      0   0  1\n  [ 9] .strtab           STRTAB          00000000 00150b 000609 00      0   0  1\n  [10] .rel.text         REL             00000000 001b14 000468 08      1   4  4\n```\nThe last column for .rodata.str1.4 indicates that it is 16-byte aligned, I think. \n```\n$ objdump -s -j.rodata.str1.4 rwpng.o \nrwpng.o:     file format elf32-i386\nContents of section .rodata.str1.4:\n 0000 706e6771 75616e74 20726561 64706e67  pngquant readpng\n 0010 3a202075 6e61626c 6520746f 20616c6c  :  unable to all\n 0020 6f636174 6520696d 61676520 64617461  ocate image data\n 0030 0a000000 00000000 00000000 00000000  ................\n 0040 69434350 00000000 00000000 00000000  iCCP............\n 0050 6348524d 00000000 00000000 00000000  cHRM............\n 0060 67414d41 00000000 312e362e 39000000  gAMA....1.6.9...\n 0070 20202043 6f6d7069 6c656420 77697468     Compiled with\n 0080 206c6962 706e6720 25733b20 7573696e   libpng %s; usin\n 0090 67206c69 62706e67 2025732e 0a000000  g libpng %s.....\n 00a0 52656164 20657272 6f720000 20206572  Read error..  er\n 00b0 726f723a 2025730a 00000000 20202573  ror: %s.....  %s\n 00c0 0a000000 00000000 00000000 00000000  ................\n```\nAnyway, this reveals the strings.\nWith the code commented out, it's like so. Apparently 4-byte aligned.\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .symtab           SYMTAB          00000000 000034 000520 10      9  21  4\n  [ 2] .data             PROGBITS        00000000 000554 000000 00  WA  0   0  4\n  [ 3] .bss              NOBITS          00000000 000554 000000 00  WA  0   0  4\n  [ 4] .text             PROGBITS        00000000 000554 000e20 00  AX  0   0 16\n  [ 5] .rodata.str1.4    PROGBITS        00000000 001374 000090 01 AMS  0   0  4\n  [ 6] .rodata           PROGBITS        00000000 001404 000060 00   A  0   0 32\n  [ 7] .note.GNU-stack   NOTE            00000000 001464 000000 00      0   0  1\n  [ 8] .comment          PROGBITS        00000000 001464 000017 00      0   0  1\n  [ 9] .strtab           STRTAB          00000000 00147b 0005c9 00      0   0  1\n  [10] .rel.text         REL             00000000 001a44 000438 08      1   4  4\n```\n$ objdump -s -j.rodata.str1.4 rwpng.o \nrwpng.o:     file format elf32-i386\nContents of section .rodata.str1.4:\n 0000 706e6771 75616e74 20726561 64706e67  pngquant readpng\n 0010 3a202075 6e61626c 6520746f 20616c6c  :  unable to all\n 0020 6f636174 6520696d 61676520 64617461  ocate image data\n 0030 0a000000 312e362e 39000000 20202043  ....1.6.9...   C\n 0040 6f6d7069 6c656420 77697468 206c6962  ompiled with lib\n 0050 706e6720 25733b20 7573696e 67206c69  png %s; using li\n 0060 62706e67 2025732e 0a000000 52656164  bpng %s.....Read\n 0070 20657272 6f720000 20206572 726f723a   error..  error:\n 0080 2025730a 00000000 20202573 0a000000   %s.....  %s....\n```\nWhat this means, I don't really know.\n. Yes, it's just the warning that's the problem. Or more specifically that gold warns on misalignment, whereas the standard linker ignores it. I have a fix with no negative effects. I'll add it to configure.\n-falign-stack=maintain-16-byte\n```\n$ readelf -S rwpng.o\nThere are 11 section headers, starting at offset 0x1f68:\nSection Headers:\n  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .symtab           SYMTAB          00000000 000034 000530 10      9  21  4\n  [ 2] .data             PROGBITS        00000000 000564 000000 00  WA  0   0  4\n  [ 3] .bss              NOBITS          00000000 000564 000000 00  WA  0   0  4\n  [ 4] .text             PROGBITS        00000000 000564 000e70 00  AX  0   0 16\n  [ 5] .rodata.str1.4    PROGBITS        00000000 0013d4 0000a8 01 AMS  0   0  4\n  [ 6] .rodata           PROGBITS        00000000 00147c 000060 00   A  0   0 32\n  [ 7] .note.GNU-stack   NOTE            00000000 0014dc 000000 00      0   0  1\n  [ 8] .comment          PROGBITS        00000000 0014dc 000017 00      0   0  1\n  [ 9] .strtab           STRTAB          00000000 0014f3 000609 00      0   0  1\n  [10] .rel.text         REL             00000000 001afc 000468 08      1   4  4\n```\n```\n$ objdump -s -j.rodata.str1.4 rwpng.o \nrwpng.o:     file format elf32-i386\nContents of section .rodata.str1.4:\n 0000 706e6771 75616e74 20726561 64706e67  pngquant readpng\n 0010 3a202075 6e61626c 6520746f 20616c6c  :  unable to all\n 0020 6f636174 6520696d 61676520 64617461  ocate image data\n 0030 0a000000 312e362e 39000000 20202043  ....1.6.9...   C\n 0040 6f6d7069 6c656420 77697468 206c6962  ompiled with lib\n 0050 706e6720 25733b20 7573696e 67206c69  png %s; using li\n 0060 62706e67 2025732e 0a000000 52656164  bpng %s.....Read\n 0070 20657272 6f720000 69434350 00000000   error..iCCP....\n 0080 6348524d 00000000 67414d41 00000000  cHRM....gAMA....\n 0090 20206572 726f723a 2025730a 00000000    error: %s.....\n 00a0 20202573 0a000000                      %s....      \n```\n. It's an interesting bug. Some additional observations, on the Google image.\n```\n$ pngquant 256 --speed 1 -fv f.png\n  mapped image to new colors...MSE=0.067 (Q=99)\n$ pngquant 212 --speed 1 -fv f.png\n  mapped image to new colors...MSE=0.098 (Q=99)\n$ pngquant 210 --speed 1 -fv f.png\n  mapped image to new colors...MSE=0.088 (Q=99)\n```\n. Slightly.\n$ pngquant 1x1.png 1x2.png 2x1.png 2x2.png -vf\n1x1.png:\n2x2.png:\n2x1.png:\n1x2.png:\n  read 170KB file\n  read 521KB file\n  read 400KB file\n  mapped image to new colors...MSE=0.095 (Q=99)\n  writing 256-color image as 1x1-fs8.png\n  read 225KB file\n  made histogram...1628 colors found\n  selecting colors...3%\n  selecting colors...24%\n  selecting colors...27%\n  selecting colors...31%\n  selecting colors...51%\n  selecting colors...72%\n  selecting colors...93%\n  selecting colors...96%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...0 entries transparent\n  mapped image to new colors...MSE=0.084 (Q=99)\n  writing 256-color image as 2x1-fs8.png\n  made histogram...1634 colors found\n  selecting colors...3%\n  selecting colors...24%\n  selecting colors...44%\n  selecting colors...65%\n  selecting colors...86%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...0 entries transparent\n  mapped image to new colors...MSE=0.071 (Q=99)\n  writing 256-color image as 1x2-fs8.png\n  mapped image to new colors...MSE=0.072 (Q=99)\n  writing 256-color image as 2x2-fs8.png\n  made histogram...2140 colors found\n  selecting colors...3%\n  selecting colors...6%\n  selecting colors...10%\n  selecting colors...31%\n  selecting colors...34%\n  selecting colors...55%\n  selecting colors...75%\n  selecting colors...96%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...0 entries transparent\n  made histogram...2200 colors found\n  selecting colors...3%\n  selecting colors...6%\n  selecting colors...27%\n  selecting colors...48%\n  selecting colors...51%\n  selecting colors...72%\n  selecting colors...93%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...0 entries transparent\n. Works!\n. The issue should perhaps be re-opened for buffered error output. In particular for one occurrence, when you supply a file which doesn't exist. The error is printed before the file.\n...\n  error: cannot open file.png for reading\nfile.png:\n. I agree this should be left to tools that specialise in this. Either way, libpng supports adjustment.\n```\n/ set the zlib compression level /\npng_set_compression_level(png_ptr,\n    Z_BEST_COMPRESSION);\n/ set other zlib parameters /\npng_set_compression_mem_level(png_ptr, 8);\npng_set_compression_strategy(png_ptr,\n    Z_DEFAULT_STRATEGY);\npng_set_compression_window_bits(png_ptr, 15);\npng_set_compression_method(png_ptr, 8);\npng_set_compression_buffer_size(png_ptr, 8192)\n```\nAdditional reading on mentioned parameters.\n. > If the profile is not broken, libpng should fix their detection.\nIt won't happen. The author doesn't care.\n. To clarify the impact of this change: this is the only profile libpng checks for and reports on.\n. The numbers are with current filter NONE. The improved compression is because for some reason the colors arranged in different ways suit deflate better.\n. Hmmm, you're right. The images are different. It was too good to be true. I checked that images turn out identical early on, but introduced a small bug later. With the bug fixed images are identical, but a few bytes larger.\nI'll close the report. The palette can be improved, but only for advanced filter heuristics, which should better be left to dedicated applications IMO.\n. ",
    "benkasminbullock": "OK but what I did was to allow the dithering level to be set before the quantization and then imposed after. Is that a mistake? Looking at the source code I'm not too sure. Or should I allow a general dithering level and then also allow it to be deleted? Sorry but I don't know the exact internals of your code.\n. Just to clarify further, it's difficult to write a dithering level setter for the single Perl object. The object contains a liq_result; if I only allow the dithering level to be set on a result, I either have to check there is a result and then work on the dithering level for it, or I have to split out the liq_result from the Perl object and make another Perl object, so the Perl user has two things to worry about instead of one. I don't want to do either of those things if it can be avoided, so I would rather just preserve the dithering level in my Perl object. That's why I just allow the dithering level to be set without a result and then impose it onto all results. But \"set_speed\" also alters the dithering; perhaps I need to have a \"no_dithering_level\" option as well.\n. > In the library the default level is 0, which in retrospect isn't that useful. You could have a default of 0.5 or 1 in your library.\nIt's meant to just be an interface to libimagequant. I don't want to make decisions about defaults. It's better to just stick to what the original libimagequant does.\n. What I would suggest is not changing this particular function but adding some other function like\nliq_error liq_quantize_image_2 (liq_attr * attr, liq_image * image,\n                                                    liq_result ** result_ptr)\nAlternatively have\nliq_image * liq_quantize_image_2 (liq_attr * attr, liq_image * image,\n                                                        liq_error ** error_ptr)\nThe first one fits better the convention of libimagequant, so I prefer it.\nNobody likes adding functions like this, because it sort of looks silly, but it means you can leave the old function doing what it did for whoever was using it, and add a new function which has a place for an error.\nI already added logging to Image::Quantize where the user can call a perl function to print the log message as the thing works. If you use logging to store the errors, I have to remove that, then I always switch on the logging, then I have to store the log message somewhere and then inspect it after the call. I would rather have a nice error message from the function if possible.\n. I provisionally have added something like the above to my branch of the code:\nhttps://github.com/benkasminbullock/pngquant/commit/0b57b2a54e8cef599dcf62d921b1ae82c803e085\nI would really like to get the errors from pngquant_quantize as well if it was possible, but I haven't done that. I'm going to use this provisional code to send to CPAN and see if there is a simple bug in my code. If that doesn't work I will then maybe work on pngquant_quantize to get the error out of it.\nOf course this is not very nice so I didn't send a pull request, you probably have a much better idea for how to do this.\n. I worked out what was wrong with the code, the error comes from my sending bad pointers into png_get_IHDR. I sent in unsigned width but it needs to be png_uint_32 width. Now version 0.00_06 is compiling OK on the machines it was failing on before.\nHowever it was only because I had the new interface that I was able to track this down. I was putting a zero or negative width or height into liq_create_image_rgba_rows. It was only because I set up the liq_create_image_rgba_rows_2 interface with the error return value  if the width or height is negative that I was able to get this. I think it's very preferable for library users to have an explicit error rather than just get a NULL. Also I hadn't checked the NULL and was using the NULL-valued image, so the error only appeared from liq_quantize.\n. No, it will be fine. Thanks for mentioning.\n. I didn't put them in this pull request, github must have done that automatically. \nI'll have to work out how to undo them.\n. It may be ok now. Please check it.\nI have put the new stuff into a branch called \"new-interface\". I put this up on CPAN and found out that there are some invalid pointers in my code, so I'm going to add more stuff onto that branch to find out what exactly is invalid.\n. I found it on one CPU but not another. The agreement was very close, in fact the printf statement produced identical numbers.\n. ",
    "fortinux": "Thanks. Resolved :-)\n. ",
    "wshxbqq": "Sees Like this problem will only appear on the 32 bit version of Linux\n. ",
    "alphaonex86": "I know the optimisation but no the program, and the optimisation should always be linked to the program. But I have see lot of variables allocation into the mentionned function. And when you call 800000x the fonction, that's do 800000x malloc/delete...\nBut you should try profile your self to see the where is the slow down, I can provide you my profile too to visualise the performance. I use valgrind --tool=callgrind\n. Unfortunatly I don't know this algo. My main problem it's encoding or large image or multiple png image take lot of time here on low end hardware (more than 5mins).\nAnd I don't know sse2 or avx for x86 and neon for arm to do asm routine.\nhttp://files.first-world.info/temp/callgrind.out.8253\nMostly I see this:\nhttps://github.com/pornel/pngquant/blob/0245341406506b2835b66c50343df84033ff8082/lib/nearest.c#L214\nhttps://github.com/pornel/pngquant/blob/0245341406506b2835b66c50343df84033ff8082/lib/nearest.c#L218\nhttps://github.com/pornel/pngquant/blob/0245341406506b2835b66c50343df84033ff8082/lib/nearest.c#L219\nhttps://github.com/pornel/pngquant/blob/0245341406506b2835b66c50343df84033ff8082/lib/nearest.c#L227\nYou know better the code than me, but here that's product in loop memory allocation + initialization. If it's planned to be called multiple time, it's better to put the memory allocation out of the loop. I don't see __builtin_expect() reduced into\n    #define Q_LIKELY(expr)    __builtin_expect(!!(expr), true)\n    #define Q_UNLIKELY(expr)  __builtin_expect(!!(expr), false)\nInto Qt te be more clean and enable only on able compiler. Will have more performance and more clear for the reader.\nAnoter note, on ARM without fpu (softfpu), the float usage will be very slow (10x more slow).\n. ",
    "middagj": "To answer your questions:\n\nDo variable-length arrays work in MSVC when you rename files to .cpp?\n\nNo, you get even more errors. C++ does not support variable length arrays.\n\nShould I add #define cpuid(f,a,b,c,d) __cpuid(f,a,b,c,d)? Is MSVC function compatible with the asm fragment in pngquant?\n\nNo, the __cpuid intrinsic expects an integer array of size 4. I think it is better to use the prepocessor conditions or to rewrite the cpuid macro to also use an integer array instead.\n\nDoes the braces around if/for/while rule apply in all cases? Does this compile?\n\nThe mediancut.c in master branch compiles with MSVC (after I fix some other braces). If I change the \"continue\" in a \"i++\", it won't compile. So probably it does not apply in all cases.\n\nWhat's the performance impact of volatile and unaligned reads? Should I just disable SSE when using MSVC?\n\nI ran some test myself with and without SSE. These are my findings on a large file (every test ran 3 times):\n| test | average | minimum | maximum |\n| --- | --: | --: | --: |\n| 32bit with SSE | 27.465 | 27.397 | 27.548 |\n| 32bit without SSE | 32.752 | 32.600 | 32.842 |\n| 64bit with SSE | 26.513 | 26.377 | 26.611 |\n| 64bit without SSE | 31.163 | 31.045 | 31.277 |\nSo I guess the SSE code is still an improvement over the stdc code.\nPerhaps I need to explain point 1 a bit more. In MSVC the forcing of inlining the function (__forceinline) is an inline statement itself. Writing ALWAYS_INLINE inline writes in MSVC __forceinline __inline which gives compiler warnings. That is why I substituted all ALWAYS_INLINE into FORCE_INLINE.\n\nOther changes affect readability of the code or performance in other compilers, so I've kept them in the msvc branch: https://github.com/pornel/pngquant/tree/msvc\n\nExcept from the variable length arrays, I don't see how the changes affect performance or readability on other compilers. Could you explain that a little bit more?\nTo my opinion the small loss in readability due to malloc/free instead of variable length arrays is worth the gains in compiling with MSVC. The performance difference I could not found on OS X. Using MSVC on Windows improves performance by 25% compared to MinGW.\n. ",
    "AMoo-Miki": "This is what I have\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)\n. ",
    "sjtuDNA": "Use -std=gnu99 works fine for me.\nAnonymous union within struct is a GNU extension.\n@pornel \n. ",
    "loudaslife": "Ah, I see. It's not my code that reads it, so I'll pass that info on to the person who made the engine. Thanks.\n. ",
    "frkay": "I tried with the latest OS X binary (version 2.2.0), on the first image (the colored bubbles):\n```\n./pngquant-openmp --speed 1 fa88317a-d273-11e3-8371-48c11d194a81.png\n./pngquant-openmp --nofs --speed 1 fa88317a-d273-11e3-8371-48c11d194a81.png\n./pngrewrite fa88317a-d273-11e3-8371-48c11d194a81-or8.png fa88317a-or8rw.png\noriginal palette size:   256,  8 bpp\nImage size is 256x256  memory required=0.313MB\nnew palette size:        253,  8 bpp\n./pngrewrite fa88317a-d273-11e3-8371-48c11d194a81-fs8.png fa88317a-fs8rw.png\noriginal palette size:   256,  8 bpp\nImage size is 256x256  memory required=0.313MB\nnew palette size:        253,  8 bpp\n```\nBoth palettes sorted and shown side by side, the colors removed by pngrewrite were not in duplicate, I'll retrieve their original rank and look if they were really missing in the image body.\n0x00,0x00,0x00,0x00    0x00,0x00,0x00,0x00\n0x20,0xb4,0xe9,0xb3    0x20,0xb4,0xe9,0xb3\n0x20,0xb5,0xe8,0xb0    0x20,0xb5,0xe8,0xb0\n0x20,0xb5,0xe9,0xbc    0x20,0xb5,0xe9,0xbc\n0x21,0xb6,0xe9,0x5e    0x21,0xb6,0xe9,0x5e\n0x22,0xb6,0xe9,0xb3    0x22,0xb6,0xe9,0xb3\n0x22,0xb7,0xea,0x72    0x22,0xb7,0xea,0x72\n0x24,0xb6,0xe9,0x99    0x24,0xb6,0xe9,0x99\n0x26,0xb8,0xe9,0xb3    0x26,0xb8,0xe9,0xb3\n0x2a,0xba,0xea,0xb3    0x2a,0xba,0xea,0xb3\n0x2c,0xbd,0xe9,0xb3    0x2c,0xbd,0xe9,0xb3\n0x2f,0xbc,0xe4,0xbd    0x2f,0xbc,0xe4,0xbd\n0x2f,0xbc,0xea,0x86    0x2f,0xbc,0xea,0x86\n0x2f,0xbd,0xe9,0xb3    0x2f,0xbd,0xe9,0xb3\n0x30,0xbd,0xea,0xb3    0x30,0xbd,0xea,0xb3\n0x31,0xbc,0xe6,0x1e    0x31,0xbc,0xe6,0x1e\n0x33,0xbf,0xea,0xb3    0x33,0xbf,0xea,0xb3\n0x35,0xbc,0xe4,0x42    0x35,0xbc,0xe4,0x42\n0x37,0x33,0x2c,0x01    0x37,0x33,0x2c,0x01\n0x37,0xc1,0xeb,0xb3    0x37,0xc1,0xeb,0xb3\n0x38,0xbf,0xe5,0x30    0x38,0xbf,0xe5,0x30\n0x3a,0xc2,0xea,0xb3    0x3a,0xc2,0xea,0xb3\n0x3b,0xc3,0xea,0xbc    0x3b,0xc3,0xea,0xbc\n0x3b,0xc3,0xeb,0xb3    0x3b,0xc3,0xeb,0xb3\n0x3e,0xc4,0xea,0xb3    0x3e,0xc4,0xea,0xb3\n0x3e,0xc5,0xeb,0xb3    0x3e,0xc5,0xeb,0xb3\n0x41,0xc5,0xe9,0x50    0x41,0xc5,0xe9,0x50\n0x42,0xc7,0xea,0xb2    0x42,0xc7,0xea,0xb2\n0x42,0xc8,0xeb,0xb3    0x42,0xc8,0xeb,0xb3\n0x42,0xc8,0xec,0x98    0x42,0xc8,0xec,0x98\n0x45,0xc8,0xeb,0xb3    0x45,0xc8,0xeb,0xb3\n0x45,0xc8,0xed,0xb3    0x45,0xc8,0xed,0xb3\n0x46,0xbe,0xce,0xd0    0x46,0xbe,0xce,0xd0\n0x47,0xc9,0xe9,0xbc    0x47,0xc9,0xe9,0xbc\n0x47,0xca,0xeb,0x77    0x47,0xca,0xeb,0x77\n0x48,0xca,0xec,0xb3    0x48,0xca,0xec,0xb3\n0x4b,0xcb,0xec,0xb3    0x4b,0xcb,0xec,0xb3\n0x4b,0xcc,0xeb,0xaf    0x4b,0xcc,0xeb,0xaf\n0x4b,0xce,0xed,0xb3    0x4b,0xce,0xed,0xb3\n0x4f,0xce,0xec,0xb3    0x4f,0xce,0xec,0xb3\n0x52,0xcd,0xec,0x68    0x52,0xcd,0xec,0x68\n0x52,0xcf,0xed,0xb3    0x52,0xcf,0xed,0xb3\n0x52,0xd2,0xed,0xb3    0x52,0xd2,0xed,0xb3\n0x54,0xd4,0xeb,0xaf    0x54,0xd4,0xeb,0xaf\n0x55,0xd1,0xed,0xb3    0x55,0xd1,0xed,0xb3\n0x58,0xd3,0xed,0xbc    0x58,0xd3,0xed,0xbc\n0x58,0xd6,0xef,0x87    0x58,0xd6,0xef,0x87\n0x5a,0x67,0xcf,0x0f    0x5a,0x67,0xcf,0x0f\n0x5a,0xc3,0xc5,0xe1    0x5a,0xc3,0xc5,0xe1\n0x5a,0xd3,0xed,0xb3    0x5a,0xd3,0xed,0xb3\n0x5c,0xc0,0xb4,0xff    0x5c,0xc0,0xb4,0xff\n0x5c,0xc5,0xdf,0xc3    0x5c,0xc5,0xdf,0xc3\n0x5e,0xbf,0xb9,0xf1    0x5e,0xbf,0xb9,0xf1\n0x62,0xb7,0xd5,0xe1                       \n0x62,0xbe,0xad,0xfe    0x62,0xbe,0xad,0xfe\n0x63,0xb3,0xeb,0xd0    0x63,0xb3,0xeb,0xd0\n0x63,0xc5,0xba,0xff    0x63,0xc5,0xba,0xff\n0x64,0xc1,0xaf,0xff    0x64,0xc1,0xaf,0xff\n0x66,0xc2,0xb1,0xff    0x66,0xc2,0xb1,0xff\n0x66,0xcd,0xcf,0xde    0x66,0xcd,0xcf,0xde\n0x69,0xc4,0xb3,0xff    0x69,0xc4,0xb3,0xff\n0x6b,0xa3,0xea,0xe5    0x6b,0xa3,0xea,0xe5\n0x6b,0xc6,0xb4,0xff    0x6b,0xc6,0xb4,0xff\n0x6d,0xc3,0xa5,0xff    0x6d,0xc3,0xa5,0xff\n0x6d,0xc7,0xb5,0xff    0x6d,0xc7,0xb5,0xff\n0x6e,0xc8,0xb7,0xff    0x6e,0xc8,0xb7,0xff\n0x6e,0xcc,0xc2,0xfc    0x6e,0xcc,0xc2,0xfc\n0x6f,0x98,0xe8,0xf4    0x6f,0x98,0xe8,0xf4\n0x6f,0xa0,0xe9,0xf5    0x6f,0xa0,0xe9,0xf5\n0x70,0xc9,0xb8,0xff    0x70,0xc9,0xb8,0xff\n0x71,0x9b,0xe9,0xf4    0x71,0x9b,0xe9,0xf4\n0x71,0xc7,0xb2,0xff    0x71,0xc7,0xb2,0xff\n0x72,0x9b,0xe6,0xf4    0x72,0x9b,0xe6,0xf4\n0x72,0xa7,0xe7,0xf6    0x72,0xa7,0xe7,0xf6\n0x72,0xca,0xb8,0xff    0x72,0xca,0xb8,0xff\n0x72,0xca,0xb9,0xff    0x72,0xca,0xb9,0xff\n0x74,0x9b,0xe8,0xf4    0x74,0x9b,0xe8,0xf4\n0x74,0x9c,0xe7,0xf4    0x74,0x9c,0xe7,0xf4\n0x74,0xcb,0xba,0xff    0x74,0xcb,0xba,0xff\n0x74,0xcd,0xbb,0xff    0x74,0xcd,0xbb,0xff\n0x75,0x9d,0xe7,0xf4    0x75,0x9d,0xe7,0xf4\n0x75,0x9d,0xe9,0xf4    0x75,0x9d,0xe9,0xf4\n0x75,0xd7,0xc1,0xff    0x75,0xd7,0xc1,0xff\n0x76,0xce,0xbc,0xff    0x76,0xce,0xbc,0xff\n0x76,0xd0,0xbe,0xff    0x76,0xd0,0xbe,0xff\n0x79,0xd0,0xbe,0xff    0x79,0xd0,0xbe,0xff\n0x79,0xd2,0xbe,0xff    0x79,0xd2,0xbe,0xff\n0x7b,0x8d,0xe4,0xf0    0x7b,0x8d,0xe4,0xf0\n0x7b,0xd2,0xc0,0xff    0x7b,0xd2,0xc0,0xff\n0x7c,0xcc,0xbd,0xfe    0x7c,0xcc,0xbd,0xfe\n0x7d,0xd4,0xc1,0xff    0x7d,0xd4,0xc1,0xff\n0x7e,0x98,0xdc,0xf5    0x7e,0x98,0xdc,0xf5\n0x7f,0xd5,0xc4,0xff    0x7f,0xd5,0xc4,0xff\n0x81,0x00,0xc8,0xdb    0x81,0x00,0xc8,0xdb\n0x82,0x79,0xe2,0xed    0x82,0x79,0xe2,0xed\n0x83,0x00,0xc9,0x75    0x83,0x00,0xc9,0x75\n0x84,0xcf,0xaa,0xff    0x84,0xcf,0xaa,0xff\n0x85,0x00,0xc9,0x99    0x85,0x00,0xc9,0x99\n0x85,0x00,0xc9,0xa7    0x85,0x00,0xc9,0xa7\n0x85,0x00,0xc9,0xbd    0x85,0x00,0xc9,0xbd\n0x85,0xc7,0x99,0xff    0x85,0xc7,0x99,0xff\n0x87,0x00,0xca,0xd9    0x87,0x00,0xca,0xd9\n0x87,0xc2,0xba,0xff    0x87,0xc2,0xba,0xff\n0x88,0x61,0xe1,0xe9    0x88,0x61,0xe1,0xe9\n0x89,0xb5,0xba,0xeb                       \n0x8b,0x00,0xc4,0x29    0x8b,0x00,0xc4,0x29\n0x8c,0x00,0xcd,0xd9    0x8c,0x00,0xcd,0xd9\n0x90,0x00,0xcd,0x47    0x90,0x00,0xcd,0x47\n0x90,0x00,0xcd,0xd3    0x90,0x00,0xcd,0xd3\n0x91,0x00,0xcd,0xd9    0x91,0x00,0xcd,0xd9\n0x91,0x49,0xde,0xe5    0x91,0x49,0xde,0xe5\n0x92,0xb9,0xb7,0xff    0x92,0xb9,0xb7,0xff\n0x94,0x00,0xcf,0xd9    0x94,0x00,0xcf,0xd9\n0x97,0xa0,0xbc,0xcd    0x97,0xa0,0xbc,0xcd\n0x98,0x00,0xd0,0xda    0x98,0x00,0xd0,0xda\n0x98,0x92,0xc2,0xf7    0x98,0x92,0xc2,0xf7\n0x99,0x00,0xd1,0x87    0x99,0x00,0xd1,0x87\n0x9b,0x00,0xd1,0x61    0x9b,0x00,0xd1,0x61\n0x9c,0x00,0xd0,0xd9    0x9c,0x00,0xd0,0xd9\n0x9d,0x29,0xda,0xe0    0x9d,0x29,0xda,0xe0\n0x9f,0x00,0xd3,0xda    0x9f,0x00,0xd3,0xda\n0xa0,0x00,0xd3,0xb4    0xa0,0x00,0xd3,0xb4\n0xa2,0xcb,0x79,0xff    0xa2,0xcb,0x79,0xff\n0xa3,0x00,0xd4,0xd9    0xa3,0x00,0xd4,0xd9\n0xa4,0xa6,0xb0,0xfd    0xa4,0xa6,0xb0,0xfd\n0xa4,0xd3,0x8d,0xff    0xa4,0xd3,0x8d,0xff\n0xa6,0x00,0xd5,0xd9    0xa6,0x00,0xd5,0xd9\n0xaa,0x00,0xd7,0xe5    0xaa,0x00,0xd7,0xe5\n0xaa,0x04,0xd1,0xd5    0xaa,0x04,0xd1,0xd5\n0xab,0x00,0xd6,0xd9    0xab,0x00,0xd6,0xd9\n0xb0,0x8e,0x76,0x07    0xb0,0x8e,0x76,0x07\n0xb2,0x93,0x0f,0xa9    0xb2,0x93,0x0f,0xa9\n0xb6,0x90,0xa8,0xfe    0xb6,0x90,0xa8,0xfe\n0xb8,0x90,0xa6,0xdc    0xb8,0x90,0xa6,0xdc\n0xbe,0x26,0xb4,0xe3    0xbe,0x26,0xb4,0xe3\n0xc4,0x85,0xa0,0xf4    0xc4,0x85,0xa0,0xf4\n0xc4,0xd5,0x6e,0xff    0xc4,0xd5,0x6e,0xff\n0xc8,0x3a,0xa0,0xe8    0xc8,0x3a,0xa0,0xe8\n0xce,0xcc,0x51,0xff    0xce,0xcc,0x51,0xff\n0xd0,0x85,0x91,0xfd    0xd0,0x85,0x91,0xfd\n0xd7,0x74,0x91,0xec    0xd7,0x74,0x91,0xec\n0xda,0x61,0x80,0xf1    0xda,0x61,0x80,0xf1\n0xdb,0x6f,0x9b,0xff    0xdb,0x6f,0x9b,0xff\n0xe2,0xaf,0x6e,0xa2                       \n0xe2,0xda,0x56,0xff    0xe2,0xda,0x56,0xff\n0xe6,0xd0,0x38,0xff    0xe6,0xd0,0x38,0xff\n0xe9,0x84,0x74,0xfe    0xe9,0x84,0x74,0xfe\n0xe9,0x88,0x6e,0xfe    0xe9,0x88,0x6e,0xfe\n0xea,0x87,0x70,0xf7    0xea,0x87,0x70,0xf7\n0xeb,0x69,0x86,0xf8    0xeb,0x69,0x86,0xf8\n0xeb,0x6e,0x84,0xf8    0xeb,0x6e,0x84,0xf8\n0xeb,0x70,0x81,0xf8    0xeb,0x70,0x81,0xf8\n0xeb,0x73,0x7f,0xf8    0xeb,0x73,0x7f,0xf8\n0xeb,0x77,0x7c,0xf8    0xeb,0x77,0x7c,0xf8\n0xeb,0x7a,0x7a,0xf9    0xeb,0x7a,0x7a,0xf9\n0xeb,0x7e,0x77,0xfa    0xeb,0x7e,0x77,0xfa\n0xeb,0x82,0x74,0xf8    0xeb,0x82,0x74,0xf8\n0xec,0x68,0x8b,0xfe    0xec,0x68,0x8b,0xfe\n0xed,0x62,0x93,0xff    0xed,0x62,0x93,0xff\n0xed,0x64,0x8a,0xfe    0xed,0x64,0x8a,0xfe\n0xed,0x64,0x90,0xff    0xed,0x64,0x90,0xff\n0xed,0x70,0x86,0xff    0xed,0x70,0x86,0xff\n0xee,0x5a,0x96,0xff    0xee,0x5a,0x96,0xff\n0xee,0x5d,0x94,0xff    0xee,0x5d,0x94,0xff\n0xee,0x5f,0x93,0xff    0xee,0x5f,0x93,0xff\n0xee,0x67,0x8d,0xff    0xee,0x67,0x8d,0xff\n0xee,0x6a,0x8b,0xff    0xee,0x6a,0x8b,0xff\n0xee,0x6d,0x89,0xff    0xee,0x6d,0x89,0xff\n0xee,0x81,0x68,0xfc    0xee,0x81,0x68,0xfc\n0xef,0x8a,0x60,0xfb    0xef,0x8a,0x60,0xfb\n0xf1,0xa0,0x46,0x13    0xf1,0xa0,0x46,0x13\n0xf3,0x54,0x94,0xff    0xf3,0x54,0x94,0xff\n0xf3,0x75,0x74,0xfa    0xf3,0x75,0x74,0xfa\n0xf3,0xa1,0x4f,0x9b    0xf3,0xa1,0x4f,0x9b\n0xf3,0xa7,0x4b,0xb3    0xf3,0xa7,0x4b,0xb3\n0xf3,0xa8,0x4a,0xca    0xf3,0xa8,0x4a,0xca\n0xf4,0x8d,0x5f,0xe6    0xf4,0x8d,0x5f,0xe6\n0xf4,0x9a,0x54,0xe6    0xf4,0x9a,0x54,0xe6\n0xf4,0x9d,0x52,0xe6    0xf4,0x9d,0x52,0xe6\n0xf4,0xa1,0x4f,0xe6    0xf4,0xa1,0x4f,0xe6\n0xf4,0xa3,0x4c,0x22    0xf4,0xa3,0x4c,0x22\n0xf4,0xa3,0x4d,0x6e    0xf4,0xa3,0x4d,0x6e\n0xf4,0xa6,0x4a,0xe6    0xf4,0xa6,0x4a,0xe6\n0xf4,0xa6,0x4b,0xf1    0xf4,0xa6,0x4b,0xf1\n0xf4,0xc5,0x33,0x34    0xf4,0xc5,0x33,0x34\n0xf5,0x90,0x5c,0xe6    0xf5,0x90,0x5c,0xe6\n0xf5,0x91,0x5b,0xc2    0xf5,0x91,0x5b,0xc2\n0xf5,0x93,0x59,0xe6    0xf5,0x93,0x59,0xe6\n0xf5,0x97,0x57,0xe6    0xf5,0x97,0x57,0xe6\n0xf6,0x61,0x88,0xfd    0xf6,0x61,0x88,0xfd\n0xf6,0x71,0x72,0x4a    0xf6,0x71,0x72,0x4a\n0xf6,0x7f,0x68,0xe6    0xf6,0x7f,0x68,0xe6\n0xf6,0x83,0x66,0xe6    0xf6,0x83,0x66,0xe6\n0xf6,0x86,0x64,0xe6    0xf6,0x86,0x64,0xe6\n0xf6,0x88,0x62,0xe6    0xf6,0x88,0x62,0xe6\n0xf6,0x8b,0x60,0xe7    0xf6,0x8b,0x60,0xe7\n0xf6,0xbf,0x34,0x4c    0xf6,0xbf,0x34,0x4c\n0xf7,0x68,0x7d,0xf6    0xf7,0x68,0x7d,0xf6\n0xf7,0x6f,0x74,0xe6    0xf7,0x6f,0x74,0xe6\n0xf7,0x6f,0x75,0xab    0xf7,0x6f,0x75,0xab\n0xf7,0x73,0x72,0xe6    0xf7,0x73,0x72,0xe6\n0xf7,0x76,0x6f,0xe6    0xf7,0x76,0x6f,0xe6\n0xf7,0x7a,0x6d,0xe6    0xf7,0x7a,0x6d,0xe6\n0xf7,0x7d,0x6b,0xe6    0xf7,0x7d,0x6b,0xe6\n0xf8,0x60,0x80,0xc6    0xf8,0x60,0x80,0xc6\n0xf8,0x62,0x7f,0xe6    0xf8,0x62,0x7f,0xe6\n0xf8,0x66,0x7c,0xe6    0xf8,0x66,0x7c,0xe6\n0xf8,0x67,0x7a,0x7b    0xf8,0x67,0x7a,0x7b\n0xf8,0x69,0x79,0xe6    0xf8,0x69,0x79,0xe6\n0xf8,0x6d,0x76,0xe6    0xf8,0x6d,0x76,0xe6\n0xf9,0x59,0x86,0xe5    0xf9,0x59,0x86,0xe5\n0xf9,0x5a,0x84,0xf1    0xf9,0x5a,0x84,0xf1\n0xf9,0x5d,0x82,0xe6    0xf9,0x5d,0x82,0xe6\n0xf9,0xcc,0x1a,0xb6    0xf9,0xcc,0x1a,0xb6\n0xf9,0xcd,0x19,0xfe    0xf9,0xcd,0x19,0xfe\n0xf9,0xcd,0x1a,0xee    0xf9,0xcd,0x1a,0xee\n0xf9,0xcf,0x1f,0xd9    0xf9,0xcf,0x1f,0xd9\n0xf9,0xcf,0x1f,0xfe    0xf9,0xcf,0x1f,0xfe\n0xf9,0xd5,0x2c,0xfc    0xf9,0xd5,0x2c,0xfc\n0xf9,0xd5,0x2d,0x5c    0xf9,0xd5,0x2d,0x5c\n0xf9,0xd5,0x2d,0x9b    0xf9,0xd5,0x2d,0x9b\n0xf9,0xd5,0x2f,0x77    0xf9,0xd5,0x2f,0x77\n0xf9,0xdc,0x3e,0xfd    0xf9,0xdc,0x3e,0xfd\n0xfa,0x6f,0x80,0xff    0xfa,0x6f,0x80,0xff\n0xfa,0xcf,0x1b,0xff    0xfa,0xcf,0x1b,0xff\n0xfa,0xd1,0x20,0xff    0xfa,0xd1,0x20,0xff\n0xfa,0xd2,0x23,0xff    0xfa,0xd2,0x23,0xff\n0xfa,0xd3,0x27,0xff    0xfa,0xd3,0x27,0xff\n0xfa,0xd5,0x2a,0xff    0xfa,0xd5,0x2a,0xff\n0xfa,0xd9,0x38,0xfe    0xfa,0xd9,0x38,0xfe\n0xfa,0xdf,0x48,0xfc    0xfa,0xdf,0x48,0xfc\n0xfb,0x66,0x85,0xff    0xfb,0x66,0x85,0xff\n0xfb,0x6a,0x83,0xff    0xfb,0x6a,0x83,0xff\n0xfb,0xd6,0x2d,0xff    0xfb,0xd6,0x2d,0xff\n0xfb,0xd8,0x30,0xff    0xfb,0xd8,0x30,0xff\n0xfb,0xd9,0x33,0xff    0xfb,0xd9,0x33,0xff\n0xfb,0xda,0x38,0xff    0xfb,0xda,0x38,0xff\n0xfb,0xdd,0x3d,0xff    0xfb,0xdd,0x3d,0xff\n0xfb,0xdf,0x41,0xff    0xfb,0xdf,0x41,0xff\n0xfb,0xdf,0x42,0xb2    0xfb,0xdf,0x42,0xb2\n0xfb,0xe1,0x4b,0xcf    0xfb,0xe1,0x4b,0xcf\n0xfc,0x58,0x8b,0xff    0xfc,0x58,0x8b,0xff\n0xfc,0x5f,0x89,0xff    0xfc,0x5f,0x89,0xff\n0xfc,0x62,0x87,0xff    0xfc,0x62,0x87,0xff\n0xfc,0x90,0x76,0xff    0xfc,0x90,0x76,0xff\n0xfc,0xb8,0x68,0xff    0xfc,0xb8,0x68,0xff\n0xfc,0xd2,0x5e,0xff    0xfc,0xd2,0x5e,0xff\n0xfc,0xe0,0x44,0xff    0xfc,0xe0,0x44,0xff\n0xfc,0xe1,0x48,0xff    0xfc,0xe1,0x48,0xff\n0xfc,0xe3,0x4b,0xff    0xfc,0xe3,0x4b,0xff\n0xfc,0xe4,0x4f,0xff    0xfc,0xe4,0x4f,0xff\n0xfc,0xe4,0x55,0xfd    0xfc,0xe4,0x55,0xfd\n0xfc,0xe5,0x52,0xff    0xfc,0xe5,0x52,0xff\n0xfc,0xe7,0x57,0xff    0xfc,0xe7,0x57,0xff\n0xfc,0xed,0x55,0xff    0xfc,0xed,0x55,0xff\n0xff,0xd3,0x1d,0xff    0xff,0xd3,0x1d,0xff\n(0x62,0xb7,0xd5,0xe1) was color #182\n(0x89,0xb5,0xba,0xeb) was color #181\n(0xe2,0xaf,0x6e,0xa2) was color #183\nBased on Huffman header analysis of the PNG produced by pngquant (this works since there's only one Deflate block in the compressed stream and the sole PNG filter used is 0 -none-), these 3 colors are effectively never used in the image:\ndefdb -a fa88317a-d273-11e3-8371-48c11d194a81-or8.png\n\u2026\n0xB3      2 11 11\n0xB4      1 12 12\n0xB5         .  .\n0xB6         .  .\n0xB7         .  .\n0xB8     13  9  9\n0xB9     18  8  8\n\u2026\nThe same colors are missing in the dithered version of this image:\ndefdb -a fa88317a-d273-11e3-8371-48c11d194a81-fs8.png\n\u2026\n0xB3      2 12 12\n0xB4      1 12 12\n0xB5         .  .\n0xB6         .  .\n0xB7         .  .\n0xB8      8 10 10\n0xB9     15  9  9\n\u2026\n. Another test, this time using the Windows version of pngquant available on the main site  (version 2.1.1) on the second image (Google logo).\n```\npngquant --speed 1 fa95ea22-d273-11e3-89a0-05d1a3b4fccb.png\npngquant --nofs --speed 1 fa95ea22-d273-11e3-89a0-05d1a3b4fccb.png\npngrewrite fa95ea22-d273-11e3-89a0-05d1a3b4fccb-or8.png fa95ea22-or8rw.png\noriginal palette size:   256,  8 bpp\nImage size is 538x190  memory required=0.488MB\nnew palette size:        248,  8 bpp\npngrewrite fa95ea22-d273-11e3-89a0-05d1a3b4fccb-fs8.png fa95ea22-fs8rw.png\noriginal palette size:   256,  8 bpp\nImage size is 538x190  memory required=0.488MB\nnew palette size:        248,  8 bpp\n```\nThis time pngrewrite removed 8 colors!\nAnd defdb -a reports that the bytes (and therefore the associated colors in the palette) in the range 0x84...0x8b never appear in the image:\ndefdb -a fa95ea22-d273-11e3-89a0-05d1a3b4fccb-or8.png\n\u2026\n0x82      1 12 12\n0x83      1 12 12\n0x84         .  .\n0x85         .  .\n0x86         .  .\n0x87         .  .\n0x88         .  .\n0x89         .  .\n0x8A         .  .\n0x8B         .  .\n0x8C     10  9  9\n0x8D      8  9  9\n\u2026\nOn the third image (Donut box):\n```\npngquant --nofs --speed 1 fa9afd6e-d273-11e3-9193-237a8beb417e.png\npngrewrite fa9afd6e-d273-11e3-9193-237a8beb417e-or8.png fa9afd6e-or8rw.png\noriginal palette size:   256,  8 bpp\nImage size is 118x112  memory required=0.063MB\nnew palette size:        249,  8 bpp\ndefdb -a fa9afd6e-d273-11e3-9193-237a8beb417e-or8.png\n\u2026\n0x37      2 11 11\n0x38      1 12 12\n0x39         .  .\n0x3A         .  .\n0x3B         .  .\n0x3C         .  .\n0x3D         .  .\n0x3E         .  .\n0x3F     42  7  7\n0x40     23  8  8\n\u2026\n0xFD      2 11 11\n0xFE      2 12 12\n0xFF         .  .\nEofB      1 12 12\nl_00    323  4  4\nl_01    214  4  4\n\u2026\n```\nWeird!?\n. ",
    "petrdiblik": "+1\nI have been monitoring this bug for a long time, with many images.\nIt is still present in version 2.5.2.\nCould that be fixed please?\n(In my opinion, a basic fix would be excluding the unused colors from PLTE. An advanced fix would be using maximum colors (according to the ncolors parameter) in both PLTE and IDAT and thus getting even better output.)\n. Hi,\nIs that OK that version 2.5.2 with libpng 1.2.52 gives slightly different results than version 2.5.2 (the same) with libpng 1.6.18?\n. This is normal.\npngquant was called with min quality 72. But with 256 colors the resulting quality is just 5 and therefore the required minimum is not met.\n. Or did you mean you expected a higher quality output (nominal and/or visual)? Please clarify.\n. Works for me.\n(The image is not saved with these quality settings because 256 colors result in quality 38. But the process finishes correctly.)\npngquant 2.5.2, libpng 1.6.18\n. Does scolorq work for you on newer Windows? It does not for me on 8.1.\n. ",
    "mtt87": "You mean that from today everybody need to install libpng and it's not declared as dependency in the package.json?\nBecause until today everything was working fine, I'm just trying to figure out where is the problem exactly.\nMany thanks\n. I opened this issue with the author, at this point I'm really curious to understand why this is happening\nhttps://github.com/kevva/pngquant-bin/issues/24\nThanks again!\n. ",
    "DeltaKilo": "The abovementioned optipng-0.6.4 uses same vanilla libpng and libz, look:\nbash\nldd $(which optipng)\n    linux-vdso.so.1 =>  (0x00007fff117dd000)\n    libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f38385ef000)\n    libpng12.so.0 => /lib/x86_64-linux-gnu/libpng12.so.0 (0x00007f38383c9000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3838002000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3837cfc000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f383882a000)\nNote, that none advanced filters nor strategies was used for optipng, just play with zlib compression and especially memory levels. \nI dig compression log for a bit and found that additional compression comes from zlib memory level setting in optipng, so, I believe the feature that tries to find optimal memory level for a better compression can be implemented pretty easy. Here's the log: http://pastebin.com/hBM9Wbf5\n. There is only one important parameter and zlib is cheap nowadays \u2014 it can compress tens Mb/s so I don't think compression will become noticeably slower. It just a quick and dirty solution to perform better out of the box, while for sure 7zip performs even better.\n. ",
    "kengwaichiah": "Yes, agree with your point, However my situation is that i have to a list of png to display in mobile browser. For high end devices, that would be fine, but not the case for low end device or devices with older OS version especially Android 2.X. For this group of user, they have to wait for basically any image to load, so without the preview, it basically a blank page for them while loading. Interlaced png for them are more to have better user experience than loading speed.\nSo, can you consider to support interlace option ? \n. ",
    "zedxxx": "Can you build libimagequant.dll too?\n. Thanks, but it depended on libgcc_s_dw2-1.dll. Can you rebuild it without this depends?\n. Test = compare current result with some expected result. \nWhere can I find the expected results for all API functions?\n. > If you mean testing like unit tests, then unfortunately I don't have anything like that. If you'd like to contribute it, it'd be great!\nExactly. And sorry, I'm not a C-programmer, so I can't contribute it :(\n\nTo sanity-check output from pngquant I track quality of images with https://github.com/pornel/dssim\n\nOk, I will try it. Thanks.\n. You can fix it:\n\n```\n// allowing some overflow prevents undithered bands caused by clamping of all channels\n       if (px.r + sr > max_overflow)  { ratio = MIN(ratio, (max_overflow -px.r)/sr); }\nelse { if (px.r + sr < max_underflow) { ratio = MIN(ratio, (max_underflow-px.r)/sr); } }\n   if (px.g + sg > max_overflow)  { ratio = MIN(ratio, (max_overflow -px.g)/sg); }\n\nelse { if (px.g + sg < max_underflow) { ratio = MIN(ratio, (max_underflow-px.g)/sg); } }\n   if (px.b + sb > max_overflow)  { ratio = MIN(ratio, (max_overflow -px.b)/sb); }\n\nelse { if (px.b + sb < max_underflow) { ratio = MIN(ratio, (max_underflow-px.b)/sb); } }\n```\n\nor \n\n```\n// allowing some overflow prevents undithered bands caused by clamping of all channels\n       if (px.r + sr > max_overflow)  ratio = MIN(ratio, (max_overflow -px.r)/sr);\nelse { if (px.r + sr < max_underflow) ratio = MIN(ratio, (max_underflow-px.r)/sr); }\n   if (px.g + sg > max_overflow)  ratio = MIN(ratio, (max_overflow -px.g)/sg);\n\nelse { if (px.g + sg < max_underflow) ratio = MIN(ratio, (max_underflow-px.g)/sg); }\n   if (px.b + sb > max_overflow)  ratio = MIN(ratio, (max_overflow -px.b)/sb);\n\nelse { if (px.b + sb < max_underflow) ratio = MIN(ratio, (max_underflow-px.b)/sb); }\n```\n. \n",
    "quning19": "log @ mac-mini-1:\n2.3.0 (July 2014)\nbazhentu.png:\n  read 549KB file\n  made histogram...70247 colors found\n  selecting colors...3%\n  selecting colors...15%\n  selecting colors...28%\n  selecting colors...30%\n  selecting colors...43%\n  selecting colors...56%\n  selecting colors...69%\n  selecting colors...81%\n  selecting colors...94%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...67 entries transparent\n  mapped image to new colors...MSE=9.302 (Q=70)\n  writing 256-color image as bazhentu-fs8.png\nNo errors detected while quantizing 1 image.\n29e619937ff63b1550f8921648ef9f18  bazhentu-fs8.png\n. log@mac-mini-2:\n2.3.0 (July 2014)\nbazhentu.png:\n  read 549KB file\n  made histogram...70122 colors found\n  selecting colors...3%\n  selecting colors...5%\n  selecting colors...7%\n  selecting colors...20%\n  selecting colors...32%\n  selecting colors...45%\n  selecting colors...58%\n  selecting colors...60%\n  selecting colors...73%\n  selecting colors...75%\n  selecting colors...88%\n  selecting colors...90%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...67 entries transparent\n  mapped image to new colors...MSE=9.345 (Q=70)\n  writing 256-color image as bazhentu-fs8.png\nNo errors detected while quantizing 1 image.\n9aaa768da08bdfb1c634e4c0733211c9  bazhentu-fs8.png\n. one mac is OS X 10.8, the other is OS X 10.9. is this the reasion?\n. Tried build the binary, problem sloved. \nthanks a lot~~~\n. ",
    "lovasoa": "It looks like there is already a port of libpng for emscripten:  https://github.com/hachque-Emscripten/libpng-1.2.49\n. I didn't know about imagemin before, but you might be interested by my recent port of epeg and libjpeg to javascript: https://github.com/lovasoa/libepeg.js.\n. ",
    "caub": "Did someone try to compile with emscripten? unfortunately I'm on windows now, but having a js build of pngquant would be fabulous. https://jsfiddle.net/crl/jormdgb6/ this is an attempt with emscripten, it gives an error in console\npre-main prep time: 3 ms\nprintErr @ (index):225\n(index):225 missing function: liq_attr_create\nprintErr @ (index):225\n(index):222 -1\n(index):225 -1\nprintErr @ (index):225\n(index):19399 Uncaught abort(-1) at Error\n    at jsStackTrace (https://fiddle.jshell.net/crl/jormdgb6/show/:1104:13)\n    at stackTrace (https://fiddle.jshell.net/crl/jormdgb6/show/:1121:22)\n    at abort (https://fiddle.jshell.net/crl/jormdgb6/show/:19504:44)\n    at _liq_attr_create (https://fiddle.jshell.net/crl/jormdgb6/show/:5034:60)\n    at _main (https://fiddle.jshell.net/crl/jormdgb6/show/:5421:8)\n    at Object.asm._main (https://fiddle.jshell.net/crl/jormdgb6/show/:19267:19)\n    at Object.callMain (https://fiddle.jshell.net/crl/jormdgb6/show/:19382:30)\n    at doRun (https://fiddle.jshell.net/crl/jormdgb6/show/:19440:60)\n    at run (https://fiddle.jshell.net/crl/jormdgb6/show/:19454:5)\n    at window.onload (https://fiddle.jshell.net/crl/jormdgb6/show/:19530:1)\nA friend did it on Linux, changing just gcc to emcc in configure, I'm going to try from windows, finishing to install compilers. Thanks, good point. So I could build libimagequant with emscripten, I've read it, I don't see well yet how to use it on a matrix of pixels. Thanks I gave a try: https://jsfiddle.net/crl/pwan5bva/\nwhat's unclear to me is the first argument of liq_image_create_rgba, what is it? the second is the array of pixels, 3rd width, 4th height, 5th gamma.\nAlso, it just returns an int status, where do I read the result of the optimization?\nFor lodepng, I need to use only lodepng_encode32 ? I mean, no need to compress?. Thanks a lot, I see much better\nI'm not too familiar in C, but would you accept a PR with another build target for emscripten? (with emcc -s EXPORTED_FUNCTIONS=\"['_liq_attr_create', '_liq_image_create_rgba', '_liq_image_quantize', '_liq_write_remapped_image', '_liq_get_palette']\")\nThanks again for the examples, Lodepng is a bit harder to make with emscripten, but will find\nAlso what is example_bitmap_8bpp? it's just a pointer to an array I guess, and it's feed by the function call. I had this error too, running several processes in parallel and using pngquant for single images, I solved it by processing all images with *.png --ext .png --force\nps: Pornel, thanks for your hard work, I haven't advanced with emscripten, but I'll try to do it as soon as possible, on Linux rather (because minGW sucks a bit) . Nice, interesting. Yes \n\n. ",
    "psych0der": "It's finally available \ud83d\ude04 pngquantjs. ",
    "nosilver4u": "Ok, that fixed the initial issue with just running make. But my next step is to compile a static binary, and that fails like so:\ngcc pngquant.o rwpng.o -static -static-libgcc -o pngquant\npngquant.o: In function read_image':\npngquant.c:(.text+0xa8): undefined reference toliq_image_create_rgba_rows'\npngquant.c:(.text+0xcf): undefined reference to liq_image_set_memory_ownership'\npngquant.o: In functionpngquant_file':\npngquant.c:(.text+0x4b0): undefined reference to liq_image_destroy'\npngquant.c:(.text+0x57a): undefined reference toliq_quantize_image'\npngquant.c:(.text+0x59e): undefined reference to liq_set_output_gamma'\npngquant.c:(.text+0x5b8): undefined reference toliq_set_dithering_level'\npngquant.c:(.text+0x5c7): undefined reference to liq_image_get_width'\npngquant.c:(.text+0x5d6): undefined reference toliq_image_get_height'\npngquant.c:(.text+0x5e9): undefined reference to liq_get_output_gamma'\npngquant.c:(.text+0x750): undefined reference toliq_get_palette'\npngquant.c:(.text+0x7ae): undefined reference to liq_write_remapped_image_rows'\npngquant.c:(.text+0x7c6): undefined reference toliq_get_palette'\npngquant.c:(.text+0x87d): undefined reference to liq_get_quantization_error'\npngquant.c:(.text+0x899): undefined reference toliq_get_quantization_quality'\npngquant.c:(.text+0x8ca): undefined reference to liq_result_destroy'\npngquant.c:(.text+0x98e): undefined reference toliq_result_destroy'\npngquant.o: In function main':\npngquant.c:(.text+0xa5c): undefined reference toliq_attr_create'\npngquant.c:(.text+0x10e5): undefined reference to liq_set_min_opacity'\npngquant.c:(.text+0x1109): undefined reference toliq_set_last_index_transparent'\npngquant.c:(.text+0x11c6): undefined reference to liq_set_min_posterization'\npngquant.c:(.text+0x1297): undefined reference toliq_set_quality'\npngquant.c:(.text+0x13c9): undefined reference to liq_set_speed'\npngquant.c:(.text+0x1437): undefined reference toliq_set_log_callback'\npngquant.c:(.text+0x163f): undefined reference to liq_set_max_colors'\npngquant.c:(.text+0x17a5): undefined reference toliq_attr_destroy'\npngquant.c:(.text+0x1840): undefined reference to liq_attr_copy'\npngquant.c:(.text+0x18ed): undefined reference toliq_attr_destroy'\npngquant.c:(.text+0x19ef): undefined reference to liq_image_destroy'\npngquant.c:(.text+0x19fe): undefined reference toliq_attr_destroy'\nrwpng.o: In function rwpng_write_image_init':\nrwpng.c:(.text+0x4a): undefined reference topng_create_write_struct'\nrwpng.c:(.text+0x61): undefined reference to png_create_info_struct'\nrwpng.c:(.text+0x7f): undefined reference topng_destroy_write_struct'\nrwpng.c:(.text+0xac): undefined reference to png_destroy_write_struct'\nrwpng.c:(.text+0xd6): undefined reference topng_set_compression_level'\nrwpng.c:(.text+0xed): undefined reference to png_set_compression_mem_level'\nrwpng.c:(.text+0x107): undefined reference topng_set_compression_level'\nrwpng.o: In function rwpng_error_handler':\nrwpng.c:(.text+0x187): undefined reference topng_get_error_ptr'\nrwpng.o: In function user_write_data':\nrwpng.c:(.text+0x1c7): undefined reference topng_get_io_ptr'\nrwpng.o: In function rwpng_set_gamma':\nrwpng.c:(.text+0x243): undefined reference topng_set_gAMA'\nrwpng.o: In function rwpng_write_end':\nrwpng.c:(.text+0x297): undefined reference topng_write_info'\nrwpng.c:(.text+0x2a1): undefined reference to png_set_packing'\nrwpng.c:(.text+0x2af): undefined reference topng_write_image'\nrwpng.c:(.text+0x2c1): undefined reference to png_write_end'\nrwpng.o: In functionuser_read_data':\nrwpng.c:(.text+0x307): undefined reference to png_get_io_ptr'\nrwpng.c:(.text+0x341): undefined reference topng_error'\nrwpng.o: In function read_chunk_callback':\nrwpng.c:(.text+0x3c2): undefined reference topng_get_user_chunk_ptr'\nrwpng.o: In function rwpng_version_info':\nrwpng.c:(.text+0x450): undefined reference topng_get_header_ver'\nrwpng.o: In function rwpng_read_image24_libpng':\nrwpng.c:(.text+0x522): undefined reference topng_create_read_struct'\nrwpng.c:(.text+0x537): undefined reference to png_create_info_struct'\nrwpng.c:(.text+0x55b): undefined reference topng_destroy_read_struct'\nrwpng.c:(.text+0x5a8): undefined reference to png_destroy_read_struct'\nrwpng.c:(.text+0x5dd): undefined reference topng_set_read_user_chunk_fn'\nrwpng.c:(.text+0x605): undefined reference to png_set_read_fn'\nrwpng.c:(.text+0x619): undefined reference topng_read_info'\nrwpng.c:(.text+0x669): undefined reference to png_get_IHDR'\nrwpng.c:(.text+0x6b6): undefined reference topng_get_valid'\nrwpng.c:(.text+0x6d8): undefined reference to png_set_interlace_handling'\nrwpng.c:(.text+0x6ec): undefined reference topng_read_update_info'\nrwpng.c:(.text+0x700): undefined reference to png_get_rowbytes'\nrwpng.c:(.text+0x769): undefined reference topng_destroy_read_struct'\nrwpng.c:(.text+0x77f): undefined reference to png_set_expand'\nrwpng.c:(.text+0x79b): undefined reference topng_set_filler'\nrwpng.c:(.text+0x7bc): undefined reference to png_get_gAMA'\nrwpng.c:(.text+0x7cd): undefined reference topng_set_gray_to_rgb'\nrwpng.c:(.text+0x7f2): undefined reference to png_get_rowbytes'\nrwpng.c:(.text+0x8d4): undefined reference topng_read_image'\nrwpng.c:(.text+0x8e8): undefined reference to png_read_end'\nrwpng.c:(.text+0x904): undefined reference topng_destroy_read_struct'\nrwpng.c:(.text+0x92b): undefined reference to png_set_strip_16'\nrwpng.o: In functionrwpng_write_image8':\nrwpng.c:(.text+0xc32): undefined reference to png_set_write_fn'\nrwpng.c:(.text+0xc4e): undefined reference topng_set_filter'\nrwpng.c:(.text+0xc6c): undefined reference to png_set_gAMA'\nrwpng.c:(.text+0xc80): undefined reference topng_set_sRGB'\nrwpng.c:(.text+0xceb): undefined reference to png_set_unknown_chunks'\nrwpng.c:(.text+0xd41): undefined reference topng_set_IHDR'\nrwpng.c:(.text+0xd69): undefined reference to png_set_PLTE'\nrwpng.c:(.text+0xd91): undefined reference topng_write_info'\nrwpng.c:(.text+0xd9d): undefined reference to png_set_packing'\nrwpng.c:(.text+0xdad): undefined reference topng_write_image'\nrwpng.c:(.text+0xdc1): undefined reference to png_write_end'\nrwpng.c:(.text+0xdd5): undefined reference topng_destroy_write_struct'\nrwpng.c:(.text+0xe2c): undefined reference to png_set_tRNS'\nrwpng.c:(.text+0xe7f): undefined reference topng_init_io'\nrwpng.o: In function rwpng_write_image24':\nrwpng.c:(.text+0xed1): undefined reference topng_init_io'\nrwpng.c:(.text+0xeef): undefined reference to png_set_gAMA'\nrwpng.c:(.text+0xf03): undefined reference topng_set_sRGB'\nrwpng.c:(.text+0xf53): undefined reference to png_set_IHDR'\nrwpng.c:(.text+0xf73): undefined reference topng_get_rowbytes'\nrwpng.c:(.text+0x1067): undefined reference to png_write_info'\nrwpng.c:(.text+0x1073): undefined reference topng_set_packing'\nrwpng.c:(.text+0x1087): undefined reference to png_write_image'\nrwpng.c:(.text+0x109b): undefined reference topng_write_end'\nrwpng.c:(.text+0x10ab): undefined reference to png_destroy_write_struct'\nrwpng.o: In functionrwpng_set_gamma':\nrwpng.c:(.text+0x263): undefined reference to png_set_sRGB'\nrwpng.o: In functionrwpng_write_end':\nrwpng.c:(.text+0x2dd): undefined reference to `png_destroy_write_struct'\ncollect2: ld returned 1 exit status\nmake: *** [pngquant] Error 1\n. I did it by adding this line to Makefile:\nLDFLAGS = -static -static-libgcc\nIf there is a preferred way of building static binaries besides that for pngquant, let me know. I didn't use the configure script at all, since it didn't exist in the past. Should I be?\n. It used to work on 2.0.2, but I'll see if using the configure script works (that's the way I do it for most of my other tools).\n. Just when I think I have something figured out, seems like it changes... On FreeBSD, I always have to put LDFLAGS after the command (make/configure). On linux, I usually put it in front. Don't know why, I just always have. On Mac OSX, it is mandatory for them to precede the command, or it doesn't work right. So I tried it your way (putting LDFLAGS after ./configure), and it worked! Thanks so much for your help. Are you planning to push out a bugfix release with the other fix at all?\n. ",
    "maartenvandillen": "Aha, I didn't see any C++ classes indeed but the cpp extension got me confused then.\nSorry about misusing the issue tracker for asking this, but do you have any more information on how to get this compiled on Android NDK?\n. Good question. That was my mistake. In the process of getting this to work I pasted the contents of libimagequant.c into a working cpp file for JNI.\nChanged it back to the original file now.\nThe problem I have is the size_t type (in the .h file) which cannot be resolved.\n. NDK builds fine now, it seems to be an Eclipse issue. Thanks for listening to my problems!\n. @Drjacky No sorry, this was back in 2014 and I have a new laptop now.. ",
    "Drjacky": "@maartenvandillen Is that possible to share the built library for Android?\nAnd maybe, with the usage explanation.\nThanks \ud83d\ude4f . ",
    "annulen": "Cool! Looks like this option is undocumented.\nHowever, it would be great if pngquant could generate non-indexed images for sake of improved quality. I have an image [1] with color gradients and I'm wondering how much quality can I get from it in ARGB4444. [2] is what I get with Gimp-based solution, and I'm sure that's not the best possible conversion.\n[1] http://higgs.rghost.ru/57363540/image.png\n[2] http://higgs.rghost.ru/57363557/image.png\n. ",
    "HMVC0": "I tried lodepng's bmp2png and it produced a pink color on the png files, i tried to play with the RGBA settings but it kept giving me the wrong colors. So i'm just gonna stick with libpng & libimagequant.\nFYI i'm trying to convert some images (screen captures) from bitmap to png then convert them to png 8-bit using libimagequant and then write them to a database using libpng which means that i have to use png_set_write_fn.\nI really appreciate your help. If you have any suggestions that could make my problem easier that would be awesome :). Thanks.\n. ",
    "alamboley": "Well, using or not --skip-if-larger my files are pngquanted again.\nHere is a sprite sheet: \n\n. Wow, that was quick!\nUnfortunately I've an issue building files:\n``` shell\naymerics-imac:~ Aymeric$ cd Downloads/pngquant-master\naymerics-imac:pngquant-master Aymeric$ make\n./configure\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\n     Cocoa: yes\n    libpng: error ... not found (try: brew install libpng)\nmake: *** No rule to make target config.mk', needed bylib/libimagequant.a'.  Stop.\naymerics-imac:pngquant-master Aymeric$ brew install libpng\nWarning: libpng-1.6.12 already installed\n```\nNote that I'm not an expert at all with brew...\n. Yeah that's what I did and it says already installed. However the make file can't find it.\nCould you provide me the pngquant executable directly (for Mac OS X)?\n. Hmm having issues using pkg-config too:\naymerics-imac:pkg-config-0.28 Aymeric$ sudo port install pkgconfig\nWarning: port definitions are more than two weeks old, consider using selfupdate\n--->  Computing dependencies for pkgconfig\n--->  Cleaning pkgconfig\n--->  Scanning binaries for linking errors: 100.0%\n--->  No broken files found.\naymerics-imac:pkg-config-0.28 Aymeric$ pkg-config\n-bash: pkg-config: command not found\n. Thanks to the last update, I was able to compile!\nUnfortunately, it seems that Git considered that files has changed even with --skip-if-larger flag.\nAlso, it \"destroyed\" somes images after running the script again (using the flag or not):\npngquant image(s) 1x\n  error: rwpng_read_image() error 2\npngquant image(s) 0.5x\npngquant image(s) 0.375x\npngquant image(s) 0.25x\n  error: rwpng_read_image() error 2\nI never saw this error with the previous version.\n. Here is the whole script. Note that I checked that TexturePacker doesn't override the png file if the SpriteSheet doesn't change (it checks the xml). So everything is on pngquant side.\n``` sh\n!/bin/sh\n!/usr/bin/env bash\nDIR=\"$( cd \"$( dirname \"$0\" )\" && pwd )\"\nresolutions=(1 0.5 0.375 0.25)\nTexturePacker \"$DIR\"/mainAssets/mainAssets.tps\nTexturePacker \"$DIR\"/newGame/newGame.tps\nTexturePacker \"$DIR\"/inGame/inGame.tps\nfor i in \"${resolutions[@]}\"\ndo\necho \"pngquant image(s)\" \"$i\"x\npngquant -f --skip-if-larger --ext .png \"$DIR\"/../bin/assets/\"$i\"x/*.png\n\ndone\necho \"Texture Packer & pngquant tasks done.\"\nexit 0\n```\nYou will find an image in attachement (not compressed by pngquant).\n\nNow, if I create a new test folder with just this script and the image above:\n``` sh\n!/bin/sh\n!/usr/bin/env bash\nDIR=\"$( cd \"$( dirname \"$0\" )\" && pwd )\"\npngquant -f --skip-if-larger --ext .png \"$DIR\"/*.png\necho \"pngquant tasks done.\"\nexit 0\n```\nthe first run : image compressed\nthe second run: image destroyed\nthe third run: error: rwpng_read_image() error 2.\nWithout the skip flag, there isn't any error or destruction. But the image is \"overrided\".\n. Hey, any update on this issue?\n. Works like a charm sir! No more errors and Git doesn't consider it as a new file ;)\n. ",
    "elfring": "Are you interested to apply aspect-oriented software development?\nHow do you think about to encapsulate error detection and corresponding exception handling as a reusable aspect in your software?\n. I would prefer to avoid return value ignorance.\nIs it useful to detect that a storage area became (temporarily) full?\n. ",
    "neheb": "/usr/lib/gcc/x86_64-pc-cygwin/4.9.0/../../../../lib/libcygwin.a(libcmain.o): In function main':\n/usr/src/debug/cygwin-1.7.32-1/winsup/cygwin/lib/libcmain.c:39: undefined reference toWinMain'\n/usr/src/debug/cygwin-1.7.32-1/winsup/cygwin/lib/libcmain.c:39:(.text.startup+0x7e): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `WinMain'\ncollect2: error: ld returned 1 exit status\n. echo \"int main() {}\" | gcc -xc -std=c99 -o /dev/null -\ninterestingly, i also ran the configure script under MinGW64 and got a similar error:\n$ x86_64-w64-mingw32-gcc -xc -std=c99 <(echo \"int main(){}\")\n/usr/x86_64-w64-mingw32/sys-root/mingw/lib/../lib/libmingw32.a(lib64_libmingw32_a-crt0_c.o): In function main':\n/usr/src/debug/mingw64-x86_64-runtime-3.1.0-1/crt/crt0_c.c:18: undefined reference toWinMain'\ncollect2: error: ld returned 1 exit status\n. ./configure: line 224: syntax error near unexpected token then'\n./configure: line 224:if ! { echo \"int main(){}\" | \"$CC\" -xc -std=c99 -o /dev/null - &> /dev/null }; then'\nedit: removing the {} around echo and /dev/null results in it working. seems like it was that construct.\n. works fine. thanks.\n. ",
    "sergiomb2": "Hi , this spec correction is outdate since says : \n- Update to latest upstream version and corrected the .spec\n  and latest  upstream version is 2.3.0 , or am I missing something ? \nThanks, \n. I agree with pornel, no need a second spec , I'm trying get pngquant updated into Fedora , \nhere http://pkgs.fedoraproject.org/cgit/pngquant.git/tree/ you got pngquant.spec used in Fedora ! \n. I force disable-sse {ix86} [1] to build package and submit  pngquant-2.3.0 as an update for Fedora 21 (alpha) [2]\n[1] http://pkgs.fedoraproject.org/cgit/pngquant.git/commit/?id=83e69d99b7c0061df2c0e82ee58b0be29ac5cd19 \n[2] https://admin.fedoraproject.org/updates/pngquant-2.3.0-2.fc21\n. gcc-4.9.1-9.fc21 and gcc-c++\nhttps://kojipkgs.fedoraproject.org//work/tasks/8942/7708942/root.log\n. Anyway with last shared libraries stuff I don't need disable SSE anymore ! \n. I will test this, In fedora have a similar thing \nhttp://pkgs.fedoraproject.org/cgit/pngquant.git/tree/pngquant-2.3.2_fix-Makefile.patch \n. Hello I checked it today ! and we have a problem, at least on Fedora, the rpm of libimagequant stops provides correctly libimagequant.so.0() .\nI could fix it with : \nhttp://pkgs.fedoraproject.org/cgit/pngquant.git/plain/pngquant-2.4.0_fix-Makefile.patch?id=239d15b39e959b9a7c8c3fea408610535057eb56\nYou define : \nSHAREDOBJS with $(subst .o,.lo,$(OBJS))\nafter you compile SHAREDOBJS  with : \n$(CC) -fPIC $(CFLAGS) -c $(@:.lo=.c) -o $@\nand, at last, do SHAREDLIB with : \n$(CC) -shared -o $(SHAREDLIB) $(SHAREDOBJS) $(LDFLAGS)\nWorks with: \n$(SHAREDLIB): $(OBJS)\n$(CC) -shared -Wl,-soname,$(SHAREDLIB).$(SOVER) $(CFLAGS) $(OBJS) -o $(SHAREDLIB).$(SOVER)\nln -fs $(SHAREDLIB).$(SOVER) $(SHAREDLIB)\nAlso we need do a symbol link of libimagequant.so.0  to libimagequant.so.0  \nI will continue my investigation ... I found the problem. We just need add \"-Wl,-soname,$(SHAREDLIB)\" on compile flags : \nhttp://pkgs.fedoraproject.org/cgit/pngquant.git/plain/pngquant-2.4.0_fix-Makefile.patch?id=3fa98e166f7f07692b9c4e371e75711c1d929699\n. Could you tag 2.4.0.1 with 2.4.0 ? I prefer have correct tags ... ,  if someone want package it, will be more simpler , I think .\nThanks,\n. Hi, just drop a note that github let you delete a tag, so it is possible retag a version ... I just did .\n. --- pngquant-2.4.0.1.orig/rwpng.c   2015-04-11 23:24:38.000000000 +0100\n+++ pngquant-2.4.0.1/rwpng.c    2015-04-19 16:07:01.044937378 +0100\n@@ -55,7 +55,7 @@\n #define omp_get_max_threads() 1\n #endif\n-#if PNG_LIBPNG_VER < 10600\n+#if PNG_LIBPNG_VER < 10500\n typedef png_const_charp png_const_bytep;\n #endif\nfix it ! Based on [1]\n[1] https://bugs.freedesktop.org/show_bug.cgi?id=40478\n. Hello Kornel Lesinski ,\nAre you saying that we just have updates in lib ? \nI have one question. My question is:\nrpm -q --requires pngquant | grep quant\nShould rpm force have same libimagequant version ?  \nlibimagequant = 2.4.2-1.fc21\n libimagequant.so.0()(64bit)\nor not , just : \nlibimagequant.so.0()(64bit)\nWhat thoughts came up ?\nPutting the question is an advance way, did lib change is ABI ?:D\nShould we thought in versioning the lib ? For example have something like: \n/usr/lib64/libimagequant.so.0 -> libimagequant.so.0.1.2\n/usr/lib64/libimagequant.so.0.1.2\n. OK , so doesn't make sense tag it, for me ...\nI thought you included what is in :\ngit diff 2.4.2..master\nbut seems that is reserved for 2.5.0 \n-#define LIQ_VERSION 20401\n-#define LIQ_VERSION_STRING \"2.4.1\"\n+#define LIQ_VERSION 20500\n+#define LIQ_VERSION_STRING \"2.5.0\"\nThanks for the info \nBest regards\n. Hi, is Rust OS independent ? \nRust does not exist in the Linux Fedora yet , still in review [1] \n[1] https://bugzilla.redhat.com/show_bug.cgi?id=915043\n. Found this today: https://fedoramagazine.org/rust-meets-fedora/ \n. Hi, cmyk you need install libpng-dev because  -dev package got the pkgconfigs \nReference: \nhttps://packages.debian.org/experimental/amd64/libpng16-dev/filelist \n. @pornel LOL \n@cmyk \nThe following packages will be REMOVED:\n  libcairo2-dev libfontconfig1-dev libfreetype6-dev libgdal-dev libgdal1-dev libpng12-dev\nDoesn't look so bad , but I can't help you much.\nLooking in my Fedora system we got : \nlibpng10 1.0.61\nlibpng12 1.2.50\nlibpng15 1.5.18\nlibpng 1.6.10 \nby https://tracker.debian.org/pkg/libpng  and https://tracker.debian.org/pkg/libpng1.6\nlooks like Debian just have libpng 1.2 , so yes I think @pornel advice is wise, (use a local copy of libpng )\n. I got this also is: \n\n+ which -s libpng-config\nwhich: invalid option -- 's'\n/usr/bin/libpng-config\n. I sent the result of bash -x ./configure and it easy to find, line 312 of configure: \n\nif which -s libpng-config; then\nI ran bash -x ./configure &> results.txt & in a chroot but have been erased , I can generated it again, but it so easy to understand ... \n. The differences of rpm spec aren't relevant , maybe add testsuite, I will review that later\n. Fixed\nyou have a new commit in this pull request \n. Hi, JFTR\nI'd also like add in make install:\ninstall libimagequant :\ninstall -pm 0755 lib/%{libname}.so.0 %{buildroot}%{_libdir}\ninstall devel files:\nln -fs %{libname}.so.0 %{buildroot}%{_libdir}/%{libname}.so\ninstall -pm 0644 lib/*.h %{buildroot}%{_includedir}/imagequant\nand add in make test.shared:\nexport LD_LIBRARY_PATH=\"$(pwd)/lib:$LD_LIBRARY_PATH\"\n. hey , you got pngquant-2.5.2-5.el6 on epel6 stable repos , you may try it please \n. Cool, we may close this bug :) \n. Hello , https://github.com/pornel/pngquant/pull/183  , build png with shared libs is not completed (but could be a time to complete) .\nyes, you need add \nexport LD_LIBRARY_PATH=\"$(pwd)/lib:$LD_LIBRARY_PATH\"\nbut just if you use \nmake bin.shared \n make test.shared\nplease take a look in https://pkgs.fedoraproject.org/cgit/rpms/pngquant.git/tree/pngquant.spec \n. with https://github.com/pornel/pngquant/pull/245 , you got the solution\n-   ./test/test.sh ./test $(BIN) $(TESTBIN)\n+   LD_LIBRARY_PATH=\"lib\" ./test/test.sh ./test $(BIN) $(TESTBIN). Hello what are the errors ? , have you a fix for your system ? \nThanks\n. I tested 2.8.1 and compiles fine , now I have to download 2 files : \nhttps://github.com/pornel/pngquant/archive/2.8.1.tar.gz\nhttps://github.com/ImageOptim/libimagequant/archive/2.8.1.tar.gz\nhttps://pkgs.fedoraproject.org/cgit/rpms/pngquant.git/commit/?id=fcfce9d374d48338d9fbbc22389934894ad8c6fd\n. Hi, if its help,  you got pngquant in epel7 repos  https://apps.fedoraproject.org/packages/pngquant \n. this is a duplicated issue with https://github.com/pornel/pngquant/issues/174 ? you may try libpng 1.6 , check it please https://tracker.debian.org/pkg/libpng1.6 . Due lack of time I hadn't do more but in Linux Fedora, we already have libimagequant built in separated package , also as tradition we use shared libraries , the current .so number is 0 [1] , numbering .so and do soname bumps should means abi/api changes ... \nSo use just pngquant source + [2] ( to ./configure ignore git ) and [3] , I built pngquant package against already build libimagequant.\nWhat I like do ? add option --use-external-libimagequant to pngquant \n[2]\n ln -s /usr/include/libimagequant.h lib/\n\n[3] \ndiff --git a/Makefile b/Makefile\nindex 351a91e..4d601f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -24,7 +24,9 @@ TESTBIN = test/test\nall: $(BIN)\n-ifeq ($(SHARED),1)\n+ifeq ($(EXTERN_SHARED),1)\n+  LIB = -limagequant\n+else ifeq ($(SHARED),1)\n   LIB=$(SHAREDLIB)\n else\n   LIB=$(STATICLIB)\n[1] \n/usr/lib64/libimagequant.so.0\nhttps://koji.fedoraproject.org/koji/rpminfo?rpmID=9511806\nhttps://koji.fedoraproject.org/koji/buildinfo?buildID=881445\nhttps://koji.fedoraproject.org/koji/packageinfo?packageID=23506. hello in reply , I'm testing build git master  with new option --with-libimagequant and fail in make test when test run test/test, running test/test exit 1 and prints [1]\neven if build and run test/test.c just with \nint main(void) {\n    assert(printf(\"OK\\n\"));\n    return 0;\n}\n[1]\n```\n sh-4.4#  test/test \npngquant, 2.9.1 (June 2017), by Kornel Lesinski, Greg Roelofs.\n   Compiled with OpenMP (multicore support).\n   Color profiles are supported via Little CMS. Using libpng 1.6.29.\nusage:  pngquant [options] [ncolors] -- pngfile [pngfile ...]\n        pngquant [options] [ncolors] - >stdout <stdin\noptions:\n  --force           overwrite existing output files (synonym: -f)\n  --skip-if-larger  only save converted files if they're smaller than original\n  --output file     destination file path to use instead of --ext (synonym: -o)\n  --ext new.png     set custom suffix/extension for output filenames\n  --quality min-max don't save below min, use fewer colors below max (0-100)\n  --speed N         speed/quality trade-off. 1=slow, 3=default, 11=fast & rough\n  --nofs            disable Floyd-Steinberg dithering\n  --posterize N     output lower-precision color (e.g. for ARGB4444 output)\n  --strip           remove optional metadata (default on Mac)\n  --verbose         print status messages (synonym: -v)\nQuantizes one or more 32-bit RGBA PNGs to 8-bit (or smaller) RGBA-palette.\nThe output filename is the same as the input name except that\nit ends in \"-fs8.png\", \"-or8.png\" or your custom extension (unless the\ninput is stdin, in which case the quantized image will go to stdout).\nIf you pass the special output path \"-\" and a single input file, that file\nwill be processed and the quantized image will go to stdout.\nThe default behavior if the output file exists is to skip the conversion;\nuse --force to overwrite. See man page for full list of options.\n sh-4.4# echo $?\n1\n```\n. It works correctly , thanks \n. Built it in Fedora rawhide [1] ... , maybe we can also add rust build , Fedora now got rust SIG [2], ah and now, at least for Linux Fedora (or shared libraries builds) , pngquant and libimagequant may have different versioning. \nBest regards.\n[1]\nhttps://koji.fedoraproject.org/koji/buildinfo?buildID=914580\nhttps://src.fedoraproject.org/cgit/rpms/pngquant.git/diff/pngquant.spec?id=8d2ddda1c3e8db74415374e3c2a2bc9c5eb49e14\n[2]\nhttps://fedoraproject.org/wiki/SIGs/Rust. > yum install pngquant\nyeah I maintain package pngquant in epel , the version is 2.7.2 , since 2.10 you need build first libimagequant, https://github.com/ImageOptim/libimagequant .\nanyway from where came node.js ?\n. ",
    "grepwood": "I've addressed this issue in pull #120. I think there should be 2 specs for when someone wants to use the old stable pngquant rather than the latest and the greatest.\n. ",
    "Cl3Kener": "@whizzkid That was fixed in 2.3.0.  \nSee here https://github.com/pornel/pngquant/commit/cb30c8a12859d8c591275bc44271d2a29c61b461\nIt works fine now.\n. ",
    "whizzkid": "No idea how to compile a windows .exe from the sources. any chance you can include it or post it somewhere?\n. on Windows 7, I keep getting :\nError: failed writing image to test.png\nwhen test.png exists  (created by running pngQuant once.. then trying the same commandline again)\npngquant.exe -f img\\test\\someImage.png -o test.png \n. ",
    "gradha": "The test you propose works fine using GIMP. After conversion through pngquant the print area is modified.\n\nI guess it's not a big deal since GIMP allows one to change the dpi metadata. Thanks for the support.\n. ",
    "designorant": "The way OSX handles this does make one weep indeed but the issue is partially about pngquant changing 144 to 72 dpi. Surely this is a bug?\n. > As far as I'm aware pngquant correctly preserves the standard DPI information embedded in PNG files when it's using libpng 1.5+.\nPlease excuse my ignorance here but is DPI information different to DPI metadata or the 'numbers' you mentioned earlier? Am I wrong to think that DPI information/metadata/numbers is one thing, and the xattr is another? The former seems constant and PNG-specific, the latter is OS X specific and helps to present the PNG more 'natively'. Reading your comments I find the line between supporting and ignoring DPI a bit blurry too.\n\nI'm testing on OSX Yosemite and quick look and Preview ignore DPI metadata (they will show you the numbers, but displayed size is wrong unless xattrs are copied)\n\nThis is exactly the reason why I suspect that pngquant has a bug. The numbers are right so why does pngquant change them?\n\nHowever, OS X does not support DPI metadata in PNG. It doesn't write it. It doesn't read it.\nInstead, OS X only uses its own undocumented non-standard hidden HFS-only metadata that gets lost when a file is copied or replaced by a program that isn't Apple's (see my previous comment).\n\nAgain, I understand what OS X does there visual-wise (I followed your quick test prior to my original question). What I cannot understand is why would the 144 dpi be changed to 72 dpi by pngquant?\nPlease consider the following:\n- Visual side aside, I open both NiceHighResScreenShot.png and Copy.png in Preview. Inspector shows 144 dpi.\n- I open both files in Adobe Photoshop CC (2014.2.2) and Photoshop says they are both 144 dpi. When I save both (unless with 'Save for Web' mode) they are kept with 144 dpi.\n- When I run both through pngquant (2.3.1) they are saved as 72 dpi ones.\nWhile this little detail does not do anything visual-wise at this point, it may be important for when software gets smarter in the high res future to come.\n. Third time's a charm, they say but maybe I did not make myself clear enough:\nMy comments are not about OS X. They are not about how PNGs look / get rendered. They are about pngquant itself.\nI have got a PNG file saved with 144 DPI. It is not a screenshot made on Retina OS X. It is a random picture of a random cat that I downloaded, converted into PNG and changed the DPI value in Photoshop. I do not expect the image to be shown relative to my system's resolution. I am used to a fact that almost everything is rendered at 72dpi anyway.\nNow, when I take that image and put it through pngquant, it changes its 144 DPI to 72 DPI.\nThe topic of the actual DPI on screens is a separate, somewhat convoluted story that largely does not matter, particularly on the web. Usually it just confuses the hell out of print-background designers but we do not know what the future will bring hence my point.\n. Very interesting! Thanks!\n. ",
    "songgeb": "cat NiceHighResScreenShot.png > Copy.png\nNow(mac os 10.13.2) the dpi of Copy.png is not be changed. But dpi of image through pngquant is still be changed.\nIt is so sad..... ",
    "xman123": "You can see it here:\nhttp://www.turboimagehost.com/p/20417725/vlcsnap-2014-10-05-12h18m04s61.png.html\n(warning, adult content, that is only example that I have in this moment, some user uploaded it)\nThanks.\n. Please try with this thumbnail:\nhttp://s5d4.turboimagehost.com/t/20417725_vlcsnap-2014-10-05-12h18m04s61.png\nwith this thumbnail I have this problem....\nThanks.\n. Great, now it working fine....thanks.\n. ",
    "kelson42": "$ pngquant --version\n2.0.0 (August 2013)\n. $ pngquant -v --ext=42 220px-Loop-diagram.png \n220px-Loop-diagram.png:\nThere were errors quantizing 1 file out of a total of 1 file.\nWhat does that mean? Is that an error? Is that a warning? Is the PNG invalid?\n. Works well. Thank you very much for your quick answer.\n. ",
    "justinriggio": "Upgrading is not an option for me. I guess I will have to find a different solution. Thanks! \n. ",
    "pixelschrubber": "Thank you for your rapid response. I didn't expect that :-)\nI tested this on different environments (OSX, Ubuntu Linux) with the newest pngquant version 2.3.1. The libpng was old, but I built it again with 1.6.13. Afterwards I tested again and got the following results:\nOriginal image:\n\nSimple conversion (pngquant fade-test.png) resulted in fade-test-fs8.png (which looks fine):\n\nConversion without Floyd-Steinberg (pngquant --nofs fade-test.png) resulted in fade-test-or8.png:\n\nIn the second converted image (fade-test-or8.png) one can see the different steps, which are generated. Is there a way of using the algorithm without Floyd-Steinberg but with a smooth gradient?\n. Thank you!\n. ",
    "chraac": "thanks for reply, and it work well right now\n. ",
    "toy": "Thanks!\n. Don't be sorry, such things happen. And I totally agree that changing tags is bad. I've noticed this as in my project I'm building multiple binaries from sources and the first check after successful compilation is presence of expected version in executable help output.\n. I was wondering as diff showed only copyright changes.\nAnd yes automating is a good idea ;)\n. ",
    "turboencabulator": "Thanks, that fixes the errors.\nThere are still a couple of  warnings, if you think it makes sense to fix them for old versions of libpng:\nrwpng.c: In function \u2018rwpng_write_image8\u2019:\nrwpng.c:549:5: warning: passing argument 3 of \u2018png_set_PLTE\u2019 discards \u2018const\u2019 qualifier from pointer target type [enabled by default]\n     png_set_PLTE(png_ptr, info_ptr, &mainprog_ptr->palette[0], mainprog_ptr->num_palette);\n     ^\nIn file included from /usr/include/libpng14/png.h:426:0,\n                 from rwpng.c:39:\n/usr/include/libpng14/png.h:2372:17: note: expected \u2018png_colorp\u2019 but argument is of type \u2018const struct png_color *\u2019\n PNG_EXPORT(void,png_set_PLTE) PNGARG((png_structp png_ptr,\n                 ^\n/usr/include/libpng14/pngconf.h:1361:58: note: in definition of macro \u2018PNG_EXPORT\u2019\n #  define PNG_EXPORT(type,symbol) PNG_IMPEXP type PNGAPI symbol\n                                                          ^\nrwpng.c:552:9: warning: passing argument 3 of \u2018png_set_tRNS\u2019 discards \u2018const\u2019 qualifier from pointer target type [enabled by default]\n         png_set_tRNS(png_ptr, info_ptr, mainprog_ptr->trans, mainprog_ptr->num_trans, NULL);\n         ^\nIn file included from /usr/include/libpng14/png.h:426:0,\n                 from rwpng.c:39:\n/usr/include/libpng14/png.h:2456:17: note: expected \u2018png_bytep\u2019 but argument is of type \u2018const unsigned char *\u2019\n PNG_EXPORT(void,png_set_tRNS) PNGARG((png_structp png_ptr,\n                 ^\n/usr/include/libpng14/pngconf.h:1361:58: note: in definition of macro \u2018PNG_EXPORT\u2019\n #  define PNG_EXPORT(type,symbol) PNG_IMPEXP type PNGAPI symbol\n                                                          ^\n. ",
    "jodiecunningham": "Looks like this is fixed on the latest git pull, closing!\n. I dug just a little more into this. The fuzzer was running with a memory limit of 50MB. (ulimit -Sv 50000)\nWhile running this through ImageMagick ,  IM only used 5MB of RAM. But for some reason, pngquant is using 36+MB for the same image. The full valgrind has it looping over that \"==20210== Use of uninitialised value of size 8\" block over 10,000 times, after which valgrind gives up tracking it.\nRunning with the ulimit will crash, but running with the memory set to unlimited completes with just an error. The memory usage is still pretty curious. \n. ",
    "dwbuiten": "\nCould you generate sharedobjs by replacement of OBJ? I'd like to avoid specifying same file twice.\n\nDo'h. Yes. I have updated the PR to reflect this.\n\nWhy $(subst lib/libimagequant.a,,$(LDFLAGS))?\n\nIt seems configure always adds the .a to LDFLAGS, which cannot work shared library linking (since it needs PIC code, which the .a is not). I am not sure what you use it for, so maybe you could explain it a bit.\n. > Oh, that may be a mistake. It's needed for pngquant binary, but shouldn't be added to flags of the library itself.\nLooks like it may have been a copy/paste error? PR updated.\n. @sergiomb2 That should probably be sent as a PR.\n. ",
    "unsalkorkmaz": "Ok. I had problems with non-latin filenames and that was solution. Thats it. Thanks for program again :)\n. Can you suggest a good jpg optimization program like pngquant for png? (sorry, totally off-topic)\n. ",
    "bluenlive": "I recommend mozjpeg.\nIt's being developed by Mozilla Foundation.\nhttps://github.com/mozilla/mozjpeg\n. Thank you.\n. ",
    "hachigoro": "I have the same issue. I use the same flags as you and I'm also in Windows 7 64 bit. I double checked that the files are not read only. I have also tried using the --output flag with the same file name, but I get the same error. \nThanks for your work! \n. I did some more research, and it seems that the \"rename\" function (pngquant.c line 760) does not work properly in Windows (works fine in Linux). If the target file already exists, most of the time (not always) it won't be able to replace it.\nThis behavior is documented here: https://www.securecoding.cert.org/confluence/display/cplusplus/FIO10-CPP.+Take+care+when+using+the+rename()+function\nAnd also here http://stackoverflow.com/questions/11021639/overwriting-files-in-windows-by-renaming-randomly-fails\nThe solution is, if the target file already exists, first remove it, then call rename. To be safe you can create a backup of the target file before removing it just in case rename fails.\n. Thanks for making that build. However when I run it, I get this message: \"Compiled without support for color profiles.\"\nI didn't see that message in previous versions, is that something to be concerned about?\nThanks.\n. ",
    "moazam1": "Noticed you fixed this issue but binary files are still not up to date.\n. ",
    "mahemoff": "Okay thanks Kornel. You might want to add it to the README/man page as it's not explicitly stated as the default, e.g. \"If this flag is omitted, the quality isn't constrained, i.e. it's equivalent to setting --quality=0-100\".\nI guess it became more obvious this is the default once I re-read the quality flag docs to understand what the quality flag means, but it took me a bit by surprise as as I initially assumed quality was the same as jpeg-style \"set image to this quality\".\n. ",
    "maxs15": "@Joezbx did you succeed ?\nAn example would be much appreciated :)\n. ",
    "jtressle": "@maxs15 @pornel @Joezbx Here's my working example to use pngquant in ios.  I used lodepng to convert from libimagequant back to png:\nUIImage to RGBA:\n```objc\n-(NSData ) rgbaFromImage:(UIImage )image\n{\n    CGImageRef imageRef = image.CGImage;\n_bitsPerPixel           = CGImageGetBitsPerPixel(imageRef);\n_bitsPerComponent       = CGImageGetBitsPerComponent(imageRef);\n_width                  = CGImageGetWidth(imageRef);\n_height                 = CGImageGetHeight(imageRef);\n_bytesPerRow            = CGImageGetBytesPerRow(imageRef);\nCGBitmapInfo bitmapInfo = kCGImageAlphaPremultipliedLast;\n\nCGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\n\nunsigned char *bitmapData = (unsigned char *)malloc(_bytesPerRow * _height);\n\nCGContextRef context = CGBitmapContextCreate(bitmapData,\n                                             _width,\n                                             _height,\n                                             _bitsPerComponent,\n                                             _bytesPerRow,\n                                             colorSpace,\n                                             bitmapInfo);\n\nCGColorSpaceRelease(colorSpace);\n\n//draw image\nCGContextDrawImage(context, CGRectMake(0, 0, _width, _height), imageRef);\n\n//free data\nCGContextRelease(context);\n\n//create NSData from bytes\nNSData *data = [[NSData alloc] initWithBytes:bitmapData length:_bytesPerRow * _height];\n\n//check if free is needed\nfree(bitmapData);\n\nreturn data;\n\n}`\nRGBA -> LibImageQuant -> PNG Data\n`-(NSData ) quantizedImageData:(NSData )data\n{\n    unsigned char bitmap = (unsigned char )[data bytes];\nunsigned char **rows = (unsigned char **)malloc(_height * sizeof(unsigned char *));\n\nfor (int i = 0; i < _height; ++i)\n{\n    rows[i] = (unsigned char *)&bitmap[i * _bytesPerRow];\n}\n\n//create liq attribute\nliq_attr *liq = liq_attr_create();\nliq_set_speed(liq, _speed);\n\nliq_image *img = liq_image_create_rgba_rows(liq,\n                                            (void **)rows,\n                                            (int)_width,\n                                            (int)_height,\n                                            _gamma);\n\nif (!img)\n{\n    NSLog(@\"error creating image\");\n}\n\nliq_result *quantization_result;\nif (liq_image_quantize(img, liq, &quantization_result) != LIQ_OK)\n{\n    NSLog(@\"error liq_image_quantize\");\n}\n\n// Use libimagequant to make new image pixels from the palette\nbool doRows = (_bytesPerRow / 4 > _width);\nsize_t scanWidth = (doRows) ? (_bytesPerRow / 4) : _width;\n\n//create output data array\nsize_t pixels_size = scanWidth * _height;\nunsigned char *raw_8bit_pixels = (unsigned char *)malloc(pixels_size);\n\nliq_set_dithering_level(quantization_result, 1.0);\n\nif (doRows)\n{\n    unsigned char **rows_out = (unsigned char **)malloc(_height * sizeof(unsigned char *));\n    for (int i = 0; i < _height; ++i)\n        rows_out[i] = (unsigned char *)malloc(scanWidth);\n\n    liq_write_remapped_image_rows(quantization_result, img, rows_out);\n\n    //copy data to raw_8bit_pixels\n    for (int i = 0; i < _height; ++i)\n        std::memcpy(raw_8bit_pixels + i*(scanWidth), rows_out[i], scanWidth);\n\n    free(rows_out);\n}\nelse\n{\n    liq_write_remapped_image(quantization_result, img, raw_8bit_pixels, pixels_size);\n}\n\nconst liq_palette *palette = liq_get_palette(quantization_result);\n\n//save convert pixels to png file\nLodePNGState state;\nlodepng_state_init(&state);\nstate.info_raw.colortype = LCT_PALETTE;\nstate.info_raw.bitdepth = 8;\nstate.info_png.color.colortype = LCT_PALETTE;\nstate.info_png.color.bitdepth = 8;\n\nfor (size_t i = 0; i < palette->count; ++i)\n{\n    lodepng_palette_add(&state.info_png.color, palette->entries[i].r, palette->entries[i].g, palette->entries[i].b, palette->entries[i].a);\n\n    lodepng_palette_add(&state.info_raw, palette->entries[i].r, palette->entries[i].g, palette->entries[i].b, palette->entries[i].a);\n}\n\nunsigned char *output_file_data;\nsize_t output_file_size;\n\nunsigned int out_state = lodepng_encode(&output_file_data,\n                                        &output_file_size,\n                                        raw_8bit_pixels,\n                                        (int)_width,\n                                        (int)_height,\n                                        &state);\n\nif (out_state)\n{\n    NSLog(@\"error can't encode image %s\", lodepng_error_text(out_state));\n}\n\nNSData *data_out = [[NSData alloc] initWithBytes:output_file_data length:output_file_size];\n\nliq_result_destroy(quantization_result);\nliq_image_destroy(img);\nliq_attr_destroy(liq);\n\nfree(rows);\nfree(raw_8bit_pixels);\n\nlodepng_state_cleanup(&state);\n\nreturn data_out;\n\n}\n```. ",
    "docal56": "Ok thanks, could you point me into the direction of where I might be able to get some help please? :)\u00a0\n\u2014\nSent from Mailbox\nOn Thu, Mar 26, 2015 at 11:24 AM, Kornel notifications@github.com wrote:\n\nClosed #148.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/pngquant/issues/148#event-265734603\n. Thanks - a colleague has sorted it :)\u00a0\n\n\u2014\nSent from Mailbox\nOn Thu, Mar 26, 2015 at 12:03 PM, Kornel notifications@github.com wrote:\n\nTry reporting it to author of the grunt plugin you've installed.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pornel/pngquant/issues/148#issuecomment-86484830\n. \n",
    "ignisf": "Can't cmake generate a VS project?\n. ",
    "VeryVery": "I wish someone contribute a vs2015 project.. ",
    "jibsen": "I believe there are two issues with adding a VS project:\n\nYou need the dependencies (libpng, zlib, and optionally lcms2), which do not come with Windows. There are various package managers/build tools that aim to fix this at some point (nuget, build2, vcpkg), but it's not really easy since you need the libraries linked to the same MSVC runtime as the application.\nA minor issue; pngquant uses getopt which MSVC does not provide\n. Here are the steps I've been using to compile pngquant on Windows using mingw-w64 and CMake:\nGet zlib, libpng, and pngquant. Unpack all three in a folder, this should give you a subfolder for each.\nGo into the zlib folder, and do cmake -G \"MinGW Makefiles\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=.. ., then make and make install. This will build zlib and install it into the top folder.\nGo into the libpng folder, and do the same\nPut this CMake script into the pngquant folder, enter it and do the same steps as for the other folders.\n\nNow you have pngquant.exe along with the zlib and libpng dll files in the bin folder.\nIt is possible to build a static pngquant as well, but it requires a little more work.\nThis could work for MSVC as well, except for the fact that it does not support C99.\n. I put the setup I currently use for building pngquant on Windows here, it includes Little CMS (though not tested). There are also some binaries built with mingw-w64.\n. Thanks for tagging a new release, I've updated pngquant-winbuild.\n. pngquant-winbuild updated to 2.8.2.\nIf you are interested @pornel, I have a branch that uses parg instead of getopt for parsing the command line options, which works with MSVC and other compilers that do not supply getopt.. @pornel, there were a few places I missed fixing for MSVC, but I didn't make a PR for them due to the getopt issue holding back compiling with MSVC as well. I'll take a look.\n@definename, OpenMP support allows pngquant to use multithreading to speed up processing. Unless you are converting many large images it will probably not make a big difference. It's easier to build pngquant with mingw-w64.. @definename In that case you only need to build libimagequant. I believe you just have to move the declarations of the loop variables outside the loops in libimagequant.c and viter.c.\n~~~.patch\ndiff --git a/libimagequant.c b/libimagequant.c\nindex 3c78dcd..1c2b3b3 100644\n--- a/libimagequant.c\n+++ b/libimagequant.c\n@@ -1191,9 +1191,10 @@ LIQ_NONNULL static float remap_to_palette(liq_image *const input_image, unsigned\n     }\n     viter_init(map, max_threads, average_color);\n\nint row;\n     #pragma omp parallel for if (rows*cols > 3000) \\\n         schedule(static) default(none) shared(average_color) reduction(+:remapping_error)\nfor(int row = 0; row < rows; ++row) {\n\nfor(row = 0; row < rows; ++row) {\n         const f_pixel const row_pixels = liq_image_get_row_f(input_image, row);\n         unsigned int last_match=0;\n         for(unsigned int col = 0; col < cols; ++col) {\ndiff --git a/viter.c b/viter.c\nindex a6e8b2d..d71f528 100644\n--- a/viter.c\n+++ b/viter.c\n@@ -87,9 +87,10 @@ LIQ_PRIVATE double viter_do_iteration(histogram hist, colormap *const map, vite\n     const int hist_size = hist->size;\ndouble total_diff=0;\n+    int j;\n #pragma omp parallel for if (hist_size > 3000) \\\n     schedule(static) default(none) shared(average_color,callback) reduction(+:total_diff)\n-    for(int j=0; j < hist_size; j++) {\n+    for(j=0; j < hist_size; j++) {\n     float diff;\n     unsigned int match = nearest_search(n, &achv[j].acolor, achv[j].tmp.likely_colormap_index, &diff);\n     achv[j].tmp.likely_colormap_index = match;\n~~~. Thanks for the new release, pngquant-winbuild updated to 2.9.0.. Besides this, the use of getopt in pngquant.c is the only issue I had compiling with MSVC.\n. > Do you have any suggestions what could be done for getopt?\n\n\nThere are a number of getopt clones that work with MSVC, you could include one of these. I also wrote a small getopt-like thing called parg.\n\nCan I consider your contribution licensed under BSD 2-clause license?\n\nSure.\n. ~~If you want to see what it would look like with parg, I made a branch with it here.~~\nI also found a few more MSVC issues in pngquant.c (missing C99 features mostly, and one omp for variable that sneaked past me :blush:).\n. > Can I consider your contributions licensed under the BSD 2-clause license?\nSure. Out of curiosity, why not GPLv3 like the file it regards?\n. I see. Please feel free to consider this contribution licensed under the BSD 2-clause license then.\n. I notice the versions you compile yourself appear to include lcms, while the 2.0.1 you link as giving you 66% does not. I wonder if this makes any difference for your image?\n. You have to tell the various programs to read and write from stdin/stdout. Something along the lines of:\n~~~.sh\nconvert test-image.jpg png:- | pngquant - >new-test-image.png\n~~~. You could try the --nofs option to disable dithering.. Just wanted to note that I keep builds with lcms2 and OpenMP at https://github.com/jibsen/pngquant-winbuild (though I haven't updated for 2.9.1 yet). If you want to build on Windows using mingw-w64 you can use that.. I think this might be an issue with Rust rather than Windows. The mingw-w64 builds I use work fine with paths containing non-ascii characters (and also include the wildcard expansion from the mingw runtime which is missing in the recent Rust builds).\nEdit: Actually, a quick test program seems to suggest Rust handles filenames with non-ascii characters fine.. After some playing around with this I tend to agree, filenames with unicode symbols not present in the ascii codepage sometimes give problems when you try to pass them to a mingw-w64 compiled program from a command prompt window.\nThe only problem with Rust is that it does not provide wildcard expansion on Windows (as far as I know).. Mingw has some code that performs the expansion before main is called, yes. MSVC has something similar, you just have to link with setargv.obj, which comes with the compiler.. You could try the binaries from pngquant-winbuild, but depending on if the character is in the codepage of the terminal or not, it may still not work.. Your original image contains a color profile, do you use a version of pngquant compiled with Little CMS?\nWhen I process the image with a pngqant with color profile support it seems to produce the correct yellow color.. ",
    "iwanbk": "Another info : i use pngquant binary from latest git version.\n. I have added -v option, you can find error messages below\nerror: Read error\n  error: rwpng_read_image() error 25\nThere were errors quantizing 1 file out of a total of 1 file\n. ",
    "polym": "+1\n```\n  Compiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\n    libpng: shared (1.5.21)\n      zlib: shared (1.2.8)\n     lcms2: no\n```\n. ",
    "MoonDevilzzz": "I have 2.4.1 version, libpng 1.2.49 & zlib 1.2.3 are installed, where can i get 2.3.5 for CentOS 6?I hope it will solve may problem :)\nupd 1\nTried another server but the same config, it gives 19Kb image:\n\nupd 2\nTried optipng - result is: \ntest.png is already optimized.\nupd 3\ninstalled pngquant 2.3.5 from  tarball, same problem :(\nupd 4\nTried Ubuntu 14 and pngquant 2.3.0, my gash its still 19KB size :( \nupd 5\ncompressing ur test picture: \n\nby my command line gives the same result as tinypng\nFrom 17Kb to 8Kb its ok, but with my picture fails , what a mindfuck :(\nupd 6\nmb it will help:\n\nupd 7\nWith the win binaries i got this:\n\ntest.png - image from the post-1\n. Dude!I caught it!\nVersion 2.0.0 do the 207 bytes file!\nWhats wrong with newest?\n. :dancer: \nHow can we do to prevent meta preserving ?\n. ",
    "agross": "Thanks, that pointed me in the right direction. My main display had an ICM profile assigned. After removing it and restarting Chrome, the yellowish tint was removed from the pngquant'ed images.\n. ",
    "myarashevich": "Images on dropbox just in case\nhttps://www.dropbox.com/sh/szs0ifp7ds3km86/AADwesMpvg4Yx8t4FE_-8ewAa?dl=0\n. ",
    "quiret": "I do not know. Just recently learned about Rust. I like the good performance of the libimagequant library, and as long as that stays, I guess it will be okay?\nMake sure you do not change the API. Btw, still waiting on that custom palette setting function. :-)\n. Yes! I also liq_set_max_colors to the amount I gave as \"fixed colors\", so I kinda tell liq to not modify the palette. The color search algorithm is pretty sweet I gotta say!\n. What an obscure scenario. What would this internal access by Windows be, anyway?\n. libimagequant is really powerful. I use it for general color palette generation and remapping independent from pngquant. Totally recommend you to write your own CLI or something, because the API is straight-forward!\n. ",
    "rcanavan": "While support for Linux may just be a question of time, older and/or more exotic platforms such as IRIX will probably never get a functioning rust compiler. Currently, pngquant can be compiled basically everywhere even with ancient C compilers. I'd prefer if you'd stick with C and not use features from standards newer than C99.\n. Thanks, we're not seriously using such small numbers of colors in production, this was just a test that failed. Since this is out of scope for pngquant, I'll close this issue.\n. Thanks.. ",
    "pickhardt": "I'd also recommend considering Go. It could be great for what you're trying to accomplish.. ",
    "ex": "Rust is fine, please not Go.. ",
    "ryanackley": "The screenshot is taken on OS X but pngquant is compiled and running on a linux server. It's compiled against libpng 1.6.18. \nMy image processing pipeline is this:\n1. Take a screenshot on Mac\n2. Add annotations using html.\n3. Send to server and rasterize to png with phantomjs\n4. Compress png with pngquant. \n5. Return to client\nIf I leave out step 4, the screenshot colors in the final image look exactly like the original. \nIt seems likely that the resulting image's gamma is different than the original's because the image is always slightly darker than the original when compressed with pngquant. From what I can tell the pngquant source code always sets the output gamma to 2.2, even if you have it set to something different in the source PNG file. Shouldn't that be a user setting? or shouldn't respect the gamma setting on the input?.What do you think?\n. ",
    "henrygg": "Here is a scenario, a thread creates a process to exec pngquant to compress a file and the thread waits for the file to be finished. To pngquant, if the output file and the input file has the same file name(kind of in-place compressing), it is possible the \"to\" file is still accessed when \"unlink\" is called against it. (The case occurs in the real scenario), it may be fully released after hundreds of microseconds \n. Specify input file name A and output file name A\nthe following occurs.\n1. Read A and Compress to B\n2. Unlink A\n3. Rename B to A\nif \"Unlink A\" is called at step 2  while A is still kind of accessed internally by Windows, it fails\nIf try a couple of times of continuously calling Unlink every 200 ms, \"A\" might be fully released and \"Unlink A\" will succeed.\n. ",
    "paperboyo": "Hello,\nI hardly know how to run cmd.exe. I have built pngquant.exe and libraries, but I have failed building little cms using above procedure (and https://github.com/mindw/little-CMS-cmake) :-(\nmake[2]: *** [CMakeFiles\\testcms.dir\\build.make:113: CMakeFiles/testcms.dir/testbed/zoo_icc.c.obj] Error 1\nmake[1]: *** [CMakeFiles\\Makefile2:289: CMakeFiles/testcms.dir/all] Error 2\nmake: *** [Makefile:138: all] Error 2\nAnd I have searched the whole of the interwebz to find Windows binary of pngquant with little cms colour profile support built in (ideally all as one exe).\nI don\u2019t suppose @cssignet would have one? \ud83d\ude0a All this is waaay above my understanding...\nRegards\nm.\n. Thank you kindly, @jibsen! \ud83c\udf86\n. ",
    "definename": "I am trying to build pngquant with this script cmake script. But during compilation I have this error:\n\nError 117 error C3019: increment in OpenMP 'for' statement has improper form [D:\\install\\libs\\libpng\\libpng_samples\\build\\vc12-x86\\static_mt\\libimagequant-prefix\\src\\libimagequant-build\\imagequant.vcxproj] D:\\install\\libs\\libpng\\libpng_samples\\build\\vc12-x86\\static_mt\\libimagequant-prefix\\src\\libimagequant\\lib\\libimagequant.c   1196    1   libimagequant\n\nThe error occurs in this file in line 1196\nWhat am I doing wrong and how can I fix this. Thanks.\nP.S. I am using Visual Studio 2013, pngquant-2.8.2 from msvc branch.\n. Thanks for the answer. Has just removed these lines from code and the library was built. What it can affect?. Got it. But I am going to use libimagequant internaly in my project in order to convert *.png images and my  build system is Microsoft Visual Studio.. Got it. Thanks. Library libimagequant built.. ",
    "JPeterMugaas": "If it helps, I did build libimagequant 2.8.2 for MINGW in the MSYS environment.  I did have to tweek the configure script to do it.  The work I had done is at:\nhttps://github.com/Alexpux/MINGW-packages/tree/master/mingw-w64-libimagequant\n. I'm thinking that maybe, one possibility might be redoing the configure build script to as a CMake (http://cmake.org) CMakeLists.txt file which Cmake could generate into a makefile.  That way, it could possibly with with Visual Studio, MINGW, as well as some Unix-like systems.. ",
    "TonyLuo": "have such issue when try to install pngquant-bin on win10.\n\nPS D:\\dev\\jhipster\\myApp> npm install --save pngquant-bin\n\npngquant-bin@3.1.1 postinstall D:\\dev\\jhipster\\myApp\\node_modules\\pngquant-bin\nnode lib/install.js\n\n\u203c unable to verify the first certificate\n  \u203c pngquant pre-build test failed\n  i compiling from source\n  \u00d7 RequestError: pngquant failed to build, make sure that libpng-dev is installed\n    at ClientRequest. (D:\\dev\\jhipster\\myApp\\node_modules\\got\\index.js:74:21)\n    at ClientRequest.g (events.js:291:16)\n    at emitOne (events.js:96:13)\n    at ClientRequest.emit (events.js:188:7)\n    at TLSSocket.socketErrorListener (_http_client.js:310:9)\n    at emitOne (events.js:96:13)\n    at TLSSocket.emit (events.js:188:7)\n    at emitErrorNT (net.js:1278:8)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)\nmy-app@0.0.0 D:\\dev\\jhipster\\myApp\n+-- UNMET PEER DEPENDENCY @angular/compiler@2.4.9\n+-- UNMET PEER DEPENDENCY @angular/core@2.4.9\n+-- pngquant-bin@3.1.1\n`-- UNMET PEER DEPENDENCY zone.js@0.8.2\n. \n",
    "Aliceljm1": "Hi @pornel  ,I am trying to use libimagequant in c#, I just build imagequant.dll successful, when I use https://github.com/ImageOptim/libimagequant/blob/msvc/libimagequant.cs this class to test the dll get a error \"System.BadImageFormatException An attempt was ma\nde to load a program with an incorrect format..\"  Do you know why? If you can send your  c# demo to my it's help a lot PS: I use .net 4.. Thanks @pornel ,I change c# project target to x86 and the dll is load success.But when I try to build a 64-bit imagequant.dll get errors :\ngcc -m64 -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I.\n-O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -fexcess-precis\nion=fast   -c -o pam.o pam.c\npam.c:1:0: sorry, unimplemented: 64-bit mode not compiled in\n /* pam.c - pam (portable alpha map) utility library\n ^\n: recipe for target 'pam.o' failed\nI just add -m64 in CFLAGS, is that means pam.c can not build whit 64-mode?\nPS: OS Is win7, mingw64\n. ",
    "swillits": "Cool. That's what my solution was too. :-)\nThanks.\n. ",
    "tkoenig": "Thanks for clarification. \nStill if you compare the images i have supplied the old version of pngquant comes closer to the original than the new one.\nSo what you are saying is the quality should be generally improved when switching to the new version, but not in all cases \u2013 is this assumption correct?\n. ",
    "cmyk": "Well, I don't know how to compile pngquant with 1.6.18.\n. @pornel, that didn't work. Tried that already.\n@sergiomb2 thanks for that but I tried to mess with experimental once, and it shot the whole system.\nIt wants to remove dependencies...\n```\n:~/src/pngquant-2.5.0$ sudo apt-get -t experimental install libpng16-dev\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  libcairo-gobject2 libcairo-script-interpreter2 libcurl4-gnutls-dev libdap-dev libgcrypt20-dev libgif-dev libgmp-dev libgmpxx4ldbl libgnutls28-dev libgnutlsxx28 libidn11-dev libjasper-dev libkrb5-dev liblzo2-2 libmysqlclient-dev\n  librtmp-dev libspatialite-dev libssh2-1-dev libtasn1-6-dev libtasn1-doc libxerces-c-dev libxext-dev nettle-dev unixodbc-dev x11proto-xext-dev\nUse 'apt-get autoremove' to remove them.\nThe following extra packages will be installed:\n  libpng16-16 libpng16-tools\nThe following packages will be REMOVED:\n  libcairo2-dev libfontconfig1-dev libfreetype6-dev libgdal-dev libgdal1-dev libpng12-dev\nThe following NEW packages will be installed:\n  libpng16-16 libpng16-dev libpng16-tools\n0 upgraded, 3 newly installed, 6 to remove and 125 not upgraded.\nNeed to get 736 kB of archives.\nAfter this operation, 36.1 MB disk space will be freed.\nDo you want to continue? [Y/n] n\n```\n. @pornel Thanks, for your time. I had compiled libpng 1.6.8.\nAnd there's the libs here \n:~/src/libpng-1.6.18/.libs$ ls -alh\n-rw-r--r-- 1 ### ### 1.4M Oct  1 12:02 libpng16.a\nI even tried to compile everything into one dir:\n ./configure --prefix=/home/###/libpng-install\nStill the same result:\n:~/src/pngquant-2.5.0$ ./configure --with-libpng=~/src/libpng-1.6.18/.libs/\nor #:~/src/pngquant-2.5.0$ ./configure --with-libpng=/home/###/libpng-install/lib/\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\n    libpng: shared (1.2.50)\n      zlib: shared (1.2.8)\n     lcms2: shared (2.6)\n. Weird... that worked!\nThanks a buch!\n```\n:~/src/pngquant-2.5.0$ ./configure --with-libpng=/home/###/src/libpng-1.6.18/\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\n    libpng: static (1.6.18)\n      zlib: shared (1.2.8)\n     lcms2: shared (2.6)\n```\n. ",
    "brianlukoff": "Thanks -- I was running libpng 1.2 (what was in the Ubuntu package manager) but just rebuilt pngquant using the latest 1.6 and so far so good. Will reopen this issue if I see the problem again!\n. ",
    "gaveezy": "I think the problem solved with lower quality parameter. My bad. Thank you for supporting.\n. ",
    "shalmuyakubov": "@petrdiblik , I have the same problem, PNGQuant wants to save with Q=24, but I set up min=30. \nOk, I set the min=24 and get the result. The size is too small and the quality is too low! So why can't I force it to save a bigger file, but with higher quality? Something doesn't match up here. What limits you from making it better quality? The image obviously can be better, because now the result is so low.. Thanks for such a clear explanation! I'll definitely try your tool.. ",
    "RGGN": "Ok! My fault! I'm using pngquant 2.0.1, libpng 1.2.50. I guess it's solved in the newest release. Sorry for the inconvenience!\n. ",
    "W1zzardTPU": "So the correct workflow is to use pngquant and after that use some software that strips all the metadata ?\nIs there any scenario in which pngquant's included metadata can be useful? If no, why even bother writing metadata? I'd expect a lot of users expect pngquant to do the right thing(tm) when at the end of the workflow.\nAny way to change the behavior using different libpng / libcms / no libcms / command line-switch?\n. The motorcycle original image in first post is sRGB, shouldn't the colors stay unchanged in that case?\n. [root@3ccee13c096b /]# identify -verbose Ducati_side_shadow.png\nImage: Ducati_side_shadow.png\n  Format: PNG (Portable Network Graphics)\n  Class: DirectClass\n  Geometry: 288x163+0+0\n  Resolution: 72x72\n  Print size: 4x2.26389\n  Units: Undefined\n  Type: TrueColorAlpha\n  Endianess: Undefined\n  Colorspace: sRGB\nSo I guess this is a case of ImageMagick not finding a color space and just assuming sRGB ?\n. ",
    "damucz": "Understood. I'm probably going to do a custom modification just for our purposes/toolchain. Thanks for the great tool.\n. ",
    "mianahmad": "Thanks @pornel  for replying..\ni am running those commands from php files.. shell access is enabled on my server..\n@sergiomb2 i also tried latest version...\nthen i also run this command \nexec('pngquant --version');\nbut nothing happen..\ni know your time is much more valuable according to me. but your few minutes can save my hours..\ni checked from error log i am getting this error:\nPHP Warning:  PHP Startup: Unable to load dynamic library '/usr/local/lib/php/extensions/no-debug-non-zts-20100525/pdo_mysql.so' - /usr/local/lib/php/extensions/no-debug-non-zts-20100525/pdo_mysql.so: cannot open shared object file: No such file or directory in Unknown on line 0\n. Well every thing is setup now...\nalso pngquantcommand is working...\ni run this command..\npngquant --version\nresult : 2.5.2 (October 2015)\nso it means extension is installed but its not working in my php file...\n. Thanks @pornel  for your valuable time..\nat last issue is solved... \ni used this command to compress image:\necho $get_compress = exec(\"find /image/source/path -name '*.png' -exec /usr/local/bin/pngquant -ext .png -force 256 {} \\;\");\n. ",
    "aklv": "BSD*, e.g. FreeBSD, Dragonfly, etc.\n. ",
    "abelnation": "But doesn't the pngquant cli program do much more than libimagequant?  e.g. rwpng.h/c has quite a bit going on inside that could be contained in a lib?  Perhaps I'm misunderstanding how the components work together...\n. ",
    "rr-": "\nIf map file has fewer than 256 colors, then specify that number of colors. Otherwise pngquant will use extra ones.\n\nI missed that, thanks. However, it still works funny:\n\n+\n\n+\nconsole\npngquant -f --map pal.png 4 -- test.png\n=\n\nNot sure where the orange was taken from?\n\n--map has a quirk that it ignores palette entries that aren't used in the given image\n\nI'm not sure I understand - so you're saying that if test.png has no red (#FF0000) color, the #FF0000 in palette won't be used to approximate pink (#FF8080) using a series of #FF0000/#FFFFFF?\n. Brilliant! Thanks.\n. ",
    "jamesbowman": "Thanks for the reminder. Closing.\n. ",
    "joliss": "Thank you, works great!\n. Addendum: Usually size is a monotonically increasing function of color count. So why should we care about optimizing for size, when we could simply treat color count as a proxy? I came up with two reasons:\n- It lets us come up with better algorithms: If we optimize a file for size, we might use a high number of colors for a small part of the image (e.g. a gradient), but choose not to use of those colors in the rest of the image. If our optimization goal is the number of colors, this makes no sense: Why wouldn't we use those colors everywhere in the image? But if our goal is file size, it does makes sense: The rest of the image might not benefit as much from more colors, and it will compress better if we restrict ourselves to a smaller palette.\n- It lets us get different quality levels once we're maxed out at 256 colors: If we can ask for a file size, like \"give me a 70 KB file\" or \"give me an 80 KB file\", a good algorithm might be able to produce a 70 KB file with 256 colors and an 80 KB file with 256 colors. If we can only ask for a color count, then once we're maxed out at 256 colors we can only get whatever size and quality the algorithm chooses for us (70 KB or 80 KB). In fact, I suspect that a good algorithm can max out at 256 colors quite early, so most of the \"interesting\" quality range will have the same color count but different file sizes.\n. Very interesting. I suppose there might not be a satisfactory solution then.\nI'll go ahead and close this. (Unless you want to keep it open of course.)\nIt's not clear to me that there's a way to improve the situation with bias or banding without sacrificing performance, but if you end up working on the perceptual weight function again and can think of something, perhaps the test images I've posted may come in useful somehow.\n. ",
    "evilebottnawi": "@pornel thanks, In the near future I will try to explore in more detail what is wrong is happening\n. ",
    "patricmutwiri": "We're in 2017 and I'm getting the error!. pngquant, 2.5.0 (June 2015), by Greg Roelofs, Kornel Lesinski.\nUsing libpng 1.2.54.\n. Horrribly outdated?  Like which one now?. ",
    "Khav21": "Thanks for the fast response \nIt would be nice if you could add an option for content directly as well in future\nConsider the following scenario\nPOST(RAM) -->Convert to PNG (RAM) -->Store on disk --> Pngquant -->Store on disk\nIf i could make pngquant accept content from RAM , I would store to disk only once.\nPOST(RAM) -->Convert to PNG (RAM) --> Pngquant(RAM) -->Store on disk\nKind Regards\n. ",
    "ingria": "Yes, only commas (no spaces between them) and parenthesis are allowed. Example config:\nbash\n10 - Requires: [ libc6,libgcc1 (>= 1:4.1.1),libncurses5,libpcap0.8 (>= 0.9.8) ]\nSame thing with Release.\n. Your .spec file has some kind of wildcard tags, which have to be replaced during the build (like %{?dist}). Seems like checkinstall takes these values \"as is\", without pre-processing.\nFor example, zlib%{?isa} has to be transformed into zlib(x86-64), but checkinstall uses the raw zlib%{?isa} value as requirement, which is incorrect and invalid.\nUnfortunately, I don't know what's the best way to fix this.\n. ",
    "Roy-Orbison": "@pornel Could you hint at strings we'd have to use in those places? I tried editing the fields but end up with errors like this:\n`Depends' field, syntax error after reference to package `zlib1g'\n\n. Worked around this by changing Release to 1 (simply removed suffix), and entered nothing for Depends (which I know is not the Right Way\u2122).\nVoil\u00e0; it's usable.. ",
    "ontick": "Thank you, pornel. I viewed that article. But I find that, if I use the original png file, the result is ok. If I use the compressed file by pngquant, the result is bad.\nSo I guess there is something difference between the original and the compressed png file at the border.\nCould you please help me find out the reason? \nThank you very much!\n. Hi pornel, thank you for your suggestions. I tried them, but they lead to another problem, reduced efficiency. I have more than 20 pngs need to load at one time when game play, so the best solution is preprocessing png before import them to the game editor.\nSo could you please help me add a param to the pngquant? eg, retain one pixel, that is to say, retain the RGB values of one pixel around the alpha=0 area; or remove one pixel, that is to say, remove the outter one pixel around the image.\nThank you very much.\n. \"change some transparent pixels to slightly non-transparent (alpha = 1)\"\nThat's great! But it's horrible to change it manually, cause we have more than 1000 pngs to change.\nSo can somehow change it automatically?\n. Thank you so much, pornel. With your opinion, I found a way to solve this problem.  Thank you again.\n. ",
    "MaikWagner": "Works fine, thx!\n. ",
    "wangruowr": "Thanks for the suggestion!\nI will have a try\n. ",
    "axelrose": "pkg-config finds the dependency. It is seemingly used in the configuration, see log above.\npkg-config  --libs libpng\n-L/opt/tools/ImageMagick-6.9.5-9/lib -lpng16\nmake test.shared works if I have LDD_LIBRARY_PATH set but failes otherwise.\nFor me it looks as if a simple compiler switch is missed which would leave the reference to the used shared libraries in the executable. This works well for me in my ImageMagick build but I cannot find out how ...\nRegards, Axel.\n. ",
    "RyanBram": "Currently I am using ImageMagick for helping my task, the following Windows batch script may useful for someone who need it:\nconvert.exe -append \"originalimagepath/*.png\" png:- | pngquant.exe --speed n 256 | convert.exe png:- -crop (original_width)x(original_height) \"resultpath/resultname_%%d.png\"\nThanks Kornel for the soluton.\nBest regards,\nRyanBram\n. Let's say I use ImageMagic's convert.exe to do the task you said.\nHow does it make my image looks better between using binary transparent image as input image before using pngquant and removing semi transparent after using pngquant?\nI just feel that pngquant will do the task better than other software if it support binary transparent isn't it?. The reason is like yours.\nYou added lossy feature in gifsicle because of animation support in GIF, isn't it?\nI also want to create animated GIF from PNGs, but cannot find a good way to remove their semi transparancies.\nAnyway, thanks for the answers.. ",
    "surighanta": "Errors are \n1. -quit option for find command\n2.  -E, -m, -o, -1 not supported in in grep command\n3. Shell script syntax errors\nSnippet:\ngrep: illegal option -- E\ngrep: illegal option -- o\nUsage: grep -hblcnsviw pattern file . . .\nCompiler: /usr/sfw/bin/gcc\n     Debug: no\ngrep: illegal option -- E\ngrep: illegal option -- m\ngrep: illegal option -- 1\nUsage: grep -hblcnsviw pattern file . . .\n./configure: line 271: [: auto: integer expression expected\n./configure: line 279: [: auto: integer expression expected\n    OpenMP: no\n    libpng: error ... not found (try: apt-get install libpng16-dev or apt-get install libpng-dev or yum install libpng-devel)\nI could not manage to fix them. I tried hard coding few things in the config script but that did not help.\n. I have installed libpng and zlib dependencies. But, since the find command is failing because of -quite option, script is assuming that it is not found. Same happening for following dependencies also.\nHowever removal of -quite from find command also did not help. \ni have tried with libpng shared library, copying libpng source to current directory also.\n. - Issue was with \"pkg-config\" and PKG_CONFIG_PATH. \n- Later we had some cosmetic issues with install, bu we managed them by running the commands manually without unsupported CLI options.\nWe are able to compile and install it now. Thanks for the support! Issue Closed.\n. ",
    "joinsunil": "@pornel How can i solve this in production. Where I need to add this check ?. @pornel Thanks for your reply , it works !! Can you please suggest one more thing , how can i restrict user to upload images between 65-80 ? I mean how can I check quality of an image out of the box ?. ",
    "iSergio": "Thanks for help, on this moment i write create png through libpng. ",
    "stenbock": "Yes.\n. ",
    "snasc": "Hi, thank you for reply. But the 22% reduction is Unacceptable, there must be something wrong.\nIn Ubuntu 14.04, then i get a 2.0.1 installed by apt-get install, it's ok, get the 66% reduction, the a3-fs8.png with 723 bytes.\n```\npngquant, 2.0.1 (September 2013), by Greg Roelofs, Kornel Lesinski.\n   DEBUG (slow) version.\n   Compiled with SSE2 instructions.\n   Compiled with libpng 1.2.49; using libpng 1.2.50.\nusage:  pngquant [options] [ncolors] [pngfile [pngfile ...]]\n```\nSo, seems like if it's compiled from source by me, then it has the problem. Below is a config.mk in CentOS:\n```\nauto-generated by configure\nPREFIX = /usr/local\nVERSION = 2.7.2\nCC = gcc\nCFLAGS = -O3 -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wn\nLDFLAGS =  ../libpng-1.6.26/.libs/libpng16.a -lz   -llcms2   -lm\nCOCOA_READER = 0\n```\nIs there anything wrong?\n. @jibsen , when i found the problem and start compiling by myself, there's no lcms installed. And the problem still there, so I specially add the lcms2, then no help. So i think that's not the reason.\n. [UPDATE]\nInspired by the 2.0.1 from apt-get, I got the 2.0.1 src and compiled it (Ubuntu 14.04), It's working!\n```\npngquant, 2.0.1 (September 2013), by Greg Roelofs, Kornel Lesinski.\n   Compiled with SSE2 instructions.\n   Compiled with libpng 1.6.26; using libpng 1.6.26.\nusage:  pngquant [options] [ncolors] [pngfile [pngfile ...]]\n```\nI get the 723 bytes a3-fs8.png, in OS X, it's exactly 723.\n-rw-rw-r-- 1 snasc snasc  723 Nov 19 17:05 a3-fs8.png\n-rw-r--r-- 1 snasc snasc 2100 Nov 19 16:31 a3.png\nThen in CentOS, I got the 2.0.2 src and compiled it, also solved the libpng16.so.16: cannot open shared object file: No such file or directory problem. It works too!\n[snasc@sftp pngquant-2.0.2]$ ./pngquant -fv a3.png \na3.png:\n  read 3KB file corrected for gamma 2.2\n  made histogram...58 colors found\n  eliminated opaque tRNS-chunk entries...23 entries transparent\n  mapped image to new colors...MSE=0.000 (Q=100)\n  writing 58-color image as a3-fs8.png\nNo errors detected while quantizing 1 image.\nSo, maybe the systems I used is too old, just match the pngquant 2.0.x. However, I will use 2.0.2, I really need solve this for now.\n. I mostly use the libpng 1.6.26 compiled from source.\nDo you use or test pngquant in a Ubuntu or CentOS, and which version of libpng do you use?\n. ok, I'll try different version of libpng, like 1.6.21, with the latest pngquant. And I'll test more images with the latest pngquant. If there's any good news, I'll remark it here.\nThanks again.\n. ",
    "imvetri": "purpose: it may help new visitors how good this tool is for them.. ",
    "Cat5TV": "We'll be featuring pngquant on Category5 Technology TV sometime in January 2017. We'll also be using it to reduce filesize on our own PNG images on the official web site via an automated cron script that goes out to our CDN, checks filesizes, and shrinks files automatically.. ",
    "ozozm": "For future readers with the same problem, I installed it using the yum command through SSH as follows...\nsudo yum install gcc\nyum install lib16-devel\nsudo yum install pngquant\n:). Thanks pornel, a much simpler solution :) \nSo put escapeshellarg() around image.png will secure it? or before hand in a variable?. Cheers, so tell me mate, if it can be done so simply, why do you post that elaborate script in the pngquant website? It sent me in completely the wrong direction.. Ok well thanks for everything, appreciate it.. ",
    "bdkjones": "There is a super rare edge case if someone were to pass an output path starting with a -, such as: -myoutputfile.png That would, under this pull request, trigger the stdout feature. This could be addressed by adding an additional check that the length of the optarg when it starts with - is 1. . Yea, it's just frowned upon for the potential overflow issue. . Yea, I meant in the general, \"Writing strcmp feels wrong,\" sense. Either way, just thought the pull request might be helpful. . Done.. Sure! It's like five lines of text; you can put it under any license you'd like!. Also: I emailed you about a license to include pngquant in a closed-source app (as per the note in the readme). Just wanted to ping you here in case you don't check that email address very often. Thanks again!. The quality parameter is actually --quality=0-100. It would also be useful to know what version of Firefox manifests the issue. Thanks!. ",
    "MACscr": "In a couple years? Jessie is supported till 2020.\n\nMark\n\n\nOn Mar 11, 2017, at 5:31 AM, Kornel notifications@github.com wrote:\nI don't know exactly why they built it with the buggy libpng. I guess it's might be an unfortunate combination of their policy and backwards-compatibility constraints.\nHowever, Debian testing has finally upgraded libpng, so this problem will go away.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. ",
    "matjazu": "I tried that, here is an example...\nconvert test-image.jpg -quality 100 | pngquant 150 --speed=8 > new-test-image.png\n ...or even simpler...\nconvert test-image.jpg | pngquant 150 > new-test-image.png\n... and it is not working, any ideas? \nWhen I ran commands separately and output it into file, there is no problem / error.\n. @jibsen Thank you very much, I missed that totally.. Thank you very much, that helped yes. \nI'm not sure if I should open another issue for this, but I noticed that when compressing with speed higher then 5 I start getting \"corrupted\" first vertical pixel line (looks like dotted 1px vertical line). See below:\nSpeed 5, first line is ok:\npngquant 256 --speed=5 --floyd=1 --strip -\nhttps://ibb.co/io3kvk\nSpeed 8, first line has vertical 1px dotted line:\npngquant 256 --speed=8 --floyd=1 --strip -\nhttps://ibb.co/hRW5vk\nBe sure you open images in natural size, otherwise vertical pixel dotted line is not visible.\nI noticed this issue only when compiling my own 2.9.1 pngquant with either 1.2.5 libpng or 1.6.29 libpng. Updated zlib or lcms2 didn't help either. However when I use Debian's version of pngquant (2.3) there is no such an issue.\nAny ideas?. Sure. PNG file. I'm confirming that second issue of this ticket is also resolved.\n@pornel you'r dbest :). I am using latest 2.9.1 (April 2017) pngquant compiled on my Debian Jessie with static libpng-1.6.29 and static zlib 1.2.11 But when I use official old 2.3.0 (July 2014) from Debian repo, I don't have this issue. Is it possible that latest libpng or zlib are the reason for this issue?. I narrowed the issue down to boost variable inside lib/pam.c file.\nlib/pam.c\nboost = 10;(line 48) \nIf I remove this line that was introduced with commit fb571df issue disappears. Is there anything that you / we can do about this? If we remove this what are the consequences?. I also figure it out that this transparency issue is somehow connected to the --speed option too:\n(case of pineapple image)\n- at speed 8 issue starts at color option around 100 and lower (lower we go, more visible the issue gets)\n- at speed 7 issue starts at color option around 16 and lower\n- at speed 6 issue starts at color option around 14 and lower \n- at speed 5 issue starts at color option around 6 and lower \nI run pngquant with the following options:\npngquant 30 --speed=8 --floyd=1 -\nMeanwhile I build it like this:\n- clone the whole pngquant repo\n- download both libpng & zlib as subfolder inside pngquant folder\n- compile first libpng & zlib and then also pngquant\nOutput of compiler:\n```\nmatjaz:~/utils/pngquant_make/pngquant$ ./configure && make\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\n    libpng: static (1.6.29)\n      zlib: static\n     lcms2: no\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o pngquant.o pngquant.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o rwpng.o rwpng.c\nmake -C lib static\nmake[1]: Entering directory '/home/matjaz/utils/pngquant_make/pngquant/lib'\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o pam.o pam.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o mediancut.o mediancut.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o blur.o blur.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o mempool.o mempool.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o kmeans.o kmeans.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o nearest.o nearest.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast   -c -o libimagequant.o libimagequant.c\nar rv libimagequant.a pam.o mediancut.o blur.o mempool.o kmeans.o nearest.o libimagequant.o\nr - pam.o\nr - mediancut.o\nr - blur.o\nr - mempool.o\nr - kmeans.o\nr - nearest.o\nr - libimagequant.o\nmake[1]: Leaving directory '/home/matjaz/utils/pngquant_make/pngquant/lib'\ngcc pngquant.o rwpng.o lib/libimagequant.a -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./libpng-1.6.29 -I./zlib-1.2.11 -fexcess-precision=fast ./libpng-1.6.29/.libs/libpng16.a ./zlib-1.2.11/libz.a -lm -o pngquant\n```\nIs there anything that can be done to prevent this issue at high speed?. OK, tnx.. Thank you for explaining.. Ok, thank you for the info.. ",
    "nicooprat": "Same issue here. Looks like lowering the quality option <50 makes it work again, even if it's not a valid workaround in the long term: https://github.com/roots/sage/issues/1780#issuecomment-269038138.. ",
    "CvH": "tx for quick response, I was missleaded from the homepage\n\n. ",
    "krompir2": "Thanks for a quick replay. I think I'm gonna go with \"find and remove all overrides of library paths\".\nDoes this mean I just grep my computer for DYLD_LIBRARY_PATH and DYLD_FRAMEWORK_PATH string and delete every line starting with export?. did sudo grep -rnw . -e \"DYLD_LIBRARY_PATH\" on a /Applications/XAMPP folder.\nI ended up commenting out export DYLD_LIBRARY_PATH in\n./xamppfiles/bin/envvars-std\n./xamppfiles/bin/envvars\n./xamppfiles/xampp\nAfter restarting apache, pngquant still doesn't work.\nphpinfor() has 3 occurances of DYLD_LIBRARY_PATH\nUnder environment:\nDYLD_LIBRARY_PATH  /Applications/XAMPP/xamppfiles/lib:/Applications/XAMPP/xamppfiles/lib\nUnder PHP variables:\n_SERVER[\"DYLD_LIBRARY_PATH\"]\n/Applications/XAMPP/xamppfiles/lib:/Applications/XAMPP/xamppfiles/lib\nUnder Apache environment:\nDYLD_LIBRARY_PATH  /Applications/XAMPP/xamppfiles/lib:/Applications/XAMPP/xamppfiles/lib\nI am not sure what should I do with those values..\nFul results of grep:\n./bin/apr-1-config:41:SHLIBPATH_VAR=\"DYLD_LIBRARY_PATH\"\n./bin/envvars:21:if test \"x$DYLD_LIBRARY_PATH\" != \"x\" ; then\n./bin/envvars:22:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib:$DYLD_LIBRARY_PATH\"\n./bin/envvars:24:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib\"\n./bin/envvars:26:export DYLD_LIBRARY_PATH\n./bin/envvars-std:21:if test \"x$DYLD_LIBRARY_PATH\" != \"x\" ; then\n./bin/envvars-std:22:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib:$DYLD_LIBRARY_PATH\"\n./bin/envvars-std:24:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib\"\n./bin/envvars-std:26:export DYLD_LIBRARY_PATH\nBinary file ./bin/httpd matches\n./bin/icu-config:318:LDLIBRARYPATH_ENVVAR=\"DYLD_LIBRARY_PATH\"\ngrep: ./logs/cgisock.26131: Operation not supported on socket\n./xamppfiles/bin/apr-1-config:41:SHLIBPATH_VAR=\"DYLD_LIBRARY_PATH\"\n./xamppfiles/bin/envvars:21:if test \"x$DYLD_LIBRARY_PATH\" != \"x\" ; then\n./xamppfiles/bin/envvars:22:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib:$DYLD_LIBRARY_PATH\"\n./xamppfiles/bin/envvars:24:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib\"\n./xamppfiles/bin/envvars:26:export DYLD_LIBRARY_PATH\n./xamppfiles/bin/envvars-std:21:if test \"x$DYLD_LIBRARY_PATH\" != \"x\" ; then\n./xamppfiles/bin/envvars-std:22:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib:$DYLD_LIBRARY_PATH\"\n./xamppfiles/bin/envvars-std:24:  DYLD_LIBRARY_PATH=\"/Applications/XAMPP/xamppfiles/lib\"\n./xamppfiles/bin/envvars-std:26:export DYLD_LIBRARY_PATH\nBinary file ./xamppfiles/bin/httpd matches\n./xamppfiles/bin/icu-config:318:LDLIBRARYPATH_ENVVAR=\"DYLD_LIBRARY_PATH\"\n./xamppfiles/build/config_vars.mk:37:SHLIBPATH_VAR = DYLD_LIBRARY_PATH\n./xamppfiles/build/libtool:228:variables_saved_for_relink=\"PATH DYLD_LIBRARY_PATH  GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\n./xamppfiles/build/libtool:243:shlibpath_var=DYLD_LIBRARY_PATH\n./xamppfiles/include/apr-1/apr.h:616:#define APR_DSOPATH \"DYLD_LIBRARY_PATH\"\nBinary file ./xamppfiles/lib/instantclient/libclntsh.dylib matches\nBinary file ./xamppfiles/lib/instantclient/libclntsh.dylib.11.1 matches\nBinary file ./xamppfiles/lib/instantclient-11.2.0.3.0/libclntsh.dylib matches\nBinary file ./xamppfiles/lib/instantclient-11.2.0.3.0/libclntsh.dylib.11.1 matches\nBinary file ./xamppfiles/lib/libaprutil-1.0.dylib matches\nBinary file ./xamppfiles/lib/libaprutil-1.a matches\nBinary file ./xamppfiles/lib/libaprutil-1.dylib matches\nBinary file ./xamppfiles/lib/libgettextlib-0.18.1.dylib matches\nBinary file ./xamppfiles/lib/libgettextlib.a matches\nBinary file ./xamppfiles/lib/libgettextlib.dylib matches\nBinary file ./xamppfiles/lib/libltdl.3.1.0.dylib matches\nBinary file ./xamppfiles/lib/libltdl.3.dylib matches\nBinary file ./xamppfiles/lib/libltdl.a matches\nBinary file ./xamppfiles/lib/libltdl.dylib matches\n./xamppfiles/lib/perl5/5.16.3/darwin-thread-multi-2level/Config.pm:97:    ldlibpthname => 'DYLD_LIBRARY_PATH',\n./xamppfiles/lib/perl5/5.16.3/darwin-thread-multi-2level/Config_heavy.pl:927:ldlibpthname='DYLD_LIBRARY_PATH'\n./xamppfiles/lib/php/build/libtool.m4:1525:  shlibpath_var=DYLD_LIBRARY_PATH\nBinary file ./xamppfiles/lib/php/extensions/no-debug-non-zts-20131226/oci8.a matches\nBinary file ./xamppfiles/lib/php/extensions/no-debug-non-zts-20131226/oci8.so matches\ngrep: ./xamppfiles/logs/cgisock.26131: Operation not supported on socket\n./xamppfiles/share/doc/gettext/examples/build-aux/csharpexec.m4:60:              CLIX_PATH_VAR=DYLD_LIBRARY_PATH\n./xamppfiles/share/doc/gettext/examples/hello-c++-kde/admin/libtool.m4.in:1143:  shlibpath_var=DYLD_LIBRARY_PATH\n./xamppfiles/share/icu/4.8.1.1/config/mh-darwin:39:LDLIBRARYPATH_ENVVAR = DYLD_LIBRARY_PATH\ngrep: ./xamppfiles/var/mysql/mysql.sock: Operation not supported on socket\n./xamppfiles/xampp:163: unset DYLD_LIBRARY_PATH\n./xamppfiles/xampp:285: unset DYLD_LIBRARY_PATH\n./xamppfiles/xampp:452:    if test -z $DYLD_LIBRARY_PATH\n./xamppfiles/xampp:454: export DYLD_LIBRARY_PATH=\"$LIBRARY_PATH\"\n./xamppfiles/xampp:456: export DYLD_LIBRARY_PATH=\"$LIBRARY_PATH:$DYLD_LIBRARY_PATH\". I've started the computer today, with the commented out export settings from yesterday. I had to run sudo apachectl start and sudo apachectl stop, because the gui start didn't want to start.\nI have no idea why gui restart button didn't actually restart server settings yesterday, but today am running pngquant on mac successfully.  Thank you so much for helping me out.\nOn a side note, I've measured the speed of compression, and it takes about 0.6s for mostly transparent black and white 3800px x 3400px image. The size goes from 1.1MB to 450KB. I've used --speed 10. Is there something else I can do speed up the compression? \nI noticed that you wrote an overview of png compression techniques. Can you recommend one that offers comparable compression to yours (10-30% bigger file size is still acceptable), but has a significant speed bonus when dealing with large black and white images? . ",
    "bydbest": "solved. Updated to latest version of pngquant. color profiles are supported in latest version. Installed latest version of pngquant then also getting the same error.\npngquant, 2.9.1 (April 2017), by Kornel Lesinski, Greg Roelofs.\n   Compiled with no support for color profiles. Using libpng 1.6.28.\n. i tried one png image and got the same error with version 2.9 and 2.8 then installed 2.72 and it works without any issue\nInstalling lcms2 will improve quality of compressed images ??. ",
    "winnchen": "solve my problem. ",
    "Hinidu": "Hi! I'm getting the same error for some images in batch mode on Windows. I've installed pngquant 2.8.1 using chocolatey and checked that it is the same as the binary from the official website.. Can I find compiled newer version for Windows somewhere? On the official site I see only 2.8.1.. I understand \ud83d\ude22 Perhaps I could try to do that myself. I will notify you if my attempt will be successful.. Is it possible to build pngquant with lcms2 or openmp on Windows? And what are the pros and cons of them?. I've built pngquant from msvc branch using instructions from INSTALL (luckily without any problem \ud83d\ude2e).\nBut this branch doesn't have the latest fixes from master branch so I'm still getting \"Wrote palette index exceeding num_palette (libpng failed)\" errors.\nI can try to make pull requests to update msvc branch or will you do it yourself?. By the way in the new version some other problems are fixed (for example the loss of IEND chunk in batch mode sometimes).. I've created PR for libimagequant https://github.com/ImageOptim/libimagequant/pull/5.\nIf I understand correctly it needs to be merged to allow me create the PR using updated libimagequant to pngquant itself.. @jibsen Thanks for the tip. I still can't build pngquant with OpenMP support because my local isntallation of gcc doesn't support it. But maybe it will be more performant to leave my build without OpenMP and run many instances in parallel.\nAlso I don't know whether I need lcms2 support or not.. @pornel I have built the latest version of pngquant including https://github.com/pornel/pngquant/pull/249 for Windows but without OpenMP and lcms2 support. I can publish this binary somewhere if you need it.. ",
    "rhastantram": "@pornel Thanks a bunch, i was using 2.4.1. It doesn't happen with latest version 2.9.1. . ",
    "epozuelo": "IIUC, that check is different. That check is for height * width, or actually for height * row_width (because row_width can be higher than width). However this malloc is doing height * sizeof(pointer).\nNow imagine an image that is incredibly high and narrow. e.g. 2^31 px high, and 1px wide. Then if for some reason row_width == 1, the first check will be false. However (height * sizeof(row_pointers[0])) will overflow.\nMaybe I'm missing something, or maybe this scenario is not possible because it's not possible to build such an image, or because row_width will be higher in that case. However a quick read of the png spec suggested that this height is possible, so perhaps a check should be added.. ",
    "phonphen": "that mean pngquant 2,10.0 only for windows x64 ?\nnot like previous version 2.81 that can run in windows x86. ok, its fixed now \nthanks \ud83d\ude04 . same to me\nin website says  v2.12.2\nbut it report version 2.12.0\n\n. ",
    "pflacson": "I've the same thing on my computer (so I can't use it), and this on my laptop (Windows 7 Home Edition 64 bits)!!!\n\nI had to download this : https://www.microsoft.com/en-US/download/details.aspx?id=40784\n. Yes it's working, thank you!! but it's less simple to use pngquant now than before (I have your precedent 2.8.1 too). I've a error when I prompt \"pngquant .png\"...can't find files.... and I have performance problem too with big pics but maybe it's wanted for pngquant 2.10 because sometimes it compress more?? in complement can you add the folder support ?? thank you!!. Hello pornel !\nCan you provide Pngquant 2.10.1 32 bits for Windows ?. Hello again,\nI just wanted to do test with the new version if it's possible.... I have 2.8.3 32bits and it's more easy to use for my scripts (pngquant .png don't find any files on last version).. Also it's possible 32 bits with big image done the job quicker than 64 bits ?? (my system has 64 bits)... or it's because you change the compression level ?\nThank you !. Thank you very much Furniel !!\nPornel, I don't understand why then this compilation is quicker on my 64bit system ??\nAnd pngquant *.png works with x86 ! Strange..... I've a lot of big Png32 images to convert lije this http://www.powerpointhintergrund.com/uploads/2017/05/pics-photos-teal-abstract-background-32.png\nI'm working on my laptop Windows 7 Home Edition 64 bits and I've just compared :+1: \nPngquant 64-bit https://pngquant.org/pngquant-windows.zip\nPngquant 32-bit Furniel\nThe CPU N3710 Intel Pentium 64-bit\nSo everything is 64 bits!!\nPngquant 32-bit compress the new Png quicker than the Pngquant 64-bit!! I don't understand why the 32-bit is quicker and also the 2.8.3 (32-bit) is too!! It's not a big deal but I'm curious.... I always prefer 64-bit version because it's quicker on other programs.. but not here!! The difference is just few seconds for one file.. but I've like 3000 Png like this.... also the result is not exactly the same sometimes!!\nJust tell me if I do this wrong and thank you for your wonderful program!!!. Thank you Furniel !\nI confirm it's more quicker with your binary x64 !!\n. ",
    "Divya063": "@pornel @Furniel While running the commandpngquant *.png in command line I'm getting this error  error: cannot open *.png for reading\nI'm using Windows 10 64 bit. ",
    "lensonsaldanha": "I'm on Centos \nHow do I use an aboslute path to the pngquant executable?\nThis is the path where it is installed\n\nwhich pngquant\n/usr/local/bin/pngquant\n. I got it working with absolute path.\nThanks for your quick reply.\n\nHere is the working php code for my problem\n\nshell_exec('/usr/local/bin/pngquant --quality=65-80 test.png --output test-small.png');. I tried that too, and I got this:\nmake\nmake: *** No targets specified and no makefile found.  Stop.\n. Nevermind, I just did this and it worked for me\nyum install pngquant. \n",
    "borzenkovdev": "@lensonsaldanha  Hello! Thansk for solution\nI got it working with absolute path too. . ",
    "asarubbo": "the output refers to 2.7.2 but the issue is reproducible in 2.10.1 as well. I'm using 2.7.2 I realized now that it isn't the latest upstream.\nI used 2.7.2 because is the latest I found in our repository.. It is fine with 2.10.1. ",
    "CombesA": "I've download it from your website, so I guess I have 2.10.1, though pngquant -v doesn't work.. Woaw, yeah for some reasons pngquant -V workd but not pngquant -v, anyway, even if I download it from your website, I only have the 2.4.0 from April 2015.\nEDIT:\nI've put the exe in my PATH variable, and if I run pngquant -V from anywhere but the pngquant folder, I have the 2.4.0. If I do it on the pngquant though, I got the 2.10.1. So that's weird...\nEDIT2:\nAlright, the 2.4.0 version of pngquant was in a depedency of a package I've installed before in global. I didn't know pngquant was in there. I just uninstall the package and now it works perfectly, I'm just a bit dumb ahah. Thanks anyway !. ",
    "ilovezfs": "@pornel ah OK! Would there be any reason for Homebrew to switch over to a rust based build now?. @pornel nope, it's not a problem. We have 13 formulae other than rust itself using cargo.. @pornel https://github.com/Homebrew/homebrew-core/pull/16543. @pornel same question RE: 2.10.2 vs. 2.11.2. OK. Our livecheck stuff tries to honor https://github.com/pornel/pngquant/releases/latest since some upstreams are very picky about that but I'll see what I can do.. @pornel it may be worth using the API https://developer.github.com/v3/repos/releases/#create-a-release to automate keeping https://github.com/pornel/pngquant/releases matching https://pngquant.org/releases.html. ",
    "tipuraneo": "When will the fix/next version be released?. Hi guys,\nI downloaded \nC:\\Program Files\\pngquant>pngquant.exe\npngquant, 2.11.2 (November 2017), by Kornel Lesinski, Greg Roelofs.\n   Color profiles are supported via Little CMS. Using libpng 1.6.34.\non my Windows 8.1 x64\nbut Encoding Problem remains.\nC:\\Program Files\\pngquant>\"Drag PNG here to reduce palette automatically.bat\" \"C:\\Pl\u00e4ne\\+00 EG WLAN Ist.png\"\nC:\\Pl\u251c\u00f1ne\\+00 EG WLAN Ist.png:\n  error: cannot open C:\\Pl\u251c\u00f1ne\\+00 EG WLAN Ist.png for reading\nThere were errors quantizing 1 file out of a total of 1 file.\nWhere can I find a compiled Windows binary I can use temporarily till the bug is fixed?. In my case it does work. Thx.. ",
    "Js41637": "Not sure if it's also related to this issue but doing pngquant ./images/*.png no longer works for me. It says it couldn't open the path for reading using the latest versions. I had to go back to version 2.9. ",
    "PhonyWelder": "If globs on Windows causes problems than maybe drop its support in favor of unicode names (Windows supports UTF-16LE but current pngquant sends UTF-8)? \nEven DOS have \"for\" command, so basic things like \"*.png\" will work: https://www.computerhope.com/forhlp.htm. _wfopen https://msdn.microsoft.com/en-us/library/yeby3zcb.aspx ?. ",
    "7snovic": "are you sure that you'd ran make before make install ?. it's the first time to know that pngquant is not a stable, However I wanted to use pngquant because it's a ready-to-go solution so I don't need to re-invent the wheel.. aha I see, OK I will try to check out the library instead of pngquant.. ",
    "futureweb": "I got the same Problems on Centos/RHEL 7 when trying to compile latest GIT Version:\n```\nserver pngquant# make\n./configure\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\nimagequant: build static\n    libpng: shared (1.5.13)\n      zlib: shared (1.2.7)\n     lcms2: shared (2.6)\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./lib -I/usr/include/libpng15       -DUSE_LCMS=1 -fexcess-precision=fast   -c -o pngquant.o pngquant.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./lib -I/usr/include/libpng15       -DUSE_LCMS=1 -fexcess-precision=fast   -c -o pngquant_opts.o pngquant_opts.c\ngcc -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -std=c99 -I. -O3 -DNDEBUG -DUSE_SSE=1 -msse -mfpmath=sse -Wno-unknown-pragmas -I./lib -I/usr/include/libpng15       -DUSE_LCMS=1 -fexcess-precision=fast   -c -o rwpng.o rwpng.c\n( cd './lib'; ./configure '--quiet'  )\nwarning: unknown switch --quiet (see ./configure --help for the list)\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\nmake: *** No rule to make target lib/Cargo.toml', needed bylib/libimagequant.a'.  Stop.\n```\nAndreas Schnederle-Wagner. info: lib Folder wasn't updated -that's why the Error occured ... after a recursive GIT clone it's working ... :). Update:\n- 2.11.2 working\n- 2.11.4 working without OpenMP - otherwise crash\n\n2.11.6 crashes with Segfault\n2.11.7 image degradation Problem. @kornelski - good guess ... seems to work without OpenMP!\n\n```\n./configure --with-libpng=/usr/local/ --enable-sse\nCompiler: gcc\n     Debug: no\n       SSE: yes\n    OpenMP: no\nimagequant: build static\n    libpng: static (1.6.34)\n      zlib: shared (1.2.7)\n     lcms2: shared (2.6)\npngquant, 2.11.7 (January 2018), by Kornel Lesinski, Greg Roelofs.\n   Color profiles are supported via Little CMS. Using libpng 1.6.34.\n/usr/local/bin/pngquant --verbose --skip-if-larger --speed=1 --output='/path/test1_OPTIM.png' --force --quality=60-90 '/path/test1.png'\n/path/test1.png:\n  read 935KB file\n  made histogram...28145 colors found\n  selecting colors...2%\n  selecting colors...4%\n  selecting colors...17%\n  selecting colors...29%\n  selecting colors...31%\n  selecting colors...44%\n  selecting colors...57%\n  selecting colors...70%\n  selecting colors...82%\n  selecting colors...95%\n  selecting colors...100%\n  moving colormap towards local minimum\n  eliminated opaque tRNS-chunk entries...0 entries transparent\n  mapped image to new colors...MSE=2.250 (Q=92)\n  writing 24-color image as test1_OPTIM.png\n  copied 9KB of additional PNG metadata\nQuantized 1 image.\n```. ",
    "pascaloliv": "Same issue on CentOS 7.4 when trying to install pngquant. \nI tried to install libpng-devel but it did nothing more... \nAny news on this issue ?\n```\n\npngquant-bin@3.1.1 postinstall /srv/app/node_modules/pngquant-bin\nnode lib/install.js\n\n\u26a0 The /srv/app/node_modules/pngquant-bin/vendor/pngquant binary doesn't seem to work correctly\n  \u26a0 pngquant pre-build test failed\n  \u2139 compiling from source\n  \u2716 Error: pngquant failed to build, make sure that libpng-dev is installed\n    at ChildProcess.exithandler (child_process.js:275:12)\n    at emitTwo (events.js:126:13)\n    at ChildProcess.emit (events.js:214:7)\n    at maybeClose (internal/child_process.js:925:16)\n    at Socket.stream.socket.on (internal/child_process.js:346:11)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at Pipe._handle.close [as _onclose] (net.js:554:12)\n``. This comment helped me to buildpngquant`.\nhttps://github.com/kornelski/pngquant/issues/231#issuecomment-289265273\nFor your information, the following one for mozjpeg if you have error to compile from source too.\nhttps://github.com/imagemin/imagemin-mozjpeg/issues/1#issuecomment-52784569. ",
    "joshfriend": "Thanks, it looks like you are correct! Sorry for my confusion.. ",
    "alpha0010": "I am using https://packages.ubuntu.com/trusty/pngquant .  I will look into self-building it, or see if it is possible to upgrade my OS.  (This is a work environment...). ",
    "DavisDev": "Now work good!\nThanks!. ",
    "fangqiao": "I compiled directly from git on Centos, using ./configure & make. Can you point me to the document about compilation with color profile support? Or if no documentation for it, can you tell me how to do it? Thanks. I have figured it out by reading the configure script. Need to run ./configure --with-lcms2. And the new version's out has correct color. Thanks.. ",
    "rfs-": "Just wanted to follow up on this. Almost a year later and still getting this error. I believe I was on  2.11 then updated last night to 2.12 and still continue to receive this error. libpng v1.6.35\nPNG-files again I'm pretty sure. Specifically I know when I export png-8's out of Adobe Fireworks and try to process, it throws this error.\nAttached is a test image that should throw the error (unless github does some other processing to change the image).\n\n. ",
    "kevinji": "The current default script is ./configure && make && make test; is there something else that needs to be run?. Yeah, I haven't gotten around to trying a manual install, but I'll take a look in a bit. Feel free to add your own changes if you'd like.. Alright, I've finally gotten some free time to fix the build. The Linux build now pulls the source of libpng16-16 from xenial and builds that instead.. ",
    "jet6666": "This image is orginal :\nhttps://user-images.githubusercontent.com/3762571/33252701-ade15764-d37a-11e7-93a7-9c9d057d9949.png\nyou can try it \n. I don't think so ,It maybe depend on the image  dimension (width and height)\nI have tried many icons on my project , they are all have less compression.\naaa.zip\nthanks for your replay!. ",
    "realgeek": "OK, thanks.. ",
    "littleboss": "thanks for your reply, is there any way to keep the same output for my different versions?  for example, as you said \"with or without support for color profiles\" ? With different output, i must update many files online. thanks. thanks, i met a new issue, i use same pngquant version under different macosx version(10.12 and  10.13), the same resources produce different outputs, maybe because of different xcode version. ",
    "ericcobia": "I have the same issue. when i select ANY quality option, --quality=0-45, 60-80, anything i get grayscale images instead of palette/ index color\nit works correctly without a quality specified. Hello\ni have the most current version 2.11\nyesterday i recompiled with libpng 1.6.27 \nbefore it was 1.2.54 since I'm on ubuntu 16.04\neven with the recompile, oddly i get lots of these too so i wonder if its something else\n*** Error in `/usr/local/bin/pngquant': malloc(): memory corruption:\nmy code is:\n                if (true) {\n                //$pngquant_source = escapeshellarg($chosenVariationFile);\n                //$pngquant_destination = escapeshellarg(CTD_BASE_PATH.'/clipart/'.$fileNameOnly.'.png');                           \n            $iM = \"/usr/local/bin/pngquant\".\" \".\n            \" \". //defineing colors - can be blank?\n\n            \"--force \". //force file OVERWRITE\n        //  \"--ext .png \". //save to same file name // comment this out for the item below -- output \n    //      \"--quality 60-80 \". //quality range - enabling this causes grayscale images instead of index pallette ones\n            \"--speed 8 \". //speed default is 3,  11 is super fast, 10 is 8x faster than deafult of 3\n            \"--nofs \". // disable dithering - maybe faster\n            \"--output \". escapeshellarg($new_source_full).\" \". //must be before input, save to same file name \n            escapeshellarg($new_source_full).\" \"; ///input file goes last\n\n            $exec_return = exec($iM);\n            }\n\nThank You!\n--\nEric Hilferding\nPresident\nClassB.com http://classb.com/\n9437 Corporate Lake Drive\nTampa, FL 33634\n1-800-851-4020\nMy direct extension is 101\neric@classb.com eric@classb.com\nClassB\u00ae now offers Embroidered patches! Custom Embroidered Patches from ClassB http://www.classb.com/patches/\nIf I can be of any assistance, please call or email me.\n\nOn Feb 28, 2018, at 9:34 PM, Kornel notifications@github.com wrote:\nMake sure you have pngquant 2.\nSome outdated Linux distributions still have pngquant from late '90s, which doesn't support the quality option, and has very low quality output.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/kornelski/pngquant/issues/287#issuecomment-369454563, or mute the thread https://github.com/notifications/unsubscribe-auth/AjOj8rR882mn5jR7OuwKB5NKZFuPrWfEks5tZ14egaJpZM4R0uYo.\n\n\n. ",
    "anthonyaam": "Closing this issue and opening one in the node-pngquant repo.. ",
    "petemcbide": "Firefox 58.0.2 & 59.0. I've tested the image using the Pngyu 1.0.1, I think that uses PNGQuant 1.8.1 and it works fine, no colour shift. \n\n. I'll take it as Firefox bug (it seem to have a few rendering issues), that'll disappear in the next release. Meanwhile, I've got a reliable workaround for now. Thanks for the quick response. PNGQuant is great.. ",
    "pointerphile": "Tested again in\nCommand Prompt(cmd.exe)\nWindows 10\nVisual Studio 2017\nand the wildcard *works great.\nOkay, I'll try to figure out the solution in Xcode myself.\nThank you.. I'm sorry, but I don't understand this words : \"GPL applies only to that executable\".. Understood.\nThank you for your help.. ",
    "vivekdhiman": "This works fine if I do via command line. Hence I don't think image is corrupt. PFA.\nThanks,\n\n\n. ",
    "powof2": "Thanks for the reply,  kornelski.\nI prefer first one (premultiplied alpha), most of the textures can be done off-line, while some can not, for example, font, user profile pictures. Considering the fact that adding padding colors wont solve the bleeding problem thoroughly, i'll try the premultiplied alpha method. thank you for the link.. ",
    "linchenrr": "I have got the same problem.\nversion 2.11.7\nrun the test.bat\npngquant.zip\n. thanks, I have done it by using StandardInput and StandardOutput.\nproblem solved!. ",
    "chrissimpkins": "It looks like your original image is an 8-bit PNG with 111 colors.  With those quality range settings, pngquant is dropping the image file to a 2-bit PNG with 3 colors.  \nOK: map-460.png (920x2420, 8-bit palette, non-interlaced, 97.3%).\nOK: map-460-quality65-80.png (920x2420, 2-bit palette, non-interlaced, 95.3%)\nIt looks like you are instructing pngquant to be \"too\" lossy with this command for this image.\nHere is Kornel's documentation on the --quality flag:\n--quality min-max          don't save below min, use fewer colors below max (0-100)\nTry increasing the upper bound of the range that instructs pngquant to decrease the color number to reduce image quality below your defined level.  If I run the following on your original file (note increased upper bound):\n$ pngquant --quality=65-90 map-460.png\nI get a 2-bit PNG file with 4 colors and the red color is present again.  The file is under 100 bytes larger than your optimized version with quality settings range 65-80.\n\n. > We'll take larger files over inaccurate journalism!\n@sjwilliams Your readers will appreciate the extra effort to make them as small as possible without perceptible loss of quality though, particularly all of those readers on mobile devices.\n. ",
    "sjwilliams": "@chrissimpkins, @kornelski Thanks for the info!\nSo  --quality=65-100 will never change our graphics in a meaningful way, with the tradeoff being larger file sizes than the settings we currently have. Thanks for the clarification. We'll take larger files over inaccurate journalism! \n. ",
    "wojciechrak": "Yeah, I've thought about that after posting this issue.\nBut then, you can't confirm you have the correct version, since the command with lowercase -v does not print version number. Maybe you could put both variants on the website to make it clear.. Hmm, I don't see it...\nMaybe because in Ubuntu repo, the latest version is 2.5.0.\nBut that's the whole point, right? To check the version from official repos and see if it's outdated ;-)\n```\n$ pngquant -v\nNo input files specified.\nusage:  pngquant [options] [ncolors] -- pngfile [pngfile ...]\n        pngquant [options] [ncolors] - >stdout <stdin\noptions:\n  --force           overwrite existing output files (synonym: -f)\n  --skip-if-larger  only save converted files if they're smaller than original\n  --output file     output path, only if one input file is specified (synonym: -o)\n  --ext new.png     set custom suffix/extension for output filenames\n  --quality min-max don't save below min, use fewer colors below max (0-100)\n  --speed N         speed/quality trade-off. 1=slow, 3=default, 11=fast & rough\n  --nofs            disable Floyd-Steinberg dithering\n  --posterize N     output lower resolution color (e.g. for ARGB4444 output)\n  --verbose         print status messages (synonym: -v)\nQuantizes one or more 32-bit RGBA PNGs to 8-bit (or smaller) RGBA-palette\nPNGs using Floyd-Steinberg diffusion dithering (unless disabled).\nThe output filename is the same as the input name except that\nit ends in \"-fs8.png\", \"-or8.png\" or your custom extension (unless the\ninput is stdin, in which case the quantized image will go to stdout).\nThe default behavior if the output file exists is to skip the conversion;\nuse --force to overwrite. See man page for full list of options.\n\n$ pngquant -V\n2.5.0 (June 2015)\n```. ",
    "datermine": "I noticed --strip wasn't available. I'm on v2.5, but that's what I'm getting with sudo apt-get install pngquant.\nIs there a better way to get v2.12. ",
    "stravik": "I see, that makes sense.\nThanks for a quick answer!. ",
    "sianhulo": "Yeah, I forgot the setting existed, though I have actually have it in my alias, simply because, as you said, it is disabled by --force.. ",
    "atnbueno": "Thanks for the update to 2.12.0, but I have a script to check if there are new versions of programs like yours (single .exe, no installer) and I don't see where to get the version of the most recent release for Windows other than the text \"Binary for Windows (v2.12.2)\" in https://pngquant.org/#download\n\nIs there any other way I can get the real version of the Windows binary? (other than, of course, download the pngquant-windows.zip file, decompress and run the program to get it)\nRight now I have it working because I've configured it to ignore the third number in the version, but that's a hack, not a solution.\nP.S. Also tried with Sigcheck but no useful info there either.. I'm sorry I wasn't clear. I meant either the website or GitHub. Right now the website says \"Binary for Windows (v2.12.2)\" and the file linked says \"pngquant, 2.12.0 (January 2018), by Kornel Lesinski, Greg Roelofs.\" so I had to make my script to use only \"2.12\" as the last version and it won't detect any \"2.12.x\" update.\nThe Sigcheck mention was in case there was an internal field (like \"Product version\") with the real version.\nBTW, the Windows version says -v is a synonym for --verbose.\n[EDIT] Oh, I see, in Windows the option to get the version is -V (uppercase) or --version. [/EDIT]. ",
    "ascorbic": "The docs say that the default is 3 though. Those examples show that it's not, and is actually more compressed than that. What is the value that it's using?. It makes sense insasmuch as it is clearly compressing it more than speed = 1. It's not just when --speed 0 is specified though: it's also if the speed flag is omitted. It might be fair to say that most users are getting the \"invalid\" speed of 0.\nThe \"correct\" behaviour should be to set speed to 3 if --speed is 0 or missing. Unfortunately this would be a breaking change, as everyone would then get a different result from the previous one. I encountered this error working with gatsby-plugin-sharp, which uses imagemin-pngquant under the hood. Manually setting --speed 3 broke all of the snapshot tests.. ",
    "ubone": "there is no 0 in the docs - the values go from 1 to 11\n$ pngquant --ext -default.png Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage.png\n$ pngquant -s 0 --ext -0.png Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage.png\n$ pngquant -s 1 --ext -1.png Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage.png\n$ pngquant -s 3 --ext -3.png Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage.png\n$ pngquant -s 8 --ext -8.png Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage.png\n$ /bin/du Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage*\n3368    Screenshot_2018-11-12 Google - Wikipedia-fullpage-0.png\n3320    Screenshot_2018-11-12 Google - Wikipedia-fullpage-1.png\n3336    Screenshot_2018-11-12 Google - Wikipedia-fullpage-3.png\n4580    Screenshot_2018-11-12 Google - Wikipedia-fullpage-8.png\n3368    Screenshot_2018-11-12 Google - Wikipedia-fullpage-default.png\n6108    Screenshot_2018-11-12 Google - Wikipedia-fullpage.png\n$ /bin/md5sum Screenshot_2018-11-12\\ Google\\ -\\ Wikipedia-fullpage*\nb661a5938608e977855159764c09cbb4  Screenshot_2018-11-12 Google - Wikipedia-fullpage-0.png\n665c7baaac911ea05e18990c09dbae30  Screenshot_2018-11-12 Google - Wikipedia-fullpage-1.png\n4547455a2441f0bed3c485f48c00c2aa  Screenshot_2018-11-12 Google - Wikipedia-fullpage-3.png\nf11aa39b63f34fd61c9eb65163f5cdaf  Screenshot_2018-11-12 Google - Wikipedia-fullpage-8.png\nb661a5938608e977855159764c09cbb4  Screenshot_2018-11-12 Google - Wikipedia-fullpage-default.png\n6f178400d31ea3c6eb285ea3a274e9ad  Screenshot_2018-11-12 Google - Wikipedia-fullpage.png\n$ pngquant -V\n2.12.2 (January 2018). ",
    "yedajiang44": "@kornelski Can you will add cmake files for this library?will makes it easier to compile into as a .so or .a file.\nlike libjpeg-turbo. ",
    "gholias": "@Danny182 were you able to make that work? I'm also interested in use it in an ios app. ",
    "DanielZanchi": "I didn\u2019t try since it\u2019s GPL . ",
    "mfoliveira": "Thank you, Kornel.\nIf you'd like any assistance with publishing into the snap store [1] (and there's an auto-build/publish feature available! [2]), please just let us know.\ncheers,\nMauricio\n[1] \"Share with your friends\" in https://docs.snapcraft.io/c-c-applications/7817\n[2] https://snapcraft.io/build\n. Kornel,\nI'm afraid I cannot publish it on your behalf, for legal and possibly other reasons, but the steps required look straighforward [1]:\nCreate a developer account on [2], snapcraft login, snapcraft register pngquant, and snapcraft push pngquant_*.snap.\nI do can help with questions, specially related to the build steps described, and the team that develops Snap and the Snap Store should be available to assist on more Snap/Store-specific questions.\nPlease just let us know the steps you may have questions/need help or clarification with, and we'll follow up. :-)\nThanks!\n[1] \"Share with your friends\" in https://docs.snapcraft.io/c-c-applications/7817\n[2] https://dashboard.snapcraft.io/register-snap/. Great news! :-). ",
    "klrian": "all right! thanks!. "
}